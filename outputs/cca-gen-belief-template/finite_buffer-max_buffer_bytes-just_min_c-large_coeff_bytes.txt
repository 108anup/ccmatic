[01/09 16:52:05]  Namespace(infinite_buffer=False, finite_buffer=True, dynamic_buffer=False)
[01/09 16:52:05]  --------------------------------------------------------------------------------
[01/09 16:52:05]  Iteration: 1 (0 solution, 0 counterexamples)
[01/09 16:52:05]  Generator returned sat in 0.007563 secs.
[01/09 16:52:05]  Candidate solution: 
[1m[94mif (+ 10 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 10 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -8 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 16:52:07]  Improved gap from 8.5 to 48.4375
[01/09 16:52:07]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 16:52:07]  Verifer returned sat in 1.797897 secs.
[01/09 16:52:07]  sf_get_cex returned in 1.918047 secs.
[01/09 16:52:07]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0         -101.406250         -117.328125       -101.406250       0.500000       0.500000       -117.328125             0.0                     0.0        75.53125           100.0                2.0                4.0                  2.0                  2.5         0.0000              151.0625                 250.0  15.921875       10.171875       3.0
1          -63.640625         -111.578125        -63.640625   37781.546875      37.765625       -111.578125             0.0                     0.0        75.53125           100.0                2.0                4.0                  2.0                  2.5        51.5625              151.0625                 250.0  47.937500       -0.500000       3.0
2          -25.875000          -63.140625        -25.875000   37813.562500      37.765625        -63.140625             0.0                     0.0        75.53125           100.0                0.0                1.0                  2.0                  2.5       103.1250              151.0625                 250.0  37.265625      -11.171875       0.0
3           11.890625          -14.703125         11.890625   37802.890625      37.765625        -14.703125             0.0                     0.0        75.53125           100.0                0.0                1.0                  2.0                  2.5       154.6875              151.0625                 250.0  26.593750      -21.843750       0.0
4           49.656250           33.734375         49.656250   37792.218750      37.765625         33.734375             0.0                     0.0        75.53125           100.0                0.0                1.0                  2.0                  2.5       206.2500              151.0625                 250.0  15.921875      -32.515625       0.0
5           87.421875           82.171875         87.421875   37781.546875      37.765625         82.171875             0.0                     0.0        75.53125           100.0                0.0                1.0                  2.0                  2.5       206.2500              151.0625                 250.0   5.250000      -94.750000       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1/2, buf_size=200.[0m
[01/09 16:52:07]  --------------------------------------------------------------------------------
[01/09 16:52:07]  Iteration: 2 (0 solution, 1 counterexamples)
[01/09 16:52:08]  Generator returned sat in 0.669315 secs.
[01/09 16:52:08]  Candidate solution: 
[1m[94mif (+ -2min_c + -2max_c + -3/2min_buffer_bytes + 2max_buffer_bytes + -10 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 2max_c + 2min_buffer_bytes + -2max_buffer_bytes + 9 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_c + 2max_c + -2min_buffer_bytes + 1max_buffer_bytes + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 16:52:18]  Improved gap from 48.4375 to 100
[01/09 16:52:20]  Improved number of small numbers from 81 to 88 out of a max of 134
[01/09 16:52:20]  Verifer returned sat in 12.160935 secs.
[01/09 16:52:20]  sf_get_cex returned in 12.266024 secs.
[01/09 16:52:20]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -226073.505141      -226341.946354    -226073.505141       0.500000       0.500000    -226341.946354        0.000000                0.000000       88.779393      153.885742                1.0                3.0                  1.0             2.041992     206.249756             88.779393            314.233483  268.441214      183.441214       2.0
1      -225965.225748      -226163.387568    -225965.225748  108547.834433     108.279393    -226163.387568        0.000000                0.000000       89.279393      153.885742                0.0                2.0                  1.0             2.041992     206.249756             89.279393            314.233483  198.161820      191.720607       1.0
2      -225856.446354      -226136.505141    -225856.446354  108977.555040     108.779393    -226136.505141        0.500000                0.000000       89.279393      153.885742                1.0                3.0                  1.0             2.041992     206.249756             89.279393            314.233483  279.558786      200.000000       2.0
3      -225747.666961      -225956.946354    -225747.666961  109059.452006     108.779393    -225956.946354        9.279393                0.500000       96.250000      153.885742                0.0                2.0                  1.0             2.000000     206.249756             96.250000            307.771484  200.000000      200.000000       1.0
4      -225631.916961      -225856.946354    -225631.916961  115959.279393     115.750000    -225856.946354       25.029393                9.279393       97.000000      153.220607                1.0                3.0                  1.0             2.000000     206.249756             97.000000            306.441214  200.000000      200.000000       2.0
5      -225515.416961      -225756.946354    -225515.416961  116725.029393     116.500000    -225756.946354       41.529393               25.029393       97.500000      135.480405                1.0                3.0                  1.0             2.000000     206.249756             97.500000            270.960809  200.000000      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=27548552063/663350700, alpha=39/2, buf_size=200.[0m
[01/09 16:52:20]  --------------------------------------------------------------------------------
[01/09 16:52:20]  Iteration: 3 (0 solution, 2 counterexamples)
[01/09 16:52:22]  Generator returned sat in 1.626446 secs.
[01/09 16:52:22]  Candidate solution: 
[1m[94mif (+ 1max_qdel + 1max_buffer + -5 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -1max_qdel + -1max_buffer + 9 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1max_qdel + -1min_buffer + 1max_buffer + -2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 16:52:25]  Improved number of small numbers from 74 to 79 out of a max of 133
[01/09 16:52:25]  Verifer returned sat in 2.955538 secs.
[01/09 16:52:25]  sf_get_cex returned in 3.066289 secs.
[01/09 16:52:25]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -225956.951082      -226256.951082    -225956.951082       0.499756       0.499756    -226256.951082        0.000000                0.000000       50.025057      149.995117                2.0                4.0                  2.0                  2.0     206.249756            100.050113            299.990234  300.000000           200.0       3.0
1      -225856.900968      -226106.957384    -225856.900968  100350.113141     100.050113    -226106.957384        0.050113                0.000000       74.996849      149.995117                2.0                4.0                  2.0                  2.0     206.249756            149.993697            299.990234  250.006303           200.0       3.0
2      -225706.907271      -226056.927446    -225706.907271  150243.753670     149.993697    -226056.927446       50.043810                0.050113       74.996849      149.995117                2.0                4.0                  2.0                  2.0     206.249756            149.993697            299.990234  299.976365           200.0       3.0
3      -225556.913574      -225956.951082    -225556.913574  150343.717429     149.993697    -225956.951082      100.037508               50.043810       75.000000      149.995117                2.0                4.0                  2.0                  2.0     206.249756            150.000000            299.990234  300.000000           200.0       3.0
4      -225406.913574      -225757.026714    -225406.913574  150400.037508     150.000000    -225757.026714      150.037508              100.037508       99.984873      149.995117                1.0                3.0                  2.0                  2.0     206.249756            199.969747            299.990234  200.075633           200.0       2.0
5      -225306.913574      -225756.946354    -225306.913574  100350.113141     100.000000    -225756.946354      150.037508              150.037508       99.984873      116.670343                1.0                3.0                  2.0                  2.0     206.249756            199.969747            233.340687  299.995273           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=4, loss_amount=23797150/158661, alpha=800/52887, buf_size=200.[0m
[01/09 16:52:25]  --------------------------------------------------------------------------------
[01/09 16:52:25]  Iteration: 4 (0 solution, 3 counterexamples)
[01/09 16:52:27]  Generator returned sat in 1.784282 secs.
[01/09 16:52:27]  Candidate solution: 
[1m[94mif (+ 1/2max_c + -1/2min_buffer_bytes + 10 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -3/2min_c + 2min_buffer_bytes + -1/2max_buffer_bytes + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_qdel + 1min_buffer + 6 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 16:52:38]  Improved gap from 0.0 to 48.4375
[01/09 16:52:39]  Improved number of small numbers from 102 to 106 out of a max of 134
[01/09 16:52:39]  Verifer returned sat in 11.555956 secs.
[01/09 16:52:39]  sf_get_cex returned in 11.671210 secs.
[01/09 16:52:39]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -225678.163574      -225686.632512    -225678.163574       0.499512       0.499756    -225686.632512        0.031439                0.000000            60.0           100.0                2.0                4.0                  2.0             3.051667       5.416504                 120.0            305.166667   8.437500        8.020915       3.0
1      -225637.746907      -225686.215846    -225637.746907   40425.135605      40.416667    -225686.215846        0.031439                0.031439            60.0           100.0                2.0                4.0                  2.0             3.051667      56.978923                 120.0            305.166667  48.437500        0.000000       3.0
2      -225597.330241      -225637.778346    -225597.330241   40465.135605      40.416667    -225637.778346        0.031439                0.031439            60.0           100.0                0.0                2.0                  2.0             3.051667     108.541260                 120.0            305.166667  40.416667       -8.020996       1.0
3      -225556.913574      -225583.924179    -225556.913574   40457.114772      40.416667    -225583.924179        0.031439                0.031439            60.0           100.0                0.0                1.0                  2.0             3.051667     154.687256                 120.0            305.166667  26.979167      -21.458333       0.0
4      -225516.496907      -225535.486679    -225516.496907   40443.677272      40.416667    -225535.486679        0.031439                0.031439            60.0           100.0                0.0                1.0                  2.0             3.051667     206.249756                 120.0            305.166667  18.958333      -29.479167       0.0
5      -225476.080241      -225487.049072    -225476.080241   40435.656439      40.416667    -225487.049072        0.031439                0.031439            60.0           100.0                0.0                1.0                  2.0             3.051667     257.812012                 120.0            305.166667  10.937393      -37.500244       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=235/12, buf_size=200.[0m
[01/09 16:52:39]  --------------------------------------------------------------------------------
[01/09 16:52:39]  Iteration: 5 (0 solution, 4 counterexamples)
[01/09 16:52:42]  Generator returned sat in 2.003465 secs.
[01/09 16:52:42]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2min_buffer_bytes + 1max_buffer_bytes + 2 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ 3/2min_c + 1/2min_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_qdel + 1max_buffer > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 16:53:04]  Improved number of small numbers from 99 to 102 out of a max of 133
[01/09 16:53:04]  Verifer returned sat in 22.111073 secs.
[01/09 16:53:04]  sf_get_cex returned in 22.227518 secs.
[01/09 16:53:04]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -226131.021705      -226330.769074    -226131.021705       0.499512       0.499512    -226330.769074        0.000000                0.000000       50.105263      149.515625                2.0                4.0                  2.0             2.496826      649.96965            100.210526            373.314526  199.747368      199.747368       3.0
1      -226030.811179      -226255.895389    -226030.811179  100410.273684     100.210526    -226255.895389        0.000000                0.000000       50.105263      149.515625                0.0                2.0                  2.0             2.496826      649.96965            100.210526            373.314526  225.084211      199.957895       1.0
2      -225930.600653      -226180.326968    -225930.600653  100435.610526     100.210526    -226180.326968        0.168421                0.000000       50.147368      149.515625                1.0                3.0                  2.0             2.496826      649.96965            100.294737            373.314526  249.557895      200.000000       2.0
3      -225830.305916      -226030.769074    -225830.305916  100544.463158     100.294737    -226030.769074        0.463158                0.168421       75.042105      149.515625                0.0                2.0                  2.0             2.000000      649.96965            150.084211            299.031250  200.000000      200.000000       1.0
4      -225680.221705      -225953.116442    -225680.221705  150284.673684     150.084211    -225953.116442       50.547368                0.463158       75.736842      149.515625                1.0                3.0                  2.0             2.000000      649.96965            151.473684            299.031250  222.347368      200.000000       2.0
5      -225528.748021      -225881.211179    -225528.748021  151746.578947     151.473684    -225881.211179      102.021053               50.547368       75.736842      124.894737                1.0                3.0                  2.0             2.000000      649.96965            151.473684            249.789474  250.442105      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=4, loss_amount=9692/95, alpha=4/95, buf_size=200.[0m
[01/09 16:53:04]  --------------------------------------------------------------------------------
[01/09 16:53:04]  Iteration: 6 (0 solution, 5 counterexamples)
[01/09 16:53:07]  Generator returned sat in 2.811185 secs.
[01/09 16:53:07]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + 1min_buffer + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1/2min_buffer_bytes + 5 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 16:53:30]  Improved gap from 19.11111111111111 to 48.4375
[01/09 16:53:31]  Improved number of small numbers from 89 to 93 out of a max of 134
[01/09 16:53:31]  Verifer returned sat in 23.986239 secs.
[01/09 16:53:31]  sf_get_cex returned in 24.101339 secs.
[01/09 16:53:31]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -174478.478109      -174478.977621    -174478.478109       0.499512       0.499268    -174478.977621        0.499268                0.000000       79.800195           100.0                0.0                2.0                  0.0                  2.0     449.469971                   0.0                 200.0   0.000244        0.000076       1.0
1      -174438.578012      -174473.227133    -174438.578012   39900.597168      39.900098    -174473.227133        0.499268                0.499268       79.800195           100.0                0.0                1.0                  0.0                  1.0     495.282150                   0.0                 100.0  34.149854      -14.287646       0.0
2      -174398.677914      -174424.789633    -174398.677914   39934.746777      39.900098    -174424.789633        0.499268                0.499268       79.800195           100.0                0.0                1.0                  0.0                  1.0     546.844650                   0.0                 100.0  25.612451      -22.825049       0.0
3      -174358.777816      -174376.352133    -174358.777816   39926.209375      39.900098    -174376.352133        0.499268                0.499268       79.800195           100.0                0.0                1.0                  0.0                  1.0     598.407150                   0.0                 100.0  17.075049      -31.362451       0.0
4      -174318.877719      -174327.914633    -174318.877719   39917.671973      39.900098    -174327.914633        0.499268                0.499268       79.800195           100.0                0.0                1.0                  0.0                  1.0     649.969650                   0.0                 100.0   8.537646      -39.899854       0.0
5      -174278.977621      -174279.477051    -174278.977621   39909.134570      39.900098    -174279.477051        0.499268                0.499268       79.800195           100.0                0.0                1.0                  0.0                  1.0     649.969727                   0.0                 100.0   0.000162      -99.999680       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1023/2048, buf_size=200.[0m
[01/09 16:53:31]  --------------------------------------------------------------------------------
[01/09 16:53:31]  Iteration: 7 (0 solution, 6 counterexamples)
[01/09 16:53:36]  Generator returned sat in 4.095158 secs.
[01/09 16:53:36]  Candidate solution: 
[1m[94mif (+ 2min_c + -1/2max_c + 3/2min_buffer_bytes + -4 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 2min_buffer_bytes + -1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -3/2min_c + -1max_c + -1min_buffer_bytes + -1max_buffer_bytes + -5 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/09 16:56:16]  Improved gap from 0.0 to 48.4375
[01/09 16:56:17]  Improved number of small numbers from 85 to 96 out of a max of 134
[01/09 16:56:17]  Verifer returned sat in 161.204842 secs.
[01/09 16:56:17]  sf_get_cex returned in 161.319269 secs.
[01/09 16:56:17]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -363424.004442      -363424.004442    -363424.004442       0.499268       0.499023    -363424.004442             0.0                     0.0       25.192415      168.346924                1.0                3.0                  1.0             2.204102  189394.497070             25.192415            371.053718   0.000000       -0.000047       2.0
1      -363373.619613      -363422.669130    -363373.619613   50384.829377      50.384829    -363422.669130             0.0                     0.0       25.192415      168.346924                0.0                1.0                  1.0             2.204102  189443.908447             25.192415            371.053718  49.049518       -0.203841       0.0
2      -363323.234783      -363373.415607    -363323.234783   50433.878895      50.384829    -363373.415607             0.0                     0.0       25.192415      168.346924                0.0                1.0                  1.0             2.204102  189493.004395             25.192415            371.053718  50.180823       -0.723064       0.0
3      -363272.849954      -363322.511489    -363272.849954   50435.010200      50.384829    -363322.511489             0.0                     0.0       33.385880      168.346924                0.0                1.0                  1.0             2.204102  189543.138672             33.385880            371.053718  49.661536       -0.203958       0.0
4      -363239.464073      -363272.645948    -363239.464073   33435.541852      33.385880    -363272.645948             0.0                     0.0       37.505796      168.346924                0.0                1.0                  1.0             2.204102  189594.701124             37.505796            371.053718  33.181874      -15.255626       0.0
5      -363201.958278      -363224.208448    -363201.958278   37538.977498      37.505796    -363224.208448             0.0                     0.0       39.692136      168.346924                0.0                1.0                  1.0             2.204102  189594.701172             39.692136            371.053718  22.250170      -77.749782       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=81085/4096, buf_size=200.[0m
[01/09 16:56:18]  --------------------------------------------------------------------------------
[01/09 16:56:18]  Iteration: 8 (0 solution, 7 counterexamples)
[01/09 16:56:19]  Generator returned sat in 0.491422 secs.
[01/09 16:56:19]  Candidate solution: 
[1m[94mif (+ 2min_c + -1/2max_c + 3/2min_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 2min_buffer_bytes + -1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -3/2min_c + -1max_c + -1min_buffer_bytes + -1max_buffer_bytes + -5 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/09 16:57:51]  Improved gap from 48.4375 to 48.4375
[01/09 16:57:53]  Improved number of small numbers from 88 to 93 out of a max of 134
[01/09 16:57:53]  Verifer returned sat in 94.044537 secs.
[01/09 16:57:53]  sf_get_cex returned in 94.153773 secs.
[01/09 16:57:53]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -420995.495915      -420995.994939    -420995.495915       0.499023       0.498779    -420995.994939        0.498779                0.000000       24.202116       237.68457                2.0                4.0                  2.0                  2.0  237862.736328             48.404232            475.369141   0.000244       -0.165916       3.0
1      -420947.091684      -420995.828598    -420947.091684   48404.730794      48.404232    -420995.828598        0.498779                0.498779       24.202116       237.68457                0.0                1.0                  2.0                  1.0  237914.298584             48.404232            237.684570  48.238135       -0.199428       0.0
2      -420898.687452      -420947.091684    -420898.687452   48452.968685      48.404232    -420947.091684        0.498779                0.498779       24.368457       237.68457                0.0                1.0                  2.0                  1.0  237960.442871             48.736914            237.684570  47.905452       -5.650909       0.0
3      -420849.950538      -420893.535303    -420849.950538   48785.318294      48.736914    -420893.535303        0.498779                0.498779       34.097765       237.68457                0.0                1.0                  2.0                  1.0  238012.005353             68.195530            237.684570  43.085986       -5.351514       0.0
4      -420815.852773      -420845.097803    -420815.852773   34141.349523      34.097765    -420845.097803        0.498779                0.498779       37.682699       237.68457                0.0                1.0                  2.0                  1.0  238063.068848             75.365397            237.684570  28.746251      -20.190254       0.0
5      -420778.170074      -420796.161280    -420778.170074   37711.943598      37.682699    -420796.161280        0.498779                0.498779       39.933464       237.68457                0.0                1.0                  2.0                  1.0  238063.068848             79.866927            237.684570  17.492426      -82.507555       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=511/1024, buf_size=200.[0m
[01/09 16:57:53]  --------------------------------------------------------------------------------
[01/09 16:57:53]  Iteration: 9 (0 solution, 8 counterexamples)
[01/09 16:58:16]  Generator returned sat in 21.827678 secs.
[01/09 16:58:16]  Candidate solution: 
[1m[94mif (+ 3/2min_c + 1/2max_c + -1/2min_buffer_bytes + -8 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -2min_c + -3/2max_c + -7 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -2min_c + 1min_buffer_bytes + -1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 16:58:47]  Improved gap from 9.649122807017545 to 48.4375
[01/09 16:58:48]  Improved number of small numbers from 101 to 102 out of a max of 134
[01/09 16:58:48]  Verifer returned sat in 32.284981 secs.
[01/09 16:58:48]  sf_get_cex returned in 32.401430 secs.
[01/09 16:58:48]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -421107.469658      -421125.816545    -421107.469658       0.498779       0.498535    -421125.816545             0.0                     0.0       36.328125           100.0                0.0                2.0                  0.0             2.987946  237863.062500              0.000000              298.7946  18.346887       18.346784       1.0
1      -421071.141533      -421119.597764    -421071.141533   36346.471887      36.328125    -421119.597764             0.0                     0.0       36.328125           100.0                1.0                3.0                  1.0             2.987946  237908.381348             36.328125              298.7946  48.456231       -0.006244       2.0
2      -421034.813408      -421071.135289    -421034.813408   36376.581231      36.328125    -421071.135289             0.0                     0.0       36.328125           100.0                0.0                1.0                  1.0             2.987946  237959.943848             36.328125              298.7946  36.321881      -12.115619       0.0
3      -420998.485283      -421022.697789    -420998.485283   36364.446881      36.328125    -421022.697789             0.0                     0.0       36.328125           100.0                0.0                1.0                  1.0             2.987946  238011.506348             36.328125              298.7946  24.212506      -24.224994       0.0
4      -420962.157158      -420974.260289    -420962.157158   36352.337506      36.328125    -420974.260289             0.0                     0.0       36.334369           100.0                0.0                1.0                  1.0             2.987946  238063.068848             36.334369              298.7946  12.103131      -36.334369       0.0
5      -420925.822789      -420925.822789    -420925.822789   36346.471887      36.334369    -420925.822789             0.0                     0.0       38.754995           100.0                0.0                1.0                  1.0             2.987946  238063.068848             38.754995              298.7946   0.000000     -100.000000       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=49/4096, buf_size=200.[0m
[01/09 16:58:48]  --------------------------------------------------------------------------------
[01/09 16:58:48]  Iteration: 10 (0 solution, 9 counterexamples)
[01/09 16:59:11]  Generator returned sat in 22.346258 secs.
[01/09 16:59:11]  Candidate solution: 
[1m[94mif (+ -1/2min_c + 1/2min_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -1min_qdel + 1min_buffer + -1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 16:59:24]  Improved gap from 0.0 to 100
[01/09 16:59:25]  Improved number of small numbers from 86 to 86 out of a max of 134
[01/09 16:59:25]  Verifer returned sat in 13.382691 secs.
[01/09 16:59:25]  sf_get_cex returned in 13.500348 secs.
[01/09 16:59:25]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -471264.909876      -471465.283777    -471264.909876       0.498779       0.498535    -471465.283777        0.498535                0.000000       50.311584           100.0                0.0                1.0                  0.0                  2.0  288202.529836                   0.0                 200.0  199.875366      199.875366       0.0
1      -471164.286707      -471465.283777    -471164.286707  100823.542847     100.623169    -471465.283777        0.997070                0.498535       50.311584           100.0                0.0                1.0                  0.0                  1.0  288202.529836                   0.0                 100.0  300.000000      200.000000       0.0
2      -471114.099756      -471265.283777    -471114.099756   50487.947754      50.186951    -471265.283777        0.997070                0.997070      100.000000           100.0                0.0                2.0                  0.0                  1.0  288202.529836                   0.0                 100.0  150.186951      150.186951       1.0
3      -470914.099756      -471265.283777    -470914.099756  200151.184021     200.000000    -471265.283777       51.184021                0.997070      100.000000           100.0                0.0                2.0                  0.0                  1.0  288202.529836                   0.0                 100.0  300.000000      200.000000       1.0
4      -470714.099756      -471065.283777    -470714.099756  200351.184021     200.000000    -471065.283777      151.184021               51.184021      100.000000           100.0                0.0                2.0                  0.0                  1.0  288202.529836                   0.0                 100.0  200.000000      200.000000       1.0
5      -470514.099756      -471065.283777    -470514.099756  200351.184021     200.000000    -471065.283777      251.184021              151.184021      100.000000           100.0                0.0                2.0                  0.0                  1.0  288202.529836                   0.0                 100.0  300.000000      200.000000       1.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, 
, large_loss_count=4, loss_amount=4099063/16384, alpha=1021/8192, buf_size=200.[0m
[01/09 16:59:25]  --------------------------------------------------------------------------------
[01/09 16:59:25]  Iteration: 11 (0 solution, 10 counterexamples)
[01/09 17:00:43]  Generator returned sat in 76.959946 secs.
[01/09 17:00:43]  Candidate solution: 
[1m[94mif (+ 1/2min_c + -2min_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1min_qdel + -1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_c + -1max_c + -2min_buffer_bytes + -1max_buffer_bytes + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:01:05]  Improved gap from 4.695652173913044 to 100
[01/09 17:01:06]  Improved number of small numbers from 92 to 97 out of a max of 134
[01/09 17:01:06]  Verifer returned sat in 22.997131 secs.
[01/09 17:01:06]  sf_get_cex returned in 23.123209 secs.
[01/09 17:01:06]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -430420.012578      -430621.508184    -430420.012578       0.498779       0.498535    -430621.508184        0.000000                0.000000       50.249268      125.623047                1.0                3.0                  1.0             4.498291  288202.529836             50.249268            565.089023  201.495605           200.0       2.0
1      -430319.514043      -430520.012578    -430319.514043  100700.030762     100.498535    -430520.012578        0.498535                0.000000       50.747803      125.623047                0.0                2.0                  1.0             4.498291  288202.529836             50.747803            565.089023  200.000000           200.0       1.0
2      -430218.018437      -430470.760381    -430218.018437  101696.104004     101.495605    -430470.760381        1.994141                0.498535       50.747803      125.623047                1.0                3.0                  1.0             3.000000  288202.529836             50.747803            376.869141  250.747803           200.0       2.0
3      -430116.522832      -430354.509160    -430116.522832  101748.347412     101.495605    -430354.509160        3.489746                1.994141       66.749756      125.623047                1.0                3.0                  1.0             3.000000  288202.529836             66.749756            376.869141  234.496582           200.0       2.0
4      -429983.023320      -430220.012578    -429983.023320  133737.498047     133.499512    -430220.012578       36.989258                3.489746       83.582601      125.623047                1.0                3.0                  1.0             3.000000  288202.529836             83.582601            376.869141  200.000000           200.0       2.0
5      -429815.858118      -430219.514043    -429815.858118  167402.191081     167.165202    -430219.514043      104.154460               36.989258       83.582601      100.166178                1.0                3.0                  1.0             3.000000  288202.529836             83.582601            300.498535  299.501465           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=1, loss_amount=318431/3072, alpha=39939/2048, buf_size=200.[0m
[01/09 17:01:06]  --------------------------------------------------------------------------------
[01/09 17:01:06]  Iteration: 12 (0 solution, 11 counterexamples)
[01/09 17:01:59]  Generator returned sat in 52.121876 secs.
[01/09 17:02:00]  Candidate solution: 
[1m[94mif (+ 1min_qdel + -1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1/2min_c + -1/2max_c + -1/2min_buffer_bytes + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_qdel + 1min_buffer + -2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 17:02:07]  Improved gap from 0.30120481927710846 to 48.4375
[01/09 17:02:07]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 17:02:07]  Verifer returned sat in 7.547577 secs.
[01/09 17:02:07]  sf_get_cex returned in 7.671466 secs.
[01/09 17:02:07]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -430182.026123      -430182.524658    -430182.026123       0.498779       0.498535    -430182.524658        0.498535                0.000000       49.750732           100.0                1.0                3.0                  1.0             2.501465  288202.529785             49.750732            250.146484   0.000000        0.000000       2.0
1      -430132.275391      -430182.026123    -430132.275391   49751.230957      49.750732    -430182.026123        0.498535                0.498535       49.750732           100.0                0.0                1.0                  1.0             1.000000  288252.779053             49.750732            100.000000  49.252197        0.000000       0.0
2      -430082.524658      -430132.773926    -430082.524658   49800.483154      49.750732    -430132.773926        0.498535                0.498535       49.750732           100.0                0.0                2.0                  1.0             1.000000  288303.028320             49.750732            100.000000  49.750732        0.000000       1.0
3      -430032.773926      -430082.524658    -430032.773926   49800.981689      49.750732    -430082.524658        0.498535                0.498535       49.750732           100.0                0.0                1.0                  1.0             1.000000  288353.277588             49.750732            100.000000  49.252197        0.000000       0.0
4      -429983.023193      -430031.959229    -429983.023193   49800.483154      49.750732    -430031.959229        0.498535                0.498535       49.750732           100.0                0.0                1.0                  1.0             1.000000  288403.526855             49.750732            100.000000  48.437500        0.000000       0.0
5      -429933.272461      -429983.023193    -429933.272461   49799.668457      49.750732    -429983.023193        0.498535                0.498535       49.750732           100.0                0.0                1.0                  1.0             1.000000  288403.526855             49.750732            100.000000  49.252197      -50.249268       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1021/2048, buf_size=200.[0m
[01/09 17:02:07]  --------------------------------------------------------------------------------
[01/09 17:02:07]  Iteration: 13 (0 solution, 12 counterexamples)
[01/09 17:03:23]  Generator returned sat in 74.969206 secs.
[01/09 17:03:24]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1max_c + 1/2min_buffer_bytes + -5 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 3/2min_c + 2max_c + -1min_buffer_bytes + -1/2max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:04:04]  Improved gap from 48.4375 to 48.4375
[01/09 17:04:04]  Improved number of small numbers from 109 to 134 out of a max of 134
[01/09 17:04:04]  Verifer returned sat in 40.465845 secs.
[01/09 17:04:04]  sf_get_cex returned in 40.575552 secs.
[01/09 17:04:04]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -409612.102295      -409612.102295    -409612.102295       0.498535       0.498535    -409612.102295             0.0                     0.0        49.43457           100.0                0.0                1.0                  0.0             3.498291  288247.838379                   0.0            349.829102   0.000000       -0.498291       0.0
1      -409563.166260      -409611.603760    -409563.166260   48936.035156      48.936035    -409611.603760             0.0                     0.0        49.43457           100.0                0.0                1.0                  0.0             3.498291  288299.400635                   0.0            349.829102  48.437500        0.000000       0.0
2      -409514.230225      -409562.667725    -409514.230225   48984.472656      48.936035    -409562.667725             0.0                     0.0        49.43457           100.0                0.0                1.0                  0.0             3.498291  288350.464600                   0.0            349.829102  48.437500        0.000000       0.0
3      -409465.294189      -409513.731689    -409465.294189   48984.472656      48.936035    -409513.731689             0.0                     0.0        49.43457           100.0                0.0                1.0                  0.0             3.498291  288401.528564                   0.0            349.829102  48.437500        0.000000       0.0
4      -409416.358154      -409464.795654    -409416.358154   48984.472656      48.936035    -409464.795654             0.0                     0.0        49.43457           100.0                0.0                1.0                  0.0             3.498291  288452.592529                   0.0            349.829102  48.437500        0.000000       0.0
5      -409367.422119      -409412.600830    -409367.422119   48984.472656      48.936035    -409412.600830             0.0                     0.0        49.43457           100.0                0.0                1.0                  0.0             3.498291  288500.397705                   0.0            349.829102  45.178711       -3.258789       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1021/2048, buf_size=200.[0m
[01/09 17:04:04]  --------------------------------------------------------------------------------
[01/09 17:04:04]  Iteration: 14 (0 solution, 13 counterexamples)
[01/09 17:04:12]  Generator returned sat in 6.728506 secs.
[01/09 17:04:12]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + -1min_buffer + 1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1/2max_c + 1/2min_buffer_bytes > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1/2min_c + 1max_c + -1min_buffer_bytes + -2max_buffer_bytes + 10 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 17:04:17]  Improved gap from 48.4375 to 100
[01/09 17:04:17]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 17:04:17]  Verifer returned sat in 4.951271 secs.
[01/09 17:04:17]  sf_get_cex returned in 5.060295 secs.
[01/09 17:04:17]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -409770.836670      -410054.824951    -409770.836670       0.498535       0.498535    -410054.824951        0.000000                0.000000       80.997070      241.994141                0.0                2.0                  0.0             2.501465  288607.071045              0.000000            605.339835  283.988281           200.0       1.0
1      -409670.338135      -409970.338135    -409670.338135  100782.523438     100.498535    -409970.338135        0.498535                0.000000       80.997070      241.994141                0.0                2.0                  0.0             2.501465  288607.071045              0.000000            605.339835  299.501465           200.0       1.0
2      -409569.839600      -409813.329346    -409569.839600  100798.535156     100.498535    -409813.329346        0.997070                0.498535       80.997070      241.994141                1.0                3.0                  1.0             2.501465  288607.071045             80.997070            605.339835  242.492676           200.0       2.0
3      -409469.341064      -409728.842529    -409469.341064  100742.024902     100.498535    -409728.842529        1.495605                0.997070       81.495605      241.495605                1.0                3.0                  1.0             2.501465  288607.071045             81.495605            604.092767  258.005859           200.0       2.0
4      -409368.343994      -409622.420166    -409368.343994  101256.571777     100.997070    -409622.420166        2.492676                1.495605       86.979492      173.958984                1.0                3.0                  1.0             2.501465  288607.071045             86.979492            435.152284  251.583496           200.0       2.0
5      -409261.863037      -409570.338135    -409261.863037  106735.033203     106.480957    -409570.338135        8.973633                2.492676       86.979492      121.495605                1.0                3.0                  1.0             2.501465  288607.071045             86.979492            303.916986  299.501465           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, 
, large_loss_count=0, loss_amount=17357/2048, alpha=39939/2048, buf_size=200.[0m
[01/09 17:04:17]  --------------------------------------------------------------------------------
[01/09 17:04:17]  Iteration: 15 (0 solution, 14 counterexamples)
[01/09 17:04:22]  Generator returned sat in 2.715535 secs.
[01/09 17:04:22]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1min_buffer > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1/2min_c + 1max_c + -1min_buffer_bytes + -2max_buffer_bytes + 10 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:04:30]  Improved gap from 0.0 to 48.4375
[01/09 17:04:30]  Improved number of small numbers from 104 to 134 out of a max of 134
[01/09 17:04:30]  Verifer returned sat in 8.154598 secs.
[01/09 17:04:30]  sf_get_cex returned in 8.274562 secs.
[01/09 17:04:30]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -409749.708252      -409753.466797    -409749.708252       0.498535       0.498291    -409753.466797        0.498047                0.000000       48.935791           100.0                0.0                2.0                  0.0                  2.0  288389.700928                   0.0                 200.0   3.260498        3.260254       1.0
1      -409700.772461      -409749.708252    -409700.772461   48939.549561      48.935791    -409749.708252        0.498047                0.498047       48.935791           100.0                0.0                1.0                  0.0                  1.0  288437.006836                   0.0                 100.0  48.437744       -0.498047       0.0
2      -409651.836670      -409700.772217    -409651.836670   48984.726807      48.935791    -409700.772217        0.498047                0.498047       48.935791           100.0                0.0                1.0                  0.0                  1.0  288488.569092                   0.0                 100.0  48.437500        0.000000       0.0
3      -409602.900879      -409651.836426    -409602.900879   48984.726562      48.935791    -409651.836426        0.498047                0.498047       48.935791           100.0                0.0                1.0                  0.0                  1.0  288539.633301                   0.0                 100.0  48.437500        0.000000       0.0
4      -409553.965088      -409603.398926    -409553.965088   48984.726562      48.935791    -409603.398926        0.498047                0.498047       48.935791           100.0                0.0                2.0                  0.0                  1.0  288590.697510                   0.0                 100.0  48.935791        0.000000       1.0
5      -409505.029297      -409553.965088    -409505.029297   48985.224854      48.935791    -409553.965088        0.498047                0.498047       48.935791           100.0                0.0                1.0                  0.0                  1.0  288590.697510                   0.0                 100.0  48.437744      -51.064209       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=39939/2048, buf_size=200.[0m
[01/09 17:04:30]  --------------------------------------------------------------------------------
[01/09 17:04:30]  Iteration: 16 (0 solution, 15 counterexamples)
[01/09 17:06:11]  Generator returned sat in 99.794109 secs.
[01/09 17:06:11]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_qdel + -1max_buffer + -2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 2min_c + -3/2max_c + -3/2min_buffer_bytes + 3/2max_buffer_bytes + -10 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 17:06:43]  Improved gap from 48.4375 to 48.4375
[01/09 17:06:44]  Improved number of small numbers from 97 to 134 out of a max of 134
[01/09 17:06:44]  Verifer returned sat in 32.158701 secs.
[01/09 17:06:44]  sf_get_cex returned in 32.269659 secs.
[01/09 17:06:44]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -660759.820068      -660759.820068    -660759.820068       0.498535       0.498047    -660759.820068             0.0                     0.0       49.434082      167.301514                0.0                1.0                  0.0             2.501465  288397.876221                   0.0            418.498855   0.000000       -0.000244       0.0
1      -660710.884277      -660759.321777    -660710.884277   48935.791016      48.935791    -660759.321777             0.0                     0.0       49.434082      167.301514                0.0                1.0                  0.0             2.501465  288448.940674                   0.0            418.498855  48.437500        0.000000       0.0
2      -660661.948486      -660709.887695    -660661.948486   48984.228516      48.935791    -660709.887695             0.0                     0.0       49.434082      167.301514                0.0                1.0                  0.0             2.501465  288499.506592                   0.0            418.498855  47.939209       -0.498291       0.0
3      -660613.012695      -660661.450195    -660613.012695   48983.730225      48.935791    -660661.450195             0.0                     0.0       49.434082      167.301514                0.0                1.0                  0.0             2.501465  288551.069092                   0.0            418.498855  48.437500        0.000000       0.0
4      -660564.076904      -660613.012695    -660564.076904   48984.228516      48.935791    -660613.012695             0.0                     0.0       49.434082      167.301514                0.0                2.0                  0.0             2.501465  288602.133057                   0.0            418.498855  48.935791       -0.000244       1.0
5      -660539.359863      -660560.318604    -660539.359863   24765.976807      24.717041    -660560.318604             0.0                     0.0       49.434082      167.301514                0.0                1.0                  0.0             2.501465  288602.133057                   0.0            418.498855  20.958740      -75.283203       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=2041/4096, buf_size=200.[0m
[01/09 17:06:44]  --------------------------------------------------------------------------------
[01/09 17:06:44]  Iteration: 17 (0 solution, 16 counterexamples)
[01/09 17:07:52]  Generator returned sat in 66.254200 secs.
[01/09 17:07:52]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1max_buffer > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ 1max_qdel + -1max_buffer > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_qdel + -1min_buffer + 1max_buffer + -4 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/09 17:07:57]  Improved gap from 0.0 to 100
[01/09 17:07:57]  Improved number of small numbers from 109 to 134 out of a max of 134
[01/09 17:07:57]  Verifer returned sat in 5.240513 secs.
[01/09 17:07:57]  sf_get_cex returned in 5.372282 secs.
[01/09 17:07:57]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -660730.869629      -661031.367676    -660730.869629       0.498535       0.497803    -661031.367676        0.498047                0.000000       50.249023      132.835449                0.0                2.0                  0.0                  4.0  288602.132812              0.000000            531.341797  300.000000      200.000000       1.0
1      -660630.371582      -660881.406738    -660630.371582  100798.544922     100.498047    -660881.406738        0.996094                0.498047       74.980469      132.835449                1.0                3.0                  1.0                  4.0  288602.132812             74.980469            531.341797  250.039062      200.000000       2.0
2      -660535.889160      -660771.826660    -660535.889160   94733.457031      94.482422    -660771.826660        0.996094                0.996094       86.513672      132.835449                2.0                4.0                  2.0                  4.0  288602.132812            173.027344            531.341797  234.941406      194.482422       3.0
3      -660429.873535      -660683.320801    -660429.873535  106251.562500     106.015625    -660683.320801        1.494141                0.996094       87.011719      132.835449                1.0                3.0                  2.0                  4.0  288602.132812            174.023438            531.341797  251.953125      200.000000       2.0
4      -660323.359863      -660531.367676    -660323.359863  106767.119141     106.513672    -660531.367676        8.007812                1.494141      100.000000      132.835449                0.0                2.0                  2.0                  2.0  288602.132812            200.000000            265.670898  200.000000      200.000000       1.0
5      -660203.857910      -660481.406738    -660203.857910  119709.960938     119.501953    -660481.406738       27.509766                8.007812      100.000000      132.835449                1.0                3.0                  2.0                  2.0  288602.132812            200.000000            265.670898  250.039062      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=13575/512, alpha=9985/512, buf_size=200.[0m
[01/09 17:07:57]  --------------------------------------------------------------------------------
[01/09 17:07:57]  Iteration: 18 (0 solution, 17 counterexamples)
[01/09 17:08:24]  Generator returned sat in 24.834258 secs.
[01/09 17:08:24]  Candidate solution: 
[1m[94mif (+ -2min_c + 3/2max_c + 1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1max_qdel + -1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1max_qdel + 1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:08:30]  Improved gap from 17.571189279731993 to 100
[01/09 17:08:32]  Improved number of small numbers from 87 to 87 out of a max of 134
[01/09 17:08:32]  Verifer returned sat in 7.833490 secs.
[01/09 17:08:32]  sf_get_cex returned in 7.956366 secs.
[01/09 17:08:32]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -760883.113801      -761167.224188    -760883.113801       0.498535       0.497803    -761167.224188        0.497803                0.000000       91.550711      121.400949                0.0                2.0                  0.0                  2.0  288602.132812              0.000000            242.801897  283.612584      200.000000       1.0
1      -760837.338446      -761071.691054    -760837.338446   46059.466134      45.775356    -761071.691054        0.497803                0.497803       91.550711      121.400949                1.0                3.0                  1.0                  2.0  288602.132812             91.550711            242.801897  233.854806      145.775356       2.0
2      -760654.237023      -760977.153526    -760654.237023  183335.775600     183.101423    -760977.153526       29.374581                0.497803       91.550711      121.400949                1.0                3.0                  1.0                  2.0  288602.132812             91.550711            242.801897  293.541922      200.000000       2.0
3      -760471.135600      -760883.611604    -760471.135600  183424.339495     183.101423    -760883.611604      112.476004               29.374581       91.550711      121.400949                2.0                4.0                  2.0                  2.0  288602.132812            183.101423            242.801897  300.000000      200.000000       3.0
4      -760288.034177      -760699.514576    -760288.034177  183513.898996     183.101423    -760699.514576      195.577427              112.476004       93.541922      121.400949                1.0                3.0                  2.0                  2.0  288602.132812            187.083845            242.801897  215.902972      200.000000       2.0
5      -760100.950332      -760683.611604    -760100.950332  187495.325265     187.083845    -760683.611604      282.661272              195.577427       93.541922      120.903146                2.0                4.0                  2.0                  2.0  288602.132812            187.083845            241.806292  300.000000      200.000000       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=3, loss_amount=8090191/28672, alpha=79881/4096, buf_size=200.[0m
[01/09 17:08:32]  --------------------------------------------------------------------------------
[01/09 17:08:32]  Iteration: 19 (0 solution, 18 counterexamples)
[01/09 17:09:10]  Generator returned sat in 35.793845 secs.
[01/09 17:09:10]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -1min_c + -3/2max_c + -1min_buffer_bytes + 3/2max_buffer_bytes + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 2min_c + 1max_c + 2min_buffer_bytes + 1/2max_buffer_bytes + -2 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:09:27]  Improved gap from 0.015555555555555555 to 100
[01/09 17:09:27]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/09 17:09:27]  Verifer returned sat in 17.492836 secs.
[01/09 17:09:27]  sf_get_cex returned in 17.626593 secs.
[01/09 17:09:27]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -760714.082764      -761010.599609    -760714.082764       0.498535       0.497314    -761010.599609        0.000000                0.000000        0.497314      102.487549                0.0                2.0                  0.0             2.502441   288429.12085                   0.0            256.469086  296.516846      196.516846       1.0
1      -760694.580322      -760811.594727    -760694.580322   19798.958252      19.502441    -760811.594727        0.000000                0.000000       99.502441      102.487549                0.0                2.0                  0.0             2.502441   288429.12085                   0.0            256.469086  117.014404      116.019287       1.0
2      -760495.575439      -760713.584961    -760495.575439  199121.897217     199.004883    -760713.584961       15.024170                0.000000       99.502441      102.487549                0.0                2.0                  0.0             2.502441   288429.12085                   0.0            256.469086  202.985352      200.000000       1.0
3      -760296.570557      -760610.599609    -760296.570557  199222.892334     199.004883    -760610.599609      114.029053               15.024170      100.000000      102.487549                0.0                2.0                  0.0             2.000000   288429.12085                   0.0            204.975098  200.000000      200.000000       1.0
4      -760096.570557      -760610.599609    -760096.570557  200314.029053     200.000000    -760610.599609      214.029053              114.029053      100.000000      102.487549                0.0                2.0                  0.0             2.000000   288429.12085                   0.0            204.975098  300.000000      200.000000       1.0
5      -759896.570557      -760509.604492    -759896.570557  200514.029053     200.000000    -760509.604492      314.029053              214.029053      100.000000      100.995117                1.0                3.0                  1.0             2.000000   288429.12085                 100.0            201.990234  299.004883      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=3, loss_amount=1286263/4096, alpha=39941/2048, buf_size=200.[0m
[01/09 17:09:27]  --------------------------------------------------------------------------------
[01/09 17:09:27]  Iteration: 20 (0 solution, 19 counterexamples)
[01/09 17:09:58]  Generator returned sat in 28.803743 secs.
[01/09 17:09:58]  Candidate solution: 
[1m[94mif (+ -1max_qdel + 1min_buffer + -1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1min_qdel + 1max_qdel + -1min_buffer + 1max_buffer + -4 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ 1max_qdel + 1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:10:04]  Improved gap from 0.497314453125 to 100
[01/09 17:10:05]  Improved number of small numbers from 94 to 99 out of a max of 134
[01/09 17:10:05]  Verifer returned sat in 6.326293 secs.
[01/09 17:10:05]  sf_get_cex returned in 6.451354 secs.
[01/09 17:10:05]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -677122.651660      -677411.248437    -677122.651660       0.498535       0.497070    -677411.248437        0.497314                0.000000       50.497314      289.093994                2.0                4.0                  2.0             4.497314   288429.12085            100.994629           1300.146598  288.099463      199.502686       3.0
1      -677021.657031      -677266.452734    -677021.657031  101283.225684     100.994629    -677266.452734        0.994629                0.497314       72.397852      289.093994                0.0                2.0                  2.0             2.000000   288429.12085            144.795703            578.187988  243.801074      200.000000       1.0
2      -676929.756494      -677122.651660    -676929.756494   92145.332812      91.900537    -677122.651660        0.994629                0.994629       96.198926      288.596777                0.0                2.0                  2.0             2.000000   288429.12085            192.397852            577.193555  191.900537      191.900537       1.0
3      -676814.054883      -677122.651660    -676814.054883  115894.506494     115.701611    -677122.651660        8.596777                0.994629       96.198926      288.596777                0.0                2.0                  2.0             2.000000   288429.12085            192.397852            577.193555  300.000000      200.000000       1.0
4      -676698.353271      -676930.253906    -676698.353271  116010.208105     115.701611    -676930.253906       24.298389                8.596777       96.198926      288.596777                0.0                2.0                  2.0             2.000000   288429.12085            192.397852            577.193555  207.602246      200.000000       1.0
5      -676582.651660      -676866.452734    -676582.651660  115933.511963     115.701611    -676866.452734       40.000000               24.298389       96.198926      256.198926                1.0                3.0                  2.0             2.000000   288429.12085            192.397852            512.397852  243.801074      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=79883/2048, alpha=79883/4096, buf_size=200.[0m
[01/09 17:10:05]  --------------------------------------------------------------------------------
[01/09 17:10:05]  Iteration: 21 (0 solution, 20 counterexamples)
[01/09 17:23:19]  Generator returned sat in 792.246609 secs.
[01/09 17:23:19]  Candidate solution: 
[1m[94mif (+ -1max_qdel + -1max_buffer + 5 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1/2min_buffer_bytes + -5 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_qdel + -1max_qdel + -1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:23:32]  Improved gap from 4.81560294858871 to 100
[01/09 17:23:32]  Improved number of small numbers from 127 to 134 out of a max of 134
[01/09 17:23:32]  Verifer returned sat in 12.840314 secs.
[01/09 17:23:32]  sf_get_cex returned in 12.969560 secs.
[01/09 17:23:32]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -677151.116455      -677433.104736    -677151.116455       0.498291       0.497070    -677433.104736        0.496826                0.000000       59.502930      166.666748                0.0                1.0                  0.0                  4.0  288439.573975                   0.0            666.666992  281.491455      181.491455       0.0
1      -677032.110596      -677282.607666    -677032.110596  119287.847656     119.005859    -677282.607666        0.994141                0.496826       75.248535      166.666748                0.0                2.0                  0.0                  2.0  288439.573975                   0.0            333.333496  249.502930      200.000000       1.0
2      -676937.359131      -677133.104736    -676937.359131   95001.961914      94.751465    -677133.104736        0.994141                0.994141      100.000000      166.666748                0.0                2.0                  0.0                  2.0  288439.573975                   0.0            333.333496  194.751465      194.751465       1.0
3      -676817.856201      -677133.104736    -676817.856201  119698.675293     119.502930    -677133.104736       15.248535                0.994141      100.000000      166.666748                0.0                2.0                  0.0                  2.0  288439.573975                   0.0            333.333496  300.000000      200.000000       1.0
4      -676698.353271      -676933.104736    -676698.353271  119818.178223     119.502930    -676933.104736       34.751465               15.248535      100.000000      166.666748                0.0                2.0                  0.0                  2.0  288439.573975                   0.0            333.333496  200.000000      200.000000       1.0
5      -676578.850342      -676932.607666    -676578.850342  119737.681152     119.502930    -676932.607666       54.254395               34.751465      100.000000      166.666748                1.0                3.0                  1.0                  2.0  288439.573975                 100.0            333.333496  299.502930      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=109077/2048, alpha=19971/1024, buf_size=200.[0m
[01/09 17:23:32]  --------------------------------------------------------------------------------
[01/09 17:23:32]  Iteration: 22 (0 solution, 21 counterexamples)
[01/09 17:31:16]  Generator returned sat in 461.994070 secs.
[01/09 17:31:17]  Candidate solution: 
[1m[94mif (+ -2min_c + 1/2max_c + -1min_buffer_bytes + 1max_buffer_bytes + -10 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_c + 1max_c + -1min_buffer_bytes + 3/2max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ 3/2min_c + -3/2min_buffer_bytes + -1max_buffer_bytes + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 17:31:22]  Improved number of small numbers from 101 to 133 out of a max of 133
[01/09 17:31:22]  Verifer returned sat in 5.334774 secs.
[01/09 17:31:22]  sf_get_cex returned in 5.466652 secs.
[01/09 17:31:22]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -677687.899902      -677888.133789    -677687.899902       0.498047       0.496826    -677888.133789        0.496826                0.000000       99.736816      123.289551                1.0                3.0                  1.0              2.00415   288439.57373             99.736816            247.090801  199.737061       99.737061       2.0
1      -677488.426270      -677688.133789    -677488.426270  199673.866699     199.473633    -677688.133789        0.496826                0.496826      100.000000      123.289551                0.0                1.0                  1.0              1.00000   288439.57373            100.000000            123.289551  199.210693      199.210693       0.0
2      -677288.426270      -677610.926270    -677288.426270  200199.707520     200.000000    -677610.926270       99.707520                0.496826      100.000000      123.289551                0.0                2.0                  1.0              1.00000   288439.57373            100.000000            123.289551  222.792480      200.000000       1.0
3      -677088.426270      -677488.923340    -677088.426270  200322.500000     200.000000    -677488.923340      199.707520               99.707520      100.000000      123.289551                1.0                3.0                  1.0              1.00000   288439.57373            100.000000            123.289551  200.789551      200.000000       2.0
4      -676888.426270      -677488.133789    -676888.426270  200400.497070     200.000000    -677488.133789      299.707520              199.707520      100.000000      122.792480                1.0                3.0                  1.0              1.00000   288439.57373            100.000000            122.792480  300.000000      200.000000       2.0
5      -676688.426270      -677364.946533    -676688.426270  200599.707520     200.000000    -677364.946533      399.707520              299.707520      100.000000      122.792480                1.0                3.0                  1.0              1.00000   288439.57373            100.000000            122.792480  276.812744      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=4, loss_amount=1635167/4096, alpha=79883/4096, buf_size=200.[0m
[01/09 17:31:22]  --------------------------------------------------------------------------------
[01/09 17:31:22]  Iteration: 23 (0 solution, 22 counterexamples)
[01/09 17:33:32]  Generator returned sat in 127.148263 secs.
[01/09 17:33:32]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 3/2min_c + -2min_buffer_bytes + 1/2max_buffer_bytes + 10 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:33:37]  Improved gap from 6.633179852099902 to 100
[01/09 17:33:39]  Improved number of small numbers from 71 to 80 out of a max of 134
[01/09 17:33:39]  Verifer returned sat in 7.547649 secs.
[01/09 17:33:39]  sf_get_cex returned in 7.676211 secs.
[01/09 17:33:39]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -677508.434763      -677789.409126    -677508.434763       0.498047       0.496826    -677789.409126        0.002791                0.000000       39.028320      119.017334                2.0                4.0                  2.0                  2.0   288439.57373             78.056641            238.034668  280.971572      200.000000       3.0
1      -677488.920549      -677608.437554    -677488.920549   19795.188189      19.514214    -677608.437554        0.002791                0.002791       90.485786      119.017334                1.0                3.0                  2.0                  2.0   288439.57373            180.971572            238.034668  119.514214      119.514214       2.0
2      -677307.948977      -677607.940727    -677307.948977  181091.089353     180.971572    -677607.940727        0.488577                0.002791       90.485786      119.017334                1.0                3.0                  2.0                  2.0   288439.57373            180.971572            238.034668  299.503174      200.000000       2.0
3      -677126.977405      -677488.923340    -677126.977405  181271.564099     180.971572    -677488.923340       81.460149                0.488577       90.485786      119.017334                1.0                3.0                  2.0                  2.0   288439.57373            180.971572            238.034668  280.485786      200.000000       2.0
4      -676946.005832      -677339.464326    -676946.005832  181333.518284     180.971572    -677339.464326      162.431721               81.460149       90.485786      119.017334                1.0                3.0                  2.0                  2.0   288439.57373            180.971572            238.034668  231.026772      200.000000       2.0
5      -676765.034260      -677249.927979    -676765.034260  181365.030842     180.971572    -677249.927979      243.403294              162.431721       90.485786      119.017334                1.0                3.0                  2.0                  2.0   288439.57373            180.971572            238.034668  241.490425      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=3, loss_amount=66825798985/274550784, alpha=5357642705/274550784, buf_size=200.[0m
[01/09 17:33:39]  --------------------------------------------------------------------------------
[01/09 17:33:39]  Iteration: 24 (0 solution, 23 counterexamples)
[01/09 17:36:33]  Generator returned sat in 171.654181 secs.
[01/09 17:36:34]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1max_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1min_qdel + -1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1/2min_c + -1/2max_c + -3/2min_buffer_bytes + 1max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 17:36:41]  Improved gap from 2.484130859375 to 100
[01/09 17:36:44]  Improved number of small numbers from 80 to 84 out of a max of 134
[01/09 17:36:44]  Verifer returned sat in 9.812890 secs.
[01/09 17:36:44]  sf_get_cex returned in 9.946147 secs.
[01/09 17:36:44]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -615955.965790      -616156.462617    -615955.965790       0.498047       0.496582    -616156.462617        0.496826                0.000000       50.993652      133.830322                1.0                3.0                  1.0                  2.0  226887.598793             50.993652            267.660645  200.000000           200.0       2.0
1      -615853.978486      -616092.009317    -615853.978486  102187.801514     101.987305    -616092.009317        2.484131                0.496826       50.993652      133.830322                1.0                3.0                  1.0                  2.0  226887.598793             50.993652            267.660645  235.546701           200.0       2.0
2      -615751.991181      -615982.478939    -615751.991181  102225.335519     101.987305    -615982.478939        4.471436                2.484131       57.994559      133.830322                1.0                3.0                  1.0                  2.0  226887.598793             57.994559            267.660645  226.016323           200.0       2.0
3      -615636.002063      -615867.483473    -615636.002063  116219.606062     115.989118    -615867.483473       20.460554                4.471436       74.841948      133.830322                1.0                3.0                  1.0                  2.0  226887.598793             74.841948            267.660645  211.020857           200.0       2.0
4      -615486.318167      -615756.462617    -615486.318167  149915.377430     149.683896    -615756.462617       70.144450               20.460554       83.886675      133.333333                1.0                3.0                  1.0                  2.0  226887.598793             83.886675            266.666667  200.000000           200.0       2.0
5      -615318.544816      -615755.965790    -615318.544816  168043.494757     167.773350    -615755.965790      137.917800               70.144450       83.886675      100.124207                1.0                3.0                  1.0                  2.0  226887.598793             83.886675            200.248413  299.503174           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=23298925/172032, alpha=2035/4096, buf_size=200.[0m
[01/09 17:36:44]  --------------------------------------------------------------------------------
[01/09 17:36:44]  Iteration: 25 (0 solution, 24 counterexamples)
[01/09 17:39:14]  Generator returned sat in 147.585276 secs.
[01/09 17:39:14]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1max_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1min_qdel + 1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ 1/2min_c + 1max_c + -1min_buffer_bytes + 1/2max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 17:39:25]  Improved gap from 2.9794921875 to 48.4375
[01/09 17:39:26]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/09 17:39:26]  Verifer returned sat in 11.499851 secs.
[01/09 17:39:26]  sf_get_cex returned in 11.627796 secs.
[01/09 17:39:26]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -615781.314697      -615781.811035    -615781.314697       0.497803       0.496338    -615781.811035             0.0                     0.0          96.875           100.0                2.0                4.0                  2.0             2.496338  226784.970215                193.75            249.633789   0.496338        0.496338       3.0
1      -615732.877197      -615781.314697    -615732.877197   48437.996338      48.437500    -615781.314697             0.0                     0.0          96.875           100.0                1.0                3.0                  2.0             2.496338  226836.036377                193.75            249.633789  48.437500        0.000000       2.0
2      -615684.439697      -615732.877197    -615684.439697   48485.937500      48.437500    -615732.877197             0.0                     0.0          96.875           100.0                0.0                2.0                  2.0             2.496338  226887.598877                193.75            249.633789  48.437500        0.000000       1.0
3      -615636.002197      -615684.439697    -615636.002197   48485.937500      48.437500    -615684.439697             0.0                     0.0          96.875           100.0                0.0                2.0                  2.0             2.496338  226939.161377                193.75            249.633789  48.437500        0.000000       1.0
4      -615587.564697      -615636.002197    -615587.564697   48485.937500      48.437500    -615636.002197             0.0                     0.0          96.875           100.0                0.0                2.0                  2.0             2.496338  226990.723877                193.75            249.633789  48.437500        0.000000       1.0
5      -615539.127197      -615582.307861    -615539.127197   48485.937500      48.437500    -615582.307861             0.0                     0.0          96.875           100.0                0.0                1.0                  2.0             2.496338  226990.723877                193.75            249.633789  43.180664      -51.562500       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=39943/2048, buf_size=200.[0m
[01/09 17:39:26]  --------------------------------------------------------------------------------
[01/09 17:39:26]  Iteration: 26 (0 solution, 25 counterexamples)
[01/09 17:42:08]  Generator returned sat in 160.155027 secs.
[01/09 17:42:09]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1max_qdel + 1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ 1/2min_c + -1max_c + 1/2max_buffer_bytes + 5 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/09 17:42:13]  Improved gap from 18.91891891891892 to 100
[01/09 17:42:13]  Improved number of small numbers from 91 to 91 out of a max of 134
[01/09 17:42:13]  Verifer returned sat in 4.761647 secs.
[01/09 17:42:13]  sf_get_cex returned in 4.894524 secs.
[01/09 17:42:13]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -615745.800603      -615963.750147    -615745.800603       0.497803       0.496338    -615963.750147        0.000000                0.000000       67.990234      101.985352                2.0                4.0                  2.0             2.496338  226946.974431            135.980469            254.589897  217.949544      198.014648       3.0
1      -615677.810369      -615882.277410    -615677.810369   68208.183919      67.990234    -615882.277410        0.000000                0.000000       67.990234      101.985352                0.0                2.0                  2.0             2.496338  226946.974431            135.980469            254.589897  204.467041      166.004883       1.0
2      -615541.829900      -615745.304265    -615541.829900  136184.935791     135.980469    -615745.304265        1.985352                0.000000       72.815294      101.985352                0.0                2.0                  2.0             2.496338  226946.974431            145.630588            254.589897  201.489014      200.000000       1.0
3      -615396.199312      -615643.815252    -615396.199312  145834.062473     145.630588    -615643.815252       47.615940                1.985352       79.983724      101.985352                0.0                2.0                  2.0             2.000000  226946.974431            159.967448            203.970703  200.000000      200.000000       1.0
4      -615236.231864      -615643.815252    -615236.231864  160215.063856     159.967448    -615643.815252      107.583388               47.615940       79.983724      101.489014                0.0                2.0                  2.0             2.000000  226946.974431            159.967448            202.978027  300.000000      200.000000       1.0
5      -615076.264416      -615543.318914    -615076.264416  160375.031304     159.967448    -615543.318914      167.550836              107.583388       79.983724      100.496338                1.0                3.0                  2.0             2.000000  226946.974431            159.967448            200.992676  299.503662      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=4, loss_amount=3088297/18432, alpha=2033/4096, buf_size=200.[0m
[01/09 17:42:13]  --------------------------------------------------------------------------------
[01/09 17:42:13]  Iteration: 27 (0 solution, 26 counterexamples)
[01/09 17:43:22]  Generator returned sat in 65.960219 secs.
[01/09 17:43:22]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1min_qdel + 1max_qdel + -1max_buffer > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 2min_c + -2max_c + -1min_buffer_bytes + -1/2max_buffer_bytes + 10 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 17:43:35]  Improved gap from 1.489013671875 to 100
[01/09 17:43:35]  Improved number of small numbers from 104 to 134 out of a max of 134
[01/09 17:43:35]  Verifer returned sat in 13.040405 secs.
[01/09 17:43:36]  sf_get_cex returned in 13.174661 secs.
[01/09 17:43:36]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -614793.839844      -615093.839600    -614793.839844       0.497559       0.496338    -615093.839600        0.000000                0.000000            80.0      200.496094                0.0                1.0                  0.0             5.999756  225996.998779                   0.0           1202.927613  299.999756      199.999756       0.0
1      -614694.336182      -614893.839600    -614694.336182   99803.661865      99.503662    -614893.839600        0.000000                0.000000           100.0      200.496094                0.0                2.0                  0.0             5.999756  225996.998779                   0.0           1202.927613  199.503418      199.503418       1.0
2      -614574.832520      -614893.839600    -614574.832520  119703.165527     119.503662    -614893.839600       19.007080                0.000000           100.0      200.496094                0.0                2.0                  0.0             5.999756  225996.998779                   0.0           1202.927613  300.000000      200.000000       1.0
3      -614455.328857      -614693.839600    -614455.328857  119822.669189     119.503662    -614693.839600       38.510742               19.007080           100.0      200.496094                0.0                2.0                  0.0             2.000000  225996.998779                   0.0            400.992188  200.000000      200.000000       1.0
4      -614335.825195      -614693.839600    -614335.825195  119742.172852     119.503662    -614693.839600       58.014404               38.510742           100.0      200.000000                0.0                2.0                  0.0             2.000000  225996.998779                   0.0            400.000000  300.000000      200.000000       1.0
5      -614216.321533      -614496.817627    -614216.321533  119861.676514     119.503662    -614496.817627       77.518066               58.014404           100.0      197.021973                1.0                3.0                  1.0             2.000000  225996.998779                 100.0            394.043945  202.978027      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=158757/2048, alpha=79887/4096, buf_size=200.[0m
[01/09 17:43:36]  --------------------------------------------------------------------------------
[01/09 17:43:36]  Iteration: 28 (0 solution, 27 counterexamples)
[01/09 17:45:19]  Generator returned sat in 100.209550 secs.
[01/09 17:45:19]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1min_buffer + 1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1/2min_c + 2min_buffer_bytes + 1/2max_buffer_bytes + 6 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 17:45:19]  Improved number of small numbers from 133 to 133 out of a max of 133
[01/09 17:45:19]  Verifer returned sat in 0.281421 secs.
[01/09 17:45:19]  sf_get_cex returned in 0.392385 secs.
[01/09 17:45:19]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -614793.839844      -615093.839600    -614793.839844       0.497559       0.496338    -615093.839600        0.000000                0.000000            80.0      200.496094                0.0                1.0                  0.0             2.503906  225996.998779                   0.0            502.023422  299.999756      199.999756       0.0
1      -614694.336182      -614893.839600    -614694.336182   99803.661865      99.503662    -614893.839600        0.000000                0.000000           100.0      200.496094                0.0                2.0                  0.0             2.503906  225996.998779                   0.0            502.023422  199.503418      199.503418       1.0
2      -614574.832520      -614893.839600    -614574.832520  119703.165527     119.503662    -614893.839600       19.007080                0.000000           100.0      200.496094                0.0                2.0                  0.0             2.503906  225996.998779                   0.0            502.023422  300.000000      200.000000       1.0
3      -614455.328857      -614693.839600    -614455.328857  119822.669189     119.503662    -614693.839600       38.510742               19.007080           100.0      200.496094                0.0                2.0                  0.0             2.000000  225996.998779                   0.0            400.992188  200.000000      200.000000       1.0
4      -614335.825195      -614693.839600    -614335.825195  119742.172852     119.503662    -614693.839600       58.014404               38.510742           100.0      200.000000                0.0                2.0                  0.0             2.000000  225996.998779                   0.0            400.000000  300.000000      200.000000       1.0
5      -614216.321533      -614496.817627    -614216.321533  119861.676514     119.503662    -614496.817627       77.518066               58.014404           100.0      197.021973                1.0                3.0                  1.0             2.000000  225996.998779                 100.0            394.043945  202.978027      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=158757/2048, alpha=79887/4096, buf_size=200.[0m
[01/09 17:45:19]  --------------------------------------------------------------------------------
[01/09 17:45:19]  Iteration: 29 (0 solution, 28 counterexamples)
[01/09 17:49:41]  Generator returned sat in 258.602350 secs.
[01/09 17:49:41]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + 1max_buffer + -3 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -2min_c + 1max_c + -2min_buffer_bytes + 2max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -1min_c + -1/2max_c + -2min_buffer_bytes + -2max_buffer_bytes > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 17:49:52]  Improved gap from 0.0 to 100
[01/09 17:49:53]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/09 17:49:53]  Verifer returned sat in 11.708776 secs.
[01/09 17:49:53]  sf_get_cex returned in 11.847700 secs.
[01/09 17:49:53]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -804487.228271      -804686.235596    -804487.228271       0.497070       0.496338    -804686.235596        0.496338                0.000000       99.007324      197.021973                0.0                1.0                  0.0                  2.0  226062.994385                   0.0            394.043945  198.510986       98.510986       0.0
1      -804289.213623      -804487.228271    -804289.213623  198213.655762     198.014648    -804487.228271        0.496338                0.496338       99.503662      197.021973                0.0                1.0                  0.0                  1.0  226062.994385                   0.0            197.021973  197.518311      196.525635       0.0
2      -804090.206299      -804483.257568    -804090.206299  199205.338867     199.007324    -804483.257568       96.029297                0.496338       99.503662      197.021973                0.0                2.0                  0.0                  1.0  226062.994385                   0.0            197.021973  297.021973      200.000000       1.0
3      -803891.198975      -804286.235596    -803891.198975  199400.375488     199.007324    -804286.235596      195.036621               96.029297      100.000000      197.021973                0.0                2.0                  0.0                  1.0  226062.994385                   0.0            197.021973  200.000000      200.000000       1.0
4      -803691.198975      -804286.235596    -803691.198975  200395.036621     200.000000    -804286.235596      295.036621              195.036621      100.000000      197.021973                0.0                2.0                  0.0                  1.0  226062.994385                   0.0            197.021973  300.000000      200.000000       1.0
5      -803491.198975      -804089.213623    -803491.198975  200595.036621     200.000000    -804089.213623      395.036621              295.036621      100.000000      197.021973                1.0                3.0                  1.0                  1.0  226062.994385                 100.0            197.021973  202.978027      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=4, loss_amount=1616037/4096, alpha=127/256, buf_size=200.[0m
[01/09 17:49:53]  --------------------------------------------------------------------------------
[01/09 17:49:53]  Iteration: 30 (0 solution, 29 counterexamples)
[01/09 18:02:06]  Generator returned sat in 730.310091 secs.
[01/09 18:02:06]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 2min_c + 2max_c + 2min_buffer_bytes + 1max_buffer_bytes + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 2min_c + 1max_c + -1/2min_buffer_bytes + 2max_buffer_bytes + -2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/09 18:02:23]  Improved gap from 1.171875 to 100
[01/09 18:02:24]  Improved number of small numbers from 106 to 106 out of a max of 134
[01/09 18:02:24]  Verifer returned sat in 17.993089 secs.
[01/09 18:02:24]  sf_get_cex returned in 18.133227 secs.
[01/09 18:02:24]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -856207.737663      -856506.744987    -856207.737663       0.497070       0.496338    -856506.744987        0.496338                0.000000       98.676432      150.992676                0.0                2.0                  0.0             4.496338  226062.994385              0.000000            678.914089  298.510986      198.510986       1.0
1      -856106.744987      -856357.241325    -856106.744987  101291.683105     100.992676    -856357.241325        0.496338                0.496338       98.676432      150.992676                1.0                3.0                  1.0             4.496338  226062.994385             98.676432            678.914089  250.000000      199.503662       2.0
2      -856005.752311      -856224.735221    -856005.752311  101243.172119     100.992676    -856224.735221        0.992676                0.496338       98.676432      150.992676                1.0                3.0                  1.0             4.496338  226062.994385             98.676432            678.914089  217.990234      200.000000       2.0
3      -855904.759635      -856206.744987    -855904.759635  101211.658691     100.992676    -856206.744987        1.985352                0.992676       98.676432      150.000000                1.0                3.0                  1.0             3.000000  226062.994385             98.676432            450.000000  300.000000      200.000000       2.0
4      -855803.766959      -856008.399446    -855803.766959  101294.661133     100.992676    -856008.399446        2.978027                1.985352       99.669108      150.000000                1.0                3.0                  1.0             3.000000  226062.994385             99.669108            450.000000  201.654460      200.000000       2.0
5      -855701.781608      -855956.744987    -855701.781608  102189.984049     101.985352    -855956.744987        4.963379                2.978027       99.669108      133.498779                1.0                3.0                  1.0             3.000000  226062.994385             99.669108            400.496338  250.000000      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=18297/4096, alpha=14231/6144, buf_size=200.[0m
[01/09 18:02:24]  --------------------------------------------------------------------------------
[01/09 18:02:24]  Iteration: 31 (0 solution, 30 counterexamples)
[01/09 18:03:28]  Generator returned sat in 60.061961 secs.
[01/09 18:03:28]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_qdel + -1max_qdel + -1min_buffer + -1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_qdel + -1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 18:03:31]  Improved gap from 0.0 to 100
[01/09 18:03:33]  Improved number of small numbers from 76 to 81 out of a max of 134
[01/09 18:03:33]  Verifer returned sat in 5.024130 secs.
[01/09 18:03:33]  sf_get_cex returned in 5.155803 secs.
[01/09 18:03:33]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -755377.702405      -755660.233388    -755377.702405       0.497070       0.496094    -755660.233388        0.000000                0.000000       50.248169      120.281250                2.0                4.0                  2.0                  5.0  226062.994385            100.496338            601.406250  282.530983           200.0       3.0
1      -755277.206067      -755477.702405    -755277.206067  100778.868874     100.496338    -755477.702405        0.496338                0.000000       91.265492      120.281250                1.0                3.0                  2.0                  5.0  226062.994385            182.530983            601.406250  200.000000           200.0       2.0
2      -755094.675084      -755476.296303    -755094.675084  182731.479721     182.530983    -755476.296303       83.027321                0.496338       91.265492      120.281250                1.0                3.0                  2.0                  3.0  226062.994385            182.530983            360.843750  298.593898           200.0       2.0
3      -754994.206383      -755297.046224    -754994.206383  100850.321846     100.468701    -755297.046224       83.496022               83.027321       91.265492      120.281250                1.0                3.0                  2.0                  3.0  226062.994385            182.530983            360.843750  219.343819           200.0       2.0
4      -754893.737683      -755203.905930    -754893.737683  100771.540468     100.468701    -755203.905930       83.964723               83.496022       91.265492      120.281250                1.0                3.0                  2.0                  3.0  226062.994385            182.530983            360.843750  226.203525           200.0       2.0
5      -754793.268982      -755177.233704    -754793.268982  100778.868874     100.468701    -755177.233704       84.433423               83.964723       91.265492      100.156234                1.0                3.0                  2.0                  3.0  226062.994385            182.530983            300.468701  299.531299           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=1, loss_amount=284757569/3392512, alpha=124887987/13570048, buf_size=200.[0m
[01/09 18:03:33]  --------------------------------------------------------------------------------
[01/09 18:03:33]  Iteration: 32 (0 solution, 31 counterexamples)
[01/09 18:09:26]  Generator returned sat in 350.093371 secs.
[01/09 18:09:27]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1max_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 3/2min_c + 1/2max_c + 1min_buffer_bytes + -4 > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -3/2min_c + 2min_buffer_bytes + 3/2max_buffer_bytes + 5 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/09 18:10:01]  Improved gap from 0.0 to 48.4375
[01/09 18:10:02]  Improved number of small numbers from 109 to 109 out of a max of 134
[01/09 18:10:02]  Verifer returned sat in 34.998183 secs.
[01/09 18:10:02]  sf_get_cex returned in 35.147207 secs.
[01/09 18:10:02]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -754992.476013      -754993.268982    -754992.476013       0.497070       0.496094    -754993.268982        0.496094                0.000000       24.962891           100.0                0.0                1.0                  0.0                  2.0  226062.994385                   0.0                 200.0   0.296875       -0.496094       0.0
1      -754942.550232      -754992.476013    -754942.550232   49926.574219      49.925781    -754992.476013        0.496094                0.496094       24.962891           100.0                0.0                1.0                  0.0                  1.0  226113.564697                   0.0                 100.0  49.429688        0.000000       0.0
2      -754892.624451      -754941.558044    -754892.624451   49975.707031      49.925781    -754941.558044        0.496094                0.496094       25.458984           100.0                0.0                1.0                  0.0                  1.0  226163.638916                   0.0                 100.0  48.437500        0.000000       0.0
3      -754841.706482      -754893.120544    -754841.706482   50966.902344      50.917969    -754893.120544        0.496094                0.496094       33.118490           100.0                0.0                2.0                  0.0                  1.0  226212.720947                   0.0                 100.0  50.917969        0.000000       1.0
4      -754819.712667      -754842.202576    -754819.712667   22045.229167      21.993815    -754842.202576        0.496094                0.496094       37.568359           100.0                0.0                2.0                  0.0                  1.0  226264.283447                   0.0                 100.0  21.993815      -26.443685       1.0
5      -754793.268982      -754793.765076    -754793.268982   26466.174805      26.443685    -754793.765076        0.496094                0.496094       39.742188           100.0                0.0                1.0                  0.0                  1.0  226315.845947                   0.0                 100.0   0.000000      -48.437500       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=34175/3072, buf_size=200.[0m
[01/09 18:10:02]  --------------------------------------------------------------------------------
[01/09 18:10:02]  Iteration: 33 (0 solution, 32 counterexamples)
[01/09 18:13:34]  Generator returned sat in 208.773674 secs.
[01/09 18:13:34]  Candidate solution: 
[1m[94mif (+ -1max_qdel + 1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1min_c + 1max_c + -2min_buffer_bytes + 1/2max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_qdel + 1max_qdel + 1min_buffer + 1max_buffer + 9 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 18:13:41]  Improved gap from 0.0 to 100
[01/09 18:13:42]  Improved number of small numbers from 104 to 134 out of a max of 134
[01/09 18:13:42]  Verifer returned sat in 7.300207 secs.
[01/09 18:13:42]  sf_get_cex returned in 7.433675 secs.
[01/09 18:13:42]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -755018.225342      -755215.250000    -755018.225342       0.496826       0.495850    -755215.250000        0.495850                0.000000       99.008301      101.983398                0.0                1.0                  0.0              2.50415  226282.297607               0.00000            255.381767  196.528809      196.528809       0.0
1      -754915.746094      -755215.250000    -754915.746094  102676.272705     102.479248    -755215.250000        0.495850                0.495850       99.008301      101.983398                0.0                1.0                  0.0              1.00000  226282.297607               0.00000            101.983398  299.008057      199.008057       0.0
2      -754813.266846      -755018.225342    -754813.266846  102778.751953     102.479248    -755018.225342        1.983154                0.495850       99.008301      101.983398                0.0                2.0                  0.0              1.00000  226282.297607               0.00000            101.983398  202.975342      200.000000       1.0
3      -754710.787598      -754916.737549    -754710.787598  102684.206543     102.479248    -754916.737549        4.462402                1.983154       99.504150      101.983398                1.0                3.0                  1.0              1.00000  226282.297607              99.50415            101.983398  201.487549      200.000000       2.0
4      -754607.812500      -754815.250000    -754607.812500  103181.047607     102.975098    -754815.250000        7.437500                4.462402      100.000000      101.983398                1.0                3.0                  1.0              1.00000  226282.297607             100.00000            101.983398  200.000000      200.000000       2.0
5      -754504.341553      -754814.258545    -754504.341553  103678.384766     103.470947    -754814.258545       10.908447                7.437500      100.000000      101.983398                1.0                3.0                  1.0              1.00000  226282.297607             100.00000            101.983398  299.008545      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=21325/2048, alpha=14217/4096, buf_size=200.[0m
[01/09 18:13:42]  --------------------------------------------------------------------------------
[01/09 18:13:42]  Iteration: 34 (0 solution, 33 counterexamples)
[01/09 18:19:12]  Generator returned sat in 326.462085 secs.
[01/09 18:19:12]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_c + 1max_c + 1/2min_buffer_bytes + 1max_buffer_bytes + -7 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_qdel + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 18:19:25]  Improved gap from 0.1847849829668772 to 48.4375
[01/09 18:19:25]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 18:19:25]  Verifer returned sat in 13.394974 secs.
[01/09 18:19:25]  sf_get_cex returned in 13.533072 secs.
[01/09 18:19:25]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -754858.083496      -754858.579346    -754858.083496       0.496826       0.495850    -754858.579346         0.49585                 0.00000       49.429199           100.0                0.0                2.0                  0.0                  3.0  226078.526855                   0.0                 300.0   0.000000        0.000000       1.0
1      -754808.654297      -754857.091797    -754808.654297   49429.695068      49.429199    -754857.091797         0.49585                 0.49585       49.429199           100.0                0.0                1.0                  0.0                  1.0  226128.601807                   0.0                 100.0  47.941650       -0.495850       0.0
2      -754759.720947      -754808.654297    -754759.720947   48981.787109      48.933350    -754808.654297         0.49585                 0.49585       49.429199           100.0                0.0                1.0                  0.0                  1.0  226180.164307                   0.0                 100.0  48.437500        0.000000       0.0
3      -754710.787598      -754760.216797    -754710.787598   48982.282959      48.933350    -754760.216797         0.49585                 0.49585       49.429199           100.0                0.0                2.0                  0.0                  1.0  226231.230957                   0.0                 100.0  48.933350        0.000000       1.0
4      -754661.854248      -754711.283447    -754661.854248   48982.778809      48.933350    -754711.283447         0.49585                 0.49585       49.429199           100.0                0.0                2.0                  0.0                  1.0  226282.297607                   0.0                 100.0  48.933350        0.000000       1.0
5      -754612.920898      -754659.075195    -754612.920898   48982.778809      48.933350    -754659.075195         0.49585                 0.49585       49.429199           100.0                0.0                1.0                  0.0                  1.0  226330.585205                   0.0                 100.0  45.658447       -2.779053       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=2031/4096, buf_size=200.[0m
[01/09 18:19:25]  --------------------------------------------------------------------------------
[01/09 18:19:25]  Iteration: 35 (0 solution, 34 counterexamples)
[01/09 18:27:32]  Generator returned sat in 482.533674 secs.
[01/09 18:27:32]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + -1min_buffer + 1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_qdel + 1max_qdel + 1min_buffer + 1max_buffer + -10 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1min_qdel > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/09 18:27:34]  Improved gap from 0.0004961015703203204 to 100
[01/09 18:27:35]  Improved number of small numbers from 102 to 134 out of a max of 134
[01/09 18:27:35]  Verifer returned sat in 2.910786 secs.
[01/09 18:27:35]  sf_get_cex returned in 3.029353 secs.
[01/09 18:27:35]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -153120.320312      -153420.320312    -153120.320312       0.496582       0.495605    -153420.320312        0.000000                0.000000        99.50415      149.503906                2.0                4.0                  2.0              5.49585  226320.691162            199.008301            821.650985  300.000000       200.00000       3.0
1      -153019.328613      -153257.620605    -153019.328613  101291.699219     100.991699    -153257.620605        0.991699                0.000000        99.50415      149.503906                1.0                3.0                  2.0              5.49585  226320.691162            199.008301            821.650985  237.300293       200.00000       2.0
2      -152919.824463      -153123.295410    -152919.824463   99742.442383      99.504150    -153123.295410        0.991699                0.991699        99.50415      149.503906                2.0                4.0                  2.0              5.49585  226320.691162            199.008301            821.650985  202.479248       199.50415       3.0
3      -152818.832764      -153120.320312    -152818.832764  101195.170166     100.991699    -153120.320312        1.487549                0.991699        99.50415      137.300293                2.0                4.0                  2.0              5.49585  226320.691162            199.008301            754.581761  300.000000       200.00000       3.0
4      -152717.841064      -152920.320312    -152717.841064  101293.186768     100.991699    -152920.320312        2.479248                1.487549       100.00000      137.300293                0.0                2.0                  2.0              2.00000  226320.691162            200.000000            274.600586  200.000000       200.00000       1.0
5      -152616.353516      -152857.620605    -152616.353516  101690.028076     101.487549    -152857.620605        3.966797                2.479248       100.00000      132.837402                1.0                3.0                  2.0              2.00000  226320.691162            200.000000            265.674805  237.300293       200.00000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=6093/2048, alpha=6093/4096, buf_size=200.[0m
[01/09 18:27:35]  --------------------------------------------------------------------------------
[01/09 18:27:35]  Iteration: 36 (0 solution, 35 counterexamples)
[01/09 18:40:48]  Generator returned sat in 789.343692 secs.
[01/09 18:40:48]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_qdel + 1max_qdel + 1min_buffer + 1max_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1min_qdel + 1max_qdel + 1max_buffer + -2 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 18:41:00]  Improved gap from 0.0 to 48.4375
[01/09 18:41:00]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 18:41:00]  Verifer returned sat in 12.007662 secs.
[01/09 18:41:00]  sf_get_cex returned in 12.147435 secs.
[01/09 18:41:00]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -103474.208984      -103479.467773    -103474.208984       0.496582       0.495605    -103479.467773             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0             2.495605  226119.699951                   0.0            249.560547   5.258789        5.258789       1.0
1      -103425.771484      -103478.972168    -103425.771484   48442.758789      48.437500    -103478.972168             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0             2.495605  226166.003662                   0.0            249.560547  53.200684        0.000000       1.0
2      -103377.333984      -103425.771484    -103377.333984   48490.700684      48.437500    -103425.771484             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0             2.495605  226217.566162                   0.0            249.560547  48.437500        0.000000       1.0
3      -103328.896484      -103377.333984    -103328.896484   48485.937500      48.437500    -103377.333984             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0             2.495605  226269.128662                   0.0            249.560547  48.437500        0.000000       1.0
4      -103280.458984      -103328.896484    -103280.458984   48485.937500      48.437500    -103328.896484             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0             2.495605  226320.691162                   0.0            249.560547  48.437500        0.000000       1.0
5      -103232.021484      -103279.963379    -103232.021484   48485.937500      48.437500    -103279.963379             0.0                     0.0          96.875           100.0                0.0                1.0                  0.0             2.495605  226320.691162                   0.0            249.560547  47.941895      -51.562500       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1015/2048, buf_size=200.[0m
[01/09 18:41:00]  --------------------------------------------------------------------------------
[01/09 18:41:00]  Iteration: 37 (0 solution, 36 counterexamples)
[01/09 18:42:52]  Generator returned sat in 107.324696 secs.
[01/09 18:42:52]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1max_qdel + 1min_buffer + -1max_buffer + 8 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -3/2min_c + -2max_c + 1/2min_buffer_bytes + 1max_buffer_bytes + -4 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 18:43:56]  Improved gap from 48.4375 to 100
[01/09 18:43:57]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/09 18:43:57]  Verifer returned sat in 64.745686 secs.
[01/09 18:43:57]  sf_get_cex returned in 64.860034 secs.
[01/09 18:43:57]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0       -1.747996e+06       -1.748278e+06     -1.747996e+06       0.496582       0.495117     -1.748278e+06        0.495361                0.000000       99.504639      103.467529                0.0                1.0                  0.0             3.481201   1.870818e+06                   0.0            360.191284  281.981445      181.981445       0.0
1       -1.747896e+06       -1.748080e+06     -1.747896e+06   99787.115479      99.504639     -1.748080e+06        0.495361                0.495361       99.504639      103.467529                0.0                2.0                  0.0             2.000000   1.870818e+06                   0.0            206.935059  183.467529      181.486084       1.0
2       -1.747777e+06       -1.747981e+06     -1.747777e+06  119193.240234     119.009277     -1.747981e+06        0.990723                0.495361       99.504639      103.467529                0.0                2.0                  0.0             2.000000   1.870818e+06                   0.0            206.935059  202.972168      200.000000       1.0
3       -1.747658e+06       -1.747878e+06     -1.747658e+06  119213.240234     119.009277     -1.747878e+06       20.000000                0.990723      100.000000      103.467529                0.0                2.0                  0.0             2.000000   1.870818e+06                   0.0            206.935059  200.000000      200.000000       1.0
4       -1.747539e+06       -1.747878e+06     -1.747539e+06  119724.638672     119.504639     -1.747878e+06       39.504639               20.000000      100.000000      102.972168                0.0                2.0                  0.0             2.000000   1.870818e+06                   0.0            205.944336  300.000000      200.000000       1.0
5       -1.747419e+06       -1.747775e+06     -1.747419e+06  119844.143311     119.504639     -1.747775e+06       59.009277               39.504639      100.000000      102.971924                1.0                3.0                  1.0             2.000000   1.870818e+06                 100.0            205.943848  297.028076      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=239673/4096, alpha=79891/4096, buf_size=200.[0m
[01/09 18:43:57]  --------------------------------------------------------------------------------
[01/09 18:43:57]  Iteration: 38 (0 solution, 37 counterexamples)
[01/09 19:00:49]  Generator returned sat in 1008.482533 secs.
[01/09 19:00:49]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + 1max_buffer > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1min_qdel + -1max_qdel + -1min_buffer > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -3/2min_c + -1max_c + -1/2min_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 19:00:55]  Improved gap from 0.0 to 100
[01/09 19:00:56]  Improved number of small numbers from 104 to 106 out of a max of 134
[01/09 19:00:56]  Verifer returned sat in 6.733911 secs.
[01/09 19:00:56]  sf_get_cex returned in 6.871125 secs.
[01/09 19:00:56]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0       -1.747999e+06       -1.748245e+06     -1.747999e+06       0.496582       0.495117     -1.748245e+06        0.495117                0.000000       81.485352           100.0                2.0                4.0                  2.0             4.495117   1.870838e+06            162.970703            449.511719  245.941406      198.514648       3.0
1       -1.747898e+06       -1.748162e+06     -1.747898e+06  101236.670898     100.990234     -1.748162e+06        0.495117                0.495117       81.485352           100.0                0.0                2.0                  2.0             2.000000   1.870838e+06            162.970703            200.000000  263.465820      199.504883       1.0
2       -1.747797e+06       -1.747998e+06     -1.747797e+06  101254.195312     100.990234     -1.747998e+06        0.990234                0.495117       82.475586           100.0                0.0                2.0                  2.0             2.000000   1.870838e+06            164.951172            200.000000  200.000000      200.000000       1.0
3       -1.747695e+06       -1.747898e+06     -1.747695e+06  102181.458984     101.980469     -1.747898e+06        2.970703                0.990234       87.986979           100.0                0.0                2.0                  2.0             2.000000   1.870838e+06            175.973958            200.000000  200.000000      200.000000       1.0
4       -1.747588e+06       -1.747898e+06     -1.747588e+06  107694.832682     107.491862     -1.747898e+06       10.462565                2.970703       87.986979           100.0                0.0                2.0                  2.0             2.000000   1.870838e+06            175.973958            200.000000  300.000000      200.000000       1.0
5       -1.747480e+06       -1.747797e+06     -1.747480e+06  107802.324544     107.491862     -1.747797e+06       17.954427               10.462565       87.986979           100.0                1.0                3.0                  2.0             2.000000   1.870838e+06            175.973958            200.000000  299.009592      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=53635/3072, alpha=19973/1024, buf_size=200.[0m
[01/09 19:00:56]  --------------------------------------------------------------------------------
[01/09 19:00:56]  Iteration: 39 (0 solution, 38 counterexamples)
[01/09 19:08:32]  Generator returned sat in 452.110968 secs.
[01/09 19:08:33]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1/2min_buffer_bytes + 8 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_c + 1max_c + -1/2min_buffer_bytes + -1/2max_buffer_bytes + -2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 19:09:51]  Improved gap from 1.7478778545673077 to 48.4375
[01/09 19:09:53]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 19:09:53]  Verifer returned sat in 80.290370 secs.
[01/09 19:09:53]  sf_get_cex returned in 80.447583 secs.
[01/09 19:09:53]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0          -23.750000          -24.000000        -23.750000       1.000000       1.000000        -24.000000           0.125                   0.125       24.250000           101.0                1.0                3.0                  1.0               2.3125      20.000000             24.250000              233.5625   0.125000       -4.000000       2.0
1            0.500000          -19.000000          0.500000   24250.250000      24.250000        -19.000000           0.125                   0.125       24.250000           101.0                0.0                1.0                  1.0               2.3125      70.671875             24.250000              233.5625  19.375000      -29.078125       0.0
2           49.000000           29.468750         49.000000   48519.500000      48.500000         29.468750           0.125                   0.125       24.250000           101.0                0.0                1.0                  1.0               2.3125     122.187500             24.250000              233.5625  19.406250      -29.062500       0.0
3           97.500000           78.000000         97.500000   48519.531250      48.500000         78.000000           0.125                   0.125       32.333333           101.0                0.0                1.0                  1.0               2.3125     173.500000             32.333333              233.5625  19.375000      -29.250000       0.0
4          162.166667          127.000000        162.166667   64686.166667      64.666667        127.000000           0.125                   0.125       36.500000           101.0                0.0                1.0                  1.0               2.3125     224.679688             36.500000              233.5625  35.041667      -13.403646       0.0
5          181.166667          175.453125        181.166667   19035.166667      19.000000        175.453125           0.125                   0.125       38.890625           101.0                0.0                1.0                  1.0               2.3125     225.000000             38.890625              233.5625   5.588542      -94.083333       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=19, buf_size=200.[0m
[01/09 19:09:53]  --------------------------------------------------------------------------------
[01/09 19:09:53]  Iteration: 40 (0 solution, 39 counterexamples)
[01/09 19:12:37]  Generator returned sat in 159.400827 secs.
[01/09 19:12:37]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1min_qdel + -1max_qdel + 1min_buffer + 1max_buffer + -2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1/2min_c + 1max_c + 2min_buffer_bytes + -1/2max_buffer_bytes + -10 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 19:12:46]  Improved gap from 0.0 to 48.4375
[01/09 19:12:46]  Improved number of small numbers from 127 to 134 out of a max of 134
[01/09 19:12:46]  Verifer returned sat in 9.280509 secs.
[01/09 19:12:46]  sf_get_cex returned in 9.411729 secs.
[01/09 19:12:46]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t   queue_t  bottle_queue_t  qdelay_t
0       -27895.659668       -27896.659668     -27895.659668       0.999756       0.999756     -27896.659668             0.5                     0.0         48.4375           100.0                0.0                2.0                  0.0             2.499756    9090.603516                0.0000            249.975586   0.50000        0.000244       1.0
1       -27847.222168       -27896.159668     -27847.222168   48438.500000      48.437500     -27896.159668             0.5                     0.5         48.4375           100.0                1.0                3.0                  1.0             2.499756    9142.165771               48.4375            249.975586  48.43750        0.000000       2.0
2       -27798.784668       -27847.722168     -27798.784668   48486.437500      48.437500     -27847.722168             0.5                     0.5         48.4375           100.0                0.0                2.0                  1.0             2.499756    9193.728271               48.4375            249.975586  48.43750        0.000000       1.0
3       -27750.347168       -27799.284668     -27750.347168   48486.437500      48.437500     -27799.284668             0.5                     0.5         48.4375           100.0                0.0                2.0                  1.0             2.499756    9245.290771               48.4375            249.975586  48.43750        0.000000       1.0
4       -27701.909668       -27750.347168     -27701.909668   48486.437500      48.437500     -27750.347168             0.5                     0.5         48.4375           100.0                0.0                1.0                  1.0             2.499756    9296.353271               48.4375            249.975586  47.93750       -0.500000       0.0
5       -27677.690918       -27697.159668     -27677.690918   24267.187500      24.218750     -27697.159668             0.5                     0.5         48.4375           100.0                0.0                1.0                  1.0             2.499756    9296.353516               48.4375            249.975586  18.96875      -76.281006       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=39/2, buf_size=200.[0m
[01/09 19:12:46]  --------------------------------------------------------------------------------
[01/09 19:12:46]  Iteration: 41 (0 solution, 40 counterexamples)
[01/09 19:37:24]  Generator returned sat in 1473.254795 secs.
[01/09 19:37:24]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_buffer + 1max_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 3/2min_c + 3/2min_buffer_bytes + 1/2max_buffer_bytes + -10 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 19:38:09]  Improved gap from 0.0 to 48.4375
[01/09 19:38:11]  Improved number of small numbers from 107 to 109 out of a max of 134
[01/09 19:38:11]  Verifer returned sat in 46.382614 secs.
[01/09 19:38:11]  sf_get_cex returned in 46.522340 secs.
[01/09 19:38:11]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       565326.383401       565308.458054     565326.383401       0.999512       0.999756     565308.458054        0.043403                0.000000       36.371528           100.0                0.0                1.0                  0.0                  2.0    9097.314209                   0.0                 200.0  17.881944       17.881944       0.0
1       565344.612568       565308.458054     565344.612568   18247.092014      18.229167     565308.458054        0.043403                0.043403       36.371528           100.0                0.0                1.0                  0.0                  1.0    9148.876709                   0.0                 100.0  36.111111      -12.326389       0.0
2       565399.213262       565356.895554     565399.213262   54636.848958      54.600694     565356.895554        0.043403                0.043403       36.371528           100.0                0.0                1.0                  0.0                  1.0    9200.439209                   0.0                 100.0  42.274306       -6.163194       0.0
3       565453.813956       565405.333054     565453.813956   54643.012153      54.600694     565405.333054        0.043403                0.043403       36.371528           100.0                0.0                1.0                  0.0                  1.0    9252.001709                   0.0                 100.0  48.437500        0.000000       0.0
4       565508.414651       565453.770554     565508.414651   54649.175347      54.600694     565453.770554        0.043403                0.043403       36.371528           100.0                0.0                2.0                  0.0                  1.0    9297.357666                   0.0                 100.0  54.600694       -0.043349       1.0
5       565526.643818       565508.414651     565526.643818   18283.810764      18.229167     565508.414651        0.043403                0.043403       39.991319           100.0                0.0                1.0                  0.0                  1.0    9297.357666                   0.0                 100.0  18.185764      -81.814182       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=875/48, buf_size=200.[0m
[01/09 19:38:11]  --------------------------------------------------------------------------------
[01/09 19:38:11]  Iteration: 42 (0 solution, 41 counterexamples)
[01/09 19:52:15]  Generator returned sat in 840.487348 secs.
[01/09 19:52:16]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1max_qdel + -1min_buffer + -1max_buffer + -5 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -3/2min_c + -3/2max_c + 2min_buffer_bytes + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/09 19:52:52]  Improved gap from 14.17607223476298 to 48.4375
[01/09 19:52:53]  Improved number of small numbers from 91 to 96 out of a max of 134
[01/09 19:52:53]  Verifer returned sat in 37.558649 secs.
[01/09 19:52:53]  sf_get_cex returned in 37.714029 secs.
[01/09 19:52:53]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       565326.383301       565326.216150     565326.383301       0.999268       0.999512     565326.216150        0.167151                0.000000       29.224094           100.0                0.0                1.0                  0.0                  2.0    9079.555908                   0.0                 200.0   0.000000       -0.000205       0.0
1       565375.476296       565326.871644     565375.476296   49093.161907      49.092995     565326.871644        0.167151                0.167151       29.224094           100.0                0.0                1.0                  0.0                  1.0    9130.462891                   0.0                 100.0  48.437500       -0.000228       0.0
2       565424.569290       565375.440243     565424.569290   49141.599407      49.092995     565375.440243        0.167151                0.167151       29.224094           100.0                0.0                1.0                  0.0                  1.0    9181.370117                   0.0                 100.0  48.961896       -0.000006       0.0
3       565473.662285       565424.533238     565473.662285   49142.123803      49.092995     565424.533238        0.167151                0.167151       32.553865           100.0                0.0                1.0                  0.0                  1.0    9232.277129                   0.0                 100.0  48.961896        0.000000       0.0
4       565526.085051       565473.495134     565526.085051   52471.894665      52.422766     565473.495134        0.167151                0.167151       36.655872           100.0                0.0                2.0                  0.0                  1.0    9279.854248                   0.0                 100.0  52.422766       -0.000115       1.0
5       565545.953952       565526.085051     565545.953952   19921.490966      19.868901     565526.085051        0.167151                0.167151       39.842681           100.0                0.0                1.0                  0.0                  1.0    9279.854248                   0.0                 100.0  19.701750      -80.131214       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=87145/4386, buf_size=200.[0m
[01/09 19:52:53]  --------------------------------------------------------------------------------
[01/09 19:52:53]  Iteration: 43 (0 solution, 42 counterexamples)
[01/09 20:13:10]  Generator returned sat in 1212.142253 secs.
[01/09 20:13:10]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 2min_c + -2max_c + 1/2min_buffer_bytes + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_qdel + 1max_qdel + -1max_buffer > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 20:13:29]  Improved gap from 19.949799196787147 to 48.4375
[01/09 20:13:30]  Improved number of small numbers from 99 to 102 out of a max of 134
[01/09 20:13:30]  Verifer returned sat in 19.597261 secs.
[01/09 20:13:30]  sf_get_cex returned in 19.739992 secs.
[01/09 20:13:30]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       565378.301448       565359.933492     565378.301448       0.999268       0.999512     565359.933492        0.012451                0.000000       36.328906           100.0                0.0                2.0                  0.0                  4.0    9039.607666              0.000000                 400.0  18.355505       12.124446       1.0
1       565414.627229       565366.164742     565414.627229   36344.149206      36.325781     565366.164742        0.012451                0.012451       36.328906           100.0                1.0                3.0                  1.0                  4.0    9091.154541             36.328906                 400.0  48.450036       -0.002898       2.0
2       565450.953011       565414.617867     565450.953011   36374.243738      36.325781     565414.617867        0.012451                0.012451       36.328906           100.0                0.0                1.0                  1.0                  4.0    9142.716850             36.328906                 400.0  36.322693      -12.114807       0.0
3       565487.281917       565463.055367     565487.281917   36365.241394      36.328906     565463.055367        0.012451                0.012451       36.328906           100.0                0.0                1.0                  1.0                  4.0    9194.279350             36.328906                 400.0  24.214099      -24.223401       0.0
4       565523.610823       565511.492867     565523.610823   36353.132800      36.328906     565511.492867        0.012451                0.012451       36.332031           100.0                0.0                1.0                  1.0                  4.0    9245.841850             36.332031                 400.0  12.105505      -36.331995       0.0
5       565559.942854       565559.930367     565559.942854   36344.149206      36.332031     565559.930367        0.012451                0.012451       38.753125           100.0                0.0                1.0                  1.0                  4.0    9245.842041             38.753125                 400.0   0.000036      -99.999773       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1/320, buf_size=200.[0m
[01/09 20:13:30]  --------------------------------------------------------------------------------
[01/09 20:13:30]  Iteration: 44 (0 solution, 43 counterexamples)
[01/09 20:25:34]  Generator returned sat in 719.162884 secs.
[01/09 20:25:34]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1max_qdel + -1max_buffer + 6 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1max_buffer > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 20:25:36]  Improved gap from 0.0 to 100
[01/09 20:25:37]  Improved number of small numbers from 114 to 114 out of a max of 134
[01/09 20:25:37]  Verifer returned sat in 2.788616 secs.
[01/09 20:25:37]  sf_get_cex returned in 2.926150 secs.
[01/09 20:25:37]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0       565506.183941       565219.677917     565506.183941       0.999268       0.999512     565219.677917        0.000000                0.000000       89.397590      126.746988                1.0                3.0                  1.0             2.518072    9091.154541             89.397590            319.158078  286.506024      191.566265       2.0
1       565615.099603       565314.617676     565615.099603  109202.168675     108.915663     565314.617676        0.481928                0.000000       89.397590      126.746988                0.0                2.0                  1.0             2.518072    9091.154541             89.397590            319.158078  300.000000      200.000000       1.0
2       565704.497194       565494.376712     565704.497194   89698.072289      89.397590     565494.376712        0.481928                0.481928       91.566265      126.746988                1.0                3.0                  1.0             2.518072    9091.154541             91.566265            319.158078  209.638554      189.397590       2.0
3       565815.581531       565587.870688     565815.581531  111294.457831     111.084337     565587.870688        0.963855                0.481928       92.048193      126.746988                1.0                3.0                  1.0             2.518072    9091.154541             92.048193            319.158078  226.746988      200.000000       2.0
4       565927.147796       565704.015266     565927.147796  111793.975904     111.566265     565704.015266       12.530120                0.963855       97.349398      126.746988                1.0                3.0                  1.0             2.518072    9091.154541             97.349398            319.158078  210.602410      200.000000       2.0
5       566044.015266       565714.617676     566044.015266  117090.602410     116.867470     565714.617676       29.397590               12.530120       97.349398      110.120482                1.0                3.0                  1.0             2.518072    9091.154541             97.349398            277.291334  300.000000      200.000000       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=2400/83, alpha=1620/83, buf_size=200.[0m
[01/09 20:25:37]  --------------------------------------------------------------------------------
[01/09 20:25:37]  Iteration: 45 (0 solution, 44 counterexamples)
[01/09 20:28:18]  Generator returned sat in 156.412076 secs.
[01/09 20:28:18]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + -1min_buffer + 1max_buffer > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1min_qdel + 1max_qdel + -1min_buffer + 1max_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 2min_c + 3/2max_c + -1min_buffer_bytes + -1max_buffer_bytes + 8 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/09 20:28:38]  Improved gap from 0.0 to 48.4375
[01/09 20:28:39]  Improved number of small numbers from 93 to 94 out of a max of 134
[01/09 20:28:39]  Verifer returned sat in 20.889452 secs.
[01/09 20:28:39]  sf_get_cex returned in 21.032087 secs.
[01/09 20:28:39]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       565706.599603       565688.244693     565706.599603       0.999023       0.999268     565688.244693             0.0                     0.0       36.324553           100.0                0.0                2.0                  0.0             2.012438    9039.602783                   0.0            201.243781  18.354910       12.118331       1.0
1       565742.926835       565694.481298     565742.926835   36345.586925      36.327232     565694.481298             0.0                     0.0       36.324553           100.0                0.0                2.0                  0.0             2.012438    9091.154541                   0.0            201.243781  48.445537       -0.002679       1.0
2       565779.254067       565742.929514     565779.254067   36375.677552      36.327232     565742.929514             0.0                     0.0       36.324553           100.0                0.0                1.0                  0.0             2.012438    9142.717041                   0.0            201.243781  36.324553      -12.112947       0.0
3       565815.581299       565791.367014     565815.581299   36363.556568      36.327232     565791.367014             0.0                     0.0       36.324553           100.0                0.0                1.0                  0.0             2.012438    9194.279541                   0.0            201.243781  24.214285      -24.223215       0.0
4       565851.908531       565839.804514     565851.908531   36351.446300      36.327232     565839.804514             0.0                     0.0       36.330804           100.0                0.0                1.0                  0.0             2.012438    9245.842041                   0.0            201.243781  12.104017      -36.333483       0.0
5       565888.242014       565888.242014     565888.242014   36345.586925      36.333483     565888.242014             0.0                     0.0       38.752143           100.0                0.0                1.0                  0.0             2.012438    9245.842041                   0.0            201.243781   0.000000     -100.000000       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=25/9332, buf_size=200.[0m
[01/09 20:28:39]  --------------------------------------------------------------------------------
[01/09 20:28:39]  Iteration: 46 (0 solution, 45 counterexamples)
[01/09 20:47:18]  Generator returned sat in 1114.219471 secs.
[01/09 20:47:19]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1min_buffer + 1max_buffer + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1min_c + 2max_c + -3/2min_buffer_bytes + 2max_buffer_bytes + -7 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 3/2min_c + 1max_c + 3/2min_buffer_bytes + 1max_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/09 20:47:33]  Improved gap from 19.398496240601503 to 100
[01/09 20:47:33]  Improved number of small numbers from 104 to 134 out of a max of 134
[01/09 20:47:33]  Verifer returned sat in 14.232918 secs.
[01/09 20:47:33]  sf_get_cex returned in 14.374377 secs.
[01/09 20:47:33]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0       565419.436279       565124.436523     565419.436279       0.998779       0.999023     565124.436523        0.000000                0.000000           83.75      199.999756                2.0                4.0                  2.0                  2.0    9514.147461                 167.5            399.999512  294.999756      199.499756       3.0
1       565503.186279       565319.936523     565503.186279   84044.999756      83.750000     565319.936523        0.000000                0.000000           97.75      199.999756                1.0                3.0                  2.0                  2.0    9514.147461                 195.5            399.999512  183.249756      183.249756       2.0
2       565620.436279       565419.936523     565620.436279  117433.249756     117.250000     565419.936523        0.499756                0.000000           98.50      199.999756                0.0                2.0                  2.0                  2.0    9514.147461                 197.0            399.999512  200.000000      200.000000       1.0
3       565738.436279       565516.436523     565738.436279  118200.499756     118.000000     565516.436523       18.499756                0.499756           98.50      199.999756                0.0                2.0                  2.0                  2.0    9514.147461                 197.0            399.999512  203.500000      200.000000       1.0
4       565856.436279       565619.436523     565856.436279  118221.999756     118.000000     565619.436523       36.499756               18.499756           99.00      199.500000                1.0                3.0                  2.0                  2.0    9514.147461                 198.0            399.000000  200.500000      200.000000       2.0
5       565974.936279       565619.936523     565974.936279  118736.999756     118.500000     565619.936523       54.999756               36.499756           99.00      100.000000                2.0                4.0                  2.0                  2.0    9514.147461                 198.0            200.000000  300.000000      200.000000       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=225279/4096, alpha=39/2, buf_size=200.[0m
[01/09 20:47:33]  --------------------------------------------------------------------------------
[01/09 20:47:33]  Iteration: 47 (0 solution, 46 counterexamples)
[01/09 20:53:08]  Generator returned sat in 330.203930 secs.
[01/09 20:53:08]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 8 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1min_qdel + 1max_qdel + -1min_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1min_qdel + -1max_qdel + -1min_buffer + -1max_buffer + 8 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 20:53:24]  Improved gap from 0.0 to 48.4375
[01/09 20:53:24]  Improved number of small numbers from 109 to 134 out of a max of 134
[01/09 20:53:24]  Verifer returned sat in 15.309207 secs.
[01/09 20:53:24]  sf_get_cex returned in 15.449268 secs.
[01/09 20:53:24]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       565520.283936       565517.033936     565520.283936       0.998779       0.998779     565517.033936             0.0                     0.0          97.875          180.75                0.0                2.0                  0.0                  4.5    9514.147217                   0.0               813.375   3.250000          3.2500       1.0
1       565569.221436       565517.033936     565569.221436   48940.750000      48.937500     565517.033936             0.0                     0.0          97.875          180.75                0.0                2.0                  0.0                  4.5    9561.959717                   0.0               813.375  52.187500          0.0000       1.0
2       565618.158936       565569.721436     565618.158936   48989.687500      48.937500     565569.721436             0.0                     0.0          97.875          180.75                0.0                1.0                  0.0                  4.5    9613.022217                   0.0               813.375  48.437500          0.0000       0.0
3       565667.096436       565618.658936     565667.096436   48985.937500      48.937500     565618.658936             0.0                     0.0          97.875          180.75                0.0                1.0                  0.0                  4.5    9664.084717                   0.0               813.375  48.437500          0.0000       0.0
4       565716.033936       565667.596436     565716.033936   48985.937500      48.937500     565667.596436             0.0                     0.0          97.875          180.75                0.0                1.0                  0.0                  4.5    9715.147217                   0.0               813.375  48.437500          0.0000       0.0
5       565764.971436       565716.533691     565764.971436   48985.937500      48.937500     565716.533691             0.0                     0.0          97.875          180.75                0.0                1.0                  0.0                  4.5    9715.147217                   0.0               813.375  48.437744        -51.0625       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=79871/4096, buf_size=200.[0m
[01/09 20:53:24]  --------------------------------------------------------------------------------
[01/09 20:53:24]  Iteration: 48 (0 solution, 47 counterexamples)
[01/09 21:10:07]  Generator returned sat in 997.868556 secs.
[01/09 21:10:07]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1/2max_c + -1min_buffer_bytes + -1/2max_buffer_bytes + -1 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1min_c + 3/2max_c + -1/2min_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 21:10:17]  Improved gap from 41.6875 to 48.4375
[01/09 21:10:17]  Improved number of small numbers from 126 to 126 out of a max of 134
[01/09 21:10:17]  Verifer returned sat in 10.236771 secs.
[01/09 21:10:17]  sf_get_cex returned in 10.346805 secs.
[01/09 21:10:17]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       564531.013102       564526.346436     564531.013102       0.998779       0.998779     564526.346436             0.0                     0.0       87.541667          177.75                0.0                2.0                  0.0                  2.0   10504.834717                   0.0                 355.5   4.666667        4.666667       1.0
1       564574.783936       564526.346436     564574.783936   43775.500000      43.770833     564526.346436             0.0                     0.0       87.541667          177.75                0.0                2.0                  0.0                  2.0   10556.397217                   0.0                 355.5  48.437500        0.000000       1.0
2       564618.554769       564574.783936     564618.554769   43819.270833      43.770833     564574.783936             0.0                     0.0       87.541667          177.75                0.0                2.0                  0.0                  2.0   10607.959717                   0.0                 355.5  43.770833       -4.666667       1.0
3       564662.325602       564623.221436     564662.325602   43814.604167      43.770833     564623.221436             0.0                     0.0       87.541667          177.75                0.0                1.0                  0.0                  2.0   10659.522217                   0.0                 355.5  39.104167       -9.333333       0.0
4       564706.096436       564677.408936     564706.096436   43809.937500      43.770833     564677.408936             0.0                     0.0       87.541667          177.75                0.0                1.0                  0.0                  2.0   10705.334717                   0.0                 355.5  28.687500      -19.750000       0.0
5       564749.867269       564725.846436     564749.867269   43799.520833      43.770833     564725.846436             0.0                     0.0       87.541667          177.75                0.0                1.0                  0.0                  2.0   10705.334717                   0.0                 355.5  24.020833      -75.979167       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=39/2, buf_size=200.[0m
[01/09 21:10:17]  --------------------------------------------------------------------------------
[01/09 21:10:17]  Iteration: 49 (0 solution, 48 counterexamples)
[01/09 22:26:10]  Generator returned sat in 4547.179658 secs.
[01/09 22:26:10]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + 1max_buffer + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1/2min_c + -2max_c + -1min_buffer_bytes + -1/2max_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 1min_qdel + -1max_qdel + -1min_buffer + 6 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 22:26:20]  Improved gap from 0.0 to 100
[01/09 22:26:20]  Improved number of small numbers from 109 to 134 out of a max of 134
[01/09 22:26:20]  Verifer returned sat in 10.104323 secs.
[01/09 22:26:20]  sf_get_cex returned in 10.246801 secs.
[01/09 22:26:20]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0       564342.322266       564058.823730     564342.322266       0.998535       0.998291     564058.823730        0.998535                0.000000            99.0      117.499756                1.0                3.0                  1.0             2.998291   10607.959473                  99.0            352.298462  282.500000           182.5       2.0
1       564441.322266       564257.823730     564441.322266   99283.498535      99.000000     564257.823730        0.998535                0.998535            99.5      117.499756                0.0                2.0                  1.0             2.000000   10607.959473                  99.5            234.999512  182.500000           181.5       1.0
2       564560.322266       564341.823975     564560.322266  119183.498535     119.000000     564341.823975        1.498535                0.998535            99.5      117.499756                0.0                2.0                  1.0             2.000000   10607.959473                  99.5            234.999512  216.999756           200.0       1.0
3       564679.322266       564458.823730     564679.322266  119218.498291     119.000000     564458.823730       20.498535                1.498535           100.0      117.499756                0.0                2.0                  1.0             2.000000   10607.959473                 100.0            234.999512  200.000000           200.0       1.0
4       564798.822266       564458.823730     564798.822266  119720.498535     119.500000     564458.823730       39.998535               20.498535           100.0      116.999756                0.0                2.0                  1.0             2.000000   10607.959473                 100.0            233.999512  300.000000           200.0       1.0
5       564918.322266       564559.323730     564918.322266  119839.998535     119.500000     564559.323730       59.498535               39.998535           100.0      100.500000                1.0                3.0                  1.0             2.000000   10607.959473                 100.0            201.000000  299.500000           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=117/2, alpha=39/2, buf_size=200.[0m
[01/09 22:26:20]  --------------------------------------------------------------------------------
[01/09 22:26:20]  Iteration: 50 (0 solution, 49 counterexamples)
[01/09 22:31:52]  Generator returned sat in 326.022892 secs.
[01/09 22:31:52]  Candidate solution: 
[1m[94mif (+ 1min_qdel + -1max_qdel + 1min_buffer + -1max_buffer + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1max_qdel + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_qdel + -1max_qdel + 1min_buffer + -1max_buffer + 7 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 22:32:28]  Improved gap from 6.0 to 48.4375
[01/09 22:32:28]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/09 22:32:28]  Verifer returned sat in 36.219271 secs.
[01/09 22:32:28]  sf_get_cex returned in 36.379193 secs.
[01/09 22:32:28]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t  queue_t  bottle_queue_t  qdelay_t
0       564532.509766       564528.759766     564532.509766       0.998535       0.998291     564528.759766             0.5                     0.0         48.9375           100.0                2.0                4.0                  2.0                  2.0   10509.584473                97.875                 200.0   3.2500            3.25       3.0
1       564581.447266       564532.509766     564581.447266   48941.250000      48.937500     564532.509766             0.5                     0.5         48.9375           100.0                0.0                1.0                  2.0                  1.0   10556.396973                97.875                 100.0  48.4375           -1.00       0.0
2       564630.384766       564581.947266     564630.384766   48986.437500      48.937500     564581.947266             0.5                     0.5         48.9375           100.0                0.0                1.0                  2.0                  1.0   10607.959473                97.875                 100.0  47.9375           -0.50       0.0
3       564679.322266       564630.384766     564679.322266   48985.937500      48.937500     564630.384766             0.5                     0.5         48.9375           100.0                0.0                1.0                  2.0                  1.0   10659.521973                97.875                 100.0  48.4375            0.00       0.0
4       564728.259766       564678.822266     564728.259766   48986.437500      48.937500     564678.822266             0.5                     0.5         48.9375           100.0                0.0                2.0                  2.0                  1.0   10710.584473                97.875                 100.0  48.9375            0.00       1.0
5       564777.197266       564728.259766     564777.197266   48986.937500      48.937500     564728.259766             0.5                     0.5         48.9375           100.0                0.0                1.0                  2.0                  1.0   10760.646973                97.875                 100.0  48.4375           -1.00       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=39/2, buf_size=200.[0m
[01/09 22:32:28]  --------------------------------------------------------------------------------
[01/09 22:32:28]  Iteration: 51 (0 solution, 50 counterexamples)
[01/09 23:24:00]  Generator returned sat in 3086.713003 secs.
[01/09 23:24:01]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_qdel + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1/2min_c + -1max_c + 1min_buffer_bytes + 1/2max_buffer_bytes + 4 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/09 23:24:40]  Improved gap from 0.0 to 48.4375
[01/09 23:24:42]  Improved number of small numbers from 94 to 109 out of a max of 134
[01/09 23:24:42]  Verifer returned sat in 41.305204 secs.
[01/09 23:24:42]  sf_get_cex returned in 41.424228 secs.
[01/09 23:24:42]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       244156.238079       244127.364567     244156.238079       0.998291       0.998047     244127.364567             0.0                     0.0       24.441964      110.115723                2.0                4.0                  2.0             4.673096   10510.158447             48.883929             514.58131  28.873512       28.873326       3.0
1       244180.680044       244132.688972     244180.680044   24470.837798      24.441964     244132.688972             0.0                     0.0       24.441964      110.115723                0.0                2.0                  2.0             4.673096   10556.396729             48.883929             514.58131  47.991071       -0.446429       1.0
2       244229.563972       244181.126472     244229.563972   48931.919643      48.883929     244181.126472             0.0                     0.0       24.441964      110.115723                0.0                1.0                  2.0             4.673096   10607.959229             48.883929             514.58131  48.437500        0.000000       0.0
3       244249.340758       244229.563972     244249.340758   19825.223214      19.776786     244229.563972             0.0                     0.0       32.291667      110.115723                0.0                2.0                  2.0             4.673096   10659.521484             64.583333             514.58131  19.776786      -28.660958       1.0
4       244313.924091       244278.555044     244313.924091   64603.110119      64.583333     244278.555044             0.0                     0.0       36.466518      110.115723                0.0                1.0                  2.0             4.673096   10710.530518             72.933036             514.58131  35.369048      -13.068592       0.0
5       244333.700877       244327.141353     244333.700877   19812.154762      19.776786     244327.141353             0.0                     0.0       38.890476      110.115723                0.0                1.0                  2.0             4.673096   10713.521973             77.780952             514.58131   6.559524      -90.300351       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=2215/112, buf_size=200.[0m
[01/09 23:24:42]  --------------------------------------------------------------------------------
[01/09 23:24:42]  Iteration: 52 (0 solution, 51 counterexamples)
[01/09 23:29:38]  Generator returned sat in 290.648926 secs.
[01/09 23:29:38]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_c + 1/2max_c + -1/2min_buffer_bytes + -6 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 2min_c + -1/2max_c + -1/2max_buffer_bytes + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 23:29:54]  Improved gap from 0.0 to 48.4375
[01/09 23:29:56]  Improved number of small numbers from 81 to 102 out of a max of 134
[01/09 23:29:56]  Verifer returned sat in 17.212438 secs.
[01/09 23:29:56]  sf_get_cex returned in 17.370513 secs.
[01/09 23:29:56]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       212798.304847       212794.022305     212798.304847       0.998291       0.998047     212794.022305        0.032471                0.000000       64.916667      101.999756                1.0                3.0                  1.0                  2.0   10461.459473             64.916667            203.999512   4.250071        4.249965       2.0
1       212847.242347       212798.272305     212847.242347   48941.782542      48.937500     212798.272305        0.032471                0.032471       64.916667      101.999756                2.0                4.0                  2.0                  2.0   10507.772217            129.833333            203.999512  48.937571       -0.499791       3.0
2       212896.179847       212847.709805     212896.179847   48986.470042      48.937500     212847.709805        0.032471                0.032471       64.916667      101.999756                0.0                1.0                  2.0                  2.0   10559.334473            129.833333            203.999512  48.437571       -0.000035       0.0
3       212928.638181       212896.647305     212928.638181   32506.803375      32.458333     212896.647305        0.032471                0.032471       64.916667      101.999756                0.0                1.0                  2.0                  2.0   10610.397079            129.833333            203.999512  31.958405      -16.479095       0.0
4       212961.096514       212945.084805     212961.096514   32490.324209      32.458333     212945.084805        0.032471                0.032471       64.916667      101.999756                0.0                1.0                  2.0                  2.0   10661.959579            129.833333            203.999512  15.979238      -32.458262       0.0
5       212993.554847       212993.522305     212993.554847   32474.345042      32.458333     212993.522305        0.032471                0.032471       64.916667      101.999756                0.0                1.0                  2.0                  2.0   10713.521973            129.833333            203.999512   0.000071      -48.437535       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=767/48, buf_size=200.[0m
[01/09 23:29:56]  --------------------------------------------------------------------------------
[01/09 23:29:56]  Iteration: 53 (0 solution, 52 counterexamples)
[01/09 23:57:50]  Generator returned sat in 1668.181978 secs.
[01/09 23:57:50]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1max_qdel + 1min_buffer + -6 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ -1min_qdel + -1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/09 23:58:01]  Improved gap from 0.5 to 48.4375
[01/09 23:58:01]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/09 23:58:01]  Verifer returned sat in 11.083114 secs.
[01/09 23:58:01]  sf_get_cex returned in 11.230202 secs.
[01/09 23:58:01]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       213807.526855       213781.312256     213807.526855       0.998047       0.997803     213781.312256        0.998047                0.000000         48.4375           100.0                0.0                1.0                  0.0                  4.0    9473.171631                   0.0                 400.0  25.216553       24.218750       0.0
1       213831.745605       213782.310059     213831.745605   24244.964600      24.218750     213782.310059        0.998047                0.998047         48.4375           100.0                0.0                2.0                  0.0                  2.0    9524.734131                   0.0                 200.0  48.437500        0.000000       1.0
2       213880.183105       213830.747559     213880.183105   48486.935547      48.437500     213830.747559        0.998047                0.998047         48.4375           100.0                0.0                2.0                  0.0                  2.0    9576.296631                   0.0                 200.0  48.437500        0.000000       1.0
3       213928.620605       213879.185059     213928.620605   48486.935547      48.437500     213879.185059        0.998047                0.998047         48.4375           100.0                0.0                2.0                  0.0                  2.0    9627.858887                   0.0                 200.0  48.437500       -0.000244       1.0
4       213977.058105       213928.620605     213977.058105   48486.935547      48.437500     213928.620605        0.998047                0.998047         48.4375           100.0                0.0                1.0                  0.0                  2.0    9675.167725                   0.0                 200.0  47.439453       -4.253906       0.0
5       214001.276855       213980.314209     214001.276855   24267.187500      24.218750     213980.314209        0.998047                0.998047         48.4375           100.0                0.0                1.0                  0.0                  2.0    9726.729980                   0.0                 200.0  19.964600      -28.472900       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=511/512, buf_size=200.[0m
[01/09 23:58:01]  --------------------------------------------------------------------------------
[01/09 23:58:01]  Iteration: 54 (0 solution, 53 counterexamples)
[01/10 00:41:08]  Generator returned sat in 2580.869761 secs.
[01/10 00:41:08]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_c + 1max_c + 3/2min_buffer_bytes + 3/2max_buffer_bytes + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ 2min_c + 2max_c + 1min_buffer_bytes + -1/2max_buffer_bytes + 3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/10 00:41:14]  Improved gap from 5.0 to 100
[01/10 00:41:15]  Improved number of small numbers from 104 to 104 out of a max of 134
[01/10 00:41:15]  Verifer returned sat in 6.660543 secs.
[01/10 00:41:15]  sf_get_cex returned in 6.806527 secs.
[01/10 00:41:15]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t  queue_t  bottle_queue_t  qdelay_t
0       113647.564622       113402.064622     113647.564622       0.998047       0.997803     113402.064622           0.000                   0.000          81.000      118.633333                0.0                2.0                  0.0                  5.0  109807.917067                  0.00            593.166667    245.5           200.0       1.0
1       113748.064622       113493.164622     113748.064622  100745.500000     100.500000     113493.164622           0.500                   0.000          81.000      118.633333                1.0                3.0                  1.0                  5.0  109807.917067                 81.00            593.166667    254.4           200.0       2.0
2       113848.564622       113646.564622     113848.564622  100754.900000     100.500000     113646.564622           1.000                   0.500          81.500      118.633333                2.0                4.0                  2.0                  5.0  109807.917067                163.00            593.166667    201.0           200.0       3.0
3       113949.564622       113747.564622     113949.564622  101202.000000     101.000000     113747.564622           2.000                   1.000          86.375      118.633333                1.0                3.0                  2.0                  3.0  109807.917067                172.75            355.900000    200.0           200.0       2.0
4       114055.439622       113847.564622     114055.439622  106077.000000     105.875000     113847.564622           7.875                   2.000          89.100      118.633333                1.0                3.0                  2.0                  3.0  109807.917067                178.20            355.900000    200.0           200.0       2.0
5       114164.039622       113847.564622     114164.039622  108807.875000     108.600000     113847.564622          16.475                   7.875          89.100      100.000000                1.0                3.0                  2.0                  3.0  109807.917067                178.20            300.000000    300.0           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=0, loss_amount=639/40, alpha=39/2, buf_size=200.[0m
[01/10 00:41:15]  --------------------------------------------------------------------------------
[01/10 00:41:15]  Iteration: 55 (0 solution, 54 counterexamples)
[01/10 00:52:04]  Generator returned sat in 643.973612 secs.
[01/10 00:52:05]  Candidate solution: 
[1m[94mif (+ 1min_c + -3/2max_c + -1/2min_buffer_bytes + 5 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1min_qdel + -1max_qdel + -1min_buffer + 1max_buffer > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -1min_qdel + 1min_buffer + -1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/10 00:52:36]  Improved gap from 0.0 to 48.4375
[01/10 00:52:37]  Improved number of small numbers from 104 to 107 out of a max of 134
[01/10 00:52:37]  Verifer returned sat in 31.641702 secs.
[01/10 00:52:37]  sf_get_cex returned in 31.803009 secs.
[01/10 00:52:37]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -679319.126578      -679319.126578    -679319.126578       0.997803       0.997559    -679319.126578             0.0                     0.0       25.213068           100.0                0.0                1.0                  0.0                  2.0  902571.767578                   0.0                 200.0   0.000000       -2.840689       0.0
1      -679268.700441      -679316.285668    -679268.700441   50426.136364      50.426136    -679316.285668             0.0                     0.0       25.213068           100.0                0.0                1.0                  0.0                  2.0  902622.193604                   0.0                 200.0  47.585227       -1.988527       0.0
2      -679218.274305      -679266.711805    -679218.274305   50473.721591      50.426136    -679266.711805             0.0                     0.0       25.213068           100.0                0.0                1.0                  0.0                  2.0  902673.755994                   0.0                 200.0  48.437500        0.000000       0.0
3      -679167.848168      -679218.274305    -679167.848168   50474.573864      50.426136    -679218.274305             0.0                     0.0       32.670455           100.0                0.0                2.0                  0.0                  2.0  902723.329858                   0.0                 200.0  50.426136        0.000000       1.0
4      -679135.177714      -679167.848168    -679135.177714   32720.880682      32.670455    -679167.848168             0.0                     0.0       37.109375           100.0                0.0                2.0                  0.0                  2.0  902774.892358                   0.0                 200.0  32.670455      -15.767045       1.0
5      -679098.068339      -679119.410668    -679098.068339   37142.045455      37.109375    -679119.410668             0.0                     0.0       39.375000           100.0                0.0                1.0                  0.0                  2.0  902826.454834                   0.0                 200.0  21.342330      -27.095194       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1163/4096, buf_size=200.[0m
[01/10 00:52:37]  --------------------------------------------------------------------------------
[01/10 00:52:37]  Iteration: 56 (0 solution, 55 counterexamples)
[01/10 01:55:29]  Generator returned sat in 3766.110004 secs.
[01/10 01:55:29]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + -1/2min_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1max_qdel + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1max_buffer > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/10 01:55:44]  Improved gap from 0.0 to 48.4375
[01/10 01:55:45]  Improved number of small numbers from 97 to 105 out of a max of 134
[01/10 01:55:45]  Verifer returned sat in 15.944464 secs.
[01/10 01:55:45]  sf_get_cex returned in 16.089259 secs.
[01/10 01:55:45]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0      -679290.760855      -679307.560855    -679290.760855       0.997803       0.997314    -679307.560855             0.0                     0.0        37.88125      119.656006                1.0                3.0                  1.0             2.019531  902576.874512              37.88125            241.649043  16.800000       16.799767       2.0
1      -679252.879605      -679307.554605    -679252.879605   37898.050000      37.881250    -679307.554605             0.0                     0.0        37.88125      119.656006                2.0                4.0                  2.0             2.019531  902622.193494              75.76250            241.649043  54.675000        0.000000       3.0
2      -679218.107730      -679252.879605    -679218.107730   34826.550000      34.771875    -679252.879605             0.0                     0.0        37.88125      119.656006                0.0                2.0                  2.0             2.019531  902673.755994              75.76250            241.649043  34.771875      -13.665625       1.0
3      -679183.335855      -679204.442105    -679183.335855   34806.646875      34.771875    -679204.442105             0.0                     0.0        37.88125      119.656006                0.0                1.0                  2.0             2.019531  902725.318494              75.76250            241.649043  21.106250      -27.331250       0.0
4      -679145.454605      -679156.004605    -679145.454605   37902.356250      37.881250    -679156.004605             0.0                     0.0        37.88750      119.656006                0.0                1.0                  2.0             2.019531  902776.880994              75.77500            241.649043  10.550000      -37.887500       0.0
5      -679107.567105      -679107.567105    -679107.567105   37898.050000      37.887500    -679107.567105             0.0                     0.0        39.99750      119.656006                0.0                1.0                  2.0             2.019531  902776.881104              79.99500            241.649043   0.000000      -99.999891       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=199/64, buf_size=200.[0m
[01/10 01:55:45]  --------------------------------------------------------------------------------
[01/10 01:55:45]  Iteration: 57 (0 solution, 56 counterexamples)
[01/10 03:00:32]  Generator returned sat in 3881.278057 secs.
[01/10 03:00:33]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + 1min_buffer + -4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_qdel + 1max_qdel + -1min_buffer + 1max_buffer + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ 1max_qdel + 1max_buffer + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/10 03:00:45]  Improved gap from 19.48051948051948 to 100
[01/10 03:00:46]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/10 03:00:46]  Verifer returned sat in 12.726937 secs.
[01/10 03:00:46]  sf_get_cex returned in 12.877317 secs.
[01/10 03:00:46]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t     queue_t  bottle_queue_t  qdelay_t
0      -662599.563721      -662797.563477    -662599.563721       0.997559        0.99707    -662797.563477        0.499756                0.000000            99.5           100.0                0.0                1.0                  0.0                  2.0   885765.91626                   0.0                 200.0  197.500000           197.5       0.0
1      -662497.563721      -662797.563477    -662497.563721  102197.999756      102.00000    -662797.563477        0.499756                0.499756            99.5           100.0                0.0                1.0                  0.0                  1.0   885765.91626                   0.0                 100.0  299.500000           199.5       0.0
2      -662395.563721      -662599.563721    -662395.563721  102299.999756      102.00000    -662599.563721        1.999756                0.499756            99.5           100.0                0.0                2.0                  0.0                  1.0   885765.91626                   0.0                 100.0  202.000244           200.0       1.0
3      -662293.563721      -662497.563477    -662293.563721  102204.000000      102.00000    -662497.563477        3.999756                1.999756           100.0           100.0                0.0                2.0                  0.0                  1.0   885765.91626                   0.0                 100.0  200.000000           200.0       1.0
4      -662191.063721      -662497.563477    -662191.063721  102703.999756      102.50000    -662497.563477        6.499756                3.999756           100.0           100.0                0.0                2.0                  0.0                  1.0   885765.91626                   0.0                 100.0  300.000000           200.0       1.0
5      -662088.563721      -662397.063721    -662088.563721  102806.499756      102.50000    -662397.063721        8.999756                6.499756           100.0           100.0                1.0                3.0                  1.0                  1.0   885765.91626                 100.0                 100.0  299.500244           200.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, 
, large_loss_count=0, loss_amount=17/2, alpha=5/2, buf_size=200.[0m
[01/10 03:00:46]  --------------------------------------------------------------------------------
[01/10 03:00:46]  Iteration: 58 (0 solution, 57 counterexamples)
[01/10 03:18:31]  Generator returned sat in 1059.052297 secs.
[01/10 03:18:31]  Candidate solution: 
[1m[94mif (+ 1min_qdel + -1max_qdel + -1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1max_qdel + -1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1max_qdel + -1min_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/10 03:18:48]  Improved gap from 5.0 to 48.4375
[01/10 03:18:49]  Improved number of small numbers from 94 to 96 out of a max of 134
[01/10 03:18:49]  Verifer returned sat in 17.806204 secs.
[01/10 03:18:49]  sf_get_cex returned in 17.957322 secs.
[01/10 03:18:49]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       122233.043500       122214.702782     122233.043500       0.997559       0.997070     122214.702782             0.0                     0.0       36.328125           100.0                0.0                2.0                  0.0             4.006219  885765.916260                   0.0            400.621891  18.340718       12.121813       1.0
1       122269.377844       122220.921687     122269.377844   36352.684624      36.334344     122220.921687             0.0                     0.0       36.328125           100.0                0.0                2.0                  0.0             4.006219  885817.454102                   0.0            400.621891  48.456157       -0.006001       1.0
2       122305.712188       122269.384063     122305.712188   36382.800062      36.334344     122269.384063             0.0                     0.0       36.328125           100.0                0.0                1.0                  0.0             4.006219  885869.016384                   0.0            400.621891  36.328125      -12.109375       0.0
3       122342.046532       122317.821563     122342.046532   36370.672030      36.334344     122317.821563             0.0                     0.0       36.328125           100.0                0.0                1.0                  0.0             4.006219  885920.578884                   0.0            400.621891  24.224969      -24.212531       0.0
4       122378.380876       122366.259063     122378.380876   36358.568874      36.334344     122366.259063             0.0                     0.0       36.334344           100.0                0.0                1.0                  0.0             4.006219  885972.141384                   0.0            400.621891  12.121813      -36.315687       0.0
5       122414.721438       122414.696563     122414.721438   36352.684624      36.340563     122414.696563             0.0                     0.0       38.754975           100.0                0.0                1.0                  0.0             4.006219  886023.703857                   0.0            400.621891   0.024876      -48.412651       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=5/804, buf_size=200.[0m
[01/10 03:18:49]  --------------------------------------------------------------------------------
[01/10 03:18:49]  Iteration: 59 (0 solution, 58 counterexamples)
[01/10 03:57:59]  Generator returned sat in 2343.469640 secs.
[01/10 03:57:59]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1max_qdel + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1min_qdel + 1max_qdel + 1min_buffer + -1 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
elif (+ -1min_c + 3/2max_c + -2min_buffer_bytes + -1/2max_buffer_bytes + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha, 1min_c)[0m
[01/10 03:58:20]  Improved gap from 0.0 to 48.4375
[01/10 03:58:20]  Improved number of small numbers from 79 to 134 out of a max of 134
[01/10 03:58:20]  Verifer returned sat in 20.626695 secs.
[01/10 03:58:20]  sf_get_cex returned in 20.791254 secs.
[01/10 03:58:20]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       273132.280518       273131.537354     273132.280518       0.997559       0.996826     273131.537354        0.243164                0.000000         48.9375      101.043213                0.0                2.0                  0.0                  2.0  734855.300537                0.0000            202.086426   0.500000        0.500000       1.0
1       273181.218018       273132.037354     273181.218018   48938.243164      48.937500     273132.037354        0.243164                0.243164         48.9375      101.043213                1.0                3.0                  1.0                  2.0  734905.863037               48.9375            202.086426  48.937500        0.000000       2.0
2       273230.155518       273181.474854     273230.155518   48986.680664      48.937500     273181.474854        0.243164                0.243164         48.9375      101.043213                0.0                1.0                  1.0                  2.0  734956.925537               48.9375            202.086426  48.437500        0.000000       0.0
3       273279.593018       273229.912354     273279.593018   49486.180664      49.437500     273229.912354        0.243164                0.243164         48.9375      101.043213                0.0                2.0                  1.0                  2.0  735007.488037               48.9375            202.086426  49.437500        0.000000       1.0
4       273328.530518       273279.349854     273328.530518   48987.180664      48.937500     273279.349854        0.243164                0.243164         48.9375      101.043213                0.0                2.0                  1.0                  2.0  735058.550537               48.9375            202.086426  48.937500        0.000000       1.0
5       273377.468018       273328.787598     273377.468018   48986.680664      48.937500     273328.787598        0.243164                0.243164         48.9375      101.043213                0.0                1.0                  1.0                  2.0  735109.612793               48.9375            202.086426  48.437256       -0.000244       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=1/2, buf_size=200.[0m
[01/10 03:58:20]  --------------------------------------------------------------------------------
[01/10 03:58:20]  Iteration: 60 (0 solution, 59 counterexamples)
[01/10 05:10:12]  Generator returned sat in 4305.570497 secs.
[01/10 05:10:12]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1max_qdel + -1max_buffer + 6 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_qdel + 1max_qdel + 1min_buffer + 1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + 1alpha)[0m
[01/10 05:10:26]  Improved gap from 48.4375 to 48.4375
[01/10 05:10:26]  Improved number of small numbers from 103 to 134 out of a max of 134
[01/10 05:10:26]  Verifer returned sat in 13.692339 secs.
[01/10 05:10:26]  sf_get_cex returned in 13.809865 secs.
[01/10 05:10:26]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       926611.315918       926610.316162     926611.315918       0.997559       0.996582     926610.316162             0.5                     0.0         68.4375           100.0                0.0                2.0                  0.0                  2.5   60120.178711                   0.0                 250.0   0.499756        0.000000       1.0
1       926660.253418       926610.815918     926660.253418   48938.499756      48.937500     926610.815918             0.5                     0.5         68.4375           100.0                0.0                2.0                  0.0                  2.0   60171.240967                   0.0                 200.0  48.937500       -0.000244       1.0
2       926709.190918       926660.253418     926709.190918   48986.937500      48.937500     926660.253418             0.5                     0.5         68.4375           100.0                0.0                1.0                  0.0                  2.0   60222.303711                   0.0                 200.0  48.437500        0.000000       0.0
3       926743.409668       926708.690918     926743.409668   34267.687500      34.218750     926708.690918             0.5                     0.5         68.4375           100.0                0.0                2.0                  0.0                  2.0   60273.866211                   0.0                 200.0  34.218750      -14.218750       1.0
4       926792.347168       926757.128418     926792.347168   48972.218750      48.937500     926757.128418             0.5                     0.5         68.4375           100.0                0.0                1.0                  0.0                  2.0   60325.428711                   0.0                 200.0  34.718750      -13.718750       0.0
5       926826.565918       926805.566162     926826.565918   34253.968750      34.218750     926805.566162             0.5                     0.5         68.4375           100.0                0.0                1.0                  0.0                  2.0   60325.428711                   0.0                 200.0  20.499756      -79.500000       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=39/2, buf_size=200.[0m
[01/10 05:10:26]  --------------------------------------------------------------------------------
[01/10 05:10:26]  Iteration: 61 (0 solution, 60 counterexamples)
[01/10 05:27:01]  Generator returned sat in 988.731222 secs.
[01/10 05:27:02]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1min_buffer + -1max_buffer + 2 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ -1min_qdel + -1max_qdel + 1max_buffer > 0):
    r_f[n][t] = max(alpha, 2min_c)
elif (+ -1min_qdel + 1max_qdel + -1min_buffer + 1max_buffer + 9 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 1min_c + -1alpha)[0m
[01/10 05:27:20]  Improved gap from 4.333333333333333 to 48.4375
[01/10 05:27:21]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/10 05:27:21]  Verifer returned sat in 18.566218 secs.
[01/10 05:27:21]  sf_get_cex returned in 18.726151 secs.
[01/10 05:27:21]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       944467.065918       944466.069336     944467.065918       0.997559       0.996582     944466.069336             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0                  2.0   42264.925293                   0.0                 200.0   0.996582        0.996582       1.0
1       944515.503418       944467.065918     944515.503418   48438.496582      48.437500     944467.065918             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0                  2.0   42315.491211                   0.0                 200.0  48.437500        0.000000       1.0
2       944563.940918       944515.503418     944563.940918   48485.937500      48.437500     944515.503418             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0                  2.0   42367.053711                   0.0                 200.0  48.437500        0.000000       1.0
3       944612.378418       944563.940918     944612.378418   48485.937500      48.437500     944563.940918             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0                  2.0   42418.616211                   0.0                 200.0  48.437500        0.000000       1.0
4       944660.815918       944612.378418     944660.815918   48485.937500      48.437500     944612.378418             0.0                     0.0          96.875           100.0                0.0                2.0                  0.0                  2.0   42470.178711                   0.0                 200.0  48.437500        0.000000       1.0
5       944709.253418       944665.072754     944709.253418   48485.937500      48.437500     944665.072754             0.0                     0.0          96.875           100.0                0.0                1.0                  0.0                  2.0   42470.178711                   0.0                 200.0  44.180664      -51.562500       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=2041/2048, buf_size=200.[0m
[01/10 05:27:21]  --------------------------------------------------------------------------------
[01/10 05:27:21]  Iteration: 62 (0 solution, 61 counterexamples)
[01/10 05:34:24]  Generator returned sat in 417.130764 secs.
[01/10 05:34:25]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1max_qdel + -1min_buffer + 1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1max_qdel + 1min_buffer + -1max_buffer + 6 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
[01/10 05:34:32]  Improved gap from 0.008356313194618534 to 48.4375
[01/10 05:34:32]  Improved number of small numbers from 109 to 134 out of a max of 134
[01/10 05:34:32]  Verifer returned sat in 7.109863 secs.
[01/10 05:34:32]  sf_get_cex returned in 7.263998 secs.
[01/10 05:34:32]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t  queue_t  bottle_queue_t  qdelay_t
0       896780.784912       896780.284912     896780.784912       0.997314       0.996094     896780.284912             0.0                     0.0         48.9375           100.0                1.0                3.0                  1.0             4.499756   42266.428711               48.9375            449.975586   0.5000          0.5000       2.0
1       896829.722412       896780.784912     896829.722412   48938.000000      48.937500     896780.784912             0.0                     0.0         48.9375           100.0                1.0                3.0                  1.0             4.499756   42316.991211               48.9375            449.975586  48.9375          0.0000       2.0
2       896878.659912       896830.222412     896878.659912   48986.437500      48.937500     896830.222412             0.0                     0.0         48.9375           100.0                0.0                1.0                  1.0             4.499756   42368.053711               48.9375            449.975586  48.4375          0.0000       0.0
3       896927.597412       896878.659912     896927.597412   48985.937500      48.937500     896878.659912             0.0                     0.0         48.9375           100.0                0.0                2.0                  1.0             4.499756   42419.116211               48.9375            449.975586  48.9375          0.0000       1.0
4       896976.534912       896928.097412     896976.534912   48986.437500      48.937500     896928.097412             0.0                     0.0         48.9375           100.0                0.0                1.0                  1.0             4.499756   42470.178711               48.9375            449.975586  48.4375          0.0000       0.0
5       897025.472412       896976.534912     897025.472412   48985.937500      48.937500     896976.534912             0.0                     0.0         48.9375           100.0                0.0                2.0                  1.0             4.499756   42470.178711               48.9375            449.975586  48.9375        -51.0625       1.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=2047/4096, buf_size=200.[0m
[01/10 05:34:32]  --------------------------------------------------------------------------------
[01/10 05:34:32]  Iteration: 63 (0 solution, 62 counterexamples)
[01/10 05:42:42]  Generator returned sat in 483.484249 secs.
[01/10 05:42:42]  Candidate solution: 
[1m[94mif (+ 1max_qdel + -1min_buffer + -1max_buffer + 1 > 0):
    r_f[n][t] = max(alpha, 1min_c + -1alpha)
elif (+ 1min_qdel + 1max_qdel + -2 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 1min_c + -1/2max_c + 1/2min_buffer_bytes + 6 > 0):
    r_f[n][t] = max(alpha, 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha, 1/2min_c)[0m
[01/10 05:43:49]  Improved gap from 7.5 to 48.4375
[01/10 05:43:49]  Improved number of small numbers from 134 to 134 out of a max of 134
[01/10 05:43:49]  Verifer returned sat in 66.579093 secs.
[01/10 05:43:49]  sf_get_cex returned in 66.779813 secs.
[01/10 05:43:49]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__max_qdel_0,t  adv__min_buffer_0,t  adv__max_buffer_0,t  adv__wasted_t  min_buffer_bytes_0,t  max_buffer_bytes_0,t    queue_t  bottle_queue_t  qdelay_t
0       896780.222412       896779.831787     896780.222412       0.997314       0.996094     896779.831787        0.390625                0.000000        49.21875           100.0                1.0                3.0                  1.0             2.609375   42266.491211              49.21875              260.9375   0.000000       -0.390625       2.0
1       896829.050537       896780.222412     896829.050537   48828.515625      48.828125     896780.222412        0.390625                0.390625        49.21875           100.0                0.0                1.0                  1.0             1.000000   42318.053711              49.21875              100.0000  48.437500        0.000000       0.0
2       896878.659912       896828.659912     896878.659912   49658.203125      49.609375     896828.659912        0.390625                0.390625        49.21875           100.0                0.0                2.0                  1.0             1.000000   42368.053711              49.21875              100.0000  49.609375       -0.390625       1.0
3       896927.488037       896878.659912     896927.488037   48878.125000      48.828125     896878.659912        0.390625                0.390625        49.21875           100.0                0.0                1.0                  1.0             1.000000   42419.616211              49.21875              100.0000  48.437500        0.000000       0.0
4       896977.097412       896927.097412     896977.097412   49658.203125      49.609375     896927.097412        0.390625                0.390625        49.21875           100.0                0.0                2.0                  1.0             1.000000   42469.616211              49.21875              100.0000  49.609375       -0.390625       1.0
5       897025.925537       896977.097412     897025.925537   48878.125000      48.828125     896977.097412        0.390625                0.390625        49.21875           100.0                0.0                1.0                  1.0             1.000000   42521.178711              49.21875              100.0000  48.437500        0.000000       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, alpha=25/64, buf_size=200.[0m
[01/10 05:43:49]  --------------------------------------------------------------------------------
[01/10 05:43:49]  Iteration: 64 (0 solution, 63 counterexamples)
[01/10 09:26:29]  Generator returned sat in 13352.940713 secs.
[01/10 09:26:29]  Candidate solution: 
[1m[94mif (+ -1min_qdel + -1max_qdel + 1min_buffer + -1max_buffer + 4 > 0):
    r_f[n][t] = max(alpha, 1/2min_c)
elif (+ 2min_c + 1max_c + 1/2min_buffer_bytes + -1/2max_buffer_bytes + -3 > 0):
    r_f[n][t] = max(alpha, 1min_c)
elif (+ -1max_qdel + -1max_buffer + 10 > 0):
    r_f[n][t] = max(alpha, 2min_c)
else:
    r_f[n][t] = max(alpha, 2min_c)[0m
