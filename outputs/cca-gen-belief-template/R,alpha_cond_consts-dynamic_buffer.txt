[01/30 10:33:44]  Namespace(infinite_buffer=False, finite_buffer=False, dynamic_buffer=True, T=9, ideal=True, app_limited=False, fix_minc=False, fix_maxc=False, optimize=False, proofs=False, solution=None)
[01/30 10:33:44]  Using cond_vars: ['min_c', 'max_c', 'min_qdel']
[01/30 10:33:44]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=4, desired_queue_bound_alpha=3, desired_loss_count_bound=4, desired_large_loss_count_bound=4, desired_loss_amount_bound_multiplier=3, desired_loss_amount_bound_alpha=3
[01/30 10:33:44]  Ideal: desired_util_f=0.5, desired_queue_bound_multiplier=4, desired_queue_bound_alpha=3, desired_loss_count_bound=4, desired_large_loss_count_bound=4, desired_loss_amount_bound_multiplier=3, desired_loss_amount_bound_alpha=3
[01/30 10:33:44]  --------------------------------------------------------------------------------
[01/30 10:33:44]  Iteration: 1 (0 solution, 0 counterexamples)
[01/30 10:33:44]  Generator returned sat in 0.005110 secs.
[01/30 10:33:44]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
elif (+ 1min_qdel + 2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 10:33:51]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/30 10:33:51]  Verifer returned sat in 7.153405 secs.
[01/30 10:33:51]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0           -174.333333           -174.333333         -174.333333              1.0              1.0         -174.333333               0.0                       0.0              19.0             100.0                  0.0      0.0          -1.0       1.0
1           -155.333333           -155.333333         -155.333333            400.0             19.0         -155.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
2           -136.333333           -136.333333         -136.333333            400.0             19.0         -136.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
3           -117.333333           -117.333333         -117.333333            400.0             19.0         -117.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
4            -98.333333            -98.333333          -98.333333            400.0             19.0          -98.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
5            -79.333333            -79.333333          -79.333333            400.0             19.0          -79.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
6            -60.333333            -60.333333          -60.333333            400.0             19.0          -60.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
7            -41.333333            -41.333333          -41.333333            400.0             19.0          -41.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
8            -22.333333            -22.333333          -22.333333            400.0             19.0          -22.333333               0.0                       0.0              19.0             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=19, buf_size=99, start_state=[0].[0m
[01/30 10:33:52]  --------------------------------------------------------------------------------
[01/30 10:33:52]  Iteration: 2 (0 solution, 1 counterexamples)
[01/30 10:33:54]  Generator returned sat in 2.419781 secs.
[01/30 10:33:54]  Candidate solution: 
[1m[94mif (+ 3/2min_c + 1max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 10:34:06]  Improved number of small numbers from 117 to 117 out of a max of 135
[01/30 10:34:06]  Verifer returned sat in 11.988619 secs.
[01/30 10:34:06]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0           -631.833496           -912.500163         -631.833496         0.999756         0.999756         -912.500163               0.0                       0.0             93.25        116.666667                  1.0  280.666667          -1.0       2.0
1           -445.833496           -812.500163         -445.833496       466.666667       186.500000         -812.500163              86.0                       0.0             93.25        116.666667                  0.0  280.666667           0.0       1.0
2           -259.833496           -712.500163         -259.833496       466.666667       186.500000         -712.500163             172.0                      86.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
3            -73.833496           -612.500163          -73.833496       466.666667       186.500000         -612.500163             258.0                     172.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
4            112.166504           -512.500163          112.166504       466.666667       186.500000         -512.500163             344.0                     258.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
5            298.166504           -412.500163          298.166504       466.666667       186.500000         -412.500163             430.0                     344.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
6            484.166504           -312.500163          484.166504       466.666667       186.500000         -312.500163             516.0                     430.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
7            670.166504           -212.500163          670.166504       466.666667       186.500000         -212.500163             602.0                     516.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
8            856.166504           -112.500163          856.166504       466.666667       186.500000         -112.500163             688.0                     602.0             93.25        116.666667                  1.0  280.666667           1.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=8, 
, large_loss_count=8, loss_amount=602, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/2, buf_size=842/3, start_state=[0].[0m
[01/30 10:34:06]  --------------------------------------------------------------------------------
[01/30 10:34:06]  Iteration: 3 (0 solution, 2 counterexamples)
[01/30 10:34:17]  Generator returned sat in 10.667969 secs.
[01/30 10:34:17]  Candidate solution: 
[1m[94mif (+ 3/2min_c + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
elif (+ -3/2min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 10:34:37]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 10:34:37]  Verifer returned sat in 19.624183 secs.
[01/30 10:34:37]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0           -415.649170           -416.648682         -415.649170         0.999512         0.999268         -416.648682          0.999512                  0.000000         16.991699             100.0                  0.0      0.0          -1.0       1.0
1           -397.657959           -398.657471         -397.657959       400.000000        17.991211         -398.657471          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           1.0       0.0
2           -379.666748           -380.666260         -379.666748       400.000000        17.991211         -380.666260          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
3           -361.675537           -362.675049         -361.675537       400.000000        17.991211         -362.675049          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
4           -343.684326           -344.683838         -343.684326       400.000000        17.991211         -344.683838          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
5           -325.693115           -326.692627         -325.693115       400.000000        17.991211         -326.692627          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
6           -307.701904           -308.701416         -307.701904       400.000000        17.991211         -308.701416          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
7           -289.710693           -290.710205         -289.710693       400.000000        17.991211         -290.710205          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
8           -271.719482           -272.718994         -271.719482       400.000000        17.991211         -272.718994          0.999512                  0.999512         16.991699             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=2047/2048, buf_size=2047/1024, start_state=[0].[0m
[01/30 10:34:37]  --------------------------------------------------------------------------------
[01/30 10:34:37]  Iteration: 4 (0 solution, 3 counterexamples)
[01/30 10:34:59]  Generator returned sat in 22.355604 secs.
[01/30 10:34:59]  Candidate solution: 
[1m[94mif (+ 2min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
elif (+ 1/2min_c + -1max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 10:35:03]  Improved number of small numbers from 109 to 109 out of a max of 135
[01/30 10:35:03]  Verifer returned sat in 3.025494 secs.
[01/30 10:35:03]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0           -453.191284           -527.691650         -453.191284         0.999512         0.999268         -527.691650               0.0                       0.0         50.999268             100.0                  0.0  74.500366          -1.0       1.0
1           -427.691650           -427.691650         -427.691650       400.000000        25.499634         -427.691650               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
2           -402.192017           -402.192017         -402.192017       400.000000        25.499634         -402.192017               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
3           -376.692383           -376.692383         -376.692383       400.000000        25.499634         -376.692383               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
4           -351.192749           -351.192749         -351.192749       400.000000        25.499634         -351.192749               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
5           -325.693115           -325.693115         -325.693115       400.000000        25.499634         -325.693115               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
6           -300.193481           -300.193481         -300.193481       400.000000        25.499634         -300.193481               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
7           -274.693848           -274.693848         -274.693848       400.000000        25.499634         -274.693848               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
8           -249.194214           -249.194214         -249.194214       400.000000        25.499634         -249.194214               0.0                       0.0         50.999268             100.0                  0.0   0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=4093/4096, buf_size=405507/4096, start_state=[0].[0m
[01/30 10:35:03]  --------------------------------------------------------------------------------
[01/30 10:35:03]  Iteration: 5 (0 solution, 4 counterexamples)
[01/30 10:35:41]  Generator returned sat in 38.374188 secs.
[01/30 10:35:41]  Candidate solution: 
[1m[94mif (+ 2min_c + -1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 1max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 10:36:31]  Improved number of small numbers from 86 to 88 out of a max of 135
[01/30 10:36:31]  Verifer returned sat in 49.354744 secs.
[01/30 10:36:31]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0            761.540609            745.534180          761.540609         0.999268         0.999268          745.534180               0.0                       0.0         24.999634             100.0                  0.0  16.006429          -1.0       1.0
1            786.540243            786.540243          786.540243       400.000000        24.999634          786.540243               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
2            811.539876            811.539876          811.539876       400.000000        24.999634          811.539876               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
3            836.539510            836.539510          836.539510       400.000000        24.999634          836.539510               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
4            861.539144            861.539144          861.539144       400.000000        24.999634          861.539144               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
5            886.538778            886.538778          886.538778       400.000000        24.999634          886.538778               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
6            911.538411            911.538411          911.538411       400.000000        24.999634          911.538411               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
7            936.538045            936.538045          936.538045       400.000000        24.999634          936.538045               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
8            961.537679            961.537679          961.537679       400.000000        24.999634          961.537679               0.0                       0.0         24.999634             100.0                  0.0   0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=38913/2048, buf_size=20, start_state=[0].[0m
[01/30 10:36:31]  --------------------------------------------------------------------------------
[01/30 10:36:31]  Iteration: 6 (0 solution, 5 counterexamples)
[01/30 10:40:06]  Generator returned sat in 212.494555 secs.
[01/30 10:40:07]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 10:42:29]  Improved number of small numbers from 66 to 126 out of a max of 135
[01/30 10:42:29]  Verifer returned sat in 142.331306 secs.
[01/30 10:42:30]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0            111.989746            111.989746          111.989746         0.999268         0.999268          111.989746          0.000000                  0.000000         89.888184        132.334066                  0.0   0.000000          -1.0       0.0
1            220.878662            211.989746          220.878662       529.336263       108.888916          211.989746          0.000000                  0.000000         89.888184        132.334066                  0.0   8.888916           0.0       0.0
2            329.767578            311.989746          329.767578       529.336263       108.888916          311.989746          0.000000                  0.000000         89.888184        132.334066                  0.0  17.777832           0.0       0.0
3            438.656494            411.989746          438.656494       529.336263       108.888916          411.989746          0.000000                  0.000000         89.888184        132.334066                  0.0  26.666748           0.0       0.0
4            547.545410            511.989746          547.545410       529.336263       108.888916          511.989746          7.889648                  0.000000         89.888184        132.334066                  0.0  27.666016           0.0       0.0
5            656.434326            611.989746          656.434326       529.336263       108.888916          611.989746         16.778564                  7.889648         89.888184        132.334066                  0.0  27.666016           1.0       0.0
6            765.323242            711.989746          765.323242       529.336263       108.888916          711.989746         25.667480                 16.778564         89.888184        132.334066                  0.0  27.666016           1.0       0.0
7            874.212158            811.989746          874.212158       529.336263       108.888916          811.989746         34.556396                 25.667480         89.888184        132.334066                  0.0  27.666016           1.0       0.0
8            983.101074            911.989746          983.101074       529.336263       108.888916          911.989746         43.445312                 34.556396         89.888184        132.334066                  0.0  27.666016           1.0       0.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=0, loss_amount=5561/128, beliefs_remain_consistent=True, beliefs_improve=False, alpha=77827/4096, buf_size=14165/512, start_state=[0].[0m
[01/30 10:42:30]  --------------------------------------------------------------------------------
[01/30 10:42:30]  Iteration: 7 (0 solution, 6 counterexamples)
[01/30 10:45:00]  Generator returned sat in 148.513698 secs.
[01/30 10:45:00]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
elif (+ -1min_c + -2max_c + 2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 10:47:48]  Improved number of small numbers from 80 to 92 out of a max of 135
[01/30 10:47:48]  Verifer returned sat in 167.261739 secs.
[01/30 10:47:48]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0           -165.841858           -165.842041         -165.841858         0.999268         0.999268         -165.842041               0.0                       0.0          0.000488             100.0                  0.0  0.000183          -1.0       0.0
1           -165.841492           -165.841492         -165.841492       400.000000         0.000366         -165.841492               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
2           -165.841125           -165.841125         -165.841125       400.000000         0.000366         -165.841125               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
3           -165.840759           -165.840759         -165.840759       400.000000         0.000366         -165.840759               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
4           -165.840393           -165.840393         -165.840393       400.000000         0.000366         -165.840393               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
5           -165.840027           -165.840027         -165.840027       400.000000         0.000366         -165.840027               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
6           -165.839661           -165.839661         -165.839661       400.000000         0.000366         -165.839661               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
7           -165.839294           -165.839294         -165.839294       400.000000         0.000366         -165.839294               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
8           -165.838928           -165.838928         -165.838928       400.000000         0.000366         -165.838928               0.0                       0.0          0.000488             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=3/8192, buf_size=4095/4096, start_state=[0].[0m
[01/30 10:47:48]  --------------------------------------------------------------------------------
[01/30 10:47:48]  Iteration: 8 (0 solution, 7 counterexamples)
[01/30 10:50:57]  Generator returned sat in 187.778576 secs.
[01/30 10:50:57]  Candidate solution: 
[1m[94mif (+ -1min_qdel + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_qdel + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 10:52:24]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/30 10:52:24]  Verifer returned sat in 86.104525 secs.
[01/30 10:52:24]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0            -511.59082            -511.59082          -511.59082         0.999268         0.999268          -511.59082               0.0                       0.0              88.0             100.0                  1.0      0.0          -1.0       2.0
1            -467.59082            -467.59082          -467.59082       400.000000        44.000000          -467.59082               0.0                       0.0              88.0             100.0                  0.0      0.0           0.0       0.0
2            -291.59082            -367.59082          -291.59082       400.000000       176.000000          -367.59082               0.0                       0.0              88.0             100.0                  0.0     76.0           0.0       0.0
3            -115.59082            -267.59082          -115.59082       400.000000       176.000000          -267.59082              52.0                       0.0              88.0             100.0                  0.0    100.0           0.0       0.0
4              60.40918            -167.59082            60.40918       400.000000       176.000000          -167.59082             128.0                      52.0              88.0             100.0                  0.0    100.0           1.0       1.0
5             236.40918             -67.59082           236.40918       400.000000       176.000000           -67.59082             204.0                     128.0              88.0             100.0                  0.0    100.0           1.0       1.0
6             412.40918              32.40918           412.40918       400.000000       176.000000            32.40918             280.0                     204.0              88.0             100.0                  0.0    100.0           1.0       1.0
7             588.40918             132.40918           588.40918       400.000000       176.000000           132.40918             356.0                     280.0              88.0             100.0                  0.0    100.0           1.0       1.0
8             764.40918             232.40918           764.40918       400.000000       176.000000           232.40918             432.0                     356.0              88.0             100.0                  0.0    100.0           1.0       1.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=6, 
, large_loss_count=6, loss_amount=432, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/4, buf_size=100, start_state=[0].[0m
[01/30 10:52:24]  --------------------------------------------------------------------------------
[01/30 10:52:24]  Iteration: 9 (0 solution, 8 counterexamples)
[01/30 10:57:00]  Generator returned sat in 274.118438 secs.
[01/30 10:57:00]  Candidate solution: 
[1m[94mif (+ -2min_c + 3/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 10:57:28]  Improved number of small numbers from 125 to 125 out of a max of 135
[01/30 10:57:28]  Verifer returned sat in 27.323079 secs.
[01/30 10:57:28]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0           -660.549154           -660.549154         -660.549154         0.999023         0.999268         -660.549154          0.000000                  0.000000         89.236111        119.328704                  0.0    0.000000          -1.0       0.0
1           -482.076931           -560.549154         -482.076931       477.314815       178.472222         -560.549154          0.000000                  0.000000         89.236111        119.328704                  0.0   78.472222           0.0       0.0
2           -303.604709           -460.549154         -303.604709       477.314815       178.472222         -460.549154          0.000000                  0.000000         89.236111        119.328704                  0.0  156.944444           0.0       0.0
3           -125.132487           -360.549154         -125.132487       477.314815       178.472222         -360.549154          0.000000                  0.000000         89.236111        119.328704                  0.0  235.416667           0.0       1.0
4             53.339735           -260.549154           53.339735       477.314815       178.472222         -260.549154         14.872685                  0.000000         89.236111        119.328704                  0.0  299.016204           0.0       1.0
5            231.638346           -160.549154          231.638346       477.314815       178.472222         -160.549154         93.171296                 14.872685         89.236111        119.328704                  1.0  299.016204           1.0       2.0
6            409.936957            -60.549154          409.936957       477.314815       178.472222          -60.549154        171.469907                 93.171296         89.236111        119.328704                  1.0  299.016204           1.0       2.0
7            588.235569             39.450846          588.235569       477.314815       178.472222           39.450846        249.768519                171.469907         89.236111        119.328704                  1.0  299.016204           1.0       2.0
8            766.534180            139.450846          766.534180       477.314815       178.472222          139.450846        328.067130                249.768519         89.236111        119.328704                  1.0  299.016204           1.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=141725/432, beliefs_remain_consistent=True, beliefs_improve=False, alpha=25/144, buf_size=129175/432, start_state=[0].[0m
[01/30 10:57:28]  --------------------------------------------------------------------------------
[01/30 10:57:28]  Iteration: 10 (0 solution, 9 counterexamples)
[01/30 10:59:17]  Generator returned sat in 107.614010 secs.
[01/30 10:59:17]  Candidate solution: 
[1m[94mif (+ 3/2min_c + -1max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
elif (+ 1min_qdel + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 10:59:41]  Improved number of small numbers from 82 to 84 out of a max of 135
[01/30 10:59:41]  Verifer returned sat in 23.899835 secs.
[01/30 10:59:41]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0           -992.954224           -993.953125         -992.954224         0.998535         0.998779         -993.953125          0.998779                  0.000000         68.664225             100.0                  0.0  0.000122          -1.0       1.0
1           -958.622111           -959.620890         -958.622111       400.000000        34.332113         -959.620890          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           1.0       0.0
2           -924.289998           -925.288778         -924.289998       400.000000        34.332113         -925.288778          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
3           -889.957886           -890.956665         -889.957886       400.000000        34.332113         -890.956665          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
4           -855.625773           -856.624552         -855.625773       400.000000        34.332113         -856.624552          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
5           -821.293660           -822.292440         -821.293660       400.000000        34.332113         -822.292440          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
6           -786.961548           -787.960327         -786.961548       400.000000        34.332113         -787.960327          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
7           -752.629435           -753.628215         -752.629435       400.000000        34.332113         -753.628215          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
8           -718.297323           -719.296102         -718.297323       400.000000        34.332113         -719.296102          0.998779                  0.998779         68.664225             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=2045/2048, buf_size=8181/4096, start_state=[0].[0m
[01/30 10:59:41]  --------------------------------------------------------------------------------
[01/30 10:59:41]  Iteration: 11 (0 solution, 10 counterexamples)
[01/30 11:03:42]  Generator returned sat in 238.440037 secs.
[01/30 11:03:42]  Candidate solution: 
[1m[94mif (+ 1min_qdel + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
elif (+ -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 11:03:49]  Improved number of small numbers from 91 to 93 out of a max of 135
[01/30 11:03:49]  Verifer returned sat in 7.421781 secs.
[01/30 11:03:49]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0           -940.552775           -946.208008         -940.552775         0.998291         0.998779         -946.208008          0.998779                  0.000000         16.975098             100.0                  0.0  4.656453          -1.0       1.0
1           -923.244344           -924.243123         -923.244344       400.000000        17.308431         -924.243123          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           1.0       0.0
2           -905.935913           -906.934692         -905.935913       400.000000        17.308431         -906.934692          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
3           -888.627482           -889.626261         -888.627482       400.000000        17.308431         -889.626261          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
4           -871.319051           -872.317830         -871.319051       400.000000        17.308431         -872.317830          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
5           -854.010620           -855.009399         -854.010620       400.000000        17.308431         -855.009399          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
6           -836.702189           -837.700968         -836.702189       400.000000        17.308431         -837.700968          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
7           -819.393758           -820.392537         -819.393758       400.000000        17.308431         -820.392537          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
8           -802.085327           -803.084106         -802.085327       400.000000        17.308431         -803.084106          0.998779                  0.998779         16.975098             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/3, buf_size=405509/4096, start_state=[0].[0m
[01/30 11:03:49]  --------------------------------------------------------------------------------
[01/30 11:03:49]  Iteration: 12 (0 solution, 11 counterexamples)
[01/30 11:07:35]  Generator returned sat in 223.578567 secs.
[01/30 11:07:35]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + -3/2max_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 11:08:16]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 11:08:16]  Verifer returned sat in 41.060303 secs.
[01/30 11:08:16]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -1306.824219          -1507.198975        -1306.824219         0.998047         0.998535        -1507.198975          0.499756                  0.000000           97.1875         104.15625                  2.0  199.875          -1.0       3.0
1          -1112.449219          -1407.198975        -1112.449219       416.625000       194.375000        -1407.198975         72.374756                  0.499756           97.1875         104.15625                  2.0  222.375           1.0       3.0
2           -918.199219          -1307.198975         -918.199219       416.625000       194.375000        -1307.198975        166.624756                 72.374756           97.1875         104.15625                  0.0  222.375           1.0       1.0
3           -723.949219          -1207.198975         -723.949219       416.625000       194.375000        -1207.198975        260.874756                166.624756           97.1875         104.15625                  1.0  222.375           1.0       2.0
4           -529.699219          -1107.198975         -529.699219       416.625000       194.375000        -1107.198975        355.124756                260.874756           97.1875         104.15625                  1.0  222.375           1.0       2.0
5           -335.449219          -1007.198975         -335.449219       416.625000       194.375000        -1007.198975        449.374756                355.124756           97.1875         104.15625                  1.0  222.375           1.0       2.0
6           -141.199219           -907.198975         -141.199219       416.625000       194.375000         -907.198975        543.624756                449.374756           97.1875         104.15625                  1.0  222.375           1.0       2.0
7             53.050781           -807.198975           53.050781       416.625000       194.375000         -807.198975        637.874756                543.624756           97.1875         104.15625                  1.0  222.375           1.0       2.0
8            247.300781           -707.198975          247.300781       416.625000       194.375000         -707.198975        732.124756                637.874756           97.1875         104.15625                  1.0  222.375           1.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=8, 
, large_loss_count=8, loss_amount=2639/4, beliefs_remain_consistent=True, beliefs_improve=False, alpha=81407/4096, buf_size=1779/8, start_state=[0].[0m
[01/30 11:08:17]  --------------------------------------------------------------------------------
[01/30 11:08:17]  Iteration: 13 (0 solution, 12 counterexamples)
[01/30 11:10:23]  Generator returned sat in 124.140851 secs.
[01/30 11:10:23]  Candidate solution: 
[1m[94mif (+ -2min_c + 3/2max_c + -1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 2max_c + -1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 11:10:39]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/30 11:10:39]  Verifer returned sat in 16.004192 secs.
[01/30 11:10:39]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -1562.853271          -1630.478027        -1562.853271         0.998047         0.998535        -1630.478027          0.499756                  0.000000             64.75             100.0                  1.0   67.125          -1.0       2.0
1          -1530.478271          -1530.978027        -1530.478271       400.000000        32.375000        -1530.978027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           1.0       0.0
2          -1498.103271          -1498.603027        -1498.103271       400.000000        32.375000        -1498.603027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
3          -1465.728271          -1466.228027        -1465.728271       400.000000        32.375000        -1466.228027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
4          -1433.353271          -1433.853027        -1433.353271       400.000000        32.375000        -1433.853027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
5          -1400.978271          -1401.478027        -1400.978271       400.000000        32.375000        -1401.478027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
6          -1368.603271          -1369.103027        -1368.603271       400.000000        32.375000        -1369.103027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
7          -1336.228271          -1336.728027        -1336.228271       400.000000        32.375000        -1336.728027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
8          -1303.853271          -1304.353027        -1303.853271       400.000000        32.375000        -1304.353027          0.499756                  0.499756             64.75             100.0                  0.0    0.000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=39/2, buf_size=100, start_state=[0].[0m
[01/30 11:10:39]  --------------------------------------------------------------------------------
[01/30 11:10:39]  Iteration: 14 (0 solution, 13 counterexamples)
[01/30 11:13:41]  Generator returned sat in 179.585635 secs.
[01/30 11:13:41]  Candidate solution: 
[1m[94mif (+ 2min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -1max_c + -1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 11:14:03]  Improved number of small numbers from 82 to 84 out of a max of 135
[01/30 11:14:03]  Verifer returned sat in 21.421491 secs.
[01/30 11:14:03]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -2981.115173          -2981.614990        -2981.115173         0.997559         0.998535        -2981.614990          0.499756                  0.499512         26.498901             100.0                  0.0  0.000061          -1.0       0.0
1          -2954.616272          -2955.116028        -2954.616272       400.000000        26.498901        -2955.116028          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           1.0       0.0
2          -2928.117371          -2928.617126        -2928.117371       400.000000        26.498901        -2928.617126          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
3          -2901.618469          -2902.118225        -2901.618469       400.000000        26.498901        -2902.118225          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
4          -2875.119568          -2875.619324        -2875.119568       400.000000        26.498901        -2875.619324          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
5          -2848.620667          -2849.120422        -2848.620667       400.000000        26.498901        -2849.120422          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
6          -2822.121765          -2822.621521        -2822.121765       400.000000        26.498901        -2822.621521          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
7          -2795.622864          -2796.122620        -2795.622864       400.000000        26.498901        -2796.122620          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
8          -2769.123962          -2769.623718        -2769.123962       400.000000        26.498901        -2769.623718          0.499756                  0.499756         26.498901             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=9729/512, buf_size=20, start_state=[0].[0m
[01/30 11:14:03]  --------------------------------------------------------------------------------
[01/30 11:14:03]  Iteration: 15 (0 solution, 14 counterexamples)
[01/30 11:17:37]  Generator returned sat in 212.005329 secs.
[01/30 11:17:38]  Candidate solution: 
[1m[94mif (+ 2min_c + -1/2max_c + -1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
elif (+ -2min_c + 2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 11:17:39]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 11:17:39]  Verifer returned sat in 0.981586 secs.
[01/30 11:17:39]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -2935.619629          -2956.119141        -2935.619629         0.997559         0.998535        -2956.119141          0.499512                  0.499268         39.001221             100.0                  0.0     20.0          -1.0       0.0
1          -2915.620117          -2916.119629        -2915.620117       400.000000        19.999512        -2916.119629          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           1.0       0.0
2          -2895.620605          -2896.120117        -2895.620605       400.000000        19.999512        -2896.120117          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
3          -2875.621094          -2876.120605        -2875.621094       400.000000        19.999512        -2876.120605          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
4          -2855.621582          -2856.121094        -2855.621582       400.000000        19.999512        -2856.121094          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
5          -2835.622070          -2836.121582        -2835.622070       400.000000        19.999512        -2836.121582          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
6          -2815.622559          -2816.122070        -2815.622559       400.000000        19.999512        -2816.122070          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
7          -2795.623047          -2796.122559        -2795.623047       400.000000        19.999512        -2796.122559          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
8          -2775.623535          -2776.123047        -2775.623535       400.000000        19.999512        -2776.123047          0.499512                  0.499512         39.001221             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=77831/4096, buf_size=20, start_state=[0].[0m
[01/30 11:17:39]  --------------------------------------------------------------------------------
[01/30 11:17:39]  Iteration: 16 (0 solution, 15 counterexamples)
[01/30 11:20:53]  Generator returned sat in 193.193779 secs.
[01/30 11:20:53]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 11:21:26]  Verifer returned unsat in 32.936445 secs.
[01/30 11:23:37]  Improved gap from 0.0 to 100
[01/30 11:23:38]  Improved number of small numbers from 146 to 146 out of a max of 146
[01/30 11:23:38]  Verifer returned sat in 131.237851 secs.
[01/30 11:23:38]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t  queue_t  utilized_0,t  bottle_queue_t    upper_S_t  qdelay_t
0          227.833333          225.333333        227.833333            1.0            1.0        225.333333             0.0                     0.0            80.8           124.1                0.0    -225.333333      2.5          -1.0             2.5   225.333333       1.0
1          389.433333          282.933333        389.433333          496.4          161.6        282.933333             0.0                     0.0            80.8           124.1                0.0    -225.333333    106.5           0.0            64.1   325.333333       0.0
2          551.033333          389.933333        551.033333          496.4          161.6        389.933333             0.0                     0.0            80.8           124.1                0.0    -225.333333    161.1           0.0           125.7   425.333333       0.0
3          712.633333          525.333333        712.633333          496.4          161.6        525.333333             0.0                     0.0            80.8           124.1                0.0    -225.333333    187.3           0.0           187.3   525.333333       1.0
4          874.233333          551.533333        874.233333          496.4          161.6        551.533333            61.1                     0.0            80.8           124.1                0.0    -225.333333    261.6           0.0           187.8   625.333333       1.0
5         1035.833333          676.133333       1035.833333          496.4          161.6        676.133333           122.7                    61.1            80.8           124.1                1.0    -225.333333    237.0           1.0           187.8   725.333333       2.0
6         1197.433333          725.333333       1197.433333          496.4          161.6        725.333333           184.3                   122.7            80.8           124.1                1.0    -225.333333    287.8           1.0           187.8   825.333333       2.0
7         1359.033333          825.333333       1359.033333          496.4          161.6        825.333333           245.9                   184.3            80.8           124.1                1.0    -225.333333    287.8           1.0           187.8   925.333333       2.0
8         1520.633333          925.333333       1520.633333          496.4          161.6        925.333333           307.5                   245.9            80.8           124.1                1.0    -225.333333    287.8           1.0           187.8  1025.333333       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=615/2, beliefs_remain_consistent=True, beliefs_improve=False, alpha=39/2, buf_size=939/5, start_state=[0].[0m
[01/30 11:23:38]  --------------------------------------------------------------------------------
[01/30 11:23:38]  Iteration: 17 (0 solution, 16 counterexamples)
[01/30 11:24:50]  Generator returned sat in 70.297068 secs.
[01/30 11:24:50]  Candidate solution: 
[1m[94mif (+ -1/2min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
elif (+ -1min_c + 1/2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 11:25:04]  Improved number of small numbers from 78 to 135 out of a max of 135
[01/30 11:25:04]  Verifer returned sat in 14.600485 secs.
[01/30 11:25:05]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0          -2938.734863          -3039.695312        -2938.734863         0.997314         0.998291        -3039.695312          0.997559                  0.000000         88.913574             100.0                  0.0  99.962891          -1.0       1.0
1          -2760.907715          -2939.695312        -2760.907715       400.000000       177.827148        -2939.695312         78.824707                  0.997559         88.913574             100.0                  0.0  99.962891           1.0       0.0
2          -2583.080566          -2839.695312        -2583.080566       400.000000       177.827148        -2839.695312        156.651855                 78.824707         88.913574             100.0                  0.0  99.962891           1.0       0.0
3          -2405.253418          -2739.695312        -2405.253418       400.000000       177.827148        -2739.695312        234.479004                156.651855         88.913574             100.0                  0.0  99.962891           1.0       0.0
4          -2227.426270          -2639.695312        -2227.426270       400.000000       177.827148        -2639.695312        312.306152                234.479004         88.913574             100.0                  0.0  99.962891           1.0       0.0
5          -2049.599121          -2539.695312        -2049.599121       400.000000       177.827148        -2539.695312        390.133301                312.306152         88.913574             100.0                  0.0  99.962891           1.0       0.0
6          -1871.771973          -2439.695312        -1871.771973       400.000000       177.827148        -2439.695312        467.960449                390.133301         88.913574             100.0                  0.0  99.962891           1.0       0.0
7          -1693.944824          -2339.695312        -1693.944824       400.000000       177.827148        -2339.695312        545.787598                467.960449         88.913574             100.0                  0.0  99.962891           1.0       0.0
8          -1516.117676          -2239.695312        -1516.117676       400.000000       177.827148        -2239.695312        623.614746                545.787598         88.913574             100.0                  0.0  99.962891           1.0       0.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=8, 
, large_loss_count=8, loss_amount=557865/1024, beliefs_remain_consistent=True, beliefs_improve=False, alpha=40897/2048, buf_size=51181/512, start_state=[0].[0m
[01/30 11:25:05]  --------------------------------------------------------------------------------
[01/30 11:25:05]  Iteration: 18 (0 solution, 17 counterexamples)
[01/30 11:27:36]  Generator returned sat in 150.015606 secs.
[01/30 11:27:36]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1/2max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 11:27:52]  Improved number of small numbers from 94 to 97 out of a max of 135
[01/30 11:27:52]  Verifer returned sat in 15.467597 secs.
[01/30 11:27:52]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -2499.040074          -2654.692139        -2499.040074         0.997314         0.998291        -2654.692139        155.651855                155.151611         49.002686             100.0                  0.0  0.000209          -1.0       1.0
1          -2474.538731          -2630.190587        -2474.538731       400.000000        24.501343        -2630.190587        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           1.0       0.0
2          -2450.037388          -2605.689244        -2450.037388       400.000000        24.501343        -2605.689244        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
3          -2425.536046          -2581.187901        -2425.536046       400.000000        24.501343        -2581.187901        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
4          -2401.034703          -2556.686558        -2401.034703       400.000000        24.501343        -2556.686558        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
5          -2376.533360          -2532.185216        -2376.533360       400.000000        24.501343        -2532.185216        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
6          -2352.032017          -2507.683873        -2352.032017       400.000000        24.501343        -2507.683873        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
7          -2327.530675          -2483.182530        -2327.530675       400.000000        24.501343        -2483.182530        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
8          -2303.029332          -2458.681187        -2303.029332       400.000000        24.501343        -2458.681187        155.651855                155.651855         49.002686             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=5505/512, buf_size=405515/4096, start_state=[0].[0m
[01/30 11:27:52]  --------------------------------------------------------------------------------
[01/30 11:27:52]  Iteration: 19 (0 solution, 18 counterexamples)
[01/30 11:33:00]  Generator returned sat in 305.809723 secs.
[01/30 11:33:00]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
elif (+ 2min_c + 3/2max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 11:33:28]  Verifer returned unsat in 27.923424 secs.
[01/30 11:34:04]  Improved gap from 0.0 to 100
[01/30 11:34:05]  Improved number of small numbers from 109 to 146 out of a max of 146
[01/30 11:34:05]  Verifer returned sat in 36.768318 secs.
[01/30 11:34:05]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t     queue_t  utilized_0,t  bottle_queue_t   upper_S_t  qdelay_t
0          152.404297          138.404297        152.404297       0.999756       0.999512        138.404297        0.000000                0.000000            80.5           124.0                0.0    -225.333252   14.000000          -1.0       -6.000244  158.404541       0.0
1          313.404297          258.404297        313.404297     496.000000     161.000000        258.404297        0.000000                0.000000            80.5           124.0                0.0    -225.333252   55.000000           0.0       54.999756  258.404541       0.0
2          474.404297          298.404541        474.404297     496.000000     161.000000        298.404541        0.000000                0.000000            80.5           124.0                0.0    -225.333252  175.999756           0.0      115.999756  358.404541       1.0
3          635.404297          458.404541        635.404297     496.000000     161.000000        458.404541        0.000000                0.000000            80.5           124.0                0.0    -225.333252  176.999756           0.0      176.999756  458.404541       1.0
4          796.404297          458.404541        796.404297     496.000000     161.000000        458.404541        0.499756                0.000000            80.5           124.0                0.0    -225.333252  337.500000           0.0      237.500000  558.404541       1.0
5          954.904297          558.404541        954.904297     496.000000     161.000000        558.404541       58.999756                0.499756            80.5           124.0                1.0    -225.333252  337.500000           1.0      237.500000  658.404541       2.0
6         1113.404297          660.404541       1113.404297     496.000000     161.000000        660.404541      117.499756               58.999756            80.5           124.0                1.0    -225.333252  335.500000           1.0      237.500000  758.404541       2.0
7         1273.904297          760.404541       1273.904297     496.000000     161.000000        760.404541      177.999756              117.499756            80.5           124.0                2.0    -225.333252  335.500000           1.0      237.500000  858.404541       3.0
8         1434.404297          858.404541       1434.404297     496.000000     161.000000        858.404541      238.499756              177.999756            80.5           124.0                2.0    -225.333252  337.500000           1.0      237.500000  958.404541       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=2, loss_amount=976895/4096, beliefs_remain_consistent=True, beliefs_improve=False, alpha=39/2, buf_size=475/2, start_state=[0].[0m
[01/30 11:34:05]  --------------------------------------------------------------------------------
[01/30 11:34:05]  Iteration: 20 (0 solution, 19 counterexamples)
[01/30 11:34:35]  Generator returned sat in 28.282070 secs.
[01/30 11:34:35]  Candidate solution: 
[1m[94mif (+ -2min_c + 3/2max_c + -1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 11:34:49]  Improved number of small numbers from 99 to 99 out of a max of 135
[01/30 11:34:49]  Verifer returned sat in 14.493282 secs.
[01/30 11:34:49]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0          -3846.482346          -4046.885123        -3846.482346         0.997070         0.998291        -4046.885123          0.500000                  0.000000         88.908333        119.405556                  0.0  199.902778          -1.0       0.0
1          -3668.665679          -3946.885123        -3668.665679       477.622222       177.816667        -3946.885123          0.500000                  0.500000         88.908333        119.405556                  0.0  277.719444           1.0       1.0
2          -3490.849012          -3846.885123        -3490.849012       477.622222       177.816667        -3846.885123         56.133333                  0.500000         88.908333        119.405556                  0.0  299.902778           0.0       1.0
3          -3313.129568          -3746.885123        -3313.129568       477.622222       177.816667        -3746.885123        133.852778                 56.133333         88.908333        119.405556                  1.0  299.902778           1.0       2.0
4          -3135.410123          -3646.885123        -3135.410123       477.622222       177.816667        -3646.885123        211.572222                133.852778         88.908333        119.405556                  1.0  299.902778           1.0       2.0
5          -2957.690679          -3546.885123        -2957.690679       477.622222       177.816667        -3546.885123        289.291667                211.572222         88.908333        119.405556                  1.0  299.902778           1.0       2.0
6          -2779.971234          -3446.885123        -2779.971234       477.622222       177.816667        -3446.885123        367.011111                289.291667         88.908333        119.405556                  1.0  299.902778           1.0       2.0
7          -2602.251790          -3346.885123        -2602.251790       477.622222       177.816667        -3346.885123        444.730556                367.011111         88.908333        119.405556                  1.0  299.902778           1.0       2.0
8          -2424.532346          -3246.885123        -2424.532346       477.622222       177.816667        -3246.885123        522.450000                444.730556         88.908333        119.405556                  1.0  299.902778           1.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=7, 
, large_loss_count=7, loss_amount=10439/20, beliefs_remain_consistent=True, beliefs_improve=False, alpha=7/72, buf_size=21593/72, start_state=[0].[0m
[01/30 11:34:50]  --------------------------------------------------------------------------------
[01/30 11:34:50]  Iteration: 21 (0 solution, 20 counterexamples)
[01/30 11:38:33]  Generator returned sat in 221.975599 secs.
[01/30 11:38:33]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + 2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_c + 3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 11:38:47]  Improved number of small numbers from 99 to 101 out of a max of 135
[01/30 11:38:47]  Verifer returned sat in 13.208431 secs.
[01/30 11:38:47]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0          -3024.746631          -3088.403564        -3024.746631          0.99707         0.997803        -3088.403564               0.0                       0.0         55.085714             100.0                  0.0  63.656933          -1.0       1.0
1          -2989.032346          -2989.032346        -2989.032346        400.00000        35.714286        -2989.032346               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
2          -2953.318060          -2953.318060        -2953.318060        400.00000        35.714286        -2953.318060               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
3          -2917.603774          -2917.603774        -2917.603774        400.00000        35.714286        -2917.603774               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
4          -2881.889488          -2881.889488        -2881.889488        400.00000        35.714286        -2881.889488               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
5          -2846.175203          -2846.175203        -2846.175203        400.00000        35.714286        -2846.175203               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
6          -2810.460917          -2810.460917        -2810.460917        400.00000        35.714286        -2810.460917               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
7          -2774.746631          -2774.746631        -2774.746631        400.00000        35.714286        -2774.746631               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
8          -2739.032346          -2739.032346        -2739.032346        400.00000        35.714286        -2739.032346               0.0                       0.0         55.085714             100.0                  0.0   0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=678/35, buf_size=65185/1024, start_state=[0].[0m
[01/30 11:38:47]  --------------------------------------------------------------------------------
[01/30 11:38:47]  Iteration: 22 (0 solution, 21 counterexamples)
[01/30 11:41:33]  Generator returned sat in 163.766597 secs.
[01/30 11:41:33]  Candidate solution: 
[1m[94mif (+ 1min_qdel + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
elif (+ -2min_c + 3/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 11:42:03]  Improved number of small numbers from 99 to 99 out of a max of 135
[01/30 11:42:03]  Verifer returned sat in 30.189462 secs.
[01/30 11:42:03]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0          -4381.706665          -4481.706665        -4381.706665         0.997070         0.997803        -4481.706665          0.000000                  0.000000         89.388889        120.185185                  0.0  100.000000          -1.0       1.0
1          -4202.928887          -4381.706665        -4202.928887       480.740741       178.777778        -4381.706665         78.777778                  0.000000         89.388889        120.185185                  1.0  100.000000           1.0       2.0
2          -4114.039998          -4281.706665        -4114.039998       480.740741        88.888889        -4281.706665         78.777778                 78.777778         89.388889        120.185185                  0.0   88.888889           1.0       1.0
3          -3935.262220          -4181.706665        -3935.262220       480.740741       178.777778        -4181.706665        146.444444                 78.777778         89.388889        120.185185                  0.0  100.000000           0.0       0.0
4          -3756.484442          -4081.706665        -3756.484442       480.740741       178.777778        -4081.706665        225.222222                146.444444         89.388889        120.185185                  0.0  100.000000           1.0       1.0
5          -3577.706665          -3981.706665        -3577.706665       480.740741       178.777778        -3981.706665        304.000000                225.222222         89.388889        120.185185                  0.0  100.000000           1.0       1.0
6          -3398.928887          -3881.706665        -3398.928887       480.740741       178.777778        -3881.706665        382.777778                304.000000         89.388889        120.185185                  0.0  100.000000           1.0       1.0
7          -3220.151109          -3781.706665        -3220.151109       480.740741       178.777778        -3781.706665        461.555556                382.777778         89.388889        120.185185                  0.0  100.000000           1.0       1.0
8          -3041.373331          -3681.706665        -3041.373331       480.740741       178.777778        -3681.706665        540.333333                461.555556         89.388889        120.185185                  0.0  100.000000           1.0       1.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=7, 
, large_loss_count=7, loss_amount=4154/9, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/2, buf_size=100, start_state=[0].[0m
[01/30 11:42:03]  --------------------------------------------------------------------------------
[01/30 11:42:03]  Iteration: 23 (0 solution, 22 counterexamples)
[01/30 11:52:47]  Generator returned sat in 642.251191 secs.
[01/30 11:52:47]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + -1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 3/2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 11:52:59]  Improved number of small numbers from 133 to 135 out of a max of 135
[01/30 11:52:59]  Verifer returned sat in 11.199553 secs.
[01/30 11:52:59]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -4323.422607          -4323.422852        -4323.422607         0.996826         0.997803        -4323.422852               0.0                       0.0         74.664551             100.0                  0.0  0.000244          -1.0       1.0
1          -4286.090332          -4286.090332        -4286.090332       400.000000        37.332275        -4286.090332               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
2          -4248.758057          -4248.758057        -4248.758057       400.000000        37.332275        -4248.758057               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
3          -4211.425781          -4211.425781        -4211.425781       400.000000        37.332275        -4211.425781               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
4          -4174.093506          -4174.093506        -4174.093506       400.000000        37.332275        -4174.093506               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
5          -4136.761230          -4136.761230        -4136.761230       400.000000        37.332275        -4136.761230               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
6          -4099.428955          -4099.428955        -4099.428955       400.000000        37.332275        -4099.428955               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
7          -4062.096680          -4062.096680        -4062.096680       400.000000        37.332275        -4062.096680               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
8          -4024.764404          -4024.764404        -4024.764404       400.000000        37.332275        -4024.764404               0.0                       0.0         74.664551             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=79879/4096, buf_size=41981/2048, start_state=[0].[0m
[01/30 11:52:59]  --------------------------------------------------------------------------------
[01/30 11:52:59]  Iteration: 24 (0 solution, 23 counterexamples)
[01/30 11:55:46]  Generator returned sat in 164.640852 secs.
[01/30 11:55:46]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 11:56:08]  Verifer returned unsat in 22.536077 secs.
[01/30 11:57:57]  Improved gap from 0.5 to 48.4375
[01/30 11:58:00]  Improved number of small numbers from 95 to 114 out of a max of 146
[01/30 11:58:00]  Verifer returned sat in 111.403481 secs.
[01/30 11:58:00]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t    queue_t  utilized_0,t  bottle_queue_t    upper_S_t  qdelay_t
0          891.688232          889.696533        891.688232       0.999512       0.999268        889.696533             0.0                     0.0       49.429871           100.0                0.0    -956.625244   1.991699          -1.0        1.991699   889.696533       0.0
1          941.118103          892.680420        941.118103     400.000000      49.429871        892.680420             0.0                     0.0       49.429871           100.0                0.0    -908.046875  48.437683           0.0       -0.000061   941.118164       0.0
2          990.547974          942.110596        990.547974     400.000000      49.429871        942.110596             0.0                     0.0       49.429871           100.0                0.0    -857.476807  48.437378           0.0       -0.000122   990.548096       0.0
3         1039.977844          992.532715       1039.977844     400.000000      49.429871        992.532715             0.0                     0.0       49.429871           100.0                0.0    -807.898926  47.445129           0.0       -0.992371  1040.970215       0.0
4         1089.407715         1040.970215       1089.407715     400.000000      49.429871       1040.970215             0.0                     0.0       49.429871           100.0                0.0    -756.336426  48.437500           0.0        0.000000  1089.407715       0.0
5         1138.837585         1090.399902       1138.837585     400.000000      49.429871       1090.399902             0.0                     0.0       49.429871           100.0                0.0    -705.766296  48.437683           0.0        0.000000  1138.837585       0.0
6         1188.267456         1138.837585       1188.267456     400.000000      49.429871       1138.837585             0.0                     0.0       49.429871           100.0                0.0    -655.196289  49.429871           0.0       -0.000122  1188.267578       1.0
7         1237.697327         1190.259277       1237.697327     400.000000      49.429871       1190.259277             0.0                     0.0       49.429871           100.0                0.0    -605.625488  47.438049           0.0       -0.999451  1238.696777       0.0
8         1287.127197         1238.697021       1287.127197     400.000000      49.429871       1238.697021             0.0                     0.0       49.429871           100.0                0.0    -554.063232  48.430176           0.0       -0.007324  1287.134521       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=4093/4096, buf_size=8159/4096, start_state=[0].[0m
[01/30 11:58:00]  --------------------------------------------------------------------------------
[01/30 11:58:00]  Iteration: 25 (0 solution, 24 counterexamples)
[01/30 12:01:27]  Generator returned sat in 205.171867 secs.
[01/30 12:01:28]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
elif (+ 1min_qdel > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 12:01:46]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 12:01:46]  Verifer returned sat in 18.138779 secs.
[01/30 12:01:46]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -4850.726807          -5050.726807        -4850.726807         0.996826         0.997559        -5050.726807              0.00                      0.00            89.625             149.5                  0.0   200.00          -1.0       1.0
1          -4671.476807          -4950.726807        -4671.476807       598.000000       179.250000        -4950.726807             53.50                      0.00            89.625             149.5                  0.0   225.75           0.0       1.0
2          -4492.226807          -4850.726807        -4492.226807       598.000000       179.250000        -4850.726807            132.75                     53.50            89.625             149.5                  1.0   225.75           1.0       2.0
3          -4418.476807          -4750.726807        -4418.476807       598.000000        73.750000        -4750.726807            132.75                    132.75            89.625             149.5                  1.0   199.50           1.0       2.0
4          -4344.726807          -4650.726807        -4344.726807       598.000000        73.750000        -4650.726807            132.75                    132.75            89.625             149.5                  1.0   173.25           1.0       2.0
5          -4270.976807          -4550.726807        -4270.976807       598.000000        73.750000        -4550.726807            132.75                    132.75            89.625             149.5                  0.0   147.00           0.0       1.0
6          -4091.726807          -4450.726807        -4091.726807       598.000000       179.250000        -4450.726807            133.25                    132.75            89.625             149.5                  0.0   225.75           0.0       1.0
7          -3912.476807          -4350.726807        -3912.476807       598.000000       179.250000        -4350.726807            212.50                    133.25            89.625             149.5                  0.0   225.75           1.0       1.0
8          -3733.226807          -4250.726807        -3733.226807       598.000000       179.250000        -4250.726807            291.75                    212.50            89.625             149.5                  1.0   225.75           1.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, 
, large_loss_count=4, loss_amount=953/4, beliefs_remain_consistent=True, beliefs_improve=False, alpha=127/8, buf_size=903/4, start_state=[0].[0m
[01/30 12:01:46]  --------------------------------------------------------------------------------
[01/30 12:01:46]  Iteration: 26 (0 solution, 25 counterexamples)
[01/30 12:06:41]  Generator returned sat in 292.440421 secs.
[01/30 12:06:41]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_qdel + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 12:07:08]  Verifer returned unsat in 26.931466 secs.
[01/30 12:10:54]  Improved number of small numbers from 135 to 145 out of a max of 145
[01/30 12:10:54]  Verifer returned sat in 226.105037 secs.
[01/30 12:10:54]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t     queue_t  utilized_0,t  bottle_queue_t    upper_S_t  qdelay_t
0          514.407715          342.907715        514.407715       0.999268       0.999268        342.907715             0.0                     0.0            84.5           169.0                0.0    -605.625488  171.500000          -1.0           116.0   398.407715       0.0
1          683.407715          430.407471        683.407715     676.000000     169.000000        430.407471            69.0                     0.0            84.5           169.0                0.0    -605.625488  184.000244           0.0           116.0   498.407715       1.0
2          852.407715          514.407471        852.407715     676.000000     169.000000        514.407471           138.0                    69.0            84.5           169.0                1.0    -605.625488  200.000244           1.0           116.0   598.407715       2.0
3          936.407715          614.407715        936.407715     676.000000      84.000000        614.407715           138.0                   138.0            84.5           169.0                1.0    -605.625488  184.000000           1.0           100.0   698.407715       2.0
4         1020.407715          765.407715       1020.407715     676.000000      84.000000        765.407715           138.0                   138.0            84.5           169.0                0.0    -605.625488  117.000000           0.0            84.0   798.407715       1.0
5         1189.407715          798.407715       1189.407715     676.000000     169.000000        798.407715           175.0                   138.0            84.5           169.0                1.0    -605.625488  216.000000           1.0           116.0   898.407715       2.0
6         1273.407715          934.407715       1273.407715     676.000000      84.000000        934.407715           175.0                   175.0            84.5           169.0                0.0    -605.625488  164.000000           1.0           100.0   998.407715       1.0
7         1442.407715         1014.907471       1442.407715     676.000000     169.000000       1014.907471           228.0                   175.0            84.5           169.0                0.0    -605.625488  199.500244           0.0           116.0  1098.407715       1.0
8         1611.407715         1098.907471       1611.407715     676.000000     169.000000       1098.907471           297.0                   228.0            84.5           169.0                0.0    -605.625488  215.500244           1.0           116.0  1198.407715       1.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=228, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/2, buf_size=116, start_state=[0].[0m
[01/30 12:10:54]  --------------------------------------------------------------------------------
[01/30 12:10:54]  Iteration: 27 (0 solution, 26 counterexamples)
[01/30 12:11:49]  Generator returned sat in 52.978969 secs.
[01/30 12:11:50]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + -1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 12:12:32]  Verifer returned unsat in 42.340119 secs.
[01/30 12:34:14]  Improved gap from 0.750091552734375 to 100
[01/30 12:34:14]  Improved number of small numbers from 101 to 146 out of a max of 146
[01/30 12:34:14]  Verifer returned sat in 1302.215491 secs.
[01/30 12:34:14]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t     queue_t  utilized_0,t  bottle_queue_t    upper_S_t  qdelay_t
0          817.215576          779.715576        817.215576       0.999268       0.999023        779.715576             0.0                     0.0            90.5           145.0                0.0     -986.93335   37.500000          -1.0            37.5   779.715576       0.0
1          998.215576          879.715332        998.215576     580.000000     181.000000        879.715332             0.0                     0.0            90.5           145.0                0.0     -986.93335  118.500244           0.0           118.5   879.715576       0.0
2         1179.215576          979.715332       1179.215576     580.000000     181.000000        979.715332             0.0                     0.0            90.5           145.0                0.0     -986.93335  199.500244           0.0           199.5   979.715576       1.0
3         1360.215576         1079.715576       1360.215576     580.000000     181.000000       1079.715576             0.0                     0.0            90.5           145.0                0.0     -986.93335  280.500000           0.0           280.5  1079.715576       1.0
4         1541.215576         1079.715576       1541.215576     580.000000     181.000000       1079.715576            62.0                     0.0            90.5           145.0                0.0     -986.93335  399.500000           0.0           299.5  1179.715576       1.0
5         1721.715576         1179.715576       1721.715576     580.000000     181.000000       1179.715576           142.5                    62.0            90.5           145.0                1.0     -986.93335  399.500000           1.0           299.5  1279.715576       2.0
6         1902.215576         1280.715576       1902.215576     580.000000     181.000000       1280.715576           223.0                   142.5            90.5           145.0                2.0     -986.93335  398.500000           1.0           299.5  1379.715576       3.0
7         2083.215576         1439.715576       2083.215576     580.000000     181.000000       1439.715576           304.0                   223.0            90.5           145.0                2.0     -986.93335  339.500000           1.0           299.5  1479.715576       3.0
8         2264.215576         1514.715576       2264.215576     580.000000     181.000000       1514.715576           385.0                   304.0            90.5           145.0                2.0     -986.93335  364.500000           1.0           299.5  1579.715576       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=385, beliefs_remain_consistent=True, beliefs_improve=False, alpha=39/2, buf_size=599/2, start_state=[0].[0m
[01/30 12:34:14]  --------------------------------------------------------------------------------
[01/30 12:34:14]  Iteration: 28 (0 solution, 27 counterexamples)
[01/30 12:36:03]  Generator returned sat in 106.389931 secs.
[01/30 12:36:04]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + 2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 12:36:16]  Improved number of small numbers from 80 to 84 out of a max of 135
[01/30 12:36:16]  Verifer returned sat in 12.407896 secs.
[01/30 12:36:16]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -5530.040848          -5531.037842        -5530.040848         0.996582         0.997559        -5531.037842          0.996826                  0.000000         80.998413             100.0                  0.0  0.000167          -1.0       0.0
1          -5489.541642          -5490.538468        -5489.541642       400.000000        40.499207        -5490.538468          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           1.0       0.0
2          -5449.042435          -5450.039261        -5449.042435       400.000000        40.499207        -5450.039261          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
3          -5408.543229          -5409.540055        -5408.543229       400.000000        40.499207        -5409.540055          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
4          -5368.044022          -5369.040848        -5368.044022       400.000000        40.499207        -5369.040848          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
5          -5327.544816          -5328.541642        -5327.544816       400.000000        40.499207        -5328.541642          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
6          -5287.045609          -5288.042435        -5287.045609       400.000000        40.499207        -5288.042435          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
7          -5246.546403          -5247.543229        -5246.546403       400.000000        40.499207        -5247.543229          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
8          -5206.047196          -5207.044022        -5206.047196       400.000000        40.499207        -5207.044022          0.996826                  0.996826         80.998413             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=79879/4096, buf_size=41981/2048, start_state=[0].[0m
[01/30 12:36:16]  --------------------------------------------------------------------------------
[01/30 12:36:16]  Iteration: 29 (0 solution, 28 counterexamples)
[01/30 12:41:06]  Generator returned sat in 286.796812 secs.
[01/30 12:41:06]  Candidate solution: 
[1m[94mif (+ -1min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 12:41:27]  Verifer returned unsat in 21.394256 secs.
[01/30 12:43:10]  Verifer returned unsat in 102.746657 secs.
[01/30 12:43:10]  Proved solution: 
[1m[92mif (+ -1min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 12:43:10]  --------------------------------------------------------------------------------
[01/30 12:43:10]  Iteration: 30 (1 solution, 28 counterexamples)
[01/30 12:43:32]  Generator returned sat in 19.447382 secs.
[01/30 12:43:32]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 12:43:45]  Verifer returned unsat in 12.450888 secs.
[01/30 12:49:08]  Verifer returned unsat in 322.698591 secs.
[01/30 12:49:08]  Proved solution: 
[1m[92mif (+ -3/2min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 12:49:08]  --------------------------------------------------------------------------------
[01/30 12:49:08]  Iteration: 31 (2 solution, 28 counterexamples)
[01/30 12:49:30]  Generator returned sat in 19.035306 secs.
[01/30 12:49:30]  Candidate solution: 
[1m[94mif (+ -3/2min_c + -1/2max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 12:49:50]  Verifer returned unsat in 20.090165 secs.
[01/30 13:03:01]  Verifer returned unsat in 790.473931 secs.
[01/30 13:03:01]  Proved solution: 
[1m[92mif (+ -3/2min_c + -1/2max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 13:03:01]  --------------------------------------------------------------------------------
[01/30 13:03:01]  Iteration: 32 (3 solution, 28 counterexamples)
[01/30 13:04:34]  Generator returned sat in 91.043277 secs.
[01/30 13:04:34]  Candidate solution: 
[1m[94mif (+ -2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_qdel + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 13:05:02]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 13:05:02]  Verifer returned sat in 27.459222 secs.
[01/30 13:05:02]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0          -5695.313477          -5895.273438        -5695.313477         0.996338         0.997559        -5895.273438          0.000000                  0.000000         88.929199        119.986572                  0.0  199.959961          -1.0       1.0
1          -5517.455078          -5795.273438        -5517.455078       479.946289       177.858398        -5795.273438          0.000000                  0.000000         88.929199        119.986572                  1.0  277.818359           1.0       2.0
2          -5339.596680          -5695.273438        -5339.596680       479.946289       177.858398        -5695.273438          0.040283                  0.000000         88.929199        119.986572                  0.0  355.636475           0.0       1.0
3          -5215.286865          -5595.273438        -5215.286865       479.946289       177.858398        -5595.273438         24.350098                  0.040283         88.929199        119.986572                  1.0  355.636475           1.0       2.0
4          -5090.977051          -5495.273438        -5090.977051       479.946289       177.858398        -5495.273438         48.659912                 24.350098         88.929199        119.986572                  1.0  355.636475           1.0       2.0
5          -4966.667236          -5395.273438        -4966.667236       479.946289       177.858398        -5395.273438         72.969727                 48.659912         88.929199        119.986572                  2.0  355.636475           1.0       3.0
6          -4842.357422          -5295.273438        -4842.357422       479.946289       177.858398        -5295.273438         97.279541                 72.969727         88.929199        119.986572                  2.0  355.636475           1.0       3.0
7          -4718.047607          -5195.273438        -4718.047607       479.946289       177.858398        -5195.273438        121.589355                 97.279541         88.929199        119.986572                  2.0  355.636475           1.0       3.0
8          -4593.737793          -5095.273438        -4593.737793       479.946289       177.858398        -5095.273438        145.899170                121.589355         88.929199        119.986572                  2.0  355.636475           1.0       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=7, 
, large_loss_count=6, loss_amount=597603/4096, beliefs_remain_consistent=True, beliefs_improve=False, alpha=83/2048, buf_size=1456687/4096, start_state=[0].[0m
[01/30 13:05:02]  --------------------------------------------------------------------------------
[01/30 13:05:02]  Iteration: 33 (3 solution, 29 counterexamples)
[01/30 13:07:50]  Generator returned sat in 164.792958 secs.
[01/30 13:07:50]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + 2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 13:08:02]  Improved number of small numbers from 99 to 99 out of a max of 135
[01/30 13:08:02]  Verifer returned sat in 12.574264 secs.
[01/30 13:08:02]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0          -5987.084663          -6027.529107        -5987.084663         0.996338         0.997559        -6027.529107          0.000000                  0.000000         89.333333        132.888889                  1.0   40.444444          -1.0       2.0
1          -5808.417996          -5927.529107        -5808.417996       531.555556       178.666667        -5927.529107          0.000000                  0.000000         89.333333        132.888889                  0.0  119.111111           0.0       0.0
2          -5629.751329          -5827.529107        -5629.751329       531.555556       178.666667        -5827.529107          0.000000                  0.000000         89.333333        132.888889                  0.0  197.777778           0.0       1.0
3          -5451.084663          -5727.529107        -5451.084663       531.555556       178.666667        -5727.529107          0.000000                  0.000000         89.333333        132.888889                  0.0  276.444444           0.0       1.0
4          -5272.417996          -5627.529107        -5272.417996       531.555556       178.666667        -5627.529107          1.777778                  0.000000         89.333333        132.888889                  0.0  353.333333           0.0       1.0
5          -5094.195774          -5527.529107        -5094.195774       531.555556       178.666667        -5527.529107         80.000000                  1.777778         89.333333        132.888889                  1.0  353.333333           1.0       2.0
6          -4915.973551          -5427.529107        -4915.973551       531.555556       178.666667        -5427.529107        158.222222                 80.000000         89.333333        132.888889                  1.0  353.333333           1.0       2.0
7          -4737.751329          -5327.529107        -4737.751329       531.555556       178.666667        -5327.529107        236.444444                158.222222         89.333333        132.888889                  2.0  353.333333           1.0       3.0
8          -4559.529107          -5227.529107        -4559.529107       531.555556       178.666667        -5227.529107        314.666667                236.444444         89.333333        132.888889                  2.0  353.333333           1.0       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=944/3, beliefs_remain_consistent=True, beliefs_improve=False, alpha=4/9, buf_size=1060/3, start_state=[0].[0m
[01/30 13:08:03]  --------------------------------------------------------------------------------
[01/30 13:08:03]  Iteration: 34 (3 solution, 30 counterexamples)
[01/30 13:12:19]  Generator returned sat in 253.842346 secs.
[01/30 13:12:19]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
elif (+ -3/2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 13:12:34]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/30 13:12:34]  Verifer returned sat in 14.707962 secs.
[01/30 13:12:34]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -5310.659912          -5311.656250        -5310.659912         0.996338         0.997314        -5311.656250          0.996338                  0.000000              61.0             100.0                  0.0      0.0          -1.0       1.0
1          -5268.663574          -5269.659912        -5268.663574       400.000000        41.996338        -5269.659912          0.996338                  0.996338              61.0             100.0                  0.0      0.0           1.0       0.0
2          -5226.667236          -5227.663574        -5226.667236       400.000000        41.996338        -5227.663574          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
3          -5184.670898          -5185.667236        -5184.670898       400.000000        41.996338        -5185.667236          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
4          -5142.674561          -5143.670898        -5142.674561       400.000000        41.996338        -5143.670898          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
5          -5100.678223          -5101.674561        -5100.678223       400.000000        41.996338        -5101.674561          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
6          -5058.681885          -5059.678223        -5058.681885       400.000000        41.996338        -5059.678223          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
7          -5016.685547          -5017.681885        -5016.685547       400.000000        41.996338        -5017.681885          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
8          -4974.689209          -4975.685547        -4974.689209       400.000000        41.996338        -4975.685547          0.996338                  0.996338              61.0             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=77839/4096, buf_size=405519/4096, start_state=[0].[0m
[01/30 13:12:34]  --------------------------------------------------------------------------------
[01/30 13:12:34]  Iteration: 35 (3 solution, 31 counterexamples)
[01/30 13:19:52]  Generator returned sat in 434.733701 secs.
[01/30 13:19:52]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 13:20:04]  Verifer returned unsat in 11.865629 secs.
[01/30 13:29:06]  Improved number of small numbers from 108 to 145 out of a max of 145
[01/30 13:29:06]  Verifer returned sat in 542.520442 secs.
[01/30 13:29:06]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t     queue_t  utilized_0,t  bottle_queue_t   upper_S_t  qdelay_t
0         -967.916748        -1036.264648       -967.916748       0.999023       0.998779      -1036.264648        0.000000                0.000000         92.3479      140.869565                0.0    -986.933594   68.347900          -1.0      -24.000000 -943.916748       1.0
1         -855.916748         -943.916748       -855.916748     563.478261     112.000000       -943.916748        0.000000                0.000000         92.3479      140.869565                0.0    -986.933594   88.000000           0.0      -12.000000 -843.916748       0.0
2         -743.916748         -759.221191       -743.916748     563.478261     112.000000       -759.221191        0.000000                0.000000         92.3479      140.869565                0.0    -986.933594   15.304443           0.0        0.000000 -743.916748       0.0
3         -631.916748         -666.873291       -631.916748     563.478261     112.000000       -666.873291        0.000000                0.000000         92.3479      140.869565                0.0    -986.933594   34.956543           0.0       12.000000 -643.916748       0.0
4         -519.916748         -631.916992       -519.916748     563.478261     112.000000       -631.916992        0.347656                0.000000         92.3479      140.869565                0.0    -986.933594  111.652588           0.0       23.652344 -543.916748       1.0
5         -407.916748         -490.699463       -407.916748     563.478261     112.000000       -490.699463       12.347656                0.347656         92.3479      140.869565                0.0    -986.933594   70.435059           1.0       23.652344 -443.916748       0.0
6         -295.916748         -419.916748       -295.916748     563.478261     112.000000       -419.916748       24.347656               12.347656         92.3479      140.869565                0.0    -986.933594   99.652344           1.0       23.652344 -343.916748       0.0
7         -183.916748         -320.264648       -183.916748     563.478261     112.000000       -320.264648       36.347656               24.347656         92.3479      140.869565                0.0    -986.933594  100.000244           1.0       23.652344 -243.916748       1.0
8          -71.916748         -208.264648        -71.916748     563.478261     112.000000       -208.264648       48.347656               36.347656         92.3479      140.869565                0.0    -986.933594   88.000244           1.0       23.652344 -143.916748       0.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=0, loss_amount=12377/256, beliefs_remain_consistent=True, beliefs_improve=False, alpha=80495/4096, buf_size=6055/256, start_state=[0].[0m
[01/30 13:29:07]  --------------------------------------------------------------------------------
[01/30 13:29:07]  Iteration: 36 (3 solution, 32 counterexamples)
[01/30 13:31:01]  Generator returned sat in 111.616954 secs.
[01/30 13:31:01]  Candidate solution: 
[1m[94mif (+ 3/2min_c + -1max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_qdel + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 13:31:11]  Improved number of small numbers from 113 to 113 out of a max of 135
[01/30 13:31:11]  Verifer returned sat in 9.346935 secs.
[01/30 13:31:11]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0          -4620.345866          -4655.179199        -4620.345866         0.996094         0.997314        -4655.179199               0.0                       0.0         39.333333             100.0                  1.0  34.833333          -1.0       2.0
1          -4581.012533          -4581.012533        -4581.012533       400.000000        39.333333        -4581.012533               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
2          -4541.679199          -4541.679199        -4541.679199       400.000000        39.333333        -4541.679199               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
3          -4502.345866          -4502.345866        -4502.345866       400.000000        39.333333        -4502.345866               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
4          -4463.012533          -4463.012533        -4463.012533       400.000000        39.333333        -4463.012533               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
5          -4423.679199          -4423.679199        -4423.679199       400.000000        39.333333        -4423.679199               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
6          -4384.345866          -4384.345866        -4384.345866       400.000000        39.333333        -4384.345866               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
7          -4345.012533          -4345.012533        -4345.012533       400.000000        39.333333        -4345.012533               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
8          -4305.679199          -4305.679199        -4305.679199       400.000000        39.333333        -4305.679199               0.0                       0.0         39.333333             100.0                  0.0   0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=79/4, buf_size=100, start_state=[0].[0m
[01/30 13:31:11]  --------------------------------------------------------------------------------
[01/30 13:31:11]  Iteration: 37 (3 solution, 33 counterexamples)
[01/30 13:37:06]  Generator returned sat in 352.452080 secs.
[01/30 13:37:06]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + 2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 13:37:53]  Improved number of small numbers from 99 to 102 out of a max of 135
[01/30 13:37:53]  Verifer returned sat in 46.308032 secs.
[01/30 13:37:53]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -3003.040853          -3004.036865        -3003.040853         0.995605         0.996826        -3004.036865           0.99585                   0.00000         41.997233             100.0                  0.0  0.000163          -1.0       1.0
1          -2961.043620          -2962.039469        -2961.043620       400.000000        41.997233        -2962.039469           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           1.0       0.0
2          -2919.046387          -2920.042236        -2919.046387       400.000000        41.997233        -2920.042236           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
3          -2877.049154          -2878.045003        -2877.049154       400.000000        41.997233        -2878.045003           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
4          -2835.051921          -2836.047770        -2835.051921       400.000000        41.997233        -2836.047770           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
5          -2793.054688          -2794.050537        -2793.054688       400.000000        41.997233        -2794.050537           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
6          -2751.057454          -2752.053304        -2751.057454       400.000000        41.997233        -2752.053304           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
7          -2709.060221          -2710.056071        -2709.060221       400.000000        41.997233        -2710.056071           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
8          -2667.062988          -2668.058838        -2667.062988       400.000000        41.997233        -2668.058838           0.99585                   0.99585         41.997233             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=79881/4096, buf_size=405521/4096, start_state=[0].[0m
[01/30 13:37:53]  --------------------------------------------------------------------------------
[01/30 13:37:53]  Iteration: 38 (3 solution, 34 counterexamples)
[01/30 13:43:40]  Generator returned sat in 344.170415 secs.
[01/30 13:43:41]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + -1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 13:44:02]  Improved number of small numbers from 111 to 113 out of a max of 135
[01/30 13:44:02]  Verifer returned sat in 20.794510 secs.
[01/30 13:44:02]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -2973.706950          -2973.707031        -2973.706950         0.995605         0.996582        -2973.707031               0.0                       0.0         69.327474             100.0                  0.0  0.000081          -1.0       0.0
1          -2939.043213          -2939.043213        -2939.043213       400.000000        34.663737        -2939.043213               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
2          -2904.379476          -2904.379476        -2904.379476       400.000000        34.663737        -2904.379476               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
3          -2869.715739          -2869.715739        -2869.715739       400.000000        34.663737        -2869.715739               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
4          -2835.052002          -2835.052002        -2835.052002       400.000000        34.663737        -2835.052002               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
5          -2800.388265          -2800.388265        -2800.388265       400.000000        34.663737        -2800.388265               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
6          -2765.724528          -2765.724528        -2765.724528       400.000000        34.663737        -2765.724528               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
7          -2731.060791          -2731.060791        -2731.060791       400.000000        34.663737        -2731.060791               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
8          -2696.397054          -2696.397054        -2696.397054       400.000000        34.663737        -2696.397054               0.0                       0.0         69.327474             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=2039/2048, buf_size=2039/1024, start_state=[0].[0m
[01/30 13:44:02]  --------------------------------------------------------------------------------
[01/30 13:44:02]  Iteration: 39 (3 solution, 35 counterexamples)
[01/30 13:49:26]  Generator returned sat in 321.440105 secs.
[01/30 13:49:26]  Candidate solution: 
[1m[94mif (+ -1/2min_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 13:49:50]  Verifer returned unsat in 23.666985 secs.
[01/30 13:51:21]  Improved number of small numbers from 145 to 145 out of a max of 145
[01/30 13:51:21]  Verifer returned sat in 90.207150 secs.
[01/30 13:51:21]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t  queue_t  utilized_0,t  bottle_queue_t    upper_S_t  qdelay_t
0        -1128.909668        -1128.909668      -1128.909668       0.999023       0.998779      -1128.909668             0.0                     0.0            98.5          150.75                1.0    -893.940674     0.00          -1.0           -92.0 -1036.909668       2.0
1         -931.909668        -1030.909668       -931.909668     603.000000     197.000000      -1030.909668             0.0                     0.0            98.5          150.75                0.0    -893.940674    99.00           0.0             5.0  -936.909668       0.0
2         -734.909668         -932.909668       -734.909668     603.000000     197.000000       -932.909668             0.0                     0.0            98.5          150.75                0.0    -893.940674   198.00           0.0           102.0  -836.909668       1.0
3         -537.909668         -736.909668       -537.909668     603.000000     197.000000       -736.909668             0.0                     0.0            98.5          150.75                0.0    -893.940674   199.00           0.0           199.0  -736.909668       1.0
4         -340.909668         -736.909668       -340.909668     603.000000     197.000000       -736.909668            96.5                     0.0            98.5          150.75                0.0    -893.940674   299.50           0.0           199.5  -636.909668       1.0
5         -143.909668         -585.659668       -143.909668     603.000000     197.000000       -585.659668           193.5                    96.5            98.5          150.75                1.0    -893.940674   248.25           1.0           199.5  -536.909668       2.0
6           53.090332         -442.909668         53.090332     603.000000     197.000000       -442.909668           290.5                   193.5            98.5          150.75                1.0    -893.940674   205.50           1.0           199.5  -436.909668       2.0
7          250.090332         -344.909668        250.090332     603.000000     197.000000       -344.909668           387.5                   290.5            98.5          150.75                1.0    -893.940674   207.50           1.0           199.5  -336.909668       2.0
8          447.090332         -283.159668        447.090332     603.000000     197.000000       -283.159668           484.5                   387.5            98.5          150.75                1.0    -893.940674   245.75           1.0           199.5  -236.909668       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=969/2, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/2, buf_size=399/2, start_state=[0].[0m
[01/30 13:51:21]  --------------------------------------------------------------------------------
[01/30 13:51:21]  Iteration: 40 (3 solution, 36 counterexamples)
[01/30 13:53:44]  Generator returned sat in 140.231328 secs.
[01/30 13:53:44]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_qdel + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 13:54:02]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 13:54:02]  Verifer returned sat in 17.336738 secs.
[01/30 13:54:02]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t    queue_t  utilized_0,t  qdelay_t
0          -2221.051758          -2294.556396        -2221.051758         0.995605         0.996582        -2294.556396               0.0                       0.0              51.0             100.0                  0.0  73.504639          -1.0       0.0
1          -2195.551758          -2195.551758        -2195.551758       400.000000        25.500000        -2195.551758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
2          -2170.051758          -2170.051758        -2170.051758       400.000000        25.500000        -2170.051758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
3          -2144.551758          -2144.551758        -2144.551758       400.000000        25.500000        -2144.551758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
4          -2119.051758          -2119.051758        -2119.051758       400.000000        25.500000        -2119.051758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
5          -2093.551758          -2093.551758        -2093.551758       400.000000        25.500000        -2093.551758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
6          -2068.051758          -2068.051758        -2068.051758       400.000000        25.500000        -2068.051758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
7          -2042.551758          -2042.551758        -2042.551758       400.000000        25.500000        -2042.551758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
8          -2017.051758          -2017.051758        -2017.051758       400.000000        25.500000        -2017.051758               0.0                       0.0              51.0             100.0                  0.0   0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=2047/4096, buf_size=800, start_state=[0].[0m
[01/30 13:54:02]  --------------------------------------------------------------------------------
[01/30 13:54:02]  Iteration: 41 (3 solution, 37 counterexamples)
[01/30 13:56:28]  Generator returned sat in 142.846085 secs.
[01/30 13:56:28]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 13:56:47]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/30 13:56:47]  Verifer returned sat in 18.525597 secs.
[01/30 13:56:47]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -3116.676758          -3117.672363        -3116.676758         0.995605         0.996582        -3117.672363          0.995605                  0.000000             51.25             100.0                  0.0      0.0          -1.0       1.0
1          -3091.051758          -3092.047363        -3091.051758       400.000000        25.625000        -3092.047363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           1.0       0.0
2          -3065.426758          -3066.422363        -3065.426758       400.000000        25.625000        -3066.422363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
3          -3039.801758          -3040.797363        -3039.801758       400.000000        25.625000        -3040.797363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
4          -3014.176758          -3015.172363        -3014.176758       400.000000        25.625000        -3015.172363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
5          -2988.551758          -2989.547363        -2988.551758       400.000000        25.625000        -2989.547363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
6          -2962.926758          -2963.922363        -2962.926758       400.000000        25.625000        -2963.922363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
7          -2937.301758          -2938.297363        -2937.301758       400.000000        25.625000        -2938.297363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
8          -2911.676758          -2912.672363        -2911.676758       400.000000        25.625000        -2912.672363          0.995605                  0.995605             51.25             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/2, buf_size=3063/2048, start_state=[0].[0m
[01/30 13:56:47]  --------------------------------------------------------------------------------
[01/30 13:56:47]  Iteration: 42 (3 solution, 38 counterexamples)
[01/30 14:03:00]  Generator returned sat in 369.267797 secs.
[01/30 14:03:00]  Candidate solution: 
[1m[94mif (+ -3/2min_c + 1max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 14:03:13]  Verifer returned unsat in 13.429349 secs.
[01/30 14:03:21]  Improved number of small numbers from 47 to 91 out of a max of 145
[01/30 14:03:21]  Verifer returned sat in 7.554465 secs.
[01/30 14:03:21]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t     queue_t  utilized_0,t  bottle_queue_t   upper_S_t  qdelay_t
0         -751.350897        -1234.027588       -751.350897       0.999023       0.998291      -1234.027588      290.750732              290.750732       98.173969      157.063477                1.0    -893.940674  191.925959          -1.0       99.925590 -1142.02722       2.0
1         -633.360774        -1042.027344       -633.360774     628.253906     117.990123      -1042.027344      290.750732              290.750732       98.173969      157.063477                0.0    -893.940674  117.915838           0.0      117.915714 -1042.02722       0.0
2         -515.370650        -1038.027344       -515.370650     628.253906     117.990123      -1038.027344      290.750732              290.750732       98.173969      157.063477                0.0    -893.940674  231.905961           0.0      135.905837  -942.02722       1.0
3         -397.380527         -842.027220       -397.380527     628.253906     117.990123       -842.027220      290.750732              290.750732       98.173969      157.063477                0.0    -893.940674  153.895961           0.0      153.895961  -842.02722       1.0
4         -279.390403         -842.027220       -279.390403     628.253906     117.990123       -842.027220      290.924762              290.750732       98.173969      157.063477                0.0    -893.940674  271.712054           0.0      171.712054  -742.02722       1.0
5         -161.400280         -688.131592       -161.400280     628.253906     117.990123       -688.131592      308.914886              290.924762       98.173969      157.063477                1.0    -893.940674  217.816426           1.0      171.712054  -642.02722       2.0
6          -43.410156         -570.315186        -43.410156     628.253906     117.990123       -570.315186      326.905009              308.914886       98.173969      157.063477                1.0    -893.940674  200.000020           1.0      171.712054  -542.02722       2.0
7           74.579967         -470.315186         74.579967     628.253906     117.990123       -470.315186      344.895133              326.905009       98.173969      157.063477                1.0    -893.940674  200.000020           1.0      171.712054  -442.02722       2.0
8          192.570091         -370.315186        192.570091     628.253906     117.990123       -370.315186      362.885256              344.895133       98.173969      157.063477                1.0    -893.940674  200.000020           1.0      171.712054  -342.02722       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=0, loss_amount=16989123/235520, beliefs_remain_consistent=True, beliefs_improve=False, alpha=18668403/942080, buf_size=40441623/235520, start_state=[0].[0m
[01/30 14:03:21]  --------------------------------------------------------------------------------
[01/30 14:03:21]  Iteration: 43 (3 solution, 39 counterexamples)
[01/30 14:04:29]  Generator returned sat in 64.084777 secs.
[01/30 14:04:29]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + 1max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 14:05:00]  Verifer returned unsat in 30.395410 secs.
[01/30 14:07:22]  Improved gap from 0.0 to 48.4375
[01/30 14:07:23]  Improved number of small numbers from 100 to 146 out of a max of 146
[01/30 14:07:23]  Verifer returned sat in 142.809825 secs.
[01/30 14:07:23]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t    queue_t  utilized_0,t  bottle_queue_t    upper_S_t  qdelay_t
0        -1649.332764        -1649.332764      -1649.332764       0.999023       0.998291      -1649.332764             0.0                     0.0       49.640137           100.0                0.0    -386.635498   0.000000          -1.0       -0.000488 -1649.332275       1.0
1        -1599.552734        -1649.052734      -1599.552734     400.000000      49.780029      -1649.052734             0.0                     0.0       49.640137           100.0                0.0    -336.415283  49.500000           0.0       -0.000244 -1599.552490       0.0
2        -1549.772705        -1599.272705      -1549.772705     400.000000      49.780029      -1599.272705             0.0                     0.0       49.640137           100.0                0.0    -286.195557  49.500000           0.0       -0.000488 -1549.772217       0.0
3        -1499.992676        -1549.492432      -1499.992676     400.000000      49.780029      -1549.492432             0.0                     0.0       49.640137           100.0                0.0    -235.975586  49.499756           0.0       -0.000488 -1499.992188       0.0
4        -1450.212646        -1499.712402      -1450.212646     400.000000      49.780029      -1499.712402             0.0                     0.0       49.640137           100.0                0.0    -185.755127  49.499756           0.0        0.000000 -1450.212646       0.0
5        -1400.432617        -1450.212646      -1400.432617     400.000000      49.780029      -1450.212646             0.0                     0.0       49.640137           100.0                0.0    -139.480225  49.780029           0.0       -3.945068 -1396.487549       1.0
6        -1350.652588        -1396.487549      -1350.652588     400.000000      49.780029      -1396.487549             0.0                     0.0       49.640137           100.0                0.0     -87.917725  45.834961           0.0       -2.602539 -1348.050049       0.0
7        -1300.872559        -1348.050049      -1300.872559     400.000000      49.780029      -1348.050049             0.0                     0.0       49.640137           100.0                0.0     -36.355469  47.177490           0.0       -1.260254 -1299.612305       0.0
8        -1251.092529        -1299.612305      -1251.092529     400.000000      49.780029      -1299.612305             0.0                     0.0       49.640137           100.0                0.0      15.124512  48.519775           0.0       -0.000244 -1251.092285       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=573/4096, buf_size=1721/4096, start_state=[0].[0m
[01/30 14:07:23]  --------------------------------------------------------------------------------
[01/30 14:07:23]  Iteration: 44 (3 solution, 40 counterexamples)
[01/30 14:08:12]  Generator returned sat in 45.284562 secs.
[01/30 14:08:12]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + 1max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 14:08:29]  Verifer returned unsat in 17.014712 secs.
[01/30 14:22:32]  Verifer returned unsat in 842.743115 secs.
[01/30 14:22:32]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + 1max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 14:22:32]  --------------------------------------------------------------------------------
[01/30 14:22:32]  Iteration: 45 (4 solution, 40 counterexamples)
[01/30 14:23:07]  Generator returned sat in 31.425471 secs.
[01/30 14:23:08]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 14:23:27]  Verifer returned unsat in 19.721154 secs.
[01/30 15:02:02]  Verifer returned unsat in 2314.420241 secs.
[01/30 15:02:02]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 15:02:02]  --------------------------------------------------------------------------------
[01/30 15:02:02]  Iteration: 46 (5 solution, 40 counterexamples)
[01/30 15:03:17]  Generator returned sat in 71.323168 secs.
[01/30 15:03:17]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:03:34]  Verifer returned unsat in 16.683658 secs.
[01/30 15:05:22]  Verifer returned unsat in 107.422443 secs.
[01/30 15:05:22]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:05:22]  --------------------------------------------------------------------------------
[01/30 15:05:22]  Iteration: 47 (6 solution, 40 counterexamples)
[01/30 15:05:53]  Generator returned sat in 27.758402 secs.
[01/30 15:05:54]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:06:11]  Verifer returned unsat in 17.653615 secs.
[01/30 15:16:47]  Verifer returned unsat in 635.283473 secs.
[01/30 15:16:47]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:16:47]  --------------------------------------------------------------------------------
[01/30 15:16:47]  Iteration: 48 (7 solution, 40 counterexamples)
[01/30 15:17:19]  Generator returned sat in 27.806068 secs.
[01/30 15:17:19]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:17:43]  Verifer returned unsat in 24.246199 secs.
[01/30 15:18:48]  Verifer returned unsat in 64.795617 secs.
[01/30 15:18:48]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:18:48]  --------------------------------------------------------------------------------
[01/30 15:18:48]  Iteration: 49 (8 solution, 40 counterexamples)
[01/30 15:19:20]  Generator returned sat in 28.144708 secs.
[01/30 15:19:20]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:19:44]  Verifer returned unsat in 23.383995 secs.
[01/30 15:30:09]  Verifer returned unsat in 624.580894 secs.
[01/30 15:30:09]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:30:09]  --------------------------------------------------------------------------------
[01/30 15:30:09]  Iteration: 50 (9 solution, 40 counterexamples)
[01/30 15:30:40]  Generator returned sat in 27.914791 secs.
[01/30 15:30:40]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:31:11]  Verifer returned unsat in 30.106115 secs.
[01/30 15:48:21]  Verifer returned unsat in 1030.336283 secs.
[01/30 15:48:21]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:48:21]  --------------------------------------------------------------------------------
[01/30 15:48:21]  Iteration: 51 (10 solution, 40 counterexamples)
[01/30 15:48:52]  Generator returned sat in 27.533998 secs.
[01/30 15:48:53]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:49:46]  Verifer returned unsat in 52.942137 secs.
[01/30 15:51:33]  Verifer returned unsat in 107.077685 secs.
[01/30 15:51:33]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:51:33]  --------------------------------------------------------------------------------
[01/30 15:51:33]  Iteration: 52 (11 solution, 40 counterexamples)
[01/30 15:52:05]  Generator returned sat in 28.246433 secs.
[01/30 15:52:05]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:52:35]  Verifer returned unsat in 29.396726 secs.
[01/30 15:57:47]  Verifer returned unsat in 312.177426 secs.
[01/30 15:57:47]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:57:47]  --------------------------------------------------------------------------------
[01/30 15:57:47]  Iteration: 53 (12 solution, 40 counterexamples)
[01/30 15:58:18]  Generator returned sat in 27.554240 secs.
[01/30 15:58:18]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 15:58:44]  Verifer returned unsat in 25.422170 secs.
[01/30 16:03:22]  Verifer returned unsat in 278.368435 secs.
[01/30 16:03:22]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:03:23]  --------------------------------------------------------------------------------
[01/30 16:03:23]  Iteration: 54 (13 solution, 40 counterexamples)
[01/30 16:03:54]  Generator returned sat in 27.896573 secs.
[01/30 16:03:54]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:04:09]  Verifer returned unsat in 14.685942 secs.
[01/30 16:15:42]  Verifer returned unsat in 692.236823 secs.
[01/30 16:15:42]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:15:42]  --------------------------------------------------------------------------------
[01/30 16:15:42]  Iteration: 55 (14 solution, 40 counterexamples)
[01/30 16:16:14]  Generator returned sat in 28.330316 secs.
[01/30 16:16:14]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:16:30]  Verifer returned unsat in 16.022853 secs.
[01/30 16:17:19]  Verifer returned unsat in 48.759094 secs.
[01/30 16:17:19]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:17:19]  --------------------------------------------------------------------------------
[01/30 16:17:19]  Iteration: 56 (15 solution, 40 counterexamples)
[01/30 16:17:51]  Generator returned sat in 27.897882 secs.
[01/30 16:17:51]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:18:32]  Verifer returned unsat in 41.246316 secs.
[01/30 16:20:18]  Verifer returned unsat in 105.271425 secs.
[01/30 16:20:18]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:20:18]  --------------------------------------------------------------------------------
[01/30 16:20:18]  Iteration: 57 (16 solution, 40 counterexamples)
[01/30 16:20:49]  Generator returned sat in 27.959160 secs.
[01/30 16:20:50]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:21:31]  Verifer returned unsat in 41.316279 secs.
[01/30 16:22:26]  Verifer returned unsat in 54.302299 secs.
[01/30 16:22:26]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:22:26]  --------------------------------------------------------------------------------
[01/30 16:22:26]  Iteration: 58 (17 solution, 40 counterexamples)
[01/30 16:22:58]  Generator returned sat in 28.247835 secs.
[01/30 16:22:58]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:23:07]  Verifer returned unsat in 9.423426 secs.
[01/30 16:23:41]  Verifer returned unsat in 33.035415 secs.
[01/30 16:23:41]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:23:41]  --------------------------------------------------------------------------------
[01/30 16:23:41]  Iteration: 59 (18 solution, 40 counterexamples)
[01/30 16:24:12]  Generator returned sat in 28.098323 secs.
[01/30 16:24:13]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:24:42]  Verifer returned unsat in 28.943541 secs.
[01/30 16:26:03]  Verifer returned unsat in 80.550562 secs.
[01/30 16:26:03]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:26:03]  --------------------------------------------------------------------------------
[01/30 16:26:03]  Iteration: 60 (19 solution, 40 counterexamples)
[01/30 16:26:35]  Generator returned sat in 28.494077 secs.
[01/30 16:26:35]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:26:47]  Verifer returned unsat in 11.534087 secs.
[01/30 16:27:31]  Verifer returned unsat in 44.171440 secs.
[01/30 16:27:31]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:27:31]  --------------------------------------------------------------------------------
[01/30 16:27:31]  Iteration: 61 (20 solution, 40 counterexamples)
[01/30 16:28:03]  Generator returned sat in 28.131221 secs.
[01/30 16:28:03]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:28:20]  Verifer returned unsat in 16.511304 secs.
[01/30 16:53:39]  Verifer returned unsat in 1518.560994 secs.
[01/30 16:53:39]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:53:39]  --------------------------------------------------------------------------------
[01/30 16:53:39]  Iteration: 62 (21 solution, 40 counterexamples)
[01/30 16:54:12]  Generator returned sat in 29.416161 secs.
[01/30 16:54:12]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:54:22]  Verifer returned unsat in 9.624591 secs.
[01/30 16:55:41]  Verifer returned unsat in 79.187526 secs.
[01/30 16:55:41]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:55:41]  --------------------------------------------------------------------------------
[01/30 16:55:41]  Iteration: 63 (22 solution, 40 counterexamples)
[01/30 16:56:14]  Generator returned sat in 28.621175 secs.
[01/30 16:56:14]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:56:26]  Verifer returned unsat in 11.921934 secs.
[01/30 16:57:15]  Verifer returned unsat in 48.832687 secs.
[01/30 16:57:15]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:57:15]  --------------------------------------------------------------------------------
[01/30 16:57:15]  Iteration: 64 (23 solution, 40 counterexamples)
[01/30 16:57:47]  Generator returned sat in 28.400797 secs.
[01/30 16:57:47]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:58:07]  Verifer returned unsat in 19.930089 secs.
[01/30 16:59:12]  Verifer returned unsat in 64.467244 secs.
[01/30 16:59:12]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -3/2max_c + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 16:59:12]  --------------------------------------------------------------------------------
[01/30 16:59:12]  Iteration: 65 (24 solution, 40 counterexamples)
[01/30 16:59:48]  Generator returned sat in 31.733588 secs.
[01/30 16:59:48]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 17:00:13]  Verifer returned unsat in 25.210925 secs.
[01/30 17:01:03]  Verifer returned unsat in 49.933973 secs.
[01/30 17:01:03]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 17:01:03]  --------------------------------------------------------------------------------
[01/30 17:01:03]  Iteration: 66 (25 solution, 40 counterexamples)
[01/30 17:01:35]  Generator returned sat in 27.835653 secs.
[01/30 17:01:35]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 17:01:55]  Verifer returned unsat in 20.121169 secs.
[01/30 17:17:11]  Verifer returned unsat in 914.979615 secs.
[01/30 17:17:11]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 17:17:11]  --------------------------------------------------------------------------------
[01/30 17:17:11]  Iteration: 67 (26 solution, 40 counterexamples)
[01/30 17:17:42]  Generator returned sat in 27.367709 secs.
[01/30 17:17:42]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 17:17:59]  Verifer returned unsat in 17.398658 secs.
[01/30 17:18:54]  Verifer returned unsat in 54.667750 secs.
[01/30 17:18:54]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 17:18:54]  --------------------------------------------------------------------------------
[01/30 17:18:54]  Iteration: 68 (27 solution, 40 counterexamples)
[01/30 17:20:51]  Generator returned sat in 112.556380 secs.
[01/30 17:20:51]  Candidate solution: 
[1m[94mif (+ -1/2min_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
elif (+ -1min_c + 1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 17:21:20]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 17:21:20]  Verifer returned sat in 28.887292 secs.
[01/30 17:21:20]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -3750.716797          -3750.716797        -3750.716797         0.995361         0.996338        -3750.716797               0.0                       0.0          4.533203             100.0                  0.0      0.0          -1.0       0.0
1          -3745.916748          -3745.916748        -3745.916748       400.000000         4.800049        -3745.916748               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
2          -3741.116699          -3741.116699        -3741.116699       400.000000         4.800049        -3741.116699               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
3          -3736.316650          -3736.316650        -3736.316650       400.000000         4.800049        -3736.316650               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
4          -3731.516602          -3731.516602        -3731.516602       400.000000         4.800049        -3731.516602               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
5          -3726.716553          -3726.716553        -3726.716553       400.000000         4.800049        -3726.716553               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
6          -3721.916504          -3721.916504        -3721.916504       400.000000         4.800049        -3721.916504               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
7          -3717.116455          -3717.116455        -3717.116455       400.000000         4.800049        -3717.116455               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
8          -3712.316406          -3712.316406        -3712.316406       400.000000         4.800049        -3712.316406               0.0                       0.0          4.533203             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1093/4096, buf_size=202761/2048, start_state=[0].[0m
[01/30 17:21:20]  --------------------------------------------------------------------------------
[01/30 17:21:20]  Iteration: 69 (27 solution, 41 counterexamples)
[01/30 17:45:28]  Generator returned sat in 1444.499584 secs.
[01/30 17:45:29]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_qdel + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:45:47]  Verifer returned unsat in 18.263819 secs.
[01/30 17:47:10]  Verifer returned unsat in 83.043773 secs.
[01/30 17:47:10]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_qdel + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:47:10]  --------------------------------------------------------------------------------
[01/30 17:47:10]  Iteration: 70 (28 solution, 41 counterexamples)
[01/30 17:47:54]  Generator returned sat in 40.080336 secs.
[01/30 17:47:54]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_c + 2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:48:26]  Verifer returned unsat in 31.220719 secs.
[01/30 17:49:29]  Verifer returned unsat in 63.583094 secs.
[01/30 17:49:29]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_c + 2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:49:30]  --------------------------------------------------------------------------------
[01/30 17:49:30]  Iteration: 71 (29 solution, 41 counterexamples)
[01/30 17:50:13]  Generator returned sat in 39.952386 secs.
[01/30 17:50:14]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:50:25]  Verifer returned unsat in 11.106074 secs.
[01/30 17:51:16]  Verifer returned unsat in 51.276904 secs.
[01/30 17:51:16]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:51:16]  --------------------------------------------------------------------------------
[01/30 17:51:16]  Iteration: 72 (30 solution, 41 counterexamples)
[01/30 17:51:59]  Generator returned sat in 39.213693 secs.
[01/30 17:52:00]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 1/2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:52:11]  Verifer returned unsat in 11.141698 secs.
[01/30 17:55:06]  Verifer returned unsat in 174.618997 secs.
[01/30 17:55:06]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 1/2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:55:06]  --------------------------------------------------------------------------------
[01/30 17:55:06]  Iteration: 73 (31 solution, 41 counterexamples)
[01/30 17:55:49]  Generator returned sat in 39.288986 secs.
[01/30 17:55:49]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 3/2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:56:07]  Verifer returned unsat in 17.963618 secs.
[01/30 17:57:28]  Verifer returned unsat in 80.756330 secs.
[01/30 17:57:28]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 3/2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:57:28]  --------------------------------------------------------------------------------
[01/30 17:57:28]  Iteration: 74 (32 solution, 41 counterexamples)
[01/30 17:58:11]  Generator returned sat in 38.942031 secs.
[01/30 17:58:11]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:58:25]  Verifer returned unsat in 13.930042 secs.
[01/30 17:59:11]  Verifer returned unsat in 45.723902 secs.
[01/30 17:59:11]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 17:59:11]  --------------------------------------------------------------------------------
[01/30 17:59:11]  Iteration: 75 (33 solution, 41 counterexamples)
[01/30 17:59:54]  Generator returned sat in 39.376947 secs.
[01/30 17:59:55]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1/2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 18:00:13]  Verifer returned unsat in 18.667923 secs.
[01/30 18:01:05]  Verifer returned unsat in 51.807894 secs.
[01/30 18:01:05]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1/2max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 18:01:06]  --------------------------------------------------------------------------------
[01/30 18:01:06]  Iteration: 76 (34 solution, 41 counterexamples)
[01/30 18:07:13]  Generator returned sat in 364.177460 secs.
[01/30 18:07:14]  Candidate solution: 
[1m[94mif (+ -1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
elif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 18:07:46]  Improved number of small numbers from 81 to 83 out of a max of 135
[01/30 18:07:46]  Verifer returned sat in 32.119608 secs.
[01/30 18:07:46]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0          -4832.483966          -4833.479492        -4832.483966         0.995117         0.996094        -4833.479492          0.995361                  0.000000         50.497681             100.0                  4.0  0.000165          -1.0       5.0
1          -4788.858386          -4789.853748        -4788.858386       400.000000        43.625580        -4789.853748          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           1.0       0.0
2          -4745.232806          -4746.228168        -4745.232806       400.000000        43.625580        -4746.228168          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
3          -4701.607227          -4702.602588        -4701.607227       400.000000        43.625580        -4702.602588          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
4          -4657.981647          -4658.977008        -4657.981647       400.000000        43.625580        -4658.977008          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
5          -4614.356067          -4615.351428        -4614.356067       400.000000        43.625580        -4615.351428          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
6          -4570.730487          -4571.725848        -4570.730487       400.000000        43.625580        -4571.725848          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
7          -4527.104907          -4528.100269        -4527.104907       400.000000        43.625580        -4528.100269          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
8          -4483.479327          -4484.474689        -4483.479327       400.000000        43.625580        -4484.474689          0.995361                  0.995361         50.497681             100.0                  0.0  0.000000           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=225185/32768, buf_size=800, start_state=[0].[0m
[01/30 18:07:46]  --------------------------------------------------------------------------------
[01/30 18:07:46]  Iteration: 77 (34 solution, 42 counterexamples)
[01/30 18:27:12]  Generator returned sat in 1161.791313 secs.
[01/30 18:27:12]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 18:27:47]  Verifer returned unsat in 34.957576 secs.
[01/30 18:31:22]  Verifer returned unsat in 215.172890 secs.
[01/30 18:31:23]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 18:31:23]  --------------------------------------------------------------------------------
[01/30 18:31:23]  Iteration: 78 (35 solution, 42 counterexamples)
[01/30 18:32:09]  Generator returned sat in 42.841680 secs.
[01/30 18:32:10]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 18:32:46]  Verifer returned unsat in 35.833508 secs.
[01/30 18:33:49]  Verifer returned unsat in 63.494828 secs.
[01/30 18:33:49]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 18:33:49]  --------------------------------------------------------------------------------
[01/30 18:33:49]  Iteration: 79 (36 solution, 42 counterexamples)
[01/30 18:34:36]  Generator returned sat in 42.953985 secs.
[01/30 18:34:37]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 18:34:49]  Verifer returned unsat in 12.606932 secs.
[01/30 18:36:06]  Verifer returned unsat in 76.065505 secs.
[01/30 18:36:06]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 18:36:06]  --------------------------------------------------------------------------------
[01/30 18:36:06]  Iteration: 80 (37 solution, 42 counterexamples)
[01/30 18:36:53]  Generator returned sat in 43.083843 secs.
[01/30 18:36:53]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 18:37:12]  Verifer returned unsat in 18.943482 secs.
[01/30 18:38:47]  Verifer returned unsat in 94.202383 secs.
[01/30 18:38:47]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 18:38:47]  --------------------------------------------------------------------------------
[01/30 18:38:47]  Iteration: 81 (38 solution, 42 counterexamples)
[01/30 18:39:34]  Generator returned sat in 42.962784 secs.
[01/30 18:39:34]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 18:39:49]  Verifer returned unsat in 14.458421 secs.
[01/30 18:42:43]  Verifer returned unsat in 174.244663 secs.
[01/30 18:42:43]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 18:42:43]  --------------------------------------------------------------------------------
[01/30 18:42:43]  Iteration: 82 (39 solution, 42 counterexamples)
[01/30 18:43:31]  Generator returned sat in 44.041797 secs.
[01/30 18:43:32]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 3/2max_c + -1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 18:43:47]  Verifer returned unsat in 15.381162 secs.
[01/30 18:44:57]  Verifer returned unsat in 69.431444 secs.
[01/30 18:44:57]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 3/2max_c + -1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 18:44:57]  --------------------------------------------------------------------------------
[01/30 18:44:57]  Iteration: 83 (40 solution, 42 counterexamples)
[01/30 18:45:44]  Generator returned sat in 43.178452 secs.
[01/30 18:45:44]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + -1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 18:46:16]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/30 18:46:16]  Verifer returned sat in 31.861623 secs.
[01/30 18:46:16]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0          -8567.531006          -8773.026123        -8567.531006         0.995117         0.996094        -8773.026123          0.995117                  0.000000              98.0             100.0                  2.0    204.5          -1.0       3.0
1          -8372.031006          -8673.026123        -8372.031006       400.000000       196.000000        -8673.026123         96.495117                  0.995117              98.0             100.0                  2.0    204.5           1.0       3.0
2          -8176.531006          -8573.026123        -8176.531006       400.000000       196.000000        -8573.026123        191.995117                 96.495117              98.0             100.0                  2.0    204.5           1.0       3.0
3          -7981.031006          -8473.026123        -7981.031006       400.000000       196.000000        -8473.026123        287.495117                191.995117              98.0             100.0                  1.0    204.5           1.0       2.0
4          -7785.531006          -8373.026123        -7785.531006       400.000000       196.000000        -8373.026123        382.995117                287.495117              98.0             100.0                  1.0    204.5           1.0       2.0
5          -7590.031006          -8273.026123        -7590.031006       400.000000       196.000000        -8273.026123        478.495117                382.995117              98.0             100.0                  1.0    204.5           1.0       2.0
6          -7394.531006          -8173.026123        -7394.531006       400.000000       196.000000        -8173.026123        573.995117                478.495117              98.0             100.0                  1.0    204.5           1.0       2.0
7          -7199.031006          -8073.026123        -7199.031006       400.000000       196.000000        -8073.026123        669.495117                573.995117              98.0             100.0                  1.0    204.5           1.0       2.0
8          -7003.531006          -7973.026123        -7003.531006       400.000000       196.000000        -7973.026123        764.995117                669.495117              98.0             100.0                  1.0    204.5           1.0       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=8, 
, large_loss_count=8, loss_amount=1337/2, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1/2, buf_size=409/2, start_state=[0].[0m
[01/30 18:46:16]  --------------------------------------------------------------------------------
[01/30 18:46:16]  Iteration: 84 (40 solution, 43 counterexamples)
[01/30 19:03:01]  Generator returned sat in 1000.474522 secs.
[01/30 19:03:01]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 19:03:14]  Verifer returned unsat in 12.510283 secs.
[01/30 19:06:11]  Verifer returned unsat in 176.738435 secs.
[01/30 19:06:11]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 19:06:11]  --------------------------------------------------------------------------------
[01/30 19:06:11]  Iteration: 85 (41 solution, 43 counterexamples)
[01/30 19:07:01]  Generator returned sat in 46.157745 secs.
[01/30 19:07:01]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 19:07:14]  Verifer returned unsat in 12.123810 secs.
[01/30 19:09:11]  Verifer returned unsat in 116.839088 secs.
[01/30 19:09:11]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 19:09:11]  --------------------------------------------------------------------------------
[01/30 19:09:11]  Iteration: 86 (42 solution, 43 counterexamples)
[01/30 19:10:00]  Generator returned sat in 45.693698 secs.
[01/30 19:10:01]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 19:10:14]  Verifer returned unsat in 12.871975 secs.
[01/30 19:22:50]  Verifer returned unsat in 755.767721 secs.
[01/30 19:22:50]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 19:22:50]  --------------------------------------------------------------------------------
[01/30 19:22:50]  Iteration: 87 (43 solution, 43 counterexamples)
[01/30 19:23:40]  Generator returned sat in 46.829689 secs.
[01/30 19:23:41]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 19:24:21]  Verifer returned unsat in 39.596309 secs.
[01/30 19:33:46]  Verifer returned unsat in 565.749151 secs.
[01/30 19:33:47]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 19:33:47]  --------------------------------------------------------------------------------
[01/30 19:33:47]  Iteration: 88 (44 solution, 43 counterexamples)
[01/30 19:34:37]  Generator returned sat in 46.181556 secs.
[01/30 19:34:37]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 19:35:01]  Verifer returned unsat in 24.088351 secs.
[01/30 19:42:54]  Verifer returned unsat in 472.024746 secs.
[01/30 19:42:54]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 19:42:54]  --------------------------------------------------------------------------------
[01/30 19:42:54]  Iteration: 89 (45 solution, 43 counterexamples)
[01/30 19:43:43]  Generator returned sat in 45.000128 secs.
[01/30 19:43:43]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 19:43:55]  Verifer returned unsat in 11.874911 secs.
[01/30 19:44:28]  Verifer returned unsat in 33.127030 secs.
[01/30 19:44:28]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 19:44:29]  --------------------------------------------------------------------------------
[01/30 19:44:29]  Iteration: 90 (46 solution, 43 counterexamples)
[01/30 19:45:23]  Generator returned sat in 50.927393 secs.
[01/30 19:45:24]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 19:45:36]  Verifer returned unsat in 12.120468 secs.
[01/30 19:50:29]  Verifer returned unsat in 292.540732 secs.
[01/30 19:50:29]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 19:50:29]  --------------------------------------------------------------------------------
[01/30 19:50:29]  Iteration: 91 (47 solution, 43 counterexamples)
[01/30 19:51:17]  Generator returned sat in 44.149108 secs.
[01/30 19:51:17]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 19:51:29]  Verifer returned unsat in 12.208507 secs.
[01/30 20:08:41]  Verifer returned unsat in 1031.732518 secs.
[01/30 20:08:41]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:08:41]  --------------------------------------------------------------------------------
[01/30 20:08:41]  Iteration: 92 (48 solution, 43 counterexamples)
[01/30 20:09:31]  Generator returned sat in 45.639987 secs.
[01/30 20:09:32]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 20:09:58]  Verifer returned unsat in 26.228294 secs.
[01/30 20:12:42]  Verifer returned unsat in 164.014230 secs.
[01/30 20:12:42]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 20:12:42]  --------------------------------------------------------------------------------
[01/30 20:12:42]  Iteration: 93 (49 solution, 43 counterexamples)
[01/30 20:13:56]  Generator returned sat in 69.314230 secs.
[01/30 20:13:56]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 20:14:10]  Verifer returned unsat in 14.068132 secs.
[01/30 20:16:22]  Verifer returned unsat in 131.827203 secs.
[01/30 20:16:22]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 20:16:22]  --------------------------------------------------------------------------------
[01/30 20:16:22]  Iteration: 94 (50 solution, 43 counterexamples)
[01/30 20:17:13]  Generator returned sat in 46.998941 secs.
[01/30 20:17:14]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 20:17:29]  Verifer returned unsat in 14.698954 secs.
[01/30 20:23:39]  Verifer returned unsat in 370.043489 secs.
[01/30 20:23:39]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 20:23:39]  --------------------------------------------------------------------------------
[01/30 20:23:39]  Iteration: 95 (51 solution, 43 counterexamples)
[01/30 20:24:29]  Generator returned sat in 45.703816 secs.
[01/30 20:24:29]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:24:43]  Verifer returned unsat in 14.015758 secs.
[01/30 20:26:55]  Verifer returned unsat in 131.167947 secs.
[01/30 20:26:55]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:26:55]  --------------------------------------------------------------------------------
[01/30 20:26:55]  Iteration: 96 (52 solution, 43 counterexamples)
[01/30 20:27:45]  Generator returned sat in 45.986576 secs.
[01/30 20:27:45]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 20:28:38]  Verifer returned unsat in 52.564859 secs.
[01/30 20:29:33]  Verifer returned unsat in 54.794285 secs.
[01/30 20:29:33]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 20:29:33]  --------------------------------------------------------------------------------
[01/30 20:29:33]  Iteration: 97 (53 solution, 43 counterexamples)
[01/30 20:30:23]  Generator returned sat in 45.676628 secs.
[01/30 20:30:23]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 20:30:57]  Verifer returned unsat in 33.530224 secs.
[01/30 20:32:07]  Verifer returned unsat in 69.792020 secs.
[01/30 20:32:07]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 3/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 20:32:07]  --------------------------------------------------------------------------------
[01/30 20:32:07]  Iteration: 98 (54 solution, 43 counterexamples)
[01/30 20:32:56]  Generator returned sat in 45.116141 secs.
[01/30 20:32:56]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:33:10]  Verifer returned unsat in 13.754129 secs.
[01/30 20:34:14]  Verifer returned unsat in 63.428320 secs.
[01/30 20:34:14]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:34:14]  --------------------------------------------------------------------------------
[01/30 20:34:14]  Iteration: 99 (55 solution, 43 counterexamples)
[01/30 20:35:03]  Generator returned sat in 45.121934 secs.
[01/30 20:35:03]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:35:42]  Verifer returned unsat in 38.755866 secs.
[01/30 20:40:55]  Verifer returned unsat in 312.866654 secs.
[01/30 20:40:55]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:40:55]  --------------------------------------------------------------------------------
[01/30 20:40:55]  Iteration: 100 (56 solution, 43 counterexamples)
[01/30 20:41:45]  Generator returned sat in 45.227412 secs.
[01/30 20:41:45]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:41:56]  Verifer returned unsat in 11.101410 secs.
[01/30 20:43:00]  Verifer returned unsat in 63.561860 secs.
[01/30 20:43:00]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:43:00]  --------------------------------------------------------------------------------
[01/30 20:43:00]  Iteration: 101 (57 solution, 43 counterexamples)
[01/30 20:43:49]  Generator returned sat in 45.077343 secs.
[01/30 20:43:50]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:44:04]  Verifer returned unsat in 13.930485 secs.
[01/30 20:50:13]  Verifer returned unsat in 368.849444 secs.
[01/30 20:50:13]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 20:50:13]  --------------------------------------------------------------------------------
[01/30 20:50:13]  Iteration: 102 (58 solution, 43 counterexamples)
[01/30 20:54:47]  Generator returned sat in 270.001526 secs.
[01/30 20:54:47]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 20:55:09]  Verifer returned unsat in 22.092379 secs.
[01/30 20:59:30]  Verifer returned unsat in 260.765592 secs.
[01/30 20:59:30]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 20:59:31]  --------------------------------------------------------------------------------
[01/30 20:59:31]  Iteration: 103 (59 solution, 43 counterexamples)
[01/30 21:00:20]  Generator returned sat in 45.538543 secs.
[01/30 21:00:20]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:00:41]  Verifer returned unsat in 20.778805 secs.
[01/30 21:01:46]  Verifer returned unsat in 65.258917 secs.
[01/30 21:01:47]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:01:47]  --------------------------------------------------------------------------------
[01/30 21:01:47]  Iteration: 104 (60 solution, 43 counterexamples)
[01/30 21:02:36]  Generator returned sat in 45.284050 secs.
[01/30 21:02:36]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:02:58]  Verifer returned unsat in 21.723869 secs.
[01/30 21:04:11]  Verifer returned unsat in 72.452277 secs.
[01/30 21:04:11]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:04:11]  --------------------------------------------------------------------------------
[01/30 21:04:11]  Iteration: 105 (61 solution, 43 counterexamples)
[01/30 21:05:00]  Generator returned sat in 45.015967 secs.
[01/30 21:05:00]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -3/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:05:23]  Verifer returned unsat in 22.866978 secs.
[01/30 21:54:26]  Verifer returned unsat in 2942.707747 secs.
[01/30 21:54:26]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -3/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:54:26]  --------------------------------------------------------------------------------
[01/30 21:54:26]  Iteration: 106 (62 solution, 43 counterexamples)
[01/30 21:55:19]  Generator returned sat in 48.718334 secs.
[01/30 21:55:20]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -1max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 21:56:01]  Verifer returned unsat in 41.010360 secs.
[01/30 22:02:12]  Verifer returned unsat in 370.403384 secs.
[01/30 22:02:12]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -1max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:02:12]  --------------------------------------------------------------------------------
[01/30 22:02:12]  Iteration: 107 (63 solution, 43 counterexamples)
[01/30 22:03:02]  Generator returned sat in 46.556374 secs.
[01/30 22:03:02]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:03:20]  Verifer returned unsat in 17.817248 secs.
[01/30 22:15:37]  Verifer returned unsat in 736.956740 secs.
[01/30 22:15:38]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:15:38]  --------------------------------------------------------------------------------
[01/30 22:15:38]  Iteration: 108 (64 solution, 43 counterexamples)
[01/30 22:16:28]  Generator returned sat in 46.589717 secs.
[01/30 22:16:28]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:16:53]  Verifer returned unsat in 24.370040 secs.
[01/30 22:18:09]  Verifer returned unsat in 75.765073 secs.
[01/30 22:18:09]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + 1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:18:09]  --------------------------------------------------------------------------------
[01/30 22:18:09]  Iteration: 109 (65 solution, 43 counterexamples)
[01/30 22:19:01]  Generator returned sat in 47.632748 secs.
[01/30 22:19:01]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_qdel > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:19:20]  Verifer returned unsat in 18.662028 secs.
[01/30 22:21:38]  Verifer returned unsat in 138.389393 secs.
[01/30 22:21:38]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_qdel > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:21:38]  --------------------------------------------------------------------------------
[01/30 22:21:38]  Iteration: 110 (66 solution, 43 counterexamples)
[01/30 22:22:33]  Generator returned sat in 50.371956 secs.
[01/30 22:22:33]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_qdel + -1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 22:23:06]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/30 22:23:06]  Verifer returned sat in 33.295698 secs.
[01/30 22:23:07]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t     queue_t  utilized_0,t  qdelay_t
0          -9959.146240          -10259.64624        -9959.146240         0.994629         0.996094        -10259.64624              0.50                      0.00         89.388916          100.3125                  3.0  300.000000          -1.0       4.0
1          -9857.896240          -10159.64624        -9857.896240       401.250000       178.777832        -10159.64624              1.75                      0.50         89.388916          100.3125                  1.0  300.000000           1.0       2.0
2          -9768.507324          -10059.64624        -9768.507324       401.250000        89.388916        -10059.64624              1.75                      1.75         89.388916          100.3125                  2.0  289.388916           1.0       3.0
3          -9656.646240           -9959.64624        -9656.646240       401.250000       178.777832         -9959.64624              3.00                      1.75         89.388916          100.3125                  3.0  300.000000           1.0       4.0
4          -9555.396240           -9859.64624        -9555.396240       401.250000       178.777832         -9859.64624              4.25                      3.00         89.388916          100.3125                  2.0  300.000000           1.0       3.0
5          -9454.146240           -9759.64624        -9454.146240       401.250000       178.777832         -9759.64624              5.50                      4.25         89.388916          100.3125                  1.0  300.000000           1.0       2.0
6          -9364.757324           -9659.64624        -9364.757324       401.250000        89.388916         -9659.64624              5.50                      5.50         89.388916          100.3125                  2.0  289.388916           1.0       3.0
7          -9252.896240           -9559.64624        -9252.896240       401.250000       178.777832         -9559.64624              6.75                      5.50         89.388916          100.3125                  2.0  300.000000           1.0       3.0
8          -9151.646240           -9459.64624        -9151.646240       401.250000       178.777832         -9459.64624              8.00                      6.75         89.388916          100.3125                  2.0  300.000000           1.0       3.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=6, 
, large_loss_count=6, loss_amount=25/4, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1023/4096, buf_size=300, start_state=[0].[0m
[01/30 22:23:07]  --------------------------------------------------------------------------------
[01/30 22:23:07]  Iteration: 111 (66 solution, 44 counterexamples)
[01/30 22:40:12]  Generator returned sat in 1021.698238 secs.
[01/30 22:40:13]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
elif (+ -1min_qdel + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 22:41:15]  Verifer returned unsat in 62.390106 secs.
[01/30 23:11:31]  Improved number of small numbers from 99 to 117 out of a max of 145
[01/30 23:11:31]  Verifer returned sat in 1815.590558 secs.
[01/30 23:11:31]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t     queue_t  utilized_0,t  bottle_queue_t     upper_S_t  qdelay_t
0       -11985.372593       -12016.804932     -11985.372593       0.999023       0.998047     -12016.804932        0.518311                0.000000        84.54321      129.123457                0.0    2151.844927   30.914028          -1.0       30.913788 -12016.804692       0.0
1       -11816.286174       -11987.965088     -11816.286174     516.493827     169.086420     -11987.965088        0.518311                0.518311        84.54321      129.123457                0.0    2151.844927  171.160604           1.0      100.000208 -11916.804692       1.0
2       -11647.199754       -11903.421875     -11647.199754     516.493827     169.086420     -11903.421875       69.086420                0.518311        84.54321      129.123457                0.0    2151.844927  187.135701           0.0      100.518519 -11816.804692       1.0
3       -11478.113334       -11816.804688     -11478.113334     516.493827     169.086420     -11816.804688      138.172840               69.086420        84.54321      129.123457                1.0    2151.844927  200.518514           1.0      100.518519 -11716.804692       2.0
4       -11435.841729       -11649.792480     -11435.841729     516.493827      42.271605     -11649.792480      138.172840              138.172840        84.54321      129.123457                0.0    2151.844927   75.777912           1.0       42.790123 -11616.804692       1.0
5       -11266.755309       -11574.014648     -11266.755309     516.493827     169.086420     -11574.014648      149.530864              138.172840        84.54321      129.123457                0.0    2151.844927  157.728475           0.0      100.518519 -11516.804692       1.0
6       -11097.668890       -11480.706055     -11097.668890     516.493827     169.086420     -11480.706055      218.617284              149.530864        84.54321      129.123457                0.0    2151.844927  164.419881           1.0      100.518519 -11416.804692       1.0
7       -10928.582470       -11415.767578     -10928.582470     516.493827     169.086420     -11415.767578      287.703704              218.617284        84.54321      129.123457                0.0    2151.844927  199.481404           1.0      100.518519 -11316.804692       1.0
8       -10759.496050       -11315.767578     -10759.496050     516.493827     169.086420     -11315.767578      356.790123              287.703704        84.54321      129.123457                0.0    2151.844927  199.481404           1.0      100.518519 -11216.804692       1.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=True, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=6, 
, large_loss_count=5, loss_amount=118202437/331776, beliefs_remain_consistent=True, beliefs_improve=False, alpha=526/27, buf_size=2714/27, start_state=[0].[0m
[01/30 23:11:31]  --------------------------------------------------------------------------------
[01/30 23:11:31]  Iteration: 112 (66 solution, 45 counterexamples)
[01/30 23:20:55]  Generator returned sat in 559.908369 secs.
[01/30 23:20:56]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 23:21:21]  Verifer returned unsat in 25.212270 secs.
[01/30 23:25:18]  Verifer returned unsat in 236.357175 secs.
[01/30 23:25:18]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 23:25:18]  --------------------------------------------------------------------------------
[01/30 23:25:18]  Iteration: 113 (67 solution, 45 counterexamples)
[01/30 23:26:14]  Generator returned sat in 51.768458 secs.
[01/30 23:26:14]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 23:26:33]  Verifer returned unsat in 19.425531 secs.
[01/30 23:27:49]  Verifer returned unsat in 75.499295 secs.
[01/30 23:27:49]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/30 23:27:49]  --------------------------------------------------------------------------------
[01/30 23:27:49]  Iteration: 114 (68 solution, 45 counterexamples)
[01/30 23:28:45]  Generator returned sat in 50.991797 secs.
[01/30 23:28:45]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 23:29:16]  Verifer returned unsat in 31.316068 secs.
[01/30 23:30:32]  Verifer returned unsat in 75.125674 secs.
[01/30 23:30:32]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 23:30:32]  --------------------------------------------------------------------------------
[01/30 23:30:32]  Iteration: 115 (69 solution, 45 counterexamples)
[01/30 23:31:28]  Generator returned sat in 51.415800 secs.
[01/30 23:31:28]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 23:31:50]  Verifer returned unsat in 22.352363 secs.
[01/30 23:32:40]  Verifer returned unsat in 48.885156 secs.
[01/30 23:32:40]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 23:32:40]  --------------------------------------------------------------------------------
[01/30 23:32:40]  Iteration: 116 (70 solution, 45 counterexamples)
[01/30 23:33:37]  Generator returned sat in 52.764481 secs.
[01/30 23:33:37]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 23:33:51]  Verifer returned unsat in 13.896596 secs.
[01/30 23:37:21]  Verifer returned unsat in 209.827906 secs.
[01/30 23:37:21]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/30 23:37:21]  --------------------------------------------------------------------------------
[01/30 23:37:21]  Iteration: 117 (71 solution, 45 counterexamples)
[01/30 23:38:15]  Generator returned sat in 49.263619 secs.
[01/30 23:38:15]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 23:38:37]  Verifer returned unsat in 22.182315 secs.
[01/30 23:41:45]  Verifer returned unsat in 187.996185 secs.
[01/30 23:41:46]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/30 23:41:46]  --------------------------------------------------------------------------------
[01/30 23:41:46]  Iteration: 118 (72 solution, 45 counterexamples)
[01/30 23:42:39]  Generator returned sat in 49.557959 secs.
[01/30 23:42:40]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 23:42:56]  Verifer returned unsat in 16.679888 secs.
[01/30 23:47:55]  Verifer returned unsat in 298.719865 secs.
[01/30 23:47:55]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/30 23:47:56]  --------------------------------------------------------------------------------
[01/30 23:47:56]  Iteration: 119 (73 solution, 45 counterexamples)
[01/30 23:48:50]  Generator returned sat in 50.515669 secs.
[01/30 23:48:50]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 23:49:05]  Verifer returned unsat in 13.978181 secs.
[01/30 23:52:14]  Verifer returned unsat in 189.141220 secs.
[01/30 23:52:14]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 3/2min_c + 2max_c + -1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/30 23:52:14]  --------------------------------------------------------------------------------
[01/30 23:52:14]  Iteration: 120 (74 solution, 45 counterexamples)
[01/31 00:00:45]  Generator returned sat in 507.194863 secs.
[01/31 00:00:46]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:01:14]  Verifer returned unsat in 28.458784 secs.
[01/31 00:02:11]  Verifer returned unsat in 56.806350 secs.
[01/31 00:02:11]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:02:11]  --------------------------------------------------------------------------------
[01/31 00:02:11]  Iteration: 121 (75 solution, 45 counterexamples)
[01/31 00:02:55]  Generator returned sat in 39.289246 secs.
[01/31 00:02:55]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:03:17]  Verifer returned unsat in 21.722161 secs.
[01/31 00:09:23]  Verifer returned unsat in 366.065272 secs.
[01/31 00:09:23]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:09:23]  --------------------------------------------------------------------------------
[01/31 00:09:23]  Iteration: 122 (76 solution, 45 counterexamples)
[01/31 00:10:06]  Generator returned sat in 38.296286 secs.
[01/31 00:10:06]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:10:21]  Verifer returned unsat in 14.684654 secs.
[01/31 00:16:11]  Verifer returned unsat in 350.062917 secs.
[01/31 00:16:11]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:16:11]  --------------------------------------------------------------------------------
[01/31 00:16:11]  Iteration: 123 (77 solution, 45 counterexamples)
[01/31 00:16:54]  Generator returned sat in 38.230640 secs.
[01/31 00:16:54]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:17:03]  Verifer returned unsat in 8.903187 secs.
[01/31 00:25:25]  Verifer returned unsat in 501.476427 secs.
[01/31 00:25:25]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:25:25]  --------------------------------------------------------------------------------
[01/31 00:25:25]  Iteration: 124 (78 solution, 45 counterexamples)
[01/31 00:26:07]  Generator returned sat in 37.828983 secs.
[01/31 00:26:07]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:26:35]  Verifer returned unsat in 27.303612 secs.
[01/31 00:30:19]  Verifer returned unsat in 223.871561 secs.
[01/31 00:30:19]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:30:19]  --------------------------------------------------------------------------------
[01/31 00:30:19]  Iteration: 125 (79 solution, 45 counterexamples)
[01/31 00:31:01]  Generator returned sat in 38.102737 secs.
[01/31 00:31:01]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:31:15]  Verifer returned unsat in 13.146214 secs.
[01/31 00:32:06]  Verifer returned unsat in 51.469043 secs.
[01/31 00:32:06]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:32:06]  --------------------------------------------------------------------------------
[01/31 00:32:06]  Iteration: 126 (80 solution, 45 counterexamples)
[01/31 00:32:48]  Generator returned sat in 37.933587 secs.
[01/31 00:32:49]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:33:01]  Verifer returned unsat in 12.128422 secs.
[01/31 00:34:15]  Verifer returned unsat in 73.544549 secs.
[01/31 00:34:15]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:34:15]  --------------------------------------------------------------------------------
[01/31 00:34:15]  Iteration: 127 (81 solution, 45 counterexamples)
[01/31 00:34:57]  Generator returned sat in 37.918291 secs.
[01/31 00:34:57]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:35:12]  Verifer returned unsat in 14.648823 secs.
[01/31 00:37:54]  Verifer returned unsat in 161.451713 secs.
[01/31 00:37:54]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 00:37:54]  --------------------------------------------------------------------------------
[01/31 00:37:54]  Iteration: 128 (82 solution, 45 counterexamples)
[01/31 00:38:36]  Generator returned sat in 38.060631 secs.
[01/31 00:38:36]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 00:39:10]  Verifer returned unsat in 33.918616 secs.
[01/31 00:40:12]  Verifer returned unsat in 61.699022 secs.
[01/31 00:40:12]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 00:40:12]  --------------------------------------------------------------------------------
[01/31 00:40:12]  Iteration: 129 (83 solution, 45 counterexamples)
[01/31 00:40:54]  Generator returned sat in 37.444638 secs.
[01/31 00:40:54]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 00:41:05]  Verifer returned unsat in 10.539412 secs.
[01/31 00:57:58]  Verifer returned unsat in 1013.678669 secs.
[01/31 00:57:59]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 00:57:59]  --------------------------------------------------------------------------------
[01/31 00:57:59]  Iteration: 130 (84 solution, 45 counterexamples)
[01/31 00:58:41]  Generator returned sat in 38.037457 secs.
[01/31 00:58:41]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 00:59:00]  Verifer returned unsat in 18.488700 secs.
[01/31 01:00:34]  Verifer returned unsat in 93.362572 secs.
[01/31 01:00:34]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:00:34]  --------------------------------------------------------------------------------
[01/31 01:00:34]  Iteration: 131 (85 solution, 45 counterexamples)
[01/31 01:01:16]  Generator returned sat in 38.151288 secs.
[01/31 01:01:17]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:01:46]  Verifer returned unsat in 29.142864 secs.
[01/31 01:07:40]  Verifer returned unsat in 354.230940 secs.
[01/31 01:07:40]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:07:40]  --------------------------------------------------------------------------------
[01/31 01:07:40]  Iteration: 132 (86 solution, 45 counterexamples)
[01/31 01:08:23]  Generator returned sat in 38.656988 secs.
[01/31 01:08:24]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:09:19]  Verifer returned unsat in 55.025004 secs.
[01/31 01:10:04]  Verifer returned unsat in 44.432131 secs.
[01/31 01:10:04]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:10:04]  --------------------------------------------------------------------------------
[01/31 01:10:04]  Iteration: 133 (87 solution, 45 counterexamples)
[01/31 01:10:46]  Generator returned sat in 37.999523 secs.
[01/31 01:10:47]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:11:02]  Verifer returned unsat in 15.284776 secs.
[01/31 01:13:34]  Verifer returned unsat in 151.806746 secs.
[01/31 01:13:34]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:13:34]  --------------------------------------------------------------------------------
[01/31 01:13:34]  Iteration: 134 (88 solution, 45 counterexamples)
[01/31 01:14:16]  Generator returned sat in 38.015265 secs.
[01/31 01:14:17]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:14:29]  Verifer returned unsat in 12.437042 secs.
[01/31 01:15:27]  Verifer returned unsat in 57.042494 secs.
[01/31 01:15:27]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 01:15:27]  --------------------------------------------------------------------------------
[01/31 01:15:27]  Iteration: 135 (89 solution, 45 counterexamples)
[01/31 01:16:09]  Generator returned sat in 38.281616 secs.
[01/31 01:16:10]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:17:07]  Verifer returned unsat in 56.735996 secs.
[01/31 01:23:18]  Verifer returned unsat in 371.548682 secs.
[01/31 01:23:18]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:23:18]  --------------------------------------------------------------------------------
[01/31 01:23:18]  Iteration: 136 (90 solution, 45 counterexamples)
[01/31 01:24:00]  Generator returned sat in 37.562417 secs.
[01/31 01:24:00]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:24:15]  Verifer returned unsat in 14.045209 secs.
[01/31 01:24:55]  Verifer returned unsat in 40.464328 secs.
[01/31 01:24:55]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:24:55]  --------------------------------------------------------------------------------
[01/31 01:24:55]  Iteration: 137 (91 solution, 45 counterexamples)
[01/31 01:25:37]  Generator returned sat in 37.685951 secs.
[01/31 01:25:37]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:25:56]  Verifer returned unsat in 18.189163 secs.
[01/31 01:40:49]  Verifer returned unsat in 893.027763 secs.
[01/31 01:40:49]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:40:49]  --------------------------------------------------------------------------------
[01/31 01:40:49]  Iteration: 138 (92 solution, 45 counterexamples)
[01/31 01:41:31]  Generator returned sat in 37.895448 secs.
[01/31 01:41:31]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:41:53]  Verifer returned unsat in 21.355155 secs.
[01/31 01:42:39]  Verifer returned unsat in 45.569123 secs.
[01/31 01:42:39]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 01:42:39]  --------------------------------------------------------------------------------
[01/31 01:42:39]  Iteration: 139 (93 solution, 45 counterexamples)
[01/31 01:43:21]  Generator returned sat in 38.317162 secs.
[01/31 01:43:22]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:43:47]  Verifer returned unsat in 25.720493 secs.
[01/31 01:45:17]  Verifer returned unsat in 89.061672 secs.
[01/31 01:45:17]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:45:17]  --------------------------------------------------------------------------------
[01/31 01:45:17]  Iteration: 140 (94 solution, 45 counterexamples)
[01/31 01:45:59]  Generator returned sat in 38.133304 secs.
[01/31 01:46:00]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:46:22]  Verifer returned unsat in 22.534251 secs.
[01/31 01:47:38]  Verifer returned unsat in 75.875411 secs.
[01/31 01:47:38]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:47:38]  --------------------------------------------------------------------------------
[01/31 01:47:38]  Iteration: 141 (95 solution, 45 counterexamples)
[01/31 01:48:21]  Generator returned sat in 38.203555 secs.
[01/31 01:48:21]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:48:51]  Verifer returned unsat in 29.969532 secs.
[01/31 01:51:40]  Verifer returned unsat in 168.230111 secs.
[01/31 01:51:40]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:51:40]  --------------------------------------------------------------------------------
[01/31 01:51:40]  Iteration: 142 (96 solution, 45 counterexamples)
[01/31 01:52:22]  Generator returned sat in 38.028125 secs.
[01/31 01:52:22]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:52:38]  Verifer returned unsat in 15.722246 secs.
[01/31 01:54:30]  Verifer returned unsat in 111.663398 secs.
[01/31 01:54:30]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:54:30]  --------------------------------------------------------------------------------
[01/31 01:54:30]  Iteration: 143 (97 solution, 45 counterexamples)
[01/31 01:58:25]  Generator returned sat in 230.896825 secs.
[01/31 01:58:25]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 01:58:55]  Verifer returned unsat in 29.216208 secs.
[01/31 02:00:01]  Verifer returned unsat in 65.736818 secs.
[01/31 02:00:01]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:00:01]  --------------------------------------------------------------------------------
[01/31 02:00:01]  Iteration: 144 (98 solution, 45 counterexamples)
[01/31 02:00:56]  Generator returned sat in 50.899248 secs.
[01/31 02:00:56]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:01:06]  Verifer returned unsat in 9.268139 secs.
[01/31 02:05:33]  Verifer returned unsat in 267.193296 secs.
[01/31 02:05:33]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:05:33]  --------------------------------------------------------------------------------
[01/31 02:05:33]  Iteration: 145 (99 solution, 45 counterexamples)
[01/31 02:06:29]  Generator returned sat in 51.550447 secs.
[01/31 02:06:29]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:06:58]  Verifer returned unsat in 28.587775 secs.
[01/31 02:07:34]  Verifer returned unsat in 35.551818 secs.
[01/31 02:07:34]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:07:34]  --------------------------------------------------------------------------------
[01/31 02:07:34]  Iteration: 146 (100 solution, 45 counterexamples)
[01/31 02:08:29]  Generator returned sat in 50.776376 secs.
[01/31 02:08:29]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:08:46]  Verifer returned unsat in 16.664337 secs.
[01/31 02:12:34]  Verifer returned unsat in 228.126763 secs.
[01/31 02:12:34]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:12:35]  --------------------------------------------------------------------------------
[01/31 02:12:35]  Iteration: 147 (101 solution, 45 counterexamples)
[01/31 02:13:29]  Generator returned sat in 50.479813 secs.
[01/31 02:13:30]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:13:59]  Verifer returned unsat in 29.343957 secs.
[01/31 02:15:06]  Verifer returned unsat in 67.107997 secs.
[01/31 02:15:06]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:15:06]  --------------------------------------------------------------------------------
[01/31 02:15:06]  Iteration: 148 (102 solution, 45 counterexamples)
[01/31 02:16:01]  Generator returned sat in 50.454598 secs.
[01/31 02:16:01]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -3/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:16:15]  Verifer returned unsat in 13.104177 secs.
[01/31 02:41:12]  Verifer returned unsat in 1496.952379 secs.
[01/31 02:41:12]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -3/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:41:12]  --------------------------------------------------------------------------------
[01/31 02:41:12]  Iteration: 149 (103 solution, 45 counterexamples)
[01/31 02:42:07]  Generator returned sat in 50.501515 secs.
[01/31 02:42:07]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 02:42:38]  Verifer returned unsat in 30.397657 secs.
[01/31 03:00:53]  Verifer returned unsat in 1095.212918 secs.
[01/31 03:00:53]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:00:53]  --------------------------------------------------------------------------------
[01/31 03:00:53]  Iteration: 150 (104 solution, 45 counterexamples)
[01/31 03:01:49]  Generator returned sat in 51.343535 secs.
[01/31 03:01:49]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:02:03]  Verifer returned unsat in 13.936622 secs.
[01/31 03:11:08]  Verifer returned unsat in 544.317666 secs.
[01/31 03:11:08]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:11:08]  --------------------------------------------------------------------------------
[01/31 03:11:08]  Iteration: 151 (105 solution, 45 counterexamples)
[01/31 03:12:30]  Generator returned sat in 77.812701 secs.
[01/31 03:12:31]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -3/2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:12:48]  Verifer returned unsat in 16.928184 secs.
[01/31 03:27:07]  Verifer returned unsat in 859.525511 secs.
[01/31 03:27:07]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -3/2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:27:08]  --------------------------------------------------------------------------------
[01/31 03:27:08]  Iteration: 152 (106 solution, 45 counterexamples)
[01/31 03:28:06]  Generator returned sat in 54.367917 secs.
[01/31 03:28:06]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:28:49]  Verifer returned unsat in 42.600135 secs.
[01/31 03:29:45]  Verifer returned unsat in 55.384668 secs.
[01/31 03:29:45]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:29:45]  --------------------------------------------------------------------------------
[01/31 03:29:45]  Iteration: 153 (107 solution, 45 counterexamples)
[01/31 03:30:40]  Generator returned sat in 51.442168 secs.
[01/31 03:30:41]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:30:54]  Verifer returned unsat in 13.476081 secs.
[01/31 03:32:26]  Verifer returned unsat in 91.655438 secs.
[01/31 03:32:26]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:32:26]  --------------------------------------------------------------------------------
[01/31 03:32:26]  Iteration: 154 (108 solution, 45 counterexamples)
[01/31 03:33:22]  Generator returned sat in 51.392189 secs.
[01/31 03:33:22]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:34:26]  Verifer returned unsat in 63.494350 secs.
[01/31 03:37:02]  Verifer returned unsat in 155.934849 secs.
[01/31 03:37:02]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:37:02]  --------------------------------------------------------------------------------
[01/31 03:37:02]  Iteration: 155 (109 solution, 45 counterexamples)
[01/31 03:37:56]  Generator returned sat in 50.231133 secs.
[01/31 03:37:57]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:38:08]  Verifer returned unsat in 11.606904 secs.
[01/31 03:38:51]  Verifer returned unsat in 41.972019 secs.
[01/31 03:38:51]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:38:51]  --------------------------------------------------------------------------------
[01/31 03:38:51]  Iteration: 156 (110 solution, 45 counterexamples)
[01/31 03:39:45]  Generator returned sat in 50.683763 secs.
[01/31 03:39:46]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:40:03]  Verifer returned unsat in 17.418548 secs.
[01/31 03:41:13]  Verifer returned unsat in 69.534833 secs.
[01/31 03:41:13]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:41:13]  --------------------------------------------------------------------------------
[01/31 03:41:13]  Iteration: 157 (111 solution, 45 counterexamples)
[01/31 03:42:07]  Generator returned sat in 50.002715 secs.
[01/31 03:42:08]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:42:29]  Verifer returned unsat in 21.156562 secs.
[01/31 03:43:35]  Verifer returned unsat in 65.304122 secs.
[01/31 03:43:35]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:43:35]  --------------------------------------------------------------------------------
[01/31 03:43:35]  Iteration: 158 (112 solution, 45 counterexamples)
[01/31 03:44:29]  Generator returned sat in 50.385265 secs.
[01/31 03:44:30]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:44:52]  Verifer returned unsat in 22.601068 secs.
[01/31 03:45:32]  Verifer returned unsat in 39.763742 secs.
[01/31 03:45:32]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:45:33]  --------------------------------------------------------------------------------
[01/31 03:45:33]  Iteration: 159 (113 solution, 45 counterexamples)
[01/31 03:46:28]  Generator returned sat in 51.895635 secs.
[01/31 03:46:29]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 03:46:44]  Verifer returned unsat in 15.145722 secs.
[01/31 04:19:26]  Verifer returned unsat in 1961.556839 secs.
[01/31 04:19:26]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -1/2min_c + -3/2max_c + 1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 04:19:26]  --------------------------------------------------------------------------------
[01/31 04:19:26]  Iteration: 160 (114 solution, 45 counterexamples)
[01/31 04:20:23]  Generator returned sat in 52.447722 secs.
[01/31 04:20:23]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 2min_c + -3/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 04:20:39]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/31 04:20:39]  Verifer returned sat in 15.863049 secs.
[01/31 04:20:39]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0         -17136.627441         -17177.627441       -17136.627441         0.994629          0.99585       -17177.627441               0.5                       0.0             100.0             100.0                  0.0     40.5          -1.0       0.0
1         -17017.127441         -17077.627441       -17017.127441       400.000000        119.50000       -17077.627441               0.5                       0.5             100.0             100.0                  0.0     60.0           1.0       0.0
2         -16897.627441         -16977.627441       -16897.627441       400.000000        119.50000       -16977.627441               0.5                       0.5             100.0             100.0                  0.0     79.5           0.0       0.0
3         -16778.127441         -16877.627441       -16778.127441       400.000000        119.50000       -16877.627441               0.5                       0.5             100.0             100.0                  0.0     99.0           0.0       0.0
4         -16658.627441         -16777.627441       -16658.627441       400.000000        119.50000       -16777.627441              19.5                       0.5             100.0             100.0                  0.0     99.5           0.0       0.0
5         -16539.127441         -16677.627441       -16539.127441       400.000000        119.50000       -16677.627441              39.0                      19.5             100.0             100.0                  0.0     99.5           1.0       0.0
6         -16419.627441         -16577.627441       -16419.627441       400.000000        119.50000       -16577.627441              58.5                      39.0             100.0             100.0                  0.0     99.5           1.0       0.0
7         -16300.127441         -16477.627441       -16300.127441       400.000000        119.50000       -16477.627441              78.0                      58.5             100.0             100.0                  0.0     99.5           1.0       0.0
8         -16180.627441         -16377.627441       -16180.627441       400.000000        119.50000       -16377.627441              97.5                      78.0             100.0             100.0                  0.0     99.5           1.0       0.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=0, loss_amount=97, beliefs_remain_consistent=True, beliefs_improve=False, alpha=39/2, buf_size=199/2, start_state=[0].[0m
[01/31 04:20:39]  --------------------------------------------------------------------------------
[01/31 04:20:39]  Iteration: 161 (114 solution, 46 counterexamples)
[01/31 04:29:32]  Generator returned sat in 528.455205 secs.
[01/31 04:29:32]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_qdel + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 04:30:03]  Verifer returned unsat in 30.936887 secs.
[01/31 04:30:42]  Verifer returned unsat in 38.633212 secs.
[01/31 04:30:42]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_qdel + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 04:30:42]  --------------------------------------------------------------------------------
[01/31 04:30:42]  Iteration: 162 (115 solution, 46 counterexamples)
[01/31 04:31:29]  Generator returned sat in 41.776189 secs.
[01/31 04:31:29]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_qdel + 1R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 04:32:10]  Verifer returned unsat in 40.141103 secs.
[01/31 04:32:53]  Improved number of small numbers from 99 to 145 out of a max of 145
[01/31 04:32:53]  Verifer returned sat in 43.186424 secs.
[01/31 04:32:53]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t  queue_t  utilized_0,t  bottle_queue_t     upper_S_t  qdelay_t
0       -12570.599854       -12920.099854     -12570.599854       0.998779       0.997803     -12920.099854             0.0                     0.0           100.0           200.0                1.0     713.192627    349.5          -1.0           249.5 -12820.099854       2.0
1       -12370.599854       -12720.099854     -12370.599854     800.000000     200.000000     -12720.099854           100.0                     0.0           100.0           200.0                2.0     713.192627    249.5           1.0           249.5 -12720.099854       3.0
2       -12320.599854       -12716.599854     -12320.599854     800.000000      50.000000     -12716.599854           100.0                   100.0           100.0           200.0                2.0     713.192627    296.0           1.0           199.5 -12620.099854       3.0
3       -12270.599854       -12520.099854     -12270.599854     800.000000      50.000000     -12520.099854           100.0                   100.0           100.0           200.0                1.0     713.192627    149.5           1.0           149.5 -12520.099854       2.0
4       -12070.599854       -12420.099854     -12070.599854     800.000000     200.000000     -12420.099854           100.0                   100.0           100.0           200.0                0.0     713.192627    249.5           0.0           249.5 -12420.099854       1.0
5       -11870.599854       -12420.099854     -11870.599854     800.000000     200.000000     -12420.099854           200.0                   100.0           100.0           200.0                0.0     713.192627    349.5           0.0           249.5 -12320.099854       1.0
6       -11670.599854       -12318.599854     -11670.599854     800.000000     200.000000     -12318.599854           300.0                   200.0           100.0           200.0                1.0     713.192627    348.0           1.0           249.5 -12220.099854       2.0
7       -11470.599854       -12170.099854     -11470.599854     800.000000     200.000000     -12170.099854           400.0                   300.0           100.0           200.0                1.0     713.192627    299.5           1.0           249.5 -12120.099854       2.0
8       -11270.599854       -12020.099854     -11270.599854     800.000000     200.000000     -12020.099854           500.0                   400.0           100.0           200.0                1.0     713.192627    249.5           1.0           249.5 -12020.099854       2.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=400, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1023/4096, buf_size=499/2, start_state=[0].[0m
[01/31 04:32:53]  --------------------------------------------------------------------------------
[01/31 04:32:53]  Iteration: 163 (115 solution, 47 counterexamples)
[01/31 04:37:26]  Generator returned sat in 268.595286 secs.
[01/31 04:37:27]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 04:38:06]  Verifer returned unsat in 38.909092 secs.
[01/31 04:39:25]  Verifer returned unsat in 78.608699 secs.
[01/31 04:39:25]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 04:39:25]  --------------------------------------------------------------------------------
[01/31 04:39:25]  Iteration: 164 (116 solution, 47 counterexamples)
[01/31 04:40:14]  Generator returned sat in 44.541262 secs.
[01/31 04:40:15]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 04:41:03]  Verifer returned unsat in 48.819028 secs.
[01/31 04:54:26]  Verifer returned unsat in 802.502051 secs.
[01/31 04:54:26]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 04:54:26]  --------------------------------------------------------------------------------
[01/31 04:54:26]  Iteration: 165 (117 solution, 47 counterexamples)
[01/31 04:55:13]  Generator returned sat in 41.947072 secs.
[01/31 04:55:13]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 04:55:24]  Verifer returned unsat in 10.482011 secs.
[01/31 05:01:29]  Verifer returned unsat in 365.029158 secs.
[01/31 05:01:29]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 3/2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 05:01:29]  --------------------------------------------------------------------------------
[01/31 05:01:29]  Iteration: 166 (118 solution, 47 counterexamples)
[01/31 05:02:16]  Generator returned sat in 41.943212 secs.
[01/31 05:02:16]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 05:03:04]  Verifer returned unsat in 48.159832 secs.
[01/31 05:35:28]  Verifer returned unsat in 1943.170889 secs.
[01/31 05:35:28]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 2max_c + -2R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 05:35:28]  --------------------------------------------------------------------------------
[01/31 05:35:28]  Iteration: 167 (119 solution, 47 counterexamples)
[01/31 05:36:13]  Generator returned sat in 41.035993 secs.
[01/31 05:36:14]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 05:36:27]  Verifer returned unsat in 13.201481 secs.
[01/31 05:41:36]  Verifer returned unsat in 308.469203 secs.
[01/31 05:41:36]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 05:41:36]  --------------------------------------------------------------------------------
[01/31 05:41:36]  Iteration: 168 (120 solution, 47 counterexamples)
[01/31 05:42:28]  Generator returned sat in 48.015746 secs.
[01/31 05:42:29]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 1max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 05:42:42]  Verifer returned unsat in 12.892764 secs.
[01/31 05:46:59]  Verifer returned unsat in 257.141376 secs.
[01/31 05:46:59]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + 1max_c + -2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 05:46:59]  --------------------------------------------------------------------------------
[01/31 05:46:59]  Iteration: 169 (121 solution, 47 counterexamples)
[01/31 05:48:00]  Generator returned sat in 56.797424 secs.
[01/31 05:48:01]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 05:48:12]  Verifer returned unsat in 11.062907 secs.
[01/31 06:08:54]  Verifer returned unsat in 1241.612541 secs.
[01/31 06:08:54]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 06:08:54]  --------------------------------------------------------------------------------
[01/31 06:08:54]  Iteration: 170 (122 solution, 47 counterexamples)
[01/31 06:09:40]  Generator returned sat in 41.780725 secs.
[01/31 06:09:40]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 06:10:07]  Verifer returned unsat in 26.663270 secs.
[01/31 06:32:06]  Verifer returned unsat in 1318.995285 secs.
[01/31 06:32:06]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 06:32:06]  --------------------------------------------------------------------------------
[01/31 06:32:06]  Iteration: 171 (123 solution, 47 counterexamples)
[01/31 06:32:53]  Generator returned sat in 42.182211 secs.
[01/31 06:32:53]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 06:33:07]  Verifer returned unsat in 13.845514 secs.
[01/31 06:48:04]  Verifer returned unsat in 896.472846 secs.
[01/31 06:48:04]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + 1/2max_c + 1R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 06:48:04]  --------------------------------------------------------------------------------
[01/31 06:48:04]  Iteration: 172 (124 solution, 47 counterexamples)
[01/31 06:50:22]  Generator returned sat in 133.611172 secs.
[01/31 06:50:22]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 3/2max_c + -1R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 06:50:30]  Improved number of small numbers from 117 to 135 out of a max of 135
[01/31 06:50:30]  Verifer returned sat in 7.079703 secs.
[01/31 06:50:30]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0         -16833.620605         -16836.604492       -16833.620605         0.994629          0.99585       -16836.604492          0.994629                  0.000000             100.0             100.0                  0.0  1.989258          -1.0       1.0
1         -16732.620605         -16736.604492       -16732.620605       400.000000        101.00000       -16736.604492          1.989258                  0.994629             100.0             100.0                  0.0  1.994629           1.0       0.0
2         -16631.620605         -16636.604492       -16631.620605       400.000000        101.00000       -16636.604492          2.989258                  1.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
3         -16530.620605         -16536.604492       -16530.620605       400.000000        101.00000       -16536.604492          3.989258                  2.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
4         -16429.620605         -16436.604492       -16429.620605       400.000000        101.00000       -16436.604492          4.989258                  3.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
5         -16328.620605         -16336.604492       -16328.620605       400.000000        101.00000       -16336.604492          5.989258                  4.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
6         -16227.620605         -16236.604492       -16227.620605       400.000000        101.00000       -16236.604492          6.989258                  5.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
7         -16126.620605         -16136.604492       -16126.620605       400.000000        101.00000       -16136.604492          7.989258                  6.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
8         -16025.620605         -16036.604492       -16025.620605       400.000000        101.00000       -16036.604492          8.989258                  7.989258             100.0             100.0                  0.0  1.994629           1.0       0.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=8, 
, large_loss_count=0, loss_amount=7, beliefs_remain_consistent=True, beliefs_improve=False, alpha=1, buf_size=4085/2048, start_state=[0].[0m
[01/31 06:50:30]  --------------------------------------------------------------------------------
[01/31 06:50:30]  Iteration: 173 (124 solution, 48 counterexamples)
[01/31 06:58:36]  Generator returned sat in 481.851096 secs.
[01/31 06:58:36]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 06:58:53]  Improved number of small numbers from 135 to 135 out of a max of 135
[01/31 06:58:53]  Verifer returned sat in 16.216290 secs.
[01/31 06:58:53]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t  queue_t  utilized_0,t  qdelay_t
0         -15066.182373         -15067.177002       -15066.182373         0.994629         0.995850       -15067.177002          0.994629                  0.000000         48.994629             100.0                  0.0      0.0          -1.0       1.0
1         -15041.685059         -15042.679688       -15041.685059       400.000000        24.497314       -15042.679688          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           1.0       0.0
2         -15017.187744         -15018.182373       -15017.187744       400.000000        24.497314       -15018.182373          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
3         -14992.690430         -14993.685059       -14992.690430       400.000000        24.497314       -14993.685059          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
4         -14968.193115         -14969.187744       -14968.193115       400.000000        24.497314       -14969.187744          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
5         -14943.695801         -14944.690430       -14943.695801       400.000000        24.497314       -14944.690430          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
6         -14919.198486         -14920.193115       -14919.198486       400.000000        24.497314       -14920.193115          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
7         -14894.701172         -14895.695801       -14894.701172       400.000000        24.497314       -14895.695801          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
8         -14870.203857         -14871.198486       -14870.203857       400.000000        24.497314       -14871.198486          0.994629                  0.994629         48.994629             100.0                  0.0      0.0           0.0       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=2037/2048, buf_size=2037/1024, start_state=[0].[0m
[01/31 06:58:53]  --------------------------------------------------------------------------------
[01/31 06:58:53]  Iteration: 174 (124 solution, 49 counterexamples)
[01/31 07:07:26]  Generator returned sat in 508.097085 secs.
[01/31 07:07:26]  Candidate solution: 
[1m[94mif (+ 2min_c + -3/2max_c + 2R + 2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_qdel > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 07:08:11]  Improved number of small numbers from 99 to 135 out of a max of 135
[01/31 07:08:11]  Verifer returned sat in 44.137987 secs.
[01/31 07:08:11]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t  ideal__min_c_0,t  ideal__max_c_0,t  ideal__min_qdel_0,t   queue_t  utilized_0,t  qdelay_t
0         -15779.259033         -15881.628662       -15779.259033         0.994629         0.995605       -15881.628662          0.994629                  0.000000            98.125        132.833333                  1.0  101.3750          -1.0       2.0
1         -15730.196533         -15781.628662       -15730.196533       531.333333        49.062500       -15781.628662          0.994629                  0.994629            98.125        132.833333                  1.0   50.4375           1.0       2.0
2         -15681.134033         -15682.128662       -15681.134033       531.333333        49.062500       -15682.128662          0.994629                  0.994629            98.125        132.833333                  0.0    0.0000           0.0       0.0
3         -15484.884033         -15582.128662       -15484.884033       531.333333       196.250000       -15582.128662          0.994629                  0.994629            98.125        132.833333                  0.0   96.2500           0.0       0.0
4         -15288.634033         -15482.128662       -15288.634033       531.333333       196.250000       -15482.128662         92.119629                  0.994629            98.125        132.833333                  0.0  101.3750           0.0       0.0
5         -15092.384033         -15382.128662       -15092.384033       531.333333       196.250000       -15382.128662        188.369629                 92.119629            98.125        132.833333                  0.0  101.3750           1.0       1.0
6         -14896.134033         -15282.128662       -14896.134033       531.333333       196.250000       -15282.128662        284.619629                188.369629            98.125        132.833333                  0.0  101.3750           1.0       1.0
7         -14699.884033         -15182.128662       -14699.884033       531.333333       196.250000       -15182.128662        380.869629                284.619629            98.125        132.833333                  0.0  101.3750           1.0       1.0
8         -14503.634033         -15082.128662       -14503.634033       531.333333       196.250000       -15082.128662        477.119629                380.869629            98.125        132.833333                  0.0  101.3750           1.0       1.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_large_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, 
, large_loss_count=5, loss_amount=3809/8, beliefs_remain_consistent=True, beliefs_improve=False, alpha=2047/4096, buf_size=811/8, start_state=[0].[0m
[01/31 07:08:11]  --------------------------------------------------------------------------------
[01/31 07:08:11]  Iteration: 175 (124 solution, 50 counterexamples)
[01/31 07:31:25]  Generator returned sat in 1389.018138 secs.
[01/31 07:31:25]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + 1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:31:39]  Verifer returned unsat in 14.111768 secs.
[01/31 07:34:46]  Verifer returned unsat in 186.378351 secs.
[01/31 07:34:46]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + 1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:34:46]  --------------------------------------------------------------------------------
[01/31 07:34:46]  Iteration: 176 (125 solution, 50 counterexamples)
[01/31 07:35:53]  Generator returned sat in 61.815385 secs.
[01/31 07:35:53]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:36:04]  Verifer returned unsat in 11.072822 secs.
[01/31 07:43:24]  Verifer returned unsat in 439.075761 secs.
[01/31 07:43:24]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:43:24]  --------------------------------------------------------------------------------
[01/31 07:43:24]  Iteration: 177 (126 solution, 50 counterexamples)
[01/31 07:44:30]  Generator returned sat in 60.855563 secs.
[01/31 07:44:30]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -1/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:45:03]  Verifer returned unsat in 32.566191 secs.
[01/31 07:47:38]  Verifer returned unsat in 155.267029 secs.
[01/31 07:47:38]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -1/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:47:38]  --------------------------------------------------------------------------------
[01/31 07:47:38]  Iteration: 178 (127 solution, 50 counterexamples)
[01/31 07:48:45]  Generator returned sat in 61.450798 secs.
[01/31 07:48:45]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:49:02]  Verifer returned unsat in 17.211972 secs.
[01/31 07:52:00]  Verifer returned unsat in 177.264488 secs.
[01/31 07:52:00]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -1max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:52:00]  --------------------------------------------------------------------------------
[01/31 07:52:00]  Iteration: 179 (128 solution, 50 counterexamples)
[01/31 07:53:06]  Generator returned sat in 61.332645 secs.
[01/31 07:53:07]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -3/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:53:45]  Verifer returned unsat in 37.662351 secs.
[01/31 07:58:00]  Verifer returned unsat in 255.359015 secs.
[01/31 07:58:00]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -3/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:58:00]  --------------------------------------------------------------------------------
[01/31 07:58:00]  Iteration: 180 (129 solution, 50 counterexamples)
[01/31 07:59:06]  Generator returned sat in 61.273621 secs.
[01/31 07:59:07]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 07:59:30]  Verifer returned unsat in 23.316255 secs.
[01/31 08:05:07]  Verifer returned unsat in 336.890830 secs.
[01/31 08:05:07]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + -2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:05:07]  --------------------------------------------------------------------------------
[01/31 08:05:07]  Iteration: 181 (130 solution, 50 counterexamples)
[01/31 08:06:13]  Generator returned sat in 61.094433 secs.
[01/31 08:06:13]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + 1/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:06:25]  Verifer returned unsat in 11.872069 secs.
[01/31 08:14:44]  Verifer returned unsat in 498.532662 secs.
[01/31 08:14:44]  Proved solution: 
[1m[92mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -2min_c + 1/2max_c + -2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:14:44]  --------------------------------------------------------------------------------
[01/31 08:14:44]  Iteration: 182 (131 solution, 50 counterexamples)
[01/31 08:15:52]  Generator returned sat in 62.897874 secs.
[01/31 08:15:53]  Candidate solution: 
[1m[94mif (+ -2min_c + 1max_c + 2R + 1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ 1min_qdel + -2R > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:16:09]  Verifer returned unsat in 16.023657 secs.
[01/31 08:17:39]  Improved gap from 0.997802734375 to 48.4375
[01/31 08:17:45]  Improved number of small numbers from 100 to 128 out of a max of 146
[01/31 08:17:45]  Verifer returned sat in 95.708482 secs.
[01/31 08:17:45]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__loss_detected_0,t  adv__min_c_0,t  adv__max_c_0,t  adv__min_qdel_0,t  adv__wasted_t    queue_t  utilized_0,t  bottle_queue_t     upper_S_t  qdelay_t
0       -11997.545450       -11997.913330     -11997.545450       0.998535       0.997559     -11997.913330             0.0                     0.0       53.676471           100.0                2.0    -197.475586   0.367880          -1.0        0.367636 -11997.913086       3.0
1       -11943.868979       -11997.545654     -11943.868979     400.000000      53.676471     -11997.545654             0.0                     0.0       53.676471           100.0                3.0    -151.519775  53.676675           1.0       -0.000083 -11943.868896       4.0
2       -11917.030744       -11943.501465     -11917.030744     400.000000      26.838235     -11943.501465             0.0                     0.0       53.676471           100.0                0.0    -100.324707  26.470721           0.0      -21.966779 -11895.063965       0.0
3       -11863.354273       -11895.063965     -11863.354273     400.000000      53.676471     -11895.063965             0.0                     0.0       53.676471           100.0                0.0     -48.762207  31.709692           0.0      -16.727808 -11846.626465       0.0
4       -11809.677803       -11846.626465     -11809.677803     400.000000      53.676471     -11846.626465             0.0                     0.0       53.676471           100.0                0.0       2.800293  36.948662           0.0      -11.488838 -11798.188965       0.0
5       -11756.001332       -11798.188965     -11756.001332     400.000000      53.676471     -11798.188965             0.0                     0.0       53.676471           100.0                0.0      54.362793  42.187633           0.0       -6.249867 -11749.751465       0.0
6       -11702.324861       -11749.751465     -11702.324861     400.000000      53.676471     -11749.751465             0.0                     0.0       53.676471           100.0                0.0     105.925049  47.426603           0.0       -1.011141 -11701.313721       0.0
7       -11648.648391       -11701.313721     -11648.648391     400.000000      53.676471     -11701.313721             0.0                     0.0       53.676471           100.0                0.0     153.259521  52.665330           0.0       -0.000198 -11648.648193       0.0
8       -11594.971920       -11648.280762     -11594.971920     400.000000      53.676471     -11648.280762             0.0                     0.0       53.676471           100.0                0.0     153.259521  53.308841           0.0      -46.323727 -11548.648193       0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, 
, large_loss_count=0, loss_amount=0, beliefs_remain_consistent=True, beliefs_improve=False, alpha=91/17, buf_size=300, start_state=[0].[0m
[01/31 08:17:45]  --------------------------------------------------------------------------------
[01/31 08:17:45]  Iteration: 183 (131 solution, 51 counterexamples)
[01/31 08:22:44]  Generator returned sat in 294.424076 secs.
[01/31 08:22:45]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:22:54]  Verifer returned unsat in 9.410667 secs.
[01/31 08:27:43]  Verifer returned unsat in 288.705642 secs.
[01/31 08:27:43]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:27:43]  --------------------------------------------------------------------------------
[01/31 08:27:43]  Iteration: 184 (132 solution, 51 counterexamples)
[01/31 08:28:52]  Generator returned sat in 64.638995 secs.
[01/31 08:28:53]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:29:04]  Verifer returned unsat in 10.796078 secs.
[01/31 08:30:46]  Verifer returned unsat in 102.000605 secs.
[01/31 08:30:46]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:30:46]  --------------------------------------------------------------------------------
[01/31 08:30:46]  Iteration: 185 (133 solution, 51 counterexamples)
[01/31 08:31:56]  Generator returned sat in 65.184542 secs.
[01/31 08:31:56]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:32:15]  Verifer returned unsat in 18.089511 secs.
[01/31 08:33:18]  Verifer returned unsat in 63.408800 secs.
[01/31 08:33:18]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1/2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:33:19]  --------------------------------------------------------------------------------
[01/31 08:33:19]  Iteration: 186 (134 solution, 51 counterexamples)
[01/31 08:34:27]  Generator returned sat in 64.293893 secs.
[01/31 08:34:28]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:35:03]  Verifer returned unsat in 34.833425 secs.
[01/31 08:36:11]  Verifer returned unsat in 67.376797 secs.
[01/31 08:36:11]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:36:11]  --------------------------------------------------------------------------------
[01/31 08:36:11]  Iteration: 187 (135 solution, 51 counterexamples)
[01/31 08:37:19]  Generator returned sat in 63.917908 secs.
[01/31 08:37:20]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:37:51]  Verifer returned unsat in 30.647299 secs.
[01/31 08:39:20]  Verifer returned unsat in 89.273251 secs.
[01/31 08:39:20]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:39:20]  --------------------------------------------------------------------------------
[01/31 08:39:20]  Iteration: 188 (136 solution, 51 counterexamples)
[01/31 08:40:30]  Generator returned sat in 64.968074 secs.
[01/31 08:40:30]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:40:47]  Verifer returned unsat in 16.084451 secs.
[01/31 08:41:56]  Verifer returned unsat in 69.619447 secs.
[01/31 08:41:57]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:41:57]  --------------------------------------------------------------------------------
[01/31 08:41:57]  Iteration: 189 (137 solution, 51 counterexamples)
[01/31 08:43:06]  Generator returned sat in 64.848148 secs.
[01/31 08:43:07]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:43:32]  Verifer returned unsat in 25.403857 secs.
[01/31 08:47:04]  Verifer returned unsat in 211.786141 secs.
[01/31 08:47:05]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:47:05]  --------------------------------------------------------------------------------
[01/31 08:47:05]  Iteration: 190 (138 solution, 51 counterexamples)
[01/31 08:48:14]  Generator returned sat in 64.615543 secs.
[01/31 08:48:15]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:48:41]  Verifer returned unsat in 26.497675 secs.
[01/31 08:58:50]  Verifer returned unsat in 608.783792 secs.
[01/31 08:58:50]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 08:58:51]  --------------------------------------------------------------------------------
[01/31 08:58:51]  Iteration: 191 (139 solution, 51 counterexamples)
[01/31 09:00:00]  Generator returned sat in 64.320749 secs.
[01/31 09:00:00]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 09:00:13]  Verifer returned unsat in 12.757560 secs.
[01/31 09:01:55]  Verifer returned unsat in 102.102566 secs.
[01/31 09:01:55]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + -2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 09:01:56]  --------------------------------------------------------------------------------
[01/31 09:01:56]  Iteration: 192 (140 solution, 51 counterexamples)
[01/31 09:03:04]  Generator returned sat in 64.056624 secs.
[01/31 09:03:05]  Candidate solution: 
[1m[94mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 09:03:31]  Verifer returned unsat in 25.830127 secs.
[01/31 09:04:30]  Verifer returned unsat in 59.253543 secs.
[01/31 09:04:30]  Proved solution: 
[1m[92mif (+ -1min_c + 1/2max_c + 2R > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
elif (+ -3/2min_c + 1/2max_c + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 09:04:30]  --------------------------------------------------------------------------------
[01/31 09:04:30]  Iteration: 193 (141 solution, 51 counterexamples)
[01/31 09:08:49]  Generator returned sat in 254.228350 secs.
[01/31 09:08:50]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:09:19]  Verifer returned unsat in 29.257022 secs.
[01/31 09:10:09]  Verifer returned unsat in 50.236063 secs.
[01/31 09:10:10]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:10:10]  --------------------------------------------------------------------------------
[01/31 09:10:10]  Iteration: 194 (142 solution, 51 counterexamples)
[01/31 09:11:02]  Generator returned sat in 48.220968 secs.
[01/31 09:11:03]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:11:15]  Verifer returned unsat in 11.666547 secs.
[01/31 09:12:31]  Verifer returned unsat in 76.522006 secs.
[01/31 09:12:32]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:12:32]  --------------------------------------------------------------------------------
[01/31 09:12:32]  Iteration: 195 (143 solution, 51 counterexamples)
[01/31 09:13:24]  Generator returned sat in 47.544574 secs.
[01/31 09:13:24]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:13:49]  Verifer returned unsat in 25.030555 secs.
[01/31 09:16:49]  Verifer returned unsat in 179.580071 secs.
[01/31 09:16:49]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:16:49]  --------------------------------------------------------------------------------
[01/31 09:16:49]  Iteration: 196 (144 solution, 51 counterexamples)
[01/31 09:17:42]  Generator returned sat in 47.633773 secs.
[01/31 09:17:42]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:17:56]  Verifer returned unsat in 14.326756 secs.
[01/31 09:18:21]  Verifer returned unsat in 24.713425 secs.
[01/31 09:18:21]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:18:22]  --------------------------------------------------------------------------------
[01/31 09:18:22]  Iteration: 197 (145 solution, 51 counterexamples)
[01/31 09:19:14]  Generator returned sat in 47.547018 secs.
[01/31 09:19:14]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:19:38]  Verifer returned unsat in 23.517390 secs.
[01/31 09:22:17]  Verifer returned unsat in 159.039457 secs.
[01/31 09:22:17]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1/2min_c)[0m
[01/31 09:22:17]  --------------------------------------------------------------------------------
[01/31 09:22:17]  Iteration: 198 (146 solution, 51 counterexamples)
[01/31 09:23:09]  Generator returned sat in 47.621557 secs.
[01/31 09:23:10]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:23:29]  Verifer returned unsat in 19.447677 secs.
[01/31 09:44:10]  Verifer returned unsat in 1240.108330 secs.
[01/31 09:44:10]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:44:10]  --------------------------------------------------------------------------------
[01/31 09:44:10]  Iteration: 199 (147 solution, 51 counterexamples)
[01/31 09:45:02]  Generator returned sat in 47.190663 secs.
[01/31 09:45:02]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 09:45:23]  Verifer returned unsat in 20.083475 secs.
[01/31 09:46:14]  Verifer returned unsat in 51.581834 secs.
[01/31 09:46:14]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 09:46:15]  --------------------------------------------------------------------------------
[01/31 09:46:15]  Iteration: 200 (148 solution, 51 counterexamples)
[01/31 09:47:07]  Generator returned sat in 47.460652 secs.
[01/31 09:47:07]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:47:33]  Verifer returned unsat in 25.828432 secs.
[01/31 09:49:05]  Verifer returned unsat in 92.115831 secs.
[01/31 09:49:06]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:49:06]  --------------------------------------------------------------------------------
[01/31 09:49:06]  Iteration: 201 (149 solution, 51 counterexamples)
[01/31 09:49:57]  Generator returned sat in 47.092117 secs.
[01/31 09:49:58]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:50:11]  Verifer returned unsat in 13.031207 secs.
[01/31 09:54:37]  Verifer returned unsat in 266.079695 secs.
[01/31 09:54:37]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:54:37]  --------------------------------------------------------------------------------
[01/31 09:54:37]  Iteration: 202 (150 solution, 51 counterexamples)
[01/31 09:55:29]  Generator returned sat in 47.025664 secs.
[01/31 09:55:30]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:55:54]  Verifer returned unsat in 24.456376 secs.
[01/31 09:58:51]  Verifer returned unsat in 176.641341 secs.
[01/31 09:58:51]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 09:58:51]  --------------------------------------------------------------------------------
[01/31 09:58:51]  Iteration: 203 (151 solution, 51 counterexamples)
[01/31 09:59:43]  Generator returned sat in 47.309905 secs.
[01/31 09:59:44]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 09:59:56]  Verifer returned unsat in 12.011160 secs.
[01/31 10:01:20]  Verifer returned unsat in 84.198154 secs.
[01/31 10:01:20]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 10:01:20]  --------------------------------------------------------------------------------
[01/31 10:01:20]  Iteration: 204 (152 solution, 51 counterexamples)
[01/31 10:02:12]  Generator returned sat in 47.482519 secs.
[01/31 10:02:13]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 10:02:47]  Verifer returned unsat in 34.135562 secs.
[01/31 10:38:24]  Verifer returned unsat in 2136.971260 secs.
[01/31 10:38:24]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 10:38:24]  --------------------------------------------------------------------------------
[01/31 10:38:24]  Iteration: 205 (153 solution, 51 counterexamples)
[01/31 10:39:16]  Generator returned sat in 46.820471 secs.
[01/31 10:39:16]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 10:39:30]  Verifer returned unsat in 13.871531 secs.
[01/31 10:55:12]  Verifer returned unsat in 941.482764 secs.
[01/31 10:55:12]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 10:55:12]  --------------------------------------------------------------------------------
[01/31 10:55:12]  Iteration: 206 (154 solution, 51 counterexamples)
[01/31 10:56:04]  Generator returned sat in 47.114482 secs.
[01/31 10:56:04]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 10:56:15]  Verifer returned unsat in 10.900596 secs.
[01/31 11:00:02]  Verifer returned unsat in 226.177237 secs.
[01/31 11:00:02]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:00:02]  --------------------------------------------------------------------------------
[01/31 11:00:02]  Iteration: 207 (155 solution, 51 counterexamples)
[01/31 11:00:53]  Generator returned sat in 46.941222 secs.
[01/31 11:00:54]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:01:05]  Verifer returned unsat in 10.972735 secs.
[01/31 11:01:51]  Verifer returned unsat in 45.939714 secs.
[01/31 11:01:51]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:01:51]  --------------------------------------------------------------------------------
[01/31 11:01:51]  Iteration: 208 (156 solution, 51 counterexamples)
[01/31 11:02:44]  Generator returned sat in 47.631275 secs.
[01/31 11:02:44]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:03:03]  Verifer returned unsat in 19.023057 secs.
[01/31 11:14:06]  Verifer returned unsat in 662.260611 secs.
[01/31 11:14:06]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 3/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:14:06]  --------------------------------------------------------------------------------
[01/31 11:14:06]  Iteration: 209 (157 solution, 51 counterexamples)
[01/31 11:14:58]  Generator returned sat in 47.266324 secs.
[01/31 11:14:59]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 11:15:15]  Verifer returned unsat in 16.193541 secs.
[01/31 11:15:53]  Verifer returned unsat in 38.013201 secs.
[01/31 11:15:53]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)[0m
[01/31 11:15:53]  --------------------------------------------------------------------------------
[01/31 11:15:53]  Iteration: 210 (158 solution, 51 counterexamples)
[01/31 11:16:45]  Generator returned sat in 47.134373 secs.
[01/31 11:16:46]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 11:16:58]  Verifer returned unsat in 12.441434 secs.
[01/31 11:22:14]  Verifer returned unsat in 315.304584 secs.
[01/31 11:22:14]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)[0m
[01/31 11:22:14]  --------------------------------------------------------------------------------
[01/31 11:22:14]  Iteration: 211 (159 solution, 51 counterexamples)
[01/31 11:23:06]  Generator returned sat in 47.252103 secs.
[01/31 11:23:06]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:23:17]  Verifer returned unsat in 10.567072 secs.
[01/31 11:27:21]  Verifer returned unsat in 244.160115 secs.
[01/31 11:27:22]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:27:22]  --------------------------------------------------------------------------------
[01/31 11:27:22]  Iteration: 212 (160 solution, 51 counterexamples)
[01/31 11:28:13]  Generator returned sat in 47.116864 secs.
[01/31 11:28:14]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:28:28]  Verifer returned unsat in 14.130142 secs.
[01/31 11:29:33]  Verifer returned unsat in 64.888689 secs.
[01/31 11:29:33]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1/2max_c + 1R + -1alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 1min_c)[0m
[01/31 11:29:33]  --------------------------------------------------------------------------------
[01/31 11:29:33]  Iteration: 213 (161 solution, 51 counterexamples)
[01/31 11:30:34]  Generator returned sat in 55.642529 secs.
[01/31 11:30:34]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:30:52]  Verifer returned unsat in 18.257889 secs.
[01/31 11:34:06]  Verifer returned unsat in 192.998477 secs.
[01/31 11:34:06]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:34:06]  --------------------------------------------------------------------------------
[01/31 11:34:06]  Iteration: 214 (162 solution, 51 counterexamples)
[01/31 11:34:59]  Generator returned sat in 48.673551 secs.
[01/31 11:35:00]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:35:25]  Verifer returned unsat in 25.253564 secs.
[01/31 11:39:33]  Verifer returned unsat in 247.480972 secs.
[01/31 11:39:33]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 2min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:39:33]  --------------------------------------------------------------------------------
[01/31 11:39:33]  Iteration: 215 (163 solution, 51 counterexamples)
[01/31 11:40:28]  Generator returned sat in 50.018160 secs.
[01/31 11:40:28]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:41:04]  Verifer returned unsat in 36.055874 secs.
[01/31 11:41:50]  Verifer returned unsat in 45.815775 secs.
[01/31 11:41:51]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:41:51]  --------------------------------------------------------------------------------
[01/31 11:41:51]  Iteration: 216 (164 solution, 51 counterexamples)
[01/31 11:42:46]  Generator returned sat in 50.343676 secs.
[01/31 11:42:46]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:43:06]  Verifer returned unsat in 19.272769 secs.
[01/31 11:43:56]  Verifer returned unsat in 49.771045 secs.
[01/31 11:43:56]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:43:56]  --------------------------------------------------------------------------------
[01/31 11:43:56]  Iteration: 217 (165 solution, 51 counterexamples)
[01/31 11:44:50]  Generator returned sat in 49.634933 secs.
[01/31 11:44:51]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:45:14]  Verifer returned unsat in 23.359636 secs.
[01/31 11:49:02]  Verifer returned unsat in 227.848562 secs.
[01/31 11:49:03]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:49:03]  --------------------------------------------------------------------------------
[01/31 11:49:03]  Iteration: 218 (166 solution, 51 counterexamples)
[01/31 11:49:57]  Generator returned sat in 49.643110 secs.
[01/31 11:49:58]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:50:10]  Verifer returned unsat in 12.753294 secs.
[01/31 11:54:17]  Verifer returned unsat in 246.243065 secs.
[01/31 11:54:17]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:54:17]  --------------------------------------------------------------------------------
[01/31 11:54:17]  Iteration: 219 (167 solution, 51 counterexamples)
[01/31 11:55:11]  Generator returned sat in 49.501265 secs.
[01/31 11:55:12]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 11:55:41]  Verifer returned unsat in 29.142709 secs.
[01/31 12:00:04]  Verifer returned unsat in 262.157485 secs.
[01/31 12:00:04]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:00:04]  --------------------------------------------------------------------------------
[01/31 12:00:04]  Iteration: 220 (168 solution, 51 counterexamples)
[01/31 12:00:58]  Generator returned sat in 49.608464 secs.
[01/31 12:00:59]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:01:12]  Verifer returned unsat in 12.797779 secs.
[01/31 12:18:34]  Verifer returned unsat in 1041.578421 secs.
[01/31 12:18:34]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:18:34]  --------------------------------------------------------------------------------
[01/31 12:18:34]  Iteration: 221 (169 solution, 51 counterexamples)
[01/31 12:19:27]  Generator returned sat in 49.054372 secs.
[01/31 12:19:28]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:19:47]  Verifer returned unsat in 19.054964 secs.
[01/31 12:32:45]  Verifer returned unsat in 777.732466 secs.
[01/31 12:32:45]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:32:45]  --------------------------------------------------------------------------------
[01/31 12:32:45]  Iteration: 222 (170 solution, 51 counterexamples)
[01/31 12:33:39]  Generator returned sat in 49.505809 secs.
[01/31 12:33:40]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:34:11]  Verifer returned unsat in 30.772897 secs.
[01/31 12:35:41]  Verifer returned unsat in 89.862769 secs.
[01/31 12:35:41]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:35:41]  --------------------------------------------------------------------------------
[01/31 12:35:41]  Iteration: 223 (171 solution, 51 counterexamples)
[01/31 12:36:35]  Generator returned sat in 49.126616 secs.
[01/31 12:36:35]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:36:57]  Verifer returned unsat in 21.375968 secs.
[01/31 12:40:23]  Verifer returned unsat in 206.340102 secs.
[01/31 12:40:24]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:40:24]  --------------------------------------------------------------------------------
[01/31 12:40:24]  Iteration: 224 (172 solution, 51 counterexamples)
[01/31 12:41:17]  Generator returned sat in 49.248113 secs.
[01/31 12:41:18]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 12:41:30]  Verifer returned unsat in 12.211149 secs.
[01/31 13:01:41]  Verifer returned unsat in 1210.456619 secs.
[01/31 13:01:41]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:01:41]  --------------------------------------------------------------------------------
[01/31 13:01:41]  Iteration: 225 (173 solution, 51 counterexamples)
[01/31 13:02:35]  Generator returned sat in 49.323526 secs.
[01/31 13:02:36]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:02:49]  Verifer returned unsat in 13.546967 secs.
[01/31 13:12:21]  Verifer returned unsat in 571.415383 secs.
[01/31 13:12:21]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:12:21]  --------------------------------------------------------------------------------
[01/31 13:12:21]  Iteration: 226 (174 solution, 51 counterexamples)
[01/31 13:13:16]  Generator returned sat in 49.702209 secs.
[01/31 13:13:16]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:13:40]  Verifer returned unsat in 22.947093 secs.
[01/31 13:14:37]  Verifer returned unsat in 57.685959 secs.
[01/31 13:14:38]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:14:38]  --------------------------------------------------------------------------------
[01/31 13:14:38]  Iteration: 227 (175 solution, 51 counterexamples)
[01/31 13:15:32]  Generator returned sat in 49.906925 secs.
[01/31 13:15:33]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:15:48]  Verifer returned unsat in 14.799088 secs.
[01/31 13:19:20]  Verifer returned unsat in 212.397253 secs.
[01/31 13:19:21]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:19:21]  --------------------------------------------------------------------------------
[01/31 13:19:21]  Iteration: 228 (176 solution, 51 counterexamples)
[01/31 13:20:15]  Generator returned sat in 49.703455 secs.
[01/31 13:20:16]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:20:47]  Verifer returned unsat in 30.535561 secs.
[01/31 13:21:23]  Verifer returned unsat in 36.011348 secs.
[01/31 13:21:23]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:21:23]  --------------------------------------------------------------------------------
[01/31 13:21:23]  Iteration: 229 (177 solution, 51 counterexamples)
[01/31 13:22:18]  Generator returned sat in 50.205403 secs.
[01/31 13:22:19]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:22:40]  Verifer returned unsat in 20.985830 secs.
[01/31 13:47:21]  Verifer returned unsat in 1481.428732 secs.
[01/31 13:47:22]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:47:22]  --------------------------------------------------------------------------------
[01/31 13:47:22]  Iteration: 230 (178 solution, 51 counterexamples)
[01/31 13:48:17]  Generator returned sat in 50.932923 secs.
[01/31 13:48:18]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:48:30]  Verifer returned unsat in 11.928114 secs.
[01/31 13:49:36]  Verifer returned unsat in 66.317439 secs.
[01/31 13:49:37]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:49:37]  --------------------------------------------------------------------------------
[01/31 13:49:37]  Iteration: 231 (179 solution, 51 counterexamples)
[01/31 13:50:31]  Generator returned sat in 49.574914 secs.
[01/31 13:50:31]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:51:02]  Verifer returned unsat in 30.707733 secs.
[01/31 13:51:55]  Verifer returned unsat in 52.507486 secs.
[01/31 13:51:55]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:51:55]  --------------------------------------------------------------------------------
[01/31 13:51:55]  Iteration: 232 (180 solution, 51 counterexamples)
[01/31 13:52:49]  Generator returned sat in 49.431096 secs.
[01/31 13:52:50]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 13:53:01]  Verifer returned unsat in 11.004146 secs.
[01/31 14:08:45]  Verifer returned unsat in 944.171094 secs.
[01/31 14:08:46]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:08:46]  --------------------------------------------------------------------------------
[01/31 14:08:46]  Iteration: 233 (181 solution, 51 counterexamples)
[01/31 14:09:40]  Generator returned sat in 49.129865 secs.
[01/31 14:09:40]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:10:00]  Verifer returned unsat in 19.886489 secs.
[01/31 14:13:44]  Verifer returned unsat in 223.433574 secs.
[01/31 14:13:44]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:13:44]  --------------------------------------------------------------------------------
[01/31 14:13:44]  Iteration: 234 (182 solution, 51 counterexamples)
[01/31 14:14:41]  Generator returned sat in 51.275961 secs.
[01/31 14:14:41]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:15:09]  Verifer returned unsat in 28.205399 secs.
[01/31 14:16:11]  Verifer returned unsat in 61.288445 secs.
[01/31 14:16:11]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:16:11]  --------------------------------------------------------------------------------
[01/31 14:16:11]  Iteration: 235 (183 solution, 51 counterexamples)
[01/31 14:17:08]  Generator returned sat in 51.159190 secs.
[01/31 14:17:08]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:17:57]  Verifer returned unsat in 48.197479 secs.
[01/31 14:20:39]  Verifer returned unsat in 162.267334 secs.
[01/31 14:20:39]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:20:39]  --------------------------------------------------------------------------------
[01/31 14:20:39]  Iteration: 236 (184 solution, 51 counterexamples)
[01/31 14:21:36]  Generator returned sat in 51.287639 secs.
[01/31 14:21:36]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:21:53]  Verifer returned unsat in 16.917832 secs.
[01/31 14:23:24]  Verifer returned unsat in 90.377821 secs.
[01/31 14:23:24]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:23:24]  --------------------------------------------------------------------------------
[01/31 14:23:24]  Iteration: 237 (185 solution, 51 counterexamples)
[01/31 14:24:18]  Generator returned sat in 49.154380 secs.
[01/31 14:24:19]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:24:37]  Verifer returned unsat in 18.635193 secs.
[01/31 14:28:12]  Verifer returned unsat in 214.627513 secs.
[01/31 14:28:12]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:28:13]  --------------------------------------------------------------------------------
[01/31 14:28:13]  Iteration: 238 (186 solution, 51 counterexamples)
[01/31 14:29:06]  Generator returned sat in 48.909923 secs.
[01/31 14:29:07]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:29:26]  Verifer returned unsat in 19.063180 secs.
[01/31 14:45:13]  Verifer returned unsat in 946.839073 secs.
[01/31 14:45:13]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:45:13]  --------------------------------------------------------------------------------
[01/31 14:45:13]  Iteration: 239 (187 solution, 51 counterexamples)
[01/31 14:46:07]  Generator returned sat in 49.413679 secs.
[01/31 14:46:08]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:46:27]  Verifer returned unsat in 18.867146 secs.
[01/31 14:48:06]  Verifer returned unsat in 99.196419 secs.
[01/31 14:48:06]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:48:07]  --------------------------------------------------------------------------------
[01/31 14:48:07]  Iteration: 240 (188 solution, 51 counterexamples)
[01/31 14:49:01]  Generator returned sat in 49.418297 secs.
[01/31 14:49:01]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:49:21]  Verifer returned unsat in 19.137015 secs.
[01/31 14:50:38]  Verifer returned unsat in 77.144319 secs.
[01/31 14:50:38]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:50:38]  --------------------------------------------------------------------------------
[01/31 14:50:38]  Iteration: 241 (189 solution, 51 counterexamples)
[01/31 14:51:32]  Generator returned sat in 48.995296 secs.
[01/31 14:51:32]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:51:54]  Verifer returned unsat in 21.485281 secs.
[01/31 14:52:41]  Verifer returned unsat in 46.683209 secs.
[01/31 14:52:41]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:52:41]  --------------------------------------------------------------------------------
[01/31 14:52:41]  Iteration: 242 (190 solution, 51 counterexamples)
[01/31 14:53:35]  Generator returned sat in 49.105811 secs.
[01/31 14:53:36]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:54:25]  Verifer returned unsat in 49.526463 secs.
[01/31 14:57:02]  Verifer returned unsat in 156.720938 secs.
[01/31 14:57:02]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:57:03]  --------------------------------------------------------------------------------
[01/31 14:57:03]  Iteration: 243 (191 solution, 51 counterexamples)
[01/31 14:57:56]  Generator returned sat in 48.963879 secs.
[01/31 14:57:57]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 14:58:21]  Verifer returned unsat in 23.826874 secs.
[01/31 15:01:14]  Verifer returned unsat in 172.919098 secs.
[01/31 15:01:14]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:01:14]  --------------------------------------------------------------------------------
[01/31 15:01:14]  Iteration: 244 (192 solution, 51 counterexamples)
[01/31 15:02:07]  Generator returned sat in 48.492996 secs.
[01/31 15:02:08]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:03:04]  Verifer returned unsat in 56.155888 secs.
[01/31 15:24:43]  Verifer returned unsat in 1298.630033 secs.
[01/31 15:24:43]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:24:43]  --------------------------------------------------------------------------------
[01/31 15:24:43]  Iteration: 245 (193 solution, 51 counterexamples)
[01/31 15:25:38]  Generator returned sat in 49.321828 secs.
[01/31 15:25:38]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:26:05]  Verifer returned unsat in 26.896707 secs.
[01/31 15:42:58]  Verifer returned unsat in 1012.309386 secs.
[01/31 15:42:58]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:42:58]  --------------------------------------------------------------------------------
[01/31 15:42:58]  Iteration: 246 (194 solution, 51 counterexamples)
[01/31 15:43:53]  Generator returned sat in 49.747009 secs.
[01/31 15:43:53]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:44:08]  Verifer returned unsat in 14.741879 secs.
[01/31 15:47:02]  Verifer returned unsat in 173.330345 secs.
[01/31 15:47:02]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:47:02]  --------------------------------------------------------------------------------
[01/31 15:47:02]  Iteration: 247 (195 solution, 51 counterexamples)
[01/31 15:47:57]  Generator returned sat in 49.743213 secs.
[01/31 15:47:57]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:48:21]  Verifer returned unsat in 23.323159 secs.
[01/31 15:49:06]  Verifer returned unsat in 44.757731 secs.
[01/31 15:49:06]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:49:06]  --------------------------------------------------------------------------------
[01/31 15:49:06]  Iteration: 248 (196 solution, 51 counterexamples)
[01/31 15:50:01]  Generator returned sat in 50.018966 secs.
[01/31 15:50:01]  Candidate solution: 
[1m[94mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:54:02]  Verifer returned unsat in 241.006601 secs.
[01/31 15:55:08]  Verifer returned unsat in 64.709387 secs.
[01/31 15:55:08]  Proved solution: 
[1m[92mif (+ 2min_c + -1max_c + -2R > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ 1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + 1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:55:08]  --------------------------------------------------------------------------------
[01/31 15:55:08]  Iteration: 249 (197 solution, 51 counterexamples)
[01/31 15:56:11]  Generator returned sat in 58.412237 secs.
[01/31 15:56:11]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:56:33]  Verifer returned unsat in 20.976119 secs.
[01/31 15:57:26]  Verifer returned unsat in 53.321209 secs.
[01/31 15:57:26]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:57:26]  --------------------------------------------------------------------------------
[01/31 15:57:26]  Iteration: 250 (198 solution, 51 counterexamples)
[01/31 15:58:21]  Generator returned sat in 49.517689 secs.
[01/31 15:58:21]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 15:58:46]  Verifer returned unsat in 24.867059 secs.
[01/31 16:00:35]  Verifer returned unsat in 108.564420 secs.
[01/31 16:00:35]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:00:35]  --------------------------------------------------------------------------------
[01/31 16:00:35]  Iteration: 251 (199 solution, 51 counterexamples)
[01/31 16:01:29]  Generator returned sat in 49.300520 secs.
[01/31 16:01:30]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:01:43]  Verifer returned unsat in 13.562371 secs.
[01/31 16:08:23]  Verifer returned unsat in 399.283067 secs.
[01/31 16:08:23]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:08:23]  --------------------------------------------------------------------------------
[01/31 16:08:23]  Iteration: 252 (200 solution, 51 counterexamples)
[01/31 16:09:18]  Generator returned sat in 49.950669 secs.
[01/31 16:09:19]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:09:34]  Verifer returned unsat in 15.395128 secs.
[01/31 16:22:59]  Verifer returned unsat in 804.921647 secs.
[01/31 16:23:00]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:23:00]  --------------------------------------------------------------------------------
[01/31 16:23:00]  Iteration: 253 (201 solution, 51 counterexamples)
[01/31 16:23:55]  Generator returned sat in 50.451202 secs.
[01/31 16:23:56]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:24:23]  Verifer returned unsat in 27.317815 secs.
[01/31 16:26:24]  Verifer returned unsat in 120.906806 secs.
[01/31 16:26:24]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:26:24]  --------------------------------------------------------------------------------
[01/31 16:26:24]  Iteration: 254 (202 solution, 51 counterexamples)
[01/31 16:27:19]  Generator returned sat in 50.183380 secs.
[01/31 16:27:20]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:27:39]  Verifer returned unsat in 19.261249 secs.
[01/31 16:28:59]  Verifer returned unsat in 79.087774 secs.
[01/31 16:28:59]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:28:59]  --------------------------------------------------------------------------------
[01/31 16:28:59]  Iteration: 255 (203 solution, 51 counterexamples)
[01/31 16:29:54]  Generator returned sat in 49.982825 secs.
[01/31 16:29:54]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:30:17]  Verifer returned unsat in 22.527938 secs.
[01/31 16:34:45]  Verifer returned unsat in 267.241326 secs.
[01/31 16:34:45]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:34:45]  --------------------------------------------------------------------------------
[01/31 16:34:45]  Iteration: 256 (204 solution, 51 counterexamples)
[01/31 16:35:40]  Generator returned sat in 50.691067 secs.
[01/31 16:35:41]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:35:57]  Verifer returned unsat in 15.660447 secs.
[01/31 16:55:13]  Verifer returned unsat in 1155.722579 secs.
[01/31 16:55:13]  Proved solution: 
[1m[92mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -3/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:55:13]  --------------------------------------------------------------------------------
[01/31 16:55:13]  Iteration: 257 (205 solution, 51 counterexamples)
[01/31 16:56:09]  Generator returned sat in 50.565194 secs.
[01/31 16:56:09]  Candidate solution: 
[1m[94mif (+ 1min_c + -1/2max_c > 0):
    r_f[n][t] = max(alpha,  + 1min_c)
elif (+ -1/2min_c + -2max_c + 1R + -2alpha > 0):
    r_f[n][t] = max(alpha,  + 1min_c + -1alpha)
else:
    r_f[n][t] = max(alpha,  + 2min_c)[0m
[01/31 16:56:35]  Verifer returned unsat in 25.361515 secs.
