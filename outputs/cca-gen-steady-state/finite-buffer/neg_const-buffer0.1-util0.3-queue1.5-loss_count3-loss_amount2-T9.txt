[08/30 10:49:01]  --------------------------------------------------------------------------------
[08/30 10:49:01]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 10:49:01]  Generator returned sat in 0.006782 secs.
[08/30 10:49:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:02]  Improved gap from 0.1 to 100
[08/30 10:49:02]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:49:02]  Verifer returned sat in 0.279816 secs.
[08/30 10:49:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0        1775.11        1775.01  -1775.01      1775.11      0.10      1775.01        0.0      0.1            0.10
1        1875.01        1874.91  -1775.01      1875.01    100.00      1874.91        0.0      0.1            0.00
2        1965.76        1965.66  -1775.01      1965.76     90.85      1965.66        0.0      0.1           -9.25
3        1975.11        1975.01  -1775.01      1975.11      9.45      1975.01        0.0      0.1          -99.90
4        2194.91        2075.01  -1775.01      2194.91    219.90      2075.01        0.0    119.9           19.90
5        2715.91        2275.01  -1775.01      2715.91    640.90      2275.01      420.9     20.0           20.00
6        4597.41        2275.01  -1775.01      4597.41   1901.50      2275.01     2202.4    120.0           20.00
7        8881.41        2475.01  -1775.01      8881.41   4404.00      2475.01     6386.4     20.0           20.00
8       18470.41        2475.01  -1775.01     18470.41   9609.00      2475.01    15875.4    120.0           20.00
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=79377/5.[0m
[08/30 10:49:02]  --------------------------------------------------------------------------------
[08/30 10:49:02]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 10:49:02]  Generator returned sat in 0.034218 secs.
[08/30 10:49:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:02]  Improved number of small numbers from 84 to 99 out of a max of 99
[08/30 10:49:02]  Verifer returned sat in 0.227497 secs.
[08/30 10:49:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    1795.009766    1775.010010 -1775.010254  1795.009766     0.099609  1775.010010     0.000000   19.999756       19.999512
1    1875.009766    1853.910156 -1775.010010  1875.009766    99.999756  1853.910156     0.000000   21.099609       -0.000244
2    1965.759521    1875.010010 -1775.010010  1965.759521   111.849365  1875.010010     0.000000   90.749512       -9.250488
3    4018.210205    1985.559814 -1775.010010  4018.210205  2143.200195  1985.559814  1923.200195  109.450195       20.000000
4    4118.309814    2075.010010 -1775.010010  4118.309814   209.549805  2075.010010  1923.299805  120.000000       20.000000
5    4218.409668    2275.010010 -1775.010010  4218.409668   220.099854  2275.010010  1923.399658   20.000000       20.000000
6    4597.409668    2375.010010 -1775.010010  4597.409668   399.000000  2375.010010  2202.399658   20.000000       20.000000
7    4965.859863    2475.010010 -1775.010010  4965.859863   388.450195  2475.010010  2470.849854   20.000000       20.000000
8    5344.859863    2475.010010 -1775.010010  5344.859863   399.000000  2475.010010  2749.849854  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=3385549/4096.[0m
[08/30 10:49:03]  --------------------------------------------------------------------------------
[08/30 10:49:03]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 10:49:03]  Generator returned sat in 0.032624 secs.
[08/30 10:49:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:03]  Improved gap from 0.00125 to 100
[08/30 10:49:03]  Improved number of small numbers from 91 to 100 out of a max of 100
[08/30 10:49:03]  Verifer returned sat in 0.262190 secs.
[08/30 10:49:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3696.210205    3576.210449 -1775.010254  3696.210205    0.099609  3576.210449    0.000000  119.999756       19.999756
1    3762.260010    3762.210449 -1775.010254  3762.260010  186.049561  3762.210449    0.000000    0.049561      -13.950439
2    3896.260254    3876.210449 -1775.010254  3896.260254  134.049805  3876.210449    0.049805   20.000000       20.000000
3    4018.359863    3876.210449 -1775.010254  4018.359863  142.099609  3876.210449   22.149414  120.000000       20.000000
4    4118.409668    4076.210449 -1775.010254  4118.409668  220.049805  4076.210449   22.199219   20.000000       20.000000
5    4364.434570    4076.210449 -1775.010254  4364.434570  266.024902  4076.210449  168.224121  120.000000       20.000000
6    4476.447021    4196.497803 -1775.010254  4476.447021  232.012451  4196.497803  180.236572   99.712646       20.000000
7    4651.884277    4376.210449 -1775.010254  4651.884277  275.149902  4376.210449  255.673828   20.000000       20.000000
8    4918.459229    4376.210449 -1775.010254  4918.459229  286.574951  4376.210449  422.248779  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=1638603/4096.[0m
[08/30 10:49:03]  --------------------------------------------------------------------------------
[08/30 10:49:03]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 10:49:03]  Generator returned sat in 0.120831 secs.
[08/30 10:49:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:04]  Improved gap from 0.00125 to 100
[08/30 10:49:04]  Improved number of small numbers from 67 to 75 out of a max of 100
[08/30 10:49:04]  Verifer returned sat in 0.629156 secs.
[08/30 10:49:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3718.412109    3598.412168 -1797.211973  3718.412109    0.099365  3598.412168    0.00000  119.999941       19.999941
1    3798.412168    3798.409668 -1797.211973  3798.412168  200.000000  3798.409668    0.00000    0.002500        0.000000
2    3918.409668    3897.908936 -1797.211973  3918.409668  120.000000  3897.908936    0.00000   20.500732       19.997500
3    3918.409668    3918.409668 -1797.211973  3918.409668   20.500625  3918.409668    0.00000    0.000000      -80.002500
4    4118.409668    4098.412168 -1797.211973  4118.409668  200.000000  4098.412168    0.00000   19.997500       19.997500
5    4647.413418    4098.412354 -1797.211973  4647.413418  549.001250  4098.412354  429.00125  119.999814       20.000000
6    4647.413418    4218.409668 -1797.211973  4647.413418    0.010000  4218.409668  429.00125    0.002500      -80.000000
7    4796.430918    4298.412168 -1797.211973  4796.430918  149.020000  4298.412168  429.00125   69.017500      -30.982500
8    5124.453418    4398.412354 -1797.211973  5124.453418  397.040000  4398.412354  606.04125  119.999814       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=484833/800.[0m
[08/30 10:49:04]  --------------------------------------------------------------------------------
[08/30 10:49:04]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 10:49:04]  Generator returned sat in 0.018574 secs.
[08/30 10:49:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:05]  Improved gap from 0.00125 to 100
[08/30 10:49:05]  Improved number of small numbers from 57 to 65 out of a max of 100
[08/30 10:49:05]  Verifer returned sat in 0.889228 secs.
[08/30 10:49:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3727.771729    3727.770293 -1826.570098  3727.771729    0.099121  3727.770293    0.000000    0.001436        0.001436
1    3847.769043    3797.914043 -1826.570098  3847.769043  119.998750  3797.914043    0.000000   49.855000       19.998750
2    3947.771543    3927.770264 -1826.570098  3947.771543  149.857500  3927.770264    0.001250   20.000029       20.000000
3    3947.771543    3927.770293 -1826.570098  3947.771543    0.001250  3927.770293    0.001250   20.000000      -80.000000
4    4027.774043    4027.770293 -1826.570098  4027.774043  100.002500  4027.770293    0.001250    0.002500      -99.997500
5    4342.704668    4127.770508 -1826.570098  4342.704668  314.933125  4127.770508   94.934375  119.999785       20.000000
6    4342.704668    4227.770293 -1826.570098  4342.704668    0.010000  4227.770293   94.934375   20.000000      -80.000000
7    4472.724668    4377.789043 -1826.570098  4472.724668  150.020000  4377.789043   94.934375    0.001250      -49.980000
8    4947.772793    4427.770508 -1826.570098  4947.772793  475.049375  4427.770508  400.002500  119.999785       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=320001/800.[0m
[08/30 10:49:06]  --------------------------------------------------------------------------------
[08/30 10:49:06]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 10:49:06]  Generator returned sat in 0.131155 secs.
[08/30 10:49:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:06]  Improved gap from 0.0025 to 100
[08/30 10:49:07]  Improved number of small numbers from 54 to 66 out of a max of 100
[08/30 10:49:07]  Verifer returned sat in 0.779165 secs.
[08/30 10:49:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3935.743408    3915.743408 -1946.570127  3935.743408    0.099121  3915.743408     0.0000   20.000000        19.99999
1    4015.743408    3994.750918 -1946.570127  4015.743408  100.000000  3994.750918     0.0000   20.992490        -0.00001
2    4015.743418    4015.743418 -1946.570127  4015.743418   20.992500  4015.743418     0.0000    0.000000      -100.00000
3    4235.745918    4115.743652 -1946.570127  4235.745918  220.002500  4115.743652     0.0025  119.999766        20.00000
4    4235.745918    4215.743418 -1946.570127  4235.745918    0.010000  4215.743418     0.0025   20.000000       -80.00000
5    4435.743418    4361.745293 -1946.570127  4435.743418  219.997500  4361.745293     0.0025   73.995625        19.99750
6    4816.748418    4415.743652 -1946.570127  4816.748418  455.000625  4415.743652   281.0050  119.999766        20.00000
7    4816.748418    4535.740918 -1946.570127  4816.748418    0.010000  4535.740918   281.0050    0.002500       -80.00000
8    5135.748418    4715.743408 -1946.570127  5135.748418  319.002500  4715.743408   400.0050   20.000010        20.00000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:49:07]  --------------------------------------------------------------------------------
[08/30 10:49:07]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 10:49:07]  Generator returned sat in 0.048033 secs.
[08/30 10:49:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:08]  Improved number of small numbers from 57 to 64 out of a max of 99
[08/30 10:49:08]  Verifer returned sat in 0.558439 secs.
[08/30 10:49:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3935.743408    3915.743418 -1946.570312  3935.743408    0.098877  3915.743418    0.000000   19.999990       19.999805
1    4015.743408    3994.750977 -1946.570127  4015.743408   99.999990  3994.750977    0.000000   20.992432       -0.000010
2    4015.743652    4015.743418 -1946.570127  4015.743652   20.992676  4015.743418    0.000000    0.000234      -99.999766
3    4235.742168    4115.743418 -1946.570127  4235.742168  219.998750  4115.743418    0.000000  119.998750       19.998750
4    4415.743418    4315.743418 -1946.570127  4415.743418  300.000000  4315.743418   80.000000   20.000000       20.000000
5    4415.743418    4335.742168 -1946.570127  4415.743418    0.010000  4335.742168   80.000000    0.001250      -80.000000
6    4895.740293    4415.743652 -1946.570127  4895.740293  479.998125  4415.743652  359.996875  119.999766       20.000000
7    4895.740293    4535.740918 -1946.570127  4895.740293    0.010000  4535.740918  359.996875    0.002500      -80.000000
8    5225.734043    4715.743408 -1946.570127  5225.734043  329.996250  4715.743408  489.990625   20.000010       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=131197/320.[0m
[08/30 10:49:08]  --------------------------------------------------------------------------------
[08/30 10:49:08]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 10:49:08]  Generator returned sat in 0.108839 secs.
[08/30 10:49:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:08]  Improved number of small numbers from 47 to 99 out of a max of 99
[08/30 10:49:08]  Verifer returned sat in 0.286960 secs.
[08/30 10:49:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4015.743408    3995.743408 -2026.570068  4015.743408    0.098633  3995.743408    0.000000   20.000000       20.000000
1    4095.743408    3995.743408 -2026.570068  4095.743408  100.000000  3995.743408    0.000000  100.000000        0.000000
2    4195.792725    4195.743408 -2026.570068  4195.792725  200.049316  4195.743408    0.000000    0.049316        0.049316
3    4314.743408    4195.743408 -2026.570068  4314.743408  119.000000  4195.743408    0.000000  119.000000       19.000000
4    4415.743408    4395.743408 -2026.570068  4415.743408  220.000000  4395.743408    0.000000   20.000000       20.000000
5    4816.743408    4395.743408 -2026.570068  4816.743408  421.000000  4395.743408  301.000000  120.000000       20.000000
6    4816.743408    4515.694092 -2026.570068  4816.743408    1.000000  4515.694092  301.000000    0.049316      -80.000000
7    4978.669434    4633.126221 -2026.570068  4978.669434  161.975342  4633.126221  301.000000   44.543213      -18.073975
8    5215.792969    4695.743652 -2026.570068  5215.792969  281.666748  4695.743652  400.049561  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638603/4096.[0m
[08/30 10:49:09]  --------------------------------------------------------------------------------
[08/30 10:49:09]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 10:49:09]  Generator returned sat in 0.134985 secs.
[08/30 10:49:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:09]  Improved gap from 0.04931640625 to 100
[08/30 10:49:09]  Improved number of small numbers from 45 to 100 out of a max of 100
[08/30 10:49:09]  Verifer returned sat in 0.264770 secs.
[08/30 10:49:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4316.706299    4196.706543 -2327.533203  4316.706299    0.098389  4196.706543   0.000000  119.999756       19.999756
1    4416.694092    4396.706299 -2327.533203  4416.694092  219.987549  4396.706299   0.000000   19.987793       19.987549
2    4516.694092    4493.706299 -2327.533203  4516.694092  119.987793  4493.706299   0.000000   22.987793       19.987549
3    4616.718750    4594.706543 -2327.533203  4616.718750  123.012451  4594.706543   0.012207   22.000000       20.000000
4    4716.731201    4695.706299 -2327.533203  4716.731201  122.012451  4695.706299   0.024658   21.000244       20.000000
5    4816.743408    4796.706543 -2327.533203  4816.743408  121.012451  4796.706543   0.036865   20.000000       20.000000
6    4916.755859    4896.706299 -2327.533203  4916.755859  120.012451  4896.706299   0.049316   20.000244       20.000000
7    5015.768066    4996.706299 -2327.533203  5015.768066  119.012451  4996.706299   0.049316   19.012451       19.012207
8    5148.255615    4996.706543 -2327.533203  5148.255615  151.500000  4996.706543  31.549072  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=32281/1024.[0m
[08/30 10:49:10]  --------------------------------------------------------------------------------
[08/30 10:49:10]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 10:49:10]  Generator returned sat in 0.737859 secs.
[08/30 10:49:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:11]  Improved gap from 0.0 to 21.875
[08/30 10:49:11]  Improved number of small numbers from 50 to 100 out of a max of 100
[08/30 10:49:11]  Verifer returned sat in 0.702353 secs.
[08/30 10:49:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    4501.024902    4481.025146 -2547.579834  4501.024902   0.098145  4481.025146        0.0  19.999756       19.999756
1    4527.199463    4505.324463 -2493.754150  4527.199463  46.174316  4505.324463        0.0  21.875000        0.000000
2    4549.074219    4527.199463 -2415.629150  4549.074219  43.749756  4527.199463        0.0  21.874756       -0.000244
3    4594.824463    4557.525146 -2361.379150  4594.824463  67.625000  4557.525146        0.0  37.299316        0.000000
4    4594.824463    4594.824463 -2283.254150  4594.824463  37.250000  4594.824463        0.0   0.000000      -21.875000
5    4638.574463    4616.699463 -2205.129150  4638.574463  43.750000  4616.699463        0.0  21.875000        0.000000
6    4660.449463    4641.025146 -2129.454834  4660.449463  43.750000  4641.025146        0.0  19.424316       -2.450684
7    4681.775146    4662.900146 -2051.329834  4681.775146  40.750000  4662.900146        0.0  18.875000       -3.000000
8    4695.937988    4684.775146 -1984.367676  4695.937988  33.037842  4684.775146        0.0  11.162842      -21.875000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:49:12]  --------------------------------------------------------------------------------
[08/30 10:49:12]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 10:49:12]  Generator returned sat in 0.387925 secs.
[08/30 10:49:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:12]  Improved gap from 0.01226806640625 to 100
[08/30 10:49:12]  Improved number of small numbers from 65 to 100 out of a max of 100
[08/30 10:49:12]  Verifer returned sat in 0.230374 secs.
[08/30 10:49:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4501.024902    4481.024658 -2547.579834  4501.024902    0.097900  4481.024658    0.000000   20.000244            20.0
1    4501.024902    4481.024902 -2547.579834  4501.024902   20.000000  4481.024902    0.000000   20.000000           -80.0
2    4701.049561    4581.073730 -2547.579834  4701.049561  220.024658  4581.073730    0.024658  119.951172            20.0
3    4801.073975    4781.024658 -2547.579834  4801.073975  219.975586  4781.024658    0.049072   20.000244            20.0
4    4931.073730    4827.708008 -2547.579834  4931.073730  150.000000  4827.708008   30.048828   73.316895            20.0
5    5031.098389    4914.374512 -2547.579834  5031.098389  173.341553  4914.374512   30.073486   86.650391            20.0
6    5111.098389    4981.024902 -2547.579834  5111.098389  166.650391  4981.024902   30.073486  100.000000             0.0
7    5262.073975    5181.024902 -2547.579834  5262.073975  250.975586  5181.024902   61.049072   20.000000            20.0
8    5418.732422    5181.024902 -2547.579834  5418.732422  176.658447  5181.024902  117.707520  120.000000            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=179525/2048.[0m
[08/30 10:49:13]  --------------------------------------------------------------------------------
[08/30 10:49:13]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 10:49:13]  Generator returned sat in 0.063777 secs.
[08/30 10:49:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:13]  Improved number of small numbers from 88 to 99 out of a max of 99
[08/30 10:49:13]  Verifer returned sat in 0.236629 secs.
[08/30 10:49:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4501.024902    4481.024414 -2547.579834  4501.024902    0.097900  4481.024414   0.000000   20.000488            20.0
1    4501.024902    4481.024902 -2547.579834  4501.024902   20.000000  4481.024902   0.000000   20.000000           -80.0
2    4701.049561    4581.073730 -2547.579834  4701.049561  220.024658  4581.073730   0.024658  119.951172            20.0
3    4801.073975    4781.024414 -2547.579834  4801.073975  219.975586  4781.024414   0.049072   20.000488            20.0
4    4931.073486    4827.708008 -2547.579834  4931.073486  150.000000  4827.708008  30.048584   73.316895            20.0
5    5031.098145    4914.374512 -2547.579834  5031.098145  173.341553  4914.374512  30.073242   86.650391            20.0
6    5111.098145    5004.808105 -2547.579834  5111.098145  166.650391  5004.808105  30.073242   76.216797             0.0
7    5231.098389    5181.024902 -2547.579834  5231.098389  196.217041  5181.024902  30.073486   20.000000            20.0
8    5387.756836    5181.024902 -2547.579834  5387.756836  176.658447  5181.024902  86.731934  120.000000            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=232175/4096.[0m
[08/30 10:49:13]  --------------------------------------------------------------------------------
[08/30 10:49:13]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 10:49:14]  Generator returned sat in 0.171904 secs.
[08/30 10:49:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:14]  Improved gap from 19.97552490234375 to 100
[08/30 10:49:15]  Improved number of small numbers from 47 to 55 out of a max of 100
[08/30 10:49:15]  Verifer returned sat in 0.881633 secs.
[08/30 10:49:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4448.024902    4436.732178 -2547.579834  4448.024902    0.097656  4436.732178    0.000000   11.292725        0.000183
1    4448.024902    4448.024719 -2547.579834  4448.024902    0.024658  4448.024719    0.000000    0.000183      -99.999817
2    4648.024719    4548.024719 -2547.579834  4648.024719  200.000000  4548.024719    0.000000  100.000000        0.000000
3    4768.049194    4724.276855 -2547.579834  4768.049194  220.024475  4724.276855    0.024475   43.747864       20.000000
4    4868.073669    4836.707703 -2547.579834  4868.073669  143.772339  4836.707703    0.048950   31.317017       20.000000
5    5031.098145    4948.024719 -2547.579834  5031.098145  194.341492  4948.024719   63.073425   20.000000       20.000000
6    5211.098145    5020.125081 -2547.579834  5211.098145  200.000000  5020.125081  143.073425   47.899638       20.000000
7    5311.122620    5124.252380 -2547.579834  5311.122620  147.924113  5124.252380  143.097900   43.772339       20.000000
8    5411.122620    5148.024902 -2547.579834  5411.122620  143.772339  5148.024902  143.097900  119.999817       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=1171857/8192.[0m
[08/30 10:49:15]  --------------------------------------------------------------------------------
[08/30 10:49:15]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 10:49:15]  Generator returned sat in 0.267178 secs.
[08/30 10:49:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:16]  Improved number of small numbers from 53 to 87 out of a max of 99
[08/30 10:49:16]  Verifer returned sat in 0.702933 secs.
[08/30 10:49:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4348.171387    4348.122559 -2547.67749  4348.171387    0.097656  4348.122559    0.000000    0.048828      -99.950928
1    4448.171143    4448.122559 -2547.67749  4448.171143  100.048584  4448.122559    0.000000    0.048584      -99.951172
2    4608.171143    4608.122498 -2547.67749  4608.171143  160.048584  4608.122498    0.000000    0.048645      -39.951172
3    4744.366421    4662.707784 -2547.67749  4744.366421  136.243924  4662.707784    0.000000   81.658637       -3.755893
4    4868.073669    4848.122314 -2547.67749  4868.073669  205.365885  4848.122314    0.000000   19.951355       19.951355
5    5157.171143    4902.122498 -2547.67749  5157.171143  309.048828  4902.122498  189.048828   65.999817       20.000000
6    5237.171326    4948.122314 -2547.67749  5237.171326  146.000000  4948.122314  189.048828  100.000183        0.000183
7    5357.171143    5148.122314 -2547.67749  5357.171143  220.000000  5148.122314  189.048828   20.000000       20.000000
8    5668.171143    5148.122314 -2547.67749  5668.171143  331.000000  5148.122314  400.048828  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=204825/512.[0m
[08/30 10:49:16]  --------------------------------------------------------------------------------
[08/30 10:49:16]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 10:49:17]  Generator returned sat in 0.736763 secs.
[08/30 10:49:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:18]  Improved gap from 0.0 to 21.875
[08/30 10:49:18]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:49:18]  Verifer returned sat in 0.436606 secs.
[08/30 10:49:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5045.302490    5017.427490 -2866.795166  5045.302490   0.097412  5017.427490        0.0  27.875000       20.000000
1    5047.177490    5025.302490 -2788.670166  5047.177490  29.750000  5025.302490        0.0  21.875000        0.000000
2    5047.226318    5047.177734 -2725.545166  5047.226318  21.923828  5047.177734        0.0   0.048584      -36.826172
3    5084.101318    5084.052490 -2647.420166  5084.101318  36.923584  5084.052490        0.0   0.048828      -21.826172
4    5118.364990    5105.927490 -2569.295166  5118.364990  34.312500  5105.927490        0.0  12.437500       -9.437500
5    5147.239990    5127.802734 -2491.170410  5147.239990  41.312500  5127.802734        0.0  19.437256       -2.437744
6    5169.115234    5150.677490 -2414.045166  5169.115234  41.312500  5150.677490        0.0  18.437744       -3.437256
7    5184.989990    5172.552490 -2337.371338  5184.989990  34.312500  5172.552490        0.0  12.437500      -10.888672
8    5206.864990    5195.878906 -2259.246582  5206.864990  34.312500  5195.878906        0.0  10.986084      -10.888916
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:49:18]  --------------------------------------------------------------------------------
[08/30 10:49:18]  Iteration: 16 (0 solution, 15 counterexamples)
[08/30 10:49:19]  Generator returned sat in 0.224494 secs.
[08/30 10:49:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:19]  Improved gap from 0.02435302734375 to 100
[08/30 10:49:19]  Improved number of small numbers from 62 to 68 out of a max of 100
[08/30 10:49:19]  Verifer returned sat in 0.680414 secs.
[08/30 10:49:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t
0    4791.797363    4771.797363 -2613.290527  4791.797363    0.097412  4771.797363    0.000000  20.000000       19.999756
1    4791.797363    4771.797607 -2613.290527  4791.797363    0.048828  4771.797607    0.000000  19.999756      -80.000244
2    4971.846191    4971.797607 -2613.290527  4971.846191  200.048584  4971.797607    0.000000   0.048584        0.048584
3    5091.846313    5046.903137 -2613.290527  5091.846313  120.048706  5046.903137    0.048706  44.894470       20.000000
4    5105.976196    5105.927490 -2613.290527  5105.976196   59.024353  5105.927490    0.048706   0.000000      -65.870117
5    5608.171021    5221.375488 -2613.290527  5608.171021  502.194824  5221.375488  316.373413  70.422119       20.000000
6    5787.846313    5371.797363 -2613.290527  5787.846313  250.097412  5371.797363  396.048706  20.000244       20.000000
7    5891.894775    5444.903137 -2613.290527  5891.894775  124.048706  5444.903137  400.097168  46.894470       20.000000
8    5906.024658    5471.797607 -2613.290527  5906.024658   61.024353  5471.797607  400.097168  34.129883      -65.870117
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=3277197/8192.[0m
[08/30 10:49:20]  --------------------------------------------------------------------------------
[08/30 10:49:20]  Iteration: 17 (0 solution, 16 counterexamples)
[08/30 10:49:20]  Generator returned sat in 0.159514 secs.
[08/30 10:49:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:21]  Improved number of small numbers from 34 to 38 out of a max of 99
[08/30 10:49:21]  Verifer returned sat in 0.831265 secs.
[08/30 10:49:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5095.496745    4995.472392 -2936.965312  5095.496745    0.097168  4995.472392    0.000000  100.024353        0.024353
1    5095.496745    5095.472392 -2936.965312  5095.496745  100.024170  5095.472392    0.000000    0.024353      -99.975647
2    5195.496745    5195.472392 -2936.965312  5195.496745  100.024353  5195.472392    0.000000    0.024353      -99.975647
3    5415.496745    5342.821960 -2936.965312  5415.496745  220.024353  5342.821960    0.024353   72.650431       20.000000
4    5515.521098    5445.488627 -2936.965312  5515.521098  172.674784  5445.488627    0.048706   69.983765       20.000000
5    5619.545451    5554.155294 -2936.965312  5619.545451  174.008118  5554.155294    4.073059   61.317098       20.000000
6    5736.569804    5695.472392 -2936.965312  5736.569804  178.341451  5695.472392   21.097412   20.000000       20.000000
7    5891.895020    5795.472392 -2936.965312  5891.895020  175.325216  5795.472392   76.422628   20.000000       20.000000
8    6045.886902    5795.472412 -2936.965312  6045.886902  173.991882  5795.472412  130.414510  119.999980       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=1601935/12288.[0m
[08/30 10:49:21]  --------------------------------------------------------------------------------
[08/30 10:49:21]  Iteration: 18 (0 solution, 17 counterexamples)
[08/30 10:49:21]  Generator returned sat in 0.056796 secs.
[08/30 10:49:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:22]  Improved gap from 0.0 to 0
[08/30 10:49:22]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:49:22]  Verifer returned sat in 0.394075 secs.
[08/30 10:49:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5218.545410    5098.545654 -3035.888184  5218.545410    0.097168  5098.545654   0.000000  119.999756       19.999756
1    5298.545410    5198.545654 -3035.888184  5298.545410  199.999756  5198.545654   0.000000   99.999756       -0.000244
2    5398.593994    5398.545410 -3035.888184  5398.593994  200.048340  5398.545410   0.000000    0.048584        0.048340
3    5519.545410    5498.545654 -3035.888184  5519.545410  121.000000  5498.545654   0.999756   20.000000       20.000000
4    5619.545410    5598.545410 -3035.888184  5619.545410  120.000000  5598.545410   0.999756   20.000244       20.000000
5    5619.545410    5617.594238 -2955.888184  5619.545410    1.000000  5617.594238   0.999756    0.951416        0.000000
6    5619.593994    5618.545654 -2855.936768  5619.593994    1.000000  5618.545654   0.999756    0.048584        0.000000
7    5620.545410    5618.594238 -2756.888184  5620.545410    1.000000  5618.594238   0.999756    0.951416        0.000000
8    5620.593994    5619.545654 -2756.887939  5620.593994    1.000000  5619.545654   0.999756    0.048584      -99.951172
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:49:22]  --------------------------------------------------------------------------------
[08/30 10:49:22]  Iteration: 19 (0 solution, 18 counterexamples)
[08/30 10:49:23]  Generator returned sat in 0.125308 secs.
[08/30 10:49:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:23]  Improved gap from 0.0 to 9.375
[08/30 10:49:23]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:49:23]  Verifer returned sat in 0.273940 secs.
[08/30 10:49:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5298.545410    5198.496826 -3126.513184  5298.545410    0.097168  5198.496826        0.0  100.048584        0.048584
1    5298.545410    5298.496826 -3035.888184  5298.545410  100.000000  5298.496826        0.0    0.048584       -9.326416
2    5427.823242    5407.871826 -3035.888184  5427.823242  129.326416  5407.871826        0.0   19.951416       19.951416
3    5528.871826    5507.823242 -3035.888184  5528.871826  121.000000  5507.823242        1.0   20.048584       20.000000
4    5628.823242    5566.774658 -3035.888184  5628.823242  120.000000  5566.774658        1.0   61.048584       19.951416
5    5628.823242    5607.871826 -2955.839600  5628.823242   61.000000  5607.871826        1.0   19.951416        0.000000
6    5640.371826    5637.976074 -2875.367432  5640.371826   31.500000  5637.976074        1.0    1.395752       -7.979248
7    5655.726074    5647.351074 -2784.742432  5655.726074   16.750000  5647.351074        1.0    7.375000       -2.000000
8    5657.726074    5656.726074 -2784.742432  5657.726074    9.375000  5656.726074        1.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:49:23]  --------------------------------------------------------------------------------
[08/30 10:49:23]  Iteration: 20 (0 solution, 19 counterexamples)
[08/30 10:49:24]  Generator returned sat in 0.117223 secs.
[08/30 10:49:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:24]  Verifer returned unsat in 0.128534 secs.
[08/30 10:49:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:24]  --------------------------------------------------------------------------------
[08/30 10:49:24]  Iteration: 21 (1 solution, 19 counterexamples)
[08/30 10:49:25]  Generator returned sat in 0.745257 secs.
[08/30 10:49:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:25]  Improved number of small numbers from 35 to 99 out of a max of 99
[08/30 10:49:25]  Verifer returned sat in 0.324431 secs.
[08/30 10:49:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5118.703369    5098.703369 -3035.888428  5118.703369    0.097168  5098.703369    0.000000   20.000000       20.000000
1    5118.703369    5098.703613 -3035.888428  5118.703369   19.951416  5098.703613    0.000000   19.999756      -80.000000
2    5318.655029    5198.703613 -3035.888428  5318.655029  219.951416  5198.703613    0.000000  119.951416       19.951660
3    5615.735840    5309.235840 -3035.888428  5615.735840  417.032227  5309.235840  197.032471  109.467529       20.000000
4    5715.784424    5398.703613 -3035.888428  5715.784424  209.516113  5398.703613  197.081055  119.999756       20.000000
5    5715.784424    5498.703369 -3035.888428  5715.784424  105.758057  5498.703369  197.081055   20.000000      -80.000000
6    5908.300537    5698.703369 -3035.888428  5908.300537  212.516113  5698.703369  197.081055   12.516113       12.516113
7    6321.816650    5798.703369 -3035.888428  6321.816650  426.032227  5798.703369  503.113281   20.000000       20.000000
8    6515.832764    5798.703613 -3035.888428  6515.832764  214.016113  5798.703613  597.129395  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=819299/2048.[0m
[08/30 10:49:25]  --------------------------------------------------------------------------------
[08/30 10:49:25]  Iteration: 22 (1 solution, 20 counterexamples)
[08/30 10:49:26]  Generator returned sat in 0.355963 secs.
[08/30 10:49:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:26]  Improved number of small numbers from 63 to 99 out of a max of 99
[08/30 10:49:26]  Verifer returned sat in 0.191741 secs.
[08/30 10:49:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5115.703451    5095.703369 -3035.888672  5115.703451    0.097168  5095.703369    0.000000   20.000081       19.999837
1    5115.703451    5098.703369 -3035.888428  5115.703451   19.951172  5098.703369    0.000000   17.000081      -79.999919
2    5315.654785    5195.703613 -3035.888428  5315.654785  216.951416  5195.703613    0.000000  119.951172       19.951416
3    5615.735840    5304.735840 -3035.888428  5615.735840  420.032227  5304.735840  200.032471  110.967529       20.000000
4    5715.784424    5398.703369 -3035.888428  5715.784424  211.016113  5398.703369  200.081055  117.000000       20.000000
5    5715.784424    5495.703369 -3035.888428  5715.784424  106.508057  5495.703369  200.081055   20.000000      -80.000000
6    5908.800537    5695.703369 -3035.888428  5908.800537  213.016113  5695.703369  200.081055   13.016113       13.016113
7    6321.816650    5795.703369 -3035.888428  6321.816650  426.032227  5795.703369  506.113281   20.000000       20.000000
8    6515.832764    5795.703613 -3035.888428  6515.832764  214.016113  5795.703613  600.129395  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=819299/2048.[0m
[08/30 10:49:27]  --------------------------------------------------------------------------------
[08/30 10:49:27]  Iteration: 23 (1 solution, 21 counterexamples)
[08/30 10:49:28]  Generator returned sat in 1.552737 secs.
[08/30 10:49:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:49:29]  Improved gap from 0.0242919921875 to 100
[08/30 10:49:29]  Improved number of small numbers from 64 to 100 out of a max of 100
[08/30 10:49:29]  Verifer returned sat in 0.284763 secs.
[08/30 10:49:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4981.411621    4981.363037 -3035.888428  4981.411621    0.097168  4981.363037    0.00000    0.048584         0.02417
1    4981.411621    4981.387451 -3035.888428  4981.411621    0.024170  4981.387451    0.00000    0.024170       -99.97583
2    5181.387451    5181.363281 -3035.888428  5181.387451  200.000000  5181.363281    0.00000    0.024170         0.00000
3    5301.411621    5264.387451 -3035.888428  5301.411621  120.048340  5264.387451    0.02417   37.000000        20.00000
4    5301.411621    5281.387451 -3035.888428  5301.411621    1.000000  5281.387451    0.02417   20.000000       -80.00000
5    5584.411621    5381.387451 -3035.888428  5584.411621  303.000000  5381.387451   83.02417  120.000000        20.00000
6    5584.411621    5481.387451 -3035.888428  5584.411621    1.000000  5481.387451   83.02417   20.000000       -80.00000
7    5784.411621    5634.387451 -3035.888428  5784.411621  220.000000  5634.387451   83.02417   67.000000        20.00000
8    6511.411621    5681.387695 -3035.888428  6511.411621  794.000000  5681.387695  710.02417  119.999756        20.00000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=710.[0m
[08/30 10:49:29]  --------------------------------------------------------------------------------
[08/30 10:49:29]  Iteration: 24 (1 solution, 22 counterexamples)
[08/30 10:49:31]  Generator returned sat in 1.818954 secs.
[08/30 10:49:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:32]  Improved gap from 0.0 to 7.8125
[08/30 10:49:32]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:49:32]  Verifer returned sat in 0.489694 secs.
[08/30 10:49:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5306.869873    5306.869873 -3361.37085  5306.869873    0.097168  5306.869873     0.0000   0.000000        0.000000
1    5406.869873    5399.057373 -3361.37085  5406.869873  100.000000  5399.057373     0.0000   7.812500        0.000000
2    5406.918457    5406.869873 -3269.18335  5406.918457    7.861084  5406.869873     0.0000   0.048584       -7.763916
3    5546.869873    5495.633789 -3269.18335  5546.869873  140.000000  5495.633789    12.1875  39.048584       20.000000
4    5646.821289    5566.085205 -3269.18335  5646.821289  139.000000  5566.085205    12.1875  68.548584       19.951416
5    5646.821289    5614.682373 -3194.62085  5646.821289   68.500000  5614.682373    12.1875  19.951416       -5.486084
6    5660.119873    5640.119873 -3102.43335  5660.119873   33.250000  5640.119873    12.1875   7.812500        0.000000
7    5667.932373    5647.932373 -3010.24585  5667.932373   15.625000  5647.932373    12.1875   7.812500        0.000000
8    5667.932373    5655.744873 -2918.05835  5667.932373    6.812500  5655.744873    12.1875   0.000000       -7.812500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:49:32]  --------------------------------------------------------------------------------
[08/30 10:49:32]  Iteration: 25 (1 solution, 23 counterexamples)
[08/30 10:49:33]  Generator returned sat in 0.700723 secs.
[08/30 10:49:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:33]  Improved gap from 0.0025 to 79.6875
[08/30 10:49:34]  Improved number of small numbers from 61 to 100 out of a max of 100
[08/30 10:49:34]  Verifer returned sat in 0.490979 secs.
[08/30 10:49:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5421.094971    5421.094727 -3269.183594  5421.094971    0.096680  5421.094727    0.000000    0.000244        0.000000
1    5521.094727    5521.092285 -3269.183594  5521.094727  100.000000  5521.092285    0.000000    0.002441       -0.000244
2    5521.404785    5521.402344 -3269.183350  5521.404785    0.312500  5521.402344    0.000000    0.002441      -99.689941
3    5741.097412    5721.094727 -3269.183350  5741.097412  219.695068  5721.094727    0.002686   20.000000       20.000000
4    5741.097412    5721.094727 -3269.183350  5741.097412    0.010000  5721.094727    0.002686   20.000000      -80.000000
5    5921.099854    5921.094727 -3269.183350  5921.099854  200.002441  5921.094727    0.002686    0.002441        0.002441
6    6320.789795    5921.094971 -3269.183350  6320.789795  399.692383  5921.094971  279.695068  119.999756       20.000000
7    6320.789795    6041.092285 -3268.868408  6320.789795    0.010000  6041.092285  279.695068    0.002441      -79.685059
8    6640.784912    6120.780029 -3268.868408  6640.784912  319.997559  6120.780029  400.005127  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=819205/2048.[0m
[08/30 10:49:34]  --------------------------------------------------------------------------------
[08/30 10:49:34]  Iteration: 26 (1 solution, 24 counterexamples)
[08/30 10:49:34]  Generator returned sat in 0.159387 secs.
[08/30 10:49:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:34]  Improved gap from 6.103515625e-05 to 100
[08/30 10:49:35]  Improved number of small numbers from 84 to 88 out of a max of 100
[08/30 10:49:35]  Verifer returned sat in 0.429539 secs.
[08/30 10:49:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5441.094482    5421.094727 -3269.18335  5441.094482    0.096680  5421.094727    0.00000   19.999756       19.999756
1    5521.097168    5521.094482 -3269.18335  5521.097168  100.002441  5521.094482    0.00000    0.002686        0.002441
2    5521.097168    5521.094727 -3269.18335  5521.097168    0.002686  5521.094727    0.00000    0.002441      -99.997559
3    5621.097227    5621.094727 -3269.18335  5621.097227  100.002500  5621.094727    0.00000    0.002500      -99.997500
4    5971.095977    5787.763893 -3269.18335  5971.095977  350.001250  5787.763893  130.00125   53.330833       20.000000
5    5971.095977    5841.092227 -3269.18335  5971.095977    0.010000  5841.092227  130.00125    0.002500      -80.000000
6    6451.094727    5921.094727 -3269.18335  6451.094727  480.001250  5921.094727  410.00000  120.000000       20.000000
7    6451.094727    6021.094727 -3269.18335  6451.094727    0.010000  6021.094727  410.00000   20.000000      -80.000000
8    6781.095977    6121.094727 -3269.18335  6781.095977  350.001250  6121.094727  540.00125  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=410.[0m
[08/30 10:49:35]  --------------------------------------------------------------------------------
[08/30 10:49:35]  Iteration: 27 (1 solution, 25 counterexamples)
[08/30 10:49:36]  Generator returned sat in 0.174609 secs.
[08/30 10:49:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:36]  Improved gap from 0.0 to 100
[08/30 10:49:36]  Improved number of small numbers from 63 to 75 out of a max of 100
[08/30 10:49:36]  Verifer returned sat in 0.636386 secs.
[08/30 10:49:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6052.211426    6052.208984 -3269.18335  6052.211426    0.096436  6052.208984     0.0000    0.002441        0.002318
1    6052.211426    6052.209108 -3269.18335  6052.211426    0.002441  6052.209108     0.0000    0.002318      -99.997682
2    6152.211608    6152.209108 -3269.18335  6152.211608  100.002500  6152.209108     0.0000    0.002500      -99.997500
3    6372.211608    6292.220775 -3269.18335  6372.211608  220.002500  6292.220775     0.0025   79.988333       20.000000
4    6372.211608    6352.209108 -3269.18335  6372.211608    0.010000  6352.209108     0.0025   20.000000      -80.000000
5    6802.221608    6452.209229 -3269.18335  6802.221608  450.010000  6452.209229   230.0125  119.999880       20.000000
6    6802.221608    6552.209108 -3269.18335  6802.221608    0.010000  6552.209108   230.0125   20.000000      -80.000000
7    7172.214108    6652.209229 -3269.18335  7172.214108  389.992500  6652.209229   400.0050  119.999880       20.000000
8    7172.214108    6752.209229 -3269.18335  7172.214108    0.010000  6752.209229   400.0050   19.999880      -80.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:49:37]  --------------------------------------------------------------------------------
[08/30 10:49:37]  Iteration: 28 (1 solution, 26 counterexamples)
[08/30 10:49:39]  Generator returned sat in 2.363003 secs.
[08/30 10:49:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:40]  Improved gap from 0.0012809244791666668 to 3.125
[08/30 10:49:40]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/30 10:49:40]  Verifer returned sat in 0.427830 secs.
[08/30 10:49:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6152.209229    6132.208984 -3349.183350  6152.209229    0.096436  6132.208984    0.00000   20.000244       20.000000
1    6152.209229    6132.209229 -3269.183350  6152.209229    0.048340  6132.209229    0.00000   20.000000        0.000000
2    6272.160889    6152.209229 -3269.183350  6272.160889  139.951660  6152.209229    0.00000  119.951660       19.951660
3    6272.160889    6269.035889 -3189.135010  6272.160889   61.586670  6269.035889    0.00000    3.125000        0.000000
4    6392.209229    6372.160889 -3189.135010  6392.209229  123.173340  6372.160889    0.04834   20.000000       20.000000
5    6392.209229    6372.161133 -3109.135010  6392.209229    1.000000  6372.161133    0.04834   19.999756        0.000000
6    6392.209229    6392.160889 -3012.260010  6392.209229    2.000000  6392.160889    0.04834    0.000000       -3.125000
7    6396.209229    6396.112793 -2921.086914  6396.209229    4.000000  6396.112793    0.04834    0.048096       -7.951904
8    6404.161133    6404.112793 -2824.212158  6404.161133    8.000000  6404.112793    0.04834    0.000000       -3.125244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:49:40]  --------------------------------------------------------------------------------
[08/30 10:49:40]  Iteration: 29 (1 solution, 27 counterexamples)
[08/30 10:49:41]  Generator returned sat in 0.322916 secs.
[08/30 10:49:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:41]  Improved gap from 0.0 to 1.5625
[08/30 10:49:42]  Improved number of small numbers from 72 to 100 out of a max of 100
[08/30 10:49:42]  Verifer returned sat in 0.645575 secs.
[08/30 10:49:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    6152.208984    6150.646484 -3293.185303  6152.208984    0.096436  6150.646484   0.000000   1.562500        1.562500
1    6152.208984    6150.646484 -3194.747803  6152.208984    0.048340  6150.646484   0.000000   1.562500        0.000000
2    6272.221191    6252.208984 -3194.747803  6272.221191  121.574707  6252.208984   0.012207  20.000000       20.000000
3    6372.208984    6292.239258 -3194.747803  6372.208984  119.987793  6292.239258   0.012207  79.957520       19.987793
4    6472.233154    6385.346436 -3194.747803  6472.233154  179.981689  6385.346436   0.024170  86.862549       20.000000
5    6472.233154    6470.646484 -3114.747803  6472.233154    1.000000  6470.646484   0.024170   1.562500        0.000000
6    6472.233154    6472.208984 -3016.310303  6472.233154    1.500000  6472.208984   0.024170   0.000000       -1.562500
7    6474.483154    6473.771484 -2917.872803  6474.483154    2.250000  6473.771484   0.024170   0.687500       -0.875000
8    6477.170654    6475.333984 -2819.685547  6477.170654    3.375000  6475.333984   0.024170   1.812500       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:49:42]  --------------------------------------------------------------------------------
[08/30 10:49:42]  Iteration: 30 (1 solution, 28 counterexamples)
[08/30 10:49:44]  Generator returned sat in 1.732048 secs.
[08/30 10:49:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:44]  Improved gap from 0.02410888671875 to 76.5625
[08/30 10:49:44]  Improved number of small numbers from 49 to 100 out of a max of 100
[08/30 10:49:44]  Verifer returned sat in 0.479657 secs.
[08/30 10:49:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5972.088379    5972.040039 -3214.579102  5972.088379    0.096436  5972.040039    0.000000    0.048340      -99.951660
1    6171.710693    6171.662598 -3214.579102  6171.710693  199.670654  6171.662598    0.000000    0.048096       -0.329346
2    6172.088379    6172.040283 -3214.579102  6172.088379    0.425781  6172.040283    0.000000    0.048096      -99.951660
3    6392.088379    6372.040039 -3214.579102  6392.088379  220.048096  6372.040039    0.048340   20.000000       20.000000
4    6392.088379    6372.040283 -3214.579102  6392.088379    1.000000  6372.040283    0.048340   19.999756      -80.000000
5    6571.466309    6571.369629 -3214.579102  6571.466309  199.377686  6571.369629    0.048340    0.048340       -0.622070
6    6969.747314    6572.040283 -3214.579102  6969.747314  398.329346  6572.040283  277.707275  119.999756       20.000000
7    6969.747314    6691.991943 -3211.093506  6969.747314    1.000000  6691.991943  277.707275    0.048096      -76.514404
8    7288.650879    6768.554688 -3211.093506  7288.650879  318.951660  6768.554688  400.096436  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638597/4096.[0m
[08/30 10:49:45]  --------------------------------------------------------------------------------
[08/30 10:49:45]  Iteration: 31 (1 solution, 29 counterexamples)
[08/30 10:49:46]  Generator returned sat in 0.380248 secs.
[08/30 10:49:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:46]  Improved number of small numbers from 55 to 99 out of a max of 99
[08/30 10:49:46]  Verifer returned sat in 0.265224 secs.
[08/30 10:49:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5972.088379    5972.040283 -3214.579346  5972.088379    0.096436  5972.040283    0.000000    0.048096      -99.951904
1    6173.088379    6170.991943 -3214.579346  6173.088379  201.048096  6170.991943    0.000000    2.096436        1.048096
2    6173.088379    6173.040039 -3214.579346  6173.088379    2.096436  6173.040039    0.000000    0.048340      -98.951904
3    6392.088379    6272.040283 -3214.579346  6392.088379  219.048340  6272.040283    0.048096  120.000000       20.000000
4    6392.088379    6372.040283 -3214.579102  6392.088379  110.524170  6372.040283    0.048096   20.000000      -79.999756
5    6572.136719    6572.040039 -3214.579102  6572.136719  200.048340  6572.040039    0.048096    0.048584        0.048584
6    6970.088135    6572.040283 -3214.579102  6970.088135  398.000000  6572.040283  278.048096  119.999756       20.000000
7    7050.088379    6771.991943 -3214.579102  7050.088379  200.000000  6771.991943  278.048096    0.048340        0.000244
8    7448.991699    6772.040039 -3214.579102  7448.991699  398.951660  6772.040039  556.951660  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=2281077/4096.[0m
[08/30 10:49:46]  --------------------------------------------------------------------------------
[08/30 10:49:46]  Iteration: 32 (1 solution, 30 counterexamples)
[08/30 10:49:48]  Generator returned sat in 0.965654 secs.
[08/30 10:49:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:48]  Improved gap from 0.0 to 0
[08/30 10:49:48]  Improved number of small numbers from 65 to 80 out of a max of 100
[08/30 10:49:48]  Verifer returned sat in 0.552337 secs.
[08/30 10:49:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5988.256592    5988.254395 -3214.579346  5988.256592    0.096191  5988.254395      0.000   0.002197      -99.997627
1    6208.251953    6188.254150 -3214.579346  6208.251953  219.997559  6188.254150      0.000  19.997803       19.997734
2    6308.251709    6288.254219 -3214.579346  6308.251709  119.997559  6288.254219      0.000  19.997490       19.997490
3    6642.184219    6388.254219 -3214.579346  6642.184219  353.930000  6388.254219    233.930  20.000000       20.000000
4    6800.149219    6488.254219 -3214.579346  6800.149219  177.965000  6488.254219    291.895  20.000000       20.000000
5    6870.131719    6578.229219 -3204.561846  6870.131719   89.982500  6578.229219    291.895   0.007500        0.000000
6    6870.134219    6578.236719 -3104.569336  6870.134219    0.010000  6578.236719    291.895   0.002500       -0.004990
7    6870.141719    6578.244219 -3004.576904  6870.141719    0.010000  6578.244219    291.895   0.002500       -0.005059
8    6870.149219    6578.251953 -2904.584473  6870.149219    0.010000  6578.251953    291.895   0.002266       -0.005127
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:49:48]  --------------------------------------------------------------------------------
[08/30 10:49:48]  Iteration: 33 (1 solution, 31 counterexamples)
[08/30 10:49:49]  Generator returned sat in 0.427689 secs.
[08/30 10:49:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:49:49]  Improved gap from 0.0 to 0
[08/30 10:49:50]  Improved number of small numbers from 67 to 81 out of a max of 100
[08/30 10:49:50]  Verifer returned sat in 0.489534 secs.
[08/30 10:49:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6168.254395    6168.251709 -3484.549316  6168.254395    0.096191  6168.251709        0.0    0.002686      -99.997295
1    6388.249023    6268.251709 -3484.549316  6388.249023  219.997314  6268.251709        0.0  119.997314       19.997334
2    6388.249023    6368.251709 -3404.546875  6388.249023    0.002686  6368.251709        0.0   19.997314       -0.000225
3    6488.249023    6488.246719 -3404.546875  6488.249023  119.997314  6488.246719        0.0    0.002305       -0.000225
4    6488.256719    6488.254219 -3304.554443  6488.256719    0.010000  6488.254219        0.0    0.002500       -0.000098
5    6488.264219    6488.261719 -3204.561846  6488.264219    0.010000  6488.261719        0.0    0.002500        0.000000
6    6488.271719    6488.264219 -3104.569346  6488.271719    0.010000  6488.264219        0.0    0.007500        0.000000
7    6488.274219    6488.271719 -3004.572021  6488.274219    0.010000  6488.271719        0.0    0.002500       -0.000176
8    6488.281719    6488.274414 -2904.579590  6488.281719    0.010000  6488.274414        0.0    0.007305       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:49:50]  --------------------------------------------------------------------------------
[08/30 10:49:50]  Iteration: 34 (1 solution, 32 counterexamples)
[08/30 10:49:52]  Generator returned sat in 1.058109 secs.
[08/30 10:49:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:49:52]  Improved gap from 0.0 to 6.25
[08/30 10:49:53]  Improved number of small numbers from 46 to 80 out of a max of 100
[08/30 10:49:53]  Verifer returned sat in 1.027855 secs.
[08/30 10:49:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6088.223389    5988.175537 -3304.473145  6088.223389    0.096191  5988.175537        0.0  100.047852        0.047871
1    6088.223389    6088.175537 -3304.473145  6088.223389  100.047852  6088.175537        0.0    0.047852      -99.952129
2    6288.175537    6208.079102 -3304.473145  6288.175537  200.000000  6208.079102        0.0   80.096436        0.000020
3    6408.175293    6388.175293 -3304.473145  6408.175293  200.096191  6388.175293        0.0   20.000000       19.999775
4    6488.223389    6429.485840 -3304.473145  6488.223389  100.048096  6429.485840        0.0   58.737549        0.047871
5    6488.223389    6488.175527 -3210.723389  6488.223389   50.024048  6488.175527        0.0    0.047861       -6.202373
6    6513.187551    6500.633545 -3129.485178  6513.187551   25.012024  6500.633545        0.0   12.554006        0.000000
7    6513.187551    6513.187551 -3035.735352  6513.187551   12.506012  6513.187551        0.0    0.000000       -6.250173
8    6519.440557    6519.437744 -3035.735352  6519.440557    6.253006  6519.437744        0.0    0.002813      -99.997167
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:49:53]  --------------------------------------------------------------------------------
[08/30 10:49:53]  Iteration: 35 (1 solution, 33 counterexamples)
[08/30 10:50:00]  Generator returned sat in 6.518240 secs.
[08/30 10:50:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:50:01]  Improved gap from 0.00125 to 0
[08/30 10:50:01]  Improved number of small numbers from 52 to 100 out of a max of 100
[08/30 10:50:01]  Verifer returned sat in 0.634589 secs.
[08/30 10:50:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6168.990479    6048.990723 -3532.577637  6168.990479    0.095947  6048.990723        0.0  119.999756       19.999756
1    6248.990479    6148.990723 -3532.577637  6248.990479  199.999756  6148.990723        0.0   99.999756       -0.000244
2    6348.993164    6348.990723 -3532.577637  6348.993164  200.002441  6348.990723        0.0    0.002441        0.002441
3    6349.959717    6349.957031 -3433.546631  6349.959717    0.968994  6349.957031        0.0    0.002686        0.000000
4    6350.895020    6350.768311 -3334.481934  6350.895020    0.937988  6350.768311        0.0    0.126709        0.000000
5    6351.644287    6350.895020 -3235.231201  6351.644287    0.875977  6350.895020        0.0    0.749268        0.000000
6    6351.646973    6351.644287 -3135.722412  6351.646973    0.751953  6351.644287        0.0    0.002686       -0.488525
7    6352.148193    6352.135498 -3035.735107  6352.148193    0.503906  6352.135498        0.0    0.012695        0.000000
8    6352.148193    6352.148193 -3035.735107  6352.148193    0.010000  6352.148193        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:50:01]  --------------------------------------------------------------------------------
[08/30 10:50:01]  Iteration: 36 (1 solution, 34 counterexamples)
[08/30 10:50:02]  Generator returned sat in 0.484639 secs.
[08/30 10:50:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:50:02]  Improved gap from 0.0025 to 4.6875
[08/30 10:50:03]  Improved number of small numbers from 51 to 100 out of a max of 100
[08/30 10:50:03]  Verifer returned sat in 0.591208 secs.
[08/30 10:50:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6695.184570    6575.184814 -4354.751465  6695.184570    0.095947  6575.184814        0.0  119.999756       19.999756
1    6795.136963    6775.184570 -4354.751465  6795.136963  219.952148  6775.184570        0.0   19.952393       19.952148
2    6895.136719    6783.184570 -4354.751465  6895.136719  119.952148  6783.184570        0.0  111.952148       19.951904
3    6995.184570    6970.136963 -4354.751465  6995.184570  212.000000  6970.136963        0.0   25.047607       19.999756
4    7075.136963    7023.732666 -4354.751465  7075.136963  105.000000  7023.732666        0.0   51.404297       -0.047852
5    7075.232666    7075.184814 -4268.174316  7075.232666   51.500000  7075.184814        0.0    0.047852      -13.375000
6    7099.934814    7088.607910 -4179.501465  7099.934814   24.750000  7088.607910        0.0   11.326904        0.000000
7    7099.982910    7099.934814 -4084.188965  7099.982910   11.375000  7099.934814        0.0    0.048096       -4.639404
8    7104.622314    7104.622314 -4084.188721  7104.622314    4.687500  7104.622314        0.0    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:50:03]  --------------------------------------------------------------------------------
[08/30 10:50:03]  Iteration: 37 (1 solution, 35 counterexamples)
[08/30 10:50:07]  Generator returned sat in 3.250997 secs.
[08/30 10:50:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:50:07]  Improved gap from 0.00125 to 100
[08/30 10:50:07]  Improved number of small numbers from 63 to 75 out of a max of 100
[08/30 10:50:07]  Verifer returned sat in 0.626502 secs.
[08/30 10:50:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5757.957275    5737.957314 -4354.751465  5757.957275    0.095703  5737.957314     0.0000   19.999961       19.999961
1    5837.957314    5737.957520 -4354.751465  5837.957314  100.000000  5737.957520     0.0000   99.999795        0.000000
2    5937.959961    5909.971481 -4354.751465  5937.959961  200.002441  5909.971481     0.0000   27.988480        0.002646
3    5937.959961    5937.957314 -4354.751465  5937.959961   27.988333  5937.957314     0.0000    0.002646      -99.997354
4    6278.939814    6037.957314 -4354.751465  6278.939814  340.982500  6037.957314   120.9825  120.000000       20.000000
5    6278.939814    6157.954814 -4354.751465  6278.939814    0.010000  6157.954814   120.9825    0.002500      -80.000000
6    6649.927314    6337.957275 -4354.751465  6649.927314  370.990000  6337.957275   291.9700   20.000039       20.000000
7    6649.927314    6337.957314 -4354.751465  6649.927314    0.010000  6337.957314   291.9700   20.000000      -80.000000
8    7078.942314    6437.957520 -4354.751465  7078.942314  449.015000  6437.957520   520.9850  119.999795       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=160001/400.[0m
[08/30 10:50:08]  --------------------------------------------------------------------------------
[08/30 10:50:08]  Iteration: 38 (1 solution, 36 counterexamples)
[08/30 10:50:09]  Generator returned sat in 0.529428 secs.
[08/30 10:50:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:50:09]  Improved gap from 0.0 to 1.5625
[08/30 10:50:10]  Improved number of small numbers from 54 to 71 out of a max of 100
[08/30 10:50:10]  Verifer returned sat in 1.086929 secs.
[08/30 10:50:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6418.247070    6298.247314 -4647.902832  6418.247070    0.095459  6298.247314        0.0  119.999756       19.999887
1    6418.247070    6398.247314 -4567.902832  6418.247070    0.007324  6398.247314        0.0   19.999756       -0.000113
2    6520.160889    6518.225672 -4567.902832  6520.160889  121.913574  6518.225672        0.0    1.935217        1.913706
3    6520.168059    6518.247314 -4469.823708  6520.168059    1.942387  6518.247314        0.0    1.920744        0.000000
4    6520.168059    6520.168059 -4371.386208  6520.168059    1.913580  6520.168059        0.0    0.000000       -1.562500
5    6522.038429    6521.730559 -4272.948730  6522.038429    1.870370  6521.730559        0.0    0.307870       -1.254652
6    6523.536114    6523.528913 -4174.747062  6523.536114    1.805556  6523.528913        0.0    0.007202       -1.555298
7    6525.237246    6525.091413 -4076.309562  6525.237246    1.708333  6525.091413        0.0    0.145833       -1.416667
8    6526.653913    6526.653913 -4076.309326  6526.653913    1.562500  6526.653913        0.0    0.000000      -99.999765
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:50:10]  --------------------------------------------------------------------------------
[08/30 10:50:10]  Iteration: 39 (1 solution, 37 counterexamples)
[08/30 10:50:16]  Generator returned sat in 4.866421 secs.
[08/30 10:50:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:16]  Improved gap from 0.0 to 1.5625
[08/30 10:50:17]  Improved number of small numbers from 54 to 73 out of a max of 100
[08/30 10:50:17]  Verifer returned sat in 1.051539 secs.
[08/30 10:50:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    6083.333496    6083.333496 -4332.989258  6083.333496    0.095215  6083.333496       0.00   0.000000       -0.000113
1    6183.335938    6183.333496 -4332.989258  6183.335938  100.002441  6183.333496       0.00   0.002441        0.002329
2    6183.336182    6183.333614 -4234.551763  6183.336182    0.002686  6183.333614       0.00   0.002567       -1.559933
3    6304.893614    6284.896114 -4234.551763  6304.893614  121.560000  6284.896114       0.00  19.997500       19.997500
4    6529.016114    6384.895996 -4234.551763  6529.016114  244.120000  6384.895996     124.12  20.000118       20.000000
5    6529.016114    6403.333496 -4154.551763  6529.016114    0.010000  6403.333496     124.12   1.562618        0.000000
6    6529.016114    6404.896114 -4056.114263  6529.016114    1.020000  6404.896114     124.12   0.000000       -1.562500
7    6532.056114    6406.458614 -3957.676763  6532.056114    3.040000  6406.458614     124.12   1.477500       -0.085000
8    6537.658614    6408.021240 -3957.676758  6537.658614    7.080000  6408.021240     124.12   5.517374      -94.482495
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:50:17]  --------------------------------------------------------------------------------
[08/30 10:50:17]  Iteration: 40 (1 solution, 38 counterexamples)
[08/30 10:50:21]  Generator returned sat in 3.369896 secs.
[08/30 10:50:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:21]  Improved gap from 0.047607421875 to 0
[08/30 10:50:21]  Improved number of small numbers from 49 to 100 out of a max of 100
[08/30 10:50:21]  Verifer returned sat in 0.265789 secs.
[08/30 10:50:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    5863.967529    5863.919678 -4113.575439  5863.967529    0.094971  5863.919678        0.0  0.047852        0.047852
1    5863.967529    5863.943604 -4113.575439  5863.967529    0.023682  5863.943604        0.0  0.023926      -99.952148
2    5963.943604    5963.919678 -4113.575439  5963.943604  100.000000  5963.919678        0.0  0.023926      -99.976074
3    6063.991211    6063.967529 -4014.599365  6063.991211  100.071533  6063.967529        0.0  0.023682       -0.952393
4    6064.967529    6064.943604 -3914.623291  6064.967529    1.000000  6064.943604        0.0  0.023926        0.000000
5    6065.943604    6065.919678 -3815.599609  6065.943604    1.000000  6065.919678        0.0  0.023926       -0.000244
6    6066.919678    6065.943848 -3716.575439  6066.919678    1.000000  6065.943848        0.0  0.975830        0.000000
7    6066.943848    6066.919922 -3617.575439  6066.943848    1.000000  6066.919922        0.0  0.023926       -0.975830
8    6067.919922    6067.919922 -3617.575439  6067.919922    1.000000  6067.919922        0.0  0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:50:22]  --------------------------------------------------------------------------------
[08/30 10:50:22]  Iteration: 41 (1 solution, 39 counterexamples)
[08/30 10:50:26]  Generator returned sat in 3.858870 secs.
[08/30 10:50:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:50:28]  Improved gap from 0.00125 to 1.5625
[08/30 10:50:28]  Improved number of small numbers from 51 to 100 out of a max of 100
[08/30 10:50:28]  Verifer returned sat in 2.082808 secs.
[08/30 10:50:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    4117.702148    4113.701904 -2363.357910  4117.702148  0.094971  4113.701904        0.0  4.000244        4.000000
1    4117.702148    4117.654541 -2268.872803  4117.702148  0.047363  4117.654541        0.0  0.047607       -1.514893
2    4120.779297    4119.217041 -2170.435303  4120.779297  3.124756  4119.217041        0.0  1.562256       -0.000244
3    4120.826904    4120.779541 -2071.997803  4120.826904  1.609863  4120.779541        0.0  0.047363       -1.515137
4    4124.123291    4122.560791 -1973.779053  4124.123291  3.343750  4122.560791        0.0  1.562500        0.000000
5    4125.685791    4124.123291 -1875.341553  4125.685791  3.125000  4124.123291        0.0  1.562500        0.000000
6    4127.138916    4125.685791 -1776.904053  4127.138916  3.015625  4125.685791        0.0  1.453125       -0.109375
7    4128.646729    4127.248291 -1678.466553  4128.646729  2.960938  4127.248291        0.0  1.398438       -0.164062
8    4130.072510    4128.810791 -1580.029053  4130.072510  2.824219  4128.810791        0.0  1.261719       -0.300781
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:50:28]  --------------------------------------------------------------------------------
[08/30 10:50:28]  Iteration: 42 (1 solution, 40 counterexamples)
[08/30 10:50:33]  Generator returned sat in 4.453526 secs.
[08/30 10:50:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:50:34]  Improved gap from 0.00125 to 100
[08/30 10:50:35]  Improved number of small numbers from 54 to 66 out of a max of 100
[08/30 10:50:35]  Verifer returned sat in 1.055587 secs.
[08/30 10:50:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4123.196289    4103.196420 -1775.509981  4123.196289    0.094727  4103.196420     0.0000   19.999869       19.999869
1    4123.196289    4103.196533 -1775.509981  4123.196289   19.997559  4103.196533     0.0000   19.999756      -80.000131
2    4243.894775    4241.874753 -1775.509981  4243.894775  140.698242  4241.874753     0.0000    2.020022      -59.301644
3    4391.884753    4303.196420 -1775.509981  4391.884753  150.010000  4303.196420     0.0000   88.688333      -11.311667
4    4752.206420    4403.196420 -1775.509981  4752.206420  449.010000  4403.196420   229.0100  120.000000       20.000000
5    4752.206420    4503.196420 -1775.509981  4752.206420    0.010000  4503.196420   229.0100   20.000000      -80.000000
6    5123.198920    4703.196289 -1775.509981  5123.198920  390.992500  4703.196289   400.0025   20.000131       20.000000
7    5123.198920    4703.196420 -1775.509981  5123.198920    0.010000  4703.196420   400.0025   20.000000      -80.000000
8    5552.208920    4803.196533 -1775.509981  5552.208920  449.010000  4803.196533   629.0125  119.999887       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=160001/400.[0m
[08/30 10:50:35]  --------------------------------------------------------------------------------
[08/30 10:50:35]  Iteration: 43 (1 solution, 41 counterexamples)
[08/30 10:50:37]  Generator returned sat in 1.188230 secs.
[08/30 10:50:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:37]  Verifer returned unsat in 0.324426 secs.
[08/30 10:50:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:37]  --------------------------------------------------------------------------------
[08/30 10:50:37]  Iteration: 44 (2 solution, 41 counterexamples)
[08/30 10:50:38]  Generator returned sat in 0.186750 secs.
[08/30 10:50:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:38]  Verifer returned unsat in 0.315166 secs.
[08/30 10:50:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:38]  --------------------------------------------------------------------------------
[08/30 10:50:38]  Iteration: 45 (3 solution, 41 counterexamples)
[08/30 10:50:40]  Generator returned sat in 1.505708 secs.
[08/30 10:50:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:41]  Verifer returned unsat in 0.337783 secs.
[08/30 10:50:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:41]  --------------------------------------------------------------------------------
[08/30 10:50:41]  Iteration: 46 (4 solution, 41 counterexamples)
[08/30 10:50:42]  Generator returned sat in 0.871448 secs.
[08/30 10:50:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:43]  Improved gap from 41.00875 to 100
[08/30 10:50:43]  Improved number of small numbers from 54 to 64 out of a max of 100
[08/30 10:50:43]  Verifer returned sat in 0.953095 secs.
[08/30 10:50:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4691.299072    4653.301420 -1356.049981  4691.299072    0.094727  4653.301420    0.00000   37.997653        0.002653
1    4691.299072    4691.296420 -1356.049981  4691.299072    0.002686  4691.296420    0.00000    0.002653      -99.997347
2    4891.298920    4791.296631 -1356.049981  4891.298920  200.002500  4791.296631    0.00000  100.002289        0.002500
3    4891.298920    4891.296420 -1356.049981  4891.298920  100.000000  4891.296420    0.00000    0.002500      -99.997500
4    5111.293920    5091.296420 -1356.049981  5111.293920  219.997500  5091.296420    0.00000   19.997500       19.997500
5    5512.293920    5191.296387 -1356.049981  5512.293920  420.997500  5191.296387  300.99750   20.000033       20.000000
6    5512.293920    5191.296420 -1356.049981  5512.293920    0.010000  5191.296420  300.99750   20.000000      -80.000000
7    5643.303920    5342.303920 -1356.049981  5643.303920  151.010000  5342.303920  300.99750    0.002500      -48.990000
8    5920.815170    5391.296631 -1356.049981  5920.815170  277.513750  5391.296631  409.51875  119.999789       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=65523/160.[0m
[08/30 10:50:43]  --------------------------------------------------------------------------------
[08/30 10:50:43]  Iteration: 47 (4 solution, 42 counterexamples)
[08/30 10:50:49]  Generator returned sat in 5.289097 secs.
[08/30 10:50:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:50:50]  Verifer returned unsat in 0.195256 secs.
[08/30 10:50:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:50:50]  --------------------------------------------------------------------------------
[08/30 10:50:50]  Iteration: 48 (5 solution, 42 counterexamples)
[08/30 10:50:51]  Generator returned sat in 0.868515 secs.
[08/30 10:50:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:50:51]  Verifer returned unsat in 0.294323 secs.
[08/30 10:50:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:50:51]  --------------------------------------------------------------------------------
[08/30 10:50:51]  Iteration: 49 (6 solution, 42 counterexamples)
[08/30 10:50:52]  Generator returned sat in 0.282855 secs.
[08/30 10:50:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:50:53]  Verifer returned unsat in 0.511577 secs.
[08/30 10:50:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:50:53]  --------------------------------------------------------------------------------
[08/30 10:50:53]  Iteration: 50 (7 solution, 42 counterexamples)
[08/30 10:50:54]  Generator returned sat in 0.235312 secs.
[08/30 10:50:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:54]  Verifer returned unsat in 0.516653 secs.
[08/30 10:50:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:54]  --------------------------------------------------------------------------------
[08/30 10:50:54]  Iteration: 51 (8 solution, 42 counterexamples)
[08/30 10:50:58]  Generator returned sat in 2.726539 secs.
[08/30 10:50:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:58]  Verifer returned unsat in 0.104485 secs.
[08/30 10:50:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:50:58]  --------------------------------------------------------------------------------
[08/30 10:50:58]  Iteration: 52 (9 solution, 42 counterexamples)
[08/30 10:51:04]  Generator returned sat in 5.250249 secs.
[08/30 10:51:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:04]  Improved gap from 0.0 to 0
[08/30 10:51:05]  Improved number of small numbers from 54 to 72 out of a max of 100
[08/30 10:51:05]  Verifer returned sat in 0.897888 secs.
[08/30 10:51:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    4767.885986    4767.885742 -1456.048731  4767.885986    0.094482  4767.885742      0.000   0.000244        0.000220
1    4867.886963    4867.884277 -1456.048731  4867.886963  100.001221  4867.884277      0.000   0.002686        0.001197
2    4867.886963    4867.885766 -1356.049981  4867.886963    0.001221  4867.885766      0.000   0.001197       -0.000053
3    4967.888266    4967.887016 -1356.049981  4967.888266  100.002500  4967.887016      0.000   0.001250        0.001250
4    5167.892016    5067.886963 -1356.049981  5167.892016  200.005000  5067.886963     80.005  20.000053       20.000000
5    5167.892016    5087.865723 -1276.049981  5167.892016    0.010000  5087.865723     80.005   0.021294        0.000000
6    5167.892016    5087.887016 -1176.049981  5167.892016    0.020000  5087.887016     80.005   0.000000        0.000000
7    5167.932016    5087.887016 -1076.090088  5167.932016    0.040000  5087.887016     80.005   0.040000       -0.000107
8    5167.972016    5087.927246 -1076.090088  5167.972016    0.080000  5087.927246     80.005   0.039770      -99.960107
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:51:05]  --------------------------------------------------------------------------------
[08/30 10:51:05]  Iteration: 53 (9 solution, 43 counterexamples)
[08/30 10:51:07]  Generator returned sat in 1.789361 secs.
[08/30 10:51:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:08]  Improved gap from 0.0 to 0
[08/30 10:51:09]  Improved number of small numbers from 54 to 72 out of a max of 100
[08/30 10:51:09]  Verifer returned sat in 1.304747 secs.
[08/30 10:51:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4850.559326    4730.559570 -1456.048731  4850.559326    0.094238  4730.559570    0.00000  119.999756       19.999868
1    4850.559326    4830.559459 -1456.048584  4850.559326    0.001465  4830.559459    0.00000   19.999868      -79.999985
2    4930.560709    4930.559326 -1356.049981  4930.560709  100.001250  4930.559326    0.00000    0.001382        0.000000
3    5050.559326    4970.561959 -1356.049981  5050.559326  120.000000  4970.561959    0.00000   79.997368       19.998618
4    5150.561959    5130.560547 -1356.049981  5150.561959  180.000000  5130.560547    0.00125   20.000162       20.000000
5    5150.561959    5150.559459 -1276.062256  5150.561959    0.010000  5150.559459    0.00125    0.001250       -0.012275
6    5150.575709    5150.573209 -1176.063731  5150.575709    0.015000  5150.573209    0.00125    0.001250        0.000000
7    5150.596959    5150.574459 -1076.085205  5150.596959    0.022500  5150.574459    0.00125    0.021250       -0.000224
8    5150.609459    5150.595947 -1076.085205  5150.609459    0.033750  5150.595947    0.00125    0.012261      -99.987724
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:51:09]  --------------------------------------------------------------------------------
[08/30 10:51:09]  Iteration: 54 (9 solution, 44 counterexamples)
[08/30 10:51:11]  Generator returned sat in 1.769635 secs.
[08/30 10:51:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:12]  Verifer returned unsat in 0.759696 secs.
[08/30 10:51:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:12]  --------------------------------------------------------------------------------
[08/30 10:51:12]  Iteration: 55 (10 solution, 44 counterexamples)
[08/30 10:51:13]  Generator returned sat in 0.577154 secs.
[08/30 10:51:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:14]  Verifer returned unsat in 0.391809 secs.
[08/30 10:51:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:14]  --------------------------------------------------------------------------------
[08/30 10:51:14]  Iteration: 56 (11 solution, 44 counterexamples)
[08/30 10:51:15]  Generator returned sat in 0.341331 secs.
[08/30 10:51:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:15]  Verifer returned unsat in 0.268731 secs.
[08/30 10:51:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:15]  --------------------------------------------------------------------------------
[08/30 10:51:15]  Iteration: 57 (12 solution, 44 counterexamples)
[08/30 10:51:16]  Generator returned sat in 0.246496 secs.
[08/30 10:51:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:17]  Verifer returned unsat in 0.302852 secs.
[08/30 10:51:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:17]  --------------------------------------------------------------------------------
[08/30 10:51:17]  Iteration: 58 (13 solution, 44 counterexamples)
[08/30 10:51:17]  Generator returned sat in 0.293615 secs.
[08/30 10:51:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:18]  Improved gap from 0.047119140625 to 100
[08/30 10:51:19]  Improved number of small numbers from 52 to 72 out of a max of 100
[08/30 10:51:19]  Verifer returned sat in 1.137390 secs.
[08/30 10:51:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5430.981201    5310.981445 -1456.048731  5430.981201    0.094238  5310.981445    0.000000  119.999756       19.999985
1    5430.981201    5410.981216 -1456.048731  5430.981201    0.046875  5410.981216    0.000000   19.999985      -80.000015
2    5630.934097    5510.981445 -1456.048731  5630.934097  219.952881  5510.981445    0.000000  119.952651       19.952881
3    5630.934097    5610.981445 -1456.048731  5630.934097   69.952881  5610.981445    0.000000   19.952651      -80.047119
4    5830.934326    5810.981216 -1456.048731  5830.934326  219.952881  5810.981216    0.000000   19.953110       19.953110
5    6230.934097    5810.981445 -1456.048731  6230.934097  419.952881  5810.981445  299.952881  119.999771       20.000000
6    6230.934097    5910.981445 -1456.048731  6230.934097    1.000000  5910.981445  299.952881   19.999771      -80.000000
7    6361.934326    6057.044041 -1456.048731  6361.934326  151.000000  6057.044041  299.952881    4.937404      -48.999771
8    6631.028335    6210.981201 -1456.048731  6631.028335  274.031413  6210.981201  400.047119   20.000015       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638593/4096.[0m
[08/30 10:51:19]  --------------------------------------------------------------------------------
[08/30 10:51:19]  Iteration: 59 (13 solution, 45 counterexamples)
[08/30 10:51:23]  Generator returned sat in 3.859377 secs.
[08/30 10:51:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:24]  Verifer returned unsat in 0.201630 secs.
[08/30 10:51:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:24]  --------------------------------------------------------------------------------
[08/30 10:51:24]  Iteration: 60 (14 solution, 45 counterexamples)
[08/30 10:51:25]  Generator returned sat in 0.444745 secs.
[08/30 10:51:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:25]  Verifer returned unsat in 0.124622 secs.
[08/30 10:51:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:25]  --------------------------------------------------------------------------------
[08/30 10:51:25]  Iteration: 61 (15 solution, 45 counterexamples)
[08/30 10:51:26]  Generator returned sat in 0.523239 secs.
[08/30 10:51:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:51:26]  Improved gap from 0.0025 to 100
[08/30 10:51:27]  Improved number of small numbers from 54 to 66 out of a max of 100
[08/30 10:51:27]  Verifer returned sat in 0.914137 secs.
[08/30 10:51:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5296.905762    5236.910826 -1456.048731  5296.905762    0.094238  5236.910826     0.0000   59.994936       19.999936
1    5296.905762    5276.905826 -1456.048731  5296.905762    0.002686  5276.905826     0.0000   19.999936      -80.000064
2    5476.908326    5476.905762 -1456.048731  5476.908326  200.002500  5476.905762     0.0000    0.002564        0.002500
3    5576.905762    5476.905826 -1456.048731  5576.905762  100.000000  5476.905826     0.0000   99.999936       -0.000064
4    5696.903326    5676.905826 -1456.048731  5696.903326  219.997500  5676.905826     0.0000   19.997500       19.997500
5    6096.903326    5776.905762 -1456.048731  6096.903326  419.997500  5776.905762   299.9975   20.000064       20.000000
6    6096.903326    5776.905826 -1456.048731  6096.903326    0.010000  5776.905826   299.9975   20.000000      -80.000000
7    6226.913326    5923.569160 -1456.048731  6226.913326  150.010000  5923.569160   299.9975    3.346667      -49.990000
8    6496.908326    5976.906006 -1456.048731  6496.908326  273.341667  5976.906006   400.0025  119.999820       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:51:27]  --------------------------------------------------------------------------------
[08/30 10:51:27]  Iteration: 62 (15 solution, 46 counterexamples)
[08/30 10:51:31]  Generator returned sat in 2.881458 secs.
[08/30 10:51:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:31]  Verifer returned unsat in 0.406309 secs.
[08/30 10:51:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:31]  --------------------------------------------------------------------------------
[08/30 10:51:31]  Iteration: 63 (16 solution, 46 counterexamples)
[08/30 10:51:32]  Generator returned sat in 0.316963 secs.
[08/30 10:51:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:33]  Verifer returned unsat in 0.427643 secs.
[08/30 10:51:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:33]  --------------------------------------------------------------------------------
[08/30 10:51:33]  Iteration: 64 (17 solution, 46 counterexamples)
[08/30 10:51:37]  Generator returned sat in 3.803520 secs.
[08/30 10:51:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:38]  Verifer returned unsat in 0.122359 secs.
[08/30 10:51:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:38]  --------------------------------------------------------------------------------
[08/30 10:51:38]  Iteration: 65 (18 solution, 46 counterexamples)
[08/30 10:51:43]  Generator returned sat in 5.088223 secs.
[08/30 10:51:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:44]  Improved gap from 0.0 to 4.6875
[08/30 10:51:44]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:51:44]  Verifer returned sat in 0.395169 secs.
[08/30 10:51:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    6182.187988    6182.187744 -2361.330811  6182.187988    0.093994  6182.187744     0.0000   0.000244        0.000000
1    6302.125244    6282.187988 -2361.330811  6302.125244  119.937500  6282.187988     0.0000  19.937256       19.937256
2    6382.187744    6377.500488 -2361.330811  6382.187744   99.999756  6377.500488     0.0000   4.687256       -0.000244
3    6502.125488    6482.187988 -2361.330811  6502.125488  124.625000  6482.187988     0.0000  19.937500       19.937500
4    6670.125488    6582.187988 -2361.330811  6670.125488  187.937500  6582.187988    67.9375  20.000000       20.000000
5    6670.125488    6597.500488 -2281.330811  6670.125488    1.000000  6597.500488    67.9375   4.687500        0.000000
6    6670.125488    6602.187988 -2186.018311  6670.125488    2.500000  6602.187988    67.9375   0.000000       -4.687500
7    6674.875488    6606.875488 -2090.705811  6674.875488    4.750000  6606.875488    67.9375   0.062500       -4.625000
8    6682.937988    6615.000244 -2090.705566  6682.937988    8.125000  6615.000244    67.9375   0.000244      -96.562256
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:51:44]  --------------------------------------------------------------------------------
[08/30 10:51:44]  Iteration: 66 (18 solution, 47 counterexamples)
[08/30 10:51:46]  Generator returned sat in 0.807473 secs.
[08/30 10:51:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:46]  Verifer returned unsat in 0.079278 secs.
[08/30 10:51:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:46]  --------------------------------------------------------------------------------
[08/30 10:51:46]  Iteration: 67 (19 solution, 47 counterexamples)
[08/30 10:51:48]  Generator returned sat in 1.947495 secs.
[08/30 10:51:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:49]  Improved gap from 0.0 to 9.375
[08/30 10:51:49]  Improved number of small numbers from 35 to 100 out of a max of 100
[08/30 10:51:49]  Verifer returned sat in 0.564600 secs.
[08/30 10:51:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6321.984131    6201.984375 -2381.189941  6321.984131    0.093994  6201.984375   0.000000  119.999756       20.000000
1    6401.984131    6301.984375 -2381.189941  6401.984131  199.999756  6301.984375   0.000000   99.999756        0.000000
2    6402.031250    6401.984375 -2381.189941  6402.031250  100.046875  6401.984375   0.000000    0.046875      -99.952881
3    6640.078125    6601.984131 -2381.189941  6640.078125  238.093750  6601.984131  18.093994   20.000000       20.000000
4    6740.125000    6660.913574 -2381.189941  6740.125000  120.046875  6660.913574  18.140869   61.070557       20.000000
5    6740.125000    6707.275391 -2301.189941  6740.125000   61.023438  6707.275391  18.140869   14.708740        0.000000
6    6756.927979    6721.984375 -2217.992920  6756.927979   31.511719  6721.984375  18.140869   16.802734        0.000000
7    6756.927979    6738.787109 -2127.367920  6756.927979   16.755859  6738.787109  18.140869    0.000000       -9.375000
8    6766.305908    6748.162109 -2036.742920  6766.305908    9.377930  6748.162109  18.140869    0.002930       -9.372070
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:51:49]  --------------------------------------------------------------------------------
[08/30 10:51:49]  Iteration: 68 (19 solution, 48 counterexamples)
[08/30 10:51:51]  Generator returned sat in 1.107948 secs.
[08/30 10:51:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:51]  Improved gap from 0.0 to 7.8125
[08/30 10:51:52]  Improved number of small numbers from 22 to 100 out of a max of 100
[08/30 10:51:52]  Verifer returned sat in 0.541228 secs.
[08/30 10:51:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6360.115234    6360.068115 -2539.273926  6360.115234    0.093994  6360.068115   0.000000    0.047119      -99.952881
1    6580.115234    6460.068115 -2539.273926  6580.115234  220.047119  6460.068115   0.047119  120.000000       20.000000
2    6580.162109    6562.021240 -2539.273682  6580.162109  120.046875  6562.021240   0.047119   18.093750      -79.952881
3    6760.162109    6760.067871 -2539.273682  6760.162109  198.093750  6760.067871   0.047119    0.047119        0.047119
4    6860.161865    6804.439209 -2539.273682  6860.161865  100.046875  6804.439209   0.047119   55.675537        0.046875
5    6860.161865    6860.067871 -2451.482666  6860.161865   51.023438  6860.067871   0.047119    0.046875      -12.162109
6    6886.626709    6872.276855 -2365.785400  6886.626709   26.511719  6872.276855   0.047119   14.302734        0.000000
7    6886.626709    6886.579590 -2273.597900  6886.626709   14.255859  6886.579590   0.047119    0.000000       -7.812500
8    6894.754639    6894.392334 -2273.597900  6894.754639    8.127930  6894.392334   0.047119    0.315186      -99.684570
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:51:52]  --------------------------------------------------------------------------------
[08/30 10:51:52]  Iteration: 69 (19 solution, 49 counterexamples)
[08/30 10:51:55]  Generator returned sat in 1.804215 secs.
[08/30 10:51:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:55]  Verifer returned unsat in 0.158243 secs.
[08/30 10:51:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:55]  --------------------------------------------------------------------------------
[08/30 10:51:55]  Iteration: 70 (20 solution, 49 counterexamples)
[08/30 10:51:57]  Generator returned sat in 1.754911 secs.
[08/30 10:51:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:57]  Verifer returned unsat in 0.116332 secs.
[08/30 10:51:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:57]  --------------------------------------------------------------------------------
[08/30 10:51:57]  Iteration: 71 (21 solution, 49 counterexamples)
[08/30 10:51:59]  Generator returned sat in 0.359087 secs.
[08/30 10:51:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:59]  Verifer returned unsat in 0.083889 secs.
[08/30 10:51:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:51:59]  --------------------------------------------------------------------------------
[08/30 10:51:59]  Iteration: 72 (22 solution, 49 counterexamples)
[08/30 10:52:01]  Generator returned sat in 1.210845 secs.
[08/30 10:52:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:52:01]  Improved number of small numbers from 40 to 56 out of a max of 99
[08/30 10:52:01]  Verifer returned sat in 0.756204 secs.
[08/30 10:52:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5353.333008    5233.333223 -2273.5979  5353.333008    0.093750  5233.333223    0.000000  119.999785       19.999785
1    5353.333008    5353.309814 -2273.5979  5353.333008    0.023682  5353.309814    0.000000    0.023193      -80.000215
2    5553.309814    5433.333223 -2273.5979  5553.309814  200.000000  5433.333223    0.000000  119.976592       19.976592
3    5553.309814    5553.286226 -2273.5979  5553.309814    0.023682  5553.286226    0.000000    0.023589      -80.023408
4    5872.239229    5655.893718 -2273.5979  5872.239229  318.953003  5655.893718  118.906006   97.439504       20.000000
5    5934.276226    5815.346721 -2273.5979  5934.276226  159.476501  5815.346721  118.906006    0.023499      -17.963003
6    6315.266226    5862.826473 -2273.5979  6315.266226  381.013499  5862.826473  361.933003   90.506749       20.000000
7    6415.266226    6033.333223 -2273.5979  6415.266226  190.506749  6033.333223  361.933003   20.000000       20.000000
8    6771.705730    6033.333252 -2273.5979  6771.705730  376.439504  6033.333252  618.372507  119.999971       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=204581479/409600.[0m
[08/30 10:52:02]  --------------------------------------------------------------------------------
[08/30 10:52:02]  Iteration: 73 (22 solution, 50 counterexamples)
[08/30 10:52:07]  Generator returned sat in 4.074257 secs.
[08/30 10:52:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:52:07]  Improved gap from 40.0234375 to 100
[08/30 10:52:07]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 10:52:07]  Verifer returned sat in 0.276353 secs.
[08/30 10:52:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5472.239014    5450.051758 -2273.598145  5472.239014    0.093750  5450.051758    0.000000   22.187256       19.999756
1    5472.239014    5452.239258 -2273.598145  5472.239014    0.046631  5452.239258    0.000000   19.999756      -80.000244
2    5672.192139    5552.239258 -2273.598145  5672.192139  219.952881  5552.239258    0.000000  119.952881       19.952881
3    5672.192139    5652.239258 -2273.598145  5672.192139  119.906006  5652.239258    0.000000   19.952881      -80.047119
4    5872.239014    5852.239258 -2273.598145  5872.239014  219.999756  5852.239258    0.000000   19.999756       19.999756
5    6271.239014    5952.239014 -2273.598145  6271.239014  418.999756  5952.239014  298.999756   20.000244       20.000000
6    6271.239014    5952.239258 -2273.598145  6271.239014    1.000000  5952.239258  298.999756   20.000000      -80.000000
7    6401.239014    6102.192383 -2273.598145  6401.239014  150.000000  6102.192383  298.999756    0.046875      -50.000000
8    6675.168701    6152.239258 -2273.598145  6675.168701  273.976562  6152.239258  402.929443  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1650399/4096.[0m
[08/30 10:52:07]  --------------------------------------------------------------------------------
[08/30 10:52:07]  Iteration: 74 (22 solution, 51 counterexamples)
[08/30 10:52:10]  Generator returned sat in 2.192628 secs.
[08/30 10:52:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:52:10]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 10:52:10]  Verifer returned sat in 0.216144 secs.
[08/30 10:52:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5512.215576    5431.262695 -2273.598145  5512.215576    0.093750  5431.262695   39.976318   40.976562       20.000000
1    5512.215576    5472.215820 -2273.598145  5512.215576    0.023438  5472.215820   39.976318    0.023438      -80.000000
2    5692.239014    5552.239258 -2273.598145  5692.239014  180.046875  5552.239258   39.976318  100.023438        0.023438
3    5692.239014    5652.239258 -2273.598145  5692.239014    0.023438  5652.239258   39.976318    0.023438      -99.976562
4    5912.192139    5852.239258 -2273.598145  5912.192139  219.976562  5852.239258   39.976318   19.976562       19.976562
5    6271.239014    5883.750977 -2273.598145  6271.239014  379.023438  5883.750977  298.999756   88.488281       20.000000
6    6371.262451    6052.239258 -2273.598145  6371.262451  188.511719  6052.239258  299.023193   20.000000       20.000000
7    6444.518311    6145.471680 -2273.598145  6444.518311   93.255859  6145.471680  299.023193    0.023438       -6.744141
8    6736.727295    6152.239258 -2273.598145  6736.727295  292.232422  6152.239258  464.488037  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=108675/256.[0m
[08/30 10:52:11]  --------------------------------------------------------------------------------
[08/30 10:52:11]  Iteration: 75 (22 solution, 52 counterexamples)
[08/30 10:52:12]  Generator returned sat in 0.984358 secs.
[08/30 10:52:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:52:13]  Improved gap from 6.973125 to 100
[08/30 10:52:13]  Improved number of small numbers from 66 to 74 out of a max of 100
[08/30 10:52:13]  Verifer returned sat in 0.766397 secs.
[08/30 10:52:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5399.742920    5399.740332 -2273.598145  5399.742920    0.093750  5399.740332    0.000000    0.002588        0.002588
1    5399.742920    5399.740332 -2273.598145  5399.742920    0.001250  5399.740332    0.000000    0.002588      -99.997412
2    5599.740332    5499.740332 -2273.598145  5599.740332  200.000000  5499.740332    0.000000  100.000000        0.000000
3    5620.739082    5599.740332 -2273.598145  5620.739082  120.998750  5599.740332    0.000000   20.998750      -79.001250
4    5819.739082    5799.740332 -2273.598145  5819.739082  219.998750  5799.740332    0.000000   19.998750       19.998750
5    6218.739082    5899.740234 -2273.598145  6218.739082  418.998750  5899.740234  298.998750   20.000098       20.000000
6    6218.739082    5899.740332 -2273.598145  6218.739082    0.010000  5899.740332  298.998750   20.000000      -80.000000
7    6347.749082    6048.749082 -2273.598145  6347.749082  149.010000  6048.749082  298.998750    0.001250      -50.990000
8    6620.262207    6199.740234 -2273.598145  6620.262207  272.514375  6199.740234  400.521875   20.000098       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=128167/320.[0m
[08/30 10:52:14]  --------------------------------------------------------------------------------
[08/30 10:52:14]  Iteration: 76 (22 solution, 53 counterexamples)
[08/30 10:52:15]  Generator returned unsat in 0.916202 secs.
[08/30 10:52:15]  [96mNo more solutions found[0m
[08/30 10:52:15]  Final solutions:
[08/30 10:52:15]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:52:15]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:52:15]  Took 194.227713 secs.
