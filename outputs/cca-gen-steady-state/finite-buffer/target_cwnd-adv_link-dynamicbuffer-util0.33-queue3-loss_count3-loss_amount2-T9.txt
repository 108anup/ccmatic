[10/25 13:28:36]  --------------------------------------------------------------------------------
[10/25 13:28:36]  Iteration: 1 (0 solution, 0 counterexamples)
[10/25 13:28:36]  Generator returned sat in 0.005123 secs.
[10/25 13:28:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 2c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:36]  Improved gap from 0.0 to 100
[10/25 13:28:36]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 13:28:36]  Verifer returned sat in 0.297912 secs.
[10/25 13:28:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t  wasted_t  queue_t  bottle_queue_t
0       -400.000       -400.125     -400.000     0.125     0.125     -400.125        0.0              -400.125   400.125    0.125           0.125
1       -400.000       -400.000     -400.000     0.125     0.125     -400.000        0.0              -400.000   400.125    0.000         -99.875
2        500.125       -300.125      500.125   900.125   900.125     -300.125        0.0               500.250   400.125  800.250         700.250
3        500.125       -180.125      500.125   599.750   599.750     -180.125        0.0              -180.125   400.125  680.250         600.250
4        500.125       -100.000      500.125   599.875   599.875     -100.000        0.0              -100.000   400.125  600.125         500.250
5        500.125          0.000      500.125   600.000   600.000        0.000        0.0                 0.000   400.125  500.125         400.250
6        600.125        199.875      600.125   600.125   600.125      199.875        0.0               199.875   400.125  400.250         400.250
7        800.125        299.750      800.125   600.250   600.250      299.750        0.0               299.750   400.125  500.375         500.250
8        900.125        300.000      900.125   600.375   600.375      300.000        0.0               300.000   400.125  600.125         500.250
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=5603/8.[0m
[10/25 13:28:36]  --------------------------------------------------------------------------------
[10/25 13:28:36]  Iteration: 2 (0 solution, 1 counterexamples)
[10/25 13:28:37]  Generator returned sat in 0.035037 secs.
[10/25 13:28:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:37]  Improved number of small numbers from 38 to 108 out of a max of 108
[10/25 13:28:37]  Verifer returned sat in 0.367098 secs.
[10/25 13:28:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0     239.936523      39.952148   239.936523    0.124756    0.124756    39.952148   0.000000             39.952148  400.124756  199.984375      100.000244
1     239.936523     239.936279   239.936523    0.124756    0.124756   239.936279   0.000000            239.936279  400.124756    0.000244        0.000244
2     839.967285     239.936279   839.967285  600.031006  600.031006   239.936279   0.000000            839.982910  400.124756  600.031006      500.031006
3     839.967285     439.905029   839.967285  580.078125  580.078125   439.905029   0.000000            439.905029  400.124756  400.062256      400.031006
4    1039.967529     439.952148  1039.967529  600.062500  600.062500   439.952148   0.000000            439.952148  400.124756  600.015381      500.031250
5    1039.967529     639.936279  1039.967529  580.078125  580.078125   639.936279   0.000000            639.936279  400.124756  400.031250      400.031250
6    1239.998779     639.936279  1239.998779  600.062500  600.062500   639.936279   0.015625            359.889648  400.124756  600.046875      500.046875
7    1239.998779     839.905029  1239.998779  580.078125  580.078125   839.905029   0.015625            839.905029  400.124756  400.078125      400.046875
8    1439.983154     839.951904  1439.983154  600.062500  600.062500   839.951904   0.015625            839.951904  400.124756  600.015625      500.031250
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/64, 
, buffer=32003/64.[0m
[10/25 13:28:37]  --------------------------------------------------------------------------------
[10/25 13:28:37]  Iteration: 3 (0 solution, 2 counterexamples)
[10/25 13:28:37]  Generator returned sat in 0.057711 secs.
[10/25 13:28:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:38]  Improved gap from 0.0 to 32.8125
[10/25 13:28:38]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 13:28:38]  Verifer returned sat in 0.690897 secs.
[10/25 13:28:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t    queue_t  bottle_queue_t
0      39.936523      39.905273    39.936523    0.124756    0.124756    39.905273    0.00000            139.936523  400.155762    0.03125       -99.96875
1     239.936523     239.905273   239.936523  200.031250  200.031250   239.905273    0.00000            239.905273  400.155762    0.03125         0.03125
2     439.967773     339.905273   439.967773  200.062500  200.062500   339.905273    0.03125            339.905273  400.155762  100.03125       100.03125
3     439.967773     439.905273   439.967773   33.625000   33.625000   439.905273    0.03125            439.905273  400.155762    0.03125         0.03125
4     473.405273     439.936523   473.405273   33.468750   33.468750   439.936523    0.03125            439.936523  466.687012   33.43750         0.00000
5     473.405273     473.374023   473.405273   33.312500   33.312500   473.374023    0.03125            473.342773  533.874512    0.00000       -32.81250
6     506.561523     506.186523   506.561523   33.156250   33.156250   506.186523    0.03125            506.155273  601.062012    0.34375       -32.46875
7     539.217773     539.030273   539.217773   33.000000   33.000000   539.030273    0.03125            539.030273  668.218262    0.15625       -32.65625
8     571.905273     571.874023   571.905273   32.843750   32.843750   571.874023    0.03125            571.874023  668.218262    0.00000       -99.96875
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3201/32.[0m
[10/25 13:28:38]  --------------------------------------------------------------------------------
[10/25 13:28:38]  Iteration: 4 (0 solution, 3 counterexamples)
[10/25 13:28:39]  Generator returned sat in 0.101071 secs.
[10/25 13:28:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:41]  Improved gap from 0.0008333333333333334 to 15.625
[10/25 13:28:41]  Improved number of small numbers from 54 to 109 out of a max of 109
[10/25 13:28:41]  Verifer returned sat in 2.796685 secs.
[10/25 13:28:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t    queue_t  bottle_queue_t
0     343.301025     323.301270   343.301025    0.124512    0.124512   323.301270        0.0            323.301270  182.092529  19.999756       19.999756
1     438.926025     423.301270   438.926025  115.624756  115.624756   423.301270        0.0            423.301270  182.092529  15.624756       15.624756
2     438.926270     423.301270   438.926270   15.625000   15.625000   423.301270        0.0            423.238525  266.467529  15.625000        0.000000
3     438.926270     438.926270   438.926270   11.374756   11.374756   438.926270        0.0            438.926270  350.842529   0.000000      -15.625000
4     470.238525     454.613281   470.238525   31.312256   31.312256   454.613281        0.0            454.613281  435.155273  15.625244        0.000000
5     470.238525     470.238525   470.238525   11.374756   11.374756   470.238525        0.0            470.238525  519.530273   0.000000      -15.625000
6     501.550781     485.926025   501.550781   31.312256   31.312256   485.926025        0.0            485.926025  603.842773  15.624756       -0.000244
7     537.175781     501.551025   537.175781   51.249756   51.249756   501.551025        0.0            537.238037  668.218018  35.624756        0.000000
8     537.175781     537.175781   537.175781   31.312256   31.312256   537.175781        0.0            537.175781  668.218018   0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=20.[0m
[10/25 13:28:42]  --------------------------------------------------------------------------------
[10/25 13:28:42]  Iteration: 5 (0 solution, 4 counterexamples)
[10/25 13:28:42]  Generator returned sat in 0.085135 secs.
[10/25 13:28:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:42]  Verifer returned unsat in 0.378113 secs.
[10/25 13:28:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:42]  --------------------------------------------------------------------------------
[10/25 13:28:42]  Iteration: 6 (1 solution, 4 counterexamples)
[10/25 13:28:43]  Generator returned sat in 0.012708 secs.
[10/25 13:28:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:43]  Improved gap from 20.087158203125 to 100
[10/25 13:28:43]  Improved number of small numbers from 25 to 109 out of a max of 109
[10/25 13:28:43]  Verifer returned sat in 0.666249 secs.
[10/25 13:28:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0     223.342285     123.280273   223.342285    0.124512    0.124512   123.280273    0.000000            123.249023  679.685791  100.062012        0.062012
1     323.311279     323.280273   323.311279  200.031006  200.031006   323.280273    0.000000            323.280273  679.685791    0.031006        0.031006
2     423.342285     356.748291   423.342285  100.062012  100.062012   356.748291    0.000000            356.748291  679.685791   66.593994        0.062012
3     523.373291     456.655029   523.373291  166.625000  166.625000   456.655029    0.031006            456.655029  679.685791   66.687256        0.062012
4     623.342285     556.686035   623.342285  166.656250  166.656250   556.686035    0.031006            556.686035  679.685791   66.625244        0.031006
5     723.404541     656.717041   723.404541  166.687500  166.687500   656.717041    0.062256            656.717041  679.685791   66.625244        0.062012
6     823.435547     823.280029   823.435547  166.656250  166.656250   823.280029    0.093262            823.280029  679.685791    0.062256        0.062012
7     990.060791     923.280029   990.060791  166.687500  166.687500   923.280029   66.718506            923.280029  679.685791    0.062256        0.062012
8    1156.717285     923.280273  1156.717285  166.718750  166.718750   923.280273  133.375000            923.280273  679.685791  100.062012        0.062012
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=546177/4096, 
, buffer=127/2048.[0m
[10/25 13:28:44]  --------------------------------------------------------------------------------
[10/25 13:28:44]  Iteration: 7 (1 solution, 5 counterexamples)
[10/25 13:28:44]  Generator returned sat in 0.117334 secs.
[10/25 13:28:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:44]  Verifer returned unsat in 0.440705 secs.
[10/25 13:28:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:44]  --------------------------------------------------------------------------------
[10/25 13:28:44]  Iteration: 8 (2 solution, 5 counterexamples)
[10/25 13:28:44]  Generator returned sat in 0.015612 secs.
[10/25 13:28:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:45]  Verifer returned unsat in 0.522386 secs.
[10/25 13:28:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:45]  --------------------------------------------------------------------------------
[10/25 13:28:45]  Iteration: 9 (3 solution, 5 counterexamples)
[10/25 13:28:45]  Generator returned sat in 0.035019 secs.
[10/25 13:28:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:45]  Verifer returned unsat in 0.435899 secs.
[10/25 13:28:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:45]  --------------------------------------------------------------------------------
[10/25 13:28:45]  Iteration: 10 (4 solution, 5 counterexamples)
[10/25 13:28:46]  Generator returned sat in 0.212941 secs.
[10/25 13:28:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:46]  Verifer returned unsat in 0.533186 secs.
[10/25 13:28:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:46]  --------------------------------------------------------------------------------
[10/25 13:28:46]  Iteration: 11 (5 solution, 5 counterexamples)
[10/25 13:28:46]  Generator returned sat in 0.035715 secs.
[10/25 13:28:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 3/2c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:47]  Improved gap from 0.0 to 100
[10/25 13:28:48]  Improved number of small numbers from 30 to 44 out of a max of 109
[10/25 13:28:48]  Verifer returned sat in 1.707721 secs.
[10/25 13:28:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    1998.324463    1498.293213  1998.324463    0.124268    0.124268  1498.293213   0.000000           1498.293213  411.623535  500.031250      500.031010
1    2098.308838    1498.293452  2098.308838  600.015625  600.015625  1498.293452   0.000000           1498.293213  411.623535  600.015385      500.015385
2    2198.340144    1638.231197  2198.340144  700.046692  700.046692  1638.231197   0.015564           1638.231197  411.623535  560.093384      500.031128
3    2298.324580    1758.246761  2298.324580  660.077820  660.077820  1758.246761   0.015564           1758.246761  411.623535  540.062256      500.015564
4    2398.355708    1838.262325  2398.355708  640.093384  640.093384  1838.262325   0.031128           1838.262325  411.623535  560.062256      500.031128
5    2498.371272    1918.277889  2498.371272  660.077820  660.077820  1918.277889   0.046692           1918.277889  411.623535  580.046692      500.031128
6    2598.386836    1998.293452  2598.386836  680.062256  680.062256  1998.293452   0.062256           1998.278076  411.623535  600.031128      500.031128
7    2698.402400    2098.309016  2698.402400  700.046692  700.046692  2098.309016   0.077820           2098.309016  411.623535  600.015564      500.031128
8    2818.417964    2198.308838  2818.417964  720.031128  720.031128  2198.308838  20.093384           2198.308838  411.623535  600.015743      500.031128
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=82175/4096, 
, buffer=4096255/8192.[0m
[10/25 13:28:49]  --------------------------------------------------------------------------------
[10/25 13:28:49]  Iteration: 12 (5 solution, 6 counterexamples)
[10/25 13:28:49]  Generator returned sat in 0.369381 secs.
[10/25 13:28:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:50]  Improved number of small numbers from 32 to 108 out of a max of 108
[10/25 13:28:50]  Verifer returned sat in 0.492328 secs.
[10/25 13:28:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    1558.728516     858.728271  1558.728516    0.124268    0.124268   858.728271    0.000000            858.728271  411.623291  700.000244      600.031006
1    1658.697266     958.697510  1658.697266  799.968994  799.968994   958.697510    0.000000            958.666504  411.623291  699.999756      599.999756
2    1758.759521    1058.728516  1758.759521  800.062012  800.062012  1058.728516    0.031006           1058.728516  411.623291  700.000000      600.031006
3    1858.728271    1178.666504  1858.728271  799.968750  799.968750  1178.666504    0.031006           1178.666504  411.623291  680.030762      599.999756
4    1958.697510    1298.728516  1958.697510  780.000000  780.000000  1298.728516    0.031006           1298.728516  411.623291  659.937988      599.968994
5    2058.790771    1458.697266  2058.790771  760.031250  760.031250  1458.697266    0.062256           1458.697266  411.623291  600.031250      600.031006
6    2238.759521    1558.697510  2238.759521  780.000000  780.000000  1558.697510   80.031006           1558.697510  411.623291  600.031006      600.031006
7    2438.697266    1578.759521  2438.697266  799.968750  799.968750  1578.759521  179.968750           1578.759521  411.623291  679.968994      600.031006
8    2538.728271    1658.728271  2538.728271  780.000000  780.000000  1658.728271  179.999756           1658.728271  411.623291  700.000244      600.031006
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=5759/32, 
, buffer=2457727/4096.[0m
[10/25 13:28:50]  --------------------------------------------------------------------------------
[10/25 13:28:50]  Iteration: 13 (5 solution, 7 counterexamples)
[10/25 13:28:50]  Generator returned sat in 0.089265 secs.
[10/25 13:28:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:51]  Verifer returned unsat in 0.417549 secs.
[10/25 13:28:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:51]  --------------------------------------------------------------------------------
[10/25 13:28:51]  Iteration: 14 (6 solution, 7 counterexamples)
[10/25 13:28:51]  Generator returned sat in 0.018580 secs.
[10/25 13:28:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:52]  Improved gap from 0.0 to 28.125
[10/25 13:28:53]  Improved number of small numbers from 34 to 109 out of a max of 109
[10/25 13:28:53]  Verifer returned sat in 1.890674 secs.
[10/25 13:28:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    1261.258789    1061.258789  1261.258789    0.124023    0.124023  1061.258789    0.00000           1161.290039  411.623291  200.000000      100.000000
1    1261.258789    1233.134033  1261.258789    0.031250    0.031250  1233.134033    0.00000           1233.134033  411.623291   28.124756        0.000000
2    1489.415039    1361.258789  1489.415039  256.281006  256.281006  1361.258789    0.03125           1361.258789  411.623291  128.125000      128.125000
3    1489.415039    1441.914307  1489.415039   47.407471   47.407471  1441.914307    0.03125           1441.914307  411.623291   47.469482       28.125000
4    1489.415039    1461.258789  1489.415039   47.438477   47.438477  1461.258789    0.03125           1461.228027  483.498291   28.125000        0.000000
5    1508.759521    1489.414795  1508.759521   47.469482   47.469482  1489.414795    0.03125           1489.414795  555.342285   19.313477       -8.811523
6    1536.946533    1517.570801  1536.946533   47.500488   47.500488  1517.570801    0.03125           1517.570801  627.186279   19.344482       -8.780518
7    1565.071533    1545.727051  1565.071533   47.469482   47.469482  1545.727051    0.03125           1545.727051  699.030029   19.313232       -8.811768
8    1593.196777    1573.883057  1593.196777   47.438477   47.438477  1573.883057    0.03125           1573.883057  770.873779   19.282471       -8.842773
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1025/8.[0m
[10/25 13:28:53]  --------------------------------------------------------------------------------
[10/25 13:28:53]  Iteration: 15 (6 solution, 8 counterexamples)
[10/25 13:28:54]  Generator returned unsat in 0.303256 secs.
[10/25 13:28:54]  [96mNo more solutions found[0m
[10/25 13:28:54]  Final solutions:
[10/25 13:28:54]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:54]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:54]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:54]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:54]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:54]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = c_f[0][t-1] - alpha
[0m
[10/25 13:28:54]  Took 18.184746 secs.
