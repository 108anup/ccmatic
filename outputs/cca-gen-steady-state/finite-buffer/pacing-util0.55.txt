[10/19 11:32:39]  --------------------------------------------------------------------------------
[10/19 11:32:39]  Iteration: 1 (0 solution, 0 counterexamples)
[10/19 11:32:39]  Generator returned sat in 0.005217 secs.
[10/19 11:32:39]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 11:32:39]  Improved gap from 0.0 to 100
[10/19 11:32:39]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 11:32:39]  Verifer returned sat in 0.397755 secs.
[10/19 11:32:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t   losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0     -225.84375     -225.84375  176.3125   -225.84375      0.06250      0.06250   -225.84375      0.0000            -225.84375    0.0000       -49.53125
1      -77.18750      -77.18750  176.3125    -77.18750    148.65625    148.65625    -77.18750      0.0000             -77.18750    0.0000        -0.87500
2       23.68750       23.62500  176.3125     23.68750    100.87500    100.87500     23.62500      0.0000              23.62500    0.0625         0.00000
3       23.68750       23.68750  176.3125     23.68750      0.06250      0.06250     23.68750      0.0000              23.68750    0.0000      -100.00000
4      523.87500      123.75000  176.3125    523.87500    500.18750   1001.37500    123.75000      0.0625             123.75000  400.0625       300.12500
5     1527.06250      223.75000  176.3125   1527.06250   1403.25000   2807.50000    223.75000    903.2500             223.75000  400.0625       300.12500
6     4334.75000      323.68750  176.3125   4334.75000   3207.75000   6416.50000    323.68750   3610.9375             723.87500  400.1250       300.12500
7    10951.12500      423.75000  176.3125  10951.12500   7016.50000  14034.00000    423.75000  10127.3125             423.75000  400.0625       300.12500
8    25185.06250      523.68750  176.3125  25185.06250  14634.00000  29269.00000    523.68750  24261.2500             923.87500  400.1250       300.12500
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=388179/16, 
, buffer=2401/8.[0m
[10/19 11:32:40]  --------------------------------------------------------------------------------
[10/19 11:32:40]  Iteration: 2 (0 solution, 1 counterexamples)
[10/19 11:32:40]  Generator returned sat in 0.099865 secs.
[10/19 11:32:40]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:40]  Improved gap from 0.0 to 0
[10/19 11:32:40]  Improved number of small numbers from 106 to 114 out of a max of 114
[10/19 11:32:40]  Verifer returned sat in 0.349520 secs.
[10/19 11:32:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0     -77.188477     -77.188477   77.188232   -77.188477  0.062256  0.062256   -77.188477        0.0            -77.188477  0.000000        0.000000
1     -77.187500     -77.187744  177.187012   -77.187500  0.000977  0.000977   -77.187744        0.0            -77.187744  0.000244       -0.000244
2     -76.535645     -76.536389  276.526367   -76.535645  0.652100  0.652100   -76.536389        0.0            -76.536389  0.000744       -0.009033
3     -76.525556     -76.526389  376.525146   -76.525556  0.010833  0.010833   -76.526389        0.0            -76.526389  0.000833       -0.000165
4     -76.516389     -76.524722  476.516113   -76.516389  0.010000  0.010000   -76.524722        0.0            -76.524722  0.008333       -0.000031
5     -76.514722     -76.515556  576.506104   -76.514722  0.010000  0.010000   -76.515556        0.0            -76.515556  0.000833       -0.008375
6     -76.505556     -76.505556  676.505127   -76.505556  0.010000  0.010000   -76.505556        0.0            -76.505556  0.000000       -0.000184
7     -76.495556     -76.504722  776.495117   -76.495556  0.010000  0.010000   -76.504722        0.0            -76.504722  0.009167       -0.000194
8     -76.494722     -76.495361  776.495361   -76.494722  0.010000  0.010000   -76.495361        0.0            923.874512  0.000639      -99.999117
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3/2048.[0m
[10/19 11:32:41]  --------------------------------------------------------------------------------
[10/19 11:32:41]  Iteration: 3 (0 solution, 2 counterexamples)
[10/19 11:32:41]  Generator returned sat in 0.132410 secs.
[10/19 11:32:41]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:41]  Improved gap from 0.0311279296875 to 100
[10/19 11:32:42]  Improved number of small numbers from 41 to 52 out of a max of 114
[10/19 11:32:42]  Verifer returned sat in 1.177973 secs.
[10/19 11:32:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -177.187744    -177.187988  77.203064  -177.187744     0.062256     0.062256  -177.187988     0.000000           -177.187988    0.000244      -99.984436
1     -77.172363     -77.187744  77.203064   -77.172363   100.015625   100.015625   -77.187744     0.000000            -77.187744    0.015381      -99.969055
2     122.796631     122.781128  77.203064   122.796631   199.984375   199.984375   122.781128     0.000000            122.781128    0.015503       -0.000061
3     565.843384     122.796692  77.203064   565.843384   443.062256   443.062256   122.796692     0.015564            122.781006  443.031128      343.031128
4     787.405640     322.796692  77.203064   787.405640   664.593384   995.890076   322.796692   121.577820            322.796692  343.031128      343.031128
5    1441.264587     422.796692  77.203064  1441.264587   996.890076  1494.335114   422.796692   675.436768            422.796692  343.031128      343.031128
6    2593.568573     465.812256  77.203064  2593.568573  1495.335114  2242.002670   465.812256  1727.740753            465.812256  400.015564      343.031128
7    4436.555679     622.796692  77.203064  4436.555679  2243.002670  3363.504005   622.796692  3470.727859            622.796692  343.031128      343.031128
8    7458.028557     622.796692  77.203064  7458.028557  3364.504005  5045.756008   622.796692  6392.200737           1065.843262  443.031128      343.031128
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=821903087/131072, 
, buffer=2810111/8192.[0m
[10/19 11:32:42]  --------------------------------------------------------------------------------
[10/19 11:32:42]  Iteration: 4 (0 solution, 3 counterexamples)
[10/19 11:32:43]  Generator returned sat in 0.419455 secs.
[10/19 11:32:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:43]  Improved gap from 0.0 to 0
[10/19 11:32:44]  Improved number of small numbers from 57 to 68 out of a max of 114
[10/19 11:32:44]  Verifer returned sat in 1.520562 secs.
[10/19 11:32:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3893.483643    3793.483682 -3893.483926  3893.483643     0.062256    0.062256  3793.483682     0.0000           3893.486084   99.999960       -0.000040
1    3893.483682    3893.483682 -3793.483926  3893.483682   100.000000  100.000000  3893.483682     0.0000           3893.486084    0.000000        0.000000
2    4209.458682    3993.483682 -3793.483926  4209.458682   315.975000  315.975000  3993.483682     0.0025           3993.483682  215.972500      215.972500
3    4309.461182    4089.498682 -3793.483926  4309.461182   315.975000  315.975000  4089.498682     0.0050           4089.498682  219.957500      215.972500
4    4309.471182    4093.486182 -3793.483926  4309.471182   610.990000    0.010000  4093.486182     0.0050           4093.486182  215.980000      115.982500
5    4309.481182    4193.483682 -3793.483926  4309.481182   810.992500    0.010000  4193.483682     0.0050           4293.486084  115.992500       15.992500
6    4309.491182    4309.486182 -3709.486572  4309.491182  1010.992500    0.010000  4309.486182     0.0050           4309.486182    0.000000       -0.000146
7    4309.501182    4309.488682 -3609.496582  4309.501182  1230.980000    0.010000  4309.488682     0.0050           4309.488682    0.007500       -0.000156
8    4309.511182    4309.496338 -3609.496338  4309.511182  1446.982500    0.010000  4309.496338     0.0050           4309.508545    0.009844      -99.989911
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=86389/400.[0m
[10/19 11:32:45]  --------------------------------------------------------------------------------
[10/19 11:32:45]  Iteration: 5 (0 solution, 4 counterexamples)
[10/19 11:32:46]  Generator returned sat in 1.444264 secs.
[10/19 11:32:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:32:47]  Improved gap from 98.999609375 to 100
[10/19 11:32:47]  Improved number of small numbers from 66 to 70 out of a max of 114
[10/19 11:32:47]  Verifer returned sat in 0.923968 secs.
[10/19 11:32:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3893.484375    3793.483740 -3609.496582  3893.484375    0.062012    0.062012  3793.483740    0.000000           3893.486084  100.000635        0.000635
1    3901.500225    3901.499834 -3609.496582  3901.500225  108.016484  108.016484  3901.499834    0.000000           3901.499834    0.000391      -91.983516
2    4093.484912    3996.486084 -3609.496582  4093.484912  191.985078  191.985078  3996.486084    0.000391           3996.486084   96.998437        0.000781
3    4093.484912    4093.483740 -3609.496582  4093.484912   96.998437   96.998437  4093.483740    0.000391           4093.483398    0.000781      -99.999219
4    4293.484131    4293.483740 -3609.496582  4293.484131  397.998438  199.999219  4293.483740    0.000391           4293.483740    0.000000        0.000000
5    4689.975303    4293.484131 -3609.496582  4689.975303  790.982344  396.491172  4293.484131  296.490781           4293.484131  100.000391        0.000781
6    4689.975303    4393.483740 -3609.496582  4689.975303    0.010000    0.010000  4393.483740  296.490781           4393.483398    0.000781      -99.999219
7    4841.480303    4493.483740 -3609.496582  4841.480303  301.010000  151.505000  4493.483740  296.490781           4593.483887   51.505781      -48.494219
8    5093.485303    4593.484131 -3609.496582  5093.485303  502.010000  252.005000  4593.484131  400.000781           4593.484131  100.000391        0.000781
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1024001/2560, 
, buffer=1/1280.[0m
[10/19 11:32:48]  --------------------------------------------------------------------------------
[10/19 11:32:48]  Iteration: 6 (0 solution, 5 counterexamples)
[10/19 11:32:48]  Generator returned sat in 0.162233 secs.
[10/19 11:32:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:32:48]  Improved gap from 0.00125 to 100
[10/19 11:32:49]  Improved number of small numbers from 60 to 68 out of a max of 114
[10/19 11:32:49]  Verifer returned sat in 1.002035 secs.
[10/19 11:32:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3586.416260    3386.418848 -3202.429287  3586.416260    0.062012    0.062012  3386.418848    0.00000           3386.418848  199.997412       99.999912
1    3586.416260    3486.416348 -3202.429287  3586.416260    0.002500    0.002500  3486.416348    0.00000           3586.418945   99.999912       -0.000088
2    4187.918848    3586.418848 -3202.429287  4187.918848  701.502500  701.502500  3586.418848    0.00000           3586.418848  601.500000      501.502500
3    4187.918848    3686.418848 -3202.429287  4187.918848  100.505000  100.505000  3686.418848    0.00000           3686.418848  501.500000      401.502500
4    4387.923848    3786.416348 -3202.429287  4387.923848  701.505000  349.752500  3786.416348    0.00250           3886.418701  601.505000      501.505000
5    4387.923848    3986.416348 -3202.429287  4387.923848    0.010000    0.020000  3986.416348    0.00250           3986.416348  401.505000      401.505000
6    4787.423848    3986.416348 -3202.429287  4787.423848  801.005000  399.502500  3986.416348  199.50250           3986.414062  601.505000      501.505000
7    4787.423848    4186.415098 -3202.429287  4787.423848    0.010000    0.020000  4186.415098  199.50250           4186.415098  401.506250      401.505000
8    5186.925098    4186.416348 -3202.429287  5186.925098  801.007500  399.503750  4186.416348  399.00375           4186.416260  601.505000      501.505000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=319201/800, 
, buffer=100301/200.[0m
[10/19 11:32:49]  --------------------------------------------------------------------------------
[10/19 11:32:49]  Iteration: 7 (0 solution, 6 counterexamples)
[10/19 11:32:50]  Generator returned sat in 0.514829 secs.
[10/19 11:32:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:50]  Improved gap from 0.0 to 0
[10/19 11:32:51]  Improved number of small numbers from 57 to 77 out of a max of 114
[10/19 11:32:51]  Verifer returned sat in 1.233816 secs.
[10/19 11:32:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3987.918945    3887.917598 -3703.930537  3987.918945     0.062012    0.062012  3887.917598        0.0           3987.919922  100.001348        0.001348
1    3987.920098    3987.918848 -3603.933105  3987.920098   100.002500  100.002500  3987.918848        0.0           3987.918848    0.001250       -0.000068
2    4287.910098    4087.920166 -3603.933105  4287.910098   299.991250  299.991250  4087.920166        0.0           4087.920166  199.989932      199.989932
3    4287.910098    4087.921348 -3603.933105  4287.910098     0.001250    0.001250  4087.921348        0.0           4087.921348  199.988750       99.989932
4    4287.920098    4187.921348 -3603.933105  4287.920098   401.009375    0.010000  4187.921348        0.0           4187.921348   99.998750       -0.000068
5    4287.930098    4287.920166 -3503.953037  4287.930098  1002.519063    0.010000  4287.920166        0.0           4287.941162    0.009932       -0.010000
6    4287.940098    4287.940098 -3403.963037  4287.940098  1904.778594    0.010000  4287.940098        0.0           4287.938965    0.000000       -0.010000
7    4287.950098    4287.950098 -3303.971924  4287.950098  3258.205391    0.010000  4287.950098        0.0           4287.951172    0.000000       -0.008887
8    4287.960098    4287.959961 -3203.973145  4287.960098  5088.365586    0.010000  4287.959961        0.0           4287.959961    0.000137       -0.000107
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=204791/1024.[0m
[10/19 11:32:52]  --------------------------------------------------------------------------------
[10/19 11:32:52]  Iteration: 8 (0 solution, 7 counterexamples)
[10/19 11:32:52]  Generator returned sat in 0.497277 secs.
[10/19 11:32:52]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:53]  Improved gap from 0.0 to 0
[10/19 11:32:53]  Improved number of small numbers from 82 to 99 out of a max of 114
[10/19 11:32:53]  Verifer returned sat in 0.887072 secs.
[10/19 11:32:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3987.922607    3887.919922 -3603.933105  3987.922607    0.062012    0.062012  3887.919922     0.0000           3887.919922  100.002686      100.002441
1    3987.922607    3987.919922 -3603.933105  3987.922607    0.002500    0.002500  3987.919922     0.0000           3987.919922    0.002686        0.002441
2    4292.703857    3987.920166 -3603.933105  4292.703857  304.783936  304.783936  3987.920166     0.0000           4087.922852  304.783691      204.783691
3    4392.708916    4172.711182 -3603.933105  4392.708916  404.788750  404.788750  4172.711182     0.0025           4172.711182  219.995234      204.786250
4    4392.708916    4287.920166 -3603.933105  4392.708916    0.010000    0.015000  4287.920166     0.0025           4287.920166  104.786250      104.786250
5    4392.708916    4387.919922 -3603.933105  4392.708916    1.015000    0.010000  4387.919922     0.0025           4387.919922    4.786494        4.786250
6    4392.708916    4387.920166 -3508.719355  4392.708916    2.522500    0.010000  4387.920166     0.0025           4387.917725    4.786250        0.000000
7    4392.708916    4392.706416 -3408.719482  4392.708916    4.783750    0.010000  4392.706416     0.0025           4392.706543    0.000000       -0.000127
8    4392.718916    4392.708740 -3408.719238  4392.718916    8.175625    0.010000  4392.708740     0.0025           4392.708740    0.007676      -99.989883
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=163829/800.[0m
[10/19 11:32:54]  --------------------------------------------------------------------------------
[10/19 11:32:54]  Iteration: 9 (0 solution, 8 counterexamples)
[10/19 11:32:55]  Generator returned sat in 1.238404 secs.
[10/19 11:32:55]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:00]  Improved gap from 0.0004166666666666667 to 50.0
[10/19 11:33:02]  Improved number of small numbers from 53 to 66 out of a max of 114
[10/19 11:33:02]  Verifer returned sat in 7.214994 secs.
[10/19 11:33:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    4081.919922    4077.416260 -3891.492197  4081.919922    0.062012    0.062012  4077.416260        0.0           4077.416260   4.503662        0.030762
1    4081.935669    4081.889160 -3847.492188  4081.935669    4.519409    4.519409  4081.889160        0.0           4137.904785   0.046509      -55.953481
2    4137.919922    4137.904663 -3797.507812  4137.919922   56.030762   56.030762  4137.904663        0.0           4137.904663   0.015259      -49.984854
3    4282.137207    4282.137207 -3797.507812  4282.137207  144.232544  144.232544  4282.137207        0.0           4282.137207   0.000000       -5.767568
4    4332.317444    4287.920166 -3747.523438  4332.317444  102.360474   50.180237  4287.920166        0.0           4287.920166  44.397278       -5.602957
5    4382.825195    4342.935669 -3702.538818  4382.825195  103.015503   50.507751  4342.935669        0.0           4342.935669  39.889526      -10.110586
6    4433.082947    4402.106201 -3661.709238  4433.082947  102.515503   50.257751  4402.106201        0.0           4402.106201  30.976746      -19.023254
7    4462.075195    4452.106201 -3611.709473  4462.075195   59.984497   28.992249  4452.106201        0.0           4452.090820   9.968994      -40.031240
8    4502.121704    4502.121582 -3561.724854  4502.121704   82.093018   40.046509  4502.121582        0.0           4502.121582   0.000122      -50.000112
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=63/2048.[0m
[10/19 11:33:03]  --------------------------------------------------------------------------------
[10/19 11:33:03]  Iteration: 10 (0 solution, 9 counterexamples)
[10/19 11:33:05]  Generator returned sat in 2.098907 secs.
[10/19 11:33:05]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:06]  Improved gap from 0.0155029296875 to 1.5625
[10/19 11:33:07]  Improved number of small numbers from 51 to 99 out of a max of 114
[10/19 11:33:07]  Verifer returned sat in 1.777641 secs.
[10/19 11:33:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2819.902832    2719.887207 -2629.490234  2819.902832     0.062012    0.062012  2719.887207    0.000000           2719.872070  100.015625        0.015625
1    2819.902832    2819.887207 -2531.052979  2819.902832     0.015625    0.015625  2819.887207    0.000000           2819.918457    0.015625       -1.547119
2    2921.621338    2821.449951 -2531.052979  2921.621338   101.734131  101.734131  2821.449951    0.000000           2921.465332  100.171387        0.171387
3    3216.135986    3021.449951 -2531.052979  3216.135986   394.686035  394.686035  3021.449951  194.499023           3021.449951    0.187012        0.187012
4    3414.291992    3121.449929 -2531.052979  3414.291992   198.343018  395.686035  3121.449929  292.655029           3121.449929    0.187034        0.187012
5    3514.276467    3121.465332 -2531.052979  3514.276467   100.171509  199.343018  3121.465332  292.655029           3121.465332  100.156106        0.171487
6    3515.276467    3221.465576 -2432.631104  3515.276467   501.358398    1.000000  3221.465576  292.655029           3221.465576    1.155862       -0.406638
7    3516.276467    3223.043435 -2334.208984  3516.276467  1203.732422    1.000000  3223.043435  292.655029           3223.043435    0.578003       -0.984519
8    3517.276467    3224.621338 -2334.208740  3517.276467  2510.058350    1.000000  3224.621338  292.655029           3224.621338    0.000100      -99.984275
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=383/2048.[0m
[10/19 11:33:07]  --------------------------------------------------------------------------------
[10/19 11:33:07]  Iteration: 11 (0 solution, 10 counterexamples)
[10/19 11:33:10]  Generator returned sat in 2.140305 secs.
[10/19 11:33:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:10]  Improved gap from 0.0155029296875 to 100
[10/19 11:33:12]  Improved number of small numbers from 43 to 56 out of a max of 114
[10/19 11:33:12]  Verifer returned sat in 2.338255 secs.
[10/19 11:33:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2633.457764    2533.457703 -2531.052979  2633.457764    0.062012    0.062012  2533.457703    0.000000           2533.442139  100.000061        0.000061
1    2633.473206    2633.457703 -2531.052979  2633.473206  100.015503  100.015503  2633.457703    0.000000           2633.442383    0.015503      -99.984497
2    2932.473206    2733.473206 -2531.052979  2932.473206  299.015503  299.015503  2733.473206    0.015503           2733.473206  198.984497       99.000000
3    3032.457703    2833.504211 -2531.052979  3032.457703  298.968994  298.968994  2833.504211    0.015503           2833.504211  198.937988       98.984497
4    3132.488708    3018.457703 -2531.052979  3132.488708  298.968994  148.484497  3018.457703    0.031006           3018.457703  114.000000       99.000000
5    3133.488708    3033.457764 -2531.052979  3133.488708  725.984497    1.000000  3033.457764    0.031006           3033.457764   99.999939        0.000000
6    3495.480957    3174.873718 -2531.052979  3495.480957  725.984497  361.992249  3174.873718  163.023254           3174.873718  157.583984       99.000000
7    3496.480957    3233.473389 -2531.052979  3496.480957  874.046509    1.000000  3233.473389  163.023254           3233.473389   99.984314        0.000000
8    3932.504211    3333.473145 -2531.052979  3932.504211  874.046509  436.023254  3333.473145  400.046509           3333.473145  198.984558       99.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=3276927/8192, 
, buffer=99.[0m
[10/19 11:33:13]  --------------------------------------------------------------------------------
[10/19 11:33:13]  Iteration: 12 (0 solution, 11 counterexamples)
[10/19 11:33:19]  Generator returned sat in 6.603915 secs.
[10/19 11:33:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:20]  Improved gap from 0.0 to 100
[10/19 11:33:21]  Improved number of small numbers from 75 to 85 out of a max of 114
[10/19 11:33:21]  Verifer returned sat in 1.078898 secs.
[10/19 11:33:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2633.457520    2633.457520 -2631.021973  2633.457520     0.062012    0.062012  2633.457520    0.000000           2633.457520    0.000000      -99.968994
1    2833.426270    2733.426514 -2631.021973  2833.426270   199.968750  199.968750  2733.426514    0.000000           2733.426514   99.999756       -0.000244
2    2933.426270    2833.426514 -2631.021973  2933.426270   199.999756  199.999756  2833.426514    0.000000           2933.457275   99.999756       -0.000244
3    3495.633219    2933.426514 -2631.021973  3495.633219   662.206706  662.206706  2933.426514   63.175700           2933.395508  499.031006      399.031006
4    3496.633219    3033.426514 -2631.021973  3496.633219  1594.248047    1.000000  3033.426514   63.175700           3433.488281  400.031006      300.031006
5    3894.695231    3133.457520 -2631.021973  3894.695231   798.124023  398.062012  3133.457520  262.237712           3133.457520  499.000000      399.031006
6    3895.695231    3233.426514 -2631.021973  3895.695231  1798.248047    1.000000  3233.426514  262.237712           3633.488525  400.031006      300.031006
7    4344.757243    3431.457520 -2631.021973  4344.757243   900.124023  449.062012  3431.457520  512.299723           3431.457520  401.000000      399.031006
8    4345.757243    3433.426514 -2631.021973  4345.757243  2147.248047    1.000000  3433.426514  512.299723           3433.426514  400.031006      300.031006
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=459903/1024, 
, buffer=1634431/4096.[0m
[10/19 11:33:21]  --------------------------------------------------------------------------------
[10/19 11:33:21]  Iteration: 13 (0 solution, 12 counterexamples)
[10/19 11:33:23]  Generator returned sat in 1.469955 secs.
[10/19 11:33:23]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 11:33:25]  Improved gap from 0.0 to 54.6875
[10/19 11:33:27]  Improved number of small numbers from 28 to 38 out of a max of 114
[10/19 11:33:27]  Verifer returned sat in 4.350533 secs.
[10/19 11:33:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3032.522461    3032.497520 -2765.759229  3032.522461    0.062012    0.062012  3032.497520      0.000           3032.472412    0.024941      -99.975059
1    3213.497520    3213.472520 -2765.759229  3213.497520  181.000000  181.000000  3213.472520      0.000           3213.472520    0.025000      -19.000000
2    3386.310020    3268.560020 -2765.759229  3386.310020  172.837500  172.837500  3268.560020      0.000           3268.560020  117.750000       53.812500
3    3486.360020    3432.497520 -2765.759229  3486.360020  217.800000  217.800000  3432.497520      0.025           3432.497520   53.837500       53.837500
4    3487.360020    3432.522520 -2720.596924  3487.360020  217.800000    1.000000  3432.522520      0.025           3432.522520   54.812500       -0.000195
5    3543.072520    3487.360020 -2676.309326  3543.072520  110.525000  221.050000  3487.360020      0.025           3487.360020   55.687500       -0.000098
6    3597.785020    3543.072520 -2631.021729  3597.785020  110.400000  220.800000  3543.072520      0.025           3543.072520   54.687500        0.000000
7    3599.385020    3597.760020 -2585.709229  3599.385020   56.287500  112.575000  3597.760020      0.025           3597.735107    1.600000      -53.087500
8    3681.403770    3652.472412 -2585.709229  3681.403770   83.618750  167.237500  3652.472412      0.025           3652.472412   28.906357      -71.068750
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=26918750000000009/500000000000000.[0m
[10/19 11:33:28]  --------------------------------------------------------------------------------
[10/19 11:33:28]  Iteration: 14 (0 solution, 13 counterexamples)
[10/19 11:33:31]  Generator returned sat in 2.701271 secs.
[10/19 11:33:31]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:31]  Improved gap from 0.0 to 100
[10/19 11:33:32]  Improved number of small numbers from 63 to 71 out of a max of 114
[10/19 11:33:32]  Verifer returned sat in 1.380001 secs.
[10/19 11:33:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2785.318115    2685.318008 -2676.309326  2785.318115    0.061768    0.061768  2685.318008    0.000000           2685.286865  100.000107        0.000107
1    2785.318115    2785.318008 -2676.309326  2785.318115  100.000000  100.000000  2785.318008    0.000000           2785.348877    0.000107      -99.999893
2    2985.318008    2885.318008 -2676.309326  2985.318008  200.000000  200.000000  2885.318008    0.000000           2885.286865  100.000000        0.000000
3    3421.421361    3040.235326 -2676.309326  3421.421361  536.103353  536.103353  3040.235326    0.031006           3040.235326  381.155029      336.072347
4    3571.642308    3121.359349 -2676.309326  3571.642308  531.375977  265.687988  3121.359349   50.251953           3121.359349  400.031006      336.072347
5    3674.673314    3247.759349 -2676.309326  3674.673314  503.062012  251.531006  3247.759349   53.282959           3247.759349  373.631006      336.072347
6    3843.704320    3359.509740 -2676.309326  3843.704320  542.662012  271.331006  3359.509740  122.313965           3359.509740  361.880615      336.072347
7    3959.735326    3476.318008 -2676.309326  3959.735326  477.911621  238.955811  3476.318008  138.344971           3476.318008  345.072347      336.072347
8    4146.100967    3485.318008 -2676.309326  4146.100967  531.437988  265.718994  3485.318008  224.710612           3921.421387  436.072347      336.072347
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=535937/3072, 
, buffer=4129657/12288.[0m
[10/19 11:33:32]  --------------------------------------------------------------------------------
[10/19 11:33:32]  Iteration: 15 (0 solution, 14 counterexamples)
[10/19 11:33:35]  Generator returned sat in 2.117459 secs.
[10/19 11:33:35]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:35]  Improved gap from 0.0 to 1.5625
[10/19 11:33:36]  Improved number of small numbers from 34 to 114 out of a max of 114
[10/19 11:33:36]  Verifer returned sat in 0.881164 secs.
[10/19 11:33:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2881.266113    2880.079590 -2771.070801  2881.266113    0.061523    0.061523  2880.079590   0.000000           2880.079590    1.186523        1.186523
1    2981.235596    2980.079590 -2771.070801  2981.235596  101.156006  101.156006  2980.079590   0.000000           2980.079590    1.156006        1.156006
2    2981.672852    2980.110596 -2672.664307  2981.672852    1.593262    1.593262  2980.110596   0.000000           2980.110596    1.562256       -0.000244
3    3083.328125    3081.672852 -2672.664307  3083.328125  103.217529  103.217529  3081.672852   0.468506           3081.672852    1.186768        1.186523
4    3184.358887    3181.673096 -2672.664307  3184.358887  102.217529  204.435059  3181.673096   1.499268           3181.673096    1.186523        1.186523
5    3284.389893    3181.673096 -2672.664307  3284.389893  101.217529  202.435059  3181.673096   1.530273           3281.703613  101.186523        1.186523
6    3284.389893    3281.673096 -2574.226807  3284.389893  100.217529  200.435059  3281.673096   1.530273           3281.672852    1.186523       -0.375977
7    3285.389893    3283.266357 -2475.820068  3285.389893  400.435303    1.000000  3283.266357   1.530273           3283.266357    0.593262       -0.969238
8    3286.389893    3284.859619 -2377.413330  3286.389893  902.463867    1.000000  3284.859619   1.530273           3284.859619    0.000000       -1.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=127/4096, 
, buffer=1215/1024.[0m
[10/19 11:33:36]  --------------------------------------------------------------------------------
[10/19 11:33:36]  Iteration: 16 (0 solution, 15 counterexamples)
[10/19 11:33:38]  Generator returned sat in 1.603873 secs.
[10/19 11:33:38]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:38]  Improved gap from 0.0 to 1.5625
[10/19 11:33:39]  Improved number of small numbers from 106 to 114 out of a max of 114
[10/19 11:33:39]  Verifer returned sat in 0.633315 secs.
[10/19 11:33:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3181.048828    2979.455566 -2970.446777  3181.048828      0.061279    0.061279  2979.455566        0.0           3079.486328  201.593262      101.593262
1    3181.048828    3079.455566 -2970.446777  3181.048828      0.030762    0.030762  3079.455566        0.0           3179.486328  101.593262        1.593262
2    3181.048828    3179.486328 -2872.040039  3181.048828      0.030518    0.030518  3179.486328        0.0           3179.486328    1.562500        0.000000
3    3479.235352    3264.266113 -2872.040039  3479.235352    299.749023  299.749023  3264.266113        0.0           3264.266113  214.969238      198.186523
4    3480.235352    3283.079590 -2872.040039  3480.235352    885.308594    1.000000  3283.079590        0.0           3283.079590  197.155762       99.186523
5    3481.235352    3381.048828 -2872.040039  3481.235352   1975.241211    1.000000  3381.048828        0.0           3481.079346  100.186523        0.186523
6    3482.235352    3481.079590 -2773.633301  3482.235352   4153.044922    1.000000  3481.079590        0.0           3481.079590    1.155762       -0.406738
7    3483.235352    3482.642090 -2675.196045  3483.235352   8523.903320    1.000000  3482.642090        0.0           3484.235352    0.593262       -0.969482
8    3484.235352    3484.235352 -2576.789307  3484.235352  17248.369141    1.000000  3484.235352        0.0           3484.235352    0.000000       -1.562744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=405949/2048.[0m
[10/19 11:33:39]  --------------------------------------------------------------------------------
[10/19 11:33:39]  Iteration: 17 (0 solution, 16 counterexamples)
[10/19 11:33:42]  Generator returned sat in 2.795883 secs.
[10/19 11:33:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:43]  Improved gap from 0.0 to 0
[10/19 11:33:43]  Improved number of small numbers from 67 to 88 out of a max of 114
[10/19 11:33:43]  Verifer returned sat in 0.972051 secs.
[10/19 11:33:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3483.328369    3283.325703 -2778.811807  3483.328369    0.061035    0.061035  3283.325703        0.0           3383.328369  200.002666      100.002666
1    3483.328369    3383.325703 -2778.811807  3483.328369  200.002441  200.002441  3383.325703        0.0           3483.328125  100.002666        0.002666
2    3483.328369    3483.325928 -2776.776855  3483.328369    0.002686    0.002686  3483.325928        0.0           3483.325928    0.002441      -97.962383
3    3881.273193    3681.290703 -2776.776855  3881.273193  397.947266  397.947266  3681.290703        0.0           3681.290703  199.982490      199.982441
4    3881.273203    3781.290703 -2776.776855  3881.273203  199.982500    0.010000  3781.290703        0.0           3781.290703   99.982500       99.982451
5    3881.283203    3881.282959 -2776.776611  3881.283203  199.982500    0.010000  3881.282959        0.0           3881.282959    0.000244       -0.007305
6    3881.293203    3881.293203 -2676.789307  3881.293203  199.978516    0.010000  3881.293203        0.0           3881.293203    0.000000       -0.010000
7    3881.303203    3881.303203 -2576.789307  3881.303203  101.001250    0.010000  3881.303203        0.0           3881.300537    0.000000        0.000000
8    3881.313203    3881.305664 -2576.789307  3881.313203   51.006250    0.010000  3881.305664        0.0           3881.305664    0.007539      -99.990000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=819129/4096.[0m
[10/19 11:33:44]  --------------------------------------------------------------------------------
[10/19 11:33:44]  Iteration: 18 (0 solution, 17 counterexamples)
[10/19 11:33:57]  Generator returned sat in 13.254911 secs.
[10/19 11:33:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:59]  Improved number of small numbers from 39 to 113 out of a max of 113
[10/19 11:33:59]  Verifer returned sat in 1.112338 secs.
[10/19 11:33:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t      cwnd_0,t      rate_0,t   service_0,t  losts_0,t  tot_service_choice_t       queue_t  bottle_queue_t
0  -51489.903320  -51789.842285  52294.356201 -51489.903320      0.061035      0.061035 -51789.842285   0.000000         -51789.872803    299.938965      199.938965
1  -51489.873047  -51689.811768  52294.356201 -51489.873047    299.969238    299.969238 -51689.811768   0.000000         -51689.811768    199.938721       99.969238
2  -51489.842285  -51589.842285  52294.356201 -51489.842285    199.969482    199.969482 -51589.842285   0.000000         -51589.873047    100.000000        0.000000
3  -14866.750488  -51485.872803  52294.356201 -14866.750488  36723.091797  36723.091797 -51485.872803   0.000000         -51485.872803  36619.122314    36523.091797
4  -14761.781006  -51389.842285  52294.356201 -14761.781006  36724.091797  18363.045898 -51389.842285   0.000000         -51289.811523  36628.061279    36528.061279
5  -14664.750488  -51287.903564  52294.356201 -14664.750488  36725.091797  18363.545898 -51287.903564   0.000000         -51287.903564  36623.153076    36525.091797
6  -14561.811768  -51189.842285  52294.356201 -14561.811768  36726.091797  18364.045898 -51189.842285   0.000000         -51189.872803  36628.030518    36528.030518
7  -14462.750488  -51089.842285  52294.356201 -14462.750488  36727.091797  18364.545898 -51089.842285   0.000000         -50989.811523  36627.091797    36527.091797
8  -14361.750488  -50989.842285  52294.356201 -14361.750488  36728.091797  18365.045898 -50989.842285   0.030518         -50989.873047  36628.061279    36528.061279
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=125/4096, 
, buffer=149618939/4096.[0m
[10/19 11:33:59]  --------------------------------------------------------------------------------
[10/19 11:33:59]  Iteration: 19 (0 solution, 18 counterexamples)
