[10/19 11:32:39]  --------------------------------------------------------------------------------
[10/19 11:32:39]  Iteration: 1 (0 solution, 0 counterexamples)
[10/19 11:32:39]  Generator returned sat in 0.005217 secs.
[10/19 11:32:39]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 11:32:39]  Improved gap from 0.0 to 100
[10/19 11:32:39]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 11:32:39]  Verifer returned sat in 0.397755 secs.
[10/19 11:32:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t   losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0     -225.84375     -225.84375  176.3125   -225.84375      0.06250      0.06250   -225.84375      0.0000            -225.84375    0.0000       -49.53125
1      -77.18750      -77.18750  176.3125    -77.18750    148.65625    148.65625    -77.18750      0.0000             -77.18750    0.0000        -0.87500
2       23.68750       23.62500  176.3125     23.68750    100.87500    100.87500     23.62500      0.0000              23.62500    0.0625         0.00000
3       23.68750       23.68750  176.3125     23.68750      0.06250      0.06250     23.68750      0.0000              23.68750    0.0000      -100.00000
4      523.87500      123.75000  176.3125    523.87500    500.18750   1001.37500    123.75000      0.0625             123.75000  400.0625       300.12500
5     1527.06250      223.75000  176.3125   1527.06250   1403.25000   2807.50000    223.75000    903.2500             223.75000  400.0625       300.12500
6     4334.75000      323.68750  176.3125   4334.75000   3207.75000   6416.50000    323.68750   3610.9375             723.87500  400.1250       300.12500
7    10951.12500      423.75000  176.3125  10951.12500   7016.50000  14034.00000    423.75000  10127.3125             423.75000  400.0625       300.12500
8    25185.06250      523.68750  176.3125  25185.06250  14634.00000  29269.00000    523.68750  24261.2500             923.87500  400.1250       300.12500
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=388179/16, 
, buffer=2401/8.[0m
[10/19 11:32:40]  --------------------------------------------------------------------------------
[10/19 11:32:40]  Iteration: 2 (0 solution, 1 counterexamples)
[10/19 11:32:40]  Generator returned sat in 0.099865 secs.
[10/19 11:32:40]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:40]  Improved gap from 0.0 to 0
[10/19 11:32:40]  Improved number of small numbers from 106 to 114 out of a max of 114
[10/19 11:32:40]  Verifer returned sat in 0.349520 secs.
[10/19 11:32:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0     -77.188477     -77.188477   77.188232   -77.188477  0.062256  0.062256   -77.188477        0.0            -77.188477  0.000000        0.000000
1     -77.187500     -77.187744  177.187012   -77.187500  0.000977  0.000977   -77.187744        0.0            -77.187744  0.000244       -0.000244
2     -76.535645     -76.536389  276.526367   -76.535645  0.652100  0.652100   -76.536389        0.0            -76.536389  0.000744       -0.009033
3     -76.525556     -76.526389  376.525146   -76.525556  0.010833  0.010833   -76.526389        0.0            -76.526389  0.000833       -0.000165
4     -76.516389     -76.524722  476.516113   -76.516389  0.010000  0.010000   -76.524722        0.0            -76.524722  0.008333       -0.000031
5     -76.514722     -76.515556  576.506104   -76.514722  0.010000  0.010000   -76.515556        0.0            -76.515556  0.000833       -0.008375
6     -76.505556     -76.505556  676.505127   -76.505556  0.010000  0.010000   -76.505556        0.0            -76.505556  0.000000       -0.000184
7     -76.495556     -76.504722  776.495117   -76.495556  0.010000  0.010000   -76.504722        0.0            -76.504722  0.009167       -0.000194
8     -76.494722     -76.495361  776.495361   -76.494722  0.010000  0.010000   -76.495361        0.0            923.874512  0.000639      -99.999117
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3/2048.[0m
[10/19 11:32:41]  --------------------------------------------------------------------------------
[10/19 11:32:41]  Iteration: 3 (0 solution, 2 counterexamples)
[10/19 11:32:41]  Generator returned sat in 0.132410 secs.
[10/19 11:32:41]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:41]  Improved gap from 0.0311279296875 to 100
[10/19 11:32:42]  Improved number of small numbers from 41 to 52 out of a max of 114
[10/19 11:32:42]  Verifer returned sat in 1.177973 secs.
[10/19 11:32:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -177.187744    -177.187988  77.203064  -177.187744     0.062256     0.062256  -177.187988     0.000000           -177.187988    0.000244      -99.984436
1     -77.172363     -77.187744  77.203064   -77.172363   100.015625   100.015625   -77.187744     0.000000            -77.187744    0.015381      -99.969055
2     122.796631     122.781128  77.203064   122.796631   199.984375   199.984375   122.781128     0.000000            122.781128    0.015503       -0.000061
3     565.843384     122.796692  77.203064   565.843384   443.062256   443.062256   122.796692     0.015564            122.781006  443.031128      343.031128
4     787.405640     322.796692  77.203064   787.405640   664.593384   995.890076   322.796692   121.577820            322.796692  343.031128      343.031128
5    1441.264587     422.796692  77.203064  1441.264587   996.890076  1494.335114   422.796692   675.436768            422.796692  343.031128      343.031128
6    2593.568573     465.812256  77.203064  2593.568573  1495.335114  2242.002670   465.812256  1727.740753            465.812256  400.015564      343.031128
7    4436.555679     622.796692  77.203064  4436.555679  2243.002670  3363.504005   622.796692  3470.727859            622.796692  343.031128      343.031128
8    7458.028557     622.796692  77.203064  7458.028557  3364.504005  5045.756008   622.796692  6392.200737           1065.843262  443.031128      343.031128
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=821903087/131072, 
, buffer=2810111/8192.[0m
[10/19 11:32:42]  --------------------------------------------------------------------------------
[10/19 11:32:42]  Iteration: 4 (0 solution, 3 counterexamples)
[10/19 11:32:43]  Generator returned sat in 0.419455 secs.
[10/19 11:32:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:43]  Improved gap from 0.0 to 0
[10/19 11:32:44]  Improved number of small numbers from 57 to 68 out of a max of 114
[10/19 11:32:44]  Verifer returned sat in 1.520562 secs.
[10/19 11:32:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3893.483643    3793.483682 -3893.483926  3893.483643     0.062256    0.062256  3793.483682     0.0000           3893.486084   99.999960       -0.000040
1    3893.483682    3893.483682 -3793.483926  3893.483682   100.000000  100.000000  3893.483682     0.0000           3893.486084    0.000000        0.000000
2    4209.458682    3993.483682 -3793.483926  4209.458682   315.975000  315.975000  3993.483682     0.0025           3993.483682  215.972500      215.972500
3    4309.461182    4089.498682 -3793.483926  4309.461182   315.975000  315.975000  4089.498682     0.0050           4089.498682  219.957500      215.972500
4    4309.471182    4093.486182 -3793.483926  4309.471182   610.990000    0.010000  4093.486182     0.0050           4093.486182  215.980000      115.982500
5    4309.481182    4193.483682 -3793.483926  4309.481182   810.992500    0.010000  4193.483682     0.0050           4293.486084  115.992500       15.992500
6    4309.491182    4309.486182 -3709.486572  4309.491182  1010.992500    0.010000  4309.486182     0.0050           4309.486182    0.000000       -0.000146
7    4309.501182    4309.488682 -3609.496582  4309.501182  1230.980000    0.010000  4309.488682     0.0050           4309.488682    0.007500       -0.000156
8    4309.511182    4309.496338 -3609.496338  4309.511182  1446.982500    0.010000  4309.496338     0.0050           4309.508545    0.009844      -99.989911
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=86389/400.[0m
[10/19 11:32:45]  --------------------------------------------------------------------------------
[10/19 11:32:45]  Iteration: 5 (0 solution, 4 counterexamples)
[10/19 11:32:46]  Generator returned sat in 1.444264 secs.
[10/19 11:32:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:32:47]  Improved gap from 98.999609375 to 100
[10/19 11:32:47]  Improved number of small numbers from 66 to 70 out of a max of 114
[10/19 11:32:47]  Verifer returned sat in 0.923968 secs.
[10/19 11:32:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3893.484375    3793.483740 -3609.496582  3893.484375    0.062012    0.062012  3793.483740    0.000000           3893.486084  100.000635        0.000635
1    3901.500225    3901.499834 -3609.496582  3901.500225  108.016484  108.016484  3901.499834    0.000000           3901.499834    0.000391      -91.983516
2    4093.484912    3996.486084 -3609.496582  4093.484912  191.985078  191.985078  3996.486084    0.000391           3996.486084   96.998437        0.000781
3    4093.484912    4093.483740 -3609.496582  4093.484912   96.998437   96.998437  4093.483740    0.000391           4093.483398    0.000781      -99.999219
4    4293.484131    4293.483740 -3609.496582  4293.484131  397.998438  199.999219  4293.483740    0.000391           4293.483740    0.000000        0.000000
5    4689.975303    4293.484131 -3609.496582  4689.975303  790.982344  396.491172  4293.484131  296.490781           4293.484131  100.000391        0.000781
6    4689.975303    4393.483740 -3609.496582  4689.975303    0.010000    0.010000  4393.483740  296.490781           4393.483398    0.000781      -99.999219
7    4841.480303    4493.483740 -3609.496582  4841.480303  301.010000  151.505000  4493.483740  296.490781           4593.483887   51.505781      -48.494219
8    5093.485303    4593.484131 -3609.496582  5093.485303  502.010000  252.005000  4593.484131  400.000781           4593.484131  100.000391        0.000781
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1024001/2560, 
, buffer=1/1280.[0m
[10/19 11:32:48]  --------------------------------------------------------------------------------
[10/19 11:32:48]  Iteration: 6 (0 solution, 5 counterexamples)
[10/19 11:32:48]  Generator returned sat in 0.162233 secs.
[10/19 11:32:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:32:48]  Improved gap from 0.00125 to 100
[10/19 11:32:49]  Improved number of small numbers from 60 to 68 out of a max of 114
[10/19 11:32:49]  Verifer returned sat in 1.002035 secs.
[10/19 11:32:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3586.416260    3386.418848 -3202.429287  3586.416260    0.062012    0.062012  3386.418848    0.00000           3386.418848  199.997412       99.999912
1    3586.416260    3486.416348 -3202.429287  3586.416260    0.002500    0.002500  3486.416348    0.00000           3586.418945   99.999912       -0.000088
2    4187.918848    3586.418848 -3202.429287  4187.918848  701.502500  701.502500  3586.418848    0.00000           3586.418848  601.500000      501.502500
3    4187.918848    3686.418848 -3202.429287  4187.918848  100.505000  100.505000  3686.418848    0.00000           3686.418848  501.500000      401.502500
4    4387.923848    3786.416348 -3202.429287  4387.923848  701.505000  349.752500  3786.416348    0.00250           3886.418701  601.505000      501.505000
5    4387.923848    3986.416348 -3202.429287  4387.923848    0.010000    0.020000  3986.416348    0.00250           3986.416348  401.505000      401.505000
6    4787.423848    3986.416348 -3202.429287  4787.423848  801.005000  399.502500  3986.416348  199.50250           3986.414062  601.505000      501.505000
7    4787.423848    4186.415098 -3202.429287  4787.423848    0.010000    0.020000  4186.415098  199.50250           4186.415098  401.506250      401.505000
8    5186.925098    4186.416348 -3202.429287  5186.925098  801.007500  399.503750  4186.416348  399.00375           4186.416260  601.505000      501.505000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=319201/800, 
, buffer=100301/200.[0m
[10/19 11:32:49]  --------------------------------------------------------------------------------
[10/19 11:32:49]  Iteration: 7 (0 solution, 6 counterexamples)
[10/19 11:32:50]  Generator returned sat in 0.514829 secs.
[10/19 11:32:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:50]  Improved gap from 0.0 to 0
[10/19 11:32:51]  Improved number of small numbers from 57 to 77 out of a max of 114
[10/19 11:32:51]  Verifer returned sat in 1.233816 secs.
[10/19 11:32:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3987.918945    3887.917598 -3703.930537  3987.918945     0.062012    0.062012  3887.917598        0.0           3987.919922  100.001348        0.001348
1    3987.920098    3987.918848 -3603.933105  3987.920098   100.002500  100.002500  3987.918848        0.0           3987.918848    0.001250       -0.000068
2    4287.910098    4087.920166 -3603.933105  4287.910098   299.991250  299.991250  4087.920166        0.0           4087.920166  199.989932      199.989932
3    4287.910098    4087.921348 -3603.933105  4287.910098     0.001250    0.001250  4087.921348        0.0           4087.921348  199.988750       99.989932
4    4287.920098    4187.921348 -3603.933105  4287.920098   401.009375    0.010000  4187.921348        0.0           4187.921348   99.998750       -0.000068
5    4287.930098    4287.920166 -3503.953037  4287.930098  1002.519063    0.010000  4287.920166        0.0           4287.941162    0.009932       -0.010000
6    4287.940098    4287.940098 -3403.963037  4287.940098  1904.778594    0.010000  4287.940098        0.0           4287.938965    0.000000       -0.010000
7    4287.950098    4287.950098 -3303.971924  4287.950098  3258.205391    0.010000  4287.950098        0.0           4287.951172    0.000000       -0.008887
8    4287.960098    4287.959961 -3203.973145  4287.960098  5088.365586    0.010000  4287.959961        0.0           4287.959961    0.000137       -0.000107
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=204791/1024.[0m
[10/19 11:32:52]  --------------------------------------------------------------------------------
[10/19 11:32:52]  Iteration: 8 (0 solution, 7 counterexamples)
[10/19 11:32:52]  Generator returned sat in 0.497277 secs.
[10/19 11:32:52]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:32:53]  Improved gap from 0.0 to 0
[10/19 11:32:53]  Improved number of small numbers from 82 to 99 out of a max of 114
[10/19 11:32:53]  Verifer returned sat in 0.887072 secs.
[10/19 11:32:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3987.922607    3887.919922 -3603.933105  3987.922607    0.062012    0.062012  3887.919922     0.0000           3887.919922  100.002686      100.002441
1    3987.922607    3987.919922 -3603.933105  3987.922607    0.002500    0.002500  3987.919922     0.0000           3987.919922    0.002686        0.002441
2    4292.703857    3987.920166 -3603.933105  4292.703857  304.783936  304.783936  3987.920166     0.0000           4087.922852  304.783691      204.783691
3    4392.708916    4172.711182 -3603.933105  4392.708916  404.788750  404.788750  4172.711182     0.0025           4172.711182  219.995234      204.786250
4    4392.708916    4287.920166 -3603.933105  4392.708916    0.010000    0.015000  4287.920166     0.0025           4287.920166  104.786250      104.786250
5    4392.708916    4387.919922 -3603.933105  4392.708916    1.015000    0.010000  4387.919922     0.0025           4387.919922    4.786494        4.786250
6    4392.708916    4387.920166 -3508.719355  4392.708916    2.522500    0.010000  4387.920166     0.0025           4387.917725    4.786250        0.000000
7    4392.708916    4392.706416 -3408.719482  4392.708916    4.783750    0.010000  4392.706416     0.0025           4392.706543    0.000000       -0.000127
8    4392.718916    4392.708740 -3408.719238  4392.718916    8.175625    0.010000  4392.708740     0.0025           4392.708740    0.007676      -99.989883
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=163829/800.[0m
[10/19 11:32:54]  --------------------------------------------------------------------------------
[10/19 11:32:54]  Iteration: 9 (0 solution, 8 counterexamples)
[10/19 11:32:55]  Generator returned sat in 1.238404 secs.
[10/19 11:32:55]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:00]  Improved gap from 0.0004166666666666667 to 50.0
[10/19 11:33:02]  Improved number of small numbers from 53 to 66 out of a max of 114
[10/19 11:33:02]  Verifer returned sat in 7.214994 secs.
[10/19 11:33:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    4081.919922    4077.416260 -3891.492197  4081.919922    0.062012    0.062012  4077.416260        0.0           4077.416260   4.503662        0.030762
1    4081.935669    4081.889160 -3847.492188  4081.935669    4.519409    4.519409  4081.889160        0.0           4137.904785   0.046509      -55.953481
2    4137.919922    4137.904663 -3797.507812  4137.919922   56.030762   56.030762  4137.904663        0.0           4137.904663   0.015259      -49.984854
3    4282.137207    4282.137207 -3797.507812  4282.137207  144.232544  144.232544  4282.137207        0.0           4282.137207   0.000000       -5.767568
4    4332.317444    4287.920166 -3747.523438  4332.317444  102.360474   50.180237  4287.920166        0.0           4287.920166  44.397278       -5.602957
5    4382.825195    4342.935669 -3702.538818  4382.825195  103.015503   50.507751  4342.935669        0.0           4342.935669  39.889526      -10.110586
6    4433.082947    4402.106201 -3661.709238  4433.082947  102.515503   50.257751  4402.106201        0.0           4402.106201  30.976746      -19.023254
7    4462.075195    4452.106201 -3611.709473  4462.075195   59.984497   28.992249  4452.106201        0.0           4452.090820   9.968994      -40.031240
8    4502.121704    4502.121582 -3561.724854  4502.121704   82.093018   40.046509  4502.121582        0.0           4502.121582   0.000122      -50.000112
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=63/2048.[0m
[10/19 11:33:03]  --------------------------------------------------------------------------------
[10/19 11:33:03]  Iteration: 10 (0 solution, 9 counterexamples)
[10/19 11:33:05]  Generator returned sat in 2.098907 secs.
[10/19 11:33:05]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:06]  Improved gap from 0.0155029296875 to 1.5625
[10/19 11:33:07]  Improved number of small numbers from 51 to 99 out of a max of 114
[10/19 11:33:07]  Verifer returned sat in 1.777641 secs.
[10/19 11:33:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2819.902832    2719.887207 -2629.490234  2819.902832     0.062012    0.062012  2719.887207    0.000000           2719.872070  100.015625        0.015625
1    2819.902832    2819.887207 -2531.052979  2819.902832     0.015625    0.015625  2819.887207    0.000000           2819.918457    0.015625       -1.547119
2    2921.621338    2821.449951 -2531.052979  2921.621338   101.734131  101.734131  2821.449951    0.000000           2921.465332  100.171387        0.171387
3    3216.135986    3021.449951 -2531.052979  3216.135986   394.686035  394.686035  3021.449951  194.499023           3021.449951    0.187012        0.187012
4    3414.291992    3121.449929 -2531.052979  3414.291992   198.343018  395.686035  3121.449929  292.655029           3121.449929    0.187034        0.187012
5    3514.276467    3121.465332 -2531.052979  3514.276467   100.171509  199.343018  3121.465332  292.655029           3121.465332  100.156106        0.171487
6    3515.276467    3221.465576 -2432.631104  3515.276467   501.358398    1.000000  3221.465576  292.655029           3221.465576    1.155862       -0.406638
7    3516.276467    3223.043435 -2334.208984  3516.276467  1203.732422    1.000000  3223.043435  292.655029           3223.043435    0.578003       -0.984519
8    3517.276467    3224.621338 -2334.208740  3517.276467  2510.058350    1.000000  3224.621338  292.655029           3224.621338    0.000100      -99.984275
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=383/2048.[0m
[10/19 11:33:07]  --------------------------------------------------------------------------------
[10/19 11:33:07]  Iteration: 11 (0 solution, 10 counterexamples)
[10/19 11:33:10]  Generator returned sat in 2.140305 secs.
[10/19 11:33:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:10]  Improved gap from 0.0155029296875 to 100
[10/19 11:33:12]  Improved number of small numbers from 43 to 56 out of a max of 114
[10/19 11:33:12]  Verifer returned sat in 2.338255 secs.
[10/19 11:33:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2633.457764    2533.457703 -2531.052979  2633.457764    0.062012    0.062012  2533.457703    0.000000           2533.442139  100.000061        0.000061
1    2633.473206    2633.457703 -2531.052979  2633.473206  100.015503  100.015503  2633.457703    0.000000           2633.442383    0.015503      -99.984497
2    2932.473206    2733.473206 -2531.052979  2932.473206  299.015503  299.015503  2733.473206    0.015503           2733.473206  198.984497       99.000000
3    3032.457703    2833.504211 -2531.052979  3032.457703  298.968994  298.968994  2833.504211    0.015503           2833.504211  198.937988       98.984497
4    3132.488708    3018.457703 -2531.052979  3132.488708  298.968994  148.484497  3018.457703    0.031006           3018.457703  114.000000       99.000000
5    3133.488708    3033.457764 -2531.052979  3133.488708  725.984497    1.000000  3033.457764    0.031006           3033.457764   99.999939        0.000000
6    3495.480957    3174.873718 -2531.052979  3495.480957  725.984497  361.992249  3174.873718  163.023254           3174.873718  157.583984       99.000000
7    3496.480957    3233.473389 -2531.052979  3496.480957  874.046509    1.000000  3233.473389  163.023254           3233.473389   99.984314        0.000000
8    3932.504211    3333.473145 -2531.052979  3932.504211  874.046509  436.023254  3333.473145  400.046509           3333.473145  198.984558       99.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=3276927/8192, 
, buffer=99.[0m
[10/19 11:33:13]  --------------------------------------------------------------------------------
[10/19 11:33:13]  Iteration: 12 (0 solution, 11 counterexamples)
[10/19 11:33:19]  Generator returned sat in 6.603915 secs.
[10/19 11:33:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:20]  Improved gap from 0.0 to 100
[10/19 11:33:21]  Improved number of small numbers from 75 to 85 out of a max of 114
[10/19 11:33:21]  Verifer returned sat in 1.078898 secs.
[10/19 11:33:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2633.457520    2633.457520 -2631.021973  2633.457520     0.062012    0.062012  2633.457520    0.000000           2633.457520    0.000000      -99.968994
1    2833.426270    2733.426514 -2631.021973  2833.426270   199.968750  199.968750  2733.426514    0.000000           2733.426514   99.999756       -0.000244
2    2933.426270    2833.426514 -2631.021973  2933.426270   199.999756  199.999756  2833.426514    0.000000           2933.457275   99.999756       -0.000244
3    3495.633219    2933.426514 -2631.021973  3495.633219   662.206706  662.206706  2933.426514   63.175700           2933.395508  499.031006      399.031006
4    3496.633219    3033.426514 -2631.021973  3496.633219  1594.248047    1.000000  3033.426514   63.175700           3433.488281  400.031006      300.031006
5    3894.695231    3133.457520 -2631.021973  3894.695231   798.124023  398.062012  3133.457520  262.237712           3133.457520  499.000000      399.031006
6    3895.695231    3233.426514 -2631.021973  3895.695231  1798.248047    1.000000  3233.426514  262.237712           3633.488525  400.031006      300.031006
7    4344.757243    3431.457520 -2631.021973  4344.757243   900.124023  449.062012  3431.457520  512.299723           3431.457520  401.000000      399.031006
8    4345.757243    3433.426514 -2631.021973  4345.757243  2147.248047    1.000000  3433.426514  512.299723           3433.426514  400.031006      300.031006
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=459903/1024, 
, buffer=1634431/4096.[0m
[10/19 11:33:21]  --------------------------------------------------------------------------------
[10/19 11:33:21]  Iteration: 13 (0 solution, 12 counterexamples)
[10/19 11:33:23]  Generator returned sat in 1.469955 secs.
[10/19 11:33:23]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 11:33:25]  Improved gap from 0.0 to 54.6875
[10/19 11:33:27]  Improved number of small numbers from 28 to 38 out of a max of 114
[10/19 11:33:27]  Verifer returned sat in 4.350533 secs.
[10/19 11:33:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3032.522461    3032.497520 -2765.759229  3032.522461    0.062012    0.062012  3032.497520      0.000           3032.472412    0.024941      -99.975059
1    3213.497520    3213.472520 -2765.759229  3213.497520  181.000000  181.000000  3213.472520      0.000           3213.472520    0.025000      -19.000000
2    3386.310020    3268.560020 -2765.759229  3386.310020  172.837500  172.837500  3268.560020      0.000           3268.560020  117.750000       53.812500
3    3486.360020    3432.497520 -2765.759229  3486.360020  217.800000  217.800000  3432.497520      0.025           3432.497520   53.837500       53.837500
4    3487.360020    3432.522520 -2720.596924  3487.360020  217.800000    1.000000  3432.522520      0.025           3432.522520   54.812500       -0.000195
5    3543.072520    3487.360020 -2676.309326  3543.072520  110.525000  221.050000  3487.360020      0.025           3487.360020   55.687500       -0.000098
6    3597.785020    3543.072520 -2631.021729  3597.785020  110.400000  220.800000  3543.072520      0.025           3543.072520   54.687500        0.000000
7    3599.385020    3597.760020 -2585.709229  3599.385020   56.287500  112.575000  3597.760020      0.025           3597.735107    1.600000      -53.087500
8    3681.403770    3652.472412 -2585.709229  3681.403770   83.618750  167.237500  3652.472412      0.025           3652.472412   28.906357      -71.068750
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=26918750000000009/500000000000000.[0m
[10/19 11:33:28]  --------------------------------------------------------------------------------
[10/19 11:33:28]  Iteration: 14 (0 solution, 13 counterexamples)
[10/19 11:33:31]  Generator returned sat in 2.701271 secs.
[10/19 11:33:31]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:33:31]  Improved gap from 0.0 to 100
[10/19 11:33:32]  Improved number of small numbers from 63 to 71 out of a max of 114
[10/19 11:33:32]  Verifer returned sat in 1.380001 secs.
[10/19 11:33:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2785.318115    2685.318008 -2676.309326  2785.318115    0.061768    0.061768  2685.318008    0.000000           2685.286865  100.000107        0.000107
1    2785.318115    2785.318008 -2676.309326  2785.318115  100.000000  100.000000  2785.318008    0.000000           2785.348877    0.000107      -99.999893
2    2985.318008    2885.318008 -2676.309326  2985.318008  200.000000  200.000000  2885.318008    0.000000           2885.286865  100.000000        0.000000
3    3421.421361    3040.235326 -2676.309326  3421.421361  536.103353  536.103353  3040.235326    0.031006           3040.235326  381.155029      336.072347
4    3571.642308    3121.359349 -2676.309326  3571.642308  531.375977  265.687988  3121.359349   50.251953           3121.359349  400.031006      336.072347
5    3674.673314    3247.759349 -2676.309326  3674.673314  503.062012  251.531006  3247.759349   53.282959           3247.759349  373.631006      336.072347
6    3843.704320    3359.509740 -2676.309326  3843.704320  542.662012  271.331006  3359.509740  122.313965           3359.509740  361.880615      336.072347
7    3959.735326    3476.318008 -2676.309326  3959.735326  477.911621  238.955811  3476.318008  138.344971           3476.318008  345.072347      336.072347
8    4146.100967    3485.318008 -2676.309326  4146.100967  531.437988  265.718994  3485.318008  224.710612           3921.421387  436.072347      336.072347
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=535937/3072, 
, buffer=4129657/12288.[0m
[10/19 11:33:32]  --------------------------------------------------------------------------------
[10/19 11:33:32]  Iteration: 15 (0 solution, 14 counterexamples)
[10/19 11:33:35]  Generator returned sat in 2.117459 secs.
[10/19 11:33:35]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:35]  Improved gap from 0.0 to 1.5625
[10/19 11:33:36]  Improved number of small numbers from 34 to 114 out of a max of 114
[10/19 11:33:36]  Verifer returned sat in 0.881164 secs.
[10/19 11:33:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2881.266113    2880.079590 -2771.070801  2881.266113    0.061523    0.061523  2880.079590   0.000000           2880.079590    1.186523        1.186523
1    2981.235596    2980.079590 -2771.070801  2981.235596  101.156006  101.156006  2980.079590   0.000000           2980.079590    1.156006        1.156006
2    2981.672852    2980.110596 -2672.664307  2981.672852    1.593262    1.593262  2980.110596   0.000000           2980.110596    1.562256       -0.000244
3    3083.328125    3081.672852 -2672.664307  3083.328125  103.217529  103.217529  3081.672852   0.468506           3081.672852    1.186768        1.186523
4    3184.358887    3181.673096 -2672.664307  3184.358887  102.217529  204.435059  3181.673096   1.499268           3181.673096    1.186523        1.186523
5    3284.389893    3181.673096 -2672.664307  3284.389893  101.217529  202.435059  3181.673096   1.530273           3281.703613  101.186523        1.186523
6    3284.389893    3281.673096 -2574.226807  3284.389893  100.217529  200.435059  3281.673096   1.530273           3281.672852    1.186523       -0.375977
7    3285.389893    3283.266357 -2475.820068  3285.389893  400.435303    1.000000  3283.266357   1.530273           3283.266357    0.593262       -0.969238
8    3286.389893    3284.859619 -2377.413330  3286.389893  902.463867    1.000000  3284.859619   1.530273           3284.859619    0.000000       -1.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=127/4096, 
, buffer=1215/1024.[0m
[10/19 11:33:36]  --------------------------------------------------------------------------------
[10/19 11:33:36]  Iteration: 16 (0 solution, 15 counterexamples)
[10/19 11:33:38]  Generator returned sat in 1.603873 secs.
[10/19 11:33:38]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:38]  Improved gap from 0.0 to 1.5625
[10/19 11:33:39]  Improved number of small numbers from 106 to 114 out of a max of 114
[10/19 11:33:39]  Verifer returned sat in 0.633315 secs.
[10/19 11:33:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3181.048828    2979.455566 -2970.446777  3181.048828      0.061279    0.061279  2979.455566        0.0           3079.486328  201.593262      101.593262
1    3181.048828    3079.455566 -2970.446777  3181.048828      0.030762    0.030762  3079.455566        0.0           3179.486328  101.593262        1.593262
2    3181.048828    3179.486328 -2872.040039  3181.048828      0.030518    0.030518  3179.486328        0.0           3179.486328    1.562500        0.000000
3    3479.235352    3264.266113 -2872.040039  3479.235352    299.749023  299.749023  3264.266113        0.0           3264.266113  214.969238      198.186523
4    3480.235352    3283.079590 -2872.040039  3480.235352    885.308594    1.000000  3283.079590        0.0           3283.079590  197.155762       99.186523
5    3481.235352    3381.048828 -2872.040039  3481.235352   1975.241211    1.000000  3381.048828        0.0           3481.079346  100.186523        0.186523
6    3482.235352    3481.079590 -2773.633301  3482.235352   4153.044922    1.000000  3481.079590        0.0           3481.079590    1.155762       -0.406738
7    3483.235352    3482.642090 -2675.196045  3483.235352   8523.903320    1.000000  3482.642090        0.0           3484.235352    0.593262       -0.969482
8    3484.235352    3484.235352 -2576.789307  3484.235352  17248.369141    1.000000  3484.235352        0.0           3484.235352    0.000000       -1.562744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=405949/2048.[0m
[10/19 11:33:39]  --------------------------------------------------------------------------------
[10/19 11:33:39]  Iteration: 17 (0 solution, 16 counterexamples)
[10/19 11:33:42]  Generator returned sat in 2.795883 secs.
[10/19 11:33:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:43]  Improved gap from 0.0 to 0
[10/19 11:33:43]  Improved number of small numbers from 67 to 88 out of a max of 114
[10/19 11:33:43]  Verifer returned sat in 0.972051 secs.
[10/19 11:33:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3483.328369    3283.325703 -2778.811807  3483.328369    0.061035    0.061035  3283.325703        0.0           3383.328369  200.002666      100.002666
1    3483.328369    3383.325703 -2778.811807  3483.328369  200.002441  200.002441  3383.325703        0.0           3483.328125  100.002666        0.002666
2    3483.328369    3483.325928 -2776.776855  3483.328369    0.002686    0.002686  3483.325928        0.0           3483.325928    0.002441      -97.962383
3    3881.273193    3681.290703 -2776.776855  3881.273193  397.947266  397.947266  3681.290703        0.0           3681.290703  199.982490      199.982441
4    3881.273203    3781.290703 -2776.776855  3881.273203  199.982500    0.010000  3781.290703        0.0           3781.290703   99.982500       99.982451
5    3881.283203    3881.282959 -2776.776611  3881.283203  199.982500    0.010000  3881.282959        0.0           3881.282959    0.000244       -0.007305
6    3881.293203    3881.293203 -2676.789307  3881.293203  199.978516    0.010000  3881.293203        0.0           3881.293203    0.000000       -0.010000
7    3881.303203    3881.303203 -2576.789307  3881.303203  101.001250    0.010000  3881.303203        0.0           3881.300537    0.000000        0.000000
8    3881.313203    3881.305664 -2576.789307  3881.313203   51.006250    0.010000  3881.305664        0.0           3881.305664    0.007539      -99.990000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=819129/4096.[0m
[10/19 11:33:44]  --------------------------------------------------------------------------------
[10/19 11:33:44]  Iteration: 18 (0 solution, 17 counterexamples)
[10/19 11:33:57]  Generator returned sat in 13.254911 secs.
[10/19 11:33:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:59]  Improved number of small numbers from 39 to 113 out of a max of 113
[10/19 11:33:59]  Verifer returned sat in 1.112338 secs.
[10/19 11:33:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t      cwnd_0,t      rate_0,t   service_0,t  losts_0,t  tot_service_choice_t       queue_t  bottle_queue_t
0  -51489.903320  -51789.842285  52294.356201 -51489.903320      0.061035      0.061035 -51789.842285   0.000000         -51789.872803    299.938965      199.938965
1  -51489.873047  -51689.811768  52294.356201 -51489.873047    299.969238    299.969238 -51689.811768   0.000000         -51689.811768    199.938721       99.969238
2  -51489.842285  -51589.842285  52294.356201 -51489.842285    199.969482    199.969482 -51589.842285   0.000000         -51589.873047    100.000000        0.000000
3  -14866.750488  -51485.872803  52294.356201 -14866.750488  36723.091797  36723.091797 -51485.872803   0.000000         -51485.872803  36619.122314    36523.091797
4  -14761.781006  -51389.842285  52294.356201 -14761.781006  36724.091797  18363.045898 -51389.842285   0.000000         -51289.811523  36628.061279    36528.061279
5  -14664.750488  -51287.903564  52294.356201 -14664.750488  36725.091797  18363.545898 -51287.903564   0.000000         -51287.903564  36623.153076    36525.091797
6  -14561.811768  -51189.842285  52294.356201 -14561.811768  36726.091797  18364.045898 -51189.842285   0.000000         -51189.872803  36628.030518    36528.030518
7  -14462.750488  -51089.842285  52294.356201 -14462.750488  36727.091797  18364.545898 -51089.842285   0.000000         -50989.811523  36627.091797    36527.091797
8  -14361.750488  -50989.842285  52294.356201 -14361.750488  36728.091797  18365.045898 -50989.842285   0.030518         -50989.873047  36628.061279    36528.061279
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=125/4096, 
, buffer=149618939/4096.[0m
[10/19 11:33:59]  --------------------------------------------------------------------------------
[10/19 11:33:59]  Iteration: 19 (0 solution, 18 counterexamples)
[10/19 11:34:16]  Generator returned sat in 17.098248 secs.
[10/19 11:34:17]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:34:21]  Improved gap from 0.0252587890625 to 100
[10/19 11:34:22]  Improved number of small numbers from 74 to 93 out of a max of 114
[10/19 11:34:22]  Verifer returned sat in 5.457496 secs.
[10/19 11:34:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t     rate_0,t   service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -51689.843018  -51789.842285  51194.343262 -51689.843018     0.060791     0.060791 -51789.842285     0.000000         -51789.843018   99.999268       -0.000732
1  -51689.842285  -51689.842285  51194.343262 -51689.842285   100.000000   100.000000 -51689.842285     0.000000         -51689.842529    0.000000     -100.000000
2  -51589.841553  -51589.842285  51194.343262 -51589.841553   100.000732   100.000732 -51589.842285     0.000000         -51589.842773    0.000732      -99.999268
3  -50184.943714  -51390.805142  51194.343262 -50184.943714  1404.898571  1404.898571 -51390.805142   804.907143         -51390.805142  400.954286      399.991429
4  -50184.933714  -51389.841571  51194.343262 -50184.933714  1300.005000     0.010000 -51389.841571   804.907143         -51389.841571  400.000714      300.001429
5  -49784.932285  -51189.842285  51194.343262 -49784.932285   800.002857   400.001429 -51189.842285  1004.918571         -51189.842285  399.991429      399.991429
6  -49784.922285  -51189.836571  51194.343262 -49784.922285   999.001429     0.010000 -51189.836571  1004.918571         -51189.836571  399.995714      300.001429
7  -49584.932999  -50989.842285  51194.343262 -49584.932999   599.985000   299.992500 -50989.842285  1004.918571         -50989.842285  399.990714      399.990714
8  -49484.931571  -50989.841797  51194.343262 -49484.931571   499.992143   249.996071 -50989.841797  1004.919286         -50989.841797  499.990940      399.991429
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=280017/1400, 
, buffer=139997/350.[0m
[10/19 11:34:22]  --------------------------------------------------------------------------------
[10/19 11:34:22]  Iteration: 20 (0 solution, 19 counterexamples)
[10/19 11:34:28]  Generator returned sat in 4.864876 secs.
[10/19 11:34:28]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:34:28]  Improved gap from 0.9742268041237113 to 1.5625
[10/19 11:34:30]  Improved number of small numbers from 31 to 55 out of a max of 114
[10/19 11:34:30]  Verifer returned sat in 2.263399 secs.
[10/19 11:34:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -50494.085205  -50594.085437  49998.586414 -50494.085205    0.060547    0.060547 -50594.085437   0.000000         -51764.600586  100.000232        0.000232
1  -50494.085205  -50494.085437  50097.023914 -50494.085205   99.999756   99.999756 -50494.085437   0.000000         -51689.842529    0.000232       -1.562268
2  -50075.146228  -50492.522937  50097.023914 -50075.146228  418.939209  418.939209 -50492.522937   0.030396         -51589.842773  417.346313      317.346313
3  -50075.146228  -50292.522949  50097.023914 -50075.146228  278.568359  278.568359 -50292.522949   0.030396         -50292.522949  217.346326      217.346313
4  -50075.146228  -50292.492432  50097.023914 -50075.146228  140.284180    1.000000 -50292.492432   0.030396         -50292.492432  217.315808      117.346313
5  -50075.146228  -50092.522949  50097.023914 -50075.146228   71.142090    1.000000 -50092.522949   0.030396         -50092.522949   17.346326       17.346313
6  -50074.146228  -50092.492541  50178.677490 -50074.146228   36.571045    1.000000 -50092.492541   0.030396         -50092.492541   18.315918       -0.000110
7  -50073.176623  -50074.146240  50277.084717 -50073.176623   19.285522    1.000000 -50074.146240   0.030396         -50074.146240    0.939221       -0.623279
8  -50072.176623  -50072.553223  50375.491699 -50072.176623   10.642761    1.000000 -50072.553223   0.030396         -50072.553223    0.346204       -1.216296
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=31734631347656253/100000000000000.[0m
[10/19 11:34:30]  --------------------------------------------------------------------------------
[10/19 11:34:30]  Iteration: 21 (0 solution, 20 counterexamples)
[10/19 11:34:34]  Generator returned sat in 3.204957 secs.
[10/19 11:34:34]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:34:34]  Improved gap from 0.0 to 0
[10/19 11:34:35]  Improved number of small numbers from 97 to 107 out of a max of 114
[10/19 11:34:35]  Verifer returned sat in 0.719552 secs.
[10/19 11:34:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -50491.583740  -50591.568604  50096.069092 -50491.583740    0.060547    0.060547 -50591.568604   0.000000         -50591.568604   99.984863       99.984375
1  -50491.568604  -50591.553223  50096.069336 -50491.568604  100.000000  100.000000 -50591.553223   0.000000         -50591.553223   99.984619       -0.000244
2  -50291.553223  -50393.522949  50096.069336 -50291.553223  300.000000  300.000000 -50393.522949   0.015137         -50393.522949  101.954590      100.000000
3  -50191.538086  -50292.522949  50096.069336 -50191.538086  201.969727  201.969727 -50292.522949   0.030273         -50292.522949  100.954590      100.000000
4  -50091.522949  -50291.553467  50096.069336 -50091.522949  200.969727  301.454590 -50291.553467   0.045410         -50291.553467  199.985107      100.000000
5  -50091.522949  -50191.553223  50096.069336 -50091.522949  199.969727  299.954590 -50191.553223   0.045410         -50191.553223   99.984863        0.000000
6  -50091.512949  -50091.568359  50196.059326 -50091.512949  100.984863    0.010000 -50091.568359   0.045410         -50091.543213    0.010000       -0.000010
7  -50091.502949  -50091.558350  50296.049316 -50091.502949   51.492432    0.010000 -50091.558350   0.045410         -50091.573486    0.009990       -0.000020
8  -50091.492949  -50091.548340  50296.049316 -50091.492949   26.746216    0.010000 -50091.548340   0.045410         -49991.533447    0.009980      -99.990020
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=100.[0m
[10/19 11:34:35]  --------------------------------------------------------------------------------
[10/19 11:34:35]  Iteration: 22 (0 solution, 21 counterexamples)
[10/19 11:34:40]  Generator returned sat in 4.080168 secs.
[10/19 11:34:40]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 11:34:40]  Improved gap from 0.0302734375 to 100
[10/19 11:34:41]  Improved number of small numbers from 60 to 114 out of a max of 114
[10/19 11:34:41]  Verifer returned sat in 0.842842 secs.
[10/19 11:34:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -53324.280029  -53424.295410  52928.796387 -53324.280029    0.060547    0.060547 -53424.295410   0.000000         -53424.295410  100.015381      100.015381
1  -53324.280029  -53324.310547  52928.796387 -53324.280029    0.015137    0.015137 -53324.310547   0.000000         -53324.310547    0.030518        0.015381
2  -53324.280029  -53324.280273  52928.796387 -53324.280029    0.014893    0.014893 -53324.280273   0.000000         -53324.280273    0.000244      -99.984619
3  -52823.325684  -53224.280273  52928.796387 -52823.325684  500.954590  500.954590 -53224.280273   0.015137         -53224.280273  400.939453      300.954590
4  -52823.325684  -53124.280273  52928.796387 -52823.325684  350.484863  701.969727 -53124.280273   0.015137         -53124.280273  300.939453      200.954590
5  -52823.325684  -53024.280273  52928.796387 -52823.325684  201.030273  401.060547 -53024.280273   0.015137         -53024.280273  200.939453      100.954590
6  -52723.265137  -52824.295410  52928.796387 -52723.265137  301.000000  601.000000 -52824.295410   0.015137         -52824.295410  101.015137      101.015137
7  -52423.295410  -52824.295410  52928.796387 -52423.295410  400.984863  800.969727 -52824.295410   0.045410         -52824.310547  400.954590      300.954590
8  -52423.295410  -52724.280273  52928.796387 -52423.295410  350.484863  701.969727 -52724.280273   0.045410         -52724.280273  300.939453      200.954590
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=31/1024, 
, buffer=616355/2048.[0m
[10/19 11:34:41]  --------------------------------------------------------------------------------
[10/19 11:34:41]  Iteration: 23 (0 solution, 22 counterexamples)
[10/19 11:34:49]  Generator returned sat in 7.454706 secs.
[10/19 11:34:49]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:34:50]  Improved gap from 0.2119140625 to 12.5
[10/19 11:34:51]  Improved number of small numbers from 84 to 114 out of a max of 114
[10/19 11:34:51]  Verifer returned sat in 1.572612 secs.
[10/19 11:34:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -53720.436035  -53720.466553  53224.967285 -53720.436035    0.060547    0.060547 -53720.466553        0.0         -53720.466553    0.030518        0.030518
1  -53720.436035  -53720.451416  53224.967285 -53720.436035    0.014893    0.014893 -53720.451416        0.0         -53720.451416    0.015381      -99.969482
2  -53282.436279  -53620.451416  53224.967285 -53282.436279  438.015137  438.015137 -53620.451416        0.0         -53620.451416  338.015137      238.030273
3  -53282.436279  -53452.451172  53224.967285 -53282.436279  338.000000  338.000000 -53452.451172        0.0         -53452.451172  170.014893      138.030273
4  -53282.436279  -53368.451172  53224.967285 -53282.436279  170.000000   85.000000 -53368.451172        0.0         -53368.451172   86.014893       38.030273
5  -53282.436279  -53284.421143  53276.421875 -53282.436279   86.000000   43.000000 -53284.421143        0.0         -53284.421143    1.984863      -10.515137
6  -53260.436279  -53271.921143  53363.921875 -53260.436279   44.000000   22.000000 -53271.921143        0.0         -53271.936105   11.484863       -1.015137
7  -53248.936279  -53259.406006  53451.406738 -53248.936279   23.000000   11.500000 -53259.406006        0.0         -53259.406006   10.469727       -2.030273
8  -53246.906006  -53246.906006  53538.906738 -53246.906006   12.500000    6.250000 -53246.906006        0.0         -53246.920898    0.000000      -12.500000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=487517/2048.[0m
[10/19 11:34:51]  --------------------------------------------------------------------------------
[10/19 11:34:51]  Iteration: 24 (0 solution, 23 counterexamples)
[10/19 11:35:07]  Generator returned sat in 15.682141 secs.
[10/19 11:35:07]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:35:07]  Improved gap from 0.005 to 100
[10/19 11:35:09]  Improved number of small numbers from 61 to 69 out of a max of 114
[10/19 11:35:09]  Verifer returned sat in 1.880524 secs.
[10/19 11:35:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -59389.933350  -59480.846652  53224.967285 -59389.933350    0.060303    0.060303 -59480.846652    0.000000         -59480.846652   90.913303        0.030142
1  -59389.933350  -59389.948354  53224.967285 -59389.933350    0.015137    0.015137 -59389.948354    0.000000         -59389.948354    0.015005      -99.969858
2  -59189.948354  -59203.125740  53224.967285 -59189.948354  200.000000  200.000000 -59203.125740    0.000000         -59203.125740   13.177386        0.015137
3  -59089.918081  -59189.963491  53224.967285 -59089.918081  113.207659  113.207659 -59189.963491    0.015137         -59189.978516  100.030273        0.030273
4  -58988.902944  -59089.963491  53224.967285 -58988.902944  201.045410  301.568115 -59089.963491    1.030273         -58989.948486  100.030273        0.030273
5  -58839.418081  -58989.948354  53224.967285 -58839.418081  249.515137  374.272705 -58989.948354   50.515137         -58989.948354  100.015137        0.030273
6  -58709.086957  -58789.963491  53224.967285 -58709.086957  230.346261  345.519392 -58789.963491   80.846261         -58789.963491    0.030273        0.030273
7  -58394.944099  -58789.963491  53224.967285 -58394.944099  314.173131  471.259696 -58789.963491  294.989118         -58789.978516  100.030273        0.030273
8  -58188.887808  -58689.963491  53224.967285 -58188.887808  306.086565  459.129848 -58689.963491  401.045410         -58589.918213  100.030273        0.030273
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=819231/2048, 
, buffer=31/1024.[0m
[10/19 11:35:10]  --------------------------------------------------------------------------------
[10/19 11:35:10]  Iteration: 25 (0 solution, 24 counterexamples)
[10/19 11:35:21]  Generator returned sat in 10.824491 secs.
[10/19 11:35:21]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:35:30]  Improved gap from 0.0 to 12.5
[10/19 11:35:32]  Improved number of small numbers from 31 to 47 out of a max of 114
[10/19 11:35:32]  Verifer returned sat in 11.429829 secs.
[10/19 11:35:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -59913.500732  -59938.504463  53748.505615 -59913.500732    0.060059    0.060059 -59938.504463     0.0000         -59938.504463  25.003730        0.001089
1  -59913.499463  -59913.500488  53748.505859 -59913.499463   25.005000   25.005000 -59913.500488     0.0000         -59913.500488   0.001025      -99.997397
2  -59724.975586  -59724.976963  53748.505859 -59724.975586  188.524902  188.524902 -59724.976963     0.0000         -59724.976963   0.001377      -11.473521
3  -59701.000713  -59713.500713  53836.004507 -59701.000713   23.976250   23.976250 -59713.500713     0.0000         -59713.500713  12.500000        0.000000
4  -59588.010713  -59686.984463  53836.004507 -59588.010713  125.490000  189.235000 -59686.984463    12.9875         -59686.984463  85.986250        0.002500
5  -59588.010713  -59600.999463  53923.503257 -59588.010713    0.010000    0.010000 -59600.999463    12.9875         -59600.999463   0.001250      -12.498750
6  -59525.018213  -59588.499463  53973.009277 -59525.018213   62.993750   95.490625 -59588.499463    12.9875         -59538.004639  50.493750       -0.000229
7  -59480.514463  -59533.004463  54028.505757 -59480.514463   94.997500  143.496250 -59533.004463    12.9875         -59533.004463  39.502500        0.000000
8  -59394.528213  -59493.501963  54028.505859 -59394.528213  125.488750  189.233125 -59493.501963    12.9875         -59393.500732  85.986250      -14.013647
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=0, 
, buffer=1/400.[0m
[10/19 11:35:33]  --------------------------------------------------------------------------------
[10/19 11:35:33]  Iteration: 26 (0 solution, 25 counterexamples)
[10/19 11:35:48]  Generator returned sat in 14.733331 secs.
[10/19 11:35:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:35:49]  Improved gap from 0.0 to 0
[10/19 11:35:49]  Improved number of small numbers from 52 to 114 out of a max of 114
[10/19 11:35:49]  Verifer returned sat in 0.924912 secs.
[10/19 11:35:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0  -59689.467041  -59689.496826  53524.500732 -59689.467041    0.059814    0.059814 -59689.496826        0.0         -59689.496826  0.029785        0.029785
1  -59589.481934  -59589.497070  53524.500732 -59589.481934  100.014893  100.014893 -59589.497070        0.0         -59589.497070  0.015137        0.014893
2  -59589.481934  -59589.496826  53624.485596 -59589.481934    0.014893    0.014893 -59589.496826        0.0         -59589.497070  0.014893       -0.000244
3  -59489.481689  -59489.481689  53624.485596 -59489.481689  100.015137  100.015137 -59489.481689        0.0         -59489.481689  0.000000        0.000000
4  -59488.481689  -59488.481934  53723.485596 -59488.481689    1.000000    1.500000 -59488.481934        0.0         -59488.481934  0.000244        0.000000
5  -59487.481934  -59488.466797  53822.485596 -59487.481934    1.000000    1.500000 -59488.466797        0.0         -59488.466797  0.984863       -0.000244
6  -59487.466797  -59487.481689  53922.440674 -59487.466797    1.000000    1.500000 -59487.481689        0.0         -59487.481689  0.014893       -0.030029
7  -59486.481689  -59487.436768  54021.455566 -59486.481689    1.000000    1.500000 -59487.436768        0.0         -59487.451904  0.955078       -0.030029
8  -59486.436768  -59486.437012  54121.440674 -59486.436768    1.000000    1.500000 -59486.437012        0.0         -59486.437012  0.000244        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=123/4096.[0m
[10/19 11:35:50]  --------------------------------------------------------------------------------
[10/19 11:35:50]  Iteration: 27 (0 solution, 26 counterexamples)
[10/19 11:36:15]  Generator returned sat in 24.822212 secs.
[10/19 11:36:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:36:16]  Improved gap from 0.0 to 0
[10/19 11:36:17]  Improved number of small numbers from 61 to 71 out of a max of 114
[10/19 11:36:17]  Verifer returned sat in 2.305690 secs.
[10/19 11:36:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -59945.513184  -59945.514609  53527.486816 -59945.513184    0.059570    0.05957 -59945.514609    0.00000         -59945.514609    0.001426        0.001318
1  -59945.512109  -59945.513359  53627.484375 -59945.512109    0.002500    0.00250 -59945.513359    0.00000         -59945.513359    0.001250       -0.000049
2  -59945.509609  -59945.510859  53727.481924 -59945.509609    0.003750    0.00375 -59945.510859    0.00000         -59945.510859    0.001250        0.000000
3  -59839.505859  -59945.508359  53727.481924 -59839.505859  106.005000  106.00500 -59945.508359    0.00125         -59945.508359  106.001250        6.002500
4  -59839.505859  -59845.508359  53821.479248 -59839.505859    1.012500    1.00000 -59845.508359    0.00125         -59845.508359    6.001250       -0.000176
5  -59839.495859  -59839.505859  53921.469424 -59839.495859   52.015000    0.01000 -59839.505859    0.00125         -59839.505859    0.008750        0.000000
6  -59839.485859  -59839.497109  54021.459424 -59839.485859  106.017500    0.01000 -59839.497109    0.00125         -59839.486084    0.010000        0.000000
7  -59839.475859  -59839.487109  54121.440430 -59839.475859  160.023125    0.01000 -59839.487109    0.00125         -59839.488281    0.010000       -0.008994
8  -59839.465859  -59839.467285  54121.440430 -59839.465859  164.033750    0.01000 -59839.467285    0.00125         -59839.467285    0.000176      -99.998994
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=2401/400.[0m
[10/19 11:36:18]  --------------------------------------------------------------------------------
[10/19 11:36:18]  Iteration: 28 (0 solution, 27 counterexamples)
[10/19 11:36:22]  Generator returned sat in 3.193265 secs.
[10/19 11:36:22]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:36:22]  Improved gap from 0.0 to 100
[10/19 11:36:23]  Improved number of small numbers from 52 to 107 out of a max of 114
[10/19 11:36:23]  Verifer returned sat in 1.282737 secs.
[10/19 11:36:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t     rate_0,t   service_0,t   losts_0,t  tot_service_choice_t      queue_t  bottle_queue_t
0  -60045.539551  -60245.509766  53727.481934 -60045.539551     0.059570     0.059570 -60245.509766    0.000000         -60245.539551   199.970215       99.970215
1  -60045.509766  -60145.509766  53727.481934 -60045.509766   200.000000   200.000000 -60145.509766    0.000000         -60045.479736   100.000000        0.000000
2  -58547.360840  -59945.509766  53727.481934 -58547.360840  1598.148926  1598.148926 -59945.509766    0.000000         -59945.509766  1398.148926     1398.148926
3  -58547.360840  -59845.509766  53727.481934 -58547.360840    61.474335    61.474335 -59845.509766    0.000000         -59845.509766  1298.148926     1298.148926
4  -58547.360840  -59845.509766  53727.481934 -58547.360840   123.948669    62.974335 -59845.509766    0.000000         -59845.539307  1298.148926     1198.148926
5  -58547.360840  -59745.479980  53727.481934 -58547.360840   248.897339   125.448669 -59745.479980    0.000000         -59745.479980  1198.119141     1098.148926
6  -58547.360840  -59645.509766  53727.481934 -58547.360840   498.794678   250.397339 -59645.509766    0.000000         -58547.331055  1098.148926      998.148926
7  -58547.360840  -59545.479980  53727.481934 -58547.360840   998.589355   500.294678 -59545.479980    0.000000         -59545.479980   998.119141      898.148926
8  -57547.301270  -59445.479980  53727.481934 -57547.301270  1998.178711  1000.089355 -59445.479980  400.029785         -59445.479980  1498.148926     1398.178711
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819261/2048, 
, buffer=1431735/1024.[0m
[10/19 11:36:23]  --------------------------------------------------------------------------------
[10/19 11:36:23]  Iteration: 29 (0 solution, 28 counterexamples)
[10/19 11:36:31]  Generator returned sat in 7.003351 secs.
[10/19 11:36:31]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:36:32]  Improved gap from 0.0 to 0
[10/19 11:36:34]  Improved number of small numbers from 52 to 64 out of a max of 114
[10/19 11:36:34]  Verifer returned sat in 2.697717 secs.
[10/19 11:36:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -59697.020996  -59697.023307  53278.995361 -59697.020996    0.059326    0.059326 -59697.023307    0.00000         -59697.023307    0.002311        0.002197
1  -59697.020996  -59697.022057  53378.992920 -59697.020996    0.001221    0.001221 -59697.022057    0.00000         -59697.022057    0.001061       -0.000244
2  -59697.018307  -59697.019557  53478.990475 -59697.018307    0.003750    0.003750 -59697.019557    0.00000         -59697.019557    0.001250        0.000000
3  -59378.049557  -59597.018307  53478.990475 -59378.049557  318.970000  318.970000 -59597.018307    0.00125         -59597.018307  218.967500      218.967500
4  -59377.049557  -59597.017057  53478.990475 -59377.049557  836.950000    1.000000 -59597.017057    0.00125         -59597.017057  219.966250      119.967500
5  -59377.039557  -59497.017057  53478.990475 -59377.039557  469.477500    0.010000 -59497.017057    0.00125         -59497.017057  119.976250       19.977500
6  -59377.029557  -59397.017057  53558.992975 -59377.029557  335.740000    0.010000 -59397.017057    0.00125         -59397.017057   19.986250       -0.010000
7  -59377.019557  -59377.020807  53658.992920 -59377.019557  268.870625    0.010000 -59377.020807    0.00125         -59377.019775    0.000000       -0.000055
8  -59377.009557  -59377.019775  53758.982910 -59377.009557  245.433438    0.010000 -59377.019775    0.00125         -59377.019775    0.008968       -0.000065
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=21896750000000003/100000000000000.[0m
[10/19 11:36:34]  --------------------------------------------------------------------------------
[10/19 11:36:34]  Iteration: 30 (0 solution, 29 counterexamples)
[10/19 11:36:43]  Generator returned sat in 8.384915 secs.
[10/19 11:36:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:36:44]  Improved gap from 0.0 to 0
[10/19 11:36:45]  Improved number of small numbers from 62 to 75 out of a max of 114
[10/19 11:36:45]  Verifer returned sat in 1.395237 secs.
[10/19 11:36:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -59506.151855  -59606.152080  53378.992920 -59506.151855    0.059326    0.059326 -59606.152080    0.00000         -59506.150879  100.000225        0.000225
1  -59506.150830  -59506.152080  53378.992920 -59506.150830  100.001250  100.001250 -59506.152080    0.00000         -59406.150879    0.001250      -99.998750
2  -58998.027002  -59306.152100  53378.992920 -58998.027002  508.125078  508.125078 -59306.152100    0.00125         -59306.152100  308.123848      308.123828
3  -58998.027002  -59218.018311  53378.992920 -58998.027002    0.001250    0.001250 -59218.018311    0.00125         -59218.018311  219.990059      208.123828
4  -58998.027002  -59206.152080  53378.992920 -58998.027002    1.001875    0.010000 -59206.152080    0.00125         -58998.029541  208.123828      108.123828
5  -58998.027002  -59106.152080  53378.992920 -58998.027002    2.502813    0.010000 -59106.152080    0.00125         -59106.153320  108.123828        8.123828
6  -58998.027002  -59006.150830  53470.869092 -58998.027002    4.754219    0.010000 -59006.150830    0.00125         -59006.150830    8.122578        0.000000
7  -58998.018252  -58998.028252  53570.860342 -58998.018252    8.131328    0.010000 -58998.028252    0.00125         -58998.018066    0.008750        0.000000
8  -58998.008252  -58998.019502  53670.850098 -58998.008252   13.196992    0.010000 -58998.019502    0.00125         -58998.020752    0.010000       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=788797/2560.[0m
[10/19 11:36:45]  --------------------------------------------------------------------------------
[10/19 11:36:45]  Iteration: 31 (0 solution, 30 counterexamples)
[10/19 11:37:45]  Generator returned sat in 58.774791 secs.
[10/19 11:37:45]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 11:37:52]  Improved gap from 0.0 to 25.0
[10/19 11:37:55]  Improved number of small numbers from 35 to 66 out of a max of 114
[10/19 11:37:55]  Verifer returned sat in 9.832506 secs.
[10/19 11:37:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -61181.554199  -61181.554443  53273.953125 -61181.554199    0.059326    0.059326 -61181.554443   0.000000         -61181.554443   0.000244      -21.316381
1  -61160.208252  -61160.237793  53273.953257 -61160.208252   21.346191   21.346191 -61160.237793   0.000000         -61160.237793   0.029541      -99.970302
2  -61060.237793  -61060.237950  53348.953257 -61060.237793  100.000000  100.000000 -61060.237950   0.000000         -61035.208496   0.000157      -24.999843
3  -60889.386266  -60935.238037  53348.953257 -60889.386266  170.851685  170.851685 -60935.238037   0.029663         -60935.238037  45.822108       45.822021
4  -60888.386266  -60928.860875  53402.131104 -60888.386266  370.474609    1.000000 -60928.860875   0.029663         -60928.860875  40.444946       -0.000132
5  -60742.593907  -60834.415929  53402.131104 -60742.593907  186.237305  371.474609 -60834.415929   0.029663         -60834.415929  91.792358       45.792227
6  -60740.267614  -60788.386230  53454.012583 -60740.267614   94.118652  187.237305 -60788.386230   0.029663         -60788.386230  48.088954        0.000000
7  -60740.267614  -60740.297277  53529.012451 -60740.267614   48.059326   95.118652 -60740.297277   0.029663         -60740.297119   0.000000      -25.000132
8  -60715.237950  -60715.267822  53603.982910 -60715.237950   25.029663   49.059326 -60715.267822   0.029663         -60715.267822   0.000209      -25.000010
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=4582202148437503/100000000000000.[0m
[10/19 11:37:55]  --------------------------------------------------------------------------------
[10/19 11:37:55]  Iteration: 32 (0 solution, 31 counterexamples)
[10/19 11:38:25]  Generator returned sat in 28.876831 secs.
[10/19 11:38:25]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 11:38:25]  Improved gap from 0.0 to 0
[10/19 11:38:27]  Improved number of small numbers from 34 to 57 out of a max of 114
[10/19 11:38:27]  Verifer returned sat in 2.272470 secs.
[10/19 11:38:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t      cwnd_0,t      rate_0,t   service_0,t  losts_0,t  tot_service_choice_t       queue_t  bottle_queue_t
0  -61313.915797  -61313.916016  53427.631104 -61313.915797  5.932617e-02  5.932617e-02 -61313.916016        0.0         -61313.916016  2.185059e-04    3.750000e-15
1  -61313.915797  -61313.915797  53527.631104 -61313.915797  7.500000e-15  7.500000e-15 -61313.915797        0.0         -61313.916016  3.750000e-15    0.000000e+00
2  -61313.915797  -61313.915797  53627.631104 -61313.915797  7.500000e-15  7.500000e-15 -61313.915797        0.0         -61313.916016  3.750000e-15    0.000000e+00
3  -60813.915797  -61213.916016  53627.631104 -60813.915797  5.000000e+02  5.000000e+02 -61213.916016      199.5         -61213.916016  2.005002e+02    2.005000e+02
4  -60813.915797  -61213.915797  53627.631104 -60813.915797  1.500000e+02  1.000000e-02 -61213.915797      199.5         -61113.915771  2.005000e+02    1.005000e+02
5  -60813.915797  -61113.915771  53627.631104 -60813.915797  1.000000e+00  5.000000e-01 -61113.915771      199.5         -61113.915771  1.005000e+02    5.000000e-01
6  -60813.915797  -61013.915797  53727.131104 -60813.915797  1.000000e+00  5.000000e-01 -61013.915797      199.5         -61013.915797  5.000000e-01    0.000000e+00
7  -60813.415797  -61013.415771  53826.631104 -60813.415797  1.000000e+00  5.000000e-01 -61013.415771      199.5         -61013.415771  4.999744e-01    0.000000e+00
8  -60812.915797  -61012.915771  53926.130859 -60812.915797  1.000000e+00  5.000000e-01 -61012.915771      199.5         -61012.915771  4.999744e-01   -2.441406e-04
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=80200000000000003/400000000000000.[0m
[10/19 11:38:27]  --------------------------------------------------------------------------------
[10/19 11:38:27]  Iteration: 33 (0 solution, 32 counterexamples)
[10/19 11:38:55]  Generator returned sat in 26.538134 secs.
[10/19 11:38:55]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:38:56]  Improved gap from 98.06 to 100
[10/19 11:38:58]  Improved number of small numbers from 59 to 67 out of a max of 114
[10/19 11:38:58]  Verifer returned sat in 3.330926 secs.
[10/19 11:38:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -61513.916016  -61678.617464  53627.631104 -61513.916016    0.059082    0.059082 -61678.617464      0.000         -61678.617464  164.701448       99.999781
1  -61513.916016  -61613.915797  53627.631104 -61513.916016    0.005127    0.005127 -61613.915797      0.000         -61613.920654   99.999781       -0.000219
2  -61113.910797  -61479.910797  53627.631104 -61113.910797  500.005000  500.005000 -61479.910797      0.000         -61479.910797  366.000000      300.005000
3  -61013.900797  -61413.910797  53627.631104 -61013.900797  466.010000  466.010000 -61413.910797      0.005         -61413.910797  400.005000      300.010000
4  -61013.900797  -61213.915797  53627.631104 -61013.900797  398.060000    0.010000 -61213.915797      0.005         -61213.915797  200.010000      200.010000
5  -60813.885797  -61213.910797  53627.631104 -60813.885797  400.030000  200.015000 -61213.910797      0.020         -61213.910797  400.005000      300.010000
6  -60813.885797  -61014.574130  53627.631104 -60813.885797  400.000000    0.010000 -61014.574130      0.020         -61014.574130  200.668333      200.010000
7  -60613.885797  -60948.135242  53627.631104 -60613.885797  400.668333  200.334167 -60948.135242      0.020         -60948.135242  334.229444      300.010000
8  -60613.885797  -60813.916016  53627.631104 -60613.885797  334.224444  167.112222 -60813.916016      0.020         -60813.916016  200.010219      200.010000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=3/200, 
, buffer=30001/100.[0m
[10/19 11:38:59]  --------------------------------------------------------------------------------
[10/19 11:38:59]  Iteration: 34 (0 solution, 33 counterexamples)
[10/19 11:39:00]  Generator returned sat in 0.851658 secs.
[10/19 11:39:00]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:39:03]  Improved number of small numbers from 58 to 75 out of a max of 113
[10/19 11:39:03]  Verifer returned sat in 2.500318 secs.
[10/19 11:39:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62815.904785  -62881.904541  54829.621104 -62815.904785    0.059082    0.059082 -62881.904541    0.00000         -62881.904541   65.999756        0.001012
1  -62815.904785  -62815.905797  54829.621104 -62815.904785    0.001250    0.001250 -62815.905797    0.00000         -62815.906982    0.001012      -99.998988
2  -62315.902047  -62715.904547  54829.621104 -62315.902047  500.003750  500.003750 -62715.904547    0.00125         -62715.904547  400.001250      300.002500
3  -62215.900797  -62615.904541  54829.621104 -62215.900797  500.002500  500.002500 -62615.904541    0.00250         -62615.904541  400.001244      300.002500
4  -62215.900797  -62421.888297  54829.621104 -62215.900797  400.000000    0.010000 -62421.888297    0.00250         -62421.888297  205.985000      200.002500
5  -62023.877047  -62315.905797  54829.621104 -62023.877047  398.008750  198.004375 -62315.905797    0.00250         -62315.905797  292.026250      292.026250
6  -61915.899547  -62284.592041  54829.621104 -61915.899547  400.003750  199.001875 -62284.592041    0.00375         -62284.592041  368.688744      300.002500
7  -61915.889547  -62117.887047  54829.621104 -61915.889547  497.968750    0.010000 -62117.887047    0.00375         -62117.887047  201.993750      200.012500
8  -61715.898297  -62115.904541  54829.621104 -61715.898297  401.985000  199.992500 -62115.904541    0.00500         -62115.904541  400.001244      300.002500
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1/400, 
, buffer=120001/400.[0m
[10/19 11:39:03]  --------------------------------------------------------------------------------
[10/19 11:39:03]  Iteration: 35 (0 solution, 34 counterexamples)
[10/19 11:39:20]  Generator returned sat in 16.433930 secs.
[10/19 11:39:20]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 11:39:21]  Improved gap from 75.2921551724138 to 100
[10/19 11:39:22]  Improved number of small numbers from 58 to 64 out of a max of 114
[10/19 11:39:22]  Verifer returned sat in 1.837626 secs.
[10/19 11:39:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62894.056885  -63094.054518  55007.76985 -62894.056885    0.058838    0.058838 -63094.054518    0.00000         -63094.056885  199.997633       99.997633
1  -62894.054518  -62994.054518  55007.76985 -62894.054518  200.000000  200.000000 -62994.054518    0.00000         -62994.054688  100.000000        0.000000
2  -62794.054518  -62894.054518  55007.76985 -62794.054518  200.000000  200.000000 -62894.054518    0.00000         -62794.052246  100.000000        0.000000
3  -62220.054518  -62757.054518  55007.76985 -62220.054518  674.000000  674.000000 -62757.054518  123.99125         -62757.054518  413.008750      350.008750
4  -62220.044518  -62595.880352  55007.76985 -62220.044518  505.500000    0.010000 -62595.880352  123.99125         -62595.880352  251.844583      250.018750
5  -62020.052018  -62594.052018  55007.76985 -62020.052018  451.837083  451.837083 -62594.052018  123.99375         -62594.052018  450.006250      350.008750
6  -62020.052018  -62394.054518  55007.76985 -62020.052018  450.003750    0.010000 -62394.054518  123.99375         -62394.054518  250.008750      250.008750
7  -61863.558893  -62294.054518  55007.76985 -61863.558893  406.501875  406.501875 -62294.054518  123.99375         -62294.054518  306.501875      306.501875
8  -61815.896914  -62294.054518  55007.76985 -61815.896914  354.163854  354.163854 -62294.054518  123.99375         -62294.056885  354.163854      254.163854
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/400, 
, buffer=280007/800.[0m
[10/19 11:39:23]  --------------------------------------------------------------------------------
[10/19 11:39:23]  Iteration: 36 (0 solution, 35 counterexamples)
[10/19 11:39:40]  Generator returned sat in 16.773611 secs.
[10/19 11:39:40]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:39:42]  Improved gap from 0.0 to 12.5
[10/19 11:39:43]  Improved number of small numbers from 52 to 107 out of a max of 114
[10/19 11:39:43]  Verifer returned sat in 2.695698 secs.
[10/19 11:39:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62395.265869  -62834.266357  54558.907959 -62395.265869    0.058594    0.058594 -62834.266357        0.0         -62834.266357  439.000488      439.000000
1  -62395.265869  -62834.236816  54558.907959 -62395.265869    0.029297    0.029297 -62834.236816        0.0         -62834.236816  438.970947      339.000000
2  -62395.265869  -62734.236572  54558.907959 -62395.265869    0.029297    0.029297 -62734.236572        0.0         -62734.236572  338.970703      239.000000
3  -62395.265869  -62576.531006  54558.907959 -62395.265869  338.941406  338.941406 -62576.531006        0.0         -62576.531006  181.265137      139.000000
4  -62395.265869  -62476.383789  54558.907959 -62395.265869  170.470703  169.470703 -62476.383789        0.0         -62476.383789   81.117920       39.000000
5  -62390.148438  -62434.236572  54614.760986 -62390.148438   86.235352   85.235352 -62434.236572        0.0         -62434.236572   44.088135       -0.029541
6  -62390.118896  -62390.118896  54702.260986 -62390.118896   44.117676   43.117676 -62390.118896        0.0         -62390.148682    0.000000      -12.500000
7  -62368.060059  -62369.089700  54781.231445 -62368.060059   23.058838   22.058838 -62369.089700        0.0         -62369.089700    1.029641      -11.470703
8  -62356.560281  -62356.560303  54781.231689 -62356.560281   12.529419   11.529419 -62356.560303        0.0         -62356.560303    0.000022      -99.970681
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1798145/4096.[0m
[10/19 11:39:44]  --------------------------------------------------------------------------------
[10/19 11:39:44]  Iteration: 37 (0 solution, 36 counterexamples)
[10/19 11:39:51]  Generator returned sat in 7.067789 secs.
[10/19 11:39:51]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:39:52]  Improved gap from 0.0 to 0
[10/19 11:39:52]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 11:39:52]  Verifer returned sat in 0.902435 secs.
[10/19 11:39:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62248.971680  -62512.265137  54460.367920 -62248.971680    0.058350    0.058350 -62512.265137  63.205811         -62512.265137  200.087646      200.087402
1  -62248.971680  -62412.265137  54460.367920 -62248.971680    0.029297    0.029297 -62412.265137  63.205811         -62412.265137  100.087646      100.087402
2  -62048.942139  -62312.265137  54460.367920 -62048.942139  300.117188  300.117188 -62312.265137  63.235107         -62312.265137  200.087891      200.087646
3  -62048.942139  -62212.265381  54460.367920 -62048.942139  200.058350  200.058350 -62212.265381  63.235107         -62212.265381  100.088135      100.087646
4  -62048.942139  -62112.706543  54460.367920 -62048.942139    1.000000    0.500000 -62112.706543  63.235107         -62112.706543    0.529297        0.087646
5  -62048.471436  -62112.236084  54559.809326 -62048.471436    1.000000    0.500000 -62112.236084  63.235107         -62112.236084    0.529541       -0.000244
6  -62048.000977  -62111.677490  54658.867920 -62048.000977    1.000000    0.500000 -62111.677490  63.235107         -62111.677490    0.441406       -0.471191
7  -62047.500977  -62110.736084  54758.838867 -62047.500977    1.000000    0.500000 -62110.736084  63.235107         -62110.736084    0.000000       -0.000244
8  -62047.000977  -62110.735840  54858.338623 -62047.000977    1.000000    0.500000 -62110.735840  63.235107         -62110.736084    0.499756       -0.000488
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=819559/4096.[0m
[10/19 11:39:53]  --------------------------------------------------------------------------------
[10/19 11:39:53]  Iteration: 38 (0 solution, 37 counterexamples)
[10/19 11:39:57]  Generator returned sat in 3.408864 secs.
[10/19 11:39:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:39:57]  Improved gap from 0.0 to 0
[10/19 11:39:59]  Improved number of small numbers from 40 to 65 out of a max of 114
[10/19 11:39:59]  Verifer returned sat in 1.611189 secs.
[10/19 11:39:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62874.006348  -62937.212402  54460.367920 -62874.006348    0.058105    0.058105 -62937.212402  63.205811         -62937.212402    0.000244      -99.997266
1  -62354.013916  -62737.214893  54460.367920 -62354.013916  519.992676  519.992676 -62737.214893  63.205811         -62737.214893  319.995166      319.995166
2  -62254.009082  -62637.215088  54460.367920 -62254.009082  420.000000  420.000000 -62637.215088  63.208311         -62637.215088  319.997695      319.997500
3  -62254.009082  -62537.215088  54460.367920 -62254.009082    0.002500    0.002500 -62537.215088  63.208311         -62537.215088  219.997695      219.997500
4  -62254.009082  -62537.214893  54460.367920 -62254.009082    1.005000    0.010000 -62537.214893  63.208311         -62437.212158  219.997500      119.997500
5  -62254.009082  -62337.215088  54460.367920 -62254.009082    3.010000    0.010000 -62337.215088  63.208311         -62337.215088   19.997695       19.997500
6  -62254.009082  -62332.259766  54540.370420 -62254.009082    7.020000    0.010000 -62332.259766  63.208311         -62332.259766   15.042373        0.000000
7  -62254.009082  -62317.217393  54640.370420 -62254.009082   15.040000    0.010000 -62317.217393  63.208311         -62317.219727    0.000000        0.000000
8  -62253.999082  -62317.217393  54740.360352 -62253.999082   31.080000    0.010000 -62317.217393  63.208311         -62317.219971    0.010000       -0.000068
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=31999750000000003/100000000000000.[0m
[10/19 11:39:59]  --------------------------------------------------------------------------------
[10/19 11:39:59]  Iteration: 39 (0 solution, 38 counterexamples)
[10/19 11:40:27]  Generator returned sat in 26.514628 secs.
[10/19 11:40:27]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:40:27]  Improved gap from 0.0 to 100
[10/19 11:40:28]  Improved number of small numbers from 50 to 94 out of a max of 114
[10/19 11:40:28]  Verifer returned sat in 1.820574 secs.
[10/19 11:40:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62473.890625  -62873.890566  54397.07251 -62473.890625    0.058105    0.058105 -62873.890566   0.000000         -62873.890566  399.999941      300.029053
1  -62473.890625  -62673.919678  54397.07251 -62473.890625    0.029053    0.029053 -62673.919678   0.000000         -62673.919678  200.029053      200.029053
2  -62473.890625  -62593.149414  54397.07251 -62473.890625  199.999756  199.999756 -62593.149414   0.000000         -62593.149414  119.258789      100.029053
3  -62173.890625  -62524.376040  54397.07251 -62173.890625  419.258789  419.258789 -62524.376040   0.000000         -62524.376040  350.485415      300.029053
4  -62173.861514  -62473.919678  54397.07251 -62173.861514  350.514526  174.257263 -62473.919678   0.000000         -62373.890381  300.058164      200.058164
5  -62173.861514  -62314.643555  54397.07251 -62173.861514  201.000000   99.500000 -62314.643555   0.000000         -62314.643555  140.782041      100.058164
6  -62035.137695  -62199.236514  54397.07251 -62035.137695  279.505859  138.752930 -62199.236514   0.000000         -62199.236514  164.098818      138.781982
7  -61873.096987  -62074.390625  54397.07251 -61873.096987  326.139526  162.069763 -62074.390625   0.000000         -62074.390625  201.293638      200.822690
8  -61673.861572  -62073.919678  54397.07251 -61673.861572  400.529053  199.264526 -62073.919678   0.029053         -62073.948486  400.029053      300.029053
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=119/4096, 
, buffer=1228919/4096.[0m
[10/19 11:40:29]  --------------------------------------------------------------------------------
[10/19 11:40:29]  Iteration: 40 (0 solution, 39 counterexamples)
[10/19 11:40:58]  Generator returned sat in 28.097491 secs.
[10/19 11:40:58]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:41:27]  Improved gap from 0.029052734375 to 39.0625
[10/19 11:41:28]  Improved number of small numbers from 31 to 114 out of a max of 114
[10/19 11:41:28]  Verifer returned sat in 29.915231 secs.
[10/19 11:41:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -62483.979980  -62484.008789  54397.072510 -62483.979980    0.058105    0.058105 -62484.008789   0.000000         -62484.008789   0.028809        0.028809
1  -62409.937500  -62484.008789  54423.001221 -62409.937500   74.071289   74.071289 -62484.008789   0.000000         -62409.922852  74.071289        0.000000
2  -62309.922852  -62338.040283  54423.001221 -62309.922852  174.085938  174.085938 -62338.040283   0.000000         -62338.040283  28.117432        0.014648
3  -62209.937500  -62209.937744  54423.001221 -62209.937500  128.102783  128.102783 -62209.937744   0.000000         -62209.937744   0.000244        0.000000
4  -62109.894043  -62178.957031  54423.001221 -62109.894043  202.086914  100.043457 -62178.957031   0.014648         -62178.957031  69.048340        0.028809
5  -62109.894043  -62109.923096  54483.924072 -62109.894043    1.000000    1.000000 -62109.923096   0.014648         -62109.923096   0.014404      -39.048340
6  -62053.114746  -62070.845947  54542.107178 -62053.114746  115.558594   56.779297 -62070.845947   0.014648         -62070.845947  17.716553      -24.085938
7  -61989.952148  -62029.029297  54603.030273 -61989.952148  128.325195   63.162598 -62029.029297   0.014648         -62029.029297  39.062500       -0.000244
8  -61920.888916  -61989.951904  54603.030273 -61920.888916  140.126465   69.063232 -61989.951904   0.014648         -61989.951904  69.048340      -30.937012
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=0, 
, buffer=59/2048.[0m
[10/19 11:41:28]  --------------------------------------------------------------------------------
[10/19 11:41:28]  Iteration: 41 (0 solution, 40 counterexamples)
[10/19 11:41:53]  Generator returned sat in 23.640867 secs.
[10/19 11:41:53]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:41:53]  Improved gap from 0.0145263671875 to 100
[10/19 11:41:54]  Improved number of small numbers from 62 to 109 out of a max of 114
[10/19 11:41:54]  Verifer returned sat in 1.237008 secs.
[10/19 11:41:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -62509.894043  -62509.923096  54423.001221 -62509.894043    0.058105    0.058105 -62509.923096    0.000000         -62509.923096    0.029053        0.028809
1  -62409.908447  -62409.923096  54423.001221 -62409.908447  100.014648  100.014648 -62409.923096    0.000000         -62409.923096    0.014648        0.014404
2  -62309.923096  -62409.922852  54423.001221 -62309.923096  100.000000  100.000000 -62409.922852    0.000000         -62309.908203   99.999756       -0.000244
3  -62243.893799  -62243.893799  54423.001221 -62243.893799  166.029053  166.029053 -62243.893799    0.000000         -62243.893799    0.000000      -33.970947
4  -62109.879150  -62110.908447  54423.001221 -62109.879150  134.014648  202.021973 -62110.908447    0.014648         -62110.908447    1.014648        0.029053
5  -61961.386475  -62057.227051  54423.001221 -61961.386475  149.507324  148.507324 -62057.227051   48.507324         -62057.227051   47.333252        0.029053
6  -61832.371826  -61967.246501  54423.001221 -61832.371826  176.347900  175.347900 -61967.246501   77.521973         -61967.246501   57.352702        0.029053
7  -61751.400879  -61828.923096  54423.001221 -61751.400879  138.323649  137.323649 -61828.923096   77.521973         -61828.923096    0.000244      -19.000000
8  -61609.408447  -61809.908447  54423.001221 -61609.408447  141.992676  213.989014 -61809.908447  100.485352         -61809.908447  100.014648        0.029053
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=51441/512, 
, buffer=119/4096.[0m
[10/19 11:41:55]  --------------------------------------------------------------------------------
[10/19 11:41:55]  Iteration: 42 (0 solution, 41 counterexamples)
[10/19 11:42:09]  Generator returned sat in 13.638694 secs.
[10/19 11:42:09]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
[0m
[10/19 11:42:13]  Improved gap from 0.0 to 45.3125
[10/19 11:42:13]  Improved number of small numbers from 43 to 114 out of a max of 114
[10/19 11:42:13]  Verifer returned sat in 3.905482 secs.
[10/19 11:42:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -63406.781494  -63406.793457  54313.632080 -63406.781494    0.058105    0.058105 -63406.793457        0.0         -63406.793457   0.011963        0.011719
1  -63406.781494  -63406.793213  54368.319580 -63406.781494    0.005859    0.005859 -63406.793213        0.0         -63406.799316   0.011719      -45.300781
2  -63316.162354  -63361.474854  54423.000977 -63316.162354   90.630859   90.630859 -63361.474854        0.0         -63361.474854  45.312500       -0.000244
3  -63171.843994  -63250.164551  54423.000977 -63171.843994  189.630859  189.630859 -63250.164551        0.0         -63250.164551  78.320557       44.318115
4  -63171.843994  -63216.156494  54477.682861 -63171.843994   78.314453  117.471680 -63216.156494        0.0         -63216.156494  44.312500       -1.000000
5  -63120.838135  -63170.843994  54527.676758 -63120.838135   95.318359  142.977539 -63170.843994        0.0         -63170.849854  50.005859       -0.000244
6  -63075.528564  -63120.832520  54582.358643 -63075.528564   95.315430  142.973145 -63120.832520        0.0         -63120.832520  45.303955       -0.008789
7  -63056.166504  -63075.513916  54637.009033 -63056.166504   64.666016   96.999023 -63075.513916        0.0         -63075.513916  19.347412      -25.996338
8  -63005.192627  -63030.170166  54637.009033 -63005.192627   70.321289  105.481934 -63030.170166        0.0         -63030.176270  24.977539      -75.022461
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=181553/4096.[0m
[10/19 11:42:14]  --------------------------------------------------------------------------------
[10/19 11:42:14]  Iteration: 43 (0 solution, 42 counterexamples)
[10/19 11:42:43]  Generator returned sat in 28.285584 secs.
[10/19 11:42:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 11:42:43]  Improved gap from 0.0 to 100
[10/19 11:42:44]  Improved number of small numbers from 60 to 70 out of a max of 114
[10/19 11:42:44]  Verifer returned sat in 1.516838 secs.
[10/19 11:42:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -63404.654541  -63504.654708  54311.493576 -63404.654541    0.057861    0.057861 -63504.654708    0.000000         -63504.655273  100.000167        0.000167
1  -63404.653994  -63404.654708  54311.493576 -63404.653994  100.000714  100.000714 -63404.654708    0.000000         -63404.654785    0.000714      -99.999286
2  -63204.653280  -63304.653994  54311.493576 -63204.653280  200.001429  200.001429 -63304.653994    0.000000         -63304.653994  100.000714        0.001429
3  -63104.651851  -63104.654708  54311.493576 -63104.651851  200.002143  200.002143 -63104.654708    0.000714         -63104.654708    0.002143        0.002143
4  -63104.643994  -63104.644708  54311.493576 -63104.643994    0.010000    0.010000 -63104.644708    0.000714         -63104.644708    0.000000      -99.990000
5  -62804.633994  -63004.653809  54311.493576 -62804.633994  300.010000  599.020000 -63004.653809  100.018571         -63004.653809  100.001243        0.002143
6  -62804.633994  -62904.653994  54311.493576 -62804.633994    0.010000    0.010000 -62904.653994  100.018571         -62904.653994    0.001429      -99.997857
7  -62604.634708  -62704.654708  54311.493576 -62604.634708  200.000714  399.001429 -62704.654708  100.018571         -62704.654708    0.001429        0.001429
8  -62204.646137  -62704.654053  54311.493576 -62204.646137  399.990000  798.980000 -62704.654053  400.006429         -62704.654053  100.001487        0.002143
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=70001/175, 
, buffer=3/1400.[0m
[10/19 11:42:45]  --------------------------------------------------------------------------------
[10/19 11:42:45]  Iteration: 44 (0 solution, 43 counterexamples)
[10/19 11:43:02]  Generator returned sat in 15.927237 secs.
[10/19 11:43:02]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 11:43:03]  Improved gap from 0.01446533203125 to 100
[10/19 11:43:03]  Improved number of small numbers from 26 to 113 out of a max of 114
[10/19 11:43:03]  Verifer returned sat in 1.472643 secs.
[10/19 11:43:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -63992.493408  -63992.493652  54564.270996 -63992.493408    0.057861    0.057861 -63992.493652   0.000000         -63992.493652    0.000244        0.000000
1  -63879.479004  -63992.479004  54564.270996 -63879.479004  113.014648  113.014648 -63992.479004   0.000000         -63992.479004  113.000000       13.014404
2  -63779.449951  -63866.377686  54564.270996 -63779.449951  213.029053  213.029053 -63866.377686   0.014648         -63866.377686   86.913086       13.028809
3  -63679.435547  -63765.377686  54564.270996 -63679.435547  186.927490  186.927490 -63765.377686   0.029053         -63765.377686   85.913086       13.028809
4  -63579.421143  -63664.392090  54564.270996 -63579.421143  185.927490  184.927490 -63664.392090   0.043457         -63664.392090   84.927490       13.028809
5  -63479.421143  -63492.493408  54564.270996 -63479.421143  184.927490  183.927490 -63492.493408   0.043457         -63492.493408   13.028809       13.028809
6  -63304.507812  -63466.392334  54564.270996 -63304.507812  187.942139  280.913208 -63466.392334  74.956787         -63466.392334   86.927734       13.028809
7  -63204.493408  -63365.392334  54564.270996 -63204.493408  186.942139  185.942139 -63365.392334  74.971191         -63365.392334   85.927734       13.028809
8  -63104.479004  -63292.493408  54564.270996 -63104.479004  185.942139  184.942139 -63292.493408  74.985596         -63292.507812  113.028809       13.028809
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=306963/4096, 
, buffer=26683/2048.[0m
[10/19 11:43:04]  --------------------------------------------------------------------------------
[10/19 11:43:04]  Iteration: 45 (0 solution, 44 counterexamples)
[10/19 11:43:30]  Generator returned sat in 25.718194 secs.
[10/19 11:43:31]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 11:43:34]  Improved gap from 0.0125 to 100
[10/19 11:43:36]  Improved number of small numbers from 68 to 76 out of a max of 114
[10/19 11:43:36]  Verifer returned sat in 4.996029 secs.
[10/19 11:43:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -59130.659912  -59330.649971  54564.270996 -59130.659912    0.057617    0.057617 -59330.649971      0.000         -59330.649971  199.990059       99.995059
1  -59130.654971  -59230.654971  54564.270996 -59130.654971  199.995000  199.995000 -59230.654971      0.000         -59130.650146  100.000000        0.000000
2  -59030.654971  -59130.654971  54564.270996 -59030.654971  200.000000  200.000000 -59130.654971      0.000         -59030.650146  100.000000        0.000000
3  -58627.914971  -58935.629971  54564.270996 -58627.914971  502.740000  502.740000 -58935.629971      0.005         -58935.629971  307.710000      302.735000
4  -58627.904971  -58830.654971  54564.270996 -58627.904971  394.020000    0.010000 -58830.654971      0.005         -58830.654971  202.745000      202.745000
5  -58432.639971  -58730.654971  54564.270996 -58432.639971  398.010000  596.015000 -58730.654971      0.005         -58730.654971  298.010000      298.010000
6  -58330.644971  -58730.654971  54564.270996 -58330.644971  400.005000  599.007500 -58730.654971      0.005         -58730.660156  400.005000      300.005000
7  -58330.644971  -58530.654971  54564.270996 -58330.644971  303.490000  454.235000 -58530.654971      0.005         -58530.654971  200.005000      200.005000
8  -58227.904971  -58530.650146  54564.270996 -58227.904971  302.745000  453.117500 -58530.650146      0.005         -58530.650146  302.740176      202.745000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=60547/200.[0m
[10/19 11:43:36]  --------------------------------------------------------------------------------
[10/19 11:43:36]  Iteration: 46 (0 solution, 45 counterexamples)
[10/19 11:44:11]  Generator returned sat in 34.126910 secs.
[10/19 11:44:11]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:44:13]  Improved gap from 94.884765625 to 100
[10/19 11:44:14]  Improved number of small numbers from 44 to 114 out of a max of 114
[10/19 11:44:14]  Verifer returned sat in 2.381649 secs.
[10/19 11:44:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58487.745117  -58687.716309  54564.270996 -58487.745117    0.057617    0.057617 -58687.716309    0.00000         -58687.716309  199.971191      199.970947
1  -58487.716309  -58687.716064  54564.270996 -58487.716309  200.000000  200.000000 -58687.716064    0.00000         -58587.687500  199.999756       99.999756
2  -58487.716309  -58587.687500  54564.270996 -58487.716309    0.028564    0.028564 -58587.687500    0.00000         -58587.687500   99.971191       -0.000244
3  -57594.969238  -58483.046631  54564.270996 -57594.969238  992.718262  992.718262 -58483.046631  392.74707         -58483.046631  495.330322      399.999756
4  -57594.940430  -58386.835938  54564.270996 -57594.940430  495.359131    1.000000 -58386.835938  392.74707         -58386.835938  399.148438      300.028564
5  -57594.940430  -58187.716309  54564.270996 -57594.940430  399.119629  400.119629 -58187.716309  392.74707         -58187.716309  200.028809      200.028564
6  -57394.423828  -58087.716064  54564.270996 -57394.423828  400.545410  401.545410 -58087.716064  392.74707         -58087.716064  300.545166      300.545166
7  -57296.031006  -57987.716309  54564.270996 -57296.031006  398.937988  399.937988 -57987.716309  392.74707         -57987.716309  298.938232      298.937988
8  -57194.940430  -57987.716064  54564.270996 -57194.940430  400.028809  401.028809 -57987.716064  392.74707         -58458.743896  400.028564      300.028564
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1638399/4096.[0m
[10/19 11:44:14]  --------------------------------------------------------------------------------
[10/19 11:44:14]  Iteration: 47 (0 solution, 46 counterexamples)
[10/19 11:44:42]  Generator returned sat in 26.391633 secs.
[10/19 11:44:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:44:42]  Improved gap from 0.0 to 0
[10/19 11:44:42]  Improved number of small numbers from 66 to 89 out of a max of 114
[10/19 11:44:42]  Verifer returned sat in 0.809329 secs.
[10/19 11:44:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t  cwnd_0,t  rate_0,t   service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0  -58087.755371  -58087.775391  54564.270996 -58087.755371  0.057617  0.057617 -58087.775391        0.0         -58087.775391  0.020020        0.000173
1  -58087.755371  -58087.755371  54664.270579 -58087.755371  0.000244  0.000244 -58087.755371        0.0         -58087.755371  0.000000       -0.000244
2  -58087.755127  -58087.755127  54764.270508 -58087.755127  0.000244  0.000244 -58087.755127        0.0         -58087.754639  0.000000       -0.000072
3  -58087.754710  -58087.754883  54864.269775 -58087.754710  0.000417  0.000417 -58087.754883        0.0         -58087.754883  0.000173       -0.000387
4  -58087.744710  -58087.754294  54964.260010 -58087.744710  0.010254  0.010000 -58087.754294        0.0         -58087.754294  0.009583       -0.000153
5  -58087.744294  -58087.744502  55064.259521 -58087.744294  0.010000  0.010000 -58087.744502        0.0         -58087.744502  0.000208       -0.000225
6  -58087.734502  -58087.743877  55164.249329 -58087.734502  0.010000  0.010000 -58087.743877        0.0         -58087.743877  0.009375       -0.000625
7  -58087.733877  -58087.733877  55264.239746 -58087.733877  0.010000  0.010000 -58087.733877        0.0         -58087.733887  0.000000       -0.009583
8  -58087.723877  -58087.723877  55364.239014 -58087.723877  0.010208  0.010000 -58087.723877        0.0         -58087.723877  0.000000       -0.000316
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/2048.[0m
[10/19 11:44:43]  --------------------------------------------------------------------------------
[10/19 11:44:43]  Iteration: 48 (0 solution, 47 counterexamples)
[10/19 11:45:05]  Generator returned sat in 20.643703 secs.
[10/19 11:45:05]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:45:06]  Improved gap from 0.0001220703125 to 96.875
[10/19 11:45:06]  Improved number of small numbers from 70 to 84 out of a max of 114
[10/19 11:45:06]  Verifer returned sat in 1.690109 secs.
[10/19 11:45:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58884.723877  -58885.781738  55260.162598 -58884.723877    0.057617    0.057617 -58885.781738    0.000000         -58885.781738    1.057861        1.057617
1  -58785.752930  -58787.743643  55260.162598 -58785.752930  100.028809  100.028809 -58787.743643    0.000000         -58787.743643    1.990713        0.028564
2  -58785.752930  -58785.781494  55260.162598 -58785.752930    1.962158    1.962158 -58785.781494    0.000000         -58785.781738    0.028564      -99.971436
3  -58685.248291  -58685.248291  55261.153555 -58685.248291  100.533203  100.533203 -58685.248291    0.000000         -58685.248291    0.000000      -98.475840
4  -58485.714844  -58586.743643  55261.153555 -58485.714844  200.533447  199.533447 -58586.743643    0.000000         -58586.743643  101.028799        1.057607
5  -58385.743643  -58386.772451  55261.153555 -58385.743643  201.000000  200.000000 -58386.772451    0.000000         -58386.772451    1.028809        1.028809
6  -57987.763408  -58386.772451  55261.153555 -57987.763408  399.009043  398.009043 -58386.772451  297.951426         -58286.743652  101.057617        1.057617
7  -57987.753408  -58286.733643  55264.239502 -57987.753408  798.018086    0.010000 -58286.733643  297.951426         -58286.733643    1.028809      -95.846436
8  -57688.772217  -58189.830078  55264.239502 -57688.772217  300.010000  299.010000 -58189.830078  400.028564         -58189.830078  101.029297        1.057617
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638517/4096, 
, buffer=1083/1024.[0m
[10/19 11:45:07]  --------------------------------------------------------------------------------
[10/19 11:45:07]  Iteration: 49 (0 solution, 48 counterexamples)
[10/19 11:45:46]  Generator returned sat in 37.583559 secs.
[10/19 11:45:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:46:11]  Improved gap from 0.0 to 39.0625
[10/19 11:46:14]  Improved number of small numbers from 36 to 51 out of a max of 114
[10/19 11:46:14]  Verifer returned sat in 28.046663 secs.
[10/19 11:46:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58782.107910  -58782.110368  55156.491471 -58782.107910    0.057617    0.057617 -58782.110368   0.000000         -58782.110368    0.002458        0.002458
1  -58682.109118  -58682.110596  55156.491471 -58682.109118  100.001250  100.001250 -58682.110596   0.000000         -58682.110596    0.001478        0.001250
2  -58582.110596  -58600.709951  55156.491471 -58582.110596  100.000000  100.000000 -58600.709951   0.000000         -58600.709951   18.599355       -0.000228
3  -58482.109118  -58482.110368  55156.491471 -58482.109118  118.600833  118.600833 -58482.110368   0.000000         -58482.110368    0.001250        0.001250
4  -58375.958910  -58482.110368  55156.491471 -58375.958910  210.300417  106.150208 -58482.110368   6.148958         -58382.108887  100.002500        0.002500
5  -58375.958910  -58382.109118  55217.427721 -58375.958910    0.010000    0.010000 -58382.109118   6.148958         -58382.109118    0.001250      -39.061250
6  -58319.806201  -58343.046618  55275.557861 -58319.806201  110.305417   56.152708 -58343.046618   6.148958         -58343.047852   17.091458      -24.778402
7  -58255.963910  -58301.175368  55336.493896 -58255.963910  125.684583   63.842292 -58301.175368   6.148958         -58301.175368   39.062500       -0.000075
8  -58177.809014  -58262.111572  55336.494141 -58177.809014  154.309792   78.154896 -58262.111572   6.148958         -58262.111572   78.153600      -21.844935
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=1/400.[0m
[10/19 11:46:14]  --------------------------------------------------------------------------------
[10/19 11:46:14]  Iteration: 50 (0 solution, 49 counterexamples)
[10/19 11:46:41]  Generator returned sat in 26.121832 secs.
[10/19 11:46:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:46:42]  Improved gap from 0.0 to 100
[10/19 11:46:43]  Improved number of small numbers from 69 to 114 out of a max of 114
[10/19 11:46:43]  Verifer returned sat in 1.189252 secs.
[10/19 11:46:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t     rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58582.052734  -58782.024170  55056.433838 -58582.052734     0.057373     0.057373 -58782.024170    0.000000         -58782.024170  199.971436      100.000000
1  -58582.052734  -58682.052734  55056.433838 -58582.052734   199.970947   199.970947 -58682.052734    0.000000         -58682.052979  100.000000        0.000000
2  -58582.023926  -58582.052734  55056.433838 -58582.023926   100.028809   100.028809 -58582.052734    0.000000         -58582.052979    0.028809      -99.971191
3  -57324.727539  -58482.024170  55056.433838 -57324.727539  1257.325195  1257.325195 -58482.024170  750.296387         -58482.024170  407.000244      307.028809
4  -57323.727539  -58382.023926  55056.433838 -57323.727539   628.662598     1.000000 -58382.023926  750.296387         -58382.023926  308.000000      208.028809
5  -57167.381836  -58182.052734  55056.433838 -57167.381836   464.345703   465.345703 -58182.052734  750.296387         -58182.052734  264.374512      264.374512
6  -56999.583496  -58182.052734  55056.433838 -56999.583496   432.172852   433.172852 -58182.052734  775.440430         -58182.081543  407.028809      307.028809
7  -56999.583496  -57982.052734  55056.433838 -56999.583496   216.086426     1.000000 -57982.052734  775.440430         -57982.052734  207.028809      207.028809
8  -56898.583496  -57982.024170  55056.433838 -56898.583496   308.028809   309.028809 -57982.024170  775.440430         -57982.024170  308.000244      208.028809
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=51495/2048, 
, buffer=628795/2048.[0m
[10/19 11:46:43]  --------------------------------------------------------------------------------
[10/19 11:46:43]  Iteration: 51 (0 solution, 50 counterexamples)
[10/19 11:47:00]  Generator returned sat in 16.145785 secs.
[10/19 11:47:01]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:47:01]  Improved gap from 0.0 to 100
[10/19 11:47:03]  Improved number of small numbers from 28 to 39 out of a max of 114
[10/19 11:47:03]  Verifer returned sat in 2.023929 secs.
[10/19 11:47:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58160.626953  -58164.612564  54535.993668 -58160.626953    0.057373    0.057373 -58164.612564    0.000000         -58164.612564    3.985611        0.985611
1  -58160.626953  -58161.612564  54535.993668 -58160.626953    0.028809    0.028809 -58161.612564    0.000000         -58161.641113    0.985611      -99.014389
2  -57960.655594  -58061.583878  54535.993668 -57960.655594  200.956970  200.956970 -58061.583878    0.000000         -58061.583878  100.928284        0.956970
3  -57860.655594  -57862.540848  54535.993668 -57860.655594  200.928284  200.928284 -57862.540848    0.000000         -57862.540848    1.885254        0.956970
4  -57709.619736  -57812.691452  54535.993668 -57709.619736  302.071716  151.035858 -57812.691452   51.007172         -57812.691452   52.064545        0.985657
5  -57609.648422  -57661.612564  54535.993668 -57609.648422  152.035858  227.053787 -57661.612564   51.007172         -57661.612564    0.956970        0.956970
6  -57409.662766  -57661.583878  54535.993668 -57409.662766  399.971313  199.985657 -57661.583878  150.964142         -57661.583878  100.956970        0.985657
7  -57309.634079  -57462.091049  54535.993668 -57309.634079  200.985657  300.478485 -57462.091049  150.992828         -57462.091049    1.464142        0.985657
8  -57209.605392  -57461.583740  54535.993668 -57209.605392  101.492828  151.239243 -57461.583740  151.021515         -57461.583740  100.956833        0.985657
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1638635/16384, 
, buffer=16149/16384.[0m
[10/19 11:47:03]  --------------------------------------------------------------------------------
[10/19 11:47:03]  Iteration: 52 (0 solution, 51 counterexamples)
[10/19 11:47:36]  Generator returned sat in 31.383775 secs.
[10/19 11:47:36]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:48:11]  Improved gap from 2.4e-15 to 31.25
[10/19 11:48:16]  Improved number of small numbers from 41 to 57 out of a max of 114
[10/19 11:48:16]  Verifer returned sat in 39.723450 secs.
[10/19 11:48:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -57060.377686  -57132.534305  54380.970459 -57060.377686    0.057129    0.057129 -57132.534305        0.0         -57132.534305  72.156619        0.053729
1  -56960.431559  -56960.431559  54380.970459 -56960.431559  172.102745  172.102745 -56960.431559        0.0         -56960.431559   0.000000       -0.000145
2  -56929.154599  -56960.404599  54449.693643 -56929.154599   31.276961   31.276961 -56960.404599        0.0         -56960.404599  31.250000        0.000000
3  -56929.154599  -56929.154599  54518.443604 -56929.154599    0.026961    0.026961 -56929.154599        0.0         -56929.181396   0.000000      -31.250040
4  -56876.802932  -56897.877638  54586.891683 -56876.802932  102.703333   52.351667 -56897.877638        0.0         -56897.877638  21.074706      -10.450294
5  -56833.988618  -56866.352638  54654.527588 -56833.988618   83.628627   42.814314 -56866.352638        0.0         -56866.379395  32.364020       -0.000075
6  -56788.068471  -56833.961658  54708.607422 -56788.068471   89.840294   45.920147 -56833.961658        0.0         -56833.961658  45.893186       -0.000094
7  -56740.445040  -56788.041510  54760.983887 -56740.445040   93.516618   47.758309 -56788.041510        0.0         -56788.041510  47.596471       -0.000198
8  -56688.106854  -56709.181396  54760.984131 -56688.106854  102.676373   52.338186 -56709.181396        0.0         -56709.181396  21.074543      -47.661767
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=221/4096.[0m
[10/19 11:48:16]  --------------------------------------------------------------------------------
[10/19 11:48:16]  Iteration: 53 (0 solution, 52 counterexamples)
[10/19 11:48:39]  Generator returned sat in 21.695762 secs.
[10/19 11:48:39]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:48:39]  Improved gap from 15.903594970703125 to 100
[10/19 11:48:40]  Improved number of small numbers from 35 to 114 out of a max of 114
[10/19 11:48:40]  Verifer returned sat in 0.850254 secs.
[10/19 11:48:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57337.143555  -57437.171875  54760.983887 -57337.143555    0.057129    0.057129 -57437.171875    0.000000         -57437.186279  100.028320        0.028320
1  -57237.157715  -57237.171875  54760.983887 -57237.157715  200.014160  200.014160 -57237.171875    0.000000         -57237.171875    0.014160        0.014160
2  -57237.143555  -57237.157715  54760.983887 -57237.143555    0.028320    0.028320 -57237.157715    0.000000         -57237.157715    0.014160      -99.971680
3  -57103.481445  -57104.467285  54760.983887 -57103.481445  133.676270  133.676270 -57104.467285    0.000000         -57104.467285    0.985840      -66.309570
4  -56937.129150  -56971.152832  54760.983887 -56937.129150  167.352295  166.352295 -56971.152832    0.014160         -56971.152832   34.009521        0.028564
5  -56837.129150  -56837.171875  54760.983887 -56837.129150  134.009521  268.019043 -56837.171875    0.014160         -56837.171875    0.028564        0.028564
6  -56637.136230  -56772.171875  54760.983887 -56637.136230  200.992920  199.992920 -56772.171875  100.007080         -56772.171875   35.028564        0.028564
7  -56505.017090  -56662.171875  54760.983887 -56505.017090  167.147705  334.295410 -56662.171875  132.126221         -56662.171875   25.028564        0.028564
8  -56374.555176  -56637.171875  54760.983887 -56374.555176  155.490479  310.980957 -56637.171875  162.588135         -56537.129395  100.028564        0.028564
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=665903/4096, 
, buffer=117/4096.[0m
[10/19 11:48:40]  --------------------------------------------------------------------------------
[10/19 11:48:40]  Iteration: 54 (0 solution, 53 counterexamples)
[10/19 11:49:14]  Generator returned sat in 32.323992 secs.
[10/19 11:49:14]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:49:14]  Improved gap from 0.00125 to 0
[10/19 11:49:15]  Improved number of small numbers from 64 to 79 out of a max of 114
[10/19 11:49:15]  Verifer returned sat in 1.749572 secs.
[10/19 11:49:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57087.190430  -57151.848538  54725.644720 -57087.190430    0.056885    0.056885 -57151.848538        0.0         -57151.848538   64.658109       64.658109
1  -57087.187705  -57151.848538  54760.983643 -57087.187705   64.660833   64.660833 -57151.848538        0.0         -57087.185303   64.660833       -0.000244
2  -56687.195205  -57087.185303  54760.983643 -56687.195205  464.653333  464.653333 -57087.185303        0.0         -57087.185303  399.990098      299.992256
3  -56687.195205  -56887.187705  54760.983643 -56687.195205    0.002500    0.002500 -56887.187705        0.0         -56887.187705  199.992500      199.992256
4  -56687.195205  -56887.185205  54760.983643 -56687.195205  133.331667    0.010000 -56887.185205        0.0         -56887.185205  199.990000       99.992256
5  -56687.187705  -56787.185303  54760.983643 -56687.187705  199.997500    0.010000 -56787.185303        0.0         -56787.185303   99.997598       -0.000244
6  -56687.177705  -56687.185205  54860.973877 -56687.177705  250.998750    0.010000 -56687.185205        0.0         -56687.185205    0.007500       -0.000010
7  -56687.167705  -56687.167705  54960.963867 -56687.167705  226.500625    0.010000 -56687.167705        0.0         -56687.167705    0.000000       -0.000020
8  -56687.157705  -56687.165039  54960.964111 -56687.157705  214.259062    0.010000 -56687.165039        0.0         -56687.165039    0.007334      -99.989775
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1228779/4096.[0m
[10/19 11:49:16]  --------------------------------------------------------------------------------
[10/19 11:49:16]  Iteration: 55 (0 solution, 54 counterexamples)
[10/19 11:50:34]  Generator returned sat in 77.309357 secs.
[10/19 11:50:34]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:50:37]  Improved gap from 0.0 to 100
[10/19 11:50:38]  Improved number of small numbers from 34 to 114 out of a max of 114
[10/19 11:50:38]  Verifer returned sat in 3.535768 secs.
[10/19 11:50:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57391.313477  -57591.285156  54760.983643 -57391.313477    0.056885    0.056885 -57591.285156   0.000000         -57591.285156  199.971680      100.000244
1  -57391.313477  -57491.313477  54760.983643 -57391.313477  199.971436  199.971436 -57491.313477   0.000000         -57491.313477  100.000000        0.000244
2  -56987.934570  -57391.285156  54760.983643 -56987.934570  503.378906  503.378906 -57391.285156   0.000000         -57391.285156  403.350586      303.379150
3  -56887.877686  -57191.313721  54760.983643 -56887.877686  503.407471  503.407471 -57191.313721   0.028564         -57191.313721  303.407471      303.407471
4  -56886.877686  -57097.114502  54760.983643 -56886.877686  399.971436    1.000000 -57097.114502   0.028564         -57097.114502  210.208252      204.407471
5  -56699.000732  -56991.313721  54760.983643 -56699.000732  398.085205  399.085205 -56991.313721   0.028564         -56991.313721  292.284424      292.284424
6  -56591.256836  -56991.313721  54760.983643 -56591.256836  400.028320  401.028320 -56991.313721   0.028564         -56991.342041  400.028320      300.028320
7  -56591.256836  -56791.313721  54760.983643 -56591.256836  301.014160  302.014160 -56791.313721   0.028564         -56791.313721  200.028320      200.028320
8  -56486.877686  -56791.284912  54760.983643 -56486.877686  304.407471  305.407471 -56791.284912   0.028564         -56791.284912  304.378662      204.407471
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1242757/4096.[0m
[10/19 11:50:38]  --------------------------------------------------------------------------------
[10/19 11:50:38]  Iteration: 56 (0 solution, 55 counterexamples)
[10/19 11:51:03]  Generator returned sat in 23.530194 secs.
[10/19 11:51:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:51:06]  Improved gap from 0.00125 to 32.8125
[10/19 11:51:07]  Improved number of small numbers from 56 to 74 out of a max of 114
[10/19 11:51:07]  Verifer returned sat in 3.853282 secs.
[10/19 11:51:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57021.358887  -57121.387268  54760.983643 -57021.358887    0.056885   0.056885 -57121.387268        0.0         -57121.387268  100.028381      100.028381
1  -57021.358887  -57021.387268  54760.983643 -57021.358887    0.028564   0.028564 -57021.387268        0.0         -57021.387268    0.028381        0.028381
2  -56988.546326  -57021.387268  54828.114258 -56988.546326   32.840942  32.840942 -57021.387268        0.0         -57021.415527   32.840942       -0.028442
3  -56988.517883  -56988.517883  54895.301514 -56988.517883   32.869385  32.869385 -56988.517883        0.0         -56988.517822    0.000000      -32.812744
4  -56923.083191  -56955.676941  54962.460693 -56923.083191  132.869385  65.434692 -56955.676941        0.0         -56955.676941   32.593750       -0.218872
5  -56891.228027  -56920.835999  55027.619873 -56891.228027   65.710327  31.855164 -56920.835999        0.0         -56920.835999   29.607971       -3.204529
6  -56841.952393  -56888.023499  55081.548584 -56841.952393  100.551270  49.275635 -56888.023499        0.0         -56841.923828   46.071106       -0.000183
7  -56792.705200  -56841.923950  55132.301514 -56792.705200  100.494385  49.247192 -56841.923950        0.0         -56841.923950   49.218750       -0.000061
8  -56736.828705  -56769.422363  55132.301514 -56736.828705  113.752991  55.876495 -56769.422363        0.0         -56769.422363   32.593658      -44.123566
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=409717/4096.[0m
[10/19 11:51:08]  --------------------------------------------------------------------------------
[10/19 11:51:08]  Iteration: 57 (0 solution, 56 counterexamples)
[10/19 11:51:13]  Generator returned sat in 4.169538 secs.
[10/19 11:51:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:51:13]  Improved gap from 0.0 to 100
[10/19 11:51:15]  Improved number of small numbers from 40 to 56 out of a max of 114
[10/19 11:51:15]  Verifer returned sat in 1.606309 secs.
[10/19 11:51:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57204.548828  -57204.548828  55034.24469 -57204.548828    0.056885    0.056885 -57204.548828    0.000000         -57204.548828    0.000000      -99.971455
1  -56993.190918  -57004.577373  55034.24469 -56993.190918  211.357910  211.357910 -57004.577373    0.000000         -57004.577373   11.386455       11.386455
2  -56893.134258  -56977.548931  55034.24469 -56893.134258  111.443115  111.443115 -56977.548931    0.028442         -56977.548931   84.386230       11.414673
3  -56375.634258  -56904.577373  55034.24469 -56375.634258  601.886230  601.886230 -56904.577373  417.528442         -56904.605713  111.414673       11.414673
4  -56224.662700  -56804.577373  55034.24469 -56224.662700  299.943115  150.971558 -56804.577373  468.500000         -56804.577393  111.414673       11.414673
5  -56187.105815  -56656.634258  55034.24469 -56187.105815  148.971558   75.485779 -56656.634258  468.500000         -56656.634258    1.028442      -51.028442
6  -55867.219585  -56571.863037  55034.24469 -55867.219585  320.914673  319.914673 -56571.863037  625.943115         -56571.863037   78.700337       11.414673
7  -55786.490917  -56427.577373  55034.24469 -55786.490917  159.457336   80.728668 -56427.577373  625.943115         -56427.577373   15.143341       -7.856659
8  -55424.634258  -56404.577373  55034.24469 -55424.634258  377.000000  376.000000 -56404.577373  868.528442         -56404.577393  111.414673       11.414673
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=3277033/8192, 
, buffer=93509/8192.[0m
[10/19 11:51:15]  --------------------------------------------------------------------------------
[10/19 11:51:15]  Iteration: 58 (0 solution, 57 counterexamples)
[10/19 11:52:03]  Generator returned sat in 46.567757 secs.
[10/19 11:52:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 11:52:05]  Improved gap from 0.007110595703125 to 100
[10/19 11:52:07]  Improved number of small numbers from 17 to 25 out of a max of 114
[10/19 11:52:07]  Verifer returned sat in 4.003758 secs.
[10/19 11:52:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57369.551514  -57569.565891  55234.251801 -57369.551514    0.056885    0.056885 -57569.565891   0.028442         -57569.565891  199.985935       99.993045
1  -57369.544559  -57469.573001  55234.251801 -57369.544559  199.992889  199.992889 -57469.573001   0.028442         -57469.573242  100.000000        0.000000
2  -56969.523227  -57369.573001  55234.251801 -56969.523227  500.021332  500.021332 -57369.573001   0.035553         -57369.580078  400.014221      300.014221
3  -56869.516117  -57170.523227  55234.251801 -56869.516117  500.021332  500.021332 -57170.523227   0.042664         -57170.523227  300.964447      300.014221
4  -56868.516117  -57069.573001  55234.251801 -56868.516117  398.042664    1.000000 -57069.573001   0.042664         -57069.573001  201.014221      201.014221
5  -56669.509006  -57069.565891  55234.251801 -56669.509006  400.021332  400.021332 -57069.565891   0.049774         -57069.565891  400.007111      300.014221
6  -56669.509006  -56870.573001  55234.251801 -56669.509006  299.007111    1.000000 -56870.573001   0.049774         -56870.573001  201.014221      200.014221
7  -56570.044559  -56769.573001  55234.251801 -56570.044559  300.478668  300.478668 -56769.573001   0.049774         -56769.573001  199.478668      199.478668
8  -56468.283893  -56769.565674  55234.251801 -56468.283893  301.239334  301.239334 -56769.565674   0.049774         -56769.565674  301.232007      201.239334
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=233/32768, 
, buffer=4915433/16384.[0m
[10/19 11:52:07]  --------------------------------------------------------------------------------
[10/19 11:52:07]  Iteration: 59 (0 solution, 58 counterexamples)
[10/19 11:53:13]  Generator returned sat in 63.881596 secs.
[10/19 11:53:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:53:20]  Improved gap from 0.0 to 31.25
[10/19 11:53:22]  Improved number of small numbers from 43 to 59 out of a max of 114
[10/19 11:53:22]  Verifer returned sat in 9.291396 secs.
[10/19 11:53:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -56922.584229  -56954.862573  54719.541372 -56922.584229    0.056641    0.056641 -56954.862573        0.0         -56954.862573  32.278344       32.278344
1  -56822.612573  -56855.862573  54719.541372 -56822.612573  132.250000  132.250000 -56855.862573        0.0         -56855.862573  33.250000       32.250000
2  -56822.612573  -56854.862573  54787.262930 -56822.612573    0.028564    0.028564 -56854.862573        0.0         -56822.583984  32.250000       -0.028442
3  -56822.584130  -56822.584130  54856.012695 -56822.584130   32.278442   32.278442 -56822.584130        0.0         -56822.612549   0.000000      -31.250234
4  -56755.444909  -56791.257409  54920.123708 -56755.444909  132.278442   67.139221 -56791.257409        0.0         -56791.257409  35.812500        0.000000
5  -56726.652246  -56755.416467  54988.845266 -56726.652246   64.605164   33.302582 -56755.416467        0.0         -56755.416467  28.764221       -2.485779
6  -56675.929193  -56724.166467  55040.067139 -56675.929193   99.446106   50.723053 -56724.166467        0.0         -56724.194824  48.237274       -0.540853
7  -56625.748803  -56675.359948  55067.319580 -56625.748803   98.417664   50.208832 -56675.359948        0.0         -56675.359948  49.611145      -23.108022
8  -56566.800073  -56602.612549  55131.478760 -56566.800073  115.897461   58.948730 -56602.612549        0.0         -56602.612549  35.812476       -0.000112
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=132213/4096.[0m
[10/19 11:53:22]  --------------------------------------------------------------------------------
[10/19 11:53:22]  Iteration: 60 (0 solution, 59 counterexamples)
[10/19 11:55:11]  Generator returned sat in 107.080597 secs.
[10/19 11:55:11]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:55:49]  Improved gap from 0.0 to 12.5
[10/19 11:55:49]  Improved number of small numbers from 33 to 114 out of a max of 114
[10/19 11:55:49]  Verifer returned sat in 38.361769 secs.
[10/19 11:55:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57034.640869  -57084.251221  54800.319580 -57034.640869    0.056641    0.056641 -57084.251221   0.000000         -57084.251221   49.610352        1.000000
1  -56934.669189  -56935.640869  54800.319580 -56934.669189  149.582031  149.582031 -56935.640869   0.000000         -56935.640869    0.971680        0.971680
2  -56834.669189  -56845.716064  54800.319580 -56834.669189  100.971680  100.971680 -56845.716064   0.000000         -56845.716064   11.046875        0.971680
3  -56834.669189  -56835.640869  54887.819580 -56834.669189   11.018555   11.018555 -56835.640869   0.000000         -56835.668945    0.971680      -11.528320
4  -56704.854736  -56823.140869  54887.819580 -56704.854736  130.814453  129.814453 -56823.140869  17.286133         -56723.112305  101.000000        1.000000
5  -56704.854736  -56723.112549  54975.291260 -56704.854736    1.000000    2.000000 -56723.112549  17.286133         -56723.112549    0.971680      -11.528320
6  -56643.052979  -56710.612549  55023.162354 -56643.052979   62.801758   61.801758 -56710.612549  17.286133         -56710.640869   50.273438       -1.855469
7  -56598.411377  -56658.483643  55080.375977 -56598.411377   94.915039   93.915039 -56658.483643  17.286133         -56658.511719   42.786133       -0.000244
8  -56510.411377  -56615.669189  55092.375977 -56510.411377  130.786133  129.786133 -56615.669189  17.286133         -56615.669189   87.971680       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=1.[0m
[10/19 11:55:50]  --------------------------------------------------------------------------------
[10/19 11:55:50]  Iteration: 61 (0 solution, 60 counterexamples)
[10/19 11:56:22]  Generator returned sat in 30.543887 secs.
[10/19 11:56:22]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:56:27]  Improved gap from 0.0 to 100
[10/19 11:56:29]  Improved number of small numbers from 52 to 70 out of a max of 114
[10/19 11:56:29]  Verifer returned sat in 7.395215 secs.
[10/19 11:56:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0  -57303.658447  -57303.672729  55068.35144 -57303.658447    0.056641    0.056641 -57303.672729    0.000000         -57303.672729   0.014282        0.014282
1  -57303.658447  -57303.672729  55068.35144 -57303.658447    0.014160    0.014160 -57303.672729    0.000000         -57203.658447   0.014282      -99.985718
2  -57103.672729  -57203.672607  55068.35144 -57103.672729  200.000000  200.000000 -57203.672607    0.000000         -57203.672607  99.999878        0.000000
3  -57011.686768  -57103.658569  55068.35144 -57011.686768  191.985840  191.985840 -57103.658569    0.000000         -57103.658569  91.971802       -8.014038
4  -56906.658569  -56909.701050  55068.35144 -56906.658569  197.000000  198.000000 -56909.701050    0.000000         -56909.701050   3.042480       -2.985840
5  -56613.215210  -56852.901367  55068.35144 -56613.215210  296.485840  297.485840 -56852.901367  190.429199         -56852.901367  49.256958        0.028320
6  -56513.229248  -56703.672729  55068.35144 -56513.229248  149.242920  223.864380 -56703.672729  190.429199         -56703.672729   0.014282        0.014282
7  -56237.629150  -56608.452698  55068.35144 -56237.629150  275.614380  276.614380 -56608.452698  366.015259         -56608.452698   4.808289        0.028320
8  -56103.630249  -56506.687012  55068.35144 -56103.630249  138.807190  208.210785 -56506.687012  400.014160         -56506.687012   3.042603        0.028320
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=819229/2048, 
, buffer=29/1024.[0m
[10/19 11:56:30]  --------------------------------------------------------------------------------
[10/19 11:56:30]  Iteration: 62 (0 solution, 61 counterexamples)
[10/19 11:57:44]  Generator returned sat in 73.106079 secs.
[10/19 11:57:44]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:58:15]  Improved gap from 0.0 to 12.5
[10/19 11:58:15]  Improved number of small numbers from 42 to 114 out of a max of 114
[10/19 11:58:15]  Verifer returned sat in 31.144865 secs.
[10/19 11:58:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57428.229980  -57428.230225  55092.908936 -57428.229980    0.056641    0.056641 -57428.230225   0.000000         -57428.244385    0.000244      -99.999756
1  -57315.716064  -57328.216064  55180.394531 -57315.716064  112.514160  112.514160 -57328.216064   0.000000         -57328.216064   12.500000       -0.000244
2  -57204.187744  -57215.715820  55180.394531 -57204.187744  124.028320  124.028320 -57215.715820   0.013916         -57215.715820   11.514160       11.514160
3  -57104.173584  -57117.721924  55180.394531 -57104.173584  111.528320  111.528320 -57117.721924   0.028076         -57117.721924   13.520264       11.514160
4  -57103.173584  -57115.701660  55267.880371 -57103.173584  156.254150    1.000000 -57115.701660   0.028076         -57115.701660   12.500000        0.000000
5  -56931.289307  -57103.201660  55267.880371 -56931.289307  184.384277  185.384277 -57103.201660  60.398193         -57103.216064  111.514160       11.514160
6  -56931.289307  -57003.201660  55355.380371 -56931.289307   57.257080    1.000000 -57003.201660  60.398193         -56990.701904   11.514160       -0.985840
7  -56856.914795  -56990.687500  55381.991699 -56856.914795   85.888672   86.888672 -56990.687500  60.398193         -56990.687500   73.374512        0.000000
8  -56824.837891  -56897.736084  55449.914795 -56824.837891  105.451416  106.451416 -56897.736084  60.398193         -56897.736084   12.500000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=61819/1024, 
, buffer=23581/2048.[0m
[10/19 11:58:16]  --------------------------------------------------------------------------------
[10/19 11:58:16]  Iteration: 63 (0 solution, 62 counterexamples)
[10/19 11:58:45]  Generator returned sat in 27.507897 secs.
[10/19 11:58:45]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:58:46]  Improved gap from 1.0277777777777777 to 100
[10/19 11:58:46]  Improved number of small numbers from 98 to 98 out of a max of 114
[10/19 11:58:46]  Verifer returned sat in 1.559859 secs.
[10/19 11:58:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57567.924072  -57602.301025  55180.394531 -57567.924072    0.056641    0.056641 -57602.301025   0.000000         -57602.301025   34.376953       12.028320
1  -57479.952393  -57579.952393  55180.394531 -57479.952393  122.348633  122.348633 -57579.952393   0.000000         -57579.952393  100.000000        0.000000
2  -57367.938232  -57479.938232  55180.394531 -57367.938232  212.014160  212.014160 -57479.938232   0.000000         -57479.938232  112.000000       12.014160
3  -57353.754150  -57354.768311  55180.394531 -57353.754150  126.184082  126.184082 -57354.768311   0.000000         -57354.768311    1.014160      -73.801758
4  -57167.909912  -57181.895752  55180.394531 -57167.909912  186.858398  185.858398 -57181.895752   0.014160         -57181.895752   13.971680       12.028320
5  -57067.895752  -57079.952393  55180.394531 -57067.895752  198.028320  100.014160 -57079.952393   0.028320         -57079.952393   12.028320       12.028320
6  -56967.399292  -57079.952393  55180.394531 -56967.399292  198.992920  100.496460 -57079.952393   0.524780         -57079.966553  112.028320       12.028320
7  -56943.019653  -56944.558594  55180.394531 -56943.019653  136.407959   69.203979 -56944.558594   0.524780         -56944.558594    1.014160      -63.592041
8  -56757.161255  -56879.952393  55180.394531 -56757.161255  186.872559  185.872559 -56879.952393  10.762817         -56767.909912  112.028320       12.028320
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=88053/8192, 
, buffer=12317/1024.[0m
[10/19 11:58:47]  --------------------------------------------------------------------------------
[10/19 11:58:47]  Iteration: 64 (0 solution, 63 counterexamples)
[10/19 11:59:12]  Generator returned sat in 23.493891 secs.
[10/19 11:59:12]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
[0m
[10/19 11:59:39]  Improved gap from 0.0281982421875 to 9.375
[10/19 11:59:44]  Improved number of small numbers from 34 to 47 out of a max of 114
[10/19 11:59:44]  Verifer returned sat in 32.625181 secs.
[10/19 11:59:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57297.719482  -57407.094300  55032.967460 -57297.719482    0.056152    0.056152 -57407.094300   0.000000         -57307.066162  109.374818        9.374818
1  -57197.747499  -57208.995999  55032.967460 -57197.747499  209.346802  209.346802 -57208.995999   0.000000         -57208.995999   11.248500        9.346802
2  -57163.896128  -57173.271128  55089.769287 -57163.896128   45.099871   45.099871 -57173.271128   0.000000         -57173.271128    9.375000        0.000000
3  -57154.521128  -57163.896128  55180.394287 -57154.521128   18.750000   18.750000 -57163.896128   0.000000         -57154.492920    9.375000        0.000000
4  -57032.922042  -57142.117930  55180.394287 -57032.922042  130.974086  196.461129 -57142.117930  12.224086         -57142.117930   96.971802        9.375000
5  -57032.922042  -57054.521128  55271.019287 -57032.922042   34.439035   16.219517 -57054.521128  12.224086         -57045.118164    9.375000        0.000000
6  -56965.702524  -57045.146128  55303.799561 -56965.702524   76.594517  114.891776 -57045.146128  12.224086         -57045.174316   67.219517       -0.000209
7  -56935.249783  -56977.898412  55372.825439 -56935.249783   97.672259  146.508388 -56977.898412  12.224086         -56977.898412   30.424543       -0.521589
8  -56834.728438  -56943.924316  55372.825439 -56834.728438  130.945888  196.418832 -56943.924316  12.224086         -56943.924316   96.971792       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=75/8.[0m
[10/19 11:59:45]  --------------------------------------------------------------------------------
[10/19 11:59:45]  Iteration: 65 (0 solution, 64 counterexamples)
[10/19 12:01:55]  Generator returned sat in 128.447560 secs.
[10/19 12:01:55]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 12:02:02]  Improved gap from 0.0125 to 48.4375
[10/19 12:02:03]  Improved number of small numbers from 59 to 68 out of a max of 114
[10/19 12:02:03]  Verifer returned sat in 8.620181 secs.
[10/19 12:02:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56000.307373  -56000.309789  55221.062144 -56000.307373    0.056152    0.056152 -56000.309789     0.0000         -56000.312500    0.002416      -99.997584
1  -55800.307289  -55850.313539  55221.062144 -55800.307289  200.002500  200.002500 -55850.313539     0.0000         -55850.313539   50.006250        0.002500
2  -55700.302289  -55798.207289  55221.062144 -55700.302289  150.011250  150.011250 -55798.207289     0.0025         -55798.207289   97.902500        0.005000
3  -55700.302289  -55700.309789  55221.062144 -55700.302289    0.002500    0.002500 -55700.309789     0.0025         -55700.312256    0.005000      -99.995000
4  -55550.306039  -55600.309789  55221.062144 -55550.306039  150.001250  151.001250 -55600.309789     0.0025         -55500.307129   50.001250      -49.998750
5  -55400.304789  -55400.309789  55221.062144 -55400.304789  200.002500  201.002500 -55400.309789     0.0025         -55400.309789    0.002500        0.002500
6  -55101.357289  -55300.309789  55221.062144 -55101.357289  298.950000  299.950000 -55300.309789   198.9475         -55300.309789    0.005000        0.005000
7  -55101.347289  -55300.309789  55272.624644 -55101.347289  399.000000    0.010000 -55300.309789   198.9475         -55300.312256    0.015000      -48.422500
8  -54751.862289  -55251.869873  55272.624644 -54751.862289  349.500000  350.500000 -55251.869873   400.0050         -55251.869873  100.002584        0.005000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
, buffer=1/200.[0m
[10/19 12:02:04]  --------------------------------------------------------------------------------
[10/19 12:02:04]  Iteration: 66 (0 solution, 65 counterexamples)
[10/19 12:03:30]  Generator returned sat in 84.567275 secs.
[10/19 12:03:30]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 12:03:32]  Improved gap from 1.028076171875 to 100
[10/19 12:03:34]  Improved number of small numbers from 27 to 47 out of a max of 114
[10/19 12:03:34]  Verifer returned sat in 4.149628 secs.
[10/19 12:03:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t     rate_0,t   service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58450.295898  -58550.310059  57771.076327 -58450.295898     0.055908     0.055908 -58550.310059     0.000000         -58550.310059  100.014160        0.028073
1  -58450.295898  -58450.309934  57771.076327 -58450.295898     0.014160     0.014160 -58450.309934     0.000000         -58450.309934    0.014035      -99.971927
2  -58250.281857  -58350.323972  57771.076327 -58250.281857   200.028076   200.028076 -58350.323972     0.014038         -58350.337891  100.028076        0.028076
3  -56866.524631  -58250.323972  57771.076327 -56866.524631  1483.785303  1483.785303 -58250.323972  1283.771265         -58250.337891  100.028076        0.028076
4  -56865.524631  -58150.323972  57771.076327 -56865.524631   740.892651     1.000000 -58150.323972  1283.771265         -58150.338135    1.028076      -98.971924
5  -56346.113400  -58050.309814  57771.076327 -56346.113400   520.439307   519.439307 -58050.309814  1604.182495         -58050.309814  100.013919        0.028076
6  -56345.113400  -57950.309934  57771.076327 -56345.113400   259.219653     1.000000 -57950.309934  1604.182495         -57950.309934    1.014038      -98.971924
7  -56066.510593  -57850.310059  57771.076327 -56066.510593   279.616846   278.616846 -57850.310059  1683.785303         -57850.310059  100.014163        0.028076
8  -56065.510593  -57750.323972  57771.076327 -56065.510593   138.808423     1.000000 -57750.323972  1683.785303         -57749.281982    1.028076      -98.971924
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3276915/8192, 
, buffer=115/4096.[0m
[10/19 12:03:35]  --------------------------------------------------------------------------------
[10/19 12:03:35]  Iteration: 67 (0 solution, 66 counterexamples)
[10/19 12:03:58]  Generator returned sat in 22.319298 secs.
[10/19 12:03:58]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
[0m
[10/19 12:04:01]  Improved number of small numbers from 62 to 86 out of a max of 113
[10/19 12:04:01]  Verifer returned sat in 2.288935 secs.
[10/19 12:04:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58450.295898  -58550.295898  57871.04834 -58450.295898    0.055908    0.055908 -58550.295898    0.000000         -58550.295898  100.000000      100.000000
1  -58450.295898  -58550.295898  57871.04834 -58450.295898    0.028076    0.028076 -58550.295898    0.000000         -58550.323730  100.000000        0.000000
2  -58049.268066  -58450.267944  57871.04834 -58049.268066  501.027832  501.027832 -58450.267944    0.000000         -58450.267944  400.999878      301.027832
3  -57651.932495  -58350.267944  57871.04834 -57651.932495  798.335449  798.335449 -58350.267944  297.307495         -58350.267944  401.027954      301.055908
4  -57651.932495  -58150.295898  57871.04834 -57651.932495  400.167725  200.083862 -58150.295898  297.307495         -58150.295898  201.055908      201.055908
5  -57451.904541  -58149.267822  57871.04834 -57451.904541  401.083862  601.625793 -58149.267822  297.335449         -58149.267822  400.027832      301.055908
6  -57451.904541  -57953.586243  57871.04834 -57451.904541  201.541931  100.770966 -57953.586243  297.335449         -57953.586243  204.346252      201.055908
7  -57356.138977  -57850.295898  57871.04834 -57356.138977  300.111816  450.167725 -57850.295898  297.335449         -57850.295898  196.821472      196.821472
8  -57251.904541  -57850.268066  57871.04834 -57251.904541  301.055908  451.583862 -57850.268066  297.335449         -57850.268066  301.028076      201.055908
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=229/8192, 
, buffer=1233125/4096.[0m
[10/19 12:04:01]  --------------------------------------------------------------------------------
[10/19 12:04:01]  Iteration: 68 (0 solution, 67 counterexamples)
[10/19 12:05:23]  Generator returned sat in 80.089375 secs.
[10/19 12:05:23]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 12:05:25]  Improved number of small numbers from 20 to 34 out of a max of 113
[10/19 12:05:25]  Verifer returned sat in 1.862481 secs.
[10/19 12:05:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -58349.180664  -58449.208425  57669.960781 -58349.180664    0.055908    0.055908 -58449.208425    0.000000         -58349.166504  100.027761        0.027761
1  -58349.180664  -58349.194448  57669.960781 -58349.180664    0.014160    0.014160 -58349.194448    0.000000         -58349.194448    0.013784      -99.972239
2  -57849.166494  -58249.194448  57669.960781 -57849.166494  500.027954  500.027954 -58249.194448    0.013977         -58249.194448  400.013977      300.027954
3  -57454.984792  -58149.194448  57669.960781 -57454.984792  794.195679  794.195679 -58149.194448  294.195679         -58149.194448  400.013977      300.027954
4  -57454.984792  -57949.208425  57669.960781 -57454.984792  398.097839  598.146759 -57949.208425  294.195679         -57949.208425  200.027954      200.027954
5  -57254.970815  -57949.194336  57669.960781 -57254.970815  400.041931  799.083862 -57949.194336  294.209656         -57949.194336  400.013865      300.027954
6  -57254.970815  -57752.208425  57669.960781 -57254.970815  201.020966  302.531448 -57752.208425  294.209656         -57752.208425  203.027954      200.027954
7  -57157.995275  -57649.857621  57669.960781 -57157.995275  300.003494  599.006989 -57649.857621  294.209656         -57649.857621  197.652690      197.003494
8  -57054.970815  -57649.194580  57669.960781 -57054.970815  300.677149  600.354299 -57649.194580  294.209656         -57649.194580  300.014109      200.027954
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=229/16384, 
, buffer=2457829/8192.[0m
[10/19 12:05:25]  --------------------------------------------------------------------------------
[10/19 12:05:25]  Iteration: 69 (0 solution, 68 counterexamples)
[10/19 12:05:52]  Generator returned sat in 24.997926 secs.
[10/19 12:05:52]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 12:05:53]  Improved gap from 0.0 to 100
[10/19 12:05:54]  Improved number of small numbers from 34 to 48 out of a max of 114
[10/19 12:05:54]  Verifer returned sat in 2.268086 secs.
[10/19 12:05:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57955.110596  -58080.166504  57300.946804 -57955.110596    0.055908    0.055908 -58080.166504   0.000000         -58080.166504  125.055908       25.083853
1  -57855.138672  -57980.166494  57300.946804 -57855.138672  225.027832  225.027832 -57980.166494   0.000000         -57980.166494  125.027822       25.055776
2  -57755.082632  -57880.166494  57300.946804 -57755.082632  225.083862  225.083862 -57880.166494   0.027954         -57880.166494  125.055908       25.083862
3  -57651.082632  -57780.166494  57300.946804 -57651.082632  229.055908  229.055908 -57780.166494   4.027954         -57780.166494  125.055908       25.083862
4  -57548.082632  -57680.194448  57300.946804 -57548.082632  228.055908  114.027954 -57680.194448   7.027954         -57680.222168  125.083862       25.083862
5  -57446.110586  -57580.194448  57300.946804 -57446.110586  227.055908  113.527954 -57580.194448   9.000000         -57480.166504  125.083862       25.083862
6  -57345.138540  -57480.194448  57300.946804 -57345.138540  226.055908  113.027954 -57480.194448   9.972046         -57480.222168  125.083862       25.083862
7  -57245.166494  -57280.194448  57300.946804 -57245.166494  225.055908  112.527954 -57280.194448   9.972046         -57280.194448   25.055908       25.055908
8  -57069.222402  -57280.194448  57300.946804 -57069.222402  201.000000  401.000000 -57280.194448  85.888184         -57180.166260  125.083862       25.083862
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=646023/8192, 
, buffer=205487/8192.[0m
[10/19 12:05:55]  --------------------------------------------------------------------------------
[10/19 12:05:55]  Iteration: 70 (0 solution, 69 counterexamples)
[10/19 12:06:38]  Generator returned sat in 42.274855 secs.
[10/19 12:06:39]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 12:07:05]  Improved gap from 0.0 to 9.375
[10/19 12:07:07]  Improved number of small numbers from 26 to 49 out of a max of 114
[10/19 12:07:07]  Verifer returned sat in 28.652763 secs.
[10/19 12:07:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57944.222412  -57944.250488  57265.002686 -57944.222412    0.055908    0.055908 -57944.250488    0.000000         -57944.250488    0.028076        0.027918
1  -57844.236572  -57844.250488  57265.002686 -57844.236572  100.013916  100.013916 -57844.250488    0.000000         -57844.250488    0.013916        0.013758
2  -57744.250488  -57753.625356  57265.002712 -57744.250488  100.000000  100.000000 -57753.625356    0.000000         -57753.625356    9.374868       -0.000132
3  -57385.347297  -57644.250356  57265.002712 -57385.347297  368.278060  368.278060 -57644.250356  258.875106         -57644.250356    0.027954        0.027954
4  -57201.236221  -57644.250356  57265.002712 -57201.236221  184.139030  275.208545 -57644.250356  342.986182         -57644.264404  100.027954        0.027954
5  -57201.236221  -57544.250356  57354.627712 -57201.236221   92.069515  137.104272 -57544.250356  342.986182         -57544.264160    0.027954      -10.347046
6  -57049.541917  -57533.875356  57354.627712 -57049.541917  151.722257  226.583386 -57533.875356  384.305485         -57533.889160  100.027954        0.027954
7  -57049.541917  -57433.861379  57445.030666 -57049.541917   75.861129  112.791693 -57433.861379  384.305485         -57433.861379    0.013977       -9.569092
8  -56905.430841  -57424.264404  57445.030666 -56905.430841  144.125053  215.187579 -57424.264404  418.819515         -57424.264404  100.014048        0.027954
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=3, loss_amount=22749999999999991/300000000000000, 
, buffer=229/8192.[0m
[10/19 12:07:08]  --------------------------------------------------------------------------------
[10/19 12:07:08]  Iteration: 71 (0 solution, 70 counterexamples)
[10/19 12:07:42]  Generator returned sat in 32.931561 secs.
[10/19 12:07:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 12:08:35]  Improved gap from 0.0025 to 12.5
[10/19 12:08:41]  Improved number of small numbers from 44 to 53 out of a max of 114
[10/19 12:08:41]  Verifer returned sat in 58.666268 secs.
[10/19 12:08:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56425.086670  -56439.064106  57177.505371 -56425.086670    0.055664    0.055664 -56439.064106     0.0000         -56439.064106   13.977437       12.489878
1  -56425.086670  -56437.574106  57265.002930 -56425.086670    0.002686    0.002686 -56437.574106     0.0000         -56437.574106   12.487437       -0.012563
2  -56312.581606  -56325.521606  57265.002930 -56312.581606  124.992500  124.992500 -56325.521606     0.0025         -56325.521606   12.937500       12.490000
3  -56212.579106  -56226.074106  57265.002930 -56212.579106  112.940000  112.940000 -56226.074106     0.0050         -56226.074106   13.490000       12.490000
4  -56212.569106  -56225.074106  57352.502930 -56212.569106  106.495000    0.010000 -56225.074106     0.0050         -56225.076416   12.500000        0.000000
5  -56064.571606  -56212.571606  57352.502930 -56064.571606  160.497500  239.746250 -56212.571606    35.5125         -56212.571606  112.487500       12.490000
6  -56064.571606  -56112.574106  57440.002686 -56064.571606   56.475000    0.010000 -56112.574106    35.5125         -56112.576660   12.490000       -0.010244
7  -55991.074106  -56100.071606  57446.007812 -55991.074106   85.987500  127.981250 -56100.071606    35.5125         -56100.071606   73.485000      -20.507617
8  -55958.064106  -56006.076606  57533.505371 -55958.064106  106.495000  158.742500 -56006.076606    35.5125         -56006.076606   12.500000       -0.000059
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=7101500000000003/200000000000000, 
, buffer=1249/100.[0m
[10/19 12:08:41]  --------------------------------------------------------------------------------
[10/19 12:08:41]  Iteration: 72 (0 solution, 71 counterexamples)
[10/19 12:09:16]  Generator returned sat in 33.121964 secs.
[10/19 12:09:16]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 12:10:01]  Improved gap from 12.5 to 12.5
[10/19 12:10:04]  Improved number of small numbers from 56 to 62 out of a max of 114
[10/19 12:10:04]  Verifer returned sat in 47.408520 secs.
[10/19 12:10:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t   cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56796.623535  -56909.116013  57265.002930 -56796.623535    0.05542    0.055420 -56909.116013    0.00000         -56809.113525  112.492478       12.492478
1  -56696.626013  -56709.116013  57265.002930 -56696.626013  212.49000  212.490000 -56709.116013    0.00000         -56709.116013   12.490000       12.490000
2  -56596.621013  -56617.501013  57265.002930 -56596.621013  112.49500  112.495000 -56617.501013    0.00250         -56617.501013   20.877500       12.492500
3  -56496.618513  -56509.116013  57265.002930 -56496.618513  120.88000  120.880000 -56509.116013    0.00500         -56509.116013   12.492500       12.492500
4  -56496.608513  -56509.113513  57352.500430 -56496.608513  201.00000    0.010000 -56509.113513    0.00500         -56509.113513   12.500000        0.000000
5  -56307.607263  -56496.611013  57352.500430 -56307.607263  201.50125  301.251875 -56496.611013   76.51375         -56496.611013  112.490000       12.492500
6  -56307.607263  -56396.611013  57439.997803 -56307.607263   61.44500    0.010000 -56396.611013   76.51375         -56396.611013   12.490000       -0.010127
7  -56232.122263  -56384.108513  57464.522705 -56232.122263   87.97500  130.962500 -56384.108513   76.51375         -56384.108513   75.472500       -0.000225
8  -56200.104763  -56289.118513  57532.505371 -56200.104763  107.49000  160.235000 -56289.118513   76.51375         -56289.118513   12.500000       -0.000059
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=61207/800, 
, buffer=4997/400.[0m
[10/19 12:10:04]  --------------------------------------------------------------------------------
[10/19 12:10:04]  Iteration: 73 (0 solution, 72 counterexamples)
[10/19 12:10:26]  Generator returned sat in 20.217685 secs.
[10/19 12:10:26]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
[0m
[10/19 12:11:01]  Improved gap from 0.0 to 12.5
[10/19 12:11:04]  Improved number of small numbers from 26 to 38 out of a max of 114
[10/19 12:11:04]  Verifer returned sat in 37.720142 secs.
[10/19 12:11:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56217.243652  -56217.257412  57265.000430 -56217.243652    0.055420    0.055420 -56217.257412    0.000000         -56217.229736    0.013759      -99.986241
1  -56006.793933  -56117.257412  57265.000430 -56006.793933  210.463478  210.463478 -56117.257412    0.000000         -56117.271240  110.463478       10.463478
2  -55906.766223  -55917.257412  57265.000430 -55906.766223  210.491188  210.491188 -55917.257412    0.013855         -55917.257412   10.477333       10.477333
3  -55806.752368  -55817.257412  57265.000430 -55806.752368  110.491188  110.491188 -55817.257412    0.027710         -55817.257412   10.477333       10.477333
4  -55805.752368  -55817.257412  57352.500430 -55805.752368  201.000000    1.000000 -55817.257412    0.027710         -55817.271240   11.477333       -1.022667
5  -55565.729702  -55804.743557  57352.500430 -55565.729702  251.500000  377.250000 -55804.743557  128.550377         -55804.743557  110.463478       10.477333
6  -55565.729702  -55704.743557  57439.986575 -55565.729702   57.256927    1.000000 -55704.743557  128.550377         -55704.743557   10.463478       -2.036522
7  -55490.307788  -55692.243557  57466.601074 -55490.307788   85.885391  128.828087 -55692.243557  128.550377         -55692.257324   73.385391       -0.000109
8  -55457.243557  -55597.271240  57466.601318 -55457.243557  106.449623  159.674435 -55597.271240  128.550377         -55597.271240   11.477307      -66.935633
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=102818133544921899/800000000000000, 
, buffer=8381866455078101/800000000000000.[0m
[10/19 12:11:04]  --------------------------------------------------------------------------------
[10/19 12:11:04]  Iteration: 74 (0 solution, 73 counterexamples)
[10/19 12:11:51]  Generator returned sat in 45.649056 secs.
[10/19 12:11:51]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 12:11:53]  Improved gap from 0.0 to 100
[10/19 12:11:55]  Improved number of small numbers from 31 to 47 out of a max of 114
[10/19 12:11:55]  Verifer returned sat in 3.504855 secs.
[10/19 12:11:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56462.799072  -56662.771484  57810.514285 -56462.799072    0.055420    0.055420 -56662.771484    0.00000         -56662.771484  199.972412      199.972194
1  -56462.799072  -56662.771266  57810.514285 -56462.799072    0.027832    0.027832 -56662.771266    0.00000         -56662.771484  199.972194       99.972194
2  -56462.771266  -56462.771266  57810.514285 -56462.771266  200.000000  200.000000 -56462.771266    0.00000         -56462.771266    0.000000        0.000000
3  -55666.660427  -56459.812831  57810.514285 -55666.660427  796.110840  796.110840 -56459.812831  396.08313         -56459.812831  397.069275      300.027710
4  -55665.674282  -56262.771266  57810.514285 -55665.674282  398.055420  200.027710 -56262.771266  396.08313         -56262.771266  201.013855      201.013855
5  -55466.660427  -56262.771266  57810.514285 -55466.660427  400.027710  800.055420 -56262.771266  396.08313         -56162.743652  400.027710      300.027710
6  -55466.660427  -56162.771266  57810.514285 -55466.660427  301.013855  602.027710 -56162.771266  396.08313         -56162.771484  300.027710      200.027710
7  -55466.660427  -55962.771266  57810.514285 -55466.660427  300.027710  600.055420 -55962.771266  396.08313         -55962.771266  100.027710      100.027710
8  -55265.674282  -55962.743652  57810.514285 -55265.674282  301.013855  602.027710 -55962.743652  396.08313         -55962.743652  300.986241      201.013855
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=2457827/8192.[0m
[10/19 12:11:55]  --------------------------------------------------------------------------------
[10/19 12:11:55]  Iteration: 75 (0 solution, 74 counterexamples)
[10/19 12:13:02]  Generator returned sat in 65.537505 secs.
[10/19 12:13:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 12:13:10]  Improved gap from 0.0 to 100
[10/19 12:13:12]  Improved number of small numbers from 26 to 38 out of a max of 114
[10/19 12:13:12]  Verifer returned sat in 9.583257 secs.
[10/19 12:13:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57762.363037  -57763.897526  57810.514285 -57762.363037    0.055176    0.055176 -57763.897526    0.000000         -57763.897526    1.534489        1.534489
1  -57762.363037  -57763.897526  57810.514285 -57762.363037    0.027832    0.027832 -57763.897526    0.000000         -57763.925049    1.534489      -98.465511
2  -57562.390599  -57663.598423  57810.514285 -57562.390599  201.506927  201.506927 -57663.598423    0.000000         -57663.598423  101.207825        1.506927
3  -57462.335179  -57563.869816  57810.514285 -57462.335179  201.263245  201.263245 -57563.869816    0.027710         -57563.869816  101.506927        1.534637
4  -57462.335179  -57463.897526  57810.514285 -57462.335179  101.013855   49.506927 -57463.897526    0.027710         -57463.925049    1.534637      -98.465363
5  -57262.362889  -57263.897526  57810.514285 -57262.362889  201.506927  403.013855 -57263.897526    0.027710         -57263.897526    1.506927        1.506927
6  -56962.265904  -57163.897526  57810.514285 -56962.265904  301.603912  603.207825 -57163.897526  200.096985         -57163.897526    1.534637        1.534637
7  -56862.772831  -57063.897526  57810.514285 -56862.772831  200.986145   99.493073 -57063.897526  200.096985         -57063.897526    1.027710        1.027710
8  -56562.307469  -57063.869629  57810.514285 -56562.307469  301.493073  602.986145 -57063.869629  400.055420         -57063.869629  101.506740        1.534637
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277027/8192, 
, buffer=50287/32768.[0m
[10/19 12:13:13]  --------------------------------------------------------------------------------
[10/19 12:13:13]  Iteration: 76 (0 solution, 75 counterexamples)
[10/19 12:14:50]  Generator returned sat in 95.560700 secs.
[10/19 12:14:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 12:15:31]  Improved gap from 0.0 to 9.375
[10/19 12:15:33]  Improved number of small numbers from 55 to 112 out of a max of 114
[10/19 12:15:33]  Verifer returned sat in 42.530713 secs.
[10/19 12:15:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -57304.894043  -57314.296631  57529.291748 -57304.894043    0.055176    0.055176 -57314.296631   0.000000         -57314.296631    9.402588        9.402588
1  -57204.921631  -57214.296631  57529.291748 -57204.921631  109.375000  109.375000 -57214.296631   0.000000         -57214.296631    9.375000        9.375000
2  -57204.894043  -57214.269043  57619.889160 -57204.894043    9.402588    9.402588 -57214.269043   0.000000         -57214.269043    9.375000        0.000000
3  -57103.866455  -57104.894043  57619.889160 -57103.866455  110.402588  110.402588 -57104.894043   0.000000         -57104.894043    1.027588        1.027588
4  -56943.991455  -57103.866455  57619.889160 -56943.991455  160.902588  159.902588 -57103.866455  51.500000         -57103.866455  108.375000        9.402588
5  -56943.991455  -57004.866455  57710.486572 -56943.991455   55.215088   26.607544 -57004.866455  51.500000         -57004.866455    9.375000        0.000000
6  -56820.057617  -56966.463867  57710.486572 -56820.057617  133.308838  132.308838 -56966.463867  66.031250         -56966.463867   80.375000        9.402588
7  -56820.057617  -56895.463867  57800.944336 -56820.057617   69.215088   33.607544 -56895.463867  66.031250         -56895.463867    9.375000       -0.139648
8  -56689.623779  -56884.921387  57800.944336 -56689.623779  139.808838  138.808838 -56884.921387  86.922852         -56884.921387  108.374756        9.402588
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=3, loss_amount=36273/1024, 
, buffer=38513/4096.[0m
[10/19 12:15:33]  --------------------------------------------------------------------------------
[10/19 12:15:33]  Iteration: 77 (0 solution, 76 counterexamples)
[10/19 12:16:13]  Generator returned sat in 38.542463 secs.
[10/19 12:16:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 12:16:24]  Improved gap from 1.0137939453125 to 48.4375
[10/19 12:16:25]  Improved number of small numbers from 68 to 76 out of a max of 114
[10/19 12:16:25]  Verifer returned sat in 11.901821 secs.
[10/19 12:16:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56400.202393  -56404.191204  57710.486328 -56400.202393    0.055176    0.055176 -56404.191204    0.000000         -56404.191204    3.988812        0.001901
1  -56400.202393  -56400.203427  57710.486328 -56400.202393    0.001221    0.001221 -56400.203427    0.000000         -56400.203427    0.001034      -99.998099
2  -56200.203427  -56300.203427  57710.486328 -56200.203427  200.000000  200.000000 -56300.203427    0.000000         -56300.203427  100.000000        0.000867
3  -56200.203427  -56200.203427  57710.486572 -56200.203427    0.001111    0.001111 -56200.203427    0.000000         -56200.203427    0.000000      -99.998889
4  -56099.208982  -56100.204538  57710.486572 -56099.208982  101.994444  100.994444 -56100.204538    0.000000         -56100.205566    0.995556      -99.004444
5  -55899.212316  -55900.213427  57710.486572 -55899.212316  200.996667  199.996667 -55900.213427    0.000000         -55900.213427    1.001111        0.992222
6  -55599.720093  -55800.204538  57710.486572 -55599.720093  300.493333  299.493333 -55800.204538  199.492222         -55800.204538    0.992222        0.992222
7  -55599.710093  -55800.203427  57761.986572 -55599.710093  399.998889    0.010000 -55800.203427  199.492222         -55800.203427    1.001111      -47.497778
8  -55250.711204  -55751.703369  57761.986572 -55250.711204  350.000000  349.000000 -55751.703369  400.001111         -55751.703369  100.991054        0.992222
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=360001/900, 
, buffer=893/900.[0m
[10/19 12:16:26]  --------------------------------------------------------------------------------
[10/19 12:16:26]  Iteration: 78 (0 solution, 77 counterexamples)
[10/19 12:16:56]  Generator returned sat in 28.674268 secs.
[10/19 12:16:56]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 12:17:06]  Improved gap from 0.0 to 48.4375
[10/19 12:17:07]  Improved number of small numbers from 61 to 114 out of a max of 114
[10/19 12:17:07]  Verifer returned sat in 10.516816 secs.
[10/19 12:17:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -56404.095947  -56404.102051  57710.399170 -56404.095947    0.055176    0.055176 -56404.102051    0.000000         -56404.102051    0.006104       -3.918945
1  -56398.233398  -56398.239502  57710.399170 -56398.233398    5.868652    5.868652 -56398.239502    0.000000         -56398.239502    0.006104      -98.056396
2  -56200.170898  -56300.177002  57710.399170 -56200.170898  198.068604  198.068604 -56300.177002    0.000000         -56300.183350  100.006104        0.006104
3  -56200.170898  -56200.170898  57710.430420 -56200.170898    0.006348    0.006348 -56200.170898    0.000000         -56200.170898    0.000000      -99.962646
4  -56099.202148  -56100.208252  57710.430420 -56099.202148  101.968750  100.968750 -56100.208252    0.000000         -56000.201904    1.006104      -98.993896
5  -55900.208252  -55900.208252  57710.430420 -55900.208252  200.000000  199.000000 -55900.208252    0.000000         -55900.208252    0.000000        0.000000
6  -55601.223877  -55800.208496  57710.430420 -55601.223877  299.984375  298.984375 -55800.208496  198.971924         -55800.208496    0.012695        0.012451
7  -55600.223877  -55800.201904  57761.986328 -55600.223877  398.962402    1.000000 -55800.201904  198.971924         -55800.201904    1.006104      -47.431641
8  -55251.745605  -55751.758301  57761.986328 -55251.745605  349.484375  348.484375 -55751.758301  400.006104         -55751.758301  100.006592        0.012451
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638425/4096, 
, buffer=51/4096.[0m
[10/19 12:17:07]  --------------------------------------------------------------------------------
[10/19 12:17:07]  Iteration: 79 (0 solution, 78 counterexamples)
[10/19 12:17:12]  Generator returned sat in 3.720270 secs.
[10/19 12:17:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 12:17:31]  Improved gap from 1.0025 to 46.875
[10/19 12:17:33]  Improved number of small numbers from 61 to 70 out of a max of 114
[10/19 12:17:33]  Verifer returned sat in 19.977425 secs.
[10/19 12:17:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0  -54652.697998  -54655.697959  57708.863770 -54652.697998    0.054932    0.054932 -54655.697959     0.0000         -54655.697959    2.999961        1.002402
1  -54652.697998  -54653.697959  57708.863828 -54652.697998    2.997559    2.997559 -54653.697959     0.0000         -54653.697959    0.999961      -98.997539
2  -54452.695459  -54553.697959  57708.863828 -54452.695459  201.002500  201.002500 -54553.697959     0.0025         -54553.697959  101.000000        1.002500
3  -54452.695459  -54453.700459  57708.863828 -54452.695459    0.002500    0.002500 -54453.700459     0.0025         -54353.697754    1.002500      -98.997500
4  -54352.697959  -54353.697959  57708.863828 -54352.697959  101.000000  100.000000 -54353.697959     0.0025         -54353.697959    0.997500      -99.000000
5  -54153.197959  -54154.202959  57708.863828 -54153.197959  200.500000  199.500000 -54154.202959     0.0025         -54154.202959    1.002500        0.500000
6  -53854.202959  -54053.925459  57708.863828 -53854.202959  299.997500  298.997500 -54053.925459   198.4950         -54053.925459    1.227500        1.002500
7  -53854.192959  -54053.697959  57761.986328 -53854.192959  398.775000    0.010000 -54053.697959   198.4950         -54053.697959    1.010000      -45.865000
8  -53505.815459  -54006.820557  57761.986328 -53505.815459  349.387500  348.387500 -54006.820557   400.0050         -54006.820557  101.000098        1.002500
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
, buffer=401/400.[0m
[10/19 12:17:33]  --------------------------------------------------------------------------------
[10/19 12:17:33]  Iteration: 80 (0 solution, 79 counterexamples)
[10/19 12:17:38]  Generator returned unsat in 3.022356 secs.
[10/19 12:17:38]  [96mNo more solutions found[0m
[10/19 12:17:38]  Final solutions:
[10/19 12:17:38]  Took 2699.343755 secs.
