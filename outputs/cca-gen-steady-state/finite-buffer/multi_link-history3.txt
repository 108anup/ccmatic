[10/25 18:47:35]  Ideal: desired_util_f=1, desired_queue_bound_multiplier=0.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=0.5, desired_loss_amount_bound_alpha=3
[10/25 18:47:35]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=1.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=3
[10/25 18:47:36]  --------------------------------------------------------------------------------
[10/25 18:47:36]  Iteration: 1 (0 solution, 0 counterexamples)
[10/25 18:47:36]  Generator returned sat in 0.005045 secs.
[10/25 18:47:36]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha
else:
	target_cwnd = 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:36]  Improved number of small numbers from 190 to 190 out of a max of 190
[10/25 18:47:36]  Verifer returned sat in 0.649657 secs.
[10/25 18:47:36]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0              -700.125               -700.25            -700.125            0.125            0.125             -700.25               0.0    0.125
1              -299.750               -600.25            -299.750          400.500          400.500             -600.25               0.0  300.500
2              -299.750               -500.25            -299.750          199.750          199.750             -500.25               0.0  200.500
3              -299.750               -400.25            -299.750          199.875          199.875             -400.25               0.0  100.500
4              -200.250               -300.25            -200.250          200.000          200.000             -300.25               0.0  100.000
5              -100.125               -200.25            -100.125          200.125          200.125             -200.25               0.0  100.125
6                 0.000               -100.25               0.000          200.250          200.250             -100.25               0.0  100.250
7               100.125                 -0.25             100.125          200.375          200.375               -0.25               0.0  100.375
8               200.250                 99.75             200.250          200.500          200.500               99.75               0.0  100.500
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=2405/8, alpha=1/8.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0          -55.005682         -154.880682        -55.005682       0.125000       0.125000       -154.880682        0.000000                 -54.755682      54.880682   99.875000       -0.125000
1          -55.005682          -54.880682        -55.005682       0.125000       0.125000        -54.880682        0.000000                 -55.005682     364.704545   -0.125000      209.698864
2            0.125000         -264.704545          0.125000      55.130682      55.130682       -264.704545        0.000000                -264.829545     309.511364  264.829545      109.636364
3            0.125000         -109.511364          0.125000      54.693182      54.693182       -109.511364        0.125000                -300.500000     600.625000  109.511364      300.625000
4            0.125000         -163.954545          0.125000     109.386364     109.386364       -163.954545        0.125000                -163.954545     563.954545  163.954545      163.954545
5            0.250000         -163.954545          0.250000     164.079545     164.079545       -163.954545        0.250000                -164.079545     800.625000  163.954545      300.625000
6           55.068182         -300.625000         55.068182     218.772727     218.772727       -300.625000       82.352273                -300.750000     927.909091  273.340909      300.625000
7           55.193182         -327.909091         55.193182     273.465909     273.465909       -327.909091       82.352273                -328.034091    1027.659091  300.750000      300.500000
8           82.602273         -327.534091         82.602273     328.159091     328.159091       -327.534091      109.511364                -327.534091    1127.534091  300.625000      300.625000
fefficient=False, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=4813/44, 
, buffer=2405/8, alpha=4813/88.[0m
[10/25 18:47:37]  --------------------------------------------------------------------------------
[10/25 18:47:37]  Iteration: 2 (0 solution, 1 counterexamples)
[10/25 18:47:37]  Generator returned sat in 0.084947 secs.
[10/25 18:47:37]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha
else:
	target_cwnd = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:38]  Improved number of small numbers from 81 to 190 out of a max of 190
[10/25 18:47:38]  Verifer returned sat in 1.114187 secs.
[10/25 18:47:38]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           -200.109863           -600.140625         -200.109863         0.124512         0.124512         -600.140625               0.0  400.030762
1           -100.125244           -500.140625         -100.125244       500.015381       500.015381         -500.140625               0.0  400.015381
2           -100.125244           -400.140625         -100.125244       139.875000       139.875000         -400.140625               0.0  300.015381
3           -100.125244           -300.140625         -100.125244       119.890625       119.890625         -300.140625               0.0  200.015381
4           -100.125244           -200.140625         -100.125244        99.906250        99.906250         -200.140625               0.0  100.015381
5           -100.125244           -100.140625         -100.125244        79.921875        79.921875         -100.140625               0.0    0.015381
6            -40.203125            -40.203125          -40.203125        59.937500        59.937500          -40.203125               0.0    0.000000
7             -0.250000             -0.250000           -0.250000        39.953125        39.953125           -0.250000               0.0    0.000000
8             19.734375             19.734375           19.734375        19.984375        19.984375           19.734375               0.0    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1638527/4096, alpha=1279/64.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0        -1206.314453        -1206.329834      -1206.314453       0.124756       0.124756      -1206.329834        0.000000               -1206.329834    1927.986572    0.015381      -99.968750
1         -606.205078        -1106.345703       -606.205078     600.124756     600.124756      -1106.345703        0.000000               -1106.361328    1527.877441  500.140625        0.031494
2         -606.205078         -606.220947       -606.205078     500.124756     500.124756       -606.220947        0.000000                -606.220947    1627.861816    0.015869        0.015869
3         -106.111816         -606.189453       -106.111816     500.109131     500.109131       -606.189453        0.000000                -606.189453     927.658936  500.077637     -300.093750
4         -106.095947          193.981934       -106.095947     500.093506     500.093506        193.981934        0.000000                 193.966553     927.659180 -300.077881     -400.077637
5          393.981934          393.966309        393.981934     500.077881     500.077881        393.966309        0.000000                 393.966309     927.658936    0.015625        0.000000
6          894.028564          393.981934        894.028564     500.062256     500.062256        393.981934        0.015625                 493.997559     927.658936  500.031006      400.031006
7          894.044189          493.981934        894.044189     500.046631     500.046631        493.981934        0.031250                 493.997559    1027.658936  400.031006      400.031006
8          994.044189          493.981934        994.044189     500.031006     500.031006        493.981934        0.046875                 593.982178    1027.674561  500.015381      400.031006
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=3, loss_amount=3/64, 
, buffer=1638527/4096, alpha=1/64.[0m
[10/25 18:47:39]  --------------------------------------------------------------------------------
[10/25 18:47:39]  Iteration: 3 (0 solution, 2 counterexamples)
[10/25 18:47:39]  Generator returned sat in 0.219263 secs.
[10/25 18:47:39]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:41]  Improved number of small numbers from 50 to 190 out of a max of 190
[10/25 18:47:41]  Verifer returned sat in 1.512774 secs.
[10/25 18:47:41]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           -200.078613           -450.125244         -200.078613         0.124512         0.124512         -450.125244           0.00000  250.046631
1           -100.047363           -350.125244         -100.047363       350.077881       350.077881         -350.125244           0.03125  250.046631
2           -100.047363           -250.125244         -100.047363       149.984619       149.984619         -250.125244           0.03125  150.046631
3           -100.047363           -150.125244         -100.047363        99.968994        99.968994         -150.125244           0.03125   50.046631
4           -100.047363           -100.078613         -100.047363        50.015625        50.015625         -100.078613           0.03125    0.000000
5            -50.031738            -50.062988          -50.031738        50.015625        50.015625          -50.062988           0.03125    0.000000
6             -0.016113             -0.047363           -0.016113        50.015625        50.015625           -0.047363           0.03125    0.000000
7             49.999512             49.968262           49.999512        50.015625        50.015625           49.968262           0.03125    0.000000
8            100.015137             99.983887          100.015137        50.015625        50.015625           99.983887           0.03125    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1024191/4096, alpha=3201/64.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0         1105.673828          855.627197       1105.673828       0.124512       0.124512        855.627197             0.0                 855.627197     -33.986328  250.046631      250.046631
1         1105.673828          954.767334       1105.673828       0.031006       0.031006        954.767334             0.0                 954.767334     -33.986328  150.906494      150.046631
2         1105.673828         1024.689453       1105.673828      40.984619      40.984619       1024.689453             0.0                1024.689453     -33.986328   80.984375       50.046631
3         1105.673828         1055.658203       1105.673828      60.953369      60.953369       1055.658203             0.0                1055.658203      15.967041   50.015625        0.000000
4         1105.673828         1105.673828       1105.673828      40.984619      40.984619       1105.673828             0.0                1105.705078      75.967041    0.000000      -40.000000
5         1166.627197         1145.673828       1166.627197      60.953369      60.953369       1145.673828             0.0                1145.642822     134.982422   20.953369      -20.031250
6         1186.658447         1186.658447       1186.658447      40.984619      40.984619       1186.658447             0.0                1186.627441     215.075684    0.000000      -19.906738
7         1247.611816         1206.595947       1247.611816      60.953369      60.953369       1206.595947             0.0                1206.595947     274.029053   41.015869        0.000000
8         1247.611816         1247.611816       1247.611816      40.984619      40.984619       1247.611816             0.0                1247.642822     374.029053    0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1024191/4096, alpha=639/32.[0m
[10/25 18:47:42]  --------------------------------------------------------------------------------
[10/25 18:47:42]  Iteration: 4 (0 solution, 3 counterexamples)
[10/25 18:47:42]  Generator returned sat in 0.186348 secs.
[10/25 18:47:42]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha
else:
	target_cwnd = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:43]  Improved number of small numbers from 41 to 190 out of a max of 190
[10/25 18:47:43]  Verifer returned sat in 0.887052 secs.
[10/25 18:47:43]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t       queue_t
0         -75674.060791         -75674.062744       -75674.060791         0.124512         0.124512       -75674.062744          0.000000      0.001953
1           -100.047363         -75574.062744         -100.047363     75574.015381     75574.015381       -75574.062744          0.001709  75474.013672
2           -100.047363         -75474.062744         -100.047363     75474.011475     75474.011475       -75474.062744          0.001709  75374.013672
3           -100.047363         -75374.062744         -100.047363     64692.009521     64692.009521       -75374.062744          0.001709  75274.013672
4           -100.047363         -75274.062744         -100.047363     53910.007568     53910.007568       -75274.062744          0.001709  75174.013672
5           -100.047363         -75174.062744         -100.047363     43128.005615     43128.005615       -75174.062744          0.001709  75074.013672
6           -100.047363         -75074.062744         -100.047363     32346.003662     32346.003662       -75074.062744          0.001709  74974.013672
7           -100.047363         -74974.062744         -100.047363     21564.001709     21564.001709       -74974.062744          0.001709  74874.013672
8           -100.047363         -74874.062744         -100.047363     10782.001953     10782.001953       -74874.062744          0.001709  74774.013672
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=38642695/512, alpha=5520385/512.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t       queue_t  bottle_queue_t
0       -75128.333984      -150702.345703     -75128.333984       0.124512       0.124512    -150702.345703        0.000000             -150702.345703  151423.988525  75574.011719    75474.013672
1       -75128.333984      -150602.339844     -75128.333984       0.031006       0.031006    -150602.339844        0.000000             -150602.339844  151423.988525  75474.005859    75374.013672
2       -74928.332031      -150502.345459     -74928.332031   75674.007812   75674.007812    -150502.345459        0.001953             -150502.345459  151423.988525  75574.011475    75474.013672
3       -74828.333740      -150402.343750     -74828.333740   75674.009766   75674.009766    -150402.343750        0.001953             -150402.343750  151423.988525  75574.008057    75474.011963
4       -74728.333984      -150302.337891     -74728.333984   75674.007812   75674.007812    -150302.337891        0.001953             -150302.337891  151423.988525  75574.001953    75474.011719
5       -74628.330078      -150102.347656     -74628.330078   75674.005859   75674.005859    -150102.347656        0.003906             -150102.347656  151423.988525  75474.013672    75474.013672
6       -74428.335938      -150002.347656     -74428.335938   75674.007812   75674.007812    -150002.347656       99.998047             -150002.347656  151423.988525  75474.013672    75474.013672
7       -74228.339844      -149902.347656     -74228.339844   75674.009766   75674.009766    -149902.347656      199.994141             -149902.347656  151423.988525  75474.013672    75474.013672
8       -74028.341797      -149902.347656     -74028.341797   75674.011719   75674.011719    -149902.347656      299.992188                1247.642578  151423.988525  75574.013672    75474.013672
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=153595/512, 
, buffer=38642695/512, alpha=1/512.[0m
[10/25 18:47:44]  --------------------------------------------------------------------------------
[10/25 18:47:44]  Iteration: 5 (0 solution, 4 counterexamples)
[10/25 18:47:44]  Generator returned sat in 0.231261 secs.
[10/25 18:47:44]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 1alpha
else:
	target_cwnd = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:45]  Improved number of small numbers from 190 to 190 out of a max of 190
[10/25 18:47:45]  Verifer returned sat in 0.642452 secs.
[10/25 18:47:45]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0           -158.101807         -75115.556885         -158.101807         0.124512         0.124512       -75115.556885      74957.392822  0.062256
1           -158.101807         -75115.494629         -158.101807         0.062256         0.062256       -75115.494629      74957.392822  0.000000
2           -149.915039         -75107.307861         -149.915039         8.186768         8.186768       -75107.307861      74957.392822  0.000000
3           -141.603760         -75098.996582         -141.603760         8.311279         8.311279       -75098.996582      74957.392822  0.000000
4           -133.292480         -75090.685303         -133.292480         8.311279         8.311279       -75090.685303      74957.392822  0.000000
5           -124.981201         -75082.374023         -124.981201         8.311279         8.311279       -75082.374023      74957.392822  0.000000
6           -116.669922         -75074.062744         -116.669922         8.311279         8.311279       -75074.062744      74957.392822  0.000000
7           -108.358643         -75065.751465         -108.358643         8.311279         8.311279       -75065.751465      74957.392822  0.000000
8           -100.047363         -75057.440186         -100.047363         8.311279         8.311279       -75057.440186      74957.392822  0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=66315519/1024, alpha=34043/4096.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t       queue_t  bottle_queue_t
0      -149603.538330      -149672.662842    -149603.538330       0.124512       0.124512    -149672.662842        0.062256             -149672.662842  150446.179199     69.062256       20.937744
1      -149603.538330      -149624.538330    -149603.538330       0.062256       0.062256    -149624.538330        0.062256             -149624.538330  150544.179199     20.937744       18.937744
2      -149603.476074      -149622.538330    -149603.476074      21.000000      21.000000    -149622.538330        0.062256             -149603.476074  150644.179199     19.000000       19.000000
3      -149581.538330      -149602.538330    -149581.538330      40.937744      40.937744    -149602.538330        0.062256             -149602.538330  150710.303711     20.937744        7.062256
4      -149581.476074      -149588.600586    -149581.476074      21.000000      21.000000    -149588.600586        0.062256             -149588.600586  150796.365967      7.062256       -6.813232
5      -149568.600586      -149574.725098    -149568.600586      19.937744      19.937744    -149574.725098        0.062256             -149574.662842  215651.490479      6.062256    64761.186768
6      -149554.725098      -214329.849609    -149554.725098      19.937744      19.937744    -214329.849609        0.062256             -214229.787354  215651.490479  64775.062256    64675.062256
7      -149554.725098      -214229.787354    -149554.725098      19.937744      19.937744    -214229.787354        0.062256             -214229.787354  151076.490479  64675.000000        0.062256
8      -149554.725098      -149554.787354    -149554.725098      19.937744      19.937744    -149554.787354        0.062256             -149554.787354  151076.490479      0.000000      -99.937744
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=66315519/1024, alpha=81665/4096.[0m
[10/25 18:47:46]  --------------------------------------------------------------------------------
[10/25 18:47:46]  Iteration: 6 (0 solution, 5 counterexamples)
[10/25 18:47:46]  Generator returned sat in 0.112319 secs.
[10/25 18:47:46]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 1alpha
else:
	target_cwnd = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:47]  Improved number of small numbers from 190 to 190 out of a max of 190
[10/25 18:47:47]  Verifer returned sat in 0.992986 secs.
[10/25 18:47:47]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t       queue_t
0          41023.773193         -75227.557373        41023.773193         0.124512         0.124512       -75227.557373      74877.081543  41374.249023
1          41123.835449         -75127.557373        41123.835449     41474.311279     41474.311279       -75127.557373      74877.143799  41374.249023
2          61561.022217         -75027.557373        61561.022217     61811.435791     61811.435791       -75027.557373      95214.330566  41374.249023
3          61561.084473         -74927.557373        61561.084473     41374.311279     41374.311279       -74927.557373      95214.330566  41274.311279
4          61561.084473         -74827.557373        61561.084473     20937.186768     20937.186768       -74827.557373      95214.330566  41174.311279
5          61561.084473         -74727.557373        61561.084473     20437.124512     20437.124512       -74727.557373      95214.330566  41074.311279
6          61561.084473         -74627.557373        61561.084473     40874.249023     40874.249023       -74627.557373      95214.330566  40974.311279
7          61561.084473         -74527.557373        61561.084473     20437.124512     20437.124512       -74527.557373      95214.330566  40874.311279
8          61561.084473         -74427.557373        61561.084473     40874.249023     40874.249023       -74427.557373      95214.330566  40774.311279
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=42367231/1024, alpha=41855231/2048.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0      -149602.600586      -149814.289307    -149602.600586       0.124512       0.124512    -149814.289307             0.0             -149814.351562  215311.992432  211.688721      111.688721
1      -149602.600586      -149614.289307    -149602.600586       0.062256       0.062256    -149614.289307             0.0             -149614.289307  215311.992432   11.688721       11.688721
2      -149602.600586      -149614.227051    -149602.600586       5.875488       5.875488    -149614.227051             0.0             -149614.227051  215400.303711   11.626465        0.000000
3      -149591.413818      -149602.538330    -149591.413818      22.813232      22.813232    -149602.538330             0.0             -149602.538330  215489.116943   11.124512        0.000000
4      -149585.600586      -149591.351562    -149585.600586      16.937744      16.937744    -149591.351562             0.0             -149591.351562  215568.365967    5.750977      -14.937744
5      -149557.476074      -149570.662842    -149557.476074      33.875488      33.875488    -149570.662842             0.0             -149557.413818  215651.490479   13.186768       -3.688721
6      -149553.725098      -149553.787354    -149553.725098      16.937744      16.937744    -149553.787354             0.0             -149553.787354  215751.428223    0.062256        0.000000
7      -149519.911865      -149536.787354    -149519.911865      33.875488      33.875488    -149536.787354             0.0             -149536.787354  215817.552734   16.875488       -0.062256
8      -149519.849609      -149519.849609    -149519.849609      16.937744      16.937744    -149519.849609             0.0             -149519.849609  215917.552734    0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=42367231/1024, alpha=69377/4096.[0m
[10/25 18:47:48]  --------------------------------------------------------------------------------
[10/25 18:47:48]  Iteration: 7 (0 solution, 6 counterexamples)
[10/25 18:47:49]  Generator returned sat in 0.785964 secs.
[10/25 18:47:49]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:52]  Verifer returned unsat in 3.374596 secs.
[10/25 18:47:52]  Proved solution: 
[1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:52]  --------------------------------------------------------------------------------
[10/25 18:47:52]  Iteration: 8 (1 solution, 6 counterexamples)
[10/25 18:47:52]  Generator returned sat in 0.043929 secs.
[10/25 18:47:52]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:47:54]  Improved number of small numbers from 71 to 190 out of a max of 190
[10/25 18:47:54]  Verifer returned sat in 1.993906 secs.
[10/25 18:47:54]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           -671.345947         -75548.489258         -671.345947         0.124268         0.124268       -75548.489258      74877.081299    0.062012
1           -174.345947         -75448.489258         -174.345947       497.062012       497.062012       -75448.489258      74877.143555  396.999756
2           -174.345947         -75348.489258         -174.345947        69.565186        69.565186       -75348.489258      74877.143555  296.999756
3           -174.345947         -75248.489258         -174.345947        78.689453        78.689453       -75248.489258      74877.143555  196.999756
4           -174.345947         -75148.489258         -174.345947        87.813721        87.813721       -75148.489258      74877.143555   96.999756
5           -174.345947         -75051.489502         -174.345947        96.937988        96.937988       -75051.489502      74877.143555    0.000000
6            -68.283691         -74951.489502          -68.283691       106.062256       106.062256       -74951.489502      74877.143555    6.062256
7             40.840576         -74851.489502           40.840576       115.186523       115.186523       -74851.489502      74877.143555   15.186523
8            149.964844         -74751.489502          149.964844       124.310791       124.310791       -74751.489502      74877.143555   24.310791
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1626111/4096, alpha=37373/4096.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t    queue_t  bottle_queue_t
0      -149051.273438      -149159.103027    -149051.273438       0.124268       0.124268    -149159.103027       11.812988             -149159.103027  215472.742676  96.016602       96.016602
1      -149051.273438      -149063.148438    -149051.273438       0.062256       0.062256    -149063.148438       11.812988             -149063.148438  215472.742920   0.062012       -3.983154
2      -149001.855225      -149059.103271    -149001.855225      49.480225      49.480225    -149059.103271       11.812988             -149059.103271  215527.307861  45.435059        0.000000
3      -148982.685791      -149013.668213    -148982.685791      64.604492      64.604492    -149013.668213       11.812988             -148994.436523  215608.138428  19.169434        0.000000
4      -148952.375000      -148994.436523    -148952.375000      49.480225      49.480225    -148994.436523       11.812988             -148994.436523  215677.827637  30.248535        0.000000
5      -148918.019043      -148964.187988    -148918.019043      64.604492      64.604492    -148964.187988       11.812988             -148964.187988  215743.471680  34.355957        0.000000
6      -148902.894775      -148929.769775    -148902.894775      49.480225      49.480225    -148929.769775       11.812988             -148929.769775  215828.347412  15.062012        0.000000
7      -148853.352295      -148914.707764    -148853.352295      64.604492      64.604492    -148914.707764       11.812988             -148914.769775  215878.804932  49.542480        0.000000
8      -148853.352295      -148865.165283    -148853.352295      49.480225      49.480225    -148865.165283       11.812988             -148705.538330  215978.804932   0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1626111/4096, alpha=61949/4096.[0m
[10/25 18:47:55]  --------------------------------------------------------------------------------
[10/25 18:47:55]  Iteration: 9 (1 solution, 7 counterexamples)
[10/25 18:47:56]  Generator returned sat in 0.220377 secs.
[10/25 18:47:56]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1/2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:00]  Improved number of small numbers from 70 to 90 out of a max of 190
[10/25 18:48:00]  Verifer returned sat in 3.972931 secs.
[10/25 18:48:00]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           -671.345947         -75451.582703         -671.345947         0.124023         0.124023       -75451.582703      74780.205688    0.031067
1           -579.470215         -75359.675903         -579.470215        91.906799        91.906799       -75359.675903      74780.205688    0.000000
2           -227.718750         -75259.675903         -227.718750       351.751465       351.751465       -75259.675903      74883.739685  148.217468
3            -40.246887         -75159.675903          -40.246887       335.689331       335.689331       -75159.675903      74971.211548  148.217468
4            163.287109         -75059.675903          163.287109       351.751465       351.751465       -75059.675903      75074.745544  148.217468
5            382.883240         -74959.675903          382.883240       367.813599       367.813599       -74959.675903      75194.341675  148.217468
6            618.541504         -74859.675903          618.541504       383.875732       383.875732       -74859.675903      75329.999939  148.217468
7            838.137634         -74759.675903          838.137634       367.813599       367.813599       -74759.675903      75449.596069  148.217468
8           1073.795898         -74659.675903         1073.795898       383.875732       383.875732       -74659.675903      75585.254333  148.217468
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=6, loss_amount=10060477/16384, 
, buffer=2428395/16384, alpha=131581/8192.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0      -148884.374390      -148884.436523    -148884.374390       0.124268       0.124268    -148884.436523        0.000000             -148884.436523  215163.765381    0.062134      -34.248657
1      -148884.374390      -148850.125732    -148884.374390       0.031250       0.031250    -148850.125732        0.000000             -148850.156738  215263.827637  -34.248657      -34.186401
2      -148850.219055      -148850.187988    -148850.219055      34.155334      34.155334    -148850.187988        0.000000             -148850.218994  215346.765381   -0.031067      -17.093323
3      -148798.970520      -148833.094788    -148798.970520      51.248535      51.248535    -148833.094788        0.000000             -148833.094788  215446.734375   34.124268       34.124207
4      -148798.939453      -148833.094727    -148798.939453      34.155334      34.155334    -148833.094727       17.031067             -148964.156982  215677.827637   17.124207      148.217468
5      -148798.939453      -148850.219238    -148798.939453      17.093201      17.093201    -148850.219238       17.031067             -148850.219238  215663.858887   34.248718       34.248718
6      -148798.939453      -148850.187988    -148798.939453      17.093201      17.093201    -148850.187988       17.031067             -148850.187988  215763.827637   34.217468       34.217468
7      -148798.939453      -148850.187988    -148798.939453      17.093201      17.093201    -148850.187988       34.217468             -148981.343506  215995.014038   17.031067      148.217468
8      -148798.877319      -148981.343506    -148798.877319      17.093201      17.093201    -148981.343506       34.248535             -148981.343506  216094.982971  148.217651      148.217468
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=70141/2048, 
, buffer=2428395/16384, alpha=280055/16384.[0m
[10/25 18:48:00]  --------------------------------------------------------------------------------
[10/25 18:48:00]  Iteration: 10 (1 solution, 8 counterexamples)
[10/25 18:48:01]  Generator returned sat in 0.591893 secs.
[10/25 18:48:01]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:05]  Verifer returned unsat in 3.287138 secs.
[10/25 18:48:05]  Proved solution: 
[1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:05]  --------------------------------------------------------------------------------
[10/25 18:48:05]  Iteration: 11 (2 solution, 8 counterexamples)
[10/25 18:48:05]  Generator returned sat in 0.065989 secs.
[10/25 18:48:05]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:08]  Verifer returned unsat in 3.173649 secs.
[10/25 18:48:08]  Proved solution: 
[1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:08]  --------------------------------------------------------------------------------
[10/25 18:48:08]  Iteration: 12 (3 solution, 8 counterexamples)
[10/25 18:48:08]  Generator returned sat in 0.081823 secs.
[10/25 18:48:09]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:10]  Improved number of small numbers from 51 to 190 out of a max of 190
[10/25 18:48:10]  Verifer returned sat in 1.235132 secs.
[10/25 18:48:10]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           -197.679932         -75329.683594         -197.679932         0.123779         0.123779       -75329.683594      75031.996094  100.007568
1           -197.679932         -75229.683594         -197.679932       100.007568       100.007568       -75229.683594      75031.996094    0.007568
2              2.351074         -75129.683594            2.351074       200.038574       200.038574       -75129.683594      75032.003662  100.031006
3            102.366455         -75029.683594          102.366455       200.046387       200.046387       -75029.683594      75032.019043  100.031006
4            202.389648         -74929.683594          202.389648       200.054199       200.054199       -74929.683594      75032.042236  100.031006
5            302.420654         -74829.683594          302.420654       200.062012       200.062012       -74829.683594      75032.073242  100.031006
6            402.459473         -74729.683594          402.459473       200.069824       200.069824       -74729.683594      75032.112061  100.031006
7            502.506104         -74629.683594          502.506104       200.077637       200.077637       -74629.683594      75032.158691  100.031006
8            602.560547         -74529.683594          602.560547       200.085449       200.085449       -74529.683594      75032.213135  100.031006
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=6, loss_amount=795/4096, 
, buffer=409727/4096, alpha=1/128.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0      -148984.467041      -148984.459473    -148984.467041       0.124268       0.124268    -148984.459473        0.000000             -148884.451904  215346.812012   -0.007568     -100.007568
1      -148837.697021      -148884.459473    -148837.697021     146.770020     146.770020    -148884.459473        0.000000             -148884.467285  215500.072754   46.762451      100.023193
2      -148837.697021      -148937.712646    -148837.697021       0.007812       0.007812    -148937.712646        0.000000             -148937.712646  215500.119385  100.015625        0.069824
3      -148837.697021      -148837.766846    -148837.697021       0.031006       0.031006    -148837.766846        0.007568             -148837.774902  215700.088135    0.062256      100.031006
4      -148837.697021      -148937.728271    -148837.697021       0.054199       0.054199    -148937.728271        0.007568             -148937.728271  215781.431885  100.023682       81.374756
5      -148837.697021      -148919.079346    -148837.697021       0.031006       0.031006    -148919.079346       81.366943             -148919.087158  215981.447510    0.015381      100.031006
6      -148837.689209      -149019.094971    -148837.689209       0.023193       0.023193    -149019.094971       81.366943             -149019.095215  215987.432129  100.038818        6.023438
7      -148837.689209      -148925.079590    -148837.689209       0.023193       0.023193    -148925.079590       87.382568             -148925.087402  216187.455322    0.007812      100.031006
8      -148837.673828      -149025.094971    -148837.673828       0.023193       0.023193    -149025.094971       87.390137             -149025.094971  216287.447510  100.031006      100.031006
fefficient=False, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=357919/4096, 
, buffer=409727/4096, alpha=95/4096.[0m
[10/25 18:48:11]  --------------------------------------------------------------------------------
[10/25 18:48:11]  Iteration: 13 (3 solution, 9 counterexamples)
[10/25 18:48:11]  Generator returned sat in 0.379375 secs.
[10/25 18:48:11]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:14]  Verifer returned unsat in 3.112647 secs.
[10/25 18:48:14]  Proved solution: 
[1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:14]  --------------------------------------------------------------------------------
[10/25 18:48:14]  Iteration: 14 (4 solution, 9 counterexamples)
[10/25 18:48:15]  Generator returned sat in 0.069867 secs.
[10/25 18:48:15]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:18]  Improved number of small numbers from 33 to 52 out of a max of 190
[10/25 18:48:18]  Verifer returned sat in 3.196380 secs.
[10/25 18:48:18]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           -977.656494         -75009.374146         -977.656494         0.123535         0.123535       -75009.374146      74031.701965    0.015686
1           -777.594818         -74909.374146         -777.594818       200.077362       200.077362       -74909.374146      74031.717438  100.061890
2           -177.424622         -74809.374146         -177.424622       700.232086       700.232086       -74809.374146      74531.887634  100.061890
3            322.714630         -74709.374146          322.714630       600.201141       600.201141       -74709.374146      74932.026886  100.061890
4            722.822937         -74609.374146          722.822937       500.170197       500.170197       -74609.374146      75232.135193  100.061890
5           1022.900299         -74509.374146         1022.900299       400.139252       400.139252       -74509.374146      75432.212555  100.061890
6           1222.946716         -74409.374146         1222.946716       300.108307       300.108307       -74409.374146      75532.258972  100.061890
7           1322.962189         -74309.374146         1322.962189       200.077362       200.077362       -74309.374146      75532.274445  100.061890
8           1322.962189         -74209.374146         1322.962189       100.046417       100.046417       -74209.374146      75532.274445    0.061890
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=5, loss_amount=1229307/2048, 
, buffer=819707/8192, alpha=1638907/16384.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0      -149177.488037      -149277.503601    -149177.488037       0.124023       0.124023    -149277.503601        0.000000             -149177.488281  215921.370148  100.015564        0.015564
1      -149177.488037      -149177.503601    -149177.488037     100.015381     100.015381    -149177.503601        0.000000             -149177.503662  215981.447510    0.015564      -39.907074
2      -148937.503601      -149057.519073    -148937.503601     240.000000     240.000000    -149057.519073        0.015472             -149057.519073  215981.447510  120.000000      100.061890
3      -148837.488129      -149037.565430    -148837.488129     220.015472     220.015472    -149037.565430        0.030945             -149037.565430  215981.447510  200.046356      100.061890
4      -148837.488129      -148837.580963    -148837.488129     200.030945     200.030945    -148837.580963        0.030945             -148837.580963  215981.447510    0.061890        0.061890
5      -148617.534546      -148837.565674    -148617.534546     220.015472     220.015472    -148837.565674       19.984528             -148837.565674  215981.447510  200.046600      100.061890
6      -148617.534546      -148657.519073    -148617.534546     200.030945     200.030945    -148657.519073       19.984528             -148657.519073  215981.447510   20.000000        0.061890
7      -148417.519073      -148543.580963    -148417.519073     220.015472     220.015472    -148543.580963       20.000000             -148543.580963  215981.447510  106.061890      100.061890
8      -148283.580963      -148537.565674    -148283.580963     240.000000     240.000000    -148537.565674       53.938110             -148537.565674  215981.447510  200.046600      100.061890
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=883215/16384, 
, buffer=819707/8192, alpha=654853/32768.[0m
[10/25 18:48:19]  --------------------------------------------------------------------------------
[10/25 18:48:19]  Iteration: 15 (4 solution, 10 counterexamples)
[10/25 18:48:19]  Generator returned sat in 0.246814 secs.
[10/25 18:48:19]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:23]  Improved number of small numbers from 73 to 130 out of a max of 190
[10/25 18:48:23]  Verifer returned sat in 3.764677 secs.
[10/25 18:48:23]  Counter example: 
[93mIdeal--------------------------------
   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0           -780.645020         -74533.357479         -780.645020         0.123291         0.123291       -74533.357479      73655.712661  96.999799
1           -777.594818         -74433.357479         -777.594818       100.050000       100.050000       -74433.357479      73655.712661   0.050000
2           -777.594818         -74433.307479         -777.594818         0.025000         0.025000       -74433.307479      73655.712661   0.000000
3           -763.544818         -74419.257479         -763.544818        14.050000        14.050000       -74419.257479      73655.712661   0.000000
4           -735.469818         -74391.182479         -735.469818        28.075000        28.075000       -74391.182479      73655.712661   0.000000
5           -693.369818         -74349.082479         -693.369818        42.100000        42.100000       -74349.082479      73655.712661   0.000000
6           -637.244818         -74292.957479         -637.244818        56.125000        56.125000       -74292.957479      73655.712661   0.000000
7           -567.094818         -74222.807479         -567.094818        70.150000        70.150000       -74222.807479      73655.712661   0.000000
8           -482.919818         -74138.632479         -482.919818        84.175000        84.175000       -74138.632479      73655.712661   0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=97, alpha=561/40.
Adversarial--------------------------
   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0      -149251.512939      -149347.638184    -149251.512939       0.124023       0.124023    -149347.638184        0.000000             -149347.638184  216091.504639   96.125244       96.125000
1      -149251.512939      -149251.538086    -149251.512939       0.025000       0.025000    -149251.538086        0.000000             -149251.538086  216091.504883    0.025146       -3.874756
2      -149040.638184      -149151.438232    -149040.638184     210.899902     210.899902    -149151.438232       10.000000             -149151.438232  216091.504883  100.800049       97.000000
3      -148937.513184      -149061.513184    -148937.513184     203.925049     203.925049    -149061.513184       13.125000             -149061.513184  216091.504883  110.875000       97.000000
4      -148837.488281      -148954.538086    -148837.488281     210.899902     210.899902    -148954.538086       13.149902             -148954.538086  216091.504883  103.899902       97.000000
5      -148737.463135      -148947.613037    -148737.463135     203.925049     203.925049    -148947.613037       13.175049             -148947.613037  216091.504883  196.974854       97.000000
6      -148737.463135      -148754.538330    -148737.463135     196.950195     196.950195    -148754.538330       13.175049             -148754.538330  216091.504883    3.900146       -3.000000
7      -148537.438232      -148661.513184    -148537.438232     203.925049     203.925049    -148661.513184       13.199951             -148661.513184  216091.504883  110.875000       97.000000
8      -148437.413330      -148647.637939    -148437.413330     210.899902     210.899902    -148647.637939       13.224854             -148647.637939  216091.504883  196.999756       97.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=409/4096, 
, buffer=97, alpha=28569/4096.[0m
[10/25 18:48:24]  --------------------------------------------------------------------------------
[10/25 18:48:24]  Iteration: 16 (4 solution, 11 counterexamples)
[10/25 18:48:25]  Generator returned unsat in 0.109979 secs.
[10/25 18:48:25]  [96mNo more solutions found[0m
[10/25 18:48:25]  Final solutions:
[10/25 18:48:25]  0: [1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:25]  1: [1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:25]  2: [1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:25]  3: [1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	target_cwnd = 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(c_f[n][t-1] < target_cwnd):
	c_f[n][t] = c_f[n][t-1] + alpha
else:
	c_f[n][t] = max(alpha, c_f[n][t-1] - alpha)
[0m
[10/25 18:48:25]  Took 49.729851 secs.
