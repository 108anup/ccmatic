[08/30 14:21:51]  --------------------------------------------------------------------------------
[08/30 14:21:51]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 14:21:51]  Generator returned sat in 0.006707 secs.
[08/30 14:21:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:21:51]  Improved gap from 0.0 to 100
[08/30 14:21:51]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 14:21:51]  Verifer returned sat in 0.273157 secs.
[08/30 14:21:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0            0.1          -99.9      99.9          0.1       0.1        -99.9        0.0    100.0           100.0
1            0.1          -99.9      99.9          0.1     100.0        -99.9        0.0    100.0             0.0
2            0.1            0.1      99.9          0.1       0.1          0.1        0.0      0.0          -100.0
3          400.2          100.1      99.9        400.2     400.1        100.1        0.1    300.0           200.0
4         1301.4          200.1      99.9       1301.4    1201.2        200.1      801.3    300.0           200.0
5         4004.8          400.1      99.9       4004.8    3003.4        400.1     3404.7    200.0           200.0
6        10612.6          485.1      99.9      10612.6    6807.8        485.1     9912.5    215.0           200.0
7        24784.2          542.1      99.9      24784.2   14386.6        542.1    23984.1    258.0           200.0
8        53984.4          600.1      99.9      53984.4   29458.2        600.1    53084.3    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=52283, 
.[0m
[08/30 14:21:52]  --------------------------------------------------------------------------------
[08/30 14:21:52]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 14:21:52]  Generator returned sat in 0.050079 secs.
[08/30 14:21:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:21:52]  Improved gap from 0.0 to 100
[08/30 14:21:52]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 14:21:52]  Verifer returned sat in 0.278539 secs.
[08/30 14:21:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0      9534.5825    9434.582500 -9509.5825    9534.5825    0.099854   9434.582500     0.0000  100.000000        100.0000
1      9534.5825    9534.580000 -9509.5825    9534.5825  100.000000   9534.580000     0.0000    0.002500          0.0000
2      9534.5825    9534.582500 -9509.5825    9534.5825    0.002500   9534.582500     0.0000    0.000000       -100.0000
3      9934.5850    9734.582500 -9509.5825    9934.5850  400.002500   9734.582500     0.0025  200.000000        200.0000
4      9934.5850    9833.905000 -9509.5825    9934.5850    0.010000   9833.905000     0.0025  100.677500        100.0000
5      9984.5850    9849.903333 -9509.5825    9984.5850  150.677500   9849.903333     0.0025  134.679167         50.0000
6     10234.5825    9934.582500 -9509.5825   10234.5825  384.676667   9934.582500     0.0025  299.997500        199.9975
7     10612.6000   10134.582500 -9509.5825   10612.6000  678.015000  10134.582500   278.0175  200.000000        200.0000
8     10612.6000   10233.905000 -9509.5825   10612.6000    0.010000  10233.905000   278.0175  100.677500        100.0000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=55603/200, 
.[0m
[08/30 14:21:52]  --------------------------------------------------------------------------------
[08/30 14:21:52]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 14:21:52]  Generator returned sat in 0.137227 secs.
[08/30 14:21:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:21:53]  Improved gap from 0.0 to 39.0625
[08/30 14:21:53]  Improved number of small numbers from 98 to 98 out of a max of 100
[08/30 14:21:53]  Verifer returned sat in 0.475654 secs.
[08/30 14:21:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    9534.532471    9234.532471 -9409.532471   9534.532471    0.099609  9234.532471    0.000000  300.000000      200.000000
1    9534.532471    9434.532471 -9409.532471   9534.532471    0.049805  9434.532471    0.000000  100.000000      100.000000
2    9534.532471    9434.532471 -9409.532471   9534.532471  100.000000  9434.532471    0.000000  100.000000        0.000000
3   10234.731689    9534.532471 -9409.532471  10234.731689  800.199219  9534.532471  400.199219  300.000000      200.000000
4   10334.831299    9734.532471 -9409.532471  10334.831299  400.099609  9734.532471  400.298828  200.000000      200.000000
5   10334.881104    9833.607178 -9409.532471  10334.881104  200.049805  9833.607178  400.298828  100.975098      100.049805
6   10334.930908    9922.970215 -9409.532471  10334.930908  101.024902  9922.970215  400.298828   11.661865        0.099609
7   10374.781494    9934.532471 -9349.482666  10374.781494   51.512451  9934.532471  400.298828   39.950195        0.000000
8   10374.781494    9974.482666 -9288.545166  10374.781494   26.756226  9974.482666  400.298828    0.000000      -39.062500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 14:21:53]  --------------------------------------------------------------------------------
[08/30 14:21:53]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 14:21:53]  Generator returned sat in 0.019742 secs.
[08/30 14:21:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:21:54]  Improved gap from 0.0 to 39.0625
[08/30 14:21:54]  Improved number of small numbers from 50 to 100 out of a max of 100
[08/30 14:21:54]  Verifer returned sat in 0.909566 secs.
[08/30 14:21:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   19137.677979   18937.653076 -19773.395264  19137.677979    0.099121  18937.653076      0.000  200.024902      100.024902
1   19137.677979   19137.628174 -19773.395264  19137.677979    0.024658  19137.628174      0.000    0.049805        0.024902
2   19137.677979   19137.653076 -19773.395264  19137.677979    0.024902  19137.653076      0.000    0.024902      -99.975098
3   20099.903076   19337.653076 -19773.395264  20099.903076  962.250000  19337.653076    562.250  200.000000      200.000000
4   20380.028076   19437.653076 -19773.395264  20380.028076  480.125000  19437.653076    742.375  200.000000      200.000000
5   20419.090576   19537.653076 -19773.395264  20419.090576  239.062500  19537.653076    742.375  139.062500      139.062500
6   20419.090576   19615.425049 -19773.395264  20419.090576  120.531250  19615.425049    742.375   61.290527       39.062500
7   20419.090576   19637.653076 -19712.457764  20419.090576   61.265625  19637.653076    742.375   39.062500        0.000000
8   20419.090576   19676.715576 -19651.520264  20419.090576   31.632812  19676.715576    742.375    0.000000      -39.062500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 14:21:55]  --------------------------------------------------------------------------------
[08/30 14:21:55]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 14:21:55]  Generator returned sat in 0.126041 secs.
[08/30 14:21:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:21:55]  Improved number of small numbers from 59 to 93 out of a max of 99
[08/30 14:21:55]  Verifer returned sat in 0.551036 secs.
[08/30 14:21:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   19779.484863   19779.484863 -19651.520508  19779.484863    0.099121  19779.484863    0.000000    0.000000       -0.493652
1   19979.490967   19879.978516 -19651.520508  19979.490967  200.006104  19879.978516    0.000000   99.512451       99.512451
2   19979.490967   19979.466064 -19651.520508  19979.490967    0.024658  19979.466064    0.000000    0.024902       -0.487549
3   20280.003418   19979.990967 -19651.520508  20280.003418  300.537354  19979.990967    0.024902  299.987549      200.000000
4   20380.028076   20179.978516 -19651.520508  20380.028076  400.012207  20179.978516    0.049561  200.000000      200.000000
5   20779.028076   20179.978516 -19651.520508  20779.028076  599.000000  20179.978516  299.049561  300.000000      200.000000
6   20879.052979   20279.978516 -19651.520508  20879.052979  400.024902  20279.978516  299.074463  300.000000      200.000000
7   21178.028076   20413.653442 -19651.520508  21178.028076  598.975098  20413.653442  498.049561  266.325073      200.000000
8   21378.052856   20479.978516 -19651.520508  21378.052856  466.349854  20479.978516  598.074341  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=4899019/8192, 
.[0m
[08/30 14:21:56]  --------------------------------------------------------------------------------
[08/30 14:21:56]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 14:21:56]  Generator returned sat in 0.066656 secs.
[08/30 14:21:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:21:56]  Improved gap from 0.0 to 0
[08/30 14:21:56]  Improved number of small numbers from 68 to 80 out of a max of 100
[08/30 14:21:56]  Verifer returned sat in 0.503136 secs.
[08/30 14:21:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20479.084229   20279.084229 -20151.475586  20479.084229    0.099121  20279.084229        0.0  200.000000      100.000000
1   20479.084229   20479.083984 -20151.475586  20479.084229  199.998535  20479.083984        0.0    0.000244        0.000000
2   20579.083984   20479.084229 -20151.475342  20579.083984  100.000000  20479.084229        0.0   99.999756        0.000000
3   20679.083984   20679.082979 -20151.475342  20679.083984  199.999756  20679.082979        0.0    0.001006        0.000000
4   20679.092979   20679.091729 -20051.484375  20679.092979    0.010000  20679.091729        0.0    0.001250       -0.000039
5   20679.101729   20679.100479 -19951.493164  20679.101729    0.010000  20679.100479        0.0    0.001250       -0.000078
6   20679.110479   20679.109229 -19851.501953  20679.110479    0.010000  20679.109229        0.0    0.001250       -0.000117
7   20679.119229   20679.117979 -19751.519043  20679.119229    0.010000  20679.117979        0.0    0.001250       -0.008457
8   20679.127979   20679.127930 -19751.519043  20679.127979    0.010000  20679.127930        0.0    0.000049      -99.999707
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:21:57]  --------------------------------------------------------------------------------
[08/30 14:21:57]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 14:21:57]  Generator returned sat in 0.361269 secs.
[08/30 14:21:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:21:57]  Improved gap from 0.0 to 100
[08/30 14:21:57]  Improved number of small numbers from 74 to 80 out of a max of 100
[08/30 14:21:57]  Verifer returned sat in 0.374438 secs.
[08/30 14:21:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20479.084229   20279.083984 -20151.475342  20479.084229    0.098877  20279.083984    0.000000  200.000244      100.000244
1   20479.084229   20479.083984 -20151.475342  20479.084229  199.998535  20479.083984    0.000000    0.000244        0.000244
2   20628.209229   20579.083984 -20151.475342  20628.209229  149.125244  20579.083984    0.000000   49.125244       49.125244
3   20628.209229   20628.209122 -20151.475342  20628.209229   25.937492  20628.209122    0.000000    0.000107      -50.874756
4   20679.084106   20679.083984 -20151.475342  20679.084106   50.874985  20679.083984    0.000000    0.000122      -99.999878
5   20779.833954   20779.083984 -20151.475342  20779.833954  100.749969  20779.083984    0.000000    0.749969      -99.250031
6   20979.583923   20879.083984 -20151.475342  20979.583923  200.499939  20879.083984    0.000000  100.499939        0.499939
7   21279.083862   20979.083984 -20151.475342  21279.083862  399.999878  20979.083984    0.000000  299.999878      199.999878
8   21778.083740   21079.083984 -20151.475342  21778.083740  798.999756  21079.083984  398.999756  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1634303/4096, 
.[0m
[08/30 14:21:58]  --------------------------------------------------------------------------------
[08/30 14:21:58]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 14:21:58]  Generator returned sat in 0.034075 secs.
[08/30 14:21:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:21:58]  Improved gap from 0.0 to 100
[08/30 14:21:59]  Improved number of small numbers from 47 to 67 out of a max of 100
[08/30 14:21:59]  Verifer returned sat in 0.708658 secs.
[08/30 14:21:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20660.016846   20360.017090 -20151.475342  20660.016846    0.098877  20360.017090    0.000000  299.999756      199.999772
1   20660.016846   20460.017090 -20151.475342  20660.016846  299.950684  20460.017090    0.000000  199.999756       99.999772
2   20859.967529   20560.017090 -20151.475342  20859.967529  399.950439  20560.017090    0.000000  299.950439      199.950456
3   20859.967529   20740.105796 -20151.475342  20859.967529   80.607518  20740.105796    0.000000  119.861733       99.950456
4   20860.017074   20760.017074 -20151.475342  20860.017074  119.911277  20760.017074    0.000000  100.000000        0.000000
5   20938.883990   20860.017074 -20151.475342  20938.883990  178.866916  20860.017074    0.000000   78.866916      -21.133084
6   21127.317448   20960.017074 -20151.475342  21127.317448  267.300374  20960.017074    0.000000  167.300374       67.300374
7   21359.967635   21160.017074 -20151.475342  21359.967635  399.950562  21160.017074    0.000000  199.950562      199.950562
8   21758.942916   21160.017090 -20151.475342  21758.942916  598.925842  21160.017090  298.925842  299.999984      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=4897601/16384, 
.[0m
[08/30 14:21:59]  --------------------------------------------------------------------------------
[08/30 14:21:59]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 14:21:59]  Generator returned sat in 0.123015 secs.
[08/30 14:21:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 14:21:59]  Improved gap from 0.0494384765625 to 100
[08/30 14:22:00]  Improved number of small numbers from 47 to 61 out of a max of 100
[08/30 14:22:00]  Verifer returned sat in 0.917528 secs.
[08/30 14:22:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20660.017090   20560.017090 -20351.475342  20660.017090    0.098877  20560.017090    0.000000  100.000000        0.000016
1   20660.017090   20660.017090 -20351.475342  20660.017090   99.950684  20660.017090    0.000000    0.000000      -99.999984
2   20860.017090   20793.366886 -20351.475342  20860.017090  200.000000  20793.366886    0.000000   66.650203        0.000016
3   20860.066512   20860.017074 -20351.475342  20860.066512   66.699626  20860.017074    0.000000    0.049438      -99.950562
4   20960.066512   20960.017074 -20351.475342  20960.066512  100.049438  20960.017074    0.000000    0.049438      -99.950562
5   21110.091231   21060.017074 -20351.475342  21110.091231  150.074158  21060.017074    0.000000   50.074158      -49.925842
6   21285.128310   21222.300780 -20351.475342  21285.128310  225.111237  21222.300780    0.000000   62.827530       25.111237
7   21559.967635   21353.566230 -20351.475342  21559.967635  337.666855  21353.566230    0.000000  206.401405      199.950562
8   21860.066512   21460.016846 -20351.475342  21860.066512  506.500282  21460.016846  200.049438  200.000228      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638805/8192, 
.[0m
[08/30 14:22:00]  --------------------------------------------------------------------------------
[08/30 14:22:00]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 14:22:01]  Generator returned sat in 0.616142 secs.
[08/30 14:22:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:01]  Improved gap from 0.0 to 100
[08/30 14:22:01]  Improved number of small numbers from 45 to 100 out of a max of 100
[08/30 14:22:01]  Verifer returned sat in 0.306056 secs.
[08/30 14:22:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20461.041992   20460.992432 -20351.475342  20461.041992    0.098633  20460.992432    0.000000    0.049561        0.000244
1   20461.041992   20461.041748 -20351.475342  20461.041992    0.024658  20461.041748    0.000000    0.000244      -99.999756
2   20661.041748   20561.041992 -20351.475342  20661.041748  200.000000  20561.041992    0.000000   99.999756        0.000000
3   20961.017090   20661.041992 -20351.475342  20961.017090  399.975098  20661.041992    0.000000  299.975098      199.975342
4   20961.017090   20761.041748 -20351.475342  20961.017090  201.049561  20761.041748    0.000000  199.975342       99.975342
5   21062.041748   20960.054199 -20351.475342  21062.041748  301.000000  20960.054199    0.000000  101.987549      101.000000
6   21360.066406   21061.041748 -20351.475342  21360.066406  400.012207  21061.041748   99.024658  200.000000      200.000000
7   21360.066406   21161.041748 -20351.475342  21360.066406  199.006104  21161.041748   99.024658  100.000000      100.000000
8   21661.066406   21161.041992 -20351.475342  21661.066406  401.000000  21161.041992  200.024658  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819301/4096, 
.[0m
[08/30 14:22:02]  --------------------------------------------------------------------------------
[08/30 14:22:02]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 14:22:02]  Generator returned sat in 0.529918 secs.
[08/30 14:22:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:03]  Improved gap from 2.8820393880208335 to 100
[08/30 14:22:03]  Improved number of small numbers from 53 to 61 out of a max of 100
[08/30 14:22:03]  Verifer returned sat in 0.767950 secs.
[08/30 14:22:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20351.935303   20251.910791 -20351.475342  20351.935303    0.098633  20251.910791    0.000000  100.024512      100.024512
1   20351.935303   20351.886133 -20351.475342  20351.935303    0.024658  20351.886133    0.000000    0.049170        0.024512
2   20351.935303   20351.910791 -20351.475342  20351.935303    0.024658  20351.910791    0.000000    0.024512      -99.975488
3   20751.935449   20502.343447 -20351.475342  20751.935449  400.024658  20502.343447    0.024658  249.567344      200.000000
4   20879.017090   20624.705859 -20351.475342  20879.017090  376.648984  20624.705859   27.106299  227.204932      200.000000
5   21062.041748   20678.300928 -20351.475342  21062.041748  410.229590  20678.300928  110.130957  273.609863      200.000000
6   21279.017090   20761.780248 -20351.475342  21279.017090  490.585205  20761.780248  227.106299  290.130543      200.000000
7   21379.041748   20875.187832 -20351.475342  21379.041748  390.155201  20875.187832  227.130957  276.722959      200.000000
8   21479.041748   20951.910889 -20351.475342  21479.041748  376.722959  20951.910889  227.130957  299.999902      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=819301/4096, 
.[0m
[08/30 14:22:04]  --------------------------------------------------------------------------------
[08/30 14:22:04]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 14:22:04]  Generator returned sat in 0.364203 secs.
[08/30 14:22:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:04]  Improved gap from 0.04931640625 to 0
[08/30 14:22:04]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/30 14:22:04]  Verifer returned sat in 0.275698 secs.
[08/30 14:22:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20477.918213   20477.868896 -20577.433594  20477.918213    0.098389  20477.868896   0.000000    0.049316        0.049316
1   20577.918213   20477.868896 -20577.433594  20577.918213  100.049316  20477.868896   0.000000  100.049316        0.049316
2   20577.918213   20577.869141 -20477.482910  20577.918213    0.049316  20577.869141   0.000000    0.049072        0.000000
3   20877.967529   20579.869141 -20477.482910  20877.967529  300.098389  20579.869141   0.049316  298.049072      200.000000
4   20879.016846   20777.918213 -20477.482910  20879.016846  299.098389  20777.918213   0.049316  101.049316      101.049316
5   20879.016846   20877.918213 -20477.482910  20879.016846    1.000000  20877.918213   0.049316    1.049316        1.049316
6   20879.016846   20877.918457 -20378.532227  20879.016846    1.000000  20877.918457   0.049316    1.049072        0.000000
7   20879.016846   20878.967529 -20279.532227  20879.016846    1.000000  20878.967529   0.049316    0.000000       -1.000000
8   20880.016846   20879.967529 -20279.532227  20880.016846    1.000000  20879.967529   0.049316    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:05]  --------------------------------------------------------------------------------
[08/30 14:22:05]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 14:22:05]  Generator returned sat in 0.076424 secs.
[08/30 14:22:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:22:05]  Improved gap from 0.01 to 78.125
[08/30 14:22:06]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 14:22:06]  Verifer returned sat in 0.628669 secs.
[08/30 14:22:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20198.997559   19998.997314 -20514.857910  20198.997559    0.098389  19998.997314        0.0  200.000244      200.000000
1   20298.948242   20098.997314 -20514.857910  20298.948242  299.950928  20098.997314        0.0  199.950928      199.950684
2   20398.948242   20198.997314 -20514.857910  20398.948242  299.950928  20198.997314        0.0  199.950928      199.950684
3   20398.948242   20298.997559 -20514.857910  20398.948242   84.026611  20298.997559        0.0   99.950684       99.950684
4   20398.948242   20398.046631 -20514.857910  20398.948242   83.026611  20398.046631        0.0    0.901611       -0.049316
5   20480.073242   20398.997559 -20495.933594  20480.073242   82.026611  20398.997559        0.0   81.075684        0.000000
6   20480.073242   20480.073242 -20474.058594  20480.073242   81.026611  20480.073242        0.0    0.000000      -78.125000
7   20560.099854   20558.198242 -20452.183594  20560.099854   80.026611  20558.198242        0.0    1.901611      -76.223389
8   20637.224854   20636.323242 -20430.308838  20637.224854   79.026611  20636.323242        0.0    0.901611      -77.223633
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:06]  --------------------------------------------------------------------------------
[08/30 14:22:06]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 14:22:06]  Generator returned sat in 0.309605 secs.
[08/30 14:22:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:07]  Improved gap from 0.0025 to 100
[08/30 14:22:07]  Improved number of small numbers from 48 to 76 out of a max of 100
[08/30 14:22:07]  Verifer returned sat in 0.831867 secs.
[08/30 14:22:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   19999.022217   19998.973145 -20414.892334  19999.022217    0.098389  19998.973145    0.000000    0.049072        0.024658
1   19999.022217   19998.997559 -20414.892334  19999.022217    0.024658  19998.997559    0.000000    0.024658      -99.975342
2   20299.021973   20198.997314 -20414.892334  20299.021973  300.024414  20198.997314    0.000000  100.024658      100.024414
3   20299.021973   20201.832031 -20414.892334  20299.021973   64.110227  20201.832031    0.000000   97.189941        0.024414
4   20299.021973   20298.997559 -20414.892334  20299.021973   97.165340  20298.997559    0.000000    0.024414      -99.975586
5   20445.745569   20398.997559 -20414.892334  20445.745569  146.748011  20398.997559    0.000000   46.748011      -53.251989
6   20620.119575   20566.289998 -20414.892334  20620.119575  221.122016  20566.289998    0.000000   53.829576       21.122016
7   20898.973022   20698.997559 -20414.892334  20898.973022  332.683024  20698.997559    0.000000  199.975464      199.975464
8   21199.022095   20698.997559 -20414.892334  21199.022095  500.024536  20698.997559  200.024536  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638601/8192, 
.[0m
[08/30 14:22:08]  --------------------------------------------------------------------------------
[08/30 14:22:08]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 14:22:08]  Generator returned sat in 0.633619 secs.
[08/30 14:22:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:10]  Verifer returned unsat in 1.482960 secs.
[08/30 14:22:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:10]  --------------------------------------------------------------------------------
[08/30 14:22:10]  Iteration: 16 (1 solution, 14 counterexamples)
[08/30 14:22:11]  Generator returned sat in 0.475813 secs.
[08/30 14:22:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:22:11]  Improved gap from 0.0 to 10.9375
[08/30 14:22:12]  Improved number of small numbers from 50 to 61 out of a max of 100
[08/30 14:22:12]  Verifer returned sat in 0.968691 secs.
[08/30 14:22:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   19593.090820   19593.090576 -20414.892334  19593.090820    0.098389  19593.090576   0.000000    0.000244        0.000239
1   19893.041504   19693.090581 -20414.892334  19893.041504  299.950928  19693.090581   0.000000  199.950923      199.950923
2   19993.139653   19693.090581 -20414.892334  19993.139653  300.049072  19693.090581   0.049072  300.000000      200.000000
3   20093.090581   19893.090576 -20414.892334  20093.090581  399.950928  19893.090576   0.049072  199.950933      199.950928
4   20093.090581   19993.090576 -20414.892334  20093.090581  198.975464  19993.090576   0.049072   99.950933       99.950928
5   20093.090581   20056.982076 -20414.843262  20093.090581   98.487732  20056.982076   0.049072   36.059433        0.000000
6   20105.275014   20093.041509 -20327.027695  20105.275014   48.243866  20093.041509   0.049072   12.184433        0.000000
7   20116.212514   20105.225942 -20237.965195  20116.212514   23.121933  20105.225942   0.049072   10.937500        0.000000
8   20116.212514   20116.163442 -20237.965088  20116.212514   10.560966  20116.163442   0.049072    0.000000      -99.999893
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:12]  --------------------------------------------------------------------------------
[08/30 14:22:12]  Iteration: 17 (1 solution, 15 counterexamples)
[08/30 14:22:14]  Generator returned sat in 1.498577 secs.
[08/30 14:22:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:22:15]  Improved number of small numbers from 53 to 65 out of a max of 99
[08/30 14:22:15]  Verifer returned sat in 0.904950 secs.
[08/30 14:22:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20193.095459   19893.095703 -20814.897334  20193.095459    0.098145  19893.095703     0.0000  299.999756      199.999878
1   20293.093262   19999.095581 -20814.897334  20293.093262  399.997559  19999.095581     0.0000  293.997681      199.997681
2   20393.093081   20093.095581 -20814.897334  20393.093081  393.997500  20093.095581     0.0000  299.997500      199.997500
3   20393.093081   20193.095703 -20814.897334  20393.093081   17.005833  20193.095703     0.0000  199.997378       99.997500
4   20393.093081   20293.095581 -20814.897334  20393.093081  166.005833  20293.095581     0.0000   99.997500       -0.002500
5   20605.101414   20485.760025 -20814.897334  20605.101414  312.005833  20485.760025     0.0000  119.341389      112.005833
6   20993.098081   20593.095459 -20814.897334  20993.098081  507.338056  20593.095459   200.0025  200.000122      200.000000
7   20993.098081   20627.087248 -20814.897334  20993.098081    0.010000  20627.087248   200.0025  166.008333      100.000000
8   20993.098081   20693.097900 -20814.897334  20993.098081  166.005833  20693.097900   200.0025   99.997681        0.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=80001/400, 
.[0m
[08/30 14:22:15]  --------------------------------------------------------------------------------
[08/30 14:22:15]  Iteration: 18 (1 solution, 16 counterexamples)
[08/30 14:22:16]  Generator returned sat in 1.248920 secs.
[08/30 14:22:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 14:22:17]  Improved gap from 0.049072265625 to 12.5
[08/30 14:22:17]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 14:22:17]  Verifer returned sat in 1.072758 secs.
[08/30 14:22:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   19816.310303   19716.261475 -20814.897217  19816.310303    0.097900  19716.261475        0.0  100.048828        0.049072
1   19816.310303   19816.261475 -20814.897217  19816.310303  100.048828  19816.261475        0.0    0.048828      -99.950928
2   20216.212158   19916.261230 -20814.897217  20216.212158  399.950684  19916.261230        0.0  299.950928      199.950928
3   20316.261230   20116.212402 -20814.897217  20316.261230  400.000000  20116.212402        0.0  200.048828      200.000000
4   20316.261230   20116.261475 -20814.897217  20316.261230  200.000000  20116.261475        0.0  199.999756      100.000000
5   20316.261230   20266.212402 -20814.897217  20316.261230  100.000000  20266.212402        0.0   50.048828        0.000000
6   20316.261230   20316.261230 -20727.397217  20316.261230   50.000000  20316.261230        0.0    0.000000      -12.500000
7   20341.261230   20328.810303 -20639.946289  20341.261230   25.000000  20328.810303        0.0   12.450928       -0.049072
8   20341.310303   20341.310303 -20639.946289  20341.310303   12.500000  20341.310303        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:18]  --------------------------------------------------------------------------------
[08/30 14:22:18]  Iteration: 19 (1 solution, 17 counterexamples)
[08/30 14:22:20]  Generator returned sat in 1.554444 secs.
[08/30 14:22:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 14:22:20]  Improved gap from 0.012237548828125 to 100
[08/30 14:22:20]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/30 14:22:20]  Verifer returned sat in 0.379169 secs.
[08/30 14:22:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20221.456787   20121.408203 -21220.044189  20221.456787    0.097900  20121.408203   0.000000  100.048584        0.048584
1   20221.457031   20221.408203 -21220.044189  20221.457031  100.048828  20221.408203   0.000000    0.048828      -99.951172
2   20420.408203   20420.358887 -21220.044189  20420.408203  199.000000  20420.358887   0.000000    0.049316       -1.000000
3   20488.456787   20488.408203 -21220.044189  20488.456787   68.097900  20488.408203   0.000000    0.048584      -32.951416
4   20854.408203   20554.408203 -21220.044189  20854.408203  366.000000  20554.408203  33.000000  267.000000      200.000000
5   20854.408203   20721.407959 -21220.044189  20854.408203  165.500000  20721.407959  33.000000  100.000244      100.000000
6   21054.457031   20744.408203 -21220.044189  21054.457031  300.049072  20744.408203  33.048828  277.000000      200.000000
7   21054.457031   20921.408203 -21220.044189  21054.457031  127.000000  20921.408203  33.048828  100.000000      100.000000
8   21320.457031   20921.408203 -21220.044189  21320.457031  366.000000  20921.408203  99.048828  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=33817/512, 
.[0m
[08/30 14:22:20]  --------------------------------------------------------------------------------
[08/30 14:22:20]  Iteration: 20 (1 solution, 18 counterexamples)
[08/30 14:22:22]  Generator returned sat in 1.368644 secs.
[08/30 14:22:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:22]  Improved gap from 0.0489501953125 to 3.125
[08/30 14:22:22]  Improved number of small numbers from 53 to 100 out of a max of 100
[08/30 14:22:22]  Verifer returned sat in 0.317480 secs.
[08/30 14:22:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20555.359131   20355.310059 -21453.946289  20555.359131    0.097656  20355.310059   0.000000  200.049072      100.049072
1   20555.359131   20555.310059 -21453.946289  20555.359131  200.049072  20555.310059   0.000000    0.049072        0.049072
2   20555.359131   20555.310059 -21453.946045  20555.359131    0.048828  20555.310059   0.000000    0.049072      -99.950684
3   20954.358887   20655.310059 -21453.946045  20954.358887  399.048828  20655.310059   0.000000  299.048828      199.049072
4   21055.358887   20818.483887 -21453.946045  21055.358887  400.048828  20818.483887   0.049072  236.825928      200.000000
5   21055.358887   20855.310303 -21453.946045  21055.358887    1.000000  20855.310303   0.049072  199.999512      100.000000
6   21055.358887   21055.260986 -21453.946045  21055.358887    2.000000  21055.260986   0.049072    0.048828        0.000000
7   21058.310059   21055.310059 -21357.071289  21058.310059    3.000000  21055.310059   0.049072    2.950928       -0.174072
8   21059.359131   21058.435303 -21357.071045  21059.359131    4.000000  21058.435303   0.049072    0.874756      -99.124756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 14:22:23]  --------------------------------------------------------------------------------
[08/30 14:22:23]  Iteration: 21 (1 solution, 19 counterexamples)
[08/30 14:22:23]  Generator returned sat in 0.186280 secs.
[08/30 14:22:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:23]  Verifer returned unsat in 0.087509 secs.
[08/30 14:22:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:23]  --------------------------------------------------------------------------------
[08/30 14:22:23]  Iteration: 22 (2 solution, 19 counterexamples)
[08/30 14:22:24]  Generator returned sat in 0.186361 secs.
[08/30 14:22:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:24]  Improved gap from 0.0244140625 to 100
[08/30 14:22:24]  Improved number of small numbers from 65 to 100 out of a max of 100
[08/30 14:22:24]  Verifer returned sat in 0.383471 secs.
[08/30 14:22:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20406.915283   20406.891113 -21453.946045  20406.915283    0.097412  20406.891113   0.000000    0.024170        0.024170
1   20706.866455   20406.891113 -21453.946045  20706.866455  299.975342  20406.891113   0.000000  299.975342      199.975342
2   20706.866455   20545.793457 -21453.946045  20706.866455  299.950928  20545.793457   0.000000  161.072998       99.975342
3   20906.915527   20643.817871 -21453.946045  20906.915527  361.122070  20643.817871   0.024414  263.073242      200.000000
4   20943.866699   20805.891113 -21453.946045  20943.866699  300.024414  20805.891113   0.024414  137.951172      136.951172
5   21106.939941   20906.891113 -21453.946045  21106.939941  301.024414  20906.891113   0.048828  200.000000      200.000000
6   21239.000977   20907.805664 -21453.946045  21239.000977  332.061035  20907.805664  32.109863  299.085449      200.000000
7   21239.000977   21106.891113 -21453.946045  21239.000977  299.024414  21106.891113  32.109863  100.000000      100.000000
8   21439.025391   21106.891113 -21453.946045  21439.025391  300.024414  21106.891113  32.134277  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=65761/2048, 
.[0m
[08/30 14:22:24]  --------------------------------------------------------------------------------
[08/30 14:22:24]  Iteration: 23 (2 solution, 20 counterexamples)
[08/30 14:22:25]  Generator returned sat in 0.457169 secs.
[08/30 14:22:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:27]  Verifer returned unsat in 1.483858 secs.
[08/30 14:22:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:27]  --------------------------------------------------------------------------------
[08/30 14:22:27]  Iteration: 24 (3 solution, 20 counterexamples)
[08/30 14:22:27]  Generator returned sat in 0.075081 secs.
[08/30 14:22:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:29]  Verifer returned unsat in 2.017102 secs.
[08/30 14:22:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:29]  --------------------------------------------------------------------------------
[08/30 14:22:29]  Iteration: 25 (4 solution, 20 counterexamples)
[08/30 14:22:29]  Generator returned sat in 0.154612 secs.
[08/30 14:22:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:30]  Improved gap from 4.669913736979167 to 68.75
[08/30 14:22:31]  Improved number of small numbers from 50 to 69 out of a max of 100
[08/30 14:22:31]  Verifer returned sat in 1.054428 secs.
[08/30 14:22:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20137.240479   20077.594482 -21453.946045  20137.240479    0.097168  20077.594482        0.0   59.645996       59.645894
1   20137.240723   20137.191996 -21453.946045  20137.240723   59.646240  20137.191996        0.0    0.048726      -40.353861
2   20277.643290   20277.594584 -21453.946045  20277.643290  140.451294  20277.594584        0.0    0.048706        0.048706
3   20377.643290   20377.594482 -21453.946045  20377.643290  100.048706  20377.594482        0.0    0.048808        0.048706
4   20528.594482   20477.594584 -21453.946045  20528.594482  151.000000  20477.594584        0.0   50.999898       50.999898
5   20648.795878   20477.594584 -21453.946045  20648.795878  171.201294  20477.594584        0.0  171.201294       71.201294
6   20648.795878   20579.594482 -21425.147339  20648.795878  101.000000  20579.594482        0.0   69.201396        0.000000
7   20681.594482   20648.795878 -21393.897339  20681.594482  102.000000  20648.795878        0.0   32.798604      -35.951396
8   20735.396525   20717.545898 -21362.647461  20735.396525   86.600647  20717.545898        0.0   17.850627      -50.899475
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:31]  --------------------------------------------------------------------------------
[08/30 14:22:31]  Iteration: 26 (4 solution, 21 counterexamples)
[08/30 14:22:32]  Generator returned sat in 0.848920 secs.
[08/30 14:22:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:32]  Improved gap from 0.0 to 100
[08/30 14:22:33]  Improved number of small numbers from 37 to 45 out of a max of 100
[08/30 14:22:33]  Verifer returned sat in 0.894892 secs.
[08/30 14:22:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   19133.019775   19132.970976 -21492.897339  19133.019775    0.096924  19132.970976    0.000000    0.048800        0.000216
1   19133.019775   19133.019560 -21492.897339  19133.019775    0.024414  19133.019560    0.000000    0.000216      -99.999784
2   19333.053852   19233.019560 -21492.897339  19333.053852  200.034292  19233.019560    0.000000  100.034292        0.034292
3   19633.043852   19373.400126 -21492.897339  19633.043852  400.024292  19373.400126    0.024292  259.619434      200.000000
4   19733.068144   19533.019560 -21492.897339  19733.068144  359.643726  19533.019560    0.048584  200.000000      200.000000
5   20132.068144   19533.019560 -21492.897339  20132.068144  599.000000  19533.019560  299.048584  300.000000      200.000000
6   20281.068144   19733.019560 -21492.897339  20281.068144  449.000000  19733.019560  348.048584  200.000000      200.000000
7   20619.497294   19811.448710 -21492.897339  20619.497294  538.429150  19811.448710  586.477734  221.570850      200.000000
8   20814.570170   19833.019775 -21492.897339  20814.570170  416.643726  19833.019775  681.550610  299.999784      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=27914323/40960, 
.[0m
[08/30 14:22:33]  --------------------------------------------------------------------------------
[08/30 14:22:33]  Iteration: 27 (4 solution, 22 counterexamples)
[08/30 14:22:35]  Generator returned sat in 1.372691 secs.
[08/30 14:22:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 14:22:35]  Improved gap from 0.0025 to 100
[08/30 14:22:35]  Improved number of small numbers from 17 to 100 out of a max of 100
[08/30 14:22:35]  Verifer returned sat in 0.421650 secs.
[08/30 14:22:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   19043.912842   19043.888428 -21492.897461  19043.912842    0.096680  19043.888428   0.000000    0.024414      -91.072510
1   19435.009766   19134.985352 -21492.897461  19435.009766  391.121338  19134.985352   0.024414  300.000000      200.000000
2   19435.009766   19234.985352 -21492.897461  19435.009766  299.999756  19234.985352   0.024414  200.000000      100.000000
3   19632.985352   19337.033936 -21492.897461  19632.985352  397.975586  19337.033936   0.024414  295.927002      197.975586
4   19735.033936   19436.009521 -21492.897461  19735.033936  397.975586  19436.009521   0.048584  298.975830      200.000000
5   19736.082275   19634.936768 -21492.897461  19736.082275  300.024170  19634.936768   0.048584  101.096924      101.048340
6   19935.009521   19734.985107 -21492.897461  19935.009521  300.024170  19734.985107   0.048584  199.975830      199.975586
7   20035.057861   19834.985352 -21492.897461  20035.057861  300.024170  19834.985352   0.072510  200.000000      200.000000
8   20233.033691   19834.985352 -21492.897461  20233.033691  397.975830  19834.985352  98.048340  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=401407/4096, 
.[0m
[08/30 14:22:36]  --------------------------------------------------------------------------------
[08/30 14:22:36]  Iteration: 28 (4 solution, 23 counterexamples)
[08/30 14:22:40]  Generator returned sat in 4.308529 secs.
[08/30 14:22:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:41]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 14:22:41]  Verifer returned sat in 0.181653 secs.
[08/30 14:22:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t   cwnd_0,t   service_0,t   losts_0,t    queue_t  bottle_queue_t
0   18722.985596   18722.937256 -21492.897461  18722.985596    0.09668  18722.937256    0.000000    0.04834        -8.47583
1   19031.509766   18815.461426 -21492.897461  19031.509766  308.57251  18815.461426    0.048340  216.00000       200.00000
2   19031.509766   18831.461426 -21492.897461  19031.509766  215.95166  18831.461426    0.048340  200.00000       100.00000
3   19330.558105   19030.413086 -21492.897461  19330.558105  499.04834  19030.413086   99.096680  201.04834       200.00000
4   19435.985596   19123.985596 -21492.897461  19435.985596  306.47583  19123.985596  104.524170  207.47583       200.00000
5   19536.033936   19183.485596 -21492.897461  19536.033936  307.52417  19183.485596  104.572510  247.97583       200.00000
6   19639.082275   19331.461426 -21492.897461  19639.082275  351.02417  19331.461426  107.620850  200.00000       200.00000
7   19739.130615   19431.461426 -21492.897461  19739.130615  300.04834  19431.461426  107.669189  200.00000       200.00000
8   19845.606445   19431.461426 -21492.897461  19845.606445  306.47583  19431.461426  114.145020  300.00000       200.00000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=39407/4096, 
.[0m
[08/30 14:22:41]  --------------------------------------------------------------------------------
[08/30 14:22:41]  Iteration: 29 (4 solution, 24 counterexamples)
[08/30 14:22:41]  Generator returned sat in 0.103824 secs.
[08/30 14:22:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:41]  Improved gap from 0.024169921875 to 0
[08/30 14:22:42]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 14:22:42]  Verifer returned sat in 0.415907 secs.
[08/30 14:22:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   18859.999512   18859.975586 -21492.897461  18859.999512    0.096436  18859.975586   0.000000    0.023926      -99.976074
1   19259.999512   19043.975586 -21492.897461  19259.999512  400.023926  19043.975586   0.023926  216.000000      200.000000
2   19259.999512   19059.975586 -21492.897461  19259.999512  215.951660  19059.975586   0.023926  200.000000      100.000000
3   19360.999512   19159.975586 -21492.897461  19360.999512  301.000000  19159.975586   0.023926  201.000000      101.000000
4   19360.999512   19359.975342 -21492.897461  19360.999512    1.000000  19359.975342   0.023926    1.000244        1.000000
5   19360.999512   19359.999756 -21393.897461  19360.999512    1.000000  19359.999756   0.023926    0.975830        0.000000
6   19361.023682   19360.975586 -21293.921875  19361.023682    1.000000  19360.975586   0.023926    0.024170       -0.000244
7   19361.999512   19361.951416 -21194.897461  19361.999512    1.000000  19361.951416   0.023926    0.024170        0.000000
8   19362.975342   19361.975586 -21194.897461  19362.975342    1.000000  19361.975586   0.023926    0.975830      -99.024170
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:42]  --------------------------------------------------------------------------------
[08/30 14:22:42]  Iteration: 30 (4 solution, 25 counterexamples)
[08/30 14:22:43]  Generator returned sat in 0.375497 secs.
[08/30 14:22:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:44]  Improved gap from 0.01806640625 to 14.0625
[08/30 14:22:44]  Improved number of small numbers from 24 to 42 out of a max of 100
[08/30 14:22:44]  Verifer returned sat in 1.622775 secs.
[08/30 14:22:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20133.759033   20033.710693 -21492.897461  20133.759033    0.096436  20033.710693   0.000000  100.048340        0.048352
1   20133.759033   20133.710681 -21492.897461  20133.759033  100.048096  20133.710681   0.000000    0.048352      -99.951648
2   20533.758899   20233.710693 -21492.897461  20533.758899  400.048218  20233.710693   0.048218  299.999988      200.000000
3   20633.710693   20432.734790 -21492.897461  20633.710693  399.951782  20432.734790   0.048218  200.927685      199.951794
4   20633.758899   20532.174561 -21492.897461  20633.758899  200.975891  20532.174561   0.048218  101.536121      100.000000
5   20633.758899   20581.918701 -21492.897461  20633.758899  101.487946  20581.918701   0.048218   51.791980        0.000000
6   20633.758899   20633.710681 -21419.721191  20633.758899   51.743973  20633.710681   0.048218    0.000000      -26.823730
7   20660.630886   20660.534450 -21333.783730  20660.630886   26.871986  20660.534450   0.048218    0.048218      -14.014282
8   20675.018661   20674.596950 -21247.846436  20675.018661   14.435993  20674.596950   0.048218    0.373493      -13.689213
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:45]  --------------------------------------------------------------------------------
[08/30 14:22:45]  Iteration: 31 (4 solution, 26 counterexamples)
[08/30 14:22:46]  Generator returned sat in 0.915133 secs.
[08/30 14:22:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:46]  Improved gap from 2.01 to 1.5625
[08/30 14:22:47]  Improved number of small numbers from 58 to 78 out of a max of 100
[08/30 14:22:47]  Verifer returned sat in 0.932593 secs.
[08/30 14:22:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20610.882568   20310.882812 -21770.069563  20610.882568    0.096191  20310.882812    0.00000  299.999756      199.999785
1   20710.884033   20410.882812 -21770.069563  20710.884033  400.001221  20410.882812    0.00125  299.999971      200.000000
2   20710.884033   20610.882783 -21770.069563  20710.884033    0.001221  20610.882783    0.00125  100.000000      100.000000
3   20909.885498   20710.882568 -21770.069563  20909.885498  299.001465  20710.882568    0.00125  199.001680      199.001465
4   21010.885283   20810.882568 -21770.069563  21010.885283  300.001465  20810.882568    0.00250  200.000215      200.000000
5   21010.885283   20910.882568 -21770.069563  21010.885283    0.010000  20910.882568    0.00250  100.000215      100.000000
6   21010.885283   21008.871582 -21770.069563  21010.885283    1.010000  21008.871582    0.00250    2.011201        0.000000
7   21010.885283   21010.882783 -21673.079346  21010.885283    2.010000  21010.882783    0.00250    0.000000       -3.009783
8   21013.895283   21013.892578 -21673.079346  21013.895283    3.010000  21013.892578    0.00250    0.000205      -99.999783
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 14:22:47]  --------------------------------------------------------------------------------
[08/30 14:22:47]  Iteration: 32 (4 solution, 27 counterexamples)
[08/30 14:22:48]  Generator returned sat in 0.503536 secs.
[08/30 14:22:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:48]  Improved gap from 15.0 to 100
[08/30 14:22:49]  Improved number of small numbers from 56 to 64 out of a max of 100
[08/30 14:22:49]  Verifer returned sat in 0.872516 secs.
[08/30 14:22:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20610.882324   20310.882812 -21770.069563  20610.882324    0.095947  20310.882812    0.000000  299.999512      199.999541
1   20710.884033   20510.882783 -21770.069563  20710.884033  400.001221  20510.882783    0.001250  200.000000      200.000000
2   20810.884658   20610.882568 -21770.069563  20810.884658  300.000625  20610.882568    0.001875  200.000215      200.000000
3   20810.884658   20710.882568 -21770.069563  20810.884658   24.062148  20710.882568    0.001875  100.000215      100.000000
4   20810.884658   20710.882812 -21770.069563  20810.884658   49.124297  20710.882812    0.001875   99.999971        0.000000
5   20810.884658   20810.882783 -21770.069563  20810.884658   99.248594  20810.882783    0.001875    0.000000     -100.000000
6   21010.381846   20910.887783 -21770.069563  21010.381846  199.497187  20910.887783    0.001875   99.492188       -0.502812
7   21310.884033   21110.882783 -21770.069563  21310.884033  399.994375  21110.882783    0.001875  199.999375      199.999375
8   21911.873408   21110.882812 -21770.069563  21911.873408  800.988750  21110.882812  500.990625  299.999971      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=400791/800, 
.[0m
[08/30 14:22:49]  --------------------------------------------------------------------------------
[08/30 14:22:49]  Iteration: 33 (4 solution, 28 counterexamples)
[08/30 14:22:50]  Generator returned sat in 0.687739 secs.
[08/30 14:22:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:52]  Improved number of small numbers from 37 to 47 out of a max of 99
[08/30 14:22:52]  Verifer returned sat in 0.975155 secs.
[08/30 14:22:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20008.690430   19908.690674 -21267.877441  20008.690430    0.095947  19908.690674    0.000000   99.999756       99.999756
1   20008.690430   19908.690674 -21267.877441  20008.690430   99.999756  19908.690674    0.000000   99.999756       -0.000244
2   20308.714661   20008.690674 -21267.877441  20308.714661  400.023987  20008.690674    0.023987  300.000000      200.000000
3   20408.738647   20176.032003 -21267.877441  20408.738647  400.023987  20176.032003    0.047974  232.658671      200.000000
4   20508.762634   20295.889933 -21267.877441  20508.762634  332.682658  20295.889933    0.071960  212.800741      200.000000
5   20654.902852   20408.690674 -21267.877441  20654.902852  358.940959  20408.690674   46.212179  200.000000      200.000000
6   20833.373332   20508.690674 -21267.877441  20833.373332  378.470479  20508.690674  124.682658  200.000000      200.000000
7   20987.937907   20608.690674 -21267.877441  20987.937907  354.564575  20608.690674  179.247233  200.000000      200.000000
8   21120.620565   20608.690674 -21267.877441  21120.620565  332.682658  20608.690674  211.929891  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=10413241/49152, 
.[0m
[08/30 14:22:52]  --------------------------------------------------------------------------------
[08/30 14:22:52]  Iteration: 34 (4 solution, 29 counterexamples)
[08/30 14:22:53]  Generator returned sat in 0.333432 secs.
[08/30 14:22:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:53]  Improved gap from 0.02398681640625 to 39.0625
[08/30 14:22:53]  Improved number of small numbers from 43 to 100 out of a max of 100
[08/30 14:22:53]  Verifer returned sat in 0.662585 secs.
[08/30 14:22:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20727.719727   20664.513184 -22023.699951  20727.719727    0.095703  20664.513184   0.000000   63.206543       63.206543
1   20727.719727   20727.671875 -22023.699951  20727.719727   63.206299  20727.671875   0.000000    0.047852      -36.793457
2   20764.561279   20764.513184 -21962.762695  20764.561279   36.889404  20764.513184   0.000000    0.048096      -39.014648
3   21103.527588   20863.609375 -21962.762695  21103.527588  339.014404  20863.609375   0.000000  239.918213      199.951660
4   21203.623779   21003.575684 -21962.762695  21203.623779  340.014404  21003.575684   0.047852  200.000244      200.000000
5   21203.623779   21003.575928 -21962.762695  21203.623779  136.951904  21003.575928   0.047852  200.000000      100.000000
6   21203.623779   21104.575928 -21962.762695  21203.623779  137.951904  21104.575928   0.047852   99.000000        0.000000
7   21243.575684   21203.575928 -21902.714600  21243.575684  138.951904  21203.575928   0.047852   39.951904        0.000000
8   21343.575684   21243.527832 -21902.714600  21343.575684  139.951904  21243.527832   0.047852  100.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 14:22:54]  --------------------------------------------------------------------------------
[08/30 14:22:54]  Iteration: 35 (4 solution, 30 counterexamples)
[08/30 14:22:55]  Generator returned sat in 0.780535 secs.
[08/30 14:22:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 14:22:55]  Improved gap from 0.0025 to 79.6875
[08/30 14:22:55]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 14:22:55]  Verifer returned sat in 0.403265 secs.
[08/30 14:22:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20727.719727   20627.671875 -22086.858643  20727.719727    0.095703  20627.671875   0.000000  100.047852        0.047852
1   20727.719727   20727.671875 -22086.858643  20727.719727  100.000000  20727.671875   0.000000    0.047852      -99.952148
2   21127.719727   20927.671875 -22086.858643  21127.719727  400.047852  20927.671875   0.047852  200.000000      200.000000
3   21127.719727   21027.671875 -22086.858643  21127.719727   79.735352  21027.671875   0.047852  100.000000      100.000000
4   21127.719727   21127.624023 -22086.858643  21127.719727   79.735352  21127.624023   0.047852    0.047852        0.000000
5   21207.407227   21128.513672 -22067.387939  21207.407227   79.735352  21128.513672   0.047852   78.845703       -0.841797
6   21208.296875   21208.201172 -22047.075439  21208.296875   79.735352  21208.201172   0.047852    0.047852      -79.639648
7   21287.984375   21287.888672 -22026.762939  21287.984375   79.735352  21287.888672   0.047852    0.047852      -79.639648
8   21367.671875   21367.576172 -22026.762939  21367.671875   79.735352  21367.576172   0.047852    0.047852      -99.952148
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 14:22:56]  --------------------------------------------------------------------------------
[08/30 14:22:56]  Iteration: 36 (4 solution, 31 counterexamples)
[08/30 14:22:58]  Generator returned sat in 1.674937 secs.
[08/30 14:22:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:58]  Improved gap from 0.9521484375 to 39.0625
[08/30 14:22:58]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 14:22:58]  Verifer returned sat in 0.499137 secs.
[08/30 14:22:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20561.561523   20328.671875 -21787.858887  20561.561523    0.095703  20328.671875   0.000000  232.889648      132.889648
1   20561.561523   20528.671875 -21787.858887  20561.561523  100.000000  20528.671875   0.000000   32.889648       32.889648
2   20561.561523   20561.513672 -21759.763184  20561.561523    0.047852  20561.513672   0.000000    0.047852      -39.014648
3   20900.528320   20660.609375 -21759.763184  20900.528320  339.014648  20660.609375   0.000000  239.918945      199.952148
4   21000.624023   20800.576172 -21759.763184  21000.624023  340.014648  20800.576172   0.047852  200.000000      200.000000
5   21000.624023   20862.576172 -21759.763184  21000.624023  136.952148  20862.576172   0.047852  138.000000      100.000000
6   21000.624023   20900.576172 -21759.763184  21000.624023  137.952148  20900.576172   0.047852  100.000000        0.000000
7   21039.576172   21000.576172 -21699.715332  21039.576172  138.952148  21000.576172   0.047852   38.952148       -1.000000
8   21140.576172   21040.528320 -21699.715332  21140.576172  139.952148  21040.528320   0.047852  100.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 14:22:59]  --------------------------------------------------------------------------------
[08/30 14:22:59]  Iteration: 37 (4 solution, 32 counterexamples)
[08/30 14:22:59]  Generator returned unsat in 0.222182 secs.
[08/30 14:22:59]  [96mNo more solutions found[0m
[08/30 14:22:59]  Final solutions:
[08/30 14:22:59]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:59]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:59]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:59]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 14:22:59]  Took 68.566172 secs.
