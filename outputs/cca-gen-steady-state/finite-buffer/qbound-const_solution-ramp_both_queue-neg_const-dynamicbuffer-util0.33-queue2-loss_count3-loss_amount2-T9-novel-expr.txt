[08/30 16:53:47]  --------------------------------------------------------------------------------
[08/30 16:53:47]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 16:53:47]  Generator returned sat in 0.005663 secs.
[08/30 16:53:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:53:48]  Improved gap from 0.2 to 100
[08/30 16:53:48]  Improved number of small numbers from 114 to 114 out of a max of 114
[08/30 16:53:48]  Verifer returned sat in 0.290800 secs.
[08/30 16:53:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0        -200.00       -275.175     649.9      -200.00   275.275     -275.175        0.0    75.175           -0.10       1.0             -275.175                -1.0            -1
1           0.00       -199.900     649.9         0.00   275.175     -199.900        0.0   199.900           99.90       1.0                0.000                 0.0         False
2         100.10          0.100     649.9       100.10   300.000        0.100        0.0   100.000          100.00       1.0                0.000                 0.0         False
3         100.10          0.100     649.9       100.10    99.900        0.100        0.0   100.000            0.00       1.0              100.100                 0.0         False
4         750.45        200.000     649.9       750.45   750.350      200.000        0.0   550.450          550.35       1.0              100.100                 0.0         False
5        2500.50        200.100     649.9      2500.50  2300.500      200.100        0.1  2300.300         2200.30       2.0              100.100                 0.0         False
6        2500.50        300.100     649.9      2500.50   200.000      300.100        0.1  2200.300         2100.30       3.0             2500.400                 0.0         False
7        2500.50        400.100     649.9      2500.50  1000.000      400.100        0.1  2100.300         2000.30       4.0             2500.400                 0.0         False
8        2800.40        600.100     649.9      2800.40  2400.200      600.100        0.1  2200.200         2200.20       5.0             2500.400                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/10, 
, buffer=22003/10.[0m
[08/30 16:53:48]  --------------------------------------------------------------------------------
[08/30 16:53:48]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 16:53:48]  Generator returned sat in 0.035964 secs.
[08/30 16:53:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:53:49]  Improved gap from 0.0 to 100
[08/30 16:53:49]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/30 16:53:49]  Verifer returned sat in 0.524828 secs.
[08/30 16:53:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     250.465332     250.440430  199.509766   250.465332    0.025146   250.440430   0.000000    0.024902       -0.024902       5.0            250.44043                -1.0            -1
1     350.490234     250.490234  199.509766   350.490234  100.049805   250.490234   0.000000  100.000000        0.000000       1.0            250.44043                 0.0         False
2     450.465088     350.490234  199.509766   450.465088  199.974854   350.490234   0.000000   99.974854       -0.025146       2.0            250.44043                 0.0         False
3     750.565430     450.490234  199.509766   750.565430  400.075195   450.490234   0.000000  300.075195      200.075195       1.0            250.44043                 0.0         False
4     850.565430     650.390137  199.509766   850.565430  400.075195   650.390137   0.000000  200.175293      200.075195       2.0            250.44043                 0.0         False
5    1050.465332     750.440186  199.509766  1050.465332  400.075195   750.440186   0.000000  300.025146      299.975098       3.0            250.44043                 0.0         False
6    1150.515381     750.490234  199.509766  1150.515381  400.075195   750.490234   0.000000  400.025146      300.025146       4.0            250.44043                 0.0         False
7    1150.565430     950.490234  199.509766  1150.565430  400.075195   950.490234   0.000000  200.075195      200.075195       3.0            250.44043                 0.0         False
8    1350.565430    1050.489990  199.509766  1350.565430  400.075195  1050.489990   0.025146  300.050293      300.050049       3.0            250.44043                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=103/4096, 
, buffer=1229005/4096.[0m
[08/30 16:53:50]  --------------------------------------------------------------------------------
[08/30 16:53:50]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 16:53:50]  Generator returned sat in 0.040906 secs.
[08/30 16:53:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:53:52]  Improved gap from 0.0 to 23.4375
[08/30 16:53:53]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/30 16:53:53]  Verifer returned sat in 2.795594 secs.
[08/30 16:53:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     453.110352     429.673096   -3.210205   453.110352   0.100098   429.673096        0.0  23.437256       -0.099854       5.0           429.673096                -1.0            -1
1     476.547852     453.210205   73.352295   476.547852  46.874756   453.210205        0.0  23.337646       -0.099854       1.0           429.673096                 1.0         False
2     499.985352     476.647705  149.914795   499.985352  46.775146   476.647705        0.0  23.337646       -0.099854       1.0           499.985352                 0.0         False
3     500.185303     500.085205  226.477295   500.185303  23.537598   500.085205        0.0   0.100098      -23.337402       1.0           500.185303                 0.0         False
4     523.622803     523.522705  303.039795   523.622803  23.537598   523.522705        0.0   0.100098      -23.337402       1.0           500.185303                 0.0         False
5     547.060303     546.960205  379.602295   547.060303  23.537598   546.960205        0.0   0.100098      -23.337402       1.0           500.185303                 0.0         False
6     570.497803     570.397949  456.164551   570.497803  23.537598   570.397949        0.0   0.099854      -23.337646       1.0           500.185303                 0.0         False
7     593.935547     593.835449  532.727051   593.935547  23.537598   593.835449        0.0   0.100098      -23.337402       1.0           500.185303                 0.0         False
8     617.373047     617.272949  532.727051   617.373047  23.537598   617.272949        0.0   0.100098      -99.899902       1.0           500.185303                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/5.[0m
[08/30 16:53:53]  --------------------------------------------------------------------------------
[08/30 16:53:53]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 16:53:53]  Generator returned sat in 0.110274 secs.
[08/30 16:53:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:53:53]  Improved gap from 0.0 to 100
[08/30 16:53:54]  Improved number of small numbers from 60 to 102 out of a max of 114
[08/30 16:53:54]  Verifer returned sat in 0.929177 secs.
[08/30 16:53:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     753.214111     353.213867  96.785889   753.214111    0.100098   353.213867        0.0  400.000244      400.000244       3.0           353.213867                -1.0            -1
1     753.214111     453.213867  96.785889   753.214111  299.999756   453.213867        0.0  300.000244      300.000244       3.0           353.213867                 0.0         False
2     753.214111     453.213955  96.785889   753.214111  299.999756   453.213955        0.0  300.000156      200.000244       4.0           353.213867                 0.0         False
3     753.214111     653.213867  96.785889   753.214111  299.999756   653.213867        0.0  100.000244      100.000244       5.0           353.213867                 0.0         False
4     753.214111     653.213867  96.785889   753.214111    0.010000   653.213867        0.0  100.000244        0.000244       5.0           753.214111                 0.0         False
5     753.214111     753.213955  96.785889   753.214111    0.010000   753.213955        0.0    0.000156      -99.999756       6.0           753.214111                 0.0         False
6    1353.218955     853.214111  96.785889  1353.218955  600.005000   853.214111        0.0  500.004844      400.005088       1.0           753.214111                 1.0         False
7    1353.218955    1053.213867  96.785889  1353.218955    0.010000  1053.213867        0.0  300.005088      300.005088       2.0          1353.218955                 0.0         False
8    1353.218955    1053.214111  96.785889  1353.218955    0.010000  1053.214111        0.0  300.004844      200.005088       3.0          1353.218955                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1638421/4096.[0m
[08/30 16:53:55]  --------------------------------------------------------------------------------
[08/30 16:53:55]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 16:53:55]  Generator returned sat in 0.364804 secs.
[08/30 16:53:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:53:56]  Improved number of small numbers from 84 to 86 out of a max of 113
[08/30 16:53:56]  Verifer returned sat in 0.887520 secs.
[08/30 16:53:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     753.188965     253.139111  196.7854   753.188965     0.025146   253.139111     0.0000  500.049854      499.974854       3.0           253.139111                -1.0            -1
1    1053.214111     353.214111  196.7854  1053.214111   800.075000   353.214111     0.0000  700.000000      700.000000       3.0           253.139111                 1.0         False
2    1153.264111     353.239111  196.7854  1153.264111   800.050000   353.239111     0.0250  800.000000      700.025000       4.0          1153.239111                 1.0          True
3    1153.264111     453.214111  196.7854  1153.264111    49.912500   453.214111     0.0250  700.025000      600.025000       5.0          1153.239111                 1.0         False
4    1153.264111     653.214111  196.7854  1153.264111   350.025000   653.214111     0.0250  500.025000      500.025000       6.0          1153.239111                 1.0         False
5    1453.264111     653.214111  196.7854  1453.264111   800.025000   653.214111     0.0250  800.025000      700.025000       6.0          1153.239111                 1.0         False
6    1903.226611     753.214111  196.7854  1903.226611  1249.987500   753.214111   349.9875  800.025000      700.025000       6.0          1153.239111                 1.0         False
7    1903.226611     953.214111  196.7854  1903.226611   150.000000   953.214111   349.9875  600.025000      600.025000       7.0          1553.239111                 1.0         False
8    1903.226611     953.214111  196.7854  1903.226611   600.000000   953.214111   349.9875  600.025000      500.025000       7.0          1553.239111                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=27997/80, 
, buffer=28001/40.[0m
[08/30 16:53:57]  --------------------------------------------------------------------------------
[08/30 16:53:57]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 16:53:57]  Generator returned sat in 0.131393 secs.
[08/30 16:53:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:53:58]  Improved gap from 99.86666666666666 to 100
[08/30 16:53:58]  Improved number of small numbers from 76 to 81 out of a max of 114
[08/30 16:53:58]  Verifer returned sat in 1.216925 secs.
[08/30 16:53:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     453.164062     253.047201  196.7854   453.164062   200.116455   253.047201     0.000000  200.116862      200.000195       2.0           253.047201                -1.0            -1
1     453.164062     286.530534  196.7854   453.164062   200.066667   286.530534     0.000000  166.633529      100.000195       2.0           453.164062                 0.0         False
2     486.547201     453.163867  196.7854   486.547201   200.016667   453.163867     0.000000   33.383333       33.383333       3.0           486.547201                 0.0         False
3     486.647201     486.597201  196.7854   486.647201    33.483333   486.597201     0.000000    0.050000      -66.516667       1.0           486.647201                 1.0         False
4    1003.922201     553.163867  196.7854  1003.922201   517.325000   553.163867    50.858333  399.900000      299.900000       1.0           486.647201                 0.0         False
5    1003.972201     653.163867  196.7854  1003.972201   399.950000   653.163867    50.858333  299.950000      199.950000       2.0           953.113867                 0.0         False
6    1703.947201     753.163867  196.7854  1703.947201   999.925000   753.163867   550.883333  399.900000      299.900000       3.0           953.113867                 0.0         False
7    1703.947201     953.163867  196.7854  1703.947201   399.850000   953.163867   550.883333  199.900000      199.900000       2.0          1153.063867                 1.0         False
8    2903.822201     953.163867  196.7854  2903.822201  1399.775000   953.163867  1550.758333  399.900000      299.900000       2.0          1153.063867                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=14999/10, 
, buffer=2999/10.[0m
[08/30 16:53:59]  --------------------------------------------------------------------------------
[08/30 16:53:59]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 16:54:00]  Generator returned sat in 0.722121 secs.
[08/30 16:54:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:00]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/30 16:54:00]  Verifer returned sat in 0.229277 secs.
[08/30 16:54:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     453.164062    -246.835938  196.7854   453.164062  600.0050  -246.835938        0.0  700.0000           700.0       4.0          -246.835938                -1.0            -1
1     453.164062    -146.835938  196.7854   453.164062  600.0025  -146.835938        0.0  600.0000           600.0       4.0           453.164062                 0.0         False
2     453.164062     -46.835938  196.7854   453.164062  600.0000   -46.835938        0.0  500.0000           500.0       5.0           453.164062                 0.0         False
3     453.164062      53.164062  196.7854   453.164062    0.0125    53.164062        0.0  400.0000           400.0       6.0           453.164062                 0.0         False
4     453.164062      53.164062  196.7854   453.164062    0.0100    53.164062        0.0  400.0000           300.0       6.0           453.164062                 0.0         False
5     453.164062     253.164062  196.7854   453.164062    0.0100   253.164062        0.0  200.0000           200.0       7.0           453.164062                 0.0         False
6     453.164062     353.164062  196.7854   453.164062    0.0100   353.164062        0.0  100.0000           100.0       8.0           453.164062                 0.0         False
7     453.164062     453.164062  196.7854   453.164062    0.0100   453.164062        0.0    0.0000             0.0       9.0           453.164062                 0.0         False
8    1253.164062     453.166562  196.7854  1253.164062  800.0000   453.166562        0.0  799.9975           700.0       1.0           453.164062                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=280001/400.[0m
[08/30 16:54:01]  --------------------------------------------------------------------------------
[08/30 16:54:01]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 16:54:01]  Generator returned sat in 0.025633 secs.
[08/30 16:54:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:01]  Improved gap from 0.00125 to 100
[08/30 16:54:02]  Improved number of small numbers from 84 to 114 out of a max of 114
[08/30 16:54:02]  Verifer returned sat in 0.555407 secs.
[08/30 16:54:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     -47.036377    -146.986084  196.785156   -47.036377  199.899902  -146.986084    0.000000   99.949707       99.949707       2.0          -146.986084                -1.0            -1
1      52.913818    -146.936035  196.785156    52.913818  199.899902  -146.936035    0.000000  199.849854       99.899902       2.0          -146.986084                 0.0         False
2      52.913818     -46.986084  196.785156    52.913818    0.050049   -46.986084    0.000000   99.899902       -0.100098       2.0            52.913818                 0.0         False
3     253.013916      53.013916  196.785156   253.013916  300.000000    53.013916    0.050049  199.949951       99.949951       1.0            52.913818                 0.0         False
4     353.063965     253.013916  196.785156   353.063965  300.000000   253.013916    0.100098   99.949951       99.949951       1.0            52.913818                 0.0         False
5     553.114014     353.013672  196.785156   553.114014  300.000000   353.013672  100.150146   99.950195       99.949951       1.0            52.913818                 0.0         False
6     753.163818     452.963867  196.785156   753.163818  300.000000   452.963867  200.199951  100.000000       99.949951       2.0            52.913818                 0.0         False
7     953.163818     553.013672  196.785156   953.163818  300.000000   553.013672  300.199951   99.950195       99.949951       1.0            52.913818                 0.0         False
8    1153.213623     653.013672  196.785156  1153.213623  300.000000   653.013672  400.249756   99.950195       99.949951       1.0            52.913818                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=1639013/4096, 
, buffer=409395/4096.[0m
[08/30 16:54:02]  --------------------------------------------------------------------------------
[08/30 16:54:02]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 16:54:03]  Generator returned sat in 0.917506 secs.
[08/30 16:54:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:04]  Improved gap from 99.990625 to 100
[08/30 16:54:04]  Improved number of small numbers from 74 to 78 out of a max of 114
[08/30 16:54:04]  Verifer returned sat in 0.776640 secs.
[08/30 16:54:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -146.983154    -146.986084  196.785156  -146.983154  200.000977  -146.986084      0.000    0.002930         0.00193       2.0          -146.986084                -1.0            -1
1      53.014916    -146.985084  196.785156    53.014916  200.001000  -146.985084     99.998  100.002000         0.00200       2.0          -146.986084                 0.0         False
2     153.012916     -46.981084  196.785156   153.012916  200.000000   -46.981084     99.998   99.996000         0.00000       1.0            53.014916                 0.0         False
3     253.015916      53.015916  196.785156   253.015916  199.999000    53.015916     99.999  100.001000         0.00200       1.0           153.016916                 0.0         False
4     253.015916     153.014916  196.785156   253.015916    0.010000   153.014916     99.999    0.002000       -99.99800       2.0           153.016916                 0.0         False
5     853.013916     353.008916  196.785156   853.013916  600.000000   353.008916    499.997    0.008000         0.00200       1.0           153.016916                 0.0         False
6     853.015916     353.017916  196.785156   853.015916    0.010000   353.017916    499.997    0.001000       -99.99600       1.0           353.018916                 0.0         False
7    1453.018916     553.014916  196.785156  1453.018916  600.004000   553.014916    900.002    0.002000         0.00200       1.0           353.018916                 0.0         False
8    1453.026916     553.022705  196.785156  1453.026916    0.010000   553.022705    900.002    0.002211       -99.99000       1.0           553.024916                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=800003/1000, 
, buffer=1/500.[0m
[08/30 16:54:05]  --------------------------------------------------------------------------------
[08/30 16:54:05]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 16:54:05]  Generator returned sat in 0.048086 secs.
[08/30 16:54:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:06]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/30 16:54:06]  Verifer returned sat in 0.337416 secs.
[08/30 16:54:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -197.083984    -897.083984  846.884277  -197.083984    0.050049  -897.083984   0.000000  700.000000         600.000       7.0          -897.083984                -1.0            -1
1      52.966064    -797.059082  846.884277    52.966064  950.050049  -797.059082   0.050049  849.975098         750.000       7.0          -897.083984                 0.0         False
2      53.091064    -597.083984  846.884277    53.091064  850.100098  -597.083984   0.050049  650.125000         650.125       8.0            53.041016                 0.0         False
3     253.015869    -597.083984  846.884277   253.015869  850.049805  -597.083984   0.099854  850.000000         750.000       8.0           252.916016                 1.0         False
4     253.015869    -397.083984  846.884277   253.015869  150.000000  -397.083984   0.099854  650.000000         650.000       8.0           252.916016                 1.0         False
5     477.966064    -397.083984  846.884277   477.966064  874.950195  -397.083984  25.050049  850.000000         750.000       8.0           252.916016                 1.0         False
6     477.966064    -197.083984  846.884277   477.966064  100.000000  -197.083984  25.050049  650.000000         650.000       8.0           452.916016                 1.0         False
7     677.966064    -197.083984  846.884277   677.966064  850.000000  -197.083984  25.050049  850.000000         750.000       8.0           452.916016                 1.0         False
8     677.966064       2.916016  846.884277   677.966064  825.000000     2.916016  25.050049  650.000000         650.000       8.0           652.916016                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=25549/1024, 
, buffer=750.[0m
[08/30 16:54:06]  --------------------------------------------------------------------------------
[08/30 16:54:06]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 16:54:07]  Generator returned sat in 0.982231 secs.
[08/30 16:54:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:08]  Improved gap from 0.13333333333333333 to 100
[08/30 16:54:09]  Improved number of small numbers from 68 to 89 out of a max of 114
[08/30 16:54:09]  Verifer returned sat in 1.312403 secs.
[08/30 16:54:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t      queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     873.335205     673.334961  846.884277   873.335205     0.050000   673.334961     0.000000   200.000244      200.000189       3.0           673.334961                -1.0            -1
1     873.335205     773.335016  846.884277   873.335205     0.050049   773.335016     0.000000   100.000189      100.000189       4.0           673.334961                 0.0         False
2     873.335205     806.585016  846.884277   873.335205    66.750000   806.585016     0.000000    66.750189        0.000189       5.0           673.334961                 0.0         False
3     873.335205     873.335016  846.884277   873.335205    66.700000   873.335016     0.000000     0.000189      -99.999811       6.0           873.335205                 0.0         False
4     973.385016     973.335016  846.884277   973.385016   100.050000   973.335016     0.000000     0.050000      -99.950000       1.0           873.335205                 1.0         False
5    1423.410016    1173.335016  846.884277  1423.410016   450.075000  1173.335016     0.000000   250.075000      250.075000       1.0           873.335205                 0.0         False
6    2398.572516    1273.335016  846.884277  2398.572516  1225.237500  1273.335016     0.000000  1125.237500     1125.237500       2.0           873.335205                 0.0         False
7    3711.191266    1342.335016  846.884277  3711.191266  2437.856250  1342.335016     0.000000  2368.856250     2337.856250       3.0           873.335205                 0.0         False
8    5552.619391    1473.334961  846.884277  5552.619391  4210.284375  1473.334961  1741.378125  2337.906305     2337.906250       3.0           873.335205                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=557241/320, 
, buffer=74813/32.[0m
[08/30 16:54:09]  --------------------------------------------------------------------------------
[08/30 16:54:09]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 16:54:10]  Generator returned sat in 0.429697 secs.
[08/30 16:54:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:11]  Improved number of small numbers from 58 to 64 out of a max of 113
[08/30 16:54:11]  Verifer returned sat in 0.852947 secs.
[08/30 16:54:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     773.332275     473.330016  1046.886777   773.332275   400.002441   473.330016     0.00000  300.002260       299.99976       3.0           473.330016                -1.0            -1
1     873.332516     473.332516  1046.886777   873.332516   400.002500   473.332516     0.00000  400.000000       300.00000       3.0           473.330016                 0.0         False
2     973.335016     673.332516  1046.886777   973.335016   500.002500   673.332516     0.00250  300.000000       300.00000       4.0           473.330016                 0.0         False
3    1073.335016     723.341266  1046.886777  1073.335016   400.000000   723.341266     0.00250  349.991250       300.00000       5.0          1073.332516                 0.0         False
4    1823.366266     873.332516  1046.886777  1823.366266  1100.022500   873.332516   650.03375  300.000000       300.00000       4.0          1073.332516                 1.0         False
5    1923.366266     873.332520  1046.886777  1923.366266   400.000000   873.332520   650.03375  399.999996       300.00000       4.0          1273.332516                 0.0         False
6    1923.366266     973.332516  1046.886777  1923.366266     0.010000   973.332516   650.03375  300.000000       200.00000       5.0          1273.332516                 0.0         False
7    2123.363766    1073.332516  1046.886777  2123.363766   499.997500  1073.332516   650.03375  399.997500       299.99750       5.0          1273.332516                 1.0         False
8    2873.362516    1173.334961  1046.886777  2873.362516  1149.996250  1173.334961  1300.03000  399.997555       300.00000       4.0          1273.332516                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=519997/800, 
, buffer=300.[0m
[08/30 16:54:12]  --------------------------------------------------------------------------------
[08/30 16:54:12]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 16:54:12]  Generator returned sat in 0.430782 secs.
[08/30 16:54:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:14]  Improved number of small numbers from 58 to 76 out of a max of 113
[08/30 16:54:14]  Verifer returned sat in 1.319343 secs.
[08/30 16:54:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2158.066406    1781.066162  1046.886777  2158.066406     0.100000  1781.066162       0.00   377.000244      300.000141       3.0          1781.066162                -1.0            -1
1    2158.066406    1858.066266  1046.886777  2158.066406   376.900146  1858.066266       0.00   300.000141      200.000141       3.0          1781.066162                 0.0         False
2    2657.966266    1958.066266  1046.886777  2657.966266   799.900000  1958.066266       0.00   699.900000      599.900000       4.0          1781.066162                 0.0         False
3    3123.566266    2158.066162  1046.886777  3123.566266  1165.500000  2158.066162       0.10   965.400104      965.400000       5.0          1781.066162                 0.0         False
4    3123.566266    2158.066266  1046.886777  3123.566266   377.000000  2158.066266       0.10   965.400000      865.400000       6.0          3123.466266                 1.0          True
5    3323.666266    2268.266266  1046.886777  3323.666266  1165.500000  2268.266266       0.20  1055.200000      965.400000       4.0          3123.466266                 1.0         False
6    3323.666266    2458.066162  1046.886777  3323.666266   310.200000  2458.066162       0.20   865.400104      865.400000       5.0          3323.466266                 0.0         False
7    3523.566162    2458.066266  1046.886777  3523.566162  1065.300000  2458.066266       0.20  1065.299896      965.299896       6.0          3323.466266                 1.0         False
8    4656.216266    2658.066162  1046.886777  4656.216266  2197.950000  2658.066162    1032.75   965.400104      965.400000       6.0          3323.466266                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=20653/20, 
, buffer=4827/5.[0m
[08/30 16:54:14]  --------------------------------------------------------------------------------
[08/30 16:54:14]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 16:54:16]  Generator returned sat in 1.251964 secs.
[08/30 16:54:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:16]  Improved gap from 0.0005555555555555556 to 100
[08/30 16:54:17]  Improved number of small numbers from 59 to 63 out of a max of 114
[08/30 16:54:17]  Verifer returned sat in 1.369880 secs.
[08/30 16:54:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1057.846191     957.896266  1046.886777  1057.846191    0.050049   957.896266      0.000   99.949926       99.949926       2.0           957.896266                -1.0            -1
1    1157.896266    1057.846266  1046.886777  1157.896266  200.000000  1057.846266      0.050  100.000000       99.950000       1.0           957.896266                 0.0         False
2    1157.896266    1057.896266  1046.886777  1157.896266   99.950195  1057.896266      0.050   99.950000       -0.050000       2.0          1157.846266                 0.0         False
3    1157.996266    1157.896266  1046.886777  1157.996266  100.050000  1157.896266      0.050    0.050000      -99.950000       1.0          1157.846266                 0.0         False
4    1608.021266    1324.479599  1046.886777  1608.021266  450.075000  1324.479599    150.175  133.366667       99.950000       1.0          1157.846266                 0.0         False
5    1608.021266    1357.896266  1046.886777  1608.021266  133.316667  1357.896266    150.175   99.950000       -0.050000       2.0          1457.846266                 0.0         False
6    2158.046266    1491.262932  1046.886777  2158.046266  649.975000  1491.262932    500.200  166.583333       99.950000       1.0          1457.846266                 0.0         False
7    2158.146266    1657.896266  1046.886777  2158.146266  166.683333  1657.896266    500.200    0.050000        0.050000       1.0          1657.946266                 0.0         False
8    2908.246266    1657.996338  1046.886777  2908.246266  750.150000  1657.996338   1050.400  199.849928       99.950000       1.0          1657.946266                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=36009/40, 
, buffer=1999/20.[0m
[08/30 16:54:18]  --------------------------------------------------------------------------------
[08/30 16:54:18]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 16:54:19]  Generator returned sat in 0.581403 secs.
[08/30 16:54:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:19]  Improved gap from 0.0008333333333333334 to 100
[08/30 16:54:20]  Improved number of small numbers from 59 to 76 out of a max of 114
[08/30 16:54:20]  Verifer returned sat in 1.104588 secs.
[08/30 16:54:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2158.046266    1558.046143  446.736777  2158.046266    0.100000  1558.046143        0.0  600.000123          600.00       9.0          1558.046143                -1.0            -1
1    2158.046266    1558.046387  446.736777  2158.046266  599.899902  1558.046387        0.0  599.999879          500.00       7.0          1558.046143                 1.0         False
2    2158.046266    1758.046143  446.736777  2158.046266  599.900146  1758.046143        0.0  400.000123          400.00       8.0          1558.046143                 0.0         False
3    2158.046266    1758.046387  446.736777  2158.046266   18.753125  1758.046387        0.0  399.999879          300.00       8.0          2158.046266                 1.0          True
4    2158.046266    1858.046387  446.736777  2158.046266   37.506250  1858.046387        0.0  299.999879          200.00       9.0          2158.046266                 1.0         False
5    2158.046266    2007.921143  446.736777  2158.046266   75.012500  2007.921143        0.0  150.125123          100.00       9.0          2158.046266                 1.0         False
6    2158.046266    2058.046266  446.736777  2158.046266  150.025000  2058.046266        0.0  100.000000            0.00       9.0          2158.046266                 1.0         False
7    2358.096266    2158.046266  446.736777  2358.096266  300.050000  2158.046266        0.0  200.050000          100.05       9.0          2158.046266                 1.0         False
8    2758.146266    2358.046143  446.736777  2758.146266  600.100000  2358.046143        0.0  400.100123          400.10       2.0          2158.046266                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=600.[0m
[08/30 16:54:21]  --------------------------------------------------------------------------------
[08/30 16:54:21]  Iteration: 16 (0 solution, 15 counterexamples)
[08/30 16:54:22]  Generator returned sat in 0.564219 secs.
[08/30 16:54:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:22]  Improved gap from 0.0 to 100
[08/30 16:54:24]  Improved number of small numbers from 59 to 66 out of a max of 114
[08/30 16:54:24]  Verifer returned sat in 1.847089 secs.
[08/30 16:54:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1511.258301    1411.058488  493.724555  1511.258301  100.199951  1411.058488    0.000000  100.199813        0.199813       2.0          1411.058488                -1.0            -1
1    1511.258301    1511.058488  493.724555  1511.258301  100.133333  1511.058488    0.000000    0.199813      -99.800187       2.0          1511.258301                 0.0         False
2    1611.125155    1611.058488  493.724555  1611.125155  100.066667  1611.058488    0.000000    0.066667      -99.933333       1.0          1611.125155                 0.0         False
3    1811.325155    1764.080710  493.724555  1811.325155  200.266667  1764.080710    0.066667   47.177778        0.200000       1.0          1611.125155                 0.0         False
4    1940.658488    1858.036266  493.724555  1940.658488  176.511111  1858.036266   29.400000   53.222222        0.200000       1.0          1911.258488                 0.0         False
5    2060.925155    1957.902932  493.724555  2060.925155  173.488889  1957.902932   49.666667   53.355556        0.200000       1.0          2011.258488                 0.0         False
6    2180.991821    2110.791821  493.724555  2180.991821  173.422222  2110.791821   69.733333    0.466667        0.200000       1.0          2111.258488                 0.0         False
7    2353.880710    2211.058488  493.724555  2353.880710  173.355556  2211.058488  142.622222    0.200000        0.200000       1.0          2211.258488                 0.0         False
8    2530.191821    2211.325195  493.724555  2530.191821  176.511111  2211.325195  218.933333   99.933293        0.200000       1.0          2211.258488                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=2843/15, 
, buffer=1/5.[0m
[08/30 16:54:24]  --------------------------------------------------------------------------------
[08/30 16:54:24]  Iteration: 17 (0 solution, 16 counterexamples)
[08/30 16:54:26]  Generator returned sat in 1.055231 secs.
[08/30 16:54:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:26]  Improved gap from 0.01375 to 100
[08/30 16:54:27]  Improved number of small numbers from 59 to 70 out of a max of 114
[08/30 16:54:27]  Verifer returned sat in 1.004402 secs.
[08/30 16:54:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1511.061035    1511.058350  493.724555  1511.061035    0.002686  1511.058350    0.000000    0.002686        0.002547       1.0          1511.058350                -1.0            -1
1    1511.061035    1511.058488  493.724555  1511.061035    0.001465  1511.058488    0.000000    0.002547      -99.997453       2.0          1511.061035                 0.0         False
2    1811.057238    1711.058488  493.724555  1811.057238  299.998750  1711.058488    0.000000   99.998750       99.998750       1.0          1511.061035                 1.0         False
3    1911.069738    1811.058488  493.724555  1911.069738  200.011250  1811.058488    0.001250  100.010000      100.010000       1.0          1911.068488                 0.0         False
4    1911.069738    1811.058488  493.724555  1911.069738    0.010000  1811.058488    0.001250  100.010000        0.010000       1.0          1911.068488                 0.0         False
5    2261.069738    2011.058488  493.724555  2261.069738  450.010000  2011.058488  150.001250  100.010000      100.010000       1.0          1911.068488                 0.0         False
6    2261.069738    2011.058488  493.724555  2261.069738    0.010000  2011.058488  150.001250  100.010000        0.010000       1.0          2111.068488                 0.0         False
7    2461.069738    2111.069738  493.724555  2461.069738  300.010000  2111.069738  150.001250  199.998750      100.010000       1.0          2111.068488                 0.0         False
8    3011.097863    2311.058350  493.724555  3011.097863  750.026875  2311.058350  600.029375  100.010138      100.010000       2.0          2111.068488                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=192009/320, 
, buffer=10001/100.[0m
[08/30 16:54:28]  --------------------------------------------------------------------------------
[08/30 16:54:28]  Iteration: 18 (0 solution, 17 counterexamples)
[08/30 16:54:28]  Generator returned sat in 0.296925 secs.
[08/30 16:54:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:29]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/30 16:54:29]  Verifer returned sat in 0.487685 secs.
[08/30 16:54:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1710.969727    1410.569824  593.813232  1710.969727    0.100000  1410.569824   0.000000  300.399902      299.999756       7.0          1410.569824                -1.0            -1
1    1810.969727    1510.969727  593.813232  1810.969727  400.399902  1510.969727   0.000000  300.000000      299.999756       7.0          1410.569824                 1.0         False
2    1911.269775    1610.869873  593.813232  1911.269775  400.300049  1610.869873   0.099854  300.300049      300.199951       8.0          1911.169922                 1.0          True
3    2011.169678    1710.969727  593.813232  2011.169678  400.199951  1710.969727   0.099854  300.100098      300.099854       9.0          2011.069824                 1.0         False
4    2111.269531    1810.969727  593.813232  2111.269531  400.199951  1810.969727   0.099854  300.199951      300.199707       4.0          2011.069824                 1.0         False
5    2211.269531    1810.969971  593.813232  2211.269531  400.199951  1810.969971   0.099854  400.199707      300.199707       4.0          2011.069824                 1.0         False
6    2211.269775    2010.869873  593.813232  2211.269775  400.199951  2010.869873   0.099854  200.300049      200.199951       4.0          2011.069824                 1.0         False
7    2411.169678    2110.969727  593.813232  2411.169678  400.199951  2110.969727   0.099854  300.100098      300.099854       4.0          2011.069824                 1.0         False
8    2511.269531    2111.069580  593.813232  2511.269531  400.199951  2111.069580   0.099854  400.100098      300.199707       5.0          2011.069824                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1229619/4096.[0m
[08/30 16:54:30]  --------------------------------------------------------------------------------
[08/30 16:54:30]  Iteration: 19 (0 solution, 18 counterexamples)
[08/30 16:54:32]  Generator returned sat in 1.835031 secs.
[08/30 16:54:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:32]  Improved number of small numbers from 49 to 113 out of a max of 113
[08/30 16:54:32]  Verifer returned sat in 0.382381 secs.
[08/30 16:54:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2010.969971    1310.969971  593.812988  2010.969971    0.100098  1310.969971   0.000000  700.000000      600.000000       7.0          1310.969971                -1.0            -1
1    2011.169678    1510.969971  593.812988  2011.169678  700.199707  1510.969971   0.000000  500.199707      500.199707       7.0          1310.969971                 0.0         False
2    2211.069824    1610.670166  593.812988  2211.069824  700.099854  1610.670166   0.099854  600.299805      600.000000       8.0          2210.969971                 0.0         False
3    2211.169678    1610.969971  593.812988  2211.169678  600.399658  1610.969971   0.099854  600.099854      500.099854       8.0          2211.069824                 1.0         False
4    2211.469482    1810.870117  593.812988  2211.469482  600.399658  1810.870117   0.099854  400.499512      400.399658       9.0          2211.069824                 1.0         False
5    2411.369629    1810.969971  593.812988  2411.369629  600.399658  1810.969971   0.099854  600.299805      500.299805       9.0          2211.069824                 1.0         False
6    2411.469482    1910.969971  593.812988  2411.469482  600.399658  1910.969971   0.099854  500.399658      400.399658       9.0          2211.069824                 1.0         False
7    2511.469482    2010.969971  593.812988  2511.469482  600.399658  2010.969971   0.099854  500.399658      400.399658       9.0          2211.069824                 1.0         False
8    2611.469482    2210.869873  593.812988  2611.469482  600.399658  2210.869873   0.099854  400.499756      400.399658       7.0          2211.069824                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=600.[0m
[08/30 16:54:33]  --------------------------------------------------------------------------------
[08/30 16:54:33]  Iteration: 20 (0 solution, 19 counterexamples)
[08/30 16:54:35]  Generator returned sat in 1.220665 secs.
[08/30 16:54:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:35]  Improved gap from 0.0 to 100
[08/30 16:54:36]  Improved number of small numbers from 93 to 93 out of a max of 114
[08/30 16:54:36]  Verifer returned sat in 1.257792 secs.
[08/30 16:54:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2010.969971    1210.969971  693.812988  2010.969971     0.100000  1210.969971    0.000000  800.000000         700.000       7.0          1210.969971                -1.0            -1
1    2111.069971    1410.969971  693.812988  2111.069971   900.100000  1410.969971    0.100000  700.000000         700.000       7.0          1210.969971                 0.0         False
2    2111.169971    1510.969971  693.812988  2111.169971   700.100000  1510.969971    0.100000  600.100000         600.100       8.0          2111.069971                 0.0         False
3    2111.169971    1610.969971  693.812988  2111.169971   200.133333  1610.969971    0.100000  500.100000         500.100       9.0          2111.069971                 0.0         False
4    2111.269971    1644.036637  693.812988  2111.269971   500.200000  1644.036637    0.100000  467.133333         400.200       9.0          2111.069971                 1.0         False
5    2510.969971    1710.969971  693.812988  2510.969971   866.833333  1710.969971    0.100000  799.900000         699.900       9.0          2111.069971                 1.0         False
6    3111.319971    1910.969971  693.812988  3111.319971  1400.250000  1910.969971  500.350000  700.000000         700.000       9.0          2111.069971                 1.0         False
7    3111.444971    2010.969971  693.812988  3111.444971   700.125000  2010.969971  500.350000  600.125000         600.125       9.0          2611.094971                 1.0         False
8    3744.974137    2010.969971  693.812988  3744.974137  1233.654167  2010.969971  934.004167  800.000000         700.000       9.0          2611.094971                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=224137/240, 
, buffer=700.[0m
[08/30 16:54:37]  --------------------------------------------------------------------------------
[08/30 16:54:37]  Iteration: 21 (0 solution, 20 counterexamples)
[08/30 16:54:39]  Generator returned sat in 1.342466 secs.
[08/30 16:54:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:39]  Improved gap from 0.0016666666666666668 to 100
[08/30 16:54:40]  Improved number of small numbers from 68 to 89 out of a max of 114
[08/30 16:54:40]  Verifer returned sat in 0.988742 secs.
[08/30 16:54:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1459.962646    1309.958984  693.812744  1459.962646    0.001709  1309.958984   0.000000  150.003662      150.003509       7.0          1309.958984                -1.0            -1
1    1459.962646    1309.959229  693.812744  1459.962646    0.000977  1309.959229   0.000000  150.003418       50.003509       7.0          1459.962646                 1.0         False
2    1709.949219    1459.963304  693.812744  1709.949219  399.989990  1459.963304   0.000000  249.985915      199.990081       1.0          1459.962646                 1.0         False
3    1709.958304    1609.958984  693.812744  1709.958304  249.995000  1609.958984   0.000000   99.999320       99.999167       2.0          1709.958304                 0.0         False
4    1709.958304    1709.949971  693.812744  1709.958304    0.010000  1709.949971   0.000000    0.008333       -0.000833       2.0          1709.958304                 1.0         False
5    1709.959971    1709.959137  693.812744  1709.959971    0.010000  1709.959137   0.000000    0.000833      -99.999167       1.0          1709.958304                 1.0         False
6    2209.960804    1809.959229  693.812744  2209.960804  500.001667  1809.959229   0.000833  400.000742      300.000833       1.0          1709.958304                 0.0         False
7    2209.960804    1909.959229  693.812744  2209.960804  250.000833  1909.959229   0.000833  300.000742      200.000833       2.0          2209.959971                 0.0         False
8    2209.960804    2009.959229  693.812744  2209.960804    0.010000  2009.959229   0.000833  200.000742      100.000833       3.0          2209.959971                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/1200, 
, buffer=360001/1200.[0m
[08/30 16:54:40]  --------------------------------------------------------------------------------
[08/30 16:54:40]  Iteration: 22 (0 solution, 21 counterexamples)
[08/30 16:54:42]  Generator returned sat in 0.736828 secs.
[08/30 16:54:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:42]  Improved gap from 0.0 to 100
[08/30 16:54:43]  Improved number of small numbers from 68 to 87 out of a max of 114
[08/30 16:54:43]  Verifer returned sat in 1.001006 secs.
[08/30 16:54:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2021.188304    1621.138428  693.812744  2021.188304    0.050000  1621.138428       0.00  400.049876      400.000000       5.0          1621.138428                -1.0            -1
1    2121.138184    1621.188304  693.812744  2121.138184  499.999756  1621.188304       0.00  499.949880      399.949880       5.0          1621.138428                 0.0         False
2    2221.238304    1821.188232  693.812744  2221.238304  600.050000  1821.188232       0.05  400.000072      400.000000       6.0          1621.138428                 0.0         False
3    2221.238304    1921.188232  693.812744  2221.238304   88.866667  1921.188232       0.05  300.000072      300.000000       7.0          2221.188304                 0.0         False
4    2221.238304    2021.138428  693.812744  2221.238304  133.300000  2021.138428       0.05  200.049876      200.000000       8.0          2221.188304                 0.0         False
5    2221.238304    2021.188304  693.812744  2221.238304  199.950000  2021.188304       0.05  200.000000      100.000000       9.0          2221.188304                 0.0         False
6    2221.238304    2121.188304  693.812744  2221.238304  199.950000  2121.188304       0.05  100.000000        0.000000       5.0          2221.188304                 1.0         False
7    2421.163304    2321.188232  693.812744  2421.163304  299.925000  2321.188232       0.05   99.925072       99.925000       1.0          2221.188304                 0.0         False
8    2771.125732    2371.025635  693.812744  2771.125732  449.887500  2371.025635       0.05  400.050098      349.887428       2.0          2221.188304                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 16:54:43]  --------------------------------------------------------------------------------
[08/30 16:54:43]  Iteration: 23 (0 solution, 22 counterexamples)
[08/30 16:54:45]  Generator returned sat in 0.683115 secs.
[08/30 16:54:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:46]  Improved gap from 0.0 to 0
[08/30 16:54:46]  Improved number of small numbers from 61 to 72 out of a max of 114
[08/30 16:54:46]  Verifer returned sat in 1.561771 secs.
[08/30 16:54:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1721.188304    1621.185804   593.815430  1721.188304    0.050049  1621.185804        0.0  100.002500        0.002686       7.0          1621.185804                -1.0            -1
1    1721.188304    1721.186035   693.812744  1721.188304  100.002441  1721.186035        0.0    0.002269        0.000000       7.0          1621.185804                 0.0         False
2    1721.188304    1721.188304   793.812744  1721.188304    0.001221  1721.188304        0.0    0.000000        0.000000       8.0          1721.188304                 0.0         False
3    1721.189554    1721.188304   893.811279  1721.189554    0.001250  1721.188304        0.0    0.001250       -0.000215       8.0          1721.188304                 1.0         False
4    1821.190804    1722.203369   893.811279  1821.190804  100.002500  1722.203369        0.0   98.987435        0.001035       1.0          1721.188304                 1.0         False
5    1821.190804    1821.190804   993.810244  1821.190804    0.010000  1821.190804        0.0    0.000000        0.000000       2.0          1821.190804                 0.0         False
6    1821.200804    1821.190804  1093.800244  1821.200804    0.010000  1821.190804        0.0    0.010000        0.000000       2.0          1821.190804                 0.0         False
7    1821.200804    1821.200804  1193.800049  1821.200804    0.010000  1821.200804        0.0    0.000000       -0.000195       2.0          1821.190804                 0.0         False
8    1821.210804    1821.201904  1193.800049  1821.210804    0.010000  1821.201904        0.0    0.008900      -99.990195       1.0          1821.190804                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=11/4096.[0m
[08/30 16:54:47]  --------------------------------------------------------------------------------
[08/30 16:54:47]  Iteration: 24 (0 solution, 23 counterexamples)
[08/30 16:54:48]  Generator returned sat in 0.550562 secs.
[08/30 16:54:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:48]  Improved gap from 0.0 to 100
[08/30 16:54:49]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/30 16:54:49]  Verifer returned sat in 0.537043 secs.
[08/30 16:54:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2121.088379    1520.988525  693.812744  2121.088379    0.100000  1520.988525   0.000000  600.099854      600.000000       7.0          1520.988525                -1.0            -1
1    2221.188477    1521.088379  693.812744  2221.188477  700.199951  1521.088379   0.100098  700.000000      600.000000       7.0          1520.988525                 0.0         False
2    2221.388428    1621.088379  693.812744  2221.388428  700.199951  1621.088379   0.100098  600.199951      500.199951       8.0          1520.988525                 0.0         False
3    2321.188232    1721.088379  693.812744  2321.188232  699.999756  1721.088379   0.100098  599.999756      499.999756       9.0          2321.088135                 0.0         False
4    2421.188232    1920.988525  693.812744  2421.188232  699.999756  1920.988525   0.100098  500.099609      499.999756       9.0          2321.088135                 1.0         False
5    2621.088379    2021.088379  693.812744  2621.088379  699.999756  2021.088379   0.100098  599.899902      599.899902       9.0          2321.088135                 1.0         False
6    2721.188232    2120.988281  693.812744  2721.188232  699.999756  2120.988281   0.100098  600.099854      599.999756       9.0          2321.088135                 1.0         False
7    2821.088135    2121.088379  693.812744  2821.088135  699.999756  2121.088379   0.100098  699.899658      599.899658       9.0          2321.088135                 1.0         False
8    2821.188232    2320.988281  693.812744  2821.188232  699.999756  2320.988281   0.100098  500.099854      499.999756       6.0          2321.088135                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=600.[0m
[08/30 16:54:49]  --------------------------------------------------------------------------------
[08/30 16:54:49]  Iteration: 25 (0 solution, 24 counterexamples)
[08/30 16:54:51]  Generator returned sat in 0.447981 secs.
[08/30 16:54:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:54:54]  Improved gap from 0.0008333333333333334 to 31.25
[08/30 16:54:55]  Improved number of small numbers from 68 to 81 out of a max of 114
[08/30 16:54:55]  Verifer returned sat in 4.111443 secs.
[08/30 16:54:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2220.991025    1789.740967  693.812744  2220.991025   0.002441  1789.740967        0.0  431.250059      431.250000       3.0          1789.740967                -1.0            -1
1    2220.991025    1889.740967  693.812744  2220.991025   0.002500  1889.740967        0.0  331.250059      331.250000       3.0          1789.740967                 0.0         False
2    2220.991025    1989.740967  693.812744  2220.991025   0.002686  1989.740967        0.0  231.250059      231.250000       4.0          1789.740967                 0.0         False
3    2220.991025    2089.741025  693.812744  2220.991025   0.012451  2089.741025        0.0  131.250000      131.250000       5.0          1789.740967                 0.0         False
4    2220.991025    2189.738281  693.812744  2220.991025   0.010000  2189.738281        0.0   31.252744       31.250000       6.0          2220.991025                 0.0         False
5    2220.991025    2189.741025  762.562744  2220.991025   0.010000  2189.741025        0.0   31.250000        0.000000       7.0          2220.991025                 0.0         False
6    2220.991025    2220.991025  831.312744  2220.991025   0.010000  2220.991025        0.0    0.000000      -31.250000       8.0          2220.991025                 0.0         False
7    2286.621025    2252.241211  896.932744  2286.621025  65.630000  2252.241211        0.0   34.379814        0.000000       1.0          2220.991025                 1.0         False
8    2286.621025    2286.621025  896.932861  2286.621025   0.010000  2286.621025        0.0    0.000000      -99.999883       2.0          2286.621025                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1725/4.[0m
[08/30 16:54:55]  --------------------------------------------------------------------------------
[08/30 16:54:55]  Iteration: 26 (0 solution, 25 counterexamples)
[08/30 16:54:58]  Generator returned sat in 1.653589 secs.
[08/30 16:54:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:00]  Improved gap from 0.0 to 15.625
[08/30 16:55:00]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/30 16:55:00]  Verifer returned sat in 2.217700 secs.
[08/30 16:55:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2557.226074    2541.500977   609.637695  2557.226074    0.100098  2541.500977        0.0  15.725098       15.725098       2.0          2541.500977                -1.0            -1
1    2641.601074    2641.500977   609.637695  2641.601074  100.100098  2641.500977        0.0   0.100098        0.100098       1.0          2541.500977                 0.0         False
2    2741.601074    2732.125977   609.637695  2741.601074  100.100098  2732.125977        0.0   9.475098        0.100098       1.0          2541.500977                 0.0         False
3    2857.125977    2794.526123   609.637695  2857.125977  125.000000  2794.526123        0.0  62.599854       15.625000       1.0          2541.500977                 0.0         False
4    2857.125977    2841.500977   694.012695  2857.125977   62.500000  2841.500977        0.0  15.625000        0.000000       2.0          2857.125977                 0.0         False
5    2872.750977    2857.125977   762.562500  2872.750977   31.250000  2857.125977        0.0  15.625000      -15.825195       3.0          2872.750977                 0.0         False
6    2919.625977    2888.576416   831.512451  2919.625977   62.500000  2888.576416        0.0  31.049561       -0.000244       1.0          2872.750977                 1.0         False
7    2919.826416    2919.726074   915.787598  2919.826416   31.250000  2919.726074        0.0   0.100342      -15.524658       1.0          2919.826416                 0.0         False
8    2935.351074    2935.351074  1000.162354  2935.351074   15.625000  2935.351074        0.0   0.000000      -15.625244       1.0          2935.351074                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=32205/2048.[0m
[08/30 16:55:01]  --------------------------------------------------------------------------------
[08/30 16:55:01]  Iteration: 27 (0 solution, 26 counterexamples)
[08/30 16:55:02]  Generator returned sat in 0.792906 secs.
[08/30 16:55:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:03]  Improved gap from 0.000625 to 100
[08/30 16:55:03]  Improved number of small numbers from 59 to 71 out of a max of 114
[08/30 16:55:03]  Verifer returned sat in 1.207167 secs.
[08/30 16:55:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2507.128906    2457.126953  894.008945  2507.128906    0.000732  2457.126953    0.000000   50.001953       -0.000195       2.0          2457.126953                -1.0            -1
1    2607.128906    2507.129102  894.008945  2607.128906  150.001953  2507.129102    0.000000   99.999805       -0.000195       1.0          2457.126953                 0.0         False
2    2657.130664    2657.130039  894.008945  2657.130664  150.001563  2657.130039    0.000000    0.000625      -49.998438       1.0          2657.130664                 0.0         False
3    2807.130977    2807.129102  894.008945  2807.130977  150.000937  2807.129102    0.000625    0.001250        0.001250       1.0          2807.130352                 0.0         False
4    2807.139727    2807.133477  894.008945  2807.139727    0.010000  2807.133477    0.000625    0.005625      -99.990000       1.0          2807.139102                 0.0         False
5    3107.138477    2907.129150  894.008945  3107.138477  300.004375  2907.129150  100.008125  100.001201        0.001250       1.0          2807.139102                 0.0         False
6    3107.138477    3007.129102  894.008945  3107.138477    0.010000  3007.129102  100.008125    0.001250      -99.998750       2.0          3007.130352                 0.0         False
7    3307.137227    3207.128477  894.008945  3307.137227  200.000000  3207.128477  100.008125    0.000625        0.000000       1.0          3007.130352                 0.0         False
8    3707.131602    3207.129639  894.008945  3707.131602  399.995000  3207.129639  400.001250  100.000713        0.001250       1.0          3007.130352                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=640001/1600, 
, buffer=1/800.[0m
[08/30 16:55:04]  --------------------------------------------------------------------------------
[08/30 16:55:04]  Iteration: 28 (0 solution, 27 counterexamples)
[08/30 16:55:06]  Generator returned sat in 1.252225 secs.
[08/30 16:55:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:08]  Verifer returned unsat in 1.709063 secs.
[08/30 16:55:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:08]  --------------------------------------------------------------------------------
[08/30 16:55:08]  Iteration: 29 (1 solution, 27 counterexamples)
[08/30 16:55:09]  Generator returned sat in 0.181163 secs.
[08/30 16:55:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:14]  Improved gap from 0.0 to 21.875
[08/30 16:55:15]  Improved number of small numbers from 63 to 73 out of a max of 114
[08/30 16:55:15]  Verifer returned sat in 6.029457 secs.
[08/30 16:55:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3285.013477    2885.013428   894.008945  3285.013477    0.050049  2885.013428        0.0  400.000049      400.000000       5.0          2885.013428                -1.0            -1
1    3285.063232    2984.963477   894.008945  3285.063232  400.049805  2984.963477        0.0  300.099756      300.049756       5.0          2885.013428                 0.0         False
2    3307.229102    2985.013672   894.008945  3307.229102  322.265625  2985.013672        0.0  322.215430      222.215625       6.0          3307.229102                 0.0         False
3    3307.229102    3185.013477   894.008945  3307.229102  120.775000  3185.013477        0.0  122.215625      122.215625       7.0          3307.229102                 0.0         False
4    3307.229102    3276.985352   894.008945  3307.229102   60.387500  3276.985352        0.0   30.243750       22.215625       8.0          3307.229102                 1.0         False
5    3307.229102    3285.013477   971.793320  3307.229102   30.193750  3285.013477        0.0   22.215625        0.000000       8.0          3307.229102                 1.0         False
6    3307.229102    3307.229102  1049.918320  3307.229102   15.096875  3307.229102        0.0    0.000000      -21.875000       5.0          3307.229102                 1.0         False
7    3375.885352    3329.104102  1103.086914  3375.885352   68.656250  3329.104102        0.0   46.781250       -0.050156       1.0          3307.229102                 0.0         False
8    3389.491602    3375.935547  1103.087158  3389.491602   60.387500  3375.935547        0.0   13.556055      -86.443662       1.0          3389.491602                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 16:55:16]  --------------------------------------------------------------------------------
[08/30 16:55:16]  Iteration: 30 (1 solution, 28 counterexamples)
[08/30 16:55:18]  Generator returned sat in 1.711952 secs.
[08/30 16:55:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:19]  Improved gap from 0.7 to 100
[08/30 16:55:20]  Improved number of small numbers from 61 to 69 out of a max of 114
[08/30 16:55:20]  Verifer returned sat in 1.200458 secs.
[08/30 16:55:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2735.092773    2734.992738  1026.220593  2735.092773    0.100098  2734.992738    0.000000   0.100036      -17.709055       2.0          2734.992738                -1.0            -1
1    2852.901829    2834.992676  1026.220593  2852.901829  117.909091  2834.992676    0.000000  17.909153        0.100000       1.0          2734.992738                 0.0         False
2    2952.901855    2952.801829  1026.220593  2952.901855  117.909180  2952.801829    0.000000   0.100027        0.100027       1.0          2734.992738                 0.0         False
3    2953.001829    2952.801829  1026.220593  2953.001829    0.200000  2952.801829    0.000000   0.200000      -99.800000       1.0          2953.001829                 0.0         False
4    3170.910920    3144.047283  1026.220593  3170.910920  218.109091  3144.047283   17.909091   8.954545        0.200000       1.0          2953.001829                 0.0         False
5    3271.010920    3252.801829  1026.220593  3271.010920  109.054545  3252.801829   18.009091   0.200000        0.200000       1.0          3253.001829                 0.0         False
6    3325.338192    3307.229102  1026.220593  3325.338192   54.527273  3307.229102   18.009091   0.100000      -45.472727       1.0          3307.329102                 0.0         False
7    3761.456374    3452.801829  1026.220593  3761.456374  436.218182  3452.801829  308.454545   0.200000        0.200000       1.0          3307.329102                 0.0         False
8    3979.365465    3544.047119  1026.220593  3979.365465  218.109091  3544.047119  426.363636   8.954710        0.200000       1.0          3553.001829                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=4493/11, 
, buffer=1/5.[0m
[08/30 16:55:20]  --------------------------------------------------------------------------------
[08/30 16:55:20]  Iteration: 31 (1 solution, 29 counterexamples)
[08/30 16:55:22]  Generator returned sat in 1.046942 secs.
[08/30 16:55:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:23]  Improved gap from 0.00125 to 100
[08/30 16:55:24]  Improved number of small numbers from 50 to 59 out of a max of 114
[08/30 16:55:24]  Verifer returned sat in 1.418072 secs.
[08/30 16:55:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2802.813965    2752.809987  1026.220593  2802.813965    0.000244  2752.809987        0.0   50.003978       50.003665       2.0          2752.809987                -1.0            -1
1    2852.810299    2802.814154  1026.220593  2852.810299  100.000313  2802.814154        0.0   49.996146        0.000000       1.0          2752.809987                 0.0         False
2    2852.810508    2852.810299  1026.220593  2852.810508   49.996354  2852.810299        0.0    0.000208      -99.999792       2.0          2852.810508                 0.0         False
3    3052.810091    2952.810299  1026.220593  3052.810091  199.999792  2952.810299        0.0   99.999792       -0.000208       1.0          2852.810508                 0.0         False
4    3252.810508    3052.810299  1026.220593  3252.810508  300.000208  3052.810299        0.0  200.000208      100.000208       1.0          2852.810508                 0.0         False
5    3452.806549    3252.810299  1026.220593  3452.806549  399.996250  3252.810299        0.0  199.996250      199.996250       2.0          2852.810508                 0.0         False
6    3852.808424    3252.810303  1026.220593  3852.808424  599.998125  3252.810303        0.0  599.998122      499.998125       3.0          2852.810508                 0.0         False
7    3852.808424    3452.806758  1026.220593  3852.808424    0.010000  3452.806758        0.0  400.001667      399.998125       2.0          3852.808424                 1.0          True
8    3852.808424    3452.810303  1026.220593  3852.808424  400.001458  3452.810303        0.0  399.998122      299.998125       3.0          3852.808424                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=299999/600.[0m
[08/30 16:55:24]  --------------------------------------------------------------------------------
[08/30 16:55:24]  Iteration: 32 (1 solution, 30 counterexamples)
[08/30 16:55:32]  Generator returned sat in 6.483042 secs.
[08/30 16:55:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:33]  Improved number of small numbers from 58 to 101 out of a max of 113
[08/30 16:55:33]  Verifer returned sat in 1.132484 secs.
[08/30 16:55:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3052.710449    2552.710449  1226.320557  3052.710449    0.049805  2552.710449        0.0  500.000000      500.000000       5.0          2552.710449                -1.0            -1
1    3052.710449    2552.710449  1226.320557  3052.710449    0.050049  2552.710449        0.0  500.000000      400.000000       5.0          2552.710449                 0.0         False
2    3052.710449    2697.021411  1226.320557  3052.710449  266.783447  2697.021411        0.0  355.689039      300.000000       6.0          2552.710449                 0.0         False
3    3052.710449    2852.660156  1226.320557  3052.710449  266.733398  2852.660156        0.0  200.050293      200.000000       7.0          3052.710449                 0.0         False
4    3252.760254    2852.710449  1226.320557  3252.760254  400.100098  2852.710449        0.0  400.049805      300.049805       8.0          3052.710449                 0.0         False
5    3252.760254    3052.710299  1226.320557  3252.760254  150.000000  3052.710299        0.0  200.049954      200.049805       9.0          3252.760254                 1.0         False
6    3252.760254    3152.710299  1226.320557  3252.760254  177.844444  3152.710299        0.0  100.049954      100.049805       3.0          3252.760254                 1.0         False
7    3419.476966    3252.710299  1226.320557  3419.476966  266.766667  3252.710299        0.0  166.766667      166.766517       4.0          3252.760254                 0.0         False
8    3652.860299    3252.810059  1226.320557  3652.860299  400.150000  3252.810059        0.0  400.050241      300.149850       2.0          3252.760254                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=500.[0m
[08/30 16:55:33]  --------------------------------------------------------------------------------
[08/30 16:55:33]  Iteration: 33 (1 solution, 31 counterexamples)
[08/30 16:55:37]  Generator returned sat in 2.202552 secs.
[08/30 16:55:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:37]  Improved gap from 0.0 to 100
[08/30 16:55:38]  Improved number of small numbers from 71 to 88 out of a max of 114
[08/30 16:55:38]  Verifer returned sat in 1.087670 secs.
[08/30 16:55:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1969.556966    1969.531982  1226.320593  1969.556966    0.074951  1969.531982   0.000000    0.024984       -0.025000       2.0          1969.531982                -1.0            -1
1    1969.582031    1969.582031  1226.320593  1969.582031    0.050049  1969.582031   0.000000    0.000000      -99.999935       1.0          1969.582031                 0.0         False
2    2469.556885    2169.581787  1226.320593  2469.556885  499.974854  2169.581787   0.000000  299.975098      299.974919       1.0          1969.582031                 0.0         False
3    2469.556885    2269.581966  1226.320593  2469.556885  133.300000  2269.581966   0.000000  199.974919      199.974919       2.0          2469.556885                 0.0         False
4    2469.556885    2269.581966  1226.320593  2469.556885  199.950000  2269.581966   0.000000  199.974919       99.974919       2.0          2469.556885                 0.0         False
5    2569.506966    2469.581966  1226.320593  2569.506966  299.925000  2469.581966   0.000000   99.925000       99.925000       1.0          2469.556885                 0.0         False
6    2919.469466    2469.607178  1226.320593  2919.469466  449.887500  2469.607178  12.446875  437.415413      337.440625       2.0          2469.556885                 0.0         False
7    2919.469466    2569.582031  1226.320593  2919.469466  224.943750  2569.582031  12.446875  337.440560      237.440625       2.0          2907.022591                 0.0         False
8    2919.469466    2669.582031  1226.320593  2919.469466  337.415625  2669.582031  12.446875  237.440560      137.440625       3.0          2907.022591                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=3983/320, 
, buffer=107981/320.[0m
[08/30 16:55:38]  --------------------------------------------------------------------------------
[08/30 16:55:38]  Iteration: 34 (1 solution, 32 counterexamples)
[08/30 16:55:41]  Generator returned sat in 1.491058 secs.
[08/30 16:55:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:44]  Improved gap from 0.0 to 9.375
[08/30 16:55:45]  Improved number of small numbers from 63 to 73 out of a max of 114
[08/30 16:55:45]  Verifer returned sat in 3.711402 secs.
[08/30 16:55:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3817.119503    3666.319503  1226.320557  3817.119503    0.050049  3666.319503        0.0  150.800000      150.800000       8.0          3666.319503                -1.0            -1
1    3817.119503    3666.369629  1226.320557  3817.119503  150.700000  3666.369629        0.0  150.749874       50.800000       7.0          3666.319503                 1.0         False
2    3817.119503    3766.319580  1275.520557  3817.119503  150.700000  3766.319580        0.0   50.799922        0.000000       8.0          3666.319503                 1.0          True
3    3817.119503    3817.119503  1324.720459  3817.119503   50.750000  3817.119503        0.0    0.000000      -50.800098       8.0          3817.119503                 1.0          True
4    3967.919503    3916.244503  1324.720459  3967.919503  150.800000  3916.244503        0.0   51.675000       -0.000098       1.0          3817.119503                 1.0         False
5    3991.644503    3967.969503  1396.295654  3991.644503   75.400000  3967.969503        0.0   23.675000       -4.699902       1.0          3991.644503                 0.0         False
6    4005.669503    3996.344503  1486.920410  4005.669503   37.700000  3996.344503        0.0    9.325000       -0.050146       1.0          4005.669503                 0.0         False
7    4015.194503    4005.719727  1577.445557  4015.194503   18.850000  4005.719727        0.0    9.474776        0.000000       1.0          4015.194503                 0.0         False
8    4015.194503    4015.194503  1577.445557  4015.194503    9.425000  4015.194503        0.0    0.000000     -100.000000       2.0          4015.194503                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=754/5.[0m
[08/30 16:55:45]  --------------------------------------------------------------------------------
[08/30 16:55:45]  Iteration: 35 (1 solution, 33 counterexamples)
[08/30 16:55:50]  Generator returned sat in 3.701018 secs.
[08/30 16:55:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:54]  Improved gap from 9.275146484375 to 31.25
[08/30 16:55:54]  Improved number of small numbers from 67 to 114 out of a max of 114
[08/30 16:55:54]  Verifer returned sat in 3.960194 secs.
[08/30 16:55:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    7620.444824    7089.194824  1375.320312  7620.444824  65.624756  7089.194824        0.0  531.250000      431.250000       8.0          7089.194824                -1.0            -1
1    7620.444824    7289.194580  1375.320312  7620.444824  65.624756  7289.194580        0.0  331.250244      331.250000       5.0          7089.194824                 1.0         False
2    7620.444824    7389.194580  1375.320312  7620.444824  65.624756  7389.194580        0.0  231.250244      231.250000       4.0          7089.194824                 0.0         False
3    7620.444824    7489.194824  1375.320312  7620.444824  65.625000  7489.194824        0.0  131.250000      131.250000       5.0          7089.194824                 0.0         False
4    7620.444824    7587.169678  1375.320312  7620.444824  32.812500  7587.169678        0.0   33.275146       31.250000       6.0          7620.444824                 0.0         False
5    7620.444824    7589.194824  1444.070312  7620.444824  16.406250  7589.194824        0.0   31.250000        0.000000       7.0          7620.444824                 0.0         False
6    7620.444824    7620.444824  1511.358154  7620.444824   8.203125  7620.444824        0.0    0.000000      -32.712158       8.0          7620.444824                 0.0         False
7    7686.069824    7653.157227  1578.445312  7686.069824  65.625000  7653.157227        0.0   32.912598        0.000000       1.0          7620.444824                 1.0         False
8    7686.069824    7686.069824  1647.195312  7686.069824  32.812500  7686.069824        0.0    0.000000      -31.250000       2.0          7686.069824                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1725/4.[0m
[08/30 16:55:55]  --------------------------------------------------------------------------------
[08/30 16:55:55]  Iteration: 36 (1 solution, 34 counterexamples)
[08/30 16:55:56]  Generator returned sat in 0.713895 secs.
[08/30 16:55:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:55:59]  Improved gap from 0.0 to 15.625
[08/30 16:56:00]  Improved number of small numbers from 62 to 114 out of a max of 114
[08/30 16:56:00]  Verifer returned sat in 3.276999 secs.
[08/30 16:56:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    6995.041504    6895.091553  1299.508057  6995.041504    0.050049  6895.091553   0.000000   99.949951       99.949707       2.0          6895.091553                -1.0            -1
1    7120.441650    6995.091309  1299.508057  7120.441650  225.350098  6995.091309   0.000000  125.350342      125.349854       1.0          6895.091553                 0.0         False
2    7220.541504    7095.091309  1299.508057  7220.541504  225.450195  7095.091309   0.049805  125.400391      125.399902       2.0          6895.091553                 0.0         False
3    7220.541504    7179.591553  1299.508057  7220.541504   81.700000  7179.591553   0.049805   40.900146       25.399902       2.0          7220.491699                 0.0         False
4    7220.541504    7200.016602  1374.108154  7220.541504   40.850000  7200.016602   0.049805   20.475098        0.000000       3.0          7220.491699                 0.0         False
5    7220.541504    7220.491699  1458.483154  7220.541504   20.425000  7220.491699   0.049805    0.000000      -15.625000       4.0          7220.491699                 0.0         False
6    7283.241699    7267.616455  1511.358154  7283.241699   62.700195  7267.616455   0.049805   15.575439       -0.049805       1.0          7220.491699                 1.0         False
7    7299.016357    7283.241699  1595.633301  7299.016357   31.350098  7283.241699   0.049805   15.724854        0.000000       1.0          7298.966553                 0.0         False
8    7299.016357    7298.966553  1595.633301  7299.016357   15.675049  7298.966553   0.049805    0.000000     -100.000000       2.0          7298.966553                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=256819/2048.[0m
[08/30 16:56:00]  --------------------------------------------------------------------------------
[08/30 16:56:00]  Iteration: 37 (1 solution, 35 counterexamples)
[08/30 16:56:07]  Generator returned sat in 5.616258 secs.
[08/30 16:56:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:07]  Improved gap from 0.0 to 100
[08/30 16:56:08]  Improved number of small numbers from 68 to 81 out of a max of 114
[08/30 16:56:08]  Verifer returned sat in 1.043077 secs.
[08/30 16:56:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    7220.091553    7120.191650  974.40835  7220.091553  199.999756  7120.191650        0.0   99.899902       -0.099951       8.0          7120.191650                -1.0            -1
1    7320.191406    7220.191650  974.40835  7320.191406  199.999756  7220.191650        0.0   99.999756       -0.000098       1.0          7120.191650                 1.0         False
2    7420.091553    7420.091504  974.40835  7420.091553  199.899902  7420.091504        0.0    0.000049       -0.099951       1.0          7420.091553                 0.0         False
3    7470.129004    7470.029004  974.40835  7470.129004   50.037500  7470.029004        0.0    0.100000      -50.062500       1.0          7470.129004                 0.0         False
4    7570.104004    7520.191504  974.40835  7570.104004  100.075000  7520.191504        0.0   49.912500      -50.087500       1.0          7470.129004                 0.0         False
5    7720.341504    7719.991504  974.40835  7720.341504  200.150000  7719.991504        0.0    0.350000        0.150000       1.0          7470.129004                 0.0         False
6    8120.291504    7820.191504  974.40835  8120.291504  400.300000  7820.191504        0.0  300.100000      300.100000       1.0          7470.129004                 0.0         False
7    8620.791504    7920.191504  974.40835  8620.791504  800.600000  7920.191504      400.4  300.200000      300.200000       2.0          7470.129004                 0.0         False
8    8720.891504    7920.291504  974.40835  8720.891504  400.300000  7920.291504      400.5  400.100000      300.200000       3.0          8320.391504                 1.0          True
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=801/2, 
, buffer=1501/5.[0m
[08/30 16:56:09]  --------------------------------------------------------------------------------
[08/30 16:56:09]  Iteration: 38 (1 solution, 36 counterexamples)
[08/30 16:56:11]  Generator returned sat in 1.277380 secs.
[08/30 16:56:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:11]  Improved gap from 0.0 to 31.25
[08/30 16:56:12]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/30 16:56:12]  Verifer returned sat in 0.559510 secs.
[08/30 16:56:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    7107.626709    7038.879150  1155.720703  7107.626709    0.002500  7038.879150        0.0   68.747559       68.747559       2.0          7038.879150                -1.0            -1
1    7107.631592    7107.628906  1155.720947  7107.631592   68.752441  7107.628906        0.0    0.002686      -31.247314       1.0          7038.879150                 0.0         False
2    7470.128906    7138.878906  1155.720947  7470.128906  362.500000  7138.878906        0.0  331.250000      231.250000       1.0          7038.879150                 0.0         False
3    7470.128906    7334.639160  1155.720947  7470.128906    0.012695  7334.639160        0.0  135.489746      131.250000       2.0          7470.128906                 0.0         False
4    7470.128906    7438.876465  1155.720947  7470.128906    0.010000  7438.876465        0.0   31.252441       31.250000       3.0          7470.128906                 0.0         False
5    7470.128906    7438.878906  1224.470947  7470.128906    0.010000  7438.878906        0.0   31.250000        0.000000       4.0          7470.128906                 0.0         False
6    7470.128906    7470.128906  1293.220703  7470.128906    0.010000  7470.128906        0.0    0.000000      -31.250244       5.0          7470.128906                 0.0         False
7    7537.873779    7501.379150  1356.726074  7537.873779   67.744873  7501.379150        0.0   36.494629        0.000000       1.0          7470.128906                 1.0         False
8    7537.873779    7537.873779  1356.726074  7537.873779    0.010000  7537.873779        0.0    0.000000     -100.000000       2.0          7537.873779                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=92501/400.[0m
[08/30 16:56:12]  --------------------------------------------------------------------------------
[08/30 16:56:12]  Iteration: 39 (1 solution, 37 counterexamples)
[08/30 16:56:14]  Generator returned sat in 0.891193 secs.
[08/30 16:56:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:16]  Improved gap from 0.0 to 31.25
[08/30 16:56:16]  Improved number of small numbers from 75 to 114 out of a max of 114
[08/30 16:56:16]  Verifer returned sat in 1.279694 secs.
[08/30 16:56:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    5059.718994    4927.053955  1155.723633  5059.718994    0.002500  4927.053955   0.000000  132.665039      132.665039       1.0          4927.053955                -1.0            -1
1    5159.717529    4927.053955  1155.723633  5159.717529  232.663574  4927.053955   0.000000  232.663574      132.663574       1.0          4927.053955                 0.0         False
2    5192.381348    5127.053711  1155.723633  5192.381348  265.327393  5127.053711   0.000000   65.327637       65.327393       2.0          4927.053955                 0.0         False
3    5392.381348    5227.053955  1155.723633  5392.381348  265.327637  5227.053955  32.662354  132.665039      132.665039       1.0          4927.053955                 0.0         False
4    5392.381348    5327.052490  1155.723633  5392.381348  132.663818  5327.052490  32.662354   32.666504       32.665039       2.0          5359.718994                 0.0         False
5    5392.381348    5327.053955  1223.058594  5392.381348    0.010000  5327.053955  32.662354   32.665039        0.000000       3.0          5359.718994                 0.0         False
6    5392.381348    5359.718994  1291.808594  5392.381348    0.010000  5359.718994  32.662354    0.000000      -31.250000       4.0          5359.718994                 0.0         False
7    5458.713867    5390.968994  1356.726074  5458.713867   66.332520  5390.968994  32.662354   35.082520        0.000000       1.0          5359.718994                 1.0         False
8    5458.713867    5426.051514  1356.726074  5458.713867    0.010000  5426.051514  32.662354    0.000000     -100.000000       2.0          5426.051514                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=135849/1024.[0m
[08/30 16:56:16]  --------------------------------------------------------------------------------
[08/30 16:56:16]  Iteration: 40 (1 solution, 38 counterexamples)
[08/30 16:56:21]  Generator returned sat in 3.083715 secs.
[08/30 16:56:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:21]  Improved gap from 0.00125 to 100
[08/30 16:56:22]  Improved number of small numbers from 68 to 83 out of a max of 114
[08/30 16:56:22]  Verifer returned sat in 1.544474 secs.
[08/30 16:56:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    5206.300537    5106.400635  1155.723633  5206.300537  168.613992  5106.400635        0.0   99.899902       99.899775       8.0          5106.400635                -1.0            -1
1    5274.914795    5206.400635  1155.723633  5274.914795  168.514160  5206.400635        0.0   68.514160       68.514033       1.0          5274.914795                 1.0         False
2    5274.914795    5274.814754  1155.723633  5274.914795   52.814403  5274.814754        0.0    0.100041      -31.485967       2.0          5274.914795                 0.0         False
3    5327.529157    5327.429157  1155.723633  5327.529157   52.714403  5327.429157        0.0    0.100000      -78.871605       1.0          5327.529157                 1.0         False
4    5406.500762    5406.400762  1155.723633  5406.500762   79.071605  5406.400762        0.0    0.100000      -99.900000       1.0          5327.529157                 0.0         False
5    5525.008169    5506.400762  1155.723633  5525.008169  118.607407  5506.400762        0.0   18.607407      -81.392593       1.0          5327.529157                 0.0         False
6    5684.311873    5606.400762  1155.723633  5684.311873  177.911111  5606.400762        0.0   77.911111      -22.088889       1.0          5327.529157                 0.0         False
7    5873.267429    5806.400762  1155.723633  5873.267429  266.866667  5806.400762        0.0   66.866667       66.866667       1.0          5327.529157                 0.0         False
8    6206.700762    5806.500977  1155.723633  6206.700762  400.300000  5806.500977        0.1  400.099785      300.200000       2.0          5327.529157                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/10, 
, buffer=1501/5.[0m
[08/30 16:56:23]  --------------------------------------------------------------------------------
[08/30 16:56:23]  Iteration: 41 (1 solution, 39 counterexamples)
[08/30 16:56:25]  Generator returned sat in 1.221750 secs.
[08/30 16:56:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:27]  Improved gap from 0.0 to 31.25
[08/30 16:56:28]  Improved number of small numbers from 64 to 75 out of a max of 114
[08/30 16:56:28]  Verifer returned sat in 2.547889 secs.
[08/30 16:56:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4625.005615    4562.503169  1155.723633  4625.005615    0.001221  4562.503169    0.00000  62.502446        0.002446       1.0          4562.503169                -1.0            -1
1    4625.005615    4625.004419  1155.723633  4625.005615    0.001465  4625.004419    0.00000   0.001196      -99.997554       2.0          4562.503169                 0.0         False
2    4825.006919    4824.255669  1155.723633  4825.006919  200.002500  4824.255669    0.00125   0.750000        0.002500       1.0          4562.503169                 1.0          True
3    4825.006919    4825.003169  1224.473633  4825.006919    0.748779  4825.003169    0.00125   0.002500      -31.247500       2.0          4825.005669                 0.0         False
4    4956.254419    4956.251919  1224.473633  4956.254419  131.250000  4956.251919    0.00125   0.001250        0.000000       1.0          4825.005669                 1.0         False
5    4956.263169    4956.253169  1289.725098  4956.263169    0.010000  4956.253169    0.00125   0.008750      -34.739785       2.0          4956.261919                 0.0         False
6    5022.253169    4991.001709  1358.474883  5022.253169   65.998750  4991.001709    0.00125  31.250210        0.000000       1.0          4956.261919                 1.0         False
7    5022.253169    5022.251919  1427.224854  5022.253169    0.010000  5022.251919    0.00125   0.000000      -31.250029       2.0          5022.251919                 0.0         False
8    5055.253169    5055.250732  1427.225098  5055.253169   33.000000  5055.250732    0.00125   0.001187      -98.249785       1.0          5022.251919                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/400.[0m
[08/30 16:56:28]  --------------------------------------------------------------------------------
[08/30 16:56:28]  Iteration: 42 (1 solution, 40 counterexamples)
[08/30 16:56:34]  Generator returned sat in 4.144028 secs.
[08/30 16:56:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:35]  Improved gap from 0.0 to 31.25
[08/30 16:56:36]  Improved number of small numbers from 67 to 114 out of a max of 114
[08/30 16:56:36]  Verifer returned sat in 1.790268 secs.
[08/30 16:56:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4761.753418    4561.754883  1224.472412  4761.753418    0.000732  4561.754883   0.000000  199.998535       99.998779       2.0          4561.754883                -1.0            -1
1    4761.753418    4661.756104  1224.473389  4761.753418  199.998047  4661.756104   0.000000   99.997314       -0.000244       2.0          4561.754883                 0.0         False
2    4861.753662    4830.503662  1224.473389  4861.753662  199.997559  4830.503662   0.000000   31.250000        0.000000       1.0          4861.753662                 0.0         False
3    5093.003662    4961.753662  1224.473389  5093.003662  262.500000  4961.753662  31.251221   99.998779       99.998779       1.0          4861.753662                 0.0         False
4    5124.254883    5061.752686  1224.473389  5124.254883  131.250000  5061.752686  31.251221   31.250977       31.250000       1.0          5093.003662                 0.0         False
5    5124.254883    5061.753662  1293.223389  5124.254883    0.010000  5061.753662  31.251221   31.250000        0.000000       2.0          5093.003662                 0.0         False
6    5124.254883    5093.003662  1361.973389  5124.254883    0.010000  5093.003662  31.251221    0.000000      -31.250000       3.0          5093.003662                 0.0         False
7    5189.879883    5124.253662  1427.598389  5189.879883   65.625000  5124.253662  31.251221   34.375000        0.000000       1.0          5093.003662                 1.0         False
8    5189.879883    5158.628662  1496.348389  5189.879883    0.010000  5158.628662  31.251221    0.000000      -31.250000       2.0          5158.628662                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=409595/4096.[0m
[08/30 16:56:36]  --------------------------------------------------------------------------------
[08/30 16:56:36]  Iteration: 43 (1 solution, 41 counterexamples)
[08/30 16:56:43]  Generator returned sat in 5.337157 secs.
[08/30 16:56:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:43]  Improved gap from 0.0 to 100
[08/30 16:56:44]  Improved number of small numbers from 62 to 82 out of a max of 114
[08/30 16:56:44]  Verifer returned sat in 1.250220 secs.
[08/30 16:56:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4892.503662    4692.803711  1393.423389  4892.503662  200.000000  4692.803711        0.0  199.699951       99.700000       3.0          4692.803711                -1.0            -1
1    4892.703857    4892.603516  1393.423389  4892.703857  199.900146  4892.603516        0.0    0.100342       -0.099805       1.0          4892.703857                 1.0         False
2    5026.303467    4892.803711  1393.423389  5026.303467  133.699951  4892.803711        0.0  133.499756       33.499805       1.0          5026.303467                 0.0         False
3    5026.303467    5026.203662  1393.423389  5026.303467  133.400000  5026.203662        0.0    0.099805      -66.500195       2.0          5026.303467                 0.0         False
4    5092.903662    5092.803662  1393.423389  5092.903662   66.700000  5092.803662        0.0    0.100000      -99.900000       1.0          5092.903662                 1.0         False
5    5226.203662    5192.803662  1393.423389  5226.203662  133.400000  5192.803662        0.0   33.400000      -66.600000       1.0          5092.903662                 0.0         False
6    5459.603662    5392.803662  1393.423389  5459.603662  266.800000  5392.803662        0.0   66.800000       66.800000       1.0          5092.903662                 0.0         False
7    5926.403662    5392.903809  1393.423389  5926.403662  533.600000  5392.903809        0.0  533.499854      433.600000       2.0          5092.903662                 0.0         False
8    5926.403662    5492.803711  1393.423389  5926.403662  266.800000  5492.803711        0.0  433.599951      333.600000       2.0          5926.403662                 1.0          True
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=888013/2048.[0m
[08/30 16:56:45]  --------------------------------------------------------------------------------
[08/30 16:56:45]  Iteration: 44 (1 solution, 42 counterexamples)
[08/30 16:56:50]  Generator returned sat in 3.535438 secs.
[08/30 16:56:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:51]  Improved gap from 0.0016666666666666668 to 0
[08/30 16:56:52]  Improved number of small numbers from 61 to 83 out of a max of 114
[08/30 16:56:52]  Verifer returned sat in 2.167130 secs.
[08/30 16:56:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4492.690430    4492.689941  1893.523438  4492.690430    0.001667  4492.689941    0.000000   0.000488       -0.000684       6.0          4492.689941                -1.0            -1
1    4492.691162    4492.691162  1893.523438  4492.691162    0.001221  4492.691162    0.000000   0.000000      -99.999951       1.0          4492.691162                 0.0         False
2    4692.690918    4692.690524  1893.523610  4692.690918  199.999756  4692.690524    0.000000   0.000394       -0.000023       1.0          4492.691162                 0.0         False
3    4892.693024    4792.690941  1893.523610  4892.693024  200.002500  4792.690941  100.001250   0.000833        0.000833       1.0          4492.691162                 0.0         False
4    4992.693441    4842.691982  1893.523610  4992.693441  100.001250  4842.691982  100.001667  49.999792        0.000833       1.0          4892.691774                 0.0         False
5    4992.694274    4892.692191  1993.521729  4992.694274   50.000625  4892.692191  100.001667   0.000417       -0.000215       1.0          4892.692607                 0.0         False
6    4992.703857    4892.701774  2093.512207  4992.703857    0.010000  4892.701774  100.001667   0.000417       -0.000153       1.0          4892.702191                 0.0         False
7    4992.713441    4892.702607  2193.502686  4992.713441    0.010000  4892.702607  100.001667   0.009167       -0.000091       1.0          4892.702191                 0.0         False
8    4992.714274    4892.712402  2193.502930  4992.714274    0.010000  4892.712402  100.001667   0.000205      -99.999014       1.0          4892.702191                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=1/1200.[0m
[08/30 16:56:53]  --------------------------------------------------------------------------------
[08/30 16:56:53]  Iteration: 45 (1 solution, 43 counterexamples)
[08/30 16:56:55]  Generator returned sat in 1.519784 secs.
[08/30 16:56:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:56:57]  Improved number of small numbers from 58 to 88 out of a max of 113
[08/30 16:56:57]  Verifer returned sat in 1.026177 secs.
[08/30 16:56:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4592.293457    3992.293213  1893.523682  4592.293457  600.099854  3992.293213        0.0  600.000244      600.000088       7.0          3992.293213                -1.0            -1
1    4592.293457    4092.293213  1893.523682  4592.293457  599.999756  4092.293213        0.0  500.000244      500.000088       7.0          4592.293457                 0.0         False
2    4592.293457    4192.193441  1893.523682  4592.293457  499.900000  4192.193441        0.0  400.100016      400.000088       8.0          4592.293457                 0.0         False
3    4592.393441    4192.293441  1893.523682  4592.393441  400.200000  4192.293441        0.0  400.100000      300.100072       9.0          4592.393441                 0.0         False
4    4992.693441    4392.293213  1893.523682  4992.693441  800.400000  4392.293213        0.0  600.400228      600.400072       8.0          4592.393441                 1.0         False
5    4992.693441    4492.293213  1893.523682  4992.693441  400.200000  4492.293213        0.0  500.400228      500.400072       8.0          4992.693441                 0.0         False
6    4992.693441    4592.293213  1893.523682  4992.693441  200.100000  4592.293213        0.0  400.400228      400.400072       9.0          4992.693441                 0.0         False
7    4992.693441    4592.293441  1893.523682  4992.693441  400.200000  4592.293441        0.0  400.400000      300.400072       9.0          4992.693441                 1.0         False
8    5392.693441    4792.293213  1893.523682  5392.693441  800.400000  4792.293213        0.0  600.400228      600.400072       5.0          4992.693441                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=2459239/4096.[0m
[08/30 16:56:57]  --------------------------------------------------------------------------------
[08/30 16:56:57]  Iteration: 46 (1 solution, 44 counterexamples)
[08/30 16:57:02]  Generator returned sat in 3.882999 secs.
[08/30 16:57:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:57:12]  Improved gap from 0.0 to 26.5625
[08/30 16:57:12]  Improved number of small numbers from 57 to 65 out of a max of 114
[08/30 16:57:12]  Verifer returned sat in 9.863281 secs.
[08/30 16:57:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4392.288369    3992.288369  1893.528682  4392.288369    0.001221  3992.288369        0.0  400.000000      400.000000       6.0          3992.288369                -1.0            -1
1    4392.288369    3992.288574  1893.528682  4392.288369    0.001221  3992.288574        0.0  399.999795      300.000000       5.0          3992.288369                 0.0         False
2    4392.288369    4192.288330  1893.528682  4392.288369    0.001250  4192.288330        0.0  200.000039      200.000000       5.0          3992.288369                 0.0         False
3    4392.288369    4276.662952  1893.528682  4392.288369    0.001250  4276.662952        0.0  115.625417      100.000000       6.0          3992.288369                 0.0         False
4    4418.850869    4392.287119  1893.528682  4418.850869  142.187917  4392.287119        0.0   26.563750       26.562500       7.0          3992.288369                 0.0         False
5    4418.850869    4392.288369  1966.966182  4418.850869    0.010000  4392.288369        0.0   26.562500        0.000000       8.0          4418.850869                 1.0          True
6    4418.850869    4418.850869  2040.403682  4418.850869    0.010000  4418.850869        0.0    0.000000      -26.562500       3.0          4418.850869                 1.0         False
7    4489.949827    4445.413369  2095.531250  4489.949827   71.098958  4445.413369        0.0   44.536458       -0.335973       1.0          4418.850869                 0.0         False
8    4507.525973    4490.285889  2095.531250  4507.525973   62.112604  4490.285889        0.0   17.240085      -82.759827       1.0          4507.525973                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 16:57:13]  --------------------------------------------------------------------------------
[08/30 16:57:13]  Iteration: 47 (1 solution, 45 counterexamples)
[08/30 16:57:21]  Generator returned sat in 6.082686 secs.
[08/30 16:57:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:57:24]  Improved gap from 0.0 to 21.875
[08/30 16:57:25]  Improved number of small numbers from 59 to 82 out of a max of 114
[08/30 16:57:25]  Verifer returned sat in 3.987530 secs.
[08/30 16:57:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4270.623369    3970.623291  1915.193682  4270.623369    0.100098  3970.623291        0.0  300.000078      300.000000       9.0          3970.623291                -1.0            -1
1    4370.523438    3970.623535  1915.193682  4370.523438  399.900146  3970.623535        0.0  399.899902      299.900068       3.0          3970.623291                 1.0         False
2    4392.398438    4080.623535  1915.193682  4392.398438  421.774902  4080.623535        0.0  311.774902      221.775068       3.0          3970.623291                 0.0         False
3    4392.398438    4270.623369  1915.193682  4392.398438  120.454545  4270.623369        0.0  121.775068      121.775068       4.0          4392.398438                 0.0         False
4    4392.398438    4362.384733  1915.193682  4392.398438   60.227273  4362.384733        0.0   30.013705       21.775068       4.0          4392.398438                 1.0         False
5    4392.498369    4370.623369  1993.318682  4392.498369   30.113636  4370.623369        0.0   21.875000        0.000000       4.0          4392.498369                 1.0         False
6    4392.498369    4392.498369  2071.443682  4392.498369   15.056818  4392.498369        0.0    0.000000      -21.875000       2.0          4392.498369                 1.0         False
7    4460.964278    4414.373369  2124.752930  4460.964278   68.465909  4414.373369        0.0   46.590909       -0.099843       1.0          4392.498369                 0.0         False
8    4474.600642    4461.064453  2124.752930  4474.600642   60.227273  4461.064453        0.0   13.536189      -86.463479       1.0          4474.600642                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=300.[0m
[08/30 16:57:25]  --------------------------------------------------------------------------------
[08/30 16:57:25]  Iteration: 48 (1 solution, 46 counterexamples)
[08/30 16:57:29]  Generator returned sat in 2.667519 secs.
[08/30 16:57:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:57:30]  Improved gap from 0.009285714285714286 to 100
[08/30 16:57:31]  Improved number of small numbers from 59 to 71 out of a max of 114
[08/30 16:57:31]  Verifer returned sat in 1.295684 secs.
[08/30 16:57:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3892.476074    3692.546387  2093.33511  3892.476074  200.001429  3692.546387    0.000000  199.929688       99.994134       9.0          3692.546387                -1.0            -1
1    3892.547852    3892.476226  2093.33511  3892.547852  200.001465  3892.476226    0.000000    0.071625        0.065911       1.0          3692.546387                 1.0         False
2    4092.476941    3892.548369  2093.33511  4092.476941  200.000714  3892.548369    0.000714  199.927857       99.994286       1.0          4092.476226                 0.0         False
3    4092.476941    4092.472655  2093.33511  4092.476941    0.010498  4092.472655    0.000714    0.003571       -0.005714       2.0          4092.476226                 0.0         False
4    4092.483369    4092.481941  2093.33511  4092.483369    0.010000  4092.481941    0.000714    0.000714      -99.999286       1.0          4092.482655                 1.0         False
5    4192.500512    4192.481941  2093.33511  4192.500512  100.017857  4192.481941    0.000714    0.017857      -99.982143       1.0          4092.482655                 0.0         False
6    4492.476226    4392.481941  2093.33511  4492.476226  299.993571  4392.481941    0.000714   99.993571       99.993571       1.0          4092.482655                 0.0         False
7    4992.477655    4492.481934  2093.33511  4992.477655  599.995000  4492.481934  400.001429   99.994293       99.994286       1.0          4092.482655                 0.0         False
8    4992.477655    4492.482422  2093.33511  4992.477655    0.010000  4492.482422  400.001429   99.993804       -0.005714       2.0          4592.476226                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=560001/1400, 
, buffer=17499/175.[0m
[08/30 16:57:31]  --------------------------------------------------------------------------------
[08/30 16:57:31]  Iteration: 49 (1 solution, 47 counterexamples)
[08/30 16:57:37]  Generator returned sat in 4.578947 secs.
[08/30 16:57:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:57:38]  Improved gap from 0.0 to 100
[08/30 16:57:38]  Improved number of small numbers from 70 to 114 out of a max of 114
[08/30 16:57:38]  Verifer returned sat in 0.678991 secs.
[08/30 16:57:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2492.583008    1792.458252  2093.334961  2492.583008    0.025146  1792.458252   0.000000  700.124756      600.124756       3.0          1792.458252                -1.0            -1
1    2592.633057    1892.458252  2093.334961  2592.633057  800.174805  1892.458252   0.049805  700.125000      600.125000       3.0          1792.458252                 0.0         False
2    2692.658203    2081.294189  2093.334961  2692.658203  800.150146  2081.294189   0.074951  611.289062      600.125000       4.0          2692.583252                 0.0         False
3    2792.658203    2192.458008  2093.334961  2792.658203  711.289062  2192.458008   0.074951  600.125244      600.125000       5.0          2792.583252                 0.0         False
4    2792.658203    2192.458252  2093.334961  2792.658203  355.644531  2192.458252   0.074951  600.125000      500.125000       6.0          2792.583252                 0.0         False
5    2792.658203    2392.433350  2093.334961  2792.658203  177.822266  2392.433350   0.074951  400.149902      400.125000       7.0          2792.583252                 0.0         False
6    2792.658203    2392.458252  2093.334961  2792.658203  266.733398  2392.458252   0.074951  400.125000      300.125000       8.0          2792.583252                 1.0         False
7    2792.658203    2592.458008  2093.334961  2792.658203  400.100098  2592.458008   0.074951  200.125244      200.125000       7.0          2792.583252                 1.0         False
8    3192.683105    2592.483154  2093.334961  3192.683105  600.150146  2592.483154   0.074951  600.125000      500.149902       8.0          2792.583252                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=4801/8.[0m
[08/30 16:57:39]  --------------------------------------------------------------------------------
[08/30 16:57:39]  Iteration: 50 (1 solution, 48 counterexamples)
[08/30 16:57:42]  Generator returned sat in 1.417820 secs.
[08/30 16:57:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:57:42]  Improved number of small numbers from 91 to 107 out of a max of 113
[08/30 16:57:42]  Verifer returned sat in 0.742329 secs.
[08/30 16:57:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2492.583252    1725.887451  2093.334961  2492.583252    0.024902  1725.887451   0.000000  766.695801      666.695801       4.0          1725.887451                -1.0            -1
1    2592.633057    1825.887695  2093.334961  2592.633057  866.745605  1825.887695   0.049805  766.695557      666.695801       4.0          1725.887451                 0.0         False
2    2692.658203    1962.924108  2093.334961  2692.658203  866.720703  1962.924108   0.074951  729.659144      666.695801       5.0          2692.583252                 0.0         False
3    2792.658203    2125.887451  2093.334961  2792.658203  829.659144  2125.887451   0.074951  666.695801      666.695801       6.0          2792.583252                 0.0         False
4    2792.658203    2192.458252  2093.334961  2792.658203  414.829572  2192.458252   0.074951  600.125000      566.695801       7.0          2792.583252                 0.0         False
5    2792.658203    2325.875326  2093.334961  2792.658203  207.414786  2325.875326   0.074951  466.707926      466.695801       8.0          2792.583252                 0.0         False
6    2792.658203    2325.887695  2093.334961  2792.658203  311.122179  2325.887695   0.074951  466.695557      366.695801       9.0          2792.583252                 1.0         False
7    2792.658203    2492.583252  2093.334961  2792.658203  466.683268  2492.583252   0.074951  300.000000      266.695801       9.0          2792.583252                 1.0         False
8    3192.683105    2592.482910  2093.334961  3192.683105  700.024902  2592.482910   0.074951  600.125244      566.720703       8.0          2792.583252                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1365393/2048.[0m
[08/30 16:57:43]  --------------------------------------------------------------------------------
[08/30 16:57:43]  Iteration: 51 (1 solution, 49 counterexamples)
[08/30 16:57:48]  Generator returned sat in 3.539088 secs.
[08/30 16:57:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:57:59]  Improved gap from 0.0 to 26.5625
[08/30 16:57:59]  Improved number of small numbers from 59 to 68 out of a max of 114
[08/30 16:57:59]  Verifer returned sat in 11.157223 secs.
[08/30 16:57:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1662.936523    1562.939072  2356.283543  1662.936523    0.002441  1562.939072        0.0   99.997451       99.997451       8.0          1562.939072                -1.0            -1
1    1962.936572    1662.939072  2356.283543  1962.936572  399.997500  1662.939072        0.0  299.997500      299.997500       1.0          1562.939072                 1.0         False
2    1962.939072    1762.938965  2356.283543  1962.939072  300.000000  1762.938965        0.0  200.000107      200.000000       2.0          1962.939072                 0.0         False
3    1962.939072    1844.651572  2356.283543  1962.939072    7.987500  1844.651572        0.0  118.287500      100.000000       3.0          1962.939072                 0.0         False
4    1989.501572    1962.936572  2356.283543  1989.501572  144.850000  1962.936572        0.0   26.565000       26.562500       4.0          1962.939072                 0.0         False
5    1989.501572    1962.939072  2429.721043  1989.501572    0.010000  1962.939072        0.0   26.562500        0.000000       4.0          1989.501572                 1.0         False
6    1989.501572    1989.501572  2503.158447  1989.501572    0.010000  1989.501572        0.0    0.000000      -26.562596       3.0          1989.501572                 1.0         False
7    2061.931572    2022.501572  2557.288574  2061.931572   72.430000  2022.501572        0.0   39.430000       -0.002469       1.0          1989.501572                 0.0         False
8    2088.499072    2061.934082  2557.288574  2088.499072   65.997500  2061.934082        0.0   26.564990      -73.434969       1.0          2088.499072                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=300.[0m
[08/30 16:58:00]  --------------------------------------------------------------------------------
[08/30 16:58:00]  Iteration: 52 (1 solution, 50 counterexamples)
[08/30 16:58:04]  Generator returned sat in 2.319090 secs.
[08/30 16:58:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:58:15]  Improved gap from 0.0 to 20.3125
[08/30 16:58:16]  Improved number of small numbers from 55 to 62 out of a max of 114
[08/30 16:58:16]  Verifer returned sat in 12.304293 secs.
[08/30 16:58:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1720.351562    1720.350265  2198.869873  1720.351562   20.316162  1720.350265    0.00000   0.001297       -0.001180       2.0          1720.350265                -1.0            -1
1    1740.665265    1720.352765  2278.557350  1740.665265   20.315000  1720.352765    0.00000  20.312500        0.000000       1.0          1740.665265                 0.0         False
2    1879.979797    1840.664015  2278.557350  1879.979797  159.627031  1840.664015    0.00125  39.314531       39.313281       1.0          1740.665265                 0.0         False
3    1879.979797    1840.665265  2339.244069  1879.979797    0.001250  1840.665265    0.00125  39.313281        0.000000       2.0          1879.978547                 0.0         False
4    1900.824640    1879.978547  2418.399225  1900.824640   60.158125  1879.978547    0.00125  20.844844        0.000000       3.0          1879.978547                 0.0         False
5    1900.824640    1900.823390  2498.086725  1900.824640    0.010000  1900.823390    0.00125   0.000000      -20.312500       2.0          1900.823390                 1.0         False
6    1930.909328    1921.135890  2577.774225  1930.909328   30.084688  1921.135890    0.00125   9.772187      -10.540313       1.0          1900.823390                 0.0         False
7    1976.414797    1941.448390  2640.245361  1976.414797   55.277656  1941.448390    0.00125  34.965156       -2.563708       1.0          1900.823390                 0.0         False
8    1999.823390    1978.977539  2719.400391  1999.823390   58.373750  1978.977539    0.00125  20.844601       -0.000084       1.0          1900.823390                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=50321/1280.[0m
[08/30 16:58:17]  --------------------------------------------------------------------------------
[08/30 16:58:17]  Iteration: 53 (1 solution, 51 counterexamples)
[08/30 16:58:23]  Generator returned sat in 4.585685 secs.
[08/30 16:58:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:58:24]  Improved gap from 0.0 to 100
[08/30 16:58:24]  Improved number of small numbers from 68 to 93 out of a max of 114
[08/30 16:58:24]  Verifer returned sat in 1.315007 secs.
[08/30 16:58:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1747.551758    1380.701904  2278.557129  1747.551758    0.049805  1380.701904     0.0000  366.849854      366.849795       6.0          1380.701904                -1.0            -1
1    1747.551758    1380.752197  2278.557129  1747.551758    0.049805  1380.752197     0.0000  366.799561      266.849795       3.0          1380.701904                 1.0         False
2    1747.551758    1480.702148  2278.557129  1747.551758    0.050049  1480.702148     0.0000  266.849609      166.849795       3.0          1380.701904                 1.0          True
3    1747.551758    1680.701963  2278.557129  1747.551758  266.800000  1680.701963     0.0000   66.849795       66.849795       4.0          1380.701904                 1.0          True
4    2080.901963    1780.651855  2278.557129  2080.901963  400.200000  1780.651855     0.0000  300.250107      300.200000       1.0          1380.701904                 1.0          True
5    2080.901963    1780.702148  2278.557129  2080.901963  200.100000  1780.702148     0.0000  300.199814      200.200000       2.0          2080.901963                 0.0         False
6    2080.901963    1930.526963  2278.557129  2080.901963  300.150000  1930.526963     0.0000  150.375000      100.200000       3.0          2080.901963                 1.0         False
7    2380.751963    1980.701963  2278.557129  2380.751963  450.225000  1980.701963     0.0000  400.050000      300.050000       4.0          2080.901963                 1.0         False
8    2656.039463    2080.952148  2278.557129  2656.039463  675.337500  2080.952148   108.4875  466.599814      366.850000       2.0          2080.901963                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=8679/80, 
, buffer=7337/20.[0m
[08/30 16:58:25]  --------------------------------------------------------------------------------
[08/30 16:58:25]  Iteration: 54 (1 solution, 52 counterexamples)
[08/30 16:58:32]  Generator returned sat in 5.620462 secs.
[08/30 16:58:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:58:34]  Improved number of small numbers from 47 to 68 out of a max of 113
[08/30 16:58:34]  Verifer returned sat in 1.208105 secs.
[08/30 16:58:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1780.602109    1380.552246  2278.656982  1780.602109    0.050049  1380.552246   0.000000  400.049863      400.000000       9.0          1380.552246                -1.0            -1
1    1780.602109    1380.602295  2278.656982  1780.602109    0.050293  1380.602295   0.000000  399.999814      300.000000       3.0          1380.552246                 1.0         False
2    1780.602109    1480.602295  2278.656982  1780.602109    0.050293  1480.602295   0.000000  299.999814      200.000000       3.0          1380.552246                 0.0         False
3    1780.602109    1680.451816  2278.656982  1780.602109  250.025049  1680.451816   0.000000  100.150293      100.000000       4.0          1380.552246                 0.0         False
4    2180.501914    1780.451904  2278.656982  2180.501914  500.050098  1780.451904   0.000000  400.050010      399.899805       5.0          1380.552246                 0.0         False
5    2180.501914    1780.602109  2278.656982  2180.501914  250.025049  1780.602109   0.000000  399.899805      299.899805       6.0          2180.501914                 1.0          True
6    2180.501914    1930.526963  2278.656982  2180.501914  125.012524  1930.526963   0.000000  249.974951      199.899805       3.0          2180.501914                 1.0         False
7    2180.552012    2080.602109  2278.656982  2180.552012  250.025049  2080.602109   0.000000   99.949902       99.949902       4.0          2180.501914                 0.0         False
8    2580.652207    2180.552002  2278.656982  2580.652207  500.050098  2180.552002   0.050098  400.050107      400.000000       2.0          2180.501914                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=513/10240, 
, buffer=400.[0m
[08/30 16:58:34]  --------------------------------------------------------------------------------
[08/30 16:58:34]  Iteration: 55 (1 solution, 53 counterexamples)
[08/30 16:58:39]  Generator returned sat in 2.591264 secs.
[08/30 16:58:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:58:39]  Improved gap from 0.0 to 100
[08/30 16:58:40]  Improved number of small numbers from 59 to 71 out of a max of 114
[08/30 16:58:40]  Verifer returned sat in 1.169925 secs.
[08/30 16:58:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1780.602295    1680.702109  2078.556982  1780.602295  600.399902  1680.702109        0.0   99.900186       99.900186       2.0          1680.702109                -1.0            -1
1    2281.002109    1780.702109  2078.556982  2281.002109  600.300000  1780.702109        0.1  500.200000      500.200000       1.0          2280.902109                 0.0         False
2    2380.902109    1880.701904  2078.556982  2380.902109  600.100000  1880.701904        0.1  500.100205      500.100000       2.0          2380.802109                 0.0         False
3    2380.902109    1980.602295  2078.556982  2380.902109   79.051852  1980.602295        0.1  400.199814      400.100000       3.0          2380.802109                 0.0         False
4    2380.902109    1980.702148  2078.556982  2380.902109  118.577778  1980.702148        0.1  400.099961      300.100000       4.0          2380.802109                 1.0         False
5    2380.902109    2113.902344  2078.556982  2380.902109  177.866667  2113.902344        0.1  266.899766      200.100000       5.0          2380.802109                 1.0         False
6    2380.902109    2280.702109  2078.556982  2380.902109  266.800000  2280.702109        0.1  100.100000      100.100000       6.0          2380.802109                 1.0         False
7    2681.002109    2380.702109  2078.556982  2681.002109  400.200000  2380.702109        0.1  300.200000      300.200000       6.0          2380.802109                 1.0         False
8    2981.102109    2480.701904  2078.556982  2981.102109  600.300000  2480.701904        0.2  500.200205      500.200000       2.0          2380.802109                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/10, 
, buffer=2501/5.[0m
[08/30 16:58:40]  --------------------------------------------------------------------------------
[08/30 16:58:40]  Iteration: 56 (1 solution, 54 counterexamples)
[08/30 16:58:47]  Generator returned sat in 5.201692 secs.
[08/30 16:58:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:58:54]  Improved gap from 0.0 to 12.5
[08/30 16:58:55]  Improved number of small numbers from 59 to 75 out of a max of 114
[08/30 16:58:55]  Verifer returned sat in 7.184250 secs.
[08/30 16:58:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1881.309326    1862.829590  1870.536982  1881.309326  118.480225  1862.829590        0.0  18.479736       18.179824       9.0          1862.829590                -1.0            -1
1    1981.209473    1963.129502  1870.536982  1981.209473  118.379883  1963.129502        0.0  18.079971       18.079971       1.0          1981.209473                 1.0         False
2    2081.409502    2063.129502  1870.536982  2081.409502  118.280000  2063.129502        0.1  18.180000       18.180000       1.0          2081.309502                 0.0         False
3    2181.309502    2081.409424  1870.536982  2181.309502  118.080000  2081.409424        0.1  99.800078       18.080000       1.0          2181.209502                 0.0         False
4    2181.309502    2168.709502  1952.456982  2181.309502   59.040000  2168.709502        0.1  12.500000        0.000000       2.0          2181.209502                 0.0         False
5    2198.329502    2181.209502  2035.436768  2198.329502   29.520000  2181.209502        0.1  17.020000       -0.000215       3.0          2198.229502                 0.0         False
6    2255.109502    2230.609502  2078.557129  2255.109502   73.800000  2230.609502        0.1  24.400000       -0.099854       1.0          2198.229502                 1.0         False
7    2267.609502    2255.109502  2166.056885  2267.609502   36.900000  2255.109502        0.1  12.400000       -0.100098       1.0          2267.509502                 0.0         False
8    2273.659502    2267.609619  2166.057129  2273.659502   18.450000  2267.609619        0.1   5.949883      -94.049854       1.0          2273.559502                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=909/50.[0m
[08/30 16:58:55]  --------------------------------------------------------------------------------
[08/30 16:58:55]  Iteration: 57 (1 solution, 55 counterexamples)
[08/30 16:59:04]  Generator returned sat in 7.151048 secs.
[08/30 16:59:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:59:04]  Improved gap from 0.0016666666666666668 to 100
[08/30 16:59:05]  Improved number of small numbers from 59 to 72 out of a max of 114
[08/30 16:59:05]  Verifer returned sat in 1.027086 secs.
[08/30 16:59:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1948.234375    1848.234863  1885.431566  1948.234375  100.000244  1848.234863    0.000000   99.999512       99.999456       1.0          1848.234863                -1.0            -1
1    1948.234863    1848.234919  1885.431566  1948.234863  100.000000  1848.234919    0.000000   99.999945       -0.000055       2.0          1948.234863                 0.0         False
2    2148.234919    1948.234919  1885.431566  2148.234919  300.000000  1948.234919    0.000417  199.999583       99.999583       1.0          1948.234863                 1.0         False
3    2148.237002    2148.234502  1885.431566  2148.237002  200.001667  2148.234502    0.000417    0.002083        0.001667       2.0          2148.236585                 0.0         False
4    2248.235752    2248.234919  1885.431566  2248.235752  100.000833  2248.234919    0.000417    0.000417        0.000417       1.0          2248.235335                 1.0         False
5    3098.235752    2248.235107  1885.431566  3098.235752  850.000417  2248.235107  650.001250  199.999395       99.999583       2.0          2248.235335                 0.0         False
6    3098.235752    2448.234085  1885.431566  3098.235752    0.010000  2448.234085  650.001250    0.000417       -0.000417       2.0          2448.234502                 1.0         False
7    3098.245335    2448.234919  1885.431566  3098.245335    0.010000  2448.234919  650.001250    0.009167      -99.990833       1.0          2448.234502                 1.0         False
8    3498.241169    2548.235107  1885.431566  3498.241169  400.005000  2548.235107  750.006667  199.999395       99.999583       1.0          2448.234502                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=120001/160, 
, buffer=239999/2400.[0m
[08/30 16:59:06]  --------------------------------------------------------------------------------
[08/30 16:59:06]  Iteration: 58 (1 solution, 56 counterexamples)
[08/30 16:59:12]  Generator returned sat in 4.201730 secs.
[08/30 16:59:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:59:22]  Improved gap from 0.0016666666666666668 to 26.5625
[08/30 16:59:23]  Improved number of small numbers from 59 to 66 out of a max of 114
[08/30 16:59:23]  Verifer returned sat in 11.369961 secs.
[08/30 16:59:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1828.462002    1428.462002  1885.431566  1828.462002    0.002686  1428.462002        0.0  400.000000      400.000000       5.0          1428.462002                -1.0            -1
1    1855.022002    1428.464502  1885.431566  1855.022002  426.560000  1428.464502        0.0  426.557500      326.560000       5.0          1428.462002                 0.0         False
2    1855.024502    1628.461914  1885.431566  1855.024502  426.560000  1628.461914        0.0  226.562588      226.562500       6.0          1428.462002                 0.0         False
3    1855.024502    1710.174502  1885.431566  1855.024502    7.982500  1710.174502        0.0  144.850000      126.562500       7.0          1855.024502                 0.0         False
4    1855.024502    1828.459502  1885.431566  1855.024502  144.847500  1828.459502        0.0   26.565000       26.562500       8.0          1855.024502                 0.0         False
5    1855.024502    1828.462002  1958.869066  1855.024502    0.010000  1828.462002        0.0   26.562500        0.000000       9.0          1855.024502                 1.0         False
6    1855.024502    1855.024502  2032.306396  1855.024502    0.010000  1855.024502        0.0    0.000000      -26.562669       5.0          1855.024502                 1.0         False
7    1927.454502    1888.024502  2086.436768  1927.454502   72.430000  1888.024502        0.0   39.430000       -0.002298       1.0          1855.024502                 0.0         False
8    1954.022002    1927.457031  2086.436768  1954.022002   65.997500  1927.457031        0.0   26.564971      -73.434798       1.0          1954.022002                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 16:59:24]  --------------------------------------------------------------------------------
[08/30 16:59:24]  Iteration: 59 (1 solution, 57 counterexamples)
[08/30 16:59:34]  Generator returned sat in 8.209546 secs.
[08/30 16:59:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:59:35]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/30 16:59:35]  Verifer returned sat in 0.660068 secs.
[08/30 16:59:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1628.412109    1328.462158  2185.381592  1628.412109    0.050049  1328.462158   0.000000  299.949951      299.949951       2.0          1328.462158                -1.0            -1
1    1821.273193    1428.461914  2185.381592  1821.273193  492.811035  1428.461914   0.050049  392.761230      392.760986       2.0          1328.462158                 0.0         False
2    1828.462158    1428.462158  2185.381592  1828.462158  399.950195  1428.462158   0.050049  399.949951      299.949951       3.0          1828.412109                 0.0         False
3    2021.223145    1628.461914  2185.381592  2021.223145  592.710938  1628.461914   0.050049  392.711182      392.710938       3.0          1828.412109                 0.0         False
4    2021.223145    1728.462158  2185.381592  2021.223145  296.355469  1728.462158   0.050049  292.710938      292.710938       4.0          2021.173096                 0.0         False
5    2173.045410    1828.461914  2185.381592  2173.045410  444.533203  1828.461914   0.050049  344.533447      344.533203       3.0          2021.173096                 1.0         False
6    2173.045410    1828.512207  2185.381592  2173.045410  222.266602  1828.512207   0.050049  344.483154      244.533203       4.0          2172.995361                 0.0         False
7    2173.045410    2021.173096  2185.381592  2173.045410  333.399902  2021.173096   0.050049  151.822266      144.533203       5.0          2172.995361                 1.0         False
8    2521.322998    2121.173340  2185.381592  2521.322998  500.099854  2121.173340   0.099854  400.049805      392.760986       4.0          2172.995361                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=51/1024, 
, buffer=1608749/4096.[0m
[08/30 16:59:35]  --------------------------------------------------------------------------------
[08/30 16:59:35]  Iteration: 60 (1 solution, 58 counterexamples)
[08/30 16:59:39]  Generator returned sat in 1.966720 secs.
[08/30 16:59:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:59:40]  Improved number of small numbers from 59 to 75 out of a max of 113
[08/30 16:59:40]  Verifer returned sat in 1.027505 secs.
[08/30 16:59:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1519.818359     719.918145  2793.925605  1519.818359  2000.599854   719.918145        0.0   799.900215      799.900215       3.0           719.918145                -1.0            -1
1    2720.518145     819.917969  2793.925605  2720.518145  2000.600000   819.917969        0.1  1900.500176     1900.500000       3.0           719.918145                 0.0         False
2    2720.518145     919.917969  2793.925605  2720.518145   276.622314   919.917969        0.1  1800.500176     1800.500000       4.0          2720.418145                 0.0         False
3    2720.518145    1019.917969  2793.925605  2720.518145   276.622222  1019.917969        0.1  1700.500176     1700.500000       5.0          2720.418145                 0.0         False
4    2720.518145    1119.917969  2793.925605  2720.518145   414.933333  1119.917969        0.1  1600.500176     1600.500000       6.0          2720.418145                 1.0         False
5    2720.518145    1119.918213  2793.925605  2720.518145   622.400000  1119.918213        0.1  1600.499932     1500.500000       6.0          2720.418145                 1.0         False
6    2720.518145    1319.917969  2793.925605  2720.518145   933.600000  1319.917969        0.1  1400.500176     1400.500000       7.0          2720.418145                 1.0         False
7    2720.518145    1319.918145  2793.925605  2720.518145  1400.400000  1319.918145        0.1  1400.500000     1300.500000       8.0          2720.418145                 1.0         False
8    3420.618145    1519.917969  2793.925605  3420.618145  2100.600000  1519.917969        0.2  1900.500176     1900.500000       8.0          2720.418145                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/10, 
, buffer=3801/2.[0m
[08/30 16:59:41]  --------------------------------------------------------------------------------
[08/30 16:59:41]  Iteration: 61 (1 solution, 59 counterexamples)
[08/30 16:59:50]  Generator returned sat in 7.671122 secs.
[08/30 16:59:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 16:59:52]  Improved gap from 0.0008333333333333334 to 31.25
[08/30 16:59:52]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/30 16:59:52]  Verifer returned sat in 1.833971 secs.
[08/30 16:59:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2951.458252    2520.208008  2793.925537  2951.458252    0.099854  2520.208008        0.0  431.250244          431.25       2.0          2520.208008                -1.0            -1
1    2951.458252    2620.208008  2793.925537  2951.458252  331.249756  2620.208008        0.0  331.250244          331.25       2.0          2520.208008                 0.0         False
2    2951.458252    2720.208252  2793.925537  2951.458252  331.149902  2720.208252        0.0  231.250000          231.25       3.0          2951.458252                 0.0         False
3    2951.458252    2820.208252  2793.925537  2951.458252   65.625000  2820.208252        0.0  131.250000          131.25       4.0          2951.458252                 0.0         False
4    2951.458252    2920.107910  2793.925537  2951.458252   32.812500  2920.107910        0.0   31.350342           31.25       5.0          2951.458252                 0.0         False
5    2951.458252    2920.208252  2862.675537  2951.458252   16.406250  2920.208252        0.0   31.250000            0.00       6.0          2951.458252                 0.0         False
6    2951.458252    2951.458252  2931.425537  2951.458252    8.203125  2951.458252        0.0    0.000000          -31.25       7.0          2951.458252                 0.0         False
7    3017.083252    2982.708252  2997.050537  3017.083252   65.625000  2982.708252        0.0   34.375000            0.00       1.0          2951.458252                 1.0         False
8    3017.083252    3017.083252  3065.800537  3017.083252   32.812500  3017.083252        0.0    0.000000          -31.25       2.0          3017.083252                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1725/4.[0m
[08/30 16:59:53]  --------------------------------------------------------------------------------
[08/30 16:59:53]  Iteration: 62 (1 solution, 60 counterexamples)
[08/30 16:59:57]  Generator returned sat in 1.951295 secs.
[08/30 16:59:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:00:15]  Improved gap from 28.80029296875 to 29.6875
[08/30 17:00:16]  Improved number of small numbers from 66 to 82 out of a max of 114
[08/30 17:00:16]  Verifer returned sat in 19.454742 secs.
[08/30 17:00:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1994.660058    1464.972656  2762.675537  1994.660058   0.024414  1464.972656        0.0  529.687401      429.687500       2.0          1464.972656                -1.0            -1
1    1994.660058    1564.972656  2762.675537  1994.660058   0.048584  1564.972656        0.0  429.687401      329.687500       2.0          1464.972656                 0.0         False
2    1994.660058    1764.972412  2762.675537  1994.660058   0.048828  1764.972412        0.0  229.687645      229.687500       3.0          1464.972656                 0.0         False
3    1994.660058    1864.835839  2762.675537  1994.660058  69.239583  1864.835839        0.0  129.824219      129.687500       4.0          1464.972656                 0.0         False
4    1994.660058    1964.948242  2762.675537  1994.660058  34.619792  1964.948242        0.0   29.711815       29.687500       5.0          1994.660058                 0.0         False
5    1994.660058    1964.972558  2832.988037  1994.660058  17.309896  1964.972558        0.0   29.687500        0.000000       6.0          1994.660058                 0.0         False
6    1994.660058    1994.660058  2903.300293  1994.660058   8.654948  1994.660058        0.0    0.000000      -29.687744       7.0          1994.660058                 0.0         False
7    2063.899641    2030.085405  2963.748291  2063.899641  69.239583  2030.085405        0.0   33.814236       -0.000163       1.0          1994.660058                 1.0         False
8    2064.705196    2063.924072  2963.748535  2064.705196  34.619792  2063.924072        0.0    0.781124      -99.194363       1.0          2064.705196                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=6875/16.[0m
[08/30 17:00:17]  --------------------------------------------------------------------------------
[08/30 17:00:17]  Iteration: 63 (1 solution, 61 counterexamples)
[08/30 17:00:24]  Generator returned sat in 5.137209 secs.
[08/30 17:00:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:00:39]  Improved gap from 0.0 to 26.5625
[08/30 17:00:40]  Improved number of small numbers from 59 to 75 out of a max of 114
[08/30 17:00:40]  Verifer returned sat in 16.362978 secs.
[08/30 17:00:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2037.343391    1637.344641  2690.303454  2037.343391    0.001465  1637.344641        0.0  399.998750      399.998750       8.0          1637.344641                -1.0            -1
1    2037.344641    1737.344482  2690.303454  2037.344641  400.000000  1737.344482        0.0  300.000158      300.000000       2.0          1637.344641                 1.0         False
2    2063.905762    1737.344727  2690.303454  2063.905762  326.561279  1737.344727        0.0  326.561035      226.561121       3.0          2063.905762                 0.0         False
3    2063.905762    1921.719224  2690.303454  2063.905762    0.001250  1921.719224        0.0  142.186538      126.561121       4.0          2063.905762                 0.0         False
4    2063.907141    2037.343391  2690.303454  2063.907141  142.187917  2037.343391        0.0   26.563750       26.562500       5.0          2063.905762                 0.0         False
5    2063.907141    2037.344641  2763.740954  2063.907141    0.010000  2037.344641        0.0   26.562500        0.000000       5.0          2063.907141                 1.0         False
6    2063.907141    2063.907141  2837.178223  2063.907141    0.010000  2063.907141        0.0    0.000000      -26.562731       3.0          2063.907141                 1.0         False
7    2135.006099    2097.352071  2892.641846  2135.006099   71.098958  2097.352071        0.0   37.654028       -0.000150       1.0          2063.907141                 0.0         False
8    2162.905891    2136.342285  2892.641846  2162.905891   65.553819  2136.342285        0.0   26.563606      -72.100358       1.0          2162.905891                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1638395/4096.[0m
[08/30 17:00:41]  --------------------------------------------------------------------------------
[08/30 17:00:41]  Iteration: 64 (1 solution, 62 counterexamples)
[08/30 17:00:53]  Generator returned sat in 9.713219 secs.
[08/30 17:00:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:00:53]  Improved gap from 0.0 to 100
[08/30 17:00:54]  Improved number of small numbers from 59 to 81 out of a max of 114
[08/30 17:00:54]  Verifer returned sat in 1.261522 secs.
[08/30 17:00:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2163.697510    1663.697266  2663.850804  2163.697510    0.100098  1663.697266        0.0  500.000244      499.900219       3.0          1663.697266                -1.0            -1
1    2163.797363    1663.797363  2663.850804  2163.797363  500.100098  1663.797363        0.0  500.000000      400.000073       3.0          1663.697266                 0.0         False
2    2163.797363    1863.797291  2663.850804  2163.797363  500.000000  1863.797291        0.0  300.000073      300.000073       4.0          2163.797363                 0.0         False
3    2397.263957    1863.797363  2663.850804  2397.263957  533.466667  1863.797363        0.0  533.466594      433.466667       5.0          2163.797363                 0.0         False
4    2397.263957    1997.163818  2663.850804  2397.263957  266.733333  1997.163818        0.0  400.100139      333.466667       6.0          2397.263957                 0.0         False
5    2397.263957    2163.697291  2663.850804  2397.263957  400.100000  2163.697291        0.0  233.566667      233.466667       7.0          2397.263957                 1.0         False
6    2763.847291    2163.797291  2663.850804  2763.847291  600.150000  2163.797291        0.0  600.050000      500.050000       6.0          2397.263957                 1.0         False
7    3064.022291    2363.797119  2663.850804  3064.022291  900.225000  2363.797119        0.0  700.225171      700.225000       5.0          2397.263957                 1.0         False
8    3064.022291    2363.797363  2663.850804  3064.022291  450.112500  2363.797363        0.0  700.224927      600.225000       6.0          3064.022291                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=2868531/4096.[0m
[08/30 17:00:55]  --------------------------------------------------------------------------------
[08/30 17:00:55]  Iteration: 65 (1 solution, 63 counterexamples)
[08/30 17:00:59]  Generator returned sat in 2.841574 secs.
[08/30 17:00:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:01:14]  Improved gap from 0.0008333333333333334 to 26.5625
[08/30 17:01:15]  Improved number of small numbers from 35 to 43 out of a max of 114
[08/30 17:01:15]  Verifer returned sat in 15.879273 secs.
[08/30 17:01:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2263.797363    1663.798395  2663.850804  2263.797363    0.001221  1663.798395  199.998968  400.000000      400.000000       3.0          1663.798395                -1.0            -1
1    2263.797363    1763.798395  2663.850804  2263.797363  327.706543  1763.798395  199.998968  300.000000      300.000000       3.0          1663.798395                 0.0         False
2    2291.502720    1863.798340  2663.850804  2291.502720  327.705357  1863.798340  199.998968  227.705412      227.705357       4.0          2091.503752                 0.0         False
3    2291.502720    1948.935717  2663.850804  2291.502720    0.001250  1948.935717  199.998968  142.568036      127.705357       5.0          2091.503752                 0.0         False
4    2291.503970    2063.797145  2663.850804  2291.503970  142.569286  2063.797145  199.998968   27.707857       27.706607       6.0          2091.503752                 0.0         False
5    2291.503970    2063.798395  2736.144197  2291.503970    0.010000  2063.798395  199.998968   27.706607        0.000000       7.0          2091.505002                 1.0         False
6    2291.503970    2091.505002  2809.581697  2291.503970    0.010000  2091.505002  199.998968    0.000000      -26.562500       3.0          2091.505002                 1.0         False
7    2362.793613    2118.067502  2864.853516  2362.793613   71.289643  2118.067502  199.998968   44.727143       -0.001038       1.0          2091.505002                 0.0         False
8    2380.846470    2162.795898  2938.290771  2380.846470   62.780000  2162.795898  199.998968   18.051604       -8.510925       1.0          2180.847502                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 17:01:16]  --------------------------------------------------------------------------------
[08/30 17:01:16]  Iteration: 66 (1 solution, 64 counterexamples)
[08/30 17:01:25]  Generator returned sat in 7.366995 secs.
[08/30 17:01:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:01:28]  Verifer returned unsat in 2.588515 secs.
[08/30 17:01:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:01:28]  --------------------------------------------------------------------------------
[08/30 17:01:28]  Iteration: 67 (2 solution, 64 counterexamples)
[08/30 17:01:33]  Generator returned sat in 2.941001 secs.
[08/30 17:01:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:01:36]  Improved gap from 0.0 to 29.6875
[08/30 17:01:37]  Improved number of small numbers from 59 to 73 out of a max of 114
[08/30 17:01:37]  Verifer returned sat in 3.370169 secs.
[08/30 17:01:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2621.230082    2191.542480  2136.106618  2621.230082    0.024306  2191.542480        0.0  429.687601      429.687500       9.0          2191.542480                -1.0            -1
1    2621.230082    2191.542725  2136.106618  2621.230082  429.663086  2191.542725        0.0  429.687357      329.687500       3.0          2191.542480                 1.0         False
2    2621.230082    2391.542480  2136.106618  2621.230082  429.638672  2391.542480        0.0  229.687601      229.687500       4.0          2621.230082                 0.0         False
3    2621.230082    2491.542582  2136.106618  2621.230082   70.333333  2491.542582        0.0  129.687500      129.687500       5.0          2621.230082                 0.0         False
4    2621.230082    2591.518066  2136.106618  2621.230082   35.166667  2591.518066        0.0   29.712015       29.687500       6.0          2621.230082                 0.0         False
5    2621.230082    2591.542582  2206.419118  2621.230082   17.583333  2591.542582        0.0   29.687500        0.000000       7.0          2621.230082                 0.0         False
6    2621.230082    2621.230082  2266.842773  2621.230082    8.791667  2621.230082        0.0    0.000000      -39.576344       8.0          2621.230082                 0.0         False
7    2690.469665    2660.806470  2337.155229  2690.469665   69.239583  2660.806470        0.0   29.663194       -0.024306       1.0          2621.230082                 1.0         False
8    2695.426262    2690.494141  2407.467529  2695.426262   34.619792  2690.494141        0.0    4.932121      -24.755408       1.0          2695.426262                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=6875/16.[0m
[08/30 17:01:37]  --------------------------------------------------------------------------------
[08/30 17:01:37]  Iteration: 68 (2 solution, 65 counterexamples)
[08/30 17:01:44]  Generator returned sat in 4.771439 secs.
[08/30 17:01:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:01:44]  Improved gap from 0.0 to 100
[08/30 17:01:45]  Improved number of small numbers from 65 to 69 out of a max of 114
[08/30 17:01:45]  Verifer returned sat in 1.127894 secs.
[08/30 17:01:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2321.229248    2321.221162  2006.428037  2321.229248    0.000977  2321.221162    0.000000    0.008086        0.008086       9.0          2321.221162                -1.0            -1
1    2421.221162    2421.220225  2006.428037  2421.221162  100.000000  2421.220225    0.000000    0.000937        0.000000       1.0          2321.221162                 1.0         False
2    2521.230225    2421.222100  2006.428037  2521.230225  100.010000  2421.222100    0.000937  100.007188        0.008125       1.0          2321.221162                 0.0         False
3    2521.230225    2521.221787  2006.428037  2521.230225  100.001221  2521.221787    0.000937    0.007500      -99.991875       2.0          2521.229287                 0.0         False
4    2621.223037    2621.221162  2006.428037  2621.223037  100.000313  2621.221162    0.000937    0.000937      -99.999062       1.0          2621.222100                 1.0         False
5    2821.223037    2821.221162  2006.428037  2821.223037  200.000937  2821.221162    0.000937    0.000937        0.000937       1.0          2621.222100                 0.0         False
6    3221.221162    2921.221162  2006.428037  3221.221162  399.999062  2921.221162  299.991875    0.008125        0.008125       1.0          2621.222100                 0.0         False
7    3221.223037    2921.230225  2006.428037  3221.223037    0.010000  2921.230225  299.991875    0.000937      -99.990000       1.0          2921.231162                 0.0         False
8    3521.231162    3021.221191  2006.428037  3521.231162  300.009063  3021.221191  400.001875  100.008096        0.008125       1.0          2921.231162                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1280003/3200, 
, buffer=13/1600.[0m
[08/30 17:01:46]  --------------------------------------------------------------------------------
[08/30 17:01:46]  Iteration: 69 (2 solution, 66 counterexamples)
[08/30 17:01:58]  Generator returned sat in 10.670468 secs.
[08/30 17:01:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:01]  Improved gap from 0.0 to 31.25
[08/30 17:02:02]  Improved number of small numbers from 61 to 114 out of a max of 114
[08/30 17:02:02]  Verifer returned sat in 3.089638 secs.
[08/30 17:02:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2590.019043    2390.069092  1937.580078  2590.019043  431.299805  2390.069092   0.000000  199.949951      199.949951       5.0          2390.069092                -1.0            -1
1    2821.369141    2390.069336  1937.580078  2821.369141  431.300049  2390.069336   0.050049  431.249756      331.250000       3.0          2390.069092                 0.0         False
2    2821.369141    2590.069092  1937.580078  2821.369141  132.949951  2590.069092   0.050049  231.250000      231.250000       2.0          2821.319092                 0.0         False
3    2821.369141    2690.069092  1937.580078  2821.369141  132.900000  2690.069092   0.050049  131.250000      131.250000       3.0          2821.319092                 0.0         False
4    2821.369141    2788.044434  1937.580078  2821.369141   66.450000  2788.044434   0.050049   33.274658       31.250000       4.0          2821.319092                 0.0         False
5    2821.369141    2790.069092  2006.330078  2821.369141   33.225000  2790.069092   0.050049   31.250000        0.000000       5.0          2821.319092                 0.0         False
6    2821.369141    2821.319092  2075.079834  2821.369141   16.612500  2821.319092   0.050049    0.000000      -31.250244       6.0          2821.319092                 0.0         False
7    2886.994141    2854.181885  2140.705078  2886.994141   65.625000  2854.181885   0.050049   32.762207        0.000000       1.0          2821.319092                 1.0         False
8    2887.044434    2886.994141  2209.405029  2887.044434   32.812500  2886.994141   0.050049    0.000244      -31.249756       1.0          2886.994385                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1325/4.[0m
[08/30 17:02:02]  --------------------------------------------------------------------------------
[08/30 17:02:02]  Iteration: 70 (2 solution, 67 counterexamples)
[08/30 17:02:11]  Generator returned sat in 6.947719 secs.
[08/30 17:02:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:12]  Improved gap from 0.000625 to 100
[08/30 17:02:12]  Improved number of small numbers from 68 to 70 out of a max of 114
[08/30 17:02:12]  Verifer returned sat in 0.937877 secs.
[08/30 17:02:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2421.366455    2321.367891  2006.275029  2421.366455  199.999756  2321.367891    0.00000   99.998564       99.992314       6.0          2321.367891                -1.0            -1
1    2521.367891    2321.374141  2006.275029  2521.367891  200.000000  2321.374141    0.00125  199.992500       99.992500       2.0          2321.367891                 1.0         False
2    2521.375391    2521.374141  2006.275029  2521.375391  200.000000  2521.374141    0.00125    0.000000        0.000000       1.0          2321.367891                 1.0          True
3    2588.003724    2521.396641  2006.275029  2588.003724   66.628333  2521.396641    0.00125   66.605833      -33.371667       1.0          2588.002474                 0.0         False
4    2821.369141    2621.374141  2006.275029  2821.369141  299.971250  2621.374141    0.00250  199.992500       99.992500       1.0          2588.002474                 0.0         False
5    2821.369141    2821.365391  2006.275029  2821.369141    0.010000  2821.365391    0.00250    0.001250       -0.007500       2.0          2821.366641                 0.0         False
6    2821.377891    2821.374141  2006.275029  2821.377891    0.010000  2821.374141    0.00250    0.001250      -99.998750       1.0          2821.366641                 1.0         False
7    3121.369141    2921.374141  2006.275029  3121.369141  299.992500  2921.374141    0.00250  199.992500       99.992500       1.0          2821.366641                 0.0         False
8    3671.365391    3021.374141  2006.275029  3671.365391  749.988750  3021.374141  449.99875  199.992500       99.992500       2.0          2821.366641                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=359997/800, 
, buffer=39997/400.[0m
[08/30 17:02:13]  --------------------------------------------------------------------------------
[08/30 17:02:13]  Iteration: 71 (2 solution, 68 counterexamples)
[08/30 17:02:22]  Generator returned sat in 6.883363 secs.
[08/30 17:02:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:23]  Improved number of small numbers from 63 to 63 out of a max of 113
[08/30 17:02:23]  Verifer returned sat in 1.331843 secs.
[08/30 17:02:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2421.366455    2321.367891  2006.275029  2421.366455  199.999756  2321.367891    0.000000   99.998564       99.992314       6.0          2321.367891                -1.0            -1
1    2521.367891    2321.374141  2006.275029  2521.367891  200.000000  2321.374141    0.001250  199.992500       99.992500       3.0          2321.367891                 1.0         False
2    2521.375391    2521.374141  2006.275029  2521.375391  200.000000  2521.374141    0.001250    0.000000        0.000000       1.0          2321.367891                 1.0          True
3    2621.317891    2521.396641  2006.275029  2621.317891   99.942500  2521.396641    0.001250   99.920000       -0.057500       1.0          2621.316641                 0.0         False
4    2821.369141    2621.374141  2006.275029  2821.369141  299.971250  2621.374141    0.002500  199.992500       99.992500       1.0          2621.316641                 0.0         False
5    2821.369141    2821.365391  2006.275029  2821.369141    0.010000  2821.365391    0.002500    0.001250       -0.007500       2.0          2821.366641                 0.0         False
6    2821.377891    2821.374141  2006.275029  2821.377891    0.010000  2821.374141    0.002500    0.001250      -99.998750       1.0          2821.366641                 1.0         False
7    3121.364141    2971.377153  2006.275029  3121.364141  299.987500  2971.377153    0.002500  149.984487       99.987500       1.0          2821.366641                 0.0         False
8    3621.370166    3021.374141  2006.275029  3621.370166  649.990513  3021.374141  400.003525  199.992500       99.992500       2.0          2821.366641                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=8192021/20480, 
, buffer=39997/400.[0m
[08/30 17:02:24]  --------------------------------------------------------------------------------
[08/30 17:02:24]  Iteration: 72 (2 solution, 69 counterexamples)
[08/30 17:02:33]  Generator returned sat in 6.348561 secs.
[08/30 17:02:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:33]  Improved gap from 0.0 to 100
[08/30 17:02:33]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/30 17:02:33]  Verifer returned sat in 0.679657 secs.
[08/30 17:02:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2421.874023    2321.674316  2006.275146  2421.874023  200.100098  2321.674316    0.000000  100.199707        0.199707       1.0          2321.674316                -1.0            -1
1    2521.674072    2521.574219  2006.275146  2521.674072  199.999756  2521.574219    0.000000    0.099854       -0.000244       1.0          2521.674072                 0.0         False
2    2621.974121    2521.674316  2006.275146  2621.974121  100.399902  2521.674316    0.099854  100.199951        0.199951       1.0          2621.874268                 0.0         False
3    2921.974365    2621.874023  2006.275146  2921.974365  400.200195  2621.874023  200.100098  100.000244        0.199951       2.0          2621.874268                 0.0         False
4    3022.074219    2821.624268  2006.275146  3022.074219  200.100098  2821.624268  200.199951    0.250000        0.199951       1.0          2821.874268                 1.0         False
5    3121.874268    2921.674316  2006.275146  3121.874268  100.050049  2921.674316  200.199951    0.000000        0.000000       1.0          2921.674316                 0.0         False
6    3521.874268    2921.773926  2006.275146  3521.874268  400.000000  2921.773926  500.000000  100.100342        0.199951       1.0          2921.674316                 0.0         False
7    3621.773926    3071.899170  2006.275146  3621.773926  200.000000  3071.899170  500.000000   49.874756        0.099609       1.0          3121.773926                 0.0         False
8    3822.174072    3121.874268  2006.275146  3822.174072  250.274902  3121.874268  600.299805  100.000000        0.199951       1.0          3121.773926                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=1638809/4096, 
, buffer=819/4096.[0m
[08/30 17:02:34]  --------------------------------------------------------------------------------
[08/30 17:02:34]  Iteration: 73 (2 solution, 70 counterexamples)
[08/30 17:02:38]  Generator returned sat in 1.617778 secs.
[08/30 17:02:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:39]  Improved gap from 0.0 to 31.25
[08/30 17:02:40]  Improved number of small numbers from 66 to 75 out of a max of 114
[08/30 17:02:40]  Verifer returned sat in 1.749280 secs.
[08/30 17:02:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2521.956543    2403.207246  2006.275146  2521.956543    0.001465  2403.207246    0.00000  118.749297       18.749297       1.0          2403.207246                -1.0            -1
1    2603.207246    2571.957246  2006.275146  2603.207246  200.000000  2571.957246    0.00000   31.250000        0.000000       1.0          2403.207246                 0.0         False
2    2721.957871    2703.207246  2006.275146  2721.957871  150.000625  2703.207246    0.00125   18.749375       18.749375       1.0          2721.956621                 0.0         False
3    2721.957871    2703.208496  2075.023896  2721.957871    0.001250  2703.208496    0.00125   18.748125      -12.501875       2.0          2721.956621                 0.0         False
4    2853.210371    2832.335371  2075.023896  2853.210371  150.000625  2832.335371    0.00250   20.872500       18.749375       1.0          2721.956621                 1.0         False
5    2853.210371    2834.458496  2143.773682  2853.210371    0.010000  2834.458496    0.00250   18.749375      -12.500840       2.0          2853.207871                 0.0         False
6    2900.086621    2867.270264  2209.398271  2900.086621   65.625625  2867.270264    0.00250   32.813857        0.000000       1.0          2853.207871                 1.0         False
7    2900.086621    2900.084121  2278.148193  2900.086621   32.812812  2900.084121    0.00250    0.000000      -31.250078       2.0          2900.084121                 0.0         False
8    2933.960996    2931.334229  2278.148193  2933.960996   33.874375  2931.334229    0.00250    2.624268      -97.375703       1.0          2900.084121                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=29999/1600.[0m
[08/30 17:02:40]  --------------------------------------------------------------------------------
[08/30 17:02:40]  Iteration: 74 (2 solution, 71 counterexamples)
[08/30 17:02:44]  Generator returned sat in 1.888021 secs.
[08/30 17:02:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:47]  Improved gap from 0.0 to 31.25
[08/30 17:02:48]  Improved number of small numbers from 61 to 68 out of a max of 114
[08/30 17:02:48]  Verifer returned sat in 3.339909 secs.
[08/30 17:02:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2400.045166    2281.299746  2009.432021  2400.045166  218.748291  2281.299746    0.00000  118.745420       18.747920       3.0          2281.299746                -1.0            -1
1    2500.046621    2381.297246  2009.432021  2500.046621  218.746875  2381.297246    0.00125  118.748125       18.748125       2.0          2500.045371                 1.0         False
2    2600.045371    2581.295996  2009.432021  2600.045371  218.746875  2581.295996    0.00125   18.748125       18.746875       1.0          2500.045371                 1.0         False
3    2600.045371    2581.297246  2078.182021  2600.045371    0.001250  2581.297246    0.00125   18.746875      -12.503125       2.0          2600.044121                 0.0         False
4    2731.297871    2710.429121  2078.182021  2731.297871  149.999375  2710.429121    0.00250   20.866250       18.748125       1.0          2600.044121                 1.0         False
5    2731.297871    2712.547246  2146.932021  2731.297871    0.010000  2712.547246    0.00250   18.748125      -12.501875       2.0          2731.295371                 0.0         False
6    2778.180371    2743.797363  2212.551396  2778.180371   65.630625  2743.797363    0.00250   34.380508        0.000000       1.0          2731.295371                 1.0         False
7    2778.180371    2778.177871  2281.301396  2778.180371   32.815312  2778.177871    0.00250    0.000000      -31.250000       2.0          2778.177871                 0.0         False
8    2828.462402    2809.427979  2281.301514  2828.462402   50.282031  2809.427979    0.00250   19.031924      -80.967852       1.0          2778.177871                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=29997/1600.[0m
[08/30 17:02:48]  --------------------------------------------------------------------------------
[08/30 17:02:48]  Iteration: 75 (2 solution, 72 counterexamples)
[08/30 17:02:57]  Generator returned sat in 6.073908 secs.
[08/30 17:02:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:02:57]  Improved gap from 0.01125 to 100
[08/30 17:02:59]  Improved number of small numbers from 41 to 48 out of a max of 114
[08/30 17:02:59]  Verifer returned sat in 1.742693 secs.
[08/30 17:02:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2200.055176    2100.055996  2046.942334  2200.055176  199.999756  2100.055996    0.000000   99.999180        0.000586       1.0          2100.055996                -1.0            -1
1    2300.055371    2300.053965  2046.942334  2300.055371  199.999375  2300.053965    0.000156    0.001250        0.000625       1.0          2300.055215                 0.0         False
2    2500.053340    2300.055371  2046.942334  2500.053340  199.999219  2300.055371   99.998125   99.999844        0.000625       1.0          2400.055215                 0.0         False
3    2600.052559    2400.055215  2046.942334  2600.052559  199.999063  2400.055215   99.998125   99.999219       -0.000156       2.0          2500.054434                 0.0         False
4    2600.052871    2500.054590  2046.942334  2600.052871   99.999531  2500.054590   99.998125    0.000156      -99.999844       1.0          2500.054746                 1.0         False
5    2800.053340    2700.054590  2046.942334  2800.053340  200.000625  2700.054590   99.998125    0.000625        0.000625       1.0          2500.054746                 0.0         False
6    3200.051934    2800.045840  2046.942334  3200.051934  399.999219  2800.045840  399.996719    0.009375        0.000625       1.0          2500.054746                 0.0         False
7    3200.052559    2800.055684  2046.942334  3200.052559    0.010000  2800.055684  399.996719    0.000156      -99.998750       1.0          2800.055840                 0.0         False
8    3500.053496    2900.054688  2046.942334  3500.053496  300.001094  2900.054688  499.998281  100.000527        0.000625       1.0          2800.055840                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2560001/6400, 
, buffer=1/1600.[0m
[08/30 17:02:59]  --------------------------------------------------------------------------------
[08/30 17:02:59]  Iteration: 76 (2 solution, 73 counterexamples)
[08/30 17:03:05]  Generator returned sat in 3.125029 secs.
[08/30 17:03:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:03:06]  Improved number of small numbers from 58 to 62 out of a max of 113
[08/30 17:03:06]  Verifer returned sat in 1.286210 secs.
[08/30 17:03:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1385.381348    1300.193574  2046.942334  1385.381348  299.999756  1300.193574    0.000000   85.187773       85.187773       1.0          1300.193574                -1.0            -1
1    1600.143574    1385.431537  2046.942334  1600.143574  299.950000  1385.431537    0.050000  214.662037      199.900000       1.0          1600.093574                 0.0         False
2    1600.193574    1489.115796  2046.942334  1600.193574  214.712037  1489.115796    0.050000  111.027778       99.950000       2.0          1600.143574                 0.0         False
3    1800.193574    1600.193574  2046.942334  1800.193574  311.027778  1600.193574    0.100000  199.900000      199.900000       1.0          1600.143574                 1.0         False
4    1800.193574    1600.193574  2046.942334  1800.193574  155.513889  1600.193574    0.100000  199.900000       99.900000       1.0          1800.093574                 0.0         False
5    2000.193574    1800.193574  2046.942334  2000.193574  399.900000  1800.193574    0.100000  199.900000      199.900000       1.0          1800.093574                 0.0         False
6    2466.860241    1900.193574  2046.942334  2466.860241  666.566667  1900.193574  366.766667  199.900000      199.900000       2.0          1800.093574                 0.0         False
7    2600.243574    2000.143799  2046.942334  2600.243574  333.283333  2000.143799  400.150000  199.949775      199.900000       2.0          2200.093574                 1.0          True
8    2600.243574    2000.193574  2046.942334  2600.243574  166.641667  2000.193574  400.150000  199.900000       99.900000       3.0          2200.093574                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=8001/20, 
, buffer=1999/10.[0m
[08/30 17:03:07]  --------------------------------------------------------------------------------
[08/30 17:03:07]  Iteration: 77 (2 solution, 74 counterexamples)
[08/30 17:03:12]  Generator returned sat in 3.273602 secs.
[08/30 17:03:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:03:21]  Improved gap from 0.0008333333333333334 to 21.875
[08/30 17:03:22]  Improved number of small numbers from 76 to 91 out of a max of 114
[08/30 17:03:22]  Verifer returned sat in 9.222493 secs.
[08/30 17:03:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2100.188721    1708.179199  1638.956709  2100.188721    0.099854  1708.179199        0.0  392.009521      392.009521       3.0          1708.179199                -1.0            -1
1    2108.179199    1808.179199  1638.956709  2108.179199  400.000000  1808.179199        0.0  300.000000      300.000000       3.0          1708.179199                 0.0         False
2    2113.669922    1908.179199  1638.956709  2113.669922  305.490723  1908.179199        0.0  205.490723      205.490723       4.0          2113.669922                 0.0         False
3    2113.669922    2008.179199  1638.956709  2113.669922  120.675000  2008.179199        0.0  105.490723      105.490723       5.0          2113.669922                 0.0         False
4    2113.669922    2100.188574  1638.956709  2113.669922   60.337500  2100.188574        0.0   13.481348        5.490723       6.0          2113.669922                 1.0         False
5    2130.357324    2108.179199  1716.778584  2130.357324   30.168750  2108.179199        0.0   22.178125        0.000000       5.0          2130.357324                 1.0         False
6    2130.357324    2130.357324  1794.903584  2130.357324   15.084375  2130.357324        0.0    0.000000      -21.875000       2.0          2130.357324                 1.0         False
7    2198.988574    2152.232324  1848.047363  2198.988574   68.631250  2152.232324        0.0   46.756250       -0.099971       1.0          2130.357324                 0.0         False
8    2212.569824    2199.088623  1848.047363  2212.569824   60.337500  2199.088623        0.0   13.481201      -86.518721       1.0          2212.569824                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1605671/4096.[0m
[08/30 17:03:22]  --------------------------------------------------------------------------------
[08/30 17:03:22]  Iteration: 78 (2 solution, 75 counterexamples)
[08/30 17:03:31]  Generator returned sat in 6.897966 secs.
[08/30 17:03:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:03:37]  Improved gap from 0.0 to 21.875
[08/30 17:03:37]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/30 17:03:37]  Verifer returned sat in 6.005918 secs.
[08/30 17:03:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2467.741455    2067.741455  1279.394287  2467.741455    0.099854  2067.741455        0.0  400.000000      400.000000       6.0          2067.741455                -1.0            -1
1    2467.741455    2167.741455  1279.394287  2467.741455    0.099854  2167.741455        0.0  300.000000      300.000000       6.0          2067.741455                 0.0         False
2    2489.616455    2267.741455  1279.394287  2489.616455  321.875000  2267.741455        0.0  221.875000      221.875000       7.0          2067.741455                 0.0         False
3    2489.616455    2367.741455  1279.394287  2489.616455  120.839844  2367.741455        0.0  121.875000      121.875000       8.0          2489.616455                 0.0         False
4    2489.616455    2459.306641  1279.394287  2489.616455   60.419922  2459.306641        0.0   30.309814       21.875000       9.0          2489.616455                 1.0         False
5    2489.616455    2467.741455  1357.519287  2489.616455   30.209961  2467.741455        0.0   21.875000        0.000000       9.0          2489.616455                 1.0         False
6    2489.616455    2489.616455  1435.644287  2489.616455   15.104980  2489.616455        0.0    0.000000      -21.875000       5.0          2489.616455                 1.0         False
7    2558.106445    2511.491455  1488.929199  2558.106445   68.489990  2511.491455        0.0   46.614990       -0.100098       1.0          2489.616455                 0.0         False
8    2571.828857    2558.206543  1488.929443  2571.828857   60.337402  2558.206543        0.0   13.622314      -86.377441       1.0          2571.828857                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 17:03:38]  --------------------------------------------------------------------------------
[08/30 17:03:38]  Iteration: 79 (2 solution, 76 counterexamples)
[08/30 17:03:48]  Generator returned sat in 7.802554 secs.
[08/30 17:03:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:03:49]  Improved gap from 0.00125 to 100
[08/30 17:03:50]  Improved number of small numbers from 59 to 67 out of a max of 114
[08/30 17:03:50]  Verifer returned sat in 1.426442 secs.
[08/30 17:03:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2140.701416    2090.601455  1535.634287  2140.701416   50.300000  2090.601455        0.0   50.099961       50.099961       1.0          2090.601455                -1.0            -1
1    2140.801455    2140.701416  1535.634287  2140.801455   50.200000  2140.701416        0.0    0.100039      -49.800000       2.0          2140.801455                 0.0         False
2    2290.501221    2257.068122  1535.634287  2290.501221  149.799805  2257.068122        0.0   33.433099       -0.100234       1.0          2140.801455                 1.0         False
3    2406.868122    2290.601455  1535.634287  2406.868122  149.800000  2290.601455        0.0  116.266667       16.266667       1.0          2140.801455                 0.0         False
4    2590.601455    2490.601455  1535.634287  2590.601455  300.000000  2490.601455       49.9   50.100000       50.100000       1.0          2140.801455                 0.0         False
5    2690.501455    2490.601455  1535.634287  2690.501455  150.000000  2490.601455       49.9  150.000000       50.000000       1.0          2640.601455                 0.0         False
6    2890.801455    2665.451455  1535.634287  2890.801455  350.300000  2665.451455      150.1   75.250000       50.100000       1.0          2640.601455                 0.0         False
7    2990.701455    2790.601455  1535.634287  2990.701455  175.150000  2790.601455      150.1   50.000000       50.000000       1.0          2840.601455                 0.0         False
8    3390.701455    2790.701660  1535.634287  3390.701455  450.000000  2790.701660      450.0  149.999795       50.100000       2.0          2840.601455                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=4001/10, 
, buffer=501/10.[0m
[08/30 17:03:50]  --------------------------------------------------------------------------------
[08/30 17:03:50]  Iteration: 80 (2 solution, 77 counterexamples)
[08/30 17:04:05]  Generator returned sat in 11.684860 secs.
[08/30 17:04:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:04:08]  Verifer returned unsat in 3.409495 secs.
[08/30 17:04:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:04:08]  --------------------------------------------------------------------------------
[08/30 17:04:08]  Iteration: 81 (3 solution, 77 counterexamples)
[08/30 17:04:12]  Generator returned sat in 1.611062 secs.
[08/30 17:04:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:04:17]  Improved gap from 0.0 to 18.75
[08/30 17:04:18]  Improved number of small numbers from 59 to 73 out of a max of 114
[08/30 17:04:18]  Verifer returned sat in 5.639232 secs.
[08/30 17:04:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2601.270996    2474.871622  1507.219787  2601.270996    0.002500  2474.871622     0.0000  126.399374       26.399374       2.0          2474.871622                -1.0            -1
1    2601.270996    2601.268555  1535.634277  2601.270996    0.002686  2601.268555     0.0000    0.002441      -45.186135       3.0          2474.871622                 0.0         False
2    2746.457275    2746.457122  1535.634277  2746.457275  145.188721  2746.457122     0.0000    0.000154        0.000144       1.0          2474.871622                 1.0          True
3    2765.246122    2746.459622  1616.845287  2765.246122   18.789000  2746.459622     0.0000   18.786500        0.000000       1.0          2765.246122                 0.0         False
4    2891.648122    2865.243622  1616.845287  2891.648122  145.188500  2865.243622     0.0025   26.402000       26.399500       1.0          2765.246122                 0.0         False
5    2891.648122    2865.246122  1690.445787  2891.648122    0.010000  2865.246122     0.0025   26.399500        0.000000       2.0          2891.645622                 0.0         False
6    2924.648122    2891.645622  1757.445787  2924.648122   59.399500  2891.645622     0.0025   33.000000        0.000000       3.0          2891.645622                 0.0         False
7    2964.241122    2924.645622  1817.850342  2964.241122   72.593000  2924.645622     0.0025   39.593000       -0.002445       2.0          2891.645622                 1.0         False
8    2990.645622    2964.241211  1817.850342  2990.645622   65.997500  2964.241211     0.0025   26.401911      -73.597945       1.0          2990.643122                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=52799/2000.[0m
[08/30 17:04:18]  --------------------------------------------------------------------------------
[08/30 17:04:18]  Iteration: 82 (3 solution, 78 counterexamples)
[08/30 17:04:25]  Generator returned sat in 3.720315 secs.
[08/30 17:04:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:04:27]  Verifer returned unsat in 1.736331 secs.
[08/30 17:04:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:04:27]  --------------------------------------------------------------------------------
[08/30 17:04:27]  Iteration: 83 (4 solution, 78 counterexamples)
[08/30 17:04:52]  Generator returned sat in 22.589131 secs.
[08/30 17:04:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:04:54]  Improved gap from 0.0 to 9.375
[08/30 17:04:55]  Improved number of small numbers from 59 to 69 out of a max of 114
[08/30 17:04:55]  Verifer returned sat in 2.798174 secs.
[08/30 17:04:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    2697.630622    2539.310622  1493.835787  2697.630622    0.050049  2539.310622        0.0  158.320000      109.375000       7.0          2539.310622                -1.0            -1
1    2697.630622    2588.255859  1493.835787  2697.630622  109.325000  2588.255859        0.0  109.374762        9.375000       7.0          2539.310622                 0.0         False
2    2697.630622    2688.255622  1584.460787  2697.630622  109.325000  2688.255622        0.0    9.375000        0.000000       8.0          2539.310622                 0.0         False
3    2797.530622    2697.630622  1584.460938  2797.530622  109.275000  2697.630622        0.0   99.900000       -0.099850       9.0          2797.530622                 0.0         False
4    2855.950622    2816.470622  1626.090820  2855.950622  158.320000  2816.470622        0.0   39.480000       -0.049967       1.0          2797.530622                 1.0         False
5    2895.630622    2856.000732  1686.460787  2895.630622   79.160000  2856.000732        0.0   39.629889        0.000000       1.0          2895.630622                 0.0         False
6    2895.630622    2895.630622  1777.085693  2895.630622   39.580000  2895.630622        0.0    0.000000       -9.375094       2.0          2895.630622                 0.0         False
7    2915.420622    2905.005859  1866.670787  2915.420622   19.790000  2905.005859        0.0   10.414762        0.000000       1.0          2915.420622                 0.0         False
8    2915.420622    2915.420622  1957.295654  2915.420622    9.895000  2915.420622        0.0    0.000000       -9.375133       2.0          2915.420622                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=875/8.[0m
[08/30 17:04:55]  --------------------------------------------------------------------------------
[08/30 17:04:55]  Iteration: 84 (4 solution, 79 counterexamples)
[08/30 17:05:04]  Generator returned sat in 6.864956 secs.
[08/30 17:05:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:05:08]  Improved gap from 0.0 to 31.25
[08/30 17:05:08]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/30 17:05:08]  Verifer returned sat in 3.637096 secs.
[08/30 17:05:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1382.730469    1282.830811  1425.085938  1382.730469  131.350000  1282.830811        0.0   99.899658       -0.100098       9.0          1282.830811                -1.0            -1
1    1414.080566    1382.830566  1493.835938  1414.080566  131.249756  1382.830566        0.0   31.250000        0.000000       1.0          1414.080566                 1.0         False
2    1745.330566    1514.080566  1493.835938  1745.330566  362.500000  1514.080566        0.0  231.250000      231.250000       1.0          1414.080566                 0.0         False
3    1745.330566    1614.080566  1493.835938  1745.330566   65.625000  1614.080566        0.0  131.250000      131.250000       2.0          1745.330566                 0.0         False
4    1745.330566    1712.055664  1493.835938  1745.330566   32.812500  1712.055664        0.0   33.274902       31.250000       3.0          1745.330566                 0.0         False
5    1745.330566    1714.080566  1562.585938  1745.330566   16.406250  1714.080566        0.0   31.250000        0.000000       4.0          1745.330566                 0.0         False
6    1745.330566    1745.330566  1629.873291  1745.330566    8.203125  1745.330566        0.0    0.000000      -32.712646       5.0          1745.330566                 0.0         False
7    1810.955566    1778.043213  1696.960938  1810.955566   65.625000  1778.043213        0.0   32.912354        0.000000       1.0          1745.330566                 1.0         False
8    1810.955566    1810.955566  1696.960938  1810.955566   32.812500  1810.955566        0.0    0.000000     -100.000000       2.0          1810.955566                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=4627/20.[0m
[08/30 17:05:09]  --------------------------------------------------------------------------------
[08/30 17:05:09]  Iteration: 85 (4 solution, 80 counterexamples)
[08/30 17:05:21]  Generator returned sat in 9.327663 secs.
[08/30 17:05:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:05:35]  Improved gap from 0.0 to 15.625
[08/30 17:05:36]  Improved number of small numbers from 92 to 96 out of a max of 114
[08/30 17:05:36]  Verifer returned sat in 15.053153 secs.
[08/30 17:05:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1498.455322    1298.455566  1409.460938  1498.455322     0.050  1298.455566       0.00  199.999756       99.999756       9.0          1298.455566                -1.0            -1
1    1498.455566    1398.455566  1409.460938  1498.455566   200.000  1398.455566       0.00  100.000000        0.000000       3.0          1298.455566                 1.0         False
2    1714.130566    1598.455566  1409.460938  1714.130566   315.675  1598.455566       0.05  115.625000      115.625000       1.0          1298.455566                 0.0         False
3    1714.130566    1678.960449  1409.460938  1714.130566    70.140  1678.960449       0.05   35.120117       15.625000       2.0          1714.080566                 0.0         False
4    1714.130566    1698.455566  1493.835938  1714.130566    35.070  1698.455566       0.05   15.625000        0.000000       3.0          1714.080566                 0.0         False
5    1716.040566    1714.080566  1578.210693  1716.040566    17.535  1714.080566       0.05    1.910000      -13.715244       4.0          1715.990566                 0.0         False
6    1780.710566    1764.115566  1627.255859  1780.710566    66.580  1764.115566       0.05   16.545000       -0.000078       1.0          1715.990566                 1.0         False
7    1797.455566    1780.710693  1710.510937  1797.455566    33.290  1780.710693       0.05   16.694873        0.000000       1.0          1797.405566                 0.0         False
8    1797.455566    1797.405566  1710.510937  1797.455566    16.645  1797.405566       0.05    0.000000     -100.000000       2.0          1797.405566                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=925/8.[0m
[08/30 17:05:37]  --------------------------------------------------------------------------------
[08/30 17:05:37]  Iteration: 86 (4 solution, 81 counterexamples)
[08/30 17:05:51]  Generator returned sat in 12.017508 secs.
[08/30 17:05:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:05:56]  Improved gap from 0.000625 to 21.875
[08/30 17:05:57]  Improved number of small numbers from 68 to 72 out of a max of 114
[08/30 17:05:57]  Verifer returned sat in 5.812143 secs.
[08/30 17:05:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1615.678711    1615.612458  1175.482910  1615.678711   0.066162  1615.612458        0.0   0.066253        0.066167       1.0          1615.612458                -1.0            -1
1    1637.619811    1615.744629  1253.475643  1637.619811  22.007353  1615.744629        0.0  21.875182        0.000000       1.0          1615.612458                 0.0         False
2    1637.619811    1637.619811  1331.600643  1637.619811   0.066406  1637.619811        0.0   0.000000      -21.875000       2.0          1637.619811                 0.0         False
3    1681.634517    1659.494811  1409.460938  1681.634517  44.014706  1659.494811        0.0  22.139706        0.000000       1.0          1637.619811                 1.0         False
4    1703.443340    1681.634517  1487.585938  1703.443340  43.948529  1681.634517        0.0  21.808824       -0.066176       2.0          1703.443340                 0.0         False
5    1703.608782    1703.509517  1565.710693  1703.608782  21.974265  1703.509517        0.0   0.099265      -21.775979       1.0          1703.608782                 1.0         False
6    1747.441502    1725.566502  1643.653952  1747.441502  43.931985  1725.566502        0.0  21.875000        0.000000       1.0          1703.608782                 0.0         False
7    1780.568340    1747.441502  1710.527114  1780.568340  55.001838  1747.441502        0.0  33.126838        0.000000       2.0          1703.608782                 0.0         False
8    1780.568340    1780.568340  1788.652114  1780.568340  27.500919  1780.568340        0.0   0.000000      -21.875000       2.0          1780.568340                 1.0          True
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=543/4096.[0m
[08/30 17:05:58]  --------------------------------------------------------------------------------
[08/30 17:05:58]  Iteration: 87 (4 solution, 82 counterexamples)
[08/30 17:06:07]  Generator returned sat in 7.080767 secs.
[08/30 17:06:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:06:08]  Improved gap from 0.000625 to 100
[08/30 17:06:09]  Improved number of small numbers from 60 to 76 out of a max of 114
[08/30 17:06:09]  Verifer returned sat in 1.455272 secs.
[08/30 17:06:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     990.291260     890.292236  1900.802969   990.291260    0.000977   890.292236    0.000000   99.999023       99.999014       9.0           890.292236                -1.0            -1
1     990.291260     890.292480  1900.802969   990.291260   99.998535   890.292480    0.000000   99.998779       -0.000986       3.0           890.292236                 1.0         False
2    1090.291504     990.313079  1900.802969  1090.291504  199.999023   990.313079    0.000000   99.978425       -0.000742       1.0           890.292236                 1.0          True
3    1290.292246    1090.292246  1900.802969  1290.292246  299.979167  1090.292246    0.000833  199.999167       99.999167       1.0           890.292236                 0.0         False
4    1290.292246    1290.290579  1900.802969  1290.292246  149.989583  1290.290579    0.000833    0.000833       -0.000833       2.0          1290.291412                 0.0         False
5    1290.301412    1290.299746  1900.802969  1290.301412    0.010000  1290.299746    0.000833    0.000833      -99.991667       1.0          1290.300579                 1.0         False
6    1590.292246    1490.292246  1900.802969  1590.292246  299.991667  1490.292246    0.000833   99.999167       99.999167       1.0          1290.300579                 0.0         False
7    2040.288912    1590.292246  1900.802969  2040.288912  549.995833  1590.292246  349.997500   99.999167       99.999167       1.0          1290.300579                 0.0         False
8    2215.287662    1690.292236  1900.802969  2215.287662  274.997917  1690.292236  424.996250   99.999176       99.999167       1.0          1790.291412                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1019989/2400, 
, buffer=119999/1200.[0m
[08/30 17:06:10]  --------------------------------------------------------------------------------
[08/30 17:06:10]  Iteration: 88 (4 solution, 83 counterexamples)
[08/30 17:06:18]  Generator returned sat in 6.313722 secs.
[08/30 17:06:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:06:19]  Improved gap from 0.1 to 100
[08/30 17:06:20]  Improved number of small numbers from 60 to 74 out of a max of 114
[08/30 17:06:20]  Verifer returned sat in 1.307448 secs.
[08/30 17:06:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1555.138672    1255.188965  1435.906455  1555.138672    0.050049  1255.188965        0.0  299.949707      199.949912       8.0          1255.188965                -1.0            -1
1    1555.138672    1355.188760  1435.906455  1555.138672  299.900146  1355.188760        0.0  199.949912       99.949912       8.0          1255.188965                 1.0         False
2    1655.038760    1555.188760  1435.906455  1655.038760  299.850000  1555.188760        0.0   99.850000       99.850000       1.0          1655.038760                 1.0          True
3    1715.548760    1655.038760  1435.906455  1715.548760  160.360000  1655.038760        0.0   60.510000       60.360000       2.0          1715.548760                 0.0         False
4    1735.218760    1735.168760  1435.906455  1735.218760   80.180000  1735.168760        0.0    0.050000      -19.970000       1.0          1735.218760                 1.0         False
5    2155.238760    1755.188760  1435.906455  2155.238760  420.070000  1755.188760        0.0  400.050000      300.050000       1.0          1735.218760                 0.0         False
6    2165.223760    1855.188965  1435.906455  2165.223760  410.035000  1855.188965        0.0  310.034795      210.035000       2.0          2165.223760                 0.0         False
7    2165.223760    2055.188721  1435.906455  2165.223760  205.017500  2055.188721        0.0  110.035039      110.035000       3.0          2165.223760                 1.0         False
8    2165.223760    2155.188721  1435.906455  2165.223760  102.508750  2155.188721        0.0   10.035039       10.035000       4.0          2165.223760                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=614605/2048.[0m
[08/30 17:06:20]  --------------------------------------------------------------------------------
[08/30 17:06:20]  Iteration: 89 (4 solution, 84 counterexamples)
[08/30 17:06:32]  Generator returned sat in 9.141531 secs.
[08/30 17:06:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:06:33]  Improved gap from 0.0016666666666666668 to 100
[08/30 17:06:33]  Improved number of small numbers from 75 to 102 out of a max of 114
[08/30 17:06:33]  Verifer returned sat in 0.875115 secs.
[08/30 17:06:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1555.138916    1555.138184  1335.956543  1555.138916    0.000732  1555.138184        0.0    0.000732        0.000000       9.0          1555.138184                -1.0            -1
1    1755.138916    1555.138916  1335.956543  1755.138916  200.000732  1555.138916        0.0  200.000000      100.000000       3.0          1555.138184                 1.0         False
2    1955.137939    1755.138916  1335.956543  1955.137939  399.999023  1755.138916        0.0  199.999023      199.999023       2.0          1555.138184                 1.0          True
3    1955.137939    1755.138916  1335.956543  1955.137939    0.018333  1755.138916        0.0  199.999023       99.999023       2.0          1955.137939                 1.0          True
4    1955.137939    1955.129749  1335.956543  1955.137939    0.010000  1955.129749        0.0    0.008190       -0.000977       3.0          1955.137939                 1.0         False
5    1955.139749    1955.138916  1335.956543  1955.139749    0.010000  1955.138916        0.0    0.000833      -99.999167       1.0          1955.137939                 1.0         False
6    2055.158916    2055.138916  1335.956543  2055.158916  100.020000  2055.138916        0.0    0.020000      -99.980000       1.0          1955.137939                 0.0         False
7    2405.178916    2221.687249  1335.956543  2405.178916  350.040000  2221.687249        0.0  183.491667      150.040000       1.0          1955.137939                 0.0         False
8    3055.045999    2355.138672  1335.956543  3055.045999  833.358750  2355.138672        0.0  699.907327      699.907083       2.0          1955.137939                 0.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1679779/2400.[0m
[08/30 17:06:34]  --------------------------------------------------------------------------------
[08/30 17:06:34]  Iteration: 90 (4 solution, 85 counterexamples)
[08/30 17:06:43]  Generator returned sat in 6.307738 secs.
[08/30 17:06:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:06:44]  Improved number of small numbers from 72 to 76 out of a max of 113
[08/30 17:06:44]  Verifer returned sat in 0.899563 secs.
[08/30 17:06:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1455.038818    1454.938916  1335.956787  1455.038818    0.050049  1454.938916       0.00   0.099902        0.099902       9.0          1454.938916                -1.0            -1
1    1555.088916    1554.938916  1335.956787  1555.088916  100.150000  1554.938916       0.05   0.100000        0.100000       1.0          1454.938916                 1.0         False
2    1555.138916    1554.938916  1335.956787  1555.138916    0.150000  1554.938916       0.05   0.150000      -99.850000       1.0          1555.088916                 0.0         False
3    1655.288916    1654.938916  1335.956787  1655.288916  100.300000  1654.938916       0.05   0.300000      -99.700000       1.0          1555.088916                 0.0         False
4    1855.288916    1854.888916  1335.956787  1855.288916  200.300000  1854.888916       0.25   0.150000        0.100000       1.0          1555.088916                 0.0         False
5    1955.288916    1954.938916  1335.956787  1955.288916  100.150000  1954.938916       0.25   0.100000        0.100000       1.0          1955.038916                 0.0         False
6    2255.338916    2004.963916  1335.956787  2255.338916  300.150000  2004.963916     200.30  50.075000        0.100000       1.0          1955.038916                 0.0         False
7    2355.338916    2154.938916  1335.956787  2355.338916  150.075000  2154.938916     200.30   0.100000        0.100000       1.0          2155.038916                 0.0         False
8    2655.338916    2155.088867  1335.956787  2655.338916  300.100000  2155.088867     400.30  99.950049        0.100000       1.0          2155.038916                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=8001/20, 
, buffer=1/10.[0m
[08/30 17:06:45]  --------------------------------------------------------------------------------
[08/30 17:06:45]  Iteration: 91 (4 solution, 86 counterexamples)
[08/30 17:06:58]  Generator returned sat in 10.793974 secs.
[08/30 17:06:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:07:02]  Improved gap from 0.0004166666666666667 to 29.6875
[08/30 17:07:02]  Improved number of small numbers from 59 to 69 out of a max of 114
[08/30 17:07:02]  Verifer returned sat in 4.325851 secs.
[08/30 17:07:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3881.840088    3681.876647 -562.059307  3881.840088    0.036621  3681.876647        0.0  199.963441      199.963441       1.0          3681.876647                -1.0            -1
1    4111.564147    3681.876647 -562.059307  4111.564147  429.687500  3681.876647        0.0  429.687500      329.687500       1.0          3681.876647                 0.0         False
2    4111.564147    3881.876465 -562.059307  4111.564147  429.687500  3881.876465        0.0  229.687682      229.687500       2.0          3681.876647                 0.0         False
3    4111.564147    3981.876647 -562.059307  4111.564147   70.333333  3981.876647        0.0  129.687500      129.687500       3.0          4111.564147                 0.0         False
4    4111.564147    4081.840088 -562.059307  4111.564147   35.166667  4081.840088        0.0   29.724059       29.687500       4.0          4111.564147                 0.0         False
5    4111.564147    4081.876647 -491.746807  4111.564147   17.583333  4081.876647        0.0   29.687500        0.000000       5.0          4111.564147                 0.0         False
6    4111.564147    4111.564147 -421.434326  4111.564147    8.791667  4111.564147        0.0    0.000000      -29.687520       6.0          4111.564147                 0.0         False
7    4180.803730    4141.251709 -360.986390  4180.803730   69.239583  4141.251709        0.0   39.552021        0.000000       1.0          4111.564147                 1.0         False
8    4180.803730    4180.803730 -290.674072  4180.803730   34.619792  4180.803730        0.0    0.000000      -29.687682       2.0          4180.803730                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=675275/2048.[0m
[08/30 17:07:03]  --------------------------------------------------------------------------------
[08/30 17:07:03]  Iteration: 92 (4 solution, 87 counterexamples)
[08/30 17:07:19]  Generator returned sat in 12.884091 secs.
[08/30 17:07:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:07:23]  Improved gap from 0.0008333333333333334 to 21.875
[08/30 17:07:24]  Improved number of small numbers from 59 to 79 out of a max of 114
[08/30 17:07:24]  Verifer returned sat in 4.876521 secs.
[08/30 17:07:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4391.567272    3991.567139 -562.059307  4391.567272    0.100098  3991.567139        0.0  400.000133      400.000000       7.0          3991.567139                -1.0            -1
1    4413.445312    3991.567272 -562.059307  4413.445312  421.878174  3991.567272        0.0  421.878041      321.878041       7.0          3991.567139                 0.0         False
2    4413.545397    4191.567139 -562.059307  4413.545397  421.978125  4191.567139        0.0  221.978258      221.978125       8.0          3991.567139                 0.0         False
3    4413.545397    4291.567272 -562.059307  4413.545397  120.675000  4291.567272        0.0  121.978125      121.978125       9.0          4413.545397                 0.0         False
4    4413.545397    4383.276855 -562.059307  4413.545397   60.337500  4383.276855        0.0   30.268541       21.978125       9.0          4413.545397                 1.0         False
5    4413.545397    4391.567272 -484.037432  4413.545397   30.168750  4391.567272        0.0   21.978125        0.000000       9.0          4413.545397                 1.0         False
6    4413.545397    4413.545397 -405.912432  4413.545397   15.084375  4413.545397        0.0    0.000000      -21.875000       5.0          4413.545397                 1.0         False
7    4482.076647    4435.420410 -352.568848  4482.076647   68.531250  4435.420410        0.0   46.656237       -0.000166       1.0          4413.545397                 0.0         False
8    4495.757812    4482.176514 -274.543701  4495.757812   60.337402  4482.176514        0.0   13.581299       -8.293854       1.0          4495.757812                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 17:07:24]  --------------------------------------------------------------------------------
[08/30 17:07:24]  Iteration: 93 (4 solution, 88 counterexamples)
[08/30 17:07:35]  Generator returned sat in 7.981559 secs.
[08/30 17:07:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:07:44]  Improved gap from 0.0 to 26.5625
[08/30 17:07:45]  Improved number of small numbers from 59 to 65 out of a max of 114
[08/30 17:07:45]  Verifer returned sat in 9.506149 secs.
[08/30 17:07:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4413.535397    4013.535397 -185.042432  4413.535397    0.002686  4013.535397        0.0  400.000000      400.000000       6.0          4013.535397                -1.0            -1
1    4413.535397    4113.535397 -185.042432  4413.535397  326.562256  4113.535397        0.0  300.000000      300.000000       6.0          4013.535397                 0.0         False
2    4440.097897    4213.535156 -185.042432  4440.097897  326.562500  4213.535156        0.0  226.562740      226.562500       7.0          4013.535397                 0.0         False
3    4440.097897    4295.247897 -185.042432  4440.097897    7.982500  4295.247897        0.0  144.850000      126.562500       8.0          4440.097897                 0.0         False
4    4440.097897    4413.532897 -185.042432  4440.097897  144.847500  4413.532897        0.0   26.565000       26.562500       9.0          4440.097897                 0.0         False
5    4440.097897    4413.535397 -111.604932  4440.097897    0.010000  4413.535397        0.0   26.562500        0.000000       9.0          4440.097897                 1.0         False
6    4440.097897    4440.097897  -38.167432  4440.097897    0.010000  4440.097897        0.0    0.000000      -26.562500       5.0          4440.097897                 1.0         False
7    4512.527897    4466.660397   15.962646  4512.527897   72.430000  4466.660397        0.0   45.867500       -0.002422       1.0          4440.097897                 0.0         False
8    4529.439147    4512.530518   15.962646  4529.439147   62.778750  4512.530518        0.0   16.908629      -83.091172       1.0          4529.439147                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=400.[0m
[08/30 17:07:45]  --------------------------------------------------------------------------------
[08/30 17:07:45]  Iteration: 94 (4 solution, 89 counterexamples)
[08/30 17:07:55]  Generator returned sat in 7.155200 secs.
[08/30 17:07:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:08:10]  Improved gap from 0.0 to 18.75
[08/30 17:08:10]  Improved number of small numbers from 61 to 114 out of a max of 114
[08/30 17:08:10]  Verifer returned sat in 14.503761 secs.
[08/30 17:08:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    4376.031494    4357.276855 -529.341309  4376.031494  18.754883  4357.276855        0.0  18.754639       18.750000       9.0          4357.276855                -1.0            -1
1    4376.031494    4357.281738 -448.091553  4376.031494  18.753662  4357.281738        0.0  18.749756       -0.000244       3.0          4376.031494                 1.0         False
2    4376.034180    4376.032715 -366.842773  4376.034180  18.752441  4376.032715        0.0   0.001465      -18.748779       1.0          4376.034180                 1.0         False
3    4394.783936    4394.782959 -285.592773  4394.783936  18.751221  4394.782959        0.0   0.000977      -18.749023       1.0          4394.783936                 0.0         False
4    4422.911621    4413.532959 -204.342773  4422.911621  28.128662  4413.532959        0.0   9.378662       -9.371338       1.0          4394.783936                 0.0         False
5    4455.722900    4436.974121 -127.783936  4455.722900  42.189941  4436.974121        0.0  18.748779       -0.001221       1.0          4394.783936                 0.0         False
6    4488.539795    4455.724121  -60.599609  4488.539795  51.565674  4455.724121        0.0  32.815674        0.000000       1.0          4394.783936                 0.0         False
7    4511.977539    4488.539795   15.962646  4511.977539  56.253418  4488.539795        0.0  23.437744        0.000000       2.0          4394.783936                 0.0         False
8    4511.977539    4511.977539   97.212402  4511.977539   0.010000  4511.977539        0.0   0.000000      -18.750244       2.0          4511.977539                 1.0          True
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=75/4.[0m
[08/30 17:08:11]  --------------------------------------------------------------------------------
[08/30 17:08:11]  Iteration: 95 (4 solution, 90 counterexamples)
[08/30 17:08:28]  Generator returned sat in 14.483075 secs.
[08/30 17:08:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:08:32]  Improved gap from 0.0 to 29.6875
[08/30 17:08:32]  Improved number of small numbers from 60 to 77 out of a max of 114
[08/30 17:08:32]  Verifer returned sat in 4.368717 secs.
[08/30 17:08:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3775.528076    3775.454834   52.485228  3775.528076    0.072754  3775.454834   0.000000    0.073242        0.073118       2.0          3775.454834                -1.0            -1
1    3775.528076    3775.454958   52.485228  3775.528076    0.036458  3775.454958   0.000000    0.073118      -99.926882       2.0          3775.528076                 0.0         False
2    4205.178916    3875.455078   52.485228  4205.178916  429.723958  3875.455078   0.036458  329.687380      229.687500       1.0          3775.528076                 0.0         False
3    4205.178916    4075.454958   52.485228  4205.178916   70.333333  4075.454958   0.036458  129.687500      129.687500       2.0          4205.142458                 0.0         False
4    4205.178916    4175.418457   52.485228  4205.178916   35.166667  4175.418457   0.036458   29.724001       29.687500       3.0          4205.142458                 0.0         False
5    4205.178916    4175.454958  122.797728  4205.178916   17.583333  4175.454958   0.036458   29.687500        0.000000       4.0          4205.142458                 0.0         False
6    4205.178916    4205.142458  193.110107  4205.178916    8.791667  4205.142458   0.036458    0.000000      -29.687620       5.0          4205.142458                 0.0         False
7    4274.418499    4234.830078  253.558145  4274.418499   69.239583  4234.830078   0.036458   39.551963        0.000000       1.0          4205.142458                 1.0         False
8    4274.418499    4274.382041  253.558350  4274.418499   34.619792  4274.382041   0.036458    0.000000      -99.999795       2.0          4274.382041                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3675/16.[0m
[08/30 17:08:33]  --------------------------------------------------------------------------------
[08/30 17:08:33]  Iteration: 96 (4 solution, 91 counterexamples)
[08/30 17:08:44]  Generator returned sat in 8.233806 secs.
[08/30 17:08:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:08:45]  Improved gap from 0.0 to 100
[08/30 17:08:45]  Improved number of small numbers from 74 to 91 out of a max of 114
[08/30 17:08:45]  Verifer returned sat in 1.048566 secs.
[08/30 17:08:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3604.917480    2904.917480  823.022852  3604.917480     0.099854  2904.917480    0.000000  700.000000      600.000146       7.0          2904.917480                -1.0            -1
1    3604.917480    3004.917480  823.022852  3604.917480     0.100098  3004.917480    0.000000  600.000000      500.000146       7.0          2904.917480                 0.0         False
2    3604.917480    3204.917334  823.022852  3604.917480   400.200000  3204.917334    0.000000  400.000146      400.000146       8.0          2904.917480                 0.0         False
3    3605.017334    3205.017334  823.022852  3605.017334   400.100000  3205.017334    0.000000  400.000000      300.100000       9.0          3605.017334                 0.0         False
4    3805.167334    3304.917334  823.022852  3805.167334   600.150000  3304.917334    0.000000  500.250000      400.250000       9.0          3605.017334                 1.0         False
5    4205.142334    3404.917480  823.022852  4205.142334   900.225000  3404.917480    0.000000  800.224854      700.225000       8.0          3605.017334                 1.0         False
6    4205.142334    3530.073584  823.022852  4205.142334   450.112500  3530.073584    0.000000  675.068750      600.225000       9.0          4205.142334                 0.0         False
7    4205.242334    3604.917334  823.022852  4205.242334   675.168750  3604.917334    0.000000  600.325000      500.325000       9.0          4205.142334                 1.0         False
8    4617.670459    3804.917236  823.022852  4617.670459  1012.753125  3804.917236  112.428125  700.325098      700.325000       5.0          4205.142334                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=35977/320, 
, buffer=28013/40.[0m
[08/30 17:08:46]  --------------------------------------------------------------------------------
[08/30 17:08:46]  Iteration: 97 (4 solution, 92 counterexamples)
[08/30 17:08:57]  Generator returned sat in 8.221616 secs.
[08/30 17:08:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:08:59]  Improved number of small numbers from 51 to 72 out of a max of 113
[08/30 17:08:59]  Verifer returned sat in 1.265924 secs.
[08/30 17:08:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    3604.917480    3004.917334  823.022852  3604.917480     0.099854  3004.917334        0.0   600.000146      600.000146       7.0          3004.917334                -1.0            -1
1    3604.917480    3104.917334  823.022852  3604.917480     0.100098  3104.917334        0.0   500.000146      500.000146       7.0          3004.917334                 0.0         False
2    3604.917480    3204.917236  823.022852  3604.917480   400.099854  3204.917236        0.0   400.000244      400.000146       8.0          3004.917334                 0.0         False
3    3604.917480    3205.017236  823.022852  3604.917480   400.000000  3205.017236        0.0   399.900244      300.000146       9.0          3604.917480                 0.0         False
4    4105.067187    3404.917334  823.022852  4105.067187   900.049951  3404.917334        0.0   700.149854      700.149854       9.0          3604.917480                 1.0         False
5    5355.017236    3504.917236  823.022852  5355.017236  1950.099902  3504.917236        0.0  1850.100000     1850.099902       8.0          3604.917480                 1.0         False
6    5355.017236    3604.817432  823.022852  5355.017236   975.049951  3604.817432        0.0  1750.199805     1750.099902       9.0          5355.017236                 0.0         False
7    5754.817432    3604.917334  823.022852  5754.817432  2150.000000  3604.917334        0.0  2149.900098     2049.900098       9.0          5355.017236                 1.0         False
8    8004.917334    3804.917236  823.022852  8004.917334  4400.000000  3804.917236     2150.0  2050.000098     2050.000000       5.0          5355.017236                 1.0         False
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=2150, 
, buffer=2050.[0m
[08/30 17:08:59]  --------------------------------------------------------------------------------
[08/30 17:08:59]  Iteration: 98 (4 solution, 93 counterexamples)
[08/30 17:09:09]  Generator returned sat in 6.617044 secs.
[08/30 17:09:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:09:13]  Improved gap from 0.0 to 31.25
[08/30 17:09:13]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/30 17:09:13]  Verifer returned sat in 3.833757 secs.
[08/30 17:09:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    6984.276855    6553.026855 -726.947266  6984.276855    0.1000  6553.026855        0.0  431.250000          431.25       5.0          6553.026855                -1.0            -1
1    6984.276855    6653.026855 -726.947266  6984.276855    0.1000  6653.026855        0.0  331.250000          331.25       5.0          6553.026855                 0.0         False
2    6984.276855    6753.026855 -726.947266  6984.276855    0.1000  6753.026855        0.0  231.250000          231.25       6.0          6553.026855                 0.0         False
3    6984.276855    6853.026855 -726.947266  6984.276855  124.6000  6853.026855        0.0  131.250000          131.25       7.0          6553.026855                 0.0         False
4    6984.276855    6953.026855 -726.947266  6984.276855   62.3000  6953.026855        0.0   31.250000           31.25       8.0          6984.276855                 0.0         False
5    6984.276855    6953.026855 -658.197266  6984.276855   31.1500  6953.026855        0.0   31.250000            0.00       8.0          6984.276855                 0.0         False
6    6984.276855    6984.276855 -589.447266  6984.276855   15.5750  6984.276855        0.0    0.000000          -31.25       9.0          6984.276855                 0.0         False
7    7049.901855    7015.527100 -523.822266  7049.901855   65.6250  7015.527100        0.0   34.374756            0.00       1.0          6984.276855                 1.0         False
8    7049.901855    7049.901855 -523.822266  7049.901855   32.8125  7049.901855        0.0    0.000000         -100.00       2.0          7049.901855                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1725/4.[0m
[08/30 17:09:13]  --------------------------------------------------------------------------------
[08/30 17:09:13]  Iteration: 99 (4 solution, 94 counterexamples)
[08/30 17:09:21]  Generator returned sat in 4.554208 secs.
[08/30 17:09:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:09:24]  Improved gap from 27.95718470982143 to 29.6875
[08/30 17:09:25]  Improved number of small numbers from 68 to 81 out of a max of 114
[08/30 17:09:25]  Verifer returned sat in 4.193965 secs.
[08/30 17:09:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    9050.125605    8520.438232 -726.947266  9050.125605    0.072998  8520.438232        0.0  529.687373      429.687500       9.0          8520.438232                -1.0            -1
1    9050.125605    8720.437988 -726.947266  9050.125605    0.072998  8720.437988        0.0  329.687617      329.687500       5.0          8520.438232                 1.0         False
2    9050.125605    8820.437988 -726.947266  9050.125605  329.687500  8820.437988        0.0  229.687617      229.687500       5.0          8520.438232                 0.0         False
3    9050.125605    8920.438105 -726.947266  9050.125605   69.166667  8920.438105        0.0  129.687500      129.687500       6.0          9050.125605                 0.0         False
4    9050.125605    9020.365234 -726.947266  9050.125605   34.583333  9020.365234        0.0   29.760371       29.687500       7.0          9050.125605                 0.0         False
5    9050.125605    9020.438105 -656.634766  9050.125605   17.291667  9020.438105        0.0   29.687500        0.000000       8.0          9050.125605                 0.0         False
6    9050.125605    9050.125605 -589.999268  9050.125605    8.645833  9050.125605        0.0    0.000000      -33.364502       9.0          9050.125605                 0.0         False
7    9119.292272    9083.490234 -525.801432  9119.292272   69.166667  9083.490234        0.0   35.802038        0.000000       1.0          9050.125605                 1.0         False
8    9119.292272    9119.292272 -525.801432  9119.292272   34.583333  9119.292272        0.0    0.000000     -100.000000       2.0          9119.292272                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=6875/16.[0m
[08/30 17:09:26]  --------------------------------------------------------------------------------
[08/30 17:09:26]  Iteration: 100 (4 solution, 95 counterexamples)
[08/30 17:09:29]  Generator returned unsat in 0.184376 secs.
[08/30 17:09:29]  [96mNo more solutions found[0m
[08/30 17:09:29]  Final solutions:
[08/30 17:09:29]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:09:29]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:09:29]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:09:29]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 17:09:29]  Took 942.149508 secs.
