[10/25 14:19:50]  --------------------------------------------------------------------------------
[10/25 14:19:50]  Iteration: 1 (0 solution, 0 counterexamples)
[10/25 14:19:50]  Generator returned sat in 0.004357 secs.
[10/25 14:19:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha
else:
	target_cwnd = 2c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:50]  Improved gap from 99.75 to 100
[10/25 14:19:50]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 14:19:50]  Verifer returned sat in 0.258919 secs.
[10/25 14:19:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   wasted_t    queue_t  bottle_queue_t
0     -817.09375    -1017.09375   -817.09375    0.03125    0.03125  -1017.09375    0.00000               0.00000  917.09375  200.00000       100.00000
1     -817.09375     -916.84375   -817.09375  100.06250  100.06250   -916.84375    0.00000            -916.84375  917.09375   99.75000         0.00000
2     -416.90625     -816.87500   -416.90625  499.93750  499.93750   -816.87500    0.03125            -816.87500  917.09375  399.93750       300.15625
3     -316.87500     -617.09375   -316.87500  499.96875  499.96875   -617.09375    0.06250            -617.09375  917.09375  300.15625       300.15625
4     -117.03125     -517.09375   -117.03125  500.00000  500.00000   -517.09375   99.90625            -517.09375  917.09375  300.15625       300.15625
5       82.84375     -517.09375     82.84375  500.03125  500.03125   -517.09375  199.78125            -517.12500  917.09375  400.15625       300.15625
6      182.75000     -333.09375    182.75000  500.06250  500.06250   -333.09375  199.78125            -333.09375  917.09375  316.06250       300.06250
7      366.78125     -317.06250    366.78125  500.09375  500.09375   -317.06250  283.71875            -317.06250  917.09375  400.12500       300.15625
8      466.78125     -217.09375    466.78125  500.12500  500.12500   -217.09375  283.71875             183.09375  917.09375  400.15625       300.15625
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=9077/32, 
, buffer=9605/32.[0m
[10/25 14:19:51]  --------------------------------------------------------------------------------
[10/25 14:19:51]  Iteration: 2 (0 solution, 1 counterexamples)
[10/25 14:19:51]  Generator returned sat in 0.069107 secs.
[10/25 14:19:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:51]  Improved gap from 0.00775146484375 to 32.8125
[10/25 14:19:52]  Improved number of small numbers from 60 to 109 out of a max of 109
[10/25 14:19:52]  Verifer returned sat in 0.646611 secs.
[10/25 14:19:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0    -917.090088   -1117.093994  -917.090088    0.031006    0.031006 -1117.093994        0.0          -1117.093994   917.093262  200.003906      100.007568
1    -817.093994   -1017.097656  -817.093994  300.000000  300.000000 -1017.097656        0.0           -917.094238   917.093262  200.003662      100.003662
2    -817.093994    -817.097900  -817.093994   32.839600   32.839600  -817.097900        0.0           -817.097900   917.093262    0.003906        0.003662
3    -784.262207    -817.097656  -784.262207   32.835693   32.835693  -817.097656        0.0           -784.258301   984.257812   32.835449        0.000000
4    -784.262207    -784.262207  -784.262207   32.831787   32.831787  -784.262207        0.0           -751.445801  1051.445068    0.000000      -32.812744
5    -751.434326    -751.449463  -751.434326   32.827881   32.827881  -751.449463        0.0           -718.625488  1118.625000    0.015137      -32.804932
6    -718.625488    -718.629395  -718.625488   32.823975   32.823975  -718.629395        0.0           -718.633057  1185.812500    0.003906      -32.808594
7    -685.809326    -685.816895  -685.809326   32.820068   32.820068  -685.816895        0.0           -685.805420  1252.999756    0.007568      -32.805176
8    -653.000732    -653.000732  -653.000732   32.816162   32.816162  -653.000732        0.0           -653.000732  1320.183594    0.000000      -32.812744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=409631/4096.[0m
[10/25 14:19:52]  --------------------------------------------------------------------------------
[10/25 14:19:52]  Iteration: 3 (0 solution, 2 counterexamples)
[10/25 14:19:52]  Generator returned sat in 0.106649 secs.
[10/25 14:19:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 3/2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:52]  Improved gap from 0.0465087890625 to 100
[10/25 14:19:53]  Improved number of small numbers from 65 to 109 out of a max of 109
[10/25 14:19:53]  Verifer returned sat in 0.462798 secs.
[10/25 14:19:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t   arrival_0,t      cwnd_0,t      rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     wasted_t       queue_t  bottle_queue_t
0  -27190.001221  -27342.093994 -27190.001221      0.030762      0.030762 -27342.093994   0.000000         -27342.093994  1185.812256    152.092773       52.108154
1  -27190.000977  -27190.016357 -27190.000977    152.093018    152.093018 -27190.016357   0.000000         -27190.016357  1185.812256      0.015381      -47.891602
2    -977.109619  -27042.109375   -977.109619  26212.906738  26212.906738 -27042.109375   0.015381         -27042.109375  1185.812256  26064.984375    26064.984375
3    -849.171631  -26950.047363   -849.171631  26192.922363  26192.922363 -26950.047363  27.953369         -26950.047363  1185.812256  26072.922363    26064.984375
4    -749.156006  -26942.093994   -749.156006  26172.937988  26172.937988 -26942.093994  27.968994         -26942.093994  1185.812256  26164.968994    26064.984375
5    -749.156006  -26750.078613   -749.156006  26152.953613  26152.953613 -26750.078613  27.968994         -26750.078613  1185.812256  25972.953613    25964.984375
6    -549.171631  -26742.093994   -549.171631  26172.937988  26172.937988 -26742.093994  27.968994         -26742.093994  1185.812256  26164.953369    26064.968750
7    -521.202637  -26542.109375   -521.202637  26192.922363  26192.922363 -26542.109375  27.968994         -26542.109375  1185.812256  25992.937744    25992.937744
8    -301.233643  -26542.109375   -301.233643  26212.906738  26212.906738 -26542.109375  75.891357         -26442.093994  1185.812256  26164.984375    26064.984375
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=98177/2048, 
, buffer=1668159/64.[0m
[10/25 14:19:53]  --------------------------------------------------------------------------------
[10/25 14:19:53]  Iteration: 4 (0 solution, 3 counterexamples)
[10/25 14:19:53]  Generator returned sat in 0.235440 secs.
[10/25 14:19:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:54]  Improved number of small numbers from 59 to 108 out of a max of 108
[10/25 14:19:54]  Verifer returned sat in 0.246197 secs.
[10/25 14:19:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1997.132568   -1997.140381 -1997.132568    0.030518    0.030518 -1997.140381   0.000000          -1997.140381  1185.812012    0.007812      -99.984619
1   -1837.125000   -1837.132812 -1837.125000  160.015381  160.015381 -1837.132812   0.000000          -1837.132812  1185.812012    0.007812      -39.977051
2    -977.109619   -1717.140625  -977.109619  860.023193  860.023193 -1717.140625   0.007812          -1717.140625  1185.812012  740.023193      720.030518
3    -877.102051   -1597.148193  -877.102051  840.030762  840.030762 -1597.148193   0.015381          -1597.148193  1185.812012  720.030762      720.030518
4    -777.094482   -1597.140625  -777.094482  820.038330  820.038330 -1597.140625   0.022949          -1597.140625  1185.812012  820.023193      720.030518
5    -777.094482   -1397.163330  -777.094482  800.045898  800.045898 -1397.163330   0.022949          -1397.163330  1185.812012  620.045898      620.030518
6    -577.102051   -1317.155762  -577.102051  820.038330  820.038330 -1317.155762   0.022949          -1317.155762  1185.812012  740.030762      720.022949
7    -477.102051   -1197.148193  -477.102051  840.030762  840.030762 -1197.148193   0.022949          -1197.148193  1185.812012  720.023193      720.022949
8    -337.102051   -1197.147949  -337.102051  860.023193  860.023193 -1197.147949  40.015381          -1097.140381  1185.812012  820.030518      720.030518
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=40, 
, buffer=2949245/4096.[0m
[10/25 14:19:54]  --------------------------------------------------------------------------------
[10/25 14:19:54]  Iteration: 5 (0 solution, 4 counterexamples)
[10/25 14:19:54]  Generator returned sat in 0.017436 secs.
[10/25 14:19:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:54]  Improved number of small numbers from 108 to 108 out of a max of 108
[10/25 14:19:54]  Verifer returned sat in 0.155779 secs.
[10/25 14:19:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1997.132568   -1997.140381 -1997.132568    0.030518    0.030518 -1997.140381   0.000000          -1997.140381  1185.812012    0.007812      -99.984619
1   -1837.007080   -1837.014404 -1837.007080  160.133301  160.133301 -1837.014404   0.000000          -1837.014404  1185.812012    0.007324      -39.859131
2    -977.109619   -1727.107178  -977.109619  859.904785  859.904785 -1727.107178  10.093262          -1727.107178  1185.812012  739.904297      709.945068
3    -877.101807   -1607.114990  -877.101807  839.912109  839.912109 -1607.114990  10.101074          -1607.114990  1185.812012  719.912109      709.945068
4    -777.094482   -1597.140625  -777.094482  819.919434  819.919434 -1597.140625  10.108398          -1597.140625  1185.812012  809.937744      709.945068
5    -777.094482   -1407.129639  -777.094482  799.926758  799.926758 -1407.129639  10.108398          -1407.129639  1185.812012  619.926758      609.945068
6    -577.101807   -1327.122314  -577.101807  819.919434  819.919434 -1327.122314  10.108398          -1327.122314  1185.812012  739.912109      709.937744
7    -477.101807   -1197.147949  -477.101807  839.912109  839.912109 -1197.147949  10.108398          -1197.147949  1185.812012  709.937744      709.937744
8    -327.134766   -1197.147949  -327.134766  859.904785  859.904785 -1197.147949  60.068115          -1097.140381  1185.812012  809.945068      709.945068
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=204665/4096, 
, buffer=2907935/4096.[0m
[10/25 14:19:55]  --------------------------------------------------------------------------------
[10/25 14:19:55]  Iteration: 6 (0 solution, 5 counterexamples)
[10/25 14:19:55]  Generator returned sat in 0.254314 secs.
[10/25 14:19:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:55]  Improved number of small numbers from 108 to 108 out of a max of 108
[10/25 14:19:55]  Verifer returned sat in 0.180609 secs.
[10/25 14:19:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1997.132812   -1997.140381 -1997.132812    0.030273    0.030273 -1997.140381   0.000000          -1997.140381  1185.811768    0.007568      -99.984863
1   -1797.184326   -1797.191895 -1797.184326  199.956055  199.956055 -1797.191895   0.000000          -1797.191895  1185.811768    0.007568       -0.036377
2    -997.243164   -1697.147949  -997.243164  799.948730  799.948730 -1697.147949   0.007324          -1697.147949  1185.811768  699.897461      699.897461
3    -897.213867   -1597.147949  -897.213867  799.926758  799.926758 -1597.147949   0.036621          -1597.147949  1185.811768  699.897461      699.897461
4    -797.206543   -1597.140625  -797.206543  799.904785  799.904785 -1597.140625   0.043945          -1597.140625  1185.811768  799.890137      699.897461
5    -797.206543   -1397.162598  -797.206543  799.882812  799.882812 -1397.162598   0.043945          -1397.162598  1185.811768  599.912109      599.897461
6    -597.213867   -1327.122314  -597.213867  799.904785  799.904785 -1327.122314   0.043945          -1327.122314  1185.811768  729.864502      699.890137
7    -527.151611   -1197.147949  -527.151611  799.926758  799.926758 -1197.147949   0.043945          -1197.147949  1185.811768  669.952393      669.952393
8    -397.155273   -1197.147949  -397.155273  799.948730  799.948730 -1197.147949   0.095215          -1097.140625  1185.811768  799.897461      699.897461
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=15/256, 
, buffer=716695/1024.[0m
[10/25 14:19:56]  --------------------------------------------------------------------------------
[10/25 14:19:56]  Iteration: 7 (0 solution, 6 counterexamples)
[10/25 14:19:56]  Generator returned sat in 0.173794 secs.
[10/25 14:19:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:57]  Improved number of small numbers from 31 to 108 out of a max of 108
[10/25 14:19:57]  Verifer returned sat in 0.322109 secs.
[10/25 14:19:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1687.184082   -1687.191406 -1687.184082    0.030029    0.030029 -1687.191406    0.000000          -1687.191406  1185.811523    0.007324      -24.975830
1   -1262.148438   -1562.208496 -1262.148438  425.042969  425.042969 -1562.208496    0.000000          -1562.208496  1185.811523  300.060059      300.059814
2   -1062.155762   -1562.178223 -1062.155762  500.052734  500.052734 -1562.178223   99.984863          -1562.178223  1185.811523  400.037598      300.067627
3    -962.148193   -1462.170898  -962.148193  500.045166  500.045166 -1462.170898   99.992432          -1462.170898  1185.811523  400.030273      300.067627
4    -862.140869   -1262.208252  -862.140869  500.037598  500.037598 -1262.208252   99.999756          -1262.208252  1185.811523  300.067627      300.067627
5    -662.163330   -1262.200928  -662.163330  500.045166  500.045166 -1262.200928  199.977295          -1262.200928  1185.811523  400.060303      300.067627
6    -562.170898   -1062.208252  -562.170898  500.052734  500.052734 -1062.208252  199.977295          -1062.208252  1185.811523  300.060059      300.060059
7    -362.185791    -962.208496  -362.185791  500.045166  500.045166  -962.208496  299.954834           -962.208496  1185.811523  300.067871      300.067627
8    -162.200928    -962.208252  -162.200928  500.052734  500.052734  -962.208252  399.939697           -862.201172  1185.811523  400.067627      300.067627
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=153573/512, 
, buffer=1229077/4096.[0m
[10/25 14:19:57]  --------------------------------------------------------------------------------
[10/25 14:19:57]  Iteration: 8 (0 solution, 7 counterexamples)
[10/25 14:19:57]  Generator returned sat in 0.157235 secs.
[10/25 14:19:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:58]  Improved number of small numbers from 69 to 108 out of a max of 108
[10/25 14:19:58]  Verifer returned sat in 0.347826 secs.
[10/25 14:19:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1687.184082   -1687.191406 -1687.184082    0.029785    0.029785 -1687.191406    0.000000          -1687.191406  1185.811279    0.007324      -24.975830
1   -1542.211670   -1562.208496 -1542.211670  144.979736  144.979736 -1562.208496    0.000000          -1562.208496  1185.811279   19.996826       19.996582
2   -1342.226318   -1542.190430 -1342.226318  219.982178  219.982178 -1542.190430   99.981934          -1542.190430  1185.811279   99.982178       20.000000
3   -1242.222656   -1422.194092 -1242.222656  199.985840  199.985840 -1422.194092   99.985596          -1422.194092  1185.811279   79.985840       20.000000
4   -1142.218994   -1262.208252 -1142.218994  179.989502  179.989502 -1262.208252   99.989258          -1262.208252  1185.811279   20.000000       20.000000
5    -962.233154   -1262.194092  -962.233154  199.985840  199.985840 -1262.194092  179.975098          -1262.194092  1185.811279  119.985840       20.000000
6    -862.236816   -1102.222656  -862.236816  219.982178  219.982178 -1102.222656  179.975098          -1102.222656  1185.811279   60.010742       19.996338
7    -722.261719    -962.208252  -722.261719  199.985840  199.985840  -962.208252  219.946533           -962.208252  1185.811279   20.000000       20.000000
8    -522.279541    -962.208252  -522.279541  219.982178  219.982178  -962.208252  319.928711           -862.201416  1185.811279  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=900887/4096, 
, buffer=20.[0m
[10/25 14:19:58]  --------------------------------------------------------------------------------
[10/25 14:19:58]  Iteration: 9 (0 solution, 8 counterexamples)
[10/25 14:19:58]  Generator returned sat in 0.283098 secs.
[10/25 14:19:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:19:59]  Improved gap from 99.0 to 100
[10/25 14:19:59]  Improved number of small numbers from 99 to 109 out of a max of 109
[10/25 14:19:59]  Verifer returned sat in 0.371853 secs.
[10/25 14:19:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1130.278076   -1592.263184 -1130.278076    0.029541    0.029541 -1592.263184   0.000000          -1592.263184  1015.880859  461.985107      362.000000
1   -1068.218506   -1492.278076 -1068.218506  524.044678  524.044678 -1492.278076   0.000000          -1068.203613  1015.880859  424.059570      324.059570
2   -1068.218506   -1309.556396 -1068.218506  424.044434  424.044434 -1309.556396   0.000000          -1309.556396  1015.880859  241.337891      224.059570
3    -865.526855   -1194.277832  -865.526855  444.029541  444.029541 -1194.277832   0.000000          -1194.277832  1015.880859  328.750977      326.751221
4    -730.263184   -1192.278076  -730.263184  464.014648  464.014648 -1192.278076   0.014893          -1192.292725  1015.880859  462.000000      362.000000
5    -730.263184   -1090.337402  -730.263184  444.029541  444.029541 -1090.337402   0.014893          -1090.337402  1015.880859  360.059326      262.000000
6    -666.278076    -909.571289  -666.278076  424.044434  424.044434  -909.571289   0.014893           -909.571289  1015.880859  243.278320      225.985107
7    -465.526855    -794.307617  -465.526855  444.029541  444.029541  -794.307617   0.014893           -794.307617  1015.880859  328.765869      326.736328
8    -330.278076    -792.262939  -330.278076  464.014648  464.014648  -792.262939   0.014893           -792.262939  1015.880859  461.969971      361.985107
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=61/4096, 
, buffer=362.[0m
[10/25 14:19:59]  --------------------------------------------------------------------------------
[10/25 14:19:59]  Iteration: 10 (0 solution, 9 counterexamples)
[10/25 14:20:00]  Generator returned sat in 0.290930 secs.
[10/25 14:20:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:00]  Improved number of small numbers from 81 to 108 out of a max of 108
[10/25 14:20:00]  Verifer returned sat in 0.322482 secs.
[10/25 14:20:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1130.278320   -1592.274414 -1130.278320    0.029541    0.029541 -1592.274414  17.973877          -1592.274414  1015.880615  444.022217      344.025879
1   -1058.262451   -1492.278076 -1058.262451  516.038086  516.038086 -1492.278076  17.973877          -1068.203613  1015.880615  416.041748      316.041748
2   -1058.262451   -1305.578857 -1058.262451  416.038330  416.038330 -1305.578857  17.973877          -1305.578857  1015.880615  229.342529      216.041748
3    -857.565430   -1192.278076  -857.565430  430.039551  430.039551 -1192.278076  17.973877          -1192.278076  1015.880615  316.738770      316.738770
4    -730.263428   -1192.278076  -730.263428  444.040771  444.040771 -1192.278076  17.977539          -1192.292725  1015.880615  444.037109      344.037109
5    -730.263428   -1090.337646  -730.263428  430.039551  430.039551 -1090.337646  17.977539          -1090.337646  1015.880615  342.096680      244.037109
6    -656.321777    -905.582520  -656.321777  416.038330  416.038330  -905.582520  17.977539           -905.582520  1015.880615  231.283203      217.978760
7    -457.565430    -794.307617  -457.565430  430.039551  430.039551  -794.307617  17.977539           -794.307617  1015.880615  318.764648      316.735107
8    -332.289307    -792.274658  -332.289307  444.040771  444.040771  -792.274658  17.977539           -792.274658  1015.880615  442.007812      342.011230
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=15/4096, 
, buffer=176147/512.[0m
[10/25 14:20:01]  --------------------------------------------------------------------------------
[10/25 14:20:01]  Iteration: 11 (0 solution, 10 counterexamples)
[10/25 14:20:01]  Generator returned sat in 0.113251 secs.
[10/25 14:20:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:01]  Improved gap from 0.0 to 100
[10/25 14:20:02]  Improved number of small numbers from 46 to 109 out of a max of 109
[10/25 14:20:02]  Verifer returned sat in 0.730642 secs.
[10/25 14:20:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0   -1472.292969   -1572.300293 -1472.292969    0.029541    0.029541 -1572.300293    0.000000          -1572.300293  995.909912  100.007324        0.014648
1   -1372.300293   -1472.300293 -1372.300293  200.000000  200.000000 -1472.300293    0.000000          -1472.300293  995.909912  100.000000        0.007324
2   -1319.314941   -1319.315186 -1319.314941  152.985352  152.985352 -1319.315186    0.000000          -1319.315186  995.909912    0.000244      -47.007324
3   -1166.337158   -1225.300293 -1166.337158  152.978027  152.978027 -1225.300293    5.955566          -1225.300293  995.909912   53.007568        0.014893
4   -1066.359375   -1072.322510 -1066.359375  152.985352  152.985352 -1072.322510    5.955566          -1072.322510  995.909912    0.007568       -0.007324
5    -913.388916   -1072.307617  -913.388916  152.978027  152.978027 -1072.307617   58.903809          -1072.315186  995.909912  100.014893        0.014893
6    -860.418457    -919.322510  -860.418457  152.985352  152.985352  -919.322510   58.903809           -919.322510  995.909912    0.000244      -47.014648
7    -707.440674    -772.307617  -707.440674  152.978027  152.978027  -772.307617   64.852051           -772.307617  995.909912    0.014893        0.014893
8    -554.470215    -772.307617  -554.470215  152.985352  152.985352  -772.307617  117.822510           -772.307617  995.909912  100.014893        0.014893
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=458207/4096, 
, buffer=61/4096.[0m
[10/25 14:20:02]  --------------------------------------------------------------------------------
[10/25 14:20:02]  Iteration: 12 (0 solution, 11 counterexamples)
[10/25 14:20:03]  Generator returned sat in 0.413870 secs.
[10/25 14:20:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 1alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:05]  Improved gap from 0.0147705078125 to 32.8125
[10/25 14:20:06]  Improved number of small numbers from 74 to 109 out of a max of 109
[10/25 14:20:06]  Verifer returned sat in 2.932241 secs.
[10/25 14:20:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -958.257080   -1134.589844  -958.257080    0.029541    0.029541 -1134.589844        0.0          -1134.589844  614.191895  176.332764      132.332764
1    -858.271729   -1029.590088  -858.271729  276.318115  276.318115 -1029.590088        0.0          -1029.590088  614.191895  171.318359      132.318115
2    -858.271729    -891.172852  -858.271729   32.827393   32.827393  -891.172852        0.0           -891.172852  614.191895   32.901123       32.318115
3    -858.271729    -890.589844  -858.271729   32.886475   32.886475  -890.589844        0.0           -890.604736  681.276367   32.318115       -0.597412
4    -857.644287    -857.659424  -857.644287   32.945557   32.945557  -857.659424        0.0           -857.659424  748.404541    0.015137      -32.841797
5    -824.772949    -824.787598  -824.772949   32.886475   32.886475  -824.787598        0.0           -824.787598  815.444336    0.014648      -32.930664
6    -791.842041    -791.842285  -791.842041   32.945557   32.945557  -791.842285        0.0           -791.857178  882.631836    0.000244      -32.812256
7    -758.955811    -759.014893  -758.955811   32.886475   32.886475  -759.014893        0.0           -759.014893  949.804443    0.059082      -32.753418
8    -726.187500    -726.187744  -726.187500   32.827393   32.827393  -726.187744        0.0           -726.187744  949.804443    0.000244      -99.985107
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=135509/1024.[0m
[10/25 14:20:06]  --------------------------------------------------------------------------------
[10/25 14:20:06]  Iteration: 13 (0 solution, 12 counterexamples)
[10/25 14:20:07]  Generator returned sat in 0.295089 secs.
[10/25 14:20:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:13]  Improved gap from 0.003692626953125 to 26.5625
[10/25 14:20:14]  Improved number of small numbers from 76 to 109 out of a max of 109
[10/25 14:20:14]  Verifer returned sat in 6.987307 secs.
[10/25 14:20:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1088.475342   -1208.460449 -1088.475342    0.029541    0.029541 -1208.460449        0.0          -1208.460449   632.077148  119.985107       19.999756
1    -996.420654   -1029.590088  -996.420654  212.039795  212.039795 -1029.590088        0.0          -1029.590088   632.077148   33.169434       12.054443
2    -996.406006   -1008.460693  -996.406006   33.184082   33.184082 -1008.460693        0.0          -1008.460693   700.037598   12.054688      -19.970459
3    -955.291260    -976.420898  -955.291260   53.169434   53.169434  -976.420898        0.0           -976.420898   773.460205   21.129639       -5.433105
4    -943.236816    -949.843506  -943.236816   33.184082   33.184082  -949.843506        0.0           -949.843506   846.868408    6.606689      -19.970459
5    -896.674072    -923.251465  -896.674072   53.169434   53.169434  -923.251465        0.0           -923.251465   920.276123   26.577393        0.000000
6    -890.067383    -896.659424  -890.067383   33.184082   33.184082  -896.659424        0.0           -896.659424   993.698730    6.592041      -19.970703
7    -843.489990    -870.082275  -843.489990   53.169434   53.169434  -870.082275        0.0           -870.082275  1067.092041   26.592285        0.000000
8    -836.898193    -843.475342  -836.898193   33.184082   33.184082  -843.475342        0.0           -843.475342  1140.514648    6.577148      -19.985596
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=20.[0m
[10/25 14:20:14]  --------------------------------------------------------------------------------
[10/25 14:20:14]  Iteration: 14 (0 solution, 13 counterexamples)
[10/25 14:20:15]  Generator returned sat in 0.559061 secs.
[10/25 14:20:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:18]  Improved gap from 0.0 to 32.8125
[10/25 14:20:19]  Improved number of small numbers from 45 to 109 out of a max of 109
[10/25 14:20:19]  Verifer returned sat in 3.634395 secs.
[10/25 14:20:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0    -950.788330   -1282.696777  -950.788330   0.029541   0.029541 -1282.696777        0.0          -1282.700195   706.169189  331.908447      231.908447
1    -950.788330   -1182.696777  -950.788330   0.003906   0.003906 -1182.696777        0.0          -1182.700195   706.169189  231.908447      131.908447
2    -950.788330    -983.619141  -950.788330  32.823730  32.823730  -983.619141        0.0           -983.619141   706.169189   32.830811       31.908447
3    -950.788330    -982.693115  -950.788330  32.827393  32.827393  -982.693115        0.0           -982.693115   773.353027   31.904785       -0.907715
4    -949.862061    -949.880615  -949.862061  32.831055  32.831055  -949.880615        0.0           -949.884033   840.540527    0.018555      -32.793945
5    -917.053223    -917.068115  -917.053223  32.827393  32.827393  -917.068115        0.0           -917.049316   907.727783    0.014893      -32.797852
6    -884.244385    -884.251953  -884.244385  32.823730  32.823730  -884.251953        0.0           -884.251953   974.911621    0.007568      -32.805176
7    -851.431885    -851.435791  -851.431885  32.820068  32.820068  -851.435791        0.0           -851.435791  1042.095459    0.003906      -32.808838
8    -818.619385    -818.623047  -818.619385  32.816406  32.816406  -818.623047        0.0           -818.623047  1042.095703    0.003662      -99.996094
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=949897/4096.[0m
[10/25 14:20:19]  --------------------------------------------------------------------------------
[10/25 14:20:19]  Iteration: 15 (0 solution, 14 counterexamples)
[10/25 14:20:20]  Generator returned sat in 0.205240 secs.
[10/25 14:20:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:25]  Improved gap from 0.003814697265625 to 29.6875
[10/25 14:20:25]  Improved number of small numbers from 40 to 109 out of a max of 109
[10/25 14:20:25]  Verifer returned sat in 5.865234 secs.
[10/25 14:20:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1930.101807   -2118.549072 -1930.101807    0.029541    0.029541 -2118.549072        0.0          -2118.549072   703.055176  188.447266       88.461670
1   -1830.116455   -1918.563477 -1830.116455  288.432617  288.432617 -1918.563477        0.0          -1918.563477   703.055176   88.447021       88.447021
2   -1830.116455   -1830.131104 -1830.116455   31.702393   31.702393 -1830.131104        0.0          -1830.131104   703.055176    0.014648      -11.552979
3   -1788.861328   -1818.548828 -1788.861328   41.269775   41.269775 -1818.548828        0.0          -1818.548828   773.353027   29.687500        0.000000
4   -1767.711670   -1787.846680 -1767.711670   50.837158   50.837158 -1787.846680        0.0          -1787.846680   842.650635   20.135010       -9.552734
5   -1746.576904   -1758.144287 -1746.576904   41.269775   41.269775 -1758.144287        0.0          -1758.144287   912.948486   11.567383      -18.120117
6   -1726.441895   -1728.456787 -1726.441895   31.702393   31.702393 -1728.456787        0.0          -1728.471436   983.260742    2.014893      -27.672852
7   -1687.187012   -1697.739746 -1687.187012   41.269775   41.269775 -1697.739746        0.0          -1697.739746  1052.543701   10.552734      -19.135010
8   -1666.037354   -1666.037354 -1666.037354   31.702393   31.702393 -1666.037354        0.0          -1666.037354  1120.841553    0.000000      -29.687500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=90585/1024.[0m
[10/25 14:20:26]  --------------------------------------------------------------------------------
[10/25 14:20:26]  Iteration: 16 (0 solution, 15 counterexamples)
[10/25 14:20:27]  Generator returned sat in 0.303671 secs.
[10/25 14:20:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:28]  Improved gap from 0.00738525390625 to 26.5625
[10/25 14:20:29]  Improved number of small numbers from 71 to 109 out of a max of 109
[10/25 14:20:29]  Verifer returned sat in 2.287407 secs.
[10/25 14:20:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     wasted_t     queue_t  bottle_queue_t
0   -1918.555908   -2018.556152 -1918.555908   0.029541   0.029541 -2018.556152        0.0          -2018.556152   603.055176  100.000244        0.007568
1   -1918.555908   -1918.563477 -1918.555908   0.007568   0.007568 -1918.563477        0.0          -1891.993652   676.492432    0.007568      -26.555176
2   -1864.408936   -1891.993652 -1864.408936  54.154541  54.154541 -1891.993652        0.0          -1891.993652   748.900635   27.584717        0.000000
3   -1837.831787   -1864.408936 -1837.831787  54.161865  54.161865 -1864.408936        0.0          -1864.416260   822.323486   26.577148        0.000000
4   -1810.254395   -1837.831787 -1810.254395  54.154541  54.154541 -1837.831787        0.0          -1810.246826   894.746094   27.577393        0.000000
5   -1783.669922   -1810.254395 -1783.669922  54.161865  54.161865 -1810.254395        0.0          -1783.662354   968.161377   26.584473       -0.000244
6   -1756.099854   -1782.662354 -1756.099854  54.154541  54.154541 -1782.662354        0.0          -1782.662354  1040.591553   26.562500        0.000000
7   -1728.500488   -1756.099854 -1728.500488  54.161865  54.161865 -1756.099854        0.0          -1756.107178  1112.992188   27.599365        0.000000
8   -1701.945312   -1728.500488 -1701.945312  54.154541  54.154541 -1728.500488        0.0          -1728.508057  1112.992188   26.555176      -73.444824
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=61/4096.[0m
[10/25 14:20:29]  --------------------------------------------------------------------------------
[10/25 14:20:29]  Iteration: 17 (0 solution, 16 counterexamples)
[10/25 14:20:30]  Generator returned sat in 0.247156 secs.
[10/25 14:20:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:31]  Verifer returned unsat in 0.641296 secs.
[10/25 14:20:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:31]  --------------------------------------------------------------------------------
[10/25 14:20:31]  Iteration: 18 (1 solution, 16 counterexamples)
[10/25 14:20:31]  Generator returned sat in 0.044353 secs.
[10/25 14:20:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:32]  Verifer returned unsat in 0.799797 secs.
[10/25 14:20:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:32]  --------------------------------------------------------------------------------
[10/25 14:20:32]  Iteration: 19 (2 solution, 16 counterexamples)
[10/25 14:20:32]  Generator returned sat in 0.045048 secs.
[10/25 14:20:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:33]  Verifer returned unsat in 0.636699 secs.
[10/25 14:20:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:33]  --------------------------------------------------------------------------------
[10/25 14:20:33]  Iteration: 20 (3 solution, 16 counterexamples)
[10/25 14:20:33]  Generator returned sat in 0.054513 secs.
[10/25 14:20:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:34]  Verifer returned unsat in 1.120004 secs.
[10/25 14:20:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:34]  --------------------------------------------------------------------------------
[10/25 14:20:34]  Iteration: 21 (4 solution, 16 counterexamples)
[10/25 14:20:35]  Generator returned unsat in 0.000188 secs.
[10/25 14:20:35]  [96mNo more solutions found[0m
[10/25 14:20:35]  Final solutions:
[10/25 14:20:35]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:35]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:35]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:35]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:35]  Took 44.863695 secs.
