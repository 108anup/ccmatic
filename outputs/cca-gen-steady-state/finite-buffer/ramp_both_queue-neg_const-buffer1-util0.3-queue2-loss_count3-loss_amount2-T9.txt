[08/30 13:26:50]  --------------------------------------------------------------------------------
[08/30 13:26:50]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 13:26:50]  Generator returned sat in 0.004319 secs.
[08/30 13:26:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:26:50]  Improved gap from 0.1 to 100
[08/30 13:26:50]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:26:50]  Verifer returned sat in 0.244226 secs.
[08/30 13:26:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0        -1399.3        -1499.3    1499.3      -1399.3       0.1      -1499.3        0.0    100.0           100.0
1        -1399.3        -1499.3    1499.3      -1399.3       0.1      -1499.3        0.0    100.0             0.0
2        -1299.3        -1299.4    1499.3      -1299.3     200.0      -1299.4        0.0      0.1             0.0
3         -999.2        -1199.3    1499.3       -999.2     300.2      -1199.3        0.1    200.0           200.0
4            2.2        -1144.3    1499.3          2.2    1201.4      -1144.3      901.5    245.0           200.0
5         2871.0        -1099.3    1499.3       2871.0    3113.8      -1099.3     3670.3    300.0           200.0
6         9199.8         -999.3    1499.3       9199.8    6628.8       -999.3     9899.1    300.0           200.0
7        22558.4         -899.3    1499.3      22558.4   13658.6       -899.3    23157.7    300.0           200.0
8        50066.6         -799.3    1499.3      50066.6   27808.2       -799.3    50565.9    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=248322/5, 
.[0m
[08/30 13:26:51]  --------------------------------------------------------------------------------
[08/30 13:26:51]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 13:26:51]  Generator returned sat in 0.076277 secs.
[08/30 13:26:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:51]  Improved number of small numbers from 68 to 99 out of a max of 99
[08/30 13:26:51]  Verifer returned sat in 0.250700 secs.
[08/30 13:26:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t      cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t
0   -1499.250000   -1500.300049  1499.300049  -1499.250000      0.099609 -1500.300049      0.000000    1.050049        0.050049
1   -1499.250000   -1499.300049  1499.300049  -1499.250000      0.050049 -1499.300049      0.000000    0.050049      -99.949951
2   -1399.250000   -1399.300049  1499.300049  -1399.250000    100.050049 -1399.300049      0.000000    0.050049      -99.949951
3   49166.550049   -1200.300049  1499.300049  49166.550049  50565.850098 -1200.300049  50165.850098  201.000000      200.000000
4   49266.550049   -1099.300049  1499.300049  49266.550049    301.000000 -1099.300049  50165.850098  200.000000      200.000000
5   49718.050049   -1027.025146  1499.300049  49718.050049    651.500000 -1027.025146  50517.350098  227.725098      200.000000
6   49863.599854    -899.300049  1499.300049  49863.599854    373.274902  -899.300049  50562.899902  200.000000      200.000000
7   49965.599854    -799.300049  1499.300049  49965.599854    302.000000  -799.300049  50564.899902  200.000000      200.000000
8   50066.599854    -799.299805  1499.300049  50066.599854    301.000000  -799.299805  50565.899902  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=409651/1024, 
.[0m
[08/30 13:26:51]  --------------------------------------------------------------------------------
[08/30 13:26:51]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 13:26:51]  Generator returned sat in 0.010861 secs.
[08/30 13:26:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:52]  Improved number of small numbers from 70 to 99 out of a max of 99
[08/30 13:26:52]  Verifer returned sat in 0.203062 secs.
[08/30 13:26:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t      cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t
0   -1499.293701   -1502.256592  1499.299805  -1499.293701      0.099609 -1502.256592      0.000000    2.962891        0.006348
1   -1499.293701   -1499.300049  1499.299805  -1499.293701      0.006104 -1499.300049      0.000000    0.006348      -99.993652
2   -1399.250000   -1399.300049  1499.299805  -1399.250000    100.050049 -1399.300049      0.000000    0.050049      -99.949951
3   49166.549805   -1200.778320  1499.299805  49166.549805  50565.849854 -1200.778320  50165.849854  201.478271      200.000000
4   49266.549805   -1100.778320  1499.299805  49266.549805    301.478271 -1100.778320  50165.849854  201.478271      200.000000
5   49716.549805   -1025.775146  1499.299805  49716.549805    651.478271 -1025.775146  50515.849854  226.475098      200.000000
6   49863.599609    -899.300049  1499.299805  49863.599609    373.524902  -899.300049  50562.899658  200.000000      200.000000
7   49965.077881    -799.300049  1499.299805  49965.077881    301.478271  -799.300049  50564.377930  200.000000      200.000000
8   50066.556152    -799.299805  1499.299805  50066.556152    301.478271  -799.299805  50565.856201  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=819213/2048, 
.[0m
[08/30 13:26:52]  --------------------------------------------------------------------------------
[08/30 13:26:52]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 13:26:52]  Generator returned sat in 0.085569 secs.
[08/30 13:26:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:52]  Improved number of small numbers from 48 to 99 out of a max of 99
[08/30 13:26:52]  Verifer returned sat in 0.220146 secs.
[08/30 13:26:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1499.293701   -1647.296143  1599.293213 -1499.293701    0.099609 -1647.296143   0.000000  148.002441           100.0
1   -1499.293701   -1599.293701  1599.293213 -1499.293701    0.005859 -1599.293701   0.000000  100.000000             0.0
2   -1399.293701   -1399.294434  1599.293213 -1399.293701  200.000000 -1399.294434   0.000000    0.000732             0.0
3   -1099.292969   -1323.294434  1599.293213 -1099.292969  300.001465 -1323.294434   0.000732  224.000732           200.0
4    -999.291992   -1249.293457  1599.293213  -999.291992  324.001709 -1249.293457   0.001709  249.999756           200.0
5    -899.291504   -1099.293701  1599.293213  -899.291504  350.000244 -1099.293701   0.002197  200.000000           200.0
6    -799.290771   -1011.293701  1599.293213  -799.290771  300.000732 -1011.293701   0.002930  212.000000           200.0
7    -699.290039    -924.293213  1599.293213  -699.290039  312.000732  -924.293213   0.003662  224.999512           200.0
8    -599.289307    -899.293701  1599.293213  -599.289307  325.000244  -899.293701   0.004395  300.000000           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=11/4096, 
.[0m
[08/30 13:26:53]  --------------------------------------------------------------------------------
[08/30 13:26:53]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 13:26:53]  Generator returned sat in 0.240865 secs.
[08/30 13:26:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:54]  Improved number of small numbers from 56 to 97 out of a max of 99
[08/30 13:26:54]  Verifer returned sat in 0.577473 secs.
[08/30 13:26:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1546.297852   -1546.347656  1599.292969 -1546.297852    0.099609 -1546.347656    0.000000    0.049805        0.024902
1   -1546.297852   -1546.322754  1599.292969 -1546.297852    0.024902 -1546.322754    0.000000    0.024902      -99.975098
2   -1146.347900   -1446.322754  1599.292969 -1146.347900  399.974854 -1446.322754    0.000000  299.974854      199.974854
3   -1146.347900   -1346.322754  1599.292969 -1146.347900   74.256348 -1346.322754    0.000000  199.974854       99.974854
4   -1146.347900   -1195.835449  1599.292969 -1146.347900  174.268799 -1195.835449    0.000000   49.487549       -0.025146
5    -846.322998   -1046.322754  1599.292969  -846.322998  349.512451 -1046.322754    0.000000  199.999756      199.999756
6    -496.810303   -1022.103760  1599.292969  -496.810303  549.512451 -1022.103760  249.512451  275.781006      200.000000
7    -496.810303    -846.322998  1599.292969  -496.810303  275.756226  -846.322998  249.512451  100.000244      100.000000
8    -146.298096    -846.322754  1599.292969  -146.298096  450.512451  -846.322754  400.024658  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638501/4096, 
.[0m
[08/30 13:26:54]  --------------------------------------------------------------------------------
[08/30 13:26:54]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 13:26:54]  Generator returned sat in 0.033489 secs.
[08/30 13:26:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:26:54]  Improved number of small numbers from 81 to 91 out of a max of 99
[08/30 13:26:54]  Verifer returned sat in 0.458712 secs.
[08/30 13:26:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1546.297852   -1546.322754  1599.292969 -1546.297852    0.099365 -1546.322754    0.000000    0.024902        0.024902
1   -1546.297852   -1546.322754  1599.292969 -1546.297852    0.018799 -1546.322754    0.000000    0.024902      -99.975098
2   -1146.348145   -1444.410156  1599.292969 -1146.348145  399.974609 -1444.410156    0.000000  298.062012      199.974609
3   -1146.348145   -1346.322754  1599.292969 -1146.348145   79.206299 -1346.322754    0.000000  199.974609       99.974609
4   -1146.348145   -1197.797852  1599.292969 -1146.348145  178.206299 -1197.797852    0.000000   51.449707       -0.025391
5    -846.329102   -1046.322754  1599.292969  -846.329102  351.468750 -1046.322754    0.000000  199.993652      199.993652
6    -496.810303   -1022.085449  1599.292969  -496.810303  549.512451 -1022.085449  249.512451  275.762695      200.000000
7    -496.810303    -846.322754  1599.292969  -496.810303  275.756226  -846.322754  249.512451  100.000000      100.000000
8    -146.316528    -846.322754  1599.292969  -146.316528  450.493774  -846.322754  400.006226  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3276851/8192, 
.[0m
[08/30 13:26:55]  --------------------------------------------------------------------------------
[08/30 13:26:55]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 13:26:55]  Generator returned sat in 0.209072 secs.
[08/30 13:26:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:55]  Verifer returned unsat in 0.174434 secs.
[08/30 13:26:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:55]  --------------------------------------------------------------------------------
[08/30 13:26:55]  Iteration: 8 (1 solution, 6 counterexamples)
[08/30 13:26:55]  Generator returned sat in 0.014769 secs.
[08/30 13:26:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:55]  Verifer returned unsat in 0.133006 secs.
[08/30 13:26:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:26:55]  --------------------------------------------------------------------------------
[08/30 13:26:55]  Iteration: 9 (2 solution, 6 counterexamples)
[08/30 13:26:56]  Generator returned sat in 0.016042 secs.
[08/30 13:26:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:26:56]  Verifer returned unsat in 0.112513 secs.
[08/30 13:26:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:26:56]  --------------------------------------------------------------------------------
[08/30 13:26:56]  Iteration: 10 (3 solution, 6 counterexamples)
[08/30 13:26:56]  Generator returned sat in 0.012754 secs.
[08/30 13:26:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:26:56]  Verifer returned unsat in 0.104636 secs.
[08/30 13:26:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:26:56]  --------------------------------------------------------------------------------
[08/30 13:26:56]  Iteration: 11 (4 solution, 6 counterexamples)
[08/30 13:26:56]  Generator returned sat in 0.407962 secs.
[08/30 13:26:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:26:57]  Improved gap from 0.0 to 100
[08/30 13:26:58]  Improved number of small numbers from 28 to 36 out of a max of 100
[08/30 13:26:58]  Verifer returned sat in 1.209946 secs.
[08/30 13:26:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1416.330811   -1510.846875  1469.325911 -1416.330811    0.099365 -1510.846875    0.000000   94.516064        0.024886
1   -1416.330811   -1416.355697  1469.325911 -1416.330811    0.024658 -1416.355697    0.000000    0.024886      -99.975114
2   -1316.355697   -1316.355697  1469.325911 -1316.355697  100.000000 -1316.355697    0.000000    0.000000     -100.000000
3    -916.330855   -1181.844476  1469.325911  -916.330855  400.024841 -1181.844476    0.024841  265.488779      200.000000
4    -816.306014   -1072.177009  1469.325911  -816.306014  365.513620 -1072.177009    0.049683  255.821313      200.000000
5    -716.281173    -916.355697  1469.325911  -716.281173  355.846154  -916.355697    0.074524  200.000000      200.000000
6    -537.358096    -816.355697  1469.325911  -537.358096  378.923077  -816.355697   78.997601  200.000000      200.000000
7    -364.152168    -716.355697  1469.325911  -364.152168  373.205928  -716.355697  152.203529  200.000000      200.000000
8    -198.638548    -716.355469  1469.325911  -198.638548  365.513620  -716.355469  217.717149  299.999772      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=46361429/212992, 
.[0m
[08/30 13:26:58]  --------------------------------------------------------------------------------
[08/30 13:26:58]  Iteration: 12 (4 solution, 7 counterexamples)
[08/30 13:26:59]  Generator returned sat in 0.549536 secs.
[08/30 13:26:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:00]  Improved number of small numbers from 33 to 35 out of a max of 99
[08/30 13:27:00]  Verifer returned sat in 1.466196 secs.
[08/30 13:27:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1416.330811   -1500.847424  1469.325911 -1416.330811    0.099121 -1500.847424    0.000000   84.516613        0.024886
1   -1416.330811   -1416.355697  1469.325911 -1416.330811    0.024658 -1416.355697    0.000000    0.024886      -99.975114
2   -1316.355697   -1316.355697  1469.325911 -1316.355697  100.000000 -1316.355697    0.000000    0.000000     -100.000000
3    -916.330672   -1177.844842  1469.325911  -916.330672  400.025024 -1177.844842    0.025024  261.489145      200.000000
4    -816.306014   -1070.177192  1469.325911  -816.306014  361.513803 -1070.177192    0.049683  253.821496      200.000000
5    -716.281356    -916.355697  1469.325911  -716.281356  353.846154  -916.355697    0.074341  200.000000      200.000000
6    -539.358279    -816.355697  1469.325911  -539.358279  376.923077  -816.355697   76.997418  200.000000      200.000000
7    -370.152168    -716.355697  1469.325911  -370.152168  369.206111  -716.355697  146.203529  200.000000      200.000000
8    -208.638364    -716.355469  1469.325911  -208.638364  361.513803  -716.355469  207.717332  299.999772      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=11057887/53248, 
.[0m
[08/30 13:27:00]  --------------------------------------------------------------------------------
[08/30 13:27:00]  Iteration: 13 (4 solution, 8 counterexamples)
[08/30 13:27:01]  Generator returned sat in 0.780822 secs.
[08/30 13:27:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:27:02]  Improved number of small numbers from 30 to 99 out of a max of 99
[08/30 13:27:02]  Verifer returned sat in 0.556529 secs.
[08/30 13:27:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1416.368164   -1416.368164  1469.338135 -1416.368164    0.099121 -1416.368164    0.000000    0.000000        0.000000
1   -1116.355713   -1316.368164  1469.338135 -1116.355713  300.012451 -1316.368164    0.012451  200.000000      200.000000
2   -1016.343262   -1216.368164  1469.338135 -1016.343262  300.012451 -1216.368164    0.024902  200.000000      200.000000
3    -916.331055   -1116.368164  1469.338135  -916.331055  300.012207 -1116.368164    0.037109  200.000000      200.000000
4    -916.331055   -1066.365967  1469.338135  -916.331055  150.006104 -1066.365967    0.037109  149.997803      100.000000
5    -716.318604    -916.368164  1469.338135  -716.318604  350.010254  -916.368164    0.049561  200.000000      200.000000
6    -716.318604    -916.367920  1469.338135  -716.318604  175.005127  -916.367920    0.049561  199.999756      100.000000
7    -553.810547    -728.875244  1469.338135  -553.810547  362.507812  -728.875244    0.049561  175.015137      162.508057
8     -16.318604    -616.368164  1469.338135   -16.318604  712.507080  -616.368164  400.049561  200.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638451/4096, 
.[0m
[08/30 13:27:02]  --------------------------------------------------------------------------------
[08/30 13:27:02]  Iteration: 14 (4 solution, 9 counterexamples)
[08/30 13:27:03]  Generator returned sat in 0.522454 secs.
[08/30 13:27:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:03]  Improved gap from 0.0 to 100
[08/30 13:27:04]  Improved number of small numbers from 64 to 70 out of a max of 100
[08/30 13:27:04]  Verifer returned sat in 0.860407 secs.
[08/30 13:27:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -989.970215    -989.970296  1469.338135  -989.970215    0.098877  -989.970296    0.000000    0.000081        0.000081
1    -989.967796    -989.970296  1469.338135  -989.967796    0.002500  -989.970296    0.000000    0.002500      -99.997500
2    -889.967796    -889.970296  1469.338135  -889.967796  100.002500  -889.970296    0.000000    0.002500      -99.997500
3    -778.962796    -789.970296  1469.338135  -778.962796  111.007500  -789.970296    0.000000   11.007500      -88.992500
4    -535.466546    -589.970296  1469.338135  -535.466546  254.503750  -589.970296    0.000000   54.503750       54.503750
5     -63.718421    -489.970459  1469.338135   -63.718421  526.251875  -489.970459  226.251875  200.000163      200.000000
6     -63.718421    -439.474046  1469.338135   -63.718421    0.010000  -439.474046  226.251875  149.503750      100.000000
7     136.279079    -289.970296  1469.338135   136.279079  349.501250  -289.970296  226.251875  199.997500      199.997500
8     410.032204    -289.970215  1469.338135   410.032204  473.750625  -289.970215  400.002500  299.999919      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[08/30 13:27:04]  --------------------------------------------------------------------------------
[08/30 13:27:04]  Iteration: 15 (4 solution, 10 counterexamples)
[08/30 13:27:05]  Generator returned sat in 0.743860 secs.
[08/30 13:27:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:05]  Improved gap from 0.0425531914893617 to 7.8125
[08/30 13:27:05]  Improved number of small numbers from 59 to 100 out of a max of 100
[08/30 13:27:05]  Verifer returned sat in 0.392867 secs.
[08/30 13:27:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     136.524170     -63.475830  1469.337891   136.524170    0.098633   -63.475830        0.0  200.000000      199.999756
1     236.474609     -63.475586  1469.337891   236.474609  299.950439   -63.475586        0.0  299.950195      199.950195
2     336.474854      76.185547  1469.337891   336.474854  399.950439    76.185547        0.0  260.289307      199.950439
3     356.185547     136.524414  1469.337891   356.185547  280.000000   136.524414        0.0  219.661133      119.661133
4     356.185547     287.636230  1469.337891   356.185547  139.000000   287.636230        0.0   68.549316       19.661133
5     356.185547     336.524414  1549.676758   356.185547   68.500000   336.524414        0.0   19.661133        0.000000
6     369.774414     361.961914  1636.087891   369.774414   33.250000   361.961914        0.0    7.812500        0.000000
7     377.586914     369.774414  1728.275391   377.586914   15.625000   369.774414        0.0    7.812500        0.000000
8     377.586914     377.586914  1728.275391   377.586914    6.812500   377.586914        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:06]  --------------------------------------------------------------------------------
[08/30 13:27:06]  Iteration: 16 (4 solution, 11 counterexamples)
[08/30 13:27:06]  Generator returned sat in 0.103410 secs.
[08/30 13:27:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:06]  Improved gap from 0.0025 to 28.125
[08/30 13:27:06]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 13:27:06]  Verifer returned sat in 0.431897 secs.
[08/30 13:27:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      14.049072      14.049072  1460.410156    14.049072    0.098389    14.049072   0.000000    0.000000        0.000000
1     314.098145      14.049072  1460.410156   314.098145  300.049072    14.049072   0.049072  300.000000      200.000000
2     414.048828     214.049072  1460.410156   414.048828  399.950684   214.049072   0.049072  199.950684      199.950684
3     414.048828     314.049072  1460.410156   414.048828   34.026367   314.049072   0.049072   99.950684       99.950684
4     414.048828     413.098389  1460.410156   414.048828   33.026367   413.098389   0.049072    0.901367       -0.049316
5     445.173828     414.049072  1529.334473   445.173828   32.026367   414.049072   0.049072   31.075684        0.000000
6     445.173828     445.124756  1601.209473   445.173828   31.026367   445.124756   0.049072    0.000000      -28.125000
7     475.200195     473.249756  1673.084473   475.200195   30.026367   473.249756   0.049072    1.901367      -26.223633
8     502.325195     501.374756  1744.959473   502.325195   29.026367   501.374756   0.049072    0.901367      -27.223633
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:07]  --------------------------------------------------------------------------------
[08/30 13:27:07]  Iteration: 17 (4 solution, 12 counterexamples)
[08/30 13:27:07]  Generator returned sat in 0.421736 secs.
[08/30 13:27:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:27:08]  Improved number of small numbers from 58 to 99 out of a max of 99
[08/30 13:27:08]  Verifer returned sat in 0.279579 secs.
[08/30 13:27:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     -15.901855     -15.901855  1744.959473   -15.901855    0.098389   -15.901855   0.000000    0.000000      -29.950928
1     314.098145      14.049072  1744.959473   314.098145  330.000000    14.049072   0.049072  300.000000      200.000000
2     414.073486     213.024414  1744.959473   414.073486  399.975342   213.024414   0.049072  201.000000      199.975342
3     514.122559     299.585938  1744.959473   514.122559  301.049072   299.585938   0.073486  214.463135      200.000000
4     614.147217     398.561279  1744.959473   614.147217  314.487793   398.561279   0.098145  215.487793      200.000000
5     782.171631     514.049072  1744.959473   782.171631  383.512207   514.049072  68.122559  200.000000      200.000000
6     882.196289     607.329834  1744.959473   882.196289  300.024658   607.329834  68.147217  206.719238      200.000000
7     982.220947     714.049072  1744.959473   982.220947  306.743896   714.049072  68.171875  200.000000      200.000000
8    1096.708740     714.049072  1744.959473  1096.708740  314.487793   714.049072  82.659668  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=84543/1024, 
.[0m
[08/30 13:27:08]  --------------------------------------------------------------------------------
[08/30 13:27:08]  Iteration: 18 (4 solution, 13 counterexamples)
[08/30 13:27:08]  Generator returned sat in 0.215470 secs.
[08/30 13:27:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:09]  Improved gap from 20.1787109375 to 100
[08/30 13:27:09]  Improved number of small numbers from 44 to 98 out of a max of 100
[08/30 13:27:09]  Verifer returned sat in 0.870249 secs.
[08/30 13:27:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0     -20.779541     -20.779785  1744.959473   -20.779541    0.098145   -20.779785    0.000000    0.000244        0.000244
1      79.220215     -20.779785  1744.959473    79.220215  100.000000   -20.779785    0.000000  100.000000        0.000000
2     208.253174     142.220215  1744.959473   208.253174  229.032959   142.220215    0.000000   66.032959       29.032959
3     208.253174     179.220459  1744.959473   208.253174   66.032796   179.220459    0.000000   29.032715      -70.967041
4     379.269775     379.220215  1744.959473   379.269775  200.049316   379.220215    0.000000    0.049561        0.049561
5     880.294189     379.220215  1744.959473   880.294189  501.073975   379.220215  201.073975  300.000000      200.000000
6     880.294189     479.220459  1744.959473   880.294189  117.500000   479.220459  201.073975  199.999756      100.000000
7    1007.544434     679.220215  1744.959473  1007.544434  327.250000   679.220215  201.073975  127.250244      127.250244
8    1522.169189     679.220215  1744.959473  1522.169189  641.875000   679.220215  542.948975  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2223919/4096, 
.[0m
[08/30 13:27:09]  --------------------------------------------------------------------------------
[08/30 13:27:09]  Iteration: 19 (4 solution, 14 counterexamples)
[08/30 13:27:10]  Generator returned sat in 0.563794 secs.
[08/30 13:27:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:10]  Improved gap from 0.0025 to 0
[08/30 13:27:11]  Improved number of small numbers from 67 to 90 out of a max of 100
[08/30 13:27:11]  Verifer returned sat in 0.445721 secs.
[08/30 13:27:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     580.286865     380.285889  1744.959473   580.286865    0.097900   380.285889        0.0  200.000977      100.001221
1     580.286865     580.284668  1744.959473   580.286865    0.001465   580.284668        0.0    0.002197        0.001221
2     580.286865     580.285889  1744.959473   580.286865    0.001250   580.285889        0.0    0.000977      -99.998779
3     880.294434     780.285645  1744.959473   880.294434  300.008545   780.285645        0.0  100.008789      100.008789
4     880.294434     880.284424  1744.959473   880.294434    0.010000   880.284424        0.0    0.010010        0.008789
5     880.294434     880.285684  1844.950684   880.294434    0.010000   880.285684        0.0    0.008750        0.000000
6     880.295684     880.294434  1944.942139   880.295684    0.010000   880.294434        0.0    0.001250       -0.007295
7     880.304434     880.303184  2044.940674   880.304434    0.010000   880.303184        0.0    0.001250       -0.000010
8     880.313184     880.312988  2044.940674   880.313184    0.010000   880.312988        0.0    0.000195      -99.991260
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:11]  --------------------------------------------------------------------------------
[08/30 13:27:11]  Iteration: 20 (4 solution, 15 counterexamples)
[08/30 13:27:12]  Generator returned sat in 0.493757 secs.
[08/30 13:27:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:12]  Improved number of small numbers from 30 to 99 out of a max of 99
[08/30 13:27:12]  Verifer returned sat in 0.518468 secs.
[08/30 13:27:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0     238.838867     238.790039  1986.430664   238.838867    0.097656   238.790039    0.000000    0.048828        0.024414
1     238.838867     238.814453  2086.406250   238.838867    0.024414   238.814453    0.000000    0.024414        0.000000
2     238.863281     238.838867  2109.527588   238.863281    0.048828   238.838867    0.000000    0.024414      -76.854248
3     315.741943     315.717529  2113.621094   315.741943   76.903076   315.717529    0.000000    0.024414      -95.882080
4     468.535889     468.535645  2113.621094   468.535889  152.818359   468.535645    0.000000    0.000244      -43.088135
5     811.623779     611.623779  2113.621094   811.623779  343.088135   611.623779    0.000000  200.000000      199.999756
6    1311.648438     686.292725  2113.621094  1311.648438  700.024658   686.292725  400.024414  225.331299      200.000000
7    1311.648438     711.624023  2113.621094  1311.648438  186.287598   711.624023  400.024414  200.000000      100.000000
8    1511.624023     811.624023  2113.621094  1511.624023  399.975586   811.624023  400.024414  299.975586      199.975586
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409625/1024, 
.[0m
[08/30 13:27:13]  --------------------------------------------------------------------------------
[08/30 13:27:13]  Iteration: 21 (4 solution, 16 counterexamples)
[08/30 13:27:13]  Generator returned sat in 0.107142 secs.
[08/30 13:27:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:13]  Improved gap from 0.0 to 0
[08/30 13:27:14]  Improved number of small numbers from 61 to 98 out of a max of 100
[08/30 13:27:14]  Verifer returned sat in 0.715847 secs.
[08/30 13:27:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0     778.283203     776.289795  1516.634033   778.283203  0.097656   776.289795        0.0  1.993408        1.993408
1     778.283203     778.282715  1614.640625   778.283203  0.000500   778.282715        0.0  0.000488        0.000000
2     778.283691     778.283203  1714.632812   778.283691  0.000977   778.283203        0.0  0.000488       -0.007324
3     778.291504     778.291260  1814.630371   778.291504  0.008301   778.291260        0.0  0.000244       -0.001953
4     779.292725     778.293457  1913.631104   779.292725  1.001465   778.293457        0.0  0.999268        0.000000
5     779.292725     779.292725  2013.630859   779.292725  0.010000   779.292725        0.0  0.000000       -0.000244
6     779.302725     779.302246  2113.621094   779.302725  0.010000   779.302246        0.0  0.000479       -0.000010
7     779.313232     779.302734  2213.610596   779.313232  0.010986   779.302734        0.0  0.010498        0.000000
8     779.313232     779.313232  2313.610352   779.313232  0.010000   779.313232        0.0  0.000000       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:14]  --------------------------------------------------------------------------------
[08/30 13:27:14]  Iteration: 22 (4 solution, 17 counterexamples)
[08/30 13:27:15]  Generator returned sat in 0.446915 secs.
[08/30 13:27:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:15]  Improved gap from 0.0 to 0
[08/30 13:27:16]  Improved number of small numbers from 54 to 69 out of a max of 100
[08/30 13:27:16]  Verifer returned sat in 1.386531 secs.
[08/30 13:27:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    1986.713379    1986.691405  1686.497070  1986.713379  0.097168  1986.691405        0.0  0.021974        0.021748
1    1986.713379    1986.713072  1786.475213  1986.713379  0.000488  1986.713072        0.0  0.000307       -0.000110
2    1988.711405    1986.713488  1884.477296  1988.711405  1.998333  1986.713488        0.0  1.997917        0.000000
3    1988.711405    1988.711405  1984.477295  1988.711405  0.000417  1988.711405        0.0  0.000000       -0.000001
4    1988.721822    1988.711426  2084.466879  1988.721822  0.010417  1988.711426        0.0  0.010396        0.000000
5    1988.721822    1988.721822  2184.466797  1988.721822  0.010000  1988.721822        0.0  0.000000       -0.000082
6    1988.735988    1988.721924  2284.452713  1988.735988  0.014167  1988.721924        0.0  0.014065        0.000000
7    1988.735988    1988.735988  2384.452637  1988.735988  0.010000  1988.735988        0.0  0.000000       -0.000076
8    1988.745988    1988.736084  2484.442627  1988.745988  0.010000  1988.736084        0.0  0.009905       -0.000086
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:16]  --------------------------------------------------------------------------------
[08/30 13:27:16]  Iteration: 23 (4 solution, 18 counterexamples)
[08/30 13:27:19]  Generator returned sat in 2.015713 secs.
[08/30 13:27:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:19]  Improved gap from 0.01214599609375 to 100
[08/30 13:27:20]  Improved number of small numbers from 31 to 45 out of a max of 100
[08/30 13:27:20]  Verifer returned sat in 1.358064 secs.
[08/30 13:27:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3785.193115    3585.193115  1888.335572  3785.193115    0.096924  3585.193115    0.000000  200.000000      199.999899
1    3785.193115    3609.156779  1888.335572  3785.193115    0.048584  3609.156779    0.000000  176.036337       99.999899
2    3785.193115    3685.193217  1888.335572  3785.193115    0.048584  3685.193217    0.000000   99.999899       -0.000101
3    4183.602933    3813.193217  1888.335572  4183.602933  498.409717  3813.193217   98.409717  272.000000      200.000000
4    4183.602933    3985.193217  1888.335572  4183.602933  249.204858  3985.193217   98.409717  100.000000      100.000000
5    4585.241801    3985.193359  1888.335572  4585.241801  501.638867  3985.193359  300.048584  299.999857      200.000000
6    4585.241801    4185.193217  1888.335572  4585.241801  250.819434  4185.193217  300.048584  100.000000      100.000000
7    4983.651517    4185.193359  1888.335572  4983.651517  498.409717  4185.193359  498.458301  299.999857      200.000000
8    4983.651517    4285.193359  1888.335572  4983.651517  249.204858  4285.193359  498.458301  199.999857      100.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638599/4096, 
.[0m
[08/30 13:27:20]  --------------------------------------------------------------------------------
[08/30 13:27:20]  Iteration: 24 (4 solution, 19 counterexamples)
[08/30 13:27:21]  Generator returned sat in 0.383975 secs.
[08/30 13:27:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:22]  Improved number of small numbers from 37 to 43 out of a max of 99
[08/30 13:27:22]  Verifer returned sat in 1.416098 secs.
[08/30 13:27:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4493.922119    4193.970751  1179.558038  4493.922119    0.096680  4193.970751    0.000000  299.951368      199.951368
1    4493.922119    4393.970751  1179.558038  4493.922119    0.048584  4393.970751    0.000000   99.951368       99.951368
2    4493.970751    4493.970751  1179.558038  4493.970751  100.000000  4493.970751    0.000000    0.000000        0.000000
3    4683.583056    4496.067675  1179.558038  4683.583056  189.612305  4496.067675    0.000000  187.515381       89.612305
4    4893.970751    4593.970751  1179.558038  4893.970751  397.903076  4593.970751    0.000000  300.000000      200.000000
5    4993.922289    4793.970751  1179.558038  4993.922289  399.951538  4793.970751    0.000000  199.951538      199.951538
6    5294.946520    4893.970751  1179.558038  5294.946520  500.975769  4893.970751  200.975769  200.000000      200.000000
7    5294.946520    4993.970751  1179.558038  5294.946520  198.951538  4993.970751  200.975769  100.000000      100.000000
8    5695.422289    4993.970751  1179.558038  5695.422289  500.475769  4993.970751  401.451538  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3288691/8192, 
.[0m
[08/30 13:27:23]  --------------------------------------------------------------------------------
[08/30 13:27:23]  Iteration: 25 (4 solution, 20 counterexamples)
[08/30 13:27:23]  Generator returned sat in 0.405440 secs.
[08/30 13:27:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:24]  Verifer returned unsat in 0.093080 secs.
[08/30 13:27:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:24]  --------------------------------------------------------------------------------
[08/30 13:27:24]  Iteration: 26 (5 solution, 20 counterexamples)
[08/30 13:27:25]  Generator returned sat in 0.660152 secs.
[08/30 13:27:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:25]  Improved number of small numbers from 53 to 59 out of a max of 99
[08/30 13:27:25]  Verifer returned sat in 0.834311 secs.
[08/30 13:27:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4169.422363    4169.422145  1179.558038  4169.422363    0.096680  4169.422145     0.0000    0.000218        0.000218
1    4269.424645    4199.927770  1179.558038  4269.424645  100.002500  4199.927770     0.0000   69.496875        0.002500
2    4269.424645    4269.422145  1179.558038  4269.424645    0.002686  4269.422145     0.0000    0.002500      -99.997500
3    4369.424645    4369.422145  1179.558038  4369.424645  100.002500  4369.422145     0.0000    0.002500      -99.997500
4    4620.423395    4469.422145  1179.558038  4620.423395  251.001250  4469.422145     0.0000  151.001250       51.001250
5    4865.417145    4669.422145  1179.558038  4865.417145  395.995000  4669.422145     0.0000  195.995000      195.995000
6    5268.419645    4769.422119  1179.558038  5268.419645  598.997500  4769.422119   298.9975  200.000026      200.000000
7    5268.419645    4869.422145  1179.558038  5268.419645    0.010000  4869.422145   298.9975  100.000000      100.000000
8    5569.424645    4869.422363  1179.558038  5569.424645  401.005000  4869.422363   400.0025  299.999782      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[08/30 13:27:26]  --------------------------------------------------------------------------------
[08/30 13:27:26]  Iteration: 27 (5 solution, 21 counterexamples)
[08/30 13:27:27]  Generator returned sat in 1.395097 secs.
[08/30 13:27:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:28]  Improved gap from 0.0 to 100
[08/30 13:27:28]  Improved number of small numbers from 54 to 98 out of a max of 100
[08/30 13:27:28]  Verifer returned sat in 0.652585 secs.
[08/30 13:27:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4169.422119    4099.927979  1249.052246  4169.422119    0.096436  4099.927979    0.00000   69.494141       69.494141
1    4199.927979    4199.927979  1249.052246  4199.927979  100.000000  4199.927979    0.00000    0.000000        0.000000
2    4399.927979    4199.927979  1249.052246  4399.927979  200.000000  4199.927979    0.00000  200.000000      100.000000
3    4399.927979    4299.927979  1249.052246  4399.927979   25.762085  4299.927979    0.00000  100.000000        0.000000
4    4399.927979    4399.927979  1249.052246  4399.927979   50.524170  4399.927979    0.00000    0.000000     -100.000000
5    4499.976318    4499.927979  1249.052246  4499.976318  100.048340  4499.927979    0.00000    0.048340      -99.951660
6    4699.024658    4602.686035  1249.052246  4699.024658  199.096680  4602.686035    0.00000   96.338623       -0.903320
7    4999.879395    4706.589600  1249.052246  4999.879395  397.193359  4706.589600    0.00000  293.289795      199.951416
8    5499.976318    4799.927979  1249.052246  5499.976318  793.386719  4799.927979  400.04834  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819299/2048, 
.[0m
[08/30 13:27:28]  --------------------------------------------------------------------------------
[08/30 13:27:28]  Iteration: 28 (5 solution, 22 counterexamples)
[08/30 13:27:29]  Generator returned sat in 0.452238 secs.
[08/30 13:27:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:29]  Improved gap from 0.0 to 1.5625
[08/30 13:27:30]  Improved number of small numbers from 55 to 89 out of a max of 100
[08/30 13:27:30]  Verifer returned sat in 0.727890 secs.
[08/30 13:27:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4299.917236    4199.916992  1149.062988  4299.917236    0.096436  4199.916992        0.0  100.000244      100.000000
1    4299.917236    4299.917236  1149.062988  4299.917236   99.999756  4299.917236        0.0    0.000000        0.000000
2    4599.906494    4299.917236  1149.062988  4599.906494  299.989258  4299.917236        0.0  299.989258      199.989258
3    4599.906494    4499.916992  1149.062988  4599.906494    1.942387  4499.916992        0.0   99.989502       99.989258
4    4599.906494    4599.863164  1149.062988  4599.906494    1.913580  4599.863164        0.0    0.043330       -0.010742
5    4601.733534    4599.917236  1247.246691  4601.733534    1.870370  4599.917236        0.0    1.816298        0.000000
6    4601.733534    4601.733534  1345.684082  4601.733534    1.805556  4601.733534        0.0    0.000000       -1.562609
7    4603.441867    4603.430908  1443.986816  4603.441867    1.708333  4603.430908        0.0    0.010959       -1.551541
8    4604.993408    4604.993408  1542.424072  4604.993408    1.562500  4604.993408        0.0    0.000000       -1.562744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:30]  --------------------------------------------------------------------------------
[08/30 13:27:30]  Iteration: 29 (5 solution, 23 counterexamples)
[08/30 13:27:32]  Generator returned sat in 1.613831 secs.
[08/30 13:27:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:35]  Improved gap from 0.0 to 1.5625
[08/30 13:27:36]  Improved number of small numbers from 52 to 65 out of a max of 100
[08/30 13:27:36]  Verifer returned sat in 3.937032 secs.
[08/30 13:27:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0    4371.602295    4366.052065   902.198730  4371.602295  0.096436  4366.052065        0.0  5.55023        5.550083
1    4371.602295    4371.602065   995.086377  4371.602295  0.048096  4371.602065        0.0  0.00023       -1.562270
2    4374.727065    4373.164565  1093.523877  4374.727065  3.125000  4373.164565        0.0  1.56250        0.000000
3    4376.289565    4374.727065  1191.961182  4376.289565  3.125000  4374.727065        0.0  1.56250       -0.000196
4    4379.627065    4377.027065  1288.623877  4379.627065  4.900000  4377.027065        0.0  2.60000        0.000000
5    4381.189565    4379.627065  1387.061279  4381.189565  4.162500  4379.627065        0.0  1.56250       -0.000098
6    4383.939565    4382.189565  1484.311377  4383.939565  4.312500  4382.189565        0.0  1.75000        0.000000
7    4387.077065    4383.939565  1581.173828  4387.077065  4.887500  4383.939565        0.0  3.13750       -0.000049
8    4388.839565    4388.839355  1677.848877  4388.839565  4.900000  4388.839355        0.0  0.00021       -1.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:36]  --------------------------------------------------------------------------------
[08/30 13:27:36]  Iteration: 30 (5 solution, 24 counterexamples)
[08/30 13:27:40]  Generator returned sat in 2.726818 secs.
[08/30 13:27:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:40]  Improved gap from 0.1750979275173611 to 21.875
[08/30 13:27:40]  Improved number of small numbers from 46 to 100 out of a max of 100
[08/30 13:27:40]  Verifer returned sat in 0.809333 secs.
[08/30 13:27:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    3832.213867    3784.416016   939.702393  3832.213867   0.096191  3784.416016        0.0  47.797852       47.797852
1    3832.213867    3832.166016   970.077393  3832.213867   0.048340  3832.166016        0.0   0.047852      -21.827148
2    3875.916016    3854.041016  1048.202393  3875.916016  43.750000  3854.041016        0.0  21.875000        0.000000
3    3875.964111    3875.916016  1125.327637  3875.964111  21.923096  3875.916016        0.0   0.048096      -22.826660
4    3920.666016    3898.791016  1203.452393  3920.666016  44.750000  3898.791016        0.0  21.875000        0.000000
5    3931.103516    3920.666016  1280.125732  3931.103516  32.312500  3920.666016        0.0  10.437500      -12.889160
6    3952.978516    3943.992676  1358.250732  3952.978516  32.312500  3943.992676        0.0   8.985840      -12.889160
7    3977.031006    3965.867676  1436.375488  3977.031006  33.038330  3965.867676        0.0  11.163330      -10.711914
8    3998.406006    3988.742432  1436.375732  3998.406006  32.538330  3988.742432        0.0   9.663574      -89.336670
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:41]  --------------------------------------------------------------------------------
[08/30 13:27:41]  Iteration: 31 (5 solution, 25 counterexamples)
[08/30 13:27:44]  Generator returned sat in 2.610626 secs.
[08/30 13:27:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:27:44]  Improved gap from 0.0025 to 100
[08/30 13:27:44]  Improved number of small numbers from 75 to 100 out of a max of 100
[08/30 13:27:44]  Verifer returned sat in 0.386401 secs.
[08/30 13:27:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    2798.357666    2598.357910  2125.760498  2798.357666    0.096191  2598.357910    0.000000  199.999756      199.999756
1    2798.357666    2598.357910  2125.760498  2798.357666    0.048096  2598.357910    0.000000  199.999756       99.999756
2    2909.550293    2698.357910  2125.760498  2909.550293  311.192383  2698.357910    0.000000  211.192383      111.192383
3    2909.550293    2846.035645  2125.760498  2909.550293  211.192383  2846.035645    0.000000   63.514648       11.192383
4    3198.309570    2998.357910  2125.760498  3198.309570  352.273926  2998.357910    0.000000  199.951660      199.951660
5    3573.494873    2998.357910  2125.760498  3573.494873  575.136963  2998.357910  275.136963  300.000000      200.000000
6    3573.494873    3098.357910  2125.760498  3573.494873    1.000000  3098.357910  275.136963  200.000000      100.000000
7    3625.317139    3298.357910  2125.760498  3625.317139  251.822266  3298.357910  275.136963   51.822266       51.822266
8    3998.406006    3298.357910  2125.760498  3998.406006  424.911133  3298.357910  400.048096  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638597/4096, 
.[0m
[08/30 13:27:44]  --------------------------------------------------------------------------------
[08/30 13:27:44]  Iteration: 32 (5 solution, 26 counterexamples)
[08/30 13:27:46]  Generator returned sat in 1.035004 secs.
[08/30 13:27:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:46]  Verifer returned unsat in 0.301393 secs.
[08/30 13:27:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:46]  --------------------------------------------------------------------------------
[08/30 13:27:46]  Iteration: 33 (6 solution, 26 counterexamples)
[08/30 13:27:47]  Generator returned sat in 0.093835 secs.
[08/30 13:27:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:47]  Verifer returned unsat in 0.330472 secs.
[08/30 13:27:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:47]  --------------------------------------------------------------------------------
[08/30 13:27:47]  Iteration: 34 (7 solution, 26 counterexamples)
[08/30 13:27:48]  Generator returned sat in 0.313632 secs.
[08/30 13:27:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:48]  Verifer returned unsat in 0.423451 secs.
[08/30 13:27:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:48]  --------------------------------------------------------------------------------
[08/30 13:27:48]  Iteration: 35 (8 solution, 26 counterexamples)
[08/30 13:27:49]  Generator returned sat in 0.117869 secs.
[08/30 13:27:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:49]  Verifer returned unsat in 0.446703 secs.
[08/30 13:27:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:49]  --------------------------------------------------------------------------------
[08/30 13:27:49]  Iteration: 36 (9 solution, 26 counterexamples)
[08/30 13:27:50]  Generator returned sat in 0.398517 secs.
[08/30 13:27:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:50]  Improved gap from 0.0 to 21.875
[08/30 13:27:51]  Improved number of small numbers from 48 to 62 out of a max of 100
[08/30 13:27:51]  Verifer returned sat in 1.078087 secs.
[08/30 13:27:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2614.788086    2514.740112  2286.167051  2614.788086    0.096191  2514.740112        0.0  100.047974      100.047974
1    2614.788086    2586.783407  2286.167051  2614.788086  100.047852  2586.783407        0.0   28.004679        0.047974
2    2614.788086    2614.740112  2364.292051  2614.788086   28.004639  2614.740112        0.0    0.047974      -21.827026
3    2658.490112    2636.615112  2442.416992  2658.490112   43.750000  2636.615112        0.0   21.875000       -0.000059
4    2698.552612    2676.677612  2502.354551  2698.552612   61.937500  2676.677612        0.0   21.875000        0.000000
5    2722.624715    2698.552612  2578.282448  2722.624715   45.947103  2698.552612        0.0   24.072103        0.000000
6    2741.458862    2722.624715  2656.152832  2741.458862   42.906250  2722.624715        0.0   18.834147       -3.295469
7    2766.629517    2744.754517  2734.277588  2766.629517   44.004801  2744.754517        0.0   21.875000       -0.000059
8    2779.792969    2766.629639  2734.277832  2779.792969   35.038452  2766.629639        0.0   13.163330      -86.836362
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:27:51]  --------------------------------------------------------------------------------
[08/30 13:27:51]  Iteration: 37 (9 solution, 27 counterexamples)
[08/30 13:27:52]  Generator returned sat in 0.555998 secs.
[08/30 13:27:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:53]  Verifer returned unsat in 0.398259 secs.
[08/30 13:27:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:53]  --------------------------------------------------------------------------------
[08/30 13:27:53]  Iteration: 38 (10 solution, 27 counterexamples)
[08/30 13:27:53]  Generator returned sat in 0.184363 secs.
[08/30 13:27:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:54]  Verifer returned unsat in 0.488903 secs.
[08/30 13:27:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:54]  --------------------------------------------------------------------------------
[08/30 13:27:54]  Iteration: 39 (11 solution, 27 counterexamples)
[08/30 13:27:54]  Generator returned sat in 0.103420 secs.
[08/30 13:27:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:55]  Verifer returned unsat in 0.767980 secs.
[08/30 13:27:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:55]  --------------------------------------------------------------------------------
[08/30 13:27:55]  Iteration: 40 (12 solution, 27 counterexamples)
[08/30 13:27:56]  Generator returned sat in 0.198639 secs.
[08/30 13:27:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:56]  Verifer returned unsat in 0.418998 secs.
[08/30 13:27:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:56]  --------------------------------------------------------------------------------
[08/30 13:27:56]  Iteration: 41 (13 solution, 27 counterexamples)
[08/30 13:27:57]  Generator returned sat in 0.289258 secs.
[08/30 13:27:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:58]  Improved number of small numbers from 29 to 99 out of a max of 99
[08/30 13:27:58]  Verifer returned sat in 0.593291 secs.
[08/30 13:27:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1718.600098    1718.551758  3366.018555  1718.600098    0.095947  1718.551758    0.000000    0.048340        0.000000
1    1718.600098    1718.600098  3366.018555  1718.600098    0.023926  1718.600098    0.000000    0.000000     -100.000000
2    1963.941650    1818.600098  3366.018555  1963.941650  245.341553  1818.600098    0.000000  145.341553       45.341553
3    1963.941650    1918.600098  3366.018555  1963.941650  145.341309  1918.600098    0.000000   45.341553      -54.658447
4    2164.965576    2020.340332  3366.018555  2164.965576  246.365479  2020.340332    0.000000  144.625244       46.365479
5    2418.575928    2218.600098  3366.018555  2418.575928  398.235596  2218.600098    0.000000  199.975830      199.975830
6    2817.835693    2317.917480  3366.018555  2817.835693  599.235596  2317.917480  299.235596  200.682617      200.000000
7    2817.835693    2418.600098  3366.018555  2817.835693  200.658691  2418.600098  299.235596  100.000000      100.000000
8    3118.624268    2418.600098  3366.018555  3118.624268  400.788574  2418.600098  400.024170  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638499/4096, 
.[0m
[08/30 13:27:58]  --------------------------------------------------------------------------------
[08/30 13:27:58]  Iteration: 42 (13 solution, 28 counterexamples)
[08/30 13:27:59]  Generator returned sat in 0.997261 secs.
[08/30 13:27:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:27:59]  Improved gap from 0.0479736328125 to 0
[08/30 13:28:00]  Improved number of small numbers from 65 to 100 out of a max of 100
[08/30 13:28:00]  Verifer returned sat in 0.350239 secs.
[08/30 13:28:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1473.326416    1373.326172  3711.292236  1473.326416    0.095947  1373.326172        0.0  100.000244      100.000244
1    1473.326416    1473.326172  3711.292236  1473.326416    0.048096  1473.326172        0.0    0.000244        0.000244
2    1773.326172    1473.326172  3711.292236  1773.326172  300.000000  1473.326172        0.0  300.000000      200.000000
3    1773.374023    1573.326416  3711.292236  1773.374023  300.047852  1573.326416        0.0  200.047607      100.047852
4    1773.374023    1685.326172  3711.292236  1773.374023    1.000000  1685.326172        0.0   88.047852        0.047852
5    1773.374023    1773.326416  3810.340332  1773.374023    1.000000  1773.326416        0.0    0.047607       -0.904053
6    1774.326416    1774.278320  3909.388428  1774.326416    1.000000  1774.278320        0.0    0.048096       -0.903564
7    1775.278320    1775.230225  4009.340088  1775.278320    1.000000  1775.230225        0.0    0.048096        0.000000
8    1776.230225    1775.278320  4009.340332  1776.230225    1.000000  1775.278320        0.0    0.951904      -99.047852
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:28:00]  --------------------------------------------------------------------------------
[08/30 13:28:00]  Iteration: 43 (13 solution, 29 counterexamples)
[08/30 13:28:03]  Generator returned sat in 2.344509 secs.
[08/30 13:28:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:03]  Improved number of small numbers from 41 to 99 out of a max of 99
[08/30 13:28:03]  Verifer returned sat in 0.487164 secs.
[08/30 13:28:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0     985.006592     984.958496  3909.388428   985.006592    0.095947   984.958496    0.000000    0.048096        0.024170
1     985.006592     984.982422  3909.388428   985.006592    0.024170   984.982422    0.000000    0.024170      -99.975830
2    1384.958252    1084.982422  3909.388428  1384.958252  399.975830  1084.982422    0.000000  299.975830      199.975830
3    1384.958252    1184.982422  3909.388428  1384.958252  202.678711  1184.982422    0.000000  199.975830       99.975830
4    1487.673096    1384.982422  3909.388428  1487.673096  302.690674  1384.982422    0.000000  102.690674      102.690674
5    1887.673096    1428.982422  3909.388428  1887.673096  502.690674  1428.982422  202.690674  256.000000      200.000000
6    1887.673096    1537.648926  3909.388428  1887.673096  171.000000  1537.648926  202.690674  147.333496      100.000000
7    2087.672852    1684.982422  3909.388428  2087.672852  347.333252  1684.982422  202.690674  199.999756      199.999756
8    2385.006348    1684.982422  3909.388428  2385.006348  497.333252  1684.982422  400.023926  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819249/2048, 
.[0m
[08/30 13:28:04]  --------------------------------------------------------------------------------
[08/30 13:28:04]  Iteration: 44 (13 solution, 30 counterexamples)
[08/30 13:28:04]  Generator returned sat in 0.391782 secs.
[08/30 13:28:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:05]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 13:28:05]  Verifer returned sat in 0.176589 secs.
[08/30 13:28:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0     985.006592     984.958496  3909.388428   985.006592    0.095947   984.958496    0.000000    0.048096        0.024170
1     985.006592     984.982422  3909.388428   985.006592    0.024170   984.982422    0.000000    0.024170      -99.975830
2    1384.958252    1084.982422  3909.388428  1384.958252  399.975830  1084.982422    0.000000  299.975830      199.975830
3    1384.958252    1184.982422  3909.388428  1384.958252  202.678711  1184.982422    0.000000  199.975830       99.975830
4    1487.673096    1384.982422  3909.388428  1487.673096  302.690674  1384.982422    0.000000  102.690674      102.690674
5    1887.673096    1428.982422  3909.388428  1887.673096  502.690674  1428.982422  202.690674  256.000000      200.000000
6    1887.673096    1536.299805  3909.388428  1887.673096  173.000000  1536.299805  202.690674  148.682617      100.000000
7    2087.649170    1684.982422  3909.388428  2087.649170  348.658691  1684.982422  202.690674  199.976074      199.976074
8    2386.331787    1684.982422  3909.388428  2386.331787  498.658691  1684.982422  401.349365  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1643927/4096, 
.[0m
[08/30 13:28:05]  --------------------------------------------------------------------------------
[08/30 13:28:05]  Iteration: 45 (13 solution, 31 counterexamples)
[08/30 13:28:06]  Generator returned sat in 0.834302 secs.
[08/30 13:28:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:06]  Improved gap from 29.41559600830078 to 100
[08/30 13:28:07]  Improved number of small numbers from 39 to 61 out of a max of 100
[08/30 13:28:07]  Verifer returned sat in 0.799287 secs.
[08/30 13:28:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -398.275391    -498.281250  5292.652023  -398.275391    0.095459  -498.281250    0.000000  100.005859        0.006027
1    -398.275391    -398.281250  5292.652023  -398.275391    0.024170  -398.281250    0.000000    0.005859      -99.993973
2       1.712646    -198.281494  5292.652023     1.712646  399.993896  -198.281494    0.000000  199.994141      199.994064
3       1.712646     -98.281494  5292.652023     1.712646   20.906439   -98.281494    0.000000   99.994141       99.994064
4       1.712646       1.706497  5292.652023     1.712646   42.812878     1.706497    0.000000    0.006149       -0.005936
5      88.332253       1.718582  5292.652023    88.332253   86.625755     1.718582    0.000000   86.613670      -13.386330
6     175.970093     101.718582  5292.652023   175.970093  174.251511   101.718582    0.000000   74.251511      -25.748489
7     451.221603     301.718582  5292.652023   451.221603  349.503021   301.718582    0.000000  149.503021      149.503021
8    1001.724625     301.718750  5292.652023  1001.724625  700.006042   301.718750  400.006042  299.999832      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=6553699/16384, 
.[0m
[08/30 13:28:07]  --------------------------------------------------------------------------------
[08/30 13:28:07]  Iteration: 46 (13 solution, 32 counterexamples)
[08/30 13:28:09]  Generator returned sat in 1.471864 secs.
[08/30 13:28:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:09]  Verifer returned unsat in 0.105437 secs.
[08/30 13:28:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:09]  --------------------------------------------------------------------------------
[08/30 13:28:09]  Iteration: 47 (14 solution, 32 counterexamples)
[08/30 13:28:10]  Generator returned sat in 0.199761 secs.
[08/30 13:28:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:10]  Verifer returned unsat in 0.068011 secs.
[08/30 13:28:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:10]  --------------------------------------------------------------------------------
[08/30 13:28:10]  Iteration: 48 (15 solution, 32 counterexamples)
[08/30 13:28:12]  Generator returned sat in 1.249909 secs.
[08/30 13:28:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:12]  Verifer returned unsat in 0.105254 secs.
[08/30 13:28:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:12]  --------------------------------------------------------------------------------
[08/30 13:28:12]  Iteration: 49 (16 solution, 32 counterexamples)
[08/30 13:28:14]  Generator returned sat in 1.099217 secs.
[08/30 13:28:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:14]  Improved gap from 99.9915625 to 100
[08/30 13:28:14]  Improved number of small numbers from 55 to 63 out of a max of 100
[08/30 13:28:14]  Verifer returned sat in 0.724095 secs.
[08/30 13:28:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -282.934082    -307.937909  5202.308515  -282.934082    0.095215  -307.937909    0.000000   25.003827       25.003827
1    -282.934082    -282.935826  5202.308515  -282.934082    0.001667  -282.935826    0.000000    0.001744      -74.996173
2    -207.936242    -207.937909  5202.308515  -207.936242   74.999583  -207.937909    0.000000    0.001667      -99.998333
3    -107.936242    -107.937909  5202.308515  -107.936242  100.001667  -107.937909    0.000000    0.001667      -99.998333
4     142.062924      -7.937909  5202.308515   142.062924  250.000833    -7.937909    0.000000  150.000833       50.000833
5     392.060424     192.062091  5202.308515   392.060424  399.998333   192.062091    0.000000  199.998333      199.998333
6     792.061258     192.062256  5202.308515   792.061258  599.999167   192.062256  299.999167  299.999835      200.000000
7     792.061258     392.060841  5202.308515   792.061258    0.010000   392.060841  299.999167  100.001250      100.000000
8    1092.063758     392.062256  5202.308515  1092.063758  400.003750   392.062256  400.001667  299.999835      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=240001/600, 
.[0m
[08/30 13:28:15]  --------------------------------------------------------------------------------
[08/30 13:28:15]  Iteration: 50 (16 solution, 33 counterexamples)
[08/30 13:28:17]  Generator returned sat in 1.724102 secs.
[08/30 13:28:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:17]  Improved gap from 0.005 to 7.8125
[08/30 13:28:17]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 13:28:17]  Verifer returned sat in 0.368101 secs.
[08/30 13:28:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -507.880371    -807.880371  5602.250732  -507.880371    0.095215  -807.880371   0.000000  300.000000      200.000000
1    -407.833008    -607.880371  5602.250732  -407.833008  400.047363  -607.880371   0.047363  200.000000      200.000000
2    -307.880615    -559.499268  5602.250732  -307.880615  299.952393  -559.499268   0.047363  251.571289      199.952393
3    -307.880615    -433.642090  5602.250732  -307.880615  251.523438  -433.642090   0.047363  125.714111       99.952393
4    -307.833008    -339.273193  5602.250732  -307.833008  125.761719  -339.273193   0.047363   31.392822        0.000000
5    -276.344971    -307.880371  5670.762695  -276.344971   62.880859  -307.880371   0.047363   31.488037        0.000000
6    -276.344971    -276.392334  5762.950195  -276.344971   31.440430  -276.392334   0.047363    0.000000       -7.812500
7    -260.624756    -268.579834  5855.042480  -260.624756   15.720215  -268.579834   0.047363    7.907715        0.000000
8    -260.624756    -260.672119  5855.042725  -260.624756    7.860107  -260.672119   0.047363    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:28:18]  --------------------------------------------------------------------------------
[08/30 13:28:18]  Iteration: 51 (16 solution, 34 counterexamples)
[08/30 13:28:19]  Generator returned sat in 1.176530 secs.
[08/30 13:28:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:20]  Improved gap from 0.047607421875 to 100
[08/30 13:28:20]  Improved number of small numbers from 88 to 88 out of a max of 100
[08/30 13:28:20]  Verifer returned sat in 0.348888 secs.
[08/30 13:28:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1560.577148   -1860.577148  6654.94751 -1560.577148    0.095215 -1860.577148    0.000000  300.000000      200.000000
1   -1460.529541   -1660.577148  6654.94751 -1460.529541  400.047607 -1660.577148    0.047607  200.000000      200.000000
2   -1360.577148   -1560.577148  6654.94751 -1360.577148  299.952393 -1560.577148    0.047607  199.952393      199.952393
3   -1360.577148   -1460.577148  6654.94751 -1360.577148   24.997025 -1460.577148    0.047607   99.952393       99.952393
4   -1360.577148   -1460.517639  6654.94751 -1360.577148   49.994049 -1460.517639    0.047607   99.892883       -0.047607
5   -1360.481934   -1360.577148  6654.94751 -1360.481934   99.988098 -1360.577148    0.047607    0.047607      -99.952393
6   -1160.553345   -1260.577148  6654.94751 -1160.553345  199.976196 -1260.577148    0.047607   99.976196       -0.023804
7    -860.577148   -1060.577148  6654.94751  -860.577148  399.952393 -1060.577148    0.047607  199.952393      199.952393
8    -260.624756   -1060.577148  6654.94751  -260.624756  799.904785 -1060.577148  499.952393  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1023805/2048, 
.[0m
[08/30 13:28:20]  --------------------------------------------------------------------------------
[08/30 13:28:20]  Iteration: 52 (16 solution, 35 counterexamples)
[08/30 13:28:22]  Generator returned sat in 1.357475 secs.
[08/30 13:28:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:22]  Verifer returned unsat in 0.065660 secs.
[08/30 13:28:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:22]  --------------------------------------------------------------------------------
[08/30 13:28:22]  Iteration: 53 (17 solution, 35 counterexamples)
[08/30 13:28:23]  Generator returned sat in 0.405196 secs.
[08/30 13:28:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:24]  Improved number of small numbers from 52 to 58 out of a max of 99
[08/30 13:28:24]  Verifer returned sat in 0.613136 secs.
[08/30 13:28:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2060.481934   -2060.482178  6654.947266 -2060.481934    0.094971 -2060.482178    0.000000    0.000244        0.000000
1   -1760.529541   -2060.481934  6654.947266 -1760.529541  299.952637 -2060.481934    0.000000  299.952393      199.952393
2   -1760.529541   -1960.481934  6654.947266 -1760.529541  299.904785 -1960.481934    0.000000  199.952393       99.952393
3   -1718.889445   -1823.918152  6654.947266 -1718.889445  241.592489 -1823.918152    0.000000  105.028707       41.592489
4   -1460.529419   -1660.481934  6654.947266 -1460.529419  363.388733 -1660.481934    0.000000  199.952515      199.952515
5   -1114.398834   -1561.180257  6654.947266 -1114.398834  546.083099 -1561.180257  246.083099  200.698324      200.000000
6   -1114.398834   -1462.458191  6654.947266 -1114.398834  200.650838 -1462.458191  246.083099  101.976257      100.000000
7    -914.398834   -1360.481934  6654.947266  -914.398834  301.976257 -1360.481934  246.083099  200.000000      200.000000
8    -660.434448   -1260.482178  6654.947266  -660.434448  453.964386 -1260.482178  400.047485  200.000244      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277189/8192, 
.[0m
[08/30 13:28:24]  --------------------------------------------------------------------------------
[08/30 13:28:24]  Iteration: 54 (17 solution, 36 counterexamples)
[08/30 13:28:26]  Generator returned sat in 1.671544 secs.
[08/30 13:28:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:26]  Verifer returned unsat in 0.074033 secs.
[08/30 13:28:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:26]  --------------------------------------------------------------------------------
[08/30 13:28:26]  Iteration: 55 (18 solution, 36 counterexamples)
[08/30 13:28:27]  Generator returned sat in 0.241924 secs.
[08/30 13:28:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:27]  Verifer returned unsat in 0.082983 secs.
[08/30 13:28:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:27]  --------------------------------------------------------------------------------
[08/30 13:28:27]  Iteration: 56 (19 solution, 36 counterexamples)
[08/30 13:28:28]  Generator returned sat in 0.494052 secs.
[08/30 13:28:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:28]  Verifer returned unsat in 0.080158 secs.
[08/30 13:28:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:28]  --------------------------------------------------------------------------------
[08/30 13:28:28]  Iteration: 57 (20 solution, 36 counterexamples)
[08/30 13:28:30]  Generator returned sat in 0.714112 secs.
[08/30 13:28:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:30]  Verifer returned unsat in 0.164731 secs.
[08/30 13:28:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:30]  --------------------------------------------------------------------------------
[08/30 13:28:30]  Iteration: 58 (21 solution, 36 counterexamples)
[08/30 13:28:31]  Generator returned sat in 0.292291 secs.
[08/30 13:28:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:31]  Improved gap from 0.0025 to 29.6875
[08/30 13:28:31]  Improved number of small numbers from 43 to 100 out of a max of 100
[08/30 13:28:31]  Verifer returned sat in 0.387166 secs.
[08/30 13:28:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2161.306641   -2161.306641  6654.947266 -2161.306641    0.094727 -2161.306641        0.0    0.000000        0.000000
1   -1861.354004   -2161.306641  6654.947266 -1861.354004  299.952637 -2161.306641        0.0  299.952637      199.952637
2   -1762.101807   -1961.306641  6654.947266 -1762.101807  399.204834 -1961.306641        0.0  199.204834      199.204834
3   -1762.101807   -1861.306641  6654.947266 -1762.101807   29.735107 -1861.306641        0.0   99.204834       99.204834
4   -1762.101807   -1762.149170  6654.947266 -1762.101807   29.735107 -1762.149170        0.0    0.047363       -0.795166
5   -1732.414062   -1761.306641  6725.212402 -1732.414062   29.735107 -1761.306641        0.0   28.892578       -0.842285
6   -1731.571533   -1731.571777  6795.524902 -1731.571533   29.735107 -1731.571777        0.0    0.000244      -29.687256
7   -1701.836670   -1701.884277  6865.837158 -1701.836670   29.735107 -1701.884277        0.0    0.047607      -29.640137
8   -1672.149170   -1672.196533  6865.837402 -1672.149170   29.735107 -1672.196533        0.0    0.047363      -99.952393
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:28:31]  --------------------------------------------------------------------------------
[08/30 13:28:31]  Iteration: 59 (21 solution, 37 counterexamples)
[08/30 13:28:34]  Generator returned sat in 1.866820 secs.
[08/30 13:28:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:34]  Verifer returned unsat in 0.135987 secs.
[08/30 13:28:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:34]  --------------------------------------------------------------------------------
[08/30 13:28:34]  Iteration: 60 (22 solution, 37 counterexamples)
[08/30 13:28:35]  Generator returned sat in 0.613405 secs.
[08/30 13:28:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:35]  Verifer returned unsat in 0.108103 secs.
[08/30 13:28:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:35]  --------------------------------------------------------------------------------
[08/30 13:28:35]  Iteration: 61 (23 solution, 37 counterexamples)
[08/30 13:28:36]  Generator returned sat in 0.280220 secs.
[08/30 13:28:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:37]  Improved number of small numbers from 47 to 63 out of a max of 99
[08/30 13:28:37]  Verifer returned sat in 0.852282 secs.
[08/30 13:28:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3099.333740   -3199.380859  6654.947266 -3099.333740    0.094727 -3199.380859    0.000000  100.047119        0.047279
1   -3099.333740   -3099.381019  6654.947266 -3099.333740  100.000000 -3099.381019    0.000000    0.047279      -99.952721
2   -2699.191566   -2999.380859  6654.947266 -2699.191566  400.189453 -2999.380859    0.189453  299.999840      200.000000
3   -2699.191566   -2865.150146  6654.947266 -2699.191566  243.814616 -2865.150146    0.189453  165.769128      100.000000
4   -2499.238770   -2699.381019  6654.947266 -2499.238770  365.721924 -2699.381019    0.189453  199.952796      199.952796
5   -2150.608680   -2600.079102  6654.947266 -2150.608680  548.582886 -2600.079102  248.772339  200.698083      200.000000
6   -2150.608680   -2599.381019  6654.947266 -2150.608680  200.650879 -2599.381019  248.772339  200.000000      100.000000
7   -2049.632362   -2399.381019  6654.947266 -2049.632362  300.976318 -2399.381019  248.772339  100.976318      100.976318
8   -1699.144202   -2399.380859  6654.947266 -1699.144202  451.464478 -2399.380859  400.236816  299.999840      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819297/2048, 
.[0m
[08/30 13:28:37]  --------------------------------------------------------------------------------
[08/30 13:28:37]  Iteration: 62 (23 solution, 38 counterexamples)
[08/30 13:28:39]  Generator returned sat in 0.568093 secs.
[08/30 13:28:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:39]  Verifer returned unsat in 0.108874 secs.
[08/30 13:28:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:39]  --------------------------------------------------------------------------------
[08/30 13:28:39]  Iteration: 63 (24 solution, 38 counterexamples)
[08/30 13:28:40]  Generator returned sat in 0.186259 secs.
[08/30 13:28:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:40]  Verifer returned unsat in 0.136974 secs.
[08/30 13:28:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:40]  --------------------------------------------------------------------------------
[08/30 13:28:40]  Iteration: 64 (25 solution, 38 counterexamples)
[08/30 13:28:41]  Generator returned sat in 0.449708 secs.
[08/30 13:28:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:41]  Verifer returned unsat in 0.297912 secs.
[08/30 13:28:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:41]  --------------------------------------------------------------------------------
[08/30 13:28:41]  Iteration: 65 (26 solution, 38 counterexamples)
[08/30 13:28:42]  Generator returned sat in 0.250425 secs.
[08/30 13:28:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:42]  Verifer returned unsat in 0.358753 secs.
[08/30 13:28:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:42]  --------------------------------------------------------------------------------
[08/30 13:28:42]  Iteration: 66 (27 solution, 38 counterexamples)
[08/30 13:28:43]  Generator returned sat in 0.219452 secs.
[08/30 13:28:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:44]  Verifer returned unsat in 0.410722 secs.
[08/30 13:28:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:44]  --------------------------------------------------------------------------------
[08/30 13:28:44]  Iteration: 67 (28 solution, 38 counterexamples)
[08/30 13:28:45]  Generator returned sat in 0.402310 secs.
[08/30 13:28:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:45]  Verifer returned unsat in 0.084760 secs.
[08/30 13:28:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:45]  --------------------------------------------------------------------------------
[08/30 13:28:45]  Iteration: 68 (29 solution, 38 counterexamples)
[08/30 13:28:46]  Generator returned sat in 0.247810 secs.
[08/30 13:28:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:46]  Verifer returned unsat in 0.065905 secs.
[08/30 13:28:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:46]  --------------------------------------------------------------------------------
[08/30 13:28:46]  Iteration: 69 (30 solution, 38 counterexamples)
[08/30 13:28:46]  Generator returned sat in 0.220945 secs.
[08/30 13:28:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:47]  Verifer returned unsat in 0.048654 secs.
[08/30 13:28:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:47]  --------------------------------------------------------------------------------
[08/30 13:28:47]  Iteration: 70 (31 solution, 38 counterexamples)
[08/30 13:28:47]  Generator returned sat in 0.342108 secs.
[08/30 13:28:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:48]  Verifer returned unsat in 0.057783 secs.
[08/30 13:28:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:48]  --------------------------------------------------------------------------------
[08/30 13:28:48]  Iteration: 71 (32 solution, 38 counterexamples)
[08/30 13:28:48]  Generator returned sat in 0.268225 secs.
[08/30 13:28:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:49]  Verifer returned unsat in 0.118042 secs.
[08/30 13:28:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:49]  --------------------------------------------------------------------------------
[08/30 13:28:49]  Iteration: 72 (33 solution, 38 counterexamples)
[08/30 13:28:50]  Generator returned sat in 1.237836 secs.
[08/30 13:28:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:51]  Verifer returned unsat in 0.598217 secs.
[08/30 13:28:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:28:51]  --------------------------------------------------------------------------------
[08/30 13:28:51]  Iteration: 73 (34 solution, 38 counterexamples)
[08/30 13:28:52]  Generator returned sat in 0.838984 secs.
[08/30 13:28:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:53]  Improved gap from 0.0 to 9.375
[08/30 13:28:53]  Improved number of small numbers from 48 to 74 out of a max of 100
[08/30 13:28:53]  Verifer returned sat in 0.874012 secs.
[08/30 13:28:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1642.781006   -1642.781006  6255.750244 -1642.781006    0.094727 -1642.781006        0.0    0.000000      -99.999628
1   -1542.733643   -1542.781006  6255.750244 -1542.733643  100.047363 -1542.781006        0.0    0.047363      -99.952265
2   -1383.221191   -1383.268611  6255.750244 -1383.221191  159.559814 -1383.268611        0.0    0.047419      -40.439814
3   -1106.371736   -1342.781006  6255.750244 -1106.371736  276.896875 -1342.781006        0.0  236.409270      136.409642
4   -1106.371736   -1177.143555  6255.750244 -1106.371736  139.448438 -1177.143555        0.0   70.771819       36.409642
5   -1106.371736   -1142.781006  6319.340602 -1106.371736   70.724219 -1142.781006        0.0   36.409270        0.000000
6   -1106.371736   -1106.371736  6409.965602 -1106.371736   36.362109 -1106.371736        0.0    0.000000       -9.375000
7   -1087.190681   -1096.996736  6500.159548 -1087.190681   19.181055 -1096.996736        0.0    9.806055        0.000000
8   -1086.406208   -1087.190674  6500.159668 -1086.406208   10.590527 -1087.190674        0.0    0.784465      -99.215407
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:28:54]  --------------------------------------------------------------------------------
[08/30 13:28:54]  Iteration: 74 (34 solution, 39 counterexamples)
[08/30 13:28:55]  Generator returned sat in 1.085013 secs.
[08/30 13:28:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:56]  Verifer returned unsat in 0.119877 secs.
[08/30 13:28:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:56]  --------------------------------------------------------------------------------
[08/30 13:28:56]  Iteration: 75 (35 solution, 39 counterexamples)
[08/30 13:28:57]  Generator returned sat in 0.414672 secs.
[08/30 13:28:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:57]  Improved number of small numbers from 62 to 82 out of a max of 99
[08/30 13:28:57]  Verifer returned sat in 0.619895 secs.
[08/30 13:28:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1041.625244   -1241.625000  6319.34082 -1041.625244    0.094727 -1241.625000    0.000000  199.999756       99.999990
1   -1041.601562   -1041.625244  6319.34082 -1041.601562  200.023438 -1041.625244    0.000000    0.023682        0.023672
2   -1041.577881   -1041.625234  6319.34082 -1041.577881    0.047363 -1041.625234    0.000000    0.047354      -99.952646
3    -798.392487    -941.625000  6319.34082  -798.392487  243.232747  -941.625000    0.000000  143.232513       43.232747
4    -575.775879    -741.625234  6319.34082  -575.775879  365.849121  -741.625234    0.000000  165.849355      165.849355
5    -191.851553    -641.625234  6319.34082  -191.851553  549.773682  -641.625234  249.773682  200.000000      200.000000
6    -191.851553    -541.625244  6319.34082  -191.851553  199.000000  -541.625244  249.773682  100.000010      100.000000
7       7.648438    -441.625234  6319.34082     7.648438  299.500000  -441.625234  249.773682  199.499990      199.499990
8     258.398447    -341.625244  6319.34082   258.398447  450.250000  -341.625244  400.023682  200.000010      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638497/4096, 
.[0m
[08/30 13:28:57]  --------------------------------------------------------------------------------
[08/30 13:28:57]  Iteration: 76 (35 solution, 40 counterexamples)
[08/30 13:28:59]  Generator returned sat in 0.628744 secs.
[08/30 13:28:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:59]  Verifer returned unsat in 0.088649 secs.
[08/30 13:28:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:28:59]  --------------------------------------------------------------------------------
[08/30 13:28:59]  Iteration: 77 (36 solution, 40 counterexamples)
[08/30 13:29:00]  Generator returned sat in 0.239484 secs.
[08/30 13:29:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:00]  Verifer returned unsat in 0.036380 secs.
[08/30 13:29:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:00]  --------------------------------------------------------------------------------
[08/30 13:29:00]  Iteration: 78 (37 solution, 40 counterexamples)
[08/30 13:29:01]  Generator returned sat in 0.937108 secs.
[08/30 13:29:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:02]  Verifer returned unsat in 0.251291 secs.
[08/30 13:29:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:02]  --------------------------------------------------------------------------------
[08/30 13:29:02]  Iteration: 79 (38 solution, 40 counterexamples)
[08/30 13:29:03]  Generator returned sat in 0.596733 secs.
[08/30 13:29:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:03]  Verifer returned unsat in 0.063740 secs.
[08/30 13:29:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:03]  --------------------------------------------------------------------------------
[08/30 13:29:03]  Iteration: 80 (39 solution, 40 counterexamples)
[08/30 13:29:04]  Generator returned sat in 0.332426 secs.
[08/30 13:29:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:04]  Verifer returned unsat in 0.129083 secs.
[08/30 13:29:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:04]  --------------------------------------------------------------------------------
[08/30 13:29:04]  Iteration: 81 (40 solution, 40 counterexamples)
[08/30 13:29:05]  Generator returned sat in 0.295449 secs.
[08/30 13:29:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:05]  Verifer returned unsat in 0.069041 secs.
[08/30 13:29:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:05]  --------------------------------------------------------------------------------
[08/30 13:29:05]  Iteration: 82 (41 solution, 40 counterexamples)
[08/30 13:29:06]  Generator returned sat in 0.438570 secs.
[08/30 13:29:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:06]  Improved gap from 0.04736328125 to 100
[08/30 13:29:07]  Improved number of small numbers from 37 to 51 out of a max of 100
[08/30 13:29:07]  Verifer returned sat in 0.830216 secs.
[08/30 13:29:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -6474.385010   -6574.385254  5205.529342 -6474.385010    0.094727 -6574.385254    0.000000  100.000244      100.000200
1   -6474.385010   -6574.385010  5205.529342 -6474.385010  100.000000 -6574.385010    0.000000  100.000000        0.000200
2   -6232.078613   -6474.385210  5205.529342 -6232.078613  342.306396 -6474.385210    0.000000  242.306597      142.306597
3   -6232.078613   -6338.821164  5205.529342 -6232.078613  242.259060 -6338.821164    0.000000  106.742550       42.306597
4   -5974.432573   -6174.385210  5205.529342 -5974.432573  364.388590 -6174.385210    0.000000  199.952637      199.952637
5   -5626.802324   -6074.416785  5205.529342 -5626.802324  547.582886 -6074.416785  247.582886  200.031576      200.000000
6   -5626.802324   -5975.408892  5205.529342 -5626.802324  199.984212 -5975.408892  247.582886  101.023682      100.000000
7   -5426.849688   -5874.385210  5205.529342 -5426.849688  300.976318 -5874.385210  247.582886  199.952637      199.952637
8   -5174.337847   -5874.385010  5205.529342 -5174.337847  452.464478 -5874.385010  400.047363  299.999800      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819297/2048, 
.[0m
[08/30 13:29:07]  --------------------------------------------------------------------------------
[08/30 13:29:07]  Iteration: 83 (41 solution, 41 counterexamples)
[08/30 13:29:08]  Generator returned sat in 0.543439 secs.
[08/30 13:29:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:09]  Verifer returned unsat in 0.114167 secs.
[08/30 13:29:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:09]  --------------------------------------------------------------------------------
[08/30 13:29:09]  Iteration: 84 (42 solution, 41 counterexamples)
[08/30 13:29:09]  Generator returned sat in 0.239098 secs.
[08/30 13:29:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:10]  Verifer returned unsat in 0.121830 secs.
[08/30 13:29:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:10]  --------------------------------------------------------------------------------
[08/30 13:29:10]  Iteration: 85 (43 solution, 41 counterexamples)
[08/30 13:29:11]  Generator returned sat in 0.420699 secs.
[08/30 13:29:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:11]  Verifer returned unsat in 0.055900 secs.
[08/30 13:29:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:11]  --------------------------------------------------------------------------------
[08/30 13:29:11]  Iteration: 86 (44 solution, 41 counterexamples)
[08/30 13:29:12]  Generator returned sat in 0.352453 secs.
[08/30 13:29:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:12]  Verifer returned unsat in 0.058816 secs.
[08/30 13:29:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:12]  --------------------------------------------------------------------------------
[08/30 13:29:12]  Iteration: 87 (45 solution, 41 counterexamples)
[08/30 13:29:13]  Generator returned sat in 0.604296 secs.
[08/30 13:29:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:13]  Verifer returned unsat in 0.112728 secs.
[08/30 13:29:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:13]  --------------------------------------------------------------------------------
[08/30 13:29:13]  Iteration: 88 (46 solution, 41 counterexamples)
[08/30 13:29:14]  Generator returned sat in 0.327014 secs.
[08/30 13:29:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:14]  Verifer returned unsat in 0.117289 secs.
[08/30 13:29:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:14]  --------------------------------------------------------------------------------
[08/30 13:29:14]  Iteration: 89 (47 solution, 41 counterexamples)
[08/30 13:29:15]  Generator returned sat in 0.671830 secs.
[08/30 13:29:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:16]  Verifer returned unsat in 0.049928 secs.
[08/30 13:29:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:16]  --------------------------------------------------------------------------------
[08/30 13:29:16]  Iteration: 90 (48 solution, 41 counterexamples)
[08/30 13:29:17]  Generator returned sat in 0.640617 secs.
[08/30 13:29:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:17]  Verifer returned unsat in 0.053156 secs.
[08/30 13:29:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:17]  --------------------------------------------------------------------------------
[08/30 13:29:17]  Iteration: 91 (49 solution, 41 counterexamples)
[08/30 13:29:18]  Generator returned sat in 0.940259 secs.
[08/30 13:29:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:19]  Improved number of small numbers from 36 to 55 out of a max of 99
[08/30 13:29:19]  Verifer returned sat in 0.711327 secs.
[08/30 13:29:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8676.770508   -8676.770508  8243.614746 -8676.770508    0.094482 -8676.770508    0.000000    0.000000       -0.000192
1   -8576.770508   -8676.770264  8243.614914 -8576.770508  100.000000 -8676.770264    0.000000   99.999756       -0.000024
2   -8276.817871   -8576.770483  8243.614914 -8276.817871  399.952393 -8576.770483    0.000000  299.952612      199.952612
3   -8276.817871   -8443.539795  8243.614914 -8276.817871  244.481283 -8443.539795    0.000000  166.721924       99.952612
4   -8076.817871   -8276.770483  8243.614914 -8076.817871  366.721924 -8276.770483    0.000000  199.952612      199.952612
5   -7726.687598   -8176.802059  8243.614914 -7726.687598  550.082886 -8176.802059  250.082886  200.031576      200.000000
6   -7726.687598   -8076.794165  8243.614914 -7726.687598  199.984212 -8076.794165  250.082886  100.023682      100.000000
7   -7526.734961   -7976.770483  8243.614914 -7526.734961  299.976318 -7976.770483  250.082886  199.952637      199.952637
8   -7276.723120   -7976.770264  8243.614914 -7276.723120  449.964478 -7976.770264  400.047363  299.999780      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819297/2048, 
.[0m
[08/30 13:29:20]  --------------------------------------------------------------------------------
[08/30 13:29:20]  Iteration: 92 (49 solution, 42 counterexamples)
[08/30 13:29:21]  Generator returned sat in 0.891582 secs.
[08/30 13:29:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:21]  Improved gap from 99.9997802734375 to 100
[08/30 13:29:21]  Improved number of small numbers from 64 to 100 out of a max of 100
[08/30 13:29:21]  Verifer returned sat in 0.237471 secs.
[08/30 13:29:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8676.770508   -8676.770752  8243.614746 -8676.770508    0.094238 -8676.770752    0.000000    0.000244       -0.000244
1   -8576.770752   -8676.770264  8243.614746 -8576.770752  100.000000 -8676.770264    0.000000   99.999512       -0.000488
2   -8276.817871   -8576.770264  8243.614746 -8276.817871  399.952393 -8576.770264    0.000000  299.952393      199.952393
3   -8276.817871   -8445.047363  8243.614746 -8276.817871  245.486328 -8445.047363    0.000000  168.229492       99.952393
4   -8076.817871   -8276.770264  8243.614746 -8076.817871  368.229492 -8276.770264    0.000000  199.952393      199.952393
5   -7724.426025   -8176.770264  8243.614746 -7724.426025  552.344238 -8176.770264  252.344238  200.000000      200.000000
6   -7724.426025   -8076.770264  8243.614746 -7724.426025  199.000000 -8076.770264  252.344238  100.000000      100.000000
7   -7525.926025   -7976.770264  8243.614746 -7525.926025  298.500000 -7976.770264  252.344238  198.500000      198.500000
8   -7276.676025   -7976.770264  8243.614746 -7276.676025  447.750000 -7976.770264  400.094238  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819393/2048, 
.[0m
[08/30 13:29:22]  --------------------------------------------------------------------------------
[08/30 13:29:22]  Iteration: 93 (49 solution, 43 counterexamples)
[08/30 13:29:23]  Generator returned sat in 0.682519 secs.
[08/30 13:29:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:23]  Verifer returned unsat in 0.088870 secs.
[08/30 13:29:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:23]  --------------------------------------------------------------------------------
[08/30 13:29:23]  Iteration: 94 (50 solution, 43 counterexamples)
[08/30 13:29:24]  Generator returned sat in 0.444685 secs.
[08/30 13:29:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:24]  Verifer returned unsat in 0.108044 secs.
[08/30 13:29:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:24]  --------------------------------------------------------------------------------
[08/30 13:29:24]  Iteration: 95 (51 solution, 43 counterexamples)
[08/30 13:29:25]  Generator returned sat in 0.307324 secs.
[08/30 13:29:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:26]  Verifer returned unsat in 0.287116 secs.
[08/30 13:29:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:26]  --------------------------------------------------------------------------------
[08/30 13:29:26]  Iteration: 96 (52 solution, 43 counterexamples)
[08/30 13:29:27]  Generator returned sat in 0.643730 secs.
[08/30 13:29:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:27]  Verifer returned unsat in 0.278012 secs.
[08/30 13:29:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:27]  --------------------------------------------------------------------------------
[08/30 13:29:27]  Iteration: 97 (53 solution, 43 counterexamples)
[08/30 13:29:28]  Generator returned sat in 0.412326 secs.
[08/30 13:29:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:29]  Verifer returned unsat in 0.596505 secs.
[08/30 13:29:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:29]  --------------------------------------------------------------------------------
[08/30 13:29:29]  Iteration: 98 (54 solution, 43 counterexamples)
[08/30 13:29:30]  Generator returned sat in 0.285220 secs.
[08/30 13:29:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:30]  Verifer returned unsat in 0.106647 secs.
[08/30 13:29:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:30]  --------------------------------------------------------------------------------
[08/30 13:29:30]  Iteration: 99 (55 solution, 43 counterexamples)
[08/30 13:29:31]  Generator returned sat in 0.229345 secs.
[08/30 13:29:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:31]  Verifer returned unsat in 0.080664 secs.
[08/30 13:29:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:31]  --------------------------------------------------------------------------------
[08/30 13:29:31]  Iteration: 100 (56 solution, 43 counterexamples)
[08/30 13:29:32]  Generator returned sat in 0.367246 secs.
[08/30 13:29:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:33]  Verifer returned unsat in 0.476772 secs.
[08/30 13:29:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:33]  --------------------------------------------------------------------------------
[08/30 13:29:33]  Iteration: 101 (57 solution, 43 counterexamples)
[08/30 13:29:34]  Generator returned sat in 0.458665 secs.
[08/30 13:29:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:34]  Verifer returned unsat in 0.403281 secs.
[08/30 13:29:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:34]  --------------------------------------------------------------------------------
[08/30 13:29:34]  Iteration: 102 (58 solution, 43 counterexamples)
[08/30 13:29:35]  Generator returned unsat in 0.066998 secs.
[08/30 13:29:35]  [96mNo more solutions found[0m
[08/30 13:29:35]  Final solutions:
[08/30 13:29:35]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  31: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  32: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  33: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  34: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  35: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  36: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  37: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  38: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  39: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  40: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  41: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  42: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  43: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  44: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  45: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  46: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  47: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  48: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  49: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  50: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  51: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  52: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  53: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  54: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:29:35]  55: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  56: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  57: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:29:35]  Took 165.011755 secs.
