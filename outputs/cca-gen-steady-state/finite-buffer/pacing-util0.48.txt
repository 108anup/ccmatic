[10/19 18:32:03]  --------------------------------------------------------------------------------
[10/19 18:32:03]  Iteration: 1 (0 solution, 0 counterexamples)
[10/19 18:32:03]  Generator returned sat in 0.004471 secs.
[10/19 18:32:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 18:32:03]  Improved gap from 0.125 to 100
[10/19 18:32:03]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 18:32:03]  Verifer returned sat in 0.247731 secs.
[10/19 18:32:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t  queue_t  bottle_queue_t
0      -6014.750      -6114.750   6114.75    -6014.750      0.125      0.125    -6114.750      0.000             -6114.750  100.000          100.00
1      -6014.750      -6014.875   6114.75    -6014.750      0.125      0.125    -6014.875      0.000             -6014.875    0.125            0.00
2      -5614.375      -5914.750   6114.75    -5614.375    400.500    400.500    -5914.750      0.125             -5914.750  300.250          300.25
3      -5514.250      -5914.625   6114.75    -5514.250    400.375    400.375    -5914.625      0.250             -5914.625  400.125          300.25
4      -4712.375      -5814.625   6114.75    -4712.375   1202.000   2405.000    -5814.625    702.125             -5814.625  400.125          300.25
5      -2307.000      -5714.625   6114.75    -2307.000   2805.500   5612.000    -5714.625   3007.500             -5714.625  400.125          300.25
6       3305.125      -5614.625   6114.75     3305.125   6012.250  12025.500    -5614.625   8519.625             -5614.625  400.125          300.25
7      15530.500      -5514.625   6114.75    15530.500  12625.500  25252.000    -5514.625  20645.000             -5514.625  400.125          300.25
8      40982.375      -5414.625   6114.75    40982.375  25852.000  51705.000    -5414.625  45996.875             -5414.625  400.125          300.25
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=181179/4, 
, buffer=1201/4.[0m
[10/19 18:32:04]  --------------------------------------------------------------------------------
[10/19 18:32:04]  Iteration: 2 (0 solution, 1 counterexamples)
[10/19 18:32:04]  Generator returned sat in 0.044385 secs.
[10/19 18:32:04]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
[0m
[10/19 18:32:04]  Improved gap from 0.0 to 0
[10/19 18:32:04]  Improved number of small numbers from 72 to 81 out of a max of 114
[10/19 18:32:04]  Verifer returned sat in 0.751468 secs.
[10/19 18:32:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5814.250488   -5914.251709  5614.773438 -5814.250488    0.124756    0.124756 -5914.251709    0.00000          -5914.251709  100.001221        0.002188
1   -5814.250488   -5814.251494  5614.773506 -5814.250488    0.001465    0.001465 -5814.251494    0.00000          -5814.251494    0.001006      -99.997744
2   -5614.248994   -5614.252744  5614.773506 -5614.248994  200.002500  200.002500 -5614.252744    0.00125          -5614.252744    0.002500        0.002500
3   -5514.250244   -5614.252744  5614.773506 -5514.250244  100.001250  100.001250 -5614.252744    0.00125          -5614.253906  100.001250        0.001250
4   -5514.250244   -5514.251494  5714.772217 -5514.250244    0.010000    0.015000 -5514.251494    0.00125          -5514.251494    0.000000       -0.000039
5   -5514.240244   -5514.250244  5814.761006 -5514.240244    0.010000    0.015000 -5514.250244    0.00125          -5514.250244    0.008750       -0.001250
6   -5514.238994   -5514.240244  5914.760986 -5514.238994    0.010000    0.015000 -5514.240244    0.00125          -5514.241455    0.000000       -0.000020
7   -5514.228994   -5514.238994  6014.749756 -5514.228994    0.010000    0.015000 -5514.238994    0.00125          -5514.238994    0.008750       -0.001250
8   -5514.227744   -5514.228994  6114.749512 -5514.227744    0.010000    0.015000 -5514.228994    0.00125          -5514.230469    0.000000       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/400.[0m
[10/19 18:32:05]  --------------------------------------------------------------------------------
[10/19 18:32:05]  Iteration: 3 (0 solution, 2 counterexamples)
[10/19 18:32:05]  Generator returned sat in 0.112309 secs.
[10/19 18:32:05]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:32:05]  Improved gap from 0.0 to 0
[10/19 18:32:06]  Improved number of small numbers from 30 to 114 out of a max of 114
[10/19 18:32:06]  Verifer returned sat in 0.771255 secs.
[10/19 18:32:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5519.254150   -5619.254150  5319.775146 -5519.254150      0.124512    0.124512 -5619.254150    0.00000          -5519.223145  100.000000        0.000000
1   -5519.223145   -5519.254150  5319.775146 -5519.223145    100.031006  100.031006 -5519.254150    0.00000          -5519.191650    0.031006      -99.968994
2   -5319.160645   -5319.254150  5319.775146 -5319.160645    200.093506  200.093506 -5319.254150    0.03125          -5319.254150    0.062256        0.062256
3   -5319.129395   -5319.222900  5419.681396 -5319.129395      0.093506    0.093506 -5319.222900    0.03125          -5319.222900    0.062256       -0.000244
4   -5318.129395   -5318.160645  5518.681396 -5318.129395    601.249512    1.000000 -5318.160645    0.03125          -5318.160645    0.000000       -0.000244
5   -5317.129395   -5318.129395  5617.681396 -5317.129395   1605.686035    1.000000 -5318.129395    0.03125          -5318.129395    0.968750       -0.000244
6   -5316.129395   -5317.160400  5716.681396 -5316.129395   3214.621582    1.000000 -5317.160400    0.03125          -5317.191650    0.999756       -0.000244
7   -5315.129395   -5316.129150  5815.681396 -5315.129395   6434.368164    1.000000 -5316.129150    0.03125          -5316.129150    0.968506       -0.000244
8   -5314.129395   -5314.160645  5914.681396 -5314.129395  12873.799316    1.000000 -5314.160645    0.03125          -5314.160645    0.000000       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=255/4096.[0m
[10/19 18:32:06]  --------------------------------------------------------------------------------
[10/19 18:32:06]  Iteration: 4 (0 solution, 3 counterexamples)
[10/19 18:32:07]  Generator returned sat in 0.434290 secs.
[10/19 18:32:07]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:32:07]  Improved gap from 0.0 to 100
[10/19 18:32:08]  Improved number of small numbers from 47 to 72 out of a max of 114
[10/19 18:32:08]  Verifer returned sat in 1.557530 secs.
[10/19 18:32:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4885.719727   -5285.844150  4986.365146 -4885.719727    0.124268    0.124268 -5285.844150        0.0          -4885.657471  400.124424      300.124424
1   -4832.711124   -5185.844150  4986.365146 -4832.711124  453.133026  453.133026 -5185.844150        0.0          -4832.648926  353.133026      253.133026
2   -4832.711124   -4985.844238  4986.365146 -4832.711124  353.132812  353.132812 -4985.844238        0.0          -4985.844238  153.133114      153.133026
3   -4832.711124   -4985.844150  4986.365146 -4832.711124   24.097641   24.097641 -4985.844150        0.0          -4985.906494  153.133026       53.133026
4   -4832.711124   -4832.711182  4986.365146 -4832.711124   49.195282   23.597641 -4832.711182        0.0          -4832.711182    0.000057      -46.866974
5   -4784.015842   -4785.843994  4986.365146 -4784.015842   99.390564   48.695282 -4785.843994        0.0          -4785.843994    1.828152      -98.171692
6   -4685.125278   -4685.781982  4986.365146 -4685.125278  199.781128   98.890564 -4685.781982        0.0          -4685.781982    0.656704      -99.281128
7   -4485.844150   -4585.843994  4986.365146 -4485.844150  400.562256  199.281128 -4585.843994        0.0          -4585.843994   99.999844        0.000000
8   -4085.781895   -4485.843994  4986.365146 -4085.781895  802.124512  400.062256 -4485.843994        0.0          -4485.843994  400.062100      300.062256
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=614655/2048.[0m
[10/19 18:32:09]  --------------------------------------------------------------------------------
[10/19 18:32:09]  Iteration: 5 (0 solution, 4 counterexamples)
[10/19 18:32:09]  Generator returned sat in 0.239492 secs.
[10/19 18:32:09]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:32:10]  Improved number of small numbers from 44 to 113 out of a max of 113
[10/19 18:32:10]  Verifer returned sat in 0.494456 secs.
[10/19 18:32:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5134.318359   -5833.380371  5533.963623 -5134.318359    0.124268    0.124268 -5833.380371        0.0          -5833.380371  699.062012      599.124268
1   -5034.380615   -5633.442627  5533.963623 -5034.380615  798.999756  798.999756 -5633.442627        0.0          -5633.442627  599.062012      599.062012
2   -5034.380615   -5633.442627  5533.963623 -5034.380615    0.062012    0.062012 -5633.442627        0.0          -5533.380615  599.062012      499.062012
3   -5034.380615   -5433.442627  5533.963623 -5034.380615  396.937744  396.937744 -5433.442627        0.0          -5433.442627  399.062012      399.062012
4   -5034.380615   -5433.380615  5533.963623 -5034.380615  397.937744  396.937744 -5433.380615        0.0          -5433.380615  399.000000      299.062012
5   -5034.380615   -5333.442627  5533.963623 -5034.380615  398.937744  397.937744 -5333.442627        0.0          -5333.504883  299.062012      199.062012
6   -4933.504883   -5233.442627  5533.963623 -4933.504883  399.937744  398.937744 -5233.442627        0.0          -5233.504639  299.937744      199.937744
7   -4832.504883   -5035.318115  5533.963623 -4832.504883  400.937744  399.937744 -5035.318115        0.0          -5035.318115  202.813232      200.937744
8   -4633.380371   -5033.442627  5533.963623 -4633.380371  401.937744  400.937744 -5033.442627        0.0          -5033.504883  400.062256      300.062256
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=2454013/4096.[0m
[10/19 18:32:10]  --------------------------------------------------------------------------------
[10/19 18:32:10]  Iteration: 6 (0 solution, 5 counterexamples)
[10/19 18:32:11]  Generator returned sat in 0.770128 secs.
[10/19 18:32:11]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:32:11]  Improved gap from 0.0 to 0
[10/19 18:32:12]  Improved number of small numbers from 70 to 103 out of a max of 114
[10/19 18:32:12]  Verifer returned sat in 0.726176 secs.
[10/19 18:32:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5034.443115   -5536.434814  5236.956299 -5034.443115    0.124268    0.124268 -5536.434814        0.0          -5536.434814  501.991699      401.992188
1   -5034.442871   -5336.435547  5236.956299 -5034.442871  501.991943  501.991943 -5336.435547        0.0          -5336.435547  301.992676      301.992432
2   -5034.442871   -5336.435303  5236.956299 -5034.442871    0.000732    0.000732 -5336.435303        0.0          -5236.434814  301.992432      201.992432
3   -5034.442871   -5136.435303  5236.956299 -5034.442871    2.010000    2.010000 -5136.435303        0.0          -5136.435303  101.992432      101.992432
4   -5034.442871   -5036.435303  5236.956299 -5034.442871    2.005000    0.010000 -5036.435303        0.0          -5036.435303    1.992432        1.992432
5   -5034.432871   -5036.434570  5334.953867 -5034.432871    2.002500    0.010000 -5036.434570        0.0          -5036.434570    2.001699        0.000000
6   -5034.432871   -5034.432871  5434.944336 -5034.432871    2.001250    0.010000 -5034.432871        0.0          -5034.433350    0.000000       -0.009531
7   -5034.422871   -5034.423096  5534.934082 -5034.422871    2.000625    0.010000 -5034.423096        0.0          -5034.423096    0.000225       -0.009785
8   -5034.412871   -5034.413086  5534.934082 -5034.412871    2.000313    0.010000 -5034.413086        0.0          -5533.556396    0.000215      -99.999785
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=160797/400.[0m
[10/19 18:32:12]  --------------------------------------------------------------------------------
[10/19 18:32:12]  Iteration: 7 (0 solution, 6 counterexamples)
[10/19 18:32:15]  Generator returned sat in 2.312725 secs.
[10/19 18:32:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:32:15]  Improved gap from 0.0 to 0
[10/19 18:32:16]  Improved number of small numbers from 60 to 78 out of a max of 114
[10/19 18:32:16]  Verifer returned sat in 1.092080 secs.
[10/19 18:32:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -5037.452881   -5037.461914  5236.956367 -5037.452881  0.124268  0.124268 -5037.461914        0.0          -5037.461914  0.009033        0.000824
1   -5037.452881   -5037.453704  5336.955322 -5037.452881  0.000977  0.000977 -5037.453704        0.0          -5037.452148  0.000824       -0.000221
2   -5036.454538   -5036.456055  5435.957201 -5036.454538  0.999167  0.999167 -5036.456055        0.0          -5036.456055  0.001517        0.000000
3   -5036.454538   -5036.454538  5535.957201 -5036.454538  0.000833  0.000833 -5036.454538        0.0          -5036.455322  0.000000        0.000000
4   -5036.444538   -5036.454538  5635.938867 -5036.444538  0.010000  0.010000 -5036.454538        0.0          -5036.435547  0.010000       -0.008333
5   -5036.435371   -5036.436204  5735.929701 -5036.435371  0.019167  0.010000 -5036.436204        0.0          -5036.426270  0.000833       -0.008333
6   -5036.426204   -5036.427038  5835.920534 -5036.426204  0.010000  0.010000 -5036.427038        0.0          -5036.425537  0.000833       -0.008333
7   -5036.417038   -5036.417871  5935.919701 -5036.417038  0.010000  0.010000 -5036.417871        0.0          -5036.416016  0.000833        0.000000
8   -5036.407871   -5036.417038  6035.902100 -5036.407871  0.010000  0.010000 -5036.417038        0.0          -5533.556641  0.009167       -0.008434
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/600.[0m
[10/19 18:32:16]  --------------------------------------------------------------------------------
[10/19 18:32:16]  Iteration: 8 (0 solution, 7 counterexamples)
[10/19 18:32:17]  Generator returned sat in 0.805744 secs.
[10/19 18:32:17]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:32:17]  Improved gap from 0.0 to 0
[10/19 18:32:18]  Improved number of small numbers from 59 to 72 out of a max of 114
[10/19 18:32:18]  Verifer returned sat in 1.011645 secs.
[10/19 18:32:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -3849.019287   -3849.523652  5236.462402 -3849.019287  0.124268  0.124268 -3849.523652        0.0          -3849.523652  0.504365        0.504255
1   -3849.019287   -3849.019590  5335.958138 -3849.019287  0.000488  0.000488 -3849.019590        0.0          -3849.019590  0.000303       -0.000010
2   -3849.019277   -3849.019277  5435.958008 -3849.019277  0.000313  0.000313 -3849.019277        0.0          -3849.019287  0.000000       -0.000130
3   -3849.018340   -3849.018965  5535.957031 -3849.018340  0.000937  0.000937 -3849.018965        0.0          -3849.018965  0.000625       -0.000169
4   -3849.008652   -3849.018027  5635.946888 -3849.008652  0.010313  0.010000 -3849.018027        0.0          -3849.018027  0.009375       -0.000625
5   -3849.008027   -3849.008027  5735.937201 -3849.008027  0.010000  0.010000 -3849.008027        0.0          -3849.008057  0.000000       -0.009687
6   -3848.998027   -3848.998340  5835.936768 -3848.998027  0.010000  0.010000 -3848.998340        0.0          -3848.997803  0.000313       -0.000120
7   -3848.988340   -3848.997715  5935.927201 -3848.988340  0.010000  0.010000 -3848.997715        0.0          -3848.997715  0.009375        0.000000
8   -3848.987715   -3848.988340  5935.927246 -3848.987715  0.010000  0.010000 -3848.988340        0.0          -3848.988525  0.000625      -99.999329
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=203777/2048.[0m
[10/19 18:32:19]  --------------------------------------------------------------------------------
[10/19 18:32:19]  Iteration: 9 (0 solution, 8 counterexamples)
[10/19 18:32:20]  Generator returned sat in 1.117790 secs.
[10/19 18:32:20]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 18:32:20]  Improved gap from 0.03106689453125 to 100
[10/19 18:32:20]  Improved number of small numbers from 51 to 114 out of a max of 114
[10/19 18:32:20]  Verifer returned sat in 0.473192 secs.
[10/19 18:32:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4180.049316   -4180.111572  5567.019531 -4180.049316     0.124268    0.124268 -4180.111572    0.000000          -4180.111572    0.062256        0.031250
1   -4180.049316   -4180.080322  5567.019531 -4180.049316     0.031006    0.031006 -4180.080322    0.000000          -4180.080322    0.031006      -99.968750
2   -3849.018311   -4080.080566  5567.019531 -3849.018311   331.062012  331.062012 -4080.080566    0.000000          -4080.111328  231.062256      131.062256
3   -3849.018311   -3881.049316  5567.019531 -3849.018311    33.000000   33.000000 -3881.049316    0.000000          -3881.049316   32.031006       31.062256
4   -3815.049316   -3880.080566  5567.019531 -3815.049316    66.000000   34.000000 -3880.080566    0.000000          -3780.049316   65.031250      -34.968750
5   -3748.080566   -3780.080566  5567.019531 -3748.080566   132.000000   67.000000 -3780.080566    0.000000          -3780.111328   32.000000      -68.000000
6   -3615.080566   -3680.080322  5567.019531 -3615.080566   264.000000  133.000000 -3680.080322    0.000000          -3680.080322   64.999756      -35.000000
7   -3350.080566   -3580.049561  5567.019531 -3350.080566   528.000000  265.000000 -3580.049561    0.000000          -3580.049561  229.968994      130.000000
8   -2821.080566   -3480.049316  5567.019531 -2821.080566  1056.000000  529.000000 -3480.049316  400.031006          -3480.049316  258.937744      158.968994
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638527/4096, 
, buffer=651137/4096.[0m
[10/19 18:32:21]  --------------------------------------------------------------------------------
[10/19 18:32:21]  Iteration: 10 (0 solution, 9 counterexamples)
[10/19 18:32:24]  Generator returned sat in 2.850715 secs.
[10/19 18:32:24]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:32:24]  Improved gap from 0.0 to 0
[10/19 18:32:25]  Improved number of small numbers from 61 to 72 out of a max of 114
[10/19 18:32:25]  Verifer returned sat in 1.210570 secs.
[10/19 18:32:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4141.000732   -4141.003311  5527.942139 -4141.000732    0.124023    0.124023 -4141.003311     0.0000          -4141.003311    0.002578        0.002441
1   -4140.998311   -4141.000811  5627.937275 -4140.998311    0.005000    0.005000 -4141.000811     0.0000          -4141.000811    0.002500        0.000000
2   -4140.995811   -4140.998311  5727.934775 -4140.995811    0.005000    0.005000 -4140.998311     0.0000          -4140.993164    0.002500        0.000000
3   -3942.000811   -4132.968311  5727.934775 -3942.000811  198.997500  198.997500 -4132.968311     0.0025          -4132.968311  190.965000       98.992500
4   -3941.000811   -4040.993311  5727.934814 -3941.000811  413.065000    1.000000 -4040.993311     0.0025          -4040.993311   99.990000       -0.007461
5   -3940.990811   -3940.993311  5827.932129 -3940.990811  406.547500    0.010000 -3940.993311     0.0025          -3940.993311    0.000000       -0.000146
6   -3940.980811   -3940.990811  5927.912275 -3940.980811  603.283750    0.010000 -3940.990811     0.0025          -3940.990811    0.007500       -0.010000
7   -3940.970811   -3940.973311  6027.912109 -3940.970811  685.596875    0.010000 -3940.973311     0.0025          -3940.970947    0.000000       -0.000166
8   -3940.960811   -3940.970947  6127.894775 -3940.960811  542.838438    0.010000 -3940.970947     0.0025          -3940.970947    0.007637       -0.007500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=39597/400.[0m
[10/19 18:32:26]  --------------------------------------------------------------------------------
[10/19 18:32:26]  Iteration: 11 (0 solution, 10 counterexamples)
[10/19 18:32:28]  Generator returned sat in 1.946301 secs.
[10/19 18:32:28]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:32:29]  Improved gap from 0.00017857142857142857 to 100
[10/19 18:32:30]  Improved number of small numbers from 60 to 68 out of a max of 114
[10/19 18:32:30]  Verifer returned sat in 2.055051 secs.
[10/19 18:32:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3825.694336   -3925.695947  5212.63634 -3825.694336    0.124023    0.124023 -3925.695947   0.000000          -3925.695947  100.001611        0.003039
1   -3825.694336   -3825.695947  5212.63634 -3825.694336    0.001429    0.001429 -3825.695947   0.000000          -3825.695947    0.001611      -99.996961
2   -3325.693090   -3725.695947  5212.63634 -3325.693090  500.002857  500.002857 -3725.695947   0.001429          -3725.695947  400.001429      300.002857
3   -3325.693090   -3610.695947  5212.63634 -3325.693090  359.488571  359.488571 -3610.695947   0.001429          -3610.695947  285.001429      200.002857
4   -3093.705947   -3525.695947  5212.63634 -3093.705947  516.988571  257.494286 -3525.695947  31.988571          -3525.695947  400.001429      300.002857
5   -3093.705947   -3325.697375  5212.63634 -3093.705947    0.010000    0.010000 -3325.697375  31.988571          -3325.697375  200.002857      200.002857
6   -3093.699518   -3325.697375  5212.63634 -3093.699518  200.009286   99.004643 -3325.697375  31.988571          -3325.698730  200.009286      100.009286
7   -2951.200232   -3176.730232  5212.63634 -2951.200232  342.508571  170.254286 -3176.730232  31.988571          -3176.730232  193.541429      142.508571
8   -2693.704518   -3125.696045  5212.63634 -2693.704518  516.991429  257.495714 -3125.696045  31.990000          -3125.696045  400.001527      300.002857
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1/700, 
, buffer=105001/350.[0m
[10/19 18:32:30]  --------------------------------------------------------------------------------
[10/19 18:32:30]  Iteration: 12 (0 solution, 11 counterexamples)
[10/19 18:32:33]  Generator returned sat in 2.153307 secs.
[10/19 18:32:33]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:32:34]  Improved number of small numbers from 50 to 57 out of a max of 113
[10/19 18:32:34]  Verifer returned sat in 1.075608 secs.
[10/19 18:32:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3431.200928   -3431.201054  4818.140018 -3431.200928    0.123779    0.123779 -3431.201054    0.000000          -3431.201054    0.000126        0.000126
1   -3331.201054   -3431.201054  4818.140018 -3331.201054  100.000000  100.000000 -3431.201054    0.000000          -3431.231934  100.000000        0.000000
2   -3331.170048   -3331.201054  4818.140018 -3331.170048  100.031006  100.031006 -3331.201054    0.000000          -3331.231934    0.031006      -99.968994
3   -3131.108036   -3163.805709  4818.140018 -3131.108036  200.093018  200.093018 -3163.805709    0.031006          -3163.805709   32.666667        0.062012
4   -3031.077030   -3031.201054  4818.140018 -3031.077030  132.697673  264.395345 -3031.201054    0.062012          -3031.201054    0.062012        0.062012
5   -2832.139042   -2975.201054  4818.140018 -2832.139042  199.000000  397.000000 -2975.201054   99.000000          -2975.201054   44.062012        0.062012
6   -2699.201054   -2831.201054  4818.140018 -2699.201054  177.000000  353.000000 -2831.201054  131.937988          -2831.201054    0.062012        0.062012
7   -2533.960738   -2763.805709  4818.140018 -2533.960738  165.302327  329.604655 -2763.805709  197.178304          -2763.805709   32.666667        0.062012
8   -2433.929732   -2731.169922  4818.140018 -2433.929732  132.697673  264.395345 -2731.169922  197.209310          -2731.169922  100.030880        0.062012
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=1211273/6144, 
, buffer=127/2048.[0m
[10/19 18:32:34]  --------------------------------------------------------------------------------
[10/19 18:32:34]  Iteration: 13 (0 solution, 12 counterexamples)
[10/19 18:32:37]  Generator returned sat in 2.281536 secs.
[10/19 18:32:37]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:32:37]  Improved gap from 0.995 to 100
[10/19 18:32:39]  Improved number of small numbers from 24 to 81 out of a max of 114
[10/19 18:32:39]  Verifer returned sat in 2.036708 secs.
[10/19 18:32:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t    arrival_0,t       cwnd_0,t       rate_0,t  service_0,t  losts_0,t  tot_service_choice_t        queue_t  bottle_queue_t
0   -3431.231934   -3431.262939  4818.170898   -3431.231934       0.123779       0.123779 -3431.262939   0.000000          -3431.262939       0.031006        0.000000
1   -3431.200928   -3431.231934  4818.170898   -3431.200928       0.062012       0.062012 -3431.231934   0.000000          -3431.231934       0.031006      -99.968994
2  163572.891846   -3231.231934  4818.170898  163572.891846  167004.123779  167004.123779 -3231.231934   0.030945          -3231.231934  166804.092834   166804.092834
3  163572.891846   -3131.232178  4818.170898  163572.891846   21952.802349   21952.802349 -3131.232178   0.030945          -3131.232178  166704.093079   166704.092834
4  163572.891846   -3031.231934  4818.170898  163572.891846   32929.203523   32928.203523 -3031.231934   0.030945          -3031.231934  166604.092834   166604.092834
5  163572.891846   -2931.231934  4818.170898  163572.891846   49393.805284   49392.805284 -2931.231934   0.030945          -2931.231934  166504.092834   166504.092834
6  163572.891846   -2931.231934  4818.170898  163572.891846   74090.707926   74089.707926 -2931.231934   0.030945          -2931.262939  166504.092834   166404.092834
7  163572.891846   -2731.231934  4818.170898  163572.891846  111136.061890  111135.061890 -2731.231934   0.030945          -2731.231934  166304.092834   166304.092834
8  163972.891846   -2731.231934  4818.170898  163972.891846  166704.092834  166703.092834 -2731.231934   0.030945          -2731.262939  166704.092834   166604.092834
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=2732918257/16384.[0m
[10/19 18:32:39]  --------------------------------------------------------------------------------
[10/19 18:32:39]  Iteration: 14 (0 solution, 13 counterexamples)
[10/19 18:32:42]  Generator returned sat in 2.155376 secs.
[10/19 18:32:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:32:42]  Improved gap from 0.0 to 100
[10/19 18:32:43]  Improved number of small numbers from 48 to 64 out of a max of 114
[10/19 18:32:43]  Verifer returned sat in 1.343251 secs.
[10/19 18:32:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3531.077148   -3731.015137  4818.170654 -3531.077148     0.123535    0.123535 -3731.015137    0.000000          -3731.015137  199.937988      100.000000
1   -3531.077148   -3631.015259  4818.170654 -3531.077148     0.061768    0.061768 -3631.015259    0.000000          -3631.015259   99.938110        0.000000
2   -3182.739781   -3431.077148  4818.170654 -3182.739781   448.275478  448.275478 -3431.077148    0.061890          -3431.077148  248.275478      248.275478
3   -3182.739781   -3331.077393  4818.170654 -3182.739781    37.037925   37.037925 -3331.077393    0.061890          -3331.077393  148.275722      148.275478
4   -3182.739781   -3331.015381  4818.170654 -3182.739781    74.075849   36.037925 -3331.015381    0.061890          -3331.015381  148.213710       48.275478
5   -3182.739781   -3231.077148  4818.170654 -3182.739781   148.151699   73.075849 -3231.077148    0.061890          -3231.077148   48.275478      -51.724522
6   -3035.588082   -3131.015381  4818.170654 -3035.588082   296.303397  147.151699 -3131.015381    0.061890          -3131.015381   95.365409       -4.572824
7   -2740.284685   -3031.077148  4818.170654 -2740.284685   592.606794  295.303397 -3031.077148    0.061890          -3031.138916  290.730573      190.730573
8   -2148.677891   -2931.015381  4818.170654 -2148.677891  1185.213588  591.606794 -2931.015381  434.123779          -2931.015381  348.213710      248.275478
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=3555835/8192, 
, buffer=14237109/57344.[0m
[10/19 18:32:43]  --------------------------------------------------------------------------------
[10/19 18:32:43]  Iteration: 15 (0 solution, 14 counterexamples)
[10/19 18:32:45]  Generator returned sat in 1.454216 secs.
[10/19 18:32:45]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:32:45]  Improved gap from 0.0 to 0
[10/19 18:32:46]  Improved number of small numbers from 60 to 74 out of a max of 114
[10/19 18:32:46]  Verifer returned sat in 0.952508 secs.
[10/19 18:32:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -3297.699577   -3297.701172  4518.173096 -3297.699577  0.123535  0.123535 -3297.701172        0.0          -3297.701172  0.001595        0.001288
1   -3297.699577   -3297.700439  4618.171808 -3297.699577  0.000488  0.000488 -3297.700439        0.0          -3297.700439  0.000862        0.000000
2   -3297.699577   -3297.699577  4718.171631 -3297.699577  0.000488  0.000488 -3297.699577        0.0          -3297.699707  0.000000       -0.000177
3   -3297.698668   -3297.699122  4818.170654 -3297.698668  0.000909  0.000909 -3297.699122        0.0          -3297.699122  0.000455       -0.000244
4   -3297.689122   -3297.695713  4918.161353 -3297.689122  0.010000  0.010000 -3297.695713        0.0          -3297.695713  0.006591        0.000000
5   -3297.685713   -3297.689122  5018.148193 -3297.685713  0.010000  0.010000 -3297.689122        0.0          -3297.689209  0.003409       -0.009751
6   -3297.675713   -3297.675713  5118.147944 -3297.675713  0.020909  0.010000 -3297.675713        0.0          -3297.675713  0.000000        0.000000
7   -3297.665713   -3297.675713  5218.127944 -3297.665713  0.046818  0.010000 -3297.675713        0.0          -3297.676025  0.010000       -0.010000
8   -3297.655713   -3297.655713  5218.128174 -3297.655713  0.040000  0.010000 -3297.655713        0.0          -3297.656006  0.000000      -99.999770
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3/2048.[0m
[10/19 18:32:47]  --------------------------------------------------------------------------------
[10/19 18:32:47]  Iteration: 16 (0 solution, 15 counterexamples)
[10/19 18:32:48]  Generator returned sat in 1.334089 secs.
[10/19 18:32:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 18:32:49]  Improved gap from 0.0 to 10.9375
[10/19 18:32:49]  Improved number of small numbers from 103 to 113 out of a max of 114
[10/19 18:32:49]  Verifer returned sat in 0.599822 secs.
[10/19 18:32:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3297.639404   -3297.701172  4618.171875 -3297.639404    0.123291    0.123291 -3297.701172        0.0          -3297.701172    0.061768      -99.876221
1   -3097.762939   -3197.701172  4618.171875 -3097.762939  199.938232  199.938232 -3197.701172        0.0          -3197.701172   99.938232        0.000244
2   -3097.762939   -3097.763184  4631.364990 -3097.762939    0.061768    0.061768 -3097.763184        0.0          -3097.701172    0.000244      -86.806641
3   -2807.786621   -2953.836670  4631.364990 -2807.786621  289.976562  289.976562 -2953.836670        0.0          -2953.836670  146.050049      103.169678
4   -2807.786621   -2881.842529  4631.364990 -2807.786621  145.988281  219.982422 -2881.842529        0.0          -2881.842529   74.055908        3.169678
5   -2807.786621   -2810.894531  4713.366699 -2807.786621   73.994141  111.991211 -2810.894531        0.0          -2810.894531    3.107910      -14.828613
6   -2772.897461   -2792.958008  4793.306152 -2772.897461   37.997070   57.995605 -2792.958008        0.0          -2793.019531   20.060547        0.000000
7   -2772.897461   -2772.897461  4882.368652 -2772.897461   19.998535   30.997803 -2772.897461        0.0          -2772.897461    0.000000      -10.937500
8   -2761.898193   -2761.898438  4882.368896 -2761.898193   10.999268   17.498901 -2761.898438        0.0          -2761.898438    0.000244      -99.937988
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=105709/1024.[0m
[10/19 18:32:49]  --------------------------------------------------------------------------------
[10/19 18:32:49]  Iteration: 17 (0 solution, 16 counterexamples)
[10/19 18:32:52]  Generator returned sat in 2.049027 secs.
[10/19 18:32:52]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:32:52]  Improved gap from 0.0 to 0
[10/19 18:32:53]  Improved number of small numbers from 71 to 82 out of a max of 114
[10/19 18:32:53]  Verifer returned sat in 1.031607 secs.
[10/19 18:32:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3107.766846   -3107.771621  4528.177813 -3107.766846     0.123047    0.123047 -3107.771621        0.0          -3107.771621    0.004775        0.002275
1   -3107.766846   -3107.769121  4628.175312 -3107.766846     0.002500    0.002500 -3107.769121        0.0          -3107.763916    0.002275       -0.000225
2   -2807.789121   -3107.766621  4628.175312 -2807.789121   299.980000  299.980000 -3107.766621        0.0          -3107.766846  299.977500      199.977500
3   -2807.786621   -2907.766621  4628.175312 -2807.786621   299.980000  299.980000 -2907.766621        0.0          -2907.766621   99.980000       99.980000
4   -2807.776621   -2849.764121  4628.175312 -2807.776621   599.987500    0.010000 -2849.764121        0.0          -2849.764121   41.987500       -0.010000
5   -2807.766621   -2807.766621  4728.175312 -2807.766621   986.995000    0.010000 -2807.766621        0.0          -2807.764160    0.000000        0.000000
6   -2807.756621   -2807.766621  4828.165283 -2807.756621  1436.995000    0.010000 -2807.766621        0.0          -2807.753906    0.010000       -0.000029
7   -2807.746621   -2807.754121  4928.155313 -2807.746621  1586.995000    0.010000 -2807.754121        0.0          -2807.754121    0.007500        0.000000
8   -2807.736621   -2807.744141  5028.135254 -2807.736621  1650.010000    0.010000 -2807.744141        0.0          -2807.744141    0.007520       -0.010059
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=819119/4096.[0m
[10/19 18:32:53]  --------------------------------------------------------------------------------
[10/19 18:32:53]  Iteration: 18 (0 solution, 17 counterexamples)
[10/19 18:32:56]  Generator returned sat in 2.448800 secs.
[10/19 18:32:56]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:32:56]  Improved gap from 0.0 to 0
[10/19 18:32:57]  Improved number of small numbers from 69 to 87 out of a max of 114
[10/19 18:32:57]  Verifer returned sat in 1.108507 secs.
[10/19 18:32:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3207.768555   -3207.769121  4528.177813 -3207.768555    0.122803    0.122803 -3207.769121   0.000000          -3207.769775    0.000566      -99.999434
1   -3007.768496   -3107.769121  4528.177813 -3007.768496  200.000625  200.000625 -3107.769121   0.000000          -3007.768066  100.000625        0.000625
2   -3007.768496   -3007.769121  4628.177188 -3007.768496  100.000488  100.000488 -3007.769121   0.000000          -3007.769531    0.000625        0.000000
3   -2807.777871   -2999.747246  4628.177188 -2807.777871  199.991250  199.991250 -2999.747246   0.000625          -2999.747246  191.968750       99.990000
4   -2807.767871   -2808.769043  4628.177188 -2807.767871  717.030625    0.010000 -2808.769043   0.000625          -2808.769043    1.000547        0.000000
5   -2807.767871   -2807.768496  4728.177188 -2807.767871    1.000000    0.010000 -2807.768496   0.000625          -2807.767822    0.000000        0.000000
6   -2807.757871   -2807.768066  4828.166992 -2807.757871    1.000000    0.010000 -2807.768066   0.000625          -2807.768066    0.009570       -0.000195
7   -2807.747871   -2807.758057  4928.156982 -2807.747871    1.000000    0.010000 -2807.758057   0.000625          -2807.758057    0.009561       -0.000205
8   -2807.737871   -2807.748047  5028.147187 -2807.737871    1.000000    0.010000 -2807.748047   0.000625          -2807.748047    0.009551        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=9999/100.[0m
[10/19 18:32:58]  --------------------------------------------------------------------------------
[10/19 18:32:58]  Iteration: 19 (0 solution, 18 counterexamples)
[10/19 18:32:59]  Generator returned sat in 1.253269 secs.
[10/19 18:32:59]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:32:59]  Improved gap from 0.019230769230769232 to 0
[10/19 18:33:00]  Improved number of small numbers from 59 to 99 out of a max of 114
[10/19 18:33:00]  Verifer returned sat in 1.142584 secs.
[10/19 18:33:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -3018.439209   -3018.476213  4418.682861 -3018.439209  0.122803  0.122803 -3018.476213        0.0          -3018.476213  0.037004        0.036621
1   -3018.439209   -3018.457764  4518.646240 -3018.439209  0.018555  0.018555 -3018.457764        0.0          -3018.457764  0.018555        0.000000
2   -3018.420654   -3018.439209  4618.627441 -3018.420654  0.037109  0.037109 -3018.439209        0.0          -3018.457764  0.018555       -0.000244
3   -3018.346680   -3018.402139  4718.553223 -3018.346680  0.092529  0.092529 -3018.402139        0.0          -3018.402139  0.055459       -0.000488
4   -3017.365102   -3018.007080  4817.572021 -3017.365102  1.037037  1.000000 -3018.007080        0.0          -3018.007080  0.641978       -0.000112
5   -3016.781738   -3017.346436  4916.988525 -3016.781738  1.225342  1.000000 -3017.346436        0.0          -3017.346436  0.564697       -0.000244
6   -3015.800049   -3016.763250  5016.007080 -3015.800049  1.546387  1.000000 -3016.763250        0.0          -3016.763250  0.963201        0.000000
7   -3014.943805   -3015.781982  5114.150879 -3014.943805  1.819444  1.000000 -3015.781982        0.0          -3015.781982  0.838177       -0.999958
8   -3013.943805   -3013.943848  5214.150635 -3013.943805  2.112549  1.000000 -3013.943848        0.0          -3013.962402  0.000042       -0.000202
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=19/512.[0m
[10/19 18:33:01]  --------------------------------------------------------------------------------
[10/19 18:33:01]  Iteration: 20 (0 solution, 19 counterexamples)
[10/19 18:33:04]  Generator returned sat in 2.979247 secs.
[10/19 18:33:04]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:33:05]  Improved gap from 0.0 to 0
[10/19 18:33:05]  Improved number of small numbers from 59 to 86 out of a max of 114
[10/19 18:33:05]  Verifer returned sat in 1.161243 secs.
[10/19 18:33:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3491.196777   -3491.197266  4617.742893 -3491.196777    0.122559    0.122559 -3491.197266    0.000000          -3491.197266    0.000488      -99.999014
1   -3391.197510   -3391.197764  4717.742476 -3391.197510   99.999756   99.999756 -3391.197764    0.000000          -3391.197021    0.000254       -0.000163
2   -2791.197347   -3291.197510  4717.742476 -2791.197347  600.000417  600.000417 -3291.197510  299.959583          -3291.197510  200.040579      200.040417
3   -2791.197347   -3283.076172  4717.742476 -2791.197347    0.000488    0.000488 -3283.076172  299.959583          -3283.076172  191.919242      100.040417
4   -2791.197347   -3191.196777  4717.742476 -2791.197347    0.010000    1.000000 -3191.196777  299.959583          -3191.196777  100.039847        0.040417
5   -2791.197347   -3091.197266  4817.702059 -2791.197347    0.020000    1.000000 -3091.197266  299.959583          -3091.197266    0.040335        0.000000
6   -2791.197347   -3091.156930  4917.622559 -2791.197347    0.040000    1.000000 -3091.156930  299.959583          -3091.156738    0.000000       -0.079501
7   -2791.117347   -3091.076930  5017.621826 -2791.117347    0.080000    1.000000 -3091.076930  299.959583          -3091.076930    0.000000       -0.000233
8   -2790.957347   -3091.076416  5017.621826 -2790.957347    0.160000    1.000000 -3091.076416  299.959583          -3091.076416    0.159486      -99.840233
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=480097/2400.[0m
[10/19 18:33:06]  --------------------------------------------------------------------------------
[10/19 18:33:06]  Iteration: 21 (0 solution, 20 counterexamples)
[10/19 18:33:09]  Generator returned sat in 2.370370 secs.
[10/19 18:33:09]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:33:09]  Improved gap from 0.0004166666666666667 to 0
[10/19 18:33:10]  Improved number of small numbers from 59 to 72 out of a max of 114
[10/19 18:33:10]  Verifer returned sat in 1.094561 secs.
[10/19 18:33:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2148.184570   -2248.186930  4417.359907 -2148.184570    0.122559    0.122559 -2248.186930        0.0          -2148.182129  100.002360        0.002360
1   -2148.184570   -2148.186930  4517.357407 -2148.184570   99.999756   99.999756 -2148.186930        0.0          -2148.181885    0.002360       -0.000140
2   -2048.169430   -2148.184430  4517.357407 -2048.169430  100.017500  100.017500 -2148.184430        0.0          -2048.182129  100.015000        0.015000
3   -2048.169430   -2048.184430  4617.342407 -2048.169430    0.008333    0.008333 -2048.184430        0.0          -2048.187012    0.015000        0.000000
4   -2048.169430   -2048.169430  4717.342407 -2048.169430    0.012500    1.000000 -2048.169430        0.0          -2048.166992    0.000000        0.000000
5   -2048.150680   -2048.150680  4817.297852 -2048.150680    0.018750    1.000000 -2048.150680        0.0          -2048.150680    0.000000       -0.025805
6   -2048.122555   -2048.122555  4917.295410 -2048.122555    0.028125    1.000000 -2048.122555        0.0          -2048.122555    0.000000       -0.000122
7   -2048.080368   -2048.120055  5017.253174 -2048.080368    0.042188    1.000000 -2048.120055        0.0          -2048.120055    0.039688       -0.000170
8   -2048.056774   -2048.056774  5117.229736 -2048.056774    0.063281    1.000000 -2048.056774        0.0          -2048.056774    0.000000       -0.000014
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=7/400.[0m
[10/19 18:33:10]  --------------------------------------------------------------------------------
[10/19 18:33:10]  Iteration: 22 (0 solution, 21 counterexamples)
[10/19 18:33:19]  Generator returned sat in 7.912042 secs.
[10/19 18:33:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:33:19]  Improved gap from 0.0 to 0
[10/19 18:33:20]  Improved number of small numbers from 35 to 58 out of a max of 114
[10/19 18:33:20]  Verifer returned sat in 1.533376 secs.
[10/19 18:33:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2673.270996   -2685.847656  4668.505371 -2673.270996    0.122314    0.122314 -2685.847656    0.000000          -2685.847656   12.576660       12.576468
1   -2673.240479   -2673.270996  4755.898254 -2673.240479   12.607178   12.607178 -2673.270996    0.000000          -2673.270996    0.030518       -0.000131
2   -2673.209717   -2673.240347  4830.867615 -2673.209717    0.061279    0.061279 -2673.240347    0.000000          -2648.179199    0.030630      -25.000009
3   -2229.179068   -2548.209707  4830.867615 -2229.179068  444.061279  444.061279 -2548.209707  306.454041          -2548.209707   12.576599       12.576599
4   -2018.725027   -2548.179068  4830.867615 -2018.725027  223.030640  446.061279 -2548.179068  416.908081          -2548.179068  112.545959       12.576599
5   -2018.725027   -2448.209707  4918.290771 -2018.725027  112.515320  225.030640 -2448.209707  416.908081          -2448.240234   12.576599       -0.000244
6   -2017.725027   -2435.602469  5017.291016 -2017.725027  112.515320    1.000000 -2435.602469  416.908081          -2435.602469    0.969360        0.000000
7   -2016.725027   -2434.633108  5116.290771 -2016.725027   56.303619    1.000000 -2434.633108  416.908081          -2434.663574    1.000000       -0.000244
8   -2015.725027   -2433.602295  5215.290771 -2015.725027   56.772980    1.000000 -2433.602295  416.908081          -2433.602295    0.969187       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=206055/16384.[0m
[10/19 18:33:21]  --------------------------------------------------------------------------------
[10/19 18:33:21]  Iteration: 23 (0 solution, 22 counterexamples)
[10/19 18:33:29]  Generator returned sat in 8.115673 secs.
[10/19 18:33:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 18:33:31]  Improved gap from 0.0 to 46.875
[10/19 18:33:32]  Improved number of small numbers from 74 to 93 out of a max of 114
[10/19 18:33:32]  Verifer returned sat in 2.438727 secs.
[10/19 18:33:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -2773.006348   -2820.117920  4777.745117 -2773.006348    0.122070    0.122070 -2820.117920     0.0000          -2820.117920  47.111572       47.111572
1   -2673.240479   -2741.117979  4777.745117 -2673.240479  146.877441  146.877441 -2741.117979     0.0000          -2741.117979  67.877500       46.877441
2   -2673.240479   -2720.115479  4830.867676 -2673.240479   67.877500   67.877500 -2720.115479     0.0000          -2720.115479  46.875000        0.000000
3   -2526.126312   -2573.240479  4830.867676 -2526.126312  193.989167  193.989167 -2573.240479     0.0025          -2573.240479  47.111667       47.111667
4   -2526.116312   -2573.240479  4883.746009 -2526.116312  371.316162    0.010000 -2573.240479     0.0025          -2573.242920  47.121667        0.000000
5   -2488.299229   -2526.118812  4935.870850 -2488.299229   84.938750   84.938750 -2526.118812     0.0025          -2526.121094  37.817083      -10.058076
6   -2428.117979   -2478.241455  4985.747676 -2428.117979   97.998333   97.998333 -2478.241455     0.0025          -2478.241455  50.120977        0.000000
7   -2428.117979   -2428.120479  5038.872559 -2428.117979   48.499512   48.499512 -2428.120479     0.0025          -2428.120361   0.000000      -46.875117
8   -2354.557979   -2381.243164  5038.872803 -2354.557979   73.560000   73.560000 -2381.243164     0.0025          -2381.243164  26.682686      -73.314873
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=28267/600.[0m
[10/19 18:33:32]  --------------------------------------------------------------------------------
[10/19 18:33:32]  Iteration: 24 (0 solution, 23 counterexamples)
[10/19 18:33:37]  Generator returned sat in 4.941560 secs.
[10/19 18:33:38]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:33:39]  Improved gap from 0.0 to 46.875
[10/19 18:33:39]  Improved number of small numbers from 68 to 114 out of a max of 114
[10/19 18:33:39]  Verifer returned sat in 1.781042 secs.
[10/19 18:33:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -2774.062012   -2820.115723  4777.674805 -2774.062012    0.122070    0.122070 -2820.115723   0.000000          -2820.115723  46.053711       46.053467
1   -2762.871582   -2762.925049  4777.674805 -2762.871582   57.244141   57.244141 -2762.925049   0.000000          -2762.925049   0.053467      -42.756104
2   -2720.062012   -2720.115479  4830.799805 -2720.062012   42.863037   42.863037 -2720.115479   0.000000          -2720.168945   0.053467      -46.821533
3   -2527.133545   -2573.240479  4830.799805 -2527.133545  192.981934  192.981934 -2573.240479   0.053467          -2573.240479  46.053467       46.053467
4   -2526.133545   -2573.186768  4883.746094 -2526.133545  782.223389    1.000000 -2573.186768   0.053467          -2573.186768  46.999756       -0.000244
5   -2477.264160   -2526.186768  4934.876953 -2477.264160   95.869141  190.738281 -2526.186768   0.053467          -2526.240479  48.869141        0.000000
6   -2428.168945   -2477.264404  4985.781738 -2428.168945   97.964355  194.928711 -2477.264404   0.053467          -2477.264404  49.041992        0.000000
7   -2428.168945   -2428.222412  5038.906738 -2428.168945   48.988037   96.976074 -2428.222412   0.053467          -2428.276123   0.000000      -46.875000
8   -2354.686768   -2381.293945  5091.978027 -2354.686768   73.482178  145.964355 -2381.293945   0.053467          -2381.293945  26.553711      -20.321533
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=188635/4096.[0m
[10/19 18:33:40]  --------------------------------------------------------------------------------
[10/19 18:33:40]  Iteration: 25 (0 solution, 24 counterexamples)
[10/19 18:33:45]  Generator returned sat in 4.793883 secs.
[10/19 18:33:45]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:33:45]  Improved gap from 0.0 to 0
[10/19 18:33:46]  Improved number of small numbers from 70 to 84 out of a max of 114
[10/19 18:33:46]  Verifer returned sat in 0.991996 secs.
[10/19 18:33:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -2773.243164   -2777.249268  4734.805908 -2773.243164    0.121826    0.121826 -2777.249268     0.0000          -2777.249268   4.006104        4.005918
1   -2773.243164   -2777.246729  4830.799805 -2773.243164    0.002686    0.002686 -2777.246729     0.0000          -2777.246729   4.003564       -0.000186
2   -2669.234229   -2762.216729  4830.799805 -2669.234229  108.012500  108.012500 -2762.216729     0.0025          -2762.216729  92.980000        4.006250
3   -2569.231729   -2664.230479  4830.799805 -2569.231729  192.982500  192.982500 -2664.230479     0.0050          -2664.230479  94.993750        4.006250
4   -2472.242979   -2473.245479  4830.799805 -2472.242979  191.982500   96.991250 -2473.245479     0.0050          -2473.245479   0.997500        0.995000
5   -2472.240479   -2473.242979  4929.802305 -2472.240479    1.000000    0.010000 -2473.242979     0.0050          -2473.243164   0.997500        0.000000
6   -2472.237979   -2472.245479  5029.799805 -2472.237979    1.000000    0.010000 -2472.245479     0.0050          -2472.240479   0.002500        0.000000
7   -2472.227979   -2472.240723  5129.789795 -2472.227979    1.000000    0.010000 -2472.240723     0.0050          -2472.240723   0.007744       -0.000010
8   -2472.217979   -2472.232910  5129.790039 -2472.217979    1.000000    0.010000 -2472.232910     0.0050          -2472.232910   0.009932      -99.989766
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=641/160.[0m
[10/19 18:33:47]  --------------------------------------------------------------------------------
[10/19 18:33:47]  Iteration: 26 (0 solution, 25 counterexamples)
[10/19 18:33:48]  Generator returned sat in 1.403550 secs.
[10/19 18:33:49]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 18:33:49]  Improved gap from 0.0 to 100
[10/19 18:33:50]  Improved number of small numbers from 35 to 112 out of a max of 114
[10/19 18:33:50]  Verifer returned sat in 1.885850 secs.
[10/19 18:33:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2769.264648   -2869.264648  4900.677734 -2769.264648    0.121826    0.121826 -2869.264648    0.000000          -2769.234131  100.000000        0.000000
1   -2769.264648   -2769.264648  4900.677734 -2769.264648    0.030518    0.030518 -2769.264648    0.000000          -2769.264648    0.000000     -100.000000
2   -2669.234131   -2669.264648  4900.677734 -2669.234131  100.030518  100.030518 -2669.264648    0.000000          -2669.264893    0.030518      -99.969482
3   -2469.173340   -2567.508301  4900.677734 -2469.173340  200.091309  200.091309 -2567.508301    0.030518          -2567.508301   98.304443        0.060791
4   -2368.386475   -2369.264893  4900.677734 -2368.386475  199.091309  298.636963 -2369.264893    0.817383          -2369.264893    0.061035        0.060791
5   -2170.356201   -2366.355957  4900.677734 -2170.356201  198.091309  297.136963 -2366.355957   98.847656          -2366.355957   97.152100        0.060791
6   -2070.416992   -2169.264648  4900.677734 -2070.416992  197.091309  295.636963 -2169.264648   98.847656          -2169.264648    0.000000        0.000000
7   -1870.295166   -2069.264893  4900.677734 -1870.295166  200.121826  301.182739 -2069.264893  198.908691          -2069.264893    0.061035        0.060791
8   -1671.234375   -2069.234375  4900.677734 -1671.234375  199.121826  298.682739 -2069.234375  297.969482          -2069.234375  100.030518        0.060791
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1217135/4096, 
, buffer=249/4096.[0m
[10/19 18:33:51]  --------------------------------------------------------------------------------
[10/19 18:33:51]  Iteration: 27 (0 solution, 26 counterexamples)
[10/19 18:33:54]  Generator returned sat in 2.260191 secs.
[10/19 18:33:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:33:54]  Improved gap from 0.0 to 0
[10/19 18:33:55]  Improved number of small numbers from 60 to 88 out of a max of 114
[10/19 18:33:55]  Verifer returned sat in 0.945885 secs.
[10/19 18:33:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2566.382568   -2666.382624  4697.795954 -2566.382568    0.121826    0.121826 -2666.382624   0.000000          -2566.381104  100.000055        0.000055
1   -2566.382568   -2566.382568  4697.796143 -2566.382568    0.001709    0.001709 -2566.382568   0.000000          -2566.382568    0.000000      -99.999756
2   -2466.380859   -2466.382624  4797.789287 -2466.380859  100.001709  100.001709 -2466.382624   0.000000          -2466.382624    0.001764       -0.004902
3   -2366.370957   -2366.375957  4797.789287 -2366.370957  100.011667  100.011667 -2366.375957   0.001667          -2366.375957    0.003333        0.003333
4   -2365.370957   -2366.364290  4896.785889 -2365.370957  651.019167    1.000000 -2366.364290   0.001667          -2366.364290    0.991667       -0.000065
5   -2365.362624   -2365.370850  4996.777588 -2365.362624    1.000000    0.010000 -2365.370850   0.001667          -2365.370850    0.006559       -0.000033
6   -2365.352624   -2365.362793  5096.767578 -2365.352624    1.000000    0.010000 -2365.362793   0.001667          -2365.362793    0.008503       -0.000042
7   -2365.342624   -2365.352539  5196.749268 -2365.342624    1.000000    0.010000 -2365.352539   0.001667          -2365.352539    0.008249       -0.008353
8   -2365.332624   -2365.334473  5196.749512 -2365.332624    1.000000    0.010000 -2365.334473   0.001667          -2365.334473    0.000182      -99.998109
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/300.[0m
[10/19 18:33:55]  --------------------------------------------------------------------------------
[10/19 18:33:55]  Iteration: 28 (0 solution, 27 counterexamples)
[10/19 18:34:00]  Generator returned sat in 4.185247 secs.
[10/19 18:34:00]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:34:00]  Improved gap from 0.0 to 0
[10/19 18:34:00]  Improved number of small numbers from 65 to 114 out of a max of 114
[10/19 18:34:00]  Verifer returned sat in 0.444331 secs.
[10/19 18:34:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2566.382568   -2666.383057  4599.748291 -2566.382568    0.121826    0.121826 -2666.383057        0.0          -2566.381348  100.000488        0.000488
1   -2566.382568   -2566.382568  4699.747559 -2566.382568    0.001709    0.001709 -2566.382568        0.0          -2566.382568    0.000000       -0.000244
2   -2566.381592   -2566.382324  4799.746582 -2566.381592    0.000977    0.000977 -2566.382324        0.0          -2566.382324    0.000732       -0.000244
3   -2465.881104   -2466.881348  4799.746582 -2465.881104  100.501221  100.501221 -2466.881348        0.0          -2466.881348    1.000244        0.500244
4   -2465.881104   -2466.381348  4898.746826 -2465.881104    1.000000    0.500000 -2466.381348        0.0          -2466.381348    0.500244       -0.499512
5   -2465.381348   -2465.381348  4998.746338 -2465.381348    1.000000    0.500000 -2465.381348        0.0          -2465.381348    0.000000       -0.000244
6   -2464.881348   -2465.381104  5097.746582 -2464.881348    1.000000    0.500000 -2465.381104        0.0          -2465.381592    0.499756       -0.500000
7   -2464.381348   -2464.381348  5197.246582 -2464.381348    1.000000    0.500000 -2464.381348        0.0          -2463.881104    0.000000       -0.500000
8   -2463.881348   -2463.881348  5296.747070 -2463.881348    1.000000    0.500000 -2463.881348        0.0          -2463.881104    0.000000       -0.499512
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=2053/4096.[0m
[10/19 18:34:01]  --------------------------------------------------------------------------------
[10/19 18:34:01]  Iteration: 29 (0 solution, 28 counterexamples)
[10/19 18:34:10]  Generator returned sat in 8.513370 secs.
[10/19 18:34:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:34:10]  Improved gap from 0.0 to 0
[10/19 18:34:11]  Improved number of small numbers from 61 to 73 out of a max of 114
[10/19 18:34:11]  Verifer returned sat in 0.946272 secs.
[10/19 18:34:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -2178.552490   -2178.723894  4499.018555 -2178.552490  0.121582  0.121582 -2178.723894        0.0          -2178.723894  0.171404        0.001491
1   -2178.552490   -2178.553153  4599.013560 -2178.552490  0.000977  0.000977 -2178.553153        0.0          -2178.553153  0.000663       -0.003504
2   -2178.547042   -2178.548987  4699.011616 -2178.547042  0.006111  0.006111 -2178.548987        0.0          -2178.549805  0.001944        0.000000
3   -2178.547042   -2178.547042  4799.011616 -2178.547042  0.000833  0.000833 -2178.547042        0.0          -2178.548096  0.000000        0.000000
4   -2178.281764   -2178.547042  4898.746338 -2178.281764  0.265278  1.000000 -2178.547042        0.0          -2178.547119  0.265278        0.000000
5   -2178.281764   -2178.281764  4998.746094 -2178.281764  0.010000  1.000000 -2178.281764        0.0          -2178.282471  0.000000       -0.000244
6   -2177.880931   -2178.280931  5098.345505 -2177.880931  0.400833  1.000000 -2178.280931        0.0          -2178.280931  0.400000        0.000000
7   -2177.880931   -2177.880931  5197.611616 -2177.880931  0.399167  1.000000 -2177.880931        0.0          -2177.146240  0.000000       -0.733889
8   -2176.881764   -2177.147042  5197.611816 -2176.881764  0.999167  1.000000 -2177.147042        0.0          -2176.881104  0.265278      -99.734521
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/600.[0m
[10/19 18:34:11]  --------------------------------------------------------------------------------
[10/19 18:34:11]  Iteration: 30 (0 solution, 29 counterexamples)
[10/19 18:34:15]  Generator returned sat in 3.097368 secs.
[10/19 18:34:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:34:15]  Improved gap from 0.0 to 0
[10/19 18:34:17]  Improved number of small numbers from 59 to 73 out of a max of 114
[10/19 18:34:17]  Verifer returned sat in 1.428965 secs.
[10/19 18:34:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -2441.749512   -2441.750931  4958.350342 -2441.749512  0.121582  0.121582 -2441.750931        0.0          -2441.750931  0.001419        0.001257
1   -2441.743431   -2441.744681  5058.343005 -2441.743431  0.007500  0.007500 -2441.744681        0.0          -2441.744681  0.001250        0.000000
2   -2441.742181   -2441.743431  5158.341553 -2441.742181  0.002500  0.002500 -2441.743431        0.0          -2441.740967  0.001250       -0.000202
3   -2441.719931   -2441.719931  5258.319336 -2441.719931  0.023500  0.023500 -2441.719931        0.0          -2441.719931  0.000000       -0.000169
4   -2441.704431   -2441.718681  5358.304005 -2441.704431  0.015500  1.000000 -2441.718681        0.0          -2441.718681  0.014250        0.000000
5   -2441.704431   -2441.704431  5458.297005 -2441.704431  0.013000  1.000000 -2441.704431        0.0          -2441.705811  0.000000       -0.007000
6   -2441.684931   -2441.697431  5558.284505 -2441.684931  0.019500  1.000000 -2441.697431        0.0          -2441.683594  0.012500        0.000000
7   -2441.684931   -2441.684931  5658.268799 -2441.684931  0.011250  1.000000 -2441.684931        0.0          -2441.686279  0.000000       -0.015706
8   -2441.668056   -2441.668213  5758.267578 -2441.668056  0.016875  1.000000 -2441.668213        0.0          -2441.668213  0.000157       -0.000051
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=5/2048.[0m
[10/19 18:34:17]  --------------------------------------------------------------------------------
[10/19 18:34:17]  Iteration: 31 (0 solution, 30 counterexamples)
[10/19 18:34:25]  Generator returned sat in 7.793428 secs.
[10/19 18:34:25]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:34:30]  Improved gap from 0.0 to 43.75
[10/19 18:34:31]  Improved number of small numbers from 60 to 70 out of a max of 114
[10/19 18:34:31]  Verifer returned sat in 5.992000 secs.
[10/19 18:34:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -3051.241455   -3051.241606  5567.841216 -3051.241455    0.121582    0.121582 -3051.241606        0.0          -3051.241606   0.000151        0.000151
1   -2951.216606   -2958.429106  5567.841216 -2951.216606  100.025000  100.025000 -2958.429106        0.0          -2958.429106   7.212500        0.025000
2   -2907.491606   -2951.241606  5624.091064 -2907.491606   50.937500   50.937500 -2951.241606        0.0          -2951.266846  43.750000       -0.000151
3   -2809.204106   -2809.391606  5624.091064 -2809.204106  142.037500  142.037500 -2809.391606        0.0          -2809.391606   0.187500       -1.712651
4   -2748.741606   -2806.466606  5665.341064 -2748.741606  120.925000   60.462500 -2806.466606        0.0          -2806.466606  57.725000       -0.000151
5   -2730.485356   -2748.716606  5721.566162 -2730.485356   75.981250   37.990625 -2748.716606        0.0          -2748.716606  18.231250      -25.518803
6   -2679.854106   -2704.941606  5777.791016 -2679.854106  101.262500   50.631250 -2704.941606        0.0          -2704.941606  25.087500      -18.662700
7   -2653.741606   -2661.166606  5834.016216 -2653.741606   52.225000   26.112500 -2661.166606        0.0          -2661.166606   7.425000      -36.325000
8   -2617.416606   -2617.416606  5834.016357 -2617.416606   72.650000   36.325000 -2617.416606        0.0          -2517.391602   0.000000      -99.999858
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=205/4096.[0m
[10/19 18:34:32]  --------------------------------------------------------------------------------
[10/19 18:34:32]  Iteration: 32 (0 solution, 31 counterexamples)
[10/19 18:34:33]  Generator returned sat in 0.919006 secs.
[10/19 18:34:33]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:34:36]  Improved gap from 0.060791015625 to 43.75
[10/19 18:34:37]  Improved number of small numbers from 26 to 34 out of a max of 114
[10/19 18:34:37]  Verifer returned sat in 3.764206 secs.
[10/19 18:34:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -3188.961670   -3248.963665  5625.339307 -3188.961670    0.121582    0.121582 -3248.963665   0.000000          -3248.963665  60.001995       60.001995
1   -3088.931111   -3150.963665  5625.339307 -3088.931111  160.032554  160.032554 -3150.963665   0.030396          -3150.963665  62.002158       60.002158
2   -2988.900715   -3048.963665  5625.339307 -2988.900715  162.032554  162.032554 -3048.963665   0.060791          -3048.963665  60.002158       60.002158
3   -2888.870320   -2949.579924  5625.339307 -2888.870320  160.032554  160.032554 -2949.579924   0.091187          -2949.579924  60.618418       60.002158
4   -2888.860320   -2948.933269  5665.327148 -2888.860320  608.108164    0.010000 -2948.933269   0.091187          -2948.933269  59.981763        0.000000
5   -2847.826885   -2888.951506  5721.576904 -2847.826885  101.015198   49.507599 -2888.951506   0.091187          -2888.981689  41.033435       -2.716809
6   -2808.854241   -2845.171111  5777.796631 -2808.854241   80.006079   39.003040 -2845.171111   0.091187          -2845.171111  36.225684       -7.524438
7   -2792.875518   -2801.390715  5834.016113 -2792.875518   52.204407   25.102203 -2801.390715   0.091187          -2801.390715   8.424011      -35.326233
8   -2756.989879   -2757.610352  5834.016357 -2756.989879   73.771277   35.885638 -2757.610352   0.091187          -2757.610352   0.529286      -99.440350
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=6144221/102400.[0m
[10/19 18:34:38]  --------------------------------------------------------------------------------
[10/19 18:34:38]  Iteration: 33 (0 solution, 32 counterexamples)
[10/19 18:34:44]  Generator returned sat in 5.298313 secs.
[10/19 18:34:44]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:34:51]  Improved gap from 0.0 to 100
[10/19 18:34:53]  Improved number of small numbers from 35 to 47 out of a max of 114
[10/19 18:34:53]  Verifer returned sat in 8.896642 secs.
[10/19 18:34:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3212.720703   -3312.720743  5689.096385 -3212.720703    0.121582    0.121582 -3312.720743    0.000000          -3312.720743  100.000040      100.000040
1   -3212.720703   -3312.720743  5689.096385 -3212.720703    0.015137    0.015137 -3312.720743    0.000000          -3312.735840  100.000040        0.000040
2   -3012.675150   -3212.705546  5689.096385 -3012.675150  300.045593  300.045593 -3212.705546    0.000000          -3212.705546  200.030396      100.045593
3   -3012.675150   -3112.705546  5689.096385 -3012.675150    0.015198    0.015198 -3112.705546    0.000000          -3112.705546  100.030396        0.045593
4   -3012.675150   -3012.720743  5689.096385 -3012.675150  100.015198  149.022797 -3012.720743    0.000000          -3012.720947    0.045593      -99.954407
5   -2812.713145   -2812.720743  5689.096385 -2812.713145  200.007599  299.011398 -2812.720743    0.000000          -2812.720743    0.007599        0.007599
6   -2512.724543   -2812.420588  5689.096385 -2512.724543  299.996201  448.994301 -2812.420588   99.935410          -2812.420588  199.760635      100.060791
7   -2512.714543   -2612.720743  5689.096385 -2512.714543  600.281158    0.010000 -2612.720743   99.935410          -2612.720743    0.070791        0.070791
8   -2012.644755   -2612.705566  5689.096385 -2012.644755  500.140579  749.210869 -2612.705566  400.015198          -2612.705566  200.045614      100.060791
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=6553849/16384, 
, buffer=409849/4096.[0m
[10/19 18:34:53]  --------------------------------------------------------------------------------
[10/19 18:34:53]  Iteration: 34 (0 solution, 33 counterexamples)
[10/19 18:34:58]  Generator returned sat in 4.461879 secs.
[10/19 18:34:58]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:34:59]  Improved gap from 0.0004166666666666667 to 100
[10/19 18:35:00]  Improved number of small numbers from 59 to 67 out of a max of 114
[10/19 18:35:00]  Verifer returned sat in 1.796723 secs.
[10/19 18:35:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2712.747559   -2712.753114  5089.128756 -2712.747559    0.121582    0.121582 -2712.753114    0.000000          -2712.753114    0.005556        0.005556
1   -2612.744543   -2612.753114  5089.128756 -2612.744543  100.008571  100.008571 -2612.753114    0.002857          -2612.753114    0.005714        0.005714
2   -2612.744543   -2612.753114  5089.128756 -2612.744543    0.002857    0.002857 -2612.753114    0.002857          -2612.755859    0.005714      -99.994286
3   -2412.741686   -2512.750244  5089.128756 -2412.741686  200.008571  200.008571 -2512.750244    0.005714          -2512.750244  100.002844        0.005714
4   -2412.741686   -2412.753114  5089.128756 -2412.741686    0.010000    0.010000 -2412.753114    0.005714          -2412.755859    0.005714      -99.994286
5   -2212.747400   -2212.755971  5089.128756 -2212.747400  200.000000  399.000000 -2212.755971    0.005714          -2212.755971    0.002857        0.000000
6   -1812.753114   -2112.753114  5089.128756 -1812.753114  399.997143  798.994286 -2112.753114  299.994286          -2112.753114    0.005714        0.005714
7   -1812.748829   -2112.743114  5089.128756 -1812.748829    0.010000    0.010000 -2112.743114  299.994286          -2112.743114    0.000000      -99.990000
8   -1512.738829   -2012.753114  5089.128756 -1512.738829  300.010000  599.020000 -2012.753114  400.008571          -2012.756104  100.005714        0.005714
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=140001/350, 
, buffer=1/175.[0m
[10/19 18:35:00]  --------------------------------------------------------------------------------
[10/19 18:35:00]  Iteration: 35 (0 solution, 34 counterexamples)
[10/19 18:35:06]  Generator returned sat in 5.342806 secs.
[10/19 18:35:07]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:35:14]  Improved gap from 0.0 to 4.6875
[10/19 18:35:16]  Improved number of small numbers from 34 to 45 out of a max of 114
[10/19 18:35:16]  Verifer returned sat in 9.157211 secs.
[10/19 18:35:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2374.931152   -2425.432638  5080.654286 -2374.931152    0.121338    0.121338 -2425.432638   0.000000          -2425.432638   50.501486        0.060695
1   -2274.991847   -2374.991847  5080.654286 -2274.991847  150.440791  150.440791 -2374.991847   0.000000          -2274.961670  100.000000        0.000000
2   -2174.991847   -2179.679347  5080.654286 -2174.991847  200.000000  200.000000 -2179.679347   0.000000          -2179.679347    4.687500        0.000000
3   -2174.991847   -2174.991847  5175.966786 -2174.991847    4.657104    4.657104 -2174.991847   0.000000          -2175.022217    0.000000       -4.687500
4   -2047.442899   -2170.273952  5175.966786 -2047.442899  127.548948  190.323422 -2170.273952  22.800657          -2170.273952  100.030396        0.060791
5   -2047.442899   -2070.304347  5271.279053 -2047.442899    0.010000    1.000000 -2070.304347  22.800657          -2065.586426    0.060791       -4.626942
6   -1992.811190   -2065.586452  5302.887443 -1992.811190   54.692500   81.038750 -2065.586452  22.800657          -2065.586452   49.974604      -18.386843
7   -1960.736847   -1997.225004  5389.199943 -1960.736847   82.048948  122.073422 -1997.225004  22.800657          -1983.507080   13.687500        0.000000
8   -1846.875399   -1983.507080  5389.199943 -1846.875399  127.548948  190.323422 -1983.507080  36.601313          -1983.507080  100.030367        0.060791
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=5652749/409600, 
, buffer=249/4096.[0m
[10/19 18:35:16]  --------------------------------------------------------------------------------
[10/19 18:35:16]  Iteration: 36 (0 solution, 35 counterexamples)
[10/19 18:35:20]  Generator returned sat in 3.517981 secs.
[10/19 18:35:20]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 18:35:32]  Improved gap from 0.0 to 4.6875
[10/19 18:35:33]  Improved number of small numbers from 43 to 61 out of a max of 114
[10/19 18:35:33]  Verifer returned sat in 12.715341 secs.
[10/19 18:35:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2917.220947   -3017.454674  4692.029286 -2917.220947    0.121094    0.121094 -3017.454674   0.000000          -2917.103760  100.233727        0.233727
1   -2917.220947   -2917.337646  4692.029286 -2917.220947    0.116943    0.116943 -2917.337646   0.000000          -2917.337646    0.116699      -99.766273
2   -2717.454590   -2717.454674  4692.029286 -2717.454590  199.883057  199.883057 -2717.454674   0.000000          -2717.454674    0.000084        0.000084
3   -2712.650230   -2717.337730  4787.224842 -2712.650230    4.804444    4.804444 -2717.337730   0.000000          -2717.337730    4.687500        0.000000
4   -2563.877035   -2712.299396  4787.224842 -2563.877035  153.460694  231.191042 -2712.299396  48.539306          -2712.299396   99.883056        0.233889
5   -2563.877035   -2612.650230  4882.537342 -2563.877035    0.010000    1.000000 -2612.650230  48.539306          -2607.845703    0.233889       -4.453611
6   -2510.703702   -2607.962730  4923.852527 -2510.703702   53.407222   81.110833 -2607.962730  48.539306          -2608.079590   48.719722       -9.965093
7   -2477.032313   -2549.277915  5000.145996 -2477.032313   82.391111  124.586667 -2549.277915  48.539306          -2549.394775   23.706296       -0.000235
8   -2377.032313   -2525.454590  5000.145996 -2377.032313  123.706296  186.559444 -2525.454590  48.539306          -2525.454590   99.882971       -0.000235
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=421/1800.[0m
[10/19 18:35:34]  --------------------------------------------------------------------------------
[10/19 18:35:34]  Iteration: 37 (0 solution, 36 counterexamples)
[10/19 18:36:03]  Generator returned sat in 28.997001 secs.
[10/19 18:36:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:36:23]  Improved gap from 0.0 to 4.6875
[10/19 18:36:24]  Improved number of small numbers from 59 to 69 out of a max of 114
[10/19 18:36:24]  Verifer returned sat in 20.406164 secs.
[10/19 18:36:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2917.329590   -2969.571063  4691.912342 -2917.329590    0.121094    0.121094 -2969.571063   0.000000          -2969.571063   52.241473        0.008140
1   -2817.325230   -2917.337730  4691.912342 -2817.325230  152.245833  152.245833 -2917.337730   0.004167          -2917.337891  100.008333        0.008333
2   -2717.321063   -2717.337730  4691.912342 -2717.321063  200.012500  200.012500 -2717.337730   0.008333          -2717.337730    0.008333        0.008333
3   -2717.321063   -2717.337730  4787.224842 -2717.321063    0.004167    0.004167 -2717.337730   0.008333          -2717.342041    0.008333       -4.679167
4   -2590.210646   -2712.650230  4787.224842 -2590.210646  127.118750  189.678125 -2712.650230  22.431250          -2612.645996  100.008333        0.008333
5   -2590.210646   -2612.646063  4882.533175 -2590.210646    1.000000    0.010000 -2612.646063  22.431250          -2612.646063    0.004167       -4.683333
6   -2536.368980   -2607.958563  4917.608175 -2536.368980   53.845833   79.768750 -2607.958563  22.431250          -2607.962891   49.158333      -15.766667
7   -2502.914813   -2543.033563  4999.920675 -2502.914813   82.612500  122.918750 -2543.033563  22.431250          -2525.342041   17.687500        0.000000
8   -2393.487730   -2525.342041  4999.920675 -2393.487730  127.114583  189.671875 -2525.342041  31.850000          -2525.342041  100.004311        0.008333
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=1507/160, 
, buffer=1/120.[0m
[10/19 18:36:24]  --------------------------------------------------------------------------------
[10/19 18:36:24]  Iteration: 38 (0 solution, 37 counterexamples)
[10/19 18:36:47]  Generator returned sat in 22.364391 secs.
[10/19 18:36:47]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 18:36:48]  Improved gap from 0.0302734375 to 100
[10/19 18:36:49]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 18:36:49]  Verifer returned sat in 1.194274 secs.
[10/19 18:36:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2817.281494   -2917.281250  4691.912354 -2817.281494     0.121094    0.121094 -2917.281250   0.000000          -2917.281250   99.999756       99.999756
1   -2817.281494   -2917.281250  4691.912354 -2817.281494    99.939453   99.939453 -2917.281250   0.000000          -2817.220947   99.999756       -0.000244
2   -2417.160400   -2791.281250  4691.912354 -2417.160400   500.120850  500.120850 -2791.281250   0.060303          -2791.281250  374.060547      300.060547
3   -2317.660400   -2717.281250  4691.912354 -2317.660400   473.560547  473.560547 -2717.281250   0.060303          -2717.341797  399.560547      299.560547
4   -2317.660400   -2517.281250  4691.912354 -2317.660400   201.000000  101.500000 -2517.281250   0.060303          -2517.281250  199.560547      199.560547
5   -2116.220947   -2517.281250  4691.912354 -2116.220947   401.000000  201.500000 -2517.281250   0.999756          -2117.160156  400.060547      300.060547
6   -2115.220947   -2317.720703  4691.912354 -2115.220947  1075.000000    1.000000 -2317.720703   0.999756          -2317.720703  201.500000      201.060547
7   -1916.160400   -2317.220947  4691.912354 -1916.160400   400.560547  201.280273 -2317.220947   1.060303          -2317.220947  400.000244      300.060547
8   -1915.160400   -2217.281250  4691.912354 -1915.160400  1000.181396    1.000000 -2217.281250   1.060303          -2217.341797  301.060547      201.060547
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1, 
, buffer=153631/512.[0m
[10/19 18:36:49]  --------------------------------------------------------------------------------
[10/19 18:36:49]  Iteration: 39 (0 solution, 38 counterexamples)
[10/19 18:36:54]  Generator returned sat in 4.346450 secs.
[10/19 18:36:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:36:54]  Improved gap from 0.0 to 0
[10/19 18:36:55]  Improved number of small numbers from 69 to 110 out of a max of 114
[10/19 18:36:55]  Verifer returned sat in 0.669331 secs.
[10/19 18:36:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2416.226074   -2517.228516  4392.925049 -2416.226074    0.120850    0.120850 -2517.228516   0.000000          -2517.228516  101.002441      101.002441
1   -2416.226074   -2517.228516  4392.925049 -2416.226074    0.002441    0.002441 -2517.228516   0.000000          -2417.226074  101.002441        1.002441
2   -2216.223389   -2317.228516  4392.925049 -2216.223389  301.005127  301.005127 -2317.228516   0.002441          -2317.228516  101.002686      101.002686
3   -2116.220947   -2217.228516  4392.925049 -2116.220947  201.005127  201.005127 -2217.228516   0.004883          -2217.228516  101.002686      101.002686
4   -2116.220947   -2117.228516  4392.925049 -2116.220947    1.000000    1.000000 -2117.228516   0.004883          -2117.228516    1.002686        1.002686
5   -2116.220947   -2117.228516  4491.922363 -2116.220947    1.000000    0.010000 -2117.228516   0.004883          -2116.223633    1.002686        0.000000
6   -2116.220947   -2116.225830  4591.922363 -2116.220947    1.000000    0.010000 -2116.225830   0.004883          -2116.223633    0.000000        0.000000
7   -2116.210947   -2116.225830  4691.912354 -2116.210947    1.000000    0.010000 -2116.225830   0.004883          -2116.228271    0.010000       -0.000010
8   -2116.200947   -2116.215820  4791.902344 -2116.200947    1.000000    0.010000 -2116.215820   0.004883          -2217.341797    0.009990       -0.000020
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=413707/4096.[0m
[10/19 18:36:55]  --------------------------------------------------------------------------------
[10/19 18:36:55]  Iteration: 40 (0 solution, 39 counterexamples)
[10/19 18:37:10]  Generator returned sat in 13.568458 secs.
[10/19 18:37:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 18:37:11]  Improved number of small numbers from 45 to 56 out of a max of 113
[10/19 18:37:11]  Verifer returned sat in 1.192787 secs.
[10/19 18:37:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3380.746826   -3420.895264  4791.902100 -3380.746826    0.120605    0.120605 -3420.895264   0.000000          -3420.895264   40.148438       40.147986
1   -3380.746826   -3380.777197  4791.902344 -3380.746826    0.030029    0.030029 -3380.777197   0.000000          -3380.777197    0.030371      -59.851770
2   -2920.804419   -3313.529517  4791.902344 -2920.804419  459.972778  459.972778 -3313.529517   0.030212          -3313.529517  392.694885      300.060425
3   -2820.774207   -3220.864844  4791.902344 -2820.774207  492.725098  492.725098 -3220.864844   0.060425          -3220.864844  400.030212      300.060425
4   -2820.764207   -3120.864844  4791.902344 -2820.764207  738.087646    0.010000 -3120.864844   0.060425          -3120.864844  300.040212      200.070425
5   -2620.804419   -3019.106543  4791.902344 -2620.804419  500.000000  751.000000 -3019.106543   0.060425          -3019.106543  398.241699      300.030212
6   -2620.804419   -2820.895056  4791.902344 -2620.804419  398.211487  598.317230 -2820.895056   0.060425          -2820.895056  200.030212      200.030212
7   -2420.743994   -2820.864844  4791.902344 -2420.743994  400.090637  601.135956 -2820.864844   0.090637          -2820.864844  400.030212      300.060425
8   -2420.733994   -2720.895056  4791.902344 -2420.733994  599.135956    0.010000 -2720.895056   0.090637          -2720.925049  300.070425      200.070425
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=495/16384, 
, buffer=2458095/8192.[0m
[10/19 18:37:11]  --------------------------------------------------------------------------------
[10/19 18:37:11]  Iteration: 41 (0 solution, 40 counterexamples)
[10/19 18:37:23]  Generator returned sat in 10.851485 secs.
[10/19 18:37:23]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:37:24]  Improved gap from 1.352386474609375 to 100
[10/19 18:37:24]  Improved number of small numbers from 69 to 114 out of a max of 114
[10/19 18:37:24]  Verifer returned sat in 0.739034 secs.
[10/19 18:37:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4800.442627   -5000.442627  4791.902344 -4800.442627    0.120605    0.120605 -5000.442627     0.000000          -4800.382080  200.000000      100.000000
1   -4800.382324   -4800.442627  4791.902344 -4800.382324  200.060303  200.060303 -4800.442627     0.000000          -4800.442627    0.060303        0.060303
2   -4800.382324   -4800.442627  4791.902344 -4800.382324    0.060059    0.060059 -4800.442627     0.000000          -4800.321777    0.060303      -99.939697
3   -4006.442627   -4700.382324  4791.902344 -4006.442627  794.000000  794.000000 -4700.382324   293.879395          -4700.382324  400.060303      300.120605
4   -3611.502930   -4600.382324  4791.902344 -3611.502930  795.000000  396.500000 -4600.382324   588.819092          -4600.382324  400.060303      300.120605
5   -3215.563232   -4500.442627  4791.902344 -3215.563232  796.000000  397.000000 -4500.442627   884.758789          -4500.502930  400.120605      300.120605
6   -2818.683838   -4400.382324  4791.902344 -2818.683838  797.000000  397.500000 -4400.382324  1181.638184          -4400.382324  400.060303      300.120605
7   -2420.744141   -4300.382324  4791.902344 -2420.744141  798.000000  398.000000 -4300.382324  1479.577881          -4300.382324  400.060303      300.120605
8   -2022.244141   -4200.382324  4791.902344 -2022.244141  799.000000  398.500000 -4200.382324  1778.077881          -4200.382324  400.060303      300.120605
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=1217801/1024, 
, buffer=614647/2048.[0m
[10/19 18:37:24]  --------------------------------------------------------------------------------
[10/19 18:37:24]  Iteration: 42 (0 solution, 41 counterexamples)
[10/19 18:37:27]  Generator returned sat in 1.594480 secs.
[10/19 18:37:27]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:37:28]  Improved number of small numbers from 31 to 52 out of a max of 113
[10/19 18:37:28]  Verifer returned sat in 1.156571 secs.
[10/19 18:37:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -6881.917969   -7081.917725  5492.073252 -6881.917969     0.120605     0.120605 -7081.917725     0.000000          -7081.917725  199.999756      100.060107
1   -6881.917969   -6981.978076  5492.073252 -6881.917969   199.999756   199.999756 -6981.978076     0.000000          -6982.038574  100.060107        0.060107
2   -6881.857471   -6881.917773  5492.073252 -6881.857471   100.120605   100.120605 -6881.917773     0.000000          -6881.917773    0.060303      -99.879395
3   -4506.234141   -6781.917969  5492.073252 -4506.234141  2375.683633  2375.683633 -6781.917969  1775.633330          -6781.917969  500.050498      400.110605
4   -4506.224141   -6681.917969  5492.073252 -4506.224141  2376.683633     0.010000 -6681.917969  1775.633330          -6681.917969  400.060498      300.120605
5   -3911.553232   -6581.917969  5492.073252 -3911.553232  1189.341816   594.670908 -6581.917969  2170.314238          -6581.917969  500.050498      400.110605
6   -3911.543232   -6381.978076  5492.073252 -3911.543232  1190.341816     0.010000 -6381.978076  2170.314238          -6381.978076  300.120605      300.120605
7   -3615.492930   -6381.917969  5492.073252 -3615.492930   596.170908   298.085454 -6381.917969  2266.374541          -6381.917969  500.050498      400.110605
8   -3615.482930   -6281.978076  5492.073252 -3615.482930   597.170908     0.010000 -6281.978076  2266.374541          -5881.797119  400.120605      300.120605
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=502519/1024, 
, buffer=20485663/51200.[0m
[10/19 18:37:28]  --------------------------------------------------------------------------------
[10/19 18:37:28]  Iteration: 43 (0 solution, 42 counterexamples)
[10/19 18:37:42]  Generator returned sat in 12.853869 secs.
[10/19 18:37:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:37:43]  Improved gap from 0.0 to 0
[10/19 18:37:44]  Improved number of small numbers from 40 to 72 out of a max of 114
[10/19 18:37:44]  Verifer returned sat in 1.443733 secs.
[10/19 18:37:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t    losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0   -4708.226807   -6981.978271  5492.073252 -4708.226807    0.120605    0.120605 -6981.978271  2272.760254          -6981.978271  0.991211        0.991016
1   -4708.226807   -6981.978076  5492.073252 -4708.226807    0.991211    0.991211 -6981.978076  2272.760254          -6982.038574  0.991016      -99.008984
2   -4508.225391   -6781.978271  5492.073252 -4508.225391  200.992432  200.992432 -6781.978271  2272.761436          -6781.978271  0.991445        0.991250
3   -4508.225391   -6781.978076  5591.080752 -4508.225391    0.001250    0.001250 -6781.978076  2272.761436          -6780.985352  0.991250       -0.001250
4   -4508.216641   -6780.985576  5691.073242 -4508.216641    1.000000    0.010000 -6780.985576  2272.761436          -6780.976807  0.007500       -0.000010
5   -4508.206641   -6780.976807  5791.063232 -4508.206641    1.000000    0.010000 -6780.976807  2272.761436          -6780.976807  0.008730       -0.000020
6   -4508.196641   -6780.967041  5891.053252 -4508.196641    1.000000    0.010000 -6780.967041  2272.761436          -6780.967041  0.008965        0.000000
7   -4508.186641   -6780.958076  5991.040771 -4508.186641    1.000000    0.010000 -6780.958076  2272.761436          -6780.959229  0.010000       -0.002480
8   -4508.176641   -6780.945557  6091.033203 -4508.176641    1.000000    0.010000 -6780.945557  2272.761436          -6780.945557  0.007480       -0.000049
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=793/800.[0m
[10/19 18:37:44]  --------------------------------------------------------------------------------
[10/19 18:37:44]  Iteration: 44 (0 solution, 43 counterexamples)
[10/19 18:37:47]  Generator returned sat in 2.362353 secs.
[10/19 18:37:47]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 18:37:51]  Improved number of small numbers from 33 to 49 out of a max of 113
[10/19 18:37:51]  Verifer returned sat in 3.627222 secs.
[10/19 18:37:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -6802.175781   -9172.941895  7583.042275 -6802.175781     0.120361     0.120361 -9172.941895  2270.766475          -9172.941895   99.999639        0.004805
1   -6802.175781   -9072.947061  7583.042275 -6802.175781     0.005127     0.005127 -9072.947061  2270.766475          -8972.942139    0.004805      -99.995195
2   -6702.175586   -8972.947061  7583.042275 -6702.175586   100.005000   100.005000 -8972.947061  2270.766475          -8872.941895    0.005000      -99.995000
3   -5108.220586   -8869.927061  7583.042275 -5108.220586  1593.960000  1593.960000 -8869.927061  3564.736475          -8869.927061  196.970000       99.990000
4   -5108.210586   -8672.947061  7583.042275 -5108.210586   797.980000     0.010000 -8672.947061  3564.736475          -8672.947061    0.000000        0.000000
5   -4508.220586   -8669.947021  7583.042275 -4508.220586   599.990000   900.985000 -8669.947021  3964.736475          -8669.947021  196.989961       99.990000
6   -4508.210586   -8572.942061  7583.042275 -4508.210586   300.995000     0.010000 -8572.942061  3964.736475          -8572.942061   99.995000        0.000000
7   -4308.215586   -8423.941895  7583.042275 -4308.215586   299.990000   450.985000 -8423.941895  3964.741475          -8423.941895  150.984834       99.990000
8   -4308.205586   -8372.947061  7583.042275 -4308.205586   150.995000     0.010000 -8372.947061  3964.741475          -8372.952148  100.000000        0.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=80001/200, 
, buffer=9999/100.[0m
[10/19 18:37:52]  --------------------------------------------------------------------------------
[10/19 18:37:52]  Iteration: 45 (0 solution, 44 counterexamples)
[10/19 18:38:07]  Generator returned sat in 14.718247 secs.
[10/19 18:38:07]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:38:07]  Improved gap from 0.0 to 0
[10/19 18:38:08]  Improved number of small numbers from 34 to 114 out of a max of 114
[10/19 18:38:08]  Verifer returned sat in 0.528235 secs.
[10/19 18:38:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5008.200928   -8775.016846  7185.112061 -5008.200928    0.120117  0.120117 -8775.016846  3666.776367          -8674.957031  100.039551        0.039551
1   -5008.200928   -8674.996826  7285.072021 -5008.200928    0.020020  0.020020 -8674.996826  3666.776367          -8674.996826    0.019531       -0.000488
2   -5007.160645   -8673.956787  7384.032227 -5007.160645    1.059814  1.059814 -8673.956787  3666.776367          -8673.956787    0.019775        0.000000
3   -5007.140625   -8673.916992  7483.807129 -5007.140625    0.039795  0.039795 -8673.916992  3666.776367          -8673.916992    0.000000       -0.205078
4   -5006.140625   -8673.711914  7583.012207 -5006.140625  101.099854  1.000000 -8673.711914  3666.776367          -8672.897217    0.794922        0.000000
5   -5005.650635   -8672.916992  7682.522217 -5005.650635    1.284912  1.000000 -8672.916992  3666.776367          -8672.407227    0.489990        0.000000
6   -5005.100830   -8672.406982  7781.972168 -5005.100830    1.039795  1.000000 -8672.406982  3666.776367          -8672.406982    0.529785       -0.000244
7   -5004.120605   -8671.876953  7880.932129 -5004.120605    1.510010  1.000000 -8671.876953  3666.776367          -8670.817139    0.979980       -0.060059
8   -5003.265625   -8670.836914  7980.137207 -5003.265625    1.834961  1.000000 -8670.836914  3666.776367          -8670.836914    0.794922        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=41/1024.[0m
[10/19 18:38:08]  --------------------------------------------------------------------------------
[10/19 18:38:08]  Iteration: 46 (0 solution, 45 counterexamples)
[10/19 18:38:26]  Generator returned sat in 17.278815 secs.
[10/19 18:38:26]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:38:27]  Improved gap from 0.0 to 100
[10/19 18:38:28]  Improved number of small numbers from 32 to 114 out of a max of 114
[10/19 18:38:28]  Verifer returned sat in 1.057260 secs.
[10/19 18:38:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5828.913086   -9765.280273  7580.109619 -5828.913086    0.120117    0.120117 -9765.280273  3862.054199          -9765.280273   74.312988       74.312988
1   -5803.226318   -9765.280273  7580.109619 -5803.226318   99.999756   99.999756 -9765.280273  3862.054199          -9765.280273   99.999756       -0.000244
2   -5628.852783   -9565.280273  7580.109619 -5628.852783  274.373291  274.373291 -9565.280273  3862.114258          -9565.280273   74.313232       74.313232
3   -5480.045898   -9502.966797  7580.109619 -5480.045898  223.120117  223.120117 -9502.966797  3910.921143          -9502.966797  111.999756       74.313232
4   -5369.985840   -9412.027100  7580.109619 -5369.985840  222.120117  110.060059 -9412.027100  3920.981201          -9412.027100  121.060059       74.313232
5   -5269.925781   -9265.280518  7580.109619 -5269.925781  221.120117  109.560059 -9265.280518  3921.041260          -9265.280518   74.313477       74.313232
6   -5160.865723   -9265.280273  7580.109619 -5160.865723  220.120117  109.060059 -9265.280273  3930.101318          -9265.340576  174.313232       74.313232
7   -5116.058838   -9065.280518  7580.109619 -5116.058838  219.120117  108.560059 -9065.280518  3930.101318          -9065.280518   19.120361       19.120117
8   -4960.805908   -9065.280273  7580.109619 -4960.805908  174.373291  347.746582 -9065.280273  3930.161133          -8890.906982  174.313232       74.313232
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=37601/4096, 
, buffer=304387/4096.[0m
[10/19 18:38:28]  --------------------------------------------------------------------------------
[10/19 18:38:28]  Iteration: 47 (0 solution, 46 counterexamples)
[10/19 18:38:36]  Generator returned sat in 7.083674 secs.
[10/19 18:38:36]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:38:38]  Improved gap from 1.06005859375 to 14.0625
[10/19 18:38:39]  Improved number of small numbers from 38 to 54 out of a max of 114
[10/19 18:38:39]  Verifer returned sat in 2.839804 secs.
[10/19 18:38:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -5828.863281   -9665.315518  7380.144863 -5828.863281    0.120117    0.120117 -9665.315518  3735.402432          -9565.290527  101.049805        1.049805
1   -5728.888184   -9465.315518  7380.144863 -5728.888184  201.024902  201.024902 -9465.315518  3735.402432          -9465.315518    1.024902        1.024902
2   -5628.838086   -9464.540518  7380.144863 -5628.838086  101.075000  101.075000 -9464.540518  3735.427432          -9464.540518  100.275000        1.050000
3   -5528.913086   -9265.315674  7380.144863 -5528.913086  200.200000  200.200000 -9265.315674  3735.427432          -9265.315674    0.975156        0.975000
4   -5428.813086   -9265.315518  7380.144863 -5428.813086  101.100000  100.100000 -9265.315518  3735.452432          -9165.290283  101.050000        1.050000
5   -5428.813086   -9165.290518  7443.132363 -5428.813086  100.100000   51.050000 -9165.290518  3735.452432          -9165.290518    1.025000      -35.962500
6   -5378.788086   -9128.303018  7529.069824 -5378.788086   51.050000   50.050000 -9128.303018  3735.452432          -9128.327881   14.062500       -0.000039
7   -5366.325586   -9114.215518  7614.982178 -5366.325586   26.525000   25.525000 -9114.215518  3735.452432          -9114.215518   12.437500       -1.625186
8   -5364.500586   -9100.128174  7700.894775 -5364.500586   14.262500   13.262500 -9100.128174  3735.452432          -9100.128174    0.175156      -13.887588
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=21/20.[0m
[10/19 18:38:39]  --------------------------------------------------------------------------------
[10/19 18:38:39]  Iteration: 48 (0 solution, 47 counterexamples)
[10/19 18:38:50]  Generator returned sat in 9.948473 secs.
[10/19 18:38:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:38:51]  Improved gap from 0.0 to 100
[10/19 18:38:52]  Improved number of small numbers from 33 to 42 out of a max of 114
[10/19 18:38:52]  Verifer returned sat in 1.656205 secs.
[10/19 18:38:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t   service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -6422.799561  -10259.213018  7974.042363 -6422.799561     0.120117    0.120117 -10259.213018  3735.402432         -10159.211914  101.011025        1.011025
1   -6422.799561  -10158.203018  7974.042363 -6422.799561     0.001465    0.001465 -10158.203018  3735.402432         -10158.203018    0.001025      -98.988975
2   -6323.810586  -10059.213018  7974.042363 -6323.810586    98.990000   98.990000 -10059.213018  3735.402432         -10059.213135    0.000000     -100.000000
3   -5822.814336   -9959.211768  7974.042363 -5822.814336   500.996250  500.996250  -9959.211768  3735.402432          -9959.211768  400.995000      300.996250
4   -5822.814336   -9759.213018  7974.042363 -5822.814336   301.001250  149.500625  -9759.213018  3735.402432          -9759.213018  200.996250      200.996250
5   -5623.820586   -9708.962705  7974.042363 -5623.820586   399.990000  198.995000  -9708.962705  3735.402432          -9708.962705  349.739688      299.990000
6   -5622.309961   -9559.213018  7974.042363 -5622.309961   351.250313  174.625156  -9559.213018  3735.402432          -9559.213018  201.500625      201.500625
7   -5422.811836   -9559.211768  7974.042363 -5422.811836   400.998750  199.499375  -9559.211768  3735.403682          -9559.211768  400.996250      300.997500
8   -5422.801836   -9459.211670  7974.042363 -5422.801836  1000.998750    0.010000  -9459.211670  3735.403682          -9459.211670  301.006152      201.007500
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/800, 
, buffer=120399/400.[0m
[10/19 18:38:52]  --------------------------------------------------------------------------------
[10/19 18:38:52]  Iteration: 49 (0 solution, 48 counterexamples)
[10/19 18:38:56]  Generator returned sat in 2.417745 secs.
[10/19 18:38:56]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:38:57]  Improved number of small numbers from 33 to 113 out of a max of 113
[10/19 18:38:57]  Verifer returned sat in 0.557557 secs.
[10/19 18:38:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t   service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -6537.709473  -10401.856934  8187.940918 -6537.709473    0.119873    0.119873 -10401.856934  3735.402344         -10401.856934  128.745117       99.999756
1   -6537.709473  -10373.109375  8187.941162 -6537.709473    0.002686    0.002686 -10373.109375  3735.402344         -10373.109375   99.997559        0.000000
2   -6537.709473  -10273.111816  8187.941162 -6537.709473   99.997314   99.997314 -10273.111816  3735.402344         -10273.114502    0.000000     -100.000000
3   -6036.714355  -10073.111816  8187.941162 -6036.714355  500.995117  500.995117 -10073.111816  3735.402344         -10073.111816  300.995117      300.995117
4   -6007.964355  -10001.859375  8187.941162 -6007.964355  329.745117  163.872559 -10001.859375  3735.402344         -10001.859375  258.492676      229.745117
5   -5894.207031   -9873.111816  8187.941162 -5894.207031  372.250000  185.125000  -9873.111816  3735.402344          -9873.111816  243.502441      243.502441
6   -5736.709473   -9872.116943  8187.941162 -5736.709473  401.000000  199.500000  -9872.116943  3735.405029          -9872.116943  400.002441      300.997314
7   -5736.709473   -9673.111816  8187.941162 -5736.709473  200.500000    0.010000  -9673.111816  3735.405029          -9673.111816  200.997314      200.997314
8   -5607.959229   -9673.109375  8187.941162 -5607.959229  329.747559  163.873779  -9673.109375  3735.405029          -9673.109375  329.745117      229.747559
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=11/4096, 
, buffer=1232885/4096.[0m
[10/19 18:38:57]  --------------------------------------------------------------------------------
[10/19 18:38:57]  Iteration: 50 (0 solution, 49 counterexamples)
[10/19 18:39:43]  Generator returned sat in 45.158388 secs.
[10/19 18:39:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:39:47]  Improved gap from 0.0 to 100
[10/19 18:39:48]  Improved number of small numbers from 34 to 41 out of a max of 114
[10/19 18:39:48]  Verifer returned sat in 4.931266 secs.
[10/19 18:39:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t   service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -6960.460205  -10195.430820  7910.260166 -6960.460205    0.119873    0.119873 -10195.430820  3134.968154         -10195.432129  100.002461        0.002461
1   -6860.458916  -10095.429570  7910.260166 -6860.458916  200.003750  200.003750 -10095.429570  3134.969404         -10095.429570  100.001250        0.002500
2   -6760.460166   -9995.429570  7910.260166 -6760.460166  200.000000  200.000000  -9995.429570  3134.969404          -9995.429570  100.000000        0.001250
3   -6760.452666   -9895.430820  7910.260166 -6760.452666  100.007500  100.007500  -9895.430820  3134.969404          -9895.430908    0.008750      -99.991250
4   -6560.457666   -9695.430820  7910.260166 -6560.457666  200.003750  399.007500  -9695.430820  3134.970654          -9695.430820    0.002500        0.002500
5   -6560.447666   -9695.430820  7910.260166 -6560.447666  598.998125    0.010000  -9695.430820  3134.970654          -9695.432129    0.012500      -99.987500
6   -6110.961729   -9560.753737  7910.260166 -6110.961729  449.498438  897.996875  -9560.753737  3384.466592          -9560.753737   65.325417        0.002500
7   -6110.951729   -9495.430820  7910.260166 -6110.951729  501.015625    0.010000  -9495.430820  3384.466592          -9495.430908    0.012500      -99.987500
8   -5760.456416   -9395.430820  7910.260166 -5760.456416  350.507812  700.015625  -9395.430820  3534.971904          -9395.432129  100.002500        0.002500
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=320001/800, 
, buffer=1/400.[0m
[10/19 18:39:49]  --------------------------------------------------------------------------------
[10/19 18:39:49]  Iteration: 51 (0 solution, 50 counterexamples)
[10/19 18:40:01]  Generator returned sat in 11.295016 secs.
[10/19 18:40:01]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:40:08]  Improved gap from 1.0238095238095237 to 100
[10/19 18:40:09]  Improved number of small numbers from 30 to 38 out of a max of 114
[10/19 18:40:09]  Verifer returned sat in 8.048869 secs.
[10/19 18:40:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t   service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9895.490967  -10195.430820  7910.260166 -9895.490967    0.119873    0.119873 -10195.430820   0.000000         -10095.400635  299.939854      199.939854
1   -9895.460789  -10095.400852  7910.260166 -9895.460789  299.970032  299.970032 -10095.400852   0.000000         -10095.400852  199.940063       99.970032
2   -9895.430820   -9995.430820  7910.260166 -9895.430820  199.970032  199.970032  -9995.430820   0.000000          -9995.430908  100.000000        0.000000
3   -9495.340916   -9798.221042  7910.260166 -9495.340916  500.089905  500.089905  -9798.221042   0.029968          -9798.221042  302.850159      300.059937
4   -9494.340916   -9695.430820  7910.260166 -9494.340916  398.209778    1.000000  -9695.430820   0.029968          -9695.430820  201.059937      201.059937
5   -9295.310947   -9695.400852  7910.260166 -9295.310947  400.089905  799.179810  -9695.400852   0.059937          -9695.400852  400.029968      300.059937
6   -9295.310947   -9501.011265  7910.260166 -9295.310947  301.029968    1.000000  -9501.011265   0.059937          -9501.011265  205.640381      200.059937
7   -9200.831455   -9395.430820  7910.260166 -9200.831455  300.119873  599.239746  -9395.430820   0.059937          -9395.430820  194.539429      194.539429
8   -9094.310947   -9395.400879  7910.260166 -9094.310947  301.059937  601.119873  -9395.400879   0.059937          -9395.400879  301.029995      201.059937
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=491/16384, 
, buffer=2458091/8192.[0m
[10/19 18:40:10]  --------------------------------------------------------------------------------
[10/19 18:40:10]  Iteration: 52 (0 solution, 51 counterexamples)
[10/19 18:40:29]  Generator returned sat in 18.521154 secs.
[10/19 18:40:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:40:30]  Improved gap from 0.0009090909090909091 to 100
[10/19 18:40:30]  Improved number of small numbers from 39 to 114 out of a max of 114
[10/19 18:40:30]  Verifer returned sat in 0.682319 secs.
[10/19 18:40:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9896.400635   -9996.341064  7711.170166 -9896.400635    0.119873    0.119873 -9996.341064    0.000000          -9896.340820   99.940430       -0.059570
1   -9796.341064   -9796.341064  7711.170166 -9796.341064  200.000000  200.000000 -9796.341064    0.000000          -9796.341064    0.000000        0.000000
2   -9796.281006   -9796.341064  7711.170166 -9796.281006    0.060059    0.060059 -9796.341064    0.000000          -9796.341064    0.060059      -99.939941
3   -9523.434570   -9650.341064  7711.170166 -9523.434570  272.906494  272.906494 -9650.341064    0.060059          -9650.341064  126.846436       72.846436
4   -9522.434570   -9595.947754  7711.170166 -9522.434570  692.000000    1.000000 -9595.947754    0.060059          -9595.947754   73.453125      -26.153564
5   -9395.494385   -9396.614502  7711.170166 -9395.494385  200.393311  199.393311 -9396.614502    0.060059          -9396.614502    1.060059        0.786621
6   -8996.827881   -9396.341064  7711.170166 -8996.827881  399.726562  398.726562 -9396.341064  226.666748          -9296.281006  172.846436       72.846436
7   -8995.827881   -9222.494629  7711.170166 -8995.827881  508.000000    1.000000 -9222.494629  226.666748          -9222.494629    0.000000      -26.153564
8   -8623.374756   -9196.281006  7711.170166 -8623.374756  373.453125  372.453125 -9196.281006  400.119873          -9196.281006  172.786377       72.846436
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638645/4096, 
, buffer=298379/4096.[0m
[10/19 18:40:30]  --------------------------------------------------------------------------------
[10/19 18:40:30]  Iteration: 53 (0 solution, 52 counterexamples)
[10/19 18:40:37]  Generator returned sat in 5.718487 secs.
[10/19 18:40:37]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:41:06]  Improved gap from 0.0 to 28.125
[10/19 18:41:07]  Improved number of small numbers from 53 to 64 out of a max of 114
[10/19 18:41:07]  Verifer returned sat in 29.759287 secs.
[10/19 18:41:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -9608.841064   -9658.980907  7711.170166 -9608.841064    0.119873    0.119873 -9658.980907        0.0          -9658.980907  50.139843        0.059937
1   -9508.871033   -9508.901001  7711.170166 -9508.871033  150.109874  150.109874 -9508.901001        0.0          -9508.901001   0.029968        0.029968
2   -9480.776001   -9508.901001  7783.045166 -9480.776001   28.125000   28.125000 -9508.901001        0.0          -9508.930908  28.125000        0.000000
3   -9480.776001   -9480.776001  7854.919922 -9480.776001    0.029968    0.029968 -9480.776001        0.0          -9480.805908   0.000000      -28.125244
4   -9435.717282   -9452.621033  7926.765198 -9435.717282   90.117437   45.058719 -9452.621033        0.0          -9452.621033  16.903750      -11.221250
5   -9398.617931   -9424.496033  7998.640137 -9398.617931   74.198703   37.099351 -9424.496033        0.0          -9396.341309  25.878102       -2.246959
6   -9358.467013   -9396.341064  8060.736178 -9358.467013   80.301835   40.150918 -9396.341064        0.0          -9396.341064  37.874051        0.000000
7   -9316.782820   -9358.467013  8119.051758 -9316.782820   83.368386   41.684193 -9358.467013        0.0          -9358.497070  41.684193       -0.000227
8   -9271.902219   -9288.805908  8162.949951 -9271.902219   89.761203   44.880601 -9288.805908        0.0          -9288.805908  16.903689      -11.221433
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=123/2048.[0m
[10/19 18:41:07]  --------------------------------------------------------------------------------
[10/19 18:41:07]  Iteration: 54 (0 solution, 53 counterexamples)
[10/19 18:41:27]  Generator returned sat in 18.386639 secs.
[10/19 18:41:27]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:41:27]  Improved gap from 98.119873046875 to 100
[10/19 18:41:28]  Improved number of small numbers from 44 to 65 out of a max of 114
[10/19 18:41:28]  Verifer returned sat in 1.274630 secs.
[10/19 18:41:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9835.922119   -9838.221771  8038.166016 -9835.922119    0.119873    0.119873 -9838.221771   0.000000          -9838.221771    2.299652        1.119843
1   -9835.922119   -9837.041962  8038.166016 -9835.922119    0.060059    0.060059 -9837.041962   0.000000          -9837.101807    1.119843      -98.880157
2   -9736.922089   -9736.982178  8038.166016 -9736.922089  100.119873  100.119873 -9736.982178   0.000000          -9736.982178    0.060089      -99.880127
3   -9537.041992   -9637.041962  8038.166016 -9537.041992  199.940186  199.940186 -9637.041962   0.000000          -9637.041992   99.999969       -0.000031
4   -9435.862152   -9438.221771  8038.166016 -9435.862152  201.179810  401.359619 -9438.221771   0.059937          -9438.221771    2.299683        1.119873
5   -9335.657104   -9338.742432  8038.166016 -9335.657104  198.410095  100.205048 -9338.742432   0.264984          -9338.742432    2.820343        1.119873
6   -9235.597168   -9314.898114  8038.166016 -9235.597168  198.119873  100.059937 -9314.898114   0.324921          -9314.898114   78.976025        1.119873
7   -9154.561206   -9237.041962  8038.166016 -9154.561206  160.071924   81.035962 -9237.041962   0.324921          -9237.101807   82.155835      -17.844165
8   -9035.537231   -9137.041962  8038.166016 -9035.537231  201.179810  401.359619 -9137.041962   0.384857          -9035.862305  101.119873        1.119873
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=10647/32768, 
, buffer=4587/4096.[0m
[10/19 18:41:29]  --------------------------------------------------------------------------------
[10/19 18:41:29]  Iteration: 55 (0 solution, 54 counterexamples)
[10/19 18:42:07]  Generator returned sat in 37.596142 secs.
[10/19 18:42:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:42:09]  Improved gap from 2.005 to 96.875
[10/19 18:42:10]  Improved number of small numbers from 68 to 77 out of a max of 114
[10/19 18:42:10]  Verifer returned sat in 2.204536 secs.
[10/19 18:42:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9832.802002   -9835.806962  8038.041016 -9832.802002    0.119629    0.119629 -9835.806962     0.0000          -9835.806962    3.004960         2.00496
1   -9732.799462   -9736.934462  8038.041016 -9732.799462  103.007500  103.007500 -9736.934462     0.0025          -9736.934462    4.132500         2.00500
2   -9634.929462   -9734.806962  8038.166016 -9634.929462  102.002500  102.002500 -9734.806962     0.0025          -9734.807129   99.875000         0.00000
3   -9634.929462   -9634.931962  8038.166016 -9634.929462    0.002500    0.002500 -9634.931962     0.0025          -9634.934570    0.000000      -100.00000
4   -9435.054462   -9534.931962  8038.166016 -9435.054462  200.875000  199.875000 -9534.931962     0.0025          -9434.929443   99.875000        -0.12500
5   -9332.926962   -9334.931962  8038.166016 -9332.926962  202.002500  201.002500 -9334.931962     0.0025          -9334.931962    2.002500         2.00250
6   -8935.054462   -9334.931962  8038.166016 -8935.054462  399.875000  398.875000 -9334.931962   297.8725          -9334.932129  102.005000         2.00500
7   -8935.044462   -9233.919462  8040.278516 -8935.044462  950.750000    0.010000 -9233.919462   297.8725          -9233.919462    1.002500       -95.87250
8   -8635.034462   -9137.041992  8040.278516 -8635.034462  301.012500  300.012500 -9137.041992   400.0050          -9137.041992  102.002531         2.00500
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
, buffer=401/200.[0m
[10/19 18:42:10]  --------------------------------------------------------------------------------
[10/19 18:42:10]  Iteration: 56 (0 solution, 55 counterexamples)
[10/19 18:42:16]  Generator returned sat in 4.205421 secs.
[10/19 18:42:16]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:42:17]  Improved gap from 65.88992767333984 to 98.4375
[10/19 18:42:17]  Improved number of small numbers from 71 to 114 out of a max of 114
[10/19 18:42:17]  Verifer returned sat in 1.586857 secs.
[10/19 18:42:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9782.192871   -9882.232666  7835.451172 -9782.192871    0.119385    0.119385 -9882.232666    0.000000          -9882.232666  100.039795        0.059814
1   -9682.212646   -9683.654541  7835.451172 -9682.212646  200.020020  200.020020 -9683.654541    0.000000          -9683.654541    1.441895        0.040039
2   -9682.212646   -9682.232666  7835.873291 -9682.212646    1.441895    1.441895 -9682.232666    0.000000          -9682.232666    0.020020      -99.537842
3   -9482.594238   -9582.674805  7835.873291 -9482.594238  199.638428  199.638428 -9582.674805    0.020264          -9482.654541  100.060303        0.060303
4   -9482.594238   -9482.674805  7835.873291 -9482.594238    1.000000    1.000000 -9482.674805    0.020264          -9482.695068    0.060303      -99.939697
5   -9282.614502   -9282.674805  7835.873291 -9282.614502  200.979736  199.979736 -9282.674805    0.020264          -9282.674805    0.040039        0.040039
6   -8884.056641   -9182.694824  7835.873291 -8884.056641  399.557861  398.557861 -9182.694824  298.557861          -9182.694824    0.080322        0.060303
7   -8883.136963   -9182.674805  7837.435791 -8883.136963    1.000000    1.000000 -9182.674805  298.557861          -9084.217285    0.979980      -97.457520
8   -8584.136963   -8984.237549  7837.435791 -8584.136963  300.000000  299.000000 -8984.237549  400.040039          -8984.237549    0.060547        0.060303
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638481/4096, 
, buffer=247/4096.[0m
[10/19 18:42:18]  --------------------------------------------------------------------------------
[10/19 18:42:18]  Iteration: 57 (0 solution, 56 counterexamples)
[10/19 18:42:44]  Generator returned sat in 24.907727 secs.
[10/19 18:42:44]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 18:42:46]  Improved number of small numbers from 24 to 31 out of a max of 113
[10/19 18:42:46]  Verifer returned sat in 1.779055 secs.
[10/19 18:42:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9284.177002   -9322.595078  7353.897873 -9284.177002    0.119385    0.119385 -9322.595078   0.000000          -9322.595078   38.418076       16.522385
1   -9200.699387   -9300.699387  7353.897873 -9200.699387  121.895691  121.895691 -9300.699387   0.000000          -9200.669678  100.000000        0.000000
2   -9084.147079   -9200.669540  7353.897873 -9084.147079  216.552307  216.552307 -9200.669540   0.029846          -9200.669540  116.492615       16.522461
3   -8984.117233   -9097.669540  7353.897873 -8984.117233  216.522461  216.522461 -9097.669540   0.059692          -9097.669540  113.492615       16.522461
4   -8984.117233   -8994.818771  7353.897873 -8984.117233  113.462769   57.731384 -8994.818771   0.059692          -8994.818771   10.641846      -83.477539
5   -8784.087387   -8800.699387  7353.897873 -8784.087387  210.671692  211.671692 -8800.699387   0.089539          -8800.699387   16.522461       16.522461
6   -8682.594849   -8700.699387  7353.897873 -8682.594849  200.985077  101.492538 -8700.699387   1.582077          -8700.699387   16.522461       16.522461
7   -8581.852310   -8600.699387  7353.897873 -8581.852310  199.485077  100.742538 -8600.699387   2.324615          -8600.699387   16.522461       16.522461
8   -8481.822464   -8600.669678  7353.897873 -8481.822464  198.059692  100.029846 -8600.669678   2.354462          -8600.669678  116.492752       16.522461
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=75195/32768, 
, buffer=16919/1024.[0m
[10/19 18:42:46]  --------------------------------------------------------------------------------
[10/19 18:42:46]  Iteration: 58 (0 solution, 57 counterexamples)
[10/19 18:43:04]  Generator returned sat in 16.277448 secs.
[10/19 18:43:04]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:43:07]  Improved gap from 0.0 to 43.75
[10/19 18:43:08]  Improved number of small numbers from 41 to 57 out of a max of 114
[10/19 18:43:08]  Verifer returned sat in 4.394045 secs.
[10/19 18:43:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -9017.869629   -9017.869711  7197.202881 -9017.869629    0.119385    0.119385 -9017.869711        0.0          -9017.869711   0.000082       -0.000049
1   -9017.839865   -9017.839865  7245.154550 -9017.839865    0.029846    0.029846 -9017.839865        0.0          -9017.839865   0.000000      -52.018616
2   -8922.071249   -8965.821249  7301.404541 -8922.071249   95.768616   95.768616 -8965.821249        0.0          -8965.851074  43.750000       -0.000009
3   -8822.011557   -8826.081772  7301.404541 -8822.011557  143.809692  143.809692 -8826.081772        0.0          -8826.081772   4.070215        0.059683
4   -8774.564572   -8818.314572  7353.897705 -8774.564572   96.893970   47.446985 -8818.314572        0.0          -8818.314572  43.750000       -0.000168
5   -8725.183249   -8774.534726  7401.004395 -8725.183249  100.762646   49.381323 -8774.534726        0.0          -8774.534726  49.351477       -3.512155
6   -8677.891464   -8721.641464  7457.224765 -8677.891464   96.643262   47.321631 -8721.641464        0.0          -8721.641464  43.750000        0.000000
7   -8668.421310   -8677.891464  7513.474609 -8668.421310   53.220154   25.610077 -8677.891464        0.0          -8677.921143   9.470154      -34.280002
8   -8633.815533   -8634.111816  7569.695068 -8633.815533   71.211554   34.605777 -8634.111816        0.0          -8634.111816   0.296283      -43.453766
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=245/4096.[0m
[10/19 18:43:08]  --------------------------------------------------------------------------------
[10/19 18:43:08]  Iteration: 59 (0 solution, 58 counterexamples)
[10/19 18:43:40]  Generator returned sat in 30.372826 secs.
[10/19 18:43:40]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:43:44]  Improved gap from 0.0025 to 100
[10/19 18:43:45]  Improved number of small numbers from 59 to 64 out of a max of 114
[10/19 18:43:45]  Verifer returned sat in 4.835195 secs.
[10/19 18:43:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8874.532227   -9274.534726  6897.359541 -8874.532227    0.119141    0.119141 -9274.534726     0.0000          -9274.534726  400.002499      300.004999
1   -8774.529726   -9174.534726  6897.359541 -8774.529726  500.005000  500.005000 -9174.534726     0.0025          -9174.534726  400.002500      300.005000
2   -8674.532226   -9074.534726  6897.359541 -8674.532226  500.000000  500.000000 -9074.534726     0.0025          -9074.534726  400.000000      300.002500
3   -8574.527226   -8875.517226  6897.359541 -8574.527226  500.005000  500.005000 -8875.517226     0.0050          -8875.517226  300.985000      300.005000
4   -8574.517226   -8774.537226  6897.359541 -8574.517226  398.017500    0.010000 -8774.537226     0.0050          -8774.537226  200.015000      200.015000
5   -8374.524726   -8774.534726  6897.359541 -8374.524726  400.007500  599.011250 -8774.534726     0.0075          -8774.534726  400.002500      300.005000
6   -8374.524726   -8574.537226  6897.359541 -8374.524726  299.000000    0.010000 -8574.537226     0.0075          -8574.537226  200.005000      200.005000
7   -8273.539726   -8475.523893  6897.359541 -8273.539726  300.990000  450.485000 -8475.523893     0.0075          -8475.523893  201.976667      200.990000
8   -8174.514726   -8474.534668  6897.359541 -8174.514726  301.001667  450.502500 -8474.534668     0.0075          -8474.534668  300.012442      200.015000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/400, 
, buffer=60001/200.[0m
[10/19 18:43:45]  --------------------------------------------------------------------------------
[10/19 18:43:45]  Iteration: 60 (0 solution, 59 counterexamples)
[10/19 18:44:01]  Generator returned sat in 14.264844 secs.
[10/19 18:44:01]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:44:04]  Improved gap from 0.0 to 18.75
[10/19 18:44:04]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 18:44:04]  Verifer returned sat in 3.094717 secs.
[10/19 18:44:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8430.005127   -8430.064941  7068.683105 -8430.005127    0.119141    0.119141 -8430.064941    0.000000          -8430.064941    0.059814        0.000000
1   -8430.005127   -8430.005127  7068.683105 -8430.005127    0.059570    0.059570 -8430.005127    0.000000          -8429.945801    0.000000     -100.000000
2   -8230.005371   -8330.005127  7068.683105 -8230.005371  199.999756  199.999756 -8330.005127    0.000000          -8229.945557   99.999756       -0.000244
3   -7778.098877   -8130.005371  7068.683105 -7778.098877  551.906250  551.906250 -8130.005371  297.644531          -8130.005371   54.261963       54.261719
4   -7557.407715   -8129.945557  7068.683105 -7557.407715  274.953125  550.906250 -8129.945557  418.335693          -8129.945557  154.202148       54.261719
5   -7557.407715   -8026.172119  7114.421387 -7557.407715  136.476562  273.953125 -8026.172119  418.335693          -8026.172119   50.428711        0.000000
6   -7538.598145   -7975.683838  7195.611816 -7538.598145   69.238281   68.238281 -7975.683838  418.335693          -7975.683838   18.750000        0.000000
7   -7521.729004   -7956.874268  7276.802246 -7521.729004   35.619141   34.619141 -7956.874268  418.335693          -7956.874268   16.809570       -1.940430
8   -7519.729004   -7938.064697  7276.802246 -7519.729004   18.809570   17.809570 -7938.064697  418.335693          -7938.064697    0.000000      -99.940430
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=13891/256.[0m
[10/19 18:44:05]  --------------------------------------------------------------------------------
[10/19 18:44:05]  Iteration: 61 (0 solution, 60 counterexamples)
[10/19 18:44:48]  Generator returned sat in 42.642795 secs.
[10/19 18:44:49]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:44:53]  Improved gap from 0.0 to 21.875
[10/19 18:44:54]  Improved number of small numbers from 58 to 90 out of a max of 114
[10/19 18:44:54]  Verifer returned sat in 5.132604 secs.
[10/19 18:44:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8229.025879   -8250.900684  6967.069453 -8229.025879    0.118896    0.118896 -8250.900684    0.00000          -8250.900684   21.874805       21.874805
1   -8229.025879   -8250.900684  7045.194453 -8229.025879    0.059570    0.059570 -8250.900684    0.00000          -8228.966309   21.874805       -0.000195
2   -8098.322187   -8229.025684  7045.194453 -8098.322187  152.578496  152.578496 -8229.025684    0.00000          -8229.085449  130.703496       30.703496
3   -7998.203047   -8036.265267  7045.194453 -7998.203047  230.822637  230.822637 -8036.265267    0.05957          -8036.265267   38.002650       30.763066
4   -7998.193047   -8028.966309  7114.421143 -7998.193047  320.953125    0.010000 -8028.966309    0.05957          -8028.966309   30.713691       -0.000244
5   -7867.430176   -7948.057373  7114.421143 -7867.430176  161.476562  160.476562 -7948.057373    0.05957          -7948.057373   80.567627       30.762627
6   -7866.259521   -7898.192871  7182.487549 -7866.259521   81.738281   80.738281 -7898.192871    0.05957          -7898.192871   31.873779       -0.000313
7   -7856.264160   -7866.259277  7260.552979 -7856.264160   41.869141   40.869141 -7866.259277    0.05957          -7866.259277    9.935547      -11.939521
8   -7844.265137   -7844.324951  7260.553223 -7844.265137   21.934570   20.934570 -7844.324951    0.05957          -7844.324951    0.000244      -99.940254
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1575069/51200.[0m
[10/19 18:44:54]  --------------------------------------------------------------------------------
[10/19 18:44:54]  Iteration: 62 (0 solution, 61 counterexamples)
[10/19 18:45:02]  Generator returned sat in 6.253956 secs.
[10/19 18:45:02]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:45:06]  Improved gap from 1.02972412109375 to 21.875
[10/19 18:45:07]  Improved number of small numbers from 28 to 49 out of a max of 114
[10/19 18:45:07]  Verifer returned sat in 5.316144 secs.
[10/19 18:45:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8250.226807   -8250.256392  7118.641596 -8250.226807    0.118652    0.118652 -8250.256392   0.000000          -8250.256392    0.029585        0.029585
1   -8250.196943   -8250.256392  7196.766596 -8250.196943    0.059448    0.059448 -8250.256392   0.000000          -8228.351562    0.059448      -21.815552
2   -8098.232771   -8128.381392  7196.766596 -8098.232771  152.023621  152.023621 -8128.381392   0.029724          -8128.381392   30.118896       30.118896
3   -7998.203047   -8035.939334  7196.766596 -7998.203047  130.148621  130.148621 -8035.939334   0.059448          -8035.939334   37.676839       30.118896
4   -7997.203047   -8028.381392  7265.647461 -7997.203047  320.475586    1.000000 -8028.381392   0.059448          -7997.232910   31.118896       -0.000239
5   -7867.084150   -7997.232666  7265.647461 -7867.084150  161.237793  160.237793 -7997.232666   0.059448          -7997.232666  130.089067       30.118657
6   -7867.084150   -7897.232666  7334.288574 -7867.084150   81.618896   80.618896 -7897.232666   0.059448          -7897.232666   30.089067       -1.240229
7   -7855.363770   -7865.873783  7412.383789 -7855.363770   41.809448   40.809448 -7865.873783   0.059448          -7865.873783   10.450565      -11.424634
8   -7843.909610   -7843.969238  7412.384033 -7843.909610   21.904724   20.904724 -7843.969238   0.059448          -7843.969238    0.000180      -99.970230
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=123367/4096.[0m
[10/19 18:45:08]  --------------------------------------------------------------------------------
[10/19 18:45:08]  Iteration: 63 (0 solution, 62 counterexamples)
[10/19 18:45:22]  Generator returned sat in 13.294186 secs.
[10/19 18:45:22]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 18:45:26]  Improved gap from 0.0 to 18.75
[10/19 18:45:26]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 18:45:26]  Verifer returned sat in 4.060661 secs.
[10/19 18:45:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8494.634277   -8494.665527  7196.766602 -8494.634277    0.118652    0.118652 -8494.665527   0.000000          -8394.634521    0.031250      -99.968750
1   -8250.196777   -8394.634277  7196.766602 -8250.196777  244.468750  244.468750 -8394.634277   0.031250          -8394.634277  144.406250       44.437500
2   -8196.509277   -8196.572021  7196.766602 -8196.509277  198.093750  198.093750 -8196.572021   0.031250          -8196.572021    0.031494       -1.875000
3   -8050.165771   -8094.665527  7196.766602 -8050.165771  146.375000  146.375000 -8094.665527   0.062256          -8094.665527   44.437500       44.437500
4   -7949.228271   -8094.634277  7196.766602 -7949.228271  145.375000  144.375000 -8094.634277   0.999756          -8094.634277  144.406250       44.437500
5   -7949.228271   -7994.665527  7252.329102 -7949.228271  144.375000  143.375000 -7994.665527   0.999756          -7994.696777   44.437500        0.000000
6   -7920.478271   -7940.290527  7323.578857 -7920.478271   73.187500   37.593750 -7940.290527   0.999756          -7940.290527   18.812500       -0.000244
7   -7901.697021   -7921.446777  7404.797852 -7901.697021   37.593750   19.796875 -7921.446777   0.999756          -7921.446777   18.750000        0.000000
8   -7900.650146   -7902.696777  7404.797852 -7900.650146   19.796875   10.898438 -7902.696777   0.999756          -7902.697021    1.046875      -98.953125
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=711/16.[0m
[10/19 18:45:27]  --------------------------------------------------------------------------------
[10/19 18:45:27]  Iteration: 64 (0 solution, 63 counterexamples)
[10/19 18:45:34]  Generator returned sat in 6.319413 secs.
[10/19 18:45:35]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 18:45:35]  Improved gap from 0.0296630859375 to 10.9375
[10/19 18:45:36]  Improved number of small numbers from 87 to 108 out of a max of 114
[10/19 18:45:36]  Verifer returned sat in 1.244094 secs.
[10/19 18:45:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8494.634521   -8594.664062  7296.765137 -8494.634521    0.118652    0.118652 -8594.664062        0.0          -8494.634521  100.029541        0.029541
1   -8494.634521   -8494.664062  7296.765137 -8494.634521    0.029785    0.029785 -8494.664062        0.0          -8394.634521    0.029541      -99.970459
2   -8105.685303   -8394.664062  7296.765137 -8105.685303  388.978760  388.978760 -8394.664062        0.0          -8294.634277  288.978760      188.978760
3   -8105.685303   -8251.189209  7296.765137 -8105.685303  288.949219  288.949219 -8251.189209        0.0          -8251.189209  145.503906       88.978760
4   -8105.685303   -8163.887695  7307.786133 -8105.685303  145.474609   73.737305 -8163.887695        0.0          -8163.887695   58.202393       -0.000244
5   -8090.150391   -8105.685059  7383.283936 -8090.150391   73.737305   37.868652 -8105.685059        0.0          -8081.153320   15.534668       -8.967529
6   -8070.216064   -8081.153564  7472.316650 -8070.216064   37.868652   19.934326 -8081.153564        0.0          -8081.153564   10.937500       -0.000488
7   -8061.219238   -8070.186157  7561.349609 -8061.219238   19.934326   10.967163 -8070.186157        0.0          -8070.186157    8.966919       -1.970703
8   -8059.218994   -8059.219238  7561.349609 -8059.218994   10.967163    6.483582 -8059.219238        0.0          -8059.219238    0.000244      -99.970459
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=387089/2048.[0m
[10/19 18:45:36]  --------------------------------------------------------------------------------
[10/19 18:45:36]  Iteration: 65 (0 solution, 64 counterexamples)
[10/19 18:46:33]  Generator returned sat in 55.057639 secs.
[10/19 18:46:33]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:46:34]  Improved gap from 0.01 to 96.875
[10/19 18:46:34]  Improved number of small numbers from 111 to 114 out of a max of 114
[10/19 18:46:34]  Verifer returned sat in 0.883463 secs.
[10/19 18:46:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8594.661377   -8594.664062  7306.680908 -8594.661377    0.118652    0.118652 -8594.664062    0.000000          -8594.664062    0.002686      -99.994873
1   -8396.761562   -8396.763916  7306.680908 -8396.761562  197.902500  197.902500 -8396.763916    0.000000          -8396.763916    0.002354       -2.095059
2   -8394.661377   -8394.664062  7307.786133 -8394.661377    2.102539    2.102539 -8394.664062    0.000000          -8394.664062    0.002686      -98.889648
3   -8194.766602   -8195.771729  7307.786133 -8194.766602  199.897461  199.897461 -8195.771729    0.002686          -8195.771729    1.002441        1.002441
4   -8194.766602   -8195.766602  7307.786133 -8194.766602    0.010000    0.010000 -8195.766602    0.002686          -8195.766602    0.997314      -98.997559
5   -7994.769287   -7995.774170  7307.786133 -7994.769287  200.997314  199.997314 -7995.774170    0.002686          -7995.774170    1.002197        0.999756
6   -7596.881592   -7995.771729  7307.786133 -7596.881592  398.889893  397.889893 -7995.771729  297.887695          -7895.769287  101.002441        1.002441
7   -7596.881592   -7895.771729  7310.911133 -7596.881592    0.010000    0.010000 -7895.771729  297.887695          -7895.773926    1.002441      -95.872559
8   -7297.889160   -7798.894287  7310.911133 -7297.889160  299.994873  298.994873 -7798.894287  400.005127          -7798.894287  101.000000        1.002441
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819205/2048, 
, buffer=2053/2048.[0m
[10/19 18:46:34]  --------------------------------------------------------------------------------
[10/19 18:46:34]  Iteration: 66 (0 solution, 65 counterexamples)
[10/19 18:46:46]  Generator returned sat in 10.587765 secs.
[10/19 18:46:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 18:46:49]  Improved gap from 0.0 to 26.5625
[10/19 18:46:50]  Improved number of small numbers from 47 to 65 out of a max of 114
[10/19 18:46:50]  Verifer returned sat in 3.949720 secs.
[10/19 18:46:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -8496.791260   -8496.880215  7041.614990 -8496.791260    0.118408    0.118408 -8496.880215        0.0          -8496.880215   0.088955        0.088894
1   -8396.820889   -8396.880215  7041.614990 -8396.820889  100.059326  100.059326 -8396.880215        0.0          -8396.880215   0.059326        0.059265
2   -8396.820889   -8396.850552  7115.022888 -8396.820889    0.029785    0.029785 -8396.850552        0.0          -8396.850552   0.029663      -26.532837
3   -8353.909878   -8370.288052  7187.996674 -8353.909878   42.940674   42.940674 -8370.288052        0.0          -8370.317627  16.378174      -10.648041
4   -8289.613796   -8343.261837  7234.348633 -8289.613796  126.592163   64.296082 -8343.261837        0.0          -8343.291260  53.648041        0.000000
5   -8289.613796   -8289.613796  7307.786133 -8289.613796   53.618378   27.809189 -8289.613796        0.0          -8289.643311   0.000000      -26.562500
6   -8234.995419   -8263.051296  7379.730225 -8234.995419  107.236755   54.618378 -8263.051296        0.0          -8234.965820  28.055878       -0.000031
7   -8180.377041   -8234.965756  7425.111816 -8180.377041  107.236755   54.618378 -8234.965756        0.0          -8234.965756  54.588715       -0.000061
8   -8126.669674   -8180.317627  7471.404297 -8126.669674  108.296082   55.148041 -8180.317627        0.0          -8180.317627  53.647953       -0.000214
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=365/4096.[0m
[10/19 18:46:51]  --------------------------------------------------------------------------------
[10/19 18:46:51]  Iteration: 67 (0 solution, 66 counterexamples)
[10/19 18:47:10]  Generator returned sat in 17.845093 secs.
[10/19 18:47:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:47:12]  Improved gap from 0.029422607421875 to 46.875
[10/19 18:47:12]  Improved number of small numbers from 45 to 114 out of a max of 114
[10/19 18:47:12]  Verifer returned sat in 1.926348 secs.
[10/19 18:47:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -8212.712646   -8234.396729  7134.056885 -8212.712646    0.118408    0.118408 -8234.396729   0.000000          -8234.396729  21.684082       21.684082
1   -8112.771729   -8176.962646  7134.056885 -8112.771729  121.625000  121.625000 -8176.962646   0.000000          -8176.962646  64.190918       21.625000
2   -8087.462646   -8134.337646  7187.122803 -8087.462646   89.500000   89.500000 -8134.337646   0.000000          -8134.337646  46.875000        0.000000
3   -7965.719238   -7987.462646  7187.122803 -7965.719238  168.618408  168.618408 -7987.462646   0.059326          -7987.462646  21.684082       21.684082
4   -7964.719238   -7987.462646  7240.247803 -7964.719238  459.703857    1.000000 -7987.462646   0.059326          -7964.718994  22.684082      -24.190918
5   -7892.653320   -7940.587646  7292.372803 -7892.653320   94.750000   93.750000 -7940.587646   0.059326          -7892.653076  47.875000        0.000000
6   -7843.653320   -7892.712646  7343.372803 -7843.653320   96.875000   95.875000 -7892.712646   0.059326          -7843.653076  49.000000        0.000000
7   -7843.653320   -7843.712646  7396.497559 -7843.653320   47.375000   46.375000 -7843.712646   0.059326          -7843.771729   0.000000      -46.875244
8   -7772.778320   -7795.521729  7448.306885 -7772.778320   71.875000   70.875000 -7795.521729   0.059326          -7795.521729  22.684082      -24.190918
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=44409/2048.[0m
[10/19 18:47:12]  --------------------------------------------------------------------------------
[10/19 18:47:12]  Iteration: 68 (0 solution, 67 counterexamples)
[10/19 18:48:08]  Generator returned sat in 53.954779 secs.
[10/19 18:48:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
[0m
[10/19 18:48:08]  Improved gap from 0.0 to 100
[10/19 18:48:09]  Improved number of small numbers from 35 to 114 out of a max of 114
[10/19 18:48:09]  Verifer returned sat in 0.825347 secs.
[10/19 18:48:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9119.307129   -9119.336914  7048.225586 -9119.307129    0.118408    0.118408 -9119.336914   0.000000          -9119.336914    0.029785      -99.940674
1   -9019.307129   -9019.336914  7048.225586 -9019.307129  100.029785  100.029785 -9019.336914   0.000000          -9019.336914    0.029785      -99.940674
2   -8919.307373   -8919.336670  7048.225586 -8919.307373  100.029541  100.029541 -8919.336670   0.000000          -8919.336670    0.029297      -99.940918
3   -8716.218506   -8819.366455  7048.225586 -8716.218506  203.118164  203.118164 -8819.366455   3.059326          -8819.396240  100.088623        0.088623
4   -8614.188965   -8719.366455  7048.225586 -8614.188965  202.118164  102.059082 -8719.366455   5.088867          -8719.395996  100.088623        0.088623
5   -8513.159424   -8619.366455  7048.225586 -8513.159424  201.118164  101.559082 -8619.366455   6.118408          -8519.336914  100.088623        0.088623
6   -8413.129883   -8518.425537  7048.225586 -8413.129883  200.118164  101.059082 -8518.425537   6.147949          -8518.425537   99.147705        0.088623
7   -8313.159424   -8375.366455  7048.225586 -8313.159424  199.118164  100.559082 -8375.366455   6.147949          -8375.366455   56.059082        0.059082
8   -8197.218506   -8319.366455  7048.225586 -8197.218506  172.000000  258.000000 -8319.366455  22.059326          -8319.366455  100.088623        0.088623
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=69511/4096, 
, buffer=363/4096.[0m
[10/19 18:48:09]  --------------------------------------------------------------------------------
[10/19 18:48:09]  Iteration: 69 (0 solution, 68 counterexamples)
[10/19 18:48:59]  Generator returned sat in 47.932604 secs.
[10/19 18:48:59]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:49:02]  Improved gap from 0.0 to 21.875
[10/19 18:49:03]  Improved number of small numbers from 43 to 62 out of a max of 114
[10/19 18:49:03]  Verifer returned sat in 4.142524 secs.
[10/19 18:49:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -8696.300781   -8696.360046  6725.160156 -8696.300781    0.118408    0.118408 -8696.360046   0.000000          -8696.360046   0.059265        0.000244
1   -8696.300781   -8696.301025  6725.160156 -8696.300781    0.029785    0.029785 -8696.301025   0.000000          -8696.271484   0.000244      -99.999756
2   -8596.241699   -8596.271240  6803.255371 -8596.241699  100.059326  100.059326 -8596.271240   0.000000          -8596.271240   0.029541      -21.845459
3   -8443.723628   -8482.710958  6803.255371 -8443.723628  152.547612  152.547612 -8482.710958   0.029602          -8482.710958  38.957728       30.643010
4   -8443.713628   -8474.366638  6872.602361 -8443.713628  320.473633    0.010000 -8474.366638   0.029602          -8474.366638  30.623408        0.000000
5   -8313.100220   -8394.778076  6872.602361 -8313.100220  161.236816  160.236816 -8394.778076   0.029602          -8394.778076  81.648254       30.613408
6   -8313.100220   -8343.743230  6941.533691 -8313.100220   81.618408   80.618408 -8343.743230   0.029602          -8343.772705  30.613408       -0.455261
7   -8301.904424   -8312.645162  7019.629150 -8301.904424   41.809204   40.809204 -8312.645162   0.029602          -8312.645162  10.711136      -11.164006
8   -8290.710958   -8290.740560  7019.629150 -8290.710958   21.904602   20.904602 -8290.740560   0.029602          -8290.740560   0.000000      -99.970540
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=12551377/409600.[0m
[10/19 18:49:03]  --------------------------------------------------------------------------------
[10/19 18:49:03]  Iteration: 70 (0 solution, 69 counterexamples)
[10/19 18:49:48]  Generator returned sat in 42.818771 secs.
[10/19 18:49:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:49:50]  Improved gap from 0.0 to 37.5
[10/19 18:49:51]  Improved number of small numbers from 46 to 61 out of a max of 114
[10/19 18:49:51]  Verifer returned sat in 3.506688 secs.
[10/19 18:49:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8361.406982   -8515.466298  6527.707021 -8361.406982    0.118164    0.118164 -8515.466298        0.0          -8515.466298  154.059316      137.440908
1   -8361.347890   -8398.847890  6527.707021 -8361.347890  154.118408  154.118408 -8398.847890        0.0          -8398.847890   37.500000       37.500000
2   -8361.347890   -8398.847890  6590.206787 -8361.347890   37.499756   37.499756 -8398.847890        0.0          -8398.907227   37.500000       -0.000234
3   -8323.788686   -8361.288686  6652.647817 -8323.788686   75.059204   75.059204 -8361.288686        0.0          -8361.288686   37.500000        0.000000
4   -8283.199880   -8323.788686  6712.059011 -8283.199880   78.088806  116.133209 -8323.788686        0.0          -8323.847900   40.588806        0.000000
5   -8283.199880   -8283.199880  6774.558838 -8283.199880   38.529602   56.794403 -8283.199880        0.0          -8283.140625    0.000000      -37.500173
6   -8224.375875   -8245.640676  6836.999807 -8224.375875   58.824005   87.236008 -8245.640676        0.0          -8245.640676   21.264801      -16.235199
7   -8186.816671   -8208.140676  6898.266113 -8186.816671   58.824005   87.236008 -8208.140676        0.0          -8208.199707   21.324005      -17.409688
8   -8149.316671   -8169.347900  6960.706787 -8149.316671   58.824005   87.236008 -8169.347900        0.0          -8169.347900   20.031230      -17.469014
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=281479/2048.[0m
[10/19 18:49:52]  --------------------------------------------------------------------------------
[10/19 18:49:52]  Iteration: 71 (0 solution, 70 counterexamples)
[10/19 18:50:38]  Generator returned sat in 44.987510 secs.
[10/19 18:50:38]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:50:40]  Improved gap from 0.0 to 28.125
[10/19 18:50:41]  Improved number of small numbers from 48 to 68 out of a max of 114
[10/19 18:50:41]  Verifer returned sat in 3.209877 secs.
[10/19 18:50:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -8761.406738   -8860.436298  6493.900940 -8761.406738    0.118408   0.118408 -8860.436298        0.0          -8860.436298  99.029560       99.029560
1   -8761.406738   -8761.436298  6493.900940 -8761.406738    0.029785   0.029785 -8761.436298        0.0          -8761.436298   0.029560       -0.970440
2   -8732.311298   -8760.436298  6565.775940 -8732.311298   29.125000  29.125000 -8760.436298        0.0          -8732.281738  28.125000        0.000000
3   -8732.311298   -8732.311298  6637.650940 -8732.311298    0.029785   0.029785 -8732.311298        0.0          -8732.340820   0.000000      -28.125000
4   -8669.248798   -8704.186298  6702.713379 -8669.248798  128.125000  63.062500 -8704.186298        0.0          -8669.219238  34.937500       -0.000061
5   -8646.936298   -8669.219196  6774.558594 -8646.936298   57.250000  27.625000 -8669.219196        0.0          -8669.219196  22.282898       -5.842346
6   -8602.327747   -8636.321155  6835.792389 -8602.327747   91.217102  44.608551 -8636.321155        0.0          -8636.321155  33.993408        0.000000
7   -8555.332676   -8602.327747  6888.797119 -8555.332676   95.990143  46.995071 -8602.327747        0.0          -8602.357178  46.995071       -0.000198
8   -8505.403400   -8540.340820  6888.797363 -8505.403400  101.858551  49.929276 -8540.340820        0.0          -8540.340820  34.937420      -50.070679
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=202813/2048.[0m
[10/19 18:50:42]  --------------------------------------------------------------------------------
[10/19 18:50:42]  Iteration: 72 (0 solution, 71 counterexamples)
[10/19 18:51:08]  Generator returned sat in 24.545720 secs.
[10/19 18:51:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 18:51:20]  Improved gap from 0.0 to 1.5625
[10/19 18:51:22]  Improved number of small numbers from 59 to 68 out of a max of 114
[10/19 18:51:22]  Verifer returned sat in 13.919814 secs.
[10/19 18:51:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8985.433594   -8985.436298  6482.450940 -8985.433594    0.118164    0.118164 -8985.436298    0.00000          -8985.436298    0.002704      -99.994796
1   -8785.431298   -8785.438798  6482.450940 -8785.431298  200.005000  200.005000 -8785.438798    0.00250          -8785.438798    0.005000        0.005000
2   -8742.198798   -8760.436298  6539.213440 -8742.198798   43.237500   43.237500 -8760.436298    0.00250          -8760.436298   18.235000        0.000000
3   -8742.198798   -8742.201298  6637.650940 -8742.198798   18.232500   18.232500 -8742.201298    0.00250          -8740.636475    0.000000       -1.562500
4   -8610.465048   -8740.638798  6637.650940 -8610.465048  131.733750  263.467500 -8740.638798   30.16875          -8740.641113  100.005000        0.005000
5   -8610.465048   -8640.636298  6736.085938 -8610.465048   23.400000    0.010000 -8640.636298   30.16875          -8640.636298    0.002500       -1.560002
6   -8537.867548   -8639.071298  6765.048440 -8537.867548   72.600000  145.200000 -8639.071298   30.16875          -8639.071298   71.035000        0.000000
7   -8520.037548   -8568.036298  6847.218440 -8520.037548   88.865000  177.730000 -8568.036298   30.16875          -8550.203857   17.830000        0.000000
8   -8406.133798   -8550.203613  6847.218440 -8406.133798  131.733750  263.467500 -8550.203613   44.06750          -8550.203613  100.002315        0.005000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=11119/800, 
, buffer=1/200.[0m
[10/19 18:51:22]  --------------------------------------------------------------------------------
[10/19 18:51:22]  Iteration: 73 (0 solution, 72 counterexamples)
[10/19 18:51:46]  Generator returned sat in 22.391523 secs.
[10/19 18:51:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:51:47]  Improved gap from 0.0 to 100
[10/19 18:51:47]  Improved number of small numbers from 60 to 114 out of a max of 114
[10/19 18:51:47]  Verifer returned sat in 0.636425 secs.
[10/19 18:51:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -9101.226807   -9122.256348  6736.085938 -9101.226807    0.117920    0.117920 -9122.256348    0.000000          -9122.256348   21.029541        0.058838
1   -9101.226807   -9101.285645  6736.085938 -9101.226807    0.029541    0.029541 -9101.285645    0.000000          -9101.197021    0.058838      -99.941162
2   -9001.256348   -9001.285645  6736.085938 -9001.256348  100.029297  100.029297 -9001.285645    0.000000          -9001.315186    0.029297      -99.970703
3   -8801.285645   -8841.550293  6736.085938 -8801.285645  200.000000  200.000000 -8841.550293    0.000000          -8841.550293   40.264648        0.000000
4   -8701.197266   -8740.609375  6736.085938 -8701.197266  140.353027  279.706055 -8740.609375    0.029541          -8740.609375   39.382568        0.058838
5   -8601.226807   -8659.080566  6736.085938 -8601.226807  139.353027  278.706055 -8659.080566    0.029541          -8659.080566   57.824219        0.029297
6   -8487.948486   -8501.285645  6736.085938 -8487.948486  171.102539  341.205078 -8501.285645   13.278320          -8501.285645    0.058838        0.058838
7   -8317.904785   -8402.463135  6736.085938 -8317.904785  170.102539  340.205078 -8402.463135   83.322021          -8402.463135    1.236328        0.058838
8   -8150.038574   -8401.285645  6736.085938 -8150.038574  169.102539  338.205078 -8401.285645  151.188232          -8401.285645  100.058838        0.058838
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=309573/2048, 
, buffer=241/4096.[0m
[10/19 18:51:48]  --------------------------------------------------------------------------------
[10/19 18:51:48]  Iteration: 74 (0 solution, 73 counterexamples)
[10/19 18:52:55]  Generator returned sat in 65.518178 secs.
[10/19 18:52:55]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:52:56]  Improved number of small numbers from 55 to 72 out of a max of 113
[10/19 18:52:56]  Verifer returned sat in 1.574221 secs.
[10/19 18:52:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8150.362305   -8576.936035  6736.085693 -8150.362305    0.117676    0.117676 -8576.936035    0.029541          -8576.994873  426.544189      326.544189
1   -8050.421387   -8476.936035  6736.085693 -8050.421387  526.485107  526.485107 -8476.936035    0.029541          -8476.994873  426.485107      326.485107
2   -8050.421387   -8376.877075  6736.085693 -8050.421387    0.059082    0.059082 -8376.877075    0.029541          -8376.877075  326.426147      226.485107
3   -7589.668335   -8276.936035  6736.085693 -7589.668335  787.179199  787.179199 -8276.936035  260.723480          -7850.333008  426.544220      326.544220
4   -7589.668335   -8076.936035  6736.085693 -7589.668335  394.589600    1.000000 -8076.936035  260.723480          -8076.936035  226.544220      226.544220
5   -7417.917755   -7976.936035  6736.085693 -7417.917755  398.294800  795.589600 -7976.936035  260.723480          -7976.936035  298.294800      298.294800
6   -7316.094635   -7976.877075  6736.085693 -7316.094635  400.117920  799.235840 -7976.877075  260.723480          -7976.877075  400.058960      300.117920
7   -7316.094635   -7776.936035  6736.085693 -7316.094635  351.088440  701.176880 -7776.936035  260.723480          -7776.936035  200.117920      200.117920
8   -7189.668335   -7776.877197  6736.085693 -7189.668335  326.544220  652.088440 -7776.877197  260.723480          -7776.877197  326.485382      226.544220
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=10700201/32768.[0m
[10/19 18:52:57]  --------------------------------------------------------------------------------
[10/19 18:52:57]  Iteration: 75 (0 solution, 74 counterexamples)
[10/19 18:53:47]  Generator returned sat in 49.113639 secs.
[10/19 18:53:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:53:52]  Improved gap from 0.0 to 28.125
[10/19 18:53:52]  Improved number of small numbers from 60 to 114 out of a max of 114
[10/19 18:53:52]  Verifer returned sat in 4.415866 secs.
[10/19 18:53:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8050.371582   -8151.376465  6356.205811 -8050.371582    0.117432   0.117432 -8151.376465        0.0          -8151.376465  101.004883      100.004395
1   -8050.371582   -8050.376221  6356.205811 -8050.371582    0.004883   0.004883 -8050.376221        0.0          -8050.376221    0.004639        0.004395
2   -8050.366943   -8050.371582  6428.076416 -8050.366943    0.009277   0.009277 -8050.371582        0.0          -8050.371582    0.004639      -28.120361
3   -8022.090332   -8022.246582  6499.951172 -8022.090332   28.281250  28.281250 -8022.246582        0.0          -8022.251221    0.156250      -27.968994
4   -7957.525391   -7994.116943  6563.355225 -7957.525391  129.129883  64.564941 -7994.116943        0.0          -7994.116943   36.591553        0.000000
5   -7937.857666   -7957.520996  6635.225586 -7937.857666   56.259277  28.129639 -7957.520996        0.0          -7957.520996   19.663330       -8.461914
6   -7891.432373   -7929.391113  6697.261963 -7891.432373   92.850586  46.425293 -7929.391113        0.0          -7929.391113   37.958740       -0.000244
7   -7845.004639   -7891.427490  6736.085449 -7845.004639   92.855469  46.427734 -7891.427490        0.0          -7891.427490   46.422852      -14.749023
8   -7793.659912   -7830.251221  6799.489502 -7793.659912  102.689453  51.344727 -7830.251221        0.0          -7830.251221   36.591309       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=102405/1024.[0m
[10/19 18:53:52]  --------------------------------------------------------------------------------
[10/19 18:53:52]  Iteration: 76 (0 solution, 75 counterexamples)
[10/19 18:54:30]  Generator returned sat in 35.849669 secs.
[10/19 18:54:30]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 18:54:33]  Improved gap from 1.0587158203125 to 100
[10/19 18:54:34]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 18:54:34]  Verifer returned sat in 3.945167 secs.
[10/19 18:54:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -8519.953857   -8620.009521  6963.428223 -8519.953857    0.117432    0.117432 -8620.009521   0.000000          -8620.064697  100.055664        0.055664
1   -8519.898193   -8519.953857  6963.428223 -8519.898193  100.111328  100.111328 -8519.953857   0.000000          -8519.953857    0.055664      -99.888672
2   -8419.953857   -8420.009521  6963.428223 -8419.953857  100.000000  100.000000 -8420.009521   0.000000          -8420.064697    0.055664      -99.944336
3   -7919.898193   -8220.731689  6963.428223 -7919.898193  500.111328  500.111328 -8220.731689   0.055664          -8220.731689  300.777832      300.055664
4   -7918.898193   -8120.009521  6963.428223 -7918.898193  398.277832    1.000000 -8120.009521   0.055664          -8120.009521  201.055664      201.055664
5   -7719.842773   -8120.009521  6963.428223 -7719.842773  400.111084  800.222168 -8120.009521   0.111084          -8120.064941  400.055664      300.055664
6   -7719.842773   -7921.009521  6963.428223 -7719.842773  299.000000    1.000000 -7921.009521   0.111084          -7921.009521  201.055664      200.055664
7   -7620.537354   -7820.092773  6963.428223 -7620.537354  300.361084  600.722168 -7820.092773   0.111084          -7820.092773  199.444336      199.361084
8   -7518.842773   -7820.009521  6963.428223 -7518.842773  301.138916  602.277832 -7820.009521   0.111084          -7518.898438  301.055664      201.055664
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=227/4096, 
, buffer=307257/1024.[0m
[10/19 18:54:34]  --------------------------------------------------------------------------------
[10/19 18:54:34]  Iteration: 77 (0 solution, 76 counterexamples)
[10/19 18:55:11]  Generator returned sat in 34.614174 secs.
[10/19 18:55:11]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:55:11]  Improved gap from 4.02935791015625 to 100
[10/19 18:55:12]  Improved number of small numbers from 70 to 85 out of a max of 114
[10/19 18:55:12]  Verifer returned sat in 1.127175 secs.
[10/19 18:55:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2156.949707   -2256.952021  6963.428223 -2156.949707    0.117432    0.117432 -2256.952021    0.00000          -2256.953125  100.002314        0.002314
1   -2056.950771   -2056.952021  6963.428223 -2056.950771  200.001250  200.001250 -2056.952021    0.00000          -2056.952021    0.001250        0.001250
2   -1956.948271   -2056.950771  6963.428223 -1956.948271  100.003750  100.003750 -2056.950771    0.00125          -2056.950771  100.001250        0.002500
3   -1856.947021   -1856.969521  6963.428223 -1856.947021  200.002500  200.002500 -1856.969521    0.00250          -1856.969521    0.020000        0.002500
4   -1856.937021   -1856.951904  6963.428223 -1856.937021  799.965000    0.010000 -1856.951904    0.00250          -1856.951904    0.012383      -99.987500
5   -1456.954521   -1656.952021  6963.428223 -1456.954521  400.982500  399.982500 -1656.952021  199.99500          -1656.952021    0.002500        0.002500
6   -1456.944521   -1656.951904  6963.428223 -1456.944521  799.997500    0.010000 -1656.951904  199.99500          -1656.951904    0.012383      -99.987500
7   -1056.945771   -1556.951904  6963.428223 -1056.945771  400.998750  399.998750 -1556.951904  400.00375          -1556.951904  100.002383        0.002500
8   -1056.935771   -1456.951904  6963.428223 -1056.935771  600.000000    0.010000 -1456.951904  400.00375          -1456.951904    0.012383      -99.987500
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=320001/800, 
, buffer=1/400.[0m
[10/19 18:55:12]  --------------------------------------------------------------------------------
[10/19 18:55:12]  Iteration: 78 (0 solution, 77 counterexamples)
[10/19 18:55:51]  Generator returned sat in 36.857155 secs.
[10/19 18:55:51]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:55:54]  Improved gap from 0.0 to 21.875
[10/19 18:55:55]  Improved number of small numbers from 38 to 102 out of a max of 114
[10/19 18:55:55]  Verifer returned sat in 4.247756 secs.
[10/19 18:55:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2035.480469   -2056.948271  6963.428223 -2035.480469    0.117188    0.117188 -2056.948271   0.000000          -2056.948271   21.467803       21.467773
1   -1956.889556   -2056.948242  6963.428223 -1956.889556  100.058716  100.058716 -2056.948242   0.000000          -1956.889648  100.058687        0.058687
2   -1956.889556   -1956.948242  7041.553223 -1956.889556    0.058594    0.058594 -1956.948242   0.000000          -1935.014648    0.058687      -21.816313
3   -1813.546631   -1843.614938  7041.553223 -1813.546631  143.401611  143.401611 -1843.614938   0.058838          -1843.614938   30.009469       21.467773
4   -1812.546631   -1835.073242  7101.962402 -1812.546631  320.000000    1.000000 -1835.073242   0.058838          -1812.546631   22.467773      -17.123047
5   -1674.014404   -1795.423828  7101.962402 -1674.014404  161.000000  160.000000 -1795.423828   0.058838          -1795.423828  121.350586       21.409180
6   -1674.014404   -1695.423584  7180.028564 -1674.014404   81.500000   80.500000 -1695.423584   0.058838          -1695.423584   21.350342       -0.524658
7   -1653.614746   -1673.548584  7258.153564 -1653.614746   41.750000   40.750000 -1673.548584   0.058838          -1651.614990   19.875000       -2.000000
8   -1651.614746   -1651.673584  7336.278564 -1651.614746   21.875000   20.875000 -1651.673584   0.058838          -1651.614746    0.000000      -21.875000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=21983/1024.[0m
[10/19 18:55:56]  --------------------------------------------------------------------------------
[10/19 18:55:56]  Iteration: 79 (0 solution, 78 counterexamples)
[10/19 18:57:30]  Generator returned sat in 92.933134 secs.
[10/19 18:57:30]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:57:42]  Improved gap from 0.16666666666666666 to 100
[10/19 18:57:43]  Improved number of small numbers from 60 to 114 out of a max of 114
[10/19 18:57:43]  Verifer returned sat in 12.194025 secs.
[10/19 18:57:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2073.197021   -2272.431396  7079.676758 -2073.197021    0.116943    0.116943 -2272.431396    0.00000          -2272.431396  199.234375      100.000000
1   -2073.197021   -2173.197021  7079.676758 -2073.197021    0.058594    0.058594 -2173.197021    0.00000          -2073.138672  100.000000        0.000000
2   -1973.197021   -2073.197021  7079.676758 -1973.197021  200.000000  200.000000 -2073.197021    0.00000          -1973.138672  100.000000        0.000000
3   -1572.962891   -1873.197021  7079.676758 -1572.962891  500.234131  500.234131 -1873.197021    0.05835          -1873.197021  300.175781      300.175781
4   -1571.962891   -1773.197021  7079.676758 -1571.962891  400.234375    1.000000 -1773.197021    0.05835          -1773.197021  201.175781      201.175781
5   -1373.021484   -1773.138428  7079.676758 -1373.021484  400.117188  599.175781 -1773.138428    0.05835          -1773.138428  400.058594      300.117188
6   -1373.021484   -1618.581787  7079.676758 -1373.021484  350.087891  524.131836 -1618.581787    0.05835          -1618.581787  245.501953      200.117188
7   -1316.171875   -1473.197021  7079.676758 -1316.171875  302.351562  452.527344 -1473.197021    0.05835          -1473.197021  156.966797      156.966797
8   -1171.962891   -1473.138428  7079.676758 -1171.962891  301.175781  450.763672 -1473.138428    0.05835          -1473.138428  301.117188      201.175781
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=76845/256.[0m
[10/19 18:57:43]  --------------------------------------------------------------------------------
[10/19 18:57:43]  Iteration: 80 (0 solution, 79 counterexamples)
[10/19 18:59:06]  Generator returned sat in 81.612604 secs.
[10/19 18:59:06]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 18:59:08]  Improved gap from 0.0 to 46.875
[10/19 18:59:09]  Improved number of small numbers from 55 to 114 out of a max of 114
[10/19 18:59:09]  Verifer returned sat in 2.350223 secs.
[10/19 18:59:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2102.617432   -2226.775635  7033.255371 -2102.617432    0.116699    0.116699 -2226.775635   0.000000          -2126.717285  124.158203       24.158203
1   -2026.775879   -2068.577881  7033.255371 -2026.775879  199.999756  199.999756 -2068.577881   0.000000          -2068.577881   41.802002       -0.000244
2   -1979.900635   -2026.775635  7086.380371 -1979.900635   88.677246   88.677246 -2026.775635   0.000000          -2026.833984   46.875000        0.000000
3   -1855.683838   -1880.900879  7086.380371 -1855.683838  171.091797  171.091797 -1880.900879   0.058594          -1880.900879   25.158447       24.158203
4   -1854.683838   -1879.900635  7139.505127 -1854.683838  255.637695    1.000000 -1879.900635   0.058594          -1832.967041   25.158203      -21.717041
5   -1785.503418   -1832.814697  7192.041748 -1785.503418   94.338623  189.677246 -1832.814697   0.058594          -1832.814697   47.252686        0.000000
6   -1735.775635   -1785.562012  7242.313965 -1735.775635   96.980469  194.960938 -1785.562012   0.058594          -1785.620361   49.727783        0.000000
7   -1735.775635   -1735.834229  7295.438965 -1735.775635   47.669434   96.338867 -1735.834229   0.058594          -1735.892822    0.000000      -46.875000
8   -1663.742432   -1688.959229  7295.438965 -1663.742432   72.033203  145.066406 -1688.959229   0.058594          -1663.742432   25.158203      -74.841797
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=12369/512.[0m
[10/19 18:59:09]  --------------------------------------------------------------------------------
[10/19 18:59:09]  Iteration: 81 (0 solution, 80 counterexamples)
[10/19 19:00:02]  Generator returned sat in 51.525010 secs.
[10/19 19:00:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:00:05]  Improved gap from 0.0 to 21.875
[10/19 19:00:06]  Improved number of small numbers from 46 to 63 out of a max of 114
[10/19 19:00:06]  Verifer returned sat in 3.884706 secs.
[10/19 19:00:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -1637.757568   -1637.816162  7008.313721 -1637.757568    0.116699    0.116699 -1637.816162    0.000000          -1637.816162   0.058594        0.058359
1   -1637.757568   -1637.815928  7008.313721 -1637.757568    0.058350    0.058350 -1637.815928    0.000000          -1537.757812   0.058359      -99.941641
2   -1537.699229   -1537.757578  7086.380371 -1537.699229  100.116699  100.116699 -1537.757578    0.000000          -1537.757578   0.058350      -21.816650
3    -883.956797   -1419.882568  7086.380371  -883.956797  653.800781  653.800781 -1419.882568  499.397334          -1419.882568  36.528438       32.528447
4    -883.946797   -1415.824229  7153.841797  -883.946797  327.900391    0.010000 -1415.824229  499.397334          -1415.824229  32.480098       -0.000127
5    -751.476699   -1334.407715  7153.841797  -751.476699  164.950195  163.950195 -1334.407715  499.397334          -1334.407715  83.533682       32.469971
6    -751.476699   -1283.285781  7220.371582  -751.476699   83.475098   82.475098 -1283.285781  499.397334          -1283.285781  32.411748       -1.000244
7    -741.150898   -1249.815684  7298.438477  -741.150898   42.737549   41.737549 -1249.815684  499.397334          -1249.815684   9.267451      -12.607549
8    -728.049575   -1227.940684  7376.563232  -728.049575   22.368774   21.368774 -1227.940684  499.397334          -1227.388672   0.493774      -21.381470
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3330913/102400.[0m
[10/19 19:00:07]  --------------------------------------------------------------------------------
[10/19 19:00:07]  Iteration: 82 (0 solution, 81 counterexamples)
[10/19 19:00:37]  Generator returned sat in 28.386089 secs.
[10/19 19:00:37]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:00:41]  Improved gap from 0.0 to 21.875
[10/19 19:00:42]  Improved number of small numbers from 45 to 74 out of a max of 114
[10/19 19:00:42]  Verifer returned sat in 4.865582 secs.
[10/19 19:00:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1710.708008   -1712.766357  7081.264160 -1710.708008    0.116455    0.116455 -1712.766357    0.00000          -1712.766357    2.058350        0.058359
1   -1710.649658   -1710.708008  7159.330734 -1710.649658    2.116699    2.116699 -1710.708008    0.00000          -1710.708008    0.058350      -21.816717
2   -1554.357910   -1688.774591  7159.330734 -1554.357910  156.350098  156.350098 -1688.774591    0.00000          -1688.774591  134.416681       34.475031
3   -1454.241266   -1488.833008  7159.330734 -1454.241266  234.533325  234.533325 -1488.833008    0.05835          -1488.833008   34.533392       34.533325
4   -1453.241266   -1488.274653  7223.797363 -1453.241266  336.900024    1.000000 -1488.274653    0.05835          -1488.274653   34.975037       -0.000046
5   -1318.766291   -1404.607910  7223.797363 -1318.766291  169.450012  168.450012 -1404.607910    0.05835          -1404.607910   85.783270       34.474930
6   -1318.766291   -1353.241266  7289.322433 -1318.766291   85.725006   84.725006 -1353.241266    0.05835          -1353.241266   34.416626        0.000000
7   -1309.320414   -1318.824640  7367.447266 -1309.320414   43.862503   42.862503 -1318.824640    0.05835          -1296.891357    9.445877      -12.429291
8   -1295.835039   -1296.891113  7367.447510 -1295.835039   22.931252   21.931252 -1296.891113    0.05835          -1296.891113    0.997725      -98.943672
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=282897/8192.[0m
[10/19 19:00:42]  --------------------------------------------------------------------------------
[10/19 19:00:42]  Iteration: 83 (0 solution, 82 counterexamples)
[10/19 19:01:27]  Generator returned sat in 42.563334 secs.
[10/19 19:01:27]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 19:01:36]  Improved gap from 0.0 to 43.75
[10/19 19:01:37]  Improved number of small numbers from 59 to 75 out of a max of 114
[10/19 19:01:37]  Verifer returned sat in 9.899194 secs.
[10/19 19:01:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -2581.333740   -2581.345500  7951.843262 -2581.333740    0.116455    0.116455 -2581.345500        0.0          -2581.345500   0.011760        0.011729
1   -2581.333740   -2581.339548  7999.834473 -2581.333740    0.011719    0.011719 -2581.339548        0.0          -2581.339548   0.005807      -51.997061
2   -2483.580950   -2529.330950  8054.078613 -2483.580950   97.758598   97.758598 -2529.330950        0.0          -2529.330950  45.750000       -0.000130
3   -2381.539283   -2383.580950  8054.078613 -2381.539283  147.791667  147.791667 -2383.580950        0.0          -2383.580950   2.041667        2.041537
4   -2333.098146   -2383.551188  8102.595939 -2333.098146   98.882275   48.441138 -2383.551188        0.0          -2383.551188  50.453042       -1.000000
5   -2284.657008   -2332.098146  8155.154785 -2284.657008   98.894180   48.447090 -2332.098146        0.0          -2332.104004  47.441138       -0.000016
6   -2236.348807   -2280.119640  8206.846436 -2236.348807   98.616402   48.308201 -2280.119640        0.0          -2280.119640  43.770833       -0.000164
7   -2228.388986   -2236.342855  8263.090576 -2228.388986   51.730655   24.865327 -2236.342855        0.0          -2236.342855   7.953869      -35.796202
8   -2192.586902   -2192.586914  8263.090576 -2192.586902   73.604167   35.802083 -2192.586914        0.0          -2192.586914   0.000012      -99.994119
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=2097/1024.[0m
[10/19 19:01:37]  --------------------------------------------------------------------------------
[10/19 19:01:37]  Iteration: 84 (0 solution, 83 counterexamples)
[10/19 19:02:08]  Generator returned sat in 29.222920 secs.
[10/19 19:02:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:02:13]  Improved gap from 0.0 to 28.125
[10/19 19:02:14]  Improved number of small numbers from 54 to 77 out of a max of 114
[10/19 19:02:14]  Verifer returned sat in 5.325168 secs.
[10/19 19:02:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2280.277100   -2280.277344  8054.078613 -2280.277100    0.116211    0.116211 -2280.277344   0.000000          -2280.277344    0.000244      -63.999851
1   -2116.083008   -2216.277249  8054.078613 -2116.083008  164.194336  164.194336 -2216.277249   0.000000          -2216.320557  100.194241        0.194241
2   -2015.996356   -2016.277249  8054.078613 -2015.996356  200.280893  200.280893 -2016.277249   0.043214          -2016.277249    0.237679        0.237679
3   -1915.953142   -1916.277344  8054.078613 -1915.953142  100.280893  100.280893 -1916.277344   0.086429          -1916.277344    0.237773        0.237679
4   -1915.943142   -1916.277249  8125.953613 -1915.943142  363.000000    0.010000 -1916.277249   0.086429          -1888.108887    0.247679      -27.877321
5   -1734.443142   -1888.109035  8125.953613 -1734.443142  182.500000  181.500000 -1888.109035  53.471429          -1888.109035  100.194464        0.237679
6   -1734.433142   -1788.108887  8197.785156 -1734.433142  127.168214    0.010000 -1788.108887  53.471429          -1788.108887    0.204316      -27.920778
7   -1670.849035   -1759.940674  8262.121828 -1670.849035   64.584107   63.584107 -1759.940674  53.471429          -1759.940674   35.620211        0.000000
8   -1670.849035   -1724.320463  8333.996826 -1670.849035   33.292054   32.292054 -1724.320463  53.471429          -1724.277100    0.000000      -28.125001
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=10677/200, 
, buffer=1331/5600.[0m
[10/19 19:02:14]  --------------------------------------------------------------------------------
[10/19 19:02:14]  Iteration: 85 (0 solution, 84 counterexamples)
[10/19 19:02:34]  Generator returned sat in 18.478941 secs.
[10/19 19:02:35]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:02:37]  Improved gap from 0.0 to 45.3125
[10/19 19:02:38]  Improved number of small numbers from 56 to 101 out of a max of 114
[10/19 19:02:38]  Verifer returned sat in 3.352894 secs.
[10/19 19:02:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -2431.956543   -2445.761963  8200.600830 -2431.956543    0.116211    0.116211 -2445.761963   0.000000          -2445.761963  13.805420       13.805176
1   -2348.250488   -2348.279297  8200.600830 -2348.250488   97.511475   97.511475 -2348.279297   0.000000          -2348.279297   0.028809       -2.488770
2   -2231.927490   -2245.761963  8200.600830 -2231.927490  116.351807  116.351807 -2245.761963   0.029053          -2245.761963  13.805420       13.805176
3   -2131.898438   -2145.761846  8200.600830 -2131.898438  113.834473  113.834473 -2145.761846   0.058105          -2145.761846  13.805303       13.805176
4   -2089.786504   -2145.761719  8244.683594 -2089.786504   55.917236  112.834473 -2145.761719   0.058105          -2089.815674  55.917109       -0.000127
5   -2044.444824   -2089.815674  8299.342041 -2044.444824  101.258789  152.888184 -2089.815674   0.058105          -2089.815674  45.312744        0.000000
6   -2011.784424   -2044.474004  8354.000488 -2011.784424   77.973145  117.959717 -2044.474004   0.058105          -2044.474004  32.631475      -12.681152
7   -1993.771978   -1999.132324  8408.658936 -1993.771978   50.643921   76.965881 -1999.132324   0.058105          -1999.132324   5.302241      -40.010259
8   -1925.759521   -1953.790771  8408.659180 -1925.759521   73.314697  110.972046 -1953.790771   0.058105          -1953.790771  27.973145      -71.997559
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=28273/2048.[0m
[10/19 19:02:38]  --------------------------------------------------------------------------------
[10/19 19:02:38]  Iteration: 86 (0 solution, 85 counterexamples)
[10/19 19:02:44]  Generator returned sat in 3.459044 secs.
[10/19 19:02:44]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:02:48]  Improved gap from 0.0 to 45.3125
[10/19 19:02:49]  Improved number of small numbers from 59 to 67 out of a max of 114
[10/19 19:02:49]  Verifer returned sat in 4.958269 secs.
[10/19 19:02:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3690.187012   -3790.375373  8054.622782 -3690.187012    0.116211    0.116211 -3790.375373   0.000000          -3790.469727  100.188361        0.188361
1   -3590.281142   -3591.375373  8054.622782 -3590.281142  200.094231  200.094231 -3591.375373   0.000000          -3591.375373    1.094231        0.094231
2   -3490.092680   -3490.375373  8054.622782 -3490.092680  101.282692  101.282692 -3490.375373   0.094231          -3490.375373    0.188462        0.188462
3   -3376.721526   -3390.920565  8054.622782 -3376.721526  113.559615  113.559615 -3390.920565  13.465385          -3390.920565    0.733654        0.188462
4   -3321.675373   -3390.281142  8099.387939 -3321.675373   55.779808  110.559615 -3390.281142  13.465385          -3390.281142   55.140385       -0.000227
5   -3276.268642   -3335.046526  8153.981436 -3276.268642  100.547115  151.820673 -3335.046526  13.465385          -3335.046526   45.312500        0.000000
6   -3243.916719   -3289.734026  8208.668701 -3243.916719   77.664423  117.496635 -3289.734026  13.465385          -3289.828125   32.351923      -12.960811
7   -3225.675373   -3244.327296  8263.262205 -3225.675373   50.593269   76.889904 -3244.327296  13.465385          -3244.327296    5.186538      -40.125962
8   -3157.884988   -3199.014796  8263.262207 -3157.884988   72.976923  110.465385 -3199.014796  13.465385          -3171.256348   27.664423      -72.335575
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=49/260.[0m
[10/19 19:02:49]  --------------------------------------------------------------------------------
[10/19 19:02:49]  Iteration: 87 (0 solution, 86 counterexamples)
[10/19 19:03:08]  Generator returned sat in 17.016085 secs.
[10/19 19:03:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:03:09]  Improved gap from 1.029052734375 to 98.4375
[10/19 19:03:10]  Improved number of small numbers from 59 to 73 out of a max of 114
[10/19 19:03:10]  Verifer returned sat in 2.164996 secs.
[10/19 19:03:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3444.195557   -3545.212433  7809.486816 -3444.195557     0.115967     0.115967 -3545.212433      0.000          -3545.212433  101.016876        1.043851
1   -3444.195557   -3445.239258  7809.486842 -3444.195557   101.016846   101.016846 -3445.239258      0.000          -3445.239258    1.043701      -98.956124
2   -3281.239502   -3345.239433  7809.486842 -3281.239502   163.999756   163.999756 -3345.239433      0.000          -3345.239502   63.999931      -36.000069
3   -1893.347433   -3145.551933  7809.486842 -1893.347433  1451.892000  1451.892000 -3145.551933   1250.848          -3145.551933    1.356500        1.044000
4   -1893.337433   -3145.212433  7811.022342 -1893.337433   798.321000     0.010000 -3145.212433   1250.848          -3145.212433    1.027000      -97.410500
5   -1494.203933   -2946.909933  7811.022342 -1494.203933   400.160500   399.160500 -2946.909933   1451.527          -2946.909933    1.179000        1.044000
6   -1494.193933   -2946.747933  7812.557842 -1494.193933   795.659000     0.010000 -2946.747933   1451.527          -2946.747933    1.027000      -97.410500
7   -1096.391433   -2848.283433  7812.557842 -1096.391433   398.829500   397.829500 -2848.283433   1650.875          -2848.283433  101.017000        1.044000
8   -1096.381433   -2748.283447  7814.093342 -1096.381433   592.858000     0.010000 -2748.283447   1650.875          -2748.283447    1.027014      -97.410500
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=400027/1000, 
, buffer=261/250.[0m
[10/19 19:03:11]  --------------------------------------------------------------------------------
[10/19 19:03:11]  Iteration: 88 (0 solution, 87 counterexamples)
[10/19 19:03:28]  Generator returned sat in 15.865158 secs.
[10/19 19:03:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 19:03:29]  Improved gap from 0.0 to 100
[10/19 19:03:30]  Improved number of small numbers from 59 to 69 out of a max of 114
[10/19 19:03:30]  Verifer returned sat in 1.148672 secs.
[10/19 19:03:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2294.122314   -2294.158219  7811.022342 -2294.122314    0.115967    0.115967 -2294.158219   0.000000          -2194.122559    0.035904      -99.964096
1   -2194.086790   -2194.122559  7811.022342 -2194.086790  100.071429  100.071429 -2194.122559   0.000000          -2194.122559    0.035768      -99.928571
2   -2094.086914   -2094.122504  7811.022342 -2094.086914  100.035645  100.035645 -2094.122504   0.000000          -2094.122504    0.035590      -99.928695
3   -1893.836790   -1894.372504  7811.022342 -1893.836790  200.285714  200.285714 -1894.372504   0.000000          -1894.372504    0.535714        0.321429
4   -1793.390362   -1894.158219  7811.022342 -1793.390362  200.892857  100.446429 -1894.158219   0.446429          -1793.836914  100.321429        0.321429
5   -1693.818933   -1694.265362  7811.022342 -1693.818933  199.892857  100.946429 -1694.265362   0.446429          -1694.265362    0.000000       -0.107143
6   -1593.354647   -1692.836790  7811.022342 -1593.354647  200.928571  100.464286 -1692.836790   0.482143          -1692.836790   99.000000        0.321429
7   -1492.426076   -1592.729647  7811.022342 -1492.426076  199.928571  100.964286 -1592.729647   1.410714          -1592.729647   98.892857        0.321429
8   -1392.390362   -1494.158219  7811.022342 -1392.390362  198.928571  100.464286 -1494.158219   1.446429          -1393.801025  100.321429        0.321429
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1, 
, buffer=9/28.[0m
[10/19 19:03:30]  --------------------------------------------------------------------------------
[10/19 19:03:30]  Iteration: 89 (0 solution, 88 counterexamples)
[10/19 19:03:49]  Generator returned sat in 17.426891 secs.
[10/19 19:03:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 19:03:51]  Improved gap from 0.0 to 100
[10/19 19:03:52]  Improved number of small numbers from 33 to 57 out of a max of 114
[10/19 19:03:52]  Verifer returned sat in 2.155026 secs.
[10/19 19:03:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1593.374756   -1693.403564  7811.022342 -1593.374756    0.115723    0.115723 -1693.403564   0.000000          -1693.403564  100.028809        0.057964
1   -1493.403809   -1493.432861  7811.022342 -1493.403809  199.999756  199.999756 -1493.432861   0.000000          -1493.432861    0.029053        0.028911
2   -1393.403809   -1493.229778  7811.022342 -1393.403809  100.029053  100.029053 -1493.229778   0.000000          -1493.229778   99.825969        0.028911
3   -1293.345745   -1293.432861  7811.022342 -1293.345745  199.884033  199.884033 -1293.432861   0.028992          -1293.432861    0.058125        0.057983
4   -1192.903728   -1291.345745  7811.022342 -1192.903728  198.884033  100.442017 -1291.345745   0.471008          -1291.345745   97.971008        0.057983
5   -1092.990703   -1093.461711  7811.022342 -1092.990703  197.884033   99.942017 -1093.461711   0.471008          -1093.461711    0.000000       -0.028992
6    -991.548687   -1092.345745  7811.022342  -991.548687  200.884033  101.442017 -1092.345745   1.826050          -1092.345745   98.971008        0.057983
7    -890.635662    -991.787842  7811.022342  -890.635662  199.884033  100.942017  -991.787842   2.739075           -991.787842   98.413105        0.057983
8    -790.193645    -893.403809  7811.022342  -790.193645  198.884033  100.442017  -893.403809   3.181091           -893.403809  100.029072        0.057983
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=22201/8192, 
, buffer=475/8192.[0m
[10/19 19:03:52]  --------------------------------------------------------------------------------
[10/19 19:03:52]  Iteration: 90 (0 solution, 89 counterexamples)
[10/19 19:04:29]  Generator returned sat in 34.869462 secs.
[10/19 19:04:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 19:04:32]  Improved gap from 0.0289306640625 to 100
[10/19 19:04:32]  Improved number of small numbers from 79 to 91 out of a max of 114
[10/19 19:04:32]  Verifer returned sat in 3.341416 secs.
[10/19 19:04:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1493.404053   -1593.432861  7811.022217 -1493.404053     0.115723     0.115723 -1593.432861     0.000000          -1593.461670  100.028809        0.028809
1   -1493.404053   -1493.432861  7811.022217 -1493.404053   100.028809   100.028809 -1493.432861     0.000000          -1493.461914    0.028809      -99.971191
2    -993.346069   -1393.403931  7811.022217  -993.346069   500.086792   500.086792 -1393.403931     0.028931          -1393.403931  400.028931      300.057861
3     199.203613   -1291.432861  7811.022217   199.203613  1592.578613  1592.578613 -1291.432861  1092.578613          -1291.432861  398.057861      300.057861
4     597.435059   -1191.577515  7811.022217   597.435059   796.289307   796.289307 -1191.577515  1390.810059          -1191.577515  398.202515      300.057861
5     597.435059    -993.432861  7811.022217   597.435059   398.144653   398.144653  -993.432861  1390.810059           -993.432861  200.057861      200.057861
6     797.435059    -893.432861  7811.022217   797.435059   400.057861   799.115723  -893.432861  1390.810059           -893.432861  300.057861      300.057861
7     897.406128    -793.432861  7811.022217   897.406128   400.028931   799.057861  -793.432861  1390.810059           -793.432861  300.028931      300.028931
8     997.463989    -793.404053  7811.022217   997.463989   400.086792   799.173584  -793.404053  1390.838989           -793.404053  400.029053      300.057861
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=237/8192, 
, buffer=1229037/4096.[0m
[10/19 19:04:33]  --------------------------------------------------------------------------------
[10/19 19:04:33]  Iteration: 91 (0 solution, 90 counterexamples)
[10/19 19:04:56]  Generator returned sat in 20.943229 secs.
[10/19 19:04:56]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 19:04:57]  Improved gap from 0.0 to 100
[10/19 19:04:57]  Improved number of small numbers from 64 to 114 out of a max of 114
[10/19 19:04:57]  Verifer returned sat in 1.029136 secs.
[10/19 19:04:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1803.137207   -1803.195068  7811.022217 -1803.137207    0.115723    0.115723 -1803.195068   0.000000          -1803.195068    0.057861      -99.884033
1   -1603.252930   -1703.253174  7811.022217 -1603.252930  199.942139  199.942139 -1703.253174   0.000000          -1703.310791  100.000244        0.000244
2   -1603.252930   -1603.253174  7811.022217 -1603.252930    0.057617    0.057617 -1603.253174   0.000000          -1603.310791    0.000244      -99.999756
3   -1348.137451   -1503.195312  7811.022217 -1348.137451  255.115723  255.115723 -1503.195312   3.942139          -1503.195312  151.115723       51.173584
4   -1245.137451   -1379.579346  7811.022217 -1245.137451  254.115723  126.057861 -1379.579346   6.942139          -1379.579346  127.499756       51.173584
5   -1119.579590   -1279.079590  7811.022217 -1119.579590  253.115723  125.557861 -1279.079590  32.500000          -1279.079590  127.000000       51.173584
6    -994.521729   -1203.253174  7811.022217  -994.521729  252.115723  125.057861 -1203.253174  57.557861          -1103.195312  151.173584       51.173584
7    -894.579590   -1003.253174  7811.022217  -894.579590  251.115723  124.557861 -1003.253174  57.557861          -1003.253174   51.115723       51.115723
8    -757.532227   -1003.195068  7811.022217  -757.532227  188.163086  189.163086 -1003.195068  94.547363          -1003.195068  151.115479       51.173584
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=358831/4096, 
, buffer=209607/4096.[0m
[10/19 19:04:57]  --------------------------------------------------------------------------------
[10/19 19:04:57]  Iteration: 92 (0 solution, 91 counterexamples)
[10/19 19:06:06]  Generator returned sat in 66.719009 secs.
[10/19 19:06:06]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 19:06:07]  Improved number of small numbers from 70 to 113 out of a max of 113
[10/19 19:06:07]  Verifer returned sat in 0.404652 secs.
[10/19 19:06:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1454.110596   -1648.269043  7656.124512 -1454.110596    0.115479    0.115479 -1648.269043   0.000000          -1648.269043  194.158447       94.244873
1   -1354.125000   -1448.355469  7656.124512 -1354.125000  294.144043  294.144043 -1448.355469   0.000000          -1448.355469   94.230469       94.230469
2   -1354.125000   -1448.355469  7656.124512 -1354.125000    0.057373    0.057373 -1448.355469   0.000000          -1448.369873   94.230469       -5.769531
3   -1154.110596   -1252.153809  7656.124512 -1154.110596  294.244873  294.244873 -1252.153809   0.000000          -1252.153809   98.043213       94.244873
4   -1054.096191   -1151.182861  7656.124512 -1054.096191  198.057617  100.028809 -1151.182861   0.014404          -1151.182861   97.072266       94.244873
5    -954.110840   -1052.182617  7656.124512  -954.110840  197.057617  198.057617 -1052.182617   0.014404          -1052.182617   98.057373       94.230225
6    -854.081787    -948.355469  7656.124512  -854.081787  198.086426  100.043213  -948.355469   0.028809           -948.355469   94.244873       94.244873
7    -751.240234    -850.182617  7656.124512  -751.240234  197.086426  198.086426  -850.182617   2.870361           -850.182617   96.072021       94.244873
8    -651.225830    -848.341309  7656.124512  -651.225830  196.086426  197.086426  -848.341309   2.884766           -848.341309  194.230713       94.244873
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=11757/4096, 
, buffer=386027/4096.[0m
[10/19 19:06:07]  --------------------------------------------------------------------------------
[10/19 19:06:07]  Iteration: 93 (0 solution, 92 counterexamples)
[10/19 19:06:28]  Generator returned sat in 18.722759 secs.
[10/19 19:06:28]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 19:06:36]  Improved gap from 0.0 to 50.0
[10/19 19:06:37]  Improved number of small numbers from 68 to 75 out of a max of 114
[10/19 19:06:37]  Verifer returned sat in 9.002674 secs.
[10/19 19:06:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1248.370361   -1248.374531  7356.143574 -1248.370361    0.115479    0.115479 -1248.374531    0.000000          -1248.374531    0.004170        0.004170
1   -1148.370469   -1148.382656  7356.143574 -1148.370469  100.004063  100.004063 -1148.382656    0.000000          -1148.382656    0.012188        0.004063
2   -1048.369844   -1148.374219  7356.143574 -1048.369844  100.012812  100.012812 -1148.374219    0.000313          -1148.374219  100.004063        0.004375
3    -948.369531   -1048.374531  7356.143574  -948.369531  200.004375  200.004375 -1048.374531    0.000625          -1048.375000  100.004375        0.004375
4    -948.359531    -948.374531  7356.143574  -948.359531  200.000000    0.010000  -948.374531    0.000625           -948.375000    0.014375      -99.985625
5    -748.369844    -748.374531  7356.143574  -748.369844  200.004063  401.008125  -748.374531    0.000625           -748.374531    0.004063        0.004063
6    -448.372031    -648.374531  7356.143574  -448.372031  300.001875  601.003750  -648.374531  199.998125           -648.374531    0.004375        0.004375
7    -448.362031    -648.360156  7406.129199  -448.362031  400.000000    0.010000  -648.360156  199.998125           -648.360156    0.000000      -50.000000
8     -98.354844    -598.359619  7406.129199   -98.354844  350.007187  701.014375  -598.359619  400.000938           -598.359619  100.003838        0.004375
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1280001/3200, 
, buffer=7/1600.[0m
[10/19 19:06:37]  --------------------------------------------------------------------------------
[10/19 19:06:37]  Iteration: 94 (0 solution, 93 counterexamples)
[10/19 19:07:02]  Generator returned sat in 22.387793 secs.
[10/19 19:07:02]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 19:07:05]  Improved gap from 0.0 to 37.5
[10/19 19:07:06]  Improved number of small numbers from 47 to 69 out of a max of 114
[10/19 19:07:06]  Verifer returned sat in 3.822984 secs.
[10/19 19:07:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -949.598633   -1068.300671  7233.143799  -949.598633   0.115234    0.115234 -1068.300671        0.0          -1068.300671  118.702038      100.057690
1    -949.598633    -949.656323  7233.143799  -949.598633   0.029053    0.029053  -949.656323        0.0           -949.656323    0.057690        0.057690
2    -949.598633    -949.656323  7295.643799  -949.598633   0.029053    0.029053  -949.656323        0.0           -949.685303    0.057690      -37.442310
3    -912.156323    -912.156323  7356.143555  -912.156323  37.500000   37.500000  -912.156323        0.0           -912.185303    0.000000      -39.500244
4    -834.084149    -872.627453  7417.571625  -834.084149  78.072174  116.108261  -872.627453        0.0           -872.627453   38.543304        0.000000
5    -834.084149    -834.084149  7480.013885  -834.084149  38.514435   56.771652  -834.084149        0.0           -834.112793    0.000000      -37.557739
6    -776.298062    -796.526409  7541.201538  -776.298062  57.786087   85.679131  -796.526409        0.0           -796.555420   20.228348      -18.584000
7    -738.711453    -757.714062  7603.701416  -738.711453  57.814957   85.722435  -757.714062        0.0           -757.742920   19.002609      -18.497513
8    -700.257366    -720.185303  7666.172607  -700.257366  57.456696   85.185043  -720.185303        0.0           -720.185303   19.927936      -17.572235
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=409837/4096.[0m
[10/19 19:07:06]  --------------------------------------------------------------------------------
[10/19 19:07:06]  Iteration: 95 (0 solution, 94 counterexamples)
[10/19 19:07:48]  Generator returned sat in 40.281822 secs.
[10/19 19:07:49]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 19:07:52]  Improved gap from 0.0 to 43.75
[10/19 19:07:53]  Improved number of small numbers from 58 to 113 out of a max of 114
[10/19 19:07:53]  Verifer returned sat in 4.411166 secs.
[10/19 19:07:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -1067.136719   -1132.827637  7219.860596 -1067.136719    0.115234    0.115234 -1132.827637        0.0          -1132.827637  65.690918       65.690674
1   -1067.136719   -1067.194336  7219.860596 -1067.136719    0.057617    0.057617 -1067.194336        0.0          -1067.194336   0.057617      -34.309326
2   -1032.712646   -1032.770020  7276.053223 -1032.712646   34.481689   34.481689 -1032.770020        0.0          -1032.770020   0.057373      -43.692627
3    -896.288574    -896.288574  7276.053223  -896.288574  136.481445  136.481445  -896.288574        0.0           -896.288574   0.000000       -7.268555
4    -835.653809    -889.020020  7322.687012  -835.653809  119.269531   60.634766  -889.020020        0.0           -889.077637  53.366211        0.000000
5    -798.932861    -835.653809  7378.937012  -798.932861   90.087158   46.043579  -835.653809        0.0           -835.711426  36.720947       -7.029053
6    -748.153809    -791.903809  7435.187012  -748.153809   99.558105   50.779053  -791.903809        0.0           -791.961670  43.750000        0.000000
7    -738.711426    -748.153809  7491.436768  -738.711426   53.192383   27.596191  -748.153809        0.0           -748.211426   9.442383      -34.307861
8    -701.994873    -704.346436  7547.629395  -701.994873   71.433105   36.716553  -704.346436        0.0           -704.346436   2.351562      -41.398682
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=134535/2048.[0m
[10/19 19:07:53]  --------------------------------------------------------------------------------
[10/19 19:07:53]  Iteration: 96 (0 solution, 95 counterexamples)
[10/19 19:08:08]  Generator returned sat in 12.676240 secs.
[10/19 19:08:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:08:13]  Improved gap from 0.0 to 26.5625
[10/19 19:08:14]  Improved number of small numbers from 112 to 112 out of a max of 114
[10/19 19:08:14]  Verifer returned sat in 5.526976 secs.
[10/19 19:08:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1869.923340   -1869.923340  7288.340820 -1869.923340    0.115234    0.115234 -1869.923340   0.000000          -1869.923340    0.000000       -1.480469
1   -1868.442871   -1868.442871  7288.340820 -1868.442871    1.480469    1.480469 -1868.442871   0.000000          -1768.414062    0.000000     -100.000000
2   -1668.442871   -1668.442871  7288.340820 -1668.442871  200.000000  200.000000 -1668.442871   0.000000          -1668.442871    0.000000        0.000000
3   -1543.765137   -1568.442871  7288.340820 -1543.765137  124.677734  124.677734 -1568.442871   0.028809          -1568.442871   24.648926       24.648926
4   -1542.765137   -1568.442871  7361.778320 -1542.765137  300.480469    1.000000 -1568.442871   0.028809          -1541.851562   25.648926       -0.913574
5   -1417.173828   -1541.851562  7361.778320 -1417.173828  151.240234  150.240234 -1541.851562   0.057617          -1541.851562  124.620117       24.648926
6   -1416.202637   -1441.851562  7435.187012 -1416.202637  125.591309    1.000000 -1441.851562   0.057617          -1441.851562   25.591309       -0.971191
7   -1377.998291   -1415.289062  7497.953857 -1377.998291   63.795654   62.795654 -1415.289062   0.057617          -1415.317871   37.233154        0.000000
8   -1377.998291   -1378.055908  7497.953857 -1377.998291   32.897827   31.897827 -1378.055908   0.057617          -1278.027100    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=59/2048, 
, buffer=50481/2048.[0m
[10/19 19:08:14]  --------------------------------------------------------------------------------
[10/19 19:08:14]  Iteration: 97 (0 solution, 96 counterexamples)
[10/19 19:09:16]  Generator returned sat in 59.561447 secs.
[10/19 19:09:16]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:09:21]  Improved gap from 1.024390243902439 to 18.75
[10/19 19:09:22]  Improved number of small numbers from 59 to 71 out of a max of 114
[10/19 19:09:22]  Verifer returned sat in 6.422187 secs.
[10/19 19:09:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2023.651611   -2023.651829  7080.165820 -2023.651611    0.115234    0.115234 -2023.651829      0.000          -1923.626709    0.000218      -99.999782
1   -1912.226829   -1912.251829  7082.065820 -1912.226829  111.425000  111.425000 -1912.251829      0.000          -1912.251829    0.025000      -86.675000
2   -1671.189329   -1825.526829  7082.065820 -1671.189329  241.062500  241.062500 -1825.526829      0.025          -1825.526829  154.312500       54.337500
3   -1571.164329   -1625.551829  7082.065820 -1571.164329  254.337500  254.337500 -1625.551829      0.050          -1625.551829   54.337500       54.337500
4   -1471.139329   -1625.551829  7082.065820 -1471.139329  200.050000  100.025000 -1625.551829      0.075          -1525.526611  154.337500       54.337500
5   -1471.139329   -1525.551829  7127.728271 -1471.139329  144.350000   72.175000 -1525.551829      0.075          -1525.576660   54.337500       -0.000049
6   -1452.301829   -1471.189329  7208.890625 -1452.301829   73.175000   72.175000 -1471.189329      0.075          -1471.189329   18.812500       -0.000195
7   -1433.526829   -1452.351829  7290.115723 -1433.526829   37.587500   36.587500 -1452.351829      0.075          -1452.351829   18.750000       -0.000098
8   -1432.483079   -1433.576904  7290.115967 -1432.483079   19.793750   18.793750 -1433.576904      0.075          -1433.576904    1.018825      -98.956104
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=4347/80.[0m
[10/19 19:09:23]  --------------------------------------------------------------------------------
[10/19 19:09:23]  Iteration: 98 (0 solution, 97 counterexamples)
[10/19 19:09:30]  Generator returned sat in 5.040197 secs.
[10/19 19:09:30]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:09:33]  Improved gap from 0.0003846153846153846 to 18.75
[10/19 19:09:33]  Improved number of small numbers from 63 to 114 out of a max of 114
[10/19 19:09:33]  Verifer returned sat in 3.331141 secs.
[10/19 19:09:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2095.388916   -2095.388916  7052.123438 -2095.388916    0.115234    0.115234 -2095.388916   0.000000          -2095.388916    0.000000      -99.942236
1   -1995.331543   -1995.389160  7082.065918 -1995.331543  100.057373  100.057373 -1995.389160   0.000000          -1995.389160    0.057617      -69.942383
2   -1824.216309   -1925.389160  7082.065918 -1824.216309  171.172852  171.172852 -1925.389160   0.057617          -1925.389160  101.115234        1.115234
3   -1724.273926   -1725.389160  7082.065918 -1724.273926  201.057617  201.057617 -1725.389160   0.057617          -1725.389160    1.057617        1.057617
4   -1623.802734   -1725.389160  7082.065918 -1623.802734  101.528809  100.528809 -1725.389160   0.471191          -1625.331543  101.115234        1.115234
5   -1588.917969   -1625.389160  7143.315674 -1588.917969  136.000000   67.000000 -1625.389160   0.471191          -1625.446533   36.000000       -2.750244
6   -1555.917969   -1586.638916  7208.873291 -1555.917969   69.000000   68.000000 -1586.638916   0.471191          -1586.696777   30.249756       -4.192627
7   -1550.667725   -1552.196533  7290.123291 -1550.667725   35.500000   34.500000 -1552.196533   0.471191          -1552.254395    1.057617      -17.692383
8   -1532.975342   -1533.446533  7371.373291 -1532.975342   18.750000   17.750000 -1533.446533   0.471191          -1533.504395    0.000000      -18.750000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=571/512.[0m
[10/19 19:09:34]  --------------------------------------------------------------------------------
[10/19 19:09:34]  Iteration: 99 (0 solution, 98 counterexamples)
[10/19 19:09:53]  Generator returned sat in 16.921334 secs.
[10/19 19:09:53]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:09:55]  Improved gap from 0.0 to 10.9375
[10/19 19:09:55]  Improved number of small numbers from 66 to 114 out of a max of 114
[10/19 19:09:55]  Verifer returned sat in 1.891282 secs.
[10/19 19:09:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2124.633789   -2224.691406  7181.368164 -2124.633789    0.115234    0.115234 -2224.691406   0.000000          -2224.720215  100.057617        0.057617
1   -2124.633789   -2124.662598  7181.368164 -2124.633789  100.057373  100.057373 -2124.662598   0.000000          -2124.662598    0.028809      -99.942383
2   -1701.255127   -2024.662842  7181.368164 -1701.255127  423.407471  423.407471 -2024.662842   0.028564          -2024.662842  323.379150      223.407715
3   -1701.255127   -1862.773438  7181.368164 -1701.255127  320.921875  320.921875 -1862.773438   0.028564          -1862.773438  161.489746      123.407715
4   -1701.255127   -1776.465332  7181.368164 -1701.255127  161.460938  160.460938 -1776.465332   0.028564          -1776.465332   75.181641       23.407715
5   -1694.706299   -1724.662598  7251.411621 -1694.706299   81.730469   80.730469 -1724.662598   0.028564          -1724.662598   29.927734        0.000000
6   -1682.768799   -1694.734863  7339.474121 -1682.768799   41.865234   40.865234 -1694.734863   0.028564          -1682.768799   11.937500        0.000000
7   -1672.773682   -1682.768555  7427.507812 -1672.773682   21.932617   20.932617 -1682.768555   0.028564          -1682.768555    9.966309       -1.971191
8   -1670.773682   -1670.802490  7515.541748 -1670.773682   11.966309   10.966309 -1670.802490   0.028564          -1670.802490    0.000244      -11.937256
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=457539/2048.[0m
[10/19 19:09:55]  --------------------------------------------------------------------------------
[10/19 19:09:55]  Iteration: 100 (0 solution, 99 counterexamples)
[10/19 19:10:59]  Generator returned sat in 61.661922 secs.
[10/19 19:10:59]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 19:11:04]  Improved gap from 98.8271484375 to 100
[10/19 19:11:06]  Improved number of small numbers from 70 to 81 out of a max of 114
[10/19 19:11:06]  Verifer returned sat in 6.196567 secs.
[10/19 19:11:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3097.765137   -3202.434814  7515.541748 -3097.765137     0.114990     0.114990 -3202.434814    0.000000          -3202.434814  104.669678        4.727070
1   -3097.765137   -3097.822660  7515.541748 -3097.765137     0.057617     0.057617 -3097.822660    0.000000          -3097.822660    0.057523      -95.272930
2   -2601.816049   -3002.434589  7515.541748 -2601.816049   496.006611   496.006611 -3002.434589    0.057617          -3002.434589  400.560922      300.618540
3   -2001.139893   -2902.492206  7515.541748 -2001.139893  1001.237079  1001.237079 -2902.492206  500.733774          -2902.549805  400.618540      300.618540
4   -1901.139893   -2801.434589  7515.541748 -1901.139893   500.618540   500.618540 -2801.434589  500.733774          -2801.434589  399.560922      300.618540
5   -1901.139893   -2602.600154  7515.541748 -1901.139893   399.503305   598.254958 -2602.600154  500.733774          -2602.600154  200.726487      200.618540
6   -1701.197510   -2504.341215  7515.541748 -1701.197510   400.668870   600.003305 -2504.341215  500.733774          -2504.341215  302.409931      300.560922
7   -1603.197510   -2402.492206  7515.541748 -1603.197510   400.409931   599.614896 -2402.492206  500.733774          -2402.492206  298.560922      298.560922
8   -1501.082275   -2402.434570  7515.541748 -1501.082275   400.676157   600.014235 -2402.434570  500.791391          -2402.434570  400.560904      300.618540
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=59/1024, 
, buffer=2000917/6656.[0m
[10/19 19:11:06]  --------------------------------------------------------------------------------
[10/19 19:11:06]  Iteration: 101 (0 solution, 100 counterexamples)
[10/19 19:11:50]  Generator returned sat in 42.232111 secs.
[10/19 19:11:51]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 19:11:56]  Improved gap from 94.97125244140625 to 100
[10/19 19:11:56]  Improved number of small numbers from 45 to 114 out of a max of 114
[10/19 19:11:56]  Verifer returned sat in 5.583502 secs.
[10/19 19:11:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3061.295166   -3161.323975  7515.541748 -3061.295166    0.114990    0.114990 -3161.323975    0.000000          -3161.323975  100.028809        0.057617
1   -2961.266357   -3061.352783  7515.541748 -2961.266357  200.057617  200.057617 -3061.352783    0.028809          -2961.323730  100.057617        0.057617
2   -2861.237549   -2961.323730  7515.541748 -2861.237549  200.086426  200.086426 -2961.323730    0.057617          -2961.323730  100.028564        0.057617
3   -2861.237549   -2861.352539  7515.541748 -2861.237549   98.028564   98.028564 -2861.352539    0.057617          -2861.352539    0.057373      -99.942383
4   -2661.294922   -2661.352783  7515.541748 -2661.294922  200.000000  201.000000 -2661.352783    0.057617          -2661.352783    0.000244        0.000244
5   -2360.295166   -2617.852539  7515.541748 -2360.295166  301.000000  302.000000 -2617.852539  201.000000          -2617.852539   56.557373        0.057617
6   -2266.352539   -2467.352539  7515.541748 -2266.352539  150.500000  302.000000 -2467.352539  201.000000          -2467.352539    0.000000       -5.999756
7   -1993.102539   -2361.352783  7515.541748 -1993.102539  273.250000  274.250000 -2361.352783  368.192627          -2361.352783    0.057617        0.057617
8   -1856.535156   -2361.352783  7515.541748 -1856.535156  136.625000  274.250000 -2361.352783  404.760010          11934.487061  100.057617        0.057617
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=1657661/4096, 
, buffer=59/1024.[0m
[10/19 19:11:57]  --------------------------------------------------------------------------------
[10/19 19:11:57]  Iteration: 102 (0 solution, 101 counterexamples)
[10/19 19:12:38]  Generator returned sat in 39.114791 secs.
[10/19 19:12:38]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:12:46]  Verifer returned unsat in 7.609893 secs.
[10/19 19:12:46]  Proved solution: 
[1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:12:46]  --------------------------------------------------------------------------------
[10/19 19:12:46]  Iteration: 103 (1 solution, 101 counterexamples)
[10/19 19:12:54]  Generator returned sat in 6.216378 secs.
[10/19 19:12:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:13:01]  Verifer returned unsat in 7.000315 secs.
[10/19 19:13:01]  Proved solution: 
[1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:13:01]  --------------------------------------------------------------------------------
[10/19 19:13:01]  Iteration: 104 (2 solution, 101 counterexamples)
[10/19 19:13:13]  Generator returned sat in 9.126401 secs.
[10/19 19:13:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 19:13:19]  Verifer returned unsat in 6.626798 secs.
[10/19 19:13:19]  Proved solution: 
[1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 19:13:19]  --------------------------------------------------------------------------------
[10/19 19:13:19]  Iteration: 105 (3 solution, 101 counterexamples)
[10/19 19:13:32]  Generator returned sat in 10.075607 secs.
[10/19 19:13:32]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 19:13:36]  Verifer returned unsat in 4.309263 secs.
[10/19 19:13:36]  Proved solution: 
[1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 19:13:36]  --------------------------------------------------------------------------------
[10/19 19:13:36]  Iteration: 106 (4 solution, 101 counterexamples)
[10/19 19:14:57]  Generator returned sat in 78.782853 secs.
[10/19 19:14:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 19:15:18]  Improved gap from 0.0 to 26.5625
[10/19 19:15:19]  Improved number of small numbers from 50 to 114 out of a max of 114
[10/19 19:15:19]  Verifer returned sat in 21.494849 secs.
[10/19 19:15:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    -193.008789    -218.146240  7107.093506  -193.008789    0.114990    0.114990  -218.146240        0.0           -218.146240  25.137451        0.030029
1     -93.023682     -93.039062  7107.093506   -93.023682  125.122559  125.122559   -93.039062        0.0            -93.039062   0.015381        0.015137
2     -66.461426     -93.023926  7180.516113   -66.461426   26.577637   26.577637   -93.023926        0.0            -93.023926  26.562500        0.000000
3     -66.461426     -66.461426  7253.953613   -66.461426   26.547607   26.547607   -66.461426        0.0            -66.476562   0.000000      -26.562500
4     -20.403320     -39.883789  7326.375732   -20.403320   90.116211   46.058105   -39.883789        0.0            -39.883789  19.480469       -8.082275
5      16.914551     -12.306152  7397.140137    16.914551   72.635742   37.317871   -12.306152        0.0            -12.306152  29.220703        0.000000
6      56.752930      16.962402  7457.301758    56.752930   77.676758   39.838379    16.962402        0.0             16.962402  39.790527        0.000000
7      98.512695      56.768066  7515.541504    98.512695   81.550293   41.775146    56.768066        0.0             56.768066  41.744629       -0.000488
8     144.563232     125.083008  7561.409180   144.563232   90.101074   46.050537   125.083008        0.0            125.083008  19.480225       -8.082275
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=57/1888.[0m
[10/19 19:15:19]  --------------------------------------------------------------------------------
[10/19 19:15:19]  Iteration: 107 (4 solution, 102 counterexamples)
[10/19 19:15:54]  Generator returned sat in 32.534548 secs.
[10/19 19:15:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:15:57]  Improved number of small numbers from 51 to 74 out of a max of 113
[10/19 19:15:57]  Verifer returned sat in 3.062494 secs.
[10/19 19:15:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -399.770508    -504.655273  7318.767334  -399.770508    0.114990    0.114990  -504.655273    0.000000           -504.655273  104.884766        4.942139
1    -304.712646    -404.655273  7318.767334  -304.712646  199.942627  199.942627  -404.655273    0.000000           -404.655273   99.942627        0.000000
2    -199.827637    -304.655273  7318.767334  -199.827637  204.827637  204.827637  -304.655273    0.000000           -304.655273  104.827637        4.885010
3    -199.827637    -203.655273  7318.767334  -199.827637  104.770020  104.770020  -203.655273    0.000000           -203.655273    3.827637      -95.114990
4       0.229736      -4.712769  7318.767334     0.229736  203.885010  202.885010    -4.712769    0.000000             -4.712769    4.942505        4.942383
5     298.200989      43.830353  7318.767334   298.200989  302.913757  301.913757    43.830353  197.971252             43.830353   56.399384        4.942383
6     393.258484     195.287231  7318.767334   393.258484  151.456879  228.185318   195.287231  197.971252            195.287231    0.000000       -0.000122
7     668.458176     295.287231  7318.767334   668.458176  276.199692  275.199692   295.287231  368.228439            295.287231    4.942505        4.942383
8     801.615517     295.287354  7318.767334   801.615517  138.099846  208.149769   295.287354  401.385780            395.344482  104.942383        4.942383
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=52610437/131072, 
, buffer=5061/1024.[0m
[10/19 19:15:58]  --------------------------------------------------------------------------------
[10/19 19:15:58]  Iteration: 108 (4 solution, 103 counterexamples)
[10/19 19:16:14]  Generator returned sat in 14.460436 secs.
[10/19 19:16:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 19:16:22]  Improved number of small numbers from 56 to 113 out of a max of 113
[10/19 19:16:22]  Verifer returned sat in 7.219453 secs.
[10/19 19:16:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -698.712891    -798.770264  7612.824707  -698.712891    0.114990    0.114990  -798.770264    0.000000           -798.798828  100.057373        0.057373
1    -698.712891    -698.741699  7612.824707  -698.712891  100.028809  100.028809  -698.741699    0.000000           -698.741699    0.028809      -99.942627
2    -498.684082    -594.770264  7612.824707  -498.684082  200.057617  200.057617  -594.770264    0.028809           -594.770264   96.057373        0.057373
3    -498.683838    -498.770264  7612.824707  -498.683838   96.057617   96.057617  -498.770264    0.028809           -498.683838    0.057617      -99.942383
4    -299.712646    -299.770508  7612.824707  -299.712646  199.028809  199.028809  -299.770508    0.028809           -299.770508    0.029053       -0.971191
5       0.258301    -247.741699  7612.824707     0.258301  300.000000  300.000000  -247.741699  198.971191           -247.741699   49.028809        0.057373
6     100.229492     -98.770264  7612.824707   100.229492  149.000000  222.500000   -98.770264  198.971191            -98.770264    0.028564        0.028564
7     375.700928       1.229492  7612.824707   375.700928  275.500000  275.500000     1.229492  374.413818              1.229492    0.057617        0.057373
8     512.393311       1.258301  7612.824707   512.393311  136.750000  204.125000     1.258301  411.106201              1.258301  100.028809        0.057373
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=1683773/4096, 
, buffer=235/4096.[0m
[10/19 19:16:22]  --------------------------------------------------------------------------------
[10/19 19:16:22]  Iteration: 109 (4 solution, 104 counterexamples)
[10/19 19:17:13]  Generator returned sat in 48.185344 secs.
[10/19 19:17:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:17:14]  Improved number of small numbers from 59 to 63 out of a max of 113
[10/19 19:17:14]  Verifer returned sat in 1.180594 secs.
[10/19 19:17:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -697.826660    -798.770264  7612.824707  -697.826660    0.114746    0.114746  -798.770264    0.886414           -798.799072  100.057190        0.057190
1    -697.826660    -698.727173  7612.824707  -697.826660  100.028809  100.028809  -698.727173    0.886414           -698.727173    0.014099      -99.942810
2    -497.812195    -595.784058  7612.824707  -497.812195  200.028564  200.028564  -595.784058    0.900696           -595.784058   97.071167        0.057373
3    -496.855286    -498.770264  7612.824707  -496.855286   98.028076   98.028076  -498.770264    0.900696           -497.741943    1.014282      -98.985718
4    -297.855530    -299.770508  7612.824707  -297.855530  200.014038  199.014038  -299.770508    0.900696           -299.770508    1.014282        0.014038
5       1.615540    -247.984375  7612.824707     1.615540  300.485352  299.485352  -247.984375  200.328430           -247.984375   49.271484        0.057373
6     101.586731     -99.755981  7612.824707   101.586731  149.242676  222.864014   -99.755981  200.328430            -99.755981    1.014282        0.028564
7     375.700928       1.229492  7612.824707   375.700928  275.128479  274.128479     1.229492  374.413818              1.229492    0.057617        0.057373
8     512.207550       1.258057  7612.824707   512.207550  136.564240  203.846359     1.258057  410.920441              1.258057  100.029053        0.057373
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=13435527/32768, 
, buffer=235/4096.[0m
[10/19 19:17:14]  --------------------------------------------------------------------------------
[10/19 19:17:14]  Iteration: 110 (4 solution, 105 counterexamples)
[10/19 19:18:10]  Generator returned sat in 53.714559 secs.
[10/19 19:18:11]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:18:11]  Improved gap from 0.0 to 100
[10/19 19:18:12]  Improved number of small numbers from 59 to 73 out of a max of 114
[10/19 19:18:12]  Verifer returned sat in 1.613249 secs.
[10/19 19:18:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -494.928467    -494.928696  7612.824707  -494.928467    0.114502    0.114502  -494.928696   0.000000           -494.928696    0.000229        0.000229
1    -394.928696    -494.928696  7612.824707  -394.928696  100.000000  100.000000  -494.928696   0.000000           -394.871338  100.000000        0.000000
2    -246.641831    -394.871094  7612.824707  -246.641831  248.286865  248.286865  -394.871094   0.000000           -394.871094  148.229263       48.286865
3    -146.641846    -194.928696  7612.824707  -146.641846  248.229248  248.229248  -194.928696   0.000000           -194.928696   48.286851       48.286851
4     -44.928696     -96.699204  7612.824707   -44.928696  150.000000  149.000000   -96.699204   1.655762            -96.699204   50.114746       48.344238
5      55.128677       3.473145  7612.824707    55.128677  200.114746  100.057373     3.473145   1.713135              3.473145   49.942397       48.344238
6     155.214736      79.377293  7612.824707   155.214736  200.172119  100.086060    79.377293   1.799194             79.377293   74.038249       48.344238
7     219.329482     203.453791  7612.824707   219.329482  138.152995   69.076497   203.453791   1.799194            203.453791   14.076497       12.458984
8     355.329482     205.128662  7612.824707   355.329482  150.076497  149.076497   205.128662   1.913940            205.128662  148.286880       48.344238
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=2115/8192, 
, buffer=99009/2048.[0m
[10/19 19:18:13]  --------------------------------------------------------------------------------
[10/19 19:18:13]  Iteration: 111 (4 solution, 106 counterexamples)
[10/19 19:18:54]  Generator returned sat in 38.768784 secs.
[10/19 19:18:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 19:19:00]  Improved gap from 0.0 to 100
[10/19 19:19:01]  Improved number of small numbers from 49 to 63 out of a max of 114
[10/19 19:19:01]  Verifer returned sat in 7.129036 secs.
[10/19 19:19:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1209.216553   -1309.216721  8327.112732 -1209.216553    0.114258    0.114258 -1309.216721    0.00000          -1209.159668  100.000168        0.000168
1   -1209.216553   -1209.216721  8327.112732 -1209.216553    0.057373    0.057373 -1209.216721    0.00000          -1209.216797    0.000168      -99.999832
2   -1009.216721   -1109.216721  8327.112732 -1009.216721  200.000000  200.000000 -1109.216721    0.00000          -1009.159424  100.000000        0.000000
3    -299.957200   -1009.216721  8327.112732  -299.957200  809.259521  809.259521 -1009.216721  303.57251           -909.159668  405.687012      305.687012
4    -299.957200    -810.388474  8327.112732  -299.957200  405.629761  405.629761  -810.388474  303.57251           -810.388474  206.858765      205.687012
5    -104.586960    -709.216721  8327.112732  -104.586960  402.229004  602.343506  -709.216721  303.57251           -709.216721  301.057251      301.057251
6      -4.529709    -708.159470  8327.112732    -4.529709  401.114502  600.671753  -708.159470  303.57251           -708.159470  400.057251      301.114502
7      -4.529709    -509.216721  8327.112732    -4.529709  351.085876  525.628815  -509.216721  303.57251           -509.216721  201.114502      201.114502
8     120.484603    -509.159668  8327.112732   120.484603  326.128815  488.193222  -509.159668  303.57251           -509.159668  326.071761      226.128815
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=626047/2048.[0m
[10/19 19:19:01]  --------------------------------------------------------------------------------
[10/19 19:19:01]  Iteration: 112 (4 solution, 107 counterexamples)
[10/19 19:19:32]  Generator returned sat in 28.222188 secs.
[10/19 19:19:32]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:19:35]  Improved gap from 0.0001388888888888889 to 45.3125
[10/19 19:19:36]  Improved number of small numbers from 50 to 61 out of a max of 114
[10/19 19:19:36]  Verifer returned sat in 3.846761 secs.
[10/19 19:19:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -1110.263916   -1110.292415  8228.188232 -1110.263916    0.114014    0.114014 -1110.292415   0.000000          -1110.292415   0.028499        0.028306
1   -1110.235286   -1110.263850  8282.847168 -1110.235286    0.057129    0.057129 -1110.263850   0.000000          -1110.263850   0.028564      -45.284128
2   -1064.894221   -1064.922786  8336.506296 -1064.894221   45.369629   45.369629 -1064.922786   0.000000          -1064.922786   0.028564      -46.283936
3    -918.524592    -918.610286  8336.506296  -918.524592  146.398193  146.398193  -918.610286   0.028564           -918.610286   0.057129        0.057129
4    -871.104060    -917.325753  8389.028564  -871.104060   96.841064   47.420532  -917.325753   0.028564           -917.325753  46.193129       -0.000071
5    -820.828140    -869.608495  8438.752716  -820.828140   96.469048   95.469048  -869.608495   0.028564           -869.608495  48.751790        0.000000
6    -771.922786    -820.856705  8489.847361  -771.922786   97.657145   96.657145  -820.856705   0.028564           -820.885254  48.905355        0.000000
7    -771.922786    -771.951350  8544.534861  -771.922786   48.876790   47.876790  -771.951350   0.028564           -771.951172   0.000000      -45.312500
8    -700.235584    -726.638672  8544.534912  -700.235584   72.687202   71.687202  -726.638672   0.028564           -726.638672  26.374523      -73.625247
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=117/2048.[0m
[10/19 19:19:36]  --------------------------------------------------------------------------------
[10/19 19:19:36]  Iteration: 113 (4 solution, 108 counterexamples)
[10/19 19:19:54]  Generator returned sat in 15.699846 secs.
[10/19 19:19:55]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:19:59]  Improved gap from 0.0 to 40.625
[10/19 19:20:00]  Improved number of small numbers from 24 to 114 out of a max of 114
[10/19 19:20:00]  Verifer returned sat in 5.005565 secs.
[10/19 19:20:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0   -1238.854248   -1238.911133  8356.807129 -1238.854248    0.114014    0.114014 -1238.911133   0.000000          -1238.911133   0.056885        0.056885
1   -1138.882568   -1139.910889  8356.807129 -1138.882568  100.028564  100.028564 -1139.910889   0.000000          -1139.910889   1.028320        0.028564
2   -1038.882568   -1045.817139  8356.807129 -1038.882568  101.028320  101.028320 -1045.817139   0.000000          -1045.817139   6.934570        0.028564
3    -910.620850    -949.061279  8356.807129  -910.620850  135.196289  135.196289  -949.061279  28.233154           -949.061279  10.207275        0.057129
4    -852.229980    -938.882568  8398.359131  -852.229980   68.598145   69.598145  -938.882568  28.233154           -938.882568  58.419434        0.000000
5    -810.135254    -880.434814  8456.264404  -810.135254  100.514160   99.514160  -880.434814  28.233154           -880.434814  42.066406        0.000000
6    -769.510498    -838.368408  8515.639404  -769.510498   82.691162   81.691162  -838.368408  28.233154           -838.396973  40.624756       -0.000244
7    -754.788818    -797.743408  8575.014160  -754.788818   55.346436   54.346436  -797.743408  28.233154           -797.771729  14.721436      -25.903809
8    -698.940674    -757.089844  8575.014404  -698.940674   70.569580   69.569580  -757.089844  28.233154           -757.089844  29.916016      -70.055420
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=117/2048.[0m
[10/19 19:20:00]  --------------------------------------------------------------------------------
[10/19 19:20:00]  Iteration: 114 (4 solution, 109 counterexamples)
[10/19 19:20:26]  Generator returned sat in 24.010210 secs.
[10/19 19:20:26]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:20:30]  Improved gap from 0.0 to 37.5
[10/19 19:20:30]  Improved number of small numbers from 57 to 114 out of a max of 114
[10/19 19:20:30]  Verifer returned sat in 3.504431 secs.
[10/19 19:20:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1238.854492   -1338.882568  8456.778564 -1238.854492   0.113770   0.113770 -1338.882568        0.0          -1338.882568  100.028076      100.028076
1   -1238.854492   -1238.882568  8456.778564 -1238.854492   0.028320   0.028320 -1238.882568        0.0          -1238.882568    0.028076        0.028076
2   -1238.825684   -1238.882568  8510.278564 -1238.825684   0.056885   0.056885 -1238.882568        0.0          -1238.911133    0.056885      -46.443115
3   -1191.354248   -1192.382568  8572.778564 -1191.354248  47.528320  47.528320 -1192.382568        0.0          -1192.411377    1.028320      -36.471680
4   -1119.132568   -1154.854248  8630.835693 -1119.132568  73.250000  72.250000 -1154.854248        0.0          -1154.854248   35.721680       -6.192871
5   -1112.840088   -1112.939697  8693.335693 -1112.840088  42.014160  41.014160 -1112.939697        0.0          -1112.968506    0.099609      -37.400391
6   -1050.868652   -1075.439697  8755.835693 -1050.868652  62.971436  61.971436 -1075.439697        0.0          -1075.468506   24.571045      -12.928955
7   -1016.968262   -1037.911377  8818.307129 -1016.968262  58.471436  57.471436 -1037.911377        0.0          -1037.911377   20.943115      -16.557129
8    -979.439941   -1000.411133  8818.307129  -979.439941  58.471436  57.471436 -1000.411133        0.0           -979.411377   20.971191      -79.028809
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=102429/1024.[0m
[10/19 19:20:30]  --------------------------------------------------------------------------------
[10/19 19:20:30]  Iteration: 115 (4 solution, 110 counterexamples)
[10/19 19:21:07]  Generator returned sat in 34.722382 secs.
[10/19 19:21:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 19:21:11]  Improved gap from 0.0 to 100
[10/19 19:21:11]  Improved number of small numbers from 81 to 94 out of a max of 114
[10/19 19:21:11]  Verifer returned sat in 3.578375 secs.
[10/19 19:21:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2131.888916   -2331.888672  8572.778564 -2131.888916    0.113770    0.113770 -2331.888672    0.000000          -2231.860107  199.999756       99.999756
1   -2131.888916   -2231.888672  8572.778564 -2131.888916    0.028564    0.028564 -2231.888672    0.000000          -2231.916992   99.999756       -0.000244
2   -2131.860352   -2131.888672  8572.778564 -2131.860352  100.028320  100.028320 -2131.888672    0.000000          -2131.916992    0.028320      -99.971680
3   -1321.661133   -2031.860229  8572.778564 -1321.661133  810.227539  810.227539 -2031.860229  305.056885          -2031.860229  405.142212      305.170654
4   -1321.661133   -1832.888672  8572.778564 -1321.661133  405.113770  202.556885 -1832.888672  305.056885          -1832.888672  206.170654      205.170654
5   -1125.774902   -1830.860229  8572.778564 -1125.774902  402.056885  602.085327 -1830.860229  305.056885          -1830.860229  400.028442      301.056885
6   -1125.774902   -1731.860229  8572.778564 -1125.774902  351.542664  526.313995 -1731.860229  305.056885          -1731.860229  301.028442      201.056885
7   -1101.032013   -1531.888672  8572.778564 -1101.032013  325.771332  487.656998 -1531.888672  305.056885          -1531.888672  125.799774      125.799774
8    -913.446121   -1531.860352  8572.778564  -913.446121  313.385666  469.078499 -1531.860352  305.056885          -1531.860352  313.357346      213.385666
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1249979/4096.[0m
[10/19 19:21:12]  --------------------------------------------------------------------------------
[10/19 19:21:12]  Iteration: 116 (4 solution, 111 counterexamples)
[10/19 19:21:48]  Generator returned sat in 33.931858 secs.
[10/19 19:21:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:21:54]  Improved number of small numbers from 28 to 113 out of a max of 113
[10/19 19:21:54]  Verifer returned sat in 5.630896 secs.
[10/19 19:21:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1881.779785   -1981.808350  8222.726562 -1881.779785    0.113525    0.113525 -1981.808350    0.000000          -1981.808350  100.028564        0.056885
1   -1881.779785   -1881.808105  8222.726562 -1881.779785    0.028564    0.028564 -1881.808105    0.000000          -1881.808105    0.028320      -99.943115
2   -1681.751221   -1681.950684  8222.726562 -1681.751221  200.056885  200.056885 -1681.950684    0.028564          -1681.950684    0.170898        0.056885
3   -1581.780029   -1681.836670  8222.726562 -1581.780029  100.142090  100.142090 -1681.836670    0.028564          -1581.808105  100.028076        0.028076
4   -1481.751221   -1481.836670  8222.726562 -1481.751221  200.056885  199.056885 -1481.836670    0.028564          -1481.836670    0.056885        0.056885
5   -1182.737061   -1432.843994  8222.726562 -1182.737061  300.014160  299.014160 -1432.843994  199.042725          -1432.843994   51.064209        0.056885
6   -1082.794189   -1286.865234  8222.726562 -1082.794189  151.007080  302.014160 -1286.865234  199.042725          -1286.865234    5.028320       -0.000244
7    -814.833252   -1186.164307  8222.726562  -814.833252  272.989258  271.989258 -1186.164307  366.946533          -1186.164307    4.384521        0.056885
8    -681.723145   -1181.808350  8222.726562  -681.723145  137.494629  274.989258 -1181.808350  400.056641          -1181.808350  100.028564        0.056885
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=1638515/4096, 
, buffer=233/4096.[0m
[10/19 19:21:54]  --------------------------------------------------------------------------------
[10/19 19:21:54]  Iteration: 117 (4 solution, 112 counterexamples)
[10/19 19:22:29]  Generator returned sat in 32.763745 secs.
[10/19 19:22:30]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 19:22:37]  Improved gap from 0.0 to 48.4375
[10/19 19:22:38]  Improved number of small numbers from 60 to 70 out of a max of 114
[10/19 19:22:38]  Verifer returned sat in 8.198653 secs.
[10/19 19:22:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2668.780273   -2668.793654  9009.676797 -2668.780273    0.113525    0.113525 -2668.793654    0.00000          -2668.793654    0.013381        0.006631
1   -2668.780273   -2668.786904  9024.676797 -2668.780273    0.006750    0.006750 -2668.786904    0.00000          -2583.780273    0.006631      -84.993369
2   -2483.766654   -2583.780154  9024.676797 -2483.766654  185.020250  185.020250 -2583.780154    0.00675          -2583.780154  100.006750        0.013500
3   -2483.766654   -2483.786904  9024.677002 -2483.766654   44.912250   44.912250 -2483.786904    0.00675          -2483.793457    0.013500      -99.986295
4   -2368.820654   -2383.780154  9024.693672 -2368.820654  114.959500  229.919000 -2383.780154    0.00675          -2383.780154   14.952750      -85.023625
5   -2183.790279   -2183.803779  9024.693672 -2183.790279  199.983125  399.966250 -2183.803779    0.00675          -2183.803779    0.006750        0.006750
6   -1883.817279   -2083.803779  9024.693672 -1883.817279  299.979750  599.959500 -2083.803779  199.97300          -2083.803779    0.013500        0.013500
7   -1883.807279   -2083.780279  9075.232672 -1883.807279  398.983125    0.010000 -2083.780279  199.97300          -2083.780279    0.000000      -49.437500
8   -1534.315779   -2034.335938  9075.232672 -1534.315779  349.491500  698.983000 -2034.335938  400.01350          -2034.335938  100.006658        0.013500
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1600027/4000, 
, buffer=27/2000.[0m
[10/19 19:22:38]  --------------------------------------------------------------------------------
[10/19 19:22:38]  Iteration: 118 (4 solution, 113 counterexamples)
[10/19 19:23:39]  Generator returned sat in 58.420321 secs.
[10/19 19:23:39]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 19:23:44]  Improved gap from 0.0 to 100
[10/19 19:23:47]  Improved number of small numbers from 31 to 39 out of a max of 114
[10/19 19:23:47]  Verifer returned sat in 7.160707 secs.
[10/19 19:23:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -2913.701416   -3013.701606  10022.665291 -2913.701416    0.113525    0.113525 -3013.701606    0.000000          -3013.758301  100.000190        0.000190
1   -2913.644844   -2913.701606  10022.665291 -2913.644844  100.056763  100.056763 -2913.701606    0.000000          -2813.645020    0.056763      -99.943237
2   -2813.701606   -2813.701606  10022.665291 -2813.701606  100.000000  100.000000 -2813.701606    0.000000          -2813.758545    0.000000     -100.000000
3   -2011.474556   -2703.820808  10022.665291 -2011.474556  802.227051  802.227051 -2703.820808  292.175964          -2703.820808  400.170288      310.051086
4   -2011.474556   -2513.701606  10022.665291 -2011.474556  400.113525  601.170288 -2513.701606  292.175964          -2513.701606  210.051086      210.051086
5   -1821.468879   -2513.701606  10022.665291 -1821.468879  400.056763  799.113525 -2513.701606  292.175964          -2513.758301  400.056763      300.056763
6   -1821.468879   -2413.644844  10022.665291 -1821.468879  350.028381  699.056763 -2413.644844  292.175964          -2413.644844  300.000000      200.056763
7   -1801.366707   -2213.701606  10022.665291 -1801.366707  320.102173  639.204346 -2213.701606  292.175964          -2213.701606  120.158936      120.158936
8   -1611.474556   -2213.701606  10022.665291 -1611.474556  310.051086  619.102173 -2213.701606  292.175964          -2213.758301  310.051086      210.051086
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=5079877/16384.[0m
[10/19 19:23:47]  --------------------------------------------------------------------------------
[10/19 19:23:47]  Iteration: 119 (4 solution, 114 counterexamples)
[10/19 19:24:43]  Generator returned sat in 53.366135 secs.
[10/19 19:24:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 19:24:49]  Improved number of small numbers from 31 to 113 out of a max of 113
[10/19 19:24:49]  Verifer returned sat in 6.469144 secs.
[10/19 19:24:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -3045.067871   -3045.096191  10022.665283 -3045.067871    0.113525    0.113525 -3045.096191    0.000000          -3045.124756    0.028320      -99.971680
1   -2945.067871   -2945.096191  10022.665283 -2945.067871  100.028320  100.028320 -2945.096191    0.000000          -2845.068115    0.028320      -99.971680
2   -2845.067871   -2845.096191  10024.736084 -2845.067871  100.028320  100.028320 -2845.096191    0.000000          -2845.039551    0.028320      -97.900879
3   -2747.110596   -2747.138916  10024.736084 -2747.110596   97.985596   97.985596 -2747.138916    0.000000          -2747.138916    0.028320      -99.943604
4   -2549.167480   -2549.195557  10024.736328 -2549.167480  197.971436  197.971436 -2549.195557    0.000000          -2549.195557    0.028076       -2.000244
5   -2252.259521   -2495.635498  10024.736328 -2252.259521  296.936035  296.936035 -2495.635498  194.851074          -2495.635498   48.524902        0.056641
6   -2152.316406   -2348.195801  10024.736328 -2152.316406  148.468018  296.936035 -2348.195801  194.851074          -2348.195801    1.028320       -0.000244
7   -1879.639160   -2251.406494  10024.736328 -1879.639160  273.705566  273.705566 -2251.406494  367.471436          -2251.406494    4.295898        0.056641
8   -1747.082275   -2247.138916  10024.736328 -1747.082275  136.852783  273.705566 -2247.138916  400.028320          -2247.138916  100.028320        0.056641
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=409629/1024, 
, buffer=29/512.[0m
[10/19 19:24:50]  --------------------------------------------------------------------------------
[10/19 19:24:50]  Iteration: 120 (4 solution, 115 counterexamples)
[10/19 19:25:27]  Generator returned sat in 34.860797 secs.
[10/19 19:25:27]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:25:35]  Improved gap from 0.0004347826086956522 to 48.4375
[10/19 19:25:37]  Improved number of small numbers from 45 to 51 out of a max of 114
[10/19 19:25:37]  Verifer returned sat in 9.089334 secs.
[10/19 19:25:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4172.577881   -4172.582587  11248.198464 -4172.577881    0.113281    0.113281 -4172.582587    0.000000          -4172.582587    0.004706       -1.948508
1   -4069.634908   -4070.629373  11248.198464 -4069.634908  102.947679  102.947679 -4070.629373    0.000000          -4070.629373    0.994464        0.994464
2   -3970.629373   -4070.629373  11248.198464 -3970.629373  100.000000  100.000000 -4070.629373    0.000000          -4070.633789  100.000000        0.000000
3   -3869.625980   -3970.624908  11248.198464 -3869.625980  201.003393  201.003393 -3970.624908    0.004464          -3970.624908  100.994464        0.998929
4   -3869.615980   -3870.615980  11248.198464 -3869.615980  201.957679    0.010000 -3870.615980    0.004464          -3870.615980    0.995536      -98.991071
5   -3669.630444   -3670.639373  11248.198464 -3669.630444  200.985536  199.985536 -3670.639373    0.004464          -3670.639373    1.004464        0.994464
6   -3370.147141   -3570.691873  11248.198464 -3370.147141  300.487768  299.487768 -3570.691873  199.483304          -3570.691873    1.061429        0.998929
7   -3370.137141   -3570.624908  11299.756500 -3370.137141  399.933036    0.010000 -3570.624908  199.483304          -3570.624908    1.004464      -47.433036
8   -3021.179551   -3522.183105  11299.756500 -3021.179551  349.962054  348.962054 -3522.183105  400.008929          -3522.183105  100.994626        0.998929
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=89601/224, 
, buffer=2797/2800.[0m
[10/19 19:25:37]  --------------------------------------------------------------------------------
[10/19 19:25:37]  Iteration: 121 (4 solution, 116 counterexamples)
[10/19 19:26:12]  Generator returned sat in 32.840363 secs.
[10/19 19:26:12]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:26:18]  Improved gap from 0.0 to 100
[10/19 19:26:18]  Improved number of small numbers from 64 to 114 out of a max of 114
[10/19 19:26:18]  Verifer returned sat in 5.767651 secs.
[10/19 19:26:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4254.815186   -4355.928467  11333.497314 -4254.815186    0.113281    0.113281 -4355.928467    0.000000          -4355.985107  101.113281        1.113281
1   -4254.815186   -4255.928467  11333.497314 -4254.815186    0.056641    0.056641 -4255.928467    0.000000          -4255.928467    1.113281      -98.886719
2   -4054.871826   -4155.928467  11333.497314 -4054.871826  201.056641  201.056641 -4155.928467    0.000000          -4155.984863  101.056641        1.056641
3   -4054.871826   -4055.928467  11333.497314 -4054.871826  101.000000  101.000000 -4055.928467    0.000000          -4055.985107    1.056641      -98.943359
4   -3855.428467   -3860.485107  11333.497314 -3855.428467  200.500000  199.500000 -3860.485107    0.000000          -3860.485107    5.056641        0.500000
5   -3562.513428   -3804.943115  11333.497314 -3562.513428  297.971680  296.971680 -3804.943115  192.301758          -3804.943115   50.127930        1.113281
6   -3463.655518   -3656.900635  11333.497314 -3463.655518  148.985840  296.971680 -3656.900635  192.301758          -3656.900635    0.943359       -0.028809
7   -3190.648682   -3555.928467  11333.497314 -3190.648682  274.006836  273.006836 -3555.928467  364.166504          -3555.928467    1.113281        1.113281
8   -3054.758545   -3555.871826  11333.497314 -3054.758545  137.003418  273.006836 -3555.871826  400.056641          -3555.871826  101.056641        1.113281
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=204829/512, 
, buffer=285/256.[0m
[10/19 19:26:19]  --------------------------------------------------------------------------------
[10/19 19:26:19]  Iteration: 122 (4 solution, 117 counterexamples)
[10/19 19:26:46]  Generator returned sat in 24.374050 secs.
[10/19 19:26:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 19:26:59]  Improved gap from 0.0 to 46.875
[10/19 19:27:00]  Improved number of small numbers from 73 to 78 out of a max of 114
[10/19 19:27:00]  Verifer returned sat in 14.638427 secs.
[10/19 19:27:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -4254.906494   -4255.921114  11333.489962 -4254.906494    0.113281    0.113281 -4255.921114    0.000000          -4255.921114    1.014620        1.014620
1   -4154.913761   -4255.921114  11333.489962 -4154.913761  101.007353  101.007353 -4255.921114    0.000000          -4255.928467  101.007353        1.007353
2   -4054.899055   -4155.913761  11333.489962 -4054.899055  201.022059  201.022059 -4155.913761    0.007353          -4155.913761  101.007353        1.014706
3   -4054.899055   -4055.913761  11333.489962 -4054.899055    1.963235    1.963235 -4055.913761    0.007353          -4055.913761    1.007353      -98.985294
4   -3954.921114   -3955.921114  11333.997314 -3954.921114  100.985294   99.985294 -3955.921114    0.007353          -3955.928467    0.992647      -98.500000
5   -3755.428467   -3756.428467  11333.997314 -3755.428467  200.492647  199.492647 -3756.428467    0.007353          -3756.428467    0.992647        0.992647
6   -3456.439496   -3656.428467  11333.997314 -3456.439496  299.988971  298.988971 -3656.428467  198.974265          -3656.428467    1.014706        1.014706
7   -3456.429496   -3656.421114  11387.114962 -3456.429496  398.485294    0.010000 -3656.421114  198.974265          -3656.421114    1.017353      -45.857647
8   -3108.454202   -3609.538818  11387.114962 -3108.454202  348.992647  347.992647 -3609.538818  400.077206          -3609.538818  101.007410        1.014706
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=108819/272, 
, buffer=69/68.[0m
[10/19 19:27:01]  --------------------------------------------------------------------------------
[10/19 19:27:01]  Iteration: 123 (4 solution, 118 counterexamples)
[10/19 19:27:06]  Generator returned unsat in 2.763892 secs.
[10/19 19:27:06]  [96mNo more solutions found[0m
[10/19 19:27:06]  Final solutions:
[10/19 19:27:06]  0: [1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 19:27:06]  1: [1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 19:27:06]  2: [1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:27:06]  3: [1m[92mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 19:27:06]  Took 3303.574456 secs.
