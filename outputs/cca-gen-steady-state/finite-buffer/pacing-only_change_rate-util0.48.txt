[10/19 18:44:57]  --------------------------------------------------------------------------------
[10/19 18:44:57]  Iteration: 1 (0 solution, 0 counterexamples)
[10/19 18:44:57]  Generator returned sat in 0.005091 secs.
[10/19 18:44:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 18:44:57]  Improved gap from 0.125 to 100
[10/19 18:44:57]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 18:44:57]  Verifer returned sat in 0.358486 secs.
[10/19 18:44:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t  queue_t  bottle_queue_t
0      -704.0000       -704.000     704.0    -704.0000     0.125     0.1250     -704.000     0.0000              -704.000    0.000           0.000
1      -703.8750       -704.000     704.0    -703.8750     0.125     0.1250     -704.000     0.0000              -704.000    0.125         -99.875
2       300.0000       -604.000     704.0     300.0000  1004.000  1004.0000     -604.000     0.1250              -604.125  903.875         803.875
3       300.0000       -503.875     704.0     300.0000     0.125     0.1250     -503.875     0.1250              -503.875  803.750         703.875
4       300.0000       -404.000     704.0     300.0000   201.375   403.7500     -404.000     0.1250              -303.875  703.875         603.875
5       300.0000       -303.875     704.0     300.0000   703.750  1408.5000     -303.875     0.1250              -303.875  603.750         503.875
6      1404.8750       -186.875     704.0    1404.8750  1708.625  3418.2500     -186.875   705.0000              -186.875  886.750         803.875
7      3273.5000        -77.875     704.0    3273.5000  3735.250  1868.6250      -77.875  2473.6250               -77.875  877.750         803.875
8      7173.3125         -3.875     704.0    7173.3125  7797.625  3899.8125       -3.875  6273.4375                -3.875  903.750         803.875
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=100373/16, 
, buffer=6431/8.[0m
[10/19 18:44:58]  --------------------------------------------------------------------------------
[10/19 18:44:58]  Iteration: 2 (0 solution, 1 counterexamples)
[10/19 18:44:58]  Generator returned sat in 0.108061 secs.
[10/19 18:44:58]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:44:59]  Improved number of small numbers from 58 to 64 out of a max of 113
[10/19 18:44:59]  Verifer returned sat in 0.885278 secs.
[10/19 18:44:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -704.000000    -704.000000  703.999512  -704.000000     0.124512     0.124512  -704.000000     0.000000           -704.000000    0.000000        0.000000
1    -703.999756    -704.000000  703.999512  -703.999756     0.000244     0.000244  -704.000000     0.000000           -704.000488    0.000244      -99.999756
2     207.117877    -604.000000  703.999512   207.117877   911.117877   911.117877  -604.000000     0.000122           -604.125244  811.117755      711.117755
3     996.117999    -459.558938  703.999512   996.117999  1600.117877  1600.117877  -459.558938   689.000244           -459.558938  766.676693      711.117755
4    1518.382367    -404.000000  703.999512  1518.382367  1288.941062   644.470531  -404.000000  1111.264613           -303.875000  811.117755      711.117755
5    1951.735143    -204.000000  703.999512  1951.735143  1244.470531   622.235265  -204.000000  1444.617389           -204.000000  711.117755      711.117755
6    2662.852654    -104.000000  703.999512  2662.852654  1422.235265   711.117633  -104.000000  2055.734899           -104.000000  711.117755      711.117755
7    3373.970409     -26.000000  703.999512  3373.970409  1422.235510   711.117755   -26.000000  2666.852654            -26.000000  733.117755      711.117755
8    4107.529286      -4.000000  703.999512  4107.529286  1467.117755   733.558877    -4.000000  3300.411531            807.117920  811.117755      711.117755
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=609738713/278528, 
, buffer=99033103/139264.[0m
[10/19 18:44:59]  --------------------------------------------------------------------------------
[10/19 18:44:59]  Iteration: 3 (0 solution, 2 counterexamples)
[10/19 18:44:59]  Generator returned sat in 0.064238 secs.
[10/19 18:44:59]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:45:01]  Improved gap from 0.0016666666666666668 to 17.1875
[10/19 18:45:01]  Improved number of small numbers from 105 to 110 out of a max of 114
[10/19 18:45:01]  Verifer returned sat in 2.140656 secs.
[10/19 18:45:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -757.722039    -904.000000   803.999512  -757.722039    0.124268    0.124268  -904.000000    0.000000           -904.038086  146.277961       46.277961
1    -657.760254    -704.000000   803.999512  -657.760254  246.239746  246.239746  -704.000000    0.000000           -704.000000   46.239746       46.239746
2    -657.760254    -703.961806   803.999512  -657.760254    0.038086    0.038086  -703.961806    0.000000           -703.961806   46.201552      -53.760254
3    -119.002741    -504.000244   803.999512  -119.002741  584.959064  584.959064  -504.000244  338.719298           -504.000244   46.278205       46.277961
4      26.237025    -504.000000   803.999512    26.237025  292.479532  145.239766  -504.000000  383.959064           -403.961914  146.277961       46.277961
5      26.237025    -404.000000   857.721436    26.237025  146.239766   72.119883  -404.000000  383.959064           -357.684082   46.277961       -0.000116
6      53.078947    -357.683845   930.263184    53.078947   73.119883   36.559942  -357.683845  383.959064           -357.683845   26.803728       -0.616445
7      62.835161    -330.263672  1012.075928    62.835161   36.559942   18.279971  -330.263672  383.959064           -321.085693    9.139768       -9.047487
8      71.975146    -312.038330  1093.850098    71.975146   18.279971    9.139985  -312.038330  383.959064           -312.038330    0.054412      -18.133332
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=28137/608.[0m
[10/19 18:45:02]  --------------------------------------------------------------------------------
[10/19 18:45:02]  Iteration: 4 (0 solution, 3 counterexamples)
[10/19 18:45:02]  Generator returned sat in 0.118578 secs.
[10/19 18:45:02]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:45:05]  Improved gap from 17.116796303910817 to 17.1875
[10/19 18:45:06]  Improved number of small numbers from 33 to 69 out of a max of 114
[10/19 18:45:06]  Verifer returned sat in 3.758799 secs.
[10/19 18:45:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -445.686279    -583.496826  483.496338  -445.686279    0.124268    0.124268  -583.496826    0.000000           -904.038330  137.810547       37.810547
1    -383.434814    -383.497070  483.496338  -383.434814  200.062012  200.062012  -383.497070    0.000000           -383.497070    0.062256        0.062012
2    -383.434814    -383.465972  483.496550  -383.434814    0.031006    0.031006  -383.465972    0.000000           -383.465972    0.031157      -99.937776
3     167.528169    -186.999756  483.496550   167.528169  550.994141  550.994141  -186.999756  313.214539           -186.999756   41.313386       37.810669
4     306.276704    -183.465820  483.496550   306.276704  275.497070  138.748535  -183.465820  351.963074           -183.465820  137.779451       37.810669
5     306.276704     -81.154570  545.685791   306.276704  137.748535   69.874268   -81.154570  351.963074            -81.154570   35.468201       -0.000090
6     339.682771     -30.529937  612.279785   339.682771   68.874268   33.437134   -30.529937  351.963074            -30.529937   18.249634       -0.000029
7     355.870271     -12.249268  695.061035   355.870271   34.437134   16.218567   -12.249268  351.963074            -12.249268   16.156465       -1.031279
8     356.932373       4.969238  695.061279   356.932373   17.218567    7.609283     4.969238  351.963074              4.969238    0.000061      -99.968933
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=309745/8192.[0m
[10/19 18:45:06]  --------------------------------------------------------------------------------
[10/19 18:45:06]  Iteration: 5 (0 solution, 4 counterexamples)
[10/19 18:45:07]  Generator returned sat in 0.240904 secs.
[10/19 18:45:07]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:45:07]  Improved gap from 0.0016666666666666668 to 0
[10/19 18:45:08]  Improved number of small numbers from 41 to 55 out of a max of 114
[10/19 18:45:08]  Verifer returned sat in 1.018803 secs.
[10/19 18:45:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -483.434814    -583.497039  483.496550  -483.434814    0.124268    0.124268  -583.497039   0.060557           -904.038330  100.001667        0.001667
1    -383.434814    -483.496338  483.496550  -383.434814  200.001667  200.001667  -483.496338   0.060557           -483.496338  100.000966        0.001667
2    -383.434814    -383.496205  483.496550  -383.434814    0.000732    0.000732  -383.496205   0.060557           -383.496205    0.000833      -99.998333
3    -183.433981    -183.506348  483.496550  -183.433981  200.001667  200.001667  -183.506348   0.061391           -183.506348    0.010976        0.001667
4    -183.433981    -183.496205  583.494873  -183.433981    0.010000    0.010000  -183.496205   0.061391           -183.496205    0.000833       -0.000011
5    -183.424814    -183.487039  683.477384  -183.424814    0.010000    0.010000  -183.487039   0.061391           -183.487039    0.000833       -0.008333
6    -183.415648    -183.477872  783.476550  -183.415648    0.010000    0.010000  -183.477872   0.061391           -183.476318    0.000833        0.000000
7    -183.406481    -183.477039  883.467285  -183.406481    0.010000    0.010000  -183.477039   0.061391           -183.477783    0.009167       -0.000098
8    -183.405648    -183.467041  883.467529  -183.405648    0.010000    0.010000  -183.467041   0.061391           -183.467041    0.000002      -99.999021
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/600.[0m
[10/19 18:45:08]  --------------------------------------------------------------------------------
[10/19 18:45:08]  Iteration: 6 (0 solution, 5 counterexamples)
[10/19 18:45:08]  Generator returned sat in 0.186244 secs.
[10/19 18:45:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:45:09]  Improved gap from 0.0 to 100
[10/19 18:45:10]  Improved number of small numbers from 32 to 52 out of a max of 114
[10/19 18:45:10]  Verifer returned sat in 1.542592 secs.
[10/19 18:45:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -883.100586    -983.193583  883.193095  -883.100586    0.124268    0.124268  -983.193583   0.000000           -983.224609  100.092997        0.092997
1    -783.162516    -883.162598  883.193095  -783.162516  200.031067  200.031067  -883.162598   0.000000           -883.162598  100.000081        0.031067
2    -783.162516    -783.193583  883.193095  -783.162516    0.031250    0.031250  -783.193583   0.000000           -683.162598    0.031067      -99.968933
3    -580.069316    -583.193604  883.193095  -580.069316  203.124268  203.124268  -583.193604   3.031067           -583.193604    0.093221        0.093201
4    -479.007182    -583.162354  883.193095  -479.007182  202.124268  101.062134  -583.162354   4.093201           -583.162354  100.061971        0.093201
5    -378.445048    -483.193583  883.193095  -378.445048  201.124268  100.562134  -483.193583   4.655334           -483.224609  100.093201        0.093201
6    -278.413981    -382.693583  883.193095  -278.413981  200.124268  100.062134  -382.693583   4.686401           -382.693583   99.593201        0.093201
7    -178.882914    -281.193583  883.193095  -178.882914  199.124268   99.562134  -281.193583   4.686401           -281.193583   97.624268       -0.375732
8     -78.382914    -183.162598  883.193095   -78.382914  198.124268  296.186401  -183.162598   4.717468           -183.162598  100.062215        0.093201
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=2557/4096, 
, buffer=1527/16384.[0m
[10/19 18:45:10]  --------------------------------------------------------------------------------
[10/19 18:45:10]  Iteration: 7 (0 solution, 6 counterexamples)
[10/19 18:45:11]  Generator returned sat in 0.351154 secs.
[10/19 18:45:11]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + -1)
[0m
[10/19 18:45:11]  Improved gap from 0.0 to 0
[10/19 18:45:11]  Improved number of small numbers from 70 to 114 out of a max of 114
[10/19 18:45:11]  Verifer returned sat in 0.534454 secs.
[10/19 18:45:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -782.040039    -981.042480   881.044189  -782.040039    0.124268    0.124268  -981.042480   0.000000           -981.042480  199.002441       99.004639
1    -781.040039    -881.044678   881.044189  -781.040039  200.002441  200.002441  -881.044678   0.000000           -881.047119  100.004639        0.004639
2    -781.040039    -781.042236   981.039307  -781.040039  100.002686  100.002686  -781.042236   0.000000           -781.042236    0.002197       -0.000244
3    -582.032227    -681.040039   981.039307  -582.032227  199.010010  199.010010  -681.040039   0.002686           -681.040039   99.005127       99.004883
4    -582.032227    -582.037598   981.039551  -582.032227    1.000000    0.010000  -582.037598   0.002686           -582.037598    0.002686       -0.994873
5    -581.034912    -581.040039  1081.036865  -581.034912    1.000000    1.000000  -581.040039   0.002686           -581.040039    0.002441       -0.000244
6    -580.037354    -581.034912  1180.036865  -580.037354    1.000000    1.000000  -581.034912   0.002686           -581.034912    0.994873       -0.002686
7    -580.032227    -580.037354  1279.039307  -580.032227    1.000000    1.000000  -580.037354   0.002686           -580.037354    0.002441       -0.995117
8    -579.034668    -579.039795  1378.041748  -579.034668    1.000000    1.000000  -579.039795   0.002686           -579.042236    0.002441       -0.995117
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=101381/1024.[0m
[10/19 18:45:12]  --------------------------------------------------------------------------------
[10/19 18:45:12]  Iteration: 8 (0 solution, 7 counterexamples)
[10/19 18:45:12]  Generator returned sat in 0.355629 secs.
[10/19 18:45:12]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:45:13]  Improved gap from 0.0 to 100
[10/19 18:45:14]  Improved number of small numbers from 40 to 52 out of a max of 114
[10/19 18:45:14]  Verifer returned sat in 1.526991 secs.
[10/19 18:45:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -981.610107   -1081.609894  1279.039307  -981.610107    0.124268    0.124268 -1081.609894    0.000000          -1081.609894   99.999786       99.999786
1    -981.610107   -1081.609894  1279.039307  -981.610107    0.015625    0.015625 -1081.609894    0.000000          -1081.625244   99.999786       -0.000214
2    -682.047760    -981.594360  1279.039307  -682.047760  399.562134  399.562134  -981.594360    0.015533           -981.594360  299.531067      199.546600
3    -582.032227    -881.594360  1279.039307  -582.032227  399.546600  399.546600  -881.594360    0.031067           -881.594360  299.531067      199.546600
4    -480.532227    -781.594360  1279.039307  -480.532227  401.031067  201.515533  -781.594360    1.531067           -781.594360  299.531067      199.546600
5    -179.032227    -681.609894  1279.039307  -179.032227  601.031067  301.515533  -681.609894  203.031067           -681.625244  299.546600      199.546600
6     122.390106    -581.594360  1279.039307   122.390106  600.968933  301.484467  -581.594360  404.453400           -581.594360  299.531067      199.546600
7     423.859039    -481.594360  1279.039307   423.859039  601.000000  301.500000  -481.594360  605.922333           -481.594360  299.531067      199.546600
8     725.327972    -381.594482  1279.039307   725.327972  601.000000  301.500000  -381.594482  807.391266           -381.594482  299.531189      199.546600
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=26406427/32768, 
, buffer=6538743/32768.[0m
[10/19 18:45:14]  --------------------------------------------------------------------------------
[10/19 18:45:14]  Iteration: 9 (0 solution, 8 counterexamples)
[10/19 18:45:15]  Generator returned sat in 0.798480 secs.
[10/19 18:45:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:45:16]  Improved gap from 0.0 to 0
[10/19 18:45:16]  Improved number of small numbers from 61 to 82 out of a max of 114
[10/19 18:45:16]  Verifer returned sat in 0.889999 secs.
[10/19 18:45:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    -981.594238    -981.599365   730.089111  -981.594238    0.124023    0.124023  -981.599365        0.0           -981.599365   0.005127        0.004927
1    -981.594238    -981.596860   730.089307  -981.594238    0.002500    0.002500  -981.596860        0.0           -981.596860   0.002622      -99.994878
2    -881.596860    -881.599360   830.086670  -881.596860  100.000000  100.000000  -881.599360        0.0           -881.594482   0.002500       -0.000137
3    -830.589360    -881.594482   879.079307  -830.589360   51.010000   51.010000  -881.594482        0.0           -881.594482  51.005122        0.000000
4    -830.589360    -830.589360   979.079307  -830.589360   51.002441    0.010000  -830.589360        0.0           -830.586914   0.000000        0.000000
5    -830.579360    -830.589360  1079.069092  -830.579360   76.503750    0.010000  -830.589360        0.0           -830.591797   0.010000       -0.000215
6    -830.569360    -830.576904  1179.059307  -830.569360   26.505000    0.010000  -830.576904        0.0           -830.576904   0.007544        0.000000
7    -830.559360    -830.569360  1279.039307  -830.559360   26.508789    0.010000  -830.569360        0.0           -830.556885   0.010000       -0.010000
8    -830.549360    -830.549360  1379.039307  -830.549360    1.010000    0.010000  -830.549360        0.0           -830.546875   0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=21/4096.[0m
[10/19 18:45:17]  --------------------------------------------------------------------------------
[10/19 18:45:17]  Iteration: 10 (0 solution, 9 counterexamples)
[10/19 18:45:17]  Generator returned sat in 0.217605 secs.
[10/19 18:45:17]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:45:17]  Improved gap from 0.0 to 100
[10/19 18:45:18]  Improved number of small numbers from 40 to 46 out of a max of 114
[10/19 18:45:18]  Verifer returned sat in 1.407466 secs.
[10/19 18:45:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0   -1032.310547   -1034.403325  780.862266 -1032.310547    0.124023    0.124023 -1034.403325    0.000000          -1034.403325    2.092778        0.061772
1    -932.372319   -1032.372319  780.862266  -932.372319  102.031006  102.031006 -1032.372319    0.000000           -932.341553  100.000000        0.000000
2    -932.341313    -932.372319  780.862266  -932.341313  100.031006  100.031006  -932.372319    0.000000           -932.403564    0.031006      -99.968994
3    -732.279302    -832.372319  780.862266  -732.279302  200.093018  200.093018  -832.372319    0.031006           -732.279541  100.062012        0.062012
4    -632.248296    -732.341313  780.862266  -632.248296  202.062012  100.031006  -732.341313    0.062012           -732.341313  100.031006        0.062012
5    -507.225042    -532.372319  780.862266  -507.225042  252.046509  125.023254  -532.372319   25.085266           -532.372319    0.062012        0.062012
6    -344.713414    -506.372319  780.862266  -344.713414  327.023254  162.511627  -506.372319   87.596893           -506.372319   74.062012        0.062012
7    -181.957601    -332.372319  780.862266  -181.957601  327.511627  162.755814  -332.372319  150.352707           -332.372319    0.062012        0.062012
8      -0.587445    -332.372319  780.862266    -0.587445  364.740311  181.370155  -332.372319  231.722862           -332.403320  100.062012        0.062012
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=30364251/131072, 
, buffer=127/2048.[0m
[10/19 18:45:19]  --------------------------------------------------------------------------------
[10/19 18:45:19]  Iteration: 11 (0 solution, 10 counterexamples)
[10/19 18:45:20]  Generator returned sat in 0.733338 secs.
[10/19 18:45:20]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:45:20]  Improved gap from 0.0 to 0
[10/19 18:45:21]  Improved number of small numbers from 62 to 81 out of a max of 114
[10/19 18:45:21]  Verifer returned sat in 1.392131 secs.
[10/19 18:45:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -932.439453   -1032.474993   680.964939  -932.439453    0.123779    0.123779 -1032.474993        0.0           -932.439453  100.035540        0.035540
1    -932.439279    -932.439279   780.929199  -932.439279  100.035714  100.035714  -932.439279        0.0           -932.439279    0.000000       -0.000026
2    -932.367850    -932.403564   880.857796  -932.367850    0.071429    0.071429  -932.403564        0.0           -932.403564    0.035714        0.000000
3    -932.367850    -932.367850   980.857666  -932.367850    0.035645    0.035645  -932.367850        0.0           -932.332031    0.000000       -0.000130
4    -931.367850    -931.931342  1079.857666  -931.367850   51.053571    1.000000  -931.931342        0.0           -931.931342    0.563492       -0.000130
5    -930.677374    -931.332275  1179.167320  -930.677374    1.253968    1.000000  -931.332275        0.0           -931.332275    0.654901        0.000000
6    -929.796631    -930.677374  1278.286368  -929.796631    1.535645    1.000000  -930.677374        0.0           -930.712891    0.880743       -0.000209
7    -928.832136    -929.796422  1376.357666  -928.832136    1.845238    1.000000  -929.796422        0.0           -929.796631    0.964286       -0.964416
8    -927.832136    -927.832275  1376.357666  -927.832136    2.067460    1.000000  -927.832275        0.0           -927.832275    0.000140      -99.964416
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=73/1024.[0m
[10/19 18:45:22]  --------------------------------------------------------------------------------
[10/19 18:45:22]  Iteration: 12 (0 solution, 11 counterexamples)
[10/19 18:45:22]  Generator returned sat in 0.495353 secs.
[10/19 18:45:22]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 18:45:24]  Improved gap from 0.0 to 18.75
[10/19 18:45:25]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 18:45:25]  Verifer returned sat in 2.221137 secs.
[10/19 18:45:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -908.024170   -1045.117676  693.607666  -908.024170    0.123779    0.123779 -1045.117676    0.00000           -945.008545  137.093506       37.093506
1    -863.867676    -863.867920  693.607910  -863.867676  181.250000  181.250000  -863.867920    0.00000           -863.867920    0.000244      -18.749756
2    -844.899170    -845.008301  774.748291  -844.899170   18.968750   18.968750  -845.008301    0.00000           -845.008301    0.109131      -18.640869
3    -303.508301    -726.258545  774.748291  -303.508301  541.500000  541.500000  -726.258545  385.65625           -726.258545   37.093994       37.093750
4    -168.633301    -726.148926  774.748291  -168.633301  271.750000  134.875000  -726.148926  420.53125           -726.148926  136.984375       37.093750
5    -168.633301    -622.664795  837.654541  -168.633301  136.875000   67.437500  -622.664795  420.53125           -622.664795   33.500244        0.000000
6    -132.696045    -589.055420  901.717285  -132.696045   69.437500   70.437500  -589.055420  420.53125           -589.055420   35.828125        0.000000
7    -132.696045    -553.227295  982.967041  -132.696045   35.718750   36.718750  -553.227295  420.53125           -553.336670    0.000000      -18.750244
8    -113.836670    -534.367920  982.967041  -113.836670   18.859375   19.859375  -534.367920  420.53125           -534.367920    0.000000      -99.890869
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=1187/32.[0m
[10/19 18:45:25]  --------------------------------------------------------------------------------
[10/19 18:45:25]  Iteration: 13 (0 solution, 12 counterexamples)
[10/19 18:45:26]  Generator returned sat in 0.722512 secs.
[10/19 18:45:26]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 18:45:27]  Improved gap from 0.0 to 100
[10/19 18:45:28]  Improved number of small numbers from 32 to 38 out of a max of 114
[10/19 18:45:28]  Verifer returned sat in 2.260474 secs.
[10/19 18:45:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -603.539307    -714.405289  774.748291  -603.539307    0.123535    0.123535  -714.405289   0.000000           -714.405289  110.865982       10.881454
1    -503.554718    -614.405289  774.748291  -503.554718  210.850571  210.850571  -614.405289   0.000000           -614.405289  110.850571       10.866043
2    -403.523773    -512.482651  774.748291  -403.523773  210.881516  210.881516  -512.482651   0.015472           -512.482651  108.943405       10.881516
3    -303.508301    -316.343399  774.748291  -303.508301  208.958878  208.958878  -316.343399   0.030945           -316.343399   12.804153       10.881516
4    -203.492828    -216.343399  774.748291  -203.492828  200.030945  100.015472  -216.343399   0.046417           -216.343399   12.804153       10.881516
5    -103.477356    -114.420761  774.748291  -103.477356  200.030945  100.015472  -114.420761   0.061890           -114.420761   10.881516       10.881516
6      -3.461884     -67.312454  774.748291    -3.461884  200.030945  100.015472   -67.312454   0.077362            -67.312454   63.773209       10.881516
7      58.280380      58.203018  774.748291    58.280380  125.515472   62.757736    58.203018   0.077362             58.203018    0.000000      -27.376221
8     196.553589      85.594482  774.748291   196.553589  138.273209  277.546417    85.594482   0.092834             85.594482  110.866272       10.881516
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1521/32768, 
, buffer=713131/65536.[0m
[10/19 18:45:29]  --------------------------------------------------------------------------------
[10/19 18:45:29]  Iteration: 14 (0 solution, 13 counterexamples)
[10/19 18:45:29]  Generator returned sat in 0.084693 secs.
[10/19 18:45:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 18:45:32]  Improved gap from 0.0 to 45.3125
[10/19 18:45:33]  Improved number of small numbers from 33 to 46 out of a max of 114
[10/19 18:45:33]  Verifer returned sat in 3.551478 secs.
[10/19 18:45:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    -305.711914    -305.773530   774.748291  -305.711914    0.123535    0.123535  -305.773530   0.000000           -305.773530   0.061616        0.061616
1    -254.871349    -300.183849   823.846110  -254.871349   50.902181   50.902181  -300.183849   0.000000           -300.183849  45.312500        0.000000
2    -254.871349    -254.871349   878.533610  -254.871349    0.031006    0.031006  -254.871349   0.000000           -209.528076   0.000000      -45.312500
3    -109.466198    -109.558849   878.533610  -109.466198  145.405151  145.405151  -109.558849   0.030884           -109.558849   0.061768        0.061768
4     -60.912527    -109.558849   929.917969   -60.912527   99.107340   48.553670  -109.558849   0.030884           -109.589600  48.615438       -0.000203
5     -13.215465     -60.912527   981.501465   -13.215465   96.312500  193.625000   -60.912527   0.030884            -60.912527  47.666178       -0.719645
6      37.097767     -12.495616  1031.907878    37.097767   97.979411  196.958822   -12.495616   0.030884            -12.495616  49.562500        0.000000
7      37.097767      37.066884  1086.595215    37.097767   49.531616  100.063232    37.066884   0.030884             37.036133   0.000000      -45.312663
8     111.410634      82.410156  1086.595459   111.410634   74.312866  149.625732    82.410156   0.030884             82.410156  28.969594      -70.999552
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=253/4096.[0m
[10/19 18:45:33]  --------------------------------------------------------------------------------
[10/19 18:45:33]  Iteration: 15 (0 solution, 14 counterexamples)
[10/19 18:45:35]  Generator returned sat in 1.265133 secs.
[10/19 18:45:35]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 18:45:35]  Improved gap from 0.0 to 0
[10/19 18:45:35]  Improved number of small numbers from 29 to 114 out of a max of 114
[10/19 18:45:35]  Verifer returned sat in 0.555959 secs.
[10/19 18:45:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -254.840576    -455.871338   774.748047  -254.840576    0.123535    0.123535  -455.871338   0.027100           -455.875000  201.003662      101.003662
1    -254.840576    -255.871338   774.748047  -254.840576  201.000000  201.000000  -255.871338   0.027100           -255.871338    1.003662        1.003662
2    -254.836426    -254.867432   873.740234  -254.836426    1.007812    1.007812  -254.867432   0.027100           -254.867432    0.003906        0.000000
3     -53.828857    -154.863525   873.740234   -53.828857  201.011475  201.011475  -154.863525   0.031006           -154.863525  101.003662      101.003662
4     -53.828857     -54.863770   873.740234   -53.828857    1.000000    1.500000   -54.863770   0.031006            -54.863770    1.003906        1.003662
5     -53.828857     -54.863525   972.736572   -53.828857    1.000000    0.500000   -54.863525   0.031006            -53.855957    1.003662        0.000000
6     -53.828857     -53.859863  1072.236572   -53.828857    1.000000    0.500000   -53.859863   0.031006            -53.863525    0.000000       -0.500000
7     -53.328857     -53.359863  1172.236572   -53.328857    1.000000    0.500000   -53.359863   0.031006            -53.363525    0.000000        0.000000
8     -52.828857     -53.355713  1172.236572   -52.828857    1.000000    0.500000   -53.355713   0.031006            -53.355713    0.495850      -99.500000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=413711/4096.[0m
[10/19 18:45:36]  --------------------------------------------------------------------------------
[10/19 18:45:36]  Iteration: 16 (0 solution, 15 counterexamples)
[10/19 18:45:36]  Generator returned sat in 0.460903 secs.
[10/19 18:45:37]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:45:40]  Improved gap from 0.0 to 43.75
[10/19 18:45:41]  Improved number of small numbers from 68 to 114 out of a max of 114
[10/19 18:45:41]  Verifer returned sat in 4.230907 secs.
[10/19 18:45:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0     333.596436     233.565186  366.099609   333.596436    0.123535    0.123535   233.565186        0.0            233.565186  100.031250      100.031250
1     333.596436     316.643555  366.099609   333.596436    0.031250    0.031250   316.643555        0.0            316.643555   16.952881        0.031250
2     333.596436     333.565186  422.349365   333.596436    0.031250    0.031250   333.565186        0.0            377.346436    0.031250      -43.718994
3     477.315186     477.315186  422.349365   477.315186  143.750000  143.750000   477.315186        0.0            477.315186    0.000000       -0.000244
4     537.752686     477.346680  461.911865   537.752686  122.875000   60.437500   477.346680        0.0            477.346680   60.406006       -0.000244
5     558.698242     537.940186  517.974365   558.698242   81.351562   39.675781   537.940186        0.0            537.940186   20.758057      -22.992188
6     609.291992     581.721436  574.193359   609.291992  103.187500   50.593750   581.721436        0.0            581.721436   27.570557      -16.179443
7     634.893555     625.502930  630.411865   634.893555   53.203125   25.601562   625.502930        0.0            625.502930    9.390625      -34.359375
8     671.432617     669.283936  630.411865   671.432617   75.078125   36.539062   669.283936        0.0            669.283936    2.148682      -97.820312
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=3201/32.[0m
[10/19 18:45:41]  --------------------------------------------------------------------------------
[10/19 18:45:41]  Iteration: 17 (0 solution, 16 counterexamples)
[10/19 18:45:43]  Generator returned sat in 1.343238 secs.
[10/19 18:45:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:45:44]  Improved gap from 1.2884615384615385 to 100
[10/19 18:45:45]  Improved number of small numbers from 25 to 38 out of a max of 114
[10/19 18:45:45]  Verifer returned sat in 1.970659 secs.
[10/19 18:45:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0     -48.513672    -148.528908  648.193703   -48.513672    0.123291    0.123291  -148.528908   0.000000           -148.544434  100.015236        0.015236
1     -48.513672     -48.528908  648.193703   -48.513672    0.015625    0.015625   -48.528908   0.000000            -48.529053    0.015236      -99.984764
2     173.256302      51.471092  648.193703   173.256302  221.785210  221.785210    51.471092   0.015442             51.455811  121.769768       21.769768
3     273.271744     249.532860  648.193703   273.271744  221.785210  221.785210   249.532860   0.030884            249.532860   23.708000       21.769768
4     373.287186     349.532860  648.193703   373.287186  200.030884  100.015442   349.532860   0.046326            349.532860   23.708000       21.769768
5     473.302628     449.532860  648.193703   473.302628  200.030884  100.015442   449.532860   0.061768            449.532860   23.708000       21.769768
6     573.318069     508.086906  648.193703   573.318069  200.030884  100.015442   508.086906   0.077209            508.086906   65.153954       21.769768
7     638.441139     631.348488  648.193703   638.441139  130.277023   65.138512   631.348488   0.077209            631.348488    7.015442      -13.107162
8     773.333511     651.486328  648.193703   773.333511  141.907814  140.907814   651.486328   0.092651            651.486328  121.754532       21.769768
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=759/16384, 
, buffer=2853407/131072.[0m
[10/19 18:45:45]  --------------------------------------------------------------------------------
[10/19 18:45:45]  Iteration: 18 (0 solution, 17 counterexamples)
[10/19 18:45:46]  Generator returned sat in 0.394297 secs.
[10/19 18:45:46]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:45:51]  Improved gap from 0.0 to 43.75
[10/19 18:45:52]  Improved number of small numbers from 60 to 74 out of a max of 114
[10/19 18:45:52]  Verifer returned sat in 6.368271 secs.
[10/19 18:45:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0     593.604248     592.170852    6.093994   593.604248    0.123047    0.123047   592.170852        0.0            592.170852   1.433396        0.033447
1     642.454185     593.570852   57.210449   642.454185   50.283333   50.283333   593.570852        0.0            593.570852  48.883333       -0.000160
2     642.487519     642.470852  113.443848   642.487519   48.916667   48.916667   642.470852        0.0            642.470852   0.016667      -43.733428
3     785.970852     785.970852  113.443848   785.970852  143.500000  143.500000   785.970852        0.0            785.970852   0.000000       -0.250095
4     834.920852     786.237519  164.743896   834.920852   97.900000   48.950000   786.237519        0.0            786.237519  48.683333       -0.000046
5     883.570852     834.937519  216.093750   883.570852   97.333333   48.666667   834.937519        0.0            834.937519  48.633333       -0.000193
6     932.170852     890.420852  265.493896   932.170852   97.233333   48.616667   890.420852        0.0            890.420852  41.750000       -2.000046
7     943.645852     934.187519  321.727051   943.645852   53.225000   26.612500   934.187519        0.0            934.187519   9.458333      -34.291892
8     981.133352     977.954102  377.960693   981.133352   74.975000   37.487500   977.954102        0.0            977.954102   3.179251      -40.570749
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=137/4096.[0m
[10/19 18:45:53]  --------------------------------------------------------------------------------
[10/19 18:45:53]  Iteration: 19 (0 solution, 18 counterexamples)
[10/19 18:45:54]  Generator returned sat in 0.749519 secs.
[10/19 18:45:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 18:45:58]  Improved gap from 0.0 to 43.75
[10/19 18:45:59]  Improved number of small numbers from 62 to 70 out of a max of 114
[10/19 18:45:59]  Verifer returned sat in 5.260394 secs.
[10/19 18:45:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0     671.410400     671.410227  -14.724854   671.410400    0.122803    0.122803   671.410227        0.0            671.410227   0.000173        0.000173
1     715.170644     671.420644   41.514648   715.170644   43.760417   43.760417   671.420644        0.0            671.420644  43.750000       -0.000081
2     715.181060     715.181060   96.754313   715.181060   43.760417   43.760417   715.181060        0.0            715.181060   0.000000      -44.750000
3     842.962310     842.962310   96.754313   842.962310  127.781250  127.781250   842.962310        0.0            842.962310   0.000000      -16.968750
4     887.350331     859.931060  153.004150   887.350331   86.776042   44.388021   859.931060        0.0            859.920410  27.419271      -16.330892
5     935.977935     903.691477  209.243896   935.977935   95.255208   48.627604   903.691477        0.0            903.691477  32.286458      -11.463542
6     984.605540     947.441477  265.493896   984.605540   95.255208   48.627604   947.441477        0.0            947.431152  37.164062       -6.585938
7    1000.681060     991.201894  321.733480  1000.681060   53.239583   27.619792   991.201894        0.0            991.201894   9.479167      -34.270833
8    1034.998769    1034.951894  321.733643  1034.998769   66.635417   34.317708  1034.951894        0.0           1134.962402   0.046875      -99.952962
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=43/2048.[0m
[10/19 18:46:00]  --------------------------------------------------------------------------------
[10/19 18:46:00]  Iteration: 20 (0 solution, 19 counterexamples)
[10/19 18:46:03]  Generator returned sat in 3.306517 secs.
[10/19 18:46:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:46:04]  Improved gap from 0.0 to 100
[10/19 18:46:04]  Improved number of small numbers from 43 to 114 out of a max of 114
[10/19 18:46:04]  Verifer returned sat in 0.512050 secs.
[10/19 18:46:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t      cwnd_0,t      rate_0,t  service_0,t  losts_0,t  tot_service_choice_t       queue_t  bottle_queue_t
0     248.400391     248.338623  209.243652    248.400391      0.122803      0.122803   248.338623   0.000000            248.338623      0.061768        0.030762
1     248.400391     248.369629  209.243652    248.400391      0.030762      0.030762   248.369629   0.000000            248.338867      0.030762      -99.969238
2   33463.522949     448.369385  209.243652  33463.522949  33215.153320  33215.153320   448.369385   0.030518            448.369385  33015.123047    33015.122803
3   33567.492188     448.400391  209.243652  33567.492188  33119.092285  33119.092285   448.400391   3.999756            448.400391  33115.092041    33015.122803
4   33570.492432     646.369629  209.243652  33570.492432  33118.092285  16558.046143   646.369629   3.999756            646.369629  32920.123047    32918.123047
5   33767.461670     747.430908  209.243652  33767.461670  33117.092285  33116.092285   747.430908   3.999756            747.430908  33016.031006    33015.092285
6   33867.522949     748.369629  209.243652  33867.522949  33116.092285  33115.092285   748.369629   4.030518          33863.523193  33115.122803    33015.122803
7   33867.522949     939.369629  209.243652  33867.522949  33115.092285  16556.546143   939.369629   4.030518            939.369629  32924.122803    32915.122803
8   34057.492432     948.400146  209.243652  34057.492432  33114.092285  33113.092285   948.400146   4.030518            948.400146  33105.061768    33005.092285
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=63/2048, 
, buffer=135229943/4096.[0m
[10/19 18:46:04]  --------------------------------------------------------------------------------
[10/19 18:46:04]  Iteration: 21 (0 solution, 20 counterexamples)
[10/19 18:46:08]  Generator returned sat in 2.680971 secs.
[10/19 18:46:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 18:46:09]  Improved gap from 0.0 to 100
[10/19 18:46:10]  Improved number of small numbers from 31 to 38 out of a max of 114
[10/19 18:46:10]  Verifer returned sat in 2.614612 secs.
[10/19 18:46:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0     448.185303     297.338928  60.335754   448.185303    0.122803    0.122803   297.338928    0.000000            297.338928  150.846375       50.907776
1     548.124023     397.338928  60.335754   548.124023  250.785095  250.785095   397.338928    0.000000            397.338928  150.785095       50.846497
2     648.246826     499.626129  60.335754   648.246826  250.907898  250.907898   499.626129    0.061401            499.626129  148.559296       50.907898
3     798.858612     597.431030  60.335754   798.858612  299.171082  299.171082   597.431030   50.673187            597.431030  150.754395       50.907898
4     947.674408     697.338928  60.335754   947.674408  299.631592  148.815796   697.338928   99.488983            697.338928  150.846497       50.907898
5    1096.582306     797.661285  60.335754  1096.582306  299.815796  148.907898   797.661285  148.396881            797.661285  150.524139       50.907898
6    1244.983643     897.400330  60.335754  1244.983643  298.925476  148.462738   897.400330  196.798218            897.400330  150.785095       50.907898
7    1393.645935     997.277527  60.335754  1393.645935  299.447388  148.723694   997.277527  245.460510            997.216309  150.907898       50.907898
8    1542.431030    1097.338867  60.335754  1542.431030  299.692993  148.846497  1097.338867  294.245605           1097.338867  150.846558       50.907898
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=6381785/32768, 
, buffer=834075/16384.[0m
[10/19 18:46:11]  --------------------------------------------------------------------------------
[10/19 18:46:11]  Iteration: 22 (0 solution, 21 counterexamples)
[10/19 18:46:15]  Generator returned sat in 4.130356 secs.
[10/19 18:46:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 18:46:15]  Improved gap from 0.0 to 0
[10/19 18:46:16]  Improved number of small numbers from 59 to 90 out of a max of 114
[10/19 18:46:16]  Verifer returned sat in 0.890501 secs.
[10/19 18:46:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0     695.270264     695.268799 -637.604980   695.270264  0.122559  0.122559   695.268799        0.0            695.268799  0.001465        0.001002
1     695.286377     695.285889 -537.622314   695.286377  0.017578  0.017578   695.285889        0.0            695.285889  0.000488       -0.000219
2     695.287598     695.286865 -439.623746   695.287598  0.001709  0.001709   695.286865        0.0            695.286865  0.000732       -2.000429
3     697.288330     697.288027 -339.633246   697.288330  2.001465  2.001465   697.288027        0.0            697.287598  0.000303       -0.009197
4     697.298027     697.297527 -239.633789   697.298027  0.010000  0.010000   697.297527        0.0            697.297363  0.000500       -0.000043
5     697.307527     697.306885 -139.643311   697.307527  0.010000  0.010000   697.306885        0.0            697.306885  0.000642       -0.000065
6     697.316895     697.309027  -39.652832   697.316895  0.010010  0.010000   697.309027        0.0            697.309027  0.007868       -0.000219
7     697.319027     697.319027   60.335754   697.319027  0.010000  0.010000   697.319027        0.0            697.319027  0.000000       -0.009500
8     697.329027     697.328527   60.335938   697.329027  0.010000  0.010000   697.328527        0.0            697.328125  0.000500      -99.999317
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=5/4096.[0m
[10/19 18:46:17]  --------------------------------------------------------------------------------
[10/19 18:46:17]  Iteration: 23 (0 solution, 22 counterexamples)
[10/19 18:46:19]  Generator returned sat in 2.068242 secs.
[10/19 18:46:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:46:20]  Improved gap from 0.7211538461538461 to 0
[10/19 18:46:20]  Improved number of small numbers from 59 to 114 out of a max of 114
[10/19 18:46:20]  Verifer returned sat in 1.044485 secs.
[10/19 18:46:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    1290.487793     788.720703 -439.623779  1290.487793  0.122314  0.122314   788.720703        0.0            788.705566  501.767090      401.767090
1    1290.487793     888.720703 -439.623779  1290.487793  0.015625  0.015625   888.720703        0.0            888.705566  401.767090      301.767090
2    1290.487793     988.720703 -439.623779  1290.487793  0.015385  0.015385   988.720703        0.0           1290.503418  301.767090      201.767090
3    1290.487793    1188.720703 -439.623779  1290.487793  0.015625  0.015625  1188.720703        0.0           1188.720703  101.767090      101.767090
4    1290.487793    1288.720703 -439.623779  1290.487793  1.007812  1.000000  1288.720703        0.0           1288.720703    1.767090        1.767090
5    1290.487793    1288.720703 -341.390869  1290.487793  1.503906  1.000000  1288.720703        0.0           1288.705566    1.767090        0.000000
6    1290.487793    1290.487793 -241.390869  1290.487793  1.751953  1.000000  1290.487793        0.0           1290.488037    0.000000        0.000000
7    1291.487793    1290.534668 -142.391113  1291.487793  1.875977  1.000000  1290.534668        0.0           1290.534668    0.953125       -0.000244
8    1292.472656    1291.503418 -142.391113  1292.472656  1.937988  1.000000  1291.503418        0.0           1291.503418    0.969238      -99.015381
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=208919/520.[0m
[10/19 18:46:21]  --------------------------------------------------------------------------------
[10/19 18:46:21]  Iteration: 24 (0 solution, 23 counterexamples)
[10/19 18:46:23]  Generator returned sat in 1.484142 secs.
[10/19 18:46:23]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 18:46:26]  Improved gap from 0.0 to 18.75
[10/19 18:46:27]  Improved number of small numbers from 40 to 67 out of a max of 114
[10/19 18:46:27]  Verifer returned sat in 4.693670 secs.
[10/19 18:46:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    2157.699707    2021.149170 -449.417969  2157.699707    0.122070    0.122070  2021.149170    0.000000           2021.149170  136.550537       36.611431
1    2157.699707    2157.699604 -404.779297  2157.699707    0.061279    0.061279  2157.699604    0.000000           2157.699604    0.000103      -18.749897
2    2313.122334    2176.449604 -404.779297  2313.122334  155.422729  155.422729  2176.449604    0.061157           2176.449463  136.611572       36.611572
3    2716.467793    2376.449463 -404.779297  2716.467793  539.957031  539.957031  2376.449463  303.406616           2376.449463   36.611714       36.611572
4    2850.957051    2376.510986 -404.779297  2850.957051  270.978516  134.489258  2376.510986  337.895874           2376.510986  136.550190       36.611572
5    2850.957051    2476.449604 -341.391113  2850.957051  136.489258   67.244629  2476.449604  337.895874           2476.388672   36.611572       -0.000244
6    2883.590107    2515.016133 -277.845947  2883.590107   69.244629   68.244629  2515.016133  337.895874           2515.016133   30.678101       -3.822021
7    2888.534321    2549.577393 -196.657227  2888.534321   35.622314   34.622314  2549.577393  337.895874           2549.577393    1.061055      -17.689087
8    2906.284424    2568.388428 -196.657227  2906.284424   18.811157   17.811157  2568.388428  337.895874           2568.388428    0.000122      -99.938984
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=149961/4096.[0m
[10/19 18:46:28]  --------------------------------------------------------------------------------
[10/19 18:46:28]  Iteration: 25 (0 solution, 24 counterexamples)
[10/19 18:46:30]  Generator returned sat in 1.818310 secs.
[10/19 18:46:30]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:46:33]  Improved gap from 14.499955139160157 to 18.75
[10/19 18:46:34]  Improved number of small numbers from 67 to 113 out of a max of 114
[10/19 18:46:34]  Verifer returned sat in 3.747929 secs.
[10/19 18:46:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    4693.946777    4693.885742 -404.779297  4693.946777    0.122070    0.122070  4693.885742    0.000000           4693.885742    0.061035        0.030518
1    4693.946777    4693.916260 -404.779297  4693.946777    0.030518    0.030518  4693.916260    0.000000           4693.916260    0.030518      -99.969482
2    4933.483154    4793.946533 -404.779297  4933.483154  239.566895  239.566895  4793.946533    0.000000           4793.946533  139.536621       39.566895
3    5332.923096    4993.916016 -404.779297  5332.923096  538.976562  538.976562  4993.916016  299.409668           4993.916016   39.597412       39.597168
4    5468.167236    4997.300049 -404.779297  5468.167236  270.488281  135.244141  4997.300049  334.653809           4997.300049  136.213379       39.597168
5    5468.197998    5114.793945 -344.407227  5468.197998  136.244141   68.122070  5114.793945  334.653809           5114.793945   18.750244        0.000000
6    5501.759033    5141.964844 -277.968262  5501.759033   69.122070   33.561035  5141.964844  334.653809           5141.964844   25.140381        0.000000
7    5512.179688    5167.105225 -196.718262  5512.179688   35.561035   16.780518  5167.105225  334.653809           5177.556396   10.420654       -8.329346
8    5520.539551    5185.885498 -196.718262  5520.539551   18.780518    8.390259  5185.885498  334.653809           5185.885498    0.000244      -99.969482
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=81095/2048.[0m
[10/19 18:46:34]  --------------------------------------------------------------------------------
[10/19 18:46:34]  Iteration: 26 (0 solution, 25 counterexamples)
[10/19 18:46:35]  Generator returned sat in 0.488321 secs.
[10/19 18:46:35]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 18:46:39]  Improved gap from 17.750244140625 to 18.75
[10/19 18:46:40]  Improved number of small numbers from 68 to 114 out of a max of 114
[10/19 18:46:40]  Verifer returned sat in 4.280154 secs.
[10/19 18:46:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6826.645020    6807.895264 -2325.269531  6826.645020    0.122070    0.122070  6807.895264    0.000000           6807.895264   18.749756       18.749756
1    6826.645020    6807.895264 -2244.019531  6826.645020    0.061035    0.061035  6807.895264    0.000000           6826.706299   18.749756       -0.000244
2    6845.395020    6826.645264 -2162.769531  6845.395020   37.499756   37.499756  6826.645264    0.000000           6845.456299   18.749756       -0.000244
3    7364.645264    6942.206299 -2162.769531  7364.645264  538.000000  538.000000  6942.206299  368.183105           6942.206299   54.255859       51.066895
4    7500.645264    6960.523193 -2162.769531  7500.645264  270.000000  136.000000  6960.523193  404.183105           6960.523193  135.938965       51.066895
5    7500.706299    7045.395264 -2113.897705  7500.706299  136.000000   69.000000  7045.395264  404.183105           7045.334229   51.127930       -0.000244
6    7518.578369    7096.583984 -2032.708740  7518.578369   69.000000   34.500000  7096.583984  404.183105           7096.583984   17.811279       -0.939209
7    7536.267090    7115.395264 -1951.519531  7536.267090   35.500000   17.750000  7115.395264  404.183105           7115.395264   16.688721       -2.061279
8    7538.328369    7134.145264 -1951.519531  7538.328369   18.750000    9.375000  7134.145264  404.183105           7134.084229    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=104585/2048.[0m
[10/19 18:46:40]  --------------------------------------------------------------------------------
[10/19 18:46:40]  Iteration: 27 (0 solution, 26 counterexamples)
[10/19 18:46:41]  Generator returned sat in 0.800495 secs.
[10/19 18:46:41]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 18:46:43]  Improved gap from 0.0 to 46.875
[10/19 18:46:43]  Improved number of small numbers from 87 to 106 out of a max of 114
[10/19 18:46:43]  Verifer returned sat in 1.951075 secs.
[10/19 18:46:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6696.756348    6596.645264 -2162.769531  6696.756348    0.122070    0.122070  6596.645264   0.000000           6696.812012  100.111084        0.111084
1    6696.756348    6696.700684 -2162.769531  6696.756348    0.055556    0.055556  6696.700684   0.000000           6696.700684    0.055664      -99.888916
2    6896.700684    6896.645264 -2162.769531  6896.700684  200.000000  200.000000  6896.645264   0.000000           6896.645264    0.055420        0.055420
3    6996.811930    6996.145020 -2162.769531  6996.811930  100.166667  100.166667  6996.145020   0.055556           6996.145020    0.611355        0.111111
4    7045.395264    6996.645264 -2111.464111  7045.395264   99.166667   48.583333  6996.645264   0.055556           7045.395020   48.694444       -0.000136
5    7093.478597    7045.395020 -2060.200087  7093.478597   98.166667   48.083333  7045.395020   0.055556           7045.395020   48.028022       -0.652778
6    7141.061930    7094.131348 -2007.130859  7141.061930   97.166667   47.583333  7094.131348   0.055556           7094.131348   46.875027       -0.000217
7    7188.145264    7141.061768 -1954.214111  7188.145264   96.166667   47.083333  7141.061768   0.055556           7141.061768   47.027941       -0.000136
8    7234.728597    7188.089844 -1954.213867  7234.728597   95.166667   46.583333  7188.089844   0.055556           7188.034180   46.583198      -53.416558
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/9.[0m
[10/19 18:46:44]  --------------------------------------------------------------------------------
[10/19 18:46:44]  Iteration: 28 (0 solution, 27 counterexamples)
[10/19 18:46:48]  Generator returned sat in 3.105174 secs.
[10/19 18:46:48]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:46:48]  Improved gap from 0.9722222222222222 to 0
[10/19 18:46:49]  Improved number of small numbers from 60 to 75 out of a max of 114
[10/19 18:46:49]  Verifer returned sat in 1.550730 secs.
[10/19 18:46:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6847.022461    6747.021484 -1516.946198  6847.022461    0.121826    0.121826  6747.021484    0.00000           6747.021484  100.000977        0.002406
1    6947.020264    6947.020055 -1516.946198  6947.020264  199.998779  199.998779  6947.020055    0.00000           6947.020055    0.000208        0.000208
2    7047.023805    7046.010010 -1516.946198  7047.023805  100.003750  100.003750  7046.010010    0.00125           7046.010010    1.012546        0.002500
3    7047.023805    7047.022555 -1416.948698  7047.023805    1.011250    1.011250  7047.022555    0.00125           7047.022555    0.000000        0.000000
4    7047.035055    7047.033805 -1316.959961  7047.035055    0.011250    1.000000  7047.033805    0.00125           7047.033805    0.000000       -0.000013
5    7047.045055    7047.035055 -1216.969971  7047.045055    0.010000    1.000000  7047.035055    0.00125           7047.035055    0.008750       -0.000023
6    7047.046305    7047.045055 -1116.981198  7047.046305    0.010000    1.000000  7047.045055    0.00125           7047.045055    0.000000       -0.010000
7    7047.056305    7047.055055 -1016.991198  7047.056305    0.010000    1.000000  7047.055055    0.00125           7047.056152    0.000000       -0.010000
8    7047.066305    7047.065055  -916.991211  7047.066305    0.010000    1.000000  7047.065055    0.00125           7047.063721    0.000000       -0.000013
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/400.[0m
[10/19 18:46:50]  --------------------------------------------------------------------------------
[10/19 18:46:50]  Iteration: 29 (0 solution, 28 counterexamples)
[10/19 18:46:54]  Generator returned sat in 3.626944 secs.
[10/19 18:46:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:46:55]  Improved gap from 0.0 to 0
[10/19 18:46:56]  Improved number of small numbers from 60 to 77 out of a max of 114
[10/19 18:46:56]  Verifer returned sat in 1.803568 secs.
[10/19 18:46:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6149.076172    6049.075195 -819.001221  6149.076172    0.121826    0.121826  6049.075195    0.00000           6149.077393  100.000977        0.000977
1    6149.077637    6149.076305 -819.001081  6149.077637  100.002441  100.002441  6149.076305    0.00000           6149.076305    0.001331      -99.997419
2    6349.078805    6349.040055 -819.001081  6349.078805  200.002500  200.002500  6349.040055    0.00125           6349.040055    0.037500        0.002500
3    6349.111305    6349.076305 -719.036133  6349.111305    0.070000    0.070000  6349.076305    0.00125           6349.076305    0.033750       -0.000052
4    6349.112555    6349.111305 -619.037354  6349.112555    0.035000    1.000000  6349.111305    0.00125           6349.111305    0.000000       -0.000023
5    6349.130055    6349.117432 -519.054831  6349.130055    0.017500    1.000000  6349.117432    0.00125           6349.117432    0.011374        0.000000
6    6349.130055    6349.128805 -419.054932  6349.130055    0.010000    1.000000  6349.128805    0.00125           6349.128906    0.000000       -0.000101
7    6349.140055    6349.130055 -319.064941  6349.140055    0.010000    1.000000  6349.130055    0.00125           6349.130055    0.008750       -0.000111
8    6349.141305    6349.140055 -319.064697  6349.141305    0.010000    1.000000  6349.140055    0.00125           6349.140055    0.000000      -99.998617
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/400.[0m
[10/19 18:46:56]  --------------------------------------------------------------------------------
[10/19 18:46:56]  Iteration: 30 (0 solution, 29 counterexamples)
[10/19 18:47:00]  Generator returned sat in 3.435556 secs.
[10/19 18:47:00]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 18:47:01]  Improved gap from 0.0 to 0
[10/19 18:47:02]  Improved number of small numbers from 60 to 94 out of a max of 114
[10/19 18:47:02]  Verifer returned sat in 1.592320 secs.
[10/19 18:47:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    6046.792725    6046.792480 -716.718506  6046.792725  0.121582  0.121582  6046.792480        0.0           6046.792480  0.000244        0.000244
1    6046.793213    6046.792725 -616.721191  6046.793213  0.000732  0.000732  6046.792725        0.0           6046.792725  0.000488       -0.001953
2    6046.795410    6046.795166 -516.721680  6046.795410  0.002686  0.002686  6046.795166        0.0           6046.794678  0.000244       -0.000244
3    6046.804688    6046.804453 -416.739258  6046.804688  0.009521  0.009521  6046.804453        0.0           6046.804453  0.000234       -0.008545
4    6046.814453    6046.813232 -316.740479  6046.814453  0.010000  1.000000  6046.813232        0.0           6046.814941  0.001221        0.000000
5    6046.823486    6046.814453 -216.749512  6046.823486  0.010254  1.000000  6046.814453        0.0           6046.823975  0.009033        0.000000
6    6046.824453    6046.823898 -116.750479  6046.824453  0.010000  1.000000  6046.823898        0.0           6046.823898  0.000556        0.000000
7    6046.833898    6046.824453  -16.760010  6046.833898  0.010000  1.000000  6046.824453        0.0           6046.824219  0.009444       -0.000086
8    6046.834453    6046.833984  -16.759766  6046.834453  0.010000  1.000000  6046.833984        0.0           6046.833496  0.000469      -99.999287
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/1800.[0m
[10/19 18:47:02]  --------------------------------------------------------------------------------
[10/19 18:47:02]  Iteration: 31 (0 solution, 30 counterexamples)
[10/19 18:47:06]  Generator returned unsat in 2.681350 secs.
[10/19 18:47:06]  [96mNo more solutions found[0m
[10/19 18:47:06]  Final solutions:
[10/19 18:47:06]  Took 129.040397 secs.
