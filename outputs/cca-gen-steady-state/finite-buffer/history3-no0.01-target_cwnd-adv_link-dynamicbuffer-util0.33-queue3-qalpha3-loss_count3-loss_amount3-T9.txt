[10/25 14:20:07]  --------------------------------------------------------------------------------
[10/25 14:20:07]  Iteration: 1 (0 solution, 0 counterexamples)
[10/25 14:20:07]  Generator returned sat in 0.004184 secs.
[10/25 14:20:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha
else:
	target_cwnd = 2c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:07]  Improved gap from 99.75 to 100
[10/25 14:20:07]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 14:20:07]  Verifer returned sat in 0.300270 secs.
[10/25 14:20:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   wasted_t    queue_t  bottle_queue_t
0     -817.09375    -1017.09375   -817.09375    0.03125    0.03125  -1017.09375    0.00000               0.00000  917.09375  200.00000       100.00000
1     -817.09375     -916.84375   -817.09375  100.06250  100.06250   -916.84375    0.00000            -916.84375  917.09375   99.75000         0.00000
2     -416.90625     -816.87500   -416.90625  499.93750  499.93750   -816.87500    0.03125            -816.87500  917.09375  399.93750       300.15625
3     -316.87500     -617.09375   -316.87500  499.96875  499.96875   -617.09375    0.06250            -617.09375  917.09375  300.15625       300.15625
4     -117.03125     -517.09375   -117.03125  500.00000  500.00000   -517.09375   99.90625            -517.09375  917.09375  300.15625       300.15625
5       82.84375     -517.09375     82.84375  500.03125  500.03125   -517.09375  199.78125            -517.12500  917.09375  400.15625       300.15625
6      182.75000     -333.09375    182.75000  500.06250  500.06250   -333.09375  199.78125            -333.09375  917.09375  316.06250       300.06250
7      366.78125     -317.06250    366.78125  500.09375  500.09375   -317.06250  283.71875            -317.06250  917.09375  400.12500       300.15625
8      466.78125     -217.09375    466.78125  500.12500  500.12500   -217.09375  283.71875             183.09375  917.09375  400.15625       300.15625
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=9077/32, 
, buffer=9605/32.[0m
[10/25 14:20:08]  --------------------------------------------------------------------------------
[10/25 14:20:08]  Iteration: 2 (0 solution, 1 counterexamples)
[10/25 14:20:08]  Generator returned sat in 0.106293 secs.
[10/25 14:20:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha
else:
	target_cwnd = 0c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:08]  Improved number of small numbers from 61 to 108 out of a max of 108
[10/25 14:20:08]  Verifer returned sat in 0.357741 secs.
[10/25 14:20:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -817.093994   -1017.093750  -817.093994    0.031006    0.031006 -1017.093750    0.000000             -0.000488  917.093506  199.999756       99.999756
1    -817.093994    -817.245361  -817.093994  100.062256  100.062256  -817.245361    0.000000           -817.245361  917.093506    0.151367       -0.000244
2    -317.164551    -816.875244  -317.164551  500.080811  500.080811  -816.875244   99.772949           -816.875244  917.093506  399.937744      300.156250
3    -217.010742    -617.196045  -217.010742  500.091553  500.091553  -617.196045   99.926758           -617.196045  917.093506  300.258545      300.156250
4     -17.166992    -617.039795   -17.166992  500.102295  500.102295  -617.039795  199.770508           -617.039795  917.093506  400.102295      300.156250
5      82.843750    -517.093750    82.843750  500.113037  500.113037  -517.093750  199.781250           -517.125488  917.093506  400.156250      300.156250
6     182.811279    -333.134766   182.811279  500.123779  500.123779  -333.134766  199.781250           -333.134766  917.093506  316.164795      300.123779
7     366.781006    -317.082764   366.781006  500.134521  500.134521  -317.082764  283.718506           -317.082764  917.093506  400.145264      300.156250
8     466.781006    -217.093750   466.781006  500.145264  500.145264  -217.093750  283.718506            183.093506  917.093506  400.156250      300.156250
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=752811/4096, 
, buffer=9605/32.[0m
[10/25 14:20:09]  --------------------------------------------------------------------------------
[10/25 14:20:09]  Iteration: 3 (0 solution, 2 counterexamples)
[10/25 14:20:09]  Generator returned sat in 0.074216 secs.
[10/25 14:20:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 3/2c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:10]  Improved number of small numbers from 61 to 63 out of a max of 108
[10/25 14:20:10]  Verifer returned sat in 0.856641 secs.
[10/25 14:20:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -817.094238   -1277.047485  -817.094238    0.030762    0.030762 -1277.047485    0.000000             -0.000732  917.093506  459.953247      359.953247
1    -817.094238   -1177.031982  -817.094238    0.015625    0.015625 -1177.031982    0.000000          -1177.031982  917.093506  359.937744      259.953247
2    -617.093994   -1057.016479  -617.093994  559.937988  559.937988 -1057.016479    0.000000          -1057.016479  917.093506  439.922485      359.953491
3    -517.062988    -970.378235  -517.062988  539.953491  539.953491  -970.378235    0.015503           -970.378235  917.093506  453.299744      359.968994
4    -410.424744    -863.716736  -410.424744  559.937988  559.937988  -863.716736    6.653748           -863.716736  917.093506  446.638245      359.968994
5    -277.140503    -777.047485  -277.140503  579.922485  579.922485  -777.047485   39.937988           -777.063232  917.093506  459.968994      359.968994
6    -137.202515    -677.047485  -137.202515  599.906982  599.906982  -677.047485   79.875977           -677.062988  917.093506  459.968994      359.968994
7      22.719971    -477.047485    22.719971  619.891479  619.891479  -477.047485  139.798462           -477.047485  917.093506  359.968994      359.968994
8     302.626953    -477.047485   302.626953  639.875977  639.875977  -477.047485  319.705444            183.093262  917.093506  459.968994      359.968994
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=6, loss_amount=654725/2048, 
, buffer=1474433/4096.[0m
[10/25 14:20:10]  --------------------------------------------------------------------------------
[10/25 14:20:10]  Iteration: 4 (0 solution, 3 counterexamples)
[10/25 14:20:11]  Generator returned sat in 0.298450 secs.
[10/25 14:20:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:11]  Improved number of small numbers from 75 to 108 out of a max of 108
[10/25 14:20:11]  Verifer returned sat in 0.381622 secs.
[10/25 14:20:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -517.106689    -938.175781  -517.106689    0.030518    0.030518  -938.175781    0.000000             -0.000732  917.093506  421.069092      321.069092
1    -517.106689    -838.175781  -517.106689    0.007812    0.007812  -838.175781    0.000000           -517.099121  917.093506  321.069092      221.069092
2    -317.098877    -731.160645  -317.098877  521.076904  521.076904  -731.160645    0.007812           -731.160645  917.093506  414.053955      321.069092
3    -217.091309    -624.145020  -217.091309  514.061523  514.061523  -624.145020    0.015381           -624.145020  917.093506  407.038330      321.069092
4    -117.083496    -517.145264  -117.083496  507.046143  507.046143  -517.145264    0.023193           -517.145264  917.093506  400.038574      321.069092
5     -17.091309    -438.168213   -17.091309  500.030762  500.030762  -438.168213    0.023193           -438.168213  917.093506  421.053711      321.061279
6      68.901123    -338.175781    68.901123  507.046143  507.046143  -338.175781    0.023193           -677.062988  917.093506  407.053711      307.053711
7     175.908936    -138.176025   175.908936  514.061523  514.061523  -138.176025    0.023193           -138.176025  917.093506  314.061768      314.061523
8     382.924072    -138.175781   382.924072  521.076904  521.076904  -138.175781  100.030762            183.093018  917.093506  421.069092      321.069092
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=409663/4096, 
, buffer=1315099/4096.[0m
[10/25 14:20:12]  --------------------------------------------------------------------------------
[10/25 14:20:12]  Iteration: 5 (0 solution, 4 counterexamples)
[10/25 14:20:12]  Generator returned sat in 0.253495 secs.
[10/25 14:20:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:13]  Improved number of small numbers from 33 to 108 out of a max of 108
[10/25 14:20:13]  Verifer returned sat in 0.688876 secs.
[10/25 14:20:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0   -1336.833984   -1336.833984 -1336.833984    0.030518    0.030518 -1336.833984   0.000000             -0.000977  917.093262    0.000000     -100.000000
1    -776.834229   -1150.811279  -776.834229  559.999756  559.999756 -1150.811279   0.007568          -1150.811279  917.093262  373.969482      359.992188
2    -690.803711   -1130.826660  -690.803711  460.000000  460.000000 -1130.826660   0.007568          -1130.826660  917.093262  440.015381      346.022705
3    -690.803711    -936.833984  -690.803711  440.007568  440.007568  -936.833984   0.007568           -936.833984  917.093262  246.022705      246.022705
4    -476.826416    -936.826416  -476.826416  460.000000  460.000000  -936.826416   0.015381           -936.826416  917.093262  459.984619      359.992188
5    -476.826416    -836.826660  -476.826416  440.007568  440.007568  -836.826660   0.015381           -836.826660  917.093262  359.984863      259.992188
6    -416.796143    -736.811279  -416.796143  420.015137  420.015137  -736.811279   0.015381           -736.811279  917.093262  319.999756      220.022461
7    -296.788330    -549.814941  -296.788330  440.007568  440.007568  -549.814941   0.015381           -549.814941  917.093262  253.011230      240.030273
8     -89.799561    -536.833984   -89.799561  460.000000  460.000000  -536.833984   0.015381            183.093018  917.093262  447.019043      347.019043
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/128, 
, buffer=46079/128.[0m
[10/25 14:20:13]  --------------------------------------------------------------------------------
[10/25 14:20:13]  Iteration: 6 (0 solution, 5 counterexamples)
[10/25 14:20:13]  Generator returned sat in 0.086777 secs.
[10/25 14:20:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:15]  Improved number of small numbers from 50 to 108 out of a max of 108
[10/25 14:20:15]  Verifer returned sat in 1.544467 secs.
[10/25 14:20:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -116.887939    -616.907227  -116.887939    0.030518    0.030518  -616.907227        0.0           -616.907227  197.169922  500.019287      400.022949
1     -16.891846    -516.907227   -16.891846  600.015381  600.015381  -516.907227        0.0           -516.907227  197.169922  500.015381      400.019043
2     -16.891846    -416.910889   -16.891846  400.022949  400.022949  -416.910889        0.0           -416.914551  197.169922  400.019043      300.019043
3     -16.891846    -250.232666   -16.891846  400.015381  400.015381  -250.232666        0.0           -250.232666  197.169922  233.340820      200.019043
4     149.790283    -116.910889   149.790283  400.022949  400.022949  -116.910889        0.0           -116.910889  197.169922  266.701172      266.701172
5     283.119629    -116.906982   283.119629  400.030518  400.030518  -116.906982        0.0           -116.906982  197.169922  400.026611      300.030518
6     283.119629     -16.910889   283.119629  400.022949  400.022949   -16.910889        0.0            -16.914551  197.169922  300.030518      200.030518
7     383.104492     178.434082   383.104492  400.015381  400.015381   178.434082        0.0            178.434082  197.169922  204.670410      200.015381
8     578.457031     183.093018   578.457031  400.022949  400.022949   183.093018        0.0            183.093018  197.169922  395.364014      295.367920
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=819247/2048.[0m
[10/25 14:20:15]  --------------------------------------------------------------------------------
[10/25 14:20:15]  Iteration: 7 (0 solution, 6 counterexamples)
[10/25 14:20:15]  Generator returned sat in 0.117348 secs.
[10/25 14:20:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:16]  Improved gap from 0.0 to 32.8125
[10/25 14:20:17]  Improved number of small numbers from 14 to 31 out of a max of 109
[10/25 14:20:17]  Verifer returned sat in 1.649907 secs.
[10/25 14:20:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0     115.910583    -216.913452   115.910583   0.030518   0.030518  -216.913452    0.00769            115.903564  197.169922  332.816345      232.816345
1     115.910583    -116.913452   115.910583   0.000488   0.000488  -116.913452    0.00769           -116.914062  197.169922  232.816345      132.816345
2     115.910583      83.085938   115.910583  32.816986  32.816986    83.085938    0.00769             83.085938  197.169922   32.816956       32.816345
3     115.910583      83.086548   115.910583  32.816345  32.816345    83.086548    0.00769             83.085938  264.353577   32.816345        0.000000
4     115.910583     115.902893   115.910583  32.815704  32.815704   115.902893    0.00769            115.902100  331.541016    0.000000      -32.812561
5     148.725647     148.716034   148.725647  32.815063  32.815063   148.716034    0.00769            148.716034  398.727783    0.001923      -32.810730
6     181.538147     181.529175   181.538147  32.814423  32.814423   181.529175    0.00769            181.529175  465.914551    0.001282      -32.811462
7     214.350647     214.342316   214.350647  32.813782  32.813782   214.342316    0.00769            214.342316  533.101562    0.000641      -32.811951
8     247.163147     247.155273   247.163147  32.813141  32.813141   247.155273    0.00769            247.155273  533.101807    0.000183      -99.999207
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=59601/256.[0m
[10/25 14:20:18]  --------------------------------------------------------------------------------
[10/25 14:20:18]  Iteration: 8 (0 solution, 7 counterexamples)
[10/25 14:20:18]  Generator returned sat in 0.194902 secs.
[10/25 14:20:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:19]  Improved gap from 0.0 to 100
[10/25 14:20:20]  Improved number of small numbers from 47 to 60 out of a max of 109
[10/25 14:20:20]  Verifer returned sat in 1.539342 secs.
[10/25 14:20:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -535.266846    -703.220947  -535.266846    0.030518    0.030518  -703.220947   0.000000           -535.262695  533.101318  167.954102       67.954102
1    -435.270752    -601.217285  -435.270752  267.950195  267.950195  -601.217285   0.000000           -601.217285  533.101318  165.946533       67.950195
2    -435.270752    -435.274353  -435.270752  151.942780  151.942780  -435.274353   0.000000           -435.274353  533.101318    0.003601      -32.049805
3    -275.323944    -303.220947  -275.323944  159.950409  159.950409  -303.220947   0.000000           -303.220947  533.101318   27.897003       27.897003
4    -135.262909    -211.228577  -135.262909  167.958038  167.958038  -211.228577   0.003815           -211.228577  533.101318   75.961853       67.954224
5     -35.259094    -119.236206   -35.259094  175.965668  175.965668  -119.236206   0.007629           -119.236206  533.101318   83.969482       67.954224
6      64.744720     -27.251465    64.744720  183.973297  183.973297   -27.251465   0.011444            -27.251465  533.101318   91.984741       67.954224
7     164.740906      64.748535   164.740906  191.980927  191.980927    64.748535   0.011444             64.748535  533.101318   99.980927       67.950409
8     264.748535      96.779053   264.748535  199.988556  199.988556    96.779053   0.015259            264.737061  533.101318  167.954224       67.954224
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=125/8192, 
, buffer=556681/8192.[0m
[10/25 14:20:20]  --------------------------------------------------------------------------------
[10/25 14:20:20]  Iteration: 9 (0 solution, 8 counterexamples)
[10/25 14:20:20]  Generator returned sat in 0.202822 secs.
[10/25 14:20:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:25]  Improved gap from 0.0 to 29.6875
[10/25 14:20:26]  Improved number of small numbers from 39 to 109 out of a max of 109
[10/25 14:20:26]  Verifer returned sat in 5.228624 secs.
[10/25 14:20:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -311.228760    -556.174072  -311.228760    0.030518    0.030518  -556.174072        0.0           -556.174072  478.047119  244.945312      144.953369
1    -211.236084    -356.182129  -211.236084  344.937988  344.937988  -356.182129        0.0           -356.182129  478.047119  144.946045      144.946045
2    -211.236084    -256.182129  -211.236084   29.695312   29.695312  -256.182129        0.0           -256.182129  478.047119   44.946045       44.946045
3    -211.236084    -256.182129  -211.236084   44.672119   44.672119  -256.182129        0.0           -256.189453  533.101074   44.946045        0.000000
4    -196.533203    -211.228760  -196.533203   59.648926   59.648926  -211.228760        0.0           -211.228760  603.406250   14.695557      -14.991943
5    -166.556641    -181.541260  -166.556641   44.672119   44.672119  -181.541260        0.0           -151.845947  673.718750   14.984619      -14.702881
6    -121.892334    -151.853760  -121.892334   59.648926   59.648926  -151.853760        0.0           -151.861084  743.757324   29.961426        0.000000
7    -107.181641    -120.884766  -107.181641   44.672119   44.672119  -120.884766        0.0           -120.884766  813.062256   13.703125      -15.984375
8     -91.189453     -91.189697   -91.189453   29.695312   29.695312   -91.189697        0.0            -91.189697  883.367188    0.000244      -29.687256
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=593729/4096.[0m
[10/25 14:20:26]  --------------------------------------------------------------------------------
[10/25 14:20:26]  Iteration: 10 (0 solution, 9 counterexamples)
[10/25 14:20:26]  Generator returned sat in 0.203939 secs.
[10/25 14:20:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + -1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:28]  Improved gap from 0.0 to 32.8125
[10/25 14:20:28]  Improved number of small numbers from 44 to 109 out of a max of 109
[10/25 14:20:28]  Verifer returned sat in 1.456085 secs.
[10/25 14:20:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -151.197998    -351.190430  -151.197998    0.030518    0.030518  -351.190430        0.0           -151.194092  273.055176  199.992432       99.992432
1     -51.201904    -251.190430   -51.201904  299.988525  299.988525  -251.190430        0.0           -151.186523  273.055176  199.988525       99.988525
2     -51.201904     -51.205811   -51.201904   32.823975   32.823975   -51.205811        0.0            -51.205811  273.055176    0.003906       -0.011475
3     -18.377930     -51.190430   -18.377930   32.827881   32.827881   -51.190430        0.0            -51.194336  340.242676   32.812500        0.000000
4     -18.358643     -18.374023   -18.358643   32.831787   32.831787   -18.374023        0.0            -18.374023  407.426270    0.015381      -32.797119
5      14.453857      14.442139    14.453857   32.827881   32.827881    14.442139        0.0             14.442139  474.610107    0.011719      -32.800781
6      47.266113      47.258545    47.266113   32.823975   32.823975    47.258545        0.0             47.258545  541.793701    0.007568      -32.804932
7      80.078613      80.074951    80.078613   32.820068   32.820068    80.074951        0.0             80.074951  608.977295    0.003662      -32.808838
8     112.891113     112.891113   112.891113   32.816162   32.816162   112.891113        0.0            112.891113  676.161133    0.000000      -32.812500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=409569/4096.[0m
[10/25 14:20:28]  --------------------------------------------------------------------------------
[10/25 14:20:28]  Iteration: 11 (0 solution, 10 counterexamples)
[10/25 14:20:29]  Generator returned sat in 0.206039 secs.
[10/25 14:20:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:30]  Improved gap from 0.0 to 100
[10/25 14:20:30]  Improved number of small numbers from 19 to 109 out of a max of 109
[10/25 14:20:30]  Verifer returned sat in 1.510659 secs.
[10/25 14:20:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -218.814697    -218.818359  -218.814697    0.030518    0.030518  -218.818359   0.000000           -218.811035  254.030273    0.003662      -99.996338
1     295.212158    -118.811035   295.212158  514.030518  514.030518  -118.811035   0.003906           -118.811035  254.030273  414.019287      314.026611
2     295.212158      57.194336   295.212158  414.015137  414.015137    57.194336   0.003906             57.194336  254.030273  238.013916      214.026611
3     471.220947     181.181641   471.220947  414.022705  414.022705   181.181641   0.003906            181.181641  254.030273  290.035400      290.035400
4     595.215820     181.181641   595.215820  414.030273  414.030273   181.181641   0.007568            281.185547  254.030273  414.026611      314.026611
5     595.215820     281.185547   595.215820  414.022705  414.022705   281.185547   0.007568            281.185547  254.030273  314.022705      214.026611
6     695.208252     471.181641   695.208252  414.015137  414.015137   471.181641   0.007568            471.181641  254.030273  224.019043      214.019043
7     885.211914     581.181641   885.211914  414.022705  414.022705   581.181641   0.007568            581.181641  254.030273  304.022705      304.022705
8     995.219482     581.181641   995.219482  414.030273  414.030273   581.181641   0.011230            581.181396  254.030273  414.026611      314.026611
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=15/2048, 
, buffer=1286253/4096.[0m
[10/25 14:20:31]  --------------------------------------------------------------------------------
[10/25 14:20:31]  Iteration: 12 (0 solution, 11 counterexamples)
[10/25 14:20:31]  Generator returned sat in 0.087538 secs.
[10/25 14:20:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:33]  Improved gap from 0.0019073486328125 to 26.5625
[10/25 14:20:33]  Improved number of small numbers from 61 to 109 out of a max of 109
[10/25 14:20:33]  Verifer returned sat in 2.050647 secs.
[10/25 14:20:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0     391.129639     291.122070   391.129639    0.030518    0.030518   291.122070        0.0            291.122070  108.185547  100.007568        0.015137
1     418.677002     391.114502   418.677002  127.554932  127.554932   391.114502        0.0            418.684326  180.623047   27.562500        0.000000
2     445.270020     418.684570   445.270020   54.155518   54.155518   418.684570        0.0            418.684570  254.030029   26.585449        0.000000
3     472.847656     445.270020   472.847656   54.163086   54.163086   445.270020        0.0            445.262207  326.452393   27.577637        0.000000
4     499.425537     472.847656   499.425537   54.155518   54.155518   472.847656        0.0            499.432861  399.874512   26.577881        0.000000
5     527.010742     499.425537   527.010742   54.163086   54.163086   499.425537        0.0            499.417969  472.289307   27.585205        0.000000
6     553.581055     527.018311   553.581055   54.155518   54.155518   527.018311        0.0            527.018311  545.718994   26.562744        0.000000
7     581.181396     553.581055   581.181396   54.163086   54.163086   553.581055        0.0            581.189209  618.118408   27.600342       -0.000244
8     607.736572     581.181641   607.736572   54.155518   54.155518   581.181641        0.0            607.751709  691.555908   26.554932       -0.007568
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=63/4096.[0m
[10/25 14:20:34]  --------------------------------------------------------------------------------
[10/25 14:20:34]  Iteration: 13 (0 solution, 12 counterexamples)
[10/25 14:20:34]  Generator returned sat in 0.368533 secs.
[10/25 14:20:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-3]) + -1alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:34]  Improved gap from 0.00762939453125 to 100
[10/25 14:20:35]  Improved number of small numbers from 19 to 109 out of a max of 109
[10/25 14:20:35]  Verifer returned sat in 0.561051 secs.
[10/25 14:20:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0     327.129639     235.106934   327.129639    0.030518    0.030518   235.106934   0.000000            235.106934  264.193115   92.022705       92.022705
1     327.129883     327.125977   327.129883   92.022949   92.022949   327.125977   0.000000            327.125977  264.193115    0.003906       -7.977051
2     531.129883     431.122070   531.129883  204.003906  204.003906   431.122070   0.003906            431.122070  264.193115  100.003906       96.019043
3     631.133545     435.110596   631.133545  200.007568  200.007568   435.110596   0.007568            435.110596  264.193115  196.015381       96.019043
4     631.133545     631.122070   631.133545  196.011230  196.011230   631.122070   0.007568            631.122070  264.193115    0.003906       -3.980957
5     831.137207     635.110840   831.137207  200.007568  200.007568   635.110840   0.011230            635.110840  264.193115  196.015137       96.019043
6     831.137207     831.122314   831.137207  196.011230  196.011230   831.122314   0.011230            831.122314  264.193115    0.003662       -3.980957
7    1031.141113     927.125977  1031.141113  200.007568  200.007568   927.125977   0.015137            927.125977  264.193115  104.000000       96.019043
8    1131.145020     935.106934  1131.145020  204.003906  204.003906   935.106934   0.019043           1131.129639  264.193115  196.019043       96.019043
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=47/4096, 
, buffer=196647/2048.[0m
[10/25 14:20:35]  --------------------------------------------------------------------------------
[10/25 14:20:35]  Iteration: 14 (0 solution, 13 counterexamples)
[10/25 14:20:36]  Generator returned sat in 0.356192 secs.
[10/25 14:20:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:37]  Verifer returned unsat in 0.877253 secs.
[10/25 14:20:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:37]  --------------------------------------------------------------------------------
[10/25 14:20:37]  Iteration: 15 (1 solution, 13 counterexamples)
[10/25 14:20:37]  Generator returned sat in 0.023649 secs.
[10/25 14:20:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:38]  Verifer returned unsat in 0.693556 secs.
[10/25 14:20:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:38]  --------------------------------------------------------------------------------
[10/25 14:20:38]  Iteration: 16 (2 solution, 13 counterexamples)
[10/25 14:20:38]  Generator returned sat in 0.023026 secs.
[10/25 14:20:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:39]  Verifer returned unsat in 0.604023 secs.
[10/25 14:20:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:39]  --------------------------------------------------------------------------------
[10/25 14:20:39]  Iteration: 17 (3 solution, 13 counterexamples)
[10/25 14:20:39]  Generator returned sat in 0.028052 secs.
[10/25 14:20:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:40]  Verifer returned unsat in 1.042986 secs.
[10/25 14:20:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:40]  --------------------------------------------------------------------------------
[10/25 14:20:40]  Iteration: 18 (4 solution, 13 counterexamples)
[10/25 14:20:40]  Generator returned unsat in 0.019065 secs.
[10/25 14:20:40]  [96mNo more solutions found[0m
[10/25 14:20:40]  Final solutions:
[10/25 14:20:40]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:40]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1/2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:40]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:40]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 0alpha
else:
	target_cwnd = 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-3]) + 1alpha

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] + alpha
else:
	c_f[0][t] = max(alpha, c_f[0][t-1] - alpha)
[0m
[10/25 14:20:40]  Took 33.583392 secs.
