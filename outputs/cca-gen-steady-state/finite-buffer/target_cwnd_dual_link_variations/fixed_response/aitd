[11/21 16:33:54]  Using search space: aitd
[11/21 16:33:55]  Ideal: desired_util_f=1, desired_queue_bound_multiplier=0.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=0.5, desired_loss_amount_bound_alpha=3
[11/21 16:33:55]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=1.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=3
[11/21 16:34:03]  --------------------------------------------------------------------------------
[11/21 16:34:03]  Iteration: 1 (0 solution, 0 counterexamples)
[11/21 16:34:03]  Generator returned sat in 0.006490 secs.
[11/21 16:34:03]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha
else:
	expr = 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-3]) + 2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:34:03]  Improved number of small numbers from 101 to 101 out of a max of 101
[11/21 16:34:03]  Verifer returned sat in 0.738924 secs.
[11/21 16:34:04]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0              -776.625              -796.625            -776.625            0.125            0.125            -796.625             0.000   20.000
1              -696.500              -696.625            -696.500          100.125          100.125            -696.625             0.000    0.125
2              -599.750              -599.750            -599.750           96.875           96.875            -599.750             0.000    0.000
3              -483.000              -499.750            -483.000          116.750          116.750            -499.750             0.000   16.750
4              -363.125              -399.750            -363.125          136.625          136.625            -399.750            16.625   20.000
5              -226.625              -299.750            -226.625          156.500          156.500            -299.750            53.125   20.000
6               -70.250              -199.750             -70.250          176.375          176.375            -199.750           109.500   20.000
7               106.000               -99.750             106.000          196.250          196.250             -99.750           185.750   20.000
8               302.125                 0.250             302.125          216.125          216.125               0.250           281.875   20.000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, loss_amount=2255/8, 
, alpha=159/8, buf_size=20.[0m
[11/21 16:34:08]  --------------------------------------------------------------------------------
[11/21 16:34:08]  Iteration: 2 (0 solution, 1 counterexamples)
[11/21 16:34:08]  Generator returned sat in 0.339700 secs.
[11/21 16:34:08]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:34:09]  Improved number of small numbers from 65 to 101 out of a max of 101
[11/21 16:34:09]  Verifer returned sat in 0.778325 secs.
[11/21 16:34:09]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0           -545.197998           -696.697998         -545.197998         0.124756         0.124756         -696.697998          0.000000  151.5000
1           -445.135742           -596.697998         -445.135742       251.562256       251.562256         -596.697998          0.062256  151.5000
2           -293.823242           -496.697998         -293.823242       302.812500       302.812500         -496.697998         51.374756  151.5000
3           -159.635742           -396.697998         -159.635742       285.687500       285.687500         -396.697998         85.562256  151.5000
4            -42.573242           -296.697998          -42.573242       268.562500       268.562500         -296.697998        102.624756  151.5000
5             57.364258           -196.697998           57.364258       251.437500       251.437500         -196.697998        102.624756  151.4375
6             57.364258            -96.697998           57.364258        34.250000        34.250000          -96.697998        102.624756   51.4375
7             57.364258            -45.260498           57.364258        51.375000        51.375000          -45.260498        102.624756    0.0000
8             91.614258            -11.010498           91.614258        34.250000        34.250000          -11.010498        102.624756    0.0000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=2, loss_amount=273/16, 
, alpha=137/8, buf_size=303/2.[0m
[11/21 16:34:13]  --------------------------------------------------------------------------------
[11/21 16:34:13]  Iteration: 3 (0 solution, 2 counterexamples)
[11/21 16:34:17]  Generator returned sat in 3.995085 secs.
[11/21 16:34:17]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha
else:
	expr = 1c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-3]) + -2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:34:19]  Improved number of small numbers from 52 to 54 out of a max of 101
[11/21 16:34:19]  Verifer returned sat in 2.200785 secs.
[11/21 16:34:19]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0             79.139404             62.493708           79.139404         0.124756         0.124756           62.493708          0.000000  16.645696
1            179.077204            162.493708          179.077204       116.583496       116.583496          162.493708          0.000000  16.583496
2           1212.244197            262.493708         1212.244197      1049.750488      1049.750488          262.493708        933.104614  16.645874
3           1712.181819            362.493708         1712.181819       516.583496       516.583496          362.493708       1333.042236  16.645874
4           1945.535945            462.493708         1945.535945       250.000000       250.000000          462.493708       1466.396362  16.645874
5           2045.598323            562.493708         2045.598323       116.708252       116.708252          562.493708       1466.458740  16.645874
6           2079.014826            612.556086         2079.014826        50.062378        50.062378          612.556086       1466.458740   0.000000
7           2145.660700            679.201960         2145.660700        66.645874        66.645874          679.201960       1466.458740   0.000000
8           2228.890071            762.431330         2228.890071        83.229370        83.229370          762.431330       1466.458740   0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=3, loss_amount=273237/2048, 
, alpha=33963/2048, buf_size=136363/8192.[0m
[11/21 16:34:23]  --------------------------------------------------------------------------------
[11/21 16:34:23]  Iteration: 4 (0 solution, 3 counterexamples)
[11/21 16:34:24]  Generator returned sat in 0.458985 secs.
[11/21 16:34:24]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 2alpha
else:
	expr = 0c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-3]) + 3/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:34:25]  Improved number of small numbers from 58 to 60 out of a max of 101
[11/21 16:34:25]  Verifer returned sat in 1.269824 secs.
[11/21 16:34:25]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0            311.789795            311.780818          311.789795         0.124756         0.124756          311.780818          0.000000  0.008977
1            411.789729            411.780818          411.789729       100.008911       100.008911          411.780818          0.000000  0.008911
2           1212.244197            511.780818         1212.244197       800.463379       800.463379          511.780818        700.445557  0.017822
3           1612.475886            611.780818         1612.475886       400.249512       400.249512          611.780818       1000.677246  0.017822
4           1812.600642            711.780818         1812.600642       200.142578       200.142578          711.780818       1100.802002  0.017822
5           1912.671931            811.780818         1912.671931       100.089111       100.089111          811.780818       1100.873291  0.017822
6           1962.716487            861.843196         1962.716487        50.062378        50.062378          861.843196       1100.873291  0.000000
7           2012.787776            911.914485         2012.787776        50.071289        50.071289          911.914485       1100.873291  0.000000
8           2062.867976            961.994685         2062.867976        50.080200        50.080200          961.994685       1100.873291  0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=3, loss_amount=410403/4096, 
, alpha=73/8192, buf_size=73/4096.[0m
[11/21 16:34:29]  --------------------------------------------------------------------------------
[11/21 16:34:29]  Iteration: 5 (0 solution, 4 counterexamples)
[11/21 16:34:30]  Generator returned sat in 0.739873 secs.
[11/21 16:34:30]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:34:31]  Verifer returned unsat in 1.538016 secs.
[11/21 16:34:48]  Improved gap from 0.0 to 43.75
[11/21 16:34:49]  Improved number of small numbers from 121 to 121 out of a max of 121
[11/21 16:34:49]  Verifer returned sat in 17.344001 secs.
[11/21 16:34:49]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0           -160.3125         -506.062500         -160.3125       0.041667       0.041667       -506.062500             0.0                -406.020833     406.062500  345.750000      245.750000
1           -160.3125         -406.062500         -160.3125       0.041667       0.041667       -406.062500             0.0                -160.270833     406.062500  245.750000      145.750000
2           -160.3125         -230.020833         -160.3125      49.708333      49.708333       -230.020833             0.0                -230.020833     406.062500   69.708333       45.750000
3           -160.3125         -206.062500         -160.3125      69.666667      69.666667       -206.062500             0.0                -160.270833     460.312500   45.750000        0.000000
4           -116.4375         -160.312500         -116.4375      89.625000      89.625000       -160.312500             0.0                -160.354167     516.437500   43.875000        0.000000
5           -116.4375         -116.437500         -116.4375      34.854167      34.854167       -116.437500             0.0                -116.479167     572.687500    0.000000      -43.750000
6            -61.6250          -72.645833          -61.6250      54.812500      54.812500        -72.645833             0.0                 -72.645833     628.895833   11.020833      -32.729167
7            -28.8125          -28.854167          -28.8125      43.833333      43.833333        -28.854167             0.0                 -28.854167     685.104167    0.041667      -43.708333
8             14.9375           14.937500           14.9375      43.791667      43.791667         14.937500             0.0                  14.937500     741.312500    0.000000      -43.750000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=479/24, buf_size=983/4.[0m
[11/21 16:34:53]  --------------------------------------------------------------------------------
[11/21 16:34:53]  Iteration: 6 (0 solution, 5 counterexamples)
[11/21 16:34:55]  Generator returned sat in 2.138787 secs.
[11/21 16:34:55]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	expr = 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:34:56]  Improved number of small numbers from 35 to 101 out of a max of 101
[11/21 16:34:56]  Verifer returned sat in 1.179751 secs.
[11/21 16:34:56]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t       queue_t
0           1512.640625           1412.640869         1512.640625         0.124756         0.124756         1412.640869          0.000000     99.999756
1           1512.656494           1512.640869         1512.656494       100.015625       100.015625         1512.640869          0.000000      0.015625
2          47915.765625           1612.640869        47915.765625     46403.124756     46403.124756         1612.640869          0.015625  46303.109131
3          48015.750000           1712.640869        48015.750000     46403.093506     46403.093506         1712.640869          0.015625  46303.093506
4          48115.781250           1812.640869        48115.781250     46403.124756     46403.124756         1812.640869          0.031250  46303.109131
5          48215.765625           1912.640869        48215.765625     46403.093506     46403.093506         1912.640869          0.031250  46303.093506
6          48315.796875           2012.640869        48315.796875     46403.124756     46403.124756         2012.640869          0.046875  46303.109131
7          48415.781250           2112.640869        48415.781250     46403.093506     46403.093506         2112.640869          0.046875  46303.093506
8          48515.812500           2212.640869        48515.812500     46403.124756     46403.124756         2212.640869          0.062500  46303.109131
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=3, loss_amount=3/64, 
, alpha=1/32, buf_size=189657535/4096.[0m
[11/21 16:35:00]  --------------------------------------------------------------------------------
[11/21 16:35:00]  Iteration: 7 (0 solution, 6 counterexamples)
[11/21 16:35:01]  Generator returned sat in 0.473413 secs.
[11/21 16:35:01]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha
else:
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:35:02]  Improved number of small numbers from 48 to 48 out of a max of 101
[11/21 16:35:02]  Verifer returned sat in 1.086326 secs.
[11/21 16:35:02]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           1552.640869           1412.640869         1552.640869         0.124756         0.124756         1412.640869          0.000000  140.000000
1           1652.640869           1512.640869         1652.640869       240.000000       240.000000         1512.640869          0.000000  140.000000
2           1772.578491           1612.640869         1772.578491       259.937622       259.937622         1612.640869         19.937622  140.000000
3           1882.531708           1712.640869         1882.531708       249.953217       249.953217         1712.640869         29.890839  140.000000
4           1982.500519           1812.640869         1982.500519       239.968811       239.968811         1812.640869         29.890839  139.968811
5           1982.500519           1912.640869         1982.500519        19.968811        19.968811         1912.640869         29.890839   39.968811
6           1982.500519           1952.609680         1982.500519        39.937622        39.937622         1952.609680         29.890839    0.000000
7           2002.469330           1972.578491         2002.469330        19.968811        19.968811         1972.578491         29.890839    0.000000
8           2042.406952           2012.516113         2042.406952        39.937622        39.937622         2012.516113         29.890839    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, alpha=327169/16384, buf_size=140.[0m
[11/21 16:35:06]  --------------------------------------------------------------------------------
[11/21 16:35:06]  Iteration: 8 (0 solution, 7 counterexamples)
[11/21 16:35:09]  Generator returned sat in 2.319577 secs.
[11/21 16:35:09]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -2alpha
else:
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 3/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:35:10]  Improved number of small numbers from 51 to 68 out of a max of 101
[11/21 16:35:10]  Verifer returned sat in 1.241373 secs.
[11/21 16:35:10]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           2155.359192           1512.952881         2155.359192         0.124512         0.124512         1512.952881               0.0  642.406311
1           2155.359192           1612.952881         2155.359192       642.344238       642.344238         1612.952881               0.0  542.406311
2           2155.359192           1712.952881         2155.359192        25.406433        25.406433         1712.952881               0.0  442.406311
3           2155.359192           1812.952881         2155.359192        42.344055        42.344055         1812.952881               0.0  342.406311
4           2155.359192           1912.952881         2155.359192        25.406433        25.406433         1912.952881               0.0  242.406311
5           2155.359192           2012.952881         2155.359192        42.344055        42.344055         2012.952881               0.0  142.406311
6           2155.359192           2112.952881         2155.359192        25.406433        25.406433         2112.952881               0.0   42.406311
7           2155.359192           2155.359192         2155.359192        42.344055        42.344055         2155.359192               0.0    0.000000
8           2180.765625           2180.765625         2180.765625        25.406433        25.406433         2180.765625               0.0    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=138753/8192, buf_size=2631297/4096.[0m
[11/21 16:35:14]  --------------------------------------------------------------------------------
[11/21 16:35:14]  Iteration: 9 (0 solution, 8 counterexamples)
[11/21 16:35:18]  Generator returned sat in 3.835000 secs.
[11/21 16:35:18]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:35:19]  Improved number of small numbers from 51 to 52 out of a max of 101
[11/21 16:35:19]  Verifer returned sat in 1.292085 secs.
[11/21 16:35:19]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0           1432.952637           1432.952637         1432.952637         0.124512         0.124512         1432.952637               0.0      0.0
1           1432.968201           1432.968201         1432.968201         0.015564         0.015564         1432.968201               0.0      0.0
2           1432.991547           1432.991547         1432.991547         0.023346         0.023346         1432.991547               0.0      0.0
3           1433.007111           1433.007111         1433.007111         0.015564         0.015564         1433.007111               0.0      0.0
4           1433.022675           1433.022675         1433.022675         0.015564         0.015564         1433.022675               0.0      0.0
5           1433.038239           1433.038239         1433.038239         0.015564         0.015564         1433.038239               0.0      0.0
6           1433.053802           1433.053802         1433.053802         0.015564         0.015564         1433.053802               0.0      0.0
7           1433.069366           1433.069366         1433.069366         0.015564         0.015564         1433.069366               0.0      0.0
8           1433.084930           1433.084930         1433.084930         0.015564         0.015564         1433.084930               0.0      0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, alpha=255/16384, buf_size=1/32.[0m
[11/21 16:35:23]  --------------------------------------------------------------------------------
[11/21 16:35:23]  Iteration: 10 (0 solution, 9 counterexamples)
[11/21 16:35:26]  Generator returned sat in 2.881391 secs.
[11/21 16:35:26]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha
else:
	expr = 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:35:28]  Improved number of small numbers from 65 to 101 out of a max of 101
[11/21 16:35:28]  Verifer returned sat in 1.515672 secs.
[11/21 16:35:28]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           1352.617920           1172.866943         1352.617920         0.124268         0.124268         1172.866943          0.000000  179.750977
1           1433.115967           1272.866943         1433.115967       260.249023       260.249023         1272.866943          0.000000  160.249023
2           1433.115967           1372.866943         1433.115967       160.186768       160.186768         1372.866943          0.000000   60.249023
3           1552.991455           1472.866943         1552.991455       180.124512       180.124512         1472.866943          0.000000   80.124512
4           1672.929199           1572.866943         1672.929199       200.062256       200.062256         1572.866943          0.000000  100.062256
5           1792.866943           1672.866943         1792.866943       220.000000       220.000000         1672.866943          0.000000  120.000000
6           1912.804688           1772.866943         1912.804688       239.937744       239.937744         1772.866943          0.000000  139.937744
7           2032.742432           1872.866943         2032.742432       259.875488       259.875488         1872.866943          0.000000  159.875488
8           2152.680176           1972.866943         2152.680176       279.813232       279.813232         1972.866943          0.062256  179.750977
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=1, loss_amount=255/4096, 
, alpha=81665/4096, buf_size=184065/1024.[0m
[11/21 16:35:32]  --------------------------------------------------------------------------------
[11/21 16:35:32]  Iteration: 11 (0 solution, 10 counterexamples)
[11/21 16:35:33]  Generator returned sat in 0.705571 secs.
[11/21 16:35:33]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:35:35]  Verifer returned unsat in 1.743846 secs.
[11/21 16:35:42]  Improved gap from 0.06770833333333333 to 100
[11/21 16:35:42]  Improved number of small numbers from 88 to 121 out of a max of 121
[11/21 16:35:42]  Verifer returned sat in 7.096547 secs.
[11/21 16:35:42]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0         -142.297119         -225.322998       -142.297119       0.041748       0.041748       -225.322998        0.000000                -225.322998     516.437256   83.025879       17.973877
1          -60.270996         -160.270996        -60.270996     165.052002     165.052002       -160.270996        0.000000                -160.270996     516.437256  100.000000        0.000000
2           57.708008           35.687256         57.708008     217.979004     217.979004         35.687256        0.005127                  35.687256     516.437256   22.015625       17.973877
3          157.713135          100.739502        157.713135     122.020752     122.020752        100.739502        0.010254                 100.739502     516.437256   56.963379       17.973877
4          239.739258          183.770752        239.739258     138.989502     138.989502        183.770752        0.010254                 183.770752     516.437256   55.958252        0.000000
5          339.739258          284.781250        339.739258     155.958252     155.958252        284.781250        0.010254                 284.781250     516.437256   54.947754        0.000000
6          457.718506          438.718506        457.718506     172.927002     172.927002        438.718506        0.015625                 438.718506     516.437256   18.984375       17.973877
7          557.723633          539.729004        557.723633     118.989502     118.989502        539.729004        0.020752                 539.729004     516.437256   17.973877       17.973877
8          675.708008          539.729004        675.708008     135.958252     135.958252        539.729004       18.005127                 539.723633     516.437256  117.973877       17.973877
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, loss_amount=73707/4096, 
, alpha=543/32, buf_size=73621/4096.[0m
[11/21 16:35:46]  --------------------------------------------------------------------------------
[11/21 16:35:46]  Iteration: 12 (0 solution, 11 counterexamples)
[11/21 16:35:52]  Generator returned sat in 5.140555 secs.
[11/21 16:35:52]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 0alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:35:54]  Verifer returned unsat in 2.177890 secs.
[11/21 16:35:54]  Improved number of small numbers from 120 to 120 out of a max of 120
[11/21 16:35:54]  Verifer returned sat in 0.493036 secs.
[11/21 16:35:54]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0         -142.297119         -191.385498       -142.297119       0.041748       0.041748       -191.385498        0.000000                -191.385498     516.437256   49.088379       17.973877
1          -60.270996         -160.270996        -60.270996     131.114502     131.114502       -160.270996        0.000000                -160.270996     516.437256  100.000000        0.000000
2           57.708008           35.687256         57.708008     217.979004     217.979004         35.687256        0.005127                  35.687256     516.437256   22.015625       17.973877
3          157.713135          100.739502        157.713135     122.020752     122.020752        100.739502        0.010254                 100.739502     516.437256   56.963379       17.973877
4          239.739258          183.770752        239.739258     138.989502     138.989502        183.770752        0.010254                 183.770752     516.437256   55.958252        0.000000
5          339.739258          284.781250        339.739258     155.958252     155.958252        284.781250        0.010254                 284.781250     516.437256   54.947754        0.000000
6          457.718506          438.718506        457.718506     172.927002     172.927002        438.718506        0.015625                 438.718506     516.437256   18.984375       17.973877
7          574.692383          539.729004        574.692383     135.958252     135.958252        539.729004       16.989502                 539.729004     516.437256   17.973877       17.973877
8          709.645508          539.729004        709.645508     152.927002     152.927002        539.729004       51.942627                 539.723633     516.437256  117.973877       17.973877
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, loss_amount=212715/4096, 
, alpha=543/32, buf_size=73621/4096.[0m
[11/21 16:35:58]  --------------------------------------------------------------------------------
[11/21 16:35:58]  Iteration: 13 (0 solution, 12 counterexamples)
[11/21 16:36:02]  Generator returned sat in 3.399827 secs.
[11/21 16:36:02]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha
else:
	expr = 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:36:03]  Improved number of small numbers from 47 to 101 out of a max of 101
[11/21 16:36:03]  Verifer returned sat in 0.364427 secs.
[11/21 16:36:03]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           2072.812500           1572.765869         2072.812500         0.124023         0.124023         1572.765869               0.0  500.046631
1           2172.812500           1672.765869         2172.812500       600.046631       600.046631         1672.765869               0.0  500.046631
2           2172.812500           1772.765869         2172.812500         0.015381         0.015381         1772.765869               0.0  400.046631
3           2172.812500           1872.765869         2172.812500         0.031006         0.031006         1872.765869               0.0  300.046631
4           2172.812500           1972.765869         2172.812500         0.015625         0.015625         1972.765869               0.0  200.046631
5           2172.812500           2072.765869         2172.812500         0.031250         0.031250         2072.765869               0.0  100.046631
6           2172.812500           2172.765869         2172.812500         0.015625         0.015625         2172.765869               0.0    0.046631
7           2172.812500           2172.812500         2172.812500         0.031250         0.031250         2172.812500               0.0    0.000000
8           2172.828125           2172.828125         2172.828125         0.015625         0.015625         2172.828125               0.0    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=1/64, buf_size=2048191/4096.[0m
[11/21 16:36:07]  --------------------------------------------------------------------------------
[11/21 16:36:07]  Iteration: 14 (0 solution, 13 counterexamples)
[11/21 16:36:10]  Generator returned sat in 2.953732 secs.
[11/21 16:36:10]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:36:12]  Verifer returned unsat in 1.627723 secs.
[11/21 16:36:29]  Verifer returned unsat in 17.105368 secs.
[11/21 16:36:29]  Proved solution: 
[1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:36:29]  --------------------------------------------------------------------------------
[11/21 16:36:29]  Iteration: 15 (1 solution, 13 counterexamples)
[11/21 16:36:31]  Generator returned sat in 1.341046 secs.
[11/21 16:36:31]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -2alpha
else:
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:36:33]  Verifer returned unsat in 2.177329 secs.
[11/21 16:37:15]  Improved gap from 0.0 to 45.3125
[11/21 16:37:15]  Improved number of small numbers from 117 to 121 out of a max of 121
[11/21 16:37:15]  Verifer returned sat in 42.067477 secs.
[11/21 16:37:15]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t    queue_t  bottle_queue_t
0         -187.620605         -187.620605       -187.620605       0.041260       0.041260       -187.620605             0.0                -187.620605     352.416016   0.000000       -0.000488
1          -10.933594         -102.851318        -10.933594     176.687012     176.687012       -102.851318             0.0                -102.851318     352.416016  91.917725       76.686523
2          -10.933594          -10.954102        -10.933594      63.156494      63.156494        -10.954102             0.0                 -10.954102     352.416016   0.020508      -23.313477
3           57.712646           12.400146         57.712646      68.666748      68.666748         12.400146             0.0                  12.400146     407.083008  45.312500       -0.000244
4           81.046387           57.712891         81.046387      68.646240      68.646240         57.712891             0.0                  57.691895     461.770508  23.333496      -21.979004
5          103.066895          103.045898        103.066895      45.354004      45.354004        103.045898             0.0                 103.045898     516.437012   0.020996      -45.291992
6          153.910156          148.379395        153.910156      50.864258      50.864258        148.379395             0.0                 148.379395     571.104004   5.530762      -39.781738
7          204.753906          193.691895        204.753906      56.374512      56.374512        193.691895             0.0                 239.025146     625.791260  11.062012      -34.250732
8          250.035400          239.025146        250.035400      56.343506      56.343506        239.025146             0.0                 239.025146     625.791504  11.010254      -88.968994
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=11285/2048, buf_size=314195/4096.[0m
[11/21 16:37:19]  --------------------------------------------------------------------------------
[11/21 16:37:19]  Iteration: 16 (1 solution, 14 counterexamples)
[11/21 16:37:21]  Generator returned sat in 1.088132 secs.
[11/21 16:37:21]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:37:22]  Verifer returned unsat in 1.677586 secs.
[11/21 16:38:18]  Improved gap from 3.11346435546875 to 42.1875
[11/21 16:38:21]  Improved number of small numbers from 35 to 50 out of a max of 121
[11/21 16:38:21]  Verifer returned sat in 58.226253 secs.
[11/21 16:38:21]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0         -153.811279         -267.614905       -153.811279       0.041016       0.041016       -267.614905         0.00000                -267.635498     548.128680  113.803625       13.803625
1         -153.811279         -167.594275       -153.811279       0.020752       0.020752       -167.594275         0.00000                -167.594275     605.920551   13.782996      -28.404504
2          -11.582507          -53.811267        -11.582507     156.011768     156.011768        -53.811267         0.02063                 -53.811267     605.920551   42.208130       13.803638
3           25.545166          -25.386145         25.545166      79.335803      79.335803        -25.386145         0.02063                 -25.386145     654.989240   50.910681        0.000000
4           67.753296           25.524536         67.753296      93.118811      93.118811         25.524536         0.02063                  25.503662     712.781110   42.208130        0.000000
5           97.989465           67.732666         97.989465      72.444299      72.444299         67.732666         0.02063                  67.711914     768.741302   30.236169      -13.803638
6          153.980603          111.772473        153.980603      86.227307      86.227307        111.772473         0.02063                 111.751953     826.553802   42.187500        0.000000
7          191.149536          153.959973        191.149536      79.356433      79.356433        153.959973         0.02063                 153.939209     884.366211   37.168933       -5.018658
8          233.316406          196.167969        233.316406      79.335803      79.335803        196.167969         0.02063                 196.167969     884.366455   37.127808      -62.851544
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=70569/5120, buf_size=565397/40960.[0m
[11/21 16:38:25]  --------------------------------------------------------------------------------
[11/21 16:38:25]  Iteration: 17 (1 solution, 15 counterexamples)
[11/21 16:38:27]  Generator returned sat in 2.265916 secs.
[11/21 16:38:28]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:38:29]  Verifer returned unsat in 1.662083 secs.
[11/21 16:39:57]  Improved gap from 0.020404052734375 to 42.1875
[11/21 16:39:58]  Improved number of small numbers from 66 to 121 out of a max of 121
[11/21 16:39:58]  Verifer returned sat in 88.950831 secs.
[11/21 16:39:58]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t    queue_t  bottle_queue_t
0         -616.204346         -687.806641       -616.204346       0.041016       0.041016       -687.806641        0.000000                -687.806641     625.760010  71.602295       71.602295
1         -616.204346         -616.224609       -616.204346      71.582031      71.582031       -616.224609        0.000000                -616.224609     625.760010   0.020264      -28.397705
2         -416.183838         -496.392578       -416.183838     200.040771     200.040771       -496.392578        0.020264                -496.392578     625.760010  80.188477       71.602539
3         -416.163330         -487.806641       -416.163330      80.208984      80.208984       -487.806641        0.020264                -487.827148     654.136963  71.623047        0.000000
4         -397.245361         -416.183594       -397.245361      90.541016      90.541016       -416.183594        0.020264                -416.204346     711.949219  18.917969      -23.269775
5         -341.120361         -373.975586       -341.120361      75.042969      75.042969       -373.975586        0.020264                -373.975586     768.741455  32.834961      -10.352539
6         -288.580322         -330.788086       -288.580322      85.375000      85.375000       -330.788086        0.020264                -330.808594     826.553955  42.187500        0.000000
7         -250.538330         -288.600586       -250.538330      80.229492      80.229492       -288.600586        0.020264                -246.392578     884.366455  38.041992       -4.145508
8         -208.371338         -246.413086       -208.371338      80.208984      80.208984       -246.413086        0.020264                -246.433838     942.178955  38.021484       -4.166016
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=2645/256, buf_size=73321/1024.[0m
[11/21 16:40:06]  --------------------------------------------------------------------------------
[11/21 16:40:06]  Iteration: 18 (1 solution, 16 counterexamples)
[11/21 16:40:10]  Generator returned sat in 2.992469 secs.
[11/21 16:40:10]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + -1/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:40:13]  Verifer returned unsat in 2.816893 secs.
[11/21 16:41:29]  Improved gap from 0.01025390625 to 42.1875
[11/21 16:41:29]  Improved number of small numbers from 121 to 121 out of a max of 121
[11/21 16:41:29]  Verifer returned sat in 76.442115 secs.
[11/21 16:41:29]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0         -786.214355         -786.234863       -786.214355       0.041016       0.041016       -786.234863        0.000000                -686.214355     875.677979    0.020508      -99.979492
1         -519.664062         -686.234863       -519.664062     266.570801     266.570801       -686.234863        0.020508                -586.214355     875.677979  166.550293       66.550293
2         -519.664062         -519.705078       -519.664062      67.926270      67.926270       -519.705078        0.020508                -519.705078     875.677979    0.020508      -33.449707
3         -440.778809         -486.234863       -440.778809      78.905762      78.905762       -486.234863        0.020508                -440.778809     930.242432   45.435547        0.000000
4         -396.329102         -440.799316       -396.329102      89.885254      89.885254       -440.799316        0.020508                -440.799316     985.792725   44.449707        0.000000
5         -367.362793         -396.329102       -367.362793      73.416016      73.416016       -396.329102        0.020508                -396.329102    1043.584717   28.945801      -13.241699
6         -311.913086         -354.121094       -311.913086      84.395508      84.395508       -354.121094        0.020508                -354.121094    1101.376709   42.187500        0.000000
7         -272.912109         -311.933594       -272.912109      81.188477      81.188477       -311.933594        0.020508                -311.933594    1159.189209   39.000977       -3.186523
8         -233.007324         -269.725586       -233.007324      78.905762      78.905762       -269.725586        0.020508                -269.725586    1216.981201   36.697754       -5.489746
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=11243/1024, buf_size=136295/2048.[0m
[11/21 16:41:37]  --------------------------------------------------------------------------------
[11/21 16:41:37]  Iteration: 19 (1 solution, 17 counterexamples)
[11/21 16:41:39]  Generator returned sat in 1.418446 secs.
[11/21 16:41:39]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 3/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:41:42]  Verifer returned unsat in 2.512483 secs.
[11/21 16:41:59]  Verifer returned unsat in 17.511917 secs.
[11/21 16:41:59]  Proved solution: 
[1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 3/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:41:59]  --------------------------------------------------------------------------------
[11/21 16:41:59]  Iteration: 20 (2 solution, 17 counterexamples)
[11/21 16:42:04]  Generator returned sat in 3.668910 secs.
[11/21 16:42:04]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 0alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:42:06]  Verifer returned unsat in 2.082943 secs.
[11/21 16:43:42]  Improved gap from 0.0 to 40.625
[11/21 16:43:43]  Improved number of small numbers from 121 to 121 out of a max of 121
[11/21 16:43:43]  Verifer returned sat in 96.090086 secs.
[11/21 16:43:43]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t    queue_t  bottle_queue_t
0        -1094.948242        -1094.968750      -1094.948242       0.041016       0.041016      -1094.968750             0.0               -1094.968750    1262.432373   0.020508      -21.958984
1         -932.282227        -1007.569336       -932.282227     162.686523     162.686523      -1007.569336             0.0               -1007.569336    1262.432373  75.287109       40.707031
2         -932.282227         -972.968750       -932.282227      75.287109      75.287109       -972.968750             0.0                -972.968750    1321.725342  40.686523        0.000000
3         -891.657227         -932.282227       -891.657227      81.311523      81.311523       -932.282227             0.0                -932.302734    1381.100342  40.625000        0.000000
4         -856.995117         -891.636719       -856.995117      75.287109      75.287109       -891.636719             0.0                -891.636719    1440.434326  34.641602       -6.003906
5         -810.325195         -850.991211       -810.325195      81.311523      81.311523       -850.991211             0.0                -850.991211    1499.768311  40.666016        0.000000
6         -769.700195         -810.325195       -769.700195      81.291016      81.291016       -810.325195             0.0                -810.345703    1559.143311  40.625000        0.000000
7         -723.009766         -769.679688       -723.009766      87.315430      87.315430       -769.679688             0.0                -769.679688    1612.452881  46.669922        0.000000
8         -688.368164         -722.989258       -688.368164      81.311523      81.311523       -722.989258             0.0                -722.989258    1612.452881  34.621094      -65.358398
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, alpha=6169/1024, buf_size=41705/1024.[0m
[11/21 16:43:50]  --------------------------------------------------------------------------------
[11/21 16:43:50]  Iteration: 21 (2 solution, 18 counterexamples)
[11/21 16:43:56]  Generator returned sat in 4.439342 secs.
[11/21 16:43:56]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -2alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:43:59]  Verifer returned unsat in 2.843482 secs.
[11/21 16:45:18]  Improved gap from 0.01019287109375 to 35.9375
[11/21 16:45:20]  Improved number of small numbers from 70 to 121 out of a max of 121
[11/21 16:45:20]  Verifer returned sat in 80.852963 secs.
[11/21 16:45:20]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0        -1926.806641        -1964.163086      -1926.806641       0.040771       0.040771      -1964.163086        0.000000               -1964.163086    1262.432129   37.356445       37.356445
1        -1826.802979        -1864.194336      -1826.802979     137.360107     137.360107      -1864.194336        0.003662               -1864.194336    1262.432129   37.387695       37.356445
2        -1745.505615        -1764.163086      -1745.505615     118.685059     118.685059      -1764.163086        0.003662               -1764.163086    1262.432129   18.653809       18.653809
3        -1626.799561        -1764.152588      -1626.799561     137.359863     137.359863      -1764.152588        0.007080               -1764.152588    1262.432129  137.345947       37.356445
4        -1626.799561        -1664.159424      -1626.799561      18.674805      18.674805      -1664.159424        0.007080               -1664.159424    1325.075684   37.352783        0.000000
5        -1626.799561        -1626.806641      -1626.799561      37.349609      37.349609      -1626.806641        0.007080               -1590.865479    1389.138184    0.000000      -35.937500
6        -1570.775146        -1590.869141      -1570.775146      56.024414      56.024414      -1590.869141        0.007080               -1590.872314    1453.200684   20.086914      -15.850586
7        -1516.162842        -1554.931641      -1516.162842      74.699219      74.699219      -1554.931641        0.007080               -1554.934814    1514.438965   38.761719        0.000000
8        -1461.550537        -1514.166504      -1461.550537      93.374023      93.374023      -1514.166504        0.007080               -1514.166504    1514.438965   52.608887      -45.387695
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, alpha=19123/1024, buf_size=38253/1024.[0m
[11/21 16:45:27]  --------------------------------------------------------------------------------
[11/21 16:45:27]  Iteration: 22 (2 solution, 19 counterexamples)
[11/21 16:45:30]  Generator returned sat in 2.205283 secs.
[11/21 16:45:30]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:45:33]  Verifer returned unsat in 2.772648 secs.
[11/21 16:46:32]  Improved gap from 0.005096435546875 to 35.9375
[11/21 16:46:36]  Improved number of small numbers from 40 to 58 out of a max of 121
[11/21 16:46:36]  Verifer returned sat in 62.606396 secs.
[11/21 16:46:36]  Counter example: 
[93m   adv__tot_arrival_t  adv__tot_service_t  adv__arrival_0,t  adv__cwnd_0,t  adv__rate_0,t  adv__service_0,t  adv__losts_0,t  adv__tot_service_choice_t  adv__wasted_t     queue_t  bottle_queue_t
0        -2330.043945        -2360.268066      -2330.043945       0.040771       0.040771      -2360.268066        0.000000               -2360.268066    1234.418579   30.224121        5.040588
1        -2230.064209        -2235.084534      -2230.064209     130.203857     130.203857      -2235.084534        0.000000               -2235.084534    1234.418579    5.020325        5.020325
2        -2130.023376        -2135.084534      -2130.023376     105.061157     105.061157      -2135.084534        0.020386               -2135.084534    1234.418579    5.040771        5.040771
3        -2024.982605        -2135.023376      -2024.982605     110.081543     110.081543      -2135.023376        5.061157               -2135.023376    1234.418579  104.979614        5.040771
4        -2024.982605        -2035.064209      -2024.982605      42.500000      42.500000      -2035.064209        5.061157               -2035.064209    1298.460449    5.020447      -30.917358
5        -1982.482666        -1999.106262      -1982.482666      47.520386      47.520386      -1999.106262        5.061157               -1999.106262    1362.502808   11.562439      -24.375061
6        -1941.504333        -1963.168762      -1941.504333      52.540771      52.540771      -1963.168762        5.061157               -1963.188965    1426.565308   16.603271      -19.334229
7        -1900.546448        -1927.231262      -1900.546448      57.561157      57.561157      -1927.231262        5.061157               -1927.251465    1490.627808   21.623657      -14.313843
8        -1859.588562        -1891.293701      -1859.588562      62.581543      62.581543      -1891.293701        5.061157               -1891.293701    1490.627930   26.643982      -73.355835
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, alpha=41127/8192, buf_size=20647/4096.[0m
[11/21 16:46:44]  --------------------------------------------------------------------------------
[11/21 16:46:44]  Iteration: 23 (2 solution, 20 counterexamples)
[11/21 16:46:51]  Generator returned unsat in 6.049840 secs.
[11/21 16:46:51]  [96mNo more solutions found[0m
[11/21 16:46:51]  Final solutions:
[11/21 16:46:51]  0: [1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:46:51]  1: [1m[92mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -3/2alpha
else:
	expr = 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-3]) + 3/2alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[11/21 16:46:51]  Took 776.196870 secs.
