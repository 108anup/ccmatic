[08/30 10:59:46]  --------------------------------------------------------------------------------
[08/30 10:59:46]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 10:59:46]  Generator returned sat in 0.006708 secs.
[08/30 10:59:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:46]  Improved gap from 6.366666666666666 to 100
[08/30 10:59:46]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:59:46]  Verifer returned sat in 0.276133 secs.
[08/30 10:59:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0       -8167.27       -8187.27   8187.27     -8167.27       0.1     -8187.27        0.0     20.0            20.0
1       -8087.27       -8087.47   8187.27     -8087.27     100.0     -8087.47        0.0      0.2             0.0
2       -8087.27       -8087.27   8187.27     -8087.27       0.1     -8087.27        0.0      0.0          -100.0
3       -7915.27       -7915.27   8187.27     -7915.27     172.0     -7915.27        0.0      0.0           -28.0
4       -7298.27       -7887.27   8187.27     -7298.27     617.0     -7887.27      469.0    120.0            20.0
5       -5782.87       -7787.27   8187.27     -5782.87    1635.4     -7787.27     1884.4    120.0            20.0
6       -2031.07       -7687.27   8187.27     -2031.07    3871.8     -7687.27     5536.2    120.0            20.0
7        6049.53       -7560.27   8187.27      6049.53    8200.6     -7560.27    13516.8     93.0            20.0
8       23012.73       -7487.27   8187.27     23012.73   17056.2     -7487.27    30380.0    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=29911.[0m
[08/30 10:59:47]  --------------------------------------------------------------------------------
[08/30 10:59:47]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 10:59:47]  Generator returned sat in 0.022844 secs.
[08/30 10:59:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:47]  Improved number of small numbers from 97 to 99 out of a max of 99
[08/30 10:59:47]  Verifer returned sat in 0.172132 secs.
[08/30 10:59:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -8167.27002   -8187.270000   8187.27  -8167.27002     0.099609 -8187.270000     0.0000   19.999980        19.99998
1    -8087.27000   -8087.469971   8187.27  -8087.27000   100.000000 -8087.469971     0.0000    0.199971         0.00000
2    -8087.27000   -8087.270000   8187.27  -8087.27000     0.150146 -8087.270000     0.0000    0.000000      -100.00000
3    -7752.07000   -7915.270000   8187.27  -7752.07000   335.200000 -7915.270000   115.2000   48.000000        20.00000
4    -7298.27000   -7787.270000   8187.27  -7298.27000   501.800000 -7787.270000   469.0000   20.000000        20.00000
5    -6566.57000   -7687.270000   8187.27  -6566.57000   751.700000 -7687.270000  1100.7000   20.000000        20.00000
6    -5460.02000   -7587.270000   8187.27  -5460.02000  1126.550000 -7587.270000  2107.2500   20.000000        20.00000
7    -3791.19500   -7560.270000   8187.27  -3791.19500  1688.825000 -7560.270000  3676.0750   93.000000        20.00000
8    -1351.95750   -7487.269775   8187.27  -1351.95750  2532.237500 -7487.269775  6015.3125  119.999775        20.00000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=88741/16.[0m
[08/30 10:59:47]  --------------------------------------------------------------------------------
[08/30 10:59:47]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 10:59:47]  Generator returned sat in 0.084444 secs.
[08/30 10:59:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:59:48]  Improved gap from 0.0025 to 21.875
[08/30 10:59:48]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:59:48]  Verifer returned sat in 0.301328 secs.
[08/30 10:59:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -8199.345215   -8199.395020  8199.345215 -8199.345215    0.099609 -8199.395020        0.0   0.049805        0.000000
1   -8199.345215   -8199.345215  8277.470215 -8199.345215    0.024902 -8199.345215        0.0   0.000000      -21.875000
2   -8057.495117   -8086.820312  8277.470215 -8057.495117  141.850098 -8086.820312        0.0  29.325195       19.975098
3   -8057.470215   -8077.470215  8355.595215 -8057.470215   29.350098 -8077.470215        0.0  20.000000       -1.875000
4   -8049.120117   -8049.120117  8427.245117 -8049.120117   28.350098 -8049.120117        0.0   0.000000      -21.875000
5   -8021.770020   -8027.245117  8505.370117 -8021.770020   27.350098 -8027.245117        0.0   5.475098      -16.399902
6   -8000.895020   -8005.370117  8583.495117 -8000.895020   26.350098 -8005.370117        0.0   4.475098      -17.399902
7   -7980.020020   -7983.495117  8659.145020 -7980.020020   25.350098 -7983.495117        0.0   3.475098      -20.875000
8   -7959.145020   -7959.145020  8659.145020 -7959.145020   24.350098 -7959.145020        0.0   0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:59:48]  --------------------------------------------------------------------------------
[08/30 10:59:48]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 10:59:48]  Generator returned sat in 0.061645 secs.
[08/30 10:59:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:59:48]  Improved gap from 0.0 to 100
[08/30 10:59:48]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:59:48]  Verifer returned sat in 0.278770 secs.
[08/30 10:59:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8412.358398   -8472.383301  8583.495117 -8412.358398    0.099609 -8472.383301    0.000000   60.024902            20.0
1   -8312.333496   -8332.358398  8583.495117 -8312.333496  160.049805 -8332.358398    0.024902   20.000000            20.0
2   -8232.333496   -8232.383301  8583.495117 -8232.333496  100.000000 -8232.383301    0.024902    0.024902             0.0
3   -8112.308594   -8132.358398  8583.495117 -8112.308594  120.049805 -8132.358398    0.049805   20.000000            20.0
4   -7962.296143   -8132.358398  8583.495117 -7962.296143  170.012451 -8132.358398   50.062256  120.000000            20.0
5   -7962.296143   -8021.358398  8583.495117 -7962.296143  100.000000 -8021.358398   50.062256    9.000000           -80.0
6   -7711.271240   -7852.358398  8583.495117 -7711.271240  260.024902 -7852.358398  101.087158   40.000000            20.0
7   -7611.271240   -7732.358398  8583.495117 -7611.271240  140.000000 -7732.358398  101.087158   20.000000            20.0
8   -7162.271240   -7732.358398  8583.495117 -7162.271240  469.000000 -7732.358398  450.087158  120.000000            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=819251/2048.[0m
[08/30 10:59:49]  --------------------------------------------------------------------------------
[08/30 10:59:49]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 10:59:49]  Generator returned sat in 0.088069 secs.
[08/30 10:59:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:49]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 10:59:49]  Verifer returned sat in 0.171492 secs.
[08/30 10:59:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8282.371094   -8348.420898  8483.495117 -8282.371094    0.099609 -8348.420898    0.000000   66.049805             0.0
1   -8282.371094   -8282.371094  8583.495117 -8282.371094    0.024902 -8282.371094    0.000000    0.000000             0.0
2   -8182.371094   -8282.371094  8583.495117 -8182.371094  100.000000 -8282.371094    0.000000  100.000000             0.0
3   -8062.321289   -8090.371094  8583.495117 -8062.321289  220.049805 -8090.371094    0.049805   28.000000            20.0
4   -7962.296387   -7982.371094  8583.495117 -7962.296387  128.024902 -7982.371094    0.074707   20.000000            20.0
5   -7833.296387   -7882.371094  8583.495117 -7833.296387  149.000000 -7882.371094   29.074707   20.000000            20.0
6   -7654.296387   -7782.371094  8583.495117 -7654.296387  199.000000 -7782.371094  108.074707   20.000000            20.0
7   -7521.296387   -7715.037760  8583.495117 -7521.296387  153.000000 -7715.037760  141.074707   52.666667            20.0
8   -7441.296387   -7682.371094  8583.495117 -7441.296387  132.666667 -7682.371094  141.074707  100.000000             0.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=141.[0m
[08/30 10:59:49]  --------------------------------------------------------------------------------
[08/30 10:59:49]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 10:59:49]  Generator returned sat in 0.066396 secs.
[08/30 10:59:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:59:50]  Improved gap from 0.0 to 0
[08/30 10:59:50]  Improved number of small numbers from 57 to 81 out of a max of 100
[08/30 10:59:50]  Verifer returned sat in 0.534833 secs.
[08/30 10:59:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -7627.594238   -7627.596436  8183.529053 -7627.594238    0.099609 -7627.596436        0.0   0.002197        0.000078
1   -7627.594238   -7627.594238  8283.528809 -7627.594238    0.001465 -7627.594238        0.0   0.000000       -0.000166
2   -7507.595459   -7527.594238  8283.528809 -7507.595459  119.998779 -7527.594238        0.0  19.998779       19.998613
3   -7427.594238   -7427.595381  8283.528809 -7427.594238  100.000000 -7427.595381        0.0   0.001143       -0.000166
4   -7427.585381   -7427.586631  8383.520020 -7427.585381    0.010000 -7427.586631        0.0   0.001250       -0.000098
5   -7427.576631   -7427.577881  8483.511230 -7427.576631    0.010000 -7427.577881        0.0   0.001250       -0.000137
6   -7427.567881   -7427.569131  8583.495117 -7427.567881    0.010000 -7427.569131        0.0   0.001250       -0.007500
7   -7427.559131   -7427.560381  8683.493652 -7427.559131    0.010000 -7427.560381        0.0   0.001250       -0.000215
8   -7427.550381   -7427.551514  8683.493896 -7427.550381    0.010000 -7427.551514        0.0   0.001133      -99.991221
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:59:50]  --------------------------------------------------------------------------------
[08/30 10:59:50]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 10:59:51]  Generator returned sat in 0.077042 secs.
[08/30 10:59:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:51]  Improved gap from 2.0 to 100
[08/30 10:59:51]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:59:51]  Verifer returned sat in 0.258714 secs.
[08/30 10:59:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -8026.783447   -8046.783447  8602.718018 -8026.783447    0.099365 -8046.783447   0.000000  20.000000       20.000000
1   -8026.783447   -8046.783447  8602.718018 -8026.783447    0.024658 -8046.783447   0.000000  20.000000      -80.000000
2   -7826.808350   -7906.708740  8602.718018 -7826.808350  219.975098 -7906.708740   0.000000  79.900391       19.975098
3   -7726.758545   -7805.708740  8602.718018 -7726.758545  179.950195 -7805.708740   0.024902  78.925293       20.000000
4   -7626.733643   -7724.733643  8602.718018 -7626.733643  178.950195 -7724.733643   0.049805  97.950195       20.000000
5   -7546.733643   -7546.808350  8602.718018 -7546.733643  177.950195 -7546.808350   0.049805   0.024902        0.000000
6   -7365.808350   -7506.708740  8602.718018 -7365.808350  180.950195 -7506.708740  60.975098  79.925293       20.000000
7   -7265.783447   -7405.708740  8602.718018 -7265.783447  179.950195 -7405.708740  61.000000  78.925293       20.000000
8   -7165.758545   -7324.733643  8602.718018 -7165.758545  178.950195 -7324.733643  61.024902  97.950195       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=124877/2048.[0m
[08/30 10:59:51]  --------------------------------------------------------------------------------
[08/30 10:59:51]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 10:59:51]  Generator returned sat in 0.026377 secs.
[08/30 10:59:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:51]  Improved gap from 0.0 to 0
[08/30 10:59:51]  Improved number of small numbers from 78 to 100 out of a max of 100
[08/30 10:59:51]  Verifer returned sat in 0.238514 secs.
[08/30 10:59:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8026.783691   -8046.783447  8107.681152 -8026.783691    0.099365 -8046.783447        0.0   19.999756       19.999756
1   -8026.783691   -8046.783447  8107.681152 -8026.783691    0.024414 -8046.783447        0.0   19.999756      -80.000244
2   -7826.808350   -7946.783447  8107.681152 -7826.808350  219.975098 -7946.783447        0.0  119.975098       19.975098
3   -7745.771240   -7746.783447  8107.681152 -7745.771240  201.012207 -7746.783447        0.0    1.012207        1.012207
4   -7745.771240   -7746.758789  8206.668701 -7745.771240    1.000000 -7746.758789        0.0    0.987549       -0.000244
5   -7745.758789   -7745.770996  8305.681152 -7745.758789    1.000000 -7745.770996        0.0    0.012207       -0.975342
6   -7744.770996   -7744.783447  8404.693359 -7744.770996    1.000000 -7744.783447        0.0    0.012451       -0.975342
7   -7743.783447   -7743.795654  8503.705811 -7743.783447    1.000000 -7743.795654        0.0    0.012207       -0.975342
8   -7742.795654   -7742.808105  8602.717773 -7742.795654    1.000000 -7742.808105        0.0    0.012451       -0.975586
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:59:52]  --------------------------------------------------------------------------------
[08/30 10:59:52]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 10:59:52]  Generator returned sat in 0.578411 secs.
[08/30 10:59:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:53]  Improved gap from 0.000244140625 to 1.5625
[08/30 10:59:53]  Improved number of small numbers from 67 to 72 out of a max of 100
[08/30 10:59:53]  Verifer returned sat in 0.429033 secs.
[08/30 10:59:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -8026.783936   -8026.808594  8087.706299 -8026.783936    0.099121 -8026.808594   0.000000   0.024658        0.024658
1   -8026.783936   -8026.784180  8087.706299 -8026.783936    0.024170 -8026.784180   0.000000   0.000244      -99.975342
2   -7806.809082   -7826.808594  8087.706299 -7806.809082  219.975098 -7826.808594   0.000000  19.999512       19.999512
3   -7726.808350   -7726.808594  8087.706299 -7726.808350  100.000244 -7726.808594   0.000000   0.000244        0.000244
4   -7575.808228   -7626.808838  8087.706299 -7575.808228  151.000366 -7626.808838  31.000366  20.000244       20.000000
5   -7575.808228   -7608.371338  8167.706299 -7575.808228    0.010000 -7608.371338  31.000366   1.562744        0.000000
6   -7575.808228   -7606.808594  8265.184082 -7575.808228    1.015000 -7606.808594  31.000366   0.000000       -2.522217
7   -7573.285728   -7604.286338  8363.621338 -7573.285728    2.522500 -7604.286338  31.000366   0.000244       -1.562461
8   -7568.502222   -7602.723633  8363.621338 -7568.502222    4.783750 -7602.723633  31.000366   3.221045      -96.778955
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:59:53]  --------------------------------------------------------------------------------
[08/30 10:59:53]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 10:59:53]  Generator returned sat in 0.090738 secs.
[08/30 10:59:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:59:54]  Improved number of small numbers from 53 to 61 out of a max of 99
[08/30 10:59:54]  Verifer returned sat in 0.763068 secs.
[08/30 10:59:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8857.814453   -8877.814222  8067.716888 -8857.814453    0.098877 -8877.814222    0.000000   19.999769       19.999769
1   -8757.813389   -8777.814453  8067.716888 -8757.813389  120.000833 -8777.814453    0.000833   20.000231       20.000000
2   -8757.813389   -8757.815055  8067.716888 -8757.813389    0.000977 -8757.815055    0.000833    0.000833      -80.000000
3   -8677.812555   -8677.814222  8067.716888 -8677.812555   80.001667 -8677.814222    0.000833    0.000833      -99.999167
4   -8236.812555   -8477.814222  8067.716888 -8236.812555  441.000833 -8477.814222  221.001667   20.000000       20.000000
5   -8236.812555   -8477.814222  8067.716888 -8236.812555    0.010000 -8477.814222  221.001667   20.000000      -80.000000
6   -7695.805889   -8377.814209  8067.716888 -7695.805889  561.006667 -8377.814209  562.008333  119.999987       20.000000
7   -7695.805889   -8257.816305  8067.716888 -7695.805889    0.010000 -8257.816305  562.008333    0.002083      -80.000000
8   -7254.807139   -8177.814209  8067.716888 -7254.807139  441.000833 -8177.814209  803.007083  119.999987       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=1396813/2400.[0m
[08/30 10:59:55]  --------------------------------------------------------------------------------
[08/30 10:59:55]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 10:59:55]  Generator returned sat in 0.536459 secs.
[08/30 10:59:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:59:55]  Improved gap from 0.0 to 1.5625
[08/30 10:59:56]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:59:56]  Verifer returned sat in 0.415636 secs.
[08/30 10:59:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t
0   -8464.452393   -8484.452393  7674.354980 -8464.452393    0.098877 -8484.452393    0.000000  20.000000       20.000000
1   -8041.443848   -8384.452393  7674.354980 -8041.443848  443.008545 -8384.452393  323.008545  20.000000       20.000000
2   -7961.443848   -8286.014893  7674.354980 -7961.443848  100.000000 -8286.014893  323.008545   1.562500        0.000000
3   -7961.006348   -8284.452393  7772.792480 -7961.006348    2.000000 -8284.452393  323.008545   0.437500       -1.125000
4   -7959.443848   -8282.889893  7871.229980 -7959.443848    2.000000 -8282.889893  323.008545   0.437500       -1.125000
5   -7957.881348   -8280.939453  7969.279541 -7957.881348    2.000000 -8280.939453  323.008545   0.049561       -1.512939
6   -7955.930908   -8279.376953  8067.717041 -7955.930908    2.000000 -8279.376953  323.008545   0.437500       -1.125000
7   -7954.368408   -8277.426270  8165.328857 -7954.368408    2.000000 -8277.426270  323.008545   0.049316       -1.950684
8   -7952.417725   -8275.426270  8165.328857 -7952.417725    2.000000 -8275.426270  323.008545   0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:59:56]  --------------------------------------------------------------------------------
[08/30 10:59:56]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 10:59:56]  Generator returned sat in 0.373987 secs.
[08/30 10:59:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:59:57]  Improved gap from 0.0 to 100
[08/30 10:59:57]  Improved number of small numbers from 24 to 100 out of a max of 100
[08/30 10:59:57]  Verifer returned sat in 0.391795 secs.
[08/30 10:59:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8133.093994   -8229.867676  7323.02124 -8133.093994    0.098877 -8229.867676    0.000000   96.773682        0.024902
1   -8133.093994   -8133.118652  7323.02124 -8133.093994    0.024902 -8133.118652    0.000000    0.024658      -99.975098
2   -7961.443848   -7961.468506  7323.02124 -7961.443848  171.674805 -7961.468506    0.000000    0.024658      -28.324951
3   -7813.093994   -7933.118896  7323.02124 -7813.093994  148.374512 -7933.118896    0.024902  120.000000       20.000000
4   -7785.719482   -7785.769043  7323.02124 -7785.719482  147.374512 -7785.769043    0.024902    0.024658      -52.625488
5   -7613.069336   -7633.118896  7323.02124 -7613.069336  172.674805 -7633.118896    0.049561   20.000000       20.000000
6   -7461.394531   -7583.768799  7323.02124 -7461.394531  171.674805 -7583.768799   51.724365   70.649902       20.000000
7   -7361.369629   -7433.118896  7323.02124 -7361.369629  170.674805 -7433.118896   51.749268   20.000000       20.000000
8   -7211.694824   -7433.118896  7323.02124 -7211.694824  169.674805 -7433.118896  101.424072  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=4, loss_amount=415331/4096.[0m
[08/30 10:59:57]  --------------------------------------------------------------------------------
[08/30 10:59:57]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 10:59:58]  Generator returned sat in 0.237326 secs.
[08/30 10:59:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:59:58]  Improved gap from 0.02471923828125 to 7.8125
[08/30 10:59:59]  Improved number of small numbers from 35 to 54 out of a max of 100
[08/30 10:59:59]  Verifer returned sat in 0.971583 secs.
[08/30 10:59:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -8120.975586   -8140.975342  7330.877686 -8120.975586    0.098877 -8140.975342   0.000000  19.999756       19.999756
1   -8120.975586   -8140.975342  7330.877881 -8120.975586    0.049316 -8140.975342   0.000000  19.999756      -80.000049
2   -8040.926025   -8040.975537  7330.877881 -8040.926025  100.049316 -8040.975537   0.000000   0.049512      -99.950488
3   -7742.333740   -7869.246997  7330.877881 -7742.333740  298.641797 -7869.246997  78.641797  48.271460       20.000000
4   -7642.284302   -7740.975537  7330.877881 -7642.284302  148.320898 -7740.975537  78.691235  20.000000       20.000000
5   -7589.123853   -7703.395508  7357.717432 -7589.123853   73.160449 -7703.395508  78.691235  35.580420        0.000000
6   -7589.123853   -7667.815088  7449.904785 -7589.123853   35.580225 -7667.815088  78.691235   0.000000       -7.812646
7   -7572.333740   -7660.002441  7540.927319 -7572.333740   16.790112 -7660.002441  78.691235   8.977466        0.000000
8   -7572.333740   -7651.024976  7540.927490 -7572.333740    7.395056 -7651.024976  78.691235   0.000000      -99.999829
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:59:59]  --------------------------------------------------------------------------------
[08/30 10:59:59]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 10:59:59]  Generator returned sat in 0.154440 secs.
[08/30 10:59:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:00:00]  Improved gap from 0.0 to 7.8125
[08/30 11:00:00]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/30 11:00:00]  Verifer returned sat in 0.533414 secs.
[08/30 11:00:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7942.284668   -8062.284424  7283.444092 -7942.284668    0.098877 -8062.284424   0.000000  119.999756       19.999756
1   -7842.333984   -7962.284424  7283.444092 -7842.333984  219.950439 -7962.284424   0.000000  119.950439       19.950439
2   -7742.235107   -7762.284424  7283.444092 -7742.235107  220.049316 -7762.284424   0.049316   20.000000       20.000000
3   -7622.235107   -7681.333740  7283.444092 -7622.235107  140.000000 -7681.333740  20.049316   39.049316       20.000000
4   -7522.284424   -7610.883057  7283.444092 -7522.284424  139.000000 -7610.883057  20.049316   68.549316       19.950684
5   -7522.284424   -7562.284424  7357.717285 -7522.284424   68.500000 -7562.284424  20.049316   19.950684       -5.776123
6   -7508.985107   -7536.557617  7449.904785 -7508.985107   33.250000 -7536.557617  20.049316    7.523193       -0.289307
7   -7500.883301   -7528.745117  7542.092285 -7500.883301   15.625000 -7528.745117  20.049316    7.812500        0.000000
8   -7500.883301   -7520.932617  7634.279541 -7500.883301    6.812500 -7520.932617  20.049316    0.000000       -7.812744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 11:00:00]  --------------------------------------------------------------------------------
[08/30 11:00:00]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 11:00:02]  Generator returned sat in 1.456029 secs.
[08/30 11:00:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:02]  Improved gap from 0.02459716796875 to 1.5625
[08/30 11:00:02]  Improved number of small numbers from 33 to 100 out of a max of 100
[08/30 11:00:02]  Verifer returned sat in 0.509107 secs.
[08/30 11:00:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7929.671387   -8049.671143  7273.418213 -7929.671387    0.098877 -8049.671143   0.000000  119.999756       20.000000
1   -7829.695801   -7949.671387  7273.418213 -7829.695801  219.975342 -7949.671387   0.000000  119.975586       19.975586
2   -7729.646973   -7849.671143  7273.418213 -7729.646973  220.024414 -7849.671143   0.024414  119.999756       20.000000
3   -7690.122070   -7690.171143  7273.418213 -7690.122070  159.524658 -7690.171143   0.024414    0.024658      -40.475098
4   -7529.622070   -7549.671387  7273.418213 -7529.622070  160.524658 -7549.671387   0.049316   20.000000       20.000000
5   -7529.622070   -7529.696045  7351.880127 -7529.622070    1.000000 -7529.696045   0.049316    0.024658       -1.538086
6   -7527.646729   -7527.720459  7449.904785 -7527.646729    2.000000 -7527.720459   0.049316    0.024414       -1.538086
7   -7524.671143   -7526.157959  7548.342285 -7524.671143    3.000000 -7526.157959   0.049316    1.437500       -0.125000
8   -7522.108643   -7524.595459  7645.904541 -7522.108643    4.000000 -7524.595459   0.049316    2.437500       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 11:00:03]  --------------------------------------------------------------------------------
[08/30 11:00:03]  Iteration: 16 (0 solution, 15 counterexamples)
[08/30 11:00:03]  Generator returned sat in 0.713643 secs.
[08/30 11:00:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:04]  Verifer returned unsat in 0.093599 secs.
[08/30 11:00:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:04]  --------------------------------------------------------------------------------
[08/30 11:00:04]  Iteration: 17 (1 solution, 15 counterexamples)
[08/30 11:00:04]  Generator returned sat in 0.055311 secs.
[08/30 11:00:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:05]  Improved number of small numbers from 37 to 51 out of a max of 99
[08/30 11:00:05]  Verifer returned sat in 0.730889 secs.
[08/30 11:00:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7949.646973   -7949.696289  7273.418213 -7949.646973    0.098633 -7949.696289    0.000000    0.049316        0.049194
1   -7949.646973   -7949.696167  7273.418213 -7949.646973    0.049072 -7949.696167    0.000000    0.049194      -99.950806
2   -7729.646973   -7749.696167  7273.418213 -7729.646973  220.049194 -7749.696167    0.049194   20.000000       20.000000
3   -7630.696289   -7749.696045  7273.418213 -7630.696289  118.950684 -7749.696045    0.049194  118.950562       18.950684
4   -7529.696045   -7549.696167  7273.418213 -7529.696045  219.950806 -7549.696167    0.049194   19.950928       19.950928
5   -7128.696167   -7541.122375  7273.418213 -7128.696167  420.950806 -7541.122375  301.000000  111.426208       20.000000
6   -7028.646973   -7349.696167  7273.418213 -7028.646973  211.475403 -7349.696167  301.049194   20.000000       20.000000
7   -6941.909271   -7249.696167  7273.418213 -6941.909271  106.737701 -7249.696167  301.049194    6.737701        6.737701
8   -6690.909271   -7249.696045  7273.418213 -6690.909271  257.737701 -7249.696045  438.786896  119.999878       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=14376557/32768.[0m
[08/30 11:00:05]  --------------------------------------------------------------------------------
[08/30 11:00:05]  Iteration: 18 (1 solution, 16 counterexamples)
[08/30 11:00:05]  Generator returned sat in 0.087519 secs.
[08/30 11:00:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:06]  Improved gap from 0.0 to 21.875
[08/30 11:00:06]  Improved number of small numbers from 93 to 100 out of a max of 100
[08/30 11:00:06]  Verifer returned sat in 0.976356 secs.
[08/30 11:00:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -7134.066895   -7157.441650  7273.417969 -7134.066895   0.098633 -7157.441650        0.0  23.374756       19.999756
1   -7075.892578   -7075.941650  7273.417969 -7075.892578  81.549072 -7075.941650        0.0   0.049072      -21.825928
2   -7054.017822   -7054.066650  7351.542969 -7054.017822  21.923828 -7054.066650        0.0   0.048828      -21.826172
3   -7010.316895   -7032.191650  7429.667969 -7010.316895  43.749756 -7032.191650        0.0  21.874756       -0.000244
4   -6968.566650   -6990.441650  7487.917969 -6968.566650  63.625000 -6990.441650        0.0  21.875000        0.000000
5   -6946.691650   -6968.566650  7566.042969 -6946.691650  43.750000 -6968.566650        0.0  21.875000        0.000000
6   -6924.816650   -6946.691650  7644.167969 -6924.816650  43.750000 -6946.691650        0.0  21.875000        0.000000
7   -6902.941650   -6924.816650  7719.842285 -6902.941650  43.750000 -6924.816650        0.0  21.875000       -2.450684
8   -6891.004150   -6900.490967  7719.842285 -6891.004150  33.812500 -6900.490967        0.0   9.486816      -90.513184
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 11:00:07]  --------------------------------------------------------------------------------
[08/30 11:00:07]  Iteration: 19 (1 solution, 17 counterexamples)
[08/30 11:00:07]  Generator returned sat in 0.193867 secs.
[08/30 11:00:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:07]  Improved gap from 0.012237548828125 to 100
[08/30 11:00:08]  Improved number of small numbers from 26 to 42 out of a max of 100
[08/30 11:00:08]  Verifer returned sat in 1.253414 secs.
[08/30 11:00:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7790.818359   -7810.818359  7930.169522 -7790.818359    0.098389 -7810.818359    0.000000   20.000000       19.999844
1   -7690.867188   -7810.818203  7930.169522 -7690.867188  119.951172 -7810.818203    0.000000  119.951016       19.951016
2   -7690.867188   -7690.916104  7930.169522 -7690.867188    0.048828 -7690.916104    0.000000    0.048916      -80.048984
3   -7320.087430   -7610.818203  7930.169522 -7320.087430  370.828674 -7610.818203  170.730774  120.000000       20.000000
4   -7253.673092   -7424.452816  7930.169522 -7253.673092  186.414337 -7424.452816  170.730774    0.048950      -13.585663
5   -6779.917843   -7310.818203  7930.169522 -6779.917843  473.804199 -7310.818203  510.900360   20.000000       20.000000
6   -6562.015744   -7310.818115  7930.169522 -6562.015744  237.902100 -7310.818115  628.802460  119.999912       20.000000
7   -6562.015744   -7190.818203  7930.169522 -6562.015744  119.951050 -7190.818203  628.802460    0.000000      -80.000000
8   -6264.271862   -7110.818115  7930.169522 -6264.271862  297.743881 -7110.818115  726.546341  119.999912       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=36425929/65536.[0m
[08/30 11:00:09]  --------------------------------------------------------------------------------
[08/30 11:00:09]  Iteration: 20 (1 solution, 18 counterexamples)
[08/30 11:00:09]  Generator returned sat in 0.579068 secs.
[08/30 11:00:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:10]  Verifer returned unsat in 0.162243 secs.
[08/30 11:00:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:10]  --------------------------------------------------------------------------------
[08/30 11:00:10]  Iteration: 21 (2 solution, 18 counterexamples)
[08/30 11:00:10]  Generator returned sat in 0.403995 secs.
[08/30 11:00:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:11]  Verifer returned unsat in 0.892851 secs.
[08/30 11:00:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:11]  --------------------------------------------------------------------------------
[08/30 11:00:11]  Iteration: 22 (3 solution, 18 counterexamples)
[08/30 11:00:12]  Generator returned sat in 0.209770 secs.
[08/30 11:00:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:12]  Improved number of small numbers from 54 to 99 out of a max of 99
[08/30 11:00:12]  Verifer returned sat in 0.360243 secs.
[08/30 11:00:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8167.626709   -8287.626465  8306.977783 -8167.626709    0.098389 -8287.626465    0.000000  119.999756       19.999756
1   -8087.626465   -8187.626465  8306.977783 -8087.626465  200.000000 -8187.626465    0.000000  100.000000        0.000000
2   -7967.675293   -8087.626465  8306.977783 -7967.675293  219.951172 -8087.626465    0.000000  119.951172       19.951172
3   -7967.675293   -7967.724121  8387.026611 -7967.675293  107.975586 -7967.724121    0.000000    0.048828        0.000000
4   -7750.772949   -7967.675293  8387.026611 -7750.772949  216.951172 -7967.675293   96.902344  120.000000       20.000000
5   -7750.772949   -7867.675293  8387.026611 -7750.772949  109.475586 -7867.675293   96.902344   20.000000      -80.000000
6   -7550.821777   -7667.675293  8387.026611 -7550.821777  219.951172 -7667.675293   96.902344   19.951172       19.951172
7   -7129.870605   -7589.979980  8387.026611 -7129.870605  440.902344 -7589.979980  417.804688   42.304688       20.000000
8   -6950.724121   -7567.675293  8387.026611 -6950.724121  221.451172 -7567.675293  496.951172  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=204825/512.[0m
[08/30 11:00:12]  --------------------------------------------------------------------------------
[08/30 11:00:12]  Iteration: 23 (3 solution, 19 counterexamples)
[08/30 11:00:13]  Generator returned sat in 0.449480 secs.
[08/30 11:00:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:13]  Improved gap from 0.0 to 6.25
[08/30 11:00:13]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/30 11:00:13]  Verifer returned sat in 0.366790 secs.
[08/30 11:00:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8267.675537   -8267.724121  8287.075439 -8267.675537    0.098145 -8267.724121   0.000000    0.048584      -99.951172
1   -8167.675537   -8167.723877  8287.075439 -8167.675537  100.048584 -8167.723877   0.000000    0.048340      -99.951172
2   -7967.675293   -8067.723877  8287.075439 -7967.675293  200.048584 -8067.723877   0.000000  100.048584        0.049072
3   -7967.675293   -7967.723877  8306.123779 -7967.675293  100.000000 -7967.723877   0.000000    0.048584      -80.902588
4   -7766.723877   -7786.772949  8306.123779 -7766.723877  201.000000 -7786.772949   0.048828   20.000244       20.000000
5   -7766.723877   -7773.022949  8386.123779 -7766.723877    1.000000 -7773.022949   0.048828    6.250244        0.000000
6   -7766.723877   -7766.772705  8479.172607 -7766.723877    3.000000 -7766.772705   0.048828    0.000000       -6.951172
7   -7759.723877   -7759.821533  8572.922607 -7759.723877    7.000000 -7759.821533   0.048828    0.048828       -6.201172
8   -7744.772705   -7753.571289  8572.922852 -7744.772705   15.000000 -7753.571289   0.048828    8.749756      -91.249756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 11:00:14]  --------------------------------------------------------------------------------
[08/30 11:00:14]  Iteration: 24 (3 solution, 20 counterexamples)
[08/30 11:00:14]  Generator returned sat in 0.333725 secs.
[08/30 11:00:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:14]  Improved gap from 0.02435302734375 to 100
[08/30 11:00:15]  Improved number of small numbers from 41 to 51 out of a max of 100
[08/30 11:00:15]  Verifer returned sat in 0.833252 secs.
[08/30 11:00:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8142.865479   -8142.914136  8479.172607 -8142.865479    0.097900 -8142.914136    0.000000    0.048657        0.048657
1   -8042.914136   -8142.914062  8479.172607 -8042.914136  100.000000 -8142.914062    0.000000   99.999927        0.000000
2   -8042.914136   -8042.914136  8479.172607 -8042.914136    0.048828 -8042.914136    0.000000    0.000000     -100.000000
3   -7942.865430   -7942.914136  8479.172607 -7942.865430  100.048706 -7942.914136    0.000000    0.048706      -99.951294
4   -7591.889783   -7800.946606  8479.172607 -7591.889783  351.024353 -7800.946606  131.024353   78.032471       20.000000
5   -7591.889783   -7742.914136  8479.172607 -7591.889783    1.000000 -7742.914136  131.024353   20.000000      -80.000000
6   -7160.389783   -7642.914062  8479.172607 -7160.389783  451.500000 -7642.914062  362.524353  119.999927       20.000000
7   -7160.389783   -7542.914136  8479.172607 -7160.389783    1.000000 -7542.914136  362.524353   20.000000      -80.000000
8   -6791.841077   -7442.914062  8479.172607 -6791.841077  388.548706 -7442.914062  531.073059  119.999927       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=3277199/8192.[0m
[08/30 11:00:16]  --------------------------------------------------------------------------------
[08/30 11:00:16]  Iteration: 25 (3 solution, 21 counterexamples)
[08/30 11:00:17]  Generator returned sat in 1.277026 secs.
[08/30 11:00:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:00:17]  Improved gap from 0.0 to 100
[08/30 11:00:18]  Improved number of small numbers from 54 to 62 out of a max of 100
[08/30 11:00:18]  Verifer returned sat in 0.979060 secs.
[08/30 11:00:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8105.766113   -8125.765921  8520.157607 -8105.766113    0.097900 -8125.765921    0.00000   19.999808       19.999808
1   -8005.763421   -8045.765921  8520.157607 -8005.763421  120.002500 -8045.765921    0.00250   40.000000       20.000000
2   -7925.760921   -7928.872559  8520.157607 -7925.760921  120.002500 -7928.872559    0.00250    3.109137        0.002500
3   -7925.760921   -7925.765921  8520.157607 -7925.760921    3.109062 -7925.765921    0.00250    0.002500      -99.997500
4   -7820.545296   -7825.765921  8520.157607 -7820.545296  105.218125 -7825.765921    0.00250    5.218125      -94.781875
5   -7506.327171   -7625.766113  8520.157607 -7506.327171  319.436250 -7625.766113   99.43875   20.000192       20.000000
6   -7506.327171   -7625.765921  8520.157607 -7506.327171    0.010000 -7625.765921   99.43875   20.000000      -80.000000
7   -7377.307171   -7476.748421  8520.157607 -7377.307171  149.020000 -7476.748421   99.43875    0.002500      -50.980000
8   -6905.760921   -7425.765869  8520.157607 -6905.760921  471.548750 -7425.765869  400.00500  119.999948       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 11:00:18]  --------------------------------------------------------------------------------
[08/30 11:00:18]  Iteration: 26 (3 solution, 22 counterexamples)
[08/30 11:00:19]  Generator returned sat in 0.406842 secs.
[08/30 11:00:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:00:20]  Improved gap from 0.0 to 1.5625
[08/30 11:00:21]  Improved number of small numbers from 52 to 62 out of a max of 100
[08/30 11:00:21]  Verifer returned sat in 1.955195 secs.
[08/30 11:00:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -8640.173096   -8645.896784  8520.157471 -8640.173096  0.097656 -8645.896784        0.0  5.723688        5.723552
1   -8640.173096   -8640.221784  8612.920107 -8640.173096  5.723389 -8640.221784        0.0  0.048688       -1.513812
2   -8637.096784   -8638.659284  8711.357607 -8637.096784  3.125000 -8638.659284        0.0  1.562500        0.000000
3   -8635.534284   -8637.096784  8809.795107 -8635.534284  3.125000 -8637.096784        0.0  1.562500        0.000000
4   -8632.134284   -8635.534284  8906.395107 -8632.134284  4.962500 -8635.534284        0.0  3.400000        0.000000
5   -8631.709284   -8632.134284  9004.832607 -8631.709284  3.825000 -8632.134284        0.0  0.425000       -1.137500
6   -8627.959284   -8630.571784  9102.220107 -8627.959284  4.175000 -8630.571784        0.0  2.612500        0.000000
7   -8626.221784   -8627.959284  9200.482607 -8626.221784  4.350000 -8627.959284        0.0  1.737500        0.000000
8   -8622.996784   -8626.221680  9297.257568 -8622.996784  4.962500 -8626.221680        0.0  3.224896       -0.000039
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 11:00:21]  --------------------------------------------------------------------------------
[08/30 11:00:21]  Iteration: 27 (3 solution, 23 counterexamples)
[08/30 11:00:24]  Generator returned sat in 1.951332 secs.
[08/30 11:00:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:00:24]  Improved number of small numbers from 54 to 99 out of a max of 99
[08/30 11:00:24]  Verifer returned sat in 0.241677 secs.
[08/30 11:00:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8946.012695   -8966.012695  8840.273193 -8946.012695    0.097412 -8966.012695    0.000000   20.000000       20.000000
1   -8846.061279   -8866.012695  8840.273193 -8846.061279  119.951416 -8866.012695    0.000000   19.951416       19.951416
2   -8846.061279   -8846.109863  8840.273193 -8846.061279   19.902832 -8846.109863    0.000000    0.048584      -80.048584
3   -8645.964111   -8666.012695  8840.273193 -8645.964111  200.145752 -8666.012695    0.048584   20.000000       20.000000
4   -8645.964111   -8666.012695  8840.273193 -8645.964111    1.000000 -8666.012695    0.048584   20.000000      -80.000000
5   -8465.964111   -8466.061279  8840.273193 -8465.964111  200.000000 -8466.061279    0.048584    0.048584        0.000000
6   -7886.964111   -8466.012695  8840.273193 -7886.964111  579.048584 -8466.012695  459.048584  120.000000       20.000000
7   -7886.964111   -8346.061279  8840.273193 -7886.964111    1.000000 -8346.061279  459.048584    0.048584      -80.000000
8   -7567.061279   -8266.012451  8840.273193 -7567.061279  319.951416 -8266.012451  578.951416  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1185593/2048.[0m
[08/30 11:00:24]  --------------------------------------------------------------------------------
[08/30 11:00:24]  Iteration: 28 (3 solution, 24 counterexamples)
[08/30 11:00:26]  Generator returned sat in 1.208965 secs.
[08/30 11:00:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:00:26]  Improved gap from 0.048583984375 to 79.6875
[08/30 11:00:27]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/30 11:00:27]  Verifer returned sat in 0.625877 secs.
[08/30 11:00:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8938.449219   -8978.444336  8840.278076 -8938.449219    0.097168 -8978.444336    0.000000   39.995117       20.000000
1   -8838.454102   -8860.319092  8840.278076 -8838.454102  139.990234 -8860.319092    0.000000   21.864990       19.995117
2   -8758.449219   -8858.449219  8840.278076 -8758.449219  101.869873 -8858.449219    0.000000  100.000000        0.000000
3   -8658.449219   -8758.449219  8840.278076 -8658.449219  200.000000 -8758.449219    0.000000  100.000000        0.000000
4   -8538.454102   -8658.449219  8840.278076 -8538.454102  219.995117 -8658.449219    0.000000  119.995117       19.995117
5   -8456.579346   -8458.449219  8840.278076 -8456.579346  201.869873 -8458.449219    0.000000    1.869873        1.869873
6   -8058.449219   -8458.449219  8840.278076 -8058.449219  400.000000 -8458.449219  280.000000  120.000000       20.000000
7   -8058.449219   -8338.756592  8840.897949 -8058.449219    0.010000 -8338.756592  280.000000    0.307373      -79.380127
8   -7739.063965   -8259.069092  8840.897949 -7739.063965  319.692627 -8259.069092  400.005127  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638421/4096.[0m
[08/30 11:00:27]  --------------------------------------------------------------------------------
[08/30 11:00:27]  Iteration: 29 (3 solution, 25 counterexamples)
[08/30 11:00:28]  Generator returned sat in 0.476360 secs.
[08/30 11:00:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:28]  Verifer returned unsat in 0.116477 secs.
[08/30 11:00:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:28]  --------------------------------------------------------------------------------
[08/30 11:00:28]  Iteration: 30 (4 solution, 25 counterexamples)
[08/30 11:00:29]  Generator returned sat in 0.882142 secs.
[08/30 11:00:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:29]  Verifer returned unsat in 0.113756 secs.
[08/30 11:00:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:29]  --------------------------------------------------------------------------------
[08/30 11:00:29]  Iteration: 31 (5 solution, 25 counterexamples)
[08/30 11:00:30]  Generator returned sat in 0.427973 secs.
[08/30 11:00:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:30]  Verifer returned unsat in 0.068672 secs.
[08/30 11:00:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:30]  --------------------------------------------------------------------------------
[08/30 11:00:30]  Iteration: 32 (6 solution, 25 counterexamples)
[08/30 11:00:31]  Generator returned sat in 0.146772 secs.
[08/30 11:00:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:31]  Improved gap from 0.0 to 1.5625
[08/30 11:00:31]  Improved number of small numbers from 54 to 74 out of a max of 100
[08/30 11:00:31]  Verifer returned sat in 0.551474 secs.
[08/30 11:00:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9639.469238   -9759.468994  9442.298096 -9639.469238    0.096924 -9759.468994     0.0000  119.999756       19.999883
1   -9639.469238   -9641.031738  9522.298076 -9639.469238  119.997314 -9641.031738     0.0000    1.562500       -0.000137
2   -9639.466553   -9639.469102  9522.298076 -9639.466553    1.565186 -9639.469102     0.0000    0.002549      -99.997451
3   -9420.466602   -9539.469102  9522.298076 -9420.466602  219.002500 -9539.469102     0.0000  119.002500       19.002500
4   -9319.466602   -9339.469238  9522.298076 -9319.466602  220.002500 -9339.469238     0.0025   20.000137       20.000000
5   -9319.466602   -9321.031738  9602.298076 -9319.466602    0.010000 -9321.031738     0.0025    1.562637        0.000000
6   -9319.466602   -9319.469102  9700.735352 -9319.466602    1.010000 -9319.469102     0.0025    0.000000       -1.562725
7   -9317.456602   -9317.461602  9797.280762 -9317.456602    2.010000 -9317.461602     0.0025    0.002500       -3.007314
8   -9314.449102   -9314.451660  9895.718018 -9314.449102    3.010000 -9314.451660     0.0025    0.000059       -1.562559
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 11:00:32]  --------------------------------------------------------------------------------
[08/30 11:00:32]  Iteration: 33 (6 solution, 26 counterexamples)
[08/30 11:00:33]  Generator returned sat in 1.294279 secs.
[08/30 11:00:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:33]  Verifer returned unsat in 0.166325 secs.
[08/30 11:00:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:34]  --------------------------------------------------------------------------------
[08/30 11:00:34]  Iteration: 34 (7 solution, 26 counterexamples)
[08/30 11:00:34]  Generator returned sat in 0.486804 secs.
[08/30 11:00:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:35]  Improved gap from 0.0 to 4.6875
[08/30 11:00:35]  Improved number of small numbers from 60 to 100 out of a max of 100
[08/30 11:00:35]  Verifer returned sat in 0.499688 secs.
[08/30 11:00:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9198.515137   -9198.515137  9522.298096 -9198.515137    0.096924 -9198.515137    0.00000    0.000000        0.000000
1   -9078.563477   -9198.514893  9522.298096 -9078.563477  119.951660 -9198.514893    0.00000  119.951416       19.951660
2   -8978.563477   -9024.595459  9522.298096 -8978.563477  219.951416 -9024.595459    0.00000   46.031982       19.951660
3   -8878.563232   -8998.515137  9522.298096 -8878.563232  146.032227 -8998.515137    0.00000  119.951904       19.951904
4   -8778.466797   -8798.515137  9522.298096 -8778.466797  220.048340 -8798.515137    0.04834   20.000000       20.000000
5   -8778.466797   -8798.514893  9602.298096 -8778.466797    1.000000 -8798.514893    0.04834   19.999756        0.000000
6   -8778.466797   -8778.515137  9697.610352 -8778.466797    2.500000 -8778.515137    0.04834    0.000000       -4.687744
7   -8773.716797   -8773.765137  9792.860596 -8773.716797    4.750000 -8773.765137    0.04834    0.000000       -4.687500
8   -8765.591797   -8769.077393  9888.172852 -8765.591797    8.125000 -8769.077393    0.04834    3.437256       -1.250244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 11:00:35]  --------------------------------------------------------------------------------
[08/30 11:00:35]  Iteration: 35 (7 solution, 27 counterexamples)
[08/30 11:00:38]  Generator returned sat in 2.233542 secs.
[08/30 11:00:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:00:38]  Improved gap from 0.000625 to 100
[08/30 11:00:39]  Improved number of small numbers from 67 to 77 out of a max of 100
[08/30 11:00:39]  Verifer returned sat in 0.743644 secs.
[08/30 11:00:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8458.493164   -8458.495605  9502.249756 -8458.493164    0.096680 -8458.495605     0.0000    0.002441        0.002383
1   -8458.492920   -8458.495547  9502.249756 -8458.492920    0.002686 -8458.495547     0.0000    0.002627      -99.997373
2   -8358.493047   -8358.495547  9502.249756 -8358.493047  100.002500 -8358.495547     0.0000    0.002500      -99.997500
3   -8138.493047   -8218.470547  9502.249756 -8138.493047  220.002500 -8218.470547     0.0025   79.975000       20.000000
4   -8138.493047   -8158.495547  9502.249756 -8138.493047    0.010000 -8158.495547     0.0025   20.000000      -80.000000
5   -7708.473047   -8058.495361  9502.249756 -7708.473047  450.020000 -8058.495361   230.0225  119.999814       20.000000
6   -7708.473047   -7958.495547  9502.249756 -7708.473047    0.010000 -7958.495547   230.0225   20.000000      -80.000000
7   -7338.490547   -7758.495605  9502.249756 -7338.490547  389.982500 -7758.495605   400.0050   20.000059       20.000000
8   -7338.490547   -7758.495547  9502.249756 -7338.490547    0.010000 -7758.495547   400.0050   20.000000      -80.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 11:00:39]  --------------------------------------------------------------------------------
[08/30 11:00:39]  Iteration: 36 (7 solution, 28 counterexamples)
[08/30 11:00:40]  Generator returned sat in 0.756201 secs.
[08/30 11:00:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:40]  Improved gap from 69.49875 to 100
[08/30 11:00:41]  Improved number of small numbers from 55 to 63 out of a max of 100
[08/30 11:00:41]  Verifer returned sat in 0.951395 secs.
[08/30 11:00:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8338.160400   -8338.160605  9381.914756 -8338.160400    0.096680 -8338.160605    0.000000    0.000205        0.000205
1   -8218.159355   -8338.160605  9381.914756 -8218.159355  120.001250 -8338.160605    0.001250  120.000000       20.000000
2   -8118.158105   -8177.496582  9381.914756 -8118.158105  220.001250 -8177.496582    0.002500   59.335977       20.000000
3   -8118.158105   -8118.161855  9381.914756 -8118.158105   59.334583 -8118.161855    0.002500    0.001250      -80.000000
4   -7918.158105   -7938.160605  9381.914756 -7918.158105  200.001250 -7938.160605    0.002500   20.000000       20.000000
5   -7437.156230   -7938.160400  9381.914756 -7437.156230  501.001875 -7938.160400  381.004375  119.999795       20.000000
6   -7437.156230   -7838.160605  9381.914756 -7437.156230    0.010000 -7838.160605  381.004375   20.000000      -80.000000
7   -7316.140605   -7738.160605  9381.914756 -7316.140605  141.015625 -7738.160605  381.004375   41.015625      -58.984375
8   -7044.632793   -7638.160400  9381.914756 -7044.632793  312.523438 -7638.160400  473.527812  119.999795       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1515281/3200.[0m
[08/30 11:00:41]  --------------------------------------------------------------------------------
[08/30 11:00:41]  Iteration: 37 (7 solution, 29 counterexamples)
[08/30 11:00:43]  Generator returned sat in 1.649615 secs.
[08/30 11:00:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:44]  Improved gap from 0.0025 to 100
[08/30 11:00:44]  Improved number of small numbers from 68 to 80 out of a max of 100
[08/30 11:00:44]  Verifer returned sat in 0.759216 secs.
[08/30 11:00:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8198.183350   -8218.183105  9381.914551 -8198.183350    0.096436 -8218.183105    0.000000   19.999756       19.999756
1   -8098.185547   -8218.183105  9381.914551 -8098.185547  119.997559 -8218.183105    0.000000  119.997559       19.997559
2   -7998.180605   -8018.183105  9381.914551 -7998.180605  220.002500 -8018.183105    0.002500   20.000000       20.000000
3   -7919.180605   -8018.183105  9381.914551 -7919.180605   99.000000 -8018.183105    0.002500   99.000000       -1.000000
4   -7818.180605   -7862.694980  9381.914551 -7818.180605  200.000000 -7862.694980    0.002500   44.511875        0.000000
5   -7483.948418   -7818.183105  9381.914551 -7483.948418  378.744062 -7818.183105  214.234688  120.000000       20.000000
6   -7483.948418   -7698.185605  9381.914551 -7483.948418    0.010000 -7698.185605  214.234688    0.002500      -80.000000
7   -7322.942168   -7537.179355  9381.914551 -7322.942168  161.008750 -7537.179355  214.234688    0.002500      -18.993750
8   -6998.178105   -7518.183105  9381.914551 -6998.178105  324.766563 -7518.183105  400.005000  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 11:00:45]  --------------------------------------------------------------------------------
[08/30 11:00:45]  Iteration: 38 (7 solution, 30 counterexamples)
[08/30 11:00:46]  Generator returned sat in 0.767204 secs.
[08/30 11:00:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:00:46]  Improved gap from 0.00125 to 100
[08/30 11:00:46]  Improved number of small numbers from 83 to 100 out of a max of 100
[08/30 11:00:46]  Verifer returned sat in 0.302635 secs.
[08/30 11:00:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7972.945801   -7972.948486  8746.694824 -7972.945801    0.096436 -7972.948486    0.000000    0.002686        0.002686
1   -7872.945801   -7872.948486  8746.694824 -7872.945801  100.002686 -7872.948486    0.000000    0.002686        0.002686
2   -7872.945801   -7872.948486  8746.694824 -7872.945801    0.002500 -7872.948486    0.000000    0.002686      -99.997314
3   -7652.950928   -7763.449707  8746.694824 -7652.950928  219.997559 -7763.449707    0.000000  110.498779       19.997559
4   -7552.950928   -7672.948486  8746.694824 -7552.950928  210.498779 -7672.948486    0.000000  119.997559       19.997559
5   -7471.948486   -7472.948486  8746.694824 -7471.948486  201.000000 -7472.948486    0.000000    1.000000        1.000000
6   -7071.948486   -7372.948486  8746.694824 -7071.948486  401.000000 -7372.948486  281.000000   20.000000       20.000000
7   -7071.948486   -7352.950928  8746.694824 -7071.948486    0.010000 -7352.950928  281.000000    0.002441      -80.000000
8   -6750.953369   -7272.948486  8746.694824 -6750.953369  320.997559 -7272.948486  401.995117  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=411643/1024.[0m
[08/30 11:00:46]  --------------------------------------------------------------------------------
[08/30 11:00:46]  Iteration: 39 (7 solution, 31 counterexamples)
[08/30 11:00:52]  Generator returned sat in 5.030123 secs.
[08/30 11:00:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:00:53]  Improved gap from 0.0 to 7.8125
[08/30 11:00:53]  Improved number of small numbers from 35 to 46 out of a max of 100
[08/30 11:00:53]  Verifer returned sat in 1.441571 secs.
[08/30 11:00:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -7185.336670   -7185.360596  8746.694824 -7185.336670    0.096436 -7185.360596   0.000000   0.023926      -99.976068
1   -7085.360596   -7085.360601  8746.694824 -7085.360596  100.000000 -7085.360601   0.000000   0.000006      -99.999994
2   -6865.336615   -6891.720404  8746.694824 -6865.336615  220.023987 -6891.720404   0.023987  26.359802       20.000000
3   -6765.312628   -6798.798101  8746.694824 -6765.312628  126.383789 -6798.798101   0.047974  33.437500       20.000000
4   -6673.366339   -6736.130127  8746.694824 -6673.366339  125.383789 -6736.130127   0.047974  62.715815       11.946289
5   -6673.366339   -6685.360601  8834.748535 -6673.366339   62.691895 -6685.360601   0.047974  11.946289        0.000000
6   -6653.966681   -6661.827154  8915.348877 -6653.966681   31.345947 -6661.827154   0.047974   7.812500        0.000000
7   -6646.106207   -6654.014648  9007.488403 -6646.106207   15.672974 -6654.014648   0.047974   7.860468        0.000000
8   -6646.106207   -6646.154181  9007.488525 -6646.106207    7.836487 -6646.154181   0.047974   0.000000      -99.999878
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 11:00:54]  --------------------------------------------------------------------------------
[08/30 11:00:54]  Iteration: 40 (7 solution, 32 counterexamples)
[08/30 11:00:57]  Generator returned sat in 2.409131 secs.
[08/30 11:00:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:00:57]  Improved gap from 0.0 to 0
[08/30 11:00:57]  Improved number of small numbers from 73 to 86 out of a max of 100
[08/30 11:00:57]  Verifer returned sat in 0.459196 secs.
[08/30 11:00:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7185.336670   -7185.360596  8746.694824 -7185.336670    0.096191 -7185.360596   0.000000    0.023926      -99.976074
1   -6965.361816   -7085.360596  8746.694824 -6965.361816  219.998779 -7085.360596   0.000000  119.998779       19.998779
2   -6885.360840   -6885.361846  8746.694824 -6885.360840  199.999756 -6885.361846   0.000000    0.001006       -0.000244
3   -6785.360596   -6785.361846  8746.694824 -6785.360596  100.001250 -6785.361846   0.000000    0.001250        0.000000
4   -6635.359971   -6685.360596  8746.694824 -6635.359971  150.001875 -6685.360596  30.000625   20.000000       20.000000
5   -6635.359971   -6665.362061  8826.694824 -6635.359971    0.010000 -6665.362061  30.000625    0.001465        0.000000
6   -6635.346436   -6665.360596  8926.681152 -6635.346436    0.015000 -6665.360596  30.000625    0.013535       -0.000137
7   -6635.337471   -6665.346846  9026.672119 -6635.337471    0.022500 -6665.346846  30.000625    0.008750       -0.000205
8   -6635.312471   -6665.337891  9026.672119 -6635.312471    0.033750 -6665.337891  30.000625    0.024795      -99.975205
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 11:00:57]  --------------------------------------------------------------------------------
[08/30 11:00:57]  Iteration: 41 (7 solution, 33 counterexamples)
[08/30 11:00:59]  Generator returned sat in 1.159829 secs.
[08/30 11:00:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:00:59]  Verifer returned unsat in 0.164207 secs.
[08/30 11:00:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:00:59]  --------------------------------------------------------------------------------
[08/30 11:00:59]  Iteration: 42 (8 solution, 33 counterexamples)
[08/30 11:01:00]  Generator returned sat in 0.209160 secs.
[08/30 11:01:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:00]  Verifer returned unsat in 0.161680 secs.
[08/30 11:01:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:00]  --------------------------------------------------------------------------------
[08/30 11:01:00]  Iteration: 43 (9 solution, 33 counterexamples)
[08/30 11:01:01]  Generator returned sat in 0.359767 secs.
[08/30 11:01:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:01]  Verifer returned unsat in 0.104970 secs.
[08/30 11:01:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:01]  --------------------------------------------------------------------------------
[08/30 11:01:01]  Iteration: 44 (10 solution, 33 counterexamples)
[08/30 11:01:02]  Generator returned sat in 0.154613 secs.
[08/30 11:01:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:02]  Verifer returned unsat in 0.097945 secs.
[08/30 11:01:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:02]  --------------------------------------------------------------------------------
[08/30 11:01:02]  Iteration: 45 (11 solution, 33 counterexamples)
[08/30 11:01:04]  Generator returned sat in 1.901404 secs.
[08/30 11:01:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:05]  Verifer returned unsat in 0.160578 secs.
[08/30 11:01:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:05]  --------------------------------------------------------------------------------
[08/30 11:01:05]  Iteration: 46 (12 solution, 33 counterexamples)
[08/30 11:01:07]  Generator returned sat in 1.876064 secs.
[08/30 11:01:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:07]  Improved gap from 20.0 to 100
[08/30 11:01:07]  Improved number of small numbers from 39 to 100 out of a max of 100
[08/30 11:01:07]  Verifer returned sat in 0.344707 secs.
[08/30 11:01:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t
0   -8001.933105   -8001.981201  9663.31543 -8001.933105    0.096191 -8001.981201    0.000000   0.048096        0.048096
1   -8001.933105   -8001.981201  9663.31543 -8001.933105    0.047852 -8001.981201    0.000000   0.048096      -99.951904
2   -7901.981201   -7901.981201  9663.31543 -7901.981201  100.000000 -7901.981201    0.000000   0.000000     -100.000000
3   -7681.933105   -7728.759521  9663.31543 -7681.933105  220.048096 -7728.759521    0.048096  46.778320       20.000000
4   -7681.933105   -7701.981201  9663.31543 -7681.933105    1.000000 -7701.981201    0.048096  20.000000      -80.000000
5   -7251.933105   -7501.981201  9663.31543 -7251.933105  450.000000 -7501.981201  230.048096  20.000000       20.000000
6   -7251.933105   -7482.029053  9663.31543 -7251.933105    1.000000 -7482.029053  230.048096   0.047852      -80.000000
7   -6881.885254   -7301.981201  9663.31543 -6881.885254  370.095703 -7301.981201  400.095947  20.000000       20.000000
8   -6881.885254   -7301.981201  9663.31543 -6881.885254    1.000000 -7301.981201  400.095947  20.000000      -80.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=409649/1024.[0m
[08/30 11:01:08]  --------------------------------------------------------------------------------
[08/30 11:01:08]  Iteration: 47 (12 solution, 34 counterexamples)
[08/30 11:01:13]  Generator returned sat in 4.434516 secs.
[08/30 11:01:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:13]  Improved gap from 0.0025 to 0
[08/30 11:01:13]  Improved number of small numbers from 63 to 77 out of a max of 100
[08/30 11:01:13]  Verifer returned sat in 0.926653 secs.
[08/30 11:01:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7861.935791   -7981.935547   9663.315430 -7861.935791    0.095947 -7981.935547     0.0000  119.999756       19.999814
1   -7861.935791   -7881.935547   9663.315430 -7861.935791    0.002500 -7881.935547     0.0000   19.999756      -80.000186
2   -7741.933105   -7741.935605   9663.315430 -7741.933105  140.002441 -7741.935605     0.0000    0.002500      -59.997500
3   -7681.933105   -7681.935605   9763.312930 -7681.933105   60.002500 -7681.935605     0.0000    0.002500        0.000000
4   -7561.930605   -7581.933350   9763.312930 -7561.930605  120.005000 -7581.933350     0.0025   20.000244       20.000000
5   -7561.930605   -7561.935605   9843.298096 -7561.930605    0.010000 -7561.935605     0.0025    0.002500       -0.014834
6   -7561.913105   -7561.918105   9943.260498 -7561.913105    0.020000 -7561.918105     0.0025    0.002500       -0.034932
7   -7561.875605   -7561.880605  10043.257812 -7561.875605    0.040000 -7561.880605     0.0025    0.002500       -0.000117
8   -7561.798105   -7561.800781  10143.177979 -7561.798105    0.080000 -7561.800781     0.0025    0.000176       -0.002451
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 11:01:14]  --------------------------------------------------------------------------------
[08/30 11:01:14]  Iteration: 48 (12 solution, 35 counterexamples)
[08/30 11:01:15]  Generator returned sat in 0.946962 secs.
[08/30 11:01:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:16]  Improved gap from 0.0 to 6.25
[08/30 11:01:16]  Improved number of small numbers from 68 to 75 out of a max of 100
[08/30 11:01:16]  Verifer returned sat in 0.965456 secs.
[08/30 11:01:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7799.951660   -7799.951660  9581.331484 -7799.951660    0.095947 -7799.951660   0.000000    0.000000        0.000000
1   -7679.927734   -7699.951660  9581.331484 -7679.927734  120.023926 -7699.951660   0.023926   20.000000       20.000000
2   -7579.903809   -7699.951660  9581.331484 -7579.903809  120.023926 -7699.951660   0.047852  120.000000       20.000000
3   -7479.927734   -7499.951660  9581.331484 -7479.927734  219.976074 -7499.951660   0.047852   19.976074       19.976074
4   -7389.915771   -7444.981445  9581.331484 -7389.915771  109.988037 -7444.981445   0.047852   55.017822        9.988037
5   -7389.915771   -7399.951660  9671.343262 -7389.915771   54.994019 -7399.951660   0.047852    9.988037       -0.000186
6   -7372.406799   -7372.478577  9747.608398 -7372.406799   27.497009 -7372.478577   0.047852    0.023926       -6.226077
7   -7358.682220   -7366.228516  9840.109896 -7358.682220   13.748505 -7366.228516   0.047852    7.498444        0.000000
8   -7358.682220   -7358.730072  9840.110107 -7358.682220    6.874252 -7358.730072   0.047852    0.000000      -99.999789
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 11:01:17]  --------------------------------------------------------------------------------
[08/30 11:01:17]  Iteration: 49 (12 solution, 36 counterexamples)
[08/30 11:01:20]  Generator returned sat in 2.805027 secs.
[08/30 11:01:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:20]  Improved gap from 0.02392578125 to 100
[08/30 11:01:20]  Improved number of small numbers from 94 to 100 out of a max of 100
[08/30 11:01:20]  Verifer returned sat in 0.280930 secs.
[08/30 11:01:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8093.935547   -8093.935547  9870.343262 -8093.935547    0.095703 -8093.935547    0.000000    0.000000      -66.031494
1   -8027.855957   -8027.903809  9870.343262 -8027.855957   66.079590 -8027.903809    0.000000    0.047852      -99.951904
2   -7807.856201   -7927.904053  9870.343262 -7807.856201  220.047607 -7927.904053    0.047852  120.000000       20.000000
3   -7707.904053   -7827.903809  9870.343262 -7707.904053  219.952148 -7827.903809    0.047852  119.951904       19.952148
4   -7429.808350   -7693.935547  9870.343262 -7429.808350  398.047607 -7693.935547  178.095703   86.031494       20.000000
5   -7429.808350   -7627.904053  9870.343262 -7429.808350    1.000000 -7627.904053  178.095703   20.000000      -80.000000
6   -7000.808350   -7527.903809  9870.343262 -7000.808350  449.000000 -7527.903809  407.095703  119.999756       20.000000
7   -7000.808350   -7427.903809  9870.343262 -7000.808350    1.000000 -7427.903809  407.095703   19.999756      -80.000000
8   -6622.760498   -7327.904053  9870.343262 -6622.760498  398.047607 -7327.904053  585.143555  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=416817/1024.[0m
[08/30 11:01:21]  --------------------------------------------------------------------------------
[08/30 11:01:21]  Iteration: 50 (12 solution, 37 counterexamples)
[08/30 11:01:22]  Generator returned sat in 0.814363 secs.
[08/30 11:01:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:22]  Improved gap from 0.00125 to 100
[08/30 11:01:22]  Improved number of small numbers from 86 to 86 out of a max of 100
[08/30 11:01:22]  Verifer returned sat in 0.301336 secs.
[08/30 11:01:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -8107.903809   -8127.903809  9870.343262 -8107.903809    0.095703 -8127.903809    0.00000   20.0000            20.0
1   -8027.903809   -8127.903809  9870.343262 -8027.903809  100.000000 -8127.903809    0.00000  100.0000             0.0
2   -7927.903809   -8027.903809  9870.343262 -7927.903809  200.000000 -8027.903809    0.00000  100.0000             0.0
3   -7807.902559   -7889.211309  9870.343262 -7807.902559  220.001250 -7889.211309    0.00125   81.3075            20.0
4   -7807.902559   -7827.903809  9870.343262 -7807.902559    0.010000 -7827.903809    0.00125   20.0000           -80.0
5   -7378.882559   -7627.903809  9870.343262 -7378.882559  449.020000 -7627.903809  229.02125   20.0000            20.0
6   -7378.882559   -7627.903809  9870.343262 -7378.882559    0.010000 -7627.903809  229.02125   20.0000           -80.0
7   -7007.901309   -7427.903809  9870.343262 -7007.901309  390.981250 -7427.903809  400.00250   20.0000            20.0
8   -7007.901309   -7427.903809  9870.343262 -7007.901309    0.010000 -7427.903809  400.00250   20.0000           -80.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=320001/800.[0m
[08/30 11:01:23]  --------------------------------------------------------------------------------
[08/30 11:01:23]  Iteration: 51 (12 solution, 38 counterexamples)
[08/30 11:01:24]  Generator returned sat in 0.961216 secs.
[08/30 11:01:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:25]  Improved gap from 0.0 to 4.6875
[08/30 11:01:25]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/30 11:01:25]  Verifer returned sat in 0.662426 secs.
[08/30 11:01:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7589.424072   -7609.423828   9870.343018 -7589.424072    0.095703 -7609.423828        0.0   19.999756       19.999756
1   -7509.423828   -7609.423828   9870.343018 -7509.423828  100.000000 -7609.423828        0.0  100.000000        0.000000
2   -7389.471680   -7469.471680   9870.343018 -7389.471680  219.952148 -7469.471680        0.0   80.000000       19.952148
3   -7289.471680   -7378.519287   9870.343018 -7289.471680  180.000000 -7378.519287        0.0   89.047607       19.952148
4   -7289.471680   -7309.423828   9926.890869 -7289.471680   89.000000 -7309.423828        0.0   19.952148      -23.500000
5   -7265.923828   -7265.971680  10022.203369 -7265.923828   43.500000 -7265.971680        0.0    0.047852       -4.639648
6   -7245.221680   -7249.909180  10106.140869 -7245.221680   20.750000 -7249.909180        0.0    4.687500        0.000000
7   -7240.534180   -7245.221680  10201.453369 -7240.534180    9.375000 -7245.221680        0.0    4.687500        0.000000
8   -7240.534180   -7240.534180  10201.453613 -7240.534180    3.687500 -7240.534180        0.0    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 11:01:25]  --------------------------------------------------------------------------------
[08/30 11:01:25]  Iteration: 52 (12 solution, 39 counterexamples)
[08/30 11:01:28]  Generator returned sat in 2.071341 secs.
[08/30 11:01:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:28]  Improved gap from 0.0 to 0
[08/30 11:01:29]  Improved number of small numbers from 56 to 81 out of a max of 100
[08/30 11:01:29]  Verifer returned sat in 0.931455 secs.
[08/30 11:01:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -7863.373779   -7883.373779  10145.275391 -7863.373779    0.095703 -7883.373779        0.0  20.000000       19.999922
1   -7783.374023   -7783.376465  10145.275635 -7783.374023   99.999756 -7783.376465        0.0   0.002441       -0.000078
2   -7683.371338   -7684.309814  10145.275635 -7683.371338  100.005127 -7684.309814        0.0   0.938477        0.002607
3   -7683.371338   -7683.373867  10245.272949 -7683.371338    0.938281 -7683.373867        0.0   0.002529       -0.000078
4   -7682.497305   -7682.499805  10344.139648 -7682.497305    0.876563 -7682.499805        0.0   0.002500       -0.259346
5   -7681.746680   -7682.237930  10443.648369 -7681.746680    0.753125 -7682.237930        0.0   0.491250        0.000000
6   -7681.731680   -7681.746582  10543.633369 -7681.731680    0.506250 -7681.746582        0.0   0.014902        0.000000
7   -7681.731680   -7681.731680  10643.633301 -7681.731680    0.012500 -7681.731680        0.0   0.000000       -0.000068
8   -7681.721680   -7681.724121  10643.633301 -7681.721680    0.010000 -7681.724121        0.0   0.002441      -99.990068
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 11:01:29]  --------------------------------------------------------------------------------
[08/30 11:01:29]  Iteration: 53 (12 solution, 40 counterexamples)
[08/30 11:01:31]  Generator returned sat in 1.292051 secs.
[08/30 11:01:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:31]  Verifer returned unsat in 0.375587 secs.
[08/30 11:01:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:31]  --------------------------------------------------------------------------------
[08/30 11:01:31]  Iteration: 54 (13 solution, 40 counterexamples)
[08/30 11:01:32]  Generator returned sat in 0.341336 secs.
[08/30 11:01:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:33]  Verifer returned unsat in 0.518217 secs.
[08/30 11:01:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:33]  --------------------------------------------------------------------------------
[08/30 11:01:33]  Iteration: 55 (14 solution, 40 counterexamples)
[08/30 11:01:34]  Generator returned sat in 0.284778 secs.
[08/30 11:01:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:34]  Verifer returned unsat in 0.539552 secs.
[08/30 11:01:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:34]  --------------------------------------------------------------------------------
[08/30 11:01:34]  Iteration: 56 (15 solution, 40 counterexamples)
[08/30 11:01:36]  Generator returned sat in 0.653959 secs.
[08/30 11:01:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:36]  Verifer returned unsat in 0.508918 secs.
[08/30 11:01:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:36]  --------------------------------------------------------------------------------
[08/30 11:01:36]  Iteration: 57 (16 solution, 40 counterexamples)
[08/30 11:01:37]  Generator returned sat in 0.326199 secs.
[08/30 11:01:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:37]  Improved gap from 98.5 to 100
[08/30 11:01:37]  Improved number of small numbers from 46 to 100 out of a max of 100
[08/30 11:01:37]  Verifer returned sat in 0.313428 secs.
[08/30 11:01:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7676.498291   -7676.545654  10424.638184 -7676.498291    0.095459 -7676.545654    0.000000    0.047363        0.047363
1   -7676.498047   -7676.545654  10424.638184 -7676.498047    0.047607 -7676.545654    0.000000    0.047607      -99.952393
2   -7576.498047   -7576.545654  10424.638184 -7576.498047  100.047607 -7576.545654    0.000000    0.047607      -99.952393
3   -7229.815674   -7448.910889  10424.638184 -7229.815674  346.729980 -7448.910889  126.729980   92.365234       20.000000
4   -7149.815918   -7376.545654  10424.638184 -7149.815918  172.364990 -7376.545654  126.729980   99.999756       -0.000244
5   -6948.815674   -7206.093506  10424.638184 -6948.815674  301.000000 -7206.093506  207.729980   49.547852       20.000000
6   -6848.863525   -7076.545654  10424.638184 -6848.863525  149.500000 -7076.545654  207.729980   19.952148       19.952148
7   -6495.450439   -6976.545898  10424.638184 -6495.450439  373.365234 -6976.545898  461.095215   20.000244       20.000000
8   -6329.768066   -6976.545654  10424.638184 -6329.768066  185.682617 -6976.545654  526.777588  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=1638595/4096.[0m
[08/30 11:01:38]  --------------------------------------------------------------------------------
[08/30 11:01:38]  Iteration: 58 (16 solution, 41 counterexamples)
[08/30 11:01:39]  Generator returned sat in 0.502615 secs.
[08/30 11:01:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:01:39]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 11:01:39]  Verifer returned sat in 0.185524 secs.
[08/30 11:01:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7676.498291   -7676.545654  10424.638184 -7676.498291    0.095459 -7676.545654    0.000000    0.047363        0.047363
1   -7676.498047   -7676.545654  10424.638184 -7676.498047    0.047607 -7676.545654    0.000000    0.047607      -99.952393
2   -7576.521973   -7576.545654  10424.638184 -7576.521973  100.023682 -7576.545654    0.000000    0.023682      -99.976318
3   -7229.815674   -7448.910889  10424.638184 -7229.815674  346.729980 -7448.910889  126.729980   92.365234       20.000000
4   -7148.815918   -7376.545654  10424.638184 -7148.815918  173.364990 -7376.545654  126.729980  100.999756        0.999756
5   -6948.815674   -7207.093506  10424.638184 -6948.815674  301.000000 -7207.093506  207.729980   50.547852       20.000000
6   -6848.863525   -7076.545654  10424.638184 -6848.863525  150.500000 -7076.545654  207.729980   19.952148       19.952148
7   -6495.450439   -6977.545898  10424.638184 -6495.450439  373.365234 -6977.545898  461.095215   21.000244       20.000000
8   -6329.768066   -6976.545654  10424.638184 -6329.768066  186.682617 -6976.545654  526.777588  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=1638595/4096.[0m
[08/30 11:01:39]  --------------------------------------------------------------------------------
[08/30 11:01:39]  Iteration: 59 (16 solution, 42 counterexamples)
[08/30 11:01:44]  Generator returned sat in 4.267386 secs.
[08/30 11:01:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:45]  Improved gap from 39.00875 to 100
[08/30 11:01:45]  Improved number of small numbers from 54 to 60 out of a max of 100
[08/30 11:01:45]  Verifer returned sat in 0.776139 secs.
[08/30 11:01:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8099.038330   -8121.035654  10424.638184 -8099.038330    0.094971 -8121.035654    0.000000   21.997324       19.999824
1   -7999.039404   -8119.035654  10424.638184 -7999.039404  121.996250 -8119.035654    0.000000  119.996250       19.998750
2   -7919.038154   -8019.038154  10424.638184 -7919.038154  199.997500 -8019.038154    0.000000  100.000000        0.000000
3   -7919.036904   -7919.038154  10424.638184 -7919.036904  100.001250 -7919.038154    0.000000    0.001250      -99.998750
4   -7719.038154   -7754.555342  10424.638184 -7719.038154  200.000000 -7754.555342    0.000000   35.517187        0.000000
5   -7373.315186   -7619.038330  10424.638184 -7373.315186  381.240156 -7619.038330  225.722969   20.000176       20.000000
6   -7373.315186   -7599.039404  10424.638184 -7373.315186    0.010000 -7599.039404  225.722969    0.001250      -80.000000
7   -7214.307061   -7440.031279  10424.638184 -7214.307061  159.009375 -7440.031279  225.722969    0.001250      -20.991875
8   -6899.036904   -7419.038086  10424.638184 -6899.036904  315.271406 -7419.038086  400.001250  119.999932       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=320001/800.[0m
[08/30 11:01:46]  --------------------------------------------------------------------------------
[08/30 11:01:46]  Iteration: 60 (16 solution, 43 counterexamples)
[08/30 11:01:47]  Generator returned sat in 1.094188 secs.
[08/30 11:01:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:47]  Improved gap from 4.0 to 100
[08/30 11:01:48]  Improved number of small numbers from 63 to 75 out of a max of 100
[08/30 11:01:48]  Verifer returned sat in 0.680963 secs.
[08/30 11:01:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8264.076172   -8284.076172  10424.638184 -8264.076172    0.094727 -8284.076172    0.00000   20.000000       19.999764
1   -8184.076172   -8284.075936  10424.638184 -8184.076172  100.000000 -8284.075936    0.00000   99.999764       -0.000236
2   -8084.073436   -8184.075936  10424.638184 -8084.073436  200.002500 -8184.075936    0.00000  100.002500        0.002500
3   -7964.073436   -8012.075102  10424.638184 -7964.073436  220.002500 -8012.075102    0.00250   47.999167       20.000000
4   -7964.073436   -7964.078436  10424.638184 -7964.073436    0.010000 -7964.078436    0.00250    0.002500      -80.000000
5   -7485.074686   -7884.075928  10424.638184 -7485.074686  479.001250 -7884.075928  279.00125  119.999992       20.000000
6   -7485.074686   -7784.075936  10424.638184 -7485.074686    0.010000 -7784.075936  279.00125   20.000000      -80.000000
7   -7164.070936   -7584.076172  10424.638184 -7164.070936  341.003750 -7584.076172  400.00500   20.000236       20.000000
8   -7164.070936   -7584.075928  10424.638184 -7164.070936    0.010000 -7584.075928  400.00500   19.999992      -80.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 11:01:48]  --------------------------------------------------------------------------------
[08/30 11:01:48]  Iteration: 61 (16 solution, 44 counterexamples)
[08/30 11:01:51]  Generator returned sat in 2.223211 secs.
[08/30 11:01:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:01:51]  Improved gap from 20.0 to 100
[08/30 11:01:52]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 11:01:52]  Verifer returned sat in 0.354119 secs.
[08/30 11:01:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8504.884033   -8525.931396  10623.675781 -8504.884033    0.094482 -8525.931396    0.000000   21.047363       20.000000
1   -8504.884033   -8524.884033  10623.675781 -8504.884033    0.047363 -8524.884033    0.000000   20.000000      -80.000000
2   -8424.836670   -8424.884033  10623.675781 -8424.836670  100.047363 -8424.884033    0.000000    0.047363      -99.952637
3   -8324.836670   -8324.884033  10623.675781 -8324.836670  100.047363 -8324.884033    0.000000    0.047363      -99.952637
4   -8124.836670   -8124.884033  10623.675781 -8124.836670  200.047363 -8124.884033    0.000000    0.047363        0.047363
5   -7725.884033   -8105.431396  10623.675781 -7725.884033  399.000000 -8105.431396  279.000000  100.547363       20.000000
6   -7625.931396   -7925.789307  10623.675781 -7625.931396  200.500000 -7925.789307  279.000000   20.857910       19.952637
7   -7248.694580   -7924.883789  10623.675781 -7248.694580  398.094727 -7924.883789  556.189453  119.999756       20.000000
8   -7168.646973   -7824.884033  10623.675781 -7168.646973  200.047363 -7824.884033  556.189453  100.047607        0.047607
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=284769/512.[0m
[08/30 11:01:52]  --------------------------------------------------------------------------------
[08/30 11:01:52]  Iteration: 62 (16 solution, 45 counterexamples)
[08/30 11:01:56]  Generator returned sat in 3.422521 secs.
[08/30 11:01:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:57]  Verifer returned unsat in 0.636522 secs.
[08/30 11:01:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:57]  --------------------------------------------------------------------------------
[08/30 11:01:57]  Iteration: 63 (17 solution, 45 counterexamples)
[08/30 11:01:58]  Generator returned sat in 0.345282 secs.
[08/30 11:01:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:58]  Verifer returned unsat in 0.453309 secs.
[08/30 11:01:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:01:58]  --------------------------------------------------------------------------------
[08/30 11:01:58]  Iteration: 64 (18 solution, 45 counterexamples)
[08/30 11:02:00]  Generator returned sat in 1.146467 secs.
[08/30 11:02:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:00]  Improved gap from 20.1417236328125 to 100
[08/30 11:02:00]  Improved number of small numbers from 42 to 100 out of a max of 100
[08/30 11:02:00]  Verifer returned sat in 0.374813 secs.
[08/30 11:02:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -8299.885254   -8299.932617  11112.609863 -8299.885254    0.094238 -8299.932617    0.000000    0.047363        0.000244
1   -8199.885254   -8299.885498  11112.609863 -8199.885254  100.047363 -8299.885498    0.000000  100.000244        0.000244
2   -8199.885254   -8199.885498  11112.609863 -8199.885254    0.047363 -8199.885498    0.000000    0.000244      -99.999756
3   -8099.838379   -8099.885498  11112.609863 -8099.838379  100.047119 -8099.885498    0.000000    0.047119      -99.952881
4   -7899.838379   -7899.885498  11112.609863 -7899.838379  200.047119 -7899.885498    0.000000    0.047119        0.047119
5   -7499.885498   -7799.885498  11112.609863 -7499.885498  400.000000 -7799.885498  280.000000   20.000000       20.000000
6   -7319.885498   -7769.814453  11112.609863 -7319.885498  200.000000 -7769.814453  360.000000   89.928955       20.000000
7   -7309.814453   -7669.861816  11112.609863 -7309.814453  100.000000 -7669.861816  360.000000    0.047363      -69.928955
8   -7079.838135   -7599.885498  11112.609863 -7079.838135  230.023682 -7599.885498  400.047363  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=819297/2048.[0m
[08/30 11:02:01]  --------------------------------------------------------------------------------
[08/30 11:02:01]  Iteration: 65 (18 solution, 46 counterexamples)
[08/30 11:02:02]  Generator returned sat in 0.811002 secs.
[08/30 11:02:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:03]  Verifer returned unsat in 0.571050 secs.
[08/30 11:02:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:03]  --------------------------------------------------------------------------------
[08/30 11:02:03]  Iteration: 66 (19 solution, 46 counterexamples)
[08/30 11:02:05]  Generator returned sat in 0.941956 secs.
[08/30 11:02:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:02:05]  Improved gap from 0.0235595703125 to 76.5625
[08/30 11:02:05]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 11:02:05]  Verifer returned sat in 0.306831 secs.
[08/30 11:02:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7560.858398   -7680.858154  11112.609619 -7560.858398    0.094238 -7680.858154    0.000000  119.999756       19.999756
1   -7481.858154   -7481.905273  11112.609619 -7481.858154  199.000000 -7481.905273    0.000000    0.047119       -1.000000
2   -7480.811279   -7480.858154  11112.609619 -7480.811279    1.093994 -7480.858154    0.000000    0.046875      -99.953125
3   -7260.811035   -7380.858154  11112.609619 -7260.811035  220.047119 -7380.858154    0.047119  120.000000       20.000000
4   -7260.811035   -7280.858154  11112.609619 -7260.811035    1.000000 -7280.858154    0.047119   20.000000      -80.000000
5   -7080.763916   -7080.858154  11112.609619 -7080.763916  200.047119 -7080.858154    0.047119    0.047119        0.047119
6   -6681.811035   -7080.858154  11112.609619 -6681.811035  399.000000 -7080.858154  279.047119  120.000000       20.000000
7   -6681.811035   -6960.905273  11114.750977 -6681.811035    1.000000 -6960.905273  279.047119    0.047119      -77.858643
8   -6362.905273   -6882.999512  11114.750977 -6362.905273  318.952881 -6882.999512  400.094238  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638593/4096.[0m
[08/30 11:02:05]  --------------------------------------------------------------------------------
[08/30 11:02:05]  Iteration: 67 (19 solution, 47 counterexamples)
[08/30 11:02:08]  Generator returned sat in 2.393137 secs.
[08/30 11:02:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:02:08]  Improved gap from 24.547119140625 to 100
[08/30 11:02:09]  Improved number of small numbers from 96 to 96 out of a max of 100
[08/30 11:02:09]  Verifer returned sat in 0.254040 secs.
[08/30 11:02:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7259.419922   -7259.467041  11112.609619 -7259.419922    0.094238 -7259.467041    0.000000    0.047119        0.047119
1   -7139.514160   -7159.467041  11112.609619 -7139.514160  119.952881 -7159.467041    0.000000   19.952881       19.952881
2   -7059.467041   -7159.467041  11112.609619 -7059.467041  100.000000 -7159.467041    0.000000  100.000000        0.000000
3   -6959.467041   -7059.467041  11112.609619 -6959.467041  200.000000 -7059.467041    0.000000  100.000000        0.000000
4   -6860.467041   -6959.467041  11112.609619 -6860.467041  199.000000 -6959.467041    0.000000   99.000000       -1.000000
5   -6760.467041   -6760.514160  11112.609619 -6760.467041  199.000000 -6760.514160    0.000000    0.047119       -1.000000
6   -6362.561279   -6737.490601  11112.609619 -6362.561279  397.952881 -6737.490601  276.905762   98.023560       20.000000
7   -6262.608398   -6559.467041  11112.609619 -6262.608398  197.976440 -6559.467041  276.905762   19.952881       19.952881
8   -5883.561279   -6559.467041  11112.609619 -5883.561279  399.000000 -6559.467041  555.905762  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1138495/2048.[0m
[08/30 11:02:09]  --------------------------------------------------------------------------------
[08/30 11:02:09]  Iteration: 68 (19 solution, 48 counterexamples)
[08/30 11:02:10]  Generator returned sat in 0.725122 secs.
[08/30 11:02:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 11:02:11]  Improved gap from 42.18798828125 to 100
[08/30 11:02:11]  Improved number of small numbers from 59 to 100 out of a max of 100
[08/30 11:02:11]  Verifer returned sat in 0.297107 secs.
[08/30 11:02:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7241.467529   -7261.467285  11114.609619 -7241.467529    0.093750 -7261.467285    0.000000   19.999756       19.999756
1   -7241.467529   -7261.467285  11114.609619 -7241.467529    0.047119 -7261.467285    0.000000   19.999756      -80.000244
2   -7041.514404   -7143.420410  11114.609619 -7041.514404  219.952881 -7143.420410    0.000000  101.906006       19.952881
3   -6941.420410   -6962.467285  11114.609619 -6941.420410  202.000000 -6962.467285    0.046875   21.000000       20.000000
4   -6861.420410   -6861.514160  11114.609619 -6861.420410  101.000000 -6861.514160    0.046875    0.046875        0.000000
5   -6462.514160   -6840.990967  11114.609619 -6462.514160  398.953125 -6840.990967  278.953125   99.523682       20.000000
6   -6362.561279   -6761.467285  11114.609619 -6362.561279  199.476562 -6761.467285  278.953125  119.952881       19.952881
7   -6282.514160   -6590.420410  11114.609619 -6282.514160  200.000000 -6590.420410  278.953125   28.953125        0.000000
8   -6041.373535   -6561.467285  11114.609619 -6041.373535  270.093750 -6561.467285  400.093750  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=25603/64.[0m
[08/30 11:02:11]  --------------------------------------------------------------------------------
[08/30 11:02:11]  Iteration: 69 (19 solution, 49 counterexamples)
[08/30 11:02:14]  Generator returned sat in 1.963993 secs.
[08/30 11:02:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:14]  Verifer returned unsat in 0.230244 secs.
[08/30 11:02:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:14]  --------------------------------------------------------------------------------
[08/30 11:02:14]  Iteration: 70 (20 solution, 49 counterexamples)
[08/30 11:02:15]  Generator returned sat in 0.299365 secs.
[08/30 11:02:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:15]  Verifer returned unsat in 0.271744 secs.
[08/30 11:02:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:15]  --------------------------------------------------------------------------------
[08/30 11:02:15]  Iteration: 71 (21 solution, 49 counterexamples)
[08/30 11:02:17]  Generator returned sat in 0.371716 secs.
[08/30 11:02:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:17]  Verifer returned unsat in 0.368558 secs.
[08/30 11:02:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:17]  --------------------------------------------------------------------------------
[08/30 11:02:17]  Iteration: 72 (22 solution, 49 counterexamples)
[08/30 11:02:18]  Generator returned unsat in 0.418366 secs.
[08/30 11:02:18]  [96mNo more solutions found[0m
[08/30 11:02:18]  Final solutions:
[08/30 11:02:18]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 11:02:18]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 11:02:18]  Took 152.289698 secs.
