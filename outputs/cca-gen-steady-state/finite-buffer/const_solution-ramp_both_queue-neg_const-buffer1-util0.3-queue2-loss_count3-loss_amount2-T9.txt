[08/30 13:38:39]  --------------------------------------------------------------------------------
[08/30 13:38:39]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 13:38:40]  Generator returned sat in 0.004129 secs.
[08/30 13:38:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:38:40]  Improved gap from 0.1 to 100
[08/30 13:38:40]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:38:40]  Verifer returned sat in 0.245260 secs.
[08/30 13:38:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0        -1399.3        -1499.3    1499.3      -1399.3       0.1      -1499.3        0.0    100.0           100.0
1        -1399.3        -1499.3    1499.3      -1399.3       0.1      -1499.3        0.0    100.0             0.0
2        -1299.3        -1299.4    1499.3      -1299.3     200.0      -1299.4        0.0      0.1             0.0
3         -999.2        -1199.3    1499.3       -999.2     300.2      -1199.3        0.1    200.0           200.0
4            2.2        -1144.3    1499.3          2.2    1201.4      -1144.3      901.5    245.0           200.0
5         2871.0        -1099.3    1499.3       2871.0    3113.8      -1099.3     3670.3    300.0           200.0
6         9199.8         -999.3    1499.3       9199.8    6628.8       -999.3     9899.1    300.0           200.0
7        22558.4         -899.3    1499.3      22558.4   13658.6       -899.3    23157.7    300.0           200.0
8        50066.6         -799.3    1499.3      50066.6   27808.2       -799.3    50565.9    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=248322/5, 
.[0m
[08/30 13:38:40]  --------------------------------------------------------------------------------
[08/30 13:38:40]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 13:38:40]  Generator returned sat in 0.074994 secs.
[08/30 13:38:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:40]  Improved number of small numbers from 68 to 99 out of a max of 99
[08/30 13:38:40]  Verifer returned sat in 0.250624 secs.
[08/30 13:38:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t      cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t
0   -1499.250000   -1500.300049  1499.300049  -1499.250000      0.099609 -1500.300049      0.000000    1.050049        0.050049
1   -1499.250000   -1499.300049  1499.300049  -1499.250000      0.050049 -1499.300049      0.000000    0.050049      -99.949951
2   -1399.250000   -1399.300049  1499.300049  -1399.250000    100.050049 -1399.300049      0.000000    0.050049      -99.949951
3   49166.550049   -1200.300049  1499.300049  49166.550049  50565.850098 -1200.300049  50165.850098  201.000000      200.000000
4   49266.550049   -1099.300049  1499.300049  49266.550049    301.000000 -1099.300049  50165.850098  200.000000      200.000000
5   49718.050049   -1027.025146  1499.300049  49718.050049    651.500000 -1027.025146  50517.350098  227.725098      200.000000
6   49863.599854    -899.300049  1499.300049  49863.599854    373.274902  -899.300049  50562.899902  200.000000      200.000000
7   49965.599854    -799.300049  1499.300049  49965.599854    302.000000  -799.300049  50564.899902  200.000000      200.000000
8   50066.599854    -799.299805  1499.300049  50066.599854    301.000000  -799.299805  50565.899902  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=409651/1024, 
.[0m
[08/30 13:38:41]  --------------------------------------------------------------------------------
[08/30 13:38:41]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 13:38:41]  Generator returned sat in 0.010614 secs.
[08/30 13:38:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:41]  Improved number of small numbers from 70 to 99 out of a max of 99
[08/30 13:38:41]  Verifer returned sat in 0.202648 secs.
[08/30 13:38:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t      cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t
0   -1499.293701   -1502.256592  1499.299805  -1499.293701      0.099609 -1502.256592      0.000000    2.962891        0.006348
1   -1499.293701   -1499.300049  1499.299805  -1499.293701      0.006104 -1499.300049      0.000000    0.006348      -99.993652
2   -1399.250000   -1399.300049  1499.299805  -1399.250000    100.050049 -1399.300049      0.000000    0.050049      -99.949951
3   49166.549805   -1200.778320  1499.299805  49166.549805  50565.849854 -1200.778320  50165.849854  201.478271      200.000000
4   49266.549805   -1100.778320  1499.299805  49266.549805    301.478271 -1100.778320  50165.849854  201.478271      200.000000
5   49716.549805   -1025.775146  1499.299805  49716.549805    651.478271 -1025.775146  50515.849854  226.475098      200.000000
6   49863.599609    -899.300049  1499.299805  49863.599609    373.524902  -899.300049  50562.899658  200.000000      200.000000
7   49965.077881    -799.300049  1499.299805  49965.077881    301.478271  -799.300049  50564.377930  200.000000      200.000000
8   50066.556152    -799.299805  1499.299805  50066.556152    301.478271  -799.299805  50565.856201  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=819213/2048, 
.[0m
[08/30 13:38:41]  --------------------------------------------------------------------------------
[08/30 13:38:41]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 13:38:41]  Generator returned sat in 0.085160 secs.
[08/30 13:38:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:42]  Improved number of small numbers from 48 to 99 out of a max of 99
[08/30 13:38:42]  Verifer returned sat in 0.223065 secs.
[08/30 13:38:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1499.293701   -1647.296143  1599.293213 -1499.293701    0.099609 -1647.296143   0.000000  148.002441           100.0
1   -1499.293701   -1599.293701  1599.293213 -1499.293701    0.005859 -1599.293701   0.000000  100.000000             0.0
2   -1399.293701   -1399.294434  1599.293213 -1399.293701  200.000000 -1399.294434   0.000000    0.000732             0.0
3   -1099.292969   -1323.294434  1599.293213 -1099.292969  300.001465 -1323.294434   0.000732  224.000732           200.0
4    -999.291992   -1249.293457  1599.293213  -999.291992  324.001709 -1249.293457   0.001709  249.999756           200.0
5    -899.291504   -1099.293701  1599.293213  -899.291504  350.000244 -1099.293701   0.002197  200.000000           200.0
6    -799.290771   -1011.293701  1599.293213  -799.290771  300.000732 -1011.293701   0.002930  212.000000           200.0
7    -699.290039    -924.293213  1599.293213  -699.290039  312.000732  -924.293213   0.003662  224.999512           200.0
8    -599.289307    -899.293701  1599.293213  -599.289307  325.000244  -899.293701   0.004395  300.000000           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=11/4096, 
.[0m
[08/30 13:38:42]  --------------------------------------------------------------------------------
[08/30 13:38:42]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 13:38:42]  Generator returned sat in 0.240834 secs.
[08/30 13:38:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:43]  Improved number of small numbers from 56 to 97 out of a max of 99
[08/30 13:38:43]  Verifer returned sat in 0.579392 secs.
[08/30 13:38:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1546.297852   -1546.347656  1599.292969 -1546.297852    0.099609 -1546.347656    0.000000    0.049805        0.024902
1   -1546.297852   -1546.322754  1599.292969 -1546.297852    0.024902 -1546.322754    0.000000    0.024902      -99.975098
2   -1146.347900   -1446.322754  1599.292969 -1146.347900  399.974854 -1446.322754    0.000000  299.974854      199.974854
3   -1146.347900   -1346.322754  1599.292969 -1146.347900   74.256348 -1346.322754    0.000000  199.974854       99.974854
4   -1146.347900   -1195.835449  1599.292969 -1146.347900  174.268799 -1195.835449    0.000000   49.487549       -0.025146
5    -846.322998   -1046.322754  1599.292969  -846.322998  349.512451 -1046.322754    0.000000  199.999756      199.999756
6    -496.810303   -1022.103760  1599.292969  -496.810303  549.512451 -1022.103760  249.512451  275.781006      200.000000
7    -496.810303    -846.322998  1599.292969  -496.810303  275.756226  -846.322998  249.512451  100.000244      100.000000
8    -146.298096    -846.322754  1599.292969  -146.298096  450.512451  -846.322754  400.024658  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638501/4096, 
.[0m
[08/30 13:38:43]  --------------------------------------------------------------------------------
[08/30 13:38:43]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 13:38:43]  Generator returned sat in 0.033598 secs.
[08/30 13:38:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:38:44]  Improved number of small numbers from 81 to 91 out of a max of 99
[08/30 13:38:44]  Verifer returned sat in 0.463628 secs.
[08/30 13:38:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1546.297852   -1546.322754  1599.292969 -1546.297852    0.099365 -1546.322754    0.000000    0.024902        0.024902
1   -1546.297852   -1546.322754  1599.292969 -1546.297852    0.018799 -1546.322754    0.000000    0.024902      -99.975098
2   -1146.348145   -1444.410156  1599.292969 -1146.348145  399.974609 -1444.410156    0.000000  298.062012      199.974609
3   -1146.348145   -1346.322754  1599.292969 -1146.348145   79.206299 -1346.322754    0.000000  199.974609       99.974609
4   -1146.348145   -1197.797852  1599.292969 -1146.348145  178.206299 -1197.797852    0.000000   51.449707       -0.025391
5    -846.329102   -1046.322754  1599.292969  -846.329102  351.468750 -1046.322754    0.000000  199.993652      199.993652
6    -496.810303   -1022.085449  1599.292969  -496.810303  549.512451 -1022.085449  249.512451  275.762695      200.000000
7    -496.810303    -846.322754  1599.292969  -496.810303  275.756226  -846.322754  249.512451  100.000000      100.000000
8    -146.316528    -846.322754  1599.292969  -146.316528  450.493774  -846.322754  400.006226  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3276851/8192, 
.[0m
[08/30 13:38:44]  --------------------------------------------------------------------------------
[08/30 13:38:44]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 13:38:44]  Generator returned sat in 0.206334 secs.
[08/30 13:38:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:45]  Verifer returned unsat in 0.172904 secs.
[08/30 13:38:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:45]  --------------------------------------------------------------------------------
[08/30 13:38:45]  Iteration: 8 (1 solution, 6 counterexamples)
[08/30 13:38:45]  Generator returned sat in 0.086702 secs.
[08/30 13:38:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:45]  Improved gap from 75.74378967285156 to 100
[08/30 13:38:45]  Improved number of small numbers from 41 to 100 out of a max of 100
[08/30 13:38:45]  Verifer returned sat in 0.398443 secs.
[08/30 13:38:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3411.257568   -3511.257812  3564.227783 -3411.257568    0.099365 -3511.257812    0.000000  100.000244      100.000244
1   -3411.257568   -3511.257812  3564.227783 -3411.257568    0.049561 -3511.257812    0.000000  100.000244        0.000244
2   -3411.257568   -3411.257812  3564.227783 -3411.257568   99.999756 -3411.257812    0.000000    0.000244      -99.999756
3   -3311.208008   -3311.257812  3564.227783 -3311.208008  100.049805 -3311.257812    0.000000    0.049805      -99.950195
4   -3111.208008   -3177.990723  3564.227783 -3111.208008  200.049805 -3177.990723    0.000000   66.782715        0.049805
5   -2811.307373   -3029.738770  3564.227783 -2811.307373  366.683350 -3029.738770    0.000000  218.431396      199.950439
6   -2472.295898   -3011.257568  3564.227783 -2472.295898  557.442871 -3011.257568  238.961914  299.999756      200.000000
7   -2472.295898   -2811.257812  3564.227783 -2472.295898  277.721436 -2811.257812  238.961914  100.000000      100.000000
8   -2111.208008   -2811.257568  3564.227783 -2111.208008  461.087891 -2811.257568  400.049805  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=409651/1024, 
.[0m
[08/30 13:38:45]  --------------------------------------------------------------------------------
[08/30 13:38:45]  Iteration: 9 (1 solution, 7 counterexamples)
[08/30 13:38:46]  Generator returned sat in 0.276255 secs.
[08/30 13:38:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:38:46]  Improved gap from 0.0 to 0
[08/30 13:38:46]  Improved number of small numbers from 58 to 83 out of a max of 100
[08/30 13:38:46]  Verifer returned sat in 0.515035 secs.
[08/30 13:38:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3111.229492   -3311.230469  3264.200684 -3111.229492    0.099365 -3311.230469        0.0  200.000977      100.001221
1   -3111.229492   -3211.230469  3264.200684 -3111.229492    0.049561 -3211.230469        0.0  100.000977        0.001221
2   -3111.229492   -3111.230508  3264.200684 -3111.229492    0.001465 -3111.230508        0.0    0.001016      -99.998779
3   -2811.219258   -3011.230469  3264.200684 -2811.219258  300.011250 -3011.230469        0.0  200.011211      100.011455
4   -2811.219258   -2811.230713  3264.200684 -2811.219258    0.010000 -2811.230713        0.0    0.011455        0.011455
5   -2811.219258   -2811.230469  3364.189229 -2811.219258    0.010000 -2811.230469        0.0    0.011211        0.000000
6   -2811.219258   -2811.219258  3464.189209 -2811.219258    0.010000 -2811.219258        0.0    0.000000       -0.000020
7   -2811.209258   -2811.218008  3564.179199 -2811.209258    0.010000 -2811.218008        0.0    0.008750       -0.000029
8   -2811.208008   -2811.209229  3664.177734 -2811.208008    0.010000 -2811.209229        0.0    0.001221       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:38:47]  --------------------------------------------------------------------------------
[08/30 13:38:47]  Iteration: 10 (1 solution, 8 counterexamples)
[08/30 13:38:47]  Generator returned sat in 0.200280 secs.
[08/30 13:38:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:38:47]  Improved gap from 0.0 to 100
[08/30 13:38:48]  Improved number of small numbers from 54 to 64 out of a max of 100
[08/30 13:38:48]  Verifer returned sat in 1.018207 secs.
[08/30 13:38:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2765.742188   -2865.740488  3365.184209 -2765.742188    0.099365 -2865.740488     0.0000   99.998301        0.000801
1   -2765.742188   -2765.742988  3365.184209 -2765.742188    0.000977 -2765.742988     0.0000    0.000801      -99.999199
2   -2565.742988   -2665.742920  3365.184209 -2565.742988  200.000000 -2665.742920     0.0000   99.999932        0.000000
3   -2565.742988   -2565.742988  3365.184209 -2565.742988   99.999000 -2565.742988     0.0000    0.000000     -100.000000
4   -2216.745988   -2365.742988  3365.184209 -2216.745988  348.997000 -2365.742988     0.0000  148.997000      148.997000
5   -1792.244488   -2365.742920  3365.184209 -1792.244488  573.498500 -2365.742920   273.4985  299.999932      200.000000
6   -1792.244488   -2265.742988  3365.184209 -1792.244488    0.010000 -2265.742988   273.4985  200.000000      100.000000
7   -1693.239488   -2076.742988  3365.184209 -1693.239488  299.005000 -2076.742988   273.4985  110.005000       99.005000
8   -1365.741988   -1965.743164  3365.184209 -1365.741988  437.502500 -1965.743164   400.0010  200.000176      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=400001/1000, 
.[0m
[08/30 13:38:48]  --------------------------------------------------------------------------------
[08/30 13:38:48]  Iteration: 11 (1 solution, 9 counterexamples)
[08/30 13:38:49]  Generator returned sat in 0.476077 secs.
[08/30 13:38:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:38:49]  Improved gap from 33.9503173828125 to 100
[08/30 13:38:49]  Improved number of small numbers from 26 to 100 out of a max of 100
[08/30 13:38:49]  Verifer returned sat in 0.431015 secs.
[08/30 13:38:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2575.915283   -2675.915527  3465.159424 -2575.915283    0.099121 -2675.915527    0.000000  100.000244           100.0
1   -2575.915283   -2575.915283  3465.159424 -2575.915283    0.024902 -2575.915283    0.000000    0.000000             0.0
2   -2275.890625   -2475.915283  3465.159424 -2275.890625  300.024658 -2475.915283    0.024658  200.000000           200.0
3   -2175.865723   -2475.915283  3465.159424 -2175.865723  300.024902 -2475.915283    0.049561  300.000000           200.0
4   -2175.865723   -2275.915283  3465.159424 -2175.865723  149.012451 -2275.915283    0.049561  100.000000           100.0
5   -1826.865723   -2199.415527  3465.159424 -1826.865723  449.000000 -2199.415527  149.049561  223.500244           200.0
6   -1826.865723   -2075.915283  3465.159424 -1826.865723  223.500000 -2075.915283  149.049561  100.000000           100.0
7   -1327.865723   -2074.440186  3465.159424 -1327.865723  599.000000 -2074.440186  448.049561  298.524902           200.0
8   -1327.865723   -1975.915283  3465.159424 -1327.865723  298.500000 -1975.915283  448.049561  200.000000           100.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=448, 
.[0m
[08/30 13:38:50]  --------------------------------------------------------------------------------
[08/30 13:38:50]  Iteration: 12 (1 solution, 10 counterexamples)
[08/30 13:38:50]  Generator returned sat in 0.261689 secs.
[08/30 13:38:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:38:50]  Improved gap from 0.00616455078125 to 0
[08/30 13:38:50]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 13:38:50]  Verifer returned sat in 0.303291 secs.
[08/30 13:38:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2575.915283   -2675.915527  3168.140869 -2575.915283    0.098877 -2675.915527   0.000000  100.000244       99.981445
1   -2575.915283   -2575.915527  3168.141113 -2575.915283    0.024658 -2575.915527   0.000000    0.000244       -0.018311
2   -2275.890869   -2575.896973  3168.141113 -2275.890869  300.024658 -2575.896973   0.006104  300.000000      200.000000
3   -2275.890869   -2375.896973  3168.141113 -2275.890869  299.999756 -2375.896973   0.006104  100.000000      100.000000
4   -2275.890869   -2275.902832  3168.141113 -2275.890869    1.000000 -2275.902832   0.006104    0.005859        0.000000
5   -2274.896729   -2274.909180  3267.146973 -2274.896729    1.000000 -2274.909180   0.006104    0.006348        0.000000
6   -2273.903076   -2273.915283  3366.153076 -2273.903076    1.000000 -2273.915283   0.006104    0.006104       -0.000244
7   -2272.909180   -2272.921631  3465.159180 -2272.909180    1.000000 -2272.921631   0.006104    0.006348       -0.000244
8   -2271.915527   -2271.927490  3465.159424 -2271.915527    1.000000 -2271.927490   0.006104    0.005859      -99.006348
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:38:51]  --------------------------------------------------------------------------------
[08/30 13:38:51]  Iteration: 13 (1 solution, 11 counterexamples)
[08/30 13:38:54]  Generator returned sat in 2.888223 secs.
[08/30 13:38:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:38:54]  Improved gap from 0.0025 to 100
[08/30 13:38:54]  Improved number of small numbers from 24 to 100 out of a max of 100
[08/30 13:38:54]  Verifer returned sat in 0.372600 secs.
[08/30 13:38:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3392.190918   -3392.190918  3873.459717 -3392.190918    0.098633 -3392.190918    0.000000    0.000000      -10.975342
1   -2994.240479   -3381.215576  3873.459717 -2994.240479  397.950439 -3381.215576   86.975098  300.000000      200.000000
2   -2894.190918   -3215.215820  3873.459717 -2894.190918  400.049561 -3215.215820   87.024658  234.000244      200.000000
3   -2516.166260   -3086.178467  3873.459717 -2516.166260  612.024902 -3086.178467  365.049316  204.962891      200.000000
4   -2416.116699   -2992.190918  3873.459717 -2416.116699  305.012451 -2992.190918  365.098877  210.975342      200.000000
5   -2239.067383   -2897.690918  3873.459717 -2239.067383  388.024658 -2897.690918  442.148193  216.475342      200.000000
6   -2139.017822   -2781.215576  3873.459717 -2139.017822  316.524902 -2781.215576  442.197754  200.000000      200.000000
7   -2035.054932   -2686.178467  3873.459717 -2035.054932  303.962891 -2686.178467  446.160645  204.962891      200.000000
8   -1935.005371   -2681.215576  3873.459717 -1935.005371  305.012451 -2681.215576  446.210205  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=41529/512, 
.[0m
[08/30 13:38:55]  --------------------------------------------------------------------------------
[08/30 13:38:55]  Iteration: 14 (1 solution, 12 counterexamples)
[08/30 13:38:55]  Generator returned sat in 0.252975 secs.
[08/30 13:38:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:55]  Improved gap from 0.0 to 7.8125
[08/30 13:38:55]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:38:55]  Verifer returned sat in 0.328597 secs.
[08/30 13:38:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2847.613281   -2847.613281  3799.248779 -2847.613281    0.098633 -2847.613281        0.0    0.000000        0.000000
1   -2673.402344   -2747.613281  3799.248779 -2673.402344  174.210938 -2747.613281        0.0   74.210938       74.210938
2   -2673.402344   -2673.451660  3799.248779 -2673.402344   74.210938 -2673.451660        0.0    0.049316      -25.789062
3   -2421.873535   -2547.613281  3799.248779 -2421.873535  251.578125 -2547.613281        0.0  125.739746      125.739746
4   -2421.824219   -2484.768066  3799.248779 -2421.824219  125.789062 -2484.768066        0.0   62.943848       25.789062
5   -2421.824219   -2447.613281  3873.459717 -2421.824219   62.894531 -2447.613281        0.0   25.789062        0.000000
6   -2416.166016   -2416.215332  3960.038330 -2416.166016   31.447266 -2416.215332        0.0    0.049316       -7.763184
7   -2400.491699   -2408.402832  4052.127197 -2400.491699   15.723633 -2408.402832        0.0    7.911133        0.000000
8   -2400.491699   -2400.491699  4052.127197 -2400.491699    7.861816 -2400.491699        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:38:56]  --------------------------------------------------------------------------------
[08/30 13:38:56]  Iteration: 15 (1 solution, 13 counterexamples)
[08/30 13:38:56]  Generator returned sat in 0.269614 secs.
[08/30 13:38:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:38:57]  Improved number of small numbers from 54 to 72 out of a max of 99
[08/30 13:38:57]  Verifer returned sat in 0.662093 secs.
[08/30 13:38:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2953.231445   -2953.231689  3873.459473 -2953.231445    0.098633 -2953.231689    0.000000    0.000244        0.000214
1   -2653.281006   -2853.231659  3873.459473 -2653.281006  299.950684 -2853.231659    0.000000  199.950653      199.950653
2   -2553.182343   -2753.231689  3873.459473 -2553.182343  300.049316 -2753.231689    0.049316  200.000031      200.000000
3   -2553.182343   -2653.231689  3873.459473 -2553.182343   21.876541 -2653.231689    0.049316  100.000031      100.000000
4   -2553.182343   -2653.231445  3873.459473 -2553.182343   43.753082 -2653.231445    0.049316   99.999786        0.000000
5   -2553.182343   -2553.231659  3873.459473 -2553.182343   87.506165 -2553.231659    0.049316    0.000000     -100.000000
6   -2378.170013   -2453.231445  3873.459473 -2378.170013  175.012329 -2453.231445    0.049316   75.012115      -24.987671
7   -2103.157471   -2253.231659  3873.459473 -2103.157471  350.024658 -2253.231659    0.049316  150.024872      150.024872
8   -1553.133026   -2253.231445  3873.459473 -1553.133026  700.049316 -2253.231445  400.098633  299.999786      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819301/2048, 
.[0m
[08/30 13:38:57]  --------------------------------------------------------------------------------
[08/30 13:38:57]  Iteration: 16 (1 solution, 14 counterexamples)
[08/30 13:38:58]  Generator returned sat in 0.923866 secs.
[08/30 13:38:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:38:58]  Improved gap from 0.0 to 0
[08/30 13:38:59]  Improved number of small numbers from 58 to 66 out of a max of 100
[08/30 13:38:59]  Verifer returned sat in 0.678375 secs.
[08/30 13:38:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -2803.188593   -2804.199707  3724.427490 -2803.188593  0.098633 -2804.199707        0.0  1.011115        1.011084
1   -2803.188593   -2804.182343  3823.416406 -2803.188593  0.001465 -2804.182343        0.0  0.993750        0.000000
2   -2803.188593   -2803.188593  3923.416406 -2803.188593  0.001465 -2803.188593        0.0  0.000000        0.000000
3   -2802.681093   -2803.188477  4022.908906 -2802.681093  0.507500 -2803.188477        0.0  0.507384        0.000000
4   -2802.681093   -2802.681093  4122.418945 -2802.681093  0.011230 -2802.681093        0.0  0.000000       -0.489961
5   -2802.179843   -2802.190918  4222.407656 -2802.179843  0.501250 -2802.190918        0.0  0.011075        0.000000
6   -2802.179843   -2802.179843  4322.407656 -2802.179843  0.010000 -2802.179843        0.0  0.000000        0.000000
7   -2802.169843   -2802.179843  4422.397656 -2802.169843  0.010000 -2802.179843        0.0  0.010000        0.000000
8   -2802.169843   -2802.169843  4422.397705 -2802.169843  0.010000 -2802.169843        0.0  0.000000      -99.999951
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:38:59]  --------------------------------------------------------------------------------
[08/30 13:38:59]  Iteration: 17 (1 solution, 15 counterexamples)
[08/30 13:39:00]  Generator returned sat in 0.764359 secs.
[08/30 13:39:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:39:00]  Improved gap from 0.0 to 100
[08/30 13:39:02]  Improved number of small numbers from 21 to 33 out of a max of 100
[08/30 13:39:02]  Verifer returned sat in 1.391813 secs.
[08/30 13:39:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2800.052246   -2900.052260  3820.280073 -2800.052246    0.098389 -2900.052260    0.000000  100.000013      100.000013
1   -2800.052246   -2900.052260  3820.280073 -2800.052246    0.024658 -2900.052260    0.000000  100.000013        0.000013
2   -2800.052246   -2800.052260  3820.280073 -2800.052246    0.024658 -2800.052260    0.000000    0.000013      -99.999987
3   -2400.027662   -2634.044060  3820.280073 -2400.027662  400.024597 -2634.044060    0.024597  233.991801      200.000000
4   -2300.003065   -2506.377798  3820.280073 -2300.003065  334.016398 -2506.377798    0.049194  206.325538      200.000000
5   -2141.483174   -2400.052260  3820.280073 -2141.483174  364.845430 -2400.052260   58.569086  200.000000      200.000000
6   -1958.060459   -2300.052260  3820.280073 -1958.060459  383.422715 -2300.052260  141.991801  200.000000      200.000000
7   -1798.353201   -2200.052260  3820.280073 -1798.353201  359.707258 -2200.052260  201.699059  200.000000      200.000000
8   -1664.336803   -2200.052246  3820.280073 -1664.336803  334.016398 -2200.052246  235.715457  299.999987      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=81084277/344064, 
.[0m
[08/30 13:39:02]  --------------------------------------------------------------------------------
[08/30 13:39:02]  Iteration: 18 (1 solution, 16 counterexamples)
[08/30 13:39:04]  Generator returned sat in 2.000756 secs.
[08/30 13:39:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:39:04]  Improved gap from 0.0 to 7.8125
[08/30 13:39:05]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/30 13:39:05]  Verifer returned sat in 0.370695 secs.
[08/30 13:39:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4043.728516   -4043.728516  4963.907227 -4043.728516    0.098145 -4043.728516        0.0    0.000000       -0.049072
1   -4043.679443   -4043.679443  4963.907227 -4043.679443    0.049072 -4043.679443        0.0    0.000000     -100.000000
2   -3643.728516   -3884.728516  4963.907227 -3643.728516  399.950928 -3884.728516        0.0  241.000000      199.950928
3   -3604.728516   -3743.679443  4963.907227 -3604.728516  280.000000 -3743.679443        0.0  138.950928      138.950928
4   -3604.679443   -3673.228760  4963.907227 -3604.679443  139.000000 -3673.228760        0.0   68.549316       39.000000
5   -3604.679443   -3637.978760  5024.907227 -3604.679443   68.500000 -3637.978760        0.0   33.299316        0.000000
6   -3604.679443   -3604.679443  5117.094727 -3604.679443   33.250000 -3604.679443        0.0    0.000000       -7.812500
7   -3589.054443   -3596.866943  5209.282227 -3589.054443   15.625000 -3596.866943        0.0    7.812500        0.000000
8   -3589.054443   -3589.054443  5209.282227 -3589.054443    6.812500 -3589.054443        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:39:05]  --------------------------------------------------------------------------------
[08/30 13:39:05]  Iteration: 19 (1 solution, 17 counterexamples)
[08/30 13:39:06]  Generator returned sat in 0.450352 secs.
[08/30 13:39:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:39:06]  Improved gap from 0.0 to 28.125
[08/30 13:39:06]  Improved number of small numbers from 44 to 100 out of a max of 100
[08/30 13:39:06]  Verifer returned sat in 0.485537 secs.
[08/30 13:39:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3921.402588   -3921.451660  4859.181885 -3921.402588    0.098145 -3921.451660        0.0    0.049072        0.000000
1   -3921.402588   -3921.402588  4931.056885 -3921.402588    0.024658 -3921.402588        0.0    0.000000      -28.125000
2   -3593.302002   -3793.277588  4931.056885 -3593.302002  328.100586 -3793.277588        0.0  199.975586      199.975586
3   -3593.302002   -3693.277588  4931.056885 -3593.302002   34.075928 -3693.277588        0.0   99.975586       99.975586
4   -3593.302002   -3594.252930  4931.056885 -3593.302002   33.075928 -3594.252930        0.0    0.950928       -0.024414
5   -3562.177002   -3593.277344  4999.956299 -3562.177002   32.075928 -3593.277344        0.0   31.100342        0.000000
6   -3562.177002   -3562.177002  5071.831299 -3562.177002   31.075928 -3562.177002        0.0    0.000000      -28.125000
7   -3532.101074   -3534.052002  5143.706299 -3532.101074   30.075928 -3534.052002        0.0    1.950928      -26.174072
8   -3504.976074   -3505.927002  5143.706299 -3504.976074   29.075928 -3505.927002        0.0    0.950928      -99.049072
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:39:06]  --------------------------------------------------------------------------------
[08/30 13:39:06]  Iteration: 20 (1 solution, 18 counterexamples)
[08/30 13:39:07]  Generator returned sat in 0.612329 secs.
[08/30 13:39:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:39:08]  Improved gap from 0.0 to 100
[08/30 13:39:08]  Improved number of small numbers from 55 to 59 out of a max of 100
[08/30 13:39:08]  Verifer returned sat in 1.184332 secs.
[08/30 13:39:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4169.399414   -4269.399359  5107.178656 -4169.399414    0.097900 -4269.399359    0.000000   99.999945       -0.000055
1   -4169.350531   -4169.399359  5107.178656 -4169.350531  100.048828 -4169.399359    0.000000    0.048828      -99.951172
2   -4069.350531   -4069.399359  5107.178656 -4069.350531  100.048828 -4069.399359    0.000000    0.048828      -99.951172
3   -3869.399359   -3969.399359  5107.178656 -3869.399359  200.000000 -3969.399359    0.000000  100.000000        0.000000
4   -3620.399359   -3831.667588  5107.178656 -3620.399359  349.000000 -3831.667588    0.000000  211.268229      149.000000
5   -3314.801702   -3669.399359  5107.178656 -3314.801702  516.865885 -3669.399359  154.597656  200.000000      200.000000
6   -3314.801702   -3634.765244  5107.178656 -3314.801702  199.000000 -3634.765244  154.597656  165.365885      100.000000
7   -3114.850531   -3469.399359  5107.178656 -3114.850531  365.317057 -3469.399359  154.597656  199.951172      199.951172
8   -2769.350531   -3469.399170  5107.178656 -2769.350531  545.451172 -3469.399170  400.048828  299.999811      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204825/512, 
.[0m
[08/30 13:39:09]  --------------------------------------------------------------------------------
[08/30 13:39:09]  Iteration: 21 (1 solution, 19 counterexamples)
[08/30 13:39:10]  Generator returned sat in 0.627200 secs.
[08/30 13:39:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:39:10]  Improved number of small numbers from 54 to 99 out of a max of 99
[08/30 13:39:10]  Verifer returned sat in 0.403145 secs.
[08/30 13:39:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4821.439209   -5021.438965  5959.218262 -4821.439209    0.097656 -5021.438965    0.000000  199.999756      199.999756
1   -4821.439209   -5021.438965  5959.218262 -4821.439209  199.999756 -5021.438965    0.000000  199.999756       99.999756
2   -4821.439209   -4872.512207  5959.218262 -4821.439209    0.048828 -4872.512207    0.000000   51.072998       -0.000244
3   -4721.438965   -4721.487793  5959.218262 -4721.438965  151.073242 -4721.487793    0.000000    0.048828        0.000000
4   -4421.438965   -4621.438965  5959.218262 -4421.438965  300.048828 -4621.438965    0.000000  200.000000      200.000000
5   -4122.390137   -4621.438965  5959.218262 -4122.390137  499.048828 -4621.438965  199.048828  300.000000      200.000000
6   -4122.390137   -4512.536621  5959.218262 -4122.390137  248.524414 -4512.536621  199.048828  191.097656      100.000000
7   -3961.487793   -4321.438965  5959.218262 -3961.487793  352.000000 -4321.438965  199.048828  160.902344      160.902344
8   -3621.390137   -4321.438965  5959.218262 -3621.390137  501.000000 -4321.438965  400.048828  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204825/512, 
.[0m
[08/30 13:39:10]  --------------------------------------------------------------------------------
[08/30 13:39:10]  Iteration: 22 (1 solution, 20 counterexamples)
[08/30 13:39:12]  Generator returned sat in 1.350855 secs.
[08/30 13:39:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:39:12]  Improved gap from 0.0 to 100
[08/30 13:39:13]  Improved number of small numbers from 65 to 98 out of a max of 100
[08/30 13:39:13]  Verifer returned sat in 0.531090 secs.
[08/30 13:39:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5211.100830   -5211.100830  5959.218262 -5211.100830    0.097412 -5211.100830    0.000000    0.000000     -100.000000
1   -4811.101074   -5111.100830  5959.218262 -4811.101074  399.999756 -5111.100830    0.000000  299.999756      199.999756
2   -4811.100830   -4911.100830  5959.218262 -4811.100830  300.000000 -4911.100830    0.000000  100.000000      100.000000
3   -4811.100830   -4861.920898  5959.218262 -4811.100830   25.934448 -4861.920898    0.000000   50.820068        0.000000
4   -4811.052002   -4811.100830  5959.218262 -4811.052002   50.868896 -4811.100830    0.000000    0.048828      -99.951172
5   -4710.363037   -4711.100830  5959.218262 -4710.363037  100.737793 -4711.100830    0.000000    0.737793      -99.262207
6   -4510.625244   -4611.100830  5959.218262 -4510.625244  200.475586 -4611.100830    0.000000  100.475586        0.475586
7   -4211.149658   -4509.954346  5959.218262 -4211.149658  399.951172 -4509.954346    0.000000  298.804688      199.951172
8   -3711.052002   -4411.100830  5959.218262 -3711.052002  798.902344 -4411.100830  400.048828  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=204825/512, 
.[0m
[08/30 13:39:13]  --------------------------------------------------------------------------------
[08/30 13:39:13]  Iteration: 23 (1 solution, 21 counterexamples)
[08/30 13:39:14]  Generator returned sat in 0.694443 secs.
[08/30 13:39:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:14]  Verifer returned unsat in 0.108326 secs.
[08/30 13:39:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:14]  --------------------------------------------------------------------------------
[08/30 13:39:14]  Iteration: 24 (2 solution, 21 counterexamples)
[08/30 13:39:15]  Generator returned sat in 0.404932 secs.
[08/30 13:39:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:15]  Verifer returned unsat in 0.087429 secs.
[08/30 13:39:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:15]  --------------------------------------------------------------------------------
[08/30 13:39:15]  Iteration: 25 (3 solution, 21 counterexamples)
[08/30 13:39:16]  Generator returned sat in 0.774781 secs.
[08/30 13:39:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:39:16]  Improved gap from 0.0 to 21.875
[08/30 13:39:17]  Improved number of small numbers from 45 to 57 out of a max of 100
[08/30 13:39:17]  Verifer returned sat in 1.118814 secs.
[08/30 13:39:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -5058.720703   -5127.304241  5975.421631 -5058.720703   0.097168 -5127.304241        0.0  68.583538       68.583496
1   -5058.720703   -5058.769329  5975.421875 -5058.720703   0.048828 -5058.769329        0.0   0.048625      -31.416260
2   -5027.255535   -5027.304241  6053.546672 -5027.255535  31.513794 -5027.304241        0.0   0.048706      -21.826294
3   -4966.366741   -5005.429241  6114.484172 -4966.366741  60.937500 -5005.429241        0.0  39.062500        0.000000
4   -4944.491741   -4966.366741  6192.609172 -4944.491741  60.937500 -4966.366741        0.0  21.875000        0.000000
5   -4920.165447   -4944.491741  6268.282878 -4920.165447  46.201294 -4944.491741        0.0  24.326294        0.000000
6   -4903.085491   -4920.165447  6346.407878 -4903.085491  41.406250 -4920.165447        0.0  17.079956       -4.795044
7   -4877.533550   -4898.290447  6424.532715 -4877.533550  42.631897 -4898.290447        0.0  20.756897       -1.118267
8   -4864.252300   -4876.415283  6424.532959 -4864.252300  34.038147 -4876.415283        0.0  12.162983      -87.836772
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:39:17]  --------------------------------------------------------------------------------
[08/30 13:39:17]  Iteration: 26 (3 solution, 22 counterexamples)
[08/30 13:39:18]  Generator returned sat in 0.334944 secs.
[08/30 13:39:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:18]  Verifer returned unsat in 0.100550 secs.
[08/30 13:39:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:18]  --------------------------------------------------------------------------------
[08/30 13:39:18]  Iteration: 27 (4 solution, 22 counterexamples)
[08/30 13:39:19]  Generator returned sat in 0.168628 secs.
[08/30 13:39:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:19]  Improved gap from 0.0 to 21.875
[08/30 13:39:20]  Improved number of small numbers from 49 to 61 out of a max of 100
[08/30 13:39:20]  Verifer returned sat in 1.088139 secs.
[08/30 13:39:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -5087.569824   -5089.908611  5965.750488 -5087.569824   0.096924 -5089.908611        0.0   2.338787        2.338623
1   -5087.569824   -5087.618328  6041.585369 -5087.569824   0.048584 -5087.618328        0.0   0.048503      -21.826497
2   -5065.694744   -5065.743328  6119.710205 -5065.694744  21.923584 -5065.743328        0.0   0.048584      -21.826580
3   -5022.783611   -5022.832195  6176.799236 -5022.783611  42.959717 -5022.832195        0.0   0.048584      -21.826416
4   -4988.293987   -5000.957195  6254.924072 -4988.293987  34.538208 -5000.957195        0.0  12.663208       -9.211956
5   -4956.626628   -4978.501628  6332.468506 -4956.626628  44.330566 -4978.501628        0.0  21.875000       -0.000164
6   -4933.880779   -4955.755779  6409.722820 -4933.880779  44.620850 -4955.755779        0.0  21.875000        0.000000
7   -4921.217571   -4933.880779  6486.847900 -4921.217571  34.538208 -4933.880779        0.0  12.663208      -10.211711
8   -4899.342571   -4911.005615  6486.847900 -4899.342571  34.538208 -4911.005615        0.0  11.663044      -88.336711
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:39:20]  --------------------------------------------------------------------------------
[08/30 13:39:20]  Iteration: 28 (4 solution, 23 counterexamples)
[08/30 13:39:22]  Generator returned sat in 1.243001 secs.
[08/30 13:39:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:22]  Verifer returned unsat in 0.050459 secs.
[08/30 13:39:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:22]  --------------------------------------------------------------------------------
[08/30 13:39:22]  Iteration: 29 (5 solution, 23 counterexamples)
[08/30 13:39:22]  Generator returned sat in 0.100244 secs.
[08/30 13:39:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:22]  Verifer returned unsat in 0.090526 secs.
[08/30 13:39:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:22]  --------------------------------------------------------------------------------
[08/30 13:39:22]  Iteration: 30 (6 solution, 23 counterexamples)
[08/30 13:39:23]  Generator returned sat in 0.165229 secs.
[08/30 13:39:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:23]  Verifer returned unsat in 0.084290 secs.
[08/30 13:39:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:23]  --------------------------------------------------------------------------------
[08/30 13:39:23]  Iteration: 31 (7 solution, 23 counterexamples)
[08/30 13:39:24]  Generator returned sat in 0.168811 secs.
[08/30 13:39:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:24]  Improved gap from 6.0242919921875 to 100
[08/30 13:39:25]  Improved number of small numbers from 27 to 33 out of a max of 100
[08/30 13:39:25]  Verifer returned sat in 1.815238 secs.
[08/30 13:39:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5110.230225   -5273.343534  6563.990642 -5110.230225    0.096680 -5273.343534    0.000000  163.113309       63.113309
1   -5110.230225   -5110.278918  6563.990642 -5110.230225    0.048584 -5110.278918    0.000000    0.048694      -36.886691
2   -4973.295072   -4973.343534  6563.990642 -4973.295072  136.983846 -4973.343534    0.000000    0.048462        0.048462
3   -4576.488920   -4938.262764  6563.990642 -4576.488920  396.854614 -4938.262764   96.854614  264.919230      200.000000
4   -4476.440458   -4873.343534  6563.990642 -4476.440458  364.967692 -4873.343534   96.903076  300.000000      200.000000
5   -4476.440458   -4674.246610  6563.990642 -4476.440458  299.951538 -4674.246610   96.903076  100.903076      100.000000
6   -4276.391996   -4573.343534  6563.990642 -4276.391996  300.951538 -4573.343534   96.951538  200.000000      200.000000
7   -4144.456612   -4473.343534  6563.990642 -4144.456612  331.935384 -4473.343534  128.886922  200.000000      200.000000
8   -3979.488920   -4473.343534  6563.990642 -3979.488920  364.967692 -4473.343534  193.854614  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=794227/8192, 
.[0m
[08/30 13:39:26]  --------------------------------------------------------------------------------
[08/30 13:39:26]  Iteration: 32 (7 solution, 24 counterexamples)
[08/30 13:39:28]  Generator returned sat in 1.634851 secs.
[08/30 13:39:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:28]  Improved gap from 0.0845947265625 to 100
[08/30 13:39:29]  Improved number of small numbers from 35 to 41 out of a max of 100
[08/30 13:39:29]  Verifer returned sat in 1.324368 secs.
[08/30 13:39:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5040.940430   -5142.964698  6531.587636 -5040.940430    0.096436 -5142.964698   0.000000  102.024269      100.000099
1   -5040.940430   -5140.940528  6531.587636 -5040.940430    0.024170 -5140.940528   0.000000  100.000099        0.000099
2   -4740.916359   -4940.940528  6531.587636 -4740.916359  400.024170 -4940.940528   0.024170  200.000000      200.000000
3   -4640.892189   -4840.940528  6531.587636 -4640.892189  300.024170 -4840.940528   0.048340  200.000000      200.000000
4   -4539.868019   -4740.940528  6531.587636 -4539.868019  301.024170 -4740.940528   1.072510  200.000000      200.000000
5   -4389.355934   -4657.761777  6531.587636 -4389.355934  350.512085 -4657.761777  51.584595  216.821248      200.000000
6   -4289.331764   -4546.539555  6531.587636 -4289.331764  316.845418 -4546.539555  51.608765  205.599026      200.000000
7   -4189.307594   -4442.814927  6531.587636 -4189.307594  305.623196 -4442.814927  51.632935  201.874399      200.000000
8   -4089.307594   -4440.940430  6531.587636 -4089.307594  301.874399 -4440.940430  51.632935  299.999901      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=414191/8192, 
.[0m
[08/30 13:39:29]  --------------------------------------------------------------------------------
[08/30 13:39:29]  Iteration: 33 (7 solution, 25 counterexamples)
[08/30 13:39:31]  Generator returned sat in 1.584863 secs.
[08/30 13:39:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:39:32]  Improved gap from 0.02410888671875 to 100
[08/30 13:39:32]  Improved number of small numbers from 29 to 100 out of a max of 100
[08/30 13:39:32]  Verifer returned sat in 0.826668 secs.
[08/30 13:39:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5129.341553   -5129.365723  6520.012695 -5129.341553    0.096436 -5129.365723    0.000000    0.024170        0.023926
1   -5129.317627   -5129.365479  6520.012695 -5129.317627    0.048096 -5129.365479    0.000000    0.047852      -99.952148
2   -4929.365723   -5029.365479  6520.012695 -4929.365723  199.999756 -5029.365479    0.000000   99.999756       -0.000244
3   -4629.220947   -4904.332520  6520.012695 -4629.220947  400.144531 -4904.332520    0.144531  274.967041      200.000000
4   -4629.220947   -4729.365479  6520.012695 -4629.220947  200.072266 -4729.365479    0.144531  100.000000      100.000000
5   -4229.184814   -4729.365479  6520.012695 -4229.184814  500.036133 -4729.365479  200.180664  300.000000      200.000000
6   -4229.184814   -4629.365479  6520.012695 -4229.184814  250.018066 -4629.365479  200.180664  200.000000      100.000000
7   -4029.208740   -4429.365479  6520.012695 -4029.208740  399.976074 -4429.365479  200.180664  199.976074      199.976074
8   -3729.196777   -4429.365479  6520.012695 -3729.196777  499.988037 -4429.365479  400.168701  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638499/4096, 
.[0m
[08/30 13:39:32]  --------------------------------------------------------------------------------
[08/30 13:39:32]  Iteration: 34 (7 solution, 26 counterexamples)
[08/30 13:39:33]  Generator returned sat in 0.435355 secs.
[08/30 13:39:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:39:33]  Verifer returned unsat in 0.131568 secs.
[08/30 13:39:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:39:33]  --------------------------------------------------------------------------------
[08/30 13:39:33]  Iteration: 35 (8 solution, 26 counterexamples)
[08/30 13:39:34]  Generator returned sat in 0.324723 secs.
[08/30 13:39:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:39:36]  Improved number of small numbers from 31 to 45 out of a max of 99
[08/30 13:39:36]  Verifer returned sat in 1.337169 secs.
[08/30 13:39:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5389.313477   -5389.361816  6520.012695 -5389.313477    0.096191 -5389.361816    0.000000    0.048340        0.000146
1   -5389.313477   -5389.313622  6520.012695 -5389.313477    0.024170 -5389.313622    0.000000    0.000146      -99.999854
2   -5287.217187   -5287.241295  6520.012695 -5287.217187  102.096436 -5287.241295    0.000000    0.024109      -97.903564
3   -4889.289513   -5089.313721  6520.012695 -4889.289513  397.951782 -5089.313721    0.024109  200.000099      200.000000
4   -4889.289513   -5089.307595  6520.012695 -4889.289513  199.975891 -5089.307595    0.024109  199.993973      100.000000
5   -4689.289513   -4889.313622  6520.012695 -4689.289513  399.993973 -4889.313622    0.024109  200.000000      200.000000
6   -4291.364853   -4889.313477  6520.012695 -4291.364853  597.924660 -4889.313477  297.948769  299.999854      200.000000
7   -4291.364853   -4689.313622  6520.012695 -4291.364853  299.962330 -4689.313622  297.948769  100.000000      100.000000
8   -3841.389716   -4689.313477  6520.012695 -3841.389716  549.975138 -4689.313477  547.923906  299.999854      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=287257289/524288, 
.[0m
[08/30 13:39:36]  --------------------------------------------------------------------------------
[08/30 13:39:36]  Iteration: 36 (8 solution, 27 counterexamples)
[08/30 13:39:40]  Generator returned sat in 3.788164 secs.
[08/30 13:39:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:42]  Improved number of small numbers from 37 to 45 out of a max of 99
[08/30 13:39:42]  Verifer returned sat in 1.595504 secs.
[08/30 13:39:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4570.541504   -4670.541270  6520.012695 -4570.541504    0.096191 -4670.541270   0.000000   99.999766       99.999766
1   -4570.541504   -4670.541270  6520.012695 -4570.541504    0.012207 -4670.541270   0.000000   99.999766       -0.000234
2   -4470.541270   -4472.553293  6520.012695 -4470.541270  200.000000 -4472.553293   0.000000    2.012024        0.000000
3   -4170.529246   -4370.541270  6520.012695 -4170.529246  302.024048 -4370.541270   0.012024  200.000000      200.000000
4   -4070.517222   -4303.203928  6520.012695 -4070.517222  300.012024 -4303.203928   0.024048  232.662659      200.000000
5   -3970.505198   -4181.428822  6520.012695 -3970.505198  332.674683 -4181.428822   0.036072  210.887553      200.000000
6   -3870.493174   -4148.718068  6520.012695 -3870.493174  310.899577 -4148.718068   0.048096  278.176799      200.000000
7   -3870.493174   -3970.541270  6520.012695 -3870.493174  265.361389 -3970.541270   0.048096  100.000000      100.000000
8   -3670.481150   -3903.204102  6520.012695 -3670.481150  300.012024 -3903.204102   0.060120  232.662832      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=591/16384, 
.[0m
[08/30 13:39:42]  --------------------------------------------------------------------------------
[08/30 13:39:42]  Iteration: 37 (8 solution, 28 counterexamples)
[08/30 13:39:46]  Generator returned sat in 3.358907 secs.
[08/30 13:39:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:47]  Improved number of small numbers from 35 to 43 out of a max of 99
[08/30 13:39:47]  Verifer returned sat in 0.946002 secs.
[08/30 13:39:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5007.434082   -5007.434226  6819.868408 -5007.434082    0.095947 -5007.434226    0.000000    0.000144      -99.999856
1   -4607.386130   -4807.434326  6819.868408 -4607.386130  400.048096 -4807.434326    0.048096  200.000101      200.000000
2   -4607.338135   -4707.434226  6819.868408 -4607.338135  200.048096 -4707.434226    0.048096  100.047995      100.047995
3   -4082.806933   -4707.434226  6819.868408 -4082.806933  624.579197 -4707.434226  324.627293  300.000000      200.000000
4   -4070.517334   -4507.434226  6819.868408 -4070.517334  312.289599 -4507.434226  324.627293  112.289599      112.289599
5   -3713.372535   -4442.103329  6819.868408 -3713.372535  469.434398 -4442.103329  494.061691  234.669103      200.000000
6   -3713.324439   -4407.434226  6819.868408 -3713.324439  234.717199 -4407.434226  494.061691  200.048096      100.048096
7   -3560.296736   -4207.434226  6819.868408 -3560.296736  353.075798 -4207.434226  494.061691  153.075798      153.075798
8   -3182.758837   -4207.434082  6819.868408 -3182.758837  530.613698 -4207.434082  724.675389  299.999856      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638597/4096, 
.[0m
[08/30 13:39:47]  --------------------------------------------------------------------------------
[08/30 13:39:47]  Iteration: 38 (8 solution, 29 counterexamples)
[08/30 13:39:49]  Generator returned sat in 1.391088 secs.
[08/30 13:39:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:50]  Improved gap from 0.0 to 9.375
[08/30 13:39:50]  Improved number of small numbers from 43 to 62 out of a max of 100
[08/30 13:39:50]  Verifer returned sat in 1.254745 secs.
[08/30 13:39:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4502.098877   -4502.146973  6669.885254 -4502.098877    0.095947 -4502.146973        0.0    0.048096        0.024086
1   -4502.098877   -4502.122804  6760.510095 -4502.098877    0.024170 -4502.122804        0.0    0.023927       -9.351073
2   -4492.723818   -4492.747804  6819.868408 -4492.723818    9.398987 -4492.747804        0.0    0.023987      -40.617700
3   -4215.701320   -4355.224609  6819.868408 -4215.701320  277.046484 -4355.224609        0.0  139.523289      136.404797
4   -4215.701320   -4286.486816  6819.868408 -4215.701320  139.523242 -4286.486816        0.0   70.785496       36.404797
5   -4215.701320   -4252.105957  6883.463611 -4215.701320   70.761621 -4252.105957        0.0   36.404637        0.000000
6   -4215.701320   -4215.701320  6974.088611 -4215.701320   36.380811 -4215.701320        0.0    0.000000       -9.375000
7   -4196.510915   -4206.326320  7064.273193 -4196.510915   19.190405 -4206.326320        0.0    9.815405       -0.000012
8   -4195.731117   -4196.510742  7064.273438 -4195.731117   10.595203 -4196.510742        0.0    0.779625      -99.219971
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:39:50]  --------------------------------------------------------------------------------
[08/30 13:39:50]  Iteration: 39 (8 solution, 30 counterexamples)
[08/30 13:39:53]  Generator returned sat in 1.961863 secs.
[08/30 13:39:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:53]  Verifer returned unsat in 0.491230 secs.
[08/30 13:39:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:53]  --------------------------------------------------------------------------------
[08/30 13:39:53]  Iteration: 40 (9 solution, 30 counterexamples)
[08/30 13:39:54]  Generator returned sat in 0.148962 secs.
[08/30 13:39:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:54]  Verifer returned unsat in 0.292252 secs.
[08/30 13:39:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:54]  --------------------------------------------------------------------------------
[08/30 13:39:54]  Iteration: 41 (10 solution, 30 counterexamples)
[08/30 13:39:56]  Generator returned sat in 1.613583 secs.
[08/30 13:39:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:57]  Verifer returned unsat in 0.427792 secs.
[08/30 13:39:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:57]  --------------------------------------------------------------------------------
[08/30 13:39:57]  Iteration: 42 (11 solution, 30 counterexamples)
[08/30 13:39:58]  Generator returned sat in 0.183010 secs.
[08/30 13:39:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:39:58]  Improved number of small numbers from 43 to 99 out of a max of 99
[08/30 13:39:58]  Verifer returned sat in 0.354158 secs.
[08/30 13:39:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4754.322510   -5054.322510  7122.084717 -4754.322510    0.095947 -5054.322510    0.000000  300.000000      200.000000
1   -4754.322510   -4930.322510  7122.084717 -4754.322510  300.000000 -4930.322510    0.000000  176.000000      100.000000
2   -4754.322510   -4754.370361  7122.084717 -4754.322510    0.048096 -4754.370361    0.000000    0.047852        0.000000
3   -4527.870361   -4739.322510  7122.084717 -4527.870361  226.500000 -4739.322510    0.000000  211.452148      126.452148
4   -4354.322510   -4554.322510  7122.084717 -4354.322510  385.000000 -4554.322510    0.000000  200.000000      200.000000
5   -3980.322510   -4454.322510  7122.084717 -3980.322510  574.000000 -4454.322510  274.000000  200.000000      200.000000
6   -3980.322510   -4454.322510  7122.084717 -3980.322510  151.023926 -4454.322510  274.000000  200.000000      100.000000
7   -3885.798584   -4254.322510  7122.084717 -3885.798584  294.523926 -4254.322510  274.000000   94.523926       94.523926
8   -3534.798584   -4254.322266  7122.084717 -3534.798584  445.523926 -4254.322266  419.523926  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=859185/2048, 
.[0m
[08/30 13:39:58]  --------------------------------------------------------------------------------
[08/30 13:39:58]  Iteration: 43 (11 solution, 31 counterexamples)
[08/30 13:40:01]  Generator returned sat in 2.550004 secs.
[08/30 13:40:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:40:02]  Improved gap from 0.0 to 100
[08/30 13:40:02]  Improved number of small numbers from 56 to 66 out of a max of 100
[08/30 13:40:02]  Verifer returned sat in 0.957416 secs.
[08/30 13:40:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5358.274902   -5358.298584  7118.326416 -5358.274902    0.095703 -5358.298584   0.000000    0.023682        0.023682
1   -5358.250977   -5358.298584  7118.326416 -5358.250977    0.047607 -5358.298584   0.000000    0.047607      -99.952393
2   -4958.322510   -5192.037176  7118.326416 -4958.322510  399.976074 -5192.037176   0.000000  233.714666      199.976074
3   -4858.274658   -5068.870139  7118.326416 -4858.274658  333.762518 -5068.870139   0.023926  210.571555      200.000000
4   -4758.250732   -4981.465621  7118.326416 -4758.250732  310.595481 -4981.465621   0.047852  223.167037      200.000000
5   -4638.703547   -4949.798806  7118.326416 -4638.703547  342.714222 -4949.798806  19.595037  291.500222      200.000000
6   -4638.703547   -4758.298584  7118.326416 -4638.703547  291.476296 -4758.298584  19.595037  100.000000      100.000000
7   -4438.679621   -4658.298584  7118.326416 -4438.679621  300.023926 -4658.298584  19.618963  200.000000      200.000000
8   -4328.084140   -4658.298584  7118.326416 -4328.084140  310.595481 -4658.298584  30.214444  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=679593/22528, 
.[0m
[08/30 13:40:03]  --------------------------------------------------------------------------------
[08/30 13:40:03]  Iteration: 44 (11 solution, 32 counterexamples)
[08/30 13:40:04]  Generator returned sat in 0.981492 secs.
[08/30 13:40:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:40:04]  Improved gap from 60.772732204861114 to 100
[08/30 13:40:05]  Improved number of small numbers from 48 to 58 out of a max of 100
[08/30 13:40:05]  Verifer returned sat in 0.703125 secs.
[08/30 13:40:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5358.275146   -5558.322510  7118.326416 -5358.275146    0.095459 -5558.322510    0.000000  200.047363      100.047485
1   -5358.274902   -5358.322754  7118.326416 -5358.274902  200.047607 -5358.322754    0.000000    0.047852        0.047729
2   -5358.274902   -5358.322632  7118.326416 -5358.274902    0.047607 -5358.322632    0.000000    0.047729      -99.952271
3   -5091.021118   -5258.322632  7118.326416 -5091.021118  267.301514 -5258.322632    0.000000  167.301514       67.301514
4   -4858.370361   -5058.322632  7118.326416 -4858.370361  399.952271 -5058.322632    0.000000  199.952271      199.952271
5   -4459.394226   -4997.549900  7118.326416 -4459.394226  598.928406 -4997.549900  298.928406  239.227268      200.000000
6   -4459.394226   -4958.322632  7118.326416 -4459.394226  179.386366 -4958.322632  298.928406  200.000000      100.000000
7   -4391.314677   -4758.322632  7118.326416 -4391.314677  268.079549 -4758.322632  298.928406   68.079549       68.079549
8   -4058.274902   -4758.322510  7118.326416 -4058.274902  401.119324 -4758.322510  400.047729  299.999878      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277191/8192, 
.[0m
[08/30 13:40:05]  --------------------------------------------------------------------------------
[08/30 13:40:05]  Iteration: 45 (11 solution, 33 counterexamples)
[08/30 13:40:06]  Generator returned sat in 0.671081 secs.
[08/30 13:40:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:40:07]  Improved gap from 0.105458984375 to 1.5625
[08/30 13:40:07]  Improved number of small numbers from 56 to 69 out of a max of 100
[08/30 13:40:07]  Verifer returned sat in 0.976371 secs.
[08/30 13:40:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5061.831299   -5261.831119  6921.834904 -5061.831299    0.095459 -5261.831119   0.000000  199.999821      199.999821
1   -4961.820317   -5161.831299  6921.834904 -4961.820317  300.010802 -5161.831299   0.010802  200.000179      200.000000
2   -4961.820317   -5061.831299  6921.834904 -4961.820317    0.010986 -5061.831299   0.010802  100.000179      100.000000
3   -4961.820317   -4961.841922  6921.834904 -4961.820317    1.971193 -4961.841922   0.010802    0.010802        0.000000
4   -4959.874329   -4961.831055  7019.888916 -4959.874329    1.956790 -4961.831055   0.010802    1.945923        0.000000
5   -4959.874329   -4959.885132  7118.326172 -4959.874329    1.935185 -4959.885132   0.010802    0.000000       -1.562744
6   -4957.971552   -4957.993157  7216.434326 -4957.971552    1.902778 -4957.993157   0.010802    0.010802       -1.551812
7   -4956.128187   -4956.149792  7314.591064 -4956.128187    1.854167 -4956.149792   0.010802    0.010802       -1.551710
8   -4954.357740   -4954.587158  7314.591064 -4954.357740    1.781250 -4954.587158   0.010802    0.218616      -99.781262
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:40:08]  --------------------------------------------------------------------------------
[08/30 13:40:08]  Iteration: 46 (11 solution, 34 counterexamples)
[08/30 13:40:10]  Generator returned sat in 1.995312 secs.
[08/30 13:40:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:11]  Improved gap from 98.96429443359375 to 100
[08/30 13:40:12]  Improved number of small numbers from 35 to 47 out of a max of 100
[08/30 13:40:12]  Verifer returned sat in 1.516740 secs.
[08/30 13:40:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5795.055420   -5795.103027  7455.10658 -5795.055420    0.095459 -5795.103027    0.000000    0.047607        0.047376
1   -5795.055420   -5795.102796  7455.10658 -5795.055420    0.047363 -5795.102796    0.000000    0.047376      -99.952624
2   -5395.055189   -5595.102796  7455.10658 -5395.055189  400.047607 -5595.102796    0.047607  200.000000      200.000000
3   -5228.102845   -5595.102796  7455.10658 -5228.102845  366.952344 -5595.102796   66.999951  300.000000      200.000000
4   -5228.102845   -5395.102796  7455.10658 -5228.102845  184.476172 -5395.102796   66.999951  100.000000      100.000000
5   -4834.864759   -5395.102783  7455.10658 -4834.864759  493.238086 -5395.102783  260.238037  299.999987      200.000000
6   -4834.864759   -5204.102796  7455.10658 -4834.864759  247.619043 -5204.102796  260.238037  109.000000      100.000000
7   -4428.055238   -5154.054932  7455.10658 -4428.055238  515.809521 -5154.054932  467.047559  258.952135      200.000000
8   -4428.055238   -5095.102783  7455.10658 -4428.055238  258.904761 -5095.102783  467.047559  199.999987      100.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638595/4096, 
.[0m
[08/30 13:40:12]  --------------------------------------------------------------------------------
[08/30 13:40:12]  Iteration: 47 (11 solution, 35 counterexamples)
[08/30 13:40:18]  Generator returned sat in 5.304702 secs.
[08/30 13:40:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:18]  Verifer returned unsat in 0.132783 secs.
[08/30 13:40:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:18]  --------------------------------------------------------------------------------
[08/30 13:40:18]  Iteration: 48 (12 solution, 35 counterexamples)
[08/30 13:40:19]  Generator returned sat in 0.659465 secs.
[08/30 13:40:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:20]  Improved number of small numbers from 30 to 44 out of a max of 99
[08/30 13:40:20]  Verifer returned sat in 0.856719 secs.
[08/30 13:40:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5986.368896   -6286.368652  7391.884331 -5986.368896    0.095215 -6286.368652    0.000000  299.999756      199.999935
1   -5986.368896   -6186.368652  7391.884331 -5986.368896    0.047607 -6186.368652    0.000000  199.999756       99.999935
2   -5839.603760   -6086.368832  7391.884331 -5839.603760  346.764893 -6086.368832    0.000000  246.765072      146.765072
3   -5839.556137   -5957.635482  7391.884331 -5839.556137  246.812695 -5957.635482    0.000000  118.079346       46.812695
4   -5586.416439   -5786.368832  7391.884331 -5586.416439  371.219043 -5786.368832    0.000000  199.952393      199.952393
5   -5228.540268   -5697.507460  7391.884331 -5228.540268  557.828564 -5697.507460  257.828564  211.138628      200.000000
6   -5228.540268   -5686.368832  7391.884331 -5228.540268  195.430686 -5686.368832  257.828564  200.000000      100.000000
7   -5134.394239   -5486.368832  7391.884331 -5134.394239  294.146029 -5486.368832  257.828564   94.146029       94.146029
8   -4786.321225   -5486.368652  7391.884331 -4786.321225  442.219043 -5486.368652  400.047607  299.999820      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638595/4096, 
.[0m
[08/30 13:40:20]  --------------------------------------------------------------------------------
[08/30 13:40:20]  Iteration: 49 (12 solution, 36 counterexamples)
[08/30 13:40:23]  Generator returned sat in 2.474298 secs.
[08/30 13:40:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:24]  Improved gap from 0.02374267578125 to 100
[08/30 13:40:24]  Improved number of small numbers from 48 to 74 out of a max of 100
[08/30 13:40:24]  Verifer returned sat in 0.990951 secs.
[08/30 13:40:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -6252.099609   -6428.587646  7534.103268 -6252.099609    0.094971 -6428.587646    0.000000  176.488037       76.488159
1   -6252.052002   -6252.099609  7534.103268 -6252.052002  176.535645 -6252.099609    0.000000    0.047607      -23.464233
2   -6128.587646   -6228.587769  7534.103268 -6128.587646  123.511963 -6228.587769    0.000000  100.000122        0.000122
3   -6128.587646   -6128.587646  7534.103268 -6128.587646   99.952637 -6128.587646    0.000000    0.000000      -99.999878
4   -5777.611328   -6028.587769  7534.103268 -5777.611328  350.976318 -6028.587769    0.000000  250.976440      150.976440
5   -5628.587769   -5828.587769  7534.103268 -5628.587769  400.000000 -5828.587769    0.000000  200.000000      200.000000
6   -5227.587769   -5729.135254  7534.103268 -5227.587769  601.000000 -5729.135254  301.000000  200.547485      200.000000
7   -5127.635254   -5704.689026  7534.103268 -5127.635254  300.500000 -5704.689026  301.000000  276.053772      199.952515
8   -4928.540283   -5628.587646  7534.103268 -4928.540283  475.148743 -5628.587646  400.047485  299.999878      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277189/8192, 
.[0m
[08/30 13:40:25]  --------------------------------------------------------------------------------
[08/30 13:40:25]  Iteration: 50 (12 solution, 37 counterexamples)
[08/30 13:40:26]  Generator returned sat in 1.093967 secs.
[08/30 13:40:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:27]  Improved number of small numbers from 53 to 73 out of a max of 99
[08/30 13:40:27]  Verifer returned sat in 0.708965 secs.
[08/30 13:40:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -5779.452393   -5979.476074  7399.479408 -5779.452393    0.094727 -5979.476074    0.000000  200.023682      100.023697
1   -5779.452393   -5779.476318  7399.479408 -5779.452393  200.000000 -5779.476318    0.000000    0.023926        0.023697
2   -5779.428955   -5779.476089  7399.479408 -5779.428955    0.047363 -5779.476089    0.000000    0.047134      -99.952866
3   -5536.243342   -5679.476074  7399.479408 -5536.243342  243.232747 -5679.476074    0.000000  143.232732       43.232747
4   -5313.626953   -5479.476089  7399.479408 -5313.626953  365.849121 -5479.476089    0.000000  165.849136      165.849136
5   -4929.702408   -5379.476089  7399.479408 -4929.702408  549.773682 -5379.476089  249.773682  200.000000      200.000000
6   -4929.702408   -5379.476074  7399.479408 -4929.702408  199.000000 -5379.476074  249.773682  199.999985      100.000000
7   -4830.202393   -5179.476089  7399.479408 -4830.202393  299.500000 -5179.476089  249.773682   99.500015       99.500015
8   -4479.452408   -5179.476074  7399.479408 -4479.452408  450.250000 -5179.476074  400.023682  299.999985      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638497/4096, 
.[0m
[08/30 13:40:27]  --------------------------------------------------------------------------------
[08/30 13:40:27]  Iteration: 51 (12 solution, 38 counterexamples)
[08/30 13:40:33]  Generator returned sat in 5.425932 secs.
[08/30 13:40:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:40:33]  Improved gap from 0.0472412109375 to 100
[08/30 13:40:34]  Improved number of small numbers from 20 to 34 out of a max of 100
[08/30 13:40:34]  Verifer returned sat in 0.969395 secs.
[08/30 13:40:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -6794.289795   -6794.290039  8314.293287 -6794.289795    0.094482 -6794.290039    0.000000    0.000244        0.000173
1   -6794.242920   -6794.289968  8314.293287 -6794.242920    0.047119 -6794.289968    0.000000    0.047048      -99.952952
2   -6394.242727   -6660.877900  8314.293287 -6394.242727  400.047241 -6660.877900    0.047241  266.587931      200.000000
3   -6394.195486   -6594.289795  8314.293287 -6394.195486  266.635173 -6594.289795    0.047241  200.047068      100.047241
4   -6194.289795   -6394.289968  8314.293287 -6194.289795  399.952759 -6394.289968    0.047241  199.952932      199.952932
5   -5794.313589   -6303.217364  8314.293287 -5794.313589  599.929138 -6303.217364  299.976379  208.927395      200.000000
6   -5794.313589   -6294.289968  8314.293287 -5794.313589  177.830268 -6294.289968  299.976379  200.000000      100.000000
7   -5727.568187   -6094.289968  8314.293287 -5727.568187  266.745402 -6094.289968  299.976379   66.745402       66.745402
8   -5394.195486   -6094.289795  8314.293287 -5394.195486  400.118103 -6094.289795  400.094482  299.999827      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277187/8192, 
.[0m
[08/30 13:40:35]  --------------------------------------------------------------------------------
[08/30 13:40:35]  Iteration: 52 (12 solution, 39 counterexamples)
[08/30 13:40:36]  Generator returned unsat in 0.742656 secs.
[08/30 13:40:36]  [96mNo more solutions found[0m
[08/30 13:40:36]  Final solutions:
[08/30 13:40:36]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:40:36]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:40:36]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:40:36]  Took 116.752630 secs.
