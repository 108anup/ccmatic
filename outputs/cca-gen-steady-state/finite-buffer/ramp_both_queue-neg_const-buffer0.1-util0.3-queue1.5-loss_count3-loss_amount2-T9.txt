[08/30 13:04:01]  --------------------------------------------------------------------------------
[08/30 13:04:01]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 13:04:01]  Generator returned sat in 0.005577 secs.
[08/30 13:04:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:01]  Improved gap from 0.0 to 100
[08/30 13:04:01]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:04:01]  Verifer returned sat in 0.195583 secs.
[08/30 13:04:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0        -2368.3        -2368.3    2354.3      -2368.3      0.10      -2368.3        0.0      0.0           -14.0
1        -2254.3        -2254.3    2354.3      -2254.3    114.00      -2254.3        0.0      0.0             0.0
2        -2134.4        -2154.3    2354.3      -2134.4    119.90      -2154.3        0.0     19.9            19.9
3        -2134.4        -2154.3    2354.3      -2134.4      2.55      -2154.3        0.0     19.9           -80.1
4        -1934.2        -1966.3    2354.3      -1934.2    220.10      -1966.3        0.1     32.0            20.0
5         -949.0        -1901.3    2354.3       -949.0   1017.20      -1901.3      885.3     67.0            20.0
6         1525.4        -1854.3    2354.3       1525.4   2541.40      -1854.3     3259.7    120.0            20.0
7         7089.2        -1754.3    2354.3       7089.2   5683.80      -1754.3     8723.5    120.0            20.0
8        18761.8        -1654.3    2354.3      18761.8  11792.60      -1654.3    20296.1    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=20296, 
.[0m
[08/30 13:04:01]  --------------------------------------------------------------------------------
[08/30 13:04:01]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 13:04:02]  Generator returned sat in 0.019448 secs.
[08/30 13:04:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:02]  Improved gap from 0.0 to 100
[08/30 13:04:02]  Improved number of small numbers from 69 to 69 out of a max of 100
[08/30 13:04:02]  Verifer returned sat in 0.572903 secs.
[08/30 13:04:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t   arrival_0,t      cwnd_0,t  service_0,t     losts_0,t  queue_t  bottle_queue_t
0   -2354.300000        -2354.3    2354.3  -2354.300000      0.100098      -2354.3      0.000000      0.0             0.0
1   -2254.300000        -2254.3    2354.3  -2254.300000    100.000000      -2254.3      0.000000      0.0             0.0
2   -2154.300000        -2154.3    2354.3  -2154.300000    100.000000      -2154.3      0.000000      0.0             0.0
3   -2034.250073        -2154.3    2354.3  -2034.250073    120.049927      -2154.3      0.049927    120.0            20.0
4   -1615.150220        -1966.3    2354.3  -1615.150220    539.099854      -1966.3    319.149780     32.0            20.0
5    -137.950513        -1866.3    2354.3   -137.950513   1509.199707      -1866.3   1696.349487     32.0            20.0
6    3279.448901        -1754.3    2354.3   3279.448901   3449.399414      -1754.3   5013.748901     20.0            20.0
7   10757.247729        -1654.3    2354.3  10757.247729   7497.798828      -1654.3  12391.547729     20.0            20.0
8   26199.845386        -1654.3    2354.3  26199.845386  15462.597656      -1654.3  27734.145386    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=56145911/2048, 
.[0m
[08/30 13:04:02]  --------------------------------------------------------------------------------
[08/30 13:04:02]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 13:04:02]  Generator returned sat in 0.044629 secs.
[08/30 13:04:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:03]  Improved gap from 0.000625 to 100
[08/30 13:04:03]  Improved number of small numbers from 54 to 62 out of a max of 100
[08/30 13:04:03]  Verifer returned sat in 0.741564 secs.
[08/30 13:04:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2445.875000   -2445.877729  2860.151948 -2445.875000    0.099609 -2445.877729    0.00000    0.002729        0.000229
1   -2445.875000   -2445.875229  2860.151948 -2445.875000    0.001221 -2445.875229    0.00000    0.000229      -99.999771
2   -2245.875229   -2311.873146  2860.151948 -2245.875229  200.000000 -2311.873146    0.00000   65.997917        0.000000
3   -2245.873979   -2245.875229  2860.151948 -2245.873979   65.999167 -2245.875229    0.00000    0.001250      -99.998750
4   -2045.875229   -2145.875229  2860.151948 -2045.875229  200.000000 -2145.875229    0.00000  100.000000        0.000000
5   -1694.875229   -1945.875244  2860.151948 -1694.875229  451.000000 -1945.875244  231.00000   20.000015       20.000000
6   -1694.875229   -1942.570229  2860.151948 -1694.875229    0.010000 -1942.570229  231.00000   16.695000      -80.000000
7   -1558.902729   -1839.875229  2860.151948 -1558.902729  152.667500 -1839.875229  231.00000   49.972500      -44.027500
8   -1225.873979   -1745.875000  2860.151948 -1225.873979  383.001250 -1745.875000  400.00125  119.999771       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=320001/800, 
.[0m
[08/30 13:04:04]  --------------------------------------------------------------------------------
[08/30 13:04:04]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 13:04:04]  Generator returned sat in 0.115019 secs.
[08/30 13:04:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:04]  Improved gap from 0.000625 to 100
[08/30 13:04:04]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 13:04:04]  Verifer returned sat in 0.280886 secs.
[08/30 13:04:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3073.705811   -3093.706055  3507.982666 -3073.705811    0.099365 -3093.706055    0.000000   20.000244       20.000000
1   -3073.705811   -3093.705811  3507.982666 -3073.705811    0.049805 -3093.705811    0.000000   20.000000      -80.000000
2   -2993.656006   -2993.705811  3507.982666 -2993.656006  100.049805 -2993.705811    0.000000    0.049805      -99.950195
3   -2773.656006   -2893.705811  3507.982666 -2773.656006  220.049805 -2893.705811    0.049805  120.000000       20.000000
4   -2773.656006   -2793.705811  3507.982666 -2773.656006    1.000000 -2793.705811    0.049805   20.000000      -80.000000
5   -2194.656006   -2693.705811  3507.982666 -2194.656006  599.000000 -2693.705811  379.049805  120.000000       20.000000
6   -2194.656006   -2573.755615  3507.982666 -2194.656006    1.000000 -2573.755615  379.049805    0.049805      -80.000000
7   -1555.805420   -2493.705811  3507.982666 -1555.805420  638.900391 -2493.705811  817.900391  120.000000       20.000000
8   -1555.805420   -2393.705811  3507.982666 -1555.805420    1.000000 -2393.705811  817.900391   20.000000      -80.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=837479/1024, 
.[0m
[08/30 13:04:04]  --------------------------------------------------------------------------------
[08/30 13:04:04]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 13:04:04]  Generator returned sat in 0.127193 secs.
[08/30 13:04:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:05]  Improved gap from 19.02484130859375 to 100
[08/30 13:04:05]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/30 13:04:05]  Verifer returned sat in 0.352625 secs.
[08/30 13:04:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3073.705811   -3093.705811  3507.982422 -3073.705811    0.099121 -3093.705811    0.000000   20.000000       20.000000
1   -2973.680908   -2993.705811  3507.982422 -2973.680908  120.024902 -2993.705811    0.024902   20.000000       20.000000
2   -2912.681152   -2993.705811  3507.982422 -2912.681152   80.999756 -2993.705811    0.024902   80.999756      -19.000244
3   -2773.656250   -2793.705811  3507.982422 -2773.656250  220.024658 -2793.705811    0.049561   20.000000       20.000000
4   -2493.656250   -2699.705811  3507.982422 -2493.656250  300.000000 -2699.705811  180.049561   26.000000       20.000000
5   -2225.656250   -2593.705811  3507.982422 -2225.656250  294.000000 -2593.705811  348.049561   20.000000       20.000000
6   -1845.656250   -2496.705811  3507.982422 -1845.656250  400.000000 -2496.705811  628.049561   23.000000       20.000000
7   -1571.656250   -2393.705811  3507.982422 -1571.656250  297.000000 -2393.705811  802.049561   20.000000       20.000000
8   -1285.656250   -2393.705811  3507.982422 -1285.656250  306.000000 -2393.705811  988.049561  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=808, 
.[0m
[08/30 13:04:05]  --------------------------------------------------------------------------------
[08/30 13:04:05]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 13:04:05]  Generator returned sat in 0.133472 secs.
[08/30 13:04:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:06]  Improved gap from 0.0025 to 1.5625
[08/30 13:04:06]  Improved number of small numbers from 50 to 100 out of a max of 100
[08/30 13:04:06]  Verifer returned sat in 0.548895 secs.
[08/30 13:04:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t
0   -3194.579346   -3214.579346  3231.520020 -3194.579346    0.098877 -3214.579346    0.000000  20.000000       20.000000
1   -2914.554688   -3114.579346  3231.520020 -2914.554688  300.024658 -3114.579346  180.024658  20.000000       20.000000
2   -2814.529785   -3014.579346  3231.520020 -2814.529785  120.024902 -3014.579346  180.049561  20.000000       20.000000
3   -2814.529785   -3014.579102  3311.520020 -2814.529785    2.000000 -3014.579102  180.049561  19.999756        0.000000
4   -2814.529785   -2994.579346  3409.544922 -2814.529785    2.000000 -2994.579346  180.049561   0.000000       -1.975098
5   -2812.529785   -2992.604004  3507.982178 -2812.529785    2.000000 -2992.604004  180.049561   0.024658       -1.537842
6   -2810.554443   -2990.628906  3606.007080 -2810.554443    2.000000 -2990.628906  180.049561   0.024902       -1.537598
7   -2808.579346   -2988.628906  3704.007080 -2808.579346    2.000000 -2988.628906  180.049561   0.000000       -1.562500
8   -2806.579346   -2986.628906  3801.594238 -2806.579346    2.000000 -2986.628906  180.049561   0.000000       -1.975342
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:06]  --------------------------------------------------------------------------------
[08/30 13:04:06]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 13:04:06]  Generator returned sat in 0.021935 secs.
[08/30 13:04:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:06]  Improved gap from 0.0025 to 0
[08/30 13:04:07]  Improved number of small numbers from 52 to 81 out of a max of 100
[08/30 13:04:07]  Verifer returned sat in 0.549984 secs.
[08/30 13:04:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t
0   -3392.592041   -3412.591797  3429.532471 -3392.592041    0.098633 -3412.591797    0.000000  19.999756       19.999756
1   -3112.544922   -3312.591797  3429.532471 -3112.544922  300.046875 -3312.591797  180.046875  20.000000       20.000000
2   -3012.542236   -3212.591797  3429.532471 -3012.542236  120.002686 -3212.591797  180.049561  20.000000       20.000000
3   -2932.532471   -3112.591846  3429.532471 -2932.532471  100.009766 -3112.591846  180.049561   0.009814        0.009766
4   -2932.532285   -3112.589346  3529.522520 -2932.532285    0.010000 -3112.589346  180.049561   0.007500        0.000000
5   -2932.529785   -3112.581846  3629.515137 -2932.529785    0.010000 -3112.581846  180.049561   0.002500       -0.004883
6   -2932.522285   -3112.574346  3729.512451 -2932.522285    0.010000 -3112.574346  180.049561   0.002500       -0.000068
7   -2932.514785   -3112.566846  3829.504883 -2932.514785    0.010000 -3112.566846  180.049561   0.002500       -0.000137
8   -2932.507285   -3112.564209  3829.505127 -2932.507285    0.010000 -3112.564209  180.049561   0.007363      -99.992393
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:07]  --------------------------------------------------------------------------------
[08/30 13:04:07]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 13:04:07]  Generator returned sat in 0.042519 secs.
[08/30 13:04:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:08]  Improved gap from 0.04931640625 to 6.25
[08/30 13:04:08]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 13:04:08]  Verifer returned sat in 0.631465 secs.
[08/30 13:04:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3468.409668   -3488.409668  3429.532227 -3468.409668    0.098389 -3488.409668   0.000000   20.000000       20.000000
1   -3368.360352   -3488.409668  3429.532227 -3368.360352  120.049316 -3488.409668   0.049316  120.000000       20.000000
2   -3288.360596   -3369.988037  3429.532227 -3288.360596  199.999756 -3369.988037   0.049316   81.578125       -0.000244
3   -3168.360596   -3188.409668  3429.532227 -3168.360596  201.578125 -3188.409668   0.049316   19.999756       19.999756
4   -3087.571289   -3138.064453  3429.532227 -3087.571289  100.789062 -3138.064453   0.049316   50.443848        0.789062
5   -3087.571289   -3088.409668  3523.282227 -3087.571289   50.394531 -3088.409668   0.049316    0.789062       -5.460938
6   -3063.163086   -3063.261963  3598.134521 -3063.163086   25.197266 -3063.261963   0.049316    0.049561       -6.200439
7   -3050.614014   -3057.011719  3691.785889 -3050.614014   12.598633 -3057.011719   0.049316    6.348389        0.000000
8   -3050.614014   -3050.663330  3785.535645 -3050.614014    6.299316 -3050.663330   0.049316    0.000000       -6.250244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:08]  --------------------------------------------------------------------------------
[08/30 13:04:08]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 13:04:08]  Generator returned sat in 0.031457 secs.
[08/30 13:04:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:09]  Improved gap from 4.848388671875 to 4.6875
[08/30 13:04:09]  Improved number of small numbers from 28 to 100 out of a max of 100
[08/30 13:04:09]  Verifer returned sat in 0.595749 secs.
[08/30 13:04:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3402.471680   -3522.471436  3363.593994 -3402.471680    0.098145 -3522.471436   0.000000  119.999756       20.000000
1   -3302.422363   -3422.471680  3363.593994 -3302.422363  220.049072 -3422.471680   0.049316  120.000000       20.000000
2   -3202.471680   -3314.520752  3363.593994 -3202.471680  219.950684 -3314.520752   0.049316  111.999756       19.950684
3   -3102.471436   -3123.399658  3363.593994 -3102.471436  212.000000 -3123.399658   0.049316   20.878906       19.950928
4   -3018.350342   -3069.948730  3363.593994 -3018.350342  105.000000 -3069.948730   0.049316   51.549072        4.072021
5   -3018.350342   -3022.471680  3458.906494 -3018.350342   51.500000 -3022.471680   0.049316    4.072021       -0.615479
6   -2997.672363   -3009.145508  3538.843994 -2997.672363   24.750000 -3009.145508   0.049316   11.423828        0.000000
7   -2997.672363   -2997.721680  3634.156494 -2997.672363   11.375000 -2997.721680   0.049316    0.000000       -4.687500
8   -2992.984863   -2993.034180  3729.468994 -2992.984863    4.687500 -2993.034180   0.049316    0.000000       -4.687500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:09]  --------------------------------------------------------------------------------
[08/30 13:04:09]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 13:04:10]  Generator returned sat in 0.038814 secs.
[08/30 13:04:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:10]  Improved gap from 0.0 to 21.875
[08/30 13:04:10]  Improved number of small numbers from 72 to 100 out of a max of 100
[08/30 13:04:10]  Verifer returned sat in 0.384210 secs.
[08/30 13:04:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3405.045166   -3525.045166  3363.593750 -3405.045166    0.098145 -3525.045166   0.000000  120.000000       20.000000
1   -3305.020752   -3325.045410  3363.593750 -3305.020752  220.024414 -3325.045410   0.024414   20.000244       20.000000
2   -3204.996338   -3231.945068  3363.593750 -3204.996338  120.024658 -3231.945068   0.048828   26.899902       20.000000
3   -3204.996338   -3205.069824  3421.743408 -3204.996338   26.875000 -3205.069824   0.048828    0.024658      -21.850342
4   -3179.145996   -3183.194824  3499.868408 -3179.145996   25.875000 -3183.194824   0.048828    4.000000      -17.875000
5   -3158.270996   -3161.319824  3576.493652 -3158.270996   24.875000 -3161.319824   0.048828    3.000000      -20.374756
6   -3137.395996   -3137.944824  3654.618408 -3137.395996   23.875000 -3137.944824   0.048828    0.500000      -21.375000
7   -3115.020996   -3115.094238  3731.767822 -3115.020996   22.875000 -3115.094238   0.048828    0.024414      -21.850586
8   -3093.170410   -3093.219238  3731.767822 -3093.170410   21.875000 -3093.219238   0.048828    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:10]  --------------------------------------------------------------------------------
[08/30 13:04:10]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 13:04:10]  Generator returned sat in 0.038959 secs.
[08/30 13:04:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:11]  Improved gap from 0.01220703125 to 0
[08/30 13:04:11]  Improved number of small numbers from 33 to 53 out of a max of 100
[08/30 13:04:11]  Verifer returned sat in 1.017856 secs.
[08/30 13:04:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3404.143311   -3504.189941  3342.738525 -3404.143311    0.097900 -3504.189941   0.046328  100.000303        0.000303
1   -3404.143311   -3404.189824  3342.738525 -3404.143311    0.002686 -3404.189824   0.046328    0.000186      -99.999697
2   -3184.145996   -3204.189941  3342.738525 -3184.145996  219.997500 -3204.189941   0.046328   19.997617       19.997617
3   -3184.145996   -3184.194824  3421.870117 -3184.145996    0.937969 -3184.194824   0.046328    0.002500       -0.870791
4   -3183.272559   -3183.321387  3521.120605 -3183.272559    0.875938 -3183.321387   0.046328    0.002500       -0.746865
5   -3182.523184   -3182.572012  3621.117920 -3182.523184    0.751875 -3182.572012   0.046328    0.002500       -0.000176
6   -3182.021934   -3182.080566  3720.616846 -3182.021934    0.503750 -3182.080566   0.046328    0.012305        0.000000
7   -3182.021934   -3182.068262  3820.616699 -3182.021934    0.010000 -3182.068262   0.046328    0.000000       -0.000146
8   -3182.011934   -3182.060547  3820.616699 -3182.011934    0.010000 -3182.060547   0.046328    0.002285      -99.990146
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:12]  --------------------------------------------------------------------------------
[08/30 13:04:12]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 13:04:12]  Generator returned sat in 0.113523 secs.
[08/30 13:04:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:13]  Improved gap from 0.0 to 100
[08/30 13:04:14]  Improved number of small numbers from 63 to 71 out of a max of 100
[08/30 13:04:14]  Verifer returned sat in 1.770801 secs.
[08/30 13:04:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3851.527832   -3871.527663  3820.616699 -3851.527832    0.097900 -3871.527663    0.00000   19.999831       19.999831
1   -3751.526413   -3771.527663  3820.616699 -3751.526413  120.001250 -3771.527663    0.00125   20.000000       20.000000
2   -3751.526413   -3771.527663  3820.616699 -3751.526413    0.001465 -3771.527663    0.00125   20.000000      -80.000000
3   -3551.525163   -3671.527588  3820.616699 -3551.525163  220.001250 -3671.527588    0.00250  119.999925       20.000000
4   -3551.525163   -3571.527663  3820.616699 -3551.525163    0.010000 -3571.527663    0.00250   20.000000      -80.000000
5   -3370.510163   -3471.527663  3820.616699 -3370.510163  201.015000 -3471.527663    0.00250  101.015000        1.015000
6   -2869.002663   -3371.527588  3820.616699 -2869.002663  602.522500 -3371.527588  382.52500  119.999925       20.000000
7   -2869.002663   -3252.527663  3820.616699 -2869.002663    0.010000 -3252.527663  382.52500    1.000000      -80.000000
8   -2549.987663   -3171.527588  3820.616699 -2549.987663  320.015000 -3171.527588  501.54000  119.999925       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=40123/80, 
.[0m
[08/30 13:04:14]  --------------------------------------------------------------------------------
[08/30 13:04:14]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 13:04:14]  Generator returned sat in 0.162262 secs.
[08/30 13:04:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:15]  Verifer returned unsat in 0.096077 secs.
[08/30 13:04:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:15]  --------------------------------------------------------------------------------
[08/30 13:04:15]  Iteration: 14 (1 solution, 12 counterexamples)
[08/30 13:04:15]  Generator returned sat in 0.032317 secs.
[08/30 13:04:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:15]  Verifer returned unsat in 0.180817 secs.
[08/30 13:04:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:15]  --------------------------------------------------------------------------------
[08/30 13:04:15]  Iteration: 15 (2 solution, 12 counterexamples)
[08/30 13:04:15]  Generator returned sat in 0.085100 secs.
[08/30 13:04:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:16]  Verifer returned unsat in 0.277678 secs.
[08/30 13:04:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:16]  --------------------------------------------------------------------------------
[08/30 13:04:16]  Iteration: 16 (3 solution, 12 counterexamples)
[08/30 13:04:16]  Generator returned sat in 0.023574 secs.
[08/30 13:04:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:16]  Verifer returned unsat in 0.217091 secs.
[08/30 13:04:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:16]  --------------------------------------------------------------------------------
[08/30 13:04:16]  Iteration: 17 (4 solution, 12 counterexamples)
[08/30 13:04:17]  Generator returned sat in 0.266203 secs.
[08/30 13:04:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:17]  Improved number of small numbers from 39 to 99 out of a max of 99
[08/30 13:04:17]  Verifer returned sat in 0.470669 secs.
[08/30 13:04:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4850.615479   -4970.615479  3820.616455 -4850.615479    0.097656 -4970.615479    0.000000  120.000000       20.000000
1   -4850.615479   -4870.615479  3820.616455 -4850.615479    0.049072 -4870.615479    0.000000   20.000000      -80.000000
2   -4650.664307   -4670.615723  3820.616455 -4650.664307  219.951172 -4670.615723    0.000000   19.951416       19.951172
3   -4550.566650   -4570.615479  3820.616455 -4550.566650  120.049072 -4570.615479    0.048828   20.000000       20.000000
4   -4550.566650   -4550.664307  3820.616455 -4550.566650    1.000000 -4550.664307    0.048828    0.048828      -80.000000
5   -4229.164307   -4370.615723  3820.616455 -4229.164307  321.451172 -4370.615723  121.451172   20.000244       20.000000
6   -4229.164307   -4370.615479  3820.616455 -4229.164307    1.000000 -4370.615479  121.451172   20.000000      -80.000000
7   -4047.664307   -4212.191650  3820.616455 -4047.664307  201.500000 -4212.191650  121.451172   43.076172        1.500000
8   -3650.517822   -4170.615479  3820.616455 -3650.517822  440.222656 -4170.615479  400.097656  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204825/512, 
.[0m
[08/30 13:04:17]  --------------------------------------------------------------------------------
[08/30 13:04:17]  Iteration: 18 (4 solution, 13 counterexamples)
[08/30 13:04:18]  Generator returned sat in 0.122083 secs.
[08/30 13:04:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:18]  Improved number of small numbers from 41 to 51 out of a max of 99
[08/30 13:04:18]  Verifer returned sat in 0.739507 secs.
[08/30 13:04:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4881.504883   -4981.529541  3820.616455 -4881.504883    0.097656 -4981.529541    0.000000  100.024658        0.024719
1   -4881.504883   -4881.529602  3820.616455 -4881.504883    0.049072 -4881.529602    0.000000    0.024719      -99.975281
2   -4661.554138   -4681.529602  3820.616455 -4661.554138  219.975464 -4681.529602    0.000000   19.975464       19.975464
3   -4443.578674   -4681.529541  3820.616455 -4443.578674  237.950928 -4681.529541  117.950928  119.999939       20.000000
4   -4443.578674   -4561.554138  3820.616455 -4443.578674  119.975464 -4561.554138  117.950928    0.024536      -80.000000
5   -4062.640015   -4452.986664  3820.616455 -4062.640015  380.963196 -4452.986664  298.889587   91.457062       20.000000
6   -3962.615479   -4281.529602  3820.616455 -3962.615479  191.481598 -4281.529602  298.914124   20.000000       20.000000
7   -3885.874680   -4184.813339  3820.616455 -3885.874680   96.740799 -4184.813339  298.914124    0.024536       -3.259201
8   -3459.788017   -4181.529541  3820.616455 -3459.788017  426.111198 -4181.529541  601.741585  119.999939       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=63411409/131072, 
.[0m
[08/30 13:04:19]  --------------------------------------------------------------------------------
[08/30 13:04:19]  Iteration: 19 (4 solution, 14 counterexamples)
[08/30 13:04:19]  Generator returned sat in 0.510449 secs.
[08/30 13:04:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:20]  Improved gap from 0.00125 to 76.5625
[08/30 13:04:20]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 13:04:20]  Verifer returned sat in 0.743265 secs.
[08/30 13:04:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4479.176270   -4520.173584  3815.744141 -4479.176270    0.097656 -4520.173584    0.000000   40.997314       20.000000
1   -4399.173584   -4418.173828  3815.744141 -4399.173584  121.000000 -4418.173828    0.000000   19.000244        0.002686
2   -4399.173584   -4399.176270  3815.744141 -4399.173584   18.997500 -4399.176270    0.000000    0.002686      -99.997314
3   -4299.173584   -4299.176270  3815.744141 -4299.173584  100.002686 -4299.176270    0.000000    0.002686      -99.997314
4   -4079.178955   -4198.176270  3815.744141 -4079.178955  219.997314 -4198.176270    0.000000  118.997314       19.997314
5   -3979.178711   -3999.176270  3815.744141 -3979.178711  218.997559 -3999.176270    0.000000   19.997559       19.997559
6   -3600.176270   -3999.176025  3815.744141 -3600.176270  399.000000 -3999.176025  279.000000  119.999756       20.000000
7   -3600.176270   -3879.178711  3818.751465 -3600.176270    0.010000 -3879.178711  279.000000    0.002441      -76.992676
8   -3282.181152   -3802.183594  3818.751465 -3282.181152  317.997559 -3802.183594  400.002441  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819205/2048, 
.[0m
[08/30 13:04:20]  --------------------------------------------------------------------------------
[08/30 13:04:20]  Iteration: 20 (4 solution, 15 counterexamples)
[08/30 13:04:21]  Generator returned sat in 0.570585 secs.
[08/30 13:04:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:21]  Improved gap from 0.048828125 to 100
[08/30 13:04:22]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:04:22]  Verifer returned sat in 0.228435 secs.
[08/30 13:04:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4402.051514   -4522.051514  3836.790283 -4402.051514    0.097656 -4522.051514    0.000000  120.000000       20.000000
1   -4322.002686   -4322.051514  3836.790283 -4322.002686  200.048828 -4322.051514    0.000000    0.048828        0.048828
2   -4202.100342   -4222.051514  3836.790283 -4202.100342  119.951172 -4222.051514    0.000000   19.951172       19.951172
3   -4026.051514   -4122.051514  3836.790283 -4026.051514  196.000000 -4122.051514   76.000000   20.000000       20.000000
4   -3947.051514   -4122.051514  3836.790283 -3947.051514   99.000000 -4122.051514   76.000000   99.000000       -1.000000
5   -3846.051514   -3922.051514  3836.790283 -3846.051514  200.000000 -3922.051514   76.000000    0.000000        0.000000
6   -3495.051514   -3898.551514  3836.790283 -3495.051514  351.000000 -3898.551514  307.000000   96.500000       20.000000
7   -3415.051514   -3722.100342  3836.790283 -3415.051514  176.500000 -3722.100342  307.000000    0.048828        0.000000
8   -3037.624756   -3722.051514  3836.790283 -3037.624756  377.475586 -3722.051514  564.426758  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=500149/1024, 
.[0m
[08/30 13:04:22]  --------------------------------------------------------------------------------
[08/30 13:04:22]  Iteration: 21 (4 solution, 16 counterexamples)
[08/30 13:04:22]  Generator returned sat in 0.188772 secs.
[08/30 13:04:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:22]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 13:04:22]  Verifer returned sat in 0.154164 secs.
[08/30 13:04:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4402.051758   -4522.051514  3836.790283 -4402.051758    0.097412 -4522.051514    0.000000  119.999756       20.000000
1   -4322.002930   -4324.051758  3836.790283 -4322.002930  200.048584 -4324.051758    0.000000    2.048828        0.048828
2   -4202.100586   -4222.051758  3836.790283 -4202.100586  121.951172 -4222.051758    0.000000   19.951172       19.951172
3   -4026.051758   -4122.051758  3836.790283 -4026.051758  196.000000 -4122.051758   76.000000   20.000000       20.000000
4   -3947.051758   -4122.051758  3836.790283 -3947.051758   99.000000 -4122.051758   76.000000   99.000000       -1.000000
5   -3846.051758   -3922.051758  3836.790283 -3846.051758  200.000000 -3922.051758   76.000000    0.000000        0.000000
6   -3496.051758   -3898.051758  3836.790283 -3496.051758  350.000000 -3898.051758  306.000000   96.000000       20.000000
7   -3416.051758   -3722.100586  3836.790283 -3416.051758  176.000000 -3722.100586  306.000000    0.048828        0.000000
8   -3040.125000   -3722.051514  3836.790283 -3040.125000  375.975586 -3722.051514  561.926758  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=497589/1024, 
.[0m
[08/30 13:04:23]  --------------------------------------------------------------------------------
[08/30 13:04:23]  Iteration: 22 (4 solution, 17 counterexamples)
[08/30 13:04:23]  Generator returned sat in 0.322108 secs.
[08/30 13:04:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:24]  Verifer returned unsat in 0.229099 secs.
[08/30 13:04:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:24]  --------------------------------------------------------------------------------
[08/30 13:04:24]  Iteration: 23 (5 solution, 17 counterexamples)
[08/30 13:04:24]  Generator returned sat in 0.109857 secs.
[08/30 13:04:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:24]  Verifer returned unsat in 0.535656 secs.
[08/30 13:04:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:24]  --------------------------------------------------------------------------------
[08/30 13:04:24]  Iteration: 24 (6 solution, 17 counterexamples)
[08/30 13:04:25]  Generator returned sat in 0.110654 secs.
[08/30 13:04:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:25]  Improved gap from 0.048583984375 to 100
[08/30 13:04:25]  Improved number of small numbers from 72 to 100 out of a max of 100
[08/30 13:04:25]  Verifer returned sat in 0.230070 secs.
[08/30 13:04:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3841.772217   -3861.772217  3276.510498 -3841.772217    0.096924 -3861.772217    0.000000   20.000000       20.000000
1   -3761.723633   -3761.772217  3276.510498 -3761.723633  100.048584 -3761.772217    0.000000    0.048584        0.048584
2   -3759.869385   -3759.917969  3276.510498 -3759.869385    1.902832 -3759.917969    0.000000    0.048584      -98.097168
3   -3541.723633   -3561.772217  3276.510498 -3541.723633  218.194336 -3561.772217    0.048584   20.000000       20.000000
4   -3541.723633   -3561.772217  3276.510498 -3541.723633    1.000000 -3561.772217    0.048584   20.000000      -80.000000
5   -3360.723633   -3361.772217  3276.510498 -3360.723633  201.000000 -3361.772217    0.048584    1.000000        1.000000
6   -2962.577881   -3261.772217  3276.510498 -2962.577881  399.145752 -3261.772217  279.194336   20.000000       20.000000
7   -2962.577881   -3241.820801  3276.510498 -2962.577881    1.000000 -3241.820801  279.194336    0.048584      -80.000000
8   -2641.675049   -3161.771973  3276.510498 -2641.675049  320.951416 -3161.771973  400.097168  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638599/4096, 
.[0m
[08/30 13:04:25]  --------------------------------------------------------------------------------
[08/30 13:04:25]  Iteration: 25 (6 solution, 18 counterexamples)
[08/30 13:04:26]  Generator returned sat in 0.434172 secs.
[08/30 13:04:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:27]  Improved number of small numbers from 54 to 99 out of a max of 99
[08/30 13:04:27]  Verifer returned sat in 0.609566 secs.
[08/30 13:04:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -4059.821045   -4059.869385  3374.607666 -4059.821045    0.096680 -4059.869385    0.000000    0.048340      -99.951660
1   -3859.869385   -3959.869385  3374.607666 -3859.869385  200.000000 -3959.869385    0.000000  100.000000        0.000000
2   -3759.869629   -3759.917725  3374.607666 -3759.869629  199.999756 -3759.917725    0.000000    0.048096       -0.000244
3   -3360.337158   -3759.869385  3374.607666 -3360.337158  399.580566 -3759.869385  279.532227  120.000000       20.000000
4   -3281.546875   -3561.127686  3374.607666 -3281.546875  198.790283 -3561.127686  279.532227    0.048584       -1.209717
5   -2882.434326   -3558.401367  3374.607666 -2882.434326  399.161133 -3558.401367  557.435059  118.531982       20.000000
6   -2802.385742   -3359.869385  3374.607666 -2802.385742  198.580566 -3359.869385  557.435059    0.048584        0.048584
7   -2402.853760   -3259.869385  3374.607666 -2402.853760  399.580566 -3259.869385  837.015625   20.000000       20.000000
8   -2224.063477   -3259.869385  3374.607666 -2224.063477  198.790283 -3259.869385  915.805908  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=2606177/4096, 
.[0m
[08/30 13:04:27]  --------------------------------------------------------------------------------
[08/30 13:04:27]  Iteration: 26 (6 solution, 19 counterexamples)
[08/30 13:04:28]  Generator returned sat in 0.703765 secs.
[08/30 13:04:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:28]  Verifer returned unsat in 0.100069 secs.
[08/30 13:04:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:28]  --------------------------------------------------------------------------------
[08/30 13:04:28]  Iteration: 27 (7 solution, 19 counterexamples)
[08/30 13:04:30]  Generator returned sat in 1.198791 secs.
[08/30 13:04:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:04:30]  Improved gap from 0.0 to 100
[08/30 13:04:30]  Improved number of small numbers from 59 to 71 out of a max of 100
[08/30 13:04:30]  Verifer returned sat in 0.671817 secs.
[08/30 13:04:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3918.876953   -3938.876953  3353.615166 -3918.876953    0.096436 -3938.876953    0.00000   20.000000       19.999932
1   -3859.869385   -3859.869385  3353.615166 -3859.869385   79.007568 -3859.869385    0.00000    0.000000      -20.992500
2   -3718.879395   -3738.876885  3353.615166 -3718.879395  140.989990 -3738.876885    0.00000   19.997490       19.997490
3   -3618.874385   -3738.876709  3353.615166 -3618.874385  120.002500 -3738.876709    0.00250  119.999824       20.000000
4   -3618.874385   -3638.876885  3353.615166 -3618.874385    0.010000 -3638.876885    0.00250   20.000000      -80.000000
5   -3418.876885   -3438.876885  3353.615166 -3418.876885  219.997500 -3438.876885    0.00250   19.997500       19.997500
6   -3029.875635   -3438.876709  3353.615166 -3029.875635  408.998750 -3438.876709  289.00125  119.999824       20.000000
7   -3029.875635   -3318.879385  3353.615166 -3029.875635    0.010000 -3318.879385  289.00125    0.002500      -80.000000
8   -2710.875635   -3238.876709  3353.615166 -2710.875635  319.002500 -3238.876709  408.00125  119.999824       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=326399/800, 
.[0m
[08/30 13:04:31]  --------------------------------------------------------------------------------
[08/30 13:04:31]  Iteration: 28 (7 solution, 20 counterexamples)
[08/30 13:04:31]  Generator returned sat in 0.106385 secs.
[08/30 13:04:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:31]  Improved gap from 0.0 to 79.6875
[08/30 13:04:32]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 13:04:32]  Verifer returned sat in 0.531851 secs.
[08/30 13:04:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3801.410400   -3801.413086  3274.864990 -3801.410400    0.096436 -3801.413086    0.000000    0.002686        0.002686
1   -3701.413086   -3701.413086  3274.864990 -3701.413086  100.000000 -3701.413086    0.000000    0.000000        0.000000
2   -3701.410400   -3701.413086  3274.864990 -3701.410400    0.002686 -3701.413086    0.000000    0.002686      -99.997314
3   -3601.410645   -3601.413086  3274.864990 -3601.410645  100.002441 -3601.413086    0.000000    0.002441      -99.997559
4   -3401.413086   -3501.413086  3274.864990 -3401.413086  200.000000 -3501.413086    0.000000  100.000000        0.000000
5   -3301.413086   -3301.415527  3274.864990 -3301.413086  200.000000 -3301.415527    0.000000    0.002441        0.000000
6   -2901.417969   -3201.413330  3274.864990 -2901.417969  399.997559 -3201.413330  279.995117   20.000244       20.000000
7   -2901.417969   -3181.415771  3275.180176 -2901.417969    0.010000 -3181.415771  279.995117    0.002686      -79.684814
8   -2581.423340   -3081.728271  3275.180176 -2581.423340  319.997314 -3081.728271  400.304932  100.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1639649/4096, 
.[0m
[08/30 13:04:32]  --------------------------------------------------------------------------------
[08/30 13:04:32]  Iteration: 29 (7 solution, 21 counterexamples)
[08/30 13:04:33]  Generator returned sat in 1.092018 secs.
[08/30 13:04:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:34]  Improved gap from 0.0025 to 0
[08/30 13:04:34]  Improved number of small numbers from 61 to 79 out of a max of 100
[08/30 13:04:34]  Verifer returned sat in 0.597250 secs.
[08/30 13:04:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -3921.425781   -3921.427979  3194.864990 -3921.425781    0.096191 -3921.427979      0.000   0.002197      -99.997695
1   -3821.425537   -3821.427979  3194.864990 -3821.425537  100.002441 -3821.427979      0.000   0.002441      -99.997451
2   -3601.430420   -3621.428086  3194.864990 -3601.430420  219.997559 -3621.428086      0.000  19.997666       19.997666
3   -3501.430586   -3521.428086  3194.864990 -3501.430586  119.997500 -3521.428086      0.000  19.997500       19.997500
4   -3281.433086   -3421.428223  3194.864990 -3281.433086  239.995000 -3421.428223    119.995  20.000137       20.000000
5   -3281.433086   -3401.450684  3274.864990 -3281.433086    0.010000 -3401.450684    119.995   0.022598        0.000000
6   -3281.433086   -3401.428086  3374.864990 -3281.433086    0.020000 -3401.428086    119.995   0.000000        0.000000
7   -3281.393086   -3401.428086  3474.785156 -3281.393086    0.040000 -3401.428086    119.995   0.040000       -0.039834
8   -3281.353086   -3401.348145  3474.785156 -3281.353086    0.080000 -3401.348145    119.995   0.000059      -99.999834
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:04:34]  --------------------------------------------------------------------------------
[08/30 13:04:34]  Iteration: 30 (7 solution, 22 counterexamples)
[08/30 13:04:35]  Generator returned sat in 0.265538 secs.
[08/30 13:04:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:35]  Improved gap from 0.00016666666666666666 to 100
[08/30 13:04:35]  Improved number of small numbers from 61 to 100 out of a max of 100
[08/30 13:04:35]  Verifer returned sat in 0.345649 secs.
[08/30 13:04:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3534.954102   -3654.953857  3194.86499 -3534.954102    0.095947 -3654.953857   0.000000  119.999756       19.999756
1   -3534.954102   -3554.953857  3194.86499 -3534.954102    0.047852 -3554.953857   0.000000   19.999756      -80.000244
2   -3354.906006   -3354.953857  3194.86499 -3354.906006  200.047852 -3354.953857   0.000000    0.047852        0.047852
3   -3230.953857   -3257.905762  3194.86499 -3230.953857  124.000000 -3257.905762   4.000000   22.951904       20.000000
4   -3130.905762   -3156.906006  3194.86499 -3130.905762  123.000000 -3156.906006   4.048096   21.952148       20.000000
5   -3030.857910   -3055.905762  3194.86499 -3030.857910  122.000000 -3055.905762   4.095947   20.951904       20.000000
6   -2930.809814   -2954.953857  3194.86499 -2930.809814  121.000000 -2954.953857   4.144043   20.000000       20.000000
7   -2830.809814   -2854.953857  3194.86499 -2830.809814  120.000000 -2854.953857   4.144043   20.000000       20.000000
8   -2699.833740   -2854.953857  3194.86499 -2699.833740  150.976074 -2854.953857  35.120117  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=127271/4096, 
.[0m
[08/30 13:04:36]  --------------------------------------------------------------------------------
[08/30 13:04:36]  Iteration: 31 (7 solution, 23 counterexamples)
[08/30 13:04:37]  Generator returned sat in 0.969186 secs.
[08/30 13:04:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:37]  Improved gap from 0.0 to 21.875
[08/30 13:04:38]  Improved number of small numbers from 78 to 96 out of a max of 100
[08/30 13:04:38]  Verifer returned sat in 0.889332 secs.
[08/30 13:04:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -3534.954346   -3598.608154  3194.865234 -3534.954346   0.095703 -3598.608154        0.0  63.653809       20.000000
1   -3534.954346   -3554.954346  3272.989990 -3534.954346  63.605957 -3554.954346        0.0  20.000000       -1.875244
2   -3532.935303   -3532.983154  3351.019043 -3532.935303  22.019043 -3532.983154        0.0   0.047852      -21.827148
3   -3511.060059   -3511.108154  3429.144043 -3511.060059  21.923096 -3511.108154        0.0   0.048096      -21.826904
4   -3467.358154   -3489.233154  3507.269043 -3467.358154  43.750000 -3489.233154        0.0  21.875000        0.000000
5   -3456.372559   -3467.358154  3584.394287 -3456.372559  32.860596 -3467.358154        0.0  10.985596      -11.889160
6   -3434.545654   -3444.483154  3662.519043 -3434.545654  32.812500 -3444.483154        0.0   9.937500      -11.937500
7   -3411.170654   -3422.512207  3739.192383 -3411.170654  33.312500 -3422.512207        0.0  11.341553      -11.889160
8   -3389.151733   -3399.281250  3817.317139 -3389.151733  33.360474 -3399.281250        0.0  10.129517      -11.745483
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:38]  --------------------------------------------------------------------------------
[08/30 13:04:38]  Iteration: 32 (7 solution, 24 counterexamples)
[08/30 13:04:39]  Generator returned sat in 0.151567 secs.
[08/30 13:04:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:39]  Verifer returned unsat in 0.233716 secs.
[08/30 13:04:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:39]  --------------------------------------------------------------------------------
[08/30 13:04:39]  Iteration: 33 (8 solution, 24 counterexamples)
[08/30 13:04:39]  Generator returned sat in 0.119185 secs.
[08/30 13:04:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:40]  Verifer returned unsat in 0.878373 secs.
[08/30 13:04:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:40]  --------------------------------------------------------------------------------
[08/30 13:04:40]  Iteration: 34 (9 solution, 24 counterexamples)
[08/30 13:04:41]  Generator returned sat in 0.515220 secs.
[08/30 13:04:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:41]  Improved gap from 0.02392578125 to 3.125
[08/30 13:04:41]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 13:04:41]  Verifer returned sat in 0.348215 secs.
[08/30 13:04:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4331.043945   -4451.043701  3990.954834 -4331.043945    0.095703 -4451.043701   0.000000  119.999756       20.000000
1   -4231.020020   -4351.043701  3990.954834 -4231.020020  220.023682 -4351.043701   0.023926  119.999756       20.000000
2   -4150.995850   -4251.043701  3990.954834 -4150.995850  200.023926 -4251.043701   0.023926  100.023926        0.024170
3   -4150.995850   -4151.043945  4087.829590 -4150.995850   61.574463 -4151.043945   0.023926    0.024170       -3.101074
4   -4027.871094   -4047.918945  4087.829590 -4027.871094  123.148926 -4047.918945   0.047607   20.000244       20.000000
5   -4027.871094   -4031.043701  4167.829590 -4027.871094    1.000000 -4031.043701   0.047607    3.125000        0.000000
6   -4027.871094   -4027.918701  4263.853760 -4027.871094    2.000000 -4027.918701   0.047607    0.000000       -3.975830
7   -4023.871094   -4023.942627  4360.728516 -4023.871094    4.000000 -4023.942627   0.047607    0.023926       -3.101074
8   -4015.895020   -4020.817627  4360.728516 -4015.895020    8.000000 -4020.817627   0.047607    4.875000      -95.125000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:04:42]  --------------------------------------------------------------------------------
[08/30 13:04:42]  Iteration: 35 (9 solution, 25 counterexamples)
[08/30 13:04:42]  Generator returned sat in 0.173149 secs.
[08/30 13:04:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:04:43]  Improved gap from 0.0 to 1.5625
[08/30 13:04:43]  Improved number of small numbers from 98 to 98 out of a max of 100
[08/30 13:04:43]  Verifer returned sat in 0.432928 secs.
[08/30 13:04:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4230.184326   -4350.184326  4087.82959 -4230.184326    0.095703 -4350.184326   0.000000  120.000000         20.0000
1   -4130.168701   -4250.184326  4087.82959 -4130.168701  220.015625 -4250.184326   0.015625  120.000000         20.0000
2   -4030.153076   -4096.861410  4087.82959 -4030.153076  220.015625 -4096.861410   0.031250   66.677083         20.0000
3   -3950.153076   -4050.184326  4087.82959 -3950.153076  146.677083 -4050.184326   0.031250  100.000000          0.0000
4   -3830.137451   -3850.184326  4087.82959 -3830.137451  220.015625 -3850.184326   0.046875   20.000000         20.0000
5   -3830.137451   -3831.746826  4167.82959 -3830.137451    1.000000 -3831.746826   0.046875    1.562500          0.0000
6   -3830.137451   -3830.184326  4266.26709 -3830.137451    1.500000 -3830.184326   0.046875    0.000000         -1.5625
7   -3827.887451   -3828.621826  4364.70459 -3827.887451    2.250000 -3828.621826   0.046875    0.687500         -0.8750
8   -3825.199951   -3827.059326  4462.89209 -3825.199951    3.375000 -3827.059326   0.046875    1.812500          0.0000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:04:43]  --------------------------------------------------------------------------------
[08/30 13:04:43]  Iteration: 36 (9 solution, 26 counterexamples)
[08/30 13:04:45]  Generator returned sat in 1.281551 secs.
[08/30 13:04:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:45]  Verifer returned unsat in 0.127706 secs.
[08/30 13:04:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:45]  --------------------------------------------------------------------------------
[08/30 13:04:45]  Iteration: 37 (10 solution, 26 counterexamples)
[08/30 13:04:46]  Generator returned sat in 0.941007 secs.
[08/30 13:04:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:46]  Improved gap from 0.0 to 100
[08/30 13:04:47]  Improved number of small numbers from 54 to 64 out of a max of 100
[08/30 13:04:47]  Verifer returned sat in 0.777929 secs.
[08/30 13:04:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4150.186768   -4150.189245  4126.81334 -4150.186768    0.095215 -4150.189245       0.00    0.002477        0.002477
1   -4150.186768   -4150.189245  4126.81334 -4150.186768    0.002441 -4150.189245       0.00    0.002477      -99.997523
2   -3930.191745   -4050.189209  4126.81334 -3930.191745  219.997500 -4050.189209       0.00  119.997464       19.997500
3   -3930.191745   -3932.189245  4126.81334 -3930.191745   36.000000 -3932.189245       0.00    1.997500      -80.002500
4   -3750.189245   -3791.189245  4126.81334 -3750.189245  182.000000 -3791.189245       0.00   41.000000        0.000000
5   -3246.689245   -3650.189453  4126.81334 -3246.689245  544.500000 -3650.189453     383.50   20.000208       20.000000
6   -3246.689245   -3650.189245  4126.81334 -3246.689245    0.010000 -3650.189245     383.50   20.000000      -80.000000
7   -3124.669245   -3550.189245  4126.81334 -3124.669245  142.020000 -3550.189245     383.50   42.020000      -57.980000
8   -2761.149245   -3450.189209  4126.81334 -2761.149245  405.540000 -3450.189209     569.04  119.999964       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=14226/25, 
.[0m
[08/30 13:04:47]  --------------------------------------------------------------------------------
[08/30 13:04:47]  Iteration: 38 (10 solution, 27 counterexamples)
[08/30 13:04:49]  Generator returned sat in 0.909003 secs.
[08/30 13:04:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:49]  Improved gap from 41.00875 to 100
[08/30 13:04:49]  Improved number of small numbers from 65 to 73 out of a max of 100
[08/30 13:04:49]  Verifer returned sat in 0.608262 secs.
[08/30 13:04:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3277.166992   -3297.166953  4126.813477 -3277.166992    0.094971 -3297.166953    0.000000   19.999961       19.999961
1   -3277.166992   -3297.166953  4126.813477 -3277.166992   19.997314 -3297.166953    0.000000   19.999961      -80.000039
2   -3097.166953   -3197.166953  4126.813477 -3097.166953  200.000000 -3197.166953    0.000000  100.000000        0.000000
3   -3078.169453   -3097.166953  4126.813477 -3078.169453  118.997500 -3097.166953    0.000000   18.997500      -81.002500
4   -2877.169453   -2961.676328  4126.813477 -2877.169453  219.997500 -2961.676328    0.000000   84.506875       19.997500
5   -2572.933516   -2797.166992  4126.813477 -2572.933516  388.742813 -2797.166992  204.233438   20.000039       20.000000
6   -2572.933516   -2777.169453  4126.813477 -2572.933516    0.010000 -2777.169453  204.233438    0.002500      -80.000000
7   -2411.927266   -2616.163203  4126.813477 -2411.927266  161.008750 -2616.163203  204.233438    0.002500      -18.993750
8   -2077.164453   -2597.166748  4126.813477 -2077.164453  334.765312 -2597.166748  400.002500  119.999795       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[08/30 13:04:50]  --------------------------------------------------------------------------------
[08/30 13:04:50]  Iteration: 39 (10 solution, 28 counterexamples)
[08/30 13:04:51]  Generator returned sat in 0.766567 secs.
[08/30 13:04:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:51]  Improved gap from 0.0 to 1.5625
[08/30 13:04:52]  Improved number of small numbers from 60 to 76 out of a max of 100
[08/30 13:04:52]  Verifer returned sat in 0.748788 secs.
[08/30 13:04:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3276.172119   -3396.171875  4126.813477 -3276.172119    0.094971 -3396.171875     0.0000  119.999756       19.999873
1   -3276.172119   -3296.171875  4126.813477 -3276.172119    0.002686 -3296.171875     0.0000   19.999756      -80.000127
2   -3196.169434   -3196.171992  4126.813477 -3196.169434  100.002441 -3196.171992     0.0000    0.002559      -99.997441
3   -2977.169492   -3096.171992  4126.813477 -2977.169492  219.002500 -3096.171992     0.0000  119.002500       19.002500
4   -2876.169492   -2962.599609  4126.813477 -2876.169492  220.002500 -2962.599609     0.0025   86.427617       20.000000
5   -2876.169492   -2877.734619  4206.813477 -2876.169492    0.010000 -2877.734619     0.0025    1.562627        0.000000
6   -2876.169492   -2876.171992  4304.806152 -2876.169492    1.010000 -2876.171992     0.0025    0.000000       -2.007324
7   -2874.159492   -2874.164492  4403.243477 -2874.159492    2.010000 -2874.164492     0.0025    0.002500       -1.560000
8   -2871.151992   -2872.601992  4501.680908 -2871.151992    3.010000 -2872.601992     0.0025    1.447500       -0.115068
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:04:52]  --------------------------------------------------------------------------------
[08/30 13:04:52]  Iteration: 40 (10 solution, 29 counterexamples)
[08/30 13:04:53]  Generator returned sat in 0.593158 secs.
[08/30 13:04:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:53]  Verifer returned unsat in 0.550063 secs.
[08/30 13:04:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:53]  --------------------------------------------------------------------------------
[08/30 13:04:53]  Iteration: 41 (11 solution, 29 counterexamples)
[08/30 13:04:54]  Generator returned sat in 0.113016 secs.
[08/30 13:04:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:55]  Verifer returned unsat in 0.479214 secs.
[08/30 13:04:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:55]  --------------------------------------------------------------------------------
[08/30 13:04:55]  Iteration: 42 (12 solution, 29 counterexamples)
[08/30 13:04:55]  Generator returned sat in 0.268173 secs.
[08/30 13:04:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:56]  Improved gap from 0.000625 to 21.875
[08/30 13:04:56]  Improved number of small numbers from 48 to 100 out of a max of 100
[08/30 13:04:56]  Verifer returned sat in 0.615077 secs.
[08/30 13:04:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -2544.687988   -2544.735352  3203.112793 -2544.687988   0.094727 -2544.735352        0.0   0.047363        0.047363
1   -2481.110596   -2502.985352  3239.487793 -2481.110596  63.624756 -2502.985352        0.0  21.874756       -0.000244
2   -2481.062988   -2481.110352  3317.612793 -2481.062988  21.922363 -2481.110352        0.0   0.047363      -21.827637
3   -2459.187988   -2459.235352  3395.737793 -2459.187988  21.922363 -2459.235352        0.0   0.047363      -21.827637
4   -2415.485352   -2437.360352  3473.862793 -2415.485352  43.750000 -2437.360352        0.0  21.875000        0.000000
5   -2403.547852   -2414.485352  3550.987793 -2403.547852  33.812500 -2414.485352        0.0  10.937500      -10.937500
6   -2380.172852   -2392.610352  3629.112549 -2380.172852  34.312500 -2392.610352        0.0  12.437500       -9.437744
7   -2358.297852   -2369.282715  3705.785156 -2358.297852  34.312500 -2369.282715        0.0  10.984863      -10.890137
8   -2334.243896   -2347.407715  3783.909912 -2334.243896  35.038818 -2347.407715        0.0  13.163818       -8.711426
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:56]  --------------------------------------------------------------------------------
[08/30 13:04:56]  Iteration: 43 (12 solution, 30 counterexamples)
[08/30 13:04:57]  Generator returned sat in 0.453040 secs.
[08/30 13:04:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:04:57]  Improved gap from 0.023681640625 to 0
[08/30 13:04:57]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:04:57]  Verifer returned sat in 0.260175 secs.
[08/30 13:04:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2965.547852   -2985.547852  3202.972656 -2965.547852    0.094727 -2985.547852        0.0   20.000000       20.000000
1   -2965.547852   -2985.547852  3282.972656 -2965.547852    0.047363 -2985.547852        0.0   20.000000        0.000000
2   -2845.595215   -2965.547852  3282.972656 -2845.595215  139.952637 -2965.547852        0.0  119.952637       19.952637
3   -2765.500488   -2765.547852  3282.972656 -2765.500488  200.047363 -2765.547852        0.0    0.047363        0.047363
4   -2764.547852   -2765.547852  3381.972656 -2764.547852    1.000000 -2765.547852        0.0    1.000000        0.000000
5   -2764.547852   -2764.547852  3481.972656 -2764.547852    1.000000 -2764.547852        0.0    0.000000        0.000000
6   -2763.547852   -2764.500488  3580.972656 -2763.547852    1.000000 -2764.500488        0.0    0.952637        0.000000
7   -2763.500488   -2763.547852  3680.925293 -2763.500488    1.000000 -2763.547852        0.0    0.047363        0.000000
8   -2762.547852   -2763.500488  3779.972656 -2762.547852    1.000000 -2763.500488        0.0    0.952637        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:04:58]  --------------------------------------------------------------------------------
[08/30 13:04:58]  Iteration: 44 (12 solution, 31 counterexamples)
[08/30 13:04:59]  Generator returned sat in 1.360505 secs.
[08/30 13:04:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:00]  Improved gap from 0.0 to 0
[08/30 13:05:00]  Improved number of small numbers from 60 to 82 out of a max of 100
[08/30 13:05:00]  Verifer returned sat in 0.706087 secs.
[08/30 13:05:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3144.544189   -3244.546387  3300.950439 -3144.544189    0.094482 -3244.546387    0.00000  100.002197        0.002559
1   -3144.544189   -3144.546631  3400.947793 -3144.544189    0.002500 -3144.546631    0.00000    0.002441       -0.000088
2   -3024.546631   -3044.544189  3400.947793 -3024.546631  120.000000 -3044.544189    0.00000   19.997559       19.997471
3   -2924.546631   -2944.544189  3400.947793 -2924.546631  119.997559 -2944.544189    0.00000   19.997559       19.997471
4   -2764.547852   -2844.544189  3400.947793 -2764.547852  179.996338 -2844.544189   59.99625   20.000088       20.000000
5   -2764.547852   -2824.556602  3480.947793 -2764.547852    0.010000 -2824.556602   59.99625    0.012500        0.000000
6   -2764.545352   -2824.544102  3580.945068 -2764.545352    0.015000 -2824.544102   59.99625    0.002500       -0.000225
7   -2764.525352   -2824.524102  3680.925293 -2764.525352    0.022500 -2824.524102   59.99625    0.002500        0.000000
8   -2764.494102   -2824.521484  3780.893799 -2764.494102    0.033750 -2824.521484   59.99625    0.031133       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:05:01]  --------------------------------------------------------------------------------
[08/30 13:05:01]  Iteration: 45 (12 solution, 32 counterexamples)
[08/30 13:05:02]  Generator returned sat in 1.502228 secs.
[08/30 13:05:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:03]  Improved number of small numbers from 49 to 99 out of a max of 99
[08/30 13:05:03]  Verifer returned sat in 0.241796 secs.
[08/30 13:05:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3674.634766   -3694.634766  3400.947998 -3674.634766    0.094482 -3694.634766    0.000000   20.000000            20.0
1   -3594.634766   -3694.634766  3400.947998 -3594.634766  100.000000 -3694.634766    0.000000  100.000000             0.0
2   -3594.634766   -3594.634766  3400.947998 -3594.634766   99.952881 -3594.634766    0.000000    0.000000          -100.0
3   -3108.634766   -3394.634766  3400.947998 -3108.634766  486.000000 -3394.634766  266.000000   20.000000            20.0
4   -2886.634766   -3294.634766  3400.947998 -2886.634766  242.000000 -3294.634766  388.000000   20.000000            20.0
5   -2786.634766   -3194.634766  3400.947998 -2786.634766  120.000000 -3194.634766  388.000000   20.000000            20.0
6   -2406.634766   -3173.634766  3400.947998 -2406.634766  400.000000 -3173.634766  668.000000   99.000000            20.0
7   -2306.634766   -3024.611084  3400.947998 -2306.634766  199.000000 -3024.611084  668.000000   49.976318            20.0
8   -2086.587402   -2994.634521  3400.947998 -2086.587402  270.023682 -2994.634521  788.047363  119.999756            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=819297/2048, 
.[0m
[08/30 13:05:03]  --------------------------------------------------------------------------------
[08/30 13:05:03]  Iteration: 46 (12 solution, 33 counterexamples)
[08/30 13:05:04]  Generator returned sat in 0.406169 secs.
[08/30 13:05:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:04]  Verifer returned unsat in 0.085604 secs.
[08/30 13:05:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:04]  --------------------------------------------------------------------------------
[08/30 13:05:04]  Iteration: 47 (13 solution, 33 counterexamples)
[08/30 13:05:05]  Generator returned sat in 0.293826 secs.
[08/30 13:05:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:05]  Improved gap from 0.0025 to 1.5625
[08/30 13:05:06]  Improved number of small numbers from 85 to 90 out of a max of 100
[08/30 13:05:06]  Verifer returned sat in 0.573664 secs.
[08/30 13:05:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3674.634766   -3694.634766  3400.947998 -3674.634766    0.094482 -3694.634766     0.0000   20.000000       20.000000
1   -3574.632266   -3694.634766  3400.947998 -3574.632266  120.002500 -3694.634766     0.0025  120.000000       20.000000
2   -3474.634766   -3494.634766  3400.947998 -3474.634766  219.997500 -3494.634766     0.0025   19.997500       19.997500
3   -3374.634766   -3394.634766  3400.947998 -3374.634766  119.997500 -3394.634766     0.0025   19.997500       19.997500
4   -3153.637266   -3294.634766  3400.947998 -3153.637266  240.995000 -3294.634766   120.9975   20.000000       20.000000
5   -3153.637266   -3276.197266  3480.947998 -3153.637266    0.010000 -3276.197266   120.9975    1.562500        0.000000
6   -3153.637266   -3274.634766  3577.910645 -3153.637266    1.020000 -3274.634766   120.9975    0.000000       -3.037354
7   -3150.597266   -3271.597266  3676.347900 -3150.597266    3.040000 -3271.597266   120.9975    0.002500       -1.560098
8   -3143.519766   -3264.517334  3676.347900 -3143.519766    7.080000 -3264.517334   120.9975    0.000068      -94.482598
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:05:06]  --------------------------------------------------------------------------------
[08/30 13:05:06]  Iteration: 48 (13 solution, 34 counterexamples)
[08/30 13:05:07]  Generator returned sat in 0.224976 secs.
[08/30 13:05:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:07]  Improved gap from 1.5575 to 1.5625
[08/30 13:05:08]  Improved number of small numbers from 62 to 71 out of a max of 100
[08/30 13:05:08]  Verifer returned sat in 1.011239 secs.
[08/30 13:05:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4078.804199   -4198.803990  3400.947998 -4078.804199    0.094238 -4198.803990    0.00000  119.999791       19.999791
1   -3978.801490   -4098.803990  3400.947998 -3978.801490  220.002500 -4098.803990    0.00250  120.000000       20.000000
2   -3878.802740   -3998.803990  3400.947998 -3878.802740  219.998750 -3998.803990    0.00250  119.998750       19.998750
3   -3852.800657   -3898.803990  3400.947998 -3852.800657  146.000833 -3898.803990    0.00250   46.000833      -53.999167
4   -3678.800240   -3698.804199  3400.947998 -3678.800240  220.001250 -3698.804199    0.00375   20.000209       20.000000
5   -3678.800240   -3680.366699  3480.947998 -3678.800240    0.010000 -3680.366699    0.00375    1.562709        0.000000
6   -3678.800240   -3678.803990  3579.385498 -3678.800240    1.015000 -3678.803990    0.00375    0.000000       -1.562500
7   -3676.277740   -3677.241490  3677.822998 -3676.277740    2.522500 -3677.241490    0.00375    0.960000       -0.602500
8   -3672.453990   -3675.678955  3774.601562 -3672.453990    4.783750 -3675.678955    0.00375    3.221215       -0.000186
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:05:08]  --------------------------------------------------------------------------------
[08/30 13:05:08]  Iteration: 49 (13 solution, 35 counterexamples)
[08/30 13:05:09]  Generator returned sat in 1.014675 secs.
[08/30 13:05:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:10]  Improved gap from 0.0 to 1.5625
[08/30 13:05:10]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 13:05:10]  Verifer returned sat in 0.531932 secs.
[08/30 13:05:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4078.804199   -4198.803955  3400.947998 -4078.804199    0.093994 -4198.803955   0.000000  119.999756       19.999756
1   -3998.803955   -4000.366699  3400.947998 -3998.803955  200.000000 -4000.366699   0.000000    1.562744        0.000000
2   -3878.851318   -3998.803955  3400.947998 -3878.851318  121.515381 -3998.803955   0.000000  119.952637       19.952637
3   -3878.194580   -3879.756836  3480.338379 -3878.194580  120.609375 -3879.756836   0.000000    1.562256       -0.000244
4   -3758.147461   -3778.194580  3480.338379 -3758.147461  121.609375 -3778.194580   0.046875   20.000244       20.000000
5   -3758.147461   -3758.241455  3558.822998 -3758.147461    1.000000 -3758.241455   0.046875    0.047119       -1.515381
6   -3756.194580   -3756.678955  3657.260498 -3756.194580    2.000000 -3756.678955   0.046875    0.437500       -1.125000
7   -3753.632080   -3755.116455  3755.697998 -3753.632080    3.000000 -3755.116455   0.046875    1.437500       -0.125000
8   -3751.069580   -3753.553955  3755.697998 -3751.069580    4.000000 -3753.553955   0.046875    2.437500      -97.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:05:10]  --------------------------------------------------------------------------------
[08/30 13:05:10]  Iteration: 50 (13 solution, 36 counterexamples)
[08/30 13:05:12]  Generator returned sat in 1.072526 secs.
[08/30 13:05:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:12]  Verifer returned unsat in 0.145596 secs.
[08/30 13:05:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:12]  --------------------------------------------------------------------------------
[08/30 13:05:12]  Iteration: 51 (14 solution, 36 counterexamples)
[08/30 13:05:13]  Generator returned sat in 0.439595 secs.
[08/30 13:05:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:13]  Verifer returned unsat in 0.142869 secs.
[08/30 13:05:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:13]  --------------------------------------------------------------------------------
[08/30 13:05:13]  Iteration: 52 (15 solution, 36 counterexamples)
[08/30 13:05:15]  Generator returned sat in 1.390517 secs.
[08/30 13:05:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:05:16]  Improved gap from 0.0 to 4.6875
[08/30 13:05:16]  Improved number of small numbers from 55 to 79 out of a max of 100
[08/30 13:05:16]  Verifer returned sat in 1.118205 secs.
[08/30 13:05:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3657.298584   -3657.330078  2959.474121 -3657.298584    0.093750 -3657.330078   0.000000    0.031494        0.031494
1   -3657.298584   -3657.330078  3054.786540 -3657.298584    0.015625 -3657.330078   0.000000    0.031494       -4.656087
2   -3532.658203   -3652.642497  3054.786540 -3532.658203  124.671875 -3652.642497   0.000000  119.984294       19.984294
3   -3525.029997   -3525.045622  3054.786540 -3525.029997  127.612500 -3525.045622   0.000000    0.015625      -72.387500
4   -3332.626872   -3413.251709  3054.786540 -3332.626872  192.418750 -3413.251709   0.015625   80.609212       20.000000
5   -3332.626872   -3337.330078  3134.786540 -3332.626872    1.000000 -3337.330078   0.015625    4.687581        0.000000
6   -3332.626872   -3332.642497  3230.098877 -3332.626872    2.500000 -3332.642497   0.015625    0.000000       -4.687663
7   -3327.876872   -3327.954834  3325.411377 -3327.876872    4.750000 -3327.954834   0.015625    0.062337       -4.625163
8   -3319.814209   -3323.267334  3325.411377 -3319.814209    8.125000 -3323.267334   0.015625    3.437500      -96.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[08/30 13:05:17]  --------------------------------------------------------------------------------
[08/30 13:05:17]  Iteration: 53 (15 solution, 37 counterexamples)
[08/30 13:05:20]  Generator returned sat in 2.905154 secs.
[08/30 13:05:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:20]  Improved gap from 0.046875 to 100
[08/30 13:05:21]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 13:05:21]  Verifer returned sat in 0.411965 secs.
[08/30 13:05:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3961.788574   -3981.788330  3283.932373 -3961.788574    0.093750 -3981.788330    0.000000   19.999756       19.999756
1   -3961.788574   -3981.788330  3283.932373 -3961.788574   19.999756 -3981.788330    0.000000   19.999756      -80.000244
2   -3761.835449   -3781.788574  3283.932373 -3761.835449  219.952881 -3781.788574    0.000000   19.953125       19.952881
3   -3669.171387   -3781.788330  3283.932373 -3669.171387  112.617188 -3781.788330    0.000000  112.616943       12.616943
4   -3569.171143   -3581.788330  3283.932373 -3569.171143  212.617188 -3581.788330    0.000000   12.617188       12.617188
5   -3169.171143   -3581.788330  3283.932373 -3169.171143  412.617188 -3581.788330  292.617188  120.000000       20.000000
6   -3169.171143   -3481.788330  3283.932373 -3169.171143    1.000000 -3481.788330  292.617188   20.000000      -80.000000
7   -3038.171143   -3330.835205  3283.932373 -3038.171143  151.000000 -3330.835205  292.617188    0.046875      -49.000000
8   -2761.741455   -3281.788330  3283.932373 -2761.741455  276.476562 -3281.788330  400.046875  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=25603/64, 
.[0m
[08/30 13:05:21]  --------------------------------------------------------------------------------
[08/30 13:05:21]  Iteration: 54 (15 solution, 38 counterexamples)
[08/30 13:05:22]  Generator returned sat in 0.450346 secs.
[08/30 13:05:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:22]  Improved number of small numbers from 91 to 99 out of a max of 99
[08/30 13:05:22]  Verifer returned sat in 0.186340 secs.
[08/30 13:05:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -3961.788574   -3981.788330  3283.932129 -3961.788574    0.093750 -3981.788330    0.000000   19.999756       19.999756
1   -3961.788574   -3981.788330  3283.932129 -3961.788574   19.999756 -3981.788330    0.000000   19.999756      -80.000244
2   -3761.812012   -3781.788330  3283.932129 -3761.812012  219.976318 -3781.788330    0.000000   19.976318       19.976318
3   -3748.435547   -3748.458984  3283.932129 -3748.435547   33.352783 -3748.458984    0.000000    0.023438      -66.647217
4   -3581.765137   -3581.788330  3283.932129 -3581.765137  166.693848 -3581.788330    0.000000    0.023193        0.023193
5   -3131.747559   -3581.788330  3283.932129 -3131.747559  450.040771 -3581.788330  330.040771  120.000000       20.000000
6   -3131.747559   -3471.011719  3283.932373 -3131.747559    1.000000 -3471.011719  330.040771    9.223389      -79.999756
7   -3000.747314   -3330.835205  3283.932373 -3000.747314  140.223633 -3330.835205  330.040771    0.047119      -48.999512
8   -2664.982422   -3281.788574  3283.932373 -2664.982422  335.812012 -3281.788574  496.806152  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1017459/2048, 
.[0m
[08/30 13:05:22]  --------------------------------------------------------------------------------
[08/30 13:05:22]  Iteration: 55 (15 solution, 39 counterexamples)
[08/30 13:05:24]  Generator returned sat in 0.740270 secs.
[08/30 13:05:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:24]  Verifer returned unsat in 0.158638 secs.
[08/30 13:05:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:24]  --------------------------------------------------------------------------------
[08/30 13:05:24]  Iteration: 56 (16 solution, 39 counterexamples)
[08/30 13:05:25]  Generator returned sat in 0.647058 secs.
[08/30 13:05:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:25]  Verifer returned unsat in 0.205351 secs.
[08/30 13:05:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:25]  --------------------------------------------------------------------------------
[08/30 13:05:25]  Iteration: 57 (17 solution, 39 counterexamples)
[08/30 13:05:26]  Generator returned sat in 0.162226 secs.
[08/30 13:05:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:26]  Verifer returned unsat in 0.197744 secs.
[08/30 13:05:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:26]  --------------------------------------------------------------------------------
[08/30 13:05:26]  Iteration: 58 (18 solution, 39 counterexamples)
[08/30 13:05:27]  Generator returned sat in 0.254848 secs.
[08/30 13:05:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:28]  Verifer returned unsat in 0.407367 secs.
[08/30 13:05:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:28]  --------------------------------------------------------------------------------
[08/30 13:05:28]  Iteration: 59 (19 solution, 39 counterexamples)
[08/30 13:05:29]  Generator returned sat in 0.347852 secs.
[08/30 13:05:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:29]  Improved gap from 40.01375 to 100
[08/30 13:05:30]  Improved number of small numbers from 54 to 60 out of a max of 100
[08/30 13:05:30]  Verifer returned sat in 0.899050 secs.
[08/30 13:05:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1693.750488   -1713.750345  2978.953311 -1693.750488    0.093750 -1713.750345    0.00000   19.999857       19.999857
1   -1593.752845   -1613.750345  2978.953311 -1593.752845  119.997500 -1613.750345    0.00000   19.997500       19.997500
2   -1493.747845   -1513.750345  2978.953311 -1493.747845  120.002500 -1513.750345    0.00250   20.000000       20.000000
3   -1447.079512   -1513.750345  2978.953311 -1447.079512   66.668333 -1513.750345    0.00250   66.668333      -33.331667
4   -1313.745345   -1313.750345  2978.953311 -1313.745345  200.002500 -1313.750345    0.00250    0.002500        0.002500
5    -863.744095   -1313.750244  2978.953311  -863.744095  450.003750 -1313.750244  330.00625  119.999899       20.000000
6    -863.744095   -1193.752845  2978.953311  -863.744095    0.010000 -1193.752845  330.00625    0.002500      -80.000000
7    -703.732845   -1033.741595  2978.953311  -703.732845  160.013750 -1033.741595  330.00625    0.002500      -19.988750
8    -323.710345   -1013.750244  2978.953311  -323.710345  380.025000 -1013.750244  570.04000  119.999899       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=45603/80, 
.[0m
[08/30 13:05:30]  --------------------------------------------------------------------------------
[08/30 13:05:30]  Iteration: 60 (19 solution, 40 counterexamples)
[08/30 13:05:31]  Generator returned sat in 0.512386 secs.
[08/30 13:05:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:31]  Verifer returned unsat in 0.448010 secs.
[08/30 13:05:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:31]  --------------------------------------------------------------------------------
[08/30 13:05:31]  Iteration: 61 (20 solution, 40 counterexamples)
[08/30 13:05:32]  Generator returned sat in 0.293254 secs.
[08/30 13:05:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:33]  Improved gap from 0.0 to 100
[08/30 13:05:33]  Improved number of small numbers from 54 to 62 out of a max of 100
[08/30 13:05:33]  Verifer returned sat in 0.880197 secs.
[08/30 13:05:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2603.069092   -2643.061470  3024.285186 -2603.069092    0.093750 -2643.061470    0.000000   39.992378        0.002378
1   -2603.069092   -2603.071470  3024.285186 -2603.069092    0.002441 -2603.071470    0.000000    0.002378      -99.997622
2   -2403.071470   -2503.071470  3024.285186 -2403.071470  200.000000 -2503.071470    0.000000  100.000000        0.000000
3   -2403.068970   -2403.071470  3024.285186 -2403.068970  100.002500 -2403.071470    0.000000    0.002500      -99.997500
4   -2183.073970   -2263.084595  3024.285186 -2183.073970  219.997500 -2263.084595    0.000000   80.010625       19.997500
5   -1873.093658   -2203.071289  3024.285186 -1873.093658  389.990937 -2203.071289  209.977812  119.999819       20.000000
6   -1873.093658   -2083.073970  3024.285186 -1873.093658    0.010000 -2083.073970  209.977812    0.002500      -80.000000
7   -1713.087408   -1923.065220  3024.285186 -1713.087408  160.008750 -1923.065220  209.977812    0.000000      -19.993750
8   -1383.068970   -1903.071289  3024.285186 -1383.068970  330.018438 -1903.071289  400.002500  119.999819       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[08/30 13:05:34]  --------------------------------------------------------------------------------
[08/30 13:05:34]  Iteration: 62 (20 solution, 41 counterexamples)
[08/30 13:05:36]  Generator returned sat in 1.593330 secs.
[08/30 13:05:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:36]  Improved gap from 99.953125 to 100
[08/30 13:05:37]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 13:05:37]  Verifer returned sat in 0.693174 secs.
[08/30 13:05:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2540.859375   -2560.859375  2982.072998 -2540.859375    0.093750 -2560.859375    0.000000   20.000000       20.000000
1   -2440.906250   -2542.812500  2982.072998 -2440.906250  119.953125 -2542.812500    0.000000  101.906250       19.953125
2   -2340.906250   -2360.859375  2982.072998 -2340.906250  201.906250 -2360.859375    0.000000   19.953125       19.953125
3   -2240.812500   -2360.859131  2982.072998 -2240.812500  120.046875 -2360.859131    0.046875  119.999756       20.000000
4   -2240.812500   -2260.859375  2982.072998 -2240.812500   59.023438 -2260.859375    0.046875   20.000000      -80.000000
5   -2060.812500   -2060.906250  2982.072998 -2060.812500  200.000000 -2060.906250    0.046875    0.046875        0.000000
6   -1710.882812   -2014.847656  2982.072998 -1710.882812  349.976562 -2014.847656  229.976562   73.988281       20.000000
7   -1610.882812   -1860.859375  2982.072998 -1610.882812  173.988281 -1860.859375  229.976562   20.000000       20.000000
8   -1256.894531   -1860.859131  2982.072998 -1256.894531  373.988281 -1860.859131  483.964844  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=123883/256, 
.[0m
[08/30 13:05:37]  --------------------------------------------------------------------------------
[08/30 13:05:37]  Iteration: 63 (20 solution, 42 counterexamples)
[08/30 13:05:40]  Generator returned sat in 2.116500 secs.
[08/30 13:05:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:40]  Verifer returned unsat in 0.205930 secs.
[08/30 13:05:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:40]  --------------------------------------------------------------------------------
[08/30 13:05:40]  Iteration: 64 (21 solution, 42 counterexamples)
[08/30 13:05:41]  Generator returned sat in 0.524138 secs.
[08/30 13:05:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:41]  Verifer returned unsat in 0.149626 secs.
[08/30 13:05:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:05:41]  --------------------------------------------------------------------------------
[08/30 13:05:41]  Iteration: 65 (22 solution, 42 counterexamples)
[08/30 13:05:43]  Generator returned sat in 1.142085 secs.
[08/30 13:05:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:05:43]  Improved gap from 0.0 to 100
[08/30 13:05:43]  Improved number of small numbers from 65 to 100 out of a max of 100
[08/30 13:05:43]  Verifer returned sat in 0.363480 secs.
[08/30 13:05:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1347.494873   -1347.541504  2982.072998 -1347.494873    0.093750 -1347.541504    0.000000    0.046631        0.046631
1   -1347.494873   -1347.541504  2982.072998 -1347.494873    0.023438 -1347.541504    0.000000    0.046631      -99.953369
2   -1147.541748   -1247.541504  2982.072998 -1147.541748  199.999756 -1247.541504    0.000000   99.999756       -0.000244
3   -1147.518066   -1147.541504  2982.072998 -1147.518066  100.023438 -1147.541504    0.000000    0.023438      -99.976562
4    -948.518066    -948.541504  2982.072998  -948.518066  199.023438  -948.541504    0.000000    0.023438       -0.976562
5    -551.018066    -847.541748  2982.072998  -551.018066  397.523438  -847.541748  276.523438   20.000244       20.000000
6    -372.256592    -747.541504  2982.072998  -372.256592  198.761719  -747.541504  355.284912   20.000000       20.000000
7    -292.875732    -648.184082  2982.072998  -292.875732   99.380859  -648.184082  355.284912    0.023438       -0.619141
8     -44.339600    -647.541504  2982.072998   -44.339600  248.559570  -647.541504  483.201904  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=1979195/4096, 
.[0m
[08/30 13:05:44]  --------------------------------------------------------------------------------
[08/30 13:05:44]  Iteration: 66 (22 solution, 43 counterexamples)
[08/30 13:05:48]  Generator returned sat in 3.454357 secs.
[08/30 13:05:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:05:48]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 13:05:48]  Verifer returned sat in 0.146545 secs.
[08/30 13:05:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1347.494873   -1347.564941  2982.072998 -1347.494873    0.093750 -1347.564941    0.000000    0.070068        0.046631
1   -1347.494873   -1347.541504  2982.072998 -1347.494873    0.023438 -1347.541504    0.000000    0.046631      -99.953369
2   -1147.541748   -1247.541504  2982.072998 -1147.541748  199.999756 -1247.541504    0.000000   99.999756       -0.000244
3   -1147.518066   -1147.541504  2982.072998 -1147.518066  100.023438 -1147.541504    0.000000    0.023438      -99.976562
4    -948.518066    -948.779785  2982.072998  -948.518066  199.023438  -948.779785    0.000000    0.261719       -0.976562
5    -551.018066    -847.541504  2982.072998  -551.018066  397.761719  -847.541504  276.523438   20.000000       20.000000
6    -373.137207    -747.541504  2982.072998  -373.137207  197.880859  -747.541504  354.404297   20.000000       20.000000
7    -295.196777    -649.612793  2982.072998  -295.196777   97.940430  -649.612793  354.404297    0.011719       -2.059570
8       2.958496    -647.541504  2982.072998     2.958496  298.166992  -647.541504  530.500000  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=1061/2, 
.[0m
[08/30 13:05:48]  --------------------------------------------------------------------------------
[08/30 13:05:48]  Iteration: 67 (22 solution, 44 counterexamples)
[08/30 13:05:50]  Generator returned sat in 0.857264 secs.
[08/30 13:05:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:05:50]  Improved gap from 0.011688232421875 to 100
[08/30 13:05:50]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/30 13:05:50]  Verifer returned sat in 0.409686 secs.
[08/30 13:05:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1497.995850   -1498.042969  3145.068115 -1497.995850    0.093262 -1498.042969    0.000000    0.047119        0.046875
1   -1378.089600   -1398.042725  3145.068115 -1378.089600  119.953369 -1398.042725    0.000000   19.953125       19.953125
2   -1298.042725   -1398.042725  3145.068115 -1298.042725  100.000000 -1398.042725    0.000000  100.000000        0.000000
3   -1177.995850   -1198.042969  3145.068115 -1177.995850  220.046875 -1198.042969    0.046875   20.000244       20.000000
4   -1177.995850   -1198.042725  3145.068115 -1177.995850    1.000000 -1198.042725    0.046875   20.000000      -80.000000
5    -998.495850   -1047.097656  3145.068115  -998.495850  199.500000 -1047.097656    0.046875   48.554932       -0.500000
6    -597.355713    -998.042725  3145.068115  -597.355713  449.695068  -998.042725  280.687012  120.000000       20.000000
7    -597.355713    -878.089600  3145.068115  -597.355713    1.000000  -878.089600  280.687012    0.046875      -80.000000
8    -277.949463    -798.042725  3145.068115  -277.949463  319.453125  -798.042725  400.093262  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819295/2048, 
.[0m
[08/30 13:05:51]  --------------------------------------------------------------------------------
[08/30 13:05:51]  Iteration: 68 (22 solution, 45 counterexamples)
[08/30 13:05:52]  Generator returned sat in 1.059802 secs.
[08/30 13:05:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:05:53]  Improved gap from 0.0233154296875 to 100
[08/30 13:05:53]  Improved number of small numbers from 53 to 100 out of a max of 100
[08/30 13:05:53]  Verifer returned sat in 0.514517 secs.
[08/30 13:05:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1100.816406   -1120.816162  2767.841553 -1100.816406    0.093018 -1120.816162    0.000000   19.999756       19.999756
1   -1020.816406   -1120.816162  2767.841553 -1020.816406   99.999756 -1120.816162    0.000000   99.999756       -0.000244
2    -900.769531    -968.196045  2767.841553  -900.769531  220.046631  -968.196045    0.046631   67.379883       20.000000
3    -900.769531    -920.816162  2767.841553  -900.769531   67.333333  -920.816162    0.046631   20.000000      -80.000000
4    -720.769531    -820.816162  2767.841553  -720.769531  200.000000  -820.816162    0.046631  100.000000        0.000000
5    -371.769531    -620.816406  2767.841553  -371.769531  449.000000  -620.816406  229.046631   20.000244       20.000000
6    -371.769531    -620.816162  2767.841553  -371.769531    1.000000  -620.816162  229.046631   20.000000      -80.000000
7    -241.269531    -509.951904  2767.841553  -241.269531  150.500000  -509.951904  229.046631   39.635742      -49.500000
8      99.276855    -420.816162  2767.841553    99.276855  380.182129  -420.816162  400.093018  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819295/2048, 
.[0m
[08/30 13:05:53]  --------------------------------------------------------------------------------
[08/30 13:05:53]  Iteration: 69 (22 solution, 46 counterexamples)
[08/30 13:05:55]  Generator returned sat in 0.901434 secs.
[08/30 13:05:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:05:55]  Improved gap from 30.0465087890625 to 100
[08/30 13:05:55]  Improved number of small numbers from 58 to 60 out of a max of 100
[08/30 13:05:55]  Verifer returned sat in 0.713257 secs.
[08/30 13:05:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1100.816650   -1122.816406  2767.841309 -1100.816650    0.092773 -1122.816406    0.000000   21.999756       19.999512
1   -1020.816650   -1120.816162  2767.841309 -1020.816650  101.999756 -1120.816162    0.000000   99.999512       -0.000488
2    -900.769653   -1020.816162  2767.841309  -900.769653  220.046509 -1020.816162    0.046509  120.000000       20.000000
3    -900.769653    -920.816162  2767.841309  -900.769653  119.953369  -920.816162    0.046509   20.000000      -80.000000
4    -700.816162    -723.653381  2767.841309  -700.816162  219.953491  -723.653381    0.046509   22.790710       19.953491
5    -306.071991    -620.816406  2767.841309  -306.071991  417.534882  -620.816406  294.744171   20.000244       20.000000
6    -306.071991    -620.816162  2767.841309  -306.071991    1.000000  -620.816162  294.744171   20.000000      -80.000000
7    -176.071991    -470.862671  2767.841309  -176.071991  150.000000  -470.862671  294.744171    0.046509      -50.000000
8      99.276855    -420.816162  2767.841309    99.276855  275.395355  -420.816162  400.093018  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277181/8192, 
.[0m
[08/30 13:05:56]  --------------------------------------------------------------------------------
[08/30 13:05:56]  Iteration: 70 (22 solution, 47 counterexamples)
[08/30 13:05:58]  Generator returned sat in 1.525201 secs.
[08/30 13:05:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:06:00]  Improved gap from 0.0 to 1.5625
[08/30 13:06:01]  Improved number of small numbers from 57 to 64 out of a max of 100
[08/30 13:06:01]  Verifer returned sat in 3.290047 secs.
[08/30 13:06:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    -774.205322    -774.251508  2480.078613  -774.205322  0.092529  -774.251508        0.0  0.046185        0.045990
1    -765.139008    -766.701508  2570.966309  -765.139008  9.112500  -766.701508        0.0  1.562500        0.000000
2    -763.576508    -765.139008  2669.403809  -763.576508  3.125000  -765.139008        0.0  1.562500        0.000000
3    -762.014008    -763.576508  2767.841309  -762.014008  3.125000  -763.576508        0.0  1.562500        0.000000
4    -757.676508    -760.276508  2863.503809  -757.676508  5.900000  -760.276508        0.0  2.600000        0.000000
5    -755.114008    -757.676508  2960.941309  -755.114008  5.162500  -757.676508        0.0  2.562500        0.000000
6    -752.364008    -755.114008  3058.191309  -752.364008  5.312500  -755.114008        0.0  2.750000        0.000000
7    -749.226508    -752.364008  3155.053711  -749.226508  5.887500  -752.364008        0.0  3.137500       -0.000098
8    -746.464008    -749.063965  3155.053711  -746.464008  5.900000  -749.063965        0.0  2.599957      -97.237598
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:06:02]  --------------------------------------------------------------------------------
[08/30 13:06:02]  Iteration: 71 (22 solution, 48 counterexamples)
[08/30 13:06:04]  Generator returned sat in 1.710366 secs.
[08/30 13:06:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:06:04]  Improved gap from 0.011566162109375 to 100
[08/30 13:06:05]  Improved number of small numbers from 54 to 60 out of a max of 100
[08/30 13:06:05]  Verifer returned sat in 1.058465 secs.
[08/30 13:06:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1581.191650   -1601.191508  3307.018809 -1581.191650    0.092529 -1601.191508    0.00000   19.999857       19.999857
1   -1501.191508   -1601.191508  3307.018809 -1501.191508  100.000000 -1601.191508    0.00000  100.000000        0.000000
2   -1501.189008   -1501.191508  3307.018809 -1501.189008  100.002500 -1501.191508    0.00000    0.002500      -99.997500
3   -1380.710258   -1401.191508  3307.018809 -1380.710258  120.481250 -1401.191508    0.00000   20.481250      -79.518750
4   -1181.710258   -1201.191508  3307.018809 -1181.710258  219.481250 -1201.191508    0.00000   19.481250       19.481250
5    -782.710258   -1101.191650  3307.018809  -782.710258  418.481250 -1101.191650  298.48125   20.000143       20.000000
6    -782.710258   -1101.191508  3307.018809  -782.710258    0.010000 -1101.191508  298.48125   20.000000      -80.000000
7    -653.700258    -952.184008  3307.018809  -653.700258  149.010000  -952.184008  298.48125    0.002500      -50.990000
8    -381.189008    -801.191650  3307.018809  -381.189008  272.513750  -801.191650  400.00250   20.000143       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[08/30 13:06:05]  --------------------------------------------------------------------------------
[08/30 13:06:05]  Iteration: 72 (22 solution, 49 counterexamples)
[08/30 13:06:07]  Generator returned sat in 0.553224 secs.
[08/30 13:06:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:06:07]  Improved gap from 0.0025 to 100
[08/30 13:06:08]  Improved number of small numbers from 54 to 64 out of a max of 100
[08/30 13:06:08]  Verifer returned sat in 1.097043 secs.
[08/30 13:06:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1694.232910   -1714.232758  3307.018809 -1694.232910    0.092529 -1714.232758     0.0000   19.999847       19.999847
1   -1694.232910   -1694.235258  3307.018809 -1694.232910    0.002686 -1694.235258     0.0000    0.002347      -80.000153
2   -1494.230258   -1614.232666  3307.018809 -1494.230258  200.005000 -1614.232666     0.0025  119.999908       20.000000
3   -1494.230258   -1514.232758  3307.018809 -1494.230258   80.665000 -1514.232758     0.0025   20.000000      -80.000000
4   -1294.232758   -1314.232758  3307.018809 -1294.232758  219.997500 -1314.232758     0.0025   19.997500       19.997500
5    -795.232758   -1314.232666  3307.018809  -795.232758  518.997500 -1314.232666   399.0000  119.999908       20.000000
6    -795.232758   -1214.232758  3307.018809  -795.232758    0.010000 -1214.232758   399.0000   20.000000      -80.000000
7    -666.217758   -1095.232758  3307.018809  -666.217758  149.015000 -1095.232758   399.0000   30.015000      -50.985000
8    -364.210258   -1014.232666  3307.018809  -364.210258  332.022500 -1014.232666   530.0225  119.999908       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=26501/50, 
.[0m
[08/30 13:06:08]  --------------------------------------------------------------------------------
[08/30 13:06:08]  Iteration: 73 (22 solution, 50 counterexamples)
[08/30 13:06:11]  Generator returned sat in 2.219758 secs.
[08/30 13:06:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:06:11]  Improved gap from 0.0462646484375 to 100
[08/30 13:06:12]  Improved number of small numbers from 34 to 44 out of a max of 100
[08/30 13:06:12]  Verifer returned sat in 1.073442 secs.
[08/30 13:06:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1821.458984   -1841.458984  3307.018809 -1821.458984    0.092529 -1841.458984    0.000000   20.000000       19.999829
1   -1743.227539   -1743.273755  3307.018809 -1743.227539   98.231445 -1743.273755    0.000000    0.046216       -1.768726
2   -1641.458813   -1741.458813  3307.018809 -1641.458813  101.814941 -1741.458813    0.000000  100.000000        0.000000
3   -1499.366284   -1641.458813  3307.018809 -1499.366284  242.092529 -1641.458813   22.092529  120.000000       20.000000
4   -1499.320020   -1541.458813  3307.018809 -1499.320020  120.046265 -1541.458813   22.092529   20.046265      -79.953735
5   -1299.412549   -1341.458813  3307.018809 -1299.412549  219.953735 -1341.458813   22.092529   19.953735       19.953735
6    -900.412549   -1329.981946  3307.018809  -900.412549  418.953735 -1329.981946  321.046265  108.523132       20.000000
7    -800.458813   -1241.458813  3307.018809  -800.458813  208.476868 -1241.458813  321.046265  119.953735       19.953735
8    -562.935681   -1141.458740  3307.018809  -562.935681  357.476868 -1141.458740  458.523132  119.999927       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=7150479/16384, 
.[0m
[08/30 13:06:13]  --------------------------------------------------------------------------------
[08/30 13:06:13]  Iteration: 74 (22 solution, 51 counterexamples)
[08/30 13:06:13]  Generator returned unsat in 0.009094 secs.
[08/30 13:06:13]  [96mNo more solutions found[0m
[08/30 13:06:13]  Final solutions:
[08/30 13:06:13]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:06:13]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:06:13]  Took 132.699726 secs.
