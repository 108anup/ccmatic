[10/25 11:40:11]  --------------------------------------------------------------------------------
[10/25 11:40:11]  Iteration: 1 (0 solution, 0 counterexamples)
[10/25 11:40:11]  Generator returned sat in 0.004212 secs.
[10/25 11:40:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 2c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 2c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:11]  Improved gap from 0.0 to 100
[10/25 11:40:11]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 11:40:11]  Verifer returned sat in 0.300303 secs.
[10/25 11:40:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t  wasted_t  queue_t  bottle_queue_t
0     -694.18750      -694.3125   -694.18750    0.12500    0.12500    -694.3125    0.00000             -694.3125  694.1875    0.125            0.00
1     -694.18750      -694.1875   -694.18750    0.12500    0.12500    -694.1875    0.00000             -694.3125  694.1875    0.000         -100.00
2     -493.81250      -494.1875   -493.81250  200.37500  200.37500    -494.1875    0.12500             -494.1875  694.1875    0.250            0.25
3     -219.96875      -448.1875   -219.96875  274.09375  274.09375    -448.1875  173.96875             -448.1875  694.1875   54.250            0.25
4        0.00000      -391.1875      0.00000  274.21875  274.21875    -391.1875  293.93750             -391.1875  694.1875   97.250            0.25
5      177.09375      -294.1875    177.09375  274.34375  274.34375    -294.1875  371.03125             -294.3125  694.1875  100.250            0.25
6      351.31250      -194.1875    351.31250  274.46875  274.46875    -194.1875  445.25000             -194.3125  694.1875  100.250            0.25
7      525.65625         5.8125    525.65625  274.59375  274.59375       5.8125  519.59375                5.8125  694.1875    0.250            0.25
8      800.12500         5.9375    800.12500  274.71875  274.71875       5.9375  694.06250                5.9375  694.1875  100.125            0.25
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=3201/8, 
, buffer=1/4.[0m
[10/25 11:40:11]  --------------------------------------------------------------------------------
[10/25 11:40:11]  Iteration: 2 (0 solution, 1 counterexamples)
[10/25 11:40:11]  Generator returned sat in 0.089927 secs.
[10/25 11:40:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 1c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 2c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:12]  Improved number of small numbers from 68 to 108 out of a max of 108
[10/25 11:40:12]  Verifer returned sat in 0.318207 secs.
[10/25 11:40:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -694.187988    -694.312500  -694.187988    0.125000    0.125000  -694.312500    0.000000           -694.312500  694.187256    0.124512       -0.000488
1    -694.187500    -694.187500  -694.187500    0.125000    0.125000  -694.187500    0.000000           -694.312500  694.187256    0.000000     -100.000000
2    -194.000244    -494.187500  -194.000244  500.187256  500.187256  -494.187500    0.062500           -494.187500  694.187256  300.124756      300.124756
3     -13.875488    -454.374756   -13.875488  480.249512  480.249512  -454.374756   80.187256           -454.374756  694.187256  360.312012      300.124756
4      86.124512    -394.125244    86.124512  460.312012  460.312012  -394.125244   80.187256           -394.125244  694.187256  400.062500      300.124756
5     166.311523    -294.187500   166.311523  480.249512  480.249512  -294.187500   80.187256           -294.312744  694.187256  380.311768      280.311768
6     286.186768     -94.187500   286.186768  500.187012  500.187012   -94.187500   80.249512            -94.187500  694.187256  300.124756      300.124756
7     466.311523       5.812256   466.311523  480.249512  480.249512     5.812256  160.374268              5.812256  694.187256  300.125000      300.124756
8     626.498535       5.874756   626.498535  460.312012  460.312012     5.874756  220.561279              5.874756  694.187256  400.062500      300.124756
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=143743/1024, 
, buffer=1229311/4096.[0m
[10/25 11:40:12]  --------------------------------------------------------------------------------
[10/25 11:40:12]  Iteration: 3 (0 solution, 2 counterexamples)
[10/25 11:40:12]  Generator returned sat in 0.097369 secs.
[10/25 11:40:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:12]  Improved gap from 0.0 to 100
[10/25 11:40:13]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 11:40:13]  Verifer returned sat in 0.279274 secs.
[10/25 11:40:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -794.125000    -794.125000  -794.125000    0.125000    0.125000  -794.125000    0.000000           -794.125000  694.187256    0.000000        -99.9375
1    -694.187500    -694.187500  -694.187500   99.937500   99.937500  -694.187500    0.000000           -594.125000  694.187256    0.000000       -100.0000
2    -493.000000    -494.187500  -493.000000  201.187500  201.187500  -494.187500    0.062500           -494.187500  694.187256    1.125000          1.1250
3    -327.833333    -460.354167  -327.833333  166.291667  166.291667  -460.354167   65.229167           -460.354167  694.187256   67.291667          1.1250
4    -227.770833    -361.479167  -227.770833  167.354167  167.354167  -361.479167   65.291667           -361.479167  694.187256   68.416667          1.1250
5    -127.770833    -260.354167  -127.770833  168.416667  168.416667  -260.354167   65.291667           -260.354167  694.187256   67.291667          1.1250
6     -27.708333     -94.187500   -27.708333  167.354167  167.354167   -94.187500   65.354167            -94.187500  694.187256    1.125000          1.1250
7     139.583333     -26.645833   139.583333  168.416667  168.416667   -26.645833  132.645833            -26.645833  694.187256   33.583333          1.1250
8     275.479167       5.812500   275.479167  169.479167  169.479167     5.812500  168.541667              5.812500  694.187256  101.125000          1.1250
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=413/4, 
, buffer=9/8.[0m
[10/25 11:40:13]  --------------------------------------------------------------------------------
[10/25 11:40:13]  Iteration: 4 (0 solution, 3 counterexamples)
[10/25 11:40:13]  Generator returned sat in 0.090232 secs.
[10/25 11:40:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:13]  Improved number of small numbers from 96 to 108 out of a max of 108
[10/25 11:40:13]  Verifer returned sat in 0.203833 secs.
[10/25 11:40:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -794.125000    -794.125000  -794.125000    0.124756    0.124756  -794.125000    0.000000           -794.125000  694.187256    0.000000        -99.9375
1    -694.187500    -694.187500  -694.187500   99.937500   99.937500  -694.187500    0.000000           -594.125488  694.187256    0.000000       -100.0000
2    -484.906494    -494.187744  -484.906494  209.281006  209.281006  -494.187744    8.156006           -494.187744  694.187256    1.125244          1.1250
3    -327.802490    -452.354248  -327.802490  158.229248  158.229248  -452.354248   65.260010           -452.354248  694.187256   59.291748          1.1250
4    -227.771240    -353.479248  -227.771240  159.322998  159.322998  -353.479248   65.291260           -353.479248  694.187256   60.416748          1.1250
5    -127.771240    -252.354004  -127.771240  160.416748  160.416748  -252.354004   65.291260           -252.354004  694.187256   59.291504          1.1250
6     -27.739746     -94.187500   -27.739746  159.322998  159.322998   -94.187500   65.322754            -94.187500  694.187256    1.125000          1.1250
7     131.552002     -32.583496   131.552002  160.416748  160.416748   -32.583496  124.614502            -32.583496  694.187256   39.520996          1.1250
8     253.541504       5.812500   253.541504  161.510498  161.510498     5.812500  146.604004              5.812500  694.187256  101.125000          1.1250
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=333057/4096, 
, buffer=9/8.[0m
[10/25 11:40:14]  --------------------------------------------------------------------------------
[10/25 11:40:14]  Iteration: 5 (0 solution, 4 counterexamples)
[10/25 11:40:14]  Generator returned sat in 0.109333 secs.
[10/25 11:40:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:14]  Improved gap from 0.000625 to 32.8125
[10/25 11:40:14]  Improved number of small numbers from 101 to 109 out of a max of 109
[10/25 11:40:14]  Verifer returned sat in 0.459942 secs.
[10/25 11:40:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -561.125244    -694.270996  -561.125244    0.124512    0.124512  -694.270996        0.0           -694.270996  425.770752  133.145752      133.145752
1    -561.125244    -694.187500  -561.125244    0.083496    0.083496  -694.187500        0.0           -694.187500  425.770752  133.062256       33.145752
2    -361.208252    -494.270996  -361.208252  332.979248  332.979248  -494.270996        0.0           -494.270996  425.770752  133.062744      133.062744
3    -361.208252    -394.520996  -361.208252   33.312256   33.312256  -394.520996        0.0           -394.520996  425.770752   33.312744       33.062744
4    -361.208252    -394.270996  -361.208252   33.229004   33.229004  -394.270996        0.0           -394.354004  492.708008   33.062744        0.000000
5    -361.125244    -361.208252  -361.125244   33.145752   33.145752  -361.208252        0.0           -328.312744  559.895508    0.083008      -32.729492
6    -328.145752    -328.395752  -328.145752   33.062500   33.062500  -328.395752        0.0           -328.479004  627.083008    0.250000      -32.562500
7    -295.416504    -295.500000  -295.416504   32.979248   32.979248  -295.500000        0.0           -295.500000  694.187012    0.083496      -32.729248
8    -262.604004    -262.604248  -262.604004   32.895996   32.895996  -262.604248        0.0           -262.604248  761.291504    0.000244      -32.812256
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=545365/4096.[0m
[10/25 11:40:15]  --------------------------------------------------------------------------------
[10/25 11:40:15]  Iteration: 6 (0 solution, 5 counterexamples)
[10/25 11:40:15]  Generator returned sat in 0.102566 secs.
[10/25 11:40:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:17]  Improved gap from 0.0 to 28.125
[10/25 11:40:17]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 11:40:17]  Verifer returned sat in 2.379625 secs.
[10/25 11:40:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -563.302979    -691.552490  -563.302979    0.124512    0.124512  -691.552490        0.0           -691.552490  411.937744  128.249512      128.249512
1    -563.302979    -691.490234  -563.302979    0.062256    0.062256  -691.490234        0.0           -691.490234  411.937744  128.187256       28.249512
2    -363.365234    -519.677490  -363.365234  328.125000  328.125000  -519.677490        0.0           -519.677490  411.937744  156.312256      128.187256
3    -363.365234    -405.677246  -363.365234   35.218506   35.218506  -405.677246        0.0           -405.677246  411.937744   42.312012       28.187256
4    -363.365234    -391.490234  -363.365234   42.249756   42.249756  -391.490234        0.0           -391.490234  483.750488   28.125000        0.000000
5    -342.209229    -363.302979  -342.209229   49.281006   49.281006  -363.302979        0.0           -363.302979  555.563232   21.093750       -7.031250
6    -306.990723    -335.115723  -306.990723   56.312256   56.312256  -335.115723        0.0           -335.115723  627.375977   28.125000        0.000000
7    -285.834717    -306.990723  -285.834717   49.281006   49.281006  -306.990723        0.0           -307.052979  694.187012   21.156006      -12.032959
8    -264.740967    -273.739502  -264.740967   42.249756   42.249756  -273.739502        0.0           -273.739502  694.187012    8.998535      -90.939209
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=262655/2048.[0m
[10/25 11:40:18]  --------------------------------------------------------------------------------
[10/25 11:40:18]  Iteration: 7 (0 solution, 6 counterexamples)
[10/25 11:40:18]  Generator returned sat in 0.061641 secs.
[10/25 11:40:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:18]  Improved gap from 60.0933837890625 to 100
[10/25 11:40:19]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 11:40:19]  Verifer returned sat in 0.525219 secs.
[10/25 11:40:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -863.552246   -1063.489990  -863.552246    0.124512    0.124512 -1063.489990   0.000000          -1063.489990  694.187012  199.937744      100.000000
1    -863.552246    -963.552246  -863.552246    0.062256    0.062256  -963.552246   0.000000           -963.552246  694.187012  100.000000        0.000000
2    -463.365479    -863.489990  -463.365479  500.186768  500.186768  -863.489990   0.062256           -863.489990  694.187012  400.062256      300.124512
3    -463.240967    -743.676758  -463.240967  400.186768  400.186768  -743.676758   0.062256           -743.676758  694.187012  280.373535      200.249023
4    -363.365479    -603.178711  -363.365479  380.249023  380.249023  -603.178711   0.062256           -603.178711  694.187012  239.750977      200.124512
5    -202.929688    -463.552246  -202.929688  400.186768  400.186768  -463.552246   0.062256           -463.552246  694.187012  260.560303      260.560303
6     -43.365479    -363.552246   -43.365479  420.124512  420.124512  -363.552246  20.062256           -363.552246  694.187012  300.124512      300.124512
7      56.696777    -363.489990    56.696777  400.186768  400.186768  -363.489990  20.124512           -363.489990  694.187012  400.062256      300.124512
8      56.696777    -263.552246    56.696777  380.249023  380.249023  -263.552246  20.124512           -263.552246  694.187012  300.124512      200.124512
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=82175/4096, 
, buffer=614655/2048.[0m
[10/25 11:40:19]  --------------------------------------------------------------------------------
[10/25 11:40:19]  Iteration: 8 (0 solution, 7 counterexamples)
[10/25 11:40:19]  Generator returned sat in 0.212278 secs.
[10/25 11:40:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:19]  Improved number of small numbers from 108 to 108 out of a max of 108
[10/25 11:40:19]  Verifer returned sat in 0.142281 secs.
[10/25 11:40:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -863.552490    -997.176107  -863.552490    0.124268    0.124268  -997.176107   0.000000           -997.176107  694.186768  133.623617       99.999756
1    -863.552490    -963.552246  -863.552490    0.062256    0.062256  -963.552246   0.000000           -963.552246  694.186768   99.999756       -0.000244
2    -463.365479    -863.489990  -463.365479  500.186768  500.186768  -863.489990   0.062256           -863.489990  694.186768  400.062256      300.124512
3    -463.240967    -743.676758  -463.240967  400.186768  400.186768  -743.676758   0.062256           -743.676758  694.186768  280.373535      200.249023
4    -363.365479    -603.178955  -363.365479  380.249023  380.249023  -603.178955   0.062256           -603.178955  694.186768  239.751221      200.124512
5    -202.929932    -463.552490  -202.929932  400.186768  400.186768  -463.552490   0.062256           -463.552490  694.186768  260.560303      260.560059
6     -43.365723    -363.552246   -43.365723  420.124512  420.124512  -363.552246  20.062012           -363.552246  694.186768  300.124512      300.124512
7      56.696533    -363.489990    56.696533  400.186768  400.186768  -363.489990  20.124268           -363.489990  694.186768  400.062256      300.124512
8      56.696533    -263.552246    56.696533  380.249023  380.249023  -263.552246  20.124268           -263.552246  694.186768  300.124512      200.124512
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=41087/2048, 
, buffer=614655/2048.[0m
[10/25 11:40:20]  --------------------------------------------------------------------------------
[10/25 11:40:20]  Iteration: 9 (0 solution, 8 counterexamples)
[10/25 11:40:20]  Generator returned sat in 0.099104 secs.
[10/25 11:40:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:20]  Improved number of small numbers from 56 to 108 out of a max of 108
[10/25 11:40:20]  Verifer returned sat in 0.318247 secs.
[10/25 11:40:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t     queue_t  bottle_queue_t
0    -763.567871   -1063.536865  -763.567871    0.124023    0.124023 -1063.536865   0.000000          -1063.536865  694.186523  299.968994      199.984619
1    -763.567871    -963.552490  -763.567871    0.062256    0.062256  -963.552490   0.000000           -963.552490  694.186523  199.984619       99.984619
2    -763.567871    -763.583496  -763.567871  199.984375  199.984375  -763.583496   0.000000           -763.583496  694.186523    0.015625       -0.015381
3    -363.521240    -763.536621  -363.521240  400.062256  400.062256  -763.536621   0.000000           -763.536621  694.186523  400.015381      300.031250
4    -363.521240    -563.552490  -363.521240  380.077881  380.077881  -563.552490   0.000000           -563.552490  694.186523  200.031250      200.031250
5    -163.490234    -463.552490  -163.490234  400.062256  400.062256  -463.552490   0.015625           -463.552490  694.186523  300.046631      300.046631
6     -83.458984    -363.583496   -83.458984  380.077881  380.077881  -363.583496   0.015625           -363.583496  694.186523  280.108887      280.077881
7      36.494385    -363.536621    36.494385  400.062256  400.062256  -363.536621   0.015625           -363.536621  694.186523  400.015381      300.031250
8      36.494385    -263.552246    36.494385  380.077881  380.077881  -263.552246   0.015625           -263.552246  694.186523  300.031006      200.031250
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/64, 
, buffer=1228991/4096.[0m
[10/25 11:40:21]  --------------------------------------------------------------------------------
[10/25 11:40:21]  Iteration: 10 (0 solution, 9 counterexamples)
[10/25 11:40:21]  Generator returned sat in 0.259929 secs.
[10/25 11:40:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 1/2c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:24]  Improved gap from 0.0004166666666666667 to 25.0
[10/25 11:40:24]  Improved number of small numbers from 109 to 109 out of a max of 109
[10/25 11:40:24]  Verifer returned sat in 3.040797 secs.
[10/25 11:40:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t    queue_t  bottle_queue_t
0    -693.552490    -760.800537  -693.552490   0.124023   0.124023  -760.800537        0.0           -760.800537  397.310547  67.248047       67.248047
1    -693.552490    -693.614502  -693.552490  67.186035  67.186035  -693.614502        0.0           -693.614502  397.310547   0.062012      -32.751953
2    -660.676514    -660.738525  -660.676514  32.937988  32.937988  -660.738525        0.0           -660.738525  472.124512   0.062012      -25.062012
3    -634.614502    -635.614502  -634.614502  26.124023  26.124023  -635.614502        0.0           -635.676514  544.248535   1.000000      -26.875977
4    -589.552490    -607.676514  -589.552490  46.062012  46.062012  -607.676514        0.0           -607.676514  619.186523  18.124023       -6.875977
5    -581.552490    -582.676514  -581.552490  26.124023  26.124023  -582.676514        0.0           -582.738525  694.186523   1.124023      -23.875977
6    -536.614502    -557.676514  -536.614502  46.062012  46.062012  -557.676514        0.0           -531.614502  768.186523  21.062012       -4.937988
7    -531.552490    -531.614502  -531.552490  26.124023  26.124023  -531.614502        0.0           -531.614502  840.248535   0.062012      -27.813965
8    -485.552490    -503.676514  -485.552490  46.062012  46.062012  -503.676514        0.0           -503.676514  840.248535  18.124023      -81.813965
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=34431/512.[0m
[10/25 11:40:25]  --------------------------------------------------------------------------------
[10/25 11:40:25]  Iteration: 11 (0 solution, 10 counterexamples)
[10/25 11:40:25]  Generator returned sat in 0.141634 secs.
[10/25 11:40:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1alpha)
else:
	target_cwnd = max(0.01+alpha, 0c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1alpha)

if(c_f[0][t-1] < target_cwnd):
	c_f[0][t] = c_f[0][t-1] - alpha
else:
	c_f[0][t] = c_f[0][t-1] + alpha
[0m
[10/25 11:40:26]  Improved gap from 0.0 to 23.4375
[10/25 11:40:26]  Improved number of small numbers from 37 to 109 out of a max of 109
[10/25 11:40:26]  Verifer returned sat in 1.151199 secs.
[10/25 11:40:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    wasted_t    queue_t  bottle_queue_t
0    -673.817871    -759.191162  -673.817871   0.123535   0.123535  -759.191162        0.0           -759.191162  395.700684  85.373291       85.373047
1    -673.817871    -673.848633  -673.817871   0.031006   0.031006  -673.848633        0.0           -673.848633  395.700684   0.030762      -14.626953
2    -635.660645    -659.160156  -635.660645  38.187988  38.187988  -659.160156        0.0           -659.160156  472.170410  23.499512        0.000000
3    -635.660645    -635.660645  -635.660645  23.468506  23.468506  -635.660645        0.0           -635.629883  548.732910   0.000000      -23.437500
4    -593.113525    -612.223145  -593.113525  42.547119  42.547119  -612.223145        0.0           -612.253906  625.295410  19.109619       -4.327881
5    -588.754639    -588.785645  -588.754639  23.468506  23.468506  -588.785645        0.0           -588.816650  701.857910   0.031006      -23.406494
6    -546.238525    -565.348145  -546.238525  42.547119  42.547119  -565.348145        0.0           -565.378906  776.748291  19.109619       -6.000000
7    -503.722412    -540.238525  -503.722412  61.625732  61.625732  -540.238525        0.0           -503.691650  840.232178  36.516113        0.000000
8    -497.691406    -503.691650  -497.691406  42.547119  42.547119  -503.691650        0.0           -503.691650  840.232178   6.000244      -93.968994
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=43711/512.[0m
[10/25 11:40:27]  --------------------------------------------------------------------------------
[10/25 11:40:27]  Iteration: 12 (0 solution, 11 counterexamples)
[10/25 11:40:27]  Generator returned unsat in 0.089686 secs.
[10/25 11:40:27]  [96mNo more solutions found[0m
[10/25 11:40:27]  Final solutions:
[10/25 11:40:27]  Took 16.683989 secs.
