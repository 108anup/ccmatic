[12/19 17:59:08]  Using search space: aitd_comb_ad_fi_miai_ti
[12/19 17:59:09]  Ideal: desired_util_f=1, desired_queue_bound_multiplier=0.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_large_loss_count_bound=3, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=10
[12/19 17:59:09]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=1.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_large_loss_count_bound=1, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=3
[12/19 17:59:35]  --------------------------------------------------------------------------------
[12/19 17:59:35]  Iteration: 1 (0 solution, 0 counterexamples)
[12/19 17:59:35]  Generator returned sat in 0.006038 secs.
[12/19 17:59:35]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif("Last loss was >= 5 Rm ago and Last fast increase was >= 1 Rm ago"):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
if("Loss on fast increase"):
	c_f[n][t] = c_f[n][t-2][0m
[12/19 17:59:36]  Improved number of small numbers from 105 to 105 out of a max of 105
[12/19 17:59:36]  Verifer returned sat in 1.196814 secs.
[12/19 17:59:36]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t     queue_t  can_fast_increase_0,t  can_fast_increase_a_0,t  can_fast_increase_b_0,t
0           -325.125000              -599.375         -325.125000         0.062500         0.062500            -599.375            0.0625                    0.0000  274.187500                   -1.0                     -1.0                     -1.0
1           -225.187500              -499.375         -225.187500       374.125000       374.125000            -499.375            0.0625                    0.0625  274.125000                   -1.0                     -1.0                     -1.0
2           -225.187500              -399.375         -225.187500        34.187500        34.187500            -399.375            0.0625                    0.0625  174.125000                    0.0                      0.0                      0.0
3           -225.187500              -299.375         -225.187500        54.125000        54.125000            -299.375            0.0625                    0.0625   74.125000                    0.0                      0.0                      1.0
4           -225.187500              -225.250         -225.187500        74.062500        74.062500            -225.250            0.0625                    0.0625    0.000000                    0.0                      0.0                      1.0
5           -131.187500              -131.250         -131.187500        94.000000        94.000000            -131.250            0.0625                    0.0625    0.000000                    0.0                      0.0                      1.0
6             19.781250               -31.250           19.781250       150.968750       150.968750             -31.250            0.0625                    0.0625   50.968750                    1.0                      1.0                      1.0
7            139.718750                68.750          139.718750       170.906250       170.906250              68.750            0.0625                    0.0625   70.906250                    0.0                      1.0                      0.0
8            335.140625               168.750          335.140625       266.328125       266.328125             168.750            0.0625                    0.0625  166.328125                    1.0                      1.0                      1.0
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, 
, ramp_down_cwnd=False, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=0, 
, large_loss_count=0, loss_amount=0, fast_decrease=True, fast_increase=True, alpha=319/16, buf_size=4387/16.[0m
[12/19 17:59:49]  --------------------------------------------------------------------------------
[12/19 17:59:49]  Iteration: 2 (0 solution, 1 counterexamples)
[12/19 17:59:49]  Generator returned sat in 0.249111 secs.
[12/19 17:59:49]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif("Last loss was >= 5 Rm ago and Last fast increase was >= 1 Rm ago"):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
if("Loss on fast increase"):
	c_f[n][t] = c_f[n][t-2][0m
[12/19 17:59:54]  Improved number of small numbers from 42 to 44 out of a max of 105
[12/19 17:59:54]  Verifer returned sat in 5.083322 secs.
[12/19 17:59:54]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  ideal__loss_detected_0,t   queue_t  can_fast_increase_0,t  can_fast_increase_a_0,t  can_fast_increase_b_0,t
0           -304.250488           -304.343994         -304.250488         0.062012         0.062012         -304.343994          0.062500                  0.062500  0.031006                   -1.0                     -1.0                     -1.0
1           -204.297058           -204.359558         -204.297058        99.984436        99.984436         -204.359558          0.062500                  0.062500  0.000000                   -1.0                     -1.0                     -1.0
2           -154.258148           -154.320648         -154.258148        50.038910        50.038910         -154.320648          0.062500                  0.062500  0.000000                    0.0                      1.0                      0.0
3            -54.211456            -54.320648          -54.211456       100.046692       100.046692          -54.320648          0.078064                  0.062500  0.031128                    1.0                      1.0                      1.0
4             -4.203674             -4.281738           -4.203674        50.038910        50.038910           -4.281738          0.078064                  0.078064  0.000000                    0.0                      0.0                      0.0
5             45.850800             45.772736           45.850800        50.054474        50.054474           45.772736          0.078064                  0.078064  0.000000                    0.0                      0.0                      1.0
6             95.920837             95.842773           95.920837        50.070038        50.070038           95.842773          0.078064                  0.078064  0.000000                    0.0                      0.0                      1.0
7            146.006439            145.928375          146.006439        50.085602        50.085602          145.928375          0.078064                  0.078064  0.000000                    0.0                      0.0                      1.0
8            196.107605            196.029541          196.107605        50.101166        50.101166          196.029541          0.078064                  0.078064  0.000000                    0.0                      0.0                      1.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_large_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, 
, ramp_down_cwnd=True, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=1, 
, large_loss_count=0, loss_amount=0, fast_decrease=True, fast_increase=True, alpha=255/16384, buf_size=255/8192.[0m
[12/19 18:00:07]  --------------------------------------------------------------------------------
[12/19 18:00:07]  Iteration: 3 (0 solution, 2 counterexamples)
[12/19 18:00:07]  Generator returned unsat in 0.018225 secs.
[12/19 18:00:07]  [96mNo more solutions found[0m
[12/19 18:00:07]  Final solutions:
[12/19 18:00:07]  Took 58.106803 secs.
