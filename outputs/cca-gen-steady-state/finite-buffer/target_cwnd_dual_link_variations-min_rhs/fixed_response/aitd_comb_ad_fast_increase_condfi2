[12/09 18:11:33]  Using search space: condfi2
[12/09 18:11:34]  Ideal: desired_util_f=1, desired_queue_bound_multiplier=0.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=0, desired_loss_amount_bound_alpha=10
[12/09 18:11:34]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=1.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=3
[12/09 18:12:03]  --------------------------------------------------------------------------------
[12/09 18:12:03]  Iteration: 1 (0 solution, 0 counterexamples)
[12/09 18:12:03]  Generator returned sat in 0.007074 secs.
[12/09 18:12:03]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + 1/2S_f[n][t-1] + -1/2S_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:12:11]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 18:12:11]  Verifer returned sat in 8.297612 secs.
[12/09 18:12:11]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0          -7645.541667          -7758.875000        -7645.541667         0.125000         0.125000        -7758.875000               0.0  113.333333
1          -7645.541667          -7658.875000        -7645.541667         0.125000         0.125000        -7658.875000               0.0   13.333333
2          -7645.541667          -7645.541667        -7645.541667        13.208333        13.208333        -7645.541667               0.0    0.000000
3          -7625.666667          -7625.666667        -7625.666667        19.875000        19.875000        -7625.666667               0.0    0.000000
4          -7605.666667          -7605.666667        -7605.666667        20.000000        20.000000        -7605.666667               0.0    0.000000
5          -7585.541667          -7585.541667        -7585.541667        20.125000        20.125000        -7585.541667               0.0    0.000000
6          -7565.291667          -7565.291667        -7565.291667        20.250000        20.250000        -7565.291667               0.0    0.000000
7          -7544.916667          -7544.916667        -7544.916667        20.375000        20.375000        -7544.916667               0.0    0.000000
8          -7524.416667          -7524.416667        -7524.416667        20.500000        20.500000        -7524.416667               0.0    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=340/3.[0m
[12/09 18:12:25]  --------------------------------------------------------------------------------
[12/09 18:12:25]  Iteration: 2 (0 solution, 1 counterexamples)
[12/09 18:12:26]  Generator returned sat in 0.465903 secs.
[12/09 18:12:26]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + 1/2S_f[n][t-1] + -1/2S_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:12:30]  Improved number of small numbers from 64 to 114 out of a max of 114
[12/09 18:12:30]  Verifer returned sat in 4.569652 secs.
[12/09 18:12:30]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         -11808.489014         -11808.489014       -11808.489014         0.124756         0.124756       -11808.489014               0.0      0.0
1         -11792.364502         -11792.364502       -11792.364502        16.124512        16.124512       -11792.364502               0.0      0.0
2         -11792.348877         -11792.348877       -11792.348877         0.015625         0.015625       -11792.348877               0.0      0.0
3         -11782.255371         -11782.255371       -11782.255371        10.093506        10.093506       -11782.255371               0.0      0.0
4         -11770.146240         -11770.146240       -11770.146240        12.109131        12.109131       -11770.146240               0.0      0.0
5         -11756.021484         -11756.021484       -11756.021484        14.124756        14.124756       -11756.021484               0.0      0.0
6         -11739.881104         -11739.881104       -11739.881104        16.140381        16.140381       -11739.881104               0.0      0.0
7         -11721.725098         -11721.725098       -11721.725098        18.156006        18.156006       -11721.725098               0.0      0.0
8         -11701.553467         -11701.553467       -11701.553467        20.171631        20.171631       -11701.553467               0.0      0.0
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=129/64, buf_size=8319/4096.[0m
[12/09 18:12:45]  --------------------------------------------------------------------------------
[12/09 18:12:45]  Iteration: 3 (0 solution, 2 counterexamples)
[12/09 18:12:45]  Generator returned unsat in 0.042233 secs.
[12/09 18:12:45]  [96mNo more solutions found[0m
[12/09 18:12:45]  Final solutions:
[12/09 18:12:45]  Took 70.635077 secs.
