[12/09 17:20:07]  Using search space: aitd_comb_ad_fi_miai_ti
[12/09 17:20:08]  Ideal: desired_util_f=1, desired_queue_bound_multiplier=0.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=0, desired_loss_amount_bound_alpha=3
[12/09 17:20:08]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=1.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=3
[12/09 17:20:35]  --------------------------------------------------------------------------------
[12/09 17:20:35]  Iteration: 1 (0 solution, 0 counterexamples)
[12/09 17:20:35]  Generator returned sat in 0.007450 secs.
[12/09 17:20:35]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(2c_f[n][t-1] + 2c_f[n][t-2] + 2c_f[n][t-3] + -2S_f[n][t-1] + 2S_f[n][t-2] + 2S_f[n][t-3] + 2A_f[n][t-1] + 2A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:20:37]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 17:20:37]  Verifer returned sat in 1.350950 secs.
[12/09 17:20:37]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0           3348.973633         -10547.182617         3348.973633       100.121094       100.121094       -10547.182617           13296.0  600.15625
1           3348.973633         -10447.182617         3348.973633       500.069010       500.069010       -10447.182617           13296.0  500.15625
2           3348.973633         -10347.182617         3348.973633         0.075521         0.075521       -10347.182617           13296.0  400.15625
3           3348.973633         -10247.182617         3348.973633         0.117188         0.117188       -10247.182617           13296.0  300.15625
4           3348.973633         -10147.182617         3348.973633         0.125000         0.125000       -10147.182617           13296.0  200.15625
5           3348.973633         -10047.182617         3348.973633         0.132812         0.132812       -10047.182617           13296.0  100.15625
6           3348.973633          -9947.182617         3348.973633         0.140625         0.140625        -9947.182617           13296.0    0.15625
7           3348.973633          -9947.026367         3348.973633         0.148438         0.148438        -9947.026367           13296.0    0.00000
8           3349.200195          -9946.799805         3349.200195         0.226562         0.226562        -9946.799805           13296.0    0.00000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/128, buf_size=19205/32.[0m
[12/09 17:20:51]  --------------------------------------------------------------------------------
[12/09 17:20:51]  Iteration: 2 (0 solution, 1 counterexamples)
[12/09 17:20:52]  Generator returned sat in 1.520291 secs.
[12/09 17:20:52]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1c_f[n][t-1] + 1c_f[n][t-2] + 1/2c_f[n][t-3] + -3/2S_f[n][t-2] + 3/2S_f[n][t-3] + 1/2A_f[n][t-1] + -1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:20:55]  Improved number of small numbers from 88 to 114 out of a max of 114
[12/09 17:20:55]  Verifer returned sat in 3.013660 secs.
[12/09 17:20:55]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0           5563.153076          -9703.052002         5563.153076         0.015381         0.015381        -9703.052002       14765.91333  500.291748
1           5563.153076          -9603.052002         5563.153076         0.015381         0.015381        -9603.052002       14765.91333  400.291748
2           5563.153076          -9503.052002         5563.153076         0.078125         0.078125        -9503.052002       14765.91333  300.291748
3           5563.153076          -9403.052002         5563.153076         0.093750         0.093750        -9403.052002       14765.91333  200.291748
4           5563.153076          -9303.052002         5563.153076         0.109375         0.109375        -9303.052002       14765.91333  100.291748
5           5563.153076          -9203.052002         5563.153076         0.125000         0.125000        -9203.052002       14765.91333    0.291748
6           5563.153076          -9202.760254         5563.153076         0.140625         0.140625        -9202.760254       14765.91333    0.000000
7           5563.309326          -9202.604004         5563.309326         0.156250         0.156250        -9202.604004       14765.91333    0.000000
8           5563.481201          -9202.432129         5563.481201         0.171875         0.171875        -9202.432129       14765.91333    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/64, buf_size=2049195/4096.[0m
[12/09 17:21:09]  --------------------------------------------------------------------------------
[12/09 17:21:09]  Iteration: 3 (0 solution, 2 counterexamples)
[12/09 17:21:11]  Generator returned sat in 1.638890 secs.
[12/09 17:21:11]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(3/2c_f[n][t-1] + 3/2c_f[n][t-2] + 3/2c_f[n][t-3] + -2S_f[n][t-1] + -1/2S_f[n][t-2] + -2S_f[n][t-3] + 3/2A_f[n][t-1] + 2A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:21:12]  Improved number of small numbers from 78 to 114 out of a max of 114
[12/09 17:21:12]  Verifer returned sat in 0.598904 secs.
[12/09 17:21:12]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0        -180805.137207        -221084.055420      -180805.137207         0.000488         0.000488      -221084.055420       39778.91333  500.004883
1        -180805.137207        -220984.055420      -180805.137207         0.000244         0.000244      -220984.055420       39778.91333  400.004883
2        -180805.137207        -220884.055420      -180805.137207         0.002441         0.002441      -220884.055420       39778.91333  300.004883
3        -180805.137207        -220784.055420      -180805.137207         0.002930         0.002930      -220784.055420       39778.91333  200.004883
4        -180805.137207        -220684.055420      -180805.137207         0.003418         0.003418      -220684.055420       39778.91333  100.004883
5        -180805.137207        -220584.055420      -180805.137207         0.003906         0.003906      -220584.055420       39778.91333    0.004883
6        -180805.137207        -220584.050537      -180805.137207         0.004395         0.004395      -220584.050537       39778.91333    0.000000
7        -180805.132324        -220584.045654      -180805.132324         0.004883         0.004883      -220584.045654       39778.91333    0.000000
8        -180805.126953        -220584.040283      -180805.126953         0.005371         0.005371      -220584.040283       39778.91333    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/2048, buf_size=512005/1024.[0m
[12/09 17:21:25]  --------------------------------------------------------------------------------
[12/09 17:21:25]  Iteration: 4 (0 solution, 3 counterexamples)
[12/09 17:21:29]  Generator returned sat in 3.444137 secs.
[12/09 17:21:29]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1/2c_f[n][t-1] + 1c_f[n][t-2] + 2c_f[n][t-3] + -1/2S_f[n][t-1] + 1/2S_f[n][t-2] + 3/2A_f[n][t-1] + -1/2A_f[n][t-2] + -1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:21:34]  Improved number of small numbers from 34 to 99 out of a max of 114
[12/09 17:21:34]  Verifer returned sat in 4.592579 secs.
[12/09 17:21:34]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0        -179655.137207        -220534.055420      -179655.137207         0.000244         0.000244      -220534.055420      40178.917969  700.000244
1        -179655.137207        -220434.055420      -179655.137207        24.999756        24.999756      -220434.055420      40178.917969  600.000244
2        -179655.137207        -220334.055420      -179655.137207         0.000038         0.000038      -220334.055420      40178.917969  500.000244
3        -179655.137207        -220234.055420      -179655.137207         0.000046         0.000046      -220234.055420      40178.917969  400.000244
4        -179655.137207        -220134.055420      -179655.137207         0.000053         0.000053      -220134.055420      40178.917969  300.000244
5        -179655.137207        -220034.055420      -179655.137207         0.000061         0.000061      -220034.055420      40178.917969  200.000244
6        -179655.137207        -219934.055420      -179655.137207         0.000069         0.000069      -219934.055420      40178.917969  100.000244
7        -179655.137207        -219834.055420      -179655.137207         0.000076         0.000076      -219834.055420      40178.917969    0.000244
8        -179655.137207        -219834.055176      -179655.137207         0.000084         0.000084      -219834.055176      40178.917969    0.000000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/131072, buf_size=2867201/4096.[0m
[12/09 17:21:48]  --------------------------------------------------------------------------------
[12/09 17:21:48]  Iteration: 5 (0 solution, 4 counterexamples)
[12/09 17:21:50]  Generator returned sat in 2.486715 secs.
[12/09 17:21:50]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1/2c_f[n][t-1] + 2c_f[n][t-2] + -1/2c_f[n][t-3] + -2S_f[n][t-1] + -3/2S_f[n][t-2] + -1A_f[n][t-1] + 2A_f[n][t-2] + 3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:21:52]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 17:21:52]  Verifer returned sat in 1.930503 secs.
[12/09 17:21:52]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0        -180494.011963        -220753.305176      -180494.011963           0.1250           0.1250      -220753.305176      40178.918213   80.375
1        -180393.886963        -220653.305176      -180393.886963         180.5000         180.5000      -220653.305176      40179.043213   80.375
2        -180194.511963        -220553.305176      -180194.511963         279.7500         279.7500      -220553.305176      40278.418213   80.375
3        -180015.136963        -220453.305176      -180015.136963         259.7500         259.7500      -220453.305176      40357.793213   80.375
4        -179855.636963        -220353.305176      -179855.636963         239.8750         239.8750      -220353.305176      40417.293213   80.375
5        -179716.011963        -220253.305176      -179716.011963         220.0000         220.0000      -220253.305176      40456.918213   80.375
6        -179596.261963        -220153.305176      -179596.261963         200.1250         200.1250      -220153.305176      40476.668213   80.375
7        -179496.386963        -220053.305176      -179496.386963         180.2500         180.2500      -220053.305176      40476.668213   80.250
8        -179296.324463        -219953.305176      -179296.324463         280.3125         280.3125      -219953.305176      40576.605713   80.375
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=3501/16, 
, fast_decrease=True, fast_increase=True, alpha=159/8, buf_size=643/8.[0m
[12/09 17:22:06]  --------------------------------------------------------------------------------
[12/09 17:22:06]  Iteration: 6 (0 solution, 5 counterexamples)
[12/09 17:22:09]  Generator returned sat in 3.043691 secs.
[12/09 17:22:10]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -2c_f[n][t-2] + 2c_f[n][t-3] + 2S_f[n][t-1] + -1S_f[n][t-2] + -3/2S_f[n][t-3] + -3/2A_f[n][t-2] + 1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:22:12]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 17:22:12]  Verifer returned sat in 2.413988 secs.
[12/09 17:22:12]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0          20189.271484         -20205.458984        20189.271484         0.125000         0.125000       -20205.458984      40378.589844  16.140625
1          20189.271484         -20189.318359        20189.271484         0.015625         0.015625       -20189.318359      40378.589844   0.000000
2          20189.287109         -20189.302734        20189.287109         0.015625         0.015625       -20189.302734      40378.589844   0.000000
3          20199.388672         -20179.201172        20199.388672        10.101562        10.101562       -20179.201172      40378.589844   0.000000
4          20211.513672         -20167.076172        20211.513672        12.125000        12.125000       -20167.076172      40378.589844   0.000000
5          20225.654297         -20152.935547        20225.654297        14.140625        14.140625       -20152.935547      40378.589844   0.000000
6          20241.810547         -20136.779297        20241.810547        16.156250        16.156250       -20136.779297      40378.589844   0.000000
7          20259.982422         -20118.607422        20259.982422        18.171875        18.171875       -20118.607422      40378.589844   0.000000
8          20280.169922         -20098.419922        20280.169922        20.187500        20.187500       -20098.419922      40378.589844   0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=129/64, buf_size=1033/64.[0m
[12/09 17:22:26]  --------------------------------------------------------------------------------
[12/09 17:22:26]  Iteration: 7 (0 solution, 6 counterexamples)
[12/09 17:22:30]  Generator returned sat in 4.147016 secs.
[12/09 17:22:30]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-1/2c_f[n][t-1] + 3/2c_f[n][t-2] + 1/2c_f[n][t-3] + -1/2S_f[n][t-1] + -3/2S_f[n][t-2] + -3/2S_f[n][t-3] + -3/2A_f[n][t-1] + -1/2A_f[n][t-2] + -2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:22:31]  Improved number of small numbers from 70 to 114 out of a max of 114
[12/09 17:22:31]  Verifer returned sat in 0.657969 secs.
[12/09 17:22:31]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0          17636.136963         -20158.066895        17636.136963         0.003662         0.003662       -20158.066895      37792.168701  2.035156
1          17636.136963         -20156.031738        17636.136963         2.031250         2.031250       -20156.031738      37792.168701  0.000000
2          17636.140869         -20156.027832        17636.140869         0.003906         0.003906       -20156.027832      37792.168701  0.000000
3          17637.166260         -20155.002441        17637.166260         1.025391         1.025391       -20155.002441      37792.168701  0.000000
4          17638.197510         -20153.971191        17638.197510         1.031250         1.031250       -20153.971191      37792.168701  0.000000
5          17639.232666         -20152.936035        17639.232666         1.035156         1.035156       -20152.936035      37792.168701  0.000000
6          17640.271729         -20151.896973        17640.271729         1.039062         1.039062       -20151.896973      37792.168701  0.000000
7          17641.314697         -20150.854004        17641.314697         1.042969         1.042969       -20150.854004      37792.168701  0.000000
8          17642.361572         -20149.807129        17642.361572         1.046875         1.046875       -20149.807129      37792.168701  0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/256, buf_size=521/256.[0m
[12/09 17:22:45]  --------------------------------------------------------------------------------
[12/09 17:22:45]  Iteration: 8 (0 solution, 7 counterexamples)
[12/09 17:22:49]  Generator returned sat in 3.363331 secs.
[12/09 17:22:49]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(3/2c_f[n][t-1] + 1c_f[n][t-2] + 2c_f[n][t-3] + -1S_f[n][t-1] + -3/2S_f[n][t-2] + -2S_f[n][t-3] + 1A_f[n][t-1] + 1/2A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:22:53]  Improved number of small numbers from 40 to 43 out of a max of 114
[12/09 17:22:53]  Verifer returned sat in 4.175299 secs.
[12/09 17:22:53]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0          17614.255936          13695.419096        17614.255936         0.003418         0.003418        13695.419096        3910.83272  8.00412
1          17614.255936          13703.423216        17614.255936         4.002197         4.002197        13703.423216        3910.83272  0.00000
2          17614.256393          13703.423674        17614.256393         0.000458         0.000458        13703.423674        3910.83272  0.00000
3          17619.259369          13708.426649        17619.259369         5.002975         5.002975        13708.426649        3910.83272  0.00000
4          17625.263031          13714.430311        17625.263031         6.003662         6.003662        13714.430311        3910.83272  0.00000
5          17632.267151          13721.434431        17632.267151         7.004120         7.004120        13721.434431        3910.83272  0.00000
6          17640.271729          13729.439009        17640.271729         8.004578         8.004578        13729.439009        3910.83272  0.00000
7          17649.276764          13738.444044        17649.276764         9.005035         9.005035        13738.444044        3910.83272  0.00000
8          17659.282257          13748.449537        17659.282257        10.005493        10.005493        13748.449537        3910.83272  0.00000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=32783/32768, buf_size=32785/4096.[0m
[12/09 17:23:07]  --------------------------------------------------------------------------------
[12/09 17:23:07]  Iteration: 9 (0 solution, 8 counterexamples)
[12/09 17:23:16]  Generator returned sat in 8.246005 secs.
[12/09 17:23:16]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + -1/2c_f[n][t-2] + -2c_f[n][t-3] + -1S_f[n][t-1] + -3/2S_f[n][t-2] + -2S_f[n][t-3] + 3/2A_f[n][t-1] + 1/2A_f[n][t-2] + 1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:23:18]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 17:23:18]  Verifer returned sat in 2.422985 secs.
[12/09 17:23:18]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0          18282.151855          13739.569092        18282.151855            0.125            0.125        13739.569092       3910.832764   631.75
1          18382.276855          13839.569092        18382.276855          731.875          731.875        13839.569092       3910.957764   631.75
2          18382.276855          13939.569092        18382.276855           17.525           17.525        13939.569092       3910.957764   531.75
3          18382.276855          14039.569092        18382.276855           19.875           19.875        14039.569092       3910.957764   431.75
4          18382.276855          14139.569092        18382.276855           22.225           22.225        14139.569092       3910.957764   331.75
5          18382.276855          14239.569092        18382.276855           24.575           24.575        14239.569092       3910.957764   231.75
6          18382.276855          14339.569092        18382.276855           26.925           26.925        14339.569092       3910.957764   131.75
7          18382.276855          14439.569092        18382.276855           29.275           29.275        14439.569092       3910.957764    31.75
8          18382.276855          14471.319092        18382.276855           31.625           31.625        14471.319092       3910.957764     0.00
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=47/20, buf_size=2527/4.[0m
[12/09 17:23:32]  --------------------------------------------------------------------------------
[12/09 17:23:32]  Iteration: 10 (0 solution, 9 counterexamples)
[12/09 17:23:50]  Generator returned sat in 17.420025 secs.
[12/09 17:23:50]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1/2c_f[n][t-1] + -2c_f[n][t-2] + -1/2c_f[n][t-3] + 1/2S_f[n][t-1] + 3/2S_f[n][t-2] + -2S_f[n][t-3] + -3/2A_f[n][t-2] + 3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:24:05]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 17:24:05]  Verifer returned sat in 15.438331 secs.
[12/09 17:24:05]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0          42768.151855          18281.026855        42768.151855       554.166667       554.166667        18281.026855           24087.0  400.1250
1          42768.151855          18381.026855        42768.151855         0.125000         0.125000        18381.026855           24087.0  300.1250
2          42768.151855          18481.026855        42768.151855        54.666667        54.666667        18481.026855           24087.0  200.1250
3          42768.151855          18581.026855        42768.151855        63.666667        63.666667        18581.026855           24087.0  100.1250
4          42768.151855          18681.026855        42768.151855       100.000000       100.000000        18681.026855           24087.0    0.1250
5          42922.526855          18781.026855        42922.526855       154.500000       154.500000        18781.026855           24087.0   54.5000
6          43104.276855          18881.026855        43104.276855       236.250000       236.250000        18881.026855           24087.0  136.2500
7          43195.151855          18981.026855        43195.151855       227.125000       227.125000        18981.026855           24087.0  127.1250
8          43290.589355          19081.026855        43290.589355       222.562500       222.562500        19081.026855           24087.0  122.5625
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=True, alpha=9, buf_size=3201/8.[0m
[12/09 17:24:19]  --------------------------------------------------------------------------------
[12/09 17:24:19]  Iteration: 11 (0 solution, 10 counterexamples)
[12/09 17:24:26]  Generator returned sat in 5.768410 secs.
[12/09 17:24:26]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -1c_f[n][t-2] + -1/2c_f[n][t-3] + -1/2S_f[n][t-1] + -1/2S_f[n][t-2] + 1/2S_f[n][t-3] + 2A_f[n][t-1] + -3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:24:30]  Improved number of small numbers from 78 to 114 out of a max of 114
[12/09 17:24:30]  Verifer returned sat in 4.088127 secs.
[12/09 17:24:30]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         123066.259033         122947.133789       123066.259033         780.6250         780.6250       122947.133789           119.000    0.125244
1         123586.633789         123047.133789       123586.633789         520.5000         520.5000       123047.133789           119.125  420.375000
2         123586.633789         123147.133789       123586.633789          19.7500          19.7500       123147.133789           119.125  320.375000
3         123586.633789         123247.133789       123586.633789          19.8750          19.8750       123247.133789           119.125  220.375000
4         123586.633789         123347.133789       123586.633789          20.0000          20.0000       123347.133789           119.125  120.375000
5         123586.633789         123447.133789       123586.633789          20.1250          20.1250       123447.133789           119.125   20.375000
6         123586.633789         123467.508789       123586.633789          20.2500          20.2500       123467.508789           119.125    0.000000
7         123607.008789         123487.883789       123607.008789          20.3750          20.3750       123487.883789           119.125    0.000000
8         123637.696289         123518.571289       123637.696289          30.6875          30.6875       123518.571289           119.125    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=3363/8.[0m
[12/09 17:24:44]  --------------------------------------------------------------------------------
[12/09 17:24:44]  Iteration: 12 (0 solution, 11 counterexamples)
[12/09 17:24:56]  Generator returned sat in 11.464605 secs.
[12/09 17:24:56]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + 1/2c_f[n][t-2] + 3/2c_f[n][t-3] + -2S_f[n][t-1] + 1S_f[n][t-3] + 1/2A_f[n][t-1] + 3/2A_f[n][t-2] + -1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:25:01]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 17:25:01]  Verifer returned sat in 4.968801 secs.
[12/09 17:25:01]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         123115.071289         122882.665039       123115.071289        48.166667        48.166667       122882.665039         195.53125   36.875
1         123115.071289         122919.540039       123115.071289        36.750000        36.750000       122919.540039         195.53125    0.000
2         123186.258789         122990.727539       123186.258789        71.187500        71.187500       122990.727539         195.53125    0.000
3         123281.008789         123085.477539       123281.008789        94.750000        94.750000       123085.477539         195.53125    0.000
4         123380.883789         123185.352539       123380.883789        99.875000        99.875000       123185.352539         195.53125    0.000
5         123533.258789         123285.352539       123533.258789       152.375000       152.375000       123285.352539         211.03125   36.875
6         123643.633789         123385.352539       123643.633789       147.250000       147.250000       123385.352539         221.40625   36.875
7         123748.883789         123485.352539       123748.883789       142.125000       142.125000       123485.352539         226.65625   36.875
8         123849.008789         123585.352539       123849.008789       137.000000       137.000000       123585.352539         226.78125   36.875
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, loss_amount=125/4, 
, fast_decrease=True, fast_increase=True, alpha=41/8, buf_size=295/8.[0m
[12/09 17:25:15]  --------------------------------------------------------------------------------
[12/09 17:25:15]  Iteration: 13 (0 solution, 12 counterexamples)
[12/09 17:25:26]  Generator returned sat in 10.067132 secs.
[12/09 17:25:26]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-1/2c_f[n][t-1] + -3/2c_f[n][t-2] + 3/2c_f[n][t-3] + 1S_f[n][t-1] + 1/2S_f[n][t-2] + -2S_f[n][t-3] + -3/2A_f[n][t-1] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:25:28]  Improved number of small numbers from 98 to 98 out of a max of 114
[12/09 17:25:28]  Verifer returned sat in 2.085353 secs.
[12/09 17:25:28]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         123115.071045         122916.414795       123115.071045        48.166667        48.166667       122916.414795         195.53125    3.125
1         123115.071045         122919.539795       123115.071045         0.062500         0.062500       122919.539795         195.53125    0.000
2         123200.139795         123004.608545       123200.139795        85.068750        85.068750       123004.608545         195.53125    0.000
3         123289.264795         123093.733545       123289.264795        89.125000        89.125000       123093.733545         195.53125    0.000
4         123380.883545         123185.352295       123380.883545        91.618750        91.618750       123185.352295         195.53125    0.000
5         123519.558545         123285.352295       123519.558545       138.675000       138.675000       123285.352295         211.03125   23.175
6         123632.564795         123385.352295       123632.564795       136.181250       136.181250       123385.352295         224.03750   23.175
7         123743.077295         123485.352295       123743.077295       133.687500       133.687500       123485.352295         234.55000   23.175
8         123851.096045         123585.352295       123851.096045       131.193750       131.193750       123585.352295         242.56875   23.175
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, loss_amount=3763/80, 
, fast_decrease=True, fast_increase=True, alpha=399/160, buf_size=927/40.[0m
[12/09 17:25:42]  --------------------------------------------------------------------------------
[12/09 17:25:42]  Iteration: 14 (0 solution, 13 counterexamples)
[12/09 17:28:29]  Generator returned sat in 166.224269 secs.
[12/09 17:28:29]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1/2c_f[n][t-2] + 1c_f[n][t-3] + -2S_f[n][t-1] + -2S_f[n][t-2] + 2S_f[n][t-3] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:28:41]  Improved number of small numbers from 78 to 78 out of a max of 114
[12/09 17:28:41]  Verifer returned sat in 10.911396 secs.
[12/09 17:28:41]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         122832.741481         122749.016992       122832.741481         0.136054         0.136054       122749.016992         47.261905  36.462585
1         122832.741481         122785.479577       122832.741481         0.136054         0.136054       122785.479577         47.261905   0.000000
2         122834.238080         122786.976175       122834.238080         1.496599         1.496599       122786.976175         47.261905   0.000000
3         122854.102026         122806.840121       122854.102026        19.863946        19.863946       122806.840121         47.261905   0.000000
4         122874.850325         122827.588420       122874.850325        20.748299        20.748299       122827.588420         47.261905   0.000000
5         122895.734679         122848.472774       122895.734679        20.884354        20.884354       122848.472774         47.261905   0.000000
6         122916.755087         122869.493182       122916.755087        21.020408        21.020408       122869.493182         47.261905   0.000000
7         122948.353726         122901.091822       122948.353726        31.598639        31.598639       122901.091822         47.261905   0.000000
8         122980.088420         122932.826515       122980.088420        31.734694        31.734694       122932.826515         47.261905   0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=20/147, buf_size=5360/147.[0m
[12/09 17:29:06]  --------------------------------------------------------------------------------
[12/09 17:29:06]  Iteration: 15 (0 solution, 14 counterexamples)
[12/09 17:48:20]  Generator returned sat in 1152.093615 secs.
[12/09 17:48:20]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -1/2c_f[n][t-2] + -1S_f[n][t-1] + -3/2S_f[n][t-2] + 3/2S_f[n][t-3] + 1A_f[n][t-1] + 3/2A_f[n][t-2] + -3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 17:48:45]  Improved number of small numbers from 78 to 80 out of a max of 114
[12/09 17:48:45]  Verifer returned sat in 25.314680 secs.
[12/09 17:48:45]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         122965.434326         122671.296712       122965.434326            0.125            0.125       122671.296712           70.0625  224.075114
1         123065.309212         122771.296712       123065.309212          323.950          323.950       122771.296712           70.0625  223.950000
2         123065.309212         122871.296712       123065.309212           15.925           15.925       122871.296712           70.0625  123.950000
3         123065.309212         122971.296712       123065.309212           19.875           19.875       122971.296712           70.0625   23.950000
4         123065.309212         122995.246712       123065.309212           23.825           23.825       122995.246712           70.0625    0.000000
5         123093.084212         123023.021712       123093.084212           27.775           27.775       123023.021712           70.0625    0.000000
6         123124.809212         123054.746712       123124.809212           31.725           31.725       123054.746712           70.0625    0.000000
7         123160.484212         123090.421712       123160.484212           35.675           35.675       123090.421712           70.0625    0.000000
8         123200.109212         123130.046712       123200.109212           39.625           39.625       123130.046712           70.0625    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=79/20, buf_size=229453/1024.[0m
[12/09 17:49:10]  --------------------------------------------------------------------------------
[12/09 17:49:10]  Iteration: 16 (0 solution, 15 counterexamples)
[12/09 18:18:02]  Generator returned sat in 1729.682570 secs.
[12/09 18:18:02]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + 1c_f[n][t-2] + 1/2c_f[n][t-3] + -3/2S_f[n][t-1] + -1S_f[n][t-2] + 2S_f[n][t-3] + 3/2A_f[n][t-1] + -1/2A_f[n][t-2] + -1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:18:07]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 18:18:07]  Verifer returned sat in 5.212662 secs.
[12/09 18:18:07]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0         115037.715576         114201.403076       115037.715576           0.0625           0.0625       114201.403076             116.0  720.3125
1         115037.715576         114301.403076       115037.715576          21.5625          21.5625       114301.403076             116.0  620.3125
2         115037.715576         114401.403076       115037.715576          19.8750          19.8750       114401.403076             116.0  520.3125
3         115037.715576         114501.403076       115037.715576          19.9375          19.9375       114501.403076             116.0  420.3125
4         115037.715576         114601.403076       115037.715576          20.0000          20.0000       114601.403076             116.0  320.3125
5         115037.715576         114701.403076       115037.715576          20.0625          20.0625       114701.403076             116.0  220.3125
6         115037.715576         114801.403076       115037.715576          20.1250          20.1250       114801.403076             116.0  120.3125
7         115037.715576         114901.403076       115037.715576          20.1875          20.1875       114901.403076             116.0   20.3125
8         115037.715576         114921.715576       115037.715576          20.2500          20.2500       114921.715576             116.0    0.0000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/16, buf_size=11525/16.[0m
[12/09 18:18:21]  --------------------------------------------------------------------------------
[12/09 18:18:21]  Iteration: 17 (0 solution, 16 counterexamples)
[12/09 18:21:21]  Generator returned sat in 178.822810 secs.
[12/09 18:21:21]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1c_f[n][t-1] + 3/2c_f[n][t-2] + -1c_f[n][t-3] + -1S_f[n][t-1] + -3/2S_f[n][t-2] + 3/2S_f[n][t-3] + -2A_f[n][t-1] + 3/2A_f[n][t-2] + 3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:21:26]  Improved number of small numbers from 78 to 80 out of a max of 114
[12/09 18:21:26]  Verifer returned sat in 5.024236 secs.
[12/09 18:21:26]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         125588.968994         125170.307125       125588.968994       779.460094       779.460094       125170.307125         13.967136  404.694733
1         125689.203839         125270.307125       125689.203839       504.929577       504.929577       125270.307125         14.201878  404.694836
2         125689.203839         125370.307125       125689.203839         3.521127         3.521127       125370.307125         14.201878  304.694836
3         125689.203839         125470.307125       125689.203839         3.755869         3.755869       125470.307125         14.201878  204.694836
4         125689.203839         125570.307125       125689.203839         3.990610         3.990610       125570.307125         14.201878  104.694836
5         125689.203839         125670.307125       125689.203839         4.225352         4.225352       125670.307125         14.201878    4.694836
6         125689.203839         125675.001961       125689.203839         4.460094         4.460094       125675.001961         14.201878    0.000000
7         125693.898675         125679.696797       125693.898675         4.694836         4.694836       125679.696797         14.201878    0.000000
8         125701.175670         125686.973792       125701.175670         7.276995         7.276995       125686.973792         14.201878    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=50/213, buf_size=86200/213.[0m
[12/09 18:21:40]  --------------------------------------------------------------------------------
[12/09 18:21:40]  Iteration: 18 (0 solution, 17 counterexamples)
[12/09 18:29:24]  Generator returned sat in 463.483472 secs.
[12/09 18:29:25]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + 3/2c_f[n][t-2] + -3/2S_f[n][t-1] + 1/2S_f[n][t-2] + 1/2S_f[n][t-3] + -1A_f[n][t-1] + 2A_f[n][t-2] + -1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:29:29]  Improved number of small numbers from 112 to 114 out of a max of 114
[12/09 18:29:29]  Verifer returned sat in 4.094654 secs.
[12/09 18:29:29]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0         122159.078857         121299.391357       122159.078857       775.844727       775.844727       121299.391357        794.968750  64.71875
1         122259.141113         121399.391357       122259.141113       164.781006       164.781006       121399.391357        795.031006  64.71875
2         122284.359863         121489.328857       122284.359863        89.937500        89.937500       121489.328857        795.031006   0.00000
3         122424.359863         121589.328857       122424.359863       140.000000       140.000000       121589.328857        795.031006  40.00000
4         122549.391113         121689.328857       122549.391113       165.031250       165.031250       121689.328857        795.343506  64.71875
5         122649.641113         121789.328857       122649.641113       164.968750       164.968750       121789.328857        795.593506  64.71875
6         122749.828613         121889.328857       122749.828613       164.906250       164.906250       121889.328857        795.781006  64.71875
7         122849.953613         121989.328857       122849.953613       164.843750       164.843750       121989.328857        795.906006  64.71875
8         122950.016113         122089.328857       122950.016113       164.781250       164.781250       122089.328857        795.968506  64.71875
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, loss_amount=15/16, 
, fast_decrease=True, fast_increase=True, alpha=1/16, buf_size=2071/32.[0m
[12/09 18:29:52]  --------------------------------------------------------------------------------
[12/09 18:29:52]  Iteration: 19 (0 solution, 18 counterexamples)
[12/09 19:16:51]  Generator returned sat in 2817.214283 secs.
[12/09 19:16:52]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -3/2c_f[n][t-2] + 1c_f[n][t-3] + 1S_f[n][t-1] + -1S_f[n][t-2] + 1/2A_f[n][t-1] + 1A_f[n][t-2] + -3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 19:16:56]  Improved number of small numbers from 86 to 86 out of a max of 114
[12/09 19:16:56]  Verifer returned sat in 3.971683 secs.
[12/09 19:16:56]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         122159.078857         121299.391357       122159.078857       177.340278       177.340278       121299.391357        794.968750  64.718750
1         122310.063232         121399.391357       122310.063232       215.703125       215.703125       121399.391357        845.953125  64.718750
2         122340.650038         121494.696913       122340.650038        95.305556        95.305556       121494.696913        845.953125   0.000000
3         122486.233371         121594.696913       122486.233371       145.583333       145.583333       121594.696913        845.953125  45.583333
4         122661.650038         121694.696913       122661.650038       221.000000       221.000000       121694.696913        902.234375  64.718750
5         122812.681288         121794.696913       122812.681288       215.750000       215.750000       121794.696913        953.265625  64.718750
6         122958.462538         121894.696913       122958.462538       210.500000       210.500000       121894.696913        999.046875  64.718750
7         123098.993788         121994.696913       123098.993788       205.250000       205.250000       121994.696913       1039.578125  64.718750
8         123234.275038         122094.696913       123234.275038       200.000000       200.000000       122094.696913       1074.859375  64.718750
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, loss_amount=7325/32, 
, fast_decrease=True, fast_increase=True, alpha=21/4, buf_size=2071/32.[0m
[12/09 19:17:19]  --------------------------------------------------------------------------------
[12/09 19:17:19]  Iteration: 20 (0 solution, 19 counterexamples)
[12/09 19:37:22]  Generator returned sat in 1200.454955 secs.
[12/09 19:37:22]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + -2c_f[n][t-2] + 2c_f[n][t-3] + -2S_f[n][t-2] + 3/2S_f[n][t-3] + -3/2A_f[n][t-1] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 19:37:25]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 19:37:25]  Verifer returned sat in 2.453463 secs.
[12/09 19:37:25]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         122647.938232         121898.563232       122647.938232       162.609375       162.609375       121898.563232          749.3125   0.0625
1         122747.938232         121998.563232       122747.938232       100.062500       100.062500       121998.563232          749.3125   0.0625
2         122797.813232         122048.500732       122797.813232        49.937500        49.937500       122048.500732          749.3125   0.0000
3         122897.875732         122148.500732       122897.875732       100.062500       100.062500       122148.500732          749.3125   0.0625
4         123022.938232         122248.500732       123022.938232       125.125000       125.125000       122248.500732          749.7500  24.6875
5         123123.250732         122348.500732       123123.250732       125.000000       125.000000       122348.500732          750.0625  24.6875
6         123223.438232         122448.500732       123223.438232       124.875000       124.875000       122448.500732          750.2500  24.6875
7         123323.500732         122548.500732       123323.500732       124.750000       124.750000       122548.500732          750.3125  24.6875
8         123423.438232         122648.500732       123423.438232       124.625000       124.625000       122648.500732          750.3125  24.6250
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, loss_amount=1, 
, fast_decrease=True, fast_increase=True, alpha=1/8, buf_size=395/16.[0m
[12/09 19:37:38]  --------------------------------------------------------------------------------
[12/09 19:37:38]  Iteration: 21 (0 solution, 20 counterexamples)
[12/09 20:00:30]  Generator returned sat in 1370.169735 secs.
[12/09 20:00:30]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-1c_f[n][t-2] + 2S_f[n][t-1] + -2S_f[n][t-2] + -3/2A_f[n][t-1] + 2A_f[n][t-2] + -1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 20:00:33]  Improved number of small numbers from 98 to 100 out of a max of 114
[12/09 20:00:33]  Verifer returned sat in 2.987582 secs.
[12/09 20:00:33]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         122583.717773         121884.780250       122583.717773       162.609131       162.609131       121884.780250        698.687500   0.250023
1         122701.982631         121984.780250       122701.982631       118.514881       118.514881       121984.780250        698.687500  18.514881
2         122747.187988         122048.500488       122747.187988        63.720238        63.720238       122048.500488        698.687500   0.000000
3         122847.437988         122148.500488       122847.437988       100.250000       100.250000       122148.500488        698.687500   0.250000
4         123002.232631         122248.500488       123002.232631       155.044643       155.044643       122248.500488        729.044643  24.687500
5         123123.250488         122348.500488       123123.250488       145.705357       145.705357       122348.500488        750.062500  24.687500
6         123234.929060         122448.500488       123234.929060       136.366071       136.366071       122448.500488        761.741071  24.687500
7         123337.268345         122548.500488       123337.268345       127.026786       127.026786       122548.500488        764.080357  24.687500
8         123430.268345         122648.500488       123430.268345       117.687500       117.687500       122648.500488        764.080357  17.687500
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=4, loss_amount=1831/28, 
, fast_decrease=True, fast_increase=True, alpha=523/56, buf_size=395/16.[0m
[12/09 20:00:57]  --------------------------------------------------------------------------------
[12/09 20:00:57]  Iteration: 22 (0 solution, 21 counterexamples)
[12/09 20:27:48]  Generator returned sat in 1608.688562 secs.
[12/09 20:27:48]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + 1/2c_f[n][t-2] + 3/2c_f[n][t-3] + -2S_f[n][t-1] + 1/2S_f[n][t-2] + 1S_f[n][t-3] + -3/2A_f[n][t-1] + 3/2A_f[n][t-2] + 1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 20:27:52]  Improved number of small numbers from 78 to 114 out of a max of 114
[12/09 20:27:52]  Verifer returned sat in 3.993371 secs.
[12/09 20:27:52]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         108542.202393         108040.569580       108542.202393        33.084201        33.084201       108040.569580          1.476562  500.15625
1         108542.202393         108140.569580       108542.202393        99.583252        99.583252       108140.569580          1.476562  400.15625
2         108542.202393         108240.569580       108542.202393         0.117188         0.117188       108240.569580          1.476562  300.15625
3         108542.202393         108340.569580       108542.202393         0.125000         0.125000       108340.569580          1.476562  200.15625
4         108542.202393         108440.569580       108542.202393         0.132812         0.132812       108440.569580          1.476562  100.15625
5         108542.202393         108540.569580       108542.202393         0.140625         0.140625       108540.569580          1.476562    0.15625
6         108542.202393         108540.725830       108542.202393         0.148438         0.148438       108540.725830          1.476562    0.00000
7         108542.358643         108540.882080       108542.358643         0.156250         0.156250       108540.882080          1.476562    0.00000
8         108542.600830         108541.124268       108542.600830         0.242188         0.242188       108541.124268          1.476562    0.00000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/128, buf_size=16005/32.[0m
[12/09 20:28:06]  --------------------------------------------------------------------------------
[12/09 20:28:06]  Iteration: 23 (0 solution, 22 counterexamples)
[12/09 20:58:15]  Generator returned sat in 1807.419000 secs.
[12/09 20:58:15]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + -1c_f[n][t-2] + 1c_f[n][t-3] + -1S_f[n][t-1] + -1S_f[n][t-2] + 3/2S_f[n][t-3] + -1/2A_f[n][t-1] + -1A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 20:58:15]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 20:58:15]  Verifer returned sat in 0.267485 secs.
[12/09 20:58:15]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         108542.202393         108040.569580       108542.202393        33.084201        33.084201       108040.569580          1.476562  500.15625
1         108542.202393         108140.569580       108542.202393         0.000977         0.000977       108140.569580          1.476562  400.15625
2         108542.202393         108240.569580       108542.202393         0.117188         0.117188       108240.569580          1.476562  300.15625
3         108542.202393         108340.569580       108542.202393         0.125000         0.125000       108340.569580          1.476562  200.15625
4         108542.202393         108440.569580       108542.202393         0.132812         0.132812       108440.569580          1.476562  100.15625
5         108542.202393         108540.569580       108542.202393         0.140625         0.140625       108540.569580          1.476562    0.15625
6         108542.202393         108540.725830       108542.202393         0.148438         0.148438       108540.725830          1.476562    0.00000
7         108542.358643         108540.882080       108542.358643         0.156250         0.156250       108540.882080          1.476562    0.00000
8         108542.600830         108541.124268       108542.600830         0.242188         0.242188       108541.124268          1.476562    0.00000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/128, buf_size=16005/32.[0m
[12/09 20:58:29]  --------------------------------------------------------------------------------
[12/09 20:58:29]  Iteration: 24 (0 solution, 23 counterexamples)
[12/09 21:11:50]  Generator returned sat in 799.446807 secs.
[12/09 21:11:50]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(1/2c_f[n][t-1] + -3/2c_f[n][t-2] + 2S_f[n][t-1] + -2S_f[n][t-3] + -3/2A_f[n][t-1] + -1/2A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 21:11:59]  Improved number of small numbers from 82 to 84 out of a max of 114
[12/09 21:11:59]  Verifer returned sat in 8.604901 secs.
[12/09 21:11:59]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         128025.165039         127975.321316       128025.165039        33.083984        33.083984       127975.321316          0.000000  49.843723
1         128125.196316         128075.321316       128125.196316       149.875000       149.875000       128075.321316          0.031250  49.843750
2         128125.196316         128125.165066       128125.196316        29.513889        29.513889       128125.165066          0.031250   0.000000
3         128154.772705         128154.741455       128154.772705        29.576389        29.576389       128154.741455          0.031250   0.000000
4         128199.168538         128199.137288       128199.168538        44.395833        44.395833       128199.137288          0.031250   0.000000
5         128265.793538         128265.762288       128265.793538        66.625000        66.625000       128265.762288          0.031250   0.000000
6         128365.762288         128365.731038       128365.762288        99.968750        99.968750       128365.731038          0.031250   0.000000
7         128515.746663         128465.731038       128515.746663       149.984375       149.984375       128465.731038          0.171875  49.843750
8         128615.824788         128565.731038       128615.824788       149.921875       149.921875       128565.731038          0.250000  49.843750
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=2, loss_amount=7/32, 
, fast_decrease=True, fast_increase=True, alpha=1/16, buf_size=1595/32.[0m
[12/09 21:12:13]  --------------------------------------------------------------------------------
[12/09 21:12:13]  Iteration: 25 (0 solution, 24 counterexamples)
[12/10 00:22:21]  Generator returned sat in 11406.286072 secs.
[12/10 00:22:21]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -1/2c_f[n][t-2] + 2c_f[n][t-3] + -1/2S_f[n][t-1] + -2S_f[n][t-2] + 2S_f[n][t-3] + -1A_f[n][t-1] + -1/2A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 00:22:26]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/10 00:22:26]  Verifer returned sat in 4.979580 secs.
[12/10 00:22:26]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         122336.418701         121139.168701       122336.418701           11.250           11.250       121139.168701          1197.000     0.25
1         122415.043701         121218.043701       122415.043701           78.875           78.875       121218.043701          1197.000     0.00
2         122508.043701         121311.043701       122508.043701           93.000           93.000       121311.043701          1197.000     0.00
3         122604.543701         121407.543701       122604.543701           96.500           96.500       121407.543701          1197.000     0.00
4         122704.543701         121507.543701       122704.543701          100.000          100.000       121507.543701          1197.000     0.00
5         122856.293701         121607.543701       122856.293701          151.750          151.750       121607.543701          1203.750    45.00
6         122959.543701         121707.543701       122959.543701          148.250          148.250       121707.543701          1207.000    45.00
7         123059.293701         121807.543701       123059.293701          144.750          144.750       121807.543701          1207.000    44.75
8         123190.418701         121907.543701       123190.418701          175.875          175.875       121907.543701          1237.875    45.00
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=3, loss_amount=327/8, 
, fast_decrease=True, fast_increase=True, alpha=7/2, buf_size=45.[0m
[12/10 00:22:40]  --------------------------------------------------------------------------------
[12/10 00:22:40]  Iteration: 26 (0 solution, 25 counterexamples)
[12/10 00:56:45]  Generator returned sat in 2042.884726 secs.
[12/10 00:56:45]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -2c_f[n][t-2] + 2c_f[n][t-3] + -1S_f[n][t-1] + -1S_f[n][t-2] + 3/2S_f[n][t-3] + -1A_f[n][t-1] + 3/2A_f[n][t-2] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 00:56:51]  Improved number of small numbers from 78 to 80 out of a max of 114
[12/10 00:56:51]  Verifer returned sat in 5.975587 secs.
[12/10 00:56:51]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         122326.548584         121035.437667       122326.548584        73.208252        73.208252       121035.437667       1242.944444  48.166472
1         122426.493223         121135.437667       122426.493223       148.111111       148.111111       121135.437667       1242.944444  48.111111
2         122476.826556         121233.882112       122476.826556        98.444444        98.444444       121233.882112       1242.944444   0.000000
3         122625.382112         121333.882112       122625.382112       148.555556       148.555556       121333.882112       1243.333333  48.166667
4         122725.659890         121433.882112       122725.659890       148.444444       148.444444       121433.882112       1243.611111  48.166667
5         122825.826556         121533.882112       122825.826556       148.333333       148.333333       121533.882112       1243.777778  48.166667
6         122925.882112         121633.882112       122925.882112       148.222222       148.222222       121633.882112       1243.833333  48.166667
7         123025.826556         121733.882112       123025.826556       148.111111       148.111111       121733.882112       1243.833333  48.111111
8         123151.882112         121833.882112       123151.882112       174.166667       174.166667       121833.882112       1269.833333  48.166667
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=53/2, 
, fast_decrease=True, fast_increase=True, alpha=1/9, buf_size=289/6.[0m
[12/10 00:57:05]  --------------------------------------------------------------------------------
[12/10 00:57:05]  Iteration: 27 (0 solution, 26 counterexamples)
[12/10 02:37:35]  Generator returned sat in 6028.324163 secs.
[12/10 02:37:35]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -1c_f[n][t-2] + 2c_f[n][t-3] + -1S_f[n][t-1] + -1S_f[n][t-2] + 3/2S_f[n][t-3] + -3/2A_f[n][t-1] + 1A_f[n][t-2] + 1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 02:37:39]  Improved number of small numbers from 78 to 114 out of a max of 114
[12/10 02:37:39]  Verifer returned sat in 4.036283 secs.
[12/10 02:37:39]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0          140434.38208         139940.382324        140434.38208        46.312256        46.312256       139940.382324        255.749756   238.25
1          140434.38208         140040.382324        140434.38208         0.124756         0.124756       140040.382324        255.749756   138.25
2          140434.38208         140140.382324        140434.38208        19.750000        19.750000       140140.382324        255.749756    38.25
3          140434.38208         140178.632324        140434.38208        19.875000        19.875000       140178.632324        255.749756     0.00
4          140454.38208         140198.632324        140454.38208        20.000000        20.000000       140198.632324        255.749756     0.00
5          140493.63208         140237.882324        140493.63208        39.250000        39.250000       140237.882324        255.749756     0.00
6          140533.00708         140277.257324        140533.00708        39.375000        39.375000       140277.257324        255.749756     0.00
7          140572.50708         140316.757324        140572.50708        39.500000        39.500000       140316.757324        255.749756     0.00
8          140612.13208         140356.382324        140612.13208        39.625000        39.625000       140356.382324        255.749756     0.00
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=953/4.[0m
[12/10 02:37:55]  --------------------------------------------------------------------------------
[12/10 02:37:55]  Iteration: 28 (0 solution, 27 counterexamples)
[12/10 05:34:24]  Generator returned sat in 10585.272917 secs.
[12/10 05:34:24]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(2c_f[n][t-1] + -2c_f[n][t-2] + -1A_f[n][t-1] + 3/2A_f[n][t-2] + -1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 05:34:27]  Improved number of small numbers from 78 to 114 out of a max of 114
[12/10 05:34:27]  Verifer returned sat in 2.787144 secs.
[12/10 05:34:27]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         132016.404053         131916.200928       132016.404053        46.312012        46.312012       131916.200928               0.0  100.203125
1         132116.388428         132016.200928       132116.388428       200.187500       200.187500       132016.200928               0.0  100.187500
2         132116.388428         132116.200928       132116.388428         0.156250         0.156250       132116.200928               0.0    0.187500
3         132116.388428         132116.388428       132116.388428         0.171875         0.171875       132116.388428               0.0    0.000000
4         132116.654053         132116.654053       132116.654053         0.265625         0.265625       132116.654053               0.0    0.000000
5         132116.935303         132116.935303       132116.935303         0.281250         0.281250       132116.935303               0.0    0.000000
6         132117.232178         132117.232178       132117.232178         0.296875         0.296875       132117.232178               0.0    0.000000
7         132117.544678         132117.544678       132117.544678         0.312500         0.312500       132117.544678               0.0    0.000000
8         132117.872803         132117.872803       132117.872803         0.328125         0.328125       132117.872803               0.0    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/64, buf_size=6413/64.[0m
[12/10 05:34:40]  --------------------------------------------------------------------------------
[12/10 05:34:40]  Iteration: 29 (0 solution, 28 counterexamples)
[12/10 10:36:21]  Generator returned sat in 18098.146935 secs.
[12/10 10:36:21]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + -2c_f[n][t-2] + 1c_f[n][t-3] + -1S_f[n][t-1] + 1/2S_f[n][t-3] + -3/2A_f[n][t-1] + 1/2A_f[n][t-2] + 3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 10:36:25]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/10 10:36:25]  Verifer returned sat in 4.059166 secs.
[12/10 10:36:25]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         188882.763428         188362.388428       188882.763428            0.125            0.125       188362.388428               0.0  520.375
1         188882.763428         188462.388428       188882.763428           59.125           59.125       188462.388428               0.0  420.375
2         188882.763428         188562.388428       188882.763428           19.750           19.750       188562.388428               0.0  320.375
3         188882.763428         188662.388428       188882.763428           19.875           19.875       188662.388428               0.0  220.375
4         188882.763428         188762.388428       188882.763428           20.000           20.000       188762.388428               0.0  120.375
5         188882.763428         188862.388428       188882.763428           20.125           20.125       188862.388428               0.0   20.375
6         188882.763428         188882.763428       188882.763428           20.250           20.250       188882.763428               0.0    0.000
7         188903.138428         188903.138428       188903.138428           20.375           20.375       188903.138428               0.0    0.000
8         188923.638428         188923.638428       188923.638428           20.500           20.500       188923.638428               0.0    0.000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=4163/8.[0m
[12/10 10:36:39]  --------------------------------------------------------------------------------
[12/10 10:36:39]  Iteration: 30 (0 solution, 29 counterexamples)
[12/10 14:06:16]  Generator returned sat in 12575.118592 secs.
[12/10 14:06:16]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-3/2c_f[n][t-1] + -2c_f[n][t-2] + 3/2c_f[n][t-3] + -2S_f[n][t-2] + 3/2S_f[n][t-3] + -1/2A_f[n][t-1] + -1A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 14:06:17]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/10 14:06:17]  Verifer returned sat in 1.023387 secs.
[12/10 14:06:17]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         188882.763184         188362.388428       188882.763184         0.125000         0.125000       188362.388428               0.0  520.374756
1         188882.763184         188462.388428       188882.763184        39.416748        39.416748       188462.388428               0.0  420.374756
2         188882.763184         188562.388428       188882.763184        19.750000        19.750000       188562.388428               0.0  320.374756
3         188882.763184         188662.388428       188882.763184        19.875000        19.875000       188662.388428               0.0  220.374756
4         188882.763184         188762.388428       188882.763184        20.000000        20.000000       188762.388428               0.0  120.374756
5         188882.763184         188862.388428       188882.763184        20.125000        20.125000       188862.388428               0.0   20.374756
6         188882.763184         188882.763184       188882.763184        20.250000        20.250000       188882.763184               0.0    0.000000
7         188903.138184         188903.138184       188903.138184        20.375000        20.375000       188903.138184               0.0    0.000000
8         188923.638184         188923.638184       188923.638184        20.500000        20.500000       188923.638184               0.0    0.000000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=4163/8.[0m
[12/10 14:06:41]  --------------------------------------------------------------------------------
[12/10 14:06:41]  Iteration: 31 (0 solution, 30 counterexamples)
[12/10 16:27:22]  Generator returned sat in 8438.323704 secs.
[12/10 16:27:23]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -2c_f[n][t-2] + 2c_f[n][t-3] + -1/2S_f[n][t-1] + -1S_f[n][t-2] + 1S_f[n][t-3] + -2A_f[n][t-1] + 2A_f[n][t-2] + 1/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 16:27:23]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/10 16:27:23]  Verifer returned sat in 0.398537 secs.
[12/10 16:27:23]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t    queue_t
0         188562.513428         188052.419678       188562.513428         0.015625         0.015625       188052.419678               0.0  510.09375
1         188562.513428         188152.419678       188562.513428        17.523438        17.523438       188152.419678               0.0  410.09375
2         188562.513428         188252.419678       188562.513428        10.015625        10.015625       188252.419678               0.0  310.09375
3         188562.513428         188352.419678       188562.513428        10.031250        10.031250       188352.419678               0.0  210.09375
4         188562.513428         188452.419678       188562.513428        10.046875        10.046875       188452.419678               0.0  110.09375
5         188562.513428         188552.419678       188562.513428        10.062500        10.062500       188552.419678               0.0   10.09375
6         188562.513428         188562.513428       188562.513428        10.078125        10.078125       188562.513428               0.0    0.00000
7         188572.607178         188572.607178       188572.607178        10.093750        10.093750       188572.607178               0.0    0.00000
8         188582.716553         188582.716553       188582.716553        10.109375        10.109375       188582.716553               0.0    0.00000
fefficient=False, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/64, buf_size=4163/8.[0m
[12/10 16:27:37]  --------------------------------------------------------------------------------
[12/10 16:27:37]  Iteration: 32 (0 solution, 31 counterexamples)
[12/10 20:31:14]  Generator returned sat in 14614.503515 secs.
[12/10 20:31:14]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + 3/2c_f[n][t-2] + -2c_f[n][t-3] + 1/2S_f[n][t-1] + -2S_f[n][t-2] + 1S_f[n][t-3] + -2A_f[n][t-1] + 3/2A_f[n][t-2] + 1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/10 20:31:24]  Improved number of small numbers from 78 to 86 out of a max of 114
[12/10 20:31:24]  Verifer returned sat in 10.288059 secs.
[12/10 20:31:24]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         139308.379319         138775.616943       139308.379319       322.291480       322.291480       138775.616943        196.486547  336.275829
1         139308.379319         138875.616943       139308.379319       336.269043       336.269043       138875.616943        196.486547  236.275829
2         139308.379319         138975.616943       139308.379319        13.100897        13.100897       138975.616943        196.486547  136.275829
3         139308.379319         139075.616943       139308.379319        14.107623        14.107623       139075.616943        196.486547   36.275829
4         139308.379319         139111.892772       139308.379319        15.114350        15.114350       139111.892772        196.486547    0.000000
5         139324.500395         139128.013848       139324.500395        16.121076        16.121076       139128.013848        196.486547    0.000000
6         139341.628198         139145.141651       139341.628198        17.127803        17.127803       139145.141651        196.486547    0.000000
7         139367.823265         139171.336718       139367.823265        26.195067        26.195067       139171.336718        196.486547    0.000000
8         139395.025059         139198.538512       139395.025059        27.201794        27.201794       139198.538512        196.486547    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=449/446, buf_size=688693/2048.[0m
[12/10 20:31:47]  --------------------------------------------------------------------------------
[12/10 20:31:47]  Iteration: 33 (0 solution, 32 counterexamples)
[12/11 19:30:10]  Generator returned sat in 82699.430004 secs.
[12/11 19:30:11]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + 1c_f[n][t-2] + -1c_f[n][t-3] + -1/2S_f[n][t-1] + -1/2S_f[n][t-2] + 1/2S_f[n][t-3] + -2A_f[n][t-1] + 3/2A_f[n][t-2] + 1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/11 19:30:17]  Improved number of small numbers from 78 to 78 out of a max of 114
[12/11 19:30:17]  Verifer returned sat in 6.309087 secs.
[12/11 19:30:17]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0         139308.379319         138827.470228       139308.379319       402.566434       402.566434       138827.470228        144.702797  336.206294
1         139308.379319         138927.470228       139308.379319       336.202797       336.202797       138927.470228        144.702797  236.206294
2         139308.379319         139027.470228       139308.379319        12.045455        12.045455       139027.470228        144.702797  136.206294
3         139308.379319         139127.470228       139308.379319        12.048951        12.048951       139127.470228        144.702797   36.206294
4         139308.379319         139163.676522       139308.379319        12.052448        12.052448       139163.676522        144.702797    0.000000
5         139320.435263         139175.732466       139320.435263        12.055944        12.055944       139175.732466        144.702797    0.000000
6         139332.494704         139187.791906       139332.494704        12.059441        12.059441       139187.791906        144.702797    0.000000
7         139350.585613         139205.882815       139350.585613        18.090909        18.090909       139205.882815        144.702797    0.000000
8         139368.680018         139223.977221       139368.680018        18.094406        18.094406       139223.977221        144.702797    0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/286, buf_size=96155/286.[0m
[12/11 19:30:31]  --------------------------------------------------------------------------------
[12/11 19:30:31]  Iteration: 34 (0 solution, 33 counterexamples)
[12/12 03:43:46]  Generator returned sat in 29592.694091 secs.
[12/12 03:43:46]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -2c_f[n][t-2] + 3/2c_f[n][t-3] + 1/2S_f[n][t-1] + -2S_f[n][t-2] + 1S_f[n][t-3] + -2A_f[n][t-1] + 3/2A_f[n][t-2] + 1A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/12 03:43:50]  Improved number of small numbers from 78 to 114 out of a max of 114
[12/12 03:43:50]  Verifer returned sat in 3.238358 secs.
[12/12 03:43:50]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         199853.928955         199553.741455       199853.928955         0.124756         0.124756       199553.741455            0.0625  300.125
1         199853.928955         199653.741455       199853.928955         5.390625         5.390625       199653.741455            0.0625  200.125
2         199853.928955         199753.741455       199853.928955        19.750000        19.750000       199753.741455            0.0625  100.125
3         199853.928955         199853.741455       199853.928955        19.875000        19.875000       199853.741455            0.0625    0.125
4         199873.803955         199873.741455       199873.803955        20.000000        20.000000       199873.741455            0.0625    0.000
5         199893.928955         199893.866455       199893.928955        20.125000        20.125000       199893.866455            0.0625    0.000
6         199914.178955         199914.116455       199914.178955        20.250000        20.250000       199914.116455            0.0625    0.000
7         199934.553955         199934.491455       199934.553955        20.375000        20.375000       199934.491455            0.0625    0.000
8         199955.053955         199954.991455       199955.053955        20.500000        20.500000       199954.991455            0.0625    0.000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=2401/8.[0m
[12/12 03:44:04]  --------------------------------------------------------------------------------
[12/12 03:44:04]  Iteration: 35 (0 solution, 34 counterexamples)
[12/12 08:25:02]  Generator returned sat in 16855.515114 secs.
[12/12 08:25:02]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-1/2c_f[n][t-1] + -3/2c_f[n][t-3] + 3/2S_f[n][t-1] + -3/2S_f[n][t-2] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/12 08:25:03]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/12 08:25:03]  Verifer returned sat in 0.331028 secs.
[12/12 08:25:03]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         199853.928955         199553.741455       199853.928955        93.416667        93.416667       199553.741455            0.0625  300.125
1         199853.928955         199653.741455       199853.928955        93.375000        93.375000       199653.741455            0.0625  200.125
2         199853.928955         199753.741455       199853.928955        19.750000        19.750000       199753.741455            0.0625  100.125
3         199853.928955         199853.741455       199853.928955        19.875000        19.875000       199853.741455            0.0625    0.125
4         199873.803955         199873.741455       199873.803955        20.000000        20.000000       199873.741455            0.0625    0.000
5         199893.928955         199893.866455       199893.928955        20.125000        20.125000       199893.866455            0.0625    0.000
6         199914.178955         199914.116455       199914.178955        20.250000        20.250000       199914.116455            0.0625    0.000
7         199934.553955         199934.491455       199934.553955        20.375000        20.375000       199934.491455            0.0625    0.000
8         199955.053955         199954.991455       199955.053955        20.500000        20.500000       199954.991455            0.0625    0.000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=2401/8.[0m
[12/12 08:25:17]  --------------------------------------------------------------------------------
[12/12 08:25:17]  Iteration: 36 (0 solution, 35 counterexamples)
[12/13 00:39:56]  Generator returned sat in 58476.553576 secs.
[12/13 00:39:56]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + 3/2c_f[n][t-2] + -3/2c_f[n][t-3] + -1S_f[n][t-2] + 1/2S_f[n][t-3] + -2A_f[n][t-1] + 1A_f[n][t-2] + 3/2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/13 00:39:57]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/13 00:39:57]  Verifer returned sat in 0.974805 secs.
[12/13 00:39:57]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         199853.928711         199553.741211       199853.928711         100.4375         100.4375       199553.741211            0.0625  300.125
1         199853.928711         199653.741211       199853.928711          93.3750          93.3750       199653.741211            0.0625  200.125
2         199853.928711         199753.741211       199853.928711          19.7500          19.7500       199753.741211            0.0625  100.125
3         199853.928711         199853.741211       199853.928711          19.8750          19.8750       199853.741211            0.0625    0.125
4         199873.803711         199873.741211       199873.803711          20.0000          20.0000       199873.741211            0.0625    0.000
5         199893.928711         199893.866211       199893.928711          20.1250          20.1250       199893.866211            0.0625    0.000
6         199914.178711         199914.116211       199914.178711          20.2500          20.2500       199914.116211            0.0625    0.000
7         199934.553711         199934.491211       199934.553711          20.3750          20.3750       199934.491211            0.0625    0.000
8         199955.053711         199954.991211       199955.053711          20.5000          20.5000       199954.991211            0.0625    0.000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=2401/8.[0m
[12/13 00:40:21]  --------------------------------------------------------------------------------
[12/13 00:40:21]  Iteration: 37 (0 solution, 36 counterexamples)
[12/14 12:33:16]  Generator returned sat in 129171.226804 secs.
[12/14 12:33:17]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-2c_f[n][t-1] + -1/2c_f[n][t-2] + 1/2c_f[n][t-3] + -1S_f[n][t-2] + 1/2S_f[n][t-3] + -2A_f[n][t-1] + 1/2A_f[n][t-2] + 2A_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/14 12:33:17]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/14 12:33:17]  Verifer returned sat in 0.250975 secs.
[12/14 12:33:17]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t  queue_t
0         199853.928467         199553.740967       199853.928467          72.1875          72.1875       199553.740967            0.0625  300.125
1         199853.928467         199653.740967       199853.928467          93.3750          93.3750       199653.740967            0.0625  200.125
2         199853.928467         199753.740967       199853.928467          19.7500          19.7500       199753.740967            0.0625  100.125
3         199853.928467         199853.740967       199853.928467          19.8750          19.8750       199853.740967            0.0625    0.125
4         199873.803467         199873.740967       199873.803467          20.0000          20.0000       199873.740967            0.0625    0.000
5         199893.928467         199893.865967       199893.928467          20.1250          20.1250       199893.865967            0.0625    0.000
6         199914.178467         199914.115967       199914.178467          20.2500          20.2500       199914.115967            0.0625    0.000
7         199934.553467         199934.490967       199934.553467          20.3750          20.3750       199934.490967            0.0625    0.000
8         199955.053467         199954.990967       199955.053467          20.5000          20.5000       199954.990967            0.0625    0.000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, fast_decrease=True, fast_increase=False, alpha=1/8, buf_size=2401/8.[0m
[12/14 12:33:31]  --------------------------------------------------------------------------------
[12/14 12:33:31]  Iteration: 38 (0 solution, 37 counterexamples)
