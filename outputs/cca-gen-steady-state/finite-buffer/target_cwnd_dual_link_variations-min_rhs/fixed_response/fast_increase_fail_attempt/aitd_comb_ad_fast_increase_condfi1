[12/09 18:03:59]  Using search space: condfi1
[12/09 18:04:00]  Ideal: desired_util_f=1, desired_queue_bound_multiplier=0.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=0, desired_loss_amount_bound_alpha=10
[12/09 18:04:00]  Adver: desired_util_f=0.5, desired_queue_bound_multiplier=1.5, desired_queue_bound_alpha=3, desired_loss_count_bound=3, desired_loss_amount_bound_multiplier=1.5, desired_loss_amount_bound_alpha=3
[12/09 18:04:29]  --------------------------------------------------------------------------------
[12/09 18:04:29]  Iteration: 1 (0 solution, 0 counterexamples)
[12/09 18:04:29]  Generator returned sat in 0.006820 secs.
[12/09 18:04:29]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-1/2c_f[n][t-1] + 1/2S_f[n][t-1] + -1/2S_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1/2alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:04:33]  Improved number of small numbers from 114 to 114 out of a max of 114
[12/09 18:04:33]  Verifer returned sat in 4.185098 secs.
[12/09 18:04:33]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t     queue_t
0            383.500000                183.25          383.500000         0.125000         0.125000              183.25            0.0000  200.250000
1            483.375000                283.25          483.375000       300.125000       300.125000              283.25            0.0000  200.125000
2            483.375000                383.25          483.375000        45.199074        45.199074              383.25            0.0000  100.125000
3            483.375000                483.25          483.375000        77.736111        77.736111              483.25            0.0000    0.125000
4            609.791667                583.25          609.791667       126.541667       126.541667              583.25            0.0000   26.541667
5            783.000000                683.25          783.000000       199.750000       199.750000              683.25            0.0000   99.750000
6            992.812500                783.25          992.812500       309.562500       309.562500              783.25            9.3125  200.250000
7           1067.218750                883.25         1067.218750       274.656250       274.656250              883.25            9.3125  174.656250
8           1149.765625                983.25         1149.765625       257.203125       257.203125              983.25            9.3125  157.203125
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=1, loss_amount=149/16, 
, fast_decrease=True, fast_increase=True, alpha=159/8, buf_size=801/4.[0m
[12/09 18:04:47]  --------------------------------------------------------------------------------
[12/09 18:04:47]  Iteration: 2 (0 solution, 1 counterexamples)
[12/09 18:04:48]  Generator returned sat in 0.812651 secs.
[12/09 18:04:48]  Candidate solution: 
[1m[94mif(Ld_f[n][t] > Ld_f[n][t-1]):
	expr = min(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1alpha,
	           1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
else:
	expr = 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-3]) + 1alpha

if(1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-3]) + -1expr + 0Indicator(Ld_f[n][t] > Ld_f[n][t-1]) > 0)
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
elif(-1/2c_f[n][t-1] + 1/2S_f[n][t-1] + -1/2S_f[n][t-3] > 0):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 0alpha)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0expr + 0(S_f[n][t-1]-S_f[n][t-3]) + 1alpha)
[0m
[12/09 18:04:52]  Improved number of small numbers from 37 to 114 out of a max of 114
[12/09 18:04:52]  Verifer returned sat in 4.173918 secs.
[12/09 18:04:52]  Counter example: 
[93m   ideal__tot_arrival_t  ideal__tot_service_t  ideal__arrival_0,t  ideal__cwnd_0,t  ideal__rate_0,t  ideal__service_0,t  ideal__losts_0,t   queue_t
0            291.565674            291.562012          291.565674         0.124756         0.124756          291.562012          0.000000  0.003662
1            391.567627            391.562012          391.567627       100.005615       100.005615          391.562012          0.001709  0.003906
2            424.903564            424.901855          424.903564        33.339844        33.339844          424.901855          0.001709  0.000000
3            508.245361            508.243652          508.245361        83.341797        83.341797          508.243652          0.001709  0.000000
4            608.259033            608.243652          608.259033       100.013672       100.013672          608.243652          0.011475  0.003906
5            708.266846            708.243652          708.266846       100.011719       100.011719          708.243652          0.019287  0.003906
6            808.272705            808.243652          808.272705       100.009766       100.009766          808.243652          0.025146  0.003906
7            908.276611            908.243652          908.276611       100.007812       100.007812          908.243652          0.029053  0.003906
8           1008.278564           1008.243652         1008.278564       100.005859       100.005859         1008.243652          0.031006  0.003906
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=False, loss_count=5, loss_amount=15/512, 
, fast_decrease=True, fast_increase=True, alpha=1/512, buf_size=1/256.[0m
[12/09 18:05:07]  --------------------------------------------------------------------------------
[12/09 18:05:07]  Iteration: 3 (0 solution, 2 counterexamples)
[12/09 18:05:07]  Generator returned unsat in 0.034590 secs.
[12/09 18:05:07]  [96mNo more solutions found[0m
[12/09 18:05:07]  Final solutions:
[12/09 18:05:07]  Took 66.663359 secs.
