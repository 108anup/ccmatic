[08/29 18:24:56]  --------------------------------------------------------------------------------
[08/29 18:24:56]  Iteration: 1 (0 solution, 0 counterexamples)
[08/29 18:24:56]  Generator returned sat in 0.004175 secs.
[08/29 18:24:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:24:56]  Improved gap from 0.0 to 100
[08/29 18:24:57]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/29 18:24:57]  Verifer returned sat in 0.268845 secs.
[08/29 18:24:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0   -5944.811364   -6144.811364  6144.811364  -5944.811364       0.1 -6144.811364        0.0    200.0           200.0
1   -5944.811364   -6044.811364  6144.811364  -5944.811364     200.0 -6044.811364        0.0    100.0           100.0
2   -5744.911364   -5944.811364  6144.811364  -5744.911364     299.9 -5944.811364        0.0    199.9           199.9
3   -5644.711364   -5944.811364  6144.811364  -5644.711364     300.1 -5944.811364        0.1    300.0           200.0
4   -4944.511364   -5778.811364  6144.811364  -4944.511364    1000.2 -5778.811364      600.3    234.0           200.0
5   -2646.111364   -5728.811364  6144.811364  -2646.111364    2532.4 -5728.811364     2798.7    284.0           200.0
6    2566.688636   -5644.811364  6144.811364   2566.688636    5496.8 -5644.811364     7911.5    300.0           200.0
7   13860.288636   -5544.811364  6144.811364  13860.288636   11593.6 -5544.811364    19105.1    300.0           200.0
8   37215.488636   -5444.811364  6144.811364  37215.488636   23655.2 -5444.811364    42360.3    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=41760.[0m
[08/29 18:24:57]  --------------------------------------------------------------------------------
[08/29 18:24:57]  Iteration: 2 (0 solution, 1 counterexamples)
[08/29 18:24:57]  Generator returned sat in 0.091731 secs.
[08/29 18:24:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:24:57]  Improved number of small numbers from 68 to 74 out of a max of 99
[08/29 18:24:57]  Verifer returned sat in 0.491082 secs.
[08/29 18:24:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1866.688721    1766.686035 -1766.686136  1866.688721    0.099854  1766.686035     0.0000  100.002686      100.002584
1    1866.688721    1866.686136 -1766.686136  1866.688721  100.002441  1866.686136     0.0000    0.002584        0.002584
2    1966.688636    1966.686136 -1766.686136  1966.688636  100.002500  1966.686136     0.0000    0.002500        0.002500
3    2266.688636    1966.686136 -1766.686136  2266.688636  300.002500  1966.686136     0.0025  300.000000      200.000000
4    2266.688636    2106.286136 -1766.686136  2266.688636    0.010000  2106.286136     0.0025  160.400000      100.000000
5    2466.688636    2206.286136 -1766.686136  2466.688636  360.400000  2206.286136     0.0025  260.400000      200.000000
6    2566.688636    2326.287136 -1766.686136  2566.688636  360.400000  2326.287136     0.0025  240.399000      200.000000
7    2866.691136    2366.686279 -1766.686136  2866.691136  540.401500  2366.686279   200.0050  299.999857      200.000000
8    2866.691136    2466.686279 -1766.686136  2866.691136    0.010000  2466.686279   200.0050  199.999857      100.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=80001/400.[0m
[08/29 18:24:58]  --------------------------------------------------------------------------------
[08/29 18:24:58]  Iteration: 3 (0 solution, 2 counterexamples)
[08/29 18:24:58]  Generator returned sat in 0.008590 secs.
[08/29 18:24:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:24:58]  Improved gap from 0.0 to 100
[08/29 18:24:58]  Improved number of small numbers from 87 to 100 out of a max of 100
[08/29 18:24:58]  Verifer returned sat in 0.285186 secs.
[08/29 18:24:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    2234.944580    2134.944580 -1766.686279  2234.944580    0.099609  2134.944580    0.000000  100.000000           100.0
1    2234.944580    2134.944580 -1766.686279  2234.944580    0.002441  2134.944580    0.000000  100.000000             0.0
2    2234.944580    2234.944580 -1766.686279  2234.944580   99.997559  2234.944580    0.000000    0.000000          -100.0
3    2634.947266    2348.944580 -1766.686279  2634.947266  400.002686  2348.944580    0.002686  286.000000           200.0
4    2634.947266    2534.944580 -1766.686279  2634.947266    0.010000  2534.944580    0.002686  100.000000           100.0
5    3134.947266    2534.944589 -1766.686279  3134.947266  600.000000  2534.944589  300.002686  299.999991           200.0
6    3134.947266    2734.944580 -1766.686279  3134.947266    0.010000  2734.944580  300.002686  100.000000           100.0
7    3613.947266    2734.944589 -1766.686279  3613.947266  579.000000  2734.944589  579.002686  299.999991           200.0
8    3613.947266    2834.944589 -1766.686279  3613.947266    0.010000  2834.944589  579.002686  199.999991           100.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=579.[0m
[08/29 18:24:58]  --------------------------------------------------------------------------------
[08/29 18:24:58]  Iteration: 4 (0 solution, 3 counterexamples)
[08/29 18:24:58]  Generator returned sat in 0.090217 secs.
[08/29 18:24:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:24:59]  Improved gap from 0.0 to 100
[08/29 18:24:59]  Improved number of small numbers from 76 to 100 out of a max of 100
[08/29 18:24:59]  Verifer returned sat in 0.439840 secs.
[08/29 18:24:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3013.922363    2819.431641 -1766.686279  3013.922363    0.099609  2819.431641    0.000000  194.490723           100.0
1    3013.922363    2913.922363 -1766.686279  3013.922363    0.024658  2913.922363    0.000000  100.000000             0.0
2    3013.922363    3013.922363 -1766.686279  3013.922363    0.024902  3013.922363    0.000000    0.000000          -100.0
3    3413.947021    3148.433838 -1766.686279  3413.947021  400.024658  3148.433838    0.024658  265.488525           200.0
4    3513.971924    3258.101318 -1766.686279  3513.971924  365.513428  3258.101318    0.049561  255.821045           200.0
5    3613.997070    3413.922363 -1766.686279  3613.997070  355.846191  3413.922363    0.074707  200.000000           200.0
6    3792.920166    3513.922363 -1766.686279  3792.920166  378.923096  3513.922363   78.997803  200.000000           200.0
7    3966.125977    3613.922363 -1766.686279  3966.125977  373.205811  3613.922363  152.203613  200.000000           200.0
8    4131.639404    3613.922363 -1766.686279  4131.639404  365.513428  3613.922363  217.717041  300.000000           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=445783/2048.[0m
[08/29 18:24:59]  --------------------------------------------------------------------------------
[08/29 18:24:59]  Iteration: 5 (0 solution, 4 counterexamples)
[08/29 18:24:59]  Generator returned sat in 0.012877 secs.
[08/29 18:24:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:00]  Improved gap from 15.3292236328125 to 68.75
[08/29 18:25:00]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/29 18:25:00]  Verifer returned sat in 0.731947 secs.
[08/29 18:25:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3062.378174    2962.328125 -1526.686523  3062.378174    0.099365  2962.328125    0.000000  100.050049      100.049805
1    3062.378174    3062.328369 -1526.686523  3062.378174    0.049561  3062.328369    0.000000    0.049805        0.049805
2    3162.328369    3093.628174 -1526.686523  3162.328369  100.000000  3093.628174    0.000000   68.700195        0.000000
3    3651.329346    3182.427979 -1526.686523  3651.329346  557.701172  3182.427979  189.000977  279.900391      200.000000
4    3651.329346    3362.328369 -1526.686523  3651.329346  279.850586  3362.328369  189.000977  100.000000      100.000000
5    3701.329346    3372.761475 -1526.686523  3701.329346  150.000000  3372.761475  189.000977  139.566895       50.000000
6    3701.329346    3462.328369 -1495.436523  3701.329346  139.566650  3462.328369  189.000977   50.000000      -18.750000
7    3791.279541    3531.078369 -1466.636719  3791.279541  139.950195  3531.078369  189.000977   71.200195        0.000000
8    3804.454346    3602.278564 -1466.636719  3804.454346   84.375000  3602.278564  189.000977   13.174805      -86.825195
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/29 18:25:00]  --------------------------------------------------------------------------------
[08/29 18:25:00]  Iteration: 6 (0 solution, 5 counterexamples)
[08/29 18:25:00]  Generator returned sat in 0.051689 secs.
[08/29 18:25:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:02]  Verifer returned unsat in 1.673519 secs.
[08/29 18:25:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:02]  --------------------------------------------------------------------------------
[08/29 18:25:02]  Iteration: 7 (1 solution, 5 counterexamples)
[08/29 18:25:02]  Generator returned sat in 0.156367 secs.
[08/29 18:25:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:03]  Improved gap from 0.00125 to 100
[08/29 18:25:03]  Improved number of small numbers from 39 to 63 out of a max of 100
[08/29 18:25:03]  Verifer returned sat in 0.819750 secs.
[08/29 18:25:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3339.464355    3039.464600 -1703.822751  3339.464355    0.099365  3039.464600    0.000000  299.999756      199.999759
1    3339.464355    3239.464355 -1703.822751  3339.464355    0.049805  3239.464355    0.000000  100.000000       99.999759
2    3539.414795    3239.464600 -1703.822751  3539.414795  299.950439  3239.464600    0.000000  299.950195      199.950199
3    3539.414795    3421.010481 -1703.822751  3539.414795   79.002532  3421.010481    0.000000  118.404314       99.950199
4    3539.514279    3539.464596 -1703.822751  3539.514279  118.503798  3539.464596    0.000000    0.049683        0.049683
5    3717.220293    3639.464355 -1703.822751  3717.220293  177.755697  3639.464355    0.000000   77.755938       77.755697
6    3906.097900    3639.464596 -1703.822751  3906.097900  266.633545  3639.464596    0.000000  266.633304      166.633304
7    4039.414914    3839.464596 -1703.822751  4039.414914  399.950317  3839.464596    0.000000  199.950317      199.950317
8    4439.390072    3839.464600 -1703.822751  4439.390072  599.925476  3839.464600  299.925476  299.999997      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=4913979/16384.[0m
[08/29 18:25:04]  --------------------------------------------------------------------------------
[08/29 18:25:04]  Iteration: 8 (1 solution, 6 counterexamples)
[08/29 18:25:04]  Generator returned sat in 0.202978 secs.
[08/29 18:25:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:04]  Improved gap from 0.9998779296875 to 39.0625
[08/29 18:25:04]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/29 18:25:04]  Verifer returned sat in 0.335043 secs.
[08/29 18:25:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3239.464600    3039.464355 -1703.822754  3239.464600    0.099121  3039.464355    0.000000  200.000244      100.000244
1    3239.464600    3239.439453 -1703.822754  3239.464600    0.049805  3239.439453    0.000000    0.025146        0.000244
2    3239.464600    3239.464355 -1703.822754  3239.464600    0.012207  3239.464355    0.000000    0.000244      -99.999756
3    4193.414551    3339.464355 -1703.822754  4193.414551  953.950195  3339.464355  553.950195  300.000000      200.000000
4    4371.389648    3539.464355 -1703.822754  4371.389648  477.975098  3539.464355  631.925293  200.000000      200.000000
5    4411.377197    3639.464355 -1703.822754  4411.377197  239.987549  3639.464355  631.925293  139.987549      139.987549
6    4411.377197    3739.464355 -1703.822754  4411.377197    1.000000  3739.464355  631.925293   39.987549       39.987549
7    4411.377197    3740.389404 -1643.810303  4411.377197    1.000000  3740.389404  631.925293   39.062500        0.000000
8    4411.377197    3779.451904 -1643.810303  4411.377197    1.000000  3779.451904  631.925293    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/29 18:25:05]  --------------------------------------------------------------------------------
[08/29 18:25:05]  Iteration: 9 (1 solution, 7 counterexamples)
[08/29 18:25:05]  Generator returned sat in 0.187030 secs.
[08/29 18:25:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:06]  Improved gap from 30.578404017857142 to 39.0625
[08/29 18:25:06]  Improved number of small numbers from 59 to 100 out of a max of 100
[08/29 18:25:06]  Verifer returned sat in 0.893143 secs.
[08/29 18:25:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3929.492676    3929.492432 -1704.747803  3929.492676    0.098877  3929.492432      0.000    0.000244       -0.049072
1    3929.541992    3929.541748 -1704.747803  3929.541992    0.049561  3929.541748      0.000    0.000244      -99.999756
2    4329.492432    4029.541748 -1704.747803  4329.492432  399.950684  4029.541748      0.000  299.950684      199.950684
3    4979.791748    4129.541748 -1704.747803  4979.791748  950.250000  4129.541748    550.250  300.000000      200.000000
4    5155.916748    4329.541748 -1704.747803  5155.916748  476.125000  4329.541748    626.375  200.000000      200.000000
5    5194.979248    4429.541748 -1704.747803  5194.979248  239.062500  4429.541748    626.375  139.062500      139.062500
6    5194.979248    4507.289551 -1704.747803  5194.979248  120.531250  4507.289551    626.375   61.314697       39.062500
7    5194.979248    4529.541748 -1643.810303  5194.979248   61.265625  4529.541748    626.375   39.062500        0.000000
8    5194.979248    4568.604248 -1643.810303  5194.979248   31.632812  4568.604248    626.375    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/29 18:25:06]  --------------------------------------------------------------------------------
[08/29 18:25:06]  Iteration: 10 (1 solution, 8 counterexamples)
[08/29 18:25:07]  Generator returned sat in 0.375905 secs.
[08/29 18:25:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:07]  Improved gap from 0.04931640625 to 0
[08/29 18:25:07]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/29 18:25:07]  Verifer returned sat in 0.210014 secs.
[08/29 18:25:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4027.689697    4027.640381 -1902.846436  4027.689697    0.098877  4027.640381        0.0    0.049316      -99.950684
1    4127.689697    4127.640381 -1902.846436  4127.689697  100.049316  4127.640381        0.0    0.049316      -99.950684
2    4426.739014    4227.640381 -1902.846436  4426.739014  299.098633  4227.640381        0.0  199.098633       99.098633
3    4426.739014    4426.689697 -1902.846436  4426.739014  199.098633  4426.689697        0.0    0.049316       -0.901367
4    4427.689697    4427.640381 -1803.797119  4427.689697    1.000000  4427.640381        0.0    0.049316       -0.901367
5    4428.640381    4428.591064 -1704.747803  4428.640381    1.000000  4428.591064        0.0    0.049316       -0.901367
6    4429.591064    4429.541748 -1604.797119  4429.591064    1.000000  4429.541748        0.0    0.049316        0.000000
7    4430.541748    4429.591064 -1505.747803  4430.541748    1.000000  4429.591064        0.0    0.950684        0.000000
8    4430.591064    4430.541748 -1406.698486  4430.591064    1.000000  4430.541748        0.0    0.049316       -0.901367
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/29 18:25:07]  --------------------------------------------------------------------------------
[08/29 18:25:07]  Iteration: 11 (1 solution, 9 counterexamples)
[08/29 18:25:08]  Generator returned sat in 0.353948 secs.
[08/29 18:25:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:08]  Improved gap from 0.0 to 0
[08/29 18:25:08]  Improved number of small numbers from 60 to 83 out of a max of 100
[08/29 18:25:08]  Verifer returned sat in 0.548620 secs.
[08/29 18:25:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4329.628906    4129.628662 -2004.834961  4329.628906    0.098877  4129.628662        0.0  200.000244      100.000244
1    4329.628906    4229.628906 -2004.834961  4329.628906    0.001250  4229.628906        0.0  100.000000        0.000244
2    4329.628906    4329.628906 -1904.836426  4329.628906    0.001465  4329.628906        0.0    0.000000       -0.001221
3    4429.630371    4429.621387 -1904.836426  4429.630371  100.001465  4429.621387        0.0    0.008984        0.000244
4    4429.631387    4429.630137 -1804.837891  4429.631387    0.010000  4429.630137        0.0    0.001250       -0.000205
5    4429.640137    4429.638887 -1704.846436  4429.640137    0.010000  4429.638887        0.0    0.001250        0.000000
6    4429.648887    4429.640137 -1604.855186  4429.648887    0.010000  4429.640137        0.0    0.008750        0.000000
7    4429.650137    4429.648887 -1504.864990  4429.650137    0.010000  4429.648887        0.0    0.001250       -0.008555
8    4429.658887    4429.658691 -1504.864990  4429.658887    0.010000  4429.658691        0.0    0.000195      -99.999805
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/29 18:25:08]  --------------------------------------------------------------------------------
[08/29 18:25:08]  Iteration: 12 (1 solution, 10 counterexamples)
[08/29 18:25:09]  Generator returned sat in 0.044290 secs.
[08/29 18:25:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:09]  Improved gap from 0.0 to 12.5
[08/29 18:25:10]  Improved number of small numbers from 64 to 100 out of a max of 100
[08/29 18:25:10]  Verifer returned sat in 1.050630 secs.
[08/29 18:25:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3528.195068    3328.194824 -1767.335449  3528.195068    0.098877  3328.194824        0.0  200.000244      200.000000
1    3528.195068    3328.195068 -1767.335449  3528.195068    0.049316  3328.195068        0.0  200.000000      100.000000
2    3528.195068    3428.195068 -1767.335449  3528.195068  199.950684  3428.195068        0.0  100.000000        0.000000
3    3828.195068    3528.195068 -1767.335449  3828.195068  400.000000  3528.195068        0.0  300.000000      200.000000
4    3828.195068    3728.145752 -1767.335449  3828.195068  200.000000  3728.145752        0.0  100.049316      100.000000
5    3828.195068    3815.694824 -1767.335449  3828.195068  100.000000  3815.694824        0.0   12.500244        0.000000
6    3865.694824    3853.145508 -1704.835205  3865.694824   50.000000  3853.145508        0.0   12.549316        0.000000
7    3878.145508    3865.695068 -1617.335449  3878.145508   25.000000  3865.695068        0.0   12.450439       -0.049561
8    3878.195068    3878.195068 -1529.835449  3878.195068   12.500000  3878.195068        0.0    0.000000      -12.500000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/29 18:25:10]  --------------------------------------------------------------------------------
[08/29 18:25:10]  Iteration: 13 (1 solution, 11 counterexamples)
[08/29 18:25:10]  Generator returned sat in 0.298086 secs.
[08/29 18:25:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:11]  Improved gap from 98.04931640625 to 100
[08/29 18:25:11]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/29 18:25:11]  Verifer returned sat in 0.250436 secs.
[08/29 18:25:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3528.195068    3428.195068 -1867.335449  3528.195068    0.098877  3428.195068    0.000000  100.000000      100.000000
1    3528.195068    3428.195068 -1867.335449  3528.195068    0.049316  3428.195068    0.000000  100.000000        0.000000
2    3528.244385    3528.195068 -1867.335449  3528.244385  100.049316  3528.195068    0.000000    0.049316      -99.950684
3    3928.145752    3727.719727 -1867.335449  3928.145752  399.950684  3727.719727    0.000000  200.426025      199.950684
4    4028.244385    3730.145752 -1867.335449  4028.244385  300.524658  3730.145752    0.049316  298.049316      200.000000
5    4028.244385    3928.195068 -1867.335449  4028.244385    1.000000  3928.195068    0.049316  100.000000      100.000000
6    4329.244385    4028.195068 -1867.335449  4329.244385  401.000000  4028.195068  101.049316  200.000000      200.000000
7    4329.244385    4128.195068 -1867.335449  4329.244385    1.000000  4128.195068  101.049316  100.000000      100.000000
8    4628.293701    4128.195068 -1867.335449  4628.293701  399.049316  4128.195068  200.098633  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=409701/2048.[0m
[08/29 18:25:11]  --------------------------------------------------------------------------------
[08/29 18:25:11]  Iteration: 14 (1 solution, 12 counterexamples)
[08/29 18:25:12]  Generator returned sat in 0.422884 secs.
[08/29 18:25:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:12]  Improved gap from 0.0491943359375 to 100
[08/29 18:25:12]  Improved number of small numbers from 40 to 100 out of a max of 100
[08/29 18:25:12]  Verifer returned sat in 0.431031 secs.
[08/29 18:25:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3228.170410    3228.170166 -1867.335693  3228.170410    0.098633  3228.170166    0.000000    0.000244        0.000244
1    3528.194580    3228.170410 -1867.335693  3528.194580  300.024414  3228.170410    0.024414  299.999756      200.000000
2    3628.219238    3328.170410 -1867.335693  3628.219238  400.024414  3328.170410    0.049072  299.999756      200.000000
3    3628.219238    3528.170166 -1867.335693  3628.219238   24.062500  3528.170166    0.049072  100.000000      100.000000
4    3628.219238    3528.944824 -1867.335693  3628.219238   49.125000  3528.944824    0.049072   99.225342        0.000000
5    3628.243896    3628.170166 -1867.335693  3628.243896   99.250000  3628.170166    0.049072    0.024658      -99.975342
6    3827.719238    3728.170166 -1867.335693  3827.719238  199.500000  3728.170166    0.049072   99.500000       -0.500000
7    4128.219238    3828.170410 -1867.335693  4128.219238  400.000000  3828.170410    0.049072  299.999756      200.000000
8    4629.219482    3928.170410 -1867.335693  4629.219482  801.000000  3928.170410  401.049316  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=1642497/4096.[0m
[08/29 18:25:12]  --------------------------------------------------------------------------------
[08/29 18:25:12]  Iteration: 15 (1 solution, 13 counterexamples)
[08/29 18:25:13]  Generator returned sat in 0.965869 secs.
[08/29 18:25:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:14]  Improved gap from 0.0 to 1.5625
[08/29 18:25:14]  Improved number of small numbers from 78 to 88 out of a max of 100
[08/29 18:25:14]  Verifer returned sat in 0.589956 secs.
[08/29 18:25:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3128.220459    3128.219238 -1867.335693  3128.220459    0.098633  3128.219238    0.00000    0.001221      -99.998779
1    3528.220488    3228.219238 -1867.335693  3528.220488  400.001250  3228.219238    0.00125  300.000000      200.000000
2    3628.219238    3329.215332 -1867.335693  3628.219238  399.998750  3329.215332    0.00125  299.002656      199.998750
3    3628.219238    3528.219238 -1867.335693  3628.219238  299.001250  3528.219238    0.00125   99.998750       99.998750
4    3828.221738    3628.219238 -1867.335693  3828.221738  300.001250  3628.219238    0.00250  200.000000      200.000000
5    3828.221738    3728.218994 -1867.335693  3828.221738    0.010000  3728.218994    0.00250  100.000244      100.000000
6    3828.221738    3825.209473 -1867.335693  3828.221738    1.010000  3825.209473    0.00250    3.009766        0.000000
7    3828.221738    3828.219238 -1770.345459  3828.221738    2.010000  3828.219238    0.00250    0.000000       -3.009766
8    3831.231738    3831.229004 -1770.345459  3831.231738    3.010000  3831.229004    0.00250    0.000234      -99.999766
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/29 18:25:14]  --------------------------------------------------------------------------------
[08/29 18:25:14]  Iteration: 16 (1 solution, 14 counterexamples)
[08/29 18:25:15]  Generator returned sat in 0.189073 secs.
[08/29 18:25:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:15]  Improved gap from 0.0 to 39.0625
[08/29 18:25:15]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/29 18:25:15]  Verifer returned sat in 0.418694 secs.
[08/29 18:25:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3428.219238    3156.317383 -1895.433838  3428.219238    0.098633  3156.317383   0.000000  271.901855      171.901855
1    3428.219238    3356.317383 -1895.433838  3428.219238    0.049072  3356.317383   0.000000   71.901855       71.901855
2    3428.219238    3356.317383 -1867.335693  3428.219238    0.049072  3356.317383   0.000000   71.901855        0.000000
3    3694.428955    3489.156738 -1867.335693  3694.428955  338.111572  3489.156738   0.000000  205.272217      166.209717
4    3828.268311    3628.219238 -1867.335693  3828.268311  339.111572  3628.219238   0.049072  200.000000      200.000000
5    3828.268311    3628.219238 -1867.335693  3828.268311  136.950928  3628.219238   0.049072  200.000000      100.000000
6    3828.268311    3728.219238 -1867.335693  3828.268311  137.950928  3728.219238   0.049072  100.000000        0.000000
7    3867.219238    3828.219238 -1807.286621  3867.219238  138.950928  3828.219238   0.049072   38.950928       -1.000000
8    3968.219238    3868.170166 -1807.286621  3968.219238  139.950928  3868.170166   0.049072  100.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/29 18:25:16]  --------------------------------------------------------------------------------
[08/29 18:25:16]  Iteration: 17 (1 solution, 15 counterexamples)
[08/29 18:25:16]  Generator returned sat in 0.310894 secs.
[08/29 18:25:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:16]  Verifer returned unsat in 0.085516 secs.
[08/29 18:25:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:16]  --------------------------------------------------------------------------------
[08/29 18:25:16]  Iteration: 18 (2 solution, 15 counterexamples)
[08/29 18:25:17]  Generator returned sat in 0.187961 secs.
[08/29 18:25:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:17]  Improved gap from 0.01220703125 to 100
[08/29 18:25:17]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/29 18:25:17]  Verifer returned sat in 0.197213 secs.
[08/29 18:25:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0    3087.981201    2787.981201 -1867.335938  3087.981201    0.098633  2787.981201      0.000   300.00          200.00
1    3087.981201    2987.981201 -1867.335938  3087.981201    0.048828  2987.981201      0.000   100.00          100.00
2    3087.981201    2987.981201 -1867.335938  3087.981201    0.024414  2987.981201      0.000   100.00            0.00
3    3287.981201    3187.981201 -1867.335938  3287.981201  300.000000  3187.981201      0.000   100.00          100.00
4    3638.981201    3287.981201 -1867.335938  3638.981201  451.000000  3287.981201    151.000   200.00          200.00
5    3638.981201    3287.981201 -1867.335938  3638.981201  151.000000  3287.981201    151.000   200.00          100.00
6    3666.481201    3387.981201 -1867.335938  3666.481201  227.500000  3387.981201    151.000   127.50           27.50
7    3881.231201    3587.981201 -1867.335938  3881.231201  342.250000  3587.981201    151.000   142.25          142.25
8    4253.356201    3587.981201 -1867.335938  4253.356201  514.375000  3587.981201    365.375   300.00          200.00
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1715/8.[0m
[08/29 18:25:17]  --------------------------------------------------------------------------------
[08/29 18:25:17]  Iteration: 19 (2 solution, 16 counterexamples)
[08/29 18:25:18]  Generator returned sat in 0.242611 secs.
[08/29 18:25:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:18]  Improved number of small numbers from 61 to 69 out of a max of 99
[08/29 18:25:18]  Verifer returned sat in 0.597277 secs.
[08/29 18:25:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3139.647705    2787.980957 -1867.336182  3139.647705    0.098145  2787.980957  150.999783  200.666965      100.666965
1    3139.647705    2887.980957 -1867.336182  3139.647705    0.048828  2887.980957  150.999783  100.666965        0.666965
2    3139.647705    2988.647588 -1867.336182  3139.647705    0.000244  2988.647588  150.999783    0.000335      -99.333035
3    3338.980849    3187.980957 -1867.336182  3338.980849  199.333478  3187.980957  150.999783    0.000109        0.000109
4    3638.980957    3287.980957 -1867.336182  3638.980957  300.000217  3287.980957  151.000000  200.000000      200.000000
5    3638.980957    3287.980957 -1867.336182  3638.980957  151.000109  3287.980957  151.000000  200.000000      100.000000
6    3666.481120    3387.980957 -1867.336182  3666.481120  227.500163  3387.980957  151.000000  127.500163       27.500163
7    3881.231201    3587.980957 -1867.336182  3881.231201  342.250244  3587.980957  151.000000  142.250244      142.250244
8    4253.356323    3587.980957 -1867.336182  4253.356323  514.375366  3587.980957  365.375366  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1756163/8192.[0m
[08/29 18:25:19]  --------------------------------------------------------------------------------
[08/29 18:25:19]  Iteration: 20 (2 solution, 17 counterexamples)
[08/29 18:25:19]  Generator returned sat in 0.511328 secs.
[08/29 18:25:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:20]  Improved gap from 0.0 to 14.0625
[08/29 18:25:21]  Improved number of small numbers from 59 to 79 out of a max of 100
[08/29 18:25:21]  Verifer returned sat in 1.313324 secs.
[08/29 18:25:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3086.164795    3086.164551 -1867.336182  3086.164795    0.097900  3086.164551   0.000000    0.000244      -97.902129
1    3384.115723    3184.067139 -1867.336182  3384.115723  297.951172  3184.067139   0.000000  200.048584      100.048799
2    3384.115967    3384.066924 -1867.336182  3384.115967  200.048828  3384.066924   0.000000    0.049043        0.049043
3    3684.115752    3484.066895 -1867.336182  3684.115752  300.048828  3484.066895   0.048828  200.000029      200.000000
4    3684.115752    3584.066895 -1867.336182  3684.115752  199.951172  3584.066895   0.048828  100.000029      100.000000
5    3685.091309    3684.066924 -1867.336182  3685.091309  100.975586  3684.066924   0.048828    0.975557        0.975557
6    3735.603545    3684.067139 -1818.823975  3735.603545   51.487793  3684.067139   0.048828   51.487578        0.000000
7    3735.603545    3735.554717 -1733.195801  3735.603545   26.743896  3735.554717   0.048828    0.000000      -14.371826
8    3749.975493    3749.926665 -1733.195801  3749.975493   14.371948  3749.926665   0.048828    0.000000      -99.999878
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/29 18:25:21]  --------------------------------------------------------------------------------
[08/29 18:25:21]  Iteration: 21 (2 solution, 18 counterexamples)
[08/29 18:25:21]  Generator returned sat in 0.109886 secs.
[08/29 18:25:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:22]  Improved gap from 0.0487060546875 to 14.0625
[08/29 18:25:22]  Improved number of small numbers from 50 to 100 out of a max of 100
[08/29 18:25:22]  Verifer returned sat in 0.934106 secs.
[08/29 18:25:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3625.953857    3325.954102 -2109.223145  3625.953857    0.097900  3325.954102        0.0  299.999756      200.000000
1    3625.953857    3425.954102 -2109.223145  3625.953857    0.048584  3425.954102        0.0  199.999756      100.000000
2    3825.905273    3525.953857 -2109.223145  3825.905273  399.951172  3525.953857        0.0  299.951416      199.951416
3    3913.953857    3718.905518 -2109.223145  3913.953857  388.000000  3718.905518        0.0  195.048340      188.000000
4    3913.953857    3825.953857 -2109.223145  3913.953857  195.000000  3825.953857        0.0   88.000000       88.000000
5    3924.453857    3874.252686 -2107.723145  3924.453857   98.500000  3874.252686        0.0   50.201172        0.000000
6    3924.502686    3924.454102 -2033.799561  3924.502686   50.250000  3924.454102        0.0    0.048584      -26.027588
7    3950.579102    3950.530518 -1947.862305  3950.579102   26.125000  3950.530518        0.0    0.048584      -14.013916
8    3964.593018    3964.593018 -1947.862061  3964.593018   14.062500  3964.593018        0.0    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/29 18:25:23]  --------------------------------------------------------------------------------
[08/29 18:25:23]  Iteration: 22 (2 solution, 19 counterexamples)
[08/29 18:25:25]  Generator returned sat in 2.211630 secs.
[08/29 18:25:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:27]  Verifer returned unsat in 1.465334 secs.
[08/29 18:25:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:27]  --------------------------------------------------------------------------------
[08/29 18:25:27]  Iteration: 23 (3 solution, 19 counterexamples)
[08/29 18:25:27]  Generator returned sat in 0.134029 secs.
[08/29 18:25:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:29]  Verifer returned unsat in 1.763068 secs.
[08/29 18:25:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:29]  --------------------------------------------------------------------------------
[08/29 18:25:29]  Iteration: 24 (4 solution, 19 counterexamples)
[08/29 18:25:29]  Generator returned sat in 0.070197 secs.
[08/29 18:25:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:32]  Verifer returned unsat in 2.404774 secs.
[08/29 18:25:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:32]  --------------------------------------------------------------------------------
[08/29 18:25:32]  Iteration: 25 (5 solution, 19 counterexamples)
[08/29 18:25:32]  Generator returned sat in 0.151772 secs.
[08/29 18:25:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:33]  Verifer returned unsat in 0.810542 secs.
[08/29 18:25:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:33]  --------------------------------------------------------------------------------
[08/29 18:25:33]  Iteration: 26 (6 solution, 19 counterexamples)
[08/29 18:25:33]  Generator returned sat in 0.061089 secs.
[08/29 18:25:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:34]  Verifer returned unsat in 1.091510 secs.
[08/29 18:25:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:34]  --------------------------------------------------------------------------------
[08/29 18:25:34]  Iteration: 27 (7 solution, 19 counterexamples)
[08/29 18:25:35]  Generator returned sat in 0.157531 secs.
[08/29 18:25:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:38]  Verifer returned unsat in 3.085888 secs.
[08/29 18:25:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:38]  --------------------------------------------------------------------------------
[08/29 18:25:38]  Iteration: 28 (8 solution, 19 counterexamples)
[08/29 18:25:38]  Generator returned sat in 0.066780 secs.
[08/29 18:25:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:40]  Verifer returned unsat in 1.518710 secs.
[08/29 18:25:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:40]  --------------------------------------------------------------------------------
[08/29 18:25:40]  Iteration: 29 (9 solution, 19 counterexamples)
[08/29 18:25:40]  Generator returned sat in 0.124956 secs.
[08/29 18:25:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:43]  Verifer returned unsat in 2.332424 secs.
[08/29 18:25:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:43]  --------------------------------------------------------------------------------
[08/29 18:25:43]  Iteration: 30 (10 solution, 19 counterexamples)
[08/29 18:25:43]  Generator returned sat in 0.060238 secs.
[08/29 18:25:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:45]  Verifer returned unsat in 1.721102 secs.
[08/29 18:25:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:45]  --------------------------------------------------------------------------------
[08/29 18:25:45]  Iteration: 31 (11 solution, 19 counterexamples)
[08/29 18:25:46]  Generator returned sat in 1.356029 secs.
[08/29 18:25:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:47]  Verifer returned unsat in 0.098928 secs.
[08/29 18:25:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:47]  --------------------------------------------------------------------------------
[08/29 18:25:47]  Iteration: 32 (12 solution, 19 counterexamples)
[08/29 18:25:47]  Generator returned sat in 0.509916 secs.
[08/29 18:25:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:49]  Verifer returned unsat in 2.159685 secs.
[08/29 18:25:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:49]  --------------------------------------------------------------------------------
[08/29 18:25:49]  Iteration: 33 (13 solution, 19 counterexamples)
[08/29 18:25:50]  Generator returned sat in 0.140070 secs.
[08/29 18:25:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:50]  Improved gap from 0.0 to 79.6875
[08/29 18:25:51]  Improved number of small numbers from 18 to 100 out of a max of 100
[08/29 18:25:51]  Verifer returned sat in 0.666514 secs.
[08/29 18:25:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4023.609863   -4023.609863 -2095.915039 -4023.609863    0.097900 -4023.609863   0.000000    0.000000     -100.000000
1   -3623.658447   -3923.609863 -2095.915039 -3623.658447  399.951416 -3923.609863   0.000000  299.951416      199.951416
2   -3523.561035   -3723.609863 -2095.915039 -3523.561035  400.048828 -3723.609863   0.048828  200.000000      200.000000
3   -3523.561035   -3723.609863 -2095.915039 -3523.561035   80.576172 -3723.609863   0.048828  200.000000      100.000000
4   -3523.561035   -3523.658691 -2095.915039 -3523.561035   80.576172 -3523.658691   0.048828    0.048828        0.000000
5   -3443.033691   -3522.769775 -2076.442627 -3443.033691   80.576172 -3522.769775   0.048828   79.687256       -0.000244
6   -3442.144775   -3443.082275 -2056.130127 -3442.144775   80.576172 -3443.082275   0.048828    0.888672      -78.798828
7   -3362.457275   -3363.394775 -2035.817627 -3362.457275   80.576172 -3363.394775   0.048828    0.888672      -78.798828
8   -3282.769775   -3283.707275 -2015.505371 -3282.769775   80.576172 -3283.707275   0.048828    0.888672      -78.799072
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/29 18:25:51]  --------------------------------------------------------------------------------
[08/29 18:25:51]  Iteration: 34 (13 solution, 20 counterexamples)
[08/29 18:25:52]  Generator returned sat in 0.458985 secs.
[08/29 18:25:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:52]  Improved gap from 0.00125 to 100
[08/29 18:25:52]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/29 18:25:52]  Verifer returned sat in 0.286089 secs.
[08/29 18:25:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -3923.040771   -4183.040771 -2056.130127 -3923.040771    0.097656 -4183.040771   0.000000  260.000000      199.998535
1   -3923.039307   -4023.039551 -2056.130127 -3923.039307  260.001465 -4023.039551   0.000000  100.000244      100.000000
2   -3923.039307   -4023.039307 -2056.130127 -3923.039307    0.001465 -4023.039307   0.000000  100.000000        0.000000
3   -3623.039307   -3853.039307 -2056.130127 -3623.039307  400.000000 -3853.039307   0.000000  230.000000      200.000000
4   -3523.037842   -3783.040771 -2056.130127 -3523.037842  330.001465 -3783.040771   0.001465  260.001465      200.000000
5   -3523.037842   -3673.038818 -2056.130127 -3523.037842    0.010000 -3673.038818   0.001465  149.999512      100.000000
6   -3323.036865   -3523.039307 -2056.130127 -3323.036865  350.000488 -3523.039307   0.002441  200.000000      200.000000
7   -3323.036865   -3453.039307 -2056.130127 -3323.036865    0.010000 -3453.039307   0.002441  130.000000      100.000000
8   -3123.035400   -3423.039307 -2056.130127 -3123.035400  330.001465 -3423.039307   0.003906  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=5/2048.[0m
[08/29 18:25:52]  --------------------------------------------------------------------------------
[08/29 18:25:52]  Iteration: 35 (13 solution, 21 counterexamples)
[08/29 18:25:53]  Generator returned sat in 0.459986 secs.
[08/29 18:25:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:54]  Verifer returned unsat in 1.397501 secs.
[08/29 18:25:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:54]  --------------------------------------------------------------------------------
[08/29 18:25:54]  Iteration: 36 (14 solution, 21 counterexamples)
[08/29 18:25:56]  Generator returned unsat in 1.179187 secs.
[08/29 18:25:56]  [96mNo more solutions found[0m
[08/29 18:25:56]  Final solutions:
[08/29 18:25:56]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:56]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:56]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:56]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:56]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:56]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/29 18:25:56]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/29 18:25:56]  Took 60.042242 secs.
