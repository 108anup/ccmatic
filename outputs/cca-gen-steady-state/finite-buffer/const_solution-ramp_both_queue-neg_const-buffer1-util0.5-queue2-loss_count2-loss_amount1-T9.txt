[08/30 13:45:28]  --------------------------------------------------------------------------------
[08/30 13:45:28]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 13:45:28]  Generator returned sat in 0.005198 secs.
[08/30 13:45:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:28]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 13:45:28]  Verifer returned sat in 0.219504 secs.
[08/30 13:45:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0          -99.9         -299.9     299.9        -99.9       0.1       -299.9        0.0    200.0           200.0
1            0.0         -199.9     299.9          0.0     299.9       -199.9        0.0    199.9           199.9
2            0.0          -99.9     299.9          0.0       0.1        -99.9        0.0     99.9            99.9
3          200.2            0.1     299.9        200.2     300.1          0.1        0.1    200.0           200.0
4         1201.4            0.1     299.9       1201.4    1201.2          0.1      901.3    300.0           200.0
5         3704.8          116.1     299.9       3704.8    2803.4        116.1     3304.7    284.0           200.0
6         9460.6          259.1     299.9       9460.6    6039.8        259.1     8960.5    241.0           200.0
7        21818.2          400.1     299.9      21818.2   12598.6        400.1    21218.1    200.0           200.0
8        47616.4          400.1     299.9      47616.4   25998.2        400.1    46916.3    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=46015, 
.[0m
[08/30 13:45:28]  --------------------------------------------------------------------------------
[08/30 13:45:28]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 13:45:28]  Generator returned sat in 0.053277 secs.
[08/30 13:45:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:29]  Improved number of small numbers from 38 to 44 out of a max of 99
[08/30 13:45:29]  Verifer returned sat in 0.902905 secs.
[08/30 13:45:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15894.833008   15694.833057 -15694.833057  15894.833008    0.099609  15694.833057    0.000000  199.999951      199.999951
1   15994.783130   15694.833057 -15694.833057  15994.783130  299.950073  15694.833057    0.000000  299.950073      199.950073
2   15994.783130   15794.833057 -15694.833057  15994.783130    0.049805  15794.833057    0.000000  199.950073       99.950073
3   16195.017139   15960.804980 -15694.833057  16195.017139  400.184082  15960.804980    0.184082  234.028076      200.000000
4   16295.067065   16049.507007 -15694.833057  16295.067065  334.078003  16049.507007    0.234009  245.326050      200.000000
5   16395.116992   16194.833057 -15694.833057  16395.116992  345.375977  16194.833057    0.283936  200.000000      200.000000
6   16568.804980   16294.833057 -15694.833057  16568.804980  373.687988  16294.833057   73.971924  200.000000      200.000000
7   16723.663013   16360.804980 -15694.833057  16723.663013  354.858032  16360.804980  128.829956  234.028076      200.000000
8   16823.712939   16394.833252 -15694.833057  16823.712939  334.078003  16394.833252  128.879883  299.999805      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=1053867/8192, 
.[0m
[08/30 13:45:29]  --------------------------------------------------------------------------------
[08/30 13:45:29]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 13:45:30]  Generator returned sat in 0.011099 secs.
[08/30 13:45:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:30]  Improved gap from 0.1494140625 to 100
[08/30 13:45:31]  Improved number of small numbers from 39 to 49 out of a max of 100
[08/30 13:45:31]  Verifer returned sat in 0.999563 secs.
[08/30 13:45:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15891.844238   15607.291299 -15691.844428  15891.844238    0.099365  15607.291299    0.000000  284.552939       199.99981
1   15891.844238   15691.844428 -15691.844428  15891.844238  284.540771  15691.844428    0.000000  199.999810        99.99981
2   15891.844238   15791.844428 -15691.844428  15891.844238  199.987549  15791.844428    0.000000   99.999810        -0.00019
3   16191.856879   15930.330869 -15691.844428  16191.856879  400.012451  15930.330869    0.012451  261.513559       200.00000
4   16291.869330   16038.010725 -15691.844428  16291.869330  361.526010  16038.010725    0.024902  253.833703       200.00000
5   16391.881781   16191.844428 -15691.844428  16391.881781  353.846154  16191.844428    0.037354  200.000000       200.00000
6   16568.804858   16291.844428 -15691.844428  16568.804858  376.923077  16291.844428   76.960430  200.000000       200.00000
7   16738.023176   16391.844428 -15691.844428  16738.023176  369.218318  16391.844428  146.178748  200.000000       200.00000
8   16899.549187   16391.844482 -15691.844428  16899.549187  361.526010  16391.844482  207.704759  299.999946       200.00000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=11058537/53248, 
.[0m
[08/30 13:45:31]  --------------------------------------------------------------------------------
[08/30 13:45:31]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 13:45:31]  Generator returned sat in 0.509697 secs.
[08/30 13:45:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:32]  Improved gap from 0.0 to 100
[08/30 13:45:32]  Improved number of small numbers from 55 to 71 out of a max of 100
[08/30 13:45:32]  Verifer returned sat in 0.739818 secs.
[08/30 13:45:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15791.119629   15591.119873 -15691.119656  15791.119629    0.099609  15591.119873    0.000000  199.999756       99.999973
1   15791.119629   15691.119873 -15691.119656  15791.119629  199.950195  15691.119873    0.000000   99.999756       -0.000027
2   15891.119873   15791.119656 -15691.119656  15891.119873  200.000000  15791.119656    0.000000  100.000217        0.000217
3   15994.364013   15891.119656 -15691.119656  15994.364013  203.244358  15891.119656    0.000000  103.244358        3.244358
4   16194.986192   16091.119656 -15691.119656  16194.986192  303.866536  16091.119656    0.000000  103.866536      103.866536
5   16545.919461   16191.119656 -15691.119656  16545.919461  454.799805  16191.119656  154.799805  200.000000      200.000000
6   16545.919461   16291.119629 -15691.119656  16545.919461  199.000000  16291.119629  154.799805  100.000027      100.000000
7   16743.419434   16391.119656 -15691.119656  16743.419434  297.500000  16391.119656  154.799805  197.499973      197.499973
8   16991.169461   16491.119629 -15691.119656  16991.169461  445.250000  16491.119629  300.049805  200.000027      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=307251/1024, 
.[0m
[08/30 13:45:32]  --------------------------------------------------------------------------------
[08/30 13:45:32]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 13:45:33]  Generator returned sat in 0.355935 secs.
[08/30 13:45:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:45:33]  Improved gap from 0.00125 to 100
[08/30 13:45:33]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 13:45:33]  Verifer returned sat in 0.288371 secs.
[08/30 13:45:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15750.994141   15747.894775 -15750.969482  15750.994141    0.099609  15747.894775    0.000000    3.099365        0.024658
1   15750.994141   15750.969482 -15750.969482  15750.994141    0.024658  15750.969482    0.000000    0.024658      -99.975342
2   15850.994141   15850.969482 -15750.969482  15850.994141  100.024658  15850.969482    0.000000    0.024658      -99.975342
3   16250.994385   16049.944580 -15750.969482  16250.994385  400.024902  16049.944580    0.024902  201.024902      200.000000
4   16351.019287   16148.919678 -15750.969482  16351.019287  301.049805  16148.919678    0.049805  202.049805      200.000000
5   16545.919678   16250.969482 -15750.969482  16545.919678  396.950195  16250.969482   94.950195  200.000000      200.000000
6   16744.919678   16350.969482 -15750.969482  16744.919678  399.000000  16350.969482  193.950195  200.000000      200.000000
7   16844.944580   16450.969482 -15750.969482  16844.944580  300.024902  16450.969482  193.975098  200.000000      200.000000
8   16945.994385   16450.969482 -15750.969482  16945.994385  301.049805  16450.969482  195.024902  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=399309/2048, 
.[0m
[08/30 13:45:34]  --------------------------------------------------------------------------------
[08/30 13:45:34]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 13:45:34]  Generator returned sat in 0.034150 secs.
[08/30 13:45:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:34]  Improved gap from 0.0 to 1.5625
[08/30 13:45:35]  Improved number of small numbers from 71 to 87 out of a max of 100
[08/30 13:45:35]  Verifer returned sat in 1.173714 secs.
[08/30 13:45:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   15943.944580   15743.944580 -15743.944580  15943.944580    0.099609  15743.944580        0.0  200.000000      200.000000
1   16043.923096   15843.944580 -15743.944580  16043.923096  299.978516  15843.944580        0.0  199.978516      199.978516
2   16045.858154   15943.944580 -15743.944580  16045.858154  201.913574  15943.944580        0.0  101.913574      101.913574
3   16045.858154   16043.944580 -15743.944580  16045.858154    1.942387  16043.944580        0.0    1.913574        1.913574
4   16045.858160   16043.944580 -15645.858160  16045.858160    1.913580  16043.944580        0.0    1.913580        0.000000
5   16045.858160   16045.858160 -15547.420898  16045.858160    1.870370  16045.858160        0.0    0.000000       -1.562738
6   16047.663716   16047.642111 -15449.204834  16047.663716    1.805556  16047.642111        0.0    0.021605       -1.541118
7   16049.350444   16049.328613 -15350.891113  16049.350444    1.708333  16049.328613        0.0    0.021831       -1.540669
8   16050.891113   16050.891113 -15252.453857  16050.891113    1.562500  16050.891113        0.0    0.000000       -1.562744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:35]  --------------------------------------------------------------------------------
[08/30 13:45:35]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 13:45:36]  Generator returned sat in 0.710896 secs.
[08/30 13:45:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:36]  Improved gap from 0.00125 to 100
[08/30 13:45:36]  Improved number of small numbers from 26 to 100 out of a max of 100
[08/30 13:45:36]  Verifer returned sat in 0.466404 secs.
[08/30 13:45:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15397.426514   15397.376953 -15397.377197  15397.426514    0.099365  15397.376953    0.000000    0.049561        0.049561
1   15397.426758   15397.376953 -15397.377197  15397.426758    0.049805  15397.376953    0.000000    0.049805      -99.950195
2   15497.426514   15497.376953 -15397.377197  15497.426514  100.049561  15497.376953    0.000000    0.049561      -99.950439
3   15971.793701   15639.937744 -15397.377197  15971.793701  474.416748  15639.937744   74.416748  257.439209      200.000000
4   16071.843262   15745.580566 -15397.377197  16071.843262  357.488770  15745.580566   74.466309  251.796387      200.000000
5   16171.893066   15897.376953 -15397.377197  16171.893066  351.846191  15897.376953   74.516113  200.000000      200.000000
6   16346.816162   15997.376953 -15397.377197  16346.816162  374.923096  15997.376953  149.439209  200.000000      200.000000
7   16511.997314   16097.376953 -15397.377197  16511.997314  365.181152  16097.376953  214.620361  200.000000      200.000000
8   16669.486084   16097.376953 -15397.377197  16669.486084  357.488770  16097.376953  272.109131  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=809545/4096, 
.[0m
[08/30 13:45:37]  --------------------------------------------------------------------------------
[08/30 13:45:37]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 13:45:37]  Generator returned sat in 0.209593 secs.
[08/30 13:45:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:37]  Improved gap from 0.0 to 100
[08/30 13:45:38]  Improved number of small numbers from 55 to 55 out of a max of 100
[08/30 13:45:38]  Verifer returned sat in 0.627685 secs.
[08/30 13:45:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15797.376953   15497.426636 -15397.377197  15797.376953    0.099365  15497.426636    0.000000  299.950317      200.000000
1   15897.426636   15597.376953 -15397.377197  15897.426636  400.000000  15597.376953    0.049683  300.000000      200.000000
2   15897.476318   15797.376953 -15397.377197  15897.476318  300.049683  15797.376953    0.049683  100.049683      100.049683
3   15897.476318   15797.376953 -15397.377197  15897.476318   25.934395  15797.376953    0.049683  100.049683        0.049683
4   15897.476318   15897.376953 -15397.377197  15897.476318   50.868790  15897.376953    0.049683    0.049683      -99.950317
5   15998.164215   15997.376953 -15397.377197  15998.164215  100.737579  15997.376953    0.049683    0.737579      -99.262421
6   16197.901794   16097.376953 -15397.377197  16197.901794  200.475159  16097.376953    0.049683  100.475159        0.475159
7   16497.376953   16197.376953 -15397.377197  16497.376953  399.950317  16197.376953    0.049683  299.950317      199.950317
8   16996.327271   16297.376953 -15397.377197  16996.327271  798.900635  16297.376953  398.950317  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1633897/4096, 
.[0m
[08/30 13:45:38]  --------------------------------------------------------------------------------
[08/30 13:45:38]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 13:45:38]  Generator returned sat in 0.195697 secs.
[08/30 13:45:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:39]  Improved number of small numbers from 83 to 83 out of a max of 99
[08/30 13:45:39]  Verifer returned sat in 0.300653 secs.
[08/30 13:45:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15697.376953   15497.376953 -15397.377197  15697.376953    0.099365  15497.376953    0.000000  200.000000      100.000000
1   15697.376953   15597.376953 -15397.377197  15697.376953  100.000000  15597.376953    0.000000  100.000000        0.000000
2   15997.426514   15797.376953 -15397.377197  15997.426514  400.049561  15797.376953    0.049561  200.000000      200.000000
3   15997.426514   15897.376953 -15397.377197  15997.426514   19.914602  15897.376953    0.049561  100.000000      100.000000
4   15997.426514   15897.376953 -15397.377197  15997.426514   40.829203  15897.376953    0.049561  100.000000        0.000000
5   15997.426514   15997.376953 -15397.377197  15997.426514   82.658407  15997.376953    0.049561    0.000000     -100.000000
6   16163.743327   16163.693766 -15397.377197  16163.743327  166.316813  16163.693766    0.049561    0.000000      -33.683187
7   16497.376953   16229.159261 -15397.377197  16497.376953  333.633626  16229.159261    0.049561  268.168132      199.950439
8   16897.476074   16397.376953 -15397.377197  16897.476074  668.267253  16397.376953  300.099121  200.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1229003/4096, 
.[0m
[08/30 13:45:39]  --------------------------------------------------------------------------------
[08/30 13:45:39]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 13:45:39]  Generator returned sat in 0.056392 secs.
[08/30 13:45:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:45:40]  Improved number of small numbers from 40 to 81 out of a max of 99
[08/30 13:45:40]  Verifer returned sat in 0.609322 secs.
[08/30 13:45:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   15597.426270   15497.377197 -15397.377441  15597.426270    0.099121  15497.377197    0.000000  100.049072        0.049072
1   15597.426270   15597.377197 -15397.377441  15597.426270    0.049561  15597.377197    0.000000    0.049072      -99.950928
2   15997.426514   15797.377197 -15397.377441  15997.426514  400.049316  15797.377197    0.049316  200.000000      200.000000
3   15997.426514   15797.377197 -15397.377441  15997.426514   18.751545  15797.377197    0.049316  200.000000      100.000000
4   15997.426514   15897.377197 -15397.377441  15997.426514   37.503090  15897.377197    0.049316  100.000000        0.000000
5   15997.426514   15997.377197 -15397.377441  15997.426514   75.006180  15997.377197    0.049316    0.000000     -100.000000
6   16147.438873   16097.377197 -15397.377441  16147.438873  150.012360  16097.377197    0.049316   50.012360      -49.987640
7   16397.451233   16297.377075 -15397.377441  16397.451233  300.024719  16297.377075    0.049316  100.024841      100.024719
8   16897.475830   16297.377197 -15397.377441  16897.475830  600.049438  16297.377197  300.098633  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=614501/2048, 
.[0m
[08/30 13:45:40]  --------------------------------------------------------------------------------
[08/30 13:45:40]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 13:45:40]  Generator returned sat in 0.303107 secs.
[08/30 13:45:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:41]  Improved gap from 77.25430913226594 to 100
[08/30 13:45:41]  Improved number of small numbers from 94 to 94 out of a max of 100
[08/30 13:45:41]  Verifer returned sat in 0.304170 secs.
[08/30 13:45:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   15997.426514   15697.426514 -15397.377686  15997.426514    0.099121  15697.426514        0.0  300.000000      200.000000
1   15997.426514   15797.426514 -15397.377686  15997.426514    0.049316  15797.426514        0.0  200.000000      100.000000
2   15997.426514   15920.043764 -15397.377686  15997.426514  200.000000  15920.043764        0.0   77.382749        0.000000
3   15997.451172   15997.426514 -15397.377686  15997.451172   77.407407  15997.426514        0.0    0.024658      -99.975342
4   16114.537625   16097.426514 -15397.377686  16114.537625  117.111111  16097.426514        0.0   17.111111      -82.888889
5   16274.093180   16197.426514 -15397.377686  16274.093180  176.666667  16197.426514        0.0   76.666667      -23.333333
6   16463.426514   16297.426514 -15397.377686  16463.426514  266.000000  16297.426514        0.0  166.000000       66.000000
7   16697.426514   16497.426514 -15397.377686  16697.426514  400.000000  16497.426514        0.0  200.000000      200.000000
8   17098.426514   16497.426514 -15397.377686  17098.426514  601.000000  16497.426514      301.0  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=301, 
.[0m
[08/30 13:45:41]  --------------------------------------------------------------------------------
[08/30 13:45:41]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 13:45:42]  Generator returned sat in 0.786466 secs.
[08/30 13:45:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:42]  Improved gap from 0.0025 to 0
[08/30 13:45:43]  Improved number of small numbers from 55 to 84 out of a max of 100
[08/30 13:45:43]  Verifer returned sat in 0.582665 secs.
[08/30 13:45:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16698.418701   16398.418945 -15497.375244  16698.418701    0.098877  16398.418945        0.0  299.999756      199.999873
1   16698.418701   16498.418945 -15497.375244  16698.418701    0.002441  16498.418945        0.0  199.999756       99.999873
2   16698.418701   16621.035889 -15497.375186  16698.418701  199.999756  16621.035889        0.0   77.382812       -0.000068
3   16898.421143   16798.418701 -15497.375186  16898.421143  277.385254  16798.418701        0.0  100.002441      100.002373
4   16898.421143   16898.408936 -15497.375186  16898.421143    0.010000  16898.408936        0.0    0.012207        0.002373
5   16898.421143   16898.418770 -15397.377930  16898.421143    0.010000  16898.418770        0.0    0.002373       -0.000371
6   16898.428770   16898.426270 -15297.385254  16898.428770    0.010000  16898.426270        0.0    0.002500       -0.000068
7   16898.436270   16898.436270 -15197.402588  16898.436270    0.010000  16898.436270        0.0    0.000000       -0.009902
8   16898.446270   16898.446270 -15097.402832  16898.446270    0.010000  16898.446270        0.0    0.000000       -0.000146
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:43]  --------------------------------------------------------------------------------
[08/30 13:45:43]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 13:45:43]  Generator returned sat in 0.308880 secs.
[08/30 13:45:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:44]  Improved gap from 99.0 to 100
[08/30 13:45:44]  Improved number of small numbers from 54 to 58 out of a max of 100
[08/30 13:45:44]  Verifer returned sat in 0.900145 secs.
[08/30 13:45:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16596.413574   16396.413770 -15395.370186  16596.413574    0.098633  16396.413770    0.00000  199.999805      199.999805
1   16696.415020   16496.413770 -15395.370186  16696.415020  300.001250  16496.413770    0.00125  200.000000      200.000000
2   16696.415020   16505.428770 -15395.370186  16696.415020   99.998779  16505.428770    0.00125  190.985000      100.000000
3   16896.416270   16596.413770 -15395.370186  16896.416270  390.986250  16596.413770    0.00250  300.000000      200.000000
4   16896.416270   16696.413770 -15395.370186  16896.416270    0.010000  16696.413770    0.00250  200.000000      100.000000
5   16896.416270   16796.413770 -15395.370186  16896.416270  101.010000  16796.413770    0.00250  100.000000        0.000000
6   17043.918770   16897.411270 -15395.370186  17043.918770  247.502500  16897.411270    0.00250  146.505000       47.502500
7   17296.415020   17096.413770 -15395.370186  17296.415020  399.001250  17096.413770    0.00250  199.998750      199.998750
8   17696.417520   17096.413818 -15395.370186  17696.417520  600.001250  17096.413818  300.00375  299.999951      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=240001/800, 
.[0m
[08/30 13:45:45]  --------------------------------------------------------------------------------
[08/30 13:45:45]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 13:45:46]  Generator returned sat in 0.700135 secs.
[08/30 13:45:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:46]  Improved gap from 98.0 to 100
[08/30 13:45:46]  Improved number of small numbers from 59 to 71 out of a max of 100
[08/30 13:45:46]  Verifer returned sat in 0.788312 secs.
[08/30 13:45:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   16496.462891   16296.462891 -15395.370117  16496.462891    0.098633  16296.462891    0.000000  200.000000           200.0
1   16496.462891   16296.462891 -15395.370117  16496.462891  199.999756  16296.462891    0.000000  200.000000           100.0
2   16496.462891   16396.511719 -15395.370117  16496.462891    0.049072  16396.511719    0.000000   99.951172             0.0
3   16496.462891   16496.462891 -15395.370117  16496.462891   99.000000  16496.462891    0.000000    0.000000          -100.0
4   16696.462891   16696.413818 -15395.370117  16696.462891  200.000000  16696.413818    0.000000    0.049072             0.0
5   17097.389282   16794.926270 -15395.370117  17097.389282  400.975464  16794.926270  100.926392  201.536621           200.0
6   17097.389282   16828.137736 -15395.370117  17097.389282  201.487732  16828.137736  100.926392  168.325155           100.0
7   17297.389282   16996.462891 -15395.370117  17297.389282  368.325155  16996.462891  100.926392  200.000000           200.0
8   17616.738973   16996.462891 -15395.370117  17616.738973  519.349691  16996.462891  320.276082  300.000000           200.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=7871105/24576, 
.[0m
[08/30 13:45:47]  --------------------------------------------------------------------------------
[08/30 13:45:47]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 13:45:48]  Generator returned sat in 1.379443 secs.
[08/30 13:45:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:45:49]  Improved gap from 0.0 to 35.9375
[08/30 13:45:49]  Improved number of small numbers from 46 to 71 out of a max of 100
[08/30 13:45:49]  Verifer returned sat in 1.001031 secs.
[08/30 13:45:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17910.176758   17802.266271 -15395.370361  17910.176758   0.098633  17802.266271        0.0  107.910487      100.048793
1   17910.176758   17910.127930 -15395.370361  17910.176758   0.024414  17910.127930        0.0    0.048828        0.048793
2   17910.176758   17910.176671 -15331.356567  17910.176758   0.024658  17910.176671        0.0    0.000087      -35.937413
3   17982.051671   17946.114171 -15267.294067  17982.051671  71.875000  17946.114171        0.0   35.937500        0.000000
4   18018.038121   17982.051758 -15203.280518  18018.038121  71.923950  17982.051758        0.0   35.986364        0.000000
5   18018.038121   18018.038121 -15140.218018  18018.038121  35.961914  18018.038121        0.0    0.000000      -36.937500
6   18071.968846   18054.975621 -15076.155518  18071.968846  53.930725  18054.975621        0.0   16.993225      -18.944275
7   18109.406346   18092.913086 -15014.093018  18109.406346  54.430725  18092.913086        0.0   16.493260      -19.444275
8   18148.343750   18132.027100 -14953.207275  18148.343750  55.430664  18132.027100        0.0   16.316650      -19.621129
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:50]  --------------------------------------------------------------------------------
[08/30 13:45:50]  Iteration: 16 (0 solution, 15 counterexamples)
[08/30 13:45:50]  Generator returned sat in 0.232999 secs.
[08/30 13:45:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:50]  Improved gap from 0.0 to 0
[08/30 13:45:50]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 13:45:50]  Verifer returned sat in 0.355411 secs.
[08/30 13:45:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17308.416504   17108.416260 -14693.658936  17308.416504    0.098389  17108.416260   0.000000  200.000244      200.000000
1   17308.416504   17108.416504 -14693.658936  17308.416504    0.024170  17108.416504   0.000000  200.000000      100.000000
2   17308.416504   17210.404053 -14693.658936  17308.416504  199.987793  17210.404053   0.000000   98.012451        0.000000
3   17608.428467   17408.416504 -14693.658936  17608.428467  398.024414  17408.416504   0.011963  200.000000      200.000000
4   17608.440674   17508.416260 -14693.658936  17608.440674  200.012207  17508.416260   0.011963  100.012451      100.012207
5   17608.440674   17608.416504 -14693.658936  17608.440674    1.000000  17608.416504   0.011963    0.012207        0.012207
6   17609.428467   17609.404297 -14594.658936  17609.428467    1.000000  17609.404297   0.011963    0.012207        0.000000
7   17610.416260   17610.392090 -14496.634277  17610.416260    1.000000  17610.392090   0.011963    0.012207       -0.987549
8   17611.404053   17611.391846 -14496.634277  17611.404053    1.000000  17611.391846   0.011963    0.000244      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:51]  --------------------------------------------------------------------------------
[08/30 13:45:51]  Iteration: 17 (0 solution, 16 counterexamples)
[08/30 13:45:51]  Generator returned sat in 0.120058 secs.
[08/30 13:45:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:51]  Improved gap from 0.0 to 0
[08/30 13:45:51]  Improved number of small numbers from 82 to 100 out of a max of 100
[08/30 13:45:51]  Verifer returned sat in 0.246578 secs.
[08/30 13:45:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17012.391846   17012.391846 -14697.634277  17012.391846    0.098145  17012.391846        0.0    0.000000     -100.000000
1   17212.391602   17212.342773 -14697.634277  17212.391602  199.999756  17212.342773        0.0    0.048828       -0.000244
2   17512.391602   17312.391846 -14697.634277  17512.391602  300.048828  17312.391846        0.0  199.999756      199.999756
3   17512.440674   17412.391602 -14697.634277  17512.440674  200.048828  17412.391602        0.0  100.049072      100.048828
4   17512.440674   17511.391846 -14697.634277  17512.440674    1.000000  17511.391846        0.0    1.048828        0.048828
5   17512.440674   17512.391846 -14598.585205  17512.440674    1.000000  17512.391846        0.0    0.048828       -0.902100
6   17513.391846   17513.342773 -14498.634521  17513.391846    1.000000  17513.342773        0.0    0.049072       -0.000244
7   17514.342773   17514.293945 -14400.536377  17514.342773    1.000000  17514.293945        0.0    0.048828       -0.951172
8   17515.293945   17515.293945 -14400.536377  17515.293945    1.000000  17515.293945        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:52]  --------------------------------------------------------------------------------
[08/30 13:45:52]  Iteration: 18 (0 solution, 17 counterexamples)
[08/30 13:45:52]  Generator returned sat in 0.260355 secs.
[08/30 13:45:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:45:53]  Improved gap from 0.0244140625 to 35.9375
[08/30 13:45:53]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 13:45:53]  Verifer returned sat in 0.788560 secs.
[08/30 13:45:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17294.052979   17186.142578 -15063.481934  17294.052979    0.097900  17186.142578        0.0  107.910400       99.695557
1   17294.052979   17294.052734 -15063.481934  17294.052979  107.910156  17294.052734        0.0    0.000244       -0.304443
2   17294.406250   17294.357422 -14999.419434  17294.406250    0.353516  17294.357422        0.0    0.048828      -35.888672
3   17330.343750   17330.294922 -14935.356934  17330.343750   35.986328  17330.294922        0.0    0.048828      -35.888672
4   17403.371094   17366.232422 -14872.495605  17403.371094   73.076172  17366.232422        0.0   37.138672        0.000000
5   17403.371094   17403.371094 -14808.433105  17403.371094   37.089844  17403.371094        0.0    0.000000      -35.937500
6   17458.877930   17439.308594 -14749.370605  17458.877930   55.506836  17439.308594        0.0   19.569336      -21.368164
7   17494.815430   17480.246094 -14685.308350  17494.815430   55.506836  17480.246094        0.0   14.569336      -21.368408
8   17538.252930   17516.183838 -14685.308350  17538.252930   58.006836  17516.183838        0.0   22.069092      -77.930908
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:53]  --------------------------------------------------------------------------------
[08/30 13:45:53]  Iteration: 19 (0 solution, 18 counterexamples)
[08/30 13:45:54]  Generator returned sat in 0.205977 secs.
[08/30 13:45:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:54]  Improved gap from 35.9375 to 35.9375
[08/30 13:45:54]  Improved number of small numbers from 45 to 100 out of a max of 100
[08/30 13:45:54]  Verifer returned sat in 0.568427 secs.
[08/30 13:45:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16051.904541   15851.904541 -14187.576660  16051.904541    0.097656  15851.904541        0.0  200.000000      200.000000
1   16051.904541   15951.904541 -14187.576660  16051.904541    0.048828  15951.904541        0.0  100.000000      100.000000
2   16108.765625   16009.842041 -14187.576660  16108.765625  156.861084  16009.842041        0.0   98.923584       56.861084
3   16108.765625   16051.904541 -14144.437988  16108.765625   98.923584  16051.904541        0.0   56.861084       -0.000244
4   16150.904541   16108.765869 -14086.576660  16150.904541   99.000000  16108.765869        0.0   42.138672        0.000000
5   16186.196533   16150.904541 -14022.514160  16186.196533   77.430664  16150.904541        0.0   35.291992       -0.645508
6   16220.435791   16186.842041 -13958.451660  16220.435791   69.531250  16186.842041        0.0   33.593750       -2.343750
7   16253.310791   16222.779541 -13894.389404  16253.310791   66.468750  16222.779541        0.0   30.531250       -5.406494
8   16278.786377   16258.717285 -13894.389404  16278.786377   56.006836  16258.717285        0.0   20.069092      -79.930908
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:45:55]  --------------------------------------------------------------------------------
[08/30 13:45:55]  Iteration: 20 (0 solution, 19 counterexamples)
[08/30 13:45:55]  Generator returned sat in 0.288773 secs.
[08/30 13:45:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:55]  Improved gap from 17.00125 to 100
[08/30 13:45:56]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 13:45:56]  Verifer returned sat in 0.310817 secs.
[08/30 13:45:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   16051.904541   16051.904541 -14388.579102  16051.904541    0.097412  16051.904541   0.000000    0.000000       -1.002441
1   16152.906982   16052.906982 -14388.579102  16152.906982  101.002441  16052.906982   0.000000  100.000000        0.000000
2   16152.906982   16152.906982 -14388.579102  16152.906982    0.002441  16152.906982   0.000000    0.000000     -100.000000
3   16552.904541   16352.906982 -14388.579102  16552.904541  399.997559  16352.906982   0.000000  199.997559      199.997559
4   16652.909424   16451.904297 -14388.579102  16652.909424  300.002441  16451.904297   0.002441  201.002686      200.000000
5   16652.909424   16552.906982 -14388.579102  16652.909424    0.010000  16552.906982   0.002441  100.000000      100.000000
6   16951.909424   16552.907227 -14388.579102  16951.909424  399.000000  16552.907227  99.002441  299.999756      200.000000
7   16951.909424   16752.906982 -14388.579102  16951.909424    0.010000  16752.906982  99.002441  100.000000      100.000000
8   17151.912109   16752.907227 -14388.579102  17151.912109  300.002686  16752.907227  99.005127  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=405515/4096, 
.[0m
[08/30 13:45:56]  --------------------------------------------------------------------------------
[08/30 13:45:56]  Iteration: 21 (0 solution, 20 counterexamples)
[08/30 13:45:57]  Generator returned sat in 0.871761 secs.
[08/30 13:45:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:45:58]  Improved number of small numbers from 52 to 60 out of a max of 99
[08/30 13:45:58]  Verifer returned sat in 0.801809 secs.
[08/30 13:45:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   17188.197266   17188.197035 -14388.579102  17188.197266    0.097168  17188.197035    0.000000    0.000231      -99.999769
1   17588.148451   17288.197266 -14388.579102  17588.148451  399.951416  17288.197266    0.000000  299.951185      199.951416
2   17588.148451   17388.197035 -14388.579102  17588.148451    0.048584  17388.197035    0.000000  199.951416       99.951416
3   17588.148451   17588.099867 -14388.579102  17588.148451  130.381917  17588.099867    0.000000    0.048584       -0.048584
4   17917.433200   17688.197035 -14388.579102  17917.433200  329.333333  17688.197035   29.236165  200.000000      200.000000
5   17917.433200   17788.197035 -14388.579102  17917.433200  163.666667  17788.197035   29.236165  100.000000      100.000000
6   18180.099867   17888.197021 -14388.579102  18180.099867  362.666667  17888.197021   91.902832  200.000013      200.000000
7   18180.099867   17988.197035 -14388.579102  18180.099867  180.333333  17988.197035   91.902832  100.000000      100.000000
8   18409.433200   17988.197266 -14388.579102  18409.433200  329.333333  17988.197266  121.236165  299.999769      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=92, 
.[0m
[08/30 13:45:58]  --------------------------------------------------------------------------------
[08/30 13:45:58]  Iteration: 22 (0 solution, 21 counterexamples)
[08/30 13:46:00]  Generator returned sat in 1.345692 secs.
[08/30 13:46:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:00]  Verifer returned unsat in 0.394766 secs.
[08/30 13:46:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:00]  --------------------------------------------------------------------------------
[08/30 13:46:00]  Iteration: 23 (1 solution, 21 counterexamples)
[08/30 13:46:01]  Generator returned sat in 0.209435 secs.
[08/30 13:46:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:01]  Improved gap from 0.0 to 14.0625
[08/30 13:46:02]  Improved number of small numbers from 39 to 100 out of a max of 100
[08/30 13:46:02]  Verifer returned sat in 0.664066 secs.
[08/30 13:46:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   17950.239258   17650.239502 -14399.426270  17950.239258    0.096924  17650.239502    0.00000  299.999756      199.999756
1   17950.239258   17750.239502 -14399.426270  17950.239258    0.048584  17750.239502    0.00000  199.999756       99.999756
2   18150.287842   17850.239502 -14399.426270  18150.287842  400.048340  17850.239502    0.04834  300.000000      200.000000
3   18238.287842   17950.239502 -14399.426270  18238.287842  388.000000  17950.239502    0.04834  288.000000      188.000000
4   18238.287842   18139.690674 -14399.426270  18238.287842  195.000000  18139.690674    0.04834   98.548828       88.000000
5   18238.287842   18225.330078 -14388.579346  18238.287842   98.500000  18225.330078    0.04834   12.909424       -1.153076
6   18275.628418   18239.392578 -14324.766846  18275.628418   50.250000  18239.392578    0.04834   36.187500        0.000000
7   18275.628418   18275.580078 -14238.829346  18275.628418   26.125000  18275.580078    0.04834    0.000000      -14.062500
8   18289.690918   18289.642578 -14152.891846  18289.690918   14.062500  18289.642578    0.04834    0.000000      -14.062500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:46:02]  --------------------------------------------------------------------------------
[08/30 13:46:02]  Iteration: 24 (1 solution, 22 counterexamples)
[08/30 13:46:03]  Generator returned sat in 0.402323 secs.
[08/30 13:46:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:03]  Improved number of small numbers from 67 to 99 out of a max of 99
[08/30 13:46:03]  Verifer returned sat in 0.220551 secs.
[08/30 13:46:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   17950.239502   17650.239502 -14399.42627  17950.239502    0.096680  17650.239502    0.000000  300.000000      200.000000
1   17950.239502   17750.239502 -14399.42627  17950.239502    0.048340  17750.239502    0.000000  200.000000      100.000000
2   18150.263672   17851.873779 -14399.42627  18150.263672  400.024170  17851.873779    0.024170  298.365723      200.000000
3   18250.239502   17950.239502 -14399.42627  18250.239502  398.341553  17950.239502    0.024170  299.975830      199.975830
4   18349.605225   18150.239258 -14399.42627  18349.605225  399.341553  18150.239258    0.024170  199.341797      199.341553
5   18550.604980   18150.897949 -14399.42627  18550.604980  400.341553  18150.897949  100.365479  299.341553      200.000000
6   18650.604980   18350.239502 -14399.42627  18650.604980  399.341553  18350.239502  100.365479  200.000000      200.000000
7   18850.946533   18450.239502 -14399.42627  18850.946533  400.341553  18450.239502  200.707031  200.000000      200.000000
8   19050.288086   18550.239258 -14399.42627  19050.288086  399.341553  18550.239258  300.048584  200.000244      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=307225/1024, 
.[0m
[08/30 13:46:03]  --------------------------------------------------------------------------------
[08/30 13:46:03]  Iteration: 25 (1 solution, 23 counterexamples)
[08/30 13:46:05]  Generator returned sat in 1.475029 secs.
[08/30 13:46:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:05]  Verifer returned unsat in 0.047282 secs.
[08/30 13:46:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:05]  --------------------------------------------------------------------------------
[08/30 13:46:05]  Iteration: 26 (2 solution, 23 counterexamples)
[08/30 13:46:06]  Generator returned sat in 0.219193 secs.
[08/30 13:46:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:06]  Verifer returned unsat in 0.068341 secs.
[08/30 13:46:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:06]  --------------------------------------------------------------------------------
[08/30 13:46:06]  Iteration: 27 (3 solution, 23 counterexamples)
[08/30 13:46:06]  Generator returned sat in 0.175892 secs.
[08/30 13:46:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:06]  Verifer returned unsat in 0.072308 secs.
[08/30 13:46:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:06]  --------------------------------------------------------------------------------
[08/30 13:46:06]  Iteration: 28 (4 solution, 23 counterexamples)
[08/30 13:46:07]  Generator returned sat in 0.085109 secs.
[08/30 13:46:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:07]  Improved gap from 0.04833984375 to 100
[08/30 13:46:07]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 13:46:07]  Verifer returned sat in 0.264862 secs.
[08/30 13:46:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t
0   17760.094482   17750.191162 -14399.42627  17760.094482    0.09668  17750.191162    0.00000    9.90332         9.90332
1   17760.094482   17760.046143 -14399.42627  17760.094482    0.04834  17760.046143    0.00000    0.04834       -90.09668
2   18150.142822   17950.191162 -14399.42627  18150.142822  390.09668  17950.191162    0.00000  199.95166       199.95166
3   18250.239502   18050.191162 -14399.42627  18250.239502  300.04834  18050.191162    0.04834  200.00000       200.00000
4   18250.239502   18052.094482 -14399.42627  18250.239502    1.00000  18052.094482    0.04834  198.09668       100.00000
5   18250.239502   18250.142822 -14399.42627  18250.239502  148.02417  18250.142822    0.04834    0.04834         0.00000
6   18549.191162   18250.191162 -14399.42627  18549.191162  299.00000  18250.191162    0.04834  298.95166       198.95166
7   18650.239502   18450.191162 -14399.42627  18650.239502  400.00000  18450.191162    0.04834  200.00000       200.00000
8   19050.287842   18450.191162 -14399.42627  19050.287842  600.04834  18450.191162  300.09668  300.00000       200.00000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=614499/2048, 
.[0m
[08/30 13:46:07]  --------------------------------------------------------------------------------
[08/30 13:46:07]  Iteration: 29 (4 solution, 24 counterexamples)
[08/30 13:46:10]  Generator returned sat in 1.875872 secs.
[08/30 13:46:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:10]  Verifer returned unsat in 0.076519 secs.
[08/30 13:46:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:10]  --------------------------------------------------------------------------------
[08/30 13:46:10]  Iteration: 30 (5 solution, 24 counterexamples)
[08/30 13:46:10]  Generator returned sat in 0.138852 secs.
[08/30 13:46:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:10]  Improved number of small numbers from 95 to 99 out of a max of 99
[08/30 13:46:10]  Verifer returned sat in 0.189865 secs.
[08/30 13:46:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   17610.142578   17410.142822 -14399.42627  17610.142578    0.096680  17410.142822    0.000000  199.999756       99.999756
1   17610.142578   17510.142822 -14399.42627  17610.142578    0.048096  17510.142822    0.000000   99.999756       -0.000244
2   17910.094482   17610.142822 -14399.42627  17910.094482  399.951660  17610.142822    0.000000  299.951660      199.951660
3   17910.094482   17743.395508 -14399.42627  17910.094482  244.465820  17743.395508    0.000000  166.698975       99.951660
4   18110.094238   17910.142822 -14399.42627  18110.094238  366.698730  17910.142822    0.000000  199.951416      199.951416
5   18460.190918   18008.142822 -14399.42627  18460.190918  550.048096  18008.142822  250.048096  202.000000      200.000000
6   18460.190918   18110.142822 -14399.42627  18460.190918  200.000000  18110.142822  250.048096  100.000000      100.000000
7   18660.190918   18110.142822 -14399.42627  18660.190918  300.000000  18110.142822  250.048096  300.000000      200.000000
8   18810.190918   18210.142822 -14399.42627  18810.190918  450.000000  18210.142822  300.048096  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1228997/4096, 
.[0m
[08/30 13:46:11]  --------------------------------------------------------------------------------
[08/30 13:46:11]  Iteration: 31 (5 solution, 25 counterexamples)
[08/30 13:46:12]  Generator returned sat in 0.716184 secs.
[08/30 13:46:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:12]  Verifer returned unsat in 0.577779 secs.
[08/30 13:46:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:12]  --------------------------------------------------------------------------------
[08/30 13:46:12]  Iteration: 32 (6 solution, 25 counterexamples)
[08/30 13:46:13]  Generator returned sat in 0.101616 secs.
[08/30 13:46:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:14]  Verifer returned unsat in 0.638497 secs.
[08/30 13:46:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:14]  --------------------------------------------------------------------------------
[08/30 13:46:14]  Iteration: 33 (7 solution, 25 counterexamples)
[08/30 13:46:15]  Generator returned sat in 1.143620 secs.
[08/30 13:46:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:16]  Improved number of small numbers from 53 to 65 out of a max of 99
[08/30 13:46:16]  Verifer returned sat in 0.822989 secs.
[08/30 13:46:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   19113.379150   19013.376751 -13999.43627  19113.379150    0.096680  19013.376751       0.00  100.002399        0.002399
1   19113.379150   19113.376751 -13999.43627  19113.379150    0.002686  19113.376751       0.00    0.002399      -99.997601
2   19313.376751   19213.376953 -13999.43627  19313.376751  200.000000  19213.376953       0.00   99.999798        0.000000
3   19413.376953   19313.376751 -13999.43627  19413.376953  200.000000  19313.376751       0.00  100.000202        0.000202
4   19663.376751   19513.376751 -13999.43627  19663.376751  350.000000  19513.376751       0.00  150.000000      150.000000
5   20063.376751   19513.376953 -13999.43627  20063.376751  550.000000  19513.376953     250.00  299.999798      200.000000
6   20063.376751   19713.376751 -13999.43627  20063.376751    0.010000  19713.376751     250.00  100.000000      100.000000
7   20163.386751   19813.376751 -13999.43627  20163.386751  200.010000  19813.376751     250.00  100.010000      100.010000
8   20413.386751   19813.376953 -13999.43627  20413.386751  350.010000  19813.376953     300.01  299.999798      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=30001/100, 
.[0m
[08/30 13:46:16]  --------------------------------------------------------------------------------
[08/30 13:46:16]  Iteration: 34 (7 solution, 26 counterexamples)
[08/30 13:46:18]  Generator returned sat in 1.701027 secs.
[08/30 13:46:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:19]  Improved number of small numbers from 53 to 99 out of a max of 99
[08/30 13:46:19]  Verifer returned sat in 0.324548 secs.
[08/30 13:46:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   19761.378906   19761.330322 -13999.436279  19761.378906    0.096436  19761.330322    0.00000    0.048584        0.048584
1   19761.378906   19761.330322 -13999.436279  19761.378906    0.024170  19761.330322    0.00000    0.048584      -99.951416
2   20161.306152   19908.943604 -13999.436279  20161.306152  399.975830  19908.943604    0.00000  252.362549      199.975830
3   20161.306152   19961.330322 -13999.436279  20161.306152   99.951660  19961.330322    0.00000  199.975830       99.975830
4   20161.306152   20161.281982 -13999.436279  20161.306152  199.951660  20161.281982    0.00000    0.024170       -0.024170
5   20561.209473   20261.330322 -13999.436279  20561.209473  399.927490  20261.330322   99.87915  200.000000      200.000000
6   20561.209473   20311.185303 -13999.436279  20561.209473  175.193359  20311.185303   99.87915  150.145020      100.000000
7   20761.185303   20461.330322 -13999.436279  20761.185303  350.120850  20461.330322   99.87915  199.975830      199.975830
8   21061.354492   20461.330322 -13999.436279  21061.354492  500.145020  20461.330322  300.02417  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1228899/4096, 
.[0m
[08/30 13:46:19]  --------------------------------------------------------------------------------
[08/30 13:46:19]  Iteration: 35 (7 solution, 27 counterexamples)
[08/30 13:46:20]  Generator returned sat in 0.517546 secs.
[08/30 13:46:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:20]  Improved number of small numbers from 28 to 99 out of a max of 99
[08/30 13:46:20]  Verifer returned sat in 0.457550 secs.
[08/30 13:46:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20461.180176   20161.180420 -13999.436279  20461.180176    0.096436  20161.180420    0.000000  299.999756      199.999756
1   20461.180176   20294.128174 -13999.436279  20461.180176    0.048340  20294.128174    0.000000  167.052002       99.999756
2   20661.228760   20361.276855 -13999.436279  20661.228760  367.100586  20361.276855    0.048340  299.903564      200.000000
3   20661.228760   20461.180420 -13999.436279  20661.228760   49.951904  20461.180420    0.048340  200.000000      100.000000
4   20661.228760   20661.132080 -13999.436279  20661.228760  199.951904  20661.132080    0.048340    0.048340        0.000000
5   21044.634277   20761.180176 -13999.436279  21044.634277  383.453857  20761.180176   83.453857  200.000244      200.000000
6   21044.634277   20794.513916 -13999.436279  21044.634277  199.951660  20794.513916   83.453857  166.666504      100.000000
7   21244.586182   20961.180420 -13999.436279  21244.586182  366.618408  20961.180420   83.453857  199.951904      199.951904
8   21561.276855   20961.180420 -13999.436279  21561.276855  516.642578  20961.180420  300.096436  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1228997/4096, 
.[0m
[08/30 13:46:21]  --------------------------------------------------------------------------------
[08/30 13:46:21]  Iteration: 36 (7 solution, 28 counterexamples)
[08/30 13:46:23]  Generator returned sat in 2.029672 secs.
[08/30 13:46:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:23]  Improved number of small numbers from 62 to 99 out of a max of 99
[08/30 13:46:23]  Verifer returned sat in 0.222972 secs.
[08/30 13:46:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   20461.179932   20161.180420 -13999.436279  20461.179932    0.096191  20161.180420    0.000000  299.999512      199.999512
1   20461.179932   20291.669678 -13999.436279  20461.179932    0.048096  20291.669678    0.000000  169.510254       99.999512
2   20661.228516   20361.276855 -13999.436279  20661.228516  369.558838  20361.276855    0.048096  299.903564      200.000000
3   20661.228516   20462.482178 -13999.436279  20661.228516   48.023438  20462.482178    0.048096  198.698242      100.000000
4   20661.228516   20661.156494 -13999.436279  20661.228516  198.674316  20661.156494    0.048096    0.023926        0.000000
5   21044.622314   20760.529785 -13999.436279  21044.622314  383.417725  20760.529785   83.441895  200.650635      200.000000
6   21044.622314   20794.513916 -13999.436279  21044.622314  200.626465  20794.513916   83.441895  166.666504      100.000000
7   21244.598145   20961.180420 -13999.436279  21244.598145  366.642334  20961.180420   83.441895  199.975830      199.975830
8   21561.276611   20961.180420 -13999.436279  21561.276611  516.654297  20961.180420  300.096191  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1228997/4096, 
.[0m
[08/30 13:46:24]  --------------------------------------------------------------------------------
[08/30 13:46:24]  Iteration: 37 (7 solution, 29 counterexamples)
[08/30 13:46:26]  Generator returned sat in 2.366444 secs.
[08/30 13:46:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:27]  Improved gap from 0.0 to 12.5
[08/30 13:46:27]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/30 13:46:27]  Verifer returned sat in 0.932979 secs.
[08/30 13:46:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   20544.656250   20544.608154 -13999.436279  20544.656250    0.095947  20544.608154        0.0    0.048096        0.024170
1   20544.656250   20544.632324 -13999.436279  20544.656250    0.024170  20544.632324        0.0    0.023926      -99.975830
2   20944.608398   20644.632080 -13999.436279  20944.608398  399.976074  20644.632080        0.0  299.976318      199.976318
3   21044.632080   20844.608398 -13999.436279  21044.632080  400.000000  20844.608398        0.0  200.023682      200.000000
4   21044.632080   20944.632080 -13999.436279  21044.632080  200.000000  20944.632080        0.0  100.000000      100.000000
5   21044.632080   21032.108154 -13999.436279  21044.632080  100.000000  21032.108154        0.0   12.523926        0.000000
6   21082.108154   21057.132324 -13936.912354  21082.108154   50.000000  21057.132324        0.0   24.975830        0.000000
7   21082.132324   21082.108154 -13849.412354  21082.132324   25.000000  21082.108154        0.0    0.024170      -12.475830
8   21094.608154   21094.608154 -13761.912354  21094.608154   12.500000  21094.608154        0.0    0.000000      -12.500000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:46:28]  --------------------------------------------------------------------------------
[08/30 13:46:28]  Iteration: 38 (7 solution, 30 counterexamples)
[08/30 13:46:29]  Generator returned sat in 0.475411 secs.
[08/30 13:46:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:29]  Improved gap from 0.0479736328125 to 100
[08/30 13:46:30]  Improved number of small numbers from 30 to 48 out of a max of 100
[08/30 13:46:30]  Verifer returned sat in 1.120686 secs.
[08/30 13:46:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   17236.760254   16936.760498 -13849.412354  17236.760254    0.095703  16936.760498    0.000000  299.999756      199.999880
1   17236.760254   17136.760254 -13849.412354  17236.760254    0.048096  17136.760254    0.000000  100.000000       99.999880
2   17236.760254   17136.760374 -13849.412354  17236.760254    0.048096  17136.760374    0.000000   99.999880       -0.000120
3   17591.165694   17308.509766 -13849.412354  17591.165694  454.405320  17308.509766   54.405320  228.250609      200.000000
4   17591.165694   17336.760374 -13849.412354  17591.165694  228.202660  17336.760374   54.405320  200.000000      100.000000
5   17733.469684   17536.760374 -13849.412354  17733.469684  342.303990  17536.760374   54.405320  142.303990      142.303990
6   18104.621679   17579.080356 -13849.412354  18104.621679  513.455985  17579.080356  267.861305  257.680019      200.000000
7   18104.669653   17736.760374 -13849.412354  18104.669653  257.727992  17736.760374  267.861305  100.047974      100.047974
8   18391.213668   17736.760498 -13849.412354  18391.213668  386.591989  17736.760498  354.453294  299.999876      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2457993/8192, 
.[0m
[08/30 13:46:30]  --------------------------------------------------------------------------------
[08/30 13:46:30]  Iteration: 39 (7 solution, 31 counterexamples)
[08/30 13:46:32]  Generator returned sat in 0.956380 secs.
[08/30 13:46:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:46:32]  Improved gap from 0.0 to 10.9375
[08/30 13:46:32]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 13:46:32]  Verifer returned sat in 0.662087 secs.
[08/30 13:46:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14004.990723   14004.943115 -13849.412598  14004.990723    0.095703  14004.943115   0.000000    0.047607       -0.000244
1   14004.990967   14004.990967 -13849.412598  14004.990967    0.047852  14004.990967   0.000000    0.000000     -100.000000
2   14405.038574   14104.990967 -13849.412598  14405.038574  400.047607  14104.990967   0.047607  300.000000      200.000000
3   14485.038574   14204.990967 -13849.412598  14485.038574  380.000000  14204.990967   0.047607  280.000000      180.000000
4   14485.038574   14356.913574 -13849.412598  14485.038574  189.000000  14356.913574   0.047607  128.077393       80.000000
5   14485.038574   14439.288818 -13829.412598  14485.038574   93.500000  14439.288818   0.047607   45.702148        0.000000
6   14485.086426   14484.990967 -13740.350098  14485.086426   45.750000  14484.990967   0.047607    0.047852      -10.889648
7   14506.913574   14495.928467 -13651.287598  14506.913574   21.875000  14495.928467   0.047607   10.937500        0.000000
8   14506.913574   14506.865967 -13562.225098  14506.913574    9.937500  14506.865967   0.047607    0.000000      -10.937500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:46:33]  --------------------------------------------------------------------------------
[08/30 13:46:33]  Iteration: 40 (7 solution, 32 counterexamples)
[08/30 13:46:35]  Generator returned sat in 1.809990 secs.
[08/30 13:46:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:35]  Improved number of small numbers from 63 to 65 out of a max of 99
[08/30 13:46:35]  Verifer returned sat in 0.580800 secs.
[08/30 13:46:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   14004.990723   14004.943115 -13849.412598  14004.990723    0.095703  14004.943115    0.000000    0.047607       -0.000244
1   14004.990967   14004.990967 -13849.412598  14004.990967    0.047852  14004.990967    0.000000    0.000000     -100.000000
2   14405.014771   14204.990723 -13849.412598  14405.014771  400.023804  14204.990723    0.023804  200.000244      200.000000
3   14405.014771   14204.990967 -13849.412598  14405.014771  152.384983  14204.990967    0.023804  200.000000      100.000000
4   14433.592244   14362.124756 -13849.412598  14433.592244  228.577474  14362.124756    0.023804   71.443685       28.577474
5   14705.014771   14504.990967 -13849.412598  14705.014771  342.866211  14504.990967    0.023804  200.000000      200.000000
6   15019.314087   14547.817627 -13849.412598  15019.314087  514.299316  14547.817627  214.323120  257.173340      200.000000
7   15019.314087   14704.990967 -13849.412598  15019.314087  257.149658  14704.990967  214.323120  100.000000      100.000000
8   15305.038574   14704.990967 -13849.412598  15305.038574  385.724487  14704.990967  300.047607  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2457795/8192, 
.[0m
[08/30 13:46:36]  --------------------------------------------------------------------------------
[08/30 13:46:36]  Iteration: 41 (7 solution, 33 counterexamples)
[08/30 13:46:38]  Generator returned sat in 1.684212 secs.
[08/30 13:46:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:38]  Improved gap from 0.0477294921875 to 100
[08/30 13:46:39]  Improved number of small numbers from 39 to 61 out of a max of 100
[08/30 13:46:39]  Verifer returned sat in 0.786809 secs.
[08/30 13:46:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   14517.954102   14217.954346 -13849.412598  14517.954102    0.095459  14217.954346    0.000000  299.999756      199.999993
1   14595.758545   14317.954346 -13849.412598  14595.758545  377.804199  14317.954346    0.000000  277.804199      177.804437
2   14595.758545   14417.954346 -13849.412598  14595.758545  277.756348  14417.954346    0.000000  177.804199       77.804437
3   14595.758545   14517.954108 -13849.412598  14595.758545  177.756565  14517.954108    0.000000   77.804437      -22.195563
4   14784.588955   14617.954108 -13849.412598  14784.588955  266.634847  14617.954108    0.000000  166.634847       66.634847
5   15017.906379   14817.954108 -13849.412598  15017.906379  399.952271  14817.954108    0.000000  199.952271      199.952271
6   15417.882514   14818.942383 -13849.412598  15417.882514  599.928406  14818.942383  299.928406  299.011726      200.000000
7   15417.882514   14917.954108 -13849.412598  15417.882514  298.964203  14917.954108  299.928406  200.000000      100.000000
8   15666.328818   15017.954346 -13849.412598  15666.328818  448.446304  15017.954346  348.374710  299.999763      200.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=22831085/65536, 
.[0m
[08/30 13:46:39]  --------------------------------------------------------------------------------
[08/30 13:46:39]  Iteration: 42 (7 solution, 34 counterexamples)
[08/30 13:46:41]  Generator returned sat in 1.779257 secs.
[08/30 13:46:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 13:46:42]  Improved gap from 0.0 to 0
[08/30 13:46:42]  Improved number of small numbers from 54 to 68 out of a max of 100
[08/30 13:46:42]  Verifer returned sat in 1.102841 secs.
[08/30 13:46:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t   queue_t  bottle_queue_t
0   13908.296631   13908.252522 -14249.395752  13908.296631  0.095215  13908.252522        0.0  0.044109        0.000955
1   13908.296631   13908.295855 -14149.396729  13908.296631  0.000977  13908.295855        0.0  0.000776       -0.000022
2   13910.282522   13908.296688 -14051.382598  13910.282522  1.986667  13908.296688        0.0  1.985833        0.000000
3   13910.282522   13910.282522 -13951.382598  13910.282522  0.000833  13910.282522        0.0  0.000000        0.000000
4   13910.298355   13910.282715 -13851.398431  13910.298355  0.015833  13910.282715        0.0  0.015640        0.000000
5   13910.298355   13910.298355 -13751.398438  13910.298355  0.010000  13910.298355        0.0  0.000000       -0.000007
6   13910.309188   13910.298584 -13651.409264  13910.309188  0.010833  13910.298584        0.0  0.010604        0.000000
7   13910.309188   13910.309188 -13551.409264  13910.309188  0.010000  13910.309188        0.0  0.000000        0.000000
8   13910.319188   13910.309326 -13451.419434  13910.319188  0.010000  13910.309326        0.0  0.009862       -0.000169
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[08/30 13:46:43]  --------------------------------------------------------------------------------
[08/30 13:46:43]  Iteration: 43 (7 solution, 35 counterexamples)
[08/30 13:46:45]  Generator returned unsat in 1.879223 secs.
[08/30 13:46:45]  [96mNo more solutions found[0m
[08/30 13:46:45]  Final solutions:
[08/30 13:46:45]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:45]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:45]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:45]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:45]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:45]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 13:46:45]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 13:46:45]  Took 77.790143 secs.
