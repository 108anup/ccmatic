[10/19 11:33:05]  --------------------------------------------------------------------------------
[10/19 11:33:05]  Iteration: 1 (0 solution, 0 counterexamples)
[10/19 11:33:05]  Generator returned sat in 0.005092 secs.
[10/19 11:33:05]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:05]  Improved gap from 0.125 to 100
[10/19 11:33:06]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 11:33:06]  Verifer returned sat in 0.266308 secs.
[10/19 11:33:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t  queue_t  bottle_queue_t
0       -684.000       -684.000     684.0     -684.000     0.125     0.125     -684.000      0.000              -684.000    0.000            0.00
1       -584.000       -683.875     684.0     -584.000   100.000   100.000     -683.875      0.000              -683.875   99.875            0.00
2       -183.625       -523.000     684.0     -183.625   500.250   500.250     -523.000      0.125              -523.000  339.250          300.25
3        -83.500       -483.875     684.0      -83.500   439.375   439.375     -483.875      0.250              -483.875  400.125          300.25
4        357.000       -383.875     684.0      357.000   840.625  1682.250     -383.875    340.750              -383.875  400.125          300.25
5       1398.500       -283.875     684.0     1398.500  1441.625  2884.250     -283.875   1282.250              -283.875  400.125          300.25
6       2919.250       -141.875     684.0     2919.250  1920.875  3842.750     -141.875   2703.000              -141.875  358.125          300.25
7       5167.000          0.000     684.0     5167.000  2605.875  5212.750        0.000   4850.750                 0.000  316.250          300.25
8       8225.375         16.125     684.0     8225.375  3374.625  6750.250       16.125   7809.125                16.125  400.125          300.25
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=59747/8, 
, buffer=1201/4.[0m
[10/19 11:33:06]  --------------------------------------------------------------------------------
[10/19 11:33:06]  Iteration: 2 (0 solution, 1 counterexamples)
[10/19 11:33:06]  Generator returned sat in 0.051910 secs.
[10/19 11:33:06]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:06]  Improved gap from 0.0 to 0
[10/19 11:33:07]  Improved number of small numbers from 80 to 97 out of a max of 114
[10/19 11:33:07]  Verifer returned sat in 0.542928 secs.
[10/19 11:33:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -883.873779    -883.874023  783.875244  -883.873779    0.124756    0.124756  -883.874023    0.00000           -883.874023    0.000244      -99.998535
1    -483.865479    -683.875244  783.875244  -483.865479  400.008545  400.008545  -683.875244    0.00000           -683.875244  200.009766      200.009766
2    -383.862744    -583.875244  783.875244  -383.862744  300.012500  300.012500  -583.875244    0.00125           -583.875244  200.011250      200.011250
3    -283.861494    -483.875244  783.875244  -283.861494  300.012500  300.012500  -483.875244    0.00250           -483.875244  200.011250      200.011250
4    -283.861494    -383.875488  783.875244  -283.861494    0.010000    1.000000  -383.875488    0.00250           -383.875488  100.011494      100.011250
5    -283.861494    -383.873779  783.875244  -283.861494    0.010000    1.015000  -383.873779    0.00250           -383.873779  100.009785        0.011250
6    -283.861494    -283.875244  883.863994  -283.861494    0.010000    1.015000  -283.875244    0.00250           -283.876709    0.011250        0.000000
7    -283.861494    -283.863994  983.863770  -283.861494    0.010000    1.015000  -283.863994    0.00250           -283.862793    0.000000       -0.000225
8    -283.851494    -283.854004  983.864014  -283.851494    0.010000    1.015000  -283.854004    0.00250           -283.854004    0.000010      -99.989980
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=160009/800.[0m
[10/19 11:33:07]  --------------------------------------------------------------------------------
[10/19 11:33:07]  Iteration: 3 (0 solution, 2 counterexamples)
[10/19 11:33:08]  Generator returned sat in 0.426867 secs.
[10/19 11:33:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:33:08]  Improved gap from 0.000625 to 100
[10/19 11:33:08]  Improved number of small numbers from 35 to 114 out of a max of 114
[10/19 11:33:08]  Verifer returned sat in 0.566130 secs.
[10/19 11:33:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -826.004395    -921.942139  883.86377  -826.004395    0.124512    0.124512  -921.942139    0.000000           -921.942139   95.937744       95.937500
1    -821.942139    -921.941895  883.86377  -821.942139  100.000000  100.000000  -921.941895    0.000000           -821.910645   99.999756       -0.000244
2    -625.973145    -818.910645  883.86377  -625.973145  295.968750  295.968750  -818.910645    0.031250           -818.910645  192.906250       95.937500
3    -525.941895    -647.942139  883.86377  -525.941895  292.937500  292.937500  -647.942139    0.062500           -647.942139  121.937744       95.937500
4    -374.879639    -587.941895  883.86377  -374.879639  273.000000  546.000000  -587.941895   51.124756           -587.941895  161.937500       95.937500
5    -203.817139    -521.941895  883.86377  -203.817139  333.000000  666.000000  -521.941895  122.187256           -521.973389  195.937500       95.937500
6    -103.785889    -386.457764  883.86377  -103.785889  295.968750  591.937500  -386.457764  122.218506           -386.457764  160.453369       95.937500
7      -3.754883    -221.941895  883.86377    -3.754883  260.484375  520.968750  -221.941895  122.249512           -221.941895   95.937500       95.937500
8     265.307617    -221.910889  883.86377   265.307617  365.000000  730.000000  -221.910889  291.312012           -221.910889  195.906494       95.937500
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=983807/4096, 
, buffer=1535/16.[0m
[10/19 11:33:09]  --------------------------------------------------------------------------------
[10/19 11:33:09]  Iteration: 4 (0 solution, 3 counterexamples)
[10/19 11:33:09]  Generator returned sat in 0.277501 secs.
[10/19 11:33:09]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:33:09]  Improved gap from 0.0 to 0
[10/19 11:33:10]  Improved number of small numbers from 74 to 82 out of a max of 114
[10/19 11:33:10]  Verifer returned sat in 1.523546 secs.
[10/19 11:33:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -821.944580    -821.949395   783.868652  -821.944580     0.124512    0.124512  -821.949395        0.0           -821.949395    0.004814        0.004697
1    -821.944395    -821.946895   883.863770  -821.944395     0.005000    0.005000  -821.946895        0.0           -821.946895    0.002500        0.000000
2    -421.961895    -821.944395   883.863770  -421.961895   399.985000  399.985000  -821.944395        0.0           -821.946777  399.982500      299.982500
3    -421.961895    -641.929395   883.863770  -421.961895     0.002500    0.002500  -641.929395        0.0           -641.929395  219.967500      199.982500
4    -421.961895    -621.941895   883.863770  -421.961895   179.025000    0.010000  -621.941895        0.0           -621.941895  199.980000       99.982500
5    -421.951895    -521.941895   883.863770  -421.951895   557.055000    0.010000  -521.941895        0.0           -521.941895   99.990000       -0.007500
6    -421.941895    -421.941895   983.861270  -421.941895  1413.112500    0.010000  -421.941895        0.0           -421.941895    0.000000        0.000000
7    -421.931895    -421.941895  1083.851270  -421.931895  3045.212500    0.010000  -421.941895        0.0           -421.942139    0.010000        0.000000
8    -421.921895    -421.931885  1083.851318  -421.921895  6289.425000    0.010000  -421.931885        0.0           -421.931885    0.009990      -99.989951
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=614369/2048.[0m
[10/19 11:33:11]  --------------------------------------------------------------------------------
[10/19 11:33:11]  Iteration: 5 (0 solution, 4 counterexamples)
[10/19 11:33:12]  Generator returned sat in 0.663567 secs.
[10/19 11:33:12]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:13]  Improved gap from 0.0 to 0
[10/19 11:33:14]  Improved number of small numbers from 60 to 84 out of a max of 114
[10/19 11:33:14]  Verifer returned sat in 2.424799 secs.
[10/19 11:33:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    9203.583252    9203.579834   783.866943  9203.583252  0.124268  0.124268  9203.579834        0.0           9203.579834  0.003418        0.003043
1    9203.583252    9203.581543   883.863770  9203.583252  0.001465  0.001465  9203.581543        0.0           9203.581543  0.001709       -0.000131
2    9203.584961    9203.583383   983.862061  9203.584961  0.003418  0.003418  9203.583383        0.0           9203.581543  0.001578       -0.000131
3    9203.875050    9203.863525  1083.572103  9203.875050  0.291667  0.291667  9203.863525        0.0           9203.863525  0.011525        0.000000
4    9203.875050    9203.875050  1183.570557  9203.875050  0.010000  0.010000  9203.875050        0.0           9203.873291  0.000000       -0.001546
5    9203.885050    9203.883383  1283.555436  9203.885050  0.010000  0.010000  9203.883383        0.0           9203.883383  0.001667       -0.006667
6    9203.893383    9203.891717  1383.553770  9203.893383  0.010000  0.010000  9203.891717        0.0           9203.890137  0.001667        0.000000
7    9203.901717    9203.893383  1483.545410  9203.901717  0.010000  0.010000  9203.893383        0.0           9203.903320  0.008333       -0.000026
8    9203.903383    9203.903383  1483.545654  9203.903383  0.010000  0.010000  9203.903383        0.0           9203.903383  0.000000      -99.998115
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=7/2048.[0m
[10/19 11:33:15]  --------------------------------------------------------------------------------
[10/19 11:33:15]  Iteration: 6 (0 solution, 5 counterexamples)
[10/19 11:33:15]  Generator returned sat in 0.466526 secs.
[10/19 11:33:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:16]  Improved gap from 0.0 to 1.5625
[10/19 11:33:16]  Improved number of small numbers from 26 to 114 out of a max of 114
[10/19 11:33:16]  Verifer returned sat in 0.770827 secs.
[10/19 11:33:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9292.237305    9292.206543  1105.000488  9292.237305     0.124023    0.124023  9292.206543    0.00000           9292.206543    0.030762      -14.719727
1    9306.988281    9306.957031  1203.437988  9306.988281    14.781738   14.781738  9306.957031    0.00000           9306.926270    0.031250       -1.531250
2    9724.864014    9308.519531  1203.437988  9724.864014   417.906982  417.906982  9308.519531    0.03125           9308.488770  416.313232      316.313232
3    9724.864014    9508.519531  1203.437988  9724.864014     0.031250    0.031250  9508.519531    0.03125           9508.519531  216.313232      216.313232
4    9724.895020    9508.550781  1203.437988  9724.895020   216.344238    1.000000  9508.550781    0.03125           9508.550781  216.312988      116.344238
5    9725.895020    9608.519531  1203.437988  9725.895020   417.937988    1.000000  9608.519531    0.03125           9708.550781  117.344238       17.344238
6    9726.895020    9708.550537  1285.093506  9726.895020   717.937988    1.000000  9708.550537    0.03125           9708.550537   18.313232       -0.000244
7    9727.895020    9726.895264  1383.499756  9727.895020   917.968994    1.000000  9726.895264    0.03125           9726.895264    0.968506       -0.593994
8    9728.895020    9728.488525  1383.500000  9728.895020  1136.313477    1.000000  9728.488525    0.03125           9728.488525    0.375244      -99.593750
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1295619/4096.[0m
[10/19 11:33:16]  --------------------------------------------------------------------------------
[10/19 11:33:16]  Iteration: 7 (0 solution, 6 counterexamples)
[10/19 11:33:17]  Generator returned sat in 0.095847 secs.
[10/19 11:33:17]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:17]  Improved gap from 1.5625 to 1.5625
[10/19 11:33:17]  Improved number of small numbers from 101 to 114 out of a max of 114
[10/19 11:33:17]  Verifer returned sat in 0.605855 secs.
[10/19 11:33:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9208.519531    9177.924561  1203.468750  9208.519531     0.123779    0.123779  9177.924561   0.000000           9177.924561   30.594971        0.030762
1    9208.519775    9208.488770  1301.906250  9208.519775    30.595215   30.595215  9208.488770   0.000000           9208.457764    0.031006       -1.531494
2    9609.644531    9308.488770  1301.906250  9609.644531   401.155762  401.155762  9308.488770   0.030762           9308.488770  301.125000      299.562500
3    9609.644531    9393.238281  1301.906250  9609.644531     0.031006    0.031006  9393.238281   0.030762           9393.238281  216.375488      199.562500
4    9609.644531    9410.082275  1301.906250  9609.644531   216.344727    1.000000  9410.082275   0.030762           9410.082275  199.531494       99.562500
5    9610.644531    9524.082275  1301.906250  9610.644531   418.938232    1.000000  9524.082275   0.030762           9524.082275   86.531494        0.562500
6    9611.644531    9610.051270  1400.343750  9611.644531   635.531738    1.000000  9610.051270   0.030762           9610.051270    1.562500        0.000000
7    9612.644531    9611.644531  1498.750244  9612.644531   853.344727    1.000000  9611.644531   0.030762           9611.644531    0.969238       -0.593506
8    9613.644531    9613.207275  1597.187744  9613.644531  1055.906982    1.000000  9613.207275   0.030762           9613.207275    0.406494       -1.156006
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=4793/16.[0m
[10/19 11:33:18]  --------------------------------------------------------------------------------
[10/19 11:33:18]  Iteration: 8 (0 solution, 7 counterexamples)
[10/19 11:33:19]  Generator returned sat in 1.546870 secs.
[10/19 11:33:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:20]  Improved gap from 0.03094482421875 to 1.5625
[10/19 11:33:20]  Improved number of small numbers from 49 to 114 out of a max of 114
[10/19 11:33:20]  Verifer returned sat in 1.037598 secs.
[10/19 11:33:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9111.864258    8910.301758  1203.530762  9111.864258      0.123535    0.123535  8910.301758   0.000000           8910.239990  201.562500      101.562500
1    9111.864258    9010.301758  1203.530762  9111.864258    201.562500  201.562500  9010.301758   0.000000           9010.239990  101.562500        1.562500
2    9111.926025    9110.363770  1301.906006  9111.926025    101.624268  101.624268  9110.363770   0.000000           9110.363770    1.562256       -0.000488
3    9410.236816    9195.236816  1301.906006  9410.236816    299.873047  299.873047  9195.236816   0.061768           9195.236816  214.938232      198.248535
4    9411.236816    9211.988281  1301.906006  9411.236816   1168.616211    1.000000  9211.988281   0.061768           9211.988281  199.186768       99.248535
5    9412.236816    9311.988037  1301.906006  9412.236816   2739.605469    1.000000  9311.988037   0.061768           9311.988037  100.187012        0.248535
6    9413.236816    9411.988281  1400.281738  9413.236816   5881.459473    1.000000  9411.988281   0.061768           9411.988281    1.186768       -0.375732
7    9414.236816    9413.550781  1498.719238  9414.236816  12195.421875    1.000000  9413.550781   0.061768           9413.488525    0.624268       -0.938232
8    9415.236816    9415.174805  1597.094971  9415.236816  24792.968750    1.000000  9415.174805   0.061768           9415.174805    0.000244       -1.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=406013/2048.[0m
[10/19 11:33:21]  --------------------------------------------------------------------------------
[10/19 11:33:21]  Iteration: 9 (0 solution, 8 counterexamples)
[10/19 11:33:21]  Generator returned sat in 0.290642 secs.
[10/19 11:33:21]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:22]  Improved gap from 1.5625 to 1.5625
[10/19 11:33:22]  Improved number of small numbers from 63 to 114 out of a max of 114
[10/19 11:33:22]  Verifer returned sat in 0.794575 secs.
[10/19 11:33:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    8854.509766    8754.386230  1105.154541  8854.509766      0.123535    0.123535  8754.386230        0.0           8754.324707  100.123535        0.123535
1    8854.509766    8854.448242  1203.530029  8854.509766      0.061523    0.061523  8854.448242        0.0           8854.448242    0.061523       -1.500977
2    8857.634766    8856.072510  1301.905762  8857.634766      3.186523    3.186523  8856.072510        0.0           8856.072510    1.562256       -0.000244
3    9155.945068    8941.007080  1301.905762  9155.945068    299.872559  299.872559  8941.007080        0.0           8941.007080  214.937988      198.310059
4    9156.945068    8957.635010  1301.905762  9156.945068    971.986816    1.000000  8957.635010        0.0           8656.449707  199.310059       99.310059
5    9157.945068    9057.635010  1301.905762  9157.945068   2149.347168    1.000000  9057.635010        0.0           9158.007080  100.310059        0.310059
6    9158.945068    9157.696777  1400.281494  9158.945068   4700.819336    1.000000  9157.696777        0.0           9157.696777    1.248291       -0.314209
7    9159.945068    9159.321045  1498.657227  9159.945068   9834.018066    1.000000  9159.321045        0.0           9159.321045    0.624023       -0.938477
8    9160.945068    9160.945068  1498.657227  9160.945068  20070.408203    1.000000  9160.945068        0.0           9160.945068    0.000000      -99.938477
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=203133/1024.[0m
[10/19 11:33:23]  --------------------------------------------------------------------------------
[10/19 11:33:23]  Iteration: 10 (0 solution, 9 counterexamples)
[10/19 11:33:24]  Generator returned sat in 1.098495 secs.
[10/19 11:33:24]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:24]  Improved gap from 0.005 to 0
[10/19 11:33:25]  Improved number of small numbers from 55 to 75 out of a max of 114
[10/19 11:33:25]  Verifer returned sat in 1.520868 secs.
[10/19 11:33:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    9397.074951    9397.070805   801.926671  9397.074951  0.123291  0.123291  9397.070805        0.0           9397.070805  0.004146        0.000169
1    9397.074951    9397.074782   901.926270  9397.074951  0.000244  0.000244  9397.074782        0.0           9397.074707  0.000169       -0.000233
2    9397.075692    9397.075237  1001.925762  9397.075692  0.000909  0.000909  9397.075237        0.0           9397.075237  0.000455        0.000000
3    9397.075692    9397.075692  1101.925537  9397.075692  0.000227  0.000227  9397.075692        0.0           9397.075928  0.000000       -0.000225
4    9397.085692    9397.075919  1201.905762  9397.085692  0.010227  0.010000  9397.075919        0.0           9397.075919  0.009773       -0.010000
5    9397.095692    9397.095692  1301.905762  9397.095692  0.022727  0.010000  9397.095692        0.0           9397.095703  0.000000        0.000000
6    9397.105692    9397.095692  1401.895762  9397.105692  0.086364  0.010000  9397.095692        0.0           9397.105713  0.010000        0.000000
7    9397.115692    9397.105692  1501.885742  9397.115692  0.212727  0.010000  9397.105692        0.0           9397.105469  0.010000       -0.000020
8    9397.125692    9397.115967  1501.885986  9397.125692  0.485000  0.010000  9397.115967        0.0           9397.115967  0.009725      -99.989775
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/2200.[0m
[10/19 11:33:26]  --------------------------------------------------------------------------------
[10/19 11:33:26]  Iteration: 11 (0 solution, 10 counterexamples)
[10/19 11:33:29]  Generator returned sat in 3.282181 secs.
[10/19 11:33:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:30]  Improved gap from 0.0 to 0
[10/19 11:33:31]  Improved number of small numbers from 60 to 70 out of a max of 114
[10/19 11:33:31]  Verifer returned sat in 1.677432 secs.
[10/19 11:33:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9297.070312    9297.069692   901.931428  9297.070312    0.123047    0.123047  9297.069692   0.000000           9297.069692    0.000621        0.000288
1    9297.070312    9297.070025  1001.930908  9297.070312    0.000244    0.000244  9297.070025   0.000000           9297.070557    0.000288       -0.000233
2    9297.071025    9297.070692  1101.930428  9297.071025    0.001000    0.001000  9297.070692   0.000000           9297.070692    0.000333        0.000000
3    9397.072025    9297.071358  1101.930428  9397.072025  100.001333  100.001333  9297.071358   0.000333           9297.071358  100.000333        0.000667
4    9397.076358    9397.071358  1201.915527  9397.076358  100.004667    0.010000  9397.071358   0.000333           9397.071358    0.004667       -0.009901
5    9397.086358    9397.086025  1301.905518  9397.086358  300.007333    0.010000  9397.086025   0.000333           9397.086025    0.000000       -0.009911
6    9397.096358    9397.096025  1401.895752  9397.096358  500.038000    0.010000  9397.096025   0.000333           9397.096025    0.000000       -0.009676
7    9397.106358    9397.106025  1501.890095  9397.106358  700.087333    0.010000  9397.106025   0.000333           9397.106025    0.000000       -0.005333
8    9397.116358    9397.111358  1501.890137  9397.116358  700.156667    0.010000  9397.111358   0.000333           9397.116455    0.004667      -99.995292
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/1500.[0m
[10/19 11:33:31]  --------------------------------------------------------------------------------
[10/19 11:33:31]  Iteration: 12 (0 solution, 11 counterexamples)
[10/19 11:33:33]  Generator returned sat in 0.882218 secs.
[10/19 11:33:33]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:33]  Improved gap from 0.0 to 0
[10/19 11:33:34]  Improved number of small numbers from 60 to 89 out of a max of 114
[10/19 11:33:34]  Verifer returned sat in 1.583352 secs.
[10/19 11:33:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    6842.589111    6842.570801  3356.413818  6842.589111  0.122803  0.122803  6842.570801        0.0           6842.570801  0.018311        0.001465
1    6842.589111    6842.588623  3455.927979  6842.589111  0.000977  0.000977  6842.588623        0.0           6842.588623  0.000488       -0.484375
2    6843.074219    6843.073486  3555.927190  6843.074219  0.485596  0.485596  6843.073486        0.0           6843.074951  0.000732       -0.000056
3    6843.074951    6843.074275  3655.926270  6843.074951  0.001465  0.001465  6843.074275        0.0           6843.075928  0.000676       -0.000244
4    6843.084275    6843.083442  3755.908857  6843.084275  0.010000  0.010000  6843.083442        0.0           6843.083442  0.000833       -0.008333
5    6843.093442    6843.092608  3855.899690  6843.093442  0.010000  0.010000  6843.092608        0.0           6843.091553  0.000833       -0.008333
6    6843.102608    6843.101775  3955.889893  6843.102608  0.010000  0.010000  6843.101775        0.0           6843.101074  0.000833       -0.008964
7    6843.111775    6843.111775  4055.880615  6843.111775  0.010000  0.010000  6843.111775        0.0           6843.111775  0.000000       -0.009075
8    6843.121775    6843.121582  4155.871338  6843.121775  0.010000  0.010000  6843.121582        0.0           6843.121582  0.000193       -0.008352
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/600.[0m
[10/19 11:33:35]  --------------------------------------------------------------------------------
[10/19 11:33:35]  Iteration: 13 (0 solution, 12 counterexamples)
[10/19 11:33:36]  Generator returned sat in 0.996428 secs.
[10/19 11:33:36]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:33:38]  Improved number of small numbers from 62 to 72 out of a max of 113
[10/19 11:33:38]  Verifer returned sat in 2.418066 secs.
[10/19 11:33:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    5060.780029    4860.779969  4054.292115  5060.780029    0.122803    0.122803  4860.779969     0.0000           5060.782471  200.000061      100.000061
1    5060.780029    4960.779969  4054.292115  5060.780029    0.002686    0.002686  4960.779969     0.0000           5060.782227  100.000061        0.000061
2    5060.780029    5060.779969  4055.880615  5060.780029   99.997314   99.997314  5060.779969     0.0000           5159.194092    0.000061      -98.411439
3    5559.198969    5159.582969  4055.880615  5559.198969  498.419000  498.419000  5159.582969     0.0025           5159.582969  399.613500      300.005000
4    5559.198969    5359.188969  4055.880615  5559.198969  399.611000    0.010000  5359.188969     0.0025           5359.188969  200.007500      200.005000
5    5759.201469    5359.193969  4055.880615  5759.201469  400.010000  200.005000  5359.193969     0.0050           5359.193969  400.002500      300.005000
6    5759.201469    5559.191469  4055.880615  5759.201469  350.212000    0.010000  5559.191469     0.0050           5559.191469  200.005000      200.005000
7    5935.106719    5633.223885  4055.880615  5935.106719  375.910250  187.955125  5633.223885     0.0050           5633.223885  301.877833      275.910250
8    5959.201469    5659.191469  4055.880615  5959.201469  325.972583  162.986292  5659.191469     0.0050           5759.193848  300.005000      200.005000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/400, 
, buffer=60001/200.[0m
[10/19 11:33:39]  --------------------------------------------------------------------------------
[10/19 11:33:39]  Iteration: 14 (0 solution, 13 counterexamples)
[10/19 11:33:42]  Generator returned sat in 2.798485 secs.
[10/19 11:33:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:42]  Improved gap from 0.0 to 0
[10/19 11:33:42]  Improved number of small numbers from 76 to 114 out of a max of 114
[10/19 11:33:42]  Verifer returned sat in 0.400057 secs.
[10/19 11:33:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    4860.781250    4760.780518  4054.291992  4860.781250    0.122314    0.122314  4760.780518   0.000000           4760.780518  100.000732        0.001221
1    4860.781250    4860.780518  4054.291992  4860.781250    0.002686    0.002686  4860.780518   0.000000           4860.780518    0.000732      -99.998779
2    5060.780029    4960.780762  4054.291992  5060.780029  199.999512  199.999512  4960.780762   0.000000           4960.780762   99.999268        0.000000
3    5259.780762    5060.780029  4054.291992  5259.780762  299.000000  299.000000  5060.780029   0.000732           5160.780762  199.000000       99.000000
4    5259.780762    5259.780029  4054.291992  5259.780762    1.000000    1.000000  5259.780029   0.000732           5259.780029    0.000000       -1.000000
5    5260.780762    5260.780029  4153.292969  5260.780762    1.000000    2.500000  5260.780029   0.000732           5359.780029    0.000000       -0.999023
6    5261.780762    5261.779785  4253.291992  5261.780762    1.000000    2.500000  5261.779785   0.000732           5261.779785    0.000244        0.000000
7    5262.780518    5261.780029  4352.291992  5262.780518    1.000000    2.500000  5261.780029   0.000732           5261.779297    0.999756       -0.000244
8    5262.780762    5262.780029  4352.291992  5262.780762    1.000000    2.500000  5262.780029   0.000732           5362.780518    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=99.[0m
[10/19 11:33:43]  --------------------------------------------------------------------------------
[10/19 11:33:43]  Iteration: 15 (0 solution, 14 counterexamples)
[10/19 11:33:43]  Generator returned sat in 0.148119 secs.
[10/19 11:33:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:47]  Improved gap from 3.6250057220458984 to 21.875
[10/19 11:33:48]  Improved number of small numbers from 36 to 63 out of a max of 114
[10/19 11:33:48]  Verifer returned sat in 5.164444 secs.
[10/19 11:33:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    5699.209961    5599.209792  4123.184967  5699.209961    0.122070    0.122070  5599.209792    0.000000           5699.270996  100.000169        0.000169
1    5699.209961    5699.209792  4123.184967  5699.209961    0.061279    0.061279  5699.209792    0.000000           5699.270752    0.000169      -99.999831
2    5799.332106    5799.270949  4123.184967  5799.332106  100.122314  100.122314  5799.270949    0.000000           5799.270949    0.061157      -99.877686
3    6471.227980    5993.815918  4123.184967  6471.227980  671.957031  671.957031  5993.815918  402.406616           5993.815918   75.005446       69.611572
4    6640.717238    5999.270996  4123.184967  6640.717238  336.978516  169.489258  5999.270996  471.895874           5999.270996  169.550368       69.611572
5    6640.717238    6099.270949  4153.573242  6640.717238  169.489258   85.744629  6099.270949  471.895874           6099.270949   69.550415       -0.000153
6    6656.911452    6168.882521  4231.637207  6656.911452   85.744629  129.616943  6168.882521  471.895874           6168.882521   16.133057       -5.741974
7    6684.650710    6190.818848  4308.700928  6684.650710   43.872314   66.808472  6190.818848  471.895874           6190.818848   21.935988       -0.938995
8    6685.650879    6213.754883  4308.701172  6685.650879   22.936157   35.404236  6213.754883  471.895874           6213.754883    0.000122      -99.938582
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=285129/4096.[0m
[10/19 11:33:49]  --------------------------------------------------------------------------------
[10/19 11:33:49]  Iteration: 16 (0 solution, 15 counterexamples)
[10/19 11:33:50]  Generator returned sat in 0.791229 secs.
[10/19 11:33:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:50]  Improved gap from 0.93896484375 to 1.5625
[10/19 11:33:51]  Improved number of small numbers from 58 to 113 out of a max of 114
[10/19 11:33:51]  Verifer returned sat in 1.062877 secs.
[10/19 11:33:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6240.717041    6240.656006  3581.708008  6240.717041    0.121826    0.121826  6240.656006    0.000000           6240.656006    0.061035        0.030273
1    6240.717041    6240.686768  3581.708252  6240.717041    0.030518    0.030518  6240.686768    0.000000           6240.747803    0.030273      -99.969482
2    6340.686768    6340.686523  3680.145508  6340.686768  100.000000  100.000000  6340.686523    0.000000           6340.656006    0.000244       -1.562500
3    6739.674805    6442.249023  3680.145508  6739.674805  398.988281  398.988281  6442.249023  296.209229           6442.249023    1.216553        1.216309
4    6938.952393    6542.249023  3680.145508  6938.952393  200.494141  201.494141  6542.249023  395.486816           6542.249023    1.216553        1.216309
5    7038.982910    6542.279785  3680.145508  7038.982910  101.247070  102.247070  6542.279785  395.517334           6542.279785  101.185791        1.216309
6    7038.982910    6642.279541  3778.552490  7038.982910   51.623535   52.623535  6642.279541  395.517334           6642.279541    1.186035       -0.376709
7    7039.982910    6643.872559  3876.959473  7039.982910   26.811768    1.000000  6643.872559  395.517334           6643.872559    0.593018       -0.969727
8    7040.982910    6645.465576  3876.959717  7040.982910   14.405884    1.000000  6645.465576  395.517334           6645.465576    0.000000      -99.969482
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=125/4096, 
, buffer=2491/2048.[0m
[10/19 11:33:51]  --------------------------------------------------------------------------------
[10/19 11:33:51]  Iteration: 17 (0 solution, 16 counterexamples)
[10/19 11:33:54]  Generator returned sat in 2.532086 secs.
[10/19 11:33:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:55]  Improved gap from 0.0 to 1.5625
[10/19 11:33:55]  Improved number of small numbers from 74 to 107 out of a max of 114
[10/19 11:33:55]  Verifer returned sat in 1.204280 secs.
[10/19 11:33:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6836.860840    6783.935303  3597.868164  6836.860840    0.121826    0.121826  6783.935303        0.0           6783.935303   52.925537       52.925293
1    6836.860840    6835.298584  3644.942627  6836.860840    0.060791    0.060791  6835.298584        0.0           6835.298584    1.562256       -0.000244
2    6836.921875    6836.861084  3736.380127  6836.921875    1.623291    1.623291  6836.861084        0.0           6836.860840    0.060791       -8.501709
3    7144.985840    6928.731201  3736.380127  7144.985840  308.124756  308.124756  6928.731201        0.0           6928.731201  216.254639      199.562256
4    7145.925049    6959.573584  3736.380127  7145.925049  217.193848    1.000000  6959.573584        0.0           6959.573584  186.351465      100.501465
5    7145.986084    7045.484619  3736.380127  7145.986084  186.412500    1.000000  7045.484619        0.0           7045.484619  100.501465        0.562500
6    7146.986084    7145.423584  3834.817383  7146.986084  312.935303    1.000000  7145.423584        0.0           7147.046875    1.562500       -0.000244
7    7147.986084    7147.046997  3933.194092  7147.986084  325.038574    1.000000  7147.046997        0.0           7147.046997    0.939087       -0.623535
8    7148.986084    7148.670166  4031.570557  7148.986084  281.210120    1.000000  7148.670166        0.0           7148.670166    0.315918       -1.247070
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=408829/2048.[0m
[10/19 11:33:56]  --------------------------------------------------------------------------------
[10/19 11:33:56]  Iteration: 18 (0 solution, 17 counterexamples)
[10/19 11:33:57]  Generator returned sat in 0.589828 secs.
[10/19 11:33:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:57]  Improved gap from 0.0609130859375 to 1.5625
[10/19 11:33:59]  Improved number of small numbers from 53 to 64 out of a max of 114
[10/19 11:33:59]  Verifer returned sat in 1.860196 secs.
[10/19 11:33:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6815.718506    6715.713584  3697.468994  6815.718506    0.121582    0.121582  6715.713584      0.000           6715.713584  100.004922      100.004824
1    6815.718506    6815.713584  3697.468994  6815.718506    0.005127    0.005127  6815.713584      0.000           6815.713584    0.004922        0.004824
2    6859.998584    6858.436084  3753.184092  6859.998584   44.285000   44.285000  6858.436084      0.000           6858.436084    1.562500        0.000000
3    7177.421084    6959.998584  3753.184092  7177.421084  318.985000  318.985000  6959.998584      0.005           6959.998584  217.417500      217.417500
4    7177.431084    6959.998584  3753.184092  7177.431084  367.427500    0.010000  6959.998584      0.005           7060.003662  217.427500      117.427500
5    7177.431084    7060.003584  3753.184092  7177.431084  217.427500    1.000000  7060.003584      0.005           7060.003584  117.422500       17.427500
6    7178.431084    7176.863584  3834.756592  7178.431084  303.351250    1.000000  7176.863584      0.005           7176.863584    1.562500        0.000000
7    7179.431084    7178.426084  3933.193848  7179.431084  326.297500    1.000000  7178.426084      0.005           7178.420898    1.000000       -0.562744
8    7180.431084    7179.993652  3933.194092  7180.431084  328.641250    1.000000  7179.993652      0.005           7179.993652    0.432432      -99.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=21741750000000003/100000000000000.[0m
[10/19 11:33:59]  --------------------------------------------------------------------------------
[10/19 11:33:59]  Iteration: 19 (0 solution, 18 counterexamples)
[10/19 11:34:06]  Generator returned sat in 5.981123 secs.
[10/19 11:34:06]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 3/2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:34:06]  Improved gap from 0.0 to 0
[10/19 11:34:08]  Improved number of small numbers from 58 to 72 out of a max of 114
[10/19 11:34:08]  Verifer returned sat in 2.397606 secs.
[10/19 11:34:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6877.426025    6777.423584  3376.201592  6877.426025     0.121338   0.121338  6777.423584        0.0           6877.426270  100.002441    2.441406e-03
1    6877.426025    6877.423584  3476.199092  6877.426025     0.002686   0.002686  6877.423584        0.0           6877.428711    0.002441   -5.859375e-05
2    6900.428584    6877.426084  3553.196533  6900.428584    23.005000  23.005000  6877.426084        0.0           6877.423340   23.002500   -5.859375e-05
3    6900.431084    6900.431084  3653.194092  6900.431084    23.005000  23.005000  6900.431084        0.0           6900.431084    0.000000   -3.000000e-14
4    6900.441084    6900.441084  3753.184082  6900.441084   219.018750   0.010000  6900.441084        0.0           6900.441084    0.000000   -9.765625e-06
5    6900.451084    6900.443584  3853.166504  6900.451084   363.054375   0.010000  6900.443584        0.0           6900.443584    0.007500   -7.587891e-03
6    6900.461084    6900.461084  3953.164062  6900.461084   579.107813   0.010000  6900.461084        0.0           6900.461084    0.000000   -2.929688e-05
7    6900.471084    6900.471084  4053.144092  6900.471084   868.706719   0.010000  6900.471084        0.0           6900.471084    0.000000   -1.000000e-02
8    6900.481084    6900.481084  4153.144043  6900.481084  1303.105078   0.010000  6900.481084        0.0           6900.483643    0.000000   -4.882813e-05
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=5/1024.[0m
[10/19 11:34:08]  --------------------------------------------------------------------------------
[10/19 11:34:08]  Iteration: 20 (0 solution, 19 counterexamples)
[10/19 11:34:13]  Generator returned sat in 4.413205 secs.
[10/19 11:34:13]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:34:14]  Improved gap from 0.0 to 100
[10/19 11:34:14]  Improved number of small numbers from 33 to 114 out of a max of 114
[10/19 11:34:14]  Verifer returned sat in 0.827452 secs.
[10/19 11:34:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    7079.208496    6979.147949  4053.144043  7079.208496    0.121094    0.121094  6979.147949    0.000000           7079.178223  100.060547        0.060547
1    7179.239014    7079.147949  4053.144043  7179.239014  200.091064  200.091064  7079.147949    0.030273           7079.147949  100.060791        0.060791
2    7279.178223    7179.147949  4053.144043  7279.178223  200.000000  200.000000  7179.147949    0.030273           7279.178467  100.000000        0.000000
3    7379.208496    7279.147949  4053.144043  7379.208496  200.030273  200.030273  7279.147949    0.030273           7279.117676  100.030273        0.030273
4    7430.178223    7430.147949  4053.144043  7430.178223  151.000000  152.000000  7430.147949    0.030273           7430.147949    0.000000      -49.000000
5    7606.678223    7511.875488  4053.144043  7606.678223  176.500000  177.500000  7511.875488   27.469482           7511.875488   67.333252        0.060791
6    7706.708740    7679.147949  4053.144043  7706.708740  167.363770  168.363770  7679.147949   27.500000           7679.147949    0.060791        0.060791
7    7907.647949    7779.147949  4053.144043  7907.647949  201.000000  202.000000  7779.147949  128.439209           7779.147949    0.060791        0.060791
8    8083.087158    7779.148193  4053.144043  8083.087158  175.500000  176.500000  7779.148193  203.878418           7779.148193  100.060547        0.060791
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=417481/2048, 
, buffer=249/4096.[0m
[10/19 11:34:15]  --------------------------------------------------------------------------------
[10/19 11:34:15]  Iteration: 21 (0 solution, 20 counterexamples)
[10/19 11:34:17]  Generator returned sat in 2.072554 secs.
[10/19 11:34:17]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 11:34:17]  Improved gap from 98.12109375 to 100
[10/19 11:34:18]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 11:34:18]  Verifer returned sat in 0.458776 secs.
[10/19 11:34:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6977.178223    6877.178223  4053.144043  6977.178223    0.121094    0.121094  6877.178223    0.000000           6877.178223  100.000000        0.060547
1    6977.178223    6977.117676  4053.144043  6977.178223  100.000000  100.000000  6977.117676    0.000000           7077.178223    0.060547      -99.939453
2    7276.057129    7077.117676  4053.144043  7276.057129  298.939453  298.939453  7077.117676    0.000000           7177.178223  198.939453       98.939453
3    7376.178223    7177.117676  4053.144043  7376.178223  299.060547  299.060547  7177.117676    0.060547           7177.057129  199.000000       99.000000
4    7377.178223    7377.117676  4053.144043  7377.178223  300.939453    1.000000  7377.117676    0.060547           7377.117676    0.000000        0.000000
5    7778.178223    7377.178223  4053.144043  7778.178223  401.000000  803.000000  7377.178223  202.060547           7377.178223  198.939453       99.000000
6    7779.178223    7577.057129  4053.144043  7779.178223  301.060547    1.000000  7577.057129  202.060547           7577.057129    0.060547        0.000000
7    8180.057129    7577.178223  4053.144043  8180.057129  400.939453  802.878906  7577.178223  403.939453           7577.178223  198.939453       99.000000
8    8181.057129    7677.117676  4053.144043  8181.057129  201.060547    1.000000  7677.117676  403.939453           7777.178223  100.000000        0.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=103393/256, 
, buffer=99.[0m
[10/19 11:34:18]  --------------------------------------------------------------------------------
[10/19 11:34:18]  Iteration: 22 (0 solution, 21 counterexamples)
[10/19 11:34:19]  Generator returned sat in 0.702887 secs.
[10/19 11:34:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:34:20]  Improved gap from 0.05405405405405486 to 100
[10/19 11:34:20]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 11:34:20]  Verifer returned sat in 0.615107 secs.
[10/19 11:34:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6977.178223    6877.178223  4053.144043  6977.178223    0.121094    0.121094  6877.178223   0.000000           6877.178223  100.000000      100.000000
1    6977.178223    6877.178223  4053.144043  6977.178223  100.000000  100.000000  6877.178223   0.000000           6977.238770  100.000000        0.000000
2    7077.178223    6977.238770  4053.144043  7077.178223  200.000000  200.000000  6977.238770   0.000000           6977.238770   99.939453        0.000000
3    7124.178223    7077.178223  4053.144043  7124.178223  146.939453  146.939453  7077.178223   0.000000           7177.238770   47.000000      -53.000000
4    7225.678223    7177.178223  4053.144043  7225.678223  201.000000  101.500000  7177.178223   0.000000           7259.678223   48.500000      -51.500000
5    7377.178223    7368.541504  4053.144043  7377.178223  301.000000  151.500000  7368.541504   0.000000           7368.541504    8.636719        0.000000
6    7574.329590    7477.178223  4053.144043  7574.329590  392.302734  197.151367  7477.178223   0.000000           7477.178223   97.151367       97.151367
7    7775.829590    7577.117676  4053.144043  7775.829590  401.000000  201.500000  7577.117676   0.000000           7577.117676  198.711914      198.651367
8    7977.299316    7577.178223  4053.144043  7977.299316  400.939453  201.469727  7577.178223   0.060547           8098.230957  400.060547      300.060547
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=31/512, 
, buffer=153631/512.[0m
[10/19 11:34:20]  --------------------------------------------------------------------------------
[10/19 11:34:20]  Iteration: 23 (0 solution, 22 counterexamples)
[10/19 11:34:23]  Generator returned sat in 2.508346 secs.
[10/19 11:34:23]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 11:34:23]  Improved gap from 0.0 to 0
[10/19 11:34:23]  Improved number of small numbers from 57 to 114 out of a max of 114
[10/19 11:34:23]  Verifer returned sat in 0.317806 secs.
[10/19 11:34:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6577.919678    6577.919678  4053.143799  6577.919678    0.120850    0.120850  6577.919678   0.000000           6677.979980    0.000000     -100.000000
1    6777.919678    6677.979980  4053.143799  6777.919678  200.000000  200.000000  6677.979980   0.000000           6677.979980   99.939697        0.000000
2    7078.919678    6777.979980  4053.143799  7078.919678  400.939697  400.939697  6777.979980   0.000000           6777.979980  300.939697      201.000000
3    7179.040527    6977.919678  4053.143799  7179.040527  401.060547  401.060547  6977.919678   0.060547           6977.919678  201.060303      201.060303
4    7179.040527    7077.919678  4053.143799  7179.040527    1.000000    1.000000  7077.919678   0.060547           7077.919678  101.060303      101.060303
5    7179.040527    7077.919678  4053.143799  7179.040527    1.000000    0.500000  7077.919678   0.060547           7177.979980  101.060303        1.060303
6    7179.040527    7177.919678  4152.083496  7179.040527    1.000000    0.500000  7177.919678   0.060547           7177.859375    1.060303        0.000000
7    7179.040527    7178.979980  4251.643799  7179.040527    1.000000    0.500000  7178.979980   0.060547           7178.919922    0.000000       -0.439697
8    7179.540527    7179.479980  4351.583496  7179.540527    1.000000    0.500000  7179.479980   0.060547           7179.479980    0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=823543/4096.[0m
[10/19 11:34:24]  --------------------------------------------------------------------------------
[10/19 11:34:24]  Iteration: 24 (0 solution, 23 counterexamples)
[10/19 11:34:26]  Generator returned sat in 1.206706 secs.
[10/19 11:34:26]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:34:26]  Improved gap from 35.0604248046875 to 100
[10/19 11:34:26]  Improved number of small numbers from 68 to 114 out of a max of 114
[10/19 11:34:26]  Verifer returned sat in 0.683608 secs.
[10/19 11:34:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6795.970459    6795.970215  4251.643799  6795.970459    0.120605    0.120605  6795.970215   0.000000           6795.970215    0.000244        0.000244
1    6996.975098    6796.925293  4251.643799  6996.975098  201.004883  201.004883  6796.925293   0.000000           6796.925293  200.049805      101.004883
2    6996.975098    6995.970215  4251.643799  6996.975098  200.049805  200.049805  6995.970215   0.000000           6995.970215    1.004883        1.004883
3    6996.975342    6995.970215  4251.643799  6996.975342    1.005127    1.005127  6995.970215   0.000000           6995.970215    1.005127      -98.994873
4    7196.970215    7195.955322  4251.643799  7196.970215  201.000000  200.000000  7195.955322   0.000000           7195.955322    1.014893        1.000000
5    7595.985352    7195.975098  4251.643799  7595.985352  400.030029  399.030029  7195.975098   0.005127           7195.975098  400.005127      300.010010
6    7595.985352    7295.975098  4251.643799  7595.985352  201.004883    0.010000  7295.975098   0.005127           7295.975098  300.005127      200.010010
7    7596.985107    7395.970215  4251.643799  7596.985107  301.004883  300.004883  7395.970215   0.005127           7495.975342  201.009766      101.009766
8    7596.990234    7595.970215  4251.643799  7596.990234  201.014893  200.014893  7595.970215   0.005127           7595.970215    1.014893        1.014893
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=21/4096, 
, buffer=1228841/4096.[0m
[10/19 11:34:27]  --------------------------------------------------------------------------------
[10/19 11:34:27]  Iteration: 25 (0 solution, 24 counterexamples)
[10/19 11:34:31]  Generator returned sat in 3.823446 secs.
[10/19 11:34:31]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 11:34:34]  Improved gap from 0.0 to 100
[10/19 11:34:35]  Improved number of small numbers from 68 to 79 out of a max of 114
[10/19 11:34:35]  Verifer returned sat in 3.907801 secs.
[10/19 11:34:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6996.994873    6797.000098  4251.643799  6996.994873     0.120361     0.120361  6797.000098      0.000           6797.000098  199.994775       99.999775
1    6996.994873    6896.995098  4251.643799  6996.994873     0.004883     0.004883  6896.995098      0.000           6896.990234   99.999775       -0.000225
2    7096.995098    6996.995098  4251.643799  7096.995098   200.000000   200.000000  6996.995098      0.000           6996.994873  100.000000        0.000000
3    8602.990098    7096.995098  4251.643799  8602.990098  1605.995000  1605.995000  7096.995098    996.995           7197.000244  509.000000      409.000000
4    8603.000098    7206.000098  4251.643799  8603.000098   952.995000     0.010000  7206.000098    996.995           7206.000098  400.005000      309.010000
5    8833.995098    7296.995098  4251.643799  8833.995098   631.000000   631.000000  7296.995098   1028.000           7296.990234  509.000000      409.000000
6    8833.995098    7485.545098  4251.643799  8833.995098   465.500000     0.010000  7485.545098   1028.000           7485.545098  320.450000      309.000000
7    8940.570098    7596.995098  4251.643799  8940.570098   427.025000   427.025000  7596.995098   1028.000           7596.995098  315.575000      315.575000
8    9034.005098    7596.995117  4251.643799  9034.005098   409.010000   409.010000  7596.995117   1028.000           7596.995117  409.009980      309.010000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=6201/200, 
, buffer=409.[0m
[10/19 11:34:35]  --------------------------------------------------------------------------------
[10/19 11:34:35]  Iteration: 26 (0 solution, 25 counterexamples)
[10/19 11:34:41]  Generator returned sat in 5.097766 secs.
[10/19 11:34:41]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:34:41]  Improved gap from 0.0 to 1.5625
[10/19 11:34:42]  Improved number of small numbers from 45 to 71 out of a max of 114
[10/19 11:34:42]  Verifer returned sat in 1.331508 secs.
[10/19 11:34:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    8301.891357    8101.891333  2946.747563  8301.891357    0.120361    0.120361  8101.891333   0.000000           8201.951660  200.000024      100.000024
1    8301.891357    8201.951514  2946.747563  8301.891357    0.060303    0.060303  8201.951514   0.000000           8201.951514   99.939844        0.000024
2    8703.196875    8401.891113  2946.747563  8703.196875  501.245361  501.245361  8401.891113   0.060181           8401.891113  301.245581      301.245361
3    8703.196875    8501.891113  2946.747563  8703.196875    4.962891    4.962891  8501.891113   0.060181           8501.891113  201.245581      201.245361
4    8703.196875    8601.891113  2946.747563  8703.196875    3.481445    1.000000  8601.891113   0.060181           8601.891113  101.245581      101.245361
5    8703.196875    8601.951660  2946.747563  8703.196875    2.740723    1.000000  8601.951660   0.060181           8601.951660  101.185034        1.245361
6    8703.196875    8701.891333  3045.185059  8703.196875    2.370361    1.000000  8701.891333   0.060181           8703.196875    1.245361       -0.317144
7    8704.136694    8703.513916  3143.562383  8704.136694    2.185181    1.000000  8703.513916   0.060181           8703.513916    0.562598       -1.000000
8    8705.136694    8705.076514  3241.999756  8705.136694    2.092590    1.000000  8705.076514   0.060181           8705.076416    0.000000       -1.562627
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1233901/4096.[0m
[10/19 11:34:43]  --------------------------------------------------------------------------------
[10/19 11:34:43]  Iteration: 27 (0 solution, 26 counterexamples)
[10/19 11:34:51]  Generator returned sat in 7.679523 secs.
[10/19 11:34:51]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:34:53]  Improved gap from 0.0 to 54.6875
[10/19 11:34:56]  Improved number of small numbers from 48 to 73 out of a max of 114
[10/19 11:34:56]  Verifer returned sat in 5.159292 secs.
[10/19 11:34:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    8400.598145    8372.913086  2820.752197  8400.598145    0.120117    0.120117  8372.913086      0.000           8372.913086  27.685059       27.685056
1    8427.605469    8372.918000  2866.059786  8427.605469   54.692383   54.692383  8372.918000      0.000           8372.918000  54.687469       -0.000031
2    8427.610500    8427.605500  2901.440063  8427.610500   54.692500   54.692500  8427.605500      0.000           8492.229980   0.005000      -64.614722
3    8619.915361    8591.692871  2901.440063  8619.915361  192.309861  192.309861  8591.692871      0.005           8591.692871  28.217490       27.685139
4    8619.925361    8592.230222  2946.747559  8619.925361  109.389893    0.010000  8592.230222      0.005           8592.230222  27.690139      -26.997366
5    8701.891333    8647.198833  2991.778809  8701.891333  109.656111  165.484167  8647.198833      0.005           8647.198833  54.687500       -0.000144
6    8757.000500    8701.891113  3036.669786  8757.000500  109.796667  165.695000  8701.891113      0.005           8701.891113  55.104386        0.000000
7    8757.000500    8756.995500  3081.982178  8757.000500   55.099121   83.648682  8756.995500      0.005           8756.995605   0.000000      -54.687608
8    8839.383139    8811.688232  3127.289551  8839.383139   82.382639  124.573958  8811.688232      0.005           8811.688232  27.689906      -26.997596
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=9966650000000003/360000000000000.[0m
[10/19 11:34:57]  --------------------------------------------------------------------------------
[10/19 11:34:57]  Iteration: 28 (0 solution, 27 counterexamples)
[10/19 11:35:04]  Generator returned sat in 6.421450 secs.
[10/19 11:35:04]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:35:04]  Improved gap from 0.017543859649122806 to 1.5625
[10/19 11:35:05]  Improved number of small numbers from 54 to 114 out of a max of 114
[10/19 11:35:05]  Verifer returned sat in 1.091976 secs.
[10/19 11:35:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    8016.489502    7914.866943  2803.062500  8016.489502    0.120117    0.120117  7914.866943   0.000000           7914.866943  101.622559      101.622314
1    8016.489502    8014.866943  2803.062500  8016.489502  101.622314  101.622314  8014.866943   0.000000           8014.866943    1.622559        1.622314
2    8016.489502    8014.927002  2901.440186  8016.489502    1.622314    1.622314  8014.927002   0.000000           8014.927002    1.562500        0.000000
3    8316.541016    8100.043701  2901.440186  8316.541016  301.614014  301.614014  8100.043701   0.060059           8100.043701  216.437256      199.991455
4    8316.541016    8215.903076  2901.440186  8316.541016   93.588379   45.794189  8215.903076   0.060059           8215.903076  100.577881       99.991455
5    8317.481201    8216.549561  2901.440186  8317.481201  101.518066    1.000000  8216.549561   0.060059           8216.549561  100.871582        0.931641
6    8318.420898    8316.489502  2999.568604  8318.420898  101.811279    1.000000  8316.489502   0.060059           8318.420898    1.871338       -0.000244
7    8319.420898    8318.361084  3098.006104  8319.420898  109.222900    1.000000  8318.361084   0.060059           8319.983643    0.999756       -0.562744
8    8320.420898    8319.983398  3196.383789  8320.420898   52.229004    1.000000  8319.983398   0.060059           8319.983398    0.377441       -1.185059
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=819165/4096.[0m
[10/19 11:35:05]  --------------------------------------------------------------------------------
[10/19 11:35:05]  Iteration: 29 (0 solution, 28 counterexamples)
[10/19 11:35:10]  Generator returned sat in 4.281080 secs.
[10/19 11:35:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:35:12]  Improved gap from 0.0 to 100
[10/19 11:35:12]  Improved number of small numbers from 53 to 114 out of a max of 114
[10/19 11:35:12]  Verifer returned sat in 1.910977 secs.
[10/19 11:35:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    7387.867920    7334.095703  2865.242432  7387.867920    0.120117    0.120117  7334.095703   0.000000           7334.095703   53.772217       51.469727
1    7487.838135    7336.428223  2865.242432  7487.838135  153.742432  153.742432  7336.428223   0.000000           7336.428223  151.409912       51.439941
2    7587.898193    7487.398193  2865.242432  7587.898193  251.469971  251.469971  7487.398193   0.030029           7487.398193  100.469971       51.469971
3    7687.928223    7635.155762  2865.242432  7687.928223  200.500000  200.500000  7635.155762   0.060059           7635.155762   52.712402       51.469971
4    7786.745850    7735.277832  2865.242432  7786.745850  151.530029  152.530029  7735.277832   0.060059           7735.277832   51.407959       50.287598
5    7887.958252    7836.398193  2865.242432  7887.958252  200.424805  101.212402  7836.398193   0.090088           7836.398193   51.469971       51.469971
6    8011.988281    7936.317383  2865.242432  8011.988281  175.500000  176.500000  7936.317383  24.120117           7936.317383   51.550781       51.469971
7    8112.018311    8036.397949  2865.242432  8112.018311  151.580811  152.580811  8036.397949  24.150146           8036.397949   51.470215       51.469971
8    8212.108154    8036.428223  2865.242432  8212.108154  151.560059  152.560059  8036.428223  24.239990           8036.428223  151.439941       51.469971
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=99041/4096, 
, buffer=210821/4096.[0m
[10/19 11:35:13]  --------------------------------------------------------------------------------
[10/19 11:35:13]  Iteration: 30 (0 solution, 29 counterexamples)
[10/19 11:35:14]  Generator returned sat in 0.315350 secs.
[10/19 11:35:14]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:35:18]  Improved gap from 0.9849853515625 to 50.0
[10/19 11:35:21]  Improved number of small numbers from 33 to 48 out of a max of 114
[10/19 11:35:21]  Verifer returned sat in 7.454076 secs.
[10/19 11:35:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    3529.943115    3429.943321  4797.260237  3529.943115    0.119873    0.119873  3429.943321   0.000000           3429.943321  99.999794        0.038256
1    3529.943115    3529.904859  4797.260237  3529.943115   99.999756   99.999756  3529.904859   0.000000           3629.943359   0.038256      -99.961744
2    3729.904859    3679.904859  4797.260237  3729.904859  200.000000  200.000000  3679.904859   0.000000           3679.904859  50.000000        0.000000
3    3851.981782    3811.020244  4797.260237  3851.981782  172.076923  172.076923  3811.020244   0.038462           3811.020244  40.923077       22.038462
4    3852.981782    3829.904859  4847.260237  3852.981782  191.538462    1.000000  3829.904859   0.038462           3879.943115  23.038462      -26.961538
5    3929.481782    3879.904859  4897.260010  3929.481782  151.000000   76.500000  3879.904859   0.038462           3929.943115  49.538462       -0.461765
6    3980.943321    3930.821526  4946.260010  3980.943321  101.000000   51.500000  3930.821526   0.038462           3930.821526  50.083333       -0.000227
7    3991.760629    3980.943321  4996.221680  3991.760629   60.900641   31.450321  3980.943321   0.038462           3980.943321  10.778846      -39.221249
8    4031.020244    4030.981689  5046.183350  4031.020244   76.519231   39.259615  4030.981689   0.038462           4030.981689   0.000093      -49.999964
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=28650000000000003/1300000000000000.[0m
[10/19 11:35:21]  --------------------------------------------------------------------------------
[10/19 11:35:21]  Iteration: 31 (0 solution, 30 counterexamples)
[10/19 11:35:28]  Generator returned sat in 6.052537 secs.
[10/19 11:35:28]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:35:28]  Improved gap from 99.99375 to 100
[10/19 11:35:30]  Improved number of small numbers from 68 to 76 out of a max of 114
[10/19 11:35:30]  Verifer returned sat in 1.271691 secs.
[10/19 11:35:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3352.971924    3285.985116  4996.22168  3352.971924    0.119873    0.119873  3285.985116    0.000000           3285.985116   66.986808        0.000141
1    3352.971924    3352.971782  4996.22168  3352.971924    0.001709    0.001709  3352.971782    0.000000           3352.971680    0.000141      -99.999859
2    3452.973449    3452.971782  4996.22168  3452.973449  100.001667  100.001667  3452.971782    0.000000           3452.975342    0.001667      -99.998333
3    3652.976782    3652.971782  4996.22168  3652.976782  200.005000  200.005000  3652.971782    0.001667           3652.971782    0.003333        0.003333
4    3652.986782    3652.985116  4996.22168  3652.986782  366.986667    0.010000  3652.985116    0.001667           3652.985116    0.000000      -99.986667
5    3953.000116    3852.971782  4996.22168  3953.000116  300.013333  451.020000  3852.971782  100.025000           3852.971782    0.003333        0.003333
6    3953.010116    3852.971782  4996.22168  3953.010116  400.000000    0.010000  3852.971782  100.025000           3852.971680    0.013333      -99.986667
7    4152.996782    4052.971782  4996.22168  4152.996782  200.000000  301.000000  4052.971782  100.025000           4052.971782    0.000000        0.000000
8    4552.983449    4052.971782  4996.22168  4552.983449  399.986667  600.980000  4052.971782  400.008333           4152.976562  100.003333        0.003333
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=60001/150, 
, buffer=1/300.[0m
[10/19 11:35:30]  --------------------------------------------------------------------------------
[10/19 11:35:30]  Iteration: 32 (0 solution, 31 counterexamples)
[10/19 11:35:37]  Generator returned sat in 6.312097 secs.
[10/19 11:35:37]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
[0m
[10/19 11:35:38]  Improved gap from 0.0 to 100
[10/19 11:35:40]  Improved number of small numbers from 45 to 58 out of a max of 114
[10/19 11:35:40]  Verifer returned sat in 3.087624 secs.
[10/19 11:35:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3453.231689    3452.591084  4796.181743  3453.231689    0.119873    0.119873  3452.591084   0.000000           3452.591084    0.640605        0.000224
1    3453.291402    3453.231465  4796.181743  3453.291402    0.700317    0.700317  3453.231465   0.000000           3453.231445    0.059937      -99.940063
2    3553.291402    3553.231689  4796.181743  3553.291402  100.059937  100.059937  3553.231689   0.000000           3553.231689    0.059712      -99.940063
3    3800.491943    3753.231465  4796.181743  3800.491943  247.260254  247.260254  3753.231465   0.000000           3753.231465   47.260478       47.260478
4    3903.551656    3849.471211  4796.181743  3903.551656  150.320190  300.640381  3849.471211   3.000000           3849.471211   51.080444       47.320190
5    4003.611592    3949.471436  4796.181743  4003.611592  198.119873  100.059937  3949.471436   3.059937           3949.471436   51.080220       47.320190
6    4103.671529    4053.231465  4796.181743  4103.671529  198.119873  100.059937  4053.231465   3.119873           4053.231465   47.320190       47.320190
7    4179.671529    4150.231465  4796.181743  4179.671529  150.000000   76.000000  4150.231465   3.119873           4150.231465   26.320190       23.320190
8    4303.731465    4153.231465  4796.181743  4303.731465  150.380127  300.760254  4153.231465   3.179810           4300.611572  147.320190       47.320190
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1473/8192, 
, buffer=387647/8192.[0m
[10/19 11:35:41]  --------------------------------------------------------------------------------
[10/19 11:35:41]  Iteration: 33 (0 solution, 32 counterexamples)
[10/19 11:35:47]  Generator returned sat in 5.542426 secs.
[10/19 11:35:47]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:35:52]  Improved gap from 0.0 to 31.25
[10/19 11:35:54]  Improved number of small numbers from 51 to 81 out of a max of 114
[10/19 11:35:54]  Verifer returned sat in 7.558025 secs.
[10/19 11:35:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    3669.302002    3668.509033  4580.171387  3669.302002    0.119629    0.119629  3668.509033        0.0           3668.509033   0.792969        0.060059
1    3769.212158    3765.780361  4580.171387  3769.212158  100.703125  100.703125  3765.780361        0.0           3765.780361   3.431798       -0.029785
2    3769.241943    3769.241943  4648.921387  3769.241943    3.461583    3.461583  3769.241943        0.0           3769.211914   0.000000      -31.250000
3    3800.491943    3800.491943  4717.671143  3800.491943   31.250000   31.250000  3800.491943        0.0           3800.462158   0.000000      -31.250244
4    3867.483398    3831.771912  4781.929688  3867.483398  131.982910   66.991455  3831.771912        0.0           3831.771912  35.711487       -0.000244
5    3897.763463    3867.513463  4850.649658  3897.763463   65.991551   33.995775  3867.513463        0.0           3867.513463  30.250000       -1.000209
6    3947.899222    3898.793431  4901.513916  3947.899222   98.271519   50.135760  3898.793431        0.0           3898.793431  49.105791       -0.000192
7    3997.094918    3947.929190  4952.318115  3997.094918   98.301488   50.150744  3947.929190        0.0           3947.929190  49.165728       -0.000296
8    4056.173558    4020.462158  4952.318115  4056.173558  116.157279   59.078639  4020.462158        0.0           4020.462158  35.711400      -40.921657
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=123/2048.[0m
[10/19 11:35:55]  --------------------------------------------------------------------------------
[10/19 11:35:55]  Iteration: 34 (0 solution, 33 counterexamples)
[10/19 11:35:59]  Generator returned sat in 3.893564 secs.
[10/19 11:36:00]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:36:00]  Improved gap from 41.0299072265625 to 100
[10/19 11:36:01]  Improved number of small numbers from 52 to 59 out of a max of 114
[10/19 11:36:01]  Verifer returned sat in 1.361284 secs.
[10/19 11:36:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    4003.662842    4003.662749  4717.671143  4003.662842    0.119629    0.119629  4003.662749    0.000000           4003.662749    0.000093        0.000093
1    4103.692656    4003.662749  4717.671143  4103.692656  100.029907  100.029907  4003.662749    0.000000           4003.633057  100.029907        0.029907
2    4162.662749    4103.692656  4717.671143  4162.662749  159.000000  159.000000  4103.692656    0.000000           4103.692656   58.970093      -41.000000
3    4303.752471    4271.662749  4717.671143  4303.752471  200.059814  200.059814  4271.662749    0.029907           4271.662749   32.059814        0.059814
4    4405.692656    4345.662749  4717.671143  4405.692656  134.000000  201.000000  4345.662749    1.970093           4345.662749   58.059814        0.059814
5    4518.632842    4467.732533  4717.671143  4518.632842  171.000000  256.500000  4467.732533   14.910278           4467.732533   35.990031        0.059814
6    4664.662749    4603.662749  4717.671143  4664.662749  182.019938  273.029907  4603.662749   60.940186           4603.662749    0.059814        0.059814
7    4830.602935    4651.035959  4717.671143  4830.602935  166.000000  249.000000  4651.035959  126.880371           4651.035959   52.686605        0.059814
8    4930.602935    4703.692627  4717.671143  4930.602935  152.686605  229.029907  4703.692627  126.880371           4703.692627  100.029937        0.059814
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1023265/8192, 
, buffer=245/4096.[0m
[10/19 11:36:01]  --------------------------------------------------------------------------------
[10/19 11:36:01]  Iteration: 35 (0 solution, 34 counterexamples)
[10/19 11:36:04]  Generator returned sat in 1.734818 secs.
[10/19 11:36:04]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:36:04]  Improved gap from 0.069814453125 to 100
[10/19 11:36:05]  Improved number of small numbers from 57 to 87 out of a max of 114
[10/19 11:36:05]  Verifer returned sat in 1.571066 secs.
[10/19 11:36:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    4103.692627    4003.662749  4717.671143  4103.692627    0.119629    0.119629  4003.662749   0.000000           4003.633057  100.029878        0.029878
1    4103.692627    4103.662749  4717.671143  4103.692627  100.029785  100.029785  4103.662749   0.000000           4103.722412    0.029878      -99.970122
2    4303.662749    4203.662842  4717.671143  4303.662749  200.000000  200.000000  4203.662842   0.000000           4203.662842   99.999907        0.000000
3    4344.578125    4303.662749  4717.671143  4344.578125  140.915283  140.915283  4303.662749   0.000000           4303.662598   40.915376      -59.084624
4    4495.078125    4403.662749  4717.671143  4495.078125  301.000000  150.500000  4403.662749   0.000000           4503.692627   91.415376       -8.584624
5    4645.578125    4575.662842  4717.671143  4645.578125  301.000000  150.500000  4575.662842   0.000000           4575.662842   69.915283       41.915376
6    4832.078125    4655.586348  4717.671143  4832.078125  373.000000  186.500000  4655.586348   0.000000           4655.586348  176.491777      128.415376
7    5008.509948    4803.207610  4717.671143  5008.509948  352.923599  176.461800  4803.207610   0.000000           4803.207610  205.302338      204.847198
8    5203.752471    4803.692627  4717.671143  5203.752471  400.544861  200.272430  4803.692627   0.029907           4803.692627  400.029937      300.059814
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=245/8192, 
, buffer=1229045/4096.[0m
[10/19 11:36:06]  --------------------------------------------------------------------------------
[10/19 11:36:06]  Iteration: 36 (0 solution, 35 counterexamples)
[10/19 11:36:16]  Generator returned sat in 9.184138 secs.
[10/19 11:36:16]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:36:19]  Improved gap from 0.0 to 54.6875
[10/19 11:36:21]  Improved number of small numbers from 52 to 65 out of a max of 114
[10/19 11:36:21]  Verifer returned sat in 5.076455 secs.
[10/19 11:36:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    4267.729004    4213.041548  4406.733643  4267.729004    0.119385    0.119385  4213.041548   0.000000           4213.041548  54.687456       54.687456
1    4267.729004    4213.041548  4452.046143  4267.729004   54.687256   54.687256  4213.041548   0.000000           4267.789062  54.687456       -0.000044
2    4327.476362    4267.788862  4492.298828  4327.476362  114.434814  114.434814  4267.788862   0.000000           4267.788862  59.687500        0.000000
3    4483.344048    4427.476362  4492.298828  4483.344048  215.555186  215.555186  4427.476362   0.059814           4427.476362  55.807871       55.807871
4    4483.354048    4427.476362  4536.480957  4483.354048  108.217407    0.010000  4427.476362   0.059814           4427.416748  55.817871        0.000000
5    4535.753584    4483.294233  4581.793457  4535.753584  108.217407  109.217407  4483.294233   0.059814           4535.753662  52.399536       -2.287964
6    4592.106733    4537.981733  4627.105957  4592.106733  108.752686  109.752686  4537.981733   0.059814           4537.922119  54.065186       -0.622314
7    4594.294233    4592.669233  4672.418457  4594.294233   56.252686   57.252686  4592.669233   0.059814           4592.609375   1.565186      -53.122314
8    4676.325483    4647.416504  4717.670898  4676.325483   83.596436   84.596436  4647.416504   0.059814           4647.416504  28.849165      -25.838623
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=5580787109375003/100000000000000.[0m
[10/19 11:36:21]  --------------------------------------------------------------------------------
[10/19 11:36:21]  Iteration: 37 (0 solution, 36 counterexamples)
[10/19 11:36:24]  Generator returned sat in 2.138857 secs.
[10/19 11:36:24]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:36:28]  Improved gap from 0.0596923828125 to 54.6875
[10/19 11:36:32]  Improved number of small numbers from 26 to 39 out of a max of 114
[10/19 11:36:32]  Verifer returned sat in 7.901889 secs.
[10/19 11:36:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    5051.322266    5051.322173  3553.102783  5051.322266    0.119141    0.119141  5051.322173      0.000           5051.322173   0.000093      -15.350142
1    5121.384673    5066.697173  3598.390381  5121.384673   70.062500   70.062500  5066.697173      0.000           5066.697173  54.687500       -0.000137
2    5176.097173    5121.409673  3643.678018  5176.097173  109.400000  109.400000  5121.409673      0.000           5121.409673  54.687500        0.000000
3    5276.172173    5275.972173  3643.678018  5276.172173  154.762500  154.762500  5275.972173      0.025           5275.972173   0.175000        0.050000
4    5331.834673    5276.122173  3687.965332  5331.834673  113.325000   55.662500  5276.122173      0.025           5276.122173  55.687500       -0.000186
5    5381.859673    5331.834673  3733.253018  5381.859673  105.712500  104.712500  5331.834673      0.025           5331.834673  50.000000       -4.687500
6    5438.072173    5386.522173  3778.565430  5438.072173  106.212500  105.212500  5386.522173      0.025           5386.497314  51.525000       -3.162588
7    5442.822173    5441.234673  3823.852783  5442.822173   56.275000   55.275000  5441.234673      0.025           5441.234673   1.562500      -53.125234
8    5524.815923    5495.947021  3869.140381  5524.815923   83.556250   82.556250  5495.947021      0.025           5495.947021  28.843901      -25.843887
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=25000000000003/500000000000000.[0m
[10/19 11:36:33]  --------------------------------------------------------------------------------
[10/19 11:36:33]  Iteration: 38 (0 solution, 37 counterexamples)
[10/19 11:36:42]  Generator returned sat in 8.510507 secs.
[10/19 11:36:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:36:45]  Improved gap from 0.0 to 50.0
[10/19 11:36:48]  Improved number of small numbers from 48 to 61 out of a max of 114
[10/19 11:36:48]  Verifer returned sat in 5.571002 secs.
[10/19 11:36:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    5011.986084    5011.926421  3607.848633  5011.986084    0.119141    0.119141  5011.926421   0.000000           5011.926421   0.059663        0.059526
1    5111.956206    5074.287566  3607.848633  5111.956206  100.029785  100.029785  5074.287566   0.000000           5074.287566  37.668640        0.029648
2    5161.956206    5111.956206  3657.818984  5161.956206   87.668640   87.668640  5111.956206   0.000000           5111.956206  50.000000        0.000000
3    5262.045562    5261.956206  3657.818984  5262.045562  150.089355  150.089355  5261.956206   0.029785           5261.956206   0.059570        0.059570
4    5324.053008    5261.956206  3695.751953  5324.053008  126.014893   62.007446  5261.956206   0.029785           5324.052979  62.067017       -0.000015
5    5356.820311    5324.053008  3745.722168  5356.820311   94.834320   48.417160  5324.053008   0.029785           5324.053008  32.737518      -17.262496
6    5411.344512    5381.866851  3787.908203  5411.344512  107.048401   54.524200  5381.866851   0.029785           5381.866851  29.447876      -20.552261
7    5442.822173    5431.896636  3837.878418  5442.822173   60.955322   31.477661  5431.896636   0.029785           5431.896636  10.895752      -39.104385
8    5486.807280    5481.926514  3887.848633  5486.807280   85.970215   43.985107  5481.926514   0.029785           5481.926514   4.850981      -45.149062
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=61/1024.[0m
[10/19 11:36:48]  --------------------------------------------------------------------------------
[10/19 11:36:48]  Iteration: 39 (0 solution, 38 counterexamples)
[10/19 11:37:02]  Generator returned sat in 13.540071 secs.
[10/19 11:37:03]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:37:16]  Improved gap from 0.0 to 50.0
[10/19 11:37:17]  Improved number of small numbers from 78 to 91 out of a max of 114
[10/19 11:37:17]  Verifer returned sat in 14.807568 secs.
[10/19 11:37:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    5208.072998    5207.419922  3557.682373  5208.072998    0.118896    0.118896  5207.419922        0.0           5207.419922   0.653076        0.652832
1    5258.806885    5207.449707  3606.295410  5258.806885   51.386963   51.386963  5207.449707        0.0           5207.449707  51.357178       -0.000244
2    5258.836670    5258.807129  3655.295410  5258.836670   51.386963   51.386963  5258.807129        0.0           5258.777344   0.029541      -50.970459
3    5410.460327    5407.283691  3655.295410  5410.460327  151.653198  151.653198  5407.283691        0.0           5407.283691   3.176636        0.653198
4    5460.926270    5409.807129  3704.176270  5460.926270  100.931885   50.465942  5409.807129        0.0           5460.955811  51.119141        0.000000
5    5511.985840    5460.926270  3753.086670  5511.985840  102.178711   51.089355  5460.926270        0.0           5512.015381  51.059570       -0.030029
6    5562.985840    5525.194336  3788.907959  5562.985840  102.059570   51.029785  5525.194336        0.0           5525.194336  37.791504      -13.208740
7    5585.149658    5576.224121  3837.878174  5585.149658   59.955322   29.977661  5576.224121        0.0           5576.224121   8.925537      -42.074707
8    5627.253906    5627.253662  3886.848389  5627.253906   84.208496   42.104248  5627.253662        0.0           5627.253662   0.000244      -51.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=669/1024.[0m
[10/19 11:37:18]  --------------------------------------------------------------------------------
[10/19 11:37:18]  Iteration: 40 (0 solution, 39 counterexamples)
[10/19 11:37:25]  Generator returned sat in 6.401653 secs.
[10/19 11:37:25]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 0)
[0m
[10/19 11:37:26]  Improved gap from 0.0147705078125 to 100
[10/19 11:37:27]  Improved number of small numbers from 33 to 114 out of a max of 114
[10/19 11:37:27]  Verifer returned sat in 1.358639 secs.
[10/19 11:37:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    5228.931396    5128.871826  3638.29541  5228.931396    0.118652    0.118652  5128.871826   0.000000           5128.842285  100.059570        0.059570
1    5328.961182    5228.871826  3638.29541  5328.961182  200.089355  200.089355  5228.871826   0.029785           5228.871826  100.059570        0.059570
2    5428.931396    5328.901611  3638.29541  5428.931396  200.029785  200.029785  5328.901611   0.029785           5328.901611  100.000000        0.029785
3    5528.990723    5528.871826  3638.29541  5528.990723  200.059326  200.059326  5528.871826   0.059326           5528.871826    0.059570        0.059570
4    5629.490723    5628.871826  3638.29541  5629.490723  201.000000  100.500000  5628.871826   0.559326           5628.871826    0.059570        0.059570
5    5729.990723    5727.020752  3638.29541  5729.990723  201.000000  100.500000  5727.020752   1.059326           5727.020752    1.910645        0.059570
6    5830.020508    5790.990967  3638.29541  5830.020508  200.059570  100.029785  5790.990967   1.089111           5790.990967   37.940430        0.059570
7    5896.050293    5894.931396  3638.29541  5896.050293  132.059570   66.029785  5894.931396   1.089111           5894.931396    0.029785      -33.910645
8    6030.050293    5928.901611  3638.29541  6030.050293  134.029785  134.029785  5928.901611   1.118896           5928.901611  100.029785        0.059570
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=573/1024, 
, buffer=61/1024.[0m
[10/19 11:37:27]  --------------------------------------------------------------------------------
[10/19 11:37:27]  Iteration: 41 (0 solution, 40 counterexamples)
[10/19 11:37:32]  Generator returned sat in 4.289352 secs.
[10/19 11:37:32]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
[0m
[10/19 11:37:34]  Improved gap from 0.0 to 54.6875
[10/19 11:37:34]  Improved number of small numbers from 25 to 114 out of a max of 114
[10/19 11:37:34]  Verifer returned sat in 2.162586 secs.
[10/19 11:37:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    5483.784180    5483.759521  3417.832764  5483.784180    0.118408    0.118408  5483.759521   0.000000           5483.809570   0.024658      -99.975342
1    5629.096924    5629.072021  3417.832764  5629.096924  145.337402  145.337402  5629.072021   0.000000           5629.072021   0.024902      -54.662598
2    5683.809326    5683.784424  3463.120361  5683.809326   54.737305   54.737305  5683.784424   0.000000           5683.784424   0.024902      -54.662598
3    5866.415771    5838.471924  3463.120361  5866.415771  182.631348  182.631348  5838.471924   0.025146           5838.471924  27.918701       27.918701
4    5867.415771    5838.471924  3508.432861  5867.415771  178.356201    1.000000  5838.471924   0.025146           5838.446777  28.918701      -25.768799
5    5944.197021    5894.184326  3552.720215  5944.197021  105.699951  106.699951  5894.184326   0.025146           5894.184326  49.987549       -4.700195
6    6000.409424    5948.896729  3597.882812  6000.409424  106.199951  107.199951  5948.896729   0.025146           5948.896729  51.487549       -3.325195
7    6005.134277    6003.734131  3643.170166  6005.134277   56.212402   57.212402  6003.734131   0.025146           6003.734131   1.375000      -53.312988
8    6087.390381    6058.446777  3688.457764  6087.390381   83.631104   84.631104  6058.446777   0.025146           6058.446777  28.918457      -25.769287
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=114355/4096.[0m
[10/19 11:37:35]  --------------------------------------------------------------------------------
[10/19 11:37:35]  Iteration: 42 (0 solution, 41 counterexamples)
[10/19 11:37:51]  Generator returned sat in 14.838143 secs.
[10/19 11:37:51]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:37:52]  Improved gap from 0.01251220703125 to 100
[10/19 11:37:53]  Improved number of small numbers from 35 to 45 out of a max of 114
[10/19 11:37:53]  Verifer returned sat in 2.310467 secs.
[10/19 11:37:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    4708.419678    4601.331111  3643.170166  4708.419678    0.118408    0.118408  4601.331111   0.000000           4601.331111  107.088566        9.029362
1    4708.419678    4699.405117  3643.170166  4708.419678  107.074219  107.074219  4699.405117   0.000000           4699.405117    9.014561      -90.970638
2    4908.405117    4801.331111  3643.170166  4908.405117  209.000000  209.000000  4801.331111   0.000000           4801.331111  107.074005        9.014801
3    5008.434719    4999.390316  3643.170166  5008.434719  207.103607  207.103607  4999.390316   0.014801           4999.390316    9.029602        9.029602
4    5108.449520    5097.464321  3643.170166  5108.449520  200.029602  100.014801  5097.464321   0.029602           5097.464321   10.955597        9.029602
5    5208.464321    5199.390316  3643.170166  5208.464321  200.029602  100.014801  5199.390316   0.044403           5199.390316    9.029602        9.029602
6    5308.479122    5250.802588  3643.170166  5308.479122  200.029602  100.014801  5250.802588   0.059204           5250.802588   57.617330        9.029602
7    5371.832190    5370.787787  3643.170166  5371.832190  126.706136   63.353068  5370.787787   0.059204           5370.787787    0.985199      -27.617330
8    5508.493923    5399.405029  3643.170166  5508.493923  137.661733  136.661733  5399.405029   0.074005           5399.405029  109.014888        9.029602
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1455/32768, 
, buffer=147941/16384.[0m
[10/19 11:37:54]  --------------------------------------------------------------------------------
[10/19 11:37:54]  Iteration: 43 (0 solution, 42 counterexamples)
[10/19 11:38:01]  Generator returned sat in 6.472517 secs.
[10/19 11:38:01]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
[0m
[10/19 11:38:06]  Improved gap from 0.0 to 50.0
[10/19 11:38:07]  Improved number of small numbers from 20 to 114 out of a max of 114
[10/19 11:38:07]  Verifer returned sat in 5.725015 secs.
[10/19 11:38:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    4543.133545    4543.074463  3593.259033  4543.133545    0.118408    0.118408  4543.074463   0.000000           4543.074463   0.059082        0.059082
1    4643.163330    4609.474365  3593.259033  4643.163330  100.088867  100.088867  4609.474365   0.029541           4609.474365  33.659424        0.059326
2    4643.192871    4643.163086  3643.169922  4643.192871   33.688965   33.688965  4643.163086   0.029541           4643.163086   0.000244      -50.000244
3    4793.222412    4793.163330  3643.169922  4793.222412  150.029785  150.029785  4793.163330   0.029541           4793.163330   0.029541        0.029297
4    4857.244629    4793.193115  3673.288574  4857.244629  126.044434   64.022217  4793.193115   0.029541           4793.193115  64.021973       -5.829834
5    4886.082031    4863.044922  3723.288574  4886.082031   92.859375   47.429688  4863.044922   0.029541           4913.074463  23.007568      -26.992432
6    4942.552490    4913.074463  3773.258789  4942.552490  110.940918   56.470459  4913.074463   0.029541           4913.074463  29.448486      -20.551758
7    4974.030273    4963.104248  3823.229248  4974.030273   60.955566   31.477783  4963.104248   0.029541           4963.104248  10.896484      -39.103516
8    5018.008057    5013.133789  3873.199707  5018.008057   85.955566   43.977783  5013.133789   0.029541           5013.133789   4.844727      -45.155273
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=243/4096.[0m
[10/19 11:38:07]  --------------------------------------------------------------------------------
[10/19 11:38:07]  Iteration: 44 (0 solution, 43 counterexamples)
[10/19 11:38:14]  Generator returned sat in 6.338156 secs.
[10/19 11:38:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
[0m
[10/19 11:38:23]  Improved gap from 37.000244140625 to 50.0
[10/19 11:38:26]  Improved number of small numbers from 46 to 65 out of a max of 114
[10/19 11:38:26]  Verifer returned sat in 11.893246 secs.
[10/19 11:38:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    4574.254883    4560.669235  3562.418701  4574.254883    0.118408    0.118408  4560.669235        0.0           4560.669235  13.585647        0.059219
1    4574.254883    4574.225205  3593.199463  4574.254883   13.585449   13.585449  4574.225205        0.0           4574.225205   0.029678      -69.160019
2    4693.444443    4643.444443  3643.169922  4693.444443  119.219238  119.219238  4643.444443        0.0           4643.444443  50.000000        0.000000
3    4793.466644    4791.918076  3643.169922  4793.466644  150.022202  150.022202  4791.918076        0.0           4791.918076   1.548569        0.022202
4    4850.278855    4793.444443  3686.335449  4850.278855  115.624420   56.812210  4793.444443        0.0           4793.415039  56.834412       -0.000061
5    4903.054062    4850.308457  3724.814941  4903.054062  109.609619   53.804810  4850.308457        0.0           4850.308457  52.745605       -8.745361
6    4953.740463    4911.829270  3774.784912  4953.740463  103.432007   50.716003  4911.829270        0.0           4911.829270  41.911194       -8.088989
7    4971.784866    4961.858872  3824.755371  4971.784866   59.955597   28.977798  4961.858872        0.0           4961.858872   9.925995      -40.074127
8    5012.888474    5011.888428  3824.755371  5012.888474   84.207214   41.103607  5011.888428        0.0           5011.888428   1.000046      -98.970520
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=243/4096.[0m
[10/19 11:38:27]  --------------------------------------------------------------------------------
[10/19 11:38:27]  Iteration: 45 (0 solution, 44 counterexamples)
[10/19 11:38:40]  Generator returned sat in 12.310932 secs.
[10/19 11:38:40]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + -1)
[0m
[10/19 11:38:43]  Improved gap from 0.0 to 54.6875
[10/19 11:38:46]  Improved number of small numbers from 24 to 41 out of a max of 114
[10/19 11:38:46]  Verifer returned sat in 5.726159 secs.
[10/19 11:38:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    4610.240234    4610.195859  3522.693115  4610.240234    0.118164    0.118164  4610.195859   0.000000           4610.195859   0.044375        0.044263
1    4610.240234    4610.218082  3566.983398  4610.240234    0.022217    0.022217  4610.218082   0.000000           4610.218082   0.022153      -55.665454
2    4730.101415    4665.927804  3602.787672  4730.101415  119.883333  119.883333  4665.927804   0.000000           4665.927804  64.173611        0.000000
3    4830.168082    4830.101415  3602.787672  4830.168082  164.240278  164.240278  4830.101415   0.022222           4830.101415   0.044444        0.044444
4    4885.144471    4830.123637  3647.500172  4885.144471  109.952778   54.976389  4830.123637   0.022222           4830.123637  54.998611       -0.266667
5    4940.098637    4885.388915  3692.812500  4940.098637  109.952778  163.929167  4885.388915   0.022222           4940.098633  54.687500       -0.000172
6    4995.141693    4940.098637  3737.769616  4995.141693  109.730556  163.595833  4940.098637   0.022222           4940.098637  55.020833        0.000000
7    4995.141693    4995.119471  3782.832031  4995.141693   54.998611   81.497917  4995.119471   0.022222           4995.097412   0.000000      -54.937585
8    5077.639609    5050.079102  3828.122314  5077.639609   82.497917  122.746875  5050.079102   0.022222           5050.079102  27.538286      -27.149385
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=50000000000003/1125000000000000.[0m
[10/19 11:38:46]  --------------------------------------------------------------------------------
[10/19 11:38:46]  Iteration: 46 (0 solution, 45 counterexamples)
[10/19 11:39:10]  Generator returned sat in 22.428704 secs.
[10/19 11:39:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:39:16]  Improved gap from 0.0 to 100
[10/19 11:39:17]  Improved number of small numbers from 51 to 58 out of a max of 114
[10/19 11:39:17]  Verifer returned sat in 6.882125 secs.
[10/19 11:39:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t     rate_0,t  service_0,t    losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    3627.841553    3627.841386  3602.787672  3627.841553     0.117920     0.117920  3627.841386     0.000000           3627.841386    0.000167      -99.940751
1    4226.959550    3727.782304  3602.787672  4226.959550   599.118164   599.118164  3727.782304     0.059082           3827.841553  499.118164      399.118164
2    4226.959550    3827.841386  3602.787672  4226.959550     0.058838     0.058838  3827.841386     0.059082           3827.841386  399.059082      299.118164
3    6127.841386    3927.782304  3602.787672  6127.841386  2299.940918  2299.940918  3927.782304  1700.940918           3927.723145  499.118164      399.118164
4    6128.841386    4027.841386  3602.787672  6128.841386  1299.940918     1.000000  4027.841386  1700.940918           4027.841386  400.059082      300.118164
5    6528.782304    4227.782304  3602.787672  6528.782304   800.000000   400.000000  4227.782304  1901.881836           4227.782304  399.118164      399.118164
6    6529.782304    4327.782304  3602.787672  6529.782304   599.970459     1.000000  4327.782304  1901.881836           4327.782304  300.118164      300.118164
7    6729.649369    4394.591752  3602.787672  6729.649369   499.985229   249.992615  4394.591752  1902.748901           4394.591752  432.308716      399.118164
8    6730.649369    4427.841309  3602.787672  6730.649369   433.367798     1.000000  4427.841309  1902.748901           4427.841309  400.059159      300.118164
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1653211/8192, 
, buffer=408697/1024.[0m
[10/19 11:39:17]  --------------------------------------------------------------------------------
[10/19 11:39:17]  Iteration: 47 (0 solution, 46 counterexamples)
[10/19 11:39:44]  Generator returned sat in 25.533467 secs.
[10/19 11:39:44]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + -1)
[0m
[10/19 11:39:46]  Improved gap from 0.0589599609375 to 96.875
[10/19 11:39:48]  Improved number of small numbers from 59 to 67 out of a max of 114
[10/19 11:39:48]  Verifer returned sat in 3.758086 secs.
[10/19 11:39:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t   rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6429.569336    6427.389369  3602.787598  6429.569336    0.11792    0.11792  6427.389369    0.00000           6427.389369    2.179967        1.089892
1    6527.501869    6527.490619  3602.787598  6527.501869  100.11250  100.11250  6527.490619    0.00000           6527.490619    0.011250       -0.977574
2    6528.501869    6528.490619  3602.787672  6528.501869    1.01125    1.01125  6528.490619    0.00000           6528.490619    0.011250      -99.977500
3    6729.558119    6628.479369  3602.787672  6729.558119  201.06750  201.06750  6628.479369    0.00000           6628.468262  101.078750        1.078750
4    6829.569369    6728.490619  3602.787672  6829.569369  201.09000  200.09000  6728.490619    0.00000           6728.490619  101.078750        1.090000
5    6929.490619    6928.479369  3602.787672  6929.490619  201.00000  200.00000  6928.479369    0.00000           6928.479369    1.011250        1.011250
6    7328.468119    6928.490619  3602.787672  7328.468119  399.98875  398.98875  6928.490619  298.89875           6928.490619  101.078750        1.090000
7    7328.478119    7028.568119  3604.823922  7328.478119  300.01125    0.01000  7028.568119  298.89875           7028.568119    1.011250      -96.863750
8    7627.544369    7126.454346  3604.823922  7627.544369  300.07750  299.07750  7126.454346  400.01125           7126.454346  101.078773        1.090000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=320009/800, 
, buffer=109/100.[0m
[10/19 11:39:48]  --------------------------------------------------------------------------------
[10/19 11:39:48]  Iteration: 48 (0 solution, 47 counterexamples)
[10/19 11:39:57]  Generator returned sat in 8.215688 secs.
[10/19 11:39:58]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:40:01]  Improved gap from 0.0 to 50.0
[10/19 11:40:05]  Improved number of small numbers from 25 to 42 out of a max of 114
[10/19 11:40:05]  Verifer returned sat in 7.218786 secs.
[10/19 11:40:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t    queue_t  bottle_queue_t
0    6544.703125    6544.643930  3486.564151  6544.703125    0.117920    0.117920  6544.643930    0.00000           6544.643930   0.059195        0.000235
1    6544.703125    6544.702890  3503.856445  6544.703125    0.029541    0.029541  6544.702890    0.00000           6627.439697   0.000235      -82.707471
2    6627.469369    6627.439889  3553.827152  6627.469369   82.766479   82.766479  6627.439889    0.00000           6627.439889   0.029480      -49.970520
3    6834.660989    6774.941049  3553.827152  6834.660989  207.221100  207.221100  6774.941049    0.02948           6774.941049  59.690460       57.191620
4    6835.660989    6777.469369  3592.914795  6835.660989  115.148560    1.000000  6777.469369    0.02948           6777.469369  58.162140       -2.720737
5    6893.852609    6838.381702  3637.443848  6893.852609  116.383240   58.191620  6838.381702    0.02948           6838.381702  55.441427       -0.000065
6    6943.882089    6893.852609  3687.414307  6943.882089  105.470907   52.735453  6893.852609    0.02948           6893.852609  50.000000       -0.000126
7    6953.337869    6943.882089  3737.384766  6953.337869   59.455780   29.727890  6943.882089    0.02948           6943.882089   9.426300      -40.573887
8    6994.941049    6994.911377  3737.385010  6994.941049   83.206360   41.603180  6994.911377    0.02948           6994.911377   0.000192      -98.970463
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=11438323974609369/200000000000000.[0m
[10/19 11:40:05]  --------------------------------------------------------------------------------
[10/19 11:40:05]  Iteration: 49 (0 solution, 48 counterexamples)
[10/19 11:40:10]  Generator returned sat in 3.284375 secs.
[10/19 11:40:10]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:40:15]  Improved gap from 0.0073699951171875 to 50.0
[10/19 11:40:18]  Improved number of small numbers from 44 to 66 out of a max of 114
[10/19 11:40:18]  Verifer returned sat in 8.641821 secs.
[10/19 11:40:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    7043.848877    6916.971564  3503.856201  7043.848877    0.117920    0.117920  6916.971564        0.0           6916.971564  126.877313      100.117432
1    7043.848877    7009.169806  3503.856201  7043.848877    0.059082    0.059082  7009.169806        0.0           7009.169806   34.679071        0.117432
2    7043.848877    7043.790045  3553.797363  7043.848877    0.059082    0.059082  7043.790045        0.0           7043.790045    0.058832      -49.941406
3    7191.792365    7191.792365  3553.797363  7191.792365  148.002319  148.002319  7191.792365        0.0           7191.792365    0.000000       -1.997919
4    7260.497565    7193.849005  3587.089844  7260.497565  137.410400   68.705200  7193.849005        0.0           7193.849005   66.648560       -0.000238
5    7286.188605    7260.556525  3637.031006  7286.188605   92.339600   46.169800  7260.556525        0.0           7260.556525   25.632080      -24.368036
6    7340.380225    7310.615485  3686.971924  7340.380225  108.383240   54.191620  7310.615485        0.0           7310.615485   29.764740      -20.235498
7    7370.027045    7360.674445  3735.913330  7370.027045   59.411560   29.705780  7360.674445        0.0           7360.674445    9.352600      -41.647272
8    7411.733405    7411.733398  3785.854004  7411.733405   83.412720   41.706360  7411.733398        0.0           7411.733398    0.000006      -50.000238
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=410083/4096.[0m
[10/19 11:40:19]  --------------------------------------------------------------------------------
[10/19 11:40:19]  Iteration: 50 (0 solution, 49 counterexamples)
[10/19 11:40:21]  Generator returned unsat in 1.398811 secs.
[10/19 11:40:21]  [96mNo more solutions found[0m
[10/19 11:40:21]  Final solutions:
[10/19 11:40:21]  Took 436.331682 secs.
