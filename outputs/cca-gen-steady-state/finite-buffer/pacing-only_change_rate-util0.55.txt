[10/19 11:33:05]  --------------------------------------------------------------------------------
[10/19 11:33:05]  Iteration: 1 (0 solution, 0 counterexamples)
[10/19 11:33:05]  Generator returned sat in 0.005092 secs.
[10/19 11:33:05]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:05]  Improved gap from 0.125 to 100
[10/19 11:33:06]  Improved number of small numbers from 114 to 114 out of a max of 114
[10/19 11:33:06]  Verifer returned sat in 0.266308 secs.
[10/19 11:33:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t  queue_t  bottle_queue_t
0       -684.000       -684.000     684.0     -684.000     0.125     0.125     -684.000      0.000              -684.000    0.000            0.00
1       -584.000       -683.875     684.0     -584.000   100.000   100.000     -683.875      0.000              -683.875   99.875            0.00
2       -183.625       -523.000     684.0     -183.625   500.250   500.250     -523.000      0.125              -523.000  339.250          300.25
3        -83.500       -483.875     684.0      -83.500   439.375   439.375     -483.875      0.250              -483.875  400.125          300.25
4        357.000       -383.875     684.0      357.000   840.625  1682.250     -383.875    340.750              -383.875  400.125          300.25
5       1398.500       -283.875     684.0     1398.500  1441.625  2884.250     -283.875   1282.250              -283.875  400.125          300.25
6       2919.250       -141.875     684.0     2919.250  1920.875  3842.750     -141.875   2703.000              -141.875  358.125          300.25
7       5167.000          0.000     684.0     5167.000  2605.875  5212.750        0.000   4850.750                 0.000  316.250          300.25
8       8225.375         16.125     684.0     8225.375  3374.625  6750.250       16.125   7809.125                16.125  400.125          300.25
fefficient=True, bounded_queue=False, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=59747/8, 
, buffer=1201/4.[0m
[10/19 11:33:06]  --------------------------------------------------------------------------------
[10/19 11:33:06]  Iteration: 2 (0 solution, 1 counterexamples)
[10/19 11:33:06]  Generator returned sat in 0.051910 secs.
[10/19 11:33:06]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:06]  Improved gap from 0.0 to 0
[10/19 11:33:07]  Improved number of small numbers from 80 to 97 out of a max of 114
[10/19 11:33:07]  Verifer returned sat in 0.542928 secs.
[10/19 11:33:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -883.873779    -883.874023  783.875244  -883.873779    0.124756    0.124756  -883.874023    0.00000           -883.874023    0.000244      -99.998535
1    -483.865479    -683.875244  783.875244  -483.865479  400.008545  400.008545  -683.875244    0.00000           -683.875244  200.009766      200.009766
2    -383.862744    -583.875244  783.875244  -383.862744  300.012500  300.012500  -583.875244    0.00125           -583.875244  200.011250      200.011250
3    -283.861494    -483.875244  783.875244  -283.861494  300.012500  300.012500  -483.875244    0.00250           -483.875244  200.011250      200.011250
4    -283.861494    -383.875488  783.875244  -283.861494    0.010000    1.000000  -383.875488    0.00250           -383.875488  100.011494      100.011250
5    -283.861494    -383.873779  783.875244  -283.861494    0.010000    1.015000  -383.873779    0.00250           -383.873779  100.009785        0.011250
6    -283.861494    -283.875244  883.863994  -283.861494    0.010000    1.015000  -283.875244    0.00250           -283.876709    0.011250        0.000000
7    -283.861494    -283.863994  983.863770  -283.861494    0.010000    1.015000  -283.863994    0.00250           -283.862793    0.000000       -0.000225
8    -283.851494    -283.854004  983.864014  -283.851494    0.010000    1.015000  -283.854004    0.00250           -283.854004    0.000010      -99.989980
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=160009/800.[0m
[10/19 11:33:07]  --------------------------------------------------------------------------------
[10/19 11:33:07]  Iteration: 3 (0 solution, 2 counterexamples)
[10/19 11:33:08]  Generator returned sat in 0.426867 secs.
[10/19 11:33:08]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 2c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:33:08]  Improved gap from 0.000625 to 100
[10/19 11:33:08]  Improved number of small numbers from 35 to 114 out of a max of 114
[10/19 11:33:08]  Verifer returned sat in 0.566130 secs.
[10/19 11:33:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -826.004395    -921.942139  883.86377  -826.004395    0.124512    0.124512  -921.942139    0.000000           -921.942139   95.937744       95.937500
1    -821.942139    -921.941895  883.86377  -821.942139  100.000000  100.000000  -921.941895    0.000000           -821.910645   99.999756       -0.000244
2    -625.973145    -818.910645  883.86377  -625.973145  295.968750  295.968750  -818.910645    0.031250           -818.910645  192.906250       95.937500
3    -525.941895    -647.942139  883.86377  -525.941895  292.937500  292.937500  -647.942139    0.062500           -647.942139  121.937744       95.937500
4    -374.879639    -587.941895  883.86377  -374.879639  273.000000  546.000000  -587.941895   51.124756           -587.941895  161.937500       95.937500
5    -203.817139    -521.941895  883.86377  -203.817139  333.000000  666.000000  -521.941895  122.187256           -521.973389  195.937500       95.937500
6    -103.785889    -386.457764  883.86377  -103.785889  295.968750  591.937500  -386.457764  122.218506           -386.457764  160.453369       95.937500
7      -3.754883    -221.941895  883.86377    -3.754883  260.484375  520.968750  -221.941895  122.249512           -221.941895   95.937500       95.937500
8     265.307617    -221.910889  883.86377   265.307617  365.000000  730.000000  -221.910889  291.312012           -221.910889  195.906494       95.937500
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=983807/4096, 
, buffer=1535/16.[0m
[10/19 11:33:09]  --------------------------------------------------------------------------------
[10/19 11:33:09]  Iteration: 4 (0 solution, 3 counterexamples)
[10/19 11:33:09]  Generator returned sat in 0.277501 secs.
[10/19 11:33:09]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
[0m
[10/19 11:33:09]  Improved gap from 0.0 to 0
[10/19 11:33:10]  Improved number of small numbers from 74 to 82 out of a max of 114
[10/19 11:33:10]  Verifer returned sat in 1.523546 secs.
[10/19 11:33:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    -821.944580    -821.949395   783.868652  -821.944580     0.124512    0.124512  -821.949395        0.0           -821.949395    0.004814        0.004697
1    -821.944395    -821.946895   883.863770  -821.944395     0.005000    0.005000  -821.946895        0.0           -821.946895    0.002500        0.000000
2    -421.961895    -821.944395   883.863770  -421.961895   399.985000  399.985000  -821.944395        0.0           -821.946777  399.982500      299.982500
3    -421.961895    -641.929395   883.863770  -421.961895     0.002500    0.002500  -641.929395        0.0           -641.929395  219.967500      199.982500
4    -421.961895    -621.941895   883.863770  -421.961895   179.025000    0.010000  -621.941895        0.0           -621.941895  199.980000       99.982500
5    -421.951895    -521.941895   883.863770  -421.951895   557.055000    0.010000  -521.941895        0.0           -521.941895   99.990000       -0.007500
6    -421.941895    -421.941895   983.861270  -421.941895  1413.112500    0.010000  -421.941895        0.0           -421.941895    0.000000        0.000000
7    -421.931895    -421.941895  1083.851270  -421.931895  3045.212500    0.010000  -421.941895        0.0           -421.942139    0.010000        0.000000
8    -421.921895    -421.931885  1083.851318  -421.921895  6289.425000    0.010000  -421.931885        0.0           -421.931885    0.009990      -99.989951
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=614369/2048.[0m
[10/19 11:33:11]  --------------------------------------------------------------------------------
[10/19 11:33:11]  Iteration: 5 (0 solution, 4 counterexamples)
[10/19 11:33:12]  Generator returned sat in 0.663567 secs.
[10/19 11:33:12]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:13]  Improved gap from 0.0 to 0
[10/19 11:33:14]  Improved number of small numbers from 60 to 84 out of a max of 114
[10/19 11:33:14]  Verifer returned sat in 2.424799 secs.
[10/19 11:33:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    9203.583252    9203.579834   783.866943  9203.583252  0.124268  0.124268  9203.579834        0.0           9203.579834  0.003418        0.003043
1    9203.583252    9203.581543   883.863770  9203.583252  0.001465  0.001465  9203.581543        0.0           9203.581543  0.001709       -0.000131
2    9203.584961    9203.583383   983.862061  9203.584961  0.003418  0.003418  9203.583383        0.0           9203.581543  0.001578       -0.000131
3    9203.875050    9203.863525  1083.572103  9203.875050  0.291667  0.291667  9203.863525        0.0           9203.863525  0.011525        0.000000
4    9203.875050    9203.875050  1183.570557  9203.875050  0.010000  0.010000  9203.875050        0.0           9203.873291  0.000000       -0.001546
5    9203.885050    9203.883383  1283.555436  9203.885050  0.010000  0.010000  9203.883383        0.0           9203.883383  0.001667       -0.006667
6    9203.893383    9203.891717  1383.553770  9203.893383  0.010000  0.010000  9203.891717        0.0           9203.890137  0.001667        0.000000
7    9203.901717    9203.893383  1483.545410  9203.901717  0.010000  0.010000  9203.893383        0.0           9203.903320  0.008333       -0.000026
8    9203.903383    9203.903383  1483.545654  9203.903383  0.010000  0.010000  9203.903383        0.0           9203.903383  0.000000      -99.998115
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=7/2048.[0m
[10/19 11:33:15]  --------------------------------------------------------------------------------
[10/19 11:33:15]  Iteration: 6 (0 solution, 5 counterexamples)
[10/19 11:33:15]  Generator returned sat in 0.466526 secs.
[10/19 11:33:15]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:16]  Improved gap from 0.0 to 1.5625
[10/19 11:33:16]  Improved number of small numbers from 26 to 114 out of a max of 114
[10/19 11:33:16]  Verifer returned sat in 0.770827 secs.
[10/19 11:33:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9292.237305    9292.206543  1105.000488  9292.237305     0.124023    0.124023  9292.206543    0.00000           9292.206543    0.030762      -14.719727
1    9306.988281    9306.957031  1203.437988  9306.988281    14.781738   14.781738  9306.957031    0.00000           9306.926270    0.031250       -1.531250
2    9724.864014    9308.519531  1203.437988  9724.864014   417.906982  417.906982  9308.519531    0.03125           9308.488770  416.313232      316.313232
3    9724.864014    9508.519531  1203.437988  9724.864014     0.031250    0.031250  9508.519531    0.03125           9508.519531  216.313232      216.313232
4    9724.895020    9508.550781  1203.437988  9724.895020   216.344238    1.000000  9508.550781    0.03125           9508.550781  216.312988      116.344238
5    9725.895020    9608.519531  1203.437988  9725.895020   417.937988    1.000000  9608.519531    0.03125           9708.550781  117.344238       17.344238
6    9726.895020    9708.550537  1285.093506  9726.895020   717.937988    1.000000  9708.550537    0.03125           9708.550537   18.313232       -0.000244
7    9727.895020    9726.895264  1383.499756  9727.895020   917.968994    1.000000  9726.895264    0.03125           9726.895264    0.968506       -0.593994
8    9728.895020    9728.488525  1383.500000  9728.895020  1136.313477    1.000000  9728.488525    0.03125           9728.488525    0.375244      -99.593750
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1295619/4096.[0m
[10/19 11:33:16]  --------------------------------------------------------------------------------
[10/19 11:33:16]  Iteration: 7 (0 solution, 6 counterexamples)
[10/19 11:33:17]  Generator returned sat in 0.095847 secs.
[10/19 11:33:17]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:17]  Improved gap from 1.5625 to 1.5625
[10/19 11:33:17]  Improved number of small numbers from 101 to 114 out of a max of 114
[10/19 11:33:17]  Verifer returned sat in 0.605855 secs.
[10/19 11:33:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9208.519531    9177.924561  1203.468750  9208.519531     0.123779    0.123779  9177.924561   0.000000           9177.924561   30.594971        0.030762
1    9208.519775    9208.488770  1301.906250  9208.519775    30.595215   30.595215  9208.488770   0.000000           9208.457764    0.031006       -1.531494
2    9609.644531    9308.488770  1301.906250  9609.644531   401.155762  401.155762  9308.488770   0.030762           9308.488770  301.125000      299.562500
3    9609.644531    9393.238281  1301.906250  9609.644531     0.031006    0.031006  9393.238281   0.030762           9393.238281  216.375488      199.562500
4    9609.644531    9410.082275  1301.906250  9609.644531   216.344727    1.000000  9410.082275   0.030762           9410.082275  199.531494       99.562500
5    9610.644531    9524.082275  1301.906250  9610.644531   418.938232    1.000000  9524.082275   0.030762           9524.082275   86.531494        0.562500
6    9611.644531    9610.051270  1400.343750  9611.644531   635.531738    1.000000  9610.051270   0.030762           9610.051270    1.562500        0.000000
7    9612.644531    9611.644531  1498.750244  9612.644531   853.344727    1.000000  9611.644531   0.030762           9611.644531    0.969238       -0.593506
8    9613.644531    9613.207275  1597.187744  9613.644531  1055.906982    1.000000  9613.207275   0.030762           9613.207275    0.406494       -1.156006
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=4793/16.[0m
[10/19 11:33:18]  --------------------------------------------------------------------------------
[10/19 11:33:18]  Iteration: 8 (0 solution, 7 counterexamples)
[10/19 11:33:19]  Generator returned sat in 1.546870 secs.
[10/19 11:33:19]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:20]  Improved gap from 0.03094482421875 to 1.5625
[10/19 11:33:20]  Improved number of small numbers from 49 to 114 out of a max of 114
[10/19 11:33:20]  Verifer returned sat in 1.037598 secs.
[10/19 11:33:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9111.864258    8910.301758  1203.530762  9111.864258      0.123535    0.123535  8910.301758   0.000000           8910.239990  201.562500      101.562500
1    9111.864258    9010.301758  1203.530762  9111.864258    201.562500  201.562500  9010.301758   0.000000           9010.239990  101.562500        1.562500
2    9111.926025    9110.363770  1301.906006  9111.926025    101.624268  101.624268  9110.363770   0.000000           9110.363770    1.562256       -0.000488
3    9410.236816    9195.236816  1301.906006  9410.236816    299.873047  299.873047  9195.236816   0.061768           9195.236816  214.938232      198.248535
4    9411.236816    9211.988281  1301.906006  9411.236816   1168.616211    1.000000  9211.988281   0.061768           9211.988281  199.186768       99.248535
5    9412.236816    9311.988037  1301.906006  9412.236816   2739.605469    1.000000  9311.988037   0.061768           9311.988037  100.187012        0.248535
6    9413.236816    9411.988281  1400.281738  9413.236816   5881.459473    1.000000  9411.988281   0.061768           9411.988281    1.186768       -0.375732
7    9414.236816    9413.550781  1498.719238  9414.236816  12195.421875    1.000000  9413.550781   0.061768           9413.488525    0.624268       -0.938232
8    9415.236816    9415.174805  1597.094971  9415.236816  24792.968750    1.000000  9415.174805   0.061768           9415.174805    0.000244       -1.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=406013/2048.[0m
[10/19 11:33:21]  --------------------------------------------------------------------------------
[10/19 11:33:21]  Iteration: 9 (0 solution, 8 counterexamples)
[10/19 11:33:21]  Generator returned sat in 0.290642 secs.
[10/19 11:33:21]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:22]  Improved gap from 1.5625 to 1.5625
[10/19 11:33:22]  Improved number of small numbers from 63 to 114 out of a max of 114
[10/19 11:33:22]  Verifer returned sat in 0.794575 secs.
[10/19 11:33:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    8854.509766    8754.386230  1105.154541  8854.509766      0.123535    0.123535  8754.386230        0.0           8754.324707  100.123535        0.123535
1    8854.509766    8854.448242  1203.530029  8854.509766      0.061523    0.061523  8854.448242        0.0           8854.448242    0.061523       -1.500977
2    8857.634766    8856.072510  1301.905762  8857.634766      3.186523    3.186523  8856.072510        0.0           8856.072510    1.562256       -0.000244
3    9155.945068    8941.007080  1301.905762  9155.945068    299.872559  299.872559  8941.007080        0.0           8941.007080  214.937988      198.310059
4    9156.945068    8957.635010  1301.905762  9156.945068    971.986816    1.000000  8957.635010        0.0           8656.449707  199.310059       99.310059
5    9157.945068    9057.635010  1301.905762  9157.945068   2149.347168    1.000000  9057.635010        0.0           9158.007080  100.310059        0.310059
6    9158.945068    9157.696777  1400.281494  9158.945068   4700.819336    1.000000  9157.696777        0.0           9157.696777    1.248291       -0.314209
7    9159.945068    9159.321045  1498.657227  9159.945068   9834.018066    1.000000  9159.321045        0.0           9159.321045    0.624023       -0.938477
8    9160.945068    9160.945068  1498.657227  9160.945068  20070.408203    1.000000  9160.945068        0.0           9160.945068    0.000000      -99.938477
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=203133/1024.[0m
[10/19 11:33:23]  --------------------------------------------------------------------------------
[10/19 11:33:23]  Iteration: 10 (0 solution, 9 counterexamples)
[10/19 11:33:24]  Generator returned sat in 1.098495 secs.
[10/19 11:33:24]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:24]  Improved gap from 0.005 to 0
[10/19 11:33:25]  Improved number of small numbers from 55 to 75 out of a max of 114
[10/19 11:33:25]  Verifer returned sat in 1.520868 secs.
[10/19 11:33:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    9397.074951    9397.070805   801.926671  9397.074951  0.123291  0.123291  9397.070805        0.0           9397.070805  0.004146        0.000169
1    9397.074951    9397.074782   901.926270  9397.074951  0.000244  0.000244  9397.074782        0.0           9397.074707  0.000169       -0.000233
2    9397.075692    9397.075237  1001.925762  9397.075692  0.000909  0.000909  9397.075237        0.0           9397.075237  0.000455        0.000000
3    9397.075692    9397.075692  1101.925537  9397.075692  0.000227  0.000227  9397.075692        0.0           9397.075928  0.000000       -0.000225
4    9397.085692    9397.075919  1201.905762  9397.085692  0.010227  0.010000  9397.075919        0.0           9397.075919  0.009773       -0.010000
5    9397.095692    9397.095692  1301.905762  9397.095692  0.022727  0.010000  9397.095692        0.0           9397.095703  0.000000        0.000000
6    9397.105692    9397.095692  1401.895762  9397.105692  0.086364  0.010000  9397.095692        0.0           9397.105713  0.010000        0.000000
7    9397.115692    9397.105692  1501.885742  9397.115692  0.212727  0.010000  9397.105692        0.0           9397.105469  0.010000       -0.000020
8    9397.125692    9397.115967  1501.885986  9397.125692  0.485000  0.010000  9397.115967        0.0           9397.115967  0.009725      -99.989775
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/2200.[0m
[10/19 11:33:26]  --------------------------------------------------------------------------------
[10/19 11:33:26]  Iteration: 11 (0 solution, 10 counterexamples)
[10/19 11:33:29]  Generator returned sat in 3.282181 secs.
[10/19 11:33:29]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 1c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:30]  Improved gap from 0.0 to 0
[10/19 11:33:31]  Improved number of small numbers from 60 to 70 out of a max of 114
[10/19 11:33:31]  Verifer returned sat in 1.677432 secs.
[10/19 11:33:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    9297.070312    9297.069692   901.931428  9297.070312    0.123047    0.123047  9297.069692   0.000000           9297.069692    0.000621        0.000288
1    9297.070312    9297.070025  1001.930908  9297.070312    0.000244    0.000244  9297.070025   0.000000           9297.070557    0.000288       -0.000233
2    9297.071025    9297.070692  1101.930428  9297.071025    0.001000    0.001000  9297.070692   0.000000           9297.070692    0.000333        0.000000
3    9397.072025    9297.071358  1101.930428  9397.072025  100.001333  100.001333  9297.071358   0.000333           9297.071358  100.000333        0.000667
4    9397.076358    9397.071358  1201.915527  9397.076358  100.004667    0.010000  9397.071358   0.000333           9397.071358    0.004667       -0.009901
5    9397.086358    9397.086025  1301.905518  9397.086358  300.007333    0.010000  9397.086025   0.000333           9397.086025    0.000000       -0.009911
6    9397.096358    9397.096025  1401.895752  9397.096358  500.038000    0.010000  9397.096025   0.000333           9397.096025    0.000000       -0.009676
7    9397.106358    9397.106025  1501.890095  9397.106358  700.087333    0.010000  9397.106025   0.000333           9397.106025    0.000000       -0.005333
8    9397.116358    9397.111358  1501.890137  9397.116358  700.156667    0.010000  9397.111358   0.000333           9397.116455    0.004667      -99.995292
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=1/1500.[0m
[10/19 11:33:31]  --------------------------------------------------------------------------------
[10/19 11:33:31]  Iteration: 12 (0 solution, 11 counterexamples)
[10/19 11:33:33]  Generator returned sat in 0.882218 secs.
[10/19 11:33:33]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(0.01, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + -1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + -1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
[0m
[10/19 11:33:33]  Improved gap from 0.0 to 0
[10/19 11:33:34]  Improved number of small numbers from 60 to 89 out of a max of 114
[10/19 11:33:34]  Verifer returned sat in 1.583352 secs.
[10/19 11:33:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  rate_0,t  service_0,t  losts_0,t  tot_service_choice_t   queue_t  bottle_queue_t
0    6842.589111    6842.570801  3356.413818  6842.589111  0.122803  0.122803  6842.570801        0.0           6842.570801  0.018311        0.001465
1    6842.589111    6842.588623  3455.927979  6842.589111  0.000977  0.000977  6842.588623        0.0           6842.588623  0.000488       -0.484375
2    6843.074219    6843.073486  3555.927190  6843.074219  0.485596  0.485596  6843.073486        0.0           6843.074951  0.000732       -0.000056
3    6843.074951    6843.074275  3655.926270  6843.074951  0.001465  0.001465  6843.074275        0.0           6843.075928  0.000676       -0.000244
4    6843.084275    6843.083442  3755.908857  6843.084275  0.010000  0.010000  6843.083442        0.0           6843.083442  0.000833       -0.008333
5    6843.093442    6843.092608  3855.899690  6843.093442  0.010000  0.010000  6843.092608        0.0           6843.091553  0.000833       -0.008333
6    6843.102608    6843.101775  3955.889893  6843.102608  0.010000  0.010000  6843.101775        0.0           6843.101074  0.000833       -0.008964
7    6843.111775    6843.111775  4055.880615  6843.111775  0.010000  0.010000  6843.111775        0.0           6843.111775  0.000000       -0.009075
8    6843.121775    6843.121582  4155.871338  6843.121775  0.010000  0.010000  6843.121582        0.0           6843.121582  0.000193       -0.008352
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=1/600.[0m
[10/19 11:33:35]  --------------------------------------------------------------------------------
[10/19 11:33:35]  Iteration: 13 (0 solution, 12 counterexamples)
[10/19 11:33:36]  Generator returned sat in 0.996428 secs.
[10/19 11:33:36]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 0)
[0m
[10/19 11:33:38]  Improved number of small numbers from 62 to 72 out of a max of 113
[10/19 11:33:38]  Verifer returned sat in 2.418066 secs.
[10/19 11:33:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    5060.780029    4860.779969  4054.292115  5060.780029    0.122803    0.122803  4860.779969     0.0000           5060.782471  200.000061      100.000061
1    5060.780029    4960.779969  4054.292115  5060.780029    0.002686    0.002686  4960.779969     0.0000           5060.782227  100.000061        0.000061
2    5060.780029    5060.779969  4055.880615  5060.780029   99.997314   99.997314  5060.779969     0.0000           5159.194092    0.000061      -98.411439
3    5559.198969    5159.582969  4055.880615  5559.198969  498.419000  498.419000  5159.582969     0.0025           5159.582969  399.613500      300.005000
4    5559.198969    5359.188969  4055.880615  5559.198969  399.611000    0.010000  5359.188969     0.0025           5359.188969  200.007500      200.005000
5    5759.201469    5359.193969  4055.880615  5759.201469  400.010000  200.005000  5359.193969     0.0050           5359.193969  400.002500      300.005000
6    5759.201469    5559.191469  4055.880615  5759.201469  350.212000    0.010000  5559.191469     0.0050           5559.191469  200.005000      200.005000
7    5935.106719    5633.223885  4055.880615  5935.106719  375.910250  187.955125  5633.223885     0.0050           5633.223885  301.877833      275.910250
8    5959.201469    5659.191469  4055.880615  5959.201469  325.972583  162.986292  5659.191469     0.0050           5759.193848  300.005000      200.005000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1/400, 
, buffer=60001/200.[0m
[10/19 11:33:39]  --------------------------------------------------------------------------------
[10/19 11:33:39]  Iteration: 14 (0 solution, 13 counterexamples)
[10/19 11:33:42]  Generator returned sat in 2.798485 secs.
[10/19 11:33:42]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:42]  Improved gap from 0.0 to 0
[10/19 11:33:42]  Improved number of small numbers from 76 to 114 out of a max of 114
[10/19 11:33:42]  Verifer returned sat in 0.400057 secs.
[10/19 11:33:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    4860.781250    4760.780518  4054.291992  4860.781250    0.122314    0.122314  4760.780518   0.000000           4760.780518  100.000732        0.001221
1    4860.781250    4860.780518  4054.291992  4860.781250    0.002686    0.002686  4860.780518   0.000000           4860.780518    0.000732      -99.998779
2    5060.780029    4960.780762  4054.291992  5060.780029  199.999512  199.999512  4960.780762   0.000000           4960.780762   99.999268        0.000000
3    5259.780762    5060.780029  4054.291992  5259.780762  299.000000  299.000000  5060.780029   0.000732           5160.780762  199.000000       99.000000
4    5259.780762    5259.780029  4054.291992  5259.780762    1.000000    1.000000  5259.780029   0.000732           5259.780029    0.000000       -1.000000
5    5260.780762    5260.780029  4153.292969  5260.780762    1.000000    2.500000  5260.780029   0.000732           5359.780029    0.000000       -0.999023
6    5261.780762    5261.779785  4253.291992  5261.780762    1.000000    2.500000  5261.779785   0.000732           5261.779785    0.000244        0.000000
7    5262.780518    5261.780029  4352.291992  5262.780518    1.000000    2.500000  5261.780029   0.000732           5261.779297    0.999756       -0.000244
8    5262.780762    5262.780029  4352.291992  5262.780762    1.000000    2.500000  5262.780029   0.000732           5362.780518    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
, buffer=99.[0m
[10/19 11:33:43]  --------------------------------------------------------------------------------
[10/19 11:33:43]  Iteration: 15 (0 solution, 14 counterexamples)
[10/19 11:33:43]  Generator returned sat in 0.148119 secs.
[10/19 11:33:43]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1/2c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 3/2c_f[n][t]/1 + 1)
[0m
[10/19 11:33:47]  Improved gap from 3.6250057220458984 to 21.875
[10/19 11:33:48]  Improved number of small numbers from 36 to 63 out of a max of 114
[10/19 11:33:48]  Verifer returned sat in 5.164444 secs.
[10/19 11:33:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    5699.209961    5599.209792  4123.184967  5699.209961    0.122070    0.122070  5599.209792    0.000000           5699.270996  100.000169        0.000169
1    5699.209961    5699.209792  4123.184967  5699.209961    0.061279    0.061279  5699.209792    0.000000           5699.270752    0.000169      -99.999831
2    5799.332106    5799.270949  4123.184967  5799.332106  100.122314  100.122314  5799.270949    0.000000           5799.270949    0.061157      -99.877686
3    6471.227980    5993.815918  4123.184967  6471.227980  671.957031  671.957031  5993.815918  402.406616           5993.815918   75.005446       69.611572
4    6640.717238    5999.270996  4123.184967  6640.717238  336.978516  169.489258  5999.270996  471.895874           5999.270996  169.550368       69.611572
5    6640.717238    6099.270949  4153.573242  6640.717238  169.489258   85.744629  6099.270949  471.895874           6099.270949   69.550415       -0.000153
6    6656.911452    6168.882521  4231.637207  6656.911452   85.744629  129.616943  6168.882521  471.895874           6168.882521   16.133057       -5.741974
7    6684.650710    6190.818848  4308.700928  6684.650710   43.872314   66.808472  6190.818848  471.895874           6190.818848   21.935988       -0.938995
8    6685.650879    6213.754883  4308.701172  6685.650879   22.936157   35.404236  6213.754883  471.895874           6213.754883    0.000122      -99.938582
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
, buffer=285129/4096.[0m
[10/19 11:33:49]  --------------------------------------------------------------------------------
[10/19 11:33:49]  Iteration: 16 (0 solution, 15 counterexamples)
[10/19 11:33:50]  Generator returned sat in 0.791229 secs.
[10/19 11:33:50]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 1c_f[n][t]/1 + 1)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:50]  Improved gap from 0.93896484375 to 1.5625
[10/19 11:33:51]  Improved number of small numbers from 58 to 113 out of a max of 114
[10/19 11:33:51]  Verifer returned sat in 1.062877 secs.
[10/19 11:33:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t   losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6240.717041    6240.656006  3581.708008  6240.717041    0.121826    0.121826  6240.656006    0.000000           6240.656006    0.061035        0.030273
1    6240.717041    6240.686768  3581.708252  6240.717041    0.030518    0.030518  6240.686768    0.000000           6240.747803    0.030273      -99.969482
2    6340.686768    6340.686523  3680.145508  6340.686768  100.000000  100.000000  6340.686523    0.000000           6340.656006    0.000244       -1.562500
3    6739.674805    6442.249023  3680.145508  6739.674805  398.988281  398.988281  6442.249023  296.209229           6442.249023    1.216553        1.216309
4    6938.952393    6542.249023  3680.145508  6938.952393  200.494141  201.494141  6542.249023  395.486816           6542.249023    1.216553        1.216309
5    7038.982910    6542.279785  3680.145508  7038.982910  101.247070  102.247070  6542.279785  395.517334           6542.279785  101.185791        1.216309
6    7038.982910    6642.279541  3778.552490  7038.982910   51.623535   52.623535  6642.279541  395.517334           6642.279541    1.186035       -0.376709
7    7039.982910    6643.872559  3876.959473  7039.982910   26.811768    1.000000  6643.872559  395.517334           6643.872559    0.593018       -0.969727
8    7040.982910    6645.465576  3876.959717  7040.982910   14.405884    1.000000  6645.465576  395.517334           6645.465576    0.000000      -99.969482
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=2, loss_amount=125/4096, 
, buffer=2491/2048.[0m
[10/19 11:33:51]  --------------------------------------------------------------------------------
[10/19 11:33:51]  Iteration: 17 (0 solution, 16 counterexamples)
[10/19 11:33:54]  Generator returned sat in 2.532086 secs.
[10/19 11:33:54]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:55]  Improved gap from 0.0 to 1.5625
[10/19 11:33:55]  Improved number of small numbers from 74 to 107 out of a max of 114
[10/19 11:33:55]  Verifer returned sat in 1.204280 secs.
[10/19 11:33:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6836.860840    6783.935303  3597.868164  6836.860840    0.121826    0.121826  6783.935303        0.0           6783.935303   52.925537       52.925293
1    6836.860840    6835.298584  3644.942627  6836.860840    0.060791    0.060791  6835.298584        0.0           6835.298584    1.562256       -0.000244
2    6836.921875    6836.861084  3736.380127  6836.921875    1.623291    1.623291  6836.861084        0.0           6836.860840    0.060791       -8.501709
3    7144.985840    6928.731201  3736.380127  7144.985840  308.124756  308.124756  6928.731201        0.0           6928.731201  216.254639      199.562256
4    7145.925049    6959.573584  3736.380127  7145.925049  217.193848    1.000000  6959.573584        0.0           6959.573584  186.351465      100.501465
5    7145.986084    7045.484619  3736.380127  7145.986084  186.412500    1.000000  7045.484619        0.0           7045.484619  100.501465        0.562500
6    7146.986084    7145.423584  3834.817383  7146.986084  312.935303    1.000000  7145.423584        0.0           7147.046875    1.562500       -0.000244
7    7147.986084    7147.046997  3933.194092  7147.986084  325.038574    1.000000  7147.046997        0.0           7147.046997    0.939087       -0.623535
8    7148.986084    7148.670166  4031.570557  7148.986084  281.210120    1.000000  7148.670166        0.0           7148.670166    0.315918       -1.247070
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=408829/2048.[0m
[10/19 11:33:56]  --------------------------------------------------------------------------------
[10/19 11:33:56]  Iteration: 18 (0 solution, 17 counterexamples)
[10/19 11:33:57]  Generator returned sat in 0.589828 secs.
[10/19 11:33:57]  Candidate solution: 
[1m[94mCWND:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(0.01, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
PACING:
if(Ld_f[n][t] > Ld_f[n][t-1]):
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 0)
else:
	r_f[n][t] = max(0.01, 0c_f[n][t]/1 + 1)
[0m
[10/19 11:33:57]  Improved gap from 0.0609130859375 to 1.5625
[10/19 11:33:59]  Improved number of small numbers from 53 to 64 out of a max of 114
[10/19 11:33:59]  Verifer returned sat in 1.860196 secs.
[10/19 11:33:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t    rate_0,t  service_0,t  losts_0,t  tot_service_choice_t     queue_t  bottle_queue_t
0    6815.718506    6715.713584  3697.468994  6815.718506    0.121582    0.121582  6715.713584      0.000           6715.713584  100.004922      100.004824
1    6815.718506    6815.713584  3697.468994  6815.718506    0.005127    0.005127  6815.713584      0.000           6815.713584    0.004922        0.004824
2    6859.998584    6858.436084  3753.184092  6859.998584   44.285000   44.285000  6858.436084      0.000           6858.436084    1.562500        0.000000
3    7177.421084    6959.998584  3753.184092  7177.421084  318.985000  318.985000  6959.998584      0.005           6959.998584  217.417500      217.417500
4    7177.431084    6959.998584  3753.184092  7177.431084  367.427500    0.010000  6959.998584      0.005           7060.003662  217.427500      117.427500
5    7177.431084    7060.003584  3753.184092  7177.431084  217.427500    1.000000  7060.003584      0.005           7060.003584  117.422500       17.427500
6    7178.431084    7176.863584  3834.756592  7178.431084  303.351250    1.000000  7176.863584      0.005           7176.863584    1.562500        0.000000
7    7179.431084    7178.426084  3933.193848  7179.431084  326.297500    1.000000  7178.426084      0.005           7178.420898    1.000000       -0.562744
8    7180.431084    7179.993652  3933.194092  7180.431084  328.641250    1.000000  7179.993652      0.005           7179.993652    0.432432      -99.562500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
, buffer=21741750000000003/100000000000000.[0m
[10/19 11:33:59]  --------------------------------------------------------------------------------
[10/19 11:33:59]  Iteration: 19 (0 solution, 18 counterexamples)
