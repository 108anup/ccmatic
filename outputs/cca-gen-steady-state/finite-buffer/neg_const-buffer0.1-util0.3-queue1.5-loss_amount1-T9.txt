[08/30 10:38:00]  --------------------------------------------------------------------------------
[08/30 10:38:00]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 10:38:00]  Generator returned sat in 0.004202 secs.
[08/30 10:38:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:00]  Improved gap from 80.2 to 100
[08/30 10:38:00]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:38:00]  Verifer returned sat in 0.220475 secs.
[08/30 10:38:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0         -334.8         -354.8     354.8       -334.8       0.1       -354.8        0.0     20.0            20.0
1         -254.6         -254.8     354.8       -254.6     100.2       -254.8        0.0      0.2             0.2
2         -254.6         -254.8     354.8       -254.6       0.1       -254.8        0.0      0.2           -99.8
3          -34.7         -154.8     354.8        -34.7     220.1       -154.8        0.1    120.0            20.0
4          686.5           31.2     354.8        686.5     841.2         31.2      621.3     34.0            20.0
5         2907.9           89.2     354.8       2907.9    2255.4         89.2     2742.7     76.0            20.0
6         8031.7          163.2     354.8       8031.7    5199.8        163.2     7766.5    102.0            20.0
7        18966.3          345.2     354.8      18966.3   11036.6        345.2    18601.1     20.0            20.0
8        41648.5          345.2     354.8      41648.5   22702.2        345.2    41183.3    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=40562.[0m
[08/30 10:38:00]  --------------------------------------------------------------------------------
[08/30 10:38:00]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 10:38:00]  Generator returned sat in 0.032597 secs.
[08/30 10:38:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:01]  Improved gap from 0.000625 to 0
[08/30 10:38:01]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:38:01]  Verifer returned sat in 0.257057 secs.
[08/30 10:38:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0     -334.70250     -354.80000  354.70250   -334.70250    0.10000   -354.80000    0.00000   20.09750        20.00000
1     -234.70125     -254.70250  354.70250   -234.70125  120.09875   -254.70250    0.00125   20.00000        20.00000
2     -234.70125     -234.70500  354.70250   -234.70125    0.00125   -234.70500    0.00125    0.00250       -80.00000
3      -34.70000     -153.70500  354.70250    -34.70000  200.00375   -153.70500    0.00250  119.00250        20.00000
4       45.30125       45.28750  354.70250     45.30125  199.00375     45.28750    0.00250    0.01125         0.00125
5       45.30125       45.29750  454.69375     45.30125    0.01000     45.29750    0.00250    0.00125        -0.00750
6       45.31000       45.30625  554.68500     45.31000    0.01000     45.30625    0.00250    0.00125        -0.00750
7       45.31875       45.31500  654.67625     45.31875    0.01000     45.31500    0.00250    0.00125        -0.00750
8       45.32750       45.32375  654.67625     45.32750    0.01000     45.32375    0.00250    0.00125       -99.99875
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:38:01]  --------------------------------------------------------------------------------
[08/30 10:38:01]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 10:38:01]  Generator returned sat in 0.018290 secs.
[08/30 10:38:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:01]  Improved gap from 0.00125 to 4.6875
[08/30 10:38:02]  Improved number of small numbers from 69 to 100 out of a max of 100
[08/30 10:38:02]  Verifer returned sat in 0.507538 secs.
[08/30 10:38:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -334.702881    -334.752686  334.752441  -334.702881    0.100098  -334.752686   0.000000    0.049805        0.049561
1    -334.702637    -334.752441  334.752441  -334.702637    0.050049  -334.752441   0.000000    0.049805      -99.950195
2    -114.702637    -234.752441  334.752441  -114.702637  220.049805  -234.752441   0.049805  120.000000       20.000000
3     -14.702637     -34.752686  334.752441   -14.702637  220.000000   -34.752686   0.049805   20.000244       20.000000
4      74.297119      20.697510  334.752441    74.297119  109.000000    20.697510   0.049805   53.549805        8.999756
5      74.297119      68.434814  405.864990    74.297119   53.500000    68.434814   0.049805    5.812500      -19.887695
6      94.234619      94.135010  494.040039    94.234619   25.750000    94.135010   0.049805    0.049805      -11.775146
7     106.059814     105.959961  589.352539   106.059814   11.875000   105.959961   0.049805    0.050049       -4.637451
8     110.947266     110.647461  589.352783   110.947266    4.937500   110.647461   0.049805    0.250000      -99.749756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:38:02]  --------------------------------------------------------------------------------
[08/30 10:38:02]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 10:38:02]  Generator returned sat in 0.013008 secs.
[08/30 10:38:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:02]  Improved gap from 0.0025 to 0
[08/30 10:38:03]  Improved number of small numbers from 42 to 60 out of a max of 100
[08/30 10:38:03]  Verifer returned sat in 0.734361 secs.
[08/30 10:38:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -334.697510    -334.750000  334.749756  -334.697510    0.099854  -334.750000   0.049805    0.002686        0.002441
1    -334.697510    -334.749756  334.749941  -334.697510    0.002500  -334.749756   0.049805    0.002441      -99.997373
2    -114.702637    -234.749941  334.749941  -114.702637  219.997314  -234.749941   0.049805  119.997500       19.997500
3     -14.697637     -34.750000  334.749941   -14.697637  220.002500   -34.750000   0.052305   20.000059       20.000000
4     -14.697637     -14.752441  414.749756   -14.697637    1.000000   -14.752441   0.052305    0.002500       -0.000186
5     -14.690137     -14.744941  514.742432   -14.690137    0.010000   -14.744941   0.052305    0.002500       -0.000010
6     -14.682637     -14.737441  614.727539   -14.682637    0.010000   -14.737441   0.052305    0.002500       -0.007402
7     -14.675137     -14.727441  714.727295   -14.675137    0.010000   -14.727441   0.052305    0.000000       -0.000146
8     -14.665137     -14.727295  714.727539   -14.665137    0.010000   -14.727295   0.052305    0.009854      -99.989902
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:38:03]  --------------------------------------------------------------------------------
[08/30 10:38:03]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 10:38:03]  Generator returned sat in 0.078391 secs.
[08/30 10:38:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:03]  Improved gap from 90.3994140625 to 100
[08/30 10:38:04]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/30 10:38:04]  Verifer returned sat in 0.247991 secs.
[08/30 10:38:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -713.687500    -713.737549  614.737305  -713.687500    0.099609  -713.737549    0.049805    0.000244      -98.999756
1    -514.687744    -614.737549  614.737305  -514.687744  199.000000  -614.737549    0.049805  100.000000        0.000000
2    -414.687744    -514.737549  614.737305  -414.687744  200.000000  -514.737549    0.049805  100.000000        0.000000
3    -294.587891    -368.337646  614.737305  -294.587891  220.099854  -368.337646    0.149658   73.600098       20.000000
4    -194.488037    -260.137451  614.737305  -194.488037  173.699951  -260.137451    0.249512   65.399902       20.000000
5     -81.587891    -114.737549  614.737305   -81.587891  178.300049  -114.737549   13.149658   20.000000       20.000000
6      99.412109     -14.737549  614.737305    99.412109  201.000000   -14.737549   94.149658   20.000000       20.000000
7     257.212158      85.262451  614.737305   257.212158  177.800049    85.262451  151.949707   20.000000       20.000000
8     410.912109      85.262695  614.737305   410.912109  173.699951    85.262695  205.649658  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=841319/4096.[0m
[08/30 10:38:04]  --------------------------------------------------------------------------------
[08/30 10:38:04]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 10:38:04]  Generator returned sat in 0.153633 secs.
[08/30 10:38:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:04]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 10:38:04]  Verifer returned sat in 0.161644 secs.
[08/30 10:38:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    -704.725830    -704.925293  614.737305  -704.725830    0.099609  -704.925293     0.149658    0.049805      -90.137939
1    -514.687744    -614.737549  614.737305  -514.687744  190.087891  -614.737549     0.149658   99.900146       -0.099854
2    -414.587891    -414.787354  614.737305  -414.587891  200.000000  -414.787354     0.149658    0.049805        0.000000
3    -294.587891    -414.737549  614.737305  -294.587891  120.049805  -414.737549     0.149658  120.000000       20.000000
4     225.812500    -314.737549  614.737305   225.812500  640.400391  -314.737549   420.550049  120.000000       20.000000
5     225.812500    -194.787354  614.737305   225.812500    1.000000  -194.787354   420.550049    0.049805      -80.000000
6     666.262695     -14.737549  614.737305   666.262695  440.500000   -14.737549   661.000244   20.000000       20.000000
7     666.262695       5.212646  614.737305   666.262695    1.000000     5.212646   661.000244    0.049805      -80.000000
8    1306.613281      85.262695  614.737305  1306.613281  640.400391    85.262695  1101.350830  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=174285/256.[0m
[08/30 10:38:05]  --------------------------------------------------------------------------------
[08/30 10:38:05]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 10:38:05]  Generator returned sat in 0.260072 secs.
[08/30 10:38:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:05]  Improved gap from 0.004 to 100
[08/30 10:38:06]  Improved number of small numbers from 37 to 49 out of a max of 100
[08/30 10:38:06]  Verifer returned sat in 0.848795 secs.
[08/30 10:38:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     105.339355    -694.739258  614.737305   105.339355    0.099365  -694.739258   800.077158    0.001455         0.00124
1     105.339355    -694.739043  614.737305   105.339355    0.001221  -694.739043   800.077158    0.001240       -99.99876
2     305.339365    -494.739043  614.737305   305.339365  200.001250  -494.739043   800.077158    0.001250         0.00125
3     425.339365    -494.739014  614.737305   425.339365  120.001250  -494.739014   800.078408  119.999971        20.00000
4     425.339365    -394.739043  614.737305   425.339365    0.010000  -394.739043   800.078408   20.000000       -80.00000
5     555.359365    -281.431543  614.737305   555.359365  150.020000  -281.431543   800.078408   36.712500       -49.98000
6     925.340615    -194.739014  614.737305   925.340615  406.693750  -194.739014  1000.079658  119.999971        20.00000
7     925.340615     -94.739043  614.737305   925.340615    0.010000   -94.739043  1000.079658   20.000000       -80.00000
8    1055.360615       5.260986  614.737305  1055.360615  150.020000     5.260986  1000.079658   50.019971       -49.98000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=160001/800.[0m
[08/30 10:38:06]  --------------------------------------------------------------------------------
[08/30 10:38:06]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 10:38:06]  Generator returned sat in 0.360498 secs.
[08/30 10:38:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:07]  Improved gap from 0.0 to 100
[08/30 10:38:08]  Improved number of small numbers from 21 to 31 out of a max of 100
[08/30 10:38:08]  Verifer returned sat in 1.181197 secs.
[08/30 10:38:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     223.676025    -776.428467  614.737305   223.676025    0.099121  -776.428467  1000.054817    0.049675        0.025049
1     223.676025    -776.403841  614.737305   223.676025    0.024658  -776.403841  1000.054817    0.025049      -99.974951
2     443.675818    -576.403841  614.737305   443.675818  220.024841  -576.403841  1000.079658   20.000000       20.000000
3     468.732639    -531.371860  614.737305   468.732639   45.056821  -531.371860  1000.079658    0.024841      -54.943179
4     535.293030    -464.811469  614.737305   535.293030   66.585232  -464.811469  1000.079658    0.024841      -88.382788
5     634.146037    -365.958462  614.737305   634.146037   98.877848  -365.958462  1000.079658    0.024841      -89.529781
6     781.437968    -276.403841  614.737305   781.437968  147.316772  -276.403841  1000.079658   57.762151      -42.237849
7     943.650976     -85.341737  614.737305   943.650976  219.975159   -85.341737  1000.079658   28.913055       19.975159
8    1243.700659     -76.403809  614.737305  1243.700659  328.962738   -76.403809  1200.104500  119.999968       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=3277207/16384.[0m
[08/30 10:38:08]  --------------------------------------------------------------------------------
[08/30 10:38:08]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 10:38:08]  Generator returned sat in 0.049789 secs.
[08/30 10:38:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:08]  Improved gap from 0.0025 to 100
[08/30 10:38:09]  Improved number of small numbers from 29 to 100 out of a max of 100
[08/30 10:38:09]  Verifer returned sat in 0.335314 secs.
[08/30 10:38:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     266.635254    -753.394531  614.737305   266.635254    0.099365  -753.394531  1000.030029   19.999756       19.999756
1     366.685303    -654.394287  614.737305   366.685303  120.049805  -654.394287  1000.079834   20.999756       20.000000
2     366.685303    -653.394531  614.737305   366.685303    0.049805  -653.394531  1000.079834   20.000000      -80.000000
3     566.734863    -553.394531  614.737305   566.734863  220.049561  -553.394531  1000.129395  120.000000       20.000000
4     566.734863    -453.394531  614.737305   566.734863    1.000000  -453.394531  1000.129395   20.000000      -80.000000
5     746.734619    -332.369629  614.737305   746.734619  199.999756  -332.369629  1000.129395   78.974854       -0.000244
6     987.784668    -153.394531  614.737305   987.784668  320.024902  -153.394531  1121.179199   20.000000       20.000000
7     987.784668    -153.394531  614.737305   987.784668    1.000000  -153.394531  1121.179199   20.000000      -80.000000
8    1266.784668     -53.394287  614.737305  1266.784668  299.000000   -53.394287  1200.179199  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=204851/1024.[0m
[08/30 10:38:09]  --------------------------------------------------------------------------------
[08/30 10:38:09]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 10:38:09]  Generator returned sat in 0.124980 secs.
[08/30 10:38:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:10]  Improved gap from 0.0025 to 28.125
[08/30 10:38:10]  Improved number of small numbers from 48 to 100 out of a max of 100
[08/30 10:38:10]  Verifer returned sat in 1.197928 secs.
[08/30 10:38:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     388.969482    -731.110107  492.452637   388.969482    0.099365  -731.110107  1000.079590  120.000000       20.000000
1     489.019287    -631.109863  492.452637   489.019287  220.049805  -631.109863  1000.129395  119.999756       20.000000
2     569.069092    -431.110107  492.452637   569.069092  200.049561  -431.110107  1000.129395    0.049805        0.049805
3     583.581787    -431.110107  564.327637   583.581787   14.562500  -431.110107  1000.129395   14.562500      -13.562500
4     597.144287    -402.985107  609.127441   597.144287   28.125000  -402.985107  1000.129395    0.000000      -55.200195
5     652.394287    -347.784912  609.127441   652.394287   55.250000  -347.784912  1000.129395    0.049805      -99.950195
6     761.844482    -247.784912  609.127441   761.844482  109.500000  -247.784912  1000.129395    9.500000      -90.500000
7     970.344482    -147.784912  609.127441   970.344482  218.000000  -147.784912  1000.129395  118.000000       18.000000
8    1287.344482     -47.784668  609.127441  1287.344482  435.000000   -47.784668  1215.129395  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=215.[0m
[08/30 10:38:11]  --------------------------------------------------------------------------------
[08/30 10:38:11]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 10:38:11]  Generator returned sat in 0.651699 secs.
[08/30 10:38:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:12]  Improved number of small numbers from 43 to 99 out of a max of 99
[08/30 10:38:12]  Verifer returned sat in 0.326265 secs.
[08/30 10:38:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     398.020020    -622.059570  564.327393   398.020020    0.099365  -622.059570  1000.079834   19.999756       19.999756
1     498.069824    -522.059814  564.327393   498.069824  120.049561  -522.059814  1000.129395   20.000244       20.000000
2     558.069580    -442.109375  564.327393   558.069580   80.000000  -442.109375  1000.129395    0.049561      -20.000244
3     578.119385    -422.059570  564.327393   578.119385   20.099365  -422.059570  1000.129395    0.049561      -99.950439
4     778.069824    -312.084473  564.327393   778.069824  200.000000  -312.084473  1000.129395   90.024902        0.000000
5     898.020264    -222.059570  564.327393   898.020264  209.975342  -222.059570  1000.129395  119.950439       19.950439
6     998.119629     -66.047363  564.327393   998.119629  220.049805   -66.047363  1000.179199   63.987793       20.000000
7    1043.156738      42.927979  564.327393  1043.156738  109.024902    42.927979  1000.179199    0.049561      -34.962891
8    1398.119629      77.940430  564.327393  1398.119629  355.012451    77.940430  1200.179199  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=204851/1024.[0m
[08/30 10:38:12]  --------------------------------------------------------------------------------
[08/30 10:38:12]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 10:38:12]  Generator returned sat in 0.057030 secs.
[08/30 10:38:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:12]  Improved number of small numbers from 97 to 97 out of a max of 99
[08/30 10:38:12]  Verifer returned sat in 0.174362 secs.
[08/30 10:38:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     376.970947    -641.109131  564.327393   376.970947    0.099365  -641.109131   979.030518   39.049561       20.000000
1     477.020508    -522.059570  564.327393   477.020508  139.099121  -522.059570   979.080078   20.000000       20.000000
2     577.070068    -422.059570  564.327393   577.070068  120.049561  -422.059570   979.129639   20.000000       20.000000
3     657.070068    -422.059570  564.327393   657.070068  100.000000  -422.059570   979.129639  100.000000        0.000000
4     777.119629    -322.059570  564.327393   777.119629  220.049561  -322.059570   979.179199  120.000000       20.000000
5     777.119629    -202.059570  564.327393   777.119629  109.024780  -202.059570   979.179199    0.000000      -80.000000
6     998.119629     -66.522461  564.327393   998.119629  221.000000   -66.522461  1000.179199   64.462891       20.000000
7    1043.156738      42.927979  564.327393  1043.156738  109.500000    42.927979  1000.179199    0.049561      -34.962891
8    1409.094727      77.940430  564.327393  1409.094727  365.987549    77.940430  1211.154297  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=475085/2048.[0m
[08/30 10:38:13]  --------------------------------------------------------------------------------
[08/30 10:38:13]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 10:38:13]  Generator returned sat in 0.408593 secs.
[08/30 10:38:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:14]  Improved gap from 0.00125 to 100
[08/30 10:38:14]  Improved number of small numbers from 46 to 54 out of a max of 100
[08/30 10:38:14]  Verifer returned sat in 1.059017 secs.
[08/30 10:38:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0     349.134521    -623.397314  564.327393   349.134521    0.098877  -623.397314   873.186943   99.344893       19.999893
1     449.132129    -544.052314  564.327393   449.132129  199.342500  -544.052314   873.186943  119.997500       19.997500
2     549.132129    -444.052246  564.327393   549.132129  219.997500  -444.052246   873.186943  119.997432       19.997500
3     549.132129    -344.052314  564.327393   549.132129  119.995000  -344.052314   873.186943   19.997500      -80.002500
4     727.804629    -145.384814  564.327393   727.804629  198.670000  -145.384814   873.186943    0.002500       -1.330000
5    1025.470879    -144.052246  564.327393  1025.470879  297.668750  -144.052246  1049.523193  119.999932       20.000000
6    1025.470879     -44.052314  564.327393  1025.470879    0.010000   -44.052314  1049.523193   20.000000      -80.000000
7    1154.475879     104.950186  564.327393  1154.475879  149.005000   104.950186  1049.523193    0.002500      -50.995000
8    1353.143379     155.947754  564.327393  1353.143379  198.670000   155.947754  1077.195693  119.999932       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=163207/800.[0m
[08/30 10:38:15]  --------------------------------------------------------------------------------
[08/30 10:38:15]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 10:38:15]  Generator returned sat in 0.163121 secs.
[08/30 10:38:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:15]  Improved gap from 0.04931640625 to 100
[08/30 10:38:16]  Improved number of small numbers from 61 to 71 out of a max of 100
[08/30 10:38:16]  Verifer returned sat in 0.949861 secs.
[08/30 10:38:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -359.765869    -379.765869  564.327393  -359.765869    0.098633  -379.765869    0.000000   20.000000       19.999863
1    -259.815186    -279.765732  564.327393  -259.815186  119.950684  -279.765732    0.000000   19.950547       19.950547
2    -259.815186    -268.155869  564.327393  -259.815186    0.049316  -268.155869    0.000000    8.340684      -80.049453
3     -59.716416    -162.936143  564.327393   -59.716416  208.439453  -162.936143    0.049316  103.170410       20.000000
4     -59.667100     -79.765732  564.327393   -59.667100  103.219727   -79.765732    0.049316   20.049316      -79.950684
5      71.893447      20.234268  564.327393    71.893447  151.609863    20.234268    0.049316   51.609863      -48.390137
6     240.283584     220.234268  564.327393   240.283584  220.000000   220.234268    0.049316   20.000000       20.000000
7     521.868789     308.905776  564.327393   521.868789  301.585205   308.905776  181.634521   31.328491       20.000000
8     640.332900     320.234375  564.327393   640.332900  149.792603   320.234375  200.098633  119.999893       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=409701/2048.[0m
[08/30 10:38:16]  --------------------------------------------------------------------------------
[08/30 10:38:16]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 10:38:17]  Generator returned sat in 0.086532 secs.
[08/30 10:38:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:17]  Improved number of small numbers from 72 to 99 out of a max of 99
[08/30 10:38:17]  Verifer returned sat in 0.183758 secs.
[08/30 10:38:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -359.765869    -379.765869  564.327148  -359.765869    0.098389  -379.765869    0.000000   20.000000       19.999756
1    -259.815430    -279.765869  564.327148  -259.815430  119.950439  -279.765869    0.000000   19.950439       19.950195
2    -259.815430    -265.180664  564.327393  -259.815430    0.049072  -265.180664    0.000000    5.365234      -80.049561
3     -56.839844    -162.936279  564.327393   -56.839844  208.340820  -162.936279    2.926025  103.170410       20.000000
4     -56.839844     -79.765869  564.327393   -56.839844  103.170410   -79.765869    2.926025   20.000000      -80.000000
5      75.745361      20.234131  564.327393    75.745361  152.585205    20.234131    2.926025   52.585205      -47.414795
6     243.160156     217.649658  564.327393   243.160156  220.000000   217.649658    2.926025   22.584473       20.000000
7     521.868652     311.928467  564.327393   521.868652  301.292969   311.928467  181.634521   28.305664       20.000000
8     643.209473     320.234375  564.327393   643.209473  149.646484   320.234375  202.975342  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=409701/2048.[0m
[08/30 10:38:17]  --------------------------------------------------------------------------------
[08/30 10:38:17]  Iteration: 16 (0 solution, 15 counterexamples)
[08/30 10:38:18]  Generator returned sat in 0.555450 secs.
[08/30 10:38:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:18]  Improved gap from 0.0 to 21.875
[08/30 10:38:19]  Improved number of small numbers from 55 to 70 out of a max of 100
[08/30 10:38:19]  Verifer returned sat in 0.877392 secs.
[08/30 10:38:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    -259.815430    -272.773438  457.334961  -259.815430   0.098145  -272.773438        0.0  12.958008       12.958008
1    -259.815430    -259.864624  522.551025  -259.815430  12.958008  -259.864624        0.0   0.049194      -21.825928
2    -204.599304    -226.474304  589.160645  -204.599304  55.265320  -226.474304        0.0  21.875000       -0.000183
3    -169.463013    -204.599121  654.024536  -169.463013  57.011292  -204.599121        0.0  35.136108        0.000000
4    -169.463013    -169.463013  732.149536  -169.463013  35.087158  -169.463013        0.0   0.000000      -21.875000
5    -123.262207    -147.588013  807.823730  -123.262207  46.200806  -147.588013        0.0  24.325806        0.000000
6    -107.144867    -123.262207  885.948730  -107.144867  40.443146  -123.262207        0.0  16.117340       -5.757660
7     -81.593750    -101.387207  964.073730   -81.593750  41.668457  -101.387207        0.0  19.793457       -2.081543
8     -66.349304     -79.512207  964.073730   -66.349304  35.037903   -79.512207        0.0  13.162903      -86.837097
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:38:19]  --------------------------------------------------------------------------------
[08/30 10:38:19]  Iteration: 17 (0 solution, 16 counterexamples)
[08/30 10:38:21]  Generator returned sat in 1.586870 secs.
[08/30 10:38:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:21]  Improved gap from 0.049072265625 to 100
[08/30 10:38:21]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:38:21]  Verifer returned sat in 0.214866 secs.
[08/30 10:38:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t  queue_t  bottle_queue_t
0    -621.289062    -641.289062  825.850342  -621.289062    0.098145  -641.289062    0.000000     20.0            20.0
1    -541.289062    -641.289062  825.850342  -541.289062  100.000000  -641.289062    0.000000    100.0             0.0
2    -421.239990    -441.289062  825.850342  -421.239990  220.049072  -441.289062    0.049072     20.0            20.0
3    -385.739990    -441.289062  825.850342  -385.739990   55.500000  -441.289062    0.049072     55.5           -44.5
4    -330.239990    -341.289062  825.850342  -330.239990  111.000000  -341.289062    0.049072     11.0           -89.0
5    -119.239990    -231.289062  825.850342  -119.239990  222.000000  -231.289062    2.049072    110.0            20.0
6    -119.239990    -141.289062  825.850342  -119.239990  110.000000  -141.289062    2.049072     20.0           -80.0
7      80.760010      58.710938  825.850342    80.760010  220.000000    58.710938    2.049072     20.0            20.0
8     500.760010      58.710938  825.850342   500.760010  440.000000    58.710938  322.049072    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=322.[0m
[08/30 10:38:22]  --------------------------------------------------------------------------------
[08/30 10:38:22]  Iteration: 18 (0 solution, 17 counterexamples)
[08/30 10:38:22]  Generator returned sat in 0.093378 secs.
[08/30 10:38:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:22]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 10:38:22]  Verifer returned sat in 0.185289 secs.
[08/30 10:38:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -621.289307    -641.289307  825.850342  -621.289307    0.098145  -641.289307    0.000000   20.000000       20.000000
1    -541.289307    -641.289307  825.850342  -541.289307  100.000000  -641.289307    0.000000  100.000000        0.000000
2    -421.240234    -441.289307  825.850342  -421.240234  220.049072  -441.289307    0.049072   20.000000       20.000000
3    -386.740234    -440.289062  825.850342  -386.740234   54.500000  -440.289062    0.049072   53.499756      -45.500000
4    -330.239990    -340.289307  825.850342  -330.239990  110.000000  -340.289307    0.049072   10.000244      -88.999756
5    -119.240234    -230.789307  825.850342  -119.240234  221.000000  -230.789307    2.049072  109.500000       20.000000
6    -119.240234    -141.289307  825.850342  -119.240234  109.500000  -141.289307    2.049072   20.000000      -80.000000
7      80.759766      58.710693  825.850342    80.759766  220.000000    58.710693    2.049072   20.000000       20.000000
8     501.759766      58.710693  825.850342   501.759766  441.000000    58.710693  323.049072  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=323.[0m
[08/30 10:38:22]  --------------------------------------------------------------------------------
[08/30 10:38:22]  Iteration: 19 (0 solution, 18 counterexamples)
[08/30 10:38:23]  Generator returned sat in 0.575297 secs.
[08/30 10:38:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:23]  Verifer returned unsat in 0.131516 secs.
[08/30 10:38:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:23]  --------------------------------------------------------------------------------
[08/30 10:38:23]  Iteration: 20 (1 solution, 18 counterexamples)
[08/30 10:38:24]  Generator returned sat in 0.078434 secs.
[08/30 10:38:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:24]  Improved gap from 0.0489501953125 to 1.5625
[08/30 10:38:24]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/30 10:38:24]  Verifer returned sat in 0.369851 secs.
[08/30 10:38:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -386.929932    -406.929932   746.461914  -386.929932    0.097900  -406.929932   0.000000   20.000000       20.000000
1    -286.978760    -406.929688   746.461914  -286.978760  119.951172  -406.929688   0.000000  119.950928       19.951172
2    -206.929932    -306.929932   746.461914  -206.929932  199.999756  -306.929932   0.000000  100.000000        0.000000
3    -186.318359    -187.881104   825.850342  -186.318359  120.611572  -187.881104   0.000000    1.562744        0.000000
4     -66.269531     -86.318359   825.850342   -66.269531  121.611572   -86.318359   0.048828   20.000000       20.000000
5     -66.269531     -67.880859   905.850098   -66.269531    1.000000   -67.880859   0.048828    1.562500       -0.000244
6     -65.832031     -65.929688  1003.899170   -65.832031    2.000000   -65.929688   0.048828    0.048828       -1.513672
7     -62.880859     -64.367188  1102.336670   -62.880859    3.000000   -64.367188   0.048828    1.437500       -0.125000
8     -60.318359     -62.804688  1199.899170   -60.318359    4.000000   -62.804688   0.048828    2.437500        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:38:24]  --------------------------------------------------------------------------------
[08/30 10:38:24]  Iteration: 21 (1 solution, 19 counterexamples)
[08/30 10:38:25]  Generator returned sat in 0.735840 secs.
[08/30 10:38:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:26]  Improved gap from 1.0075 to 1.5625
[08/30 10:38:26]  Improved number of small numbers from 65 to 81 out of a max of 100
[08/30 10:38:26]  Verifer returned sat in 0.744266 secs.
[08/30 10:38:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -784.313477    -904.313232   943.024170  -784.313477    0.097900  -904.313232     0.0000  119.999756       19.999883
1    -684.315918    -704.313477   943.024170  -684.315918  219.997314  -704.313477     0.0000   19.997559       19.997441
2    -584.315918    -604.880859   943.024170  -584.315918  119.997559  -604.880859     0.0000   20.564941       19.997441
3    -484.315859    -505.875859   943.024170  -484.315859  120.565000  -505.875859     0.0000   21.560000       19.997500
4    -384.310859    -404.313477   943.024170  -384.310859  121.565000  -404.313477     0.0025   20.000117       20.000000
5    -384.310859    -385.875977  1023.024170  -384.310859    0.010000  -385.875977     0.0025    1.562617        0.000000
6    -384.310859    -384.313359  1121.461670  -384.310859    1.010000  -384.313359     0.0025    0.000000       -1.562500
7    -382.300859    -382.750859  1219.899170  -382.300859    2.010000  -382.750859     0.0025    0.447500       -1.115000
8    -379.738359    -381.188232  1318.336426  -379.738359    3.010000  -381.188232     0.0025    1.447373       -0.115244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:38:26]  --------------------------------------------------------------------------------
[08/30 10:38:26]  Iteration: 22 (1 solution, 20 counterexamples)
[08/30 10:38:27]  Generator returned sat in 0.486840 secs.
[08/30 10:38:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:27]  Improved gap from 0.0487060546875 to 0
[08/30 10:38:28]  Improved number of small numbers from 58 to 100 out of a max of 100
[08/30 10:38:28]  Verifer returned sat in 0.293244 secs.
[08/30 10:38:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -784.313477    -904.313232   943.024170  -784.313477    0.097900  -904.313232        0.0  119.999756       19.999756
1    -704.313477    -704.313477   943.024170  -704.313477  199.999756  -704.313477        0.0    0.000000       -0.000244
2    -584.362061    -704.313232   943.024170  -584.362061  119.951416  -704.313232        0.0  119.951172       19.951172
3    -504.313232    -504.362061   943.024170  -504.313232  200.000000  -504.362061        0.0    0.048828        0.000000
4    -503.362061    -503.362061  1042.072754  -503.362061    1.000000  -503.362061        0.0    0.000000       -0.000244
5    -502.362061    -502.410889  1141.072998  -502.362061    1.000000  -502.410889        0.0    0.048828        0.000000
6    -501.410889    -502.362061  1240.121582  -501.410889    1.000000  -502.362061        0.0    0.951172       -0.000244
7    -501.362061    -501.410645  1340.072998  -501.362061    1.000000  -501.410645        0.0    0.048584        0.000000
8    -500.410645    -501.362061  1439.121338  -500.410645    1.000000  -501.362061        0.0    0.951416       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:38:28]  --------------------------------------------------------------------------------
[08/30 10:38:28]  Iteration: 23 (1 solution, 21 counterexamples)
[08/30 10:38:29]  Generator returned sat in 0.377155 secs.
[08/30 10:38:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:38:29]  Improved gap from 0.0 to 26.5625
[08/30 10:38:29]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:38:29]  Verifer returned sat in 0.514035 secs.
[08/30 10:38:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -655.578857    -775.578857   922.791504  -655.578857    0.097900  -775.578857    0.00000  120.000000        20.00000
1    -555.547607    -575.578857   922.791504  -555.547607  220.031250  -575.578857    0.03125   20.000000        20.00000
2    -475.516357    -488.375732   922.791504  -475.516357  100.031250  -488.375732    0.03125   12.828125         0.03125
3    -475.516357    -475.578857   996.229004  -475.516357   12.796875  -475.578857    0.03125    0.031250       -26.53125
4    -448.953857    -449.016357  1042.072754  -448.953857   26.593750  -449.016357    0.03125    0.031250       -54.12500
5    -394.797607    -394.860107  1115.510254  -394.797607   54.187500  -394.860107    0.03125    0.031250       -26.53125
6    -285.453857    -368.297607  1115.510254  -285.453857  109.375000  -368.297607    0.03125   82.812500       -17.18750
7    -148.516357    -168.297607  1115.510254  -148.516357  219.750000  -168.297607    0.03125   19.750000        19.75000
8     272.233643    -168.297607  1115.510254   272.233643  440.500000  -168.297607  320.53125  120.000000        20.00000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=641/2.[0m
[08/30 10:38:29]  --------------------------------------------------------------------------------
[08/30 10:38:29]  Iteration: 24 (1 solution, 22 counterexamples)
[08/30 10:38:32]  Generator returned sat in 2.360307 secs.
[08/30 10:38:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:33]  Improved gap from 25.751953125 to 26.5625
[08/30 10:38:34]  Improved number of small numbers from 30 to 48 out of a max of 100
[08/30 10:38:34]  Verifer returned sat in 1.681805 secs.
[08/30 10:38:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1084.787354   -1204.787109   922.791504 -1084.787354    0.097656 -1204.787109    0.000000  119.999756       19.999969
1    -984.811523   -1004.787323   922.791504  -984.811523  219.975586 -1004.787323    0.000000   19.975799       19.975799
2    -884.763031    -904.787354   922.791504  -884.763031  120.024292  -904.787354    0.024292   20.000031       20.000000
3    -884.763031    -884.835938   976.277588  -884.763031   13.293396  -884.835938    0.024292    0.048615      -26.513916
4    -858.224854    -858.273407  1024.086670  -858.224854   26.586792  -858.273407    0.024292    0.024261      -52.166657
5    -805.075531    -805.124115  1024.086670  -805.075531   53.173584  -805.124115    0.024292    0.024292      -99.017334
6    -698.752655    -698.801239  1024.086792  -698.752655  106.347168  -698.801239    0.024292    0.024292      -92.694336
7    -486.082611    -523.712168  1024.086792  -486.082611  212.694336  -523.712168    0.024292   37.605265       19.975708
8     -98.299204    -406.082764  1024.086792   -98.299204  425.388672  -406.082764  287.783407   20.000153       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=220999/768.[0m
[08/30 10:38:34]  --------------------------------------------------------------------------------
[08/30 10:38:34]  Iteration: 25 (1 solution, 23 counterexamples)
[08/30 10:38:35]  Generator returned sat in 0.316008 secs.
[08/30 10:38:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:35]  Improved gap from 58.00639738859954 to 100
[08/30 10:38:36]  Improved number of small numbers from 61 to 63 out of a max of 100
[08/30 10:38:36]  Verifer returned sat in 0.940120 secs.
[08/30 10:38:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1084.787354   -1204.787109  922.791504 -1084.787354    0.097656 -1204.787109    0.000000  119.999756       19.999969
1    -984.811768   -1004.787323  922.791504  -984.811768  219.975342 -1004.787323    0.000000   19.975555       19.975555
2    -884.752661    -904.787323  922.791504  -884.752661  120.034662  -904.787323    0.034662   20.000000       20.000000
3    -862.608178    -862.759807  922.791504  -862.608178   42.144482  -862.759807    0.034662    0.116967      -57.855518
4    -799.508422    -799.577746  922.791504  -799.508422   63.216723  -799.577746    0.034662    0.034662      -94.755761
5    -704.717999    -704.787323  922.791504  -704.717999   94.825085  -704.787323    0.034662    0.034662      -99.965338
6    -562.515033    -604.787323  922.791504  -562.515033  142.237628  -604.787323    0.034662   42.237628      -57.762372
7    -391.396219    -404.787323  922.791504  -391.396219  213.356441  -404.787323    0.034662   13.356441       13.356441
8     -84.717999    -404.787109  922.791504   -84.717999  320.034662  -404.787109  200.069324  119.999787       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=115420/577.[0m
[08/30 10:38:36]  --------------------------------------------------------------------------------
[08/30 10:38:36]  Iteration: 26 (1 solution, 24 counterexamples)
[08/30 10:38:39]  Generator returned sat in 2.863328 secs.
[08/30 10:38:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:39]  Improved gap from 0.0484619140625 to 100
[08/30 10:38:40]  Improved number of small numbers from 35 to 100 out of a max of 100
[08/30 10:38:40]  Verifer returned sat in 0.465181 secs.
[08/30 10:38:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1445.363037   -1465.363037  1283.367188 -1445.363037    0.097412 -1465.363037    0.000000   20.000000       20.000000
1   -1365.314453   -1445.110596  1283.367188 -1365.314453  100.048584 -1445.110596    0.000000   79.796143        0.048584
2   -1365.314453   -1365.362793  1283.367188 -1365.314453    0.048584 -1365.362793    0.000000    0.048340      -99.951416
3   -1145.314453   -1265.362793  1283.367188 -1145.314453  220.048340 -1265.362793    0.048584  119.999756       20.000000
4   -1145.314453   -1165.363037  1283.367188 -1145.314453    1.000000 -1165.363037    0.048584   20.000000      -80.000000
5   -1024.940674   -1025.037842  1283.367188 -1024.940674  140.373779 -1025.037842    0.048584    0.048584      -59.626221
6    -645.266113    -965.362793  1283.367188  -645.266113  379.723145  -965.362793  200.096924  119.999756       20.000000
7    -645.266113    -865.363037  1283.367188  -645.266113    1.000000  -865.363037  200.096924   20.000000      -80.000000
8    -514.766113    -765.362793  1283.367188  -514.766113  150.500000  -765.362793  200.096924   50.499756      -49.500000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=409699/2048.[0m
[08/30 10:38:40]  --------------------------------------------------------------------------------
[08/30 10:38:40]  Iteration: 27 (1 solution, 25 counterexamples)
[08/30 10:38:41]  Generator returned sat in 0.242337 secs.
[08/30 10:38:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:41]  Improved gap from 0.0 to 100
[08/30 10:38:41]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:38:41]  Verifer returned sat in 0.457651 secs.
[08/30 10:38:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -1454.186279   -1574.186279  1283.367188 -1454.186279    0.097412 -1574.186279    0.00000  120.00000        20.00000
1   -1454.186279   -1474.186279  1283.367188 -1454.186279    0.048340 -1474.186279    0.00000   20.00000       -80.00000
2   -1254.137939   -1274.186279  1283.367188 -1254.137939  220.048340 -1274.186279    0.04834   20.00000        20.00000
3   -1116.041260   -1274.186279  1283.367188 -1116.041260  158.096680 -1274.186279   38.14502  120.00000        20.00000
4   -1116.041260   -1174.186279  1283.367188 -1116.041260   80.048340 -1174.186279   38.14502   20.00000       -80.00000
5    -947.017090    -985.210449  1283.367188  -947.017090  189.024170  -985.210449   38.14502    0.04834       -10.97583
6    -709.065430    -874.186279  1283.367188  -709.065430  238.000000  -874.186279  145.12085   20.00000        20.00000
7    -609.065430    -774.186279  1283.367188  -609.065430  120.000000  -774.186279  145.12085   20.00000        20.00000
8    -370.065430    -774.186279  1283.367188  -370.065430  259.000000  -774.186279  284.12085  120.00000        20.00000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1007517/4096.[0m
[08/30 10:38:41]  --------------------------------------------------------------------------------
[08/30 10:38:41]  Iteration: 28 (1 solution, 26 counterexamples)
[08/30 10:38:43]  Generator returned sat in 0.683584 secs.
[08/30 10:38:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:43]  Improved gap from 16.14501953125 to 100
[08/30 10:38:43]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:38:43]  Verifer returned sat in 0.211596 secs.
[08/30 10:38:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -1175.316162   -1199.219482  1283.366943 -1175.316162    0.097412 -1199.219482    0.00000   23.90332        20.00000
1   -1095.267822   -1095.316162  1283.366943 -1095.267822  103.951660 -1095.316162    0.00000    0.04834         0.04834
2    -975.267822    -995.316162  1283.366943  -975.267822  120.048340  -995.316162    0.04834   20.00000        20.00000
3    -975.267822    -995.316162  1283.366943  -975.267822   20.000000  -995.316162    0.04834   20.00000       -80.00000
4    -874.316162    -895.316162  1283.366943  -874.316162  120.951660  -895.316162    0.04834   20.95166       -79.04834
5    -675.316162    -695.316162  1283.366943  -675.316162  219.951660  -695.316162    0.04834   19.95166        19.95166
6    -326.316162    -695.316162  1283.366943  -326.316162  368.951660  -695.316162  249.00000  120.00000        20.00000
7    -326.316162    -595.316162  1283.366943  -326.316162    1.000000  -595.316162  249.00000   20.00000       -80.00000
8    -196.316162    -495.316162  1283.366943  -196.316162  150.000000  -495.316162  249.00000   50.00000       -50.00000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=509853/2048.[0m
[08/30 10:38:43]  --------------------------------------------------------------------------------
[08/30 10:38:43]  Iteration: 29 (1 solution, 27 counterexamples)
[08/30 10:38:44]  Generator returned sat in 0.219079 secs.
[08/30 10:38:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:44]  Improved gap from 0.0025 to 0
[08/30 10:38:44]  Improved number of small numbers from 63 to 66 out of a max of 100
[08/30 10:38:44]  Verifer returned sat in 0.579325 secs.
[08/30 10:38:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -1175.316650   -1199.219971  1283.366943 -1175.316650    0.097168 -1199.219971    0.00000  23.903320       19.999756
1   -1095.268311   -1095.316406  1283.366943 -1095.268311  103.951660 -1095.316406    0.00000   0.048096        0.048096
2    -975.268066    -995.316406  1283.366943  -975.268066  120.048340  -995.316406    0.04834  20.000000       20.000000
3    -757.263066    -895.316406  1283.366943  -757.263066  238.005000  -895.316406  118.05334  20.000000       20.000000
4    -657.260566    -795.316406  1283.366943  -657.260566  120.002500  -795.316406  118.05584  20.000000       20.000000
5    -616.259316    -734.322656  1322.365693  -616.259316   61.001250  -734.322656  118.05584   0.007500        0.000000
6    -616.256816    -734.315156  1422.358398  -616.256816    0.010000  -734.315156  118.05584   0.002500       -0.004795
7    -616.249316    -734.307656  1522.355469  -616.249316    0.010000  -734.307656  118.05584   0.002500       -0.000225
8    -616.241816    -734.297852  1522.355713  -616.241816    0.010000  -734.297852  118.05584   0.000195      -99.992480
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:38:45]  --------------------------------------------------------------------------------
[08/30 10:38:45]  Iteration: 30 (1 solution, 28 counterexamples)
[08/30 10:38:46]  Generator returned sat in 0.794744 secs.
[08/30 10:38:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:46]  Improved gap from 0.0 to 21.875
[08/30 10:38:46]  Improved number of small numbers from 30 to 100 out of a max of 100
[08/30 10:38:46]  Verifer returned sat in 0.600454 secs.
[08/30 10:38:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1344.921631   -1364.921631  1225.952637 -1344.921631    0.097168 -1364.921631    0.00000   20.000000       20.000000
1   -1244.969971   -1364.921387  1225.952637 -1244.969971  119.951660 -1364.921387    0.00000  119.951416       19.951660
2   -1144.873291   -1171.844971  1225.952637 -1144.873291  220.048096 -1171.844971    0.04834   26.923340       20.000000
3   -1144.873291   -1164.921631  1304.077637 -1144.873291   26.875000 -1164.921631    0.04834   20.000000       -1.875000
4   -1138.998291   -1139.094727  1378.250732 -1138.998291   25.875000 -1139.094727    0.04834    0.048096      -21.826904
5   -1114.171387   -1117.219727  1454.924072 -1114.171387   24.875000 -1117.219727    0.04834    3.000000      -20.326660
6   -1093.296387   -1093.893066  1533.049072 -1093.296387   23.875000 -1093.893066    0.04834    0.548340      -21.326660
7   -1070.969727   -1071.018066  1610.174072 -1070.969727   22.875000 -1071.018066    0.04834    0.000000      -21.875000
8   -1049.094727   -1049.143066  1688.299072 -1049.094727   21.875000 -1049.143066    0.04834    0.000000      -21.875000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:38:47]  --------------------------------------------------------------------------------
[08/30 10:38:47]  Iteration: 31 (1 solution, 29 counterexamples)
[08/30 10:38:48]  Generator returned sat in 0.702599 secs.
[08/30 10:38:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:48]  Improved gap from 0.0025 to 100
[08/30 10:38:48]  Improved number of small numbers from 41 to 100 out of a max of 100
[08/30 10:38:48]  Verifer returned sat in 0.332787 secs.
[08/30 10:38:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1344.897705   -1402.825439  1406.004883 -1344.897705    0.097168 -1402.825439    0.000000   57.927734        0.023926
1   -1344.897705   -1344.921631  1406.004883 -1344.897705   57.903320 -1344.921631    0.000000    0.023926      -99.976074
2   -1244.897705   -1244.921631  1406.004883 -1244.897705  100.023926 -1244.921631    0.000000    0.023926      -99.976074
3   -1024.897461   -1084.206787  1406.004883 -1024.897461  220.024170 -1084.206787    0.024170   59.285156       20.000000
4    -924.873291    -963.540283  1406.004883  -924.873291  159.309326  -963.540283    0.048340   38.618652       20.000000
5    -772.801270    -844.921631  1406.004883  -772.801270  190.690674  -844.921631   52.120361   20.000000       20.000000
6    -592.801270    -758.921631  1406.004883  -592.801270  200.000000  -758.921631  132.120361   34.000000       20.000000
7    -464.158691    -644.921631  1406.004883  -464.158691  162.642578  -644.921631  160.762939   20.000000       20.000000
8    -324.849365    -644.921631  1406.004883  -324.849365  159.309326  -644.921631  200.072266  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=409649/2048.[0m
[08/30 10:38:49]  --------------------------------------------------------------------------------
[08/30 10:38:49]  Iteration: 32 (1 solution, 30 counterexamples)
[08/30 10:38:49]  Generator returned sat in 0.161841 secs.
[08/30 10:38:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:49]  Improved number of small numbers from 95 to 99 out of a max of 99
[08/30 10:38:49]  Verifer returned sat in 0.189096 secs.
[08/30 10:38:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1344.897705   -1383.837646  1406.004639 -1344.897705    0.097168 -1383.837646    0.000000   38.939941        0.023926
1   -1344.897705   -1344.921631  1406.004639 -1344.897705   38.927734 -1344.921631    0.000000    0.023926      -99.976074
2   -1244.897949   -1244.921631  1406.004639 -1244.897949  100.023682 -1244.921631    0.000000    0.023682      -99.976318
3   -1024.897461   -1077.218994  1406.004639 -1024.897461  220.024170 -1077.218994    0.024170   52.297363       20.000000
4    -924.885498    -951.540283  1406.004639  -924.885498  152.309326  -951.540283    0.036133   26.618652       20.000000
5    -755.813477    -844.921631  1406.004639  -755.813477  195.690674  -844.921631   69.108154   20.000000       20.000000
6    -576.813477    -761.933838  1406.004639  -576.813477  199.000000  -761.933838  148.108154   37.012207       20.000000
7    -457.183105    -644.921631  1406.004639  -457.183105  156.642578  -644.921631  167.738525   20.000000       20.000000
8    -324.873779    -644.921631  1406.004639  -324.873779  152.309326  -644.921631  200.047852  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=51203/256.[0m
[08/30 10:38:50]  --------------------------------------------------------------------------------
[08/30 10:38:50]  Iteration: 33 (1 solution, 31 counterexamples)
[08/30 10:38:50]  Generator returned sat in 0.134303 secs.
[08/30 10:38:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:50]  Improved gap from 0.00125 to 0
[08/30 10:38:51]  Improved number of small numbers from 57 to 72 out of a max of 100
[08/30 10:38:51]  Verifer returned sat in 0.594003 secs.
[08/30 10:38:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -2321.758545   -2321.760986  1096.011963 -2321.758545    0.096924 -2321.760986    0.00000   0.002441        0.001240
1   -2321.758545   -2321.759766  1096.012139 -2321.758545    0.001250 -2321.759766    0.00000   0.001221      -99.998584
2   -2221.758545   -2221.759961  1096.012139 -2221.758545  100.001221 -2221.759961    0.00000   0.001416      -99.998584
3   -1855.804961   -2083.736211  1096.012139 -1855.804961  365.955000 -2083.736211  145.95500  81.976250       20.000000
4   -1755.803711   -1921.759961  1096.012139 -1755.803711  181.977500 -1921.759961  145.95625  20.000000       20.000000
5   -1685.814961   -1831.779961  1106.023389 -1685.814961   89.988750 -1831.779961  145.95625   0.008750        0.000000
6   -1685.813711   -1831.771211  1206.014648 -1685.813711    0.010000 -1831.771211  145.95625   0.001250       -0.007490
7   -1685.804961   -1831.762461  1306.013184 -1685.804961    0.010000 -1831.762461  145.95625   0.001250       -0.000205
8   -1685.796211   -1831.760986  1406.004639 -1685.796211    0.010000 -1831.760986  145.95625   0.008525        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:38:51]  --------------------------------------------------------------------------------
[08/30 10:38:51]  Iteration: 34 (1 solution, 32 counterexamples)
[08/30 10:38:53]  Generator returned sat in 1.502724 secs.
[08/30 10:38:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:53]  Improved gap from 56.0478515625 to 100
[08/30 10:38:53]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:38:53]  Verifer returned sat in 0.285463 secs.
[08/30 10:38:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2401.573730   -2421.573730  1096.012207 -2401.573730    0.096924 -2421.573730    0.000000   20.000000       20.000000
1   -2401.573730   -2421.573730  1096.012207 -2401.573730    0.047852 -2421.573730    0.000000   20.000000      -80.000000
2   -2201.525879   -2221.573730  1096.012207 -2201.525879  220.047852 -2221.573730    0.047852   20.000000       20.000000
3   -2201.525879   -2211.097656  1096.012207 -2201.525879   20.000000 -2211.097656    0.047852    9.523926      -80.000000
4   -2001.573730   -2121.573730  1096.012207 -2001.573730  209.476074 -2121.573730    0.047852  119.952148       19.952148
5   -1822.525879   -1921.573730  1096.012207 -1822.525879  299.000000 -1921.573730   79.047852   20.000000       20.000000
6   -1694.025879   -1921.573486  1096.012207 -1694.025879  148.500000 -1921.573486  107.547852  119.999756       20.000000
7   -1694.025879   -1801.621582  1096.012207 -1694.025879   73.250000 -1801.621582  107.547852    0.047852      -80.000000
8   -1375.121582   -1721.573486  1096.012207 -1375.121582  318.952148 -1721.573486  226.452148  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=115919/512.[0m
[08/30 10:38:54]  --------------------------------------------------------------------------------
[08/30 10:38:54]  Iteration: 35 (1 solution, 33 counterexamples)
[08/30 10:38:55]  Generator returned sat in 0.332307 secs.
[08/30 10:38:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:38:55]  Improved gap from 0.0478515625 to 100
[08/30 10:38:56]  Improved number of small numbers from 59 to 73 out of a max of 100
[08/30 10:38:56]  Verifer returned sat in 1.091992 secs.
[08/30 10:38:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2843.602295   -2863.602220  1096.012207 -2843.602295    0.096924 -2863.602220    0.000000   19.999925       19.999925
1   -2843.602295   -2863.602051  1096.012207 -2843.602295   19.952148 -2863.602051    0.000000   19.999756      -80.000075
2   -2663.602051   -2763.602220  1096.012207 -2663.602051  200.000000 -2763.602220    0.000000  100.000169        0.000169
3   -2575.362962   -2645.650072  1096.012207 -2575.362962  188.239258 -2645.650072    0.000000   70.287109      -11.760742
4   -2443.554368   -2463.602220  1096.012207 -2443.554368  202.095703 -2463.602220    0.047852   20.000000       20.000000
5   -2363.506517   -2363.602220  1096.012207 -2363.506517  100.047852 -2363.602220    0.047852    0.047852        0.047852
6   -2114.530443   -2267.162109  1096.012207 -2114.530443  249.023926 -2267.162109  129.071777   23.559889       20.000000
7   -2014.578369   -2163.602220  1096.012207 -2014.578369  123.511963 -2163.602220  129.071777   19.952074       19.952074
8   -1823.774461   -2163.602051  1096.012207 -1823.774461  210.755981 -2163.602051  219.827759  119.999831       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=1800437/8192.[0m
[08/30 10:38:56]  --------------------------------------------------------------------------------
[08/30 10:38:56]  Iteration: 36 (1 solution, 34 counterexamples)
[08/30 10:38:57]  Generator returned sat in 0.673709 secs.
[08/30 10:38:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:38:57]  Improved gap from 0.0025 to 0
[08/30 10:38:58]  Improved number of small numbers from 55 to 68 out of a max of 100
[08/30 10:38:58]  Verifer returned sat in 0.653957 secs.
[08/30 10:38:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -2649.820557   -2649.822998   912.906006 -2649.820557    0.09668 -2649.822998    0.00000   0.002441        0.001436
1   -2649.820557   -2649.821943   912.906006 -2649.820557    0.00125 -2649.821943    0.00000   0.001387      -99.998564
2   -2549.820693   -2549.821943  1012.904707 -2549.820693  100.00125 -2549.821943    0.00000   0.001250        0.000000
3   -2429.819443   -2489.822021  1012.904707 -2429.819443  120.00250 -2489.822021    0.00125  60.001328       20.000000
4   -2429.819443   -2429.821943  1092.904707 -2429.819443   60.00125 -2429.821943    0.00125   0.001250        0.000000
5   -2429.810693   -2429.813193  1192.895957 -2429.810693    0.01000 -2429.813193    0.00125   0.001250        0.000000
6   -2429.801943   -2429.811943  1292.887207 -2429.801943    0.01000 -2429.811943    0.00125   0.008750        0.000000
7   -2429.800693   -2429.803193  1392.885957 -2429.800693    0.01000 -2429.803193    0.00125   0.001250        0.000000
8   -2429.791943   -2429.801758  1492.877197 -2429.791943    0.01000 -2429.801758    0.00125   0.008564       -0.000010
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:38:58]  --------------------------------------------------------------------------------
[08/30 10:38:58]  Iteration: 37 (1 solution, 35 counterexamples)
[08/30 10:39:00]  Generator returned sat in 1.779237 secs.
[08/30 10:39:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:39:01]  Improved gap from 0.0 to 100
[08/30 10:39:01]  Improved number of small numbers from 54 to 74 out of a max of 100
[08/30 10:39:01]  Verifer returned sat in 0.917828 secs.
[08/30 10:39:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2614.622803   -2614.623047  1192.895957 -2614.622803    0.096436 -2614.623047    0.000000    0.000244        0.000189
1   -2614.575195   -2614.622992  1192.895957 -2614.575195    0.047852 -2614.622992    0.000000    0.047796      -99.952204
2   -2421.112900   -2421.160645  1192.895957 -2421.112900  193.510091 -2421.160645    0.000000    0.047744       -6.489909
3   -2294.670898   -2393.685059  1192.895957 -2294.670898  126.489746 -2393.685059    0.000000   99.014160       19.952093
4   -2220.971191   -2221.019150  1192.895957 -2220.971191  172.713867 -2221.019150    0.000000    0.047959       -6.348200
5   -1938.860296   -2114.622992  1192.895957 -1938.860296  282.158854 -2114.622992  155.762695   20.000000       20.000000
6   -1817.780869   -2014.623047  1192.895957 -1817.780869  141.079427 -2014.623047  176.842122   20.000055       20.000000
7   -1767.241211   -1944.131130  1192.895957 -1767.241211   70.539714 -1944.131130  176.842122    0.047796      -29.460342
8   -1594.575140   -1914.622803  1192.895957 -1594.575140  172.713867 -1914.622803  200.047852  119.999811       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=204849/1024.[0m
[08/30 10:39:02]  --------------------------------------------------------------------------------
[08/30 10:39:02]  Iteration: 38 (1 solution, 36 counterexamples)
[08/30 10:39:05]  Generator returned sat in 2.422372 secs.
[08/30 10:39:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:39:05]  Improved gap from 0.0477294921875 to 21.875
[08/30 10:39:05]  Improved number of small numbers from 49 to 100 out of a max of 100
[08/30 10:39:05]  Verifer returned sat in 0.399921 secs.
[08/30 10:39:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2160.210205   -2280.210205  1192.895996 -2160.210205    0.096436 -2280.210205        0.0  120.000000       20.000000
1   -2060.257812   -2180.209961  1192.895996 -2060.257812  219.952393 -2180.209961        0.0  119.952148       19.952393
2   -2058.335205   -2080.209961  1271.020752 -2058.335205  121.874756 -2080.209961        0.0   21.874756       -0.000244
3   -2058.287109   -2058.334961  1349.145752 -2058.287109   21.922852 -2058.334961        0.0    0.047852      -21.827148
4   -2036.412109   -2036.459961  1427.270752 -2036.412109   21.922852 -2036.459961        0.0    0.047852      -21.827148
5   -2014.537109   -2014.584961  1505.395752 -2014.537109   21.922852 -2014.584961        0.0    0.047852      -21.827148
6   -1992.662109   -1992.709961  1583.520752 -1992.662109   21.922852 -1992.709961        0.0    0.047852      -21.827148
7   -1970.787109   -1970.834961  1661.645752 -1970.787109   21.922852 -1970.834961        0.0    0.047852      -21.827148
8   -1948.912109   -1948.959961  1739.770752 -1948.912109   21.922852 -1948.959961        0.0    0.047852      -21.827148
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:39:05]  --------------------------------------------------------------------------------
[08/30 10:39:05]  Iteration: 39 (1 solution, 37 counterexamples)
[08/30 10:39:08]  Generator returned sat in 1.979349 secs.
[08/30 10:39:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:39:08]  Improved gap from 0.00125 to 100
[08/30 10:39:09]  Improved number of small numbers from 61 to 71 out of a max of 100
[08/30 10:39:09]  Verifer returned sat in 0.661337 secs.
[08/30 10:39:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2572.662354   -2572.663330  1485.34915 -2572.662354    0.096191 -2572.663330    0.000000    0.000977      -99.998994
1   -2372.663574   -2472.663359  1485.34915 -2372.663574  199.999756 -2472.663359    0.000000   99.999785       -0.000215
2   -2252.662109   -2372.663359  1485.34915 -2252.662109  220.001250 -2372.663359    0.001250  120.000000       20.000000
3   -2152.660859   -2172.663574  1485.34915 -2152.660859  220.001250 -2172.663574    0.002500   20.000215       20.000000
4   -2152.660859   -2152.664609  1485.34915 -2152.660859    0.010000 -2152.664609    0.002500    0.001250      -80.000000
5   -1992.652734   -1992.656484  1485.34915 -1992.652734  160.009375 -1992.656484    0.002500    0.001250      -19.991875
6   -1642.641172   -1972.663330  1485.34915 -1642.641172  350.012812 -1972.663330  210.022188  119.999971       20.000000
7   -1642.641172   -1872.663359  1485.34915 -1642.641172    0.010000 -1872.663359  210.022188   20.000000      -80.000000
8   -1522.630547   -1772.663330  1485.34915 -1522.630547  140.010625 -1772.663330  210.022188   40.010596      -59.989375
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=672063/3200.[0m
[08/30 10:39:09]  --------------------------------------------------------------------------------
[08/30 10:39:09]  Iteration: 40 (1 solution, 38 counterexamples)
[08/30 10:39:11]  Generator returned sat in 1.886567 secs.
[08/30 10:39:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:12]  Improved number of small numbers from 18 to 99 out of a max of 99
[08/30 10:39:12]  Verifer returned sat in 0.298566 secs.
[08/30 10:39:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2565.617432   -2565.641113  1478.326904 -2565.617432    0.096191 -2565.641113    0.000000    0.023682      -99.976318
1   -2465.617432   -2465.641113  1478.326904 -2465.617432  100.023682 -2465.641113    0.000000    0.023682      -99.976318
2   -2245.617188   -2332.299805  1478.326904 -2245.617188  220.023926 -2332.299805    0.023926   86.658691       20.000000
3   -2145.593506   -2231.347412  1478.326904 -2145.593506  186.682373 -2231.347412    0.047607   85.706299       20.000000
4   -2045.617432   -2152.323486  1478.326904 -2045.617432  185.682373 -2152.323486    0.047607  106.658447       19.976074
5   -1965.593506   -1965.664795  1478.326904 -1965.593506  186.682373 -1965.664795    0.047607    0.023682        0.000000
6   -1777.934814   -1865.641113  1478.326904 -1777.934814  187.682373 -1865.641113   67.706299   20.000000       20.000000
7   -1611.252441   -1765.641113  1478.326904 -1611.252441  186.682373 -1765.641113  134.388672   20.000000       20.000000
8   -1445.570068   -1765.641113  1478.326904 -1445.570068  185.682373 -1765.641113  200.071045  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=25603/128.[0m
[08/30 10:39:12]  --------------------------------------------------------------------------------
[08/30 10:39:12]  Iteration: 41 (1 solution, 39 counterexamples)
[08/30 10:39:14]  Generator returned sat in 1.796728 secs.
[08/30 10:39:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:14]  Verifer returned unsat in 0.076118 secs.
[08/30 10:39:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:14]  --------------------------------------------------------------------------------
[08/30 10:39:14]  Iteration: 42 (2 solution, 39 counterexamples)
[08/30 10:39:15]  Generator returned sat in 0.176842 secs.
[08/30 10:39:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:15]  Verifer returned unsat in 0.084539 secs.
[08/30 10:39:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:15]  --------------------------------------------------------------------------------
[08/30 10:39:15]  Iteration: 43 (3 solution, 39 counterexamples)
[08/30 10:39:16]  Generator returned sat in 0.417400 secs.
[08/30 10:39:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:16]  Improved gap from 41.132161458333336 to 100
[08/30 10:39:17]  Improved number of small numbers from 82 to 82 out of a max of 100
[08/30 10:39:17]  Verifer returned sat in 0.287915 secs.
[08/30 10:39:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -2256.475342   -2356.522705  1478.326904 -2256.475342    0.096191 -2356.522705    0.000000  100.047363        0.047363
1   -2256.475342   -2256.522705  1478.326904 -2256.475342  100.047363 -2256.522705    0.000000    0.047363      -99.952637
2   -2036.570068   -2057.955672  1478.326904 -2036.570068  219.952637 -2057.955672    0.000000   21.385604       19.952637
3   -2016.113176   -2016.160539  1478.326904 -2016.113176   41.842496 -2016.160539    0.000000    0.047363      -59.590471
4   -1952.396795   -1953.120958  1478.326904 -1952.396795   63.763744 -1953.120958    0.000000    0.724163      -95.874090
5   -1856.475342   -1856.522705  1478.326904 -1856.475342   96.645616 -1856.522705    0.000000    0.047363      -99.952637
6   -1710.554281   -1756.522705  1478.326904 -1710.554281  145.968424 -1756.522705    0.000000   45.968424      -54.031576
7   -1536.570068   -1556.522705  1478.326904 -1536.570068  219.952637 -1556.522705    0.000000   19.952637       19.952637
8   -1225.593750   -1556.522705  1478.326904 -1225.593750  330.928955 -1556.522705  210.928955  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=1, loss_amount=863965/4096.[0m
[08/30 10:39:17]  --------------------------------------------------------------------------------
[08/30 10:39:17]  Iteration: 44 (3 solution, 40 counterexamples)
[08/30 10:39:18]  Generator returned unsat in 0.831489 secs.
[08/30 10:39:18]  [96mNo more solutions found[0m
[08/30 10:39:18]  Final solutions:
[08/30 10:39:18]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:18]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:18]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:39:18]  Took 78.720416 secs.
