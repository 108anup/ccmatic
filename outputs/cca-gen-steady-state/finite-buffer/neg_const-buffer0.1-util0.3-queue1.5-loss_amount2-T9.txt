[08/30 10:42:09]  --------------------------------------------------------------------------------
[08/30 10:42:09]  Iteration: 1 (0 solution, 0 counterexamples)
[08/30 10:42:09]  Generator returned sat in 0.004140 secs.
[08/30 10:42:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:09]  Improved gap from 0.1 to 100
[08/30 10:42:09]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:42:09]  Verifer returned sat in 0.267205 secs.
[08/30 10:42:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0         -179.9         -199.9     199.9       -179.9       0.1       -199.9        0.0     20.0            20.0
1         -179.9         -199.9     199.9       -179.9      19.9       -199.9        0.0     20.0           -80.0
2            0.1          -99.9     199.9          0.1     200.0        -99.9        0.0    100.0             0.0
3          120.2          100.1     199.9        120.2     220.1        100.1        0.1     20.0            20.0
4         1141.4          146.1     199.9       1141.4    1041.2        146.1      921.3     74.0            20.0
5         3842.8          231.1     199.9       3842.8    2775.4        231.1     3522.7     89.0            20.0
6         9967.6          300.1     199.9       9967.6    6213.8        300.1     9547.5    120.0            20.0
7        22676.2          400.1     199.9      22676.2   12828.6        400.1    22156.1    120.0            20.0
8        48722.4          500.1     199.9      48722.4   26166.2        500.1    48102.3    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=47181.[0m
[08/30 10:42:10]  --------------------------------------------------------------------------------
[08/30 10:42:10]  Iteration: 2 (0 solution, 1 counterexamples)
[08/30 10:42:10]  Generator returned sat in 0.024966 secs.
[08/30 10:42:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:10]  Improved gap from 0.0025 to 0
[08/30 10:42:10]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:42:10]  Verifer returned sat in 0.279022 secs.
[08/30 10:42:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0     8428.61625       35.13875 -135.13875   8428.61625    0.100098     35.13875  8293.4750  100.0025          0.0025
1     8428.61625      135.13875 -135.13875   8428.61625    0.002500    135.13875  8293.4750    0.0025        -99.9975
2     8628.61375      235.13875 -135.13875   8628.61375  200.000000    235.13875  8293.4750  100.0000          0.0000
3     8770.61875      435.13875 -135.13875   8770.61875  242.005000    435.13875  8315.4800   20.0000         20.0000
4     8870.62125      535.13875 -135.13875   8870.62125  120.002500    535.13875  8315.4825   20.0000         20.0000
5     8909.62250      594.13750  -94.14000   8909.62250   59.001250    594.13750  8315.4825    0.0025          0.0000
6     8909.63000      594.14000    5.85000   8909.63000    0.010000    594.14000  8315.4825    0.0075         -0.0025
7     8909.63250      594.15000  105.85000   8909.63250    0.010000    594.15000  8315.4825    0.0000          0.0000
8     8909.64250      594.15000  105.85000   8909.64250    0.010000    594.15000  8315.4825    0.0100        -99.9900
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:10]  --------------------------------------------------------------------------------
[08/30 10:42:10]  Iteration: 3 (0 solution, 2 counterexamples)
[08/30 10:42:10]  Generator returned sat in 0.053296 secs.
[08/30 10:42:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:11]  Improved gap from 0.0 to 0
[08/30 10:42:11]  Improved number of small numbers from 65 to 81 out of a max of 100
[08/30 10:42:11]  Verifer returned sat in 0.710128 secs.
[08/30 10:42:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8428.613525      15.138916   64.858643  8428.613525    0.099854    15.138916  8293.474854  119.999756       19.999854
1    8428.613525     115.138916   64.858643  8428.613525    0.002686   115.138916  8293.474854   19.999756      -80.000146
2    8528.628662     235.151123   64.858750  8528.628662  120.014893   235.151123  8293.474854    0.002686      -79.984902
3    8728.616211     415.138711   64.858750  8728.616211  199.990234   415.138711  8293.477500   20.000000       20.000000
4    8808.611328     515.131211   64.858887  8808.611328   99.995117   515.131211  8293.477500    0.002617       -0.004746
5    8808.618711     515.138711  164.856201  8808.618711    0.010000   515.138711  8293.477500    0.002500       -0.000049
6    8808.626211     515.146211  264.848633  8808.626211    0.010000   515.146211  8293.477500    0.002500       -0.000117
7    8808.633711     515.153711  364.833984  8808.633711    0.010000   515.153711  8293.477500    0.002500       -0.007266
8    8808.641211     515.163574  364.833984  8808.641211    0.010000   515.163574  8293.477500    0.000137      -99.999766
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:42:11]  --------------------------------------------------------------------------------
[08/30 10:42:11]  Iteration: 4 (0 solution, 3 counterexamples)
[08/30 10:42:11]  Generator returned sat in 0.010515 secs.
[08/30 10:42:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:12]  Improved gap from 0.0025 to 0
[08/30 10:42:12]  Improved number of small numbers from 38 to 48 out of a max of 100
[08/30 10:42:12]  Verifer returned sat in 0.644084 secs.
[08/30 10:42:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8328.611084     -66.858584   64.858643  8328.611084    0.099609   -66.858584  8275.469795  119.999873       19.999873
1    8428.613711     133.141357   64.858643  8428.613711  220.002500   133.141357  8275.472295   20.000059       20.000000
2    8428.613711     133.141416   64.858643  8428.613711   19.997500   133.141416  8275.472295   20.000000      -80.000000
3    8646.618711     333.141416   64.858643  8646.618711  238.005000   333.141416  8293.477295   20.000000       20.000000
4    8746.621211     392.137451   64.858643  8746.621211  120.002500   392.137451  8293.479795   61.003965       20.000000
5    8746.621211     453.129150  144.858643  8746.621211   61.001250   453.129150  8293.479795    0.012266        0.000000
6    8746.621211     453.141416  244.858398  8746.621211    0.010000   453.141416  8293.479795    0.000000       -0.000244
7    8746.631211     453.148916  344.841309  8746.631211    0.010000   453.148916  8293.479795    0.002500       -0.007334
8    8746.638711     453.158916  344.841309  8746.638711    0.010000   453.158916  8293.479795    0.000000      -99.999834
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:12]  --------------------------------------------------------------------------------
[08/30 10:42:12]  Iteration: 5 (0 solution, 4 counterexamples)
[08/30 10:42:13]  Generator returned sat in 0.053205 secs.
[08/30 10:42:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:13]  Improved gap from 20.0 to 100
[08/30 10:42:13]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/30 10:42:13]  Verifer returned sat in 0.467768 secs.
[08/30 10:42:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8199.001221    -196.421387  64.858643  8199.001221    0.099365  -196.421387  8275.422607  120.000000       20.000000
1    8299.051025     -96.421387  64.858643  8299.051025  220.049805   -96.421387  8275.472412  120.000000       20.000000
2    8379.050781       3.578613  64.858643  8379.050781  199.999756     3.578613  8275.472412   99.999756       -0.000244
3    8379.100586     103.578613  64.858643  8379.100586  100.049561   103.578613  8275.472412    0.049561      -99.950439
4    8530.051025     249.545410  64.858643  8530.051025  151.000000   249.545410  8275.472412    5.033203      -49.000000
5    8699.001221     349.611816  64.858643  8699.001221  173.983398   349.611816  8275.472412   73.916992       19.950195
6    8799.100830     503.578613  64.858643  8799.100830  174.016602   503.578613  8275.522217   20.000000       20.000000
7    9379.100830     503.578613  64.858643  9379.100830  600.000000   503.578613  8755.522217  120.000000       20.000000
8    9640.150635     603.578857  64.858643  9640.150635  381.049805   603.578857  8916.572021  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=328243/512.[0m
[08/30 10:42:13]  --------------------------------------------------------------------------------
[08/30 10:42:13]  Iteration: 6 (0 solution, 5 counterexamples)
[08/30 10:42:13]  Generator returned sat in 0.013971 secs.
[08/30 10:42:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:13]  Improved gap from 0.012420654296875 to 100
[08/30 10:42:14]  Improved number of small numbers from 86 to 94 out of a max of 100
[08/30 10:42:14]  Verifer returned sat in 0.357076 secs.
[08/30 10:42:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7637.100586    -131.921387  64.858643  7637.100586    0.099365  -131.921387  7713.522217   55.499756       19.999756
1    7717.150391       3.578613  64.858643  7717.150391  135.549561     3.578613  7713.522217    0.049561        0.049561
2    7817.100586       3.578613  64.858643  7817.100586   99.999756     3.578613  7713.522217   99.999756       -0.000244
3    7817.150391     103.578613  64.858643  7817.150391  100.049561   103.578613  7713.522217    0.049561      -99.950439
4    8289.100830     203.578613  64.858643  8289.100830  472.000000   203.578613  7965.522217  120.000000       20.000000
5    8469.100830     303.578613  64.858643  8469.100830  300.000000   303.578613  8045.522217  120.000000       20.000000
6    8799.100830     503.578613  64.858643  8799.100830  450.000000   503.578613  8275.522217   20.000000       20.000000
7    9379.100830     518.245280  64.858643  9379.100830  600.000000   518.245280  8755.522217  105.333333       20.000000
8    9745.767497     603.578857  64.858643  9745.767497  472.000000   603.578857  9022.188883  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=5, loss_amount=3170/3.[0m
[08/30 10:42:14]  --------------------------------------------------------------------------------
[08/30 10:42:14]  Iteration: 7 (0 solution, 6 counterexamples)
[08/30 10:42:14]  Generator returned sat in 0.132056 secs.
[08/30 10:42:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:15]  Improved number of small numbers from 54 to 56 out of a max of 99
[08/30 10:42:15]  Verifer returned sat in 0.746986 secs.
[08/30 10:42:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8431.628662    -126.719482  64.858398  8431.628662    0.099121  -126.719482  8508.050232   50.297913       19.999817
1    8531.529480       3.578613  64.858398  8531.529480  150.198730     3.578613  8508.050232   19.900635       19.900635
2    8631.529480       3.578613  64.858398  8631.529480  119.900635     3.578613  8508.050232  119.900635       19.900635
3    8731.728210     103.578613  64.858398  8731.728210  220.099365   103.578613  8508.149597  120.000000       20.000000
4    8835.926941     209.578613  64.858398  8835.926941  224.198730   209.578613  8512.348328  114.000000       20.000000
5    8936.026306     303.578613  64.858398  8936.026306  214.099365   303.578613  8512.447693  120.000000       20.000000
6    9072.075989     503.578613  64.858398  9072.075989  256.049683   503.578613  8548.497375   20.000000       20.000000
7    9379.100830     603.578613  64.858398  9379.100830  327.024841   603.578613  8755.522217   20.000000       20.000000
8    9718.613251     603.578613  64.858398  9718.613251  359.512421   603.578613  8995.034637  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=15816665/32768.[0m
[08/30 10:42:15]  --------------------------------------------------------------------------------
[08/30 10:42:15]  Iteration: 8 (0 solution, 7 counterexamples)
[08/30 10:42:16]  Generator returned sat in 0.363830 secs.
[08/30 10:42:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:16]  Improved gap from 0.0 to 7.8125
[08/30 10:42:16]  Improved number of small numbers from 65 to 100 out of a max of 100
[08/30 10:42:16]  Verifer returned sat in 0.388062 secs.
[08/30 10:42:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7659.155762     -75.622803  -15.092041  7659.155762    0.099121   -75.622803  7634.778809   99.999756       -0.000244
1    7659.205322      24.377197  -15.092041  7659.205322  100.049316    24.377197  7634.778809    0.049316      -99.950684
2    7879.205566     124.377197  -15.092041  7879.205566  220.049561   124.377197  7634.828369  120.000000       20.000000
3    8010.791504     318.633545  -15.092041  8010.791504  251.585938   318.633545  7666.414307   25.743652       20.000000
4    8110.840820     381.530273  -15.092041  8110.840820  125.792969   381.530273  7666.463623   62.846924       20.000000
5    8110.890381     432.120850   64.858398  8110.890381   62.896484   432.120850  7666.463623   12.305908        0.000000
6    8130.032715     455.756592  145.716064  8130.032715   31.448242   455.756592  7666.463623    7.812500        0.000000
7    8137.944336     463.569092  237.804443  8137.944336   15.724121   463.569092  7666.463623    7.911621        0.000000
8    8137.944336     471.480713  329.991943  8137.944336    7.862061   471.480713  7666.463623    0.000000       -7.812500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:17]  --------------------------------------------------------------------------------
[08/30 10:42:17]  Iteration: 9 (0 solution, 8 counterexamples)
[08/30 10:42:17]  Generator returned sat in 0.220761 secs.
[08/30 10:42:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:17]  Improved gap from 7.8125 to 7.8125
[08/30 10:42:18]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/30 10:42:18]  Verifer returned sat in 0.644162 secs.
[08/30 10:42:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8155.172607    -399.442627  181.752441  8155.172607    0.099121  -399.442627  8454.565918  100.049316        0.049316
1    8155.172852    -299.442627  181.752441  8155.172852  100.049561  -299.442627  8454.565918    0.049561      -99.950439
2    8255.172607    -199.442627  181.752441  8255.172607  100.049316  -199.442627  8454.565918    0.049316      -99.950684
3    8529.123291       0.557129  181.752441  8529.123291  274.000000     0.557129  8508.565918   20.000244       20.000000
4    8646.123047     100.557373  181.752441  8646.123047  137.000000   100.557373  8525.565674   20.000000       20.000000
5    8694.623047     135.757568  213.252441  8694.623047   68.500000   135.757568  8525.565674   33.299805        0.000000
6    8694.623047     169.057373  305.439941  8694.623047   33.250000   169.057373  8525.565674    0.000000       -7.812500
7    8710.248047     176.869873  397.627441  8710.248047   15.625000   176.869873  8525.565674    7.812500        0.000000
8    8710.248047     184.682373  489.814941  8710.248047    6.812500   184.682373  8525.565674    0.000000       -7.812500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:18]  --------------------------------------------------------------------------------
[08/30 10:42:18]  Iteration: 10 (0 solution, 9 counterexamples)
[08/30 10:42:18]  Generator returned sat in 0.302879 secs.
[08/30 10:42:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:18]  Improved gap from 0.0025 to 100
[08/30 10:42:19]  Improved number of small numbers from 96 to 100 out of a max of 100
[08/30 10:42:19]  Verifer returned sat in 0.286229 secs.
[08/30 10:42:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8229.073486    -265.541748  127.802002  8229.073486    0.099121  -265.541748  8454.565918   40.049316       19.999756
1    8309.073730    -151.541992  127.802002  8309.073730  120.049561  -151.541992  8454.565918    6.049805        0.000000
2    8391.073486     -63.541748  127.802002  8391.073486   88.049561   -63.541748  8454.565918    0.049316      -18.000244
3    8529.123291     -45.492188  127.802002  8529.123291  138.099121   -45.492188  8454.615479  120.000000       20.000000
4    8629.172852      61.507568  127.802002  8629.172852  220.049561    61.507568  8454.665039  113.000244       20.000000
5    8729.222168     155.507812  127.802002  8729.222168  213.049561   155.507812  8454.714355  119.000000       20.000000
6    8829.271729     277.983154  127.802002  8829.271729  219.049561   277.983154  8454.763916   96.524658       20.000000
7    9056.222412     454.507568  127.802002  9056.222412  323.475342   454.507568  8581.714600   20.000244       20.000000
8    9429.222168     454.507812  127.802002  9429.222168  393.000000   454.507812  8854.714355  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=819301/2048.[0m
[08/30 10:42:19]  --------------------------------------------------------------------------------
[08/30 10:42:19]  Iteration: 11 (0 solution, 10 counterexamples)
[08/30 10:42:19]  Generator returned sat in 0.178708 secs.
[08/30 10:42:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:19]  Improved gap from 0.0025 to 0
[08/30 10:42:20]  Improved number of small numbers from 34 to 42 out of a max of 100
[08/30 10:42:20]  Verifer returned sat in 0.971754 secs.
[08/30 10:42:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    8269.068359    -227.502432 -132.190498  8269.068359    0.098877  -227.502432  8454.565918  42.004873       19.999873
1    8369.070986    -105.497432 -132.190498  8369.070986  142.007500  -105.497432  8454.568418  20.000000       20.000000
2    8369.070986     -85.497432  -52.190498  8369.070986    0.002686   -85.497432  8454.568418   0.000000        0.000000
3    8489.073486      14.502568  -52.190498  8489.073486  120.002500    14.502568  8454.570918  20.000000       20.000000
4    8589.075986      55.169235  -52.190498  8589.075986  120.002500    55.169235  8454.573418  79.333333       20.000000
5    8589.075986     134.490234   27.809502  8589.075986   79.333333   134.490234  8454.573418   0.012334        0.000000
6    8589.075986     134.502568  127.802002  8589.075986    0.010000   134.502568  8454.573418   0.000000       -0.007500
7    8589.085986     134.510068  227.792236  8589.085986    0.010000   134.510068  8454.573418   0.002500       -0.007266
8    8589.093486     134.520020  227.792236  8589.093486    0.010000   134.520020  8454.573418   0.000049      -99.999766
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:21]  --------------------------------------------------------------------------------
[08/30 10:42:21]  Iteration: 12 (0 solution, 11 counterexamples)
[08/30 10:42:21]  Generator returned sat in 0.087316 secs.
[08/30 10:42:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:21]  Improved gap from 0.0 to 0
[08/30 10:42:21]  Improved number of small numbers from 44 to 61 out of a max of 100
[08/30 10:42:21]  Verifer returned sat in 0.631593 secs.
[08/30 10:42:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    8372.075928    -223.492432 -114.195498  8372.075928    0.098877  -223.492432  8575.568604  19.999756       19.999756
1    8390.071045    -223.492432  -52.190498  8390.071045   37.994873  -223.492432  8575.568604  37.994873       -0.000127
2    8510.073486     -85.497432  -52.190498  8510.073486  157.997314   -85.497432  8575.570918  20.000000       20.000000
3    8610.075986      14.502568  -52.190498  8610.075986  120.002500    14.502568  8575.573418  20.000000       20.000000
4    8710.073486      44.512695  -52.190498  8710.073486  119.997500    44.512695  8575.573418  89.987373       19.997500
5    8710.073486     134.487793   27.812002  8710.073486    0.010000   134.487793  8575.573418   0.012275        0.000000
6    8710.073486     134.500068  127.804688  8710.073486    0.010000   134.500068  8575.573418   0.000000       -0.007314
7    8710.083486     134.507568  227.802002  8710.083486    0.010000   134.507568  8575.573418   0.002500        0.000000
8    8710.090986     134.510254  227.802002  8710.090986    0.010000   134.510254  8575.573418   0.007314      -99.992500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:42:22]  --------------------------------------------------------------------------------
[08/30 10:42:22]  Iteration: 13 (0 solution, 12 counterexamples)
[08/30 10:42:22]  Generator returned sat in 0.060915 secs.
[08/30 10:42:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:22]  Improved gap from 0.0025 to 0
[08/30 10:42:23]  Improved number of small numbers from 35 to 43 out of a max of 100
[08/30 10:42:23]  Verifer returned sat in 1.116893 secs.
[08/30 10:42:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    8381.721436    -193.844701 -384.227998  8381.721436    0.098633  -193.844701  8575.565918   0.000218      -99.999782
1    8601.723903       6.155299 -384.227998  8601.723903  220.002686     6.155299  8575.568604  20.000000       20.000000
2    8601.723903       6.155299 -304.227998  8601.723903    0.002441     6.155299  8575.568604  20.000000        0.000000
3    8721.726403      99.490299 -304.227998  8721.726403  140.002500    99.490299  8575.571104  46.665000       20.000000
4    8821.728903     186.130299 -304.227998  8821.728903  146.667500   186.130299  8575.573604  60.025000       20.000000
5    8851.691403     276.115299 -254.190498  8851.691403   89.987500   276.115299  8575.573604   0.002500        0.000000
6    8851.698903     276.117799 -154.197998  8851.698903    0.010000   276.117799  8575.573604   0.007500        0.000000
7    8851.701403     276.125299  -54.200498  8851.701403    0.010000   276.125299  8575.573604   0.002500        0.000000
8    8851.708903     276.127930  -54.200439  8851.708903    0.010000   276.127930  8575.573604   0.007370      -99.992441
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:23]  --------------------------------------------------------------------------------
[08/30 10:42:23]  Iteration: 14 (0 solution, 13 counterexamples)
[08/30 10:42:24]  Generator returned sat in 0.296221 secs.
[08/30 10:42:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:24]  Improved gap from 0.0491943359375 to 0
[08/30 10:42:24]  Improved number of small numbers from 26 to 100 out of a max of 100
[08/30 10:42:24]  Verifer returned sat in 0.315857 secs.
[08/30 10:42:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8476.876465    -173.844482 -404.228027  8476.876465    0.098389  -173.844482  8530.720947  120.000000       20.000000
1    8556.876465      26.155518 -404.228027  8556.876465  200.000000    26.155518  8530.720947    0.000000        0.000000
2    8601.630371      70.860352 -348.981934  8601.630371   44.753906    70.860352  8530.720947    0.049072        0.000000
3    8721.679688     135.357666 -348.981934  8721.679688  120.098389   135.357666  8530.770264   55.551758       20.000000
4    8821.729004     201.958740 -348.981934  8821.729004  155.601074   201.958740  8530.819580   88.950684       20.000000
5    8821.729004     289.860107 -268.981934  8821.729004   88.901611   289.860107  8530.819580    1.049316        0.000000
6    8821.729004     290.909424 -169.932617  8821.729004    1.000000   290.909424  8530.819580    0.000000       -0.950684
7    8822.729004     291.860107  -69.981934  8822.729004    1.000000   291.860107  8530.819580    0.049316        0.000000
8    8823.679688     291.909424   29.067139  8823.679688    1.000000   291.909424  8530.819580    0.950684       -0.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:42:25]  --------------------------------------------------------------------------------
[08/30 10:42:25]  Iteration: 15 (0 solution, 14 counterexamples)
[08/30 10:42:25]  Generator returned sat in 0.397336 secs.
[08/30 10:42:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:26]  Improved gap from 0.0 to 1.5625
[08/30 10:42:27]  Improved number of small numbers from 30 to 44 out of a max of 100
[08/30 10:42:27]  Verifer returned sat in 1.799976 secs.
[08/30 10:42:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    8524.930420      -5.790771 -622.347424  8524.930420    0.098145    -5.790771  8530.720947   0.000244        0.000085
1    8524.979492      -5.790612 -622.347424  8524.979492    0.049316    -5.790612  8530.720947   0.049157      -99.950843
2    8744.979530     194.209229 -622.347424  8744.979530  220.049194   194.209229  8530.770142  20.000160       20.000000
3    8744.979530     212.646888 -542.347424  8744.979530    1.942387   212.646888  8530.770142   1.562500        0.000000
4    8745.330610     214.209388 -443.910156  8745.330610    1.913580   214.209388  8530.770142   0.351080       -1.211652
5    8746.849900     216.030564 -345.731201  8746.849900    1.870370   216.030564  8530.770142   0.049194       -1.513407
6    8748.606261     217.786925 -247.487549  8748.606261    1.805556   217.786925  8530.770142   0.049194       -1.513393
7    8750.265400     219.446064 -149.146600  8750.265400    1.708333   219.446064  8530.770142   0.049194       -1.513306
8    8751.778706     221.008564 -149.146484  8751.778706    1.562500   221.008564  8530.770142   0.000000      -99.999884
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:42:27]  --------------------------------------------------------------------------------
[08/30 10:42:27]  Iteration: 16 (0 solution, 15 counterexamples)
[08/30 10:42:28]  Generator returned sat in 0.237465 secs.
[08/30 10:42:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:28]  Improved gap from 0.0 to 21.875
[08/30 10:42:28]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/30 10:42:28]  Verifer returned sat in 0.428886 secs.
[08/30 10:42:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8445.801025      -5.790771 -622.347900  8445.801025    0.097900    -5.790771  8451.591553    0.000244        0.000000
1    8565.849854      -5.790527 -622.347900  8565.849854  120.049072    -5.790527  8451.640381  120.000000       20.000000
2    8665.898926     133.062012 -622.347900  8665.898926  220.049072   133.062012  8451.689453   81.147461       20.000000
3    8665.898926     214.160400 -588.999512  8665.898926   47.750000   214.160400  8451.689453    0.049072      -46.651611
4    8712.599854     260.861328 -510.874756  8712.599854   46.750000   260.861328  8451.689453    0.049072      -21.825928
5    8758.300781     282.736328 -435.200684  8758.300781   45.750000   282.736328  8451.689453   23.875000       -0.450928
6    8779.175781     307.062256 -357.075684  8779.175781   44.750000   307.062256  8451.689453   20.424072       -1.450928
7    8802.501709     328.937256 -278.950684  8802.501709   43.750000   328.937256  8451.689453   21.875000        0.000000
8    8823.376709     350.812256 -221.651611  8823.376709   42.750000   350.812256  8451.689453   20.875000      -21.825928
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:42:28]  --------------------------------------------------------------------------------
[08/30 10:42:28]  Iteration: 17 (0 solution, 16 counterexamples)
[08/30 10:42:29]  Generator returned sat in 0.063625 secs.
[08/30 10:42:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:29]  Improved gap from 0.00125 to 0
[08/30 10:42:29]  Improved number of small numbers from 68 to 81 out of a max of 100
[08/30 10:42:29]  Verifer returned sat in 0.496730 secs.
[08/30 10:42:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8445.800781    -105.790527 -622.347900  8445.800781    0.097900  -105.790527  8431.591553  119.999756       19.999756
1    8445.800781      -5.790527 -622.347900  8445.800781    0.001465    -5.790527  8431.591553   19.999756      -80.000244
2    8625.802246     194.208008 -622.347900  8625.802246  200.001221   194.208008  8431.591553    0.002686        0.001221
3    8625.802246     194.209473 -522.356445  8625.802246    0.001221   194.209473  8431.591553    0.001221       -0.007324
4    8625.811025     194.218223 -422.365234  8625.811025    0.010000   194.218223  8431.591553    0.001250       -0.007334
5    8625.819775     194.226973 -322.374023  8625.819775    0.010000   194.226973  8431.591553    0.001250       -0.007373
6    8625.828525     194.235723 -222.375400  8625.828525    0.010000   194.235723  8431.591553    0.001250        0.000000
7    8625.837275     194.236973 -122.384277  8625.837275    0.010000   194.236973  8431.591553    0.008750       -0.000127
8    8625.838525     194.245850  -22.393066  8625.838525    0.010000   194.245850  8431.591553    0.001123       -0.007666
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:42:30]  --------------------------------------------------------------------------------
[08/30 10:42:30]  Iteration: 18 (0 solution, 17 counterexamples)
[08/30 10:42:30]  Generator returned sat in 0.464102 secs.
[08/30 10:42:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:31]  Improved number of small numbers from 40 to 56 out of a max of 99
[08/30 10:42:31]  Verifer returned sat in 0.858671 secs.
[08/30 10:42:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8069.751709    -361.841152 -266.297275  8069.751709    0.097656  -361.841152  8431.591553    0.001309        0.001309
1    8189.749150    -261.841309 -266.297275  8189.749150  119.998750  -261.841309  8431.591553   19.998906       19.998750
2    8289.749023    -161.841152 -266.297275  8289.749023  119.998779  -161.841152  8431.591553   19.998623       19.998623
3    8289.749023    -161.841152 -266.297275  8289.749023    0.001250  -161.841152  8431.591553   19.998623      -80.001377
4    8570.752900     -61.841152 -266.297275  8570.752900  301.002500   -61.841152  8512.594053  120.000000       20.000000
5    8570.752900      53.344598 -266.297275  8570.752900    0.010000    53.344598  8512.594053    4.814250      -80.000000
6    8889.737275     138.158936 -266.297275  8889.737275  323.798625   138.158936  8631.578428  119.999912       20.000000
7    8889.737275     258.157598 -266.297119  8889.737275    0.010000   258.157598  8631.578428    0.001250      -79.999844
8    9370.754150     338.158936 -266.297119  9370.754150  481.018125   338.158936  8912.595459  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=2560009/6400.[0m
[08/30 10:42:31]  --------------------------------------------------------------------------------
[08/30 10:42:31]  Iteration: 19 (0 solution, 18 counterexamples)
[08/30 10:42:33]  Generator returned sat in 1.656956 secs.
[08/30 10:42:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:34]  Improved gap from 20.0 to 100
[08/30 10:42:34]  Improved number of small numbers from 17 to 100 out of a max of 100
[08/30 10:42:34]  Verifer returned sat in 0.345143 secs.
[08/30 10:42:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7821.142578    -667.597656 -60.541016  7821.142578    0.097412  -667.597656  8488.691650    0.048584      -99.951416
1    8021.093994    -467.646240 -60.541016  8021.093994  200.000000  -467.646240  8488.691650    0.048584        0.000000
2    8021.093994    -467.597656 -60.541016  8021.093994    0.048584  -467.597656  8488.691650    0.000000     -100.000000
3    8245.045166    -300.329834 -60.541016  8245.045166  223.951172  -300.329834  8492.642822   52.732178       20.000000
4    8303.288574    -189.402588 -60.541016  8303.288574  110.975586  -189.402588  8492.642822    0.048340      -21.756592
5    8525.191406    -167.597412 -60.541016  8525.191406  221.951172  -167.597412  8572.789062  119.999756       20.000000
6    8525.191406     -67.597656 -60.541016  8525.191406  109.975586   -67.597656  8572.789062   20.000000      -80.000000
7    8725.142578     132.402344 -60.541016  8725.142578  219.951172   132.402344  8572.789062   19.951172       19.951172
8    9145.093750     132.402344 -60.541016  9145.093750  439.902344   132.402344  8892.691406  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638599/4096.[0m
[08/30 10:42:34]  --------------------------------------------------------------------------------
[08/30 10:42:34]  Iteration: 20 (0 solution, 19 counterexamples)
[08/30 10:42:35]  Generator returned sat in 1.055125 secs.
[08/30 10:42:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:36]  Improved gap from 0.0025 to 100
[08/30 10:42:36]  Improved number of small numbers from 50 to 60 out of a max of 100
[08/30 10:42:36]  Verifer returned sat in 0.664556 secs.
[08/30 10:42:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    7904.173828    -604.517822 -60.541016  7904.173828    0.097412  -604.517822  8488.69165   20.000000       19.999922
1    7984.173828    -604.517744 -60.541016  7984.173828  100.000000  -604.517744  8488.69165   99.999922       -0.000078
2    8084.173906    -504.517744 -60.541016  8084.173906  200.000000  -504.517744  8488.69165  100.000000        0.000000
3    8204.176406    -323.495244 -60.541016  8204.176406  220.002500  -323.495244  8488.69415   38.977500       20.000000
4    8204.176406    -284.520244 -60.541016  8204.176406    0.010000  -284.520244  8488.69415    0.002500      -80.000000
5    8525.191406    -204.517578 -60.541016  8525.191406  321.017500  -204.517578  8609.70915  119.999834       20.000000
6    8525.191406    -104.517744 -60.541016  8525.191406    0.010000  -104.517744  8609.70915   20.000000      -80.000000
7    8725.188906      95.482256 -60.541016  8725.188906  219.997500    95.482256  8609.70915   19.997500       19.997500
8    9526.188906      95.482422 -60.541016  9526.188906  820.997500    95.482422  9310.70665  119.999834       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=65761/80.[0m
[08/30 10:42:36]  --------------------------------------------------------------------------------
[08/30 10:42:36]  Iteration: 21 (0 solution, 20 counterexamples)
[08/30 10:42:37]  Generator returned sat in 0.575258 secs.
[08/30 10:42:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:38]  Improved gap from 0.048583984375 to 100
[08/30 10:42:39]  Improved number of small numbers from 16 to 24 out of a max of 100
[08/30 10:42:39]  Verifer returned sat in 1.540135 secs.
[08/30 10:42:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8845.248047    1708.055687 -2396.001084   8845.248047    0.097412  1708.055687  7114.305479   22.886881        0.000244
1    8845.248047    1730.942324 -2396.001084   8845.248047    0.048584  1730.942324  7114.305479    0.000244      -99.999756
2    8945.296387    1830.942324 -2396.001084   8945.296387  100.048584  1830.942324  7114.305479    0.048584      -99.951416
3    9048.280192    1933.926130 -2396.001084   9048.280192  103.032389  1933.926130  7114.305479    0.048584      -96.967611
4    9265.199219    2130.942324 -2396.001084   9265.199219  216.967611  2130.942324  7114.305479   19.951416       19.951416
5    9663.215414    2230.942324 -2396.001084   9663.215414  417.967611  2230.942324  7412.273089   20.000000       20.000000
6    9853.199219    2230.942383 -2396.001084   9853.199219  209.983805  2230.942383  7502.256895  119.999942       20.000000
7    9853.199219    2350.893740 -2396.001084   9853.199219  105.991903  2350.893740  7502.256895    0.048584      -80.000000
8   10070.118246    2430.942383 -2396.001084  10070.118246  216.967611  2430.942383  7519.175921  119.999942       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=621881/1536.[0m
[08/30 10:42:39]  --------------------------------------------------------------------------------
[08/30 10:42:39]  Iteration: 22 (0 solution, 21 counterexamples)
[08/30 10:42:41]  Generator returned sat in 1.756216 secs.
[08/30 10:42:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:41]  Improved gap from 0.02423095703125 to 100
[08/30 10:42:42]  Improved number of small numbers from 26 to 30 out of a max of 100
[08/30 10:42:42]  Verifer returned sat in 1.080945 secs.
[08/30 10:42:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8437.189453    1730.942324 -2396.001084  8437.189453    0.097168  1730.942324  6686.247139   19.999990       19.999990
1    8517.189463    1730.942324 -2396.001084  8517.189463  100.000000  1730.942324  6686.247139  100.000000        0.000000
2    8522.684336    1836.388735 -2396.001084  8522.684336  105.494873  1836.388735  6686.247139    0.048462      -94.505127
3    8617.237925    1930.942324 -2396.001084  8617.237925   94.602051  1930.942324  6686.247139    0.048462      -99.951538
4    8859.092539    2030.942324 -2396.001084  8859.092539  241.903076  2030.942324  6708.150215  120.000000       20.000000
5    8859.092539    2130.942324 -2396.001084  8859.092539  119.951538  2130.942324  6708.150215   20.000000      -80.000000
6    9166.296641    2288.291812 -2396.001084  9166.296641  327.204102  2288.291812  6815.354316   62.650513       20.000000
7    9266.248179    2430.942324 -2396.001084  9266.248179  162.602051  2430.942324  6815.354316   19.951538       19.951538
8    9690.199717    2530.942139 -2396.001084  9690.199717  443.903076  2530.942139  7139.257392   20.000186       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=1765815/4096.[0m
[08/30 10:42:43]  --------------------------------------------------------------------------------
[08/30 10:42:43]  Iteration: 23 (0 solution, 22 counterexamples)
[08/30 10:42:43]  Generator returned sat in 0.524702 secs.
[08/30 10:42:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:44]  Improved number of small numbers from 17 to 99 out of a max of 99
[08/30 10:42:44]  Verifer returned sat in 0.454447 secs.
[08/30 10:42:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8418.627686    1728.404785 -2396.001221  8418.627686    0.096924  1728.404785  6690.198730    0.024170        0.023926
1    8517.189453    1728.405029 -2396.000977  8517.189453   98.585938  1728.405029  6690.198730   98.585693       -1.414062
2    8526.684570    1836.461426 -2396.000977  8526.684570  108.080811  1836.461426  6690.198730    0.024414      -91.918945
3    8618.627930    1928.404785 -2396.000977  8618.627930   91.967773  1928.404785  6690.198730    0.024414      -99.975586
4    8856.555176    2028.404785 -2396.000977  8856.555176  237.951660  2028.404785  6708.150391  120.000000       20.000000
5    8856.555176    2130.942139 -2396.000977  8856.555176  119.975830  2130.942139  6708.150391   17.462646      -80.000000
6    9166.296631    2283.754150 -2396.000977  9166.296631  327.204102  2283.754150  6817.891846   64.650635       20.000000
7    9266.248047    2422.404785 -2396.000977  9266.248047  164.602051  2422.404785  6817.891846   25.951416       19.951416
8    9684.199707    2528.404785 -2396.000977  9684.199707  443.903076  2528.404785  7135.794922   20.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=109477/256.[0m
[08/30 10:42:44]  --------------------------------------------------------------------------------
[08/30 10:42:44]  Iteration: 24 (0 solution, 23 counterexamples)
[08/30 10:42:45]  Generator returned sat in 0.456069 secs.
[08/30 10:42:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:42:46]  Improved number of small numbers from 85 to 95 out of a max of 99
[08/30 10:42:46]  Verifer returned sat in 0.424781 secs.
[08/30 10:42:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8438.603516    1628.404785 -2396.000977  8438.603516    0.096924  1628.404785  6690.198730  120.000000       20.000000
1    8518.603271    1803.131836 -2396.000977  8518.603271  199.999756  1803.131836  6690.198730   25.272705       -0.000244
2    8560.005859    1869.794678 -2396.000977  8560.005859   66.675293  1869.794678  6690.198730    0.012451      -58.597656
3    8618.627686    1928.404785 -2396.000977  8618.627686   58.634277  1928.404785  6690.198730    0.024170      -99.975830
4    8856.554932    2028.404785 -2396.000977  8856.554932  237.951416  2028.404785  6708.150146  120.000000       20.000000
5    8856.554932    2148.392578 -2396.000977  8856.554932  113.636475  2148.392578  6708.150146    0.012207      -80.000000
6    9166.296387    2274.396647 -2396.000977  9166.296387  309.753662  2274.396647  6817.891602   74.008138       20.000000
7    9266.284180    2422.404785 -2396.000977  9266.284180  173.995931  2422.404785  6817.891602   25.987793       19.987793
8    9698.290283    2528.404785 -2396.000977  9698.290283  457.993896  2528.404785  7149.885498   20.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=452337/1024.[0m
[08/30 10:42:46]  --------------------------------------------------------------------------------
[08/30 10:42:46]  Iteration: 25 (0 solution, 24 counterexamples)
[08/30 10:42:47]  Generator returned sat in 0.959855 secs.
[08/30 10:42:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:47]  Improved gap from 85.59114583333333 to 100
[08/30 10:42:48]  Improved number of small numbers from 53 to 86 out of a max of 100
[08/30 10:42:48]  Verifer returned sat in 1.110766 secs.
[08/30 10:42:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    9031.912109    2221.713623 -2989.310059   9031.912109    0.096924  2221.713623  6690.198730  119.999756       20.000000
1    9131.815674    2321.713623 -2989.310059   9131.815674  219.903320  2321.713623  6690.198730  119.903320       19.903564
2    9232.008789    2431.842485 -2989.310059   9232.008789  220.096436  2431.842485  6690.295410  109.870894       20.000000
3    9258.467539    2521.713579 -2989.310059   9258.467539  136.329644  2521.713579  6690.295410   46.458550      -53.541250
4    9417.503455    2721.713379 -2989.310059   9417.503455  205.494466  2721.713379  6690.295410    5.494666        5.494666
5    9721.250488    2721.713579 -2989.310059   9721.250488  309.241699  2721.713579  6879.537109  119.999800       20.000000
6    9747.186235    2821.713623 -2989.310059   9747.186235  145.935547  2821.713623  6879.537109   45.935502      -54.064253
7    9921.154053    3021.713379 -2989.310059   9921.154053  219.903320  3021.713379  6879.537109   19.903564       19.903564
8   10232.105469    3021.713379 -2989.310059  10232.105469  330.854980  3021.713379  7090.392090  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=409699/1024.[0m
[08/30 10:42:49]  --------------------------------------------------------------------------------
[08/30 10:42:49]  Iteration: 26 (0 solution, 25 counterexamples)
[08/30 10:42:49]  Generator returned sat in 0.399580 secs.
[08/30 10:42:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:50]  Improved number of small numbers from 25 to 99 out of a max of 99
[08/30 10:42:50]  Verifer returned sat in 0.514877 secs.
[08/30 10:42:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8835.579590    2247.018555 -3014.615234   8835.579590    0.096680  2247.018555  6468.561279  119.999756       20.000000
1    8935.627930    2347.018311 -3014.615234   8935.627930  220.048096  2347.018311  6468.609619  120.000000       20.000000
2    9015.676025    2447.018311 -3014.615234   9015.676025  200.048096  2447.018311  6468.609619  100.048096        0.048096
3    9015.676025    2547.018555 -3014.615234   9015.676025   45.967773  2547.018555  6468.609619    0.047852      -99.951904
4    9235.579834    2747.018311 -3014.615234   9235.579834  219.951660  2747.018311  6468.609619   19.951904       19.951904
5    9746.555420    2747.018555 -3014.615234   9746.555420  530.927490  2747.018555  6879.537109  119.999756       20.000000
6    9746.555420    2866.970215 -2997.042969   9746.555420    1.000000  2866.970215  6879.537109    0.048096      -62.427734
7    9908.983154    3029.397949 -2997.042969   9908.983154  162.475830  3029.397949  6879.537109    0.048096        0.000000
8   10294.838623    3029.446289 -2997.042969  10294.838623  385.903564  3029.446289  7145.392578  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=2772103/4096.[0m
[08/30 10:42:50]  --------------------------------------------------------------------------------
[08/30 10:42:50]  Iteration: 27 (0 solution, 26 counterexamples)
[08/30 10:42:53]  Generator returned sat in 2.045007 secs.
[08/30 10:42:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:42:53]  Improved gap from 59.01875 to 100
[08/30 10:42:54]  Improved number of small numbers from 38 to 46 out of a max of 100
[08/30 10:42:54]  Verifer returned sat in 1.115563 secs.
[08/30 10:42:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t   cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8820.959229    2250.429795 -3018.026719   8820.959229    0.09668  2250.429795  6450.529609  119.999824       19.999824
1    8920.961904    2450.429795 -3018.026719   8920.961904  220.00250  2450.429795  6450.532109   20.000000       20.000000
2    9000.964404    2450.429932 -3018.026719   9000.964404  100.00250  2450.429932  6450.532109  100.002363        0.002500
3    9000.964404    2550.429795 -3018.026719   9000.964404   25.50125  2550.429795  6450.532109    0.002500      -99.997500
4    9200.964404    2750.429795 -3018.026719   9200.964404  200.00250  2750.429795  6450.532109    0.002500        0.002500
5    9749.966904    2750.429932 -3018.026719   9749.966904  549.00500  2750.429932  6879.537109  119.999863       20.000000
6    9749.966904    2850.429795 -3018.026719   9749.966904    0.01000  2850.429795  6879.537109   20.000000      -80.000000
7    9878.986904    2999.447295 -3018.026719   9878.986904  149.02000  2999.447295  6879.537109    0.002500      -50.980000
8   10300.533154    3050.429932 -3018.026719  10300.533154  421.54875  3050.429932  7130.103359  119.999863       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=543657/800.[0m
[08/30 10:42:54]  --------------------------------------------------------------------------------
[08/30 10:42:54]  Iteration: 28 (0 solution, 27 counterexamples)
[08/30 10:42:55]  Generator returned sat in 0.962746 secs.
[08/30 10:42:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:56]  Verifer returned unsat in 0.319561 secs.
[08/30 10:42:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:56]  --------------------------------------------------------------------------------
[08/30 10:42:56]  Iteration: 29 (1 solution, 27 counterexamples)
[08/30 10:42:56]  Generator returned sat in 0.075296 secs.
[08/30 10:42:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:57]  Verifer returned unsat in 0.359472 secs.
[08/30 10:42:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:57]  --------------------------------------------------------------------------------
[08/30 10:42:57]  Iteration: 30 (2 solution, 27 counterexamples)
[08/30 10:42:59]  Generator returned sat in 1.650469 secs.
[08/30 10:42:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:42:59]  Improved gap from 0.00125 to 100
[08/30 10:43:00]  Improved number of small numbers from 38 to 48 out of a max of 100
[08/30 10:43:00]  Verifer returned sat in 1.067193 secs.
[08/30 10:43:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8501.184326    1896.422437 -2564.019361  8501.184326    0.096436  1896.422437  6604.759359    0.002529        0.002529
1    8501.184326    1896.422437 -2564.019361  8501.184326    0.002441  1896.422437  6604.759359    0.002529      -99.997471
2    8721.184297    1996.422607 -2564.019361  8721.184297  220.002500  1996.422607  6604.761859  119.999830       20.000000
3    8721.184297    2096.422437 -2564.019361  8721.184297   42.395333  2096.422437  6604.761859   20.000000      -80.000000
4    8865.777297    2261.012938 -2564.019361  8865.777297  164.593000  2261.012938  6604.761859    0.002500      -35.407000
5    9295.959547    2396.422363 -2564.019361  9295.959547  430.184750  2396.422363  6879.537109   20.000074       20.000000
6    9295.959547    2396.422437 -2564.019361  9295.959547    0.010000  2396.422437  6879.537109   20.000000      -80.000000
7    9426.974547    2496.422437 -2564.019361  9426.974547  151.015000  2496.422437  6879.537109   51.015000      -48.985000
8    9721.186797    2696.422363 -2564.019361  9721.186797  345.227250  2696.422363  7004.764359   20.000074       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:43:00]  --------------------------------------------------------------------------------
[08/30 10:43:00]  Iteration: 31 (2 solution, 28 counterexamples)
[08/30 10:43:03]  Generator returned sat in 2.610287 secs.
[08/30 10:43:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:43:03]  Improved gap from 0.0025 to 100
[08/30 10:43:04]  Improved number of small numbers from 56 to 70 out of a max of 100
[08/30 10:43:04]  Verifer returned sat in 0.696286 secs.
[08/30 10:43:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8566.936768    1896.422363 -2438.665039  8566.936768    0.096191  1896.422363  6650.514609   19.999795       19.999795
1    8566.936768    1896.422363 -2438.665039  8566.936768    0.002686  1896.422363  6650.514609   19.999795      -80.000205
2    8646.939473    1996.422363 -2438.665039  8646.939473  100.002500  1996.422363  6650.514609    0.002500      -99.997500
3    8866.939473    2108.422363 -2438.665039  8866.939473  220.002500  2108.422363  6650.517109  108.000000       20.000000
4    8866.939473    2196.422363 -2438.665039  8866.939473    0.010000  2196.422363  6650.517109   20.000000      -80.000000
5    9295.959473    2296.422363 -2438.665039  9295.959473  449.020000  2296.422363  6879.537109  120.000000       20.000000
6    9295.959473    2396.422363 -2438.665039  9295.959473    0.010000  2396.422363  6879.537109   20.000000      -80.000000
7    9706.979473    2496.422363 -2438.665039  9706.979473  431.020000  2496.422363  7090.557109  120.000000       20.000000
8    9706.979473    2596.422363 -2438.665039  9706.979473    0.010000  2596.422363  7090.557109   20.000000      -80.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=11001/25.[0m
[08/30 10:43:04]  --------------------------------------------------------------------------------
[08/30 10:43:04]  Iteration: 32 (2 solution, 29 counterexamples)
[08/30 10:43:05]  Generator returned sat in 0.822143 secs.
[08/30 10:43:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:43:06]  Improved gap from 0.0 to 21.875
[08/30 10:43:06]  Improved number of small numbers from 31 to 100 out of a max of 100
[08/30 10:43:06]  Verifer returned sat in 1.064461 secs.
[08/30 10:43:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    9162.709229    2488.867920 -3034.437256  9162.709229   0.095947  2488.867920  6650.514648  23.326660       19.999756
1    9162.757568    2512.194824 -2976.312500  9162.757568  23.375000  2512.194824  6650.514648   0.048096      -21.827148
2    9185.632324    2535.069824 -2899.187256  9185.632324  22.922852  2535.069824  6650.514648   0.047852      -21.827148
3    9252.209473    2556.945068 -2843.937256  9252.209473  66.625000  2556.945068  6650.514648  44.749756        0.000000
4    9252.209473    2601.694824 -2765.812256  9252.209473  33.038574  2601.694824  6650.514648   0.000000      -21.875000
5    9295.959473    2623.569824 -2687.687256  9295.959473  43.750000  2623.569824  6650.514648  21.875000        0.000000
6    9317.334473    2647.412842 -2612.014404  9317.334473  43.250000  2647.412842  6650.514648  19.406982       -2.952148
7    9342.161377    2669.771973 -2533.889404  9342.161377  44.233887  2669.771973  6650.514648  21.874756       -0.000244
8    9353.325195    2691.646973 -2466.927979  9353.325195  33.038574  2691.646973  6650.514648  11.163574      -21.875000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:43:07]  --------------------------------------------------------------------------------
[08/30 10:43:07]  Iteration: 33 (2 solution, 30 counterexamples)
[08/30 10:43:14]  Generator returned sat in 6.517890 secs.
[08/30 10:43:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:43:14]  Verifer returned unsat in 0.737469 secs.
[08/30 10:43:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:43:14]  --------------------------------------------------------------------------------
[08/30 10:43:14]  Iteration: 34 (3 solution, 30 counterexamples)
[08/30 10:43:15]  Generator returned sat in 0.150141 secs.
[08/30 10:43:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:16]  Verifer returned unsat in 0.541973 secs.
[08/30 10:43:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:16]  --------------------------------------------------------------------------------
[08/30 10:43:16]  Iteration: 35 (4 solution, 30 counterexamples)
[08/30 10:43:16]  Generator returned sat in 0.128806 secs.
[08/30 10:43:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:17]  Verifer returned unsat in 0.347394 secs.
[08/30 10:43:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:17]  --------------------------------------------------------------------------------
[08/30 10:43:17]  Iteration: 36 (5 solution, 30 counterexamples)
[08/30 10:43:17]  Generator returned sat in 0.098285 secs.
[08/30 10:43:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:18]  Verifer returned unsat in 0.494406 secs.
[08/30 10:43:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:18]  --------------------------------------------------------------------------------
[08/30 10:43:18]  Iteration: 37 (6 solution, 30 counterexamples)
[08/30 10:43:18]  Generator returned sat in 0.167507 secs.
[08/30 10:43:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:19]  Verifer returned unsat in 0.363127 secs.
[08/30 10:43:19]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:19]  --------------------------------------------------------------------------------
[08/30 10:43:19]  Iteration: 38 (7 solution, 30 counterexamples)
[08/30 10:43:19]  Generator returned sat in 0.170451 secs.
[08/30 10:43:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:20]  Verifer returned unsat in 0.507622 secs.
[08/30 10:43:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:20]  --------------------------------------------------------------------------------
[08/30 10:43:20]  Iteration: 39 (8 solution, 30 counterexamples)
[08/30 10:43:20]  Generator returned sat in 0.165387 secs.
[08/30 10:43:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:21]  Improved gap from 0.0 to 21.875
[08/30 10:43:21]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:43:21]  Verifer returned sat in 0.829024 secs.
[08/30 10:43:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t
0    7011.165283     385.621582 -3007.614014  7011.165283   0.095947   385.621582  6625.49585   0.047852        0.047852
1    7048.771729     423.275879 -2967.143311  7048.771729  37.654297   423.275879  6625.49585   0.000000      -21.875000
2    7070.694580     445.150879 -2889.018311  7070.694580  21.922852   445.150879  6625.49585   0.047852      -21.827148
3    7134.271729     467.025879 -2830.768311  7134.271729  63.625000   467.025879  6625.49585  41.750000        0.000000
4    7134.271729     508.775879 -2752.643311  7134.271729  41.702148   508.775879  6625.49585   0.000000      -21.875000
5    7178.021729     530.650879 -2674.518311  7178.021729  43.750000   530.650879  6625.49585  21.875000        0.000000
6    7199.896729     552.525879 -2596.393311  7199.896729  43.750000   552.525879  6625.49585  21.875000        0.000000
7    7221.771729     574.400879 -2518.268311  7221.771729  43.750000   574.400879  6625.49585  21.875000        0.000000
8    7233.709229     596.275879 -2518.268311  7233.709229  33.812500   596.275879  6625.49585  11.937500      -88.062500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:43:22]  --------------------------------------------------------------------------------
[08/30 10:43:22]  Iteration: 40 (8 solution, 31 counterexamples)
[08/30 10:43:23]  Generator returned sat in 1.222605 secs.
[08/30 10:43:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:24]  Improved gap from 0.0 to 1.5625
[08/30 10:43:25]  Improved number of small numbers from 33 to 42 out of a max of 100
[08/30 10:43:25]  Verifer returned sat in 1.249080 secs.
[08/30 10:43:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7260.794189     739.324629 -2794.232061  7260.794189    0.095703   739.324629  6501.4696   19.999961       19.999961
1    7340.794229     739.324629 -2794.232061  7340.794229  100.000000   739.324629  6501.4696  100.000000        0.000000
2    7460.804229     939.324629 -2794.232061  7460.804229  220.010000   939.324629  6501.4796   20.000000       20.000000
3    7501.090479     998.048379 -2754.518311  7501.090479   60.286250   998.048379  6501.4796    1.562500        0.000000
4    7621.100479    1032.745850 -2754.518311  7621.100479  121.572500  1032.745850  6501.4896   86.865029       20.000000
5    7621.100479    1118.048340 -2674.518311  7621.100479    0.010000  1118.048340  6501.4896    1.562539        0.000000
6    7621.100479    1119.610879 -2576.080811  7621.100479    1.020000  1119.610879  6501.4896    0.000000       -1.562500
7    7624.140479    1121.173379 -2477.643311  7624.140479    3.040000  1121.173379  6501.4896    1.477500       -0.085000
8    7629.742979    1122.736084 -2383.160889  7629.742979    7.080000  1122.736084  6501.4896    5.517295       -0.000078
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:43:25]  --------------------------------------------------------------------------------
[08/30 10:43:25]  Iteration: 41 (8 solution, 32 counterexamples)
[08/30 10:43:28]  Generator returned sat in 2.917041 secs.
[08/30 10:43:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:28]  Improved gap from 0.0478515625 to 100
[08/30 10:43:29]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/30 10:43:29]  Verifer returned sat in 0.339863 secs.
[08/30 10:43:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7260.708496     699.611084 -2754.518555  7260.708496    0.095703   699.611084  6541.097656   19.999756       19.999756
1    7360.756592     782.563232 -2754.518555  7360.756592  120.047852   782.563232  6541.145508   37.047852       20.000000
2    7460.804199     899.611084 -2754.518555  7460.804199  137.095459   899.611084  6541.193115   20.000000       20.000000
3    7560.852051     999.611084 -2754.518555  7560.852051  120.047852   999.611084  6541.240967   20.000000       20.000000
4    7560.852051     999.611084 -2754.518555  7560.852051    1.000000   999.611084  6541.240967   20.000000      -80.000000
5    7760.899902    1199.611084 -2754.518555  7760.899902  220.047852  1199.611084  6541.288818   20.000000       20.000000
6    7760.899902    1199.611084 -2754.518555  7760.899902    1.000000  1199.611084  6541.288818   20.000000      -80.000000
7    7943.899902    1299.611084 -2754.518555  7943.899902  203.000000  1299.611084  6541.288818  103.000000        3.000000
8    8547.899902    1399.611084 -2754.518555  8547.899902  707.000000  1399.611084  7028.288818  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=498737/1024.[0m
[08/30 10:43:29]  --------------------------------------------------------------------------------
[08/30 10:43:29]  Iteration: 42 (8 solution, 33 counterexamples)
[08/30 10:43:33]  Generator returned sat in 3.230516 secs.
[08/30 10:43:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:33]  Improved gap from 0.02392578125 to 0
[08/30 10:43:33]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:43:33]  Verifer returned sat in 0.213888 secs.
[08/30 10:43:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7111.801758     638.919678 -2695.875000  7111.801758    0.095703   638.919678  6450.834229   22.047852       20.000000
1    7191.801758     640.967529 -2695.875000  7191.801758  102.047852   640.967529  6450.834229  100.000000        0.000000
2    7191.849609     740.967529 -2595.922852  7191.849609  100.047852   740.967529  6450.834229    0.047852        0.000000
3    7311.897461     841.015381 -2595.922852  7311.897461  120.095703   841.015381  6450.882080   20.000000       20.000000
4    7392.945312     941.015381 -2595.922852  7392.945312  101.047852   941.015381  6450.882080    1.047852        1.047852
5    7392.945312     941.015381 -2496.970703  7392.945312    1.000000   941.015381  6450.882080    1.047852        0.000000
6    7392.945312     942.063232 -2397.018555  7392.945312    1.000000   942.063232  6450.882080    0.000000       -0.047852
7    7393.945312     942.111084 -2298.018555  7393.945312    1.000000   942.111084  6450.882080    0.952148       -0.047852
8    7393.993164     943.111084 -2198.066406  7393.993164    1.000000   943.111084  6450.882080    0.000000       -0.047852
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:43:33]  --------------------------------------------------------------------------------
[08/30 10:43:33]  Iteration: 43 (8 solution, 34 counterexamples)
[08/30 10:43:35]  Generator returned sat in 0.828815 secs.
[08/30 10:43:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:35]  Improved gap from 0.0 to 0
[08/30 10:43:35]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/30 10:43:35]  Verifer returned sat in 0.182644 secs.
[08/30 10:43:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7111.801758     641.967529 -2695.875244  7111.801758    0.095703   641.967529  6449.834229   20.000000       20.000000
1    7191.801758     641.967529 -2695.875244  7191.801758  100.000000   641.967529  6449.834229  100.000000        0.000000
2    7191.849609     741.967529 -2595.923096  7191.849609  100.047852   741.967529  6449.834229    0.047852        0.000000
3    7291.873535     841.015381 -2595.923096  7291.873535  100.071777   841.015381  6449.834229    1.023926        0.023926
4    7291.873535     842.015381 -2496.899170  7291.873535    1.000000   842.015381  6449.834229    0.023926       -0.952148
5    7292.849609     842.991455 -2397.899170  7292.849609    1.000000   842.991455  6449.834229    0.023926       -0.976074
6    7293.825684     843.991455 -2297.899170  7293.825684    1.000000   843.991455  6449.834229    0.000000        0.000000
7    7294.825684     844.967529 -2198.899170  7294.825684    1.000000   844.967529  6449.834229    0.023926        0.000000
8    7295.801758     844.991455 -2100.827393  7295.801758    1.000000   844.991455  6449.834229    0.976074       -0.952148
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=0, loss_amount=0.[0m
[08/30 10:43:35]  --------------------------------------------------------------------------------
[08/30 10:43:35]  Iteration: 44 (8 solution, 35 counterexamples)
[08/30 10:43:36]  Generator returned sat in 0.899523 secs.
[08/30 10:43:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:37]  Improved gap from 0.047607421875 to 100
[08/30 10:43:37]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/30 10:43:37]  Verifer returned sat in 0.327618 secs.
[08/30 10:43:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7191.801270     741.110107 -2695.875244  7191.801270    0.095215   741.110107  6330.691406  119.999756       19.999756
1    7191.801270     841.110107 -2695.875244  7191.801270    0.047363   841.110107  6330.691406   19.999756      -80.000244
2    7391.849121     941.110107 -2695.875244  7391.849121  220.047607   941.110107  6330.739014  120.000000       20.000000
3    7491.896484    1041.110107 -2695.875244  7491.896484  220.047363  1041.110107  6330.786377  120.000000       20.000000
4    7491.896484    1160.134033 -2695.875244  7491.896484  109.023682  1160.134033  6330.786377    0.976074      -80.000000
5    7810.944336    1302.050537 -2695.875244  7810.944336  320.023926  1302.050537  6449.834229   59.059570       20.000000
6    7910.896729    1441.110107 -2695.875244  7910.896729  159.011963  1441.110107  6449.834229   19.952393       19.952393
7    8291.944336    1441.609863 -2695.875244  8291.944336  401.000000  1441.609863  6730.834229  119.500244       20.000000
8    8371.944092    1541.110107 -2695.875244  8371.944092  199.500000  1541.110107  6730.834229   99.999756       -0.000244
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=409649/1024.[0m
[08/30 10:43:37]  --------------------------------------------------------------------------------
[08/30 10:43:37]  Iteration: 45 (8 solution, 36 counterexamples)
[08/30 10:43:39]  Generator returned sat in 1.007624 secs.
[08/30 10:43:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:39]  Improved number of small numbers from 62 to 72 out of a max of 99
[08/30 10:43:39]  Verifer returned sat in 0.706119 secs.
[08/30 10:43:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7191.801270     841.109863 -2497.800049  7191.801270    0.094971   841.109863  6330.691406   20.000000       19.999756
1    7191.801270     841.110107 -2497.800049  7191.801270    0.047607   841.110107  6330.691406   19.999756      -80.000244
2    7271.849121     941.110107 -2497.800049  7271.849121  100.047607   941.110107  6330.691406    0.047607      -99.952393
3    7404.499919    1041.110107 -2497.800049  7404.499919  132.698405  1041.110107  6330.691406   32.698405      -67.301595
4    7571.849121    1241.110107 -2497.800049  7571.849121  200.047607  1241.110107  6330.691406    0.047607        0.047607
5    7872.872925    1341.110107 -2497.800049  7872.872925  301.071411  1341.110107  6511.762817   20.000000       20.000000
6    8051.872925    1388.411702 -2497.800049  8051.872925  199.000000  1388.411702  6590.762817   72.698405       20.000000
7    8151.825317    1541.109863 -2497.800049  8151.825317  172.650798  1541.109863  6590.762817   19.952637       19.952393
8    8391.848877    1541.110107 -2497.800049  8391.848877  259.976196  1541.110107  6730.738770  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=819297/2048.[0m
[08/30 10:43:40]  --------------------------------------------------------------------------------
[08/30 10:43:40]  Iteration: 46 (8 solution, 37 counterexamples)
[08/30 10:43:42]  Generator returned sat in 1.437451 secs.
[08/30 10:43:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:42]  Improved gap from 0.0 to 100
[08/30 10:43:42]  Improved number of small numbers from 26 to 100 out of a max of 100
[08/30 10:43:42]  Verifer returned sat in 0.501667 secs.
[08/30 10:43:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8028.349121    1684.657471 -3354.394775  8028.349121    0.094727  1684.657471  6330.644043   13.047607        0.000000
1    8028.396484    1697.705322 -3354.394775  8028.396484   13.094971  1697.705322  6330.644043    0.047119      -99.952637
2    8228.349121    1797.705078 -3354.394775  8228.349121  199.999756  1797.705078  6330.644043  100.000000        0.000000
3    8348.396484    1901.705078 -3354.394775  8348.396484  220.047363  1901.705078  6330.691406  116.000000       20.000000
4    8448.444092    2097.705078 -3354.394775  8448.444092  216.047607  2097.705078  6330.739014   20.000000       20.000000
5    8827.443848    2097.705078 -3354.394775  8827.443848  398.999756  2097.705078  6609.738770  120.000000       20.000000
6    9006.443848    2197.705078 -3354.394775  9006.443848  299.000000  2197.705078  6688.738770  120.000000       20.000000
7    9181.443848    2314.752686 -3354.394775  9181.443848  295.000000  2314.752686  6763.738770  102.952393       20.000000
8    9294.539062    2397.705322 -3354.394775  9294.539062  216.047607  2397.705322  6776.833984  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=5, loss_amount=1827205/4096.[0m
[08/30 10:43:43]  --------------------------------------------------------------------------------
[08/30 10:43:43]  Iteration: 47 (8 solution, 38 counterexamples)
[08/30 10:43:44]  Generator returned sat in 0.671125 secs.
[08/30 10:43:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:44]  Improved gap from 0.04736328125 to 7.8125
[08/30 10:43:44]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/30 10:43:44]  Verifer returned sat in 0.429999 secs.
[08/30 10:43:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8248.254150    1797.657471 -3625.624512  8248.254150    0.094727  1797.657471  6330.596680  120.000000       20.000000
1    8348.301514    1997.657471 -3625.624512  8348.301514  220.047363  1997.657471  6330.644043   20.000000       20.000000
2    8448.254150    2009.657715 -3625.624512  8448.254150  119.952637  2009.657715  6330.644043  107.952393       19.952637
3    8528.301758    2102.705078 -3625.624512  8528.301758  188.000000  2102.705078  6330.644043   94.952637        0.000244
4    8528.349121    2197.657471 -3533.437256  8528.349121   95.000000  2197.657471  6330.644043    0.047607       -7.765137
5    8576.801514    2220.860352 -3474.124512  8576.801514   48.500000  2220.860352  6330.644043   25.297119        0.000000
6    8576.801514    2246.157471 -3381.937012  8576.801514   25.250000  2246.157471  6330.644043    0.000000       -7.812500
7    8590.426514    2259.735352 -3295.514893  8590.426514   13.625000  2259.735352  6330.644043    0.047119       -7.765381
8    8598.191895    2267.547852 -3295.514893  8598.191895    7.812500  2267.547852  6330.644043    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:43:45]  --------------------------------------------------------------------------------
[08/30 10:43:45]  Iteration: 48 (8 solution, 39 counterexamples)
[08/30 10:43:49]  Generator returned sat in 3.756386 secs.
[08/30 10:43:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:43:49]  Improved gap from 0.04736328125 to 100
[08/30 10:43:49]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/30 10:43:49]  Verifer returned sat in 0.287273 secs.
[08/30 10:43:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8220.700684    1850.198975 -3295.515137  8220.700684    0.094727  1850.198975  6330.596436   39.905273       20.000000
1    8300.700684    1870.104248 -3295.515137  8300.700684  119.905273  1870.104248  6330.596436  100.000000        0.000000
2    8420.605957    2070.104248 -3295.515137  8420.605957  219.905273  2070.104248  6330.596436   19.905273       19.905273
3    8500.700684    2070.104248 -3295.515137  8500.700684  100.000000  2070.104248  6330.596436  100.000000        0.000000
4    8620.605957    2270.104248 -3295.515137  8620.605957  219.905273  2270.104248  6330.596436   19.905273       19.905273
5    9000.700684    2370.104248 -3295.515137  9000.700684  400.000000  2370.104248  6610.596436   20.000000       20.000000
6    9179.700684    2470.092285 -3295.515137  9179.700684  199.000000  2470.092285  6689.596436   20.011963       20.000000
7    9258.188721    2500.651611 -3295.515137  9258.188721   98.500000  2500.651611  6689.596436   67.940674       -1.511963
8    9420.795410    2570.104248 -3295.515137  9420.795410  230.547363  2570.104248  6730.691162  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=409697/1024.[0m
[08/30 10:43:49]  --------------------------------------------------------------------------------
[08/30 10:43:49]  Iteration: 49 (8 solution, 40 counterexamples)
[08/30 10:43:51]  Generator returned sat in 0.592614 secs.
[08/30 10:43:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:43:51]  Improved gap from 0.00125 to 79.6875
[08/30 10:43:51]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/30 10:43:51]  Verifer returned sat in 0.467644 secs.
[08/30 10:43:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8020.708252    1690.111816 -3296.138916  8020.708252    0.094482  1690.111816  6330.596436    0.000000        0.000000
1    8140.707031    1770.113037 -3296.138916  8140.707031  119.998779  1770.113037  6330.596436   39.997559       19.998779
2    8220.709229    1790.111816 -3296.138916  8220.709229  119.999756  1790.111816  6330.596436  100.000977        0.000977
3    8220.709229    1890.111816 -3296.138916  8220.709229    0.001250  1890.111816  6330.596436    0.000977      -99.999023
4    8420.708252    1990.111816 -3296.138916  8420.708252  200.000000  1990.111816  6330.596436  100.000000        0.000000
5    8540.707031    2190.111816 -3296.138916  8540.707031  219.998779  2190.111816  6330.596436   19.998779       19.998779
6    8920.708252    2190.111816 -3296.138916  8920.708252  400.000000  2190.111816  6610.596436  120.000000       20.000000
7    8920.708252    2309.800537 -3295.515137  8920.708252    0.010000  2309.800537  6610.596436    0.311279      -79.376221
8    9240.085693    2389.488037 -3295.515137  9240.085693  319.688721  2389.488037  6730.597656  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638405/4096.[0m
[08/30 10:43:51]  --------------------------------------------------------------------------------
[08/30 10:43:51]  Iteration: 50 (8 solution, 41 counterexamples)
[08/30 10:43:53]  Generator returned sat in 0.957622 secs.
[08/30 10:43:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:53]  Verifer returned unsat in 0.171945 secs.
[08/30 10:43:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:53]  --------------------------------------------------------------------------------
[08/30 10:43:53]  Iteration: 51 (9 solution, 41 counterexamples)
[08/30 10:43:54]  Generator returned sat in 0.211790 secs.
[08/30 10:43:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:54]  Verifer returned unsat in 0.080033 secs.
[08/30 10:43:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:54]  --------------------------------------------------------------------------------
[08/30 10:43:54]  Iteration: 52 (10 solution, 41 counterexamples)
[08/30 10:43:55]  Generator returned sat in 0.468958 secs.
[08/30 10:43:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:55]  Improved gap from 0.0 to 1.5625
[08/30 10:43:56]  Improved number of small numbers from 60 to 100 out of a max of 100
[08/30 10:43:56]  Verifer returned sat in 0.300152 secs.
[08/30 10:43:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7572.235596    1728.828125 -3569.484619  7572.235596    0.094482  1728.828125  5843.407471    0.000000       -0.000244
1    7692.188477    1828.828369 -3569.484619  7692.188477  119.952881  1828.828369  5843.407471   19.952637       19.952637
2    7792.188477    1828.828369 -3569.484619  7792.188477  119.952637  1828.828369  5843.407471  119.952637       19.952637
3    7891.283203    1928.828369 -3569.484619  7891.283203  219.047363  1928.828369  5843.407471  119.047363       19.047363
4    7992.283203    2128.828369 -3569.484619  7992.283203  220.047363  2128.828369  5843.454834   20.000000       20.000000
5    7992.283203    2148.781006 -3490.999756  7992.283203    1.000000  2148.781006  5843.454834    0.047363       -1.515137
6    7994.235840    2150.343506 -3392.562256  7994.235840    2.000000  2150.343506  5843.454834    0.437500       -1.125000
7    7996.798340    2153.296143 -3295.515137  7996.798340    3.000000  2153.296143  5843.454834    0.047363       -1.515381
8    8000.750977    2154.858887 -3295.515137  8000.750977    4.000000  2154.858887  5843.454834    2.437256      -97.562744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:43:56]  --------------------------------------------------------------------------------
[08/30 10:43:56]  Iteration: 53 (10 solution, 42 counterexamples)
[08/30 10:43:57]  Generator returned sat in 0.288990 secs.
[08/30 10:43:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:43:57]  Improved gap from 1.0075 to 1.5625
[08/30 10:43:58]  Improved number of small numbers from 45 to 81 out of a max of 100
[08/30 10:43:58]  Verifer returned sat in 1.010043 secs.
[08/30 10:43:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    8166.183203    2322.730713 -4163.386963  8166.183203    0.094238  2322.730713  5843.452393   0.000098        0.000098
1    8286.180664    2422.730713 -4163.386963  8286.180664  119.997559  2422.730713  5843.452393  19.997559       19.997559
2    8286.748291    2422.730713 -4083.952148  8286.748291   20.565186  2422.730713  5843.452393  20.565186        0.000000
3    8386.748047    2541.733369 -4083.952119  8386.748047  120.564941  2541.733369  5843.452393   1.562285       -0.000215
4    8506.750703    2643.295654 -4083.952119  8506.750703  121.564941  2643.295654  5843.454834  20.000215       20.000000
5    8506.750703    2661.733154 -4003.952119  8506.750703    0.010000  2661.733154  5843.454834   1.562715        0.000000
6    8506.750703    2663.295869 -3905.514648  8506.750703    1.010000  2663.295869  5843.454834   0.000000       -1.562529
7    8508.760703    2665.303369 -3807.522217  8508.760703    2.010000  2665.303369  5843.454834   0.002500       -1.560098
8    8511.768203    2666.865967 -3807.521973  8511.768203    3.010000  2666.865967  5843.454834   1.447402      -98.552354
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:43:58]  --------------------------------------------------------------------------------
[08/30 10:43:58]  Iteration: 54 (10 solution, 43 counterexamples)
[08/30 10:44:00]  Generator returned sat in 1.041724 secs.
[08/30 10:44:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:00]  Improved gap from 0.047119140625 to 6.25
[08/30 10:44:00]  Improved number of small numbers from 53 to 100 out of a max of 100
[08/30 10:44:00]  Verifer returned sat in 0.503521 secs.
[08/30 10:44:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8127.703613    2164.295898 -3960.271973  8127.703613    0.093994  2164.295898  5843.407715  120.000000       20.000000
1    8127.703613    2264.295898 -3960.271973  8127.703613    0.047119  2264.295898  5843.407715   20.000000      -80.000000
2    8307.750732    2364.295898 -3960.271973  8307.750732  200.047119  2364.295898  5843.407715  100.047119        0.047119
3    8307.750732    2464.295898 -3866.521973  8307.750732   62.648438  2464.295898  5843.407715    0.047119       -6.202881
4    8434.000488    2570.545654 -3866.521973  8434.000488  126.296875  2570.545654  5843.454590   20.000244       20.000000
5    8434.000488    2584.295654 -3786.521973  8434.000488    1.000000  2584.295654  5843.454590    6.250244        0.000000
6    8434.000488    2590.545898 -3692.771973  8434.000488    3.000000  2590.545898  5843.454590    0.000000       -6.250000
7    8441.000488    2596.795898 -3599.021973  8441.000488    7.000000  2596.795898  5843.454590    0.750000       -5.500000
8    8455.250488    2603.045898 -3507.771973  8455.250488   15.000000  2603.045898  5843.454590    8.750000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:44:01]  --------------------------------------------------------------------------------
[08/30 10:44:01]  Iteration: 55 (10 solution, 44 counterexamples)
[08/30 10:44:02]  Generator returned sat in 0.831211 secs.
[08/30 10:44:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:02]  Improved gap from 0.0469970703125 to 100
[08/30 10:44:02]  Improved number of small numbers from 74 to 100 out of a max of 100
[08/30 10:44:02]  Verifer returned sat in 0.345403 secs.
[08/30 10:44:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8053.953369    2190.639648 -3866.521973  8053.953369    0.093750  2190.639648  5843.313721   20.000000       20.000000
1    8154.000488    2271.687012 -3866.521973  8154.000488  120.047119  2271.687012  5843.360840   38.952637       20.000000
2    8154.000732    2290.639648 -3866.521973  8154.000732   38.952881  2290.639648  5843.360840   20.000244      -79.999756
3    8354.047363    2490.639648 -3866.521973  8354.047363  220.046875  2490.639648  5843.407715   20.000000       20.000000
4    8354.047363    2490.639893 -3866.521973  8354.047363    1.000000  2490.639893  5843.407715   19.999756      -80.000000
5    8554.000488    2690.639648 -3866.521973  8554.000488  219.952881  2690.639648  5843.407715   19.953125       19.953125
6    8935.047363    2690.639893 -3866.521973  8935.047363  401.000000  2690.639893  6124.407715  119.999756       20.000000
7    8935.047363    2810.592773 -3866.521973  8935.047363    1.000000  2810.592773  6124.407715    0.046875      -80.000000
8    9255.953369    2890.639893 -3866.521973  9255.953369  320.952881  2890.639893  6245.313721  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1646207/4096.[0m
[08/30 10:44:03]  --------------------------------------------------------------------------------
[08/30 10:44:03]  Iteration: 56 (10 solution, 45 counterexamples)
[08/30 10:44:04]  Generator returned sat in 0.963493 secs.
[08/30 10:44:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:05]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/30 10:44:05]  Verifer returned sat in 0.222039 secs.
[08/30 10:44:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7826.178223    1862.864502 -3866.521973  7826.178223    0.093750  1862.864502  5843.313721  120.000000       20.000000
1    7926.131348    1979.841064 -3866.521973  7926.131348  219.953125  1979.841064  5843.313721  102.976562       19.953125
2    8026.225098    2062.864502 -3866.521973  8026.225098  203.070312  2062.864502  5843.360596  120.000000       20.000000
3    8344.131348    2162.864502 -3866.521973  8344.131348  437.906250  2162.864502  6061.266846  120.000000       20.000000
4    8444.084473    2262.864502 -3866.521973  8444.084473  219.953125  2262.864502  6061.266846  119.953125       19.953125
5    8718.131348    2384.911377 -3866.521973  8718.131348  394.000000  2384.911377  6235.266846   97.953125       20.000000
6    8818.178223    2562.864502 -3866.521973  8818.178223  198.000000  2562.864502  6235.313721   20.000000       20.000000
7    8898.178223    2662.817627 -3866.521973  8898.178223  100.000000  2662.817627  6235.313721    0.046875        0.000000
8    9349.084473    2662.864502 -3866.521973  9349.084473  450.953125  2662.864502  6566.219971  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=32317/64.[0m
[08/30 10:44:05]  --------------------------------------------------------------------------------
[08/30 10:44:05]  Iteration: 57 (10 solution, 46 counterexamples)
[08/30 10:44:10]  Generator returned sat in 4.539936 secs.
[08/30 10:44:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:10]  Verifer returned unsat in 0.082503 secs.
[08/30 10:44:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:10]  --------------------------------------------------------------------------------
[08/30 10:44:10]  Iteration: 58 (11 solution, 46 counterexamples)
[08/30 10:44:15]  Generator returned sat in 4.174206 secs.
[08/30 10:44:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:15]  Verifer returned unsat in 0.076019 secs.
[08/30 10:44:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:15]  --------------------------------------------------------------------------------
[08/30 10:44:15]  Iteration: 59 (12 solution, 46 counterexamples)
[08/30 10:44:16]  Generator returned sat in 0.228640 secs.
[08/30 10:44:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:16]  Verifer returned unsat in 0.082664 secs.
[08/30 10:44:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:16]  --------------------------------------------------------------------------------
[08/30 10:44:16]  Iteration: 60 (13 solution, 46 counterexamples)
[08/30 10:44:20]  Generator returned sat in 2.765197 secs.
[08/30 10:44:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:20]  Verifer returned unsat in 0.143111 secs.
[08/30 10:44:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:20]  --------------------------------------------------------------------------------
[08/30 10:44:20]  Iteration: 61 (14 solution, 46 counterexamples)
[08/30 10:44:21]  Generator returned sat in 0.201737 secs.
[08/30 10:44:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:21]  Verifer returned unsat in 0.206262 secs.
[08/30 10:44:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:21]  --------------------------------------------------------------------------------
[08/30 10:44:21]  Iteration: 62 (15 solution, 46 counterexamples)
[08/30 10:44:23]  Generator returned sat in 0.951800 secs.
[08/30 10:44:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:23]  Improved number of small numbers from 25 to 99 out of a max of 99
[08/30 10:44:23]  Verifer returned sat in 0.411830 secs.
[08/30 10:44:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7116.404053    1055.137207 -3714.451904  7116.404053    0.093262  1055.137207  6061.219971    0.046875            -4.0
1    7220.404053    1059.184082 -3714.451904  7220.404053  104.046875  1059.184082  6061.219971  100.000000             0.0
2    7220.404053    1159.184082 -3714.451904  7220.404053    0.046875  1159.184082  6061.219971    0.000000          -100.0
3    7440.450928    1323.168457 -3714.451904  7440.450928  220.046875  1323.168457  6061.266846   56.015625            20.0
4    7518.450928    1457.137207 -3714.451904  7518.450928  134.015625  1457.137207  6061.266846    0.046875            -2.0
5    7917.357178    1559.184082 -3714.451904  7917.357178  398.953125  1559.184082  6338.173096   20.000000            20.0
6    8097.357178    1659.184082 -3714.451904  8097.357178  200.000000  1659.184082  6418.173096   20.000000            20.0
7    8245.364990    1725.168457 -3714.451904  8245.364990  168.007812  1725.168457  6466.180908   54.015625            20.0
8    8325.364990    1759.184082 -3714.451904  8325.364990  134.015625  1759.184082  6466.180908  100.000000             0.0
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=51829/128.[0m
[08/30 10:44:24]  --------------------------------------------------------------------------------
[08/30 10:44:24]  Iteration: 63 (15 solution, 47 counterexamples)
[08/30 10:44:28]  Generator returned sat in 3.859483 secs.
[08/30 10:44:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:44:28]  Improved gap from 0.0233154296875 to 100
[08/30 10:44:29]  Improved number of small numbers from 30 to 46 out of a max of 100
[08/30 10:44:29]  Verifer returned sat in 1.012474 secs.
[08/30 10:44:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7781.467529    1700.200684 -4355.46851  7781.467529    0.093262  1700.200684  6061.266846   20.000000       19.999996
1    7861.490723    1800.177490 -4355.46851  7861.490723  100.023193  1800.177490  6061.266846    0.046387        0.023189
2    7861.490723    1800.200688 -4355.46851  7861.490723    0.023438  1800.200688  6061.266846    0.023189      -99.976811
3    7995.705299    1900.200688 -4355.46851  7995.705299  134.237766  1900.200688  6061.266846   34.237766      -65.762234
4    8162.824182    2100.200688 -4355.46851  8162.824182  201.356649  2100.200688  6061.266846    1.356649        1.356649
5    8463.502506    2200.200688 -4355.46851  8463.502506  302.034973  2200.200688  6243.301819   20.000000       20.000000
6    8642.502506    2247.518477 -4355.46851  8642.502506  199.000000  2247.518477  6322.301819   72.682210       20.000000
7    8742.479191    2400.200688 -4355.46851  8742.479191  172.658895  2400.200688  6322.301819   19.976685       19.976685
8    8981.490849    2400.200928 -4355.46851  8981.490849  258.988342  2400.200928  6461.290161  119.999760       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=3276991/8192.[0m
[08/30 10:44:29]  --------------------------------------------------------------------------------
[08/30 10:44:29]  Iteration: 64 (15 solution, 48 counterexamples)
[08/30 10:44:36]  Generator returned sat in 5.509645 secs.
[08/30 10:44:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:44:36]  Verifer returned unsat in 0.271914 secs.
[08/30 10:44:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:44:36]  --------------------------------------------------------------------------------
[08/30 10:44:36]  Iteration: 65 (16 solution, 48 counterexamples)
[08/30 10:44:38]  Generator returned sat in 1.135888 secs.
[08/30 10:44:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:44:38]  Verifer returned unsat in 0.206552 secs.
[08/30 10:44:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:44:38]  --------------------------------------------------------------------------------
[08/30 10:44:38]  Iteration: 66 (17 solution, 48 counterexamples)
[08/30 10:44:39]  Generator returned sat in 0.426674 secs.
[08/30 10:44:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:44:40]  Improved number of small numbers from 36 to 49 out of a max of 99
[08/30 10:44:40]  Verifer returned sat in 1.138679 secs.
[08/30 10:44:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7555.510254    1494.243408 -4449.608154  7555.510254    0.093262  1494.243408  6061.266846    0.000000       -0.000347
1    7655.510254    1594.243408 -4449.607963  7655.510254  100.000000  1594.243408  6061.266846    0.000000       -0.000155
2    7655.556885    1594.243564 -4449.607963  7655.556885    0.046631  1594.243564  6061.266846    0.046476      -99.953524
3    7788.874830    1694.243564 -4449.607963  7788.874830  133.364421  1694.243564  6061.266846   33.364421      -66.635579
4    7955.557040    1894.243564 -4449.607963  7955.557040  200.046631  1894.243564  6061.266846    0.046631        0.046631
5    8255.580356    1994.243564 -4449.607963  8255.580356  300.069946  1994.243564  6241.336792   20.000000       20.000000
6    8436.580356    2040.212476 -4449.607963  8436.580356  201.000000  2040.212476  6322.336792   74.031087       20.000000
7    8536.533725    2194.243564 -4449.607963  8536.533725  173.984456  2194.243564  6322.336792   19.953369       19.953369
8    8777.557040    2194.243652 -4449.607963  8777.557040  260.976685  2194.243652  6463.313477  119.999911       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=1646783/4096.[0m
[08/30 10:44:41]  --------------------------------------------------------------------------------
[08/30 10:44:41]  Iteration: 67 (17 solution, 49 counterexamples)
[08/30 10:44:45]  Generator returned sat in 3.127311 secs.
[08/30 10:44:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:45]  Improved gap from 61.9300537109375 to 100
[08/30 10:44:46]  Improved number of small numbers from 47 to 55 out of a max of 100
[08/30 10:44:46]  Verifer returned sat in 1.014338 secs.
[08/30 10:44:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7689.395508    1628.128540 -4495.941201  7689.395508    0.093018  1628.128540  6061.266846    0.000122       -0.046509
1    7689.442017    1628.175171 -4495.941201  7689.442017    0.046631  1628.175171  6061.266846    0.000000     -100.000000
2    7909.395386    1740.988525 -4495.941201  7909.395386  219.953369  1740.988525  6061.266846  107.140015       19.953369
3    7909.395386    1828.175171 -4495.941201  7909.395386  107.093262  1828.175171  6061.266846   19.953369      -80.046631
4    8097.558594    2028.175171 -4495.941201  8097.558594  208.116577  2028.175171  6061.266846    8.116577        8.116577
5    8498.558594    2128.175049 -4495.941201  8498.558594  409.116577  2128.175049  6350.383423   20.000122       20.000000
6    8498.558594    2128.175171 -4495.941201  8498.558594    1.000000  2128.175171  6350.383423   20.000000      -80.000000
7    8630.558594    2280.128540 -4495.941201  8630.558594  152.000000  2280.128540  6350.383423    0.046631      -48.000000
8    8909.488647    2328.175293 -4495.941201  8909.488647  278.976685  2328.175293  6461.313477  119.999878       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638591/4096.[0m
[08/30 10:44:46]  --------------------------------------------------------------------------------
[08/30 10:44:46]  Iteration: 68 (17 solution, 50 counterexamples)
[08/30 10:44:47]  Generator returned sat in 0.422791 secs.
[08/30 10:44:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:48]  Improved number of small numbers from 42 to 52 out of a max of 99
[08/30 10:44:48]  Verifer returned sat in 0.746096 secs.
[08/30 10:44:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7507.568115    1346.299076 -3757.911201  7507.568115    0.092773  1346.299076  6061.266602  100.002438        0.002438
1    7507.568115    1446.299076 -3757.911201  7507.568115    0.002500  1446.299076  6061.266602    0.002438      -99.997562
2    7707.568177    1597.299316 -3757.911201  7707.568177  200.002500  1597.299316  6061.266602   49.002259        0.002500
3    7707.568177    1646.299076 -3757.911201  7707.568177   49.000000  1646.299076  6061.266602    0.002500      -99.997500
4    7907.565677    1846.296576 -3757.911201  7907.565677  200.000000  1846.296576  6061.266602    0.002500        0.000000
5    8308.561927    1846.299316 -3757.911201  8308.561927  400.998750  1846.299316  6342.262852  119.999759       20.000000
6    8308.561927    1966.296576 -3757.911201  8308.561927    0.010000  1966.296576  6342.262852    0.002500      -80.000000
7    8469.568177    2097.629909 -3757.911201  8469.568177  161.008750  2097.629909  6342.262852   29.675417      -18.993750
8    8727.568177    2146.299316 -3757.911201  8727.568177  287.675417  2146.299316  6461.269102  119.999759       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:44:48]  --------------------------------------------------------------------------------
[08/30 10:44:48]  Iteration: 69 (17 solution, 51 counterexamples)
[08/30 10:44:51]  Generator returned sat in 2.493565 secs.
[08/30 10:44:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:52]  Improved gap from 0.0 to 4.6875
[08/30 10:44:52]  Improved number of small numbers from 28 to 100 out of a max of 100
[08/30 10:44:52]  Verifer returned sat in 0.392091 secs.
[08/30 10:44:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7882.582764    1426.330566 -3737.942627  7882.582764    0.092773  1426.330566  6436.252441   19.999756       19.999756
1    7882.582764    1446.299072 -3737.942383  7882.582764    0.031250  1446.299072  6436.252441    0.031250      -80.000000
2    8082.614014    1526.330322 -3737.942383  8082.614014  200.062500  1526.330322  6436.283691  120.000000       20.000000
3    8090.239014    1653.924072 -3737.942383  8090.239014  127.625000  1653.924072  6436.283691    0.031250      -72.375000
4    8282.645264    1826.330322 -3737.942383  8282.645264  192.437500  1826.330322  6436.314941   20.000000       20.000000
5    8282.645264    1826.330566 -3657.942383  8282.645264    1.000000  1826.330566  6436.314941   19.999756        0.000000
6    8282.645264    1846.330322 -3562.661133  8282.645264    2.500000  1846.330322  6436.314941    0.000000       -4.718750
7    8287.395264    1851.049072 -3467.348633  8287.395264    4.750000  1851.049072  6436.314941    0.031250       -4.656250
8    8295.489014    1855.736572 -3372.036133  8295.489014    8.125000  1855.736572  6436.314941    3.437500       -1.250000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:44:52]  --------------------------------------------------------------------------------
[08/30 10:44:52]  Iteration: 70 (17 solution, 52 counterexamples)
[08/30 10:44:54]  Generator returned sat in 0.822801 secs.
[08/30 10:44:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:54]  Verifer returned unsat in 0.188707 secs.
[08/30 10:44:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:54]  --------------------------------------------------------------------------------
[08/30 10:44:54]  Iteration: 71 (18 solution, 52 counterexamples)
[08/30 10:44:56]  Generator returned sat in 1.721611 secs.
[08/30 10:44:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:44:57]  Improved gap from 18.5 to 100
[08/30 10:44:57]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/30 10:44:57]  Verifer returned sat in 0.296867 secs.
[08/30 10:44:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7789.995361    1346.330322 -3657.942627  7789.995361    0.092529  1346.330322  6443.664795    0.000244        0.000244
1    7889.995117    1427.830322 -3657.942627  7889.995117  100.000000  1427.830322  6443.664795   18.500000        0.000000
2    8009.902344    1518.737549 -3657.942627  8009.902344  138.407227  1518.737549  6443.664795   47.500000       19.907227
3    8110.087891    1546.330322 -3657.942627  8110.087891  147.685547  1546.330322  6443.757568  120.000000       20.000000
4    8110.087891    1646.330322 -3657.942627  8110.087891    1.000000  1646.330322  6443.757568   20.000000      -80.000000
5    8310.087891    1846.330322 -3657.942627  8310.087891  220.000000  1846.330322  6443.757568   20.000000       20.000000
6    8728.680664    1846.330322 -3657.942627  8728.680664  438.592773  1846.330322  6762.350342  120.000000       20.000000
7    8728.680664    1946.330322 -3657.942627  8728.680664    1.000000  1946.330322  6762.350342   20.000000      -80.000000
8    9010.180664    2046.330322 -3657.942627  9010.180664  301.500000  2046.330322  6843.850342  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=409695/1024.[0m
[08/30 10:44:57]  --------------------------------------------------------------------------------
[08/30 10:44:57]  Iteration: 72 (18 solution, 53 counterexamples)
[08/30 10:45:01]  Generator returned sat in 3.291739 secs.
[08/30 10:45:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:02]  Verifer returned unsat in 0.940730 secs.
[08/30 10:45:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:02]  --------------------------------------------------------------------------------
[08/30 10:45:02]  Iteration: 73 (19 solution, 53 counterexamples)
[08/30 10:45:04]  Generator returned sat in 1.568335 secs.
[08/30 10:45:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:05]  Verifer returned unsat in 0.174877 secs.
[08/30 10:45:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:05]  --------------------------------------------------------------------------------
[08/30 10:45:05]  Iteration: 74 (20 solution, 53 counterexamples)
[08/30 10:45:06]  Generator returned sat in 0.741932 secs.
[08/30 10:45:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:06]  Verifer returned unsat in 0.136076 secs.
[08/30 10:45:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:06]  --------------------------------------------------------------------------------
[08/30 10:45:06]  Iteration: 75 (21 solution, 53 counterexamples)
[08/30 10:45:08]  Generator returned sat in 0.720938 secs.
[08/30 10:45:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:09]  Verifer returned unsat in 0.648470 secs.
[08/30 10:45:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:45:09]  --------------------------------------------------------------------------------
[08/30 10:45:09]  Iteration: 76 (22 solution, 53 counterexamples)
[08/30 10:45:13]  Generator returned sat in 3.668833 secs.
[08/30 10:45:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:45:15]  Improved gap from 0.001 to 1.5625
[08/30 10:45:15]  Improved number of small numbers from 52 to 100 out of a max of 100
[08/30 10:45:15]  Verifer returned sat in 2.177308 secs.
[08/30 10:45:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t    losts_0,t   queue_t  bottle_queue_t
0    6356.564209     -89.880859 -3872.924316  6356.564209  0.092529   -89.880859  6443.757568  2.687500        1.562256
1    6356.564209     -88.755615 -3774.486816  6356.564209  2.687256   -88.755615  6443.757568  1.562256       -0.000244
2    6356.610840     -87.193115 -3676.049316  6356.610840  1.608887   -87.193115  6443.757568  0.046387       -1.516113
3    6360.126709     -85.193115 -3578.049316  6360.126709  3.562256   -85.193115  6443.757568  1.562256       -0.000244
4    6361.689453     -83.630615 -3479.611816  6361.689453  3.125000   -83.630615  6443.757568  1.562500        0.000000
5    6363.251953     -82.068115 -3381.174316  6363.251953  3.125000   -82.068115  6443.757568  1.562500        0.000000
6    6364.814453     -80.505615 -3282.736816  6364.814453  3.125000   -80.505615  6443.757568  1.562500        0.000000
7    6366.158203     -78.943115 -3184.299316  6366.158203  2.906250   -78.943115  6443.757568  1.343750       -0.218750
8    6367.611328     -77.380615 -3085.861816  6367.611328  2.796875   -77.380615  6443.757568  1.234375       -0.328125
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=0, loss_amount=0.[0m
[08/30 10:45:16]  --------------------------------------------------------------------------------
[08/30 10:45:16]  Iteration: 77 (22 solution, 54 counterexamples)
[08/30 10:45:19]  Generator returned sat in 2.640323 secs.
[08/30 10:45:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:45:19]  Improved gap from 0.00125 to 100
[08/30 10:45:20]  Improved number of small numbers from 53 to 71 out of a max of 100
[08/30 10:45:20]  Verifer returned sat in 1.142459 secs.
[08/30 10:45:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6283.771484    -159.939860 -3872.924316  6283.771484    0.092529  -159.939860  6443.711182    0.000163      -99.999837
1    6503.725179     -59.939860 -3872.924316  6503.725179  219.953857   -59.939860  6443.711182  119.953857       19.953857
2    6603.817708     132.711182 -3872.924316  6603.817708  220.046387   132.711182  6443.757568   27.348958       20.000000
3    6603.817708     160.013875 -3872.924316  6603.817708   27.348755   160.013875  6443.757568    0.046265      -80.000000
4    6803.771444     340.060140 -3872.924316  6803.771444  200.000000   340.060140  6443.757568   19.953735       19.953735
5    7282.817708     440.060059 -3872.924316  7282.817708  499.000000   440.060059  6822.757568   20.000081       20.000000
6    7282.817708     440.060140 -3872.924316  7282.817708    1.000000   440.060140  6822.757568   20.000000      -80.000000
7    7403.340841     540.060140 -3872.924316  7403.340841  140.523132   540.060140  6822.757568   40.523132      -59.476868
8    7672.602407     640.060303 -3872.924316  7672.602407  309.784698   640.060303  6912.542267  119.999837       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=15361137/32768.[0m
[08/30 10:45:21]  --------------------------------------------------------------------------------
[08/30 10:45:21]  Iteration: 78 (22 solution, 55 counterexamples)
[08/30 10:45:23]  Generator returned sat in 1.854885 secs.
[08/30 10:45:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:24]  Improved number of small numbers from 56 to 60 out of a max of 99
[08/30 10:45:24]  Verifer returned sat in 0.849579 secs.
[08/30 10:45:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6281.863770    -159.939860 -3872.924316  6281.863770    0.092529  -159.939860  6441.780579    0.023051      -99.976949
1    6501.817586     -58.009257 -3872.924316  6501.817586  219.976868   -58.009257  6441.780579  118.046265       19.976868
2    6603.817708     132.711182 -3872.924316  6603.817708  220.046387   132.711182  6443.757568   27.348958       20.000000
3    6603.817708     160.037008 -3872.924316  6603.817708   26.658956   160.037008  6443.757568    0.023132      -80.000000
4    6803.771444     340.060140 -3872.924316  6803.771444  199.976868   340.060140  6443.757568   19.953735       19.953735
5    7282.817708     440.060059 -3872.924316  7282.817708  499.000000   440.060059  6822.757568   20.000081       20.000000
6    7282.817708     440.060140 -3872.924316  7282.817708    1.000000   440.060140  6822.757568   20.000000      -80.000000
7    7404.329274     540.060140 -3872.924316  7404.329274  141.511566   540.060140  6822.757568   41.511566      -58.488434
8    7675.085058     640.060303 -3872.924316  7675.085058  312.267349   640.060303  6915.024918  119.999837       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=30884977/65536.[0m
[08/30 10:45:24]  --------------------------------------------------------------------------------
[08/30 10:45:24]  Iteration: 79 (22 solution, 56 counterexamples)
[08/30 10:45:26]  Generator returned sat in 0.522228 secs.
[08/30 10:45:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:26]  Improved gap from 60.9537353515625 to 100
[08/30 10:45:26]  Improved number of small numbers from 19 to 100 out of a max of 100
[08/30 10:45:26]  Verifer returned sat in 0.465735 secs.
[08/30 10:45:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6561.850830     -97.601807 -3935.262451  6561.850830    0.092285   -97.601807  6559.406006  100.046631        0.046631
1    6561.850830       2.398193 -3935.262451  6561.850830    0.046143     2.398193  6559.406006    0.046631      -99.953369
2    6691.896729     132.490723 -3935.262451  6691.896729  130.092529   132.490723  6559.406006    0.000000      -69.907471
3    6761.850586     202.398193 -3935.262451  6761.850586   69.953857   202.398193  6559.406006    0.046387      -99.953613
4    6981.758057     340.060303 -3935.262451  6981.758057  219.953857   340.060303  6559.406006   82.291748       19.953857
5    7288.251221     402.398438 -3935.262451  7288.251221  388.784912   402.398438  6765.853027  119.999756       20.000000
6    7288.251221     522.398193 -3935.262451  7288.251221    1.000000   522.398193  6765.853027    0.000000      -80.000000
7    7449.251221     683.351807 -3935.262451  7449.251221  161.000000   683.351807  6765.853027    0.046387      -19.000000
8    7781.850586     702.398193 -3935.262451  7781.850586  332.645752   702.398193  6959.452393  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=819295/2048.[0m
[08/30 10:45:27]  --------------------------------------------------------------------------------
[08/30 10:45:27]  Iteration: 80 (22 solution, 57 counterexamples)
[08/30 10:45:28]  Generator returned sat in 0.910284 secs.
[08/30 10:45:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:29]  Verifer returned unsat in 0.458968 secs.
[08/30 10:45:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:29]  --------------------------------------------------------------------------------
[08/30 10:45:29]  Iteration: 81 (23 solution, 57 counterexamples)
[08/30 10:45:31]  Generator returned sat in 0.957303 secs.
[08/30 10:45:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:31]  Verifer returned unsat in 0.487125 secs.
[08/30 10:45:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:31]  --------------------------------------------------------------------------------
[08/30 10:45:31]  Iteration: 82 (24 solution, 57 counterexamples)
[08/30 10:45:32]  Generator returned sat in 0.364571 secs.
[08/30 10:45:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:33]  Verifer returned unsat in 0.550687 secs.
[08/30 10:45:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:33]  --------------------------------------------------------------------------------
[08/30 10:45:33]  Iteration: 83 (25 solution, 57 counterexamples)
[08/30 10:45:34]  Generator returned sat in 0.560154 secs.
[08/30 10:45:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:35]  Improved gap from 0.046142578125 to 100
[08/30 10:45:35]  Improved number of small numbers from 27 to 35 out of a max of 100
[08/30 10:45:35]  Verifer returned sat in 0.985854 secs.
[08/30 10:45:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7684.312500    1329.627930 -3935.262451  7684.312500    0.092041  1329.627930  6334.684550   20.000020       19.999947
1    7684.312500    1329.628003 -3935.262451  7684.312500    0.046143  1329.628003  6334.684550   19.999947      -80.000053
2    7771.086885    1436.356193 -3935.262451  7771.086885  106.774333  1436.356193  6334.684550    0.046143      -93.225667
3    7917.676648    1529.628003 -3935.262451  7917.676648  146.635905  1529.628003  6334.684550   53.364095      -46.635905
4    8084.266410    1709.812573 -3935.262451  8084.266410  219.953857  1709.812573  6334.684550   39.769287       19.953857
5    8374.427909    1729.628003 -3935.262451  8374.427909  329.930786  1729.628003  6524.799906  120.000000       20.000000
6    8401.063814    1829.628003 -3935.262451  8401.063814  146.635905  1829.628003  6524.799906   46.635905      -53.364095
7    8574.381766    2029.628003 -3935.262451  8574.381766  219.953857  2029.628003  6524.799906   19.953857       19.953857
8    8884.358695    2029.628174 -3935.262451  8884.358695  329.930786  2029.628174  6734.730693  119.999829       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638589/4096.[0m
[08/30 10:45:36]  --------------------------------------------------------------------------------
[08/30 10:45:36]  Iteration: 84 (25 solution, 58 counterexamples)
[08/30 10:45:41]  Generator returned sat in 4.693388 secs.
[08/30 10:45:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:45:42]  Improved gap from 0.0 to 100
[08/30 10:45:42]  Improved number of small numbers from 48 to 59 out of a max of 100
[08/30 10:45:42]  Verifer returned sat in 0.894911 secs.
[08/30 10:45:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8198.568359    1863.884200 -3935.262451  8198.568359    0.092041  1863.884200  6334.638428    0.045731      -41.862228
1    8360.476486    1905.792159 -3935.262451  8360.476486  161.953857  1905.792159  6334.684326  120.000000       20.000000
2    8440.522506    2005.792159 -3935.262451  8440.522506  200.046021  2005.792159  6334.684326  100.046021        0.046021
3    8440.522506    2105.792159 -3935.262451  8440.522506  100.046021  2105.792159  6334.684326    0.046021      -99.953979
4    8660.476486    2305.792159 -3935.262451  8660.476486  220.000000  2305.792159  6334.684326   20.000000       20.000000
5    9059.476486    2305.792236 -3935.262451  9059.476486  419.000000  2305.792236  6633.684326  119.999923       20.000000
6    9059.476486    2425.746139 -3935.262451  9059.476486    1.000000  2425.746139  6633.684326    0.046021      -80.000000
7    9219.407455    2585.677108 -3935.262451  9219.407455  159.976990  2585.677108  6633.684326    0.046021      -20.069031
8    9518.280898    2605.792236 -3935.262451  9518.280898  298.919464  2605.792236  6792.488739  119.999923       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=15001335/32768.[0m
[08/30 10:45:43]  --------------------------------------------------------------------------------
[08/30 10:45:43]  Iteration: 85 (25 solution, 59 counterexamples)
[08/30 10:45:46]  Generator returned sat in 3.003059 secs.
[08/30 10:45:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:45:47]  Improved gap from 0.02301025390625 to 76.5625
[08/30 10:45:47]  Improved number of small numbers from 53 to 100 out of a max of 100
[08/30 10:45:47]  Verifer returned sat in 0.416325 secs.
[08/30 10:45:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8340.877686    2006.147461 -3935.262451  8340.877686    0.091797  2006.147461  6334.684326    0.045898        0.045898
1    8418.578369    2083.848145 -3935.262451  8418.578369   77.746582  2083.848145  6334.684326    0.045898      -22.253418
2    8440.877686    2106.147461 -3933.916992  8440.877686   22.345215  2106.147461  6334.684326    0.045898      -98.608643
3    8539.532471    2204.802002 -3933.916992  8539.532471   98.700684  2204.802002  6334.684326    0.046143      -99.953857
4    8737.140869    2304.802002 -3933.916992  8737.140869  197.654541  2304.802002  6334.684326   97.654541       -2.345459
5    8859.440186    2504.802002 -3933.916992  8859.440186  219.953857  2504.802002  6334.684326   19.953857       19.953857
6    9237.140869    2504.802002 -3933.916992  9237.140869  397.654541  2504.802002  6612.338867  120.000000       20.000000
7    9237.140869    2624.756104 -3930.433594  9237.140869    1.000000  2624.756104  6612.338867    0.045898      -76.516602
8    9556.049072    2701.318604 -3930.433594  9556.049072  318.954102  2701.318604  6734.730469  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=1638589/4096.[0m
[08/30 10:45:47]  --------------------------------------------------------------------------------
[08/30 10:45:47]  Iteration: 86 (25 solution, 60 counterexamples)
[08/30 10:45:49]  Generator returned sat in 0.559083 secs.
[08/30 10:45:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:45:49]  Improved number of small numbers from 54 to 99 out of a max of 99
[08/30 10:45:49]  Verifer returned sat in 0.333985 secs.
[08/30 10:45:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8318.601318    2552.975830 -3933.917236  8318.601318    0.091553  2552.975830  5745.625488   20.000000       20.000000
1    8418.578125    2552.975830 -3933.917236  8418.578125  119.976807  2552.975830  5745.625488  119.976807       19.976807
2    8498.601318    2752.929932 -3933.917236  8498.601318  200.000000  2752.929932  5745.625488    0.045898        0.000000
3    8498.601318    2752.975830 -3933.917236  8498.601318    0.022705  2752.975830  5745.625488    0.000000     -100.000000
4    8697.601318    2948.067627 -3933.916992  8697.601318  199.000000  2948.067627  5745.625488    3.908203       -0.999756
5    9087.784912    3052.975586 -3933.916992  9087.784912  394.091797  3052.975586  6014.809326   20.000000       20.000000
6    9265.830811    3152.975586 -3933.916992  9265.830811  198.045898  3152.975586  6092.855225   20.000000       20.000000
7    9345.853760    3252.975586 -3933.916992  9345.853760  100.022949  3252.975586  6092.855225    0.022949        0.022949
8    9649.738770    3252.975830 -3933.916992  9649.738770  303.907959  3252.975830  6276.763184  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=3, loss_amount=543885/1024.[0m
[08/30 10:45:49]  --------------------------------------------------------------------------------
[08/30 10:45:49]  Iteration: 87 (25 solution, 61 counterexamples)
[08/30 10:45:56]  Generator returned sat in 5.461085 secs.
[08/30 10:45:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:56]  Verifer returned unsat in 0.329608 secs.
[08/30 10:45:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:56]  --------------------------------------------------------------------------------
[08/30 10:45:56]  Iteration: 88 (26 solution, 61 counterexamples)
[08/30 10:45:57]  Generator returned sat in 0.403629 secs.
[08/30 10:45:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:58]  Verifer returned unsat in 0.330193 secs.
[08/30 10:45:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:45:58]  --------------------------------------------------------------------------------
[08/30 10:45:58]  Iteration: 89 (27 solution, 61 counterexamples)
[08/30 10:46:04]  Generator returned sat in 5.267143 secs.
[08/30 10:46:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:46:05]  Improved number of small numbers from 17 to 21 out of a max of 99
[08/30 10:46:05]  Verifer returned sat in 0.881617 secs.
[08/30 10:46:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7981.037842    2795.479406 -4153.988545  7981.037842    0.091553  2795.479406  5165.558454   19.999982       19.999982
1    8061.037860    2795.479406 -4153.988545  8061.037860  100.000000  2795.479406  5165.558454  100.000000        0.000000
2    8180.992083    2995.479406 -4153.988545  8180.992083  219.954224  2995.479406  5165.558454   19.954224       19.954224
3    8851.495623    2995.479406 -4153.988545  8851.495623  690.457764  2995.479406  5736.016217  120.000000       20.000000
4    9075.724505    3095.479406 -4153.988545  9075.724505  344.228882  3095.479406  5860.245099  120.000000       20.000000
5    9126.838946    3266.548070 -4153.988545  9126.838946  171.114441  3266.548070  5860.245099    0.045776      -28.885559
6    9396.861834    3361.445074 -4153.988545  9396.861834  270.068665  3361.445074  5981.382428   54.034332       20.000000
7    9476.861834    3495.433630 -4153.988545  9476.861834  134.034332  3495.433630  5981.382428    0.045776        0.000000
8    9875.770282    3495.479492 -4153.988545  9875.770282  398.954224  3495.479492  6260.290876  119.999914       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, loss_count=3, loss_amount=3277175/8192.[0m
[08/30 10:46:05]  --------------------------------------------------------------------------------
[08/30 10:46:05]  Iteration: 90 (27 solution, 62 counterexamples)
[08/30 10:46:08]  Generator returned sat in 2.020715 secs.
[08/30 10:46:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/30 10:46:08]  Improved gap from 39.015 to 100
[08/30 10:46:09]  Improved number of small numbers from 28 to 34 out of a max of 100
[08/30 10:46:09]  Verifer returned sat in 1.072098 secs.
[08/30 10:46:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7891.046387    2705.488156 -4153.988545  7891.046387    0.091553  2705.488156  5165.558454   19.999777       19.999777
1    7991.044110    2705.488156 -4153.988545  7991.044110  119.997500  2705.488156  5165.558454  119.997500       19.997500
2    8050.567860    2885.006906 -4153.988545  8050.567860  179.521250  2885.006906  5165.558454    0.002500      -20.478750
3    8171.046610    2905.488156 -4153.988545  8171.046610  120.481250  2905.488156  5165.558454  100.000000        0.000000
4    8290.527860    3105.488156 -4153.988545  8290.527860  219.481250  3105.488156  5165.558454   19.481250       19.481250
5    8689.527860    3205.488037 -4153.988545  8689.527860  418.481250  3205.488037  5464.039704   20.000119       20.000000
6    8689.527860    3205.488156 -4153.988545  8689.527860    0.010000  3205.488156  5464.039704   20.000000      -80.000000
7    8818.537860    3354.495656 -4153.988545  8818.537860  149.010000  3354.495656  5464.039704    0.002500      -50.990000
8    9091.049110    3405.488281 -4153.988545  9091.049110  272.513750  3405.488281  5565.560954  119.999875       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:46:10]  --------------------------------------------------------------------------------
[08/30 10:46:10]  Iteration: 91 (27 solution, 63 counterexamples)
[08/30 10:46:14]  Generator returned sat in 3.177295 secs.
[08/30 10:46:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:14]  Verifer returned unsat in 0.197529 secs.
[08/30 10:46:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:14]  --------------------------------------------------------------------------------
[08/30 10:46:14]  Iteration: 92 (28 solution, 63 counterexamples)
[08/30 10:46:15]  Generator returned sat in 0.680551 secs.
[08/30 10:46:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:16]  Improved gap from 0.0 to 0
[08/30 10:46:17]  Improved number of small numbers from 28 to 43 out of a max of 100
[08/30 10:46:17]  Verifer returned sat in 1.247613 secs.
[08/30 10:46:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8569.532959    3385.495850 -4729.549008  8569.532959    0.091553  3385.495850  5064.037204  119.999906       19.999914
1    8569.532959    3505.493341 -4729.549008  8569.532959  119.997559  3505.493341  5064.037204    0.002414      -80.000086
2    8749.533045    3685.493341 -4729.549008  8749.533045  180.002500  3685.493341  5064.037204    0.002500        0.000000
3    8849.535545    3785.495841 -4729.549008  8849.535545  100.005000  3785.495841  5064.037204    0.002500        0.002500
4    8999.540545    3885.495605 -4729.549008  8999.540545  150.007500  3885.495605  5094.044704   20.000236       20.000000
5    8999.540545    3905.478271 -4649.549008  8999.540545    0.010000  3905.478271  5094.044704    0.017570        0.000000
6    8999.540545    3905.495841 -4549.549072  8999.540545    0.015000  3905.495841  5094.044704    0.000000       -0.000064
7    8999.563045    3905.515841 -4449.571533  8999.563045    0.022500  3905.515841  5094.044704    0.002500       -0.000025
8    8999.594295    3905.518555 -4349.602783  8999.594295    0.033750  3905.518555  5094.044704    0.031036       -0.000025
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:46:17]  --------------------------------------------------------------------------------
[08/30 10:46:17]  Iteration: 93 (28 solution, 64 counterexamples)
[08/30 10:46:21]  Generator returned sat in 3.116332 secs.
[08/30 10:46:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:21]  Improved gap from 0.0025 to 100
[08/30 10:46:22]  Improved number of small numbers from 28 to 36 out of a max of 100
[08/30 10:46:22]  Verifer returned sat in 1.159608 secs.
[08/30 10:46:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    8367.059814    3183.022716 -4527.075883  8367.059814    0.091553  3183.022716  5064.037204  119.999895       19.999895
1    8467.057420    3283.022716 -4527.075883  8467.057420  219.997500  3283.022716  5064.037204  119.997500       19.997500
2    8547.062420    3413.025391 -4527.075883  8547.062420  200.002500  3413.025391  5064.037204   69.999825        0.002500
3    8547.062420    3483.022716 -4527.075883  8547.062420   69.997500  3483.022716  5064.037204    0.002500      -99.997500
4    8767.057420    3678.006466 -4527.075883  8767.057420  219.997500  3678.006466  5064.037204   25.013750       19.997500
5    9159.533045    3783.022705 -4527.075883  9159.533045  417.489375  3783.022705  5356.510329   20.000011       20.000000
6    9159.533045    3783.022716 -4527.075883  9159.533045    0.010000  3783.022716  5356.510329   20.000000      -80.000000
7    9289.543045    3933.030216 -4527.075883  9289.543045  150.010000  3933.030216  5356.510329    0.002500      -49.990000
8    9567.062420    3983.022949 -4527.075883  9567.062420  277.521875  3983.022949  5464.039704  119.999767       20.000000
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, loss_count=2, loss_amount=160001/400.[0m
[08/30 10:46:23]  --------------------------------------------------------------------------------
[08/30 10:46:23]  Iteration: 94 (28 solution, 65 counterexamples)
[08/30 10:46:29]  Generator returned sat in 5.468897 secs.
[08/30 10:46:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:30]  Verifer returned unsat in 0.399589 secs.
[08/30 10:46:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:30]  --------------------------------------------------------------------------------
[08/30 10:46:30]  Iteration: 95 (29 solution, 65 counterexamples)
[08/30 10:46:32]  Generator returned sat in 1.921809 secs.
[08/30 10:46:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:33]  Verifer returned unsat in 0.149473 secs.
[08/30 10:46:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:33]  --------------------------------------------------------------------------------
[08/30 10:46:33]  Iteration: 96 (30 solution, 65 counterexamples)
[08/30 10:46:36]  Generator returned sat in 2.111702 secs.
[08/30 10:46:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:36]  Improved gap from 0.0025 to 0
[08/30 10:46:37]  Improved number of small numbers from 28 to 47 out of a max of 100
[08/30 10:46:37]  Verifer returned sat in 1.078294 secs.
[08/30 10:46:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    9523.527832    4337.017578 -5556.984619  9523.527832    0.091309  4337.017578  5166.510329  19.999925       19.999801
1    9523.527832    4337.017716 -5556.984619  9523.527832    0.002686  4337.017716  5166.510329  19.999787      -80.000199
2    9703.530545    4477.017578 -5556.984619  9703.530545  200.002500  4477.017578  5166.510329  60.002638        0.002514
3    9703.530545    4537.017716 -5456.987133  9703.530545   60.002500  4537.017716  5166.510329   0.002500        0.000000
4    9823.533045    4637.020020 -5456.987133  9823.533045  120.005000  4637.020020  5166.512829  20.000197       20.000000
5    9823.533045    4657.017716 -5377.001953  9823.533045    0.010000  4657.017716  5166.512829   0.002500       -0.014820
6    9823.550545    4657.035216 -5277.039551  9823.550545    0.020000  4657.035216  5166.512829   0.002500       -0.034918
7    9823.588045    4657.072716 -5177.042236  9823.588045    0.040000  4657.072716  5166.512829   0.002500       -0.000103
8    9823.665545    4657.152588 -5077.119873  9823.665545    0.080000  4657.152588  5166.512829   0.000128       -0.000240
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, loss_count=1, loss_amount=0.[0m
[08/30 10:46:37]  --------------------------------------------------------------------------------
[08/30 10:46:37]  Iteration: 97 (30 solution, 66 counterexamples)
[08/30 10:46:42]  Generator returned sat in 3.765158 secs.
[08/30 10:46:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:42]  Verifer returned unsat in 0.530782 secs.
[08/30 10:46:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:42]  --------------------------------------------------------------------------------
[08/30 10:46:42]  Iteration: 98 (31 solution, 66 counterexamples)
[08/30 10:46:44]  Generator returned unsat in 0.484403 secs.
[08/30 10:46:44]  [96mNo more solutions found[0m
[08/30 10:46:44]  Final solutions:
[08/30 10:46:44]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/30 10:46:44]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/30 10:46:44]  Took 275.111409 secs.
