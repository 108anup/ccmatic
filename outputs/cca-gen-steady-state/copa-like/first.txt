[09/28 17:56:18]  --------------------------------------------------------------------------------
[09/28 17:56:18]  Iteration: 1 (0 solution, 0 counterexamples)
[09/28 17:56:18]  Generator returned sat in 0.005388 secs.
[09/28 17:56:18]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:18]  Improved gap from 0.0625 to 100
[09/28 17:56:18]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:56:18]  Verifer returned sat in 0.343935 secs.
[09/28 17:56:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0         0.0625      -199.8750   199.875       0.0625     0.0625    -199.8750        0.0   199.9375        199.9375
1         0.0625       -99.8750   199.875       0.0625     0.0625     -99.8750        0.0    99.9375         99.9375
2         0.0625         0.0000   199.875       0.0625    99.9375       0.0000        0.0     0.0625         -0.0625
3         0.1875         0.1250   199.875       0.1875     0.1875       0.1250        0.0     0.0625        -99.9375
4       201.5000       193.1250   199.875     201.5000   201.3750     193.1250        0.0     8.3750          1.3750
5       889.8750       201.5625   199.875     889.8750   696.7500     201.5625        0.0   688.3125        589.7500
6      1797.6250       300.1250   199.875    1797.6250  1596.0625     300.1250        0.0  1497.5000       1397.5000
7      3793.2500       500.1250   199.875    3793.2500  3493.1250     500.1250        0.0  3293.1250       3293.1250
8      8101.3750       600.1250   199.875    8101.3750  7601.2500     600.1250        0.0  7501.2500       7501.2500
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:19]  --------------------------------------------------------------------------------
[09/28 17:56:19]  Iteration: 2 (0 solution, 1 counterexamples)
[09/28 17:56:19]  Generator returned sat in 0.052197 secs.
[09/28 17:56:19]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:19]  Improved gap from 0.0 to 100
[09/28 17:56:20]  Improved number of small numbers from 50 to 66 out of a max of 100
[09/28 17:56:20]  Verifer returned sat in 1.503361 secs.
[09/28 17:56:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t
0      50.422363    -250.192362   199.875    50.422363     0.062256  -250.192362        0.0   300.614726      299.968994
1      50.453552    -149.546631   199.875    50.453552   300.645915  -149.546631        0.0   200.000183      200.000183
2      50.453552     -49.577576   199.875    50.453552   199.968750   -49.577576        0.0   100.031128      100.000183
3      50.453552     -49.546448   199.875    50.453552   100.000000   -49.546448        0.0   100.000000        0.000183
4     450.422424      50.453369   199.875   450.422424   499.968872    50.453369        0.0   399.969055      299.969055
5     450.422424     150.453552   199.875   450.422424   250.984436   150.453552        0.0   299.968872      199.969055
6     951.469116     250.453552   199.875   951.469116   801.015564   250.453552        0.0   701.015564      601.015747
7    2301.484680     450.453369   199.875  2301.484680  2051.031128   450.453369        0.0  1851.031311     1851.031311
8    5151.515625     550.453369   199.875  5151.515625  4701.062256   550.453369        0.0  4601.062256     4601.062256
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:21]  --------------------------------------------------------------------------------
[09/28 17:56:21]  Iteration: 3 (0 solution, 2 counterexamples)
[09/28 17:56:21]  Generator returned sat in 0.024326 secs.
[09/28 17:56:21]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:22]  Improved number of small numbers from 50 to 62 out of a max of 99
[09/28 17:56:22]  Verifer returned sat in 0.997275 secs.
[09/28 17:56:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      50.422363    -349.546509  299.874878    50.422363    0.062012  -349.546509        0.0  399.968872      399.968872
1     130.834814    -249.546631  299.874878   130.834814  480.381323  -249.546631        0.0  380.381445      380.381323
2     130.834814    -149.546509  299.874878   130.834814  199.968994  -149.546509        0.0  280.381323      280.381323
3     130.834814    -116.900594  299.874878   130.834814  280.350342  -116.900594        0.0  247.735409      180.381323
4     231.068278      50.453369  299.874878   231.068278  347.968872    50.453369        0.0  180.614909      180.614787
5     231.068278     130.865942  299.874878   231.068278    1.000000   130.865942        0.0  100.202336       80.614787
6     550.484619     150.453491  299.874878   550.484619  419.618677   150.453491        0.0  400.031128      300.031128
7     550.484619     350.453369  299.874878   550.484619  400.031128   350.453369        0.0  200.031250      200.031128
8     799.453369     450.453369  299.874878   799.453369  449.000000   450.453369        0.0  349.000000      348.999878
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:23]  --------------------------------------------------------------------------------
[09/28 17:56:23]  Iteration: 4 (0 solution, 3 counterexamples)
[09/28 17:56:23]  Generator returned sat in 0.032101 secs.
[09/28 17:56:23]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:56:24]  Improved number of small numbers from 46 to 54 out of a max of 99
[09/28 17:56:24]  Verifer returned sat in 0.859725 secs.
[09/28 17:56:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     150.453613    -460.546509  299.874878   150.453613    0.062012  -460.546509        0.0  611.000122      511.000122
1     150.453613    -260.546509  299.874878   150.453613  610.999756  -260.546509        0.0  411.000122      411.000122
2     150.453613    -160.546509  299.874878   150.453613  410.999756  -160.546509        0.0  311.000122      311.000122
3     339.453491    -100.134106  299.874878   339.453491  500.000000  -100.134106        0.0  439.587598      400.000000
4     439.484497     -20.958911  299.874878   439.484497  539.618604   -20.958911        0.0  460.443408      400.031006
5     439.484497      39.453491  299.874878   439.484497  358.381396    39.453491        0.0  400.031006      300.031006
6     439.484497     150.453491  299.874878   439.484497  299.000000   150.453491        0.0  289.031006      200.031006
7     525.334888     339.453491  299.874878   525.334888  374.881396   339.453491        0.0  185.881396      185.881396
8     879.072095     418.628662  299.874878   879.072095  539.618604   418.628662        0.0  460.443433      439.618604
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:24]  --------------------------------------------------------------------------------
[09/28 17:56:24]  Iteration: 5 (0 solution, 4 counterexamples)
[09/28 17:56:25]  Generator returned sat in 0.053180 secs.
[09/28 17:56:25]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:56:26]  Improved gap from 0.0 to 32.8125
[09/28 17:56:26]  Improved number of small numbers from 49 to 100 out of a max of 100
[09/28 17:56:26]  Verifer returned sat in 1.516059 secs.
[09/28 17:56:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0       3.084229     -30.080078  -30.591797     3.084229    0.062012   -30.080078        0.0  33.164307       33.164062
1       3.084229     -29.728271   36.244141     3.084229    0.031006   -29.728271        0.0  32.812500        0.000000
2      35.896729       3.084229  103.431641    35.896729   65.625000     3.084229        0.0  32.812500        0.000000
3      69.061035      35.896729  170.267334    69.061035   65.976807    35.896729        0.0  33.164307        0.000000
4     101.873535      69.061035  237.454834   101.873535   65.976807    69.061035        0.0  32.812500        0.000000
5     167.850342     101.873535  271.447021   167.850342   98.789307   101.873535        0.0  65.976807       -0.031006
6     200.662842     167.881348  272.275146   200.662842   98.789307   167.881348        0.0  32.781494      -66.390381
7     299.865967     267.053223  339.462402   299.865967  131.984619   267.053223        0.0  32.812744        0.000000
8     299.865967     299.865967  339.462646   299.865967   19.968994   299.865967        0.0   0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:27]  --------------------------------------------------------------------------------
[09/28 17:56:27]  Iteration: 6 (0 solution, 5 counterexamples)
[09/28 17:56:27]  Generator returned sat in 0.120181 secs.
[09/28 17:56:27]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:27]  Improved gap from 0.0155029296875 to 100
[09/28 17:56:28]  Improved number of small numbers from 74 to 74 out of a max of 100
[09/28 17:56:28]  Verifer returned sat in 0.988907 secs.
[09/28 17:56:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0       3.053223    -196.915771  136.244141     3.053223    0.062012  -196.915771        0.0  199.968994      199.968994
1       3.053223    -196.915771  136.244141     3.053223    0.031006  -196.915771        0.0  199.968994       99.968994
2     303.084229     -49.325269  136.244141   303.084229  500.000000   -49.325269        0.0  352.409497      300.000000
3     560.271380       3.084229  136.244141   560.271380  609.596649     3.084229        0.0  557.187151      457.187151
4     560.271380     160.240374  136.244141   560.271380  504.798324   160.240374        0.0  400.031006      357.187151
5     769.795681     303.084229  136.244141   769.795681  609.555308   303.084229        0.0  466.711453      466.711453
6     960.271380     303.115234  136.244141   960.271380  657.187151   303.115234        0.0  657.156145      557.187151
7     960.271380     403.084229  136.244141   960.271380  628.624581   403.084229        0.0  557.187151      457.187151
8     960.271380     503.084229  136.244141   960.271380  557.156145   503.084229        0.0  457.187151      357.187151
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:29]  --------------------------------------------------------------------------------
[09/28 17:56:29]  Iteration: 7 (0 solution, 6 counterexamples)
[09/28 17:56:29]  Generator returned sat in 0.019106 secs.
[09/28 17:56:29]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:29]  Improved gap from 0.0 to 100
[09/28 17:56:30]  Improved number of small numbers from 61 to 72 out of a max of 100
[09/28 17:56:30]  Verifer returned sat in 1.267756 secs.
[09/28 17:56:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     503.115234    -296.915771  136.243896   503.115234    0.061768  -296.915771        0.0  800.031006      700.031006
1     503.115234    -196.915771  136.243896   503.115234  800.000000  -196.915771        0.0  700.031006      600.031006
2     503.115234     -96.915771  136.243896   503.115234  700.031006   -96.915771        0.0  600.031006      500.031006
3     503.115234     103.053345  136.243896   503.115234  600.030884   103.053345        0.0  400.061890      400.031006
4     802.037903     103.084229  136.243896   802.037903  698.984558   103.084229        0.0  698.953674      598.953674
5     802.037903     269.511838  136.243896   802.037903  648.492279   269.511838        0.0  532.526065      498.953674
6     959.185587     359.185587  136.243896   959.185587  689.673749   359.185587        0.0  600.000000      556.101358
7     959.185587     503.084229  136.243896   959.185587  599.969116   503.084229        0.0  456.101358      456.101358
8    1202.068787     503.084229  136.243896  1202.068787  698.984558   503.084229        0.0  698.984558      598.984558
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:31]  --------------------------------------------------------------------------------
[09/28 17:56:31]  Iteration: 8 (0 solution, 7 counterexamples)
[09/28 17:56:31]  Generator returned sat in 0.100215 secs.
[09/28 17:56:31]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:32]  Improved gap from 0.9691162109375 to 64.0625
[09/28 17:56:32]  Improved number of small numbers from 74 to 100 out of a max of 100
[09/28 17:56:32]  Verifer returned sat in 0.662848 secs.
[09/28 17:56:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     -77.008545    -377.008545  316.336670   -77.008545    0.061768  -377.008545        0.0  300.000000      300.000000
1     -76.977783    -277.008545  316.336670   -76.977783  300.030762  -277.008545        0.0  200.030762      200.030762
2     -76.977539    -177.008545  316.336670   -76.977539  200.031006  -177.008545        0.0  100.031006      100.031006
3     -76.977539     -77.008545  316.336670   -76.977539   72.750732   -77.008545        0.0    0.031006        0.031006
4      -5.257812     -75.946777  344.585693    -5.257812   71.750732   -75.946777        0.0   70.688965       -0.000244
5      -5.196045      -5.226807  380.492432    -5.196045   70.750732    -5.226807        0.0    0.030762      -64.031738
6      64.523926      58.835693  416.429932    64.523926   69.750732    58.835693        0.0    5.688232      -58.374268
7     127.586426     122.898193  452.367432   127.586426   68.750732   122.898193        0.0    4.688232      -59.374268
8     190.648926     186.960693  452.367432   190.648926   67.750732   186.960693        0.0    3.688232      -96.311768
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:33]  --------------------------------------------------------------------------------
[09/28 17:56:33]  Iteration: 9 (0 solution, 8 counterexamples)
[09/28 17:56:33]  Generator returned sat in 0.115521 secs.
[09/28 17:56:33]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:34]  Improved gap from 0.0308837890625 to 18.75
[09/28 17:56:34]  Improved number of small numbers from 59 to 100 out of a max of 100
[09/28 17:56:34]  Verifer returned sat in 0.767017 secs.
[09/28 17:56:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -130.571045    -530.540283  316.336670  -130.571045    0.061523  -530.540283        0.0  399.969238      399.969238
1    -130.571045    -430.540283  316.336670  -130.571045  399.969238  -430.540283        0.0  299.969238      299.969238
2    -130.509277    -330.540283  316.336670  -130.509277  300.031006  -330.540283        0.0  200.031006      200.031006
3    -130.509277    -230.540283  316.336670  -130.509277  200.030762  -230.540283        0.0  100.031006      100.031006
4    -130.509277    -150.509277  316.336670  -130.509277   19.969238  -150.509277        0.0   20.000000        0.031006
5    -130.509277    -130.540283  397.586670  -130.509277   19.969238  -130.540283        0.0    0.031006      -18.718994
6    -110.571045    -111.790039  478.836426  -110.571045   19.969238  -111.790039        0.0    1.218994      -17.531006
7     -91.820801     -93.040039  558.867676   -91.820801   19.969238   -93.040039        0.0    1.219238      -18.749512
8     -73.070801     -73.071045  558.867676   -73.070801   19.969238   -73.071045        0.0    0.000244      -99.999512
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:35]  --------------------------------------------------------------------------------
[09/28 17:56:35]  Iteration: 10 (0 solution, 9 counterexamples)
[09/28 17:56:35]  Generator returned sat in 0.072467 secs.
[09/28 17:56:35]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:37]  Improved gap from 0.03076171875 to 53.125
[09/28 17:56:38]  Improved number of small numbers from 96 to 100 out of a max of 100
[09/28 17:56:38]  Verifer returned sat in 2.683536 secs.
[09/28 17:56:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -544.367188    -844.367188  630.163330  -544.367188    0.061279  -844.367188        0.0  300.000000      300.000000
1    -486.647949    -744.367188  630.163330  -486.647949  357.719238  -744.367188        0.0  257.719238      257.719238
2    -486.647949    -744.367188  630.163330  -486.647949    0.030762  -744.367188        0.0  257.719238      157.719238
3    -486.647949    -544.367188  630.163330  -486.647949  257.718994  -544.367188        0.0   57.719238       57.719238
4    -486.647949    -539.772949  672.444092  -486.647949    1.000000  -539.772949        0.0   53.125000        0.000000
5    -436.475830    -486.647949  719.318848  -436.475830  103.297119  -486.647949        0.0   50.172119       -2.953125
6    -356.788330    -369.054199  719.318848  -356.788330  129.859619  -369.054199        0.0   12.265869      -23.265625
7    -280.397705    -333.522705  766.193848  -280.397705   88.656494  -333.522705        0.0   53.125000        0.000000
8    -280.397705    -280.397705  813.068848  -280.397705    1.000000  -280.397705        0.0    0.000000      -53.125000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:38]  --------------------------------------------------------------------------------
[09/28 17:56:38]  Iteration: 11 (0 solution, 10 counterexamples)
[09/28 17:56:39]  Generator returned sat in 0.026639 secs.
[09/28 17:56:39]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:56:41]  Improved gap from 0.015380859375 to 53.125
[09/28 17:56:41]  Improved number of small numbers from 52 to 100 out of a max of 100
[09/28 17:56:41]  Verifer returned sat in 2.496546 secs.
[09/28 17:56:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     888.721029     488.690430  630.163330   888.721029    0.061279   488.690430        0.0  400.030599      400.030599
1     888.721029     588.690430  630.163330   888.721029  400.030518   588.690430        0.0  300.030599      300.030599
2     946.409668     688.690430  630.163330   946.409668  357.719238   688.690430        0.0  257.719238      257.719238
3     946.409668     788.690430  630.163330   946.409668  257.719238   788.690430        0.0  157.719238      157.719238
4     946.409668     826.482910  630.163330   946.409668  151.000000   826.482910        0.0  119.926758       57.719238
5     946.409668     888.690430  672.444092   946.409668  119.896240   888.690430        0.0   57.719238        0.000000
6     989.690430     946.409668  719.319092   989.690430  101.000000   946.409668        0.0   43.280762       -9.844238
7    1026.269287     999.534668  766.193848  1026.269287   79.859619   999.534668        0.0   26.734619      -26.390625
8    1087.060547    1052.659912  766.194092  1087.060547   87.525879  1052.659912        0.0   34.400635      -65.599121
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:42]  --------------------------------------------------------------------------------
[09/28 17:56:42]  Iteration: 12 (0 solution, 11 counterexamples)
[09/28 17:56:42]  Generator returned sat in 0.147146 secs.
[09/28 17:56:42]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:56:43]  Improved gap from 0.0306396484375 to 100
[09/28 17:56:44]  Improved number of small numbers from 56 to 86 out of a max of 100
[09/28 17:56:44]  Verifer returned sat in 1.095107 secs.
[09/28 17:56:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1009.168213     319.101074  630.16333  1009.168213    0.061035   319.101074        0.0  690.067139      590.067383
1    1009.168213     419.101074  630.16333  1009.168213  690.052246   419.101074        0.0  590.067139      490.067383
2    1009.183838     589.582031  630.16333  1009.183838  590.082764   589.582031        0.0  419.601807      390.083008
3    1039.091797     719.085693  630.16333  1039.091797  449.509766   719.085693        0.0  320.006104      319.990967
4    1039.091797     719.100932  630.16333  1039.091797  225.754883   719.100932        0.0  319.990865      219.990967
5    1039.091797     819.101074  630.16333  1039.091797  113.877441   819.101074        0.0  219.990723      119.990967
6    1039.091797    1009.153019  630.16333  1039.091797   57.938721  1009.153019        0.0   29.938778       19.990967
7    1039.122380    1039.107060  630.16333  1039.122380   29.969360  1039.107060        0.0    0.015320      -79.978451
8    1519.116252    1119.101074  630.16333  1519.116252  480.009192  1119.101074        0.0  400.015177      300.015422
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:44]  --------------------------------------------------------------------------------
[09/28 17:56:44]  Iteration: 13 (0 solution, 12 counterexamples)
[09/28 17:56:45]  Generator returned sat in 0.171007 secs.
[09/28 17:56:45]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:45]  Improved gap from 0.0 to 100
[09/28 17:56:45]  Improved number of small numbers from 86 to 100 out of a max of 100
[09/28 17:56:45]  Verifer returned sat in 0.306107 secs.
[09/28 17:56:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     719.100830     619.100830  462.860596   719.100830    0.060791   619.100830        0.0  100.000000      100.000000
1     719.100830     719.100830  462.860596   719.100830    0.030273   719.100830        0.0    0.000000        0.000000
2     895.204590     719.100830  462.860596   895.204590  176.103760   719.100830        0.0  176.103760       76.103760
3     895.204590     895.174072  462.860596   895.204590   45.914551   895.174072        0.0    0.030518      -23.896240
4     919.131348     919.100830  462.860596   919.131348   23.957275   919.100830        0.0    0.030518      -99.969482
5    1218.100830    1039.512939  462.860596  1218.100830  299.000000  1039.512939        0.0  178.587891       99.000000
6    1519.131104    1119.100830  462.860596  1519.131104  479.618164  1119.100830        0.0  400.030273      300.030273
7    1519.131104    1219.100830  462.860596  1519.131104  334.890137  1219.100830        0.0  300.030273      200.030273
8    1519.131104    1319.100830  462.860596  1519.131104  168.445068  1319.100830        0.0  200.030273      100.030273
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:46]  --------------------------------------------------------------------------------
[09/28 17:56:46]  Iteration: 14 (0 solution, 13 counterexamples)
[09/28 17:56:47]  Generator returned sat in 0.695693 secs.
[09/28 17:56:47]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:48]  Improved gap from 0.0 to 54.6875
[09/28 17:56:48]  Improved number of small numbers from 55 to 100 out of a max of 100
[09/28 17:56:48]  Verifer returned sat in 1.053615 secs.
[09/28 17:56:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     640.227783     340.227783  462.860596   640.227783    0.060547   340.227783        0.0  300.000000      300.000000
1     640.258057     440.227783  462.860596   640.258057  300.030273   440.227783        0.0  200.030273      200.030273
2     640.258057     540.227783  462.860596   640.258057  200.030273   540.227783        0.0  100.030273      100.030273
3     694.915283     640.227783  462.860596   694.915283  154.687500   640.227783        0.0   54.687500       54.687500
4     694.915283     640.227783  508.173096   694.915283    1.000000   640.227783        0.0   54.687500        0.000000
5     694.915283     694.915283  553.485352   694.915283    1.000000   694.915283        0.0    0.000000      -54.687744
6     848.602783     772.274170  554.485352   848.602783  153.687500   772.274170        0.0   76.328613       -0.000244
7     903.320557     848.633057  599.767822   903.320557  131.046387   848.633057        0.0   54.687500        0.000000
8     903.320557     903.320557  599.767822   903.320557    1.000000   903.320557        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:49]  --------------------------------------------------------------------------------
[09/28 17:56:49]  Iteration: 15 (0 solution, 14 counterexamples)
[09/28 17:56:49]  Generator returned sat in 0.076857 secs.
[09/28 17:56:49]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:56:50]  Improved gap from 0.0302734375 to 32.8125
[09/28 17:56:50]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:56:50]  Verifer returned sat in 1.140087 secs.
[09/28 17:56:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0     463.167236     396.307373  429.720459   463.167236    0.060547   396.307373        0.0  66.859863       66.859863
1     463.167236     430.354736  462.860596   463.167236    0.030273   430.354736        0.0  32.812500        0.000000
2     495.979736     463.167236  530.048096   495.979736   65.625000   463.167236        0.0  32.812500        0.000000
3     528.792236     495.979736  597.235596   528.792236   65.625000   495.979736        0.0  32.812500        0.000000
4     594.652100     528.792236  631.375732   594.652100   98.672363   528.792236        0.0  65.859863        0.000000
5     626.229736     594.652100  698.563232   626.229736   97.437500   594.652100        0.0  31.577637       -1.234863
6     725.136963     627.464600  700.890869   725.136963  130.484863   627.464600        0.0  97.672363        0.000000
7     757.949463     725.136963  768.078369   757.949463  130.484863   725.136963        0.0  32.812500        0.000000
8     757.949463     757.949463  835.265869   757.949463   19.969727   757.949463        0.0   0.000000      -32.812500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:51]  --------------------------------------------------------------------------------
[09/28 17:56:51]  Iteration: 16 (0 solution, 15 counterexamples)
[09/28 17:56:52]  Generator returned sat in 0.287967 secs.
[09/28 17:56:52]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:01]  Improved gap from 0.0302734375 to 56.25
[09/28 17:57:02]  Improved number of small numbers from 62 to 69 out of a max of 100
[09/28 17:57:02]  Verifer returned sat in 9.875534 secs.
[09/28 17:57:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    1894.246826    1837.966667  389.705078  1894.246826    0.060303  1837.966667        0.0  56.280160       56.249886
1    1894.246826    1837.996940  433.455078  1894.246826   56.280029  1837.996940        0.0  56.249886       -0.000114
2    1894.277214    1894.246940  463.814062  1894.277214   56.280273  1894.246940        0.0   0.030273      -69.610742
3    2025.424284    2025.394010  463.814062  2025.424284  131.177344  2025.394010        0.0   0.030273      -38.463672
4    2119.107682    2063.887956  507.564062  2119.107682   93.713672  2063.887956        0.0  55.219727       -1.030273
5    2176.833464    2120.137956  550.868408  2176.833464  112.945508  2120.137956        0.0  56.695508       -0.000146
6    2233.083464    2176.863737  594.588281  2233.083464  112.945508  2176.863737        0.0  56.219727       -0.030273
7    2252.598600    2233.113737  638.338281  2252.598600   75.734863  2233.113737        0.0  19.484863      -36.765137
8    2317.726628    2289.363770  638.338379  2317.726628   84.612891  2289.363770        0.0  28.362858      -71.637012
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:02]  --------------------------------------------------------------------------------
[09/28 17:57:02]  Iteration: 17 (0 solution, 16 counterexamples)
[09/28 17:57:04]  Generator returned sat in 0.605883 secs.
[09/28 17:57:04]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:05]  Improved gap from 0.01507568359375 to 18.75
[09/28 17:57:05]  Improved number of small numbers from 81 to 100 out of a max of 100
[09/28 17:57:05]  Verifer returned sat in 1.126794 secs.
[09/28 17:57:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1676.878662    1676.863770  550.868164  1676.878662    0.060303  1676.863770        0.0    0.014893        0.014893
1    1676.894043    1676.863770  550.868164  1676.894043    0.030273  1676.863770        0.0    0.030273      -99.969727
2    2195.863770    1876.863525  550.868164  2195.863770  519.000000  1876.863525        0.0  319.000244      319.000000
3    2195.863770    1976.863525  550.868164  2195.863770   69.879395  1976.863525        0.0  219.000244      219.000000
4    2195.863770    2076.848633  550.868164  2195.863770   35.939697  2076.848633        0.0  119.015137      119.000000
5    2195.863770    2076.863770  550.868164  2195.863770   18.985107  2076.863770        0.0  119.000000       19.000000
6    2195.863770    2176.863770  631.868164  2195.863770   18.985107  2176.863770        0.0   19.000000        0.000000
7    2195.863770    2195.863770  713.118164  2195.863770   18.985107  2195.863770        0.0    0.000000      -18.750000
8    2214.848877    2214.613770  713.118164  2214.848877   18.985107  2214.613770        0.0    0.235107      -99.764893
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:05]  --------------------------------------------------------------------------------
[09/28 17:57:05]  Iteration: 18 (0 solution, 17 counterexamples)
[09/28 17:57:07]  Generator returned sat in 1.130753 secs.
[09/28 17:57:07]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:08]  Improved gap from 1.9095458984375 to 100
[09/28 17:57:09]  Improved number of small numbers from 49 to 95 out of a max of 100
[09/28 17:57:09]  Verifer returned sat in 1.470925 secs.
[09/28 17:57:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1987.742920    1587.742920  950.778076  1987.742920    0.060059  1587.742920        0.0  400.000000      300.000000
1    2087.728027    1760.742920  950.778076  2087.728027  499.985107  1760.742920        0.0  326.985107      299.985107
2    2287.742920    1887.742920  950.778076  2287.742920  527.000000  1887.742920        0.0  400.000000      400.000000
3    2287.742920    1987.742920  950.778076  2287.742920    9.875000  1987.742920        0.0  300.000000      300.000000
4    2287.742920    2087.742920  950.778076  2287.742920  218.750000  2087.742920        0.0  200.000000      200.000000
5    2687.742920    2087.758057  950.778076  2687.742920  600.000000  2087.758057        0.0  599.984863      500.000000
6    2687.742920    2287.742920  950.778076  2687.742920    0.015076  2287.742920        0.0  400.000000      400.000000
7    2687.742920    2287.742920  950.778076  2687.742920  149.030151  2287.742920        0.0  400.000000      300.000000
8    2687.742920    2387.743164  950.778076  2687.742920  397.060303  2387.743164        0.0  299.999756      200.000000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:09]  --------------------------------------------------------------------------------
[09/28 17:57:09]  Iteration: 19 (0 solution, 18 counterexamples)
[09/28 17:57:10]  Generator returned sat in 0.116883 secs.
[09/28 17:57:10]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:11]  Improved gap from 0.0 to 100
[09/28 17:57:11]  Improved number of small numbers from 52 to 100 out of a max of 100
[09/28 17:57:11]  Verifer returned sat in 0.844780 secs.
[09/28 17:57:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1325.803223    1225.773193  1412.747803  1325.803223    0.059814  1225.773193        0.0  100.030029      100.030029
1    1325.803223    1325.773193  1412.747803  1325.803223    0.030029  1325.773193        0.0    0.030029        0.030029
2    1425.773193    1325.802979  1412.747803  1425.773193  100.000000  1325.802979        0.0   99.970215        0.000000
3    1725.772949    1425.773193  1412.747803  1725.772949  399.969971  1425.773193        0.0  299.999756      199.999756
4    1725.772949    1525.773193  1412.747803  1725.772949    1.000000  1525.773193        0.0  199.999756       99.999756
5    1725.772949    1725.772949  1412.747803  1725.772949  102.000000  1725.772949        0.0    0.000000       -0.000244
6    1726.772949    1726.742920  1412.747803  1726.772949    1.000000  1726.742920        0.0    0.030029      -99.000244
7    1879.227783    1855.813232  1412.747803  1879.227783  152.484863  1855.813232        0.0   23.414551      -46.545410
8    2325.802979    1925.773193  1412.747803  2325.802979  469.989746  1925.773193        0.0  400.029785      300.029785
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:12]  --------------------------------------------------------------------------------
[09/28 17:57:12]  Iteration: 20 (0 solution, 19 counterexamples)
[09/28 17:57:13]  Generator returned sat in 0.243236 secs.
[09/28 17:57:13]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:13]  Improved gap from 1.0 to 100
[09/28 17:57:13]  Improved number of small numbers from 59 to 100 out of a max of 100
[09/28 17:57:13]  Verifer returned sat in 0.469056 secs.
[09/28 17:57:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1325.720459    1025.720215  1412.747559  1325.720459    0.059570  1025.720215        0.0  300.000244      300.000000
1    1325.720459    1025.720459  1412.747559  1325.720459    0.030029  1025.720459        0.0  300.000000      200.000000
2    1325.720459    1225.720459  1412.747559  1325.720459  300.000000  1225.720459        0.0  100.000000      100.000000
3    1424.735596    1325.705322  1412.747559  1424.735596  199.015137  1325.705322        0.0   99.030273       99.015137
4    1424.735596    1325.720459  1412.747559  1424.735596    1.000000  1325.720459        0.0   99.015137       -0.984863
5    1476.720459    1425.720459  1412.747559  1476.720459  151.000000  1425.720459        0.0   51.000000      -49.000000
6    1676.720459    1525.720459  1412.747559  1676.720459  251.000000  1525.720459        0.0  151.000000       51.000000
7    1876.728027    1725.705322  1412.747559  1876.728027  351.007568  1725.705322        0.0  151.022705      151.007568
8    2276.705322    1725.720459  1412.747559  2276.705322  551.000000  1725.720459        0.0  550.984863      450.984863
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:14]  --------------------------------------------------------------------------------
[09/28 17:57:14]  Iteration: 21 (0 solution, 20 counterexamples)
[09/28 17:57:15]  Generator returned sat in 0.927104 secs.
[09/28 17:57:15]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:15]  Improved gap from 0.0595703125 to 100
[09/28 17:57:16]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:57:16]  Verifer returned sat in 0.273630 secs.
[09/28 17:57:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1325.676025    1025.705811  1312.762207  1325.676025    0.059570  1025.705811        0.0  299.970215      199.970215
1    1325.705811    1159.019287  1312.762207  1325.705811  300.000000  1159.019287        0.0  166.686523      100.000000
2    1424.676025    1325.705811  1312.762207  1424.676025  265.656738  1325.705811        0.0   98.970215       98.970215
3    1424.735596    1424.705811  1312.762207  1424.735596   99.029785  1424.705811        0.0    0.029785       -0.970215
4    1425.735596    1425.705811  1312.762207  1425.735596    1.029785  1425.705811        0.0    0.029785      -99.970215
5    1826.735596    1525.705811  1312.762207  1826.735596  401.029785  1525.705811        0.0  301.029785      201.029785
6    1826.735596    1725.705811  1312.762207  1826.735596  301.000000  1725.705811        0.0  101.029785      101.029785
7    2178.205811    1778.176025  1312.762207  2178.205811  452.500000  1778.176025        0.0  400.029785      352.500000
8    2178.205811    1826.765381  1312.762207  2178.205811    1.029785  1826.765381        0.0  351.440430      252.500000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:16]  --------------------------------------------------------------------------------
[09/28 17:57:16]  Iteration: 22 (0 solution, 21 counterexamples)
[09/28 17:57:17]  Generator returned sat in 0.087759 secs.
[09/28 17:57:17]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:17]  Improved number of small numbers from 93 to 99 out of a max of 99
[09/28 17:57:17]  Verifer returned sat in 0.294322 secs.
[09/28 17:57:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1325.675537    1025.705811  1312.761963  1325.675537    0.059326  1025.705811        0.0  299.969727      199.969727
1    1325.705811    1158.352783  1312.761963  1325.705811  300.000000  1158.352783        0.0  167.353027      100.000000
2    1424.676025    1325.705811  1312.761963  1424.676025  266.323242  1325.705811        0.0   98.970215       98.970215
3    1424.735352    1424.705811  1312.761963  1424.735352   99.029541  1424.705811        0.0    0.029541       -0.970459
4    1425.735352    1425.705811  1312.761963  1425.735352    1.029541  1425.705811        0.0    0.029541      -99.970459
5    1826.735352    1525.705811  1312.761963  1826.735352  401.029541  1525.705811        0.0  301.029541      201.029541
6    1826.735352    1725.705811  1312.761963  1826.735352  300.000000  1725.705811        0.0  101.029541      101.029541
7    2177.205811    1777.190918  1312.761963  2177.205811  451.500000  1777.190918        0.0  400.014893      351.500000
8    2177.205811    1826.764893  1312.761963  2177.205811    1.029541  1826.764893        0.0  350.440918      251.500000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:18]  --------------------------------------------------------------------------------
[09/28 17:57:18]  Iteration: 23 (0 solution, 22 counterexamples)
[09/28 17:57:19]  Generator returned sat in 0.102710 secs.
[09/28 17:57:19]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 3/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:19]  Improved number of small numbers from 97 to 99 out of a max of 99
[09/28 17:57:19]  Verifer returned sat in 0.168099 secs.
[09/28 17:57:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1325.675537    1025.705811  1312.761963  1325.675537    0.059082  1025.705811        0.0  299.969727      199.969971
1    1325.705566    1158.352539  1312.761963  1325.705566  299.999756  1158.352539        0.0  167.353027      100.000000
2    1424.675781    1325.705566  1312.761963  1424.675781  266.323242  1325.705566        0.0   98.970215       98.970215
3    1424.735107    1424.705566  1312.761963  1424.735107   99.029541  1424.705566        0.0    0.029541       -0.970459
4    1425.735107    1425.705566  1312.761963  1425.735107    1.029541  1425.705566        0.0    0.029541      -99.970459
5    1825.735107    1525.705566  1312.761963  1825.735107  400.029541  1525.705566        0.0  300.029541      200.029541
6    1825.735107    1725.705566  1312.761963  1825.735107  299.000000  1725.705566        0.0  100.029541      100.029541
7    2176.205566    1776.191162  1312.761963  2176.205566  450.500000  1776.191162        0.0  400.014404      350.500000
8    2176.205566    1826.764648  1312.761963  2176.205566    1.029541  1826.764648        0.0  349.440918      250.500000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:20]  --------------------------------------------------------------------------------
[09/28 17:57:20]  Iteration: 24 (0 solution, 23 counterexamples)
[09/28 17:57:22]  Generator returned sat in 1.858213 secs.
[09/28 17:57:23]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:24]  Improved gap from 0.029541015625 to 43.75
[09/28 17:57:24]  Improved number of small numbers from 48 to 100 out of a max of 100
[09/28 17:57:24]  Verifer returned sat in 1.508581 secs.
[09/28 17:57:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1433.093424    1287.115479  1091.247314  1433.093424    0.059082  1287.115479        0.0  145.977946      145.977946
1    1433.108154    1387.115479  1091.247314  1433.108154  145.992676  1387.115479        0.0   45.992676       45.992676
2    1433.108154    1387.115479  1145.254639  1433.108154   45.992432  1387.115479        0.0   45.992676        0.000000
3    1476.858154    1433.108154  1201.504639  1476.858154   89.742676  1433.108154        0.0   43.750000        0.000000
4    1476.858154    1476.858154  1257.754639  1476.858154    0.014893  1476.858154        0.0    0.000000      -43.750000
5    1565.600830    1520.608398  1312.761963  1565.600830   88.742676  1520.608398        0.0   44.992432        0.000000
6    1565.600830    1565.600830  1325.019531  1565.600830    0.014893  1565.600830        0.0    0.000000      -87.742432
7    1697.093506    1653.343262  1381.269287  1697.093506  131.492676  1653.343262        0.0   43.750244        0.000000
8    1697.093506    1697.093506  1381.269287  1697.093506    0.014893  1697.093506        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:25]  --------------------------------------------------------------------------------
[09/28 17:57:25]  Iteration: 25 (0 solution, 24 counterexamples)
[09/28 17:57:26]  Generator returned sat in 0.108254 secs.
[09/28 17:57:26]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:27]  Improved gap from 43.75 to 43.75
[09/28 17:57:27]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:57:27]  Verifer returned sat in 1.741887 secs.
[09/28 17:57:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1827.593262    1683.902344  1110.930908  1827.593262    0.059082  1683.902344        0.0  143.690918      143.690918
1    1827.593262    1781.681885  1110.930908  1827.593262  143.690918  1781.681885        0.0   45.911377       43.690918
2    1827.593262    1783.902344  1167.180908  1827.593262   45.911377  1783.902344        0.0   43.690918       -0.059082
3    1871.402344    1827.652344  1223.430908  1871.402344   87.500000  1827.652344        0.0   43.750000        0.000000
4    1871.402344    1871.402344  1278.460449  1871.402344   19.940918  1871.402344        0.0    0.000000      -44.970459
5    1960.122803    1916.372803  1334.710449  1960.122803   88.720459  1916.372803        0.0   43.750000        0.000000
6    1960.122803    1960.122803  1390.960449  1960.122803   19.940918  1960.122803        0.0    0.000000      -43.750000
7    2091.593262    2003.872803  1403.239990  2091.593262  131.470459  2003.872803        0.0   87.720459        0.000000
8    2091.593262    2091.593262  1403.239990  2091.593262   19.940918  2091.593262        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:28]  --------------------------------------------------------------------------------
[09/28 17:57:28]  Iteration: 26 (0 solution, 25 counterexamples)
[09/28 17:57:30]  Generator returned sat in 1.086632 secs.
[09/28 17:57:30]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:31]  Improved number of small numbers from 76 to 83 out of a max of 99
[09/28 17:57:31]  Verifer returned sat in 0.919597 secs.
[09/28 17:57:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2019.125244    1519.110352  1403.239746  2019.125244    0.059082  1519.110352        0.0  500.014893      400.014893
1    2019.139893    1619.110352  1403.239746  2019.139893  500.029541  1619.110352        0.0  400.029541      300.029541
2    2219.095703    1725.933105  1403.239746  2219.095703  599.985352  1725.933105        0.0  493.162598      399.985352
3    2219.110352    1820.110352  1403.239746  2219.110352  493.177246  1820.110352        0.0  399.000000      300.000000
4    2219.110352    2019.110352  1403.239746  2219.110352  398.088623  2019.110352        0.0  200.000000      200.000000
5    2419.154663    2019.139893  1403.239746  2419.154663  400.044312  2019.139893        0.0  400.014771      300.044312
6    2419.184204    2219.110352  1403.239746  2419.184204  400.044312  2219.110352        0.0  200.073853      200.073853
7    2619.632507    2219.110352  1403.239746  2619.632507  400.522156  2219.110352        0.0  400.522156      300.522156
8    2619.632507    2319.110352  1403.239746  2619.632507  400.522156  2319.110352        0.0  300.522156      200.522156
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:32]  --------------------------------------------------------------------------------
[09/28 17:57:32]  Iteration: 27 (0 solution, 26 counterexamples)
[09/28 17:57:34]  Generator returned sat in 1.061879 secs.
[09/28 17:57:34]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:34]  Improved gap from 0.0 to 100
[09/28 17:57:34]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:57:34]  Verifer returned sat in 0.397773 secs.
[09/28 17:57:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1737.992188    1637.992188  1403.239746  1737.992188    0.059082  1637.992188        0.0  100.000000           100.0
1    1737.992188    1637.992188  1403.239746  1737.992188    0.029541  1637.992188        0.0  100.000000             0.0
2    1937.992188    1737.992188  1403.239746  1937.992188  300.000000  1737.992188        0.0  200.000000           100.0
3    1937.992188    1837.992188  1403.239746  1937.992188    4.118164  1837.992188        0.0  100.000000             0.0
4    1937.992188    1937.992188  1403.239746  1937.992188    3.088623  1937.992188        0.0    0.000000          -100.0
5    2238.992188    2087.462646  1403.239746  2238.992188  301.000000  2087.462646        0.0  151.529541           101.0
6    2238.992188    2237.992188  1403.239746  2238.992188  151.500000  2237.992188        0.0    1.000000             1.0
7    2638.992188    2237.992188  1403.239746  2638.992188  401.000000  2237.992188        0.0  401.000000           301.0
8    2638.992188    2337.992188  1403.239746  2638.992188  301.000000  2337.992188        0.0  301.000000           201.0
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:35]  --------------------------------------------------------------------------------
[09/28 17:57:35]  Iteration: 28 (0 solution, 27 counterexamples)
[09/28 17:57:36]  Generator returned sat in 0.219688 secs.
[09/28 17:57:36]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:38]  Improved gap from 0.0 to 43.75
[09/28 17:57:39]  Improved number of small numbers from 64 to 100 out of a max of 100
[09/28 17:57:39]  Verifer returned sat in 2.816078 secs.
[09/28 17:57:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2123.962646    1823.962646  1350.372070  2123.962646    0.058594  1823.962646        0.0  300.000000      300.000000
1    2123.962646    1902.801025  1350.372070  2123.962646  299.999756  1902.801025        0.0  221.161621      200.000000
2    2123.962891    1997.094971  1350.372070  2123.962891  221.161865  1997.094971        0.0  126.867920      100.000244
3    2123.962891    2123.933350  1350.372070  2123.962891   92.323242  2123.933350        0.0    0.029541        0.000244
4    2171.094971    2123.962646  1403.239746  2171.094971   47.161621  2123.962646        0.0   47.132324        0.000000
5    2344.124268    2171.094971  1403.239746  2344.124268  220.161621  2171.094971        0.0  173.029297       73.029297
6    2344.124268    2300.404053  1430.180664  2344.124268  173.000000  2300.404053        0.0   43.720215       -0.029785
7    2387.904053    2344.154053  1486.430664  2387.904053   87.500000  2344.154053        0.0   43.750000        0.000000
8    2388.904053    2387.904053  1486.430664  2388.904053   44.750000  2387.904053        0.0    1.000000      -99.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:39]  --------------------------------------------------------------------------------
[09/28 17:57:39]  Iteration: 29 (0 solution, 28 counterexamples)
[09/28 17:57:41]  Generator returned sat in 0.801686 secs.
[09/28 17:57:41]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:42]  Improved gap from 0.0 to 100
[09/28 17:57:42]  Improved number of small numbers from 84 to 100 out of a max of 100
[09/28 17:57:42]  Verifer returned sat in 0.839295 secs.
[09/28 17:57:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2019.189209    1758.760254  1430.18042  2019.189209    0.058594  1758.760254        0.0  260.428955      218.799805
1    2019.204102    1801.330811  1430.18042  2019.204102  260.443848  1801.330811        0.0  217.873291      118.814697
2    2200.389160    1900.389404  1430.18042  2200.389160  399.058350  1900.389404        0.0  299.999756      199.999756
3    2200.404053    2019.174805  1430.18042  2200.404053  300.014648  2019.174805        0.0  181.229248      100.014648
4    2300.389404    2200.389404  1430.18042  2300.389404  281.214600  2200.389404        0.0  100.000000      100.000000
5    2598.447998    2300.389404  1430.18042  2598.447998  398.058594  2300.389404        0.0  298.058594      298.058594
6    2700.418701    2300.403809  1430.18042  2700.418701  400.029297  2300.403809        0.0  400.014893      300.029297
7    2700.418701    2419.189453  1430.18042  2700.418701  341.629150  2419.189453        0.0  281.229248      200.029297
8    2700.418701    2598.462646  1430.18042  2700.418701  281.214600  2598.462646        0.0  101.956055      100.029297
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:43]  --------------------------------------------------------------------------------
[09/28 17:57:43]  Iteration: 30 (0 solution, 29 counterexamples)
[09/28 17:57:45]  Generator returned sat in 0.910780 secs.
[09/28 17:57:45]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:47]  Improved gap from 0.0 to 56.25
[09/28 17:57:47]  Improved number of small numbers from 55 to 100 out of a max of 100
[09/28 17:57:47]  Verifer returned sat in 2.592962 secs.
[09/28 17:57:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    2652.827393    2596.548096  1021.367432  2652.827393    0.058594  2596.548096        0.0  56.279297       56.250000
1    2652.827393    2596.577393  1065.117432  2652.827393   56.279053  2596.577393        0.0  56.250000        0.000000
2    2709.077393    2652.827393  1108.867432  2709.077393  112.500000  2652.827393        0.0  56.250000        0.000000
3    2770.135986    2770.106689  1108.867432  2770.135986  117.308594  2770.106689        0.0   0.029297      -38.941406
4    2857.885986    2809.077393  1152.617432  2857.885986   87.779297  2809.077393        0.0  48.808594       -7.441406
5    2916.327393    2865.327393  1196.367432  2916.327393  107.250000  2865.327393        0.0  51.000000       -5.250000
6    2972.577393    2921.577393  1240.117432  2972.577393  107.250000  2921.577393        0.0  51.000000       -5.250000
7    2998.312744    2977.827393  1283.867188  2998.312744   76.735352  2977.827393        0.0  20.485352      -35.764893
8    3063.202393    3034.077637  1283.867188  3063.202393   85.375000  3034.077637        0.0  29.124756      -70.875244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:48]  --------------------------------------------------------------------------------
[09/28 17:57:48]  Iteration: 31 (0 solution, 30 counterexamples)
[09/28 17:57:50]  Generator returned sat in 1.078397 secs.
[09/28 17:57:50]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:51]  Improved gap from 0.0146484375 to 43.75
[09/28 17:57:51]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:57:51]  Verifer returned sat in 0.719985 secs.
[09/28 17:57:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2765.327393    2621.577393   996.367432  2765.327393    0.058594  2621.577393        0.0  143.750000          143.75
1    2765.327393    2720.842041   996.367432  2765.327393    0.029297  2720.842041        0.0   44.485352           43.75
2    2765.327393    2721.577393  1052.617432  2765.327393   44.485352  2721.577393        0.0   43.750000            0.00
3    2809.077393    2765.327393  1108.867432  2809.077393   87.500000  2765.327393        0.0   43.750000            0.00
4    2809.077393    2809.077393  1165.117432  2809.077393   19.970703  2809.077393        0.0    0.000000          -43.75
5    2897.312744    2853.562744  1220.632080  2897.312744   88.235352  2853.562744        0.0   43.750000            0.00
6    2897.312744    2897.312744  1276.882080  2897.312744   19.970703  2897.312744        0.0    0.000000          -43.75
7    3029.298096    2941.062744  1288.646729  3029.298096  131.985352  2941.062744        0.0   88.235352            0.00
8    3029.298096    3029.298096  1344.896729  3029.298096   19.970703  3029.298096        0.0    0.000000          -43.75
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:52]  --------------------------------------------------------------------------------
[09/28 17:57:52]  Iteration: 32 (0 solution, 31 counterexamples)
[09/28 17:57:54]  Generator returned sat in 0.968503 secs.
[09/28 17:57:54]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:55]  Improved gap from 0.0 to 100
[09/28 17:57:55]  Improved number of small numbers from 79 to 100 out of a max of 100
[09/28 17:57:55]  Verifer returned sat in 1.191177 secs.
[09/28 17:57:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2040.445801    1340.446045  1263.985107  2040.445801    0.058350  1340.446045        0.0  699.999756      600.000000
1    2139.946045    1440.445801  1263.985107  2139.946045  799.500000  1440.445801        0.0  699.500244      599.500244
2    2140.475098    1540.446045  1263.985107  2140.475098  700.029297  1540.446045        0.0  600.029053      500.029297
3    2140.475098    1640.445801  1263.985107  2140.475098  402.000000  1640.445801        0.0  500.029297      400.029297
4    2140.475098    1740.446045  1263.985107  2140.475098  401.000000  1740.446045        0.0  400.029053      300.029297
5    2140.475098    1840.445801  1263.985107  2140.475098  400.000000  1840.445801        0.0  300.029297      200.029297
6    2239.445801    2040.445801  1263.985107  2239.445801  399.000000  2040.445801        0.0  199.000000      199.000000
7    2440.945801    2139.946045  1263.985107  2440.945801  400.500000  2139.946045        0.0  300.999756      300.500000
8    2540.946045    2140.504395  1263.985107  2540.946045  401.000000  2140.504395        0.0  400.441650      300.500244
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:56]  --------------------------------------------------------------------------------
[09/28 17:57:56]  Iteration: 33 (0 solution, 32 counterexamples)
[09/28 17:57:58]  Generator returned sat in 0.943780 secs.
[09/28 17:57:58]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:58]  Improved number of small numbers from 99 to 99 out of a max of 99
[09/28 17:57:58]  Verifer returned sat in 0.204861 secs.
[09/28 17:57:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2040.445801    1340.446045  1263.985107  2040.445801    0.058350  1340.446045        0.0  699.999756      600.000000
1    2140.445801    1440.445801  1263.985107  2140.445801  799.999756  1440.445801        0.0  700.000000      600.000000
2    2140.475098    1540.445801  1263.985107  2140.475098  700.029297  1540.445801        0.0  600.029297      500.029297
3    2140.475098    1640.445801  1263.985107  2140.475098  402.000000  1640.445801        0.0  500.029297      400.029297
4    2140.475098    1740.445801  1263.985107  2140.475098  299.999756  1740.445801        0.0  400.029297      300.029297
5    2140.475098    1934.797363  1263.985107  2140.475098  300.000000  1934.797363        0.0  205.677734      200.029297
6    2329.148926    2040.445801  1263.985107  2329.148926  394.351562  2040.445801        0.0  288.703125      288.703125
7    2438.621582    2140.445801  1263.985107  2438.621582  398.175781  2140.445801        0.0  298.175781      298.175781
8    2540.533691    2140.504395  1263.985107  2540.533691  400.087891  2140.504395        0.0  400.029297      300.087891
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:58]  --------------------------------------------------------------------------------
[09/28 17:57:58]  Iteration: 34 (0 solution, 33 counterexamples)
[09/28 17:58:00]  Generator returned sat in 0.388977 secs.
[09/28 17:58:00]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:00]  Improved number of small numbers from 99 to 99 out of a max of 99
[09/28 17:58:00]  Verifer returned sat in 0.205270 secs.
[09/28 17:58:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2040.445557    1340.445557  1263.985107  2040.445557    0.058105  1340.445557        0.0  700.000000      600.000000
1    2140.445557    1440.445557  1263.985107  2140.445557  800.000000  1440.445557        0.0  700.000000      600.000000
2    2140.474854    1540.445557  1263.985107  2140.474854  700.029297  1540.445557        0.0  600.029297      500.029297
3    2140.474854    1640.445557  1263.985107  2140.474854  402.000000  1640.445557        0.0  500.029297      400.029297
4    2140.474854    1740.445557  1263.985107  2140.474854  299.000000  1740.445557        0.0  400.029297      300.029297
5    2140.474854    1935.797119  1263.985107  2140.474854  299.000000  1935.797119        0.0  204.677734      200.029297
6    2330.148682    2040.445557  1263.985107  2330.148682  394.351562  2040.445557        0.0  289.703125      289.703125
7    2438.621338    2140.445557  1263.985107  2438.621338  398.175781  2140.445557        0.0  298.175781      298.175781
8    2540.533447    2140.504150  1263.985107  2540.533447  400.087891  2140.504150        0.0  400.029297      300.087891
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:01]  --------------------------------------------------------------------------------
[09/28 17:58:01]  Iteration: 35 (0 solution, 34 counterexamples)
[09/28 17:58:03]  Generator returned sat in 0.547098 secs.
[09/28 17:58:03]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:10]  Verifer returned unsat in 7.433741 secs.
[09/28 17:58:10]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:10]  --------------------------------------------------------------------------------
[09/28 17:58:10]  Iteration: 36 (1 solution, 34 counterexamples)
[09/28 17:58:11]  Generator returned sat in 0.121000 secs.
[09/28 17:58:12]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:21]  Verifer returned unsat in 9.677182 secs.
[09/28 17:58:21]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:21]  --------------------------------------------------------------------------------
[09/28 17:58:21]  Iteration: 37 (2 solution, 34 counterexamples)
[09/28 17:58:23]  Generator returned sat in 0.204316 secs.
[09/28 17:58:23]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:25]  Improved gap from 0.0145263671875 to 100
[09/28 17:58:25]  Improved number of small numbers from 63 to 100 out of a max of 100
[09/28 17:58:25]  Verifer returned sat in 2.525245 secs.
[09/28 17:58:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      91.161377    -208.838623  1263.984863    91.161377    0.058105  -208.838623        0.0  300.000000      200.000000
1     191.161377    -108.838623  1263.984863   191.161377  400.000000  -108.838623        0.0  300.000000      200.000000
2     591.161133      -8.838623  1263.984863   591.161133  699.999756    -8.838623        0.0  599.999756      499.999756
3     591.161133      91.161377  1263.984863   591.161133  399.116211    91.161377        0.0  499.999756      399.999756
4     591.161133     191.161377  1263.984863   591.161133  400.116211   191.161377        0.0  399.999756      299.999756
5     592.277588     390.974854  1263.984863   592.277588  401.116211   390.974854        0.0  201.302734      201.116211
6     791.439697     491.161377  1263.984863   791.439697  400.464844   491.161377        0.0  300.278320      300.278320
7     891.393799     591.161377  1263.984863   891.393799  400.232422   591.161377        0.0  300.232422      300.232422
8     991.277588     591.219238  1263.984863   991.277588  400.116211   591.219238        0.0  400.058350      300.116211
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:26]  --------------------------------------------------------------------------------
[09/28 17:58:26]  Iteration: 38 (2 solution, 35 counterexamples)
[09/28 17:58:28]  Generator returned sat in 1.351526 secs.
[09/28 17:58:28]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:29]  Improved gap from 99.087158203125 to 100
[09/28 17:58:29]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:58:29]  Verifer returned sat in 0.432268 secs.
[09/28 17:58:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     311.045166     111.045166  1263.984863   311.045166    0.058105   111.045166        0.0  200.000000      200.000000
1     311.045166     211.045166  1263.984863   311.045166  200.000000   211.045166        0.0  100.000000      100.000000
2     311.045166     211.045166  1263.984863   311.045166    0.029053   211.045166        0.0  100.000000        0.000000
3     610.074219     311.045166  1263.984863   610.074219  399.029053   311.045166        0.0  299.029053      199.029053
4     610.074219     411.045166  1263.984863   610.074219  200.000000   411.045166        0.0  199.029053       99.029053
5     611.045166     610.103271  1263.984863   611.045166  200.000000   610.103271        0.0    0.941895        0.000000
6    1009.161377     711.016113  1263.984863  1009.161377  399.058105   711.016113        0.0  298.145264      298.116211
7    1111.074219     711.045166  1263.984863  1111.074219  400.058105   711.045166        0.0  400.029053      300.029053
8    1112.103271     911.045166  1263.984863  1112.103271  401.058105   911.045166        0.0  201.058105      201.058105
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:30]  --------------------------------------------------------------------------------
[09/28 17:58:30]  Iteration: 39 (2 solution, 36 counterexamples)
[09/28 17:58:33]  Generator returned sat in 2.227854 secs.
[09/28 17:58:33]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:58:35]  Improved gap from 0.0 to 65.625
[09/28 17:58:35]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:58:35]  Verifer returned sat in 2.251160 secs.
[09/28 17:58:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     809.016113     510.458252  1263.984863   809.016113    0.057861   510.458252        0.0  298.557861      298.557861
1     810.342529     610.458252  1263.984863   810.342529  299.884277   610.458252        0.0  199.884277      199.884277
2     810.400391     710.458252  1263.984863   810.400391  199.942139   710.458252        0.0   99.942139       99.942139
3     810.400391     809.016113  1263.984863   810.400391   67.009277   809.016113        0.0    1.384277       -0.057861
4     876.025391     810.458252  1298.359863   876.025391   67.009277   810.458252        0.0   65.567139       -0.057861
5     877.467529     876.083252  1332.734863   877.467529   67.009277   876.083252        0.0    1.384277      -64.240723
6     943.092529     941.708252  1367.109863   943.092529   67.009277   941.708252        0.0    1.384277      -64.240723
7    1008.717529    1007.333252  1401.484863  1008.717529   67.009277  1007.333252        0.0    1.384277      -64.240723
8    1074.342529    1072.958252  1435.859863  1074.342529   67.009277  1072.958252        0.0    1.384277      -64.240723
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:36]  --------------------------------------------------------------------------------
[09/28 17:58:36]  Iteration: 40 (2 solution, 37 counterexamples)
[09/28 17:58:38]  Generator returned sat in 0.390819 secs.
[09/28 17:58:38]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:58:58]  Improved gap from 0.0 to 1.5625
[09/28 17:58:58]  Improved number of small numbers from 45 to 100 out of a max of 100
[09/28 17:58:58]  Verifer returned sat in 20.284465 secs.
[09/28 17:58:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    1382.855469    1379.832275   836.920654  1382.855469  0.057861  1379.832275        0.0  3.023193       -0.028809
1    1384.417969    1382.884521   935.357910  1384.417969  4.585693  1382.884521        0.0  1.533447       -0.029053
2    1384.475830    1384.447021  1033.795410  1384.475830  1.591309  1384.447021        0.0  0.028809       -1.533691
3    1387.922607    1386.009521  1131.853516  1387.922607  3.475586  1386.009521        0.0  1.913086       -0.028809
4    1389.835938    1387.951416  1229.940430  1389.835938  3.826416  1387.951416        0.0  1.884521       -0.028564
5    1391.749023    1389.864746  1328.055908  1391.749023  3.797607  1389.864746        0.0  1.884277        0.000000
6    1393.662354    1391.749023  1426.113770  1393.662354  3.797607  1391.749023        0.0  1.913330       -0.028809
7    1395.546631    1393.691162  1524.258301  1395.546631  3.797607  1393.691162        0.0  1.855469        0.000000
8    1397.488770    1395.604248  1622.287598  1397.488770  3.797607  1395.604248        0.0  1.884521       -0.028564
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:59]  --------------------------------------------------------------------------------
[09/28 17:58:59]  Iteration: 41 (2 solution, 38 counterexamples)
[09/28 17:59:00]  Generator returned sat in 0.364613 secs.
[09/28 17:59:01]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:59:01]  Improved gap from 0.00180816650390625 to 100
[09/28 17:59:01]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:59:01]  Verifer returned sat in 0.439371 secs.
[09/28 17:59:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     980.633301     880.633301  1328.055908   980.633301    0.057861   880.633301        0.0  100.000000      100.000000
1     980.633301     880.633301  1328.055908   980.633301  100.000000   880.633301        0.0  100.000000        0.000000
2    1080.575439     980.633301  1328.055908  1080.575439  199.942139   980.633301        0.0   99.942139       -0.057861
3    1379.633301    1080.633301  1328.055908  1379.633301  399.000000  1080.633301        0.0  299.000000      199.000000
4    1480.633301    1279.691162  1328.055908  1480.633301  400.000000  1279.691162        0.0  200.942139      200.000000
5    1680.691162    1280.633301  1328.055908  1680.691162  401.000000  1280.633301        0.0  400.057861      300.057861
6    1680.691162    1480.633301  1328.055908  1680.691162  299.000000  1480.633301        0.0  200.057861      200.057861
7    1879.633301    1480.633301  1328.055908  1879.633301  399.000000  1480.633301        0.0  399.000000      299.000000
8    1880.633301    1580.633301  1328.055908  1880.633301  400.000000  1580.633301        0.0  300.000000      200.000000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:02]  --------------------------------------------------------------------------------
[09/28 17:59:02]  Iteration: 42 (2 solution, 39 counterexamples)
[09/28 17:59:06]  Generator returned sat in 2.647551 secs.
[09/28 17:59:06]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:16]  Improved gap from 0.0 to 6.25
[09/28 17:59:17]  Improved number of small numbers from 64 to 100 out of a max of 100
[09/28 17:59:17]  Verifer returned sat in 10.897590 secs.
[09/28 17:59:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1348.554199    1215.215576  1328.055908  1348.554199    0.057617  1215.215576        0.0  133.338623      106.221191
1    1348.583008    1342.333008  1328.055908  1348.583008  133.367432  1342.333008        0.0    6.250000        6.250000
2    1348.611816    1342.361816  1421.777100  1348.611816    6.278809  1342.361816        0.0    6.250000        0.000000
3    1348.611816    1348.611816  1515.527100  1348.611816    6.221154  1348.611816        0.0    0.000000       -6.250000
4    1481.008057    1412.156250  1515.527100  1481.008057  132.396240  1412.156250        0.0   68.851807       26.146240
5    1481.008057    1454.861816  1589.380859  1481.008057   68.823242  1454.861816        0.0   26.146240        0.000000
6    1545.523438    1481.008057  1624.836914  1545.523438   90.661621  1481.008057        0.0   64.515381       -0.028564
7    1612.404297    1545.552246  1657.805664  1612.404297  131.396240  1545.552246        0.0   66.852051       -0.178955
8    1677.948242    1612.583252  1657.805908  1677.948242  132.395996  1612.583252        0.0   65.364990      -34.634766
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:17]  --------------------------------------------------------------------------------
[09/28 17:59:17]  Iteration: 43 (2 solution, 40 counterexamples)
[09/28 17:59:19]  Generator returned sat in 0.229466 secs.
[09/28 17:59:19]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:28]  Improved gap from 3.82568359375 to 4.6875
[09/28 17:59:28]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:59:28]  Verifer returned sat in 9.030713 secs.
[09/28 17:59:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2579.026855    2447.084473  1593.313477  2579.026855    0.057617  2447.084473        0.0  131.942383      104.716309
1    2579.026855    2574.310547  1593.313477  2579.026855  131.942383  2574.310547        0.0    4.716309        4.716309
2    2579.026855    2574.339355  1688.597168  2579.026855    4.716309  2574.339355        0.0    4.687500        0.000000
3    2579.026855    2579.026855  1783.909668  2579.026855    4.658691  2579.026855        0.0    0.000000       -4.687500
4    2710.969238    2638.723633  1783.909668  2710.969238  131.942383  2638.723633        0.0   72.245605       27.254883
5    2710.969238    2683.714355  1856.625977  2710.969238   64.413086  2683.714355        0.0   27.254883       -0.028809
6    2770.608398    2710.998047  1897.015625  2770.608398   86.894043  2710.998047        0.0   59.610352        0.000000
7    2842.969238    2770.637207  1924.625977  2842.969238  131.971191  2770.637207        0.0   72.332031       -0.028809
8    2902.579590    2842.998047  1924.625977  2902.579590  131.942383  2842.998047        0.0   59.581543      -40.418457
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:29]  --------------------------------------------------------------------------------
[09/28 17:59:29]  Iteration: 44 (2 solution, 41 counterexamples)
[09/28 17:59:31]  Generator returned sat in 0.736775 secs.
[09/28 17:59:31]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:36]  Improved gap from 0.0 to 53.125
[09/28 17:59:36]  Improved number of small numbers from 55 to 100 out of a max of 100
[09/28 17:59:36]  Verifer returned sat in 4.955920 secs.
[09/28 17:59:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2478.679443    1978.650879  1988.972900  2478.679443    0.057373  1978.650879        0.0  500.028564      400.028564
1    2478.679443    2178.650879  1988.972900  2478.679443  500.000000  2178.650879        0.0  300.028564      300.028564
2    2480.247070    2278.650879  1988.972900  2480.247070  301.596191  2278.650879        0.0  201.596191      201.596191
3    2480.247070    2378.650879  1988.972900  2480.247070   60.692383  2378.650879        0.0  101.596191      101.596191
4    2480.247070    2477.679443  1988.972900  2480.247070   59.692383  2477.679443        0.0    2.567627        1.596191
5    2536.371826    2478.650879  2031.251953  2536.371826   58.692383  2478.650879        0.0   57.720947        0.000000
6    2536.371826    2536.371826  2078.126709  2536.371826   57.692383  2536.371826        0.0    0.000000      -53.125244
7    2593.064209    2589.497070  2125.001709  2593.064209   56.692383  2589.497070        0.0    3.567139      -49.557861
8    2645.189453    2642.622070  2125.001709  2645.189453   55.692383  2642.622070        0.0    2.567383      -97.432617
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:36]  --------------------------------------------------------------------------------
[09/28 17:59:36]  Iteration: 45 (2 solution, 42 counterexamples)
[09/28 17:59:38]  Generator returned sat in 0.481405 secs.
[09/28 17:59:38]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:58]  Improved gap from 0.0 to 1.5625
[09/28 18:00:00]  Improved number of small numbers from 53 to 60 out of a max of 100
[09/28 18:00:00]  Verifer returned sat in 21.013793 secs.
[09/28 18:00:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    2089.346191    2087.346208  1488.243950  2089.346191  0.057373  2087.346208        0.0  1.999983        1.999983
1    2089.346191    2087.346208  1586.243950  2089.346191  0.014893  2087.346208        0.0  1.999983       -0.000017
2    2090.908708    2089.346208  1684.681450  2090.908708  3.562500  2089.346208        0.0  1.562500        0.000000
3    2092.582846    2090.908708  1783.007312  2092.582846  3.236638  2090.908708        0.0  1.674138        0.000000
4    2094.308277    2092.582846  1881.281881  2094.308277  3.399569  2092.582846        0.0  1.725431        0.000000
5    2095.900950    2094.308277  1979.689209  2095.900950  3.318103  2094.308277        0.0  1.592672        0.000000
6    2097.448363    2095.900950  2078.126709  2097.448363  3.140086  2095.900950        0.0  1.547414       -0.015086
7    2098.967113    2097.463450  2176.564209  2098.967113  3.066164  2097.463450        0.0  1.503664       -0.058836
8    2100.436833    2099.026123  2275.001465  2100.436833  2.973384  2099.026123        0.0  1.410710       -0.151861
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:00]  --------------------------------------------------------------------------------
[09/28 18:00:00]  Iteration: 46 (2 solution, 43 counterexamples)
[09/28 18:00:02]  Generator returned sat in 0.411623 secs.
[09/28 18:00:02]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:00:18]  Improved gap from 0.0 to 1.5625
[09/28 18:00:19]  Improved number of small numbers from 47 to 56 out of a max of 100
[09/28 18:00:19]  Verifer returned sat in 16.950938 secs.
[09/28 18:00:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    1596.824219    1596.795771  1978.765869  1596.824219  0.057129  1596.795771        0.0  0.028448        0.000000
1    1598.358271    1596.824457  2077.203131  1598.358271  1.562500  1596.824457        0.0  1.533813       -0.028687
2    1599.949457    1598.386957  2175.640631  1599.949457  3.125000  1598.386957        0.0  1.562500        0.000000
3    1602.458380    1599.949457  2273.131708  1602.458380  4.071423  1599.949457        0.0  2.508923        0.000000
4    1604.562012    1602.458380  2371.028076  1604.562012  4.612555  1602.458380        0.0  2.103632        0.000000
5    1606.581619    1604.562012  2469.008469  1606.581619  4.123239  1604.562012        0.0  2.019607        0.000000
6    1608.711158    1606.581619  2566.878906  1608.711158  4.149147  1606.581619        0.0  2.129540       -0.000023
7    1610.972273    1608.739845  2664.617676  1610.972273  4.390654  1608.739845        0.0  2.232428       -0.000140
8    1613.075904    1610.972412  2762.514160  1613.075904  4.336060  1610.972412        0.0  2.103492       -0.000023
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:20]  --------------------------------------------------------------------------------
[09/28 18:00:20]  Iteration: 47 (2 solution, 44 counterexamples)
[09/28 18:00:22]  Generator returned sat in 0.683932 secs.
[09/28 18:00:22]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:00:22]  Improved gap from 1.1036318824404763 to 100
[09/28 18:00:23]  Improved number of small numbers from 54 to 100 out of a max of 100
[09/28 18:00:23]  Verifer returned sat in 0.594056 secs.
[09/28 18:00:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1203.405029     903.404785  2094.608398  1203.405029    0.056885   903.404785        0.0  300.000244      300.000000
1    1203.405029    1003.404785  2094.608398  1203.405029    0.028564  1003.404785        0.0  200.000244      200.000000
2    1401.404785    1003.405029  2094.608398  1401.404785  398.000000  1003.405029        0.0  397.999756      297.999756
3    1401.404785    1203.405029  2094.608398  1401.404785  397.971436  1203.405029        0.0  197.999756      197.999756
4    1602.376465    1203.405029  2094.608398  1602.376465  398.971436  1203.405029        0.0  398.971436      298.971436
5    1603.376465    1403.405029  2094.608398  1603.376465  399.971436  1403.405029        0.0  199.971436      199.971436
6    1804.376465    1403.405029  2094.608398  1804.376465  400.971436  1403.405029        0.0  400.971436      300.971436
7    1805.376465    1603.404785  2094.608398  1805.376465  401.971436  1603.404785        0.0  201.971680      201.971436
8    2003.390381    1603.433350  2094.608398  2003.390381  399.985596  1603.433350        0.0  399.957031      299.985352
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:23]  --------------------------------------------------------------------------------
[09/28 18:00:23]  Iteration: 48 (2 solution, 45 counterexamples)
[09/28 18:00:26]  Generator returned sat in 1.385766 secs.
[09/28 18:00:26]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 18:00:28]  Improved gap from 0.0 to 0
[09/28 18:00:28]  Improved number of small numbers from 60 to 100 out of a max of 100
[09/28 18:00:28]  Verifer returned sat in 2.053453 secs.
[09/28 18:00:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    1623.426025    1623.397705  1794.643799  1623.426025  0.056885  1623.397705        0.0  0.028320        0.028320
1    1624.376221    1623.433350  1893.665283  1624.376221  0.978516  1623.433350        0.0  0.942871        0.000000
2    1625.376465    1624.376465  1992.658203  1625.376465  1.943115  1624.376465        0.0  1.000000       -0.006836
3    1625.404785    1625.383545  2092.636719  1625.404785  1.028320  1625.383545        0.0  0.021240        0.000000
4    1626.369385    1625.405029  2191.665039  1626.369385  0.985840  1625.405029        0.0  0.964355       -0.007080
5    1626.383789    1626.376465  2291.650879  1626.383789  0.978760  1626.376465        0.0  0.007324       -0.006836
6    1627.376465    1626.390869  2390.665039  1627.376465  1.000000  1626.390869        0.0  0.985596        0.000000
7    1627.376465    1627.376465  2490.650879  1627.376465  0.978760  1627.376465        0.0  0.000000       -0.014160
8    1628.355225    1628.354980  2490.651123  1628.355225  0.978760  1628.354980        0.0  0.000244      -99.035156
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:29]  --------------------------------------------------------------------------------
[09/28 18:00:29]  Iteration: 49 (2 solution, 46 counterexamples)
[09/28 18:00:31]  Generator returned sat in 0.385370 secs.
[09/28 18:00:31]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:31]  Verifer returned unsat in 0.304579 secs.
[09/28 18:00:31]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:31]  --------------------------------------------------------------------------------
[09/28 18:00:31]  Iteration: 50 (3 solution, 46 counterexamples)
[09/28 18:00:36]  Generator returned sat in 3.038239 secs.
[09/28 18:00:36]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:38]  Improved gap from 0.0 to 42.1875
[09/28 18:00:39]  Improved number of small numbers from 74 to 100 out of a max of 100
[09/28 18:00:39]  Verifer returned sat in 2.524038 secs.
[09/28 18:00:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1754.309814    1454.338379  2293.731445  1754.309814    0.056885  1454.338379        0.0  299.971436      299.971436
1    1754.309814    1537.372559  2293.731445  1754.309814  299.971436  1537.372559        0.0  216.937256      199.971436
2    1754.309814    1621.775879  2293.731445  1754.309814  216.908936  1621.775879        0.0  132.533936       99.971436
3    1754.309814    1749.548828  2293.731445  1754.309814   95.954102  1749.548828        0.0    4.760986       -0.028564
4    1796.525879    1754.338379  2351.543945  1796.525879   46.977051  1754.338379        0.0   42.187500        0.000000
5    1971.304199    1796.525879  2351.543945  1971.304199  216.965820  1796.525879        0.0  174.778320       74.778320
6    1971.304199    1927.116699  2376.737061  1971.304199  174.750000  1927.116699        0.0   44.187500       -0.028564
7    2013.491699    1971.332764  2434.549561  2013.491699   86.375000  1971.332764        0.0   42.158936       -0.028564
8    2013.520264    2013.520264  2434.549561  2013.520264   42.187500  2013.520264        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:39]  --------------------------------------------------------------------------------
[09/28 18:00:39]  Iteration: 51 (3 solution, 47 counterexamples)
[09/28 18:00:42]  Generator returned sat in 0.728008 secs.
[09/28 18:00:42]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:44]  Improved gap from 0.0 to 0
[09/28 18:00:44]  Improved number of small numbers from 52 to 100 out of a max of 100
[09/28 18:00:44]  Verifer returned sat in 2.014392 secs.
[09/28 18:00:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1754.309570    1703.402100  2004.437256  1754.309570    0.056885  1703.402100        0.0   50.907471       50.907471
1    1754.309570    1751.423340  2053.515625  1754.309570    0.014404  1751.423340        0.0    2.886230       -0.014160
2    1754.352295    1754.323975  2153.487061  1754.352295    2.928955  1754.323975        0.0    0.028320        0.000000
3    1754.352295    1754.352295  2203.479980  1754.352295    0.014160  1754.352295        0.0    0.000000      -50.007080
4    1805.302490    1804.359375  2302.536865  1805.302490   50.950195  1804.359375        0.0    0.943115        0.000000
5    1856.295410    1805.302490  2351.543945  1856.295410   51.936035  1805.302490        0.0   50.992920        0.000000
6    1856.295410    1856.295410  2451.543945  1856.295410   50.978516  1856.295410        0.0    0.000000        0.000000
7    1957.238525    1856.309570  2451.543945  1957.238525  100.943115  1856.309570        0.0  100.928955        0.943115
8    1957.238525    1956.295654  2451.543945  1957.238525   50.950195  1956.295654        0.0    0.942871      -99.056885
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:44]  --------------------------------------------------------------------------------
[09/28 18:00:44]  Iteration: 52 (3 solution, 48 counterexamples)
[09/28 18:00:46]  Generator returned sat in 0.350971 secs.
[09/28 18:00:47]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:53]  Improved gap from 0.01422119140625 to 17.1875
[09/28 18:00:55]  Improved number of small numbers from 50 to 58 out of a max of 100
[09/28 18:00:55]  Verifer returned sat in 8.010346 secs.
[09/28 18:00:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1736.000000    1605.737773  2070.646240  1736.000000    0.056641  1605.737773        0.0  130.262227       98.806885
1    1737.164795    1736.028564  2070.646240  1737.164795  131.427022  1736.028564        0.0    1.136230       -0.028320
2    1754.352295    1737.193237  2153.458618  1754.352295   18.323730  1737.193237        0.0   17.159058       -0.028442
3    1771.568237    1754.380737  2236.271118  1771.568237   34.375000  1754.380737        0.0   17.187500        0.000000
4    1903.023702    1771.568237  2236.271118  1903.023702  148.642965  1771.568237        0.0  131.455465       31.455465
5    1903.023702    1871.568237  2304.815653  1903.023702   35.539673  1871.568237        0.0   31.455465        0.000000
6    1955.525574    1903.023702  2352.285400  1955.525574   83.957336  1903.023702        0.0   52.501872       -0.028381
7    2018.323853    1955.554016  2389.515381  2018.323853  115.300151  1955.554016        0.0   62.769836       -0.000122
8    2104.196981    2018.352051  2403.642334  2104.196981  148.642965  2018.352051        0.0   85.844930       -0.000041
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:55]  --------------------------------------------------------------------------------
[09/28 18:00:55]  Iteration: 53 (3 solution, 49 counterexamples)
[09/28 18:00:59]  Generator returned sat in 1.652672 secs.
[09/28 18:00:59]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:01]  Improved gap from 0.0 to 43.75
[09/28 18:01:02]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 18:01:02]  Verifer returned sat in 2.905907 secs.
[09/28 18:01:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1563.083252    1163.083252  2100.510498  1563.083252    0.056641  1163.083252        0.0  400.000000      300.000000
1    1614.248291    1342.946533  2100.510498  1614.248291  451.165039  1342.946533        0.0  271.301758      251.165039
2    1614.248291    1445.248291  2100.510498  1614.248291    0.028320  1445.248291        0.0  169.000000      151.165039
3    1614.248291    1563.054932  2100.510498  1614.248291  100.330078  1563.054932        0.0   51.193359       51.165039
4    1614.248291    1563.083252  2149.345459  1614.248291   51.165039  1563.083252        0.0   51.165039        0.000000
5    1783.219971    1614.248291  2149.345459  1783.219971  220.136719  1614.248291        0.0  168.971680       68.971680
6    1783.248291    1739.526611  2180.317139  1783.248291  169.000000  1739.526611        0.0   43.721680       -0.028320
7    1825.026611    1783.276611  2236.567139  1825.026611   85.500000  1783.276611        0.0   41.750000       -2.000000
8    1827.026611    1827.026611  2236.567139  1827.026611   43.750000  1827.026611        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:02]  --------------------------------------------------------------------------------
[09/28 18:01:02]  Iteration: 54 (3 solution, 50 counterexamples)
[09/28 18:01:05]  Generator returned sat in 0.902237 secs.
[09/28 18:01:05]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:10]  Verifer returned unsat in 4.744183 secs.
[09/28 18:01:10]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:10]  --------------------------------------------------------------------------------
[09/28 18:01:10]  Iteration: 55 (4 solution, 50 counterexamples)
[09/28 18:01:12]  Generator returned sat in 0.611589 secs.
[09/28 18:01:12]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:14]  Improved gap from 0.0 to 43.75
[09/28 18:01:14]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 18:01:14]  Verifer returned sat in 2.149102 secs.
[09/28 18:01:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    1461.997559    1162.025879  2099.081299  1461.997559    0.056641  1162.025879        0.0  299.97168       299.97168
1    1461.997559    1243.261719  2099.081299  1461.997559    0.014160  1243.261719        0.0  218.73584       199.97168
2    1462.011719    1330.775879  2099.081299  1462.011719  218.750000  1330.775879        0.0  131.23584        99.98584
3    1462.011719    1461.983398  2099.081299  1462.011719   87.584961  1461.983398        0.0    0.02832        -0.01416
4    1505.775879    1462.025879  2155.331299  1505.775879   43.792480  1462.025879        0.0   43.75000         0.00000
5    1680.790039    1505.775879  2155.331299  1680.790039  218.764160  1505.775879        0.0  175.01416        75.01416
6    1680.790039    1605.775879  2180.317139  1680.790039  175.000000  1605.775879        0.0   75.01416         0.00000
7    1693.275879    1680.804199  2236.552979  1693.275879   87.500000  1680.804199        0.0   12.47168       -31.27832
8    1724.554199    1724.554199  2292.802979  1724.554199   43.750000  1724.554199        0.0    0.00000       -43.75000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:15]  --------------------------------------------------------------------------------
[09/28 18:01:15]  Iteration: 56 (4 solution, 51 counterexamples)
[09/28 18:01:17]  Generator returned sat in 0.351856 secs.
[09/28 18:01:17]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:26]  Improved gap from 0.0 to 15.625
[09/28 18:01:27]  Improved number of small numbers from 53 to 69 out of a max of 100
[09/28 18:01:27]  Verifer returned sat in 10.247433 secs.
[09/28 18:01:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1244.069580    1112.405680  1845.892334  1244.069580    0.056396  1112.405680        0.0  131.663900      100.000000
1    1245.400350    1244.069539  1845.892334  1245.400350  132.994670  1244.069539        0.0    1.330811        1.330770
2    1260.968953    1245.400350  1928.936564  1260.968953   16.899414  1245.400350        0.0   15.568604       -0.056396
3    1276.650350    1261.025350  2013.311564  1276.650350   31.250000  1261.025350        0.0   15.625000        0.000000
4    1409.645020    1276.650350  2013.311564  1409.645020  148.619670  1276.650350        0.0  132.994670       32.994670
5    1409.645020    1376.650350  2080.316895  1409.645020   32.580811  1376.650350        0.0   32.994670        0.000000
6    1458.565755    1409.645020  2131.339844  1458.565755   81.915405  1409.645020        0.0   48.920736       -0.056315
7    1524.912557    1458.622070  2165.049316  1524.912557  115.267537  1458.622070        0.0   66.290487       -0.000041
8    1607.241699    1524.968750  2165.049316  1607.241699  148.619629  1524.968750        0.0   82.272949      -17.670898
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:28]  --------------------------------------------------------------------------------
[09/28 18:01:28]  Iteration: 57 (4 solution, 52 counterexamples)
[09/28 18:01:33]  Generator returned sat in 3.189632 secs.
[09/28 18:01:33]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:37]  Verifer returned unsat in 3.506612 secs.
[09/28 18:01:37]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:37]  --------------------------------------------------------------------------------
[09/28 18:01:37]  Iteration: 58 (5 solution, 52 counterexamples)
[09/28 18:01:39]  Generator returned unsat in 0.999182 secs.
[09/28 18:01:39]  [96mNo more solutions found[0m
[09/28 18:01:39]  Final solutions:
[09/28 18:01:39]  0: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:39]  1: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:39]  2: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:39]  3: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:39]  4: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:39]  Took 322.543682 secs.
