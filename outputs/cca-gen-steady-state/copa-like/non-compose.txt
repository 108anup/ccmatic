[09/28 17:56:35]  --------------------------------------------------------------------------------
[09/28 17:56:35]  Iteration: 1 (0 solution, 0 counterexamples)
[09/28 17:56:35]  Generator returned sat in 0.004443 secs.
[09/28 17:56:35]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:56:35]  Improved gap from 0.0 to 100
[09/28 17:56:35]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:56:35]  Verifer returned sat in 0.369934 secs.
[09/28 17:56:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0          0.000       -100.000     100.0        0.000      0.125     -100.000        0.0    100.000         100.000
1          0.000         -0.250     100.0        0.000    100.000       -0.250        0.0      0.250           0.000
2          0.000          0.000     100.0        0.000      0.125        0.000        0.0      0.000        -100.000
3        100.125        100.000     100.0      100.125    100.125      100.000        0.0      0.125         -99.875
4        701.250        200.000     100.0      701.250    601.250      200.000        0.0    501.250         401.250
5       1603.750        400.000     100.0     1603.750   1403.750      400.000        0.0   1203.750        1203.750
6       3608.500        400.125     100.0     3608.500   3208.500      400.125        0.0   3208.375        3108.500
7       7418.375        500.000     100.0     7418.375   7018.250      500.000        0.0   6918.375        6818.375
8      15137.500        600.000     100.0    15137.500  14637.500      600.000        0.0  14537.500       14437.500
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:36]  --------------------------------------------------------------------------------
[09/28 17:56:36]  Iteration: 2 (0 solution, 1 counterexamples)
[09/28 17:56:36]  Generator returned sat in 0.034228 secs.
[09/28 17:56:36]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:37]  Improved gap from 0.0 to 18.75
[09/28 17:56:38]  Improved number of small numbers from 79 to 101 out of a max of 101
[09/28 17:56:38]  Verifer returned sat in 1.820122 secs.
[09/28 17:56:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      98.874512    -103.375732  100.000000    98.874512    0.124756  -103.375732        0.0  202.250244      199.999756
1      98.874756      -1.125488  100.000000    98.874756  202.250488    -1.125488        0.0  100.000244      100.000000
2      98.874756      -1.000732  100.000000    98.874756   99.999756    -1.000732        0.0   99.875488        0.000000
3      98.874756      98.874756  100.000000    98.874756   26.500244    98.874756        0.0    0.000000     -100.000000
4     200.000000     200.000000  100.000000   200.000000  101.125244   200.000000        0.0    0.000000      -98.874756
5     300.562744     300.562744  179.562012   300.562744  100.562744   300.562744        0.0    0.000000      -18.750000
6     320.437988     320.437988  259.686768   320.437988   19.875244   320.437988        0.0    0.000000      -18.750000
7     340.313232     340.313232  339.811523   340.313232   19.875244   340.313232        0.0    0.000000      -18.750000
8     360.188477     360.188477  339.811523   360.188477   19.875244   360.188477        0.0    0.000000      -98.874756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:38]  --------------------------------------------------------------------------------
[09/28 17:56:38]  Iteration: 3 (0 solution, 2 counterexamples)
[09/28 17:56:38]  Generator returned sat in 0.013197 secs.
[09/28 17:56:38]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:39]  Improved number of small numbers from 61 to 100 out of a max of 100
[09/28 17:56:39]  Verifer returned sat in 0.482570 secs.
[09/28 17:56:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     -90.218994    -790.250244   789.125   -90.218994    0.124512  -790.250244        0.0  700.031250      700.031250
1     -90.218994    -690.250244   789.125   -90.218994  700.031006  -690.250244        0.0  600.031250      600.031250
2     -81.172363    -590.250488   789.125   -81.172363  609.077881  -590.250488        0.0  509.078125      509.077881
3     -81.172363    -590.218994   789.125   -81.172363    0.031250  -590.218994        0.0  509.046631      409.077881
4     -81.172363    -490.250244   789.125   -81.172363  100.046875  -490.250244        0.0  409.077881      309.077881
5     -81.172363    -384.250488   789.125   -81.172363  200.046875  -384.250488        0.0  303.078125      209.077881
6     -81.172363    -290.250244   789.125   -81.172363  303.046875  -290.250244        0.0  209.077881      109.077881
7     162.781006     -90.250244   789.125   162.781006  453.031250   -90.250244        0.0  253.031250      253.031250
8     562.781006     -81.172119   789.125   562.781006  653.031250   -81.172119        0.0  643.953125      553.031250
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:39]  --------------------------------------------------------------------------------
[09/28 17:56:39]  Iteration: 4 (0 solution, 3 counterexamples)
[09/28 17:56:39]  Generator returned sat in 0.019156 secs.
[09/28 17:56:39]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:45]  Improved gap from 0.0 to 18.75
[09/28 17:56:45]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:56:45]  Verifer returned sat in 5.964101 secs.
[09/28 17:56:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0     -81.172363    -262.422363  629.000488   -81.172363    0.124512  -262.422363        0.0   181.25      181.250000
1     -81.172363    -262.422363  629.000488   -81.172363    0.062256  -262.422363        0.0   181.25       81.250000
2     -81.172363     -81.172363  629.000488   -81.172363    0.062256   -81.172363        0.0     0.00      -18.750000
3     237.577637      37.577637  629.000488   237.577637  318.750000    37.577637        0.0   200.00      200.000000
4     237.577637     137.577637  629.000488   237.577637   19.937744   137.577637        0.0   100.00      100.000000
5     237.577637     217.577637  629.000488   237.577637   19.937744   217.577637        0.0    20.00        0.000000
6     237.577637     237.577637  710.250488   237.577637   19.937744   237.577637        0.0     0.00      -18.750000
7     257.515381     257.515381  789.125000   257.515381   19.937744   257.515381        0.0     0.00      -19.937744
8     277.453125     277.453125  789.125000   277.453125   19.937744   277.453125        0.0     0.00     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:46]  --------------------------------------------------------------------------------
[09/28 17:56:46]  Iteration: 5 (0 solution, 4 counterexamples)
[09/28 17:56:46]  Generator returned sat in 0.068955 secs.
[09/28 17:56:46]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:48]  Improved gap from 0.0 to 28.125
[09/28 17:56:48]  Improved number of small numbers from 97 to 101 out of a max of 101
[09/28 17:56:48]  Verifer returned sat in 1.693299 secs.
[09/28 17:56:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0     -68.301514    -123.799805  557.125488   -68.301514    0.124268  -123.799805        0.0  55.498291       -0.062256
1     -68.239258     -68.239258  629.000488   -68.239258   55.560547   -68.239258        0.0   0.000000      -28.125000
2     -40.114258     -40.114258  687.747559   -40.114258   28.125000   -40.114258        0.0   0.000000      -41.252930
3      93.513184      93.451172  687.747559    93.513184  133.627441    93.451172        0.0   0.062012       -7.625488
4     201.076660     112.012695  687.747559   201.076660  107.625488   112.012695        0.0  89.063965       -0.062012
5     201.138672     201.138672  759.622559   201.138672   89.125977   201.138672        0.0   0.000000      -28.125000
6     320.765137     251.326172  759.622559   320.765137  119.626465   251.326172        0.0  69.438965       -8.498535
7     329.263672     329.263672  831.497314   329.263672   77.937500   329.263672        0.0   0.000000      -28.125244
8     436.889160     357.388916  831.497314   436.889160  107.625488   357.388916        0.0  79.500244      -20.499756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:49]  --------------------------------------------------------------------------------
[09/28 17:56:49]  Iteration: 6 (0 solution, 5 counterexamples)
[09/28 17:56:49]  Generator returned sat in 0.067623 secs.
[09/28 17:56:49]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:56:53]  Improved gap from 0.0 to 26.5625
[09/28 17:56:54]  Improved number of small numbers from 43 to 101 out of a max of 101
[09/28 17:56:54]  Verifer returned sat in 4.753086 secs.
[09/28 17:56:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -177.515381    -177.577637  666.463623  -177.515381    0.124023  -177.577637        0.0    0.062256        0.062256
1    -177.515381    -177.515381  739.838867  -177.515381    0.031006  -177.515381        0.0    0.000000      -26.562500
2     149.047119     -93.264893  739.838867   149.047119  326.562500   -93.264893        0.0  242.312012      200.000000
3     149.047119      38.203369  739.838867   149.047119    5.844971    38.203369        0.0  110.843750      100.000000
4     149.047119      64.796631  739.838867   149.047119  110.812988    64.796631        0.0   84.250488        0.000000
5     149.047119     149.047119  813.276367   149.047119   10.812988   149.047119        0.0    0.000000      -26.562500
6     275.609619     175.609863  813.276367   275.609619  126.562500   175.609863        0.0   99.999756        0.000000
7     275.609619     275.609619  886.713867   275.609619   10.812988   275.609619        0.0    0.000000      -26.562500
8     386.422607     302.172119  886.713867   386.422607  110.812988   302.172119        0.0   84.250488      -15.749512
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:54]  --------------------------------------------------------------------------------
[09/28 17:56:54]  Iteration: 7 (0 solution, 6 counterexamples)
[09/28 17:56:55]  Generator returned sat in 0.188560 secs.
[09/28 17:56:55]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:58]  Improved gap from 0.0 to 53.125
[09/28 17:56:58]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:56:58]  Verifer returned sat in 3.449551 secs.
[09/28 17:56:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     110.234619    -233.640381  722.526367   110.234619    0.124023  -233.640381        0.0  343.875000      343.875000
1     166.297607    -133.702393  722.526367   166.297607  399.937988  -133.702393        0.0  300.000000      299.937988
2     166.297607    -133.640381  722.526367   166.297607    0.062012  -133.640381        0.0  299.937988      199.937988
3     166.297607      66.359619  722.526367   166.297607  116.250000    66.359619        0.0   99.937988       99.937988
4     166.297607     110.234619  722.526367   166.297607   57.125000   110.234619        0.0   56.062988       -0.062012
5     166.359619     166.359619  767.401367   166.359619   56.125000   166.359619        0.0    0.000000      -55.125000
6     221.484619     221.484619  814.276367   221.484619   55.125000   221.484619        0.0    0.000000      -53.125000
7     275.609619     275.609619  860.151367   275.609619   54.125000   275.609619        0.0    0.000000      -53.125000
8     328.734619     328.734619  907.026367   328.734619   53.125000   328.734619        0.0    0.000000      -53.125000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:56:59]  --------------------------------------------------------------------------------
[09/28 17:56:59]  Iteration: 8 (0 solution, 7 counterexamples)
[09/28 17:56:59]  Generator returned sat in 0.103371 secs.
[09/28 17:56:59]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:56:59]  Improved gap from 0.0 to 100
[09/28 17:57:00]  Improved number of small numbers from 60 to 82 out of a max of 101
[09/28 17:57:00]  Verifer returned sat in 0.975848 secs.
[09/28 17:57:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     171.385742    -383.606689  722.526367   171.385742    0.123779  -383.606689        0.0  554.992432      554.992243
1     171.385742    -383.606445  722.526367   171.385742  554.992188  -383.606445        0.0  554.992188      454.992243
2     171.385742    -283.606445  722.526367   171.385742    0.062012  -283.606445        0.0  454.992188      354.992243
3     171.385742    -183.606501  722.526367   171.385742  454.930246  -183.606501        0.0  354.992243      254.992243
4     171.385742     -83.606501  722.526367   171.385742  226.465123   -83.606501        0.0  254.992243      154.992243
5     171.385742     116.393499  722.526367   171.385742  112.232561   116.393499        0.0   54.992243       54.992243
6     171.509780     171.447768  722.526367   171.509780   55.116281   171.447768        0.0    0.062012      -44.883719
7     403.091183     316.393499  722.526367   403.091183  231.643415   316.393499        0.0   86.697684       86.697684
8     747.036914     316.455566  722.526367   747.036914  430.643415   316.455566        0.0  430.581348      330.643415
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:01]  --------------------------------------------------------------------------------
[09/28 17:57:01]  Iteration: 9 (0 solution, 8 counterexamples)
[09/28 17:57:01]  Generator returned sat in 0.279245 secs.
[09/28 17:57:01]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:02]  Improved gap from 0.0 to 53.125
[09/28 17:57:02]  Improved number of small numbers from 61 to 101 out of a max of 101
[09/28 17:57:02]  Verifer returned sat in 0.581907 secs.
[09/28 17:57:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     105.580566    -192.856445  722.526367   105.580566    0.123535  -192.856445        0.0  298.437012      298.437012
1     105.642090     -92.856445  722.526367   105.642090  298.498535   -92.856445        0.0  198.498535      198.498535
2     105.642090     -92.856445  722.526367   105.642090    0.062012   -92.856445        0.0  198.498535       98.498535
3     105.642090     105.580566  722.526367   105.642090   58.125000   105.580566        0.0    0.061523       -1.501465
4     162.705566     151.018555  722.526367   162.705566   57.125000   151.018555        0.0   11.687012      -44.437988
5     207.143555     207.143555  769.401123   207.143555   56.125000   207.143555        0.0    0.000000      -53.125244
6     262.268555     262.268555  813.276367   262.268555   55.125000   262.268555        0.0    0.000000      -54.125000
7     316.393555     316.393555  860.151367   316.393555   54.125000   316.393555        0.0    0.000000      -53.125000
8     369.518555     369.518555  907.026123   369.518555   53.125000   369.518555        0.0    0.000000      -53.125244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:03]  --------------------------------------------------------------------------------
[09/28 17:57:03]  Iteration: 10 (0 solution, 9 counterexamples)
[09/28 17:57:03]  Generator returned sat in 0.137694 secs.
[09/28 17:57:03]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:03]  Improved gap from 0.0 to 100
[09/28 17:57:03]  Improved number of small numbers from 92 to 101 out of a max of 101
[09/28 17:57:03]  Verifer returned sat in 0.500879 secs.
[09/28 17:57:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t
0      45.555420     -54.352051  722.526367    45.555420     0.123535   -54.352051        0.0    99.907471       99.907471
1      45.617188      45.586182  722.526367    45.617188    99.969238    45.586182        0.0     0.031006       -0.030762
2      45.647949      45.647949  722.526367    45.647949     0.061768    45.647949        0.0     0.000000     -100.000000
3     145.647949     145.647949  722.526367   145.647949   100.000000   145.647949        0.0     0.000000     -100.000000
4     546.647949     245.647949  722.526367   546.647949   401.000000   245.647949        0.0   301.000000      201.000000
5    1248.709717     345.647949  722.526367  1248.709717  1003.061768   345.647949        0.0   903.061768      803.061768
6    2652.771484     545.647949  722.526367  2652.771484  2307.123535   545.647949        0.0  2107.123535     2107.123535
7    2652.771484     645.647949  722.526367  2652.771484     0.030762   645.647949        0.0  2007.123535     2007.123535
8    2652.771484     745.647705  722.526367  2652.771484   401.061523   745.647705        0.0  1907.123779     1907.123535
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:04]  --------------------------------------------------------------------------------
[09/28 17:57:04]  Iteration: 11 (0 solution, 10 counterexamples)
[09/28 17:57:05]  Generator returned sat in 0.133695 secs.
[09/28 17:57:05]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:05]  Improved gap from 0.0 to 100
[09/28 17:57:05]  Improved number of small numbers from 81 to 91 out of a max of 101
[09/28 17:57:05]  Verifer returned sat in 0.652616 secs.
[09/28 17:57:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t
0     246.694092     146.585938  521.588135   246.694092     0.123291   146.585938        0.0   100.108154      100.108154
1     246.694092     146.586182  521.588135   246.694092   100.108154   146.586182        0.0   100.107910        0.108154
2     346.616943     246.756042  521.588135   346.616943   200.030762   246.756042        0.0    99.860901        0.031006
3     346.740601     346.678833  521.588135   346.740601    99.984558   346.678833        0.0     0.061768      -99.845337
4     546.647949     546.585938  521.588135   546.647949   199.969116   546.585938        0.0     0.062012        0.062012
5     946.524170     546.585938  521.588135   946.524170   399.938232   546.585938        0.0   399.938232      299.938232
6    1346.462402     746.585938  521.588135  1346.462402   799.876465   746.585938        0.0   599.876465      599.876465
7    2346.338867     746.585938  521.588135  2346.338867  1599.752930   746.585938        0.0  1599.752930     1499.752930
8    3946.091797     946.585938  521.588135  3946.091797  3199.505859   946.585938        0.0  2999.505859     2999.505859
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:06]  --------------------------------------------------------------------------------
[09/28 17:57:06]  Iteration: 12 (0 solution, 11 counterexamples)
[09/28 17:57:06]  Generator returned sat in 0.039499 secs.
[09/28 17:57:06]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:07]  Improved gap from 0.0 to 100
[09/28 17:57:07]  Improved number of small numbers from 90 to 101 out of a max of 101
[09/28 17:57:07]  Verifer returned sat in 0.494165 secs.
[09/28 17:57:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t
0     246.585938      46.585693  521.587891   246.585938     0.123047    46.585693        0.0   200.000244      200.000000
1     246.585938     146.585938  521.587891   246.585938   199.938232   146.585938        0.0   100.000000      100.000000
2     246.585938     197.024170  521.587891   246.585938    99.938477   197.024170        0.0    49.561768        0.000000
3     246.585938     246.585938  521.587891   246.585938    49.500000   246.585938        0.0     0.000000     -100.000000
4     346.585938     346.585938  521.587891   346.585938   100.000000   346.585938        0.0     0.000000     -100.000000
5     547.585938     546.585938  521.587891   547.585938   201.000000   546.585938        0.0     1.000000        1.000000
6     949.585938     549.524170  521.587891   949.585938   403.000000   549.524170        0.0   400.061768      303.000000
7    1356.524170     646.585938  521.587891  1356.524170   807.000000   646.585938        0.0   709.938232      609.938232
8    2261.585938     846.585693  521.587891  2261.585938  1615.000000   846.585693        0.0  1415.000244     1415.000000
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:07]  --------------------------------------------------------------------------------
[09/28 17:57:07]  Iteration: 13 (0 solution, 12 counterexamples)
[09/28 17:57:08]  Generator returned sat in 0.504797 secs.
[09/28 17:57:08]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:08]  Improved gap from 99.0615234375 to 100
[09/28 17:57:09]  Improved number of small numbers from 50 to 54 out of a max of 101
[09/28 17:57:09]  Verifer returned sat in 1.083406 secs.
[09/28 17:57:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t
0    -732.164057    -932.164261  521.587891  -732.164057     0.122803  -932.164261        0.0   200.000203      200.000020
1    -732.164057    -834.164098  521.587891  -732.164057   199.937988  -834.164098        0.0   102.000041      100.000020
2    -732.164057    -732.664027  521.587891  -732.164057   102.000000  -732.664027        0.0     0.499969        0.000020
3    -732.164057    -732.164057  521.587891  -732.164057     0.499939  -732.164057        0.0     0.000000      -99.999980
4    -632.164078    -632.164078  521.587891  -632.164078    99.999980  -632.164078        0.0     0.000000     -100.000000
5    -332.164108    -532.164078  521.587891  -332.164108   299.999969  -532.164078        0.0   199.999969       99.999969
6     167.085836    -332.164078  521.587891   167.085836   699.249914  -332.164078        0.0   499.249914      499.249914
7    1265.335739    -318.164078  521.587891  1265.335739  1597.499817  -318.164078        0.0  1583.499817     1497.499817
8    3032.835556    -132.164307  521.587891  3032.835556  3350.999634  -132.164307        0.0  3164.999863     3164.999634
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:10]  --------------------------------------------------------------------------------
[09/28 17:57:10]  Iteration: 14 (0 solution, 13 counterexamples)
[09/28 17:57:11]  Generator returned sat in 0.060388 secs.
[09/28 17:57:11]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:12]  Improved number of small numbers from 45 to 59 out of a max of 100
[09/28 17:57:12]  Verifer returned sat in 1.344110 secs.
[09/28 17:57:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t
0    -732.164057    -932.164057  521.587870  -732.164057     0.122803  -932.164057        0.0   200.000000      200.000000
1    -732.164057    -832.164062  521.587870  -732.164057   199.938721  -832.164062        0.0   100.000005      100.000000
2    -732.164057    -832.164057  521.587870  -732.164057    99.938721  -832.164057        0.0   100.000000        0.000000
3    -732.164057    -732.164057  521.587891  -732.164057    48.500000  -732.164057        0.0     0.000000      -99.999980
4    -535.164057    -535.164057  521.587891  -535.164057   197.000000  -535.164057        0.0     0.000000       -2.999980
5    -515.225459    -515.286860  521.587891  -515.225459    19.938599  -515.286860        0.0     0.061401      -83.061381
6    -316.971064    -432.164057  521.587891  -316.971064   198.315796  -432.164057        0.0   115.192993       15.193014
7     114.467534    -332.164057  521.587891   114.467534   546.631592  -332.164057        0.0   446.631592      346.631612
8     862.599126    -232.163818  521.587891   862.599126  1194.763184  -232.163818        0.0  1094.762945      994.763204
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:13]  --------------------------------------------------------------------------------
[09/28 17:57:13]  Iteration: 15 (0 solution, 14 counterexamples)
[09/28 17:57:14]  Generator returned sat in 0.940571 secs.
[09/28 17:57:14]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:14]  Improved gap from 0.0 to 100
[09/28 17:57:15]  Improved number of small numbers from 38 to 101 out of a max of 101
[09/28 17:57:15]  Verifer returned sat in 0.632769 secs.
[09/28 17:57:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -117.794678    -617.794678  207.218262  -117.794678    0.122803  -617.794678        0.0  500.000000      500.000000
1     111.189941    -617.794434  207.218262   111.189941  728.984619  -617.794434        0.0  728.984375      628.984619
2     111.189941    -517.794678  207.218262   111.189941  687.938477  -517.794678        0.0  628.984619      528.984619
3     111.189941    -417.794678  207.218262   111.189941    0.030762  -417.794678        0.0  528.984619      428.984619
4     111.189941    -288.840576  207.218262   111.189941   19.969238  -288.840576        0.0  400.030518      328.984619
5     111.189941    -117.794678  207.218262   111.189941   19.969238  -117.794678        0.0  228.984619      228.984619
6     111.189941     -25.794434  207.218262   111.189941  228.953857   -25.794434        0.0  136.984375      128.984619
7     512.636475      82.205322  207.218262   512.636475  538.430908    82.205322        0.0  430.431152      430.431152
8     512.636475     112.605469  207.218262   512.636475   19.969238   112.605469        0.0  400.031006      330.431152
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:15]  --------------------------------------------------------------------------------
[09/28 17:57:15]  Iteration: 16 (0 solution, 15 counterexamples)
[09/28 17:57:16]  Generator returned sat in 0.529919 secs.
[09/28 17:57:16]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:16]  Improved gap from 0.0 to 100
[09/28 17:57:17]  Improved number of small numbers from 94 to 101 out of a max of 101
[09/28 17:57:17]  Verifer returned sat in 0.316637 secs.
[09/28 17:57:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -117.794678    -617.794678  207.218018  -117.794678    0.122559  -617.794678        0.0  500.000000      500.000000
1      82.205078    -617.794678  207.218018    82.205078  699.999756  -617.794678        0.0  699.999756      599.999756
2      82.205078    -417.794678  207.218018    82.205078  699.938721  -417.794678        0.0  499.999756      499.999756
3      82.205078    -417.733154  207.218018    82.205078  401.122803  -417.733154        0.0  499.938232      399.999756
4      82.205078    -317.794678  207.218018    82.205078  400.122803  -317.794678        0.0  399.999756      299.999756
5      82.205078    -217.794678  207.218018    82.205078  399.122803  -217.794678        0.0  299.999756      199.999756
6     180.328125    -117.794678  207.218018   180.328125  398.122803  -117.794678        0.0  298.122803      198.122803
7     281.328125      82.205078  207.218018   281.328125  399.122803    82.205078        0.0  199.123047      199.122803
8     482.327881      82.266602  207.218018   482.327881  400.122803    82.266602        0.0  400.061279      300.122559
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:17]  --------------------------------------------------------------------------------
[09/28 17:57:17]  Iteration: 17 (0 solution, 16 counterexamples)
[09/28 17:57:18]  Generator returned sat in 0.680202 secs.
[09/28 17:57:18]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 3/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:19]  Improved number of small numbers from 92 to 94 out of a max of 100
[09/28 17:57:19]  Verifer returned sat in 0.313664 secs.
[09/28 17:57:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -158.946045    -818.610352  207.217773  -158.946045    0.122559  -818.610352        0.0  659.664307      559.664307
1     -16.426758    -718.610352  207.217773   -16.426758  802.183594  -718.610352        0.0  702.183594      602.183594
2     -16.426758    -618.610352  207.217773   -16.426758  702.122314  -618.610352        0.0  602.183594      502.183594
3     -16.426758    -518.610352  207.217773   -16.426758  179.832248  -518.610352        0.0  502.183594      402.183594
4     -16.426758    -418.610352  207.217773   -16.426758  268.748372  -418.610352        0.0  402.183594      302.183594
5     -16.426758    -218.610352  207.217773   -16.426758  402.122559  -218.610352        0.0  202.183594      202.183594
6     383.573486    -158.945855  207.217773   383.573486  602.183838  -158.945855        0.0  542.519341      502.183838
7     383.573486     -18.671631  207.217773   383.573486  179.832248   -18.671631        0.0  402.245117      402.183838
8     383.573486     -18.610352  207.217773   383.573486  268.748372   -18.610352        0.0  402.183838      302.183838
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:19]  --------------------------------------------------------------------------------
[09/28 17:57:19]  Iteration: 18 (0 solution, 17 counterexamples)
[09/28 17:57:21]  Generator returned sat in 0.834542 secs.
[09/28 17:57:21]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:23]  Improved gap from 0.01531982421875 to 25.0
[09/28 17:57:23]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:57:23]  Verifer returned sat in 2.227033 secs.
[09/28 17:57:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -369.671631    -717.610352  132.217773  -369.671631    0.122559  -717.610352        0.0  347.938721      347.938721
1    -325.487793    -717.610352  132.217773  -325.487793  392.122559  -717.610352        0.0  392.122559      292.122559
2    -325.487793    -539.549072  132.217773  -325.487793    0.061279  -539.549072        0.0  214.061279      192.122559
3    -325.487793    -431.549072  132.217773  -325.487793  214.000000  -431.549072        0.0  106.061279       92.122559
4    -325.487793    -369.610352  132.217773  -325.487793  106.000000  -369.610352        0.0   44.122559       -7.877441
5    -317.610352    -317.610352  207.217773  -317.610352   52.000000  -317.610352        0.0    0.000000      -25.000000
6    -292.610352    -292.610352  282.217773  -292.610352   25.000000  -292.610352        0.0    0.000000      -25.000000
7    -154.671631    -267.610352  282.217773  -154.671631  137.938721  -267.610352        0.0  112.938721       12.938721
8    -154.671631    -167.610352  282.217773  -154.671631  101.000000  -167.610352        0.0   12.938721      -87.061279
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:24]  --------------------------------------------------------------------------------
[09/28 17:57:24]  Iteration: 19 (0 solution, 18 counterexamples)
[09/28 17:57:24]  Generator returned sat in 0.077773 secs.
[09/28 17:57:24]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:26]  Improved gap from 24.0 to 26.5625
[09/28 17:57:26]  Improved number of small numbers from 90 to 101 out of a max of 101
[09/28 17:57:26]  Verifer returned sat in 2.015495 secs.
[09/28 17:57:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1232.738281   -1731.738037  1046.345215 -1232.738281    0.122070 -1731.738037        0.0  498.999756      398.999756
1   -1232.738037   -1531.738037  1046.345215 -1232.738037  499.000000 -1531.738037        0.0  299.000000      299.000000
2   -1232.738037   -1531.738037  1046.345215 -1232.738037    0.061035 -1531.738037        0.0  299.000000      199.000000
3   -1133.738037   -1331.738037  1046.345215 -1133.738037  398.000000 -1331.738037        0.0  198.000000      198.000000
4   -1131.738037   -1232.768555  1046.345215 -1131.738037  200.000000 -1232.768555        0.0  101.030518      100.000000
5   -1131.738037   -1183.268799  1046.345215 -1131.738037  101.000000 -1183.268799        0.0   51.530762        0.000000
6   -1131.738037   -1131.738037  1119.782715 -1131.738037   51.500000 -1131.738037        0.0    0.000000      -26.562500
7   -1104.988037   -1104.988037  1193.032715 -1104.988037   26.750000 -1104.988037        0.0    0.000000      -26.562500
8    -978.207520   -1067.768799  1193.032715  -978.207520  126.780518 -1067.768799        0.0   89.561279        0.218018
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:27]  --------------------------------------------------------------------------------
[09/28 17:57:27]  Iteration: 20 (0 solution, 19 counterexamples)
[09/28 17:57:28]  Generator returned sat in 0.123296 secs.
[09/28 17:57:28]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:29]  Improved gap from 0.0 to 26.5625
[09/28 17:57:29]  Improved number of small numbers from 64 to 101 out of a max of 101
[09/28 17:57:29]  Verifer returned sat in 1.355389 secs.
[09/28 17:57:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      18.766357    -281.264160   979.188232    18.766357    0.122070  -281.264160        0.0  300.030518      300.030273
1      18.766357    -181.263916   979.188232    18.766357  300.030273  -181.263916        0.0  200.030273      200.030273
2      18.766602     -87.452881   979.188232    18.766602  200.030518   -87.452881        0.0  106.219482      100.030518
3     125.047119      18.736084   979.188232   125.047119  212.500000    18.736084        0.0  106.311035      106.311035
4     125.047119      71.891602   979.188232   125.047119  106.250000    71.891602        0.0   53.155518        6.311035
5     125.047119     125.047119  1046.314697   125.047119   53.125000   125.047119        0.0    0.000000      -26.562500
6     151.609619     151.609619  1119.752197   151.609619   26.562500   151.609619        0.0    0.000000      -26.562500
7     283.483154     178.172119  1119.752197   283.483154  131.873535   178.172119        0.0  105.311035        5.311035
8     283.483154     282.705322  1119.752197   283.483154  105.280518   282.705322        0.0    0.777832      -94.688965
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:30]  --------------------------------------------------------------------------------
[09/28 17:57:30]  Iteration: 21 (0 solution, 20 counterexamples)
[09/28 17:57:31]  Generator returned sat in 0.314132 secs.
[09/28 17:57:31]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:57:38]  Improved gap from 0.0 to 31.25
[09/28 17:57:38]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:57:38]  Verifer returned sat in 7.409940 secs.
[09/28 17:57:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     -81.263916     -81.324951   910.284180   -81.263916    0.122070   -81.324951        0.0    0.061035        0.000000
1     -81.263916     -81.263916   979.034180   -81.263916    0.030518   -81.263916        0.0    0.000000      -31.250000
2      38.675049      38.675049   979.034180    38.675049  119.938965    38.675049        0.0    0.000000      -11.311035
3     243.552979     149.986084   979.034180   243.552979  204.877930   149.986084        0.0   93.566895       93.566895
4     251.425049     201.736084   979.034180   251.425049  101.438965   201.736084        0.0   49.688965        1.438965
5     251.455566     251.455566  1046.314697   251.455566   49.719482   251.455566        0.0    0.000000      -31.250000
6     382.705566     282.705566  1046.314697   382.705566  131.250000   282.705566        0.0  100.000000        0.000000
7     382.705566     382.705566  1115.064697   382.705566   64.625000   382.705566        0.0    0.000000      -31.250000
8     414.018066     413.955566  1115.064697   414.018066   31.312500   413.955566        0.0    0.062500      -99.937500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:39]  --------------------------------------------------------------------------------
[09/28 17:57:39]  Iteration: 22 (0 solution, 21 counterexamples)
[09/28 17:57:40]  Generator returned sat in 0.264608 secs.
[09/28 17:57:40]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:57:48]  Improved gap from 31.25 to 31.25
[09/28 17:57:48]  Improved number of small numbers from 57 to 66 out of a max of 101
[09/28 17:57:48]  Verifer returned sat in 8.455970 secs.
[09/28 17:57:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      33.956271      33.895508   908.814453    33.956271    0.121826    33.895508        0.0    0.060764        0.000000
1      33.956271      33.956271   977.564453    33.956271    0.030518    33.956271        0.0    0.000000      -31.250000
2     263.706271     153.425815   977.564453   263.706271  229.750000   153.425815        0.0  110.280457       98.500000
3     356.303989     263.736728   977.564453   356.303989  202.878174   263.736728        0.0   92.567261       91.097717
4     365.175815     314.486728   977.564453   365.175815  101.439087   314.486728        0.0   50.689087       -0.030457
5     365.206271     365.206271  1046.314453   365.206271   50.719543   365.206271        0.0    0.000000      -31.250000
6     496.456271     430.800781  1046.314453   496.456271  131.250000   430.800781        0.0   65.655490        0.000000
7     496.456271     496.456271  1115.064453   496.456271   65.625000   496.456271        0.0    0.000000      -31.250000
8     529.268771     527.706299  1115.064453   529.268771   32.812500   527.706299        0.0    1.562473      -98.437500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:57:49]  --------------------------------------------------------------------------------
[09/28 17:57:49]  Iteration: 23 (0 solution, 22 counterexamples)
[09/28 17:57:50]  Generator returned sat in 0.135463 secs.
[09/28 17:57:50]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:57:59]  Improved gap from 31.25 to 32.8125
[09/28 17:58:00]  Improved number of small numbers from 64 to 101 out of a max of 101
[09/28 17:58:00]  Verifer returned sat in 9.776360 secs.
[09/28 17:58:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     132.898682    -103.452637   908.814209   132.898682    0.121826  -103.452637        0.0  236.351318      236.351318
1     196.547363      -3.476318   908.814209   196.547363  300.000000    -3.476318        0.0  200.023682      200.000000
2     196.547363      -3.452637   908.814209   196.547363  200.023438    -3.452637        0.0  200.000000      100.000000
3     196.547363     132.898682   908.814209   196.547363  125.250000   132.898682        0.0   63.648682        0.000000
4     196.547363     196.547363   976.001709   196.547363   63.625000   196.547363        0.0    0.000000      -32.812500
5     229.359863     229.359863  1043.189209   229.359863   32.812500   229.359863        0.0    0.000000      -32.812500
6     362.172363     262.172363  1043.189209   362.172363  132.812500   262.172363        0.0  100.000000        0.000000
7     362.172363     362.172363  1108.486084   362.172363   67.406250   362.172363        0.0    0.000000      -34.703125
8     396.875488     396.875488  1108.486328   396.875488   34.703125   396.875488        0.0    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:00]  --------------------------------------------------------------------------------
[09/28 17:58:00]  Iteration: 24 (0 solution, 23 counterexamples)
[09/28 17:58:02]  Generator returned sat in 0.992999 secs.
[09/28 17:58:02]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:58:05]  Improved gap from 0.0 to 31.25
[09/28 17:58:06]  Improved number of small numbers from 90 to 101 out of a max of 101
[09/28 17:58:06]  Verifer returned sat in 3.757771 secs.
[09/28 17:58:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     226.299072    -173.640137   976.001465   226.299072    0.121826  -173.640137        0.0  399.939209      399.939209
1     226.359863     -73.640137   976.001465   226.359863  400.000000   -73.640137        0.0  300.000000      300.000000
2     226.359863     -73.579102   976.001465   226.359863    0.061035   -73.579102        0.0  299.938965      200.000000
3     226.359863     123.670898   976.001465   226.359863   68.500000   123.670898        0.0  102.688965      100.000000
4     226.359863     159.799072   976.001465   226.359863   67.500000   159.799072        0.0   66.560791        0.000000
5     226.359863     226.359863  1044.751465   226.359863   66.500000   226.359863        0.0    0.000000      -31.250000
6     291.859863     291.859863  1046.001709   291.859863   65.500000   291.859863        0.0    0.000000      -64.499756
7     356.359863     356.359863  1114.751465   356.359863   64.500000   356.359863        0.0    0.000000      -31.250000
8     387.609863     387.609863  1114.751465   387.609863   31.250000   387.609863        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:06]  --------------------------------------------------------------------------------
[09/28 17:58:06]  Iteration: 25 (0 solution, 24 counterexamples)
[09/28 17:58:08]  Generator returned sat in 0.684347 secs.
[09/28 17:58:08]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:58:09]  Improved gap from 0.0 to 18.75
[09/28 17:58:09]  Improved number of small numbers from 62 to 101 out of a max of 101
[09/28 17:58:09]  Verifer returned sat in 1.243309 secs.
[09/28 17:58:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1034.519531     534.519531  442.494873  1034.519531    0.121582   534.519531        0.0  500.000000      499.938965
1    1034.580322     534.580566  442.494873  1034.580322  500.060791   534.580566        0.0  499.999756      399.999756
2    1034.580566     634.580566  442.494873  1034.580566  500.000000   634.580566        0.0  400.000000      300.000000
3    1034.580566     834.580322  442.494873  1034.580566  390.000000   834.580322        0.0  200.000244      200.000000
4    1034.580566     934.580322  442.494873  1034.580566  194.000000   934.580322        0.0  100.000244      100.000000
5    1034.580566     987.519775  442.494873  1034.580566   96.000000   987.519775        0.0   47.060791        0.000000
6    1034.580566    1034.580566  523.744873  1034.580566   47.000000  1034.580566        0.0    0.000000      -18.750000
7    1057.080566    1057.080566  601.244873  1057.080566   22.500000  1057.080566        0.0    0.000000      -18.750000
8    1075.830566    1075.830566  601.244873  1075.830566   18.750000  1075.830566        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:10]  --------------------------------------------------------------------------------
[09/28 17:58:10]  Iteration: 26 (0 solution, 25 counterexamples)
[09/28 17:58:11]  Generator returned sat in 0.587113 secs.
[09/28 17:58:11]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:58:12]  Improved gap from 0.0 to 31.25
[09/28 17:58:12]  Improved number of small numbers from 58 to 101 out of a max of 101
[09/28 17:58:12]  Verifer returned sat in 1.093132 secs.
[09/28 17:58:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     732.360596     632.360596  344.714844   732.360596    0.121582   632.360596        0.0  100.000000      100.000000
1     732.360596     731.360596  344.714844   732.360596  100.000000   731.360596        0.0    1.000000        0.000000
2     732.360596     732.360596  413.464844   732.360596    0.999756   732.360596        0.0    0.000000      -31.250000
3     863.610596     862.390869  413.464844   863.610596  131.250000   862.390869        0.0    1.219727        0.000000
4     863.610596     863.610596  482.214844   863.610596    1.158691   863.610596        0.0    0.000000      -31.250000
5     994.860596     993.641113  482.214844   994.860596  131.250000   993.641113        0.0    1.219482        0.000000
6     994.860596     994.860596  550.964600   994.860596    1.158691   994.860596        0.0    0.000000      -31.250244
7    1126.330322    1026.110840  550.964600  1126.330322  131.469727  1026.110840        0.0  100.219482        0.219482
8    1126.330322    1126.330322  619.494873  1126.330322    1.158691  1126.330322        0.0    0.000000      -31.250244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:13]  --------------------------------------------------------------------------------
[09/28 17:58:13]  Iteration: 27 (0 solution, 26 counterexamples)
[09/28 17:58:15]  Generator returned sat in 0.985316 secs.
[09/28 17:58:15]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:58:15]  Improved gap from 0.0 to 100
[09/28 17:58:15]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:58:15]  Verifer returned sat in 0.498277 secs.
[09/28 17:58:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1197.739014     494.860596  482.214844  1197.739014    0.121582   494.860596        0.0  702.878418      702.878418
1    1197.739014     494.860596  482.214844  1197.739014    0.060791   494.860596        0.0  702.878418      602.878418
2    1197.799805     594.860596  482.214844  1197.799805  702.939209   594.860596        0.0  602.939209      502.939209
3    1197.799805     694.860596  482.214844  1197.799805  398.121582   694.860596        0.0  502.939209      402.939209
4    1197.799805     797.739014  482.214844  1197.799805  399.121582   797.739014        0.0  400.060791      302.939209
5    1197.860596     894.860596  482.214844  1197.860596  400.121582   894.860596        0.0  303.000000      203.000000
6    1295.982178     994.860596  482.214844  1295.982178  401.121582   994.860596        0.0  301.121582      201.121582
7    1396.982178    1194.860596  482.214844  1396.982178  402.121582  1194.860596        0.0  202.121582      202.121582
8    1597.982178    1197.921387  482.214844  1597.982178  403.121582  1197.921387        0.0  400.060791      303.121582
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:16]  --------------------------------------------------------------------------------
[09/28 17:58:16]  Iteration: 28 (0 solution, 27 counterexamples)
[09/28 17:58:17]  Generator returned sat in 0.364395 secs.
[09/28 17:58:17]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:58:17]  Improved number of small numbers from 100 to 100 out of a max of 100
[09/28 17:58:17]  Verifer returned sat in 0.148287 secs.
[09/28 17:58:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1197.753906     497.738770  482.2146  1197.753906    0.121338   497.738770        0.0  700.015137      700.015137
1    1197.753906     497.738770  482.2146  1197.753906    0.060547   497.738770        0.0  700.015137      600.015137
2    1197.753906     597.738770  482.2146  1197.753906  700.015137   597.738770        0.0  600.015137      500.015137
3    1197.753906     697.738770  482.2146  1197.753906  400.045410   697.738770        0.0  500.015137      400.015137
4    1197.753906     797.738770  482.2146  1197.753906  400.045410   797.738770        0.0  400.015137      300.015137
5    1197.784180     897.738770  482.2146  1197.784180  400.045410   897.738770        0.0  300.045410      200.045410
6    1297.784180     997.738770  482.2146  1297.784180  400.045410   997.738770        0.0  300.045410      200.045410
7    1397.784180    1197.738770  482.2146  1397.784180  400.045410  1197.738770        0.0  200.045410      200.045410
8    1597.784180    1197.769043  482.2146  1597.784180  400.045410  1197.769043        0.0  400.015137      300.045410
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:18]  --------------------------------------------------------------------------------
[09/28 17:58:18]  Iteration: 29 (0 solution, 28 counterexamples)
[09/28 17:58:19]  Generator returned sat in 0.589407 secs.
[09/28 17:58:19]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:20]  Improved gap from 0.0 to 21.875
[09/28 17:58:21]  Improved number of small numbers from 93 to 101 out of a max of 101
[09/28 17:58:21]  Verifer returned sat in 1.217445 secs.
[09/28 17:58:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1192.007080     992.128418  482.214355  1192.007080    0.121094   992.128418        0.0  199.878662      199.878418
1    1192.067871     992.128662  482.214355  1192.067871  199.939453   992.128662        0.0  199.939209       99.939209
2    1492.128662    1192.128418  482.214355  1492.128662  500.000000  1192.128418        0.0  300.000244      300.000000
3    1492.128662    1271.939453  482.214355  1492.128662   38.750000  1271.939453        0.0  220.189209      200.000000
4    1492.128662    1292.128662  482.214355  1492.128662   39.750000  1292.128662        0.0  200.000000      100.000000
5    1492.128662    1471.192871  482.214355  1492.128662   19.875000  1471.192871        0.0   20.935791        0.000000
6    1492.128662    1492.128662  560.339355  1492.128662   20.875000  1492.128662        0.0    0.000000      -21.875000
7    1514.003662    1514.003662  638.464355  1514.003662   21.875000  1514.003662        0.0    0.000000      -21.875000
8    1536.878662    1535.878662  638.464355  1536.878662   22.875000  1535.878662        0.0    1.000000      -99.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:21]  --------------------------------------------------------------------------------
[09/28 17:58:21]  Iteration: 30 (0 solution, 29 counterexamples)
[09/28 17:58:22]  Generator returned sat in 0.327008 secs.
[09/28 17:58:22]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:58:23]  Improved gap from 0.05 to 31.25
[09/28 17:58:23]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:58:23]  Verifer returned sat in 0.774068 secs.
[09/28 17:58:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1192.037598    1092.067871  482.214355  1192.037598    0.121094  1092.067871        0.0   99.969727       99.969727
1    1192.067871    1192.007324  482.214355  1192.067871  100.000000  1192.007324        0.0    0.060547        0.000000
2    1192.067871    1192.067871  550.964355  1192.067871    0.030273  1192.067871        0.0    0.000000      -31.250000
3    1323.317871    1322.643555  550.964355  1323.317871  131.250000  1322.643555        0.0    0.674316        0.000000
4    1323.317871    1323.317871  619.714355  1323.317871    0.030273  1323.317871        0.0    0.000000      -31.250000
5    1454.628418    1454.567871  619.714355  1454.628418  131.310547  1454.567871        0.0    0.060547        0.060547
6    1454.628418    1454.628418  688.403809  1454.628418    0.030273  1454.628418        0.0    0.000000      -31.250000
7    1586.613281    1485.878418  688.403809  1586.613281  131.984863  1485.878418        0.0  100.734863        0.734863
8    1586.613281    1586.613281  756.418945  1586.613281    0.030273  1586.613281        0.0    0.000000      -31.250000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:24]  --------------------------------------------------------------------------------
[09/28 17:58:24]  Iteration: 31 (0 solution, 30 counterexamples)
[09/28 17:58:25]  Generator returned sat in 0.431943 secs.
[09/28 17:58:25]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:58:26]  Improved gap from 0.0 to 31.25
[09/28 17:58:27]  Improved number of small numbers from 53 to 101 out of a max of 101
[09/28 17:58:27]  Verifer returned sat in 1.215526 secs.
[09/28 17:58:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1355.507568     955.477295  619.714111  1355.507568    0.120605   955.477295        0.0  400.030273      400.030273
1    1355.537598     955.477295  619.714111  1355.537598  400.060303   955.477295        0.0  400.060303      300.060303
2    1455.477295    1155.477051  619.714111  1455.477295  500.000000  1155.477051        0.0  300.000244      300.000000
3    1455.477295    1255.477051  619.714111  1455.477295   36.719727  1255.477051        0.0  200.000244      200.000000
4    1455.477295    1355.477295  619.714111  1455.477295   35.719727  1355.477295        0.0  100.000000      100.000000
5    1455.477295    1355.537598  619.714111  1455.477295   34.719727  1355.537598        0.0   99.939697        0.000000
6    1455.477295    1455.477295  688.464111  1455.477295   33.719727  1455.477295        0.0    0.000000      -31.250000
7    1488.197021    1488.197021  755.744385  1488.197021   32.719727  1488.197021        0.0    0.000000      -31.250000
8    1519.916748    1519.447021  755.744385  1519.916748   31.719727  1519.447021        0.0    0.469727      -99.530273
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:27]  --------------------------------------------------------------------------------
[09/28 17:58:27]  Iteration: 32 (0 solution, 31 counterexamples)
[09/28 17:58:29]  Generator returned sat in 0.352517 secs.
[09/28 17:58:29]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:58:29]  Improved number of small numbers from 81 to 98 out of a max of 100
[09/28 17:58:29]  Verifer returned sat in 0.656945 secs.
[09/28 17:58:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1355.477295     955.477295  619.714111  1355.477295    0.120361   955.477295        0.0  400.000000      400.000000
1    1555.447021    1055.477295  619.714111  1555.447021  599.969727  1055.477295        0.0  499.969727      499.969727
2    1555.477295    1155.477295  619.714111  1555.477295  500.000000  1155.477295        0.0  400.000000      400.000000
3    1555.477295    1156.326660  619.714111  1555.477295    0.030029  1156.326660        0.0  399.150635      300.000000
4    1555.477295    1255.477295  619.714111  1555.477295  101.439697  1255.477295        0.0  300.000000      200.000000
5    1555.477295    1355.477295  619.714111  1555.477295  151.719849  1355.477295        0.0  200.000000      100.000000
6    1555.477295    1555.477295  619.714111  1555.477295  199.000000  1555.477295        0.0    0.000000        0.000000
7    1953.627930    1655.447266  619.714111  1953.627930  398.150635  1655.447266        0.0  298.180664      298.150635
8    2055.507568    1655.477295  619.714111  2055.507568  400.060303  1655.477295        0.0  400.030273      300.030273
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:30]  --------------------------------------------------------------------------------
[09/28 17:58:30]  Iteration: 33 (0 solution, 32 counterexamples)
[09/28 17:58:32]  Generator returned sat in 0.955121 secs.
[09/28 17:58:32]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)[0m
[09/28 17:58:34]  Improved gap from 0.0 to 0
[09/28 17:58:34]  Improved number of small numbers from 39 to 101 out of a max of 101
[09/28 17:58:34]  Verifer returned sat in 2.271608 secs.
[09/28 17:58:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    1457.379395    1457.364502   219.751709  1457.379395  0.120361  1457.364502        0.0  0.014893        0.014893
1    1457.379395    1457.379395   319.736816  1457.379395  0.007568  1457.379395        0.0  0.000000        0.000000
2    1457.386963    1457.386963   419.729004  1457.386963  0.007568  1457.386963        0.0  0.000000       -0.000244
3    1457.394531    1457.394531   519.721436  1457.394531  0.007568  1457.394531        0.0  0.000000       -0.000244
4    1457.402100    1457.402100   619.714111  1457.402100  0.007568  1457.402100        0.0  0.000000        0.000000
5    1457.409668    1457.409668   719.699219  1457.409668  0.007568  1457.409668        0.0  0.000000       -0.007324
6    1457.417236    1457.417236   819.698975  1457.417236  0.007568  1457.417236        0.0  0.000000        0.000000
7    1457.424805    1457.424805   919.684082  1457.424805  0.007568  1457.424805        0.0  0.000000       -0.007324
8    1457.432373    1457.432373  1019.683838  1457.432373  0.007568  1457.432373        0.0  0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:35]  --------------------------------------------------------------------------------
[09/28 17:58:35]  Iteration: 34 (0 solution, 33 counterexamples)
[09/28 17:58:37]  Generator returned sat in 0.810138 secs.
[09/28 17:58:37]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:37]  Improved number of small numbers from 56 to 100 out of a max of 100
[09/28 17:58:37]  Verifer returned sat in 0.370842 secs.
[09/28 17:58:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     219.010986    -181.868408  1019.683594   219.010986    0.120361  -181.868408        0.0  400.879395      300.879395
1     219.010986     -81.868408  1019.683594   219.010986    0.060303   -81.868408        0.0  300.879395      200.879395
2     219.011230      18.131592  1019.683594   219.011230  300.879639    18.131592        0.0  200.879639      100.879639
3     516.251709     118.131592  1019.683594   516.251709  498.120117   118.131592        0.0  398.120117      298.120117
4     516.251709     219.010986  1019.683594   516.251709  398.060059   219.010986        0.0  297.240723      198.120117
5     618.071045     418.131592  1019.683594   618.071045  399.060059   418.131592        0.0  199.939453      199.939453
6     818.191650     418.131592  1019.683594   818.191650  400.060059   418.131592        0.0  400.060059      300.060059
7     819.191650     618.131592  1019.683594   819.191650  401.060059   618.131592        0.0  201.060059      201.060059
8    1017.221924     718.131348  1019.683594  1017.221924  399.090332   718.131348        0.0  299.090576      299.090332
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:38]  --------------------------------------------------------------------------------
[09/28 17:58:38]  Iteration: 35 (0 solution, 34 counterexamples)
[09/28 17:58:40]  Generator returned sat in 0.973433 secs.
[09/28 17:58:40]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:41]  Improved gap from 2.0904541015625 to 18.75
[09/28 17:58:41]  Improved number of small numbers from 58 to 101 out of a max of 101
[09/28 17:58:41]  Verifer returned sat in 0.916894 secs.
[09/28 17:58:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1724.636963    1343.356689   857.18335  1724.636963    0.120361  1343.356689        0.0  381.280273      381.280029
1    1743.326660    1343.356934   857.18335  1743.326660  399.969971  1343.356934        0.0  399.969727      299.969727
2    1743.326660    1543.356934   857.18335  1743.326660    0.030273  1543.356934        0.0  199.969727      199.969727
3    1743.326660    1543.356934   857.18335  1743.326660    0.030273  1543.356934        0.0  199.969727       99.969727
4    1743.326660    1724.606934   857.18335  1743.326660   18.750000  1724.606934        0.0   18.719727       -0.030273
5    1743.356934    1743.356934   938.43335  1743.356934   18.750000  1743.356934        0.0    0.000000      -18.750000
6    1762.106934    1762.106934  1019.68335  1762.106934   18.750000  1762.106934        0.0    0.000000      -18.750000
7    1780.856934    1780.856934  1100.93335  1780.856934   18.750000  1780.856934        0.0    0.000000      -18.750000
8    1799.606934    1799.606934  1100.93335  1799.606934   18.750000  1799.606934        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:41]  --------------------------------------------------------------------------------
[09/28 17:58:41]  Iteration: 36 (0 solution, 35 counterexamples)
[09/28 17:58:43]  Generator returned sat in 0.323506 secs.
[09/28 17:58:43]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:46]  Improved gap from 0.0 to 53.125
[09/28 17:58:46]  Improved number of small numbers from 62 to 101 out of a max of 101
[09/28 17:58:46]  Verifer returned sat in 3.484600 secs.
[09/28 17:58:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3466.052734    3063.742432   996.373047  3466.052734    0.120117  3063.742432        0.0  402.310303      402.310059
1    3466.052734    3063.742676   996.373047  3466.052734  402.310303  3063.742676        0.0  402.310059      302.310059
2    3466.052734    3163.742676   996.373047  3466.052734  402.310059  3163.742676        0.0  302.310059      202.310059
3    3466.052734    3363.742676   996.373047  3466.052734  202.500000  3363.742676        0.0  102.310059      102.310059
4    3466.052734    3363.802979   996.373047  3466.052734  102.250000  3363.802979        0.0  102.249756        2.310059
5    3466.052734    3466.052734  1040.937988  3466.052734   52.125000  3466.052734        0.0    0.000000      -53.125000
6    3519.177734    3519.177734  1087.812744  3519.177734   53.125000  3519.177734        0.0    0.000000      -53.125244
7    3573.302734    3573.302734  1133.687744  3573.302734   54.125000  3573.302734        0.0    0.000000      -53.125244
8    3628.427734    3627.682617  1133.687744  3628.427734   55.125000  3627.682617        0.0    0.745117      -98.000244
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:47]  --------------------------------------------------------------------------------
[09/28 17:58:47]  Iteration: 37 (0 solution, 36 counterexamples)
[09/28 17:58:48]  Generator returned sat in 0.282008 secs.
[09/28 17:58:48]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:58:51]  Improved gap from 0.0 to 31.25
[09/28 17:58:51]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:58:51]  Verifer returned sat in 2.731052 secs.
[09/28 17:58:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3447.913086    3147.973145  1159.077637  3447.913086    0.120117  3147.973145        0.0  299.939941      299.939941
1    3447.913086    3247.973145  1159.077637  3447.913086  299.939941  3247.973145        0.0  199.939941      199.939941
2    3549.353027    3288.853027  1159.077637  3549.353027  301.379883  3288.853027        0.0  260.500000      201.379883
3    3549.353027    3447.913086  1159.077637  3549.353027   99.319824  3447.913086        0.0  101.439941      101.379883
4    3549.353027    3447.973145  1159.077637  3549.353027  100.319824  3447.973145        0.0  101.379883        1.379883
5    3549.353027    3549.353027  1226.447754  3549.353027  101.319824  3549.353027        0.0    0.000000      -31.250000
6    3680.603027    3580.603027  1226.447754  3680.603027  131.250000  3580.603027        0.0  100.000000        0.000000
7    3680.603027    3680.603027  1295.197754  3680.603027   67.344971  3680.603027        0.0    0.000000      -31.250000
8    3748.947998    3711.853027  1295.197754  3748.947998   68.344971  3711.853027        0.0   37.094971      -62.905029
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:52]  --------------------------------------------------------------------------------
[09/28 17:58:52]  Iteration: 38 (0 solution, 37 counterexamples)
[09/28 17:58:55]  Generator returned sat in 1.767677 secs.
[09/28 17:58:55]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:58:57]  Improved gap from 0.0599365234375 to 28.125
[09/28 17:58:57]  Improved number of small numbers from 81 to 89 out of a max of 101
[09/28 17:58:57]  Verifer returned sat in 2.386472 secs.
[09/28 17:58:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    3773.988770    3712.564087  1010.272461  3773.988770    0.119629  3712.564087        0.0  61.424683       61.424561
1    3773.988770    3773.988770  1020.722656  3773.988770   61.424561  3773.988770        0.0   0.000000      -28.125244
2    3807.509277    3807.509277  1087.202393  3807.509277   33.520508  3807.509277        0.0   0.000000      -28.125000
3    3928.004150    3927.944214  1087.202393  3928.004150  120.494873  3927.944214        0.0   0.059937       -7.630127
4    4035.634277    3948.379150  1087.202393  4035.634277  107.690063  3948.379150        0.0  87.255127        0.000000
5    4035.634277    4035.634277  1159.077393  4035.634277   87.195190  4035.634277        0.0   0.000000      -28.125000
6    4149.696777    4143.819092  1159.077393  4149.696777  114.062500  4143.819092        0.0   5.877686      -14.062500
7    4163.759277    4163.759277  1230.952393  4163.759277   19.940186  4163.759277        0.0   0.000000      -28.125000
8    4271.449341    4191.884277  1230.952393  4271.449341  107.690063  4191.884277        0.0  79.565063      -20.434937
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:58:58]  --------------------------------------------------------------------------------
[09/28 17:58:58]  Iteration: 39 (0 solution, 38 counterexamples)
[09/28 17:59:00]  Generator returned sat in 0.649090 secs.
[09/28 17:59:00]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:01]  Improved gap from 0.0 to 29.6875
[09/28 17:59:01]  Improved number of small numbers from 68 to 101 out of a max of 101
[09/28 17:59:01]  Verifer returned sat in 1.386104 secs.
[09/28 17:59:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2709.896240    2609.896240   953.147949  2709.896240    0.119629  2609.896240        0.0  100.000000      100.000000
1    2709.896240    2708.733154   953.147949  2709.896240   99.999756  2708.733154        0.0    1.163086        0.000000
2    2709.896240    2709.896240  1023.460449  2709.896240    0.059814  2709.896240        0.0    0.000000      -29.687500
3    2839.583740    2838.464111  1023.460449  2839.583740  129.687500  2838.464111        0.0    1.119629        0.000000
4    2839.583740    2839.583740  1093.772949  2839.583740    1.059570  2839.583740        0.0    0.000000      -29.687500
5    2970.434326    2869.271240  1093.772949  2970.434326  130.850586  2869.271240        0.0  101.163086        1.163086
6    2970.434326    2970.434326  1160.639893  2970.434326    1.059570  2970.434326        0.0    0.000000      -31.969971
7    3102.404541    3101.284668  1160.639893  3102.404541  131.970215  3101.284668        0.0    1.119873        0.000244
8    3102.404541    3102.404541  1230.952148  3102.404541    1.059570  3102.404541        0.0    0.000000      -29.687500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:02]  --------------------------------------------------------------------------------
[09/28 17:59:02]  Iteration: 40 (0 solution, 39 counterexamples)
[09/28 17:59:04]  Generator returned sat in 0.539781 secs.
[09/28 17:59:04]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:59:04]  Improved gap from 0.0 to 26.5625
[09/28 17:59:04]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 17:59:04]  Verifer returned sat in 0.575491 secs.
[09/28 17:59:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2549.279297    2545.515869  1017.528320  2549.279297    0.119629  2545.515869        0.0    3.763428        3.763428
1    2549.279297    2549.279297  1087.202393  2549.279297    0.059814  2549.279297        0.0    0.000000      -26.562500
2    2765.026611    2624.716797  1087.202393  2765.026611  215.747314  2624.716797        0.0  140.309814       89.184814
3    2875.841797    2765.026611  1087.202393  2875.841797  251.125000  2765.026611        0.0  110.815186      100.000000
4    2875.841797    2782.893555  1087.202393  2875.841797  110.755371  2782.893555        0.0   92.948242        0.000000
5    2875.841797    2875.841797  1160.639893  2875.841797   19.940186  2875.841797        0.0    0.000000      -26.562500
6    3002.404297    2982.404297  1160.639893  3002.404297  126.562500  2982.404297        0.0   20.000000        0.000000
7    3002.404297    3002.404297  1234.077393  3002.404297   19.940186  3002.404297        0.0    0.000000      -26.562500
8    3113.159668    3028.966797  1234.077393  3113.159668  110.755371  3028.966797        0.0   84.192871      -15.807129
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:05]  --------------------------------------------------------------------------------
[09/28 17:59:05]  Iteration: 41 (0 solution, 40 counterexamples)
[09/28 17:59:07]  Generator returned sat in 1.177216 secs.
[09/28 17:59:07]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:59:10]  Improved gap from 0.0 to 26.5625
[09/28 17:59:10]  Improved number of small numbers from 54 to 101 out of a max of 101
[09/28 17:59:10]  Verifer returned sat in 2.996150 secs.
[09/28 17:59:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1785.356934    1725.636719  1908.404297  1785.356934    0.119385  1725.636719        0.0   59.720215        0.000000
1    1785.356934    1785.356934  1981.841797  1785.356934   59.660400  1785.356934        0.0    0.000000      -26.562500
2    1811.919434    1811.919434  2050.733398  1811.919434   26.562500  1811.919434        0.0    0.000000      -31.108398
3    2052.782959    1943.027832  2050.733398  2052.782959  240.863525  1943.027832        0.0  109.755127      109.755127
4    2052.782959    1963.014160  2050.733398  2052.782959  109.695557  1963.014160        0.0   89.768799        9.755127
5    2052.842773    2052.842773  2114.355713  2052.842773   89.828613  2052.842773        0.0    0.000000      -26.562744
6    2173.304443    2100.612793  2114.355713  2173.304443  120.461670  2100.612793        0.0   72.691650       -6.101074
7    2180.405273    2180.405273  2186.793457  2180.405273   79.792480  2180.405273        0.0    0.000000      -26.562500
8    2290.100830    2206.967773  2186.793457  2290.100830  109.695557  2206.967773        0.0   83.133057      -16.866943
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:11]  --------------------------------------------------------------------------------
[09/28 17:59:11]  Iteration: 42 (0 solution, 41 counterexamples)
[09/28 17:59:13]  Generator returned sat in 1.161250 secs.
[09/28 17:59:13]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:59:17]  Improved gap from 14.57177734375 to 32.8125
[09/28 17:59:17]  Improved number of small numbers from 55 to 101 out of a max of 101
[09/28 17:59:17]  Verifer returned sat in 3.401736 secs.
[09/28 17:59:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2413.217285    2146.065186  2189.913574  2413.217285    0.119141  2146.065186        0.0  267.152100      267.152100
1    2476.865723    2246.065186  2189.913574  2476.865723  330.800537  2246.065186        0.0  230.800537      230.800537
2    2476.877686    2246.065186  2189.913574  2476.877686  230.812500  2246.065186        0.0  230.812500      130.812500
3    2476.877686    2413.217285  2189.913574  2476.877686  125.250000  2413.217285        0.0   63.660400       30.812500
4    2476.877686    2476.877686  2226.288574  2476.877686   63.625000  2476.877686        0.0    0.000000      -32.812500
5    2509.690186    2509.690186  2293.476074  2509.690186   32.812500  2509.690186        0.0    0.000000      -32.812500
6    2642.502686    2542.502686  2293.476074  2642.502686  132.812500  2542.502686        0.0  100.000000        0.000000
7    2642.502686    2642.502686  2358.772949  2642.502686   67.406250  2642.502686        0.0    0.000000      -34.703125
8    2677.205811    2677.205811  2358.773193  2677.205811   34.703125  2677.205811        0.0    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:18]  --------------------------------------------------------------------------------
[09/28 17:59:18]  Iteration: 43 (0 solution, 42 counterexamples)
[09/28 17:59:20]  Generator returned sat in 1.233924 secs.
[09/28 17:59:20]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:59:25]  Improved gap from 0.0 to 26.5625
[09/28 17:59:25]  Improved number of small numbers from 91 to 101 out of a max of 101
[09/28 17:59:25]  Verifer returned sat in 4.894546 secs.
[09/28 17:59:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2472.301270    2472.286621  2270.497803  2472.301270    0.118896  2472.286621        0.0    0.014648       -0.014893
1    2472.316406    2472.316406  2343.935059  2472.316406    0.029785  2472.316406        0.0    0.000000      -26.562500
2    2798.878906    2545.184570  2343.935059  2798.878906  326.562500  2545.184570        0.0  253.694336      200.000000
3    2798.878906    2689.333252  2343.935059  2798.878906    0.014893  2689.333252        0.0  109.545654      100.000000
4    2798.878906    2722.096924  2343.935059  2798.878906  109.530762  2722.096924        0.0   76.781982        0.000000
5    2798.878906    2798.878906  2416.058350  2798.878906    0.029785  2798.878906        0.0    0.000000      -27.876709
6    2926.740967    2926.725830  2416.058350  2926.740967  127.862061  2926.725830        0.0    0.015137       -0.014648
7    2926.755615    2926.755615  2489.495850  2926.755615    0.029785  2926.755615        0.0    0.000000      -26.562500
8    3030.099854    2953.318359  2489.495850  3030.099854  103.344238  2953.318359        0.0   76.781494      -23.218262
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:26]  --------------------------------------------------------------------------------
[09/28 17:59:26]  Iteration: 44 (0 solution, 43 counterexamples)
[09/28 17:59:27]  Generator returned sat in 0.213734 secs.
[09/28 17:59:27]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 17:59:32]  Improved gap from 21.855133056640625 to 26.5625
[09/28 17:59:32]  Improved number of small numbers from 52 to 101 out of a max of 101
[09/28 17:59:32]  Verifer returned sat in 4.566218 secs.
[09/28 17:59:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3637.791992    3637.761963  1105.051758  3637.791992    0.118896  3637.761963        0.0    0.030029        0.029785
1    3637.821533    3637.821533  1178.429932  3637.821533    0.059570  3637.821533        0.0    0.000000      -26.562500
2    3964.384033    3722.074463  1178.429932  3964.384033  326.562500  3722.074463        0.0  242.309570      200.000000
3    3964.384033    3853.539062  1178.429932  3964.384033    3.854248  3853.539062        0.0  110.844971      100.000000
4    3964.384033    3880.131104  1178.429932  3964.384033  110.815674  3880.131104        0.0   84.252930        0.000000
5    3964.384033    3964.384033  1251.867432  3964.384033    8.815430  3964.384033        0.0    0.000000      -26.562500
6    4090.946533    4082.101562  1251.867432  4090.946533  126.562500  4082.101562        0.0    8.844971        0.000000
7    4090.946533    4090.946533  1325.304932  4090.946533    8.815430  4090.946533        0.0    0.000000      -26.562500
8    4201.761963    4117.509277  1325.304932  4201.761963  110.815430  4117.509277        0.0   84.252686      -15.747070
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:33]  --------------------------------------------------------------------------------
[09/28 17:59:33]  Iteration: 45 (0 solution, 44 counterexamples)
[09/28 17:59:35]  Generator returned sat in 1.142937 secs.
[09/28 17:59:35]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:37]  Improved gap from 0.0 to 26.5625
[09/28 17:59:38]  Improved number of small numbers from 43 to 58 out of a max of 101
[09/28 17:59:38]  Verifer returned sat in 2.620562 secs.
[09/28 17:59:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3500.559326    3500.500061  1242.313904  3500.559326    0.118896  3500.500061        0.0    0.059265        0.059265
1    3680.790295    3600.500061  1242.313904  3680.790295  180.290234  3600.500061        0.0   80.290234       80.290234
2    3790.585730    3680.790295  1242.313904  3790.585730  190.085669  3680.790295        0.0  109.795435       90.085669
3    3900.500061    3790.585730  1242.313904  3900.500061  219.709766  3790.585730        0.0  109.914331      100.000000
4    3900.500061    3844.671631  1242.313904  3900.500061  109.854883  3844.671631        0.0   55.828430        0.000000
5    3900.500061    3900.500061  1314.850342  3900.500061   54.927441  3900.500061        0.0    0.000000      -27.463562
6    3927.963782    3927.963782  1388.287598  3927.963782   27.463721  3927.963782        0.0    0.000000      -26.562585
7    4065.341833    3954.526367  1388.287598  4065.341833  137.378052  3954.526367        0.0  110.815466       10.815466
8    4065.341833    4054.526367  1388.287598  4065.341833  109.854736  4054.526367        0.0   10.815466      -89.184534
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:38]  --------------------------------------------------------------------------------
[09/28 17:59:38]  Iteration: 46 (0 solution, 45 counterexamples)
[09/28 17:59:41]  Generator returned sat in 0.714524 secs.
[09/28 17:59:41]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:43]  Improved gap from 0.0 to 1.5625
[09/28 17:59:43]  Improved number of small numbers from 49 to 101 out of a max of 101
[09/28 17:59:43]  Verifer returned sat in 2.754502 secs.
[09/28 17:59:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3701.589844    3467.452637  1242.313721  3701.589844    0.118896  3467.452637        0.0  234.137207      201.089844
1    3701.589844    3600.500000  1242.313721  3701.589844  234.136963  3600.500000        0.0  101.089844      101.089844
2    3701.589844    3690.233154  1242.313721  3701.589844    0.059326  3690.233154        0.0   11.356689        1.089844
3    3701.589844    3701.589844  1339.661377  3701.589844    0.074463  3701.589844        0.0    0.000000       -1.562500
4    3819.658447    3745.899414  1339.661377  3819.658447  118.068604  3745.899414        0.0   73.759033       16.506104
5    3819.658447    3819.658447  1421.592773  3819.658447   73.699707  3819.658447        0.0    0.000000       -1.562500
6    3921.220947    3821.221191  1421.592773  3921.220947  101.562500  3821.221191        0.0   99.999756        0.000000
7    3921.220947    3921.220947  1477.283203  3921.220947   60.815674  3921.220947        0.0    0.000000      -44.309570
8    4039.289551    3965.530762  1477.283203  4039.289551  118.068604  3965.530762        0.0   73.758789      -26.240967
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:44]  --------------------------------------------------------------------------------
[09/28 17:59:44]  Iteration: 47 (0 solution, 46 counterexamples)
[09/28 17:59:46]  Generator returned sat in 0.584085 secs.
[09/28 17:59:46]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:48]  Verifer returned unsat in 1.507069 secs.
[09/28 17:59:48]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:48]  --------------------------------------------------------------------------------
[09/28 17:59:48]  Iteration: 48 (1 solution, 46 counterexamples)
[09/28 17:59:50]  Generator returned sat in 0.634247 secs.
[09/28 17:59:50]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 17:59:55]  Improved gap from 0.0 to 28.125
[09/28 17:59:55]  Improved number of small numbers from 50 to 101 out of a max of 101
[09/28 17:59:55]  Verifer returned sat in 5.308432 secs.
[09/28 17:59:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    2455.666748    2394.125488  1120.200195  2455.666748    0.118896  2394.125488        0.0  61.541260       61.541260
1    2455.666748    2455.666748  1130.533936  2455.666748    0.059326  2455.666748        0.0   0.000000      -28.125000
2    2488.953369    2488.953369  1197.247314  2488.953369   33.286621  2488.953369        0.0   0.000000      -28.125000
3    2609.447266    2609.387695  1197.247314  2609.447266  120.493896  2609.387695        0.0   0.059570       -7.631104
4    2717.018799    2629.941162  1197.247314  2717.018799  107.631104  2629.941162        0.0  87.077637       -0.059570
5    2717.078369    2717.078369  1269.122314  2717.078369   87.137207  2717.078369        0.0   0.000000      -28.125000
6    2831.140869    2766.598145  1269.122314  2831.140869  114.062500  2766.598145        0.0  64.542725      -14.062500
7    2845.203369    2845.203369  1340.997314  2845.203369   78.605225  2845.203369        0.0   0.000000      -28.125000
8    2952.834473    2873.328369  1340.997314  2952.834473  107.631104  2873.328369        0.0  79.506104      -20.493896
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 17:59:56]  --------------------------------------------------------------------------------
[09/28 17:59:56]  Iteration: 49 (1 solution, 47 counterexamples)
[09/28 17:59:59]  Generator returned sat in 1.437356 secs.
[09/28 17:59:59]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:00]  Verifer returned unsat in 0.679411 secs.
[09/28 18:00:00]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:00]  --------------------------------------------------------------------------------
[09/28 18:00:00]  Iteration: 50 (2 solution, 47 counterexamples)
[09/28 18:00:01]  Generator returned sat in 0.205612 secs.
[09/28 18:00:01]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:02]  Verifer returned unsat in 0.937072 secs.
[09/28 18:00:02]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:02]  --------------------------------------------------------------------------------
[09/28 18:00:02]  Iteration: 51 (3 solution, 47 counterexamples)
[09/28 18:00:04]  Generator returned sat in 0.311909 secs.
[09/28 18:00:04]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:04]  Verifer returned unsat in 0.183570 secs.
[09/28 18:00:04]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:04]  --------------------------------------------------------------------------------
[09/28 18:00:04]  Iteration: 52 (4 solution, 47 counterexamples)
[09/28 18:00:06]  Generator returned sat in 0.189720 secs.
[09/28 18:00:06]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:06]  Verifer returned unsat in 0.353183 secs.
[09/28 18:00:06]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:06]  --------------------------------------------------------------------------------
[09/28 18:00:06]  Iteration: 53 (5 solution, 47 counterexamples)
[09/28 18:00:08]  Generator returned sat in 0.218918 secs.
[09/28 18:00:08]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:09]  Improved gap from 0.0 to 0
[09/28 18:00:10]  Improved number of small numbers from 54 to 63 out of a max of 101
[09/28 18:00:10]  Verifer returned sat in 1.300951 secs.
[09/28 18:00:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     969.960938     967.782593  1306.635498   969.960938    0.118896   967.782593        0.0    2.178345        2.178308
1     969.960938     969.960938  1404.397949   969.960938    2.178223   969.960938        0.0    0.000000       -0.059241
2     970.020386     970.020386  1504.397742   970.020386    0.059448   970.020386        0.0    0.000000        0.000000
3    1070.020386    1069.960938  1504.397742  1070.020386  100.000000  1069.960938        0.0    0.059448        0.000000
4    1172.139282    1070.020386  1504.397742  1172.139282  102.178345  1070.020386        0.0  102.118896        2.118896
5    1172.139282    1172.139282  1602.278845  1172.139282  100.059448  1172.139282        0.0    0.000000        0.000000
6    1273.198730    1172.139282  1602.278845  1273.198730  101.059448  1172.139282        0.0  101.059448        1.059448
7    1274.317627    1274.317627  1700.070557  1274.317627  102.178345  1274.317627        0.0    0.000000       -0.029944
8    1376.466248    1274.377197  1700.070557  1376.466248  102.148621  1274.377197        0.0  102.089050        2.118677
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:10]  --------------------------------------------------------------------------------
[09/28 18:00:10]  Iteration: 54 (5 solution, 48 counterexamples)
[09/28 18:00:12]  Generator returned sat in 0.781104 secs.
[09/28 18:00:13]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:15]  Improved gap from 0.0 to 1.5625
[09/28 18:00:15]  Improved number of small numbers from 42 to 101 out of a max of 101
[09/28 18:00:15]  Verifer returned sat in 2.393837 secs.
[09/28 18:00:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     564.871094     438.091309  1522.910156   564.871094    0.118896   438.091309        0.0  126.779785       86.494385
1     564.885986     564.885742  1522.910156   564.885986  126.794678   564.885742        0.0    0.000244      -13.490723
2     678.377197     673.288086  1522.910156   678.377197  113.491455   673.288086        0.0    5.089111        0.000488
3     678.377197     678.377197  1602.751953   678.377197    0.029541   678.377197        0.0    0.000000      -20.157715
4     798.534912     720.642090  1602.751953   798.534912  120.157715   720.642090        0.0   77.892822        0.000000
5     798.534912     798.534912  1701.189453   798.534912   77.878174   798.534912        0.0    0.000000       -1.562500
6     900.097412     800.097412  1701.189453   900.097412  101.562500   800.097412        0.0  100.000000        0.000000
7     900.097412     900.097412  1758.925049   900.097412   60.860107   900.097412        0.0    0.000000      -42.264404
8    1020.255127     942.362305  1758.925049  1020.255127  120.157715   942.362305        0.0   77.892822      -22.106689
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:16]  --------------------------------------------------------------------------------
[09/28 18:00:16]  Iteration: 55 (5 solution, 49 counterexamples)
[09/28 18:00:18]  Generator returned sat in 0.894546 secs.
[09/28 18:00:18]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:19]  Verifer returned unsat in 0.869090 secs.
[09/28 18:00:19]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:19]  --------------------------------------------------------------------------------
[09/28 18:00:19]  Iteration: 56 (6 solution, 49 counterexamples)
[09/28 18:00:23]  Generator returned sat in 2.339166 secs.
[09/28 18:00:23]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:24]  Improved gap from 0.0 to 0
[09/28 18:00:24]  Improved number of small numbers from 41 to 101 out of a max of 101
[09/28 18:00:24]  Verifer returned sat in 0.874565 secs.
[09/28 18:00:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     656.314453     656.284668  1344.972412   656.314453    0.118896   656.284668        0.0    0.029785        0.000244
1     656.314453     656.314453  1444.972168   656.314453    0.029541   656.314453        0.0    0.000000        0.000000
2     756.314453     756.245117  1444.972168   756.314453  100.000000   756.245117        0.0    0.069336        0.000000
3     756.314453     756.314453  1544.972168   756.314453    0.039551   756.314453        0.0    0.000000        0.000000
4     856.344238     758.383789  1544.972168   856.344238  100.029785   758.383789        0.0   97.960449        0.029785
5     856.344238     856.344238  1644.942383   856.344238   52.034668   856.344238        0.0    0.000000        0.000000
6     956.443359     856.344238  1644.942383   956.443359  100.099121   856.344238        0.0  100.099121        0.099121
7     956.443359     956.443359  1744.843262   956.443359  100.029785   956.443359        0.0    0.000000        0.000000
8    1056.473145     958.512695  1744.843262  1056.473145  100.029785   958.512695        0.0   97.960449        0.029785
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:24]  --------------------------------------------------------------------------------
[09/28 18:00:24]  Iteration: 57 (6 solution, 50 counterexamples)
[09/28 18:00:27]  Generator returned sat in 1.204914 secs.
[09/28 18:00:27]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:29]  Verifer returned unsat in 1.123233 secs.
[09/28 18:00:29]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:29]  --------------------------------------------------------------------------------
[09/28 18:00:29]  Iteration: 58 (7 solution, 50 counterexamples)
[09/28 18:00:30]  Generator returned sat in 0.297390 secs.
[09/28 18:00:30]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:34]  Improved gap from 0.0 to 1.5625
[09/28 18:00:35]  Improved number of small numbers from 58 to 65 out of a max of 101
[09/28 18:00:35]  Verifer returned sat in 4.747152 secs.
[09/28 18:00:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     656.791748     527.754543  1442.902832   656.791748    0.118652   527.754543        0.0  129.037205       98.407959
1     656.821289     656.821289  1442.902832   656.821289  129.066746   656.821289        0.0    0.000000       -1.562500
2     758.383789     742.209028  1442.902832   758.383789  101.562500   742.209028        0.0   16.174761        0.000000
3     758.383789     758.383789  1541.340332   758.383789    0.029724   758.383789        0.0    0.000000       -1.562500
4     873.713274     802.062796  1541.340332   873.713274  115.329485   802.062796        0.0   71.650478       13.766985
5     873.713274     873.713274  1626.010847   873.713274   71.620754   873.713274        0.0    0.000000       -1.562500
6     975.275774     875.275774  1626.010847   975.275774  101.562500   875.275774        0.0  100.000000        0.000000
7     975.275774     975.275774  1678.932617   975.275774   57.445993   975.275774        0.0    0.000000      -47.078230
8    1090.605259    1022.354248  1678.932617  1090.605259  115.329485  1022.354248        0.0   68.251011      -31.748744
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:36]  --------------------------------------------------------------------------------
[09/28 18:00:36]  Iteration: 59 (7 solution, 51 counterexamples)
[09/28 18:00:38]  Generator returned sat in 0.624040 secs.
[09/28 18:00:38]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:41]  Verifer returned unsat in 2.686052 secs.
[09/28 18:00:41]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:41]  --------------------------------------------------------------------------------
[09/28 18:00:41]  Iteration: 60 (8 solution, 51 counterexamples)
[09/28 18:00:44]  Generator returned sat in 1.187552 secs.
[09/28 18:00:44]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:00:49]  Improved gap from 0.0 to 31.25
[09/28 18:00:50]  Improved number of small numbers from 62 to 69 out of a max of 101
[09/28 18:00:50]  Verifer returned sat in 5.823705 secs.
[09/28 18:00:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     613.825928     413.796224  1487.490397   613.825928    0.118652   413.796224        0.0  200.029704      100.029704
1     613.855550     613.796224  1487.490397   613.855550  200.059326   613.796224        0.0    0.059326        0.059326
2     613.855550     613.855550  1551.705078   613.855550    0.029785   613.855550        0.0    0.000000      -35.725993
3     883.188883     749.551880  1551.705078   883.188883  269.333333   749.551880        0.0  133.637004      133.607340
4     883.218547     749.581543  1551.705078   883.218547  133.666667   749.581543        0.0  133.637004       33.637004
5     884.307536     883.218547  1551.705078   884.307536  134.725993   883.218547        0.0    1.088989      -65.274007
6     949.581543     949.581543  1619.523682   949.581543   66.362996   949.581543        0.0    0.000000      -32.181396
7     981.763041     981.763041  1687.764404   981.763041   32.181498   981.763041        0.0    0.000000      -31.759176
8    1113.944539    1013.522217  1687.764404  1113.944539  132.181498  1013.522217        0.0  100.422323        0.422323
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:50]  --------------------------------------------------------------------------------
[09/28 18:00:50]  Iteration: 61 (8 solution, 52 counterexamples)
[09/28 18:00:53]  Generator returned sat in 1.416072 secs.
[09/28 18:00:53]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:00:56]  Improved gap from 0.0 to 37.5
[09/28 18:00:57]  Improved number of small numbers from 56 to 73 out of a max of 101
[09/28 18:00:57]  Verifer returned sat in 3.910822 secs.
[09/28 18:00:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     363.084961      63.225342  1938.061279   363.084961    0.118652    63.225342        0.0  299.859619      299.859619
1     363.084961     161.294390  1938.061279   363.084961  299.859606   161.294390        0.0  201.790571      199.859619
2     363.190942     163.225586  1938.061279   363.190942  201.896552   163.225586        0.0  199.965356       99.965600
3     363.190942     363.085030  1938.061279   363.190942  198.280788   363.085030        0.0    0.105911       -0.034400
4     463.225425     363.225425  1938.061279   463.225425  100.140394   363.225425        0.0  100.000000        0.000083
5     463.225425     463.225425  1987.078613   463.225425   99.965517   463.225425        0.0    0.000000      -50.982583
6     514.208183     514.208183  2049.578369   514.208183   50.982759   514.208183        0.0    0.000000      -37.500069
7     588.769760     588.769760  2075.016846   588.769760   74.561576   588.769760        0.0    0.000000      -37.500016
8     627.050548     627.050548  2136.735840   627.050548   38.280788   627.050548        0.0    0.000000      -37.500234
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:00:58]  --------------------------------------------------------------------------------
[09/28 18:00:58]  Iteration: 62 (8 solution, 53 counterexamples)
[09/28 18:01:00]  Generator returned sat in 0.833120 secs.
[09/28 18:01:01]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:02]  Improved gap from 0.0 to 26.5625
[09/28 18:01:03]  Improved number of small numbers from 62 to 66 out of a max of 101
[09/28 18:01:03]  Verifer returned sat in 2.073395 secs.
[09/28 18:01:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0     195.142334     117.998048  1938.061279   195.142334    0.118652   117.998048        0.0  77.144286       73.378417
1     195.201417     195.201417  1938.061279   195.201417   77.203369   195.201417        0.0   0.000000      -26.562500
2     221.763917     221.763917  2011.498779   221.763917   26.562500   221.763917        0.0   0.000000      -26.562500
3     363.225425     337.510744  2011.498779   363.225425  141.461507   337.510744        0.0  25.714681       14.899007
4     448.267091     363.284751  2011.498779   448.267091  110.756348   363.284751        0.0  84.982340       -0.059326
5     448.326417     448.326417  2084.936279   448.326417   85.041667   448.326417        0.0   0.000000      -26.562500
6     562.607667     495.096193  2084.936279   562.607667  114.281250   495.096193        0.0  67.511475      -12.281250
7     574.888917     574.888917  2158.373779   574.888917   79.792725   574.888917        0.0   0.000000      -26.562500
8     681.691001     601.451660  2158.373779   681.691001  106.802083   601.451660        0.0  80.239341      -19.760417
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:03]  --------------------------------------------------------------------------------
[09/28 18:01:03]  Iteration: 63 (8 solution, 54 counterexamples)
[09/28 18:01:05]  Generator returned sat in 0.479428 secs.
[09/28 18:01:06]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:06]  Improved number of small numbers from 63 to 100 out of a max of 100
[09/28 18:01:06]  Verifer returned sat in 0.474733 secs.
[09/28 18:01:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     195.142334    -303.976318  2363.771973   195.142334    0.118408  -303.976318        0.0  499.118652      499.088867
1     296.023438    -303.946533  2363.771973   296.023438  599.999756  -303.946533        0.0  599.969971      499.969971
2     296.023438    -203.946533  2363.771973   296.023438    0.029785  -203.946533        0.0  499.969971      399.969971
3     296.023438    -103.946533  2363.771973   296.023438    0.029785  -103.946533        0.0  399.969971      299.969971
4     296.023438      -3.946533  2363.771973   296.023438  199.029785    -3.946533        0.0  299.969971      199.969971
5     296.023438     195.112793  2363.771973   296.023438  299.000000   195.112793        0.0  100.910645       99.969971
6     593.172119     296.053223  2363.771973   593.172119  398.059326   296.053223        0.0  297.118896      297.118652
7     695.112549     396.053467  2363.771973   695.112549  399.059326   396.053467        0.0  299.059082      299.059082
8     796.112793     396.082764  2363.771973   796.112793  400.059326   396.082764        0.0  400.030029      300.059326
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:07]  --------------------------------------------------------------------------------
[09/28 18:01:07]  Iteration: 64 (8 solution, 55 counterexamples)
[09/28 18:01:09]  Generator returned sat in 0.664956 secs.
[09/28 18:01:09]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:11]  Improved gap from 0.0 to 31.25
[09/28 18:01:11]  Improved number of small numbers from 92 to 101 out of a max of 101
[09/28 18:01:11]  Verifer returned sat in 1.793110 secs.
[09/28 18:01:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -125.268799    -423.828369  2363.771729  -125.268799    0.118408  -423.828369        0.0  298.559570      298.559326
1    -125.268799    -323.828125  2363.771729  -125.268799  298.559326  -323.828125        0.0  198.559326      198.559326
2     -24.209961    -223.828125  2363.771729   -24.209961  299.618164  -223.828125        0.0  199.618164      199.618164
3     -24.209961    -125.268799  2363.771729   -24.209961  100.000000  -125.268799        0.0  101.058838       99.618164
4     -24.209961    -123.161458  2363.771729   -24.209961  101.000000  -123.161458        0.0   98.951497       -0.381836
5     -23.828125     -23.828125  2432.521729   -23.828125   99.333333   -23.828125        0.0    0.000000      -31.250000
6      75.171875       7.421875  2432.521729    75.171875   99.000000     7.421875        0.0   67.750000      -32.250000
7     107.421875     107.421875  2501.271729   107.421875  100.000000   107.421875        0.0    0.000000      -31.250000
8     208.421875     138.671875  2501.271729   208.421875  101.000000   138.671875        0.0   69.750000      -30.250000
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:12]  --------------------------------------------------------------------------------
[09/28 18:01:12]  Iteration: 65 (8 solution, 56 counterexamples)
[09/28 18:01:15]  Generator returned sat in 1.649616 secs.
[09/28 18:01:15]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:01:17]  Improved gap from 0.0 to 29.6875
[09/28 18:01:18]  Improved number of small numbers from 60 to 75 out of a max of 101
[09/28 18:01:18]  Verifer returned sat in 2.869061 secs.
[09/28 18:01:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -292.275513    -392.275635  2363.771729  -292.275513    0.118164  -392.275635        0.0  100.000122      100.000122
1    -292.275513    -300.703186  2363.771729  -292.275513   99.940918  -300.703186        0.0    8.427673        0.000122
2    -292.275513    -292.275513  2432.456055  -292.275513    0.059326  -292.275513        0.0    0.000000      -31.315552
3     -23.828125    -160.959961  2432.456055   -23.828125  268.447388  -160.959961        0.0  137.131836      137.131836
4     -23.828125    -160.900513  2432.456055   -23.828125  134.223694  -160.900513        0.0  137.072388       37.131836
5     -23.828125     -29.466309  2432.456055   -23.828125  137.013184   -29.466309        0.0    5.638184      -62.868164
6      39.040283      39.040283  2502.768311    39.040283   68.506592    39.040283        0.0    0.000000      -29.687500
7      73.293579      73.293579  2568.514893    73.293579   34.253296    73.293579        0.0    0.000000      -29.687622
8     207.517273     102.981201  2568.514893   207.517273  134.223694   102.981201        0.0  104.536072        4.536072
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:19]  --------------------------------------------------------------------------------
[09/28 18:01:19]  Iteration: 66 (8 solution, 57 counterexamples)
[09/28 18:01:21]  Generator returned sat in 0.487437 secs.
[09/28 18:01:21]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:23]  Improved gap from 0.0 to 28.125
[09/28 18:01:24]  Improved number of small numbers from 52 to 66 out of a max of 101
[09/28 18:01:24]  Verifer returned sat in 2.665487 secs.
[09/28 18:01:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -346.584717    -709.155981  2580.652075  -346.584717    0.118164  -709.155981        0.0  362.571265      262.571265
1    -292.275513    -509.156006  2580.652075  -292.275513  416.880469  -509.156006        0.0  216.880493      216.880469
2    -292.275513    -409.155981  2580.652075  -292.275513  216.821289  -409.155981        0.0  116.880469      116.880469
3    -292.275513    -346.584717  2580.652075  -292.275513  106.500000  -346.584717        0.0   54.309204       16.880469
4    -292.275513    -292.275513  2635.646606  -292.275513   54.250000  -292.275513        0.0    0.000000      -28.125000
5    -264.150513    -264.150513  2707.521484  -264.150513   28.125000  -264.150513        0.0    0.000000      -28.125122
6    -120.145044    -236.025391  2707.521484  -120.145044  144.005469  -236.025391        0.0  115.880347       15.880347
7    -120.145044    -120.145044  2754.139893  -120.145044   73.002734  -120.145044        0.0    0.000000      -37.501245
8     -82.643677     -82.643677  2754.139893   -82.643677   37.501367   -82.643677        0.0    0.000000      -99.999878
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:24]  --------------------------------------------------------------------------------
[09/28 18:01:24]  Iteration: 67 (8 solution, 58 counterexamples)
[09/28 18:01:27]  Generator returned sat in 0.647612 secs.
[09/28 18:01:27]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:32]  Improved gap from 0.0 to 1.5625
[09/28 18:01:32]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 18:01:32]  Verifer returned sat in 5.136074 secs.
[09/28 18:01:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -425.365723    -543.988770  2415.484863  -425.365723    0.118164  -543.988770        0.0  118.623047       18.623047
1    -425.247559    -425.247559  2495.181152  -425.247559  118.741211  -425.247559        0.0    0.000000       -1.562500
2    -323.685059    -335.561523  2495.181152  -323.685059  101.562500  -335.561523        0.0   11.876465        0.000000
3    -323.685059    -323.685059  2593.618652  -323.685059   11.817383  -323.685059        0.0    0.000000       -1.562500
4    -206.624512    -278.871582  2593.618652  -206.624512  117.060547  -278.871582        0.0   72.247070       15.498047
5    -206.624512    -206.624512  2676.558105  -206.624512   72.187988  -206.624512        0.0    0.000000       -1.562500
6    -105.062012    -205.062012  2676.558105  -105.062012  101.562500  -205.062012        0.0  100.000000        0.000000
7    -105.062012    -105.062012  2731.240234  -105.062012   58.311523  -105.062012        0.0    0.000000      -45.317871
8      11.998535     -59.744141  2731.240234    11.998535  117.060547   -59.744141        0.0   71.742676      -28.257324
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:33]  --------------------------------------------------------------------------------
[09/28 18:01:33]  Iteration: 68 (8 solution, 59 counterexamples)
[09/28 18:01:35]  Generator returned sat in 0.724444 secs.
[09/28 18:01:35]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:42]  Improved gap from 0.0 to 32.8125
[09/28 18:01:42]  Improved number of small numbers from 64 to 101 out of a max of 101
[09/28 18:01:42]  Verifer returned sat in 6.360864 secs.
[09/28 18:01:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      54.323486    -180.173096  2542.183105    54.323486    0.118164  -180.173096        0.0  234.496582      234.496582
1     119.826904     -80.173340  2542.183105   119.826904  300.000000   -80.173340        0.0  200.000244      200.000000
2     119.826904     -67.048096  2542.183105   119.826904    0.059082   -67.048096        0.0  186.875000      100.000000
3     119.826904      54.323486  2542.183105   119.826904  125.250000    54.323486        0.0   65.503418        0.000000
4     119.826904     119.826904  2609.370605   119.826904   63.625000   119.826904        0.0    0.000000      -32.812500
5     152.639404     152.639404  2676.558105   152.639404   32.812500   152.639404        0.0    0.000000      -32.812500
6     277.889404     221.826904  2676.558105   277.889404  125.250000   221.826904        0.0   56.062500       -7.562500
7     285.451904     285.451904  2743.745605   285.451904   63.625000   285.451904        0.0    0.000000      -32.812500
8     318.264404     318.264404  2810.933105   318.264404   32.812500   318.264404        0.0    0.000000      -32.812500
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:42]  --------------------------------------------------------------------------------
[09/28 18:01:42]  Iteration: 69 (8 solution, 60 counterexamples)
[09/28 18:01:46]  Generator returned sat in 1.519402 secs.
[09/28 18:01:46]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:49]  Verifer returned unsat in 2.312603 secs.
[09/28 18:01:49]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:49]  --------------------------------------------------------------------------------
[09/28 18:01:49]  Iteration: 70 (9 solution, 60 counterexamples)
[09/28 18:01:51]  Generator returned sat in 0.448339 secs.
[09/28 18:01:51]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:01:56]  Improved gap from 0.0 to 31.25
[09/28 18:01:56]  Improved number of small numbers from 56 to 101 out of a max of 101
[09/28 18:01:56]  Verifer returned sat in 5.031615 secs.
[09/28 18:01:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -172.524170    -272.524170  3268.181885  -172.524170    0.118164  -272.524170        0.0  100.000000      100.000000
1    -172.524170    -174.729004  3268.181885  -172.524170   99.999756  -174.729004        0.0    2.204834        0.000000
2    -172.524170    -172.524170  3332.579834  -172.524170    0.059082  -172.524170        0.0    0.000000      -35.602051
3      96.798584     -36.922119  3332.579834    96.798584  269.322754   -36.922119        0.0  133.720703      133.720703
4      96.798584     -36.863037  3332.579834    96.798584  133.661377   -36.863037        0.0  133.661621       33.720703
5      99.900635      95.696045  3332.579834    99.900635  136.763672    95.696045        0.0    4.204590      -63.177246
6     163.077881     163.077881  3401.329834   163.077881   67.381836   163.077881        0.0    0.000000      -31.250000
7     195.768799     195.768799  3468.638672   195.768799   32.690918   195.768799        0.0    0.000000      -31.250244
8     329.430176     227.019043  3468.638672   329.430176  133.661377   227.019043        0.0  102.411133        2.411133
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:01:57]  --------------------------------------------------------------------------------
[09/28 18:01:57]  Iteration: 71 (9 solution, 61 counterexamples)
[09/28 18:02:02]  Generator returned sat in 2.583109 secs.
[09/28 18:02:02]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:02:03]  Verifer returned unsat in 1.613836 secs.
[09/28 18:02:03]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:02:03]  --------------------------------------------------------------------------------
[09/28 18:02:03]  Iteration: 72 (10 solution, 61 counterexamples)
[09/28 18:02:06]  Generator returned sat in 0.782238 secs.
[09/28 18:02:06]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:08]  Verifer returned unsat in 1.478054 secs.
[09/28 18:02:08]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:08]  --------------------------------------------------------------------------------
[09/28 18:02:08]  Iteration: 73 (11 solution, 61 counterexamples)
[09/28 18:02:10]  Generator returned sat in 0.417901 secs.
[09/28 18:02:10]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:16]  Improved gap from 0.0 to 0
[09/28 18:02:17]  Improved number of small numbers from 55 to 61 out of a max of 101
[09/28 18:02:17]  Verifer returned sat in 7.325261 secs.
[09/28 18:02:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1187.112305     979.112415  1825.390808  1187.112305    0.117920   979.112415        0.0  207.999890      199.999890
1    1187.112415    1087.112415  1825.390808  1187.112415  208.000000  1087.112415        0.0  100.000000      100.000000
2    1187.112415    1155.512415  1825.390808  1187.112415    0.058838  1155.512415        0.0   31.600000        0.000000
3    1187.112415    1187.112415  1925.390808  1187.112415   31.600000  1187.112415        0.0    0.000000        0.000000
4    1307.912415    1187.112415  1925.390808  1307.912415  120.800000  1187.112415        0.0  120.800000       20.800000
5    1307.912415    1307.912415  2004.590808  1307.912415  111.400000  1307.912415        0.0    0.000000        0.000000
6    1385.112415    1307.912415  2004.590808  1385.112415   77.200000  1307.912415        0.0   77.200000      -22.800000
7    1407.912415    1407.912415  2061.449951  1407.912415  100.000000  1407.912415        0.0    0.000000      -43.140857
8    1519.312415    1451.053467  2061.449951  1519.312415  111.400000  1451.053467        0.0   68.258948      -31.740857
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:02:18]  --------------------------------------------------------------------------------
[09/28 18:02:18]  Iteration: 74 (11 solution, 62 counterexamples)
[09/28 18:02:21]  Generator returned sat in 1.037849 secs.
[09/28 18:02:21]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:30]  Improved gap from 0.0 to 32.8125
[09/28 18:02:31]  Improved number of small numbers from 55 to 69 out of a max of 101
[09/28 18:02:31]  Verifer returned sat in 9.460109 secs.
[09/28 18:02:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     669.734375     433.371094  1825.390808   669.734375    0.117676   433.371094        0.0  236.363281      236.363171
1     669.734375     533.371204  1825.390808   669.734375  236.363037   533.371204        0.0  136.363171      136.363171
2     733.371204     535.333704  1825.390808   733.371204  200.000000   535.333704        0.0  198.037500      100.000000
3     733.371204     669.734375  1825.390808   733.371204  125.250000   669.734375        0.0   63.636829        0.000000
4     733.371204     733.371204  1892.578308   733.371204   63.625000   733.371204        0.0    0.000000      -32.812500
5     766.183704     766.183704  1959.765625   766.183704   32.812500   766.183704        0.0    0.000000      -32.812683
6     899.014954     831.587646  1959.765625   899.014954  132.831250   831.587646        0.0   67.427307        0.018567
7     899.014954     899.014954  2026.934326   899.014954   67.415625   899.014954        0.0    0.000000      -32.812732
8     933.722766     933.722766  2026.934326   933.722766   34.707813   933.722766        0.0    0.000000      -98.104919
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:02:31]  --------------------------------------------------------------------------------
[09/28 18:02:31]  Iteration: 75 (11 solution, 63 counterexamples)
[09/28 18:02:36]  Generator returned sat in 3.273029 secs.
[09/28 18:02:37]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:40]  Improved gap from 0.0 to 28.125
[09/28 18:02:40]  Improved number of small numbers from 99 to 99 out of a max of 101
[09/28 18:02:40]  Verifer returned sat in 3.340139 secs.
[09/28 18:02:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     435.333496     135.333496  1825.390869   435.333496    0.117676   135.333496        0.0  300.000000      300.000000
1     435.333496     235.333496  1825.390869   435.333496  300.000000   235.333496        0.0  200.000000      200.000000
2     435.333496     330.892334  1825.390869   435.333496    0.058838   330.892334        0.0  104.441162      100.000000
3     541.892334     435.333496  1825.390869   541.892334  211.000000   435.333496        0.0  106.558838      106.558838
4     541.892334     435.333496  1825.390869   541.892334  106.500000   435.333496        0.0  106.558838        6.558838
5     541.892334     541.892334  1890.707031   541.892334   54.250000   541.892334        0.0    0.000000      -28.125000
6     570.017334     570.017334  1962.582031   570.017334   28.125000   570.017334        0.0    0.000000      -28.125000
7     704.701172     598.142334  1962.582031   704.701172  134.683838   598.142334        0.0  106.558838        6.558838
8     704.701172     699.274658  1962.582031   704.701172   68.341919   699.274658        0.0    5.426514      -93.441162
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:02:41]  --------------------------------------------------------------------------------
[09/28 18:02:41]  Iteration: 76 (11 solution, 64 counterexamples)
[09/28 18:02:43]  Generator returned sat in 0.566153 secs.
[09/28 18:02:43]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:44]  Improved number of small numbers from 50 to 100 out of a max of 100
[09/28 18:02:44]  Verifer returned sat in 0.696205 secs.
[09/28 18:02:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     523.340576    -176.630127  1825.390625   523.340576    0.117432  -176.630127        0.0  699.970703      699.970703
1     523.340576     -76.630127  1825.390625   523.340576  699.970459   -76.630127        0.0  599.970703      599.970703
2     523.340576      23.340576  1825.390625   523.340576    0.029297    23.340576        0.0  500.000000      499.970703
3     523.340576      23.369873  1825.390625   523.340576    0.029541    23.369873        0.0  499.970703      399.970703
4     523.340576     125.223145  1825.390625   523.340576  200.000000   125.223145        0.0  398.117432      299.970703
5     523.340576     223.370117  1825.390625   523.340576  201.853271   223.370117        0.0  299.970459      199.970703
6     523.340576     423.369873  1825.390625   523.340576  200.029541   423.369873        0.0   99.970703       99.970703
7     823.369873     523.340820  1825.390625   823.369873  400.000000   523.340820        0.0  300.029053      300.000000
8     923.399658     523.369873  1825.390625   923.399658  400.058838   523.369873        0.0  400.029785      300.029785
fefficient=True, bounded_queue=False, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:02:45]  --------------------------------------------------------------------------------
[09/28 18:02:45]  Iteration: 77 (11 solution, 65 counterexamples)
[09/28 18:02:48]  Generator returned sat in 1.151052 secs.
[09/28 18:02:48]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:02:50]  Improved gap from 0.0 to 0
[09/28 18:02:51]  Improved number of small numbers from 46 to 58 out of a max of 101
[09/28 18:02:51]  Verifer returned sat in 3.161858 secs.
[09/28 18:02:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -155.571350    -276.630066  1825.390625  -155.571350    0.117188  -276.630066        0.0  121.058716      100.000000
1    -155.571350    -155.630066  1825.390625  -155.571350  121.029541  -155.630066        0.0    0.058716        0.000000
2    -155.571350    -155.571350  1912.478760  -155.571350    0.029297  -155.571350        0.0    0.000000      -12.911865
3      74.311218     -42.688782  1912.478760    74.311218  229.882568   -42.688782        0.0  117.000000      116.970703
4      74.311218     -42.659424  1912.478760    74.311218  116.970642   -42.659424        0.0  116.970642       16.970703
5      74.311218      74.311218  1995.508057    74.311218  115.970642    74.311218        0.0    0.000000        0.000000
6     189.252502      74.311218  1995.508057   189.252502  114.941284    74.311218        0.0  114.941284       14.941284
7     191.281860     191.281860  2078.537354   191.281860  116.970642   191.281860        0.0    0.000000       -0.000061
8     308.252502     191.281982  2078.537354   308.252502  116.970642   191.281982        0.0  116.970520       16.970581
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:02:52]  --------------------------------------------------------------------------------
[09/28 18:02:52]  Iteration: 78 (11 solution, 66 counterexamples)
[09/28 18:02:56]  Generator returned sat in 1.850977 secs.
[09/28 18:02:56]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:00]  Improved gap from 0.0 to 35.9375
[09/28 18:03:00]  Improved number of small numbers from 101 to 101 out of a max of 101
[09/28 18:03:00]  Verifer returned sat in 4.332444 secs.
[09/28 18:03:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     -69.479980    -369.362793  1939.181885   -69.479980    0.117188  -369.362793        0.0  299.882812      299.882812
1     -69.421387    -269.362793  1939.181885   -69.421387  299.941406  -269.362793        0.0  199.941406      199.941406
2     -69.304199    -269.362793  1939.181885   -69.304199  200.058594  -269.362793        0.0  200.058594      100.058594
3     -69.304199     -69.362793  1939.181885   -69.304199  198.468750   -69.362793        0.0    0.058594        0.058594
4      30.871582     -69.245605  1939.181885    30.871582  100.234375   -69.245605        0.0  100.117188        0.234375
5      30.871582      30.871582  2003.010010    30.871582  100.058594    30.871582        0.0    0.000000      -35.937500
6      81.900879      81.900879  2051.980713    81.900879   51.029297    81.900879        0.0    0.000000      -35.937500
7     157.532715     157.532715  2075.240479   157.532715   75.631836   157.532715        0.0    0.000000      -37.045898
8     196.348633     194.578613  2075.240479   196.348633   38.815918   194.578613        0.0    1.770020      -98.229980
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:03:01]  --------------------------------------------------------------------------------
[09/28 18:03:01]  Iteration: 79 (11 solution, 67 counterexamples)
[09/28 18:03:04]  Generator returned sat in 0.733216 secs.
[09/28 18:03:04]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:08]  Improved gap from 0.0 to 31.25
[09/28 18:03:08]  Improved number of small numbers from 43 to 101 out of a max of 101
[09/28 18:03:08]  Verifer returned sat in 4.596140 secs.
[09/28 18:03:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -860.102051   -1160.043457  2729.862305  -860.102051    0.116943 -1160.043457        0.0  299.941406      299.941406
1    -860.102051   -1091.293457  2729.862305  -860.102051    0.058350 -1091.293457        0.0  231.191406      199.941406
2    -758.660400   -1021.160400  2729.862305  -758.660400  332.633057 -1021.160400        0.0  262.500000      201.383057
3    -758.660400    -860.102051  2729.862305  -758.660400   99.324463  -860.102051        0.0  101.441650      101.383057
4    -758.660400    -860.043213  2729.862305  -758.660400  100.324463  -860.043213        0.0  101.382812        1.383057
5    -758.660400    -758.660400  2797.229248  -758.660400  101.324463  -758.660400        0.0    0.000000      -31.250000
6    -627.410400    -727.410156  2797.229248  -627.410400  131.250000  -727.410156        0.0   99.999756        0.000000
7    -627.410400    -627.410400  2865.979004  -627.410400   66.345947  -627.410400        0.0    0.000000      -31.250244
8    -560.064453    -596.160156  2865.979004  -560.064453   67.345947  -596.160156        0.0   36.095703      -63.904297
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:03:09]  --------------------------------------------------------------------------------
[09/28 18:03:09]  Iteration: 80 (11 solution, 68 counterexamples)
[09/28 18:03:12]  Generator returned sat in 0.765254 secs.
[09/28 18:03:12]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:13]  Verifer returned unsat in 1.407912 secs.
[09/28 18:03:13]  Proved solution: 
[1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:13]  --------------------------------------------------------------------------------
[09/28 18:03:13]  Iteration: 81 (12 solution, 68 counterexamples)
[09/28 18:03:16]  Generator returned sat in 0.695844 secs.
[09/28 18:03:16]  Candidate solution: 
[1m[94mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 0(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:22]  Improved gap from 0.0 to 29.6875
[09/28 18:03:23]  Improved number of small numbers from 51 to 67 out of a max of 101
[09/28 18:03:23]  Verifer returned sat in 6.731054 secs.
[09/28 18:03:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1290.001953   -1389.972860  2959.791707 -1290.001953    0.116699 -1389.972860        0.0   99.970907       99.970907
1   -1289.972860   -1290.031331  2959.791707 -1289.972860  100.000000 -1290.031331        0.0    0.058472        0.000000
2   -1289.972860   -1289.972860  3024.070068 -1289.972860    0.029297 -1289.972860        0.0    0.000000      -35.721639
3   -1017.059570   -1154.251221  3024.070068 -1017.059570  272.913289 -1154.251221        0.0  137.191650      137.191650
4   -1017.059570   -1154.221863  3024.070068 -1017.059570  136.456645 -1154.221863        0.0  137.162292       37.191650
5   -1017.059570   -1022.817627  3024.070068 -1017.059570  137.133057 -1022.817627        0.0    5.758057      -62.808350
6    -954.251099    -954.251099  3094.382324  -954.251099   68.566528  -954.251099        0.0    0.000000      -29.687622
7    -919.967834    -919.967834  3160.099121  -919.967834   34.283264  -919.967834        0.0    0.000000      -29.687561
8    -784.699188    -890.280273  3160.099121  -784.699188  135.268646  -890.280273        0.0  105.581085        5.581085
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/28 18:03:24]  --------------------------------------------------------------------------------
[09/28 18:03:24]  Iteration: 82 (12 solution, 69 counterexamples)
[09/28 18:03:26]  Generator returned unsat in 0.231828 secs.
[09/28 18:03:26]  [96mNo more solutions found[0m
[09/28 18:03:26]  Final solutions:
[09/28 18:03:26]  0: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  1: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  2: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:26]  3: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  4: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  5: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  6: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  7: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  8: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  9: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:26]  10: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + -1)
else:
	c_f[n][t] = max(alpha, 0c_f[n][t-1] + 1(S_f[n][t-1]-S_f[n][t-4]) + 0)[0m
[09/28 18:03:26]  11: [1m[92mif(decr_allowed):
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 0)
else:
	c_f[n][t] = max(alpha, 1/2c_f[n][t-1] + 1/2(S_f[n][t-1]-S_f[n][t-4]) + 1)[0m
[09/28 18:03:26]  Took 412.084347 secs.
