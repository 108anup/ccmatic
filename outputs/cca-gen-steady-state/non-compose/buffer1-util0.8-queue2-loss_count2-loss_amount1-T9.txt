[09/27 15:01:50]  --------------------------------------------------------------------------------
[09/27 15:01:50]  Iteration: 1 (0 solution, 0 counterexamples)
[09/27 15:01:50]  Generator returned sat in 0.005528 secs.
[09/27 15:01:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:01:50]  Improved gap from 0.0 to 100
[09/27 15:01:51]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:01:51]  Verifer returned sat in 0.253244 secs.
[09/27 15:01:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t   cwnd_0,t  service_0,t   losts_0,t  queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0      -597.7625      -597.7625  547.6375    -597.7625     0.1250    -597.7625      0.0000    0.000         -50.125       6.0            -597.7625                -1.0            -1
1      -447.6375      -447.6375  547.6375    -447.6375   150.1250    -447.6375      0.0000    0.000           0.000       1.0            -597.7625                 0.0         False
2      -347.6375      -347.8875  547.6375    -347.6375   100.0000    -347.8875      0.0000    0.250           0.000       1.0            -347.6375                 0.0         False
3      -347.6375      -347.6375  547.6375    -347.6375     0.1250    -347.6375      0.0000    0.000        -100.000       2.0            -347.6375                 0.0         False
4       153.8625      -247.6375  547.6375     153.8625   501.5000    -247.6375    101.5000  300.000         200.000       1.0            -347.6375                 0.0         False
5       957.8625       -47.6375  547.6375     957.8625  1104.0000     -47.6375    805.5000  200.000         200.000       2.0            -347.6375                 0.0         False
6      3116.9875       -47.6375  547.6375    3116.9875  2359.1250     -47.6375   2864.6250  300.000         200.000       2.0            -347.6375                 0.0         False
7      7686.2375        52.4875  547.6375    7686.2375  4869.2500      52.4875   7333.8750  299.875         200.000       3.0            -347.6375                 0.0         False
8     17275.9250       152.3625  547.6375   17275.9250  9889.5625     152.3625  16823.5625  300.000         200.000       4.0            -347.6375                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=267553/16, 
.[0m
[09/27 15:01:51]  --------------------------------------------------------------------------------
[09/27 15:01:51]  Iteration: 2 (0 solution, 1 counterexamples)
[09/27 15:01:51]  Generator returned sat in 0.122898 secs.
[09/27 15:01:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:01:52]  Improved gap from 0.0 to 100
[09/27 15:01:52]  Improved number of small numbers from 96 to 98 out of a max of 114
[09/27 15:01:52]  Verifer returned sat in 0.722917 secs.
[09/27 15:01:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -347.637695    -547.637695  547.637695  -347.637695    0.002441  -547.637695    0.000000  200.000000        200.0000       4.0          -547.637695                -1.0            -1
1    -347.637695    -458.726584  547.637695  -347.637695  111.089111  -458.726584    0.000000  111.088889        100.0000       5.0          -547.637695                 0.0         False
2    -347.637695    -347.640195  547.637695  -347.637695  111.086182  -347.640195    0.000000    0.002500          0.0000       4.0          -347.637695                 0.0         False
3     -47.635195    -247.637695  547.637695   -47.635195  300.005000  -247.637695    0.002500  200.000000        200.0000       1.0          -347.637695                 0.0         False
4     -47.635195    -214.296029  547.637695   -47.635195    0.010000  -214.296029    0.002500  166.658333        100.0000       2.0           -47.637695                 0.0         False
5     152.362305     -47.637695  547.637695   152.362305  366.655833   -47.637695    0.002500  199.997500        199.9975       3.0           -47.637695                 0.0         False
6     769.024388     -47.635254  547.637695   769.024388  816.659583   -47.635254  516.662083  299.997559        200.0000       2.0           -47.637695                 0.0         False
7     769.024388      52.362305  547.637695   769.024388    0.010000    52.362305  516.662083  200.000000        100.0000       3.0           252.362305                 0.0         False
8     969.021888     252.362061  547.637695   969.021888  399.997500   252.362061  516.662083  199.997744        199.9975       3.0           252.362305                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1239983/2400, 
.[0m
[09/27 15:01:53]  --------------------------------------------------------------------------------
[09/27 15:01:53]  Iteration: 3 (0 solution, 2 counterexamples)
[09/27 15:01:53]  Generator returned sat in 0.052304 secs.
[09/27 15:01:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:01:53]  Improved gap from 0.0 to 100
[09/27 15:01:53]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:01:53]  Verifer returned sat in 0.622187 secs.
[09/27 15:01:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -481.690918    -481.722168  481.659668  -481.690918    0.093750  -481.722168    0.000000    0.031250       -0.031250       8.0          -481.722168                -1.0            -1
1    -481.659668    -481.659668  481.659668  -481.659668    0.062500  -481.659668    0.000000    0.000000     -100.000000       1.0          -481.659668                 0.0         False
2     -81.690918    -381.659668  481.659668   -81.690918  399.968750  -381.659668    0.000000  299.968750      199.968750       1.0          -481.659668                 0.0         False
3     -81.690918    -281.659668  481.659668   -81.690918  133.958333  -281.659668    0.000000  199.968750       99.968750       2.0           -81.690918                 0.0         False
4     -81.690918    -180.597412  481.659668   -81.690918  199.937500  -180.597412    0.000000   98.906494       -0.031250       3.0           -81.690918                 0.0         False
5     118.308838      18.340088  481.659668   118.308838  298.906250    18.340088    0.000000   99.968750       99.968506       1.0           -81.690918                 0.0         False
6     465.699463     118.340332  481.659668   465.699463  447.359375   118.340332  147.359131  200.000000      200.000000       1.0           -81.690918                 0.0         False
7     689.379150     144.155518  481.659668   689.379150  423.679688   144.155518  271.038818  274.184814      200.000000       2.0           418.340332                 0.0         False
8     789.410645     218.340332  481.659668   789.410645  374.216309   218.340332  271.070312  300.000000      200.000000       3.0           518.340332                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=34697/128, 
.[0m
[09/27 15:01:54]  --------------------------------------------------------------------------------
[09/27 15:01:54]  Iteration: 4 (0 solution, 3 counterexamples)
[09/27 15:01:54]  Generator returned sat in 0.142411 secs.
[09/27 15:01:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:01:55]  Improved gap from 0.0025 to 100
[09/27 15:01:55]  Improved number of small numbers from 60 to 77 out of a max of 114
[09/27 15:01:55]  Verifer returned sat in 1.131248 secs.
[09/27 15:01:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     -12.644287     -12.645752  12.642516   -12.644287    0.001709   -12.645752    0.000000    0.001465       -0.001771       1.0           -12.645752                -1.0            -1
1     -12.642334     -12.642516  12.642516   -12.642334    0.003418   -12.642516    0.000000    0.000182      -99.999818       1.0           -12.645752                 0.0         False
2     387.355817      87.866650  12.642516   387.355817  399.998333    87.866650    0.000000  299.489167      199.998333       1.0           -12.645752                 0.0         False
3     387.355817     287.357422  12.642516   387.355817    0.011719   287.357422    0.000000   99.998395       99.998333       2.0           387.355817                 0.0         False
4     387.355817     387.354150  12.642516   387.355817    0.010000   387.354150    0.000000    0.001667       -0.001667       3.0           387.355817                 1.0         False
5     387.364150     387.362484  12.642516   387.364150    0.010000   387.362484    0.000000    0.001667      -99.993333       1.0           387.355817                 1.0         False
6     987.359150     587.357422  12.642516   987.359150  599.996667   587.357422  200.001667  200.000062      200.000000       1.0           387.355817                 0.0         False
7     987.359150     587.359131  12.642516   987.359150    0.010000   587.359131  200.001667  199.998353      100.000000       2.0           787.357484                 0.0         False
8     987.359150     787.355713  12.642516   987.359150    0.010000   787.355713  200.001667    0.001771        0.000000       3.0           787.357484                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=120001/600, 
.[0m
[09/27 15:01:56]  --------------------------------------------------------------------------------
[09/27 15:01:56]  Iteration: 5 (0 solution, 4 counterexamples)
[09/27 15:01:56]  Generator returned sat in 0.175761 secs.
[09/27 15:01:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:01:57]  Improved gap from 19.9975 to 100
[09/27 15:01:57]  Improved number of small numbers from 60 to 80 out of a max of 114
[09/27 15:01:57]  Verifer returned sat in 0.906380 secs.
[09/27 15:01:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     235.366211     135.365967 -135.366025   235.366211    0.002441   135.365967    0.000000  100.000244      100.000186       2.0           135.365967                -1.0            -1
1     235.366211     135.366211 -135.366025   235.366211    0.001465   135.366211    0.000000  100.000000        0.000186       2.0           235.366211                 0.0         False
2     235.366211     235.366025 -135.366025   235.366211    0.001465   235.366025    0.000000    0.000186      -99.999814       3.0           235.366211                 0.0         False
3     611.855088     335.366211 -135.366025   611.855088  376.489062   335.366211    0.000000  276.488877      176.489062       1.0           235.366211                 1.0         False
4     611.855088     435.366211 -135.366025   611.855088    0.010000   435.366211    0.000000  176.488877       76.489063       2.0           611.855088                 0.0         False
5     611.855088     611.855088 -135.366025   611.855088    0.010000   611.855088    0.000000    0.000000      -23.510938       3.0           611.855088                 0.0         False
6     987.359150     735.366025 -135.366025   987.359150  375.504062   735.366025   51.993125  200.000000      200.000000       1.0           611.855088                 1.0         False
7    1161.863213     835.366025 -135.366025  1161.863213  374.504062   835.366025  126.497187  200.000000      200.000000       2.0          1035.366025                 0.0         False
8    1335.367275     835.366211 -135.366025  1335.367275  373.504062   835.366211  200.001250  299.999814      200.000000       3.0          1135.366025                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=160001/800, 
.[0m
[09/27 15:01:58]  --------------------------------------------------------------------------------
[09/27 15:01:58]  Iteration: 6 (0 solution, 5 counterexamples)
[09/27 15:01:58]  Generator returned sat in 0.283458 secs.
[09/27 15:01:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:01:59]  Improved number of small numbers from 56 to 113 out of a max of 113
[09/27 15:01:59]  Verifer returned sat in 0.472773 secs.
[09/27 15:01:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1066.701416     866.204346 -135.365967  1066.701416    0.001465   866.204346    0.000000  200.497070      199.997559       7.0           866.204346                -1.0            -1
1    1066.701416     866.703857 -135.365967  1066.701416  200.496094   866.703857    0.000000  199.997559       99.997559       2.0           866.204346                 1.0         False
2    1066.702881    1066.702637 -135.365967  1066.702881  199.999023  1066.702637    0.000000    0.000244       -0.000977       1.0          1066.702881                 1.0          True
3    1066.704102    1066.704102 -135.365967  1066.704102    0.001465  1066.704102    0.000000    0.000000      -99.999756       1.0          1066.704102                 0.0         False
4    1466.705078    1166.703857 -135.365967  1466.705078  400.000977  1166.703857    0.001221  300.000000      200.000000       1.0          1066.704102                 0.0         False
5    1466.705078    1366.703613 -135.365967  1466.705078    0.010000  1366.703613    0.001221  100.000244      100.000000       2.0          1466.703857                 0.0         False
6    1816.706299    1466.702637 -135.365967  1816.706299  450.001465  1466.702637  150.002441  200.001221      200.000000       3.0          1466.703857                 1.0         False
7    1816.706299    1466.703857 -135.365967  1816.706299    0.010000  1466.703857  150.002441  200.000000      100.000000       4.0          1666.703857                 1.0         False
8    2066.706299    1566.703857 -135.365967  2066.706299  450.000000  1566.703857  200.002441  300.000000      200.000000       3.0          1666.703857                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=819205/4096, 
.[0m
[09/27 15:01:59]  --------------------------------------------------------------------------------
[09/27 15:01:59]  Iteration: 7 (0 solution, 6 counterexamples)
[09/27 15:02:00]  Generator returned sat in 0.572929 secs.
[09/27 15:02:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:02:01]  Improved number of small numbers from 39 to 47 out of a max of 113
[09/27 15:02:01]  Verifer returned sat in 1.082844 secs.
[09/27 15:02:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1266.725078    1066.254924 -335.385967  1266.725078  300.468750  1066.254924    0.001221  200.468933      200.000000       7.0          1066.254924                -1.0            -1
1    1366.694011    1066.723857 -335.385967  1366.694011  300.437866  1066.723857    0.001221  299.968933      199.968933       2.0          1366.692791                 1.0         False
2    1366.694011    1265.817058 -335.385967  1366.694011    0.031250  1265.817058    0.001221  100.875732       99.968933       3.0          1366.692791                 0.0         False
3    1366.694011    1266.723857 -335.385967  1366.694011    0.031067  1266.723857    0.001221   99.968933       -0.031067       4.0          1366.692791                 0.0         False
4    1666.725078    1367.661724 -335.385967  1666.725078  400.000000  1367.661724    0.001221  299.062134      200.000000       1.0          1366.692791                 1.0         False
5    1668.600811    1566.723857 -335.385967  1668.600811  300.937866  1566.723857    0.001221  101.875732      101.875732       2.0          1668.599590                 0.0         False
6    1867.631877    1666.692871 -335.385967  1867.631877  300.906799  1666.692871    0.908020  200.030986      200.000000       3.0          1866.723857                 0.0         False
7    1867.631877    1666.723857 -335.385967  1867.631877    1.000000  1666.723857    0.908020  200.000000      100.000000       4.0          1866.723857                 0.0         False
8    2266.756145    1767.661621 -335.385967  2266.756145  599.124268  1767.661621  200.032288  299.062236      200.000000       3.0          1866.723857                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277309/16384, 
.[0m
[09/27 15:02:02]  --------------------------------------------------------------------------------
[09/27 15:02:02]  Iteration: 8 (0 solution, 7 counterexamples)
[09/27 15:02:02]  Generator returned sat in 0.341805 secs.
[09/27 15:02:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:02:03]  Improved gap from 0.0 to 100
[09/27 15:02:03]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:02:03]  Verifer returned sat in 0.377351 secs.
[09/27 15:02:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     848.550781     848.488770 -184.044922   848.550781    0.062012   848.488770    0.000000    0.062012      -66.832031       2.0           848.488770                -1.0            -1
1    1215.320801     948.488770 -184.044922  1215.320801  366.832031   948.488770    0.000000  266.832031      199.937988       1.0           848.488770                 0.0         False
2    1315.320801    1115.382812 -184.044922  1315.320801  366.832031  1115.382812    0.000000  199.937988      199.937988       2.0           848.488770                 0.0         False
3    1416.382812    1215.382812 -184.044922  1416.382812  301.000000  1215.382812    1.000000  200.000000      200.000000       2.0          1415.382812                 0.0         False
4    1516.382812    1215.382812 -184.044922  1516.382812  300.000000  1215.382812    1.000000  300.000000      200.000000       2.0          1515.382812                 0.0         False
5    1516.382812    1382.152832 -184.044922  1516.382812  133.447021  1382.152832    1.000000  133.229980      100.000000       3.0          1515.382812                 0.0         False
6    1516.537842    1415.444824 -184.044922  1516.537842  133.385010  1415.444824    1.000000  100.093018        0.155029       3.0          1515.537842                 0.0         False
7    1516.537842    1515.382812 -184.044922  1516.537842  100.031006  1515.382812    1.000000    0.155029      -99.844971       4.0          1515.537842                 0.0         False
8    2217.413818    1615.382812 -184.044922  2217.413818  701.031006  1615.382812  302.031006  300.000000      200.000000       1.0          1515.537842                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1233023/4096, 
.[0m
[09/27 15:02:03]  --------------------------------------------------------------------------------
[09/27 15:02:03]  Iteration: 9 (0 solution, 8 counterexamples)
[09/27 15:02:04]  Generator returned sat in 0.556254 secs.
[09/27 15:02:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:04]  Improved gap from 0.0 to 100
[09/27 15:02:05]  Improved number of small numbers from 55 to 61 out of a max of 114
[09/27 15:02:05]  Verifer returned sat in 0.945698 secs.
[09/27 15:02:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     -84.622314    -184.591349 -184.045166   -84.622314   99.968750  -184.591349     0.000000   99.969035       99.969035       2.0          -184.591349                -1.0            -1
1     -84.622314    -184.591349 -184.045166   -84.622314   99.968994  -184.591349     0.000000   99.969035       -0.030965       2.0          -184.591349                 0.0         False
2     -84.591349     -84.591349 -184.045166   -84.591349  100.000000   -84.591349     0.000000    0.000000     -100.000000       1.0          -184.591349                 0.0         False
3     315.460327      15.418986 -184.045166   315.460327  400.051676    15.418986     0.051676  299.989665      200.000000       1.0          -184.591349                 0.0         False
4     415.491333     215.408651 -184.045166   415.491333  400.020671   215.408651     0.082682  200.000000      200.000000       2.0           415.408651                 0.0         False
5    1015.491333     315.393148 -184.045166  1015.491333  800.000000   315.393148   500.082682  200.015503      200.000000       3.0           415.408651                 0.0         False
6    1615.444824     315.439657 -184.045166  1615.444824  799.968994   315.439657  1000.036174  299.968994      200.000000       3.0           615.408651                 0.0         False
7    1915.517171     415.439657 -184.045166  1915.517171  600.041341   415.439657  1200.108521  299.968994      200.000000       3.0           715.408651                 0.0         False
8    2015.610189     615.408447 -184.045166  2015.610189  400.062012   615.408447  1200.201538  200.000203      200.000000       3.0           815.408651                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=29494121/24576, 
.[0m
[09/27 15:02:06]  --------------------------------------------------------------------------------
[09/27 15:02:06]  Iteration: 10 (0 solution, 9 counterexamples)
[09/27 15:02:07]  Generator returned sat in 0.374137 secs.
[09/27 15:02:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:02:07]  Improved number of small numbers from 79 to 104 out of a max of 113
[09/27 15:02:07]  Verifer returned sat in 0.705716 secs.
[09/27 15:02:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1115.578857     815.640951 -184.045166  1115.578857    0.062012   815.640951        0.0  299.937907      199.937907       2.0           815.640951                -1.0            -1
1    1115.578857    1015.640869 -184.045166  1115.578857  299.876221  1015.640869        0.0   99.937988       99.937907       2.0           815.640951                 1.0         False
2    1315.455078    1115.640951 -184.045166  1315.455078  299.814209  1115.640951        0.0  199.814128      199.814128       1.0          1315.455078                 1.0          True
3    1315.455078    1215.640951 -184.045166  1315.455078   25.775787  1215.640951        0.0   99.814128       99.814128       2.0          1315.455078                 0.0         False
4    1315.455078    1215.640951 -184.045166  1315.455078   50.551575  1215.640951        0.0   99.814128       -0.185872       2.0          1315.455078                 1.0         False
5    1315.744100    1315.682129 -184.045166  1315.744100  100.103149  1315.682129        0.0    0.061971      -99.896851       1.0          1315.455078                 1.0         False
6    1616.743896    1415.640951 -184.045166  1616.743896  301.061768  1415.640951        0.0  201.102946      101.102946       1.0          1315.455078                 0.0         False
7    1716.640951    1615.640951 -184.045166  1716.640951  301.000000  1615.640951        0.0  101.000000      101.000000       2.0          1716.640951                 0.0         False
8    2216.640951    1715.640869 -184.045166  2216.640951  601.000000  1715.640869      301.0  200.000081      200.000000       2.0          1716.640951                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=301, 
.[0m
[09/27 15:02:08]  --------------------------------------------------------------------------------
[09/27 15:02:08]  Iteration: 11 (0 solution, 10 counterexamples)
[09/27 15:02:10]  Generator returned sat in 2.167199 secs.
[09/27 15:02:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:02:11]  Improved gap from 0.0 to 1.5625
[09/27 15:02:12]  Improved number of small numbers from 61 to 69 out of a max of 114
[09/27 15:02:12]  Verifer returned sat in 1.403355 secs.
[09/27 15:02:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1213.080951    1013.080951 -281.485166  1213.080951    0.002500  1013.080951    0.00000  200.000000      200.000000       4.0          1013.080951                -1.0            -1
1    1213.080951    1013.081055 -281.485166  1213.080951    0.002500  1013.081055    0.00000  199.999896      100.000000       4.0          1013.080951                 0.0         False
2    1213.080951    1212.516113 -281.485166  1213.080951    0.001465  1212.516113    0.00000    0.564837        0.000000       5.0          1213.080951                 0.0         False
3    1213.080951    1213.080951 -183.047666  1213.080951    0.563750  1213.080951    0.00000    0.000000       -1.562500       6.0          1213.080951                 0.0         False
4    1514.644701    1214.643555 -183.047666  1514.644701  301.563750  1214.643555    0.00125  299.999896      200.000000       1.0          1213.080951                 1.0         False
5    1514.644701    1414.643311 -183.047666  1514.644701    0.010000  1414.643311    0.00125  100.000140      100.000000       2.0          1514.643451                 0.0         False
6    1514.644701    1512.634701 -183.047666  1514.644701    1.010000  1512.634701    0.00125    2.008750        0.000000       3.0          1514.643451                 0.0         False
7    1514.645951    1514.644701  -86.058838  1514.645951    2.010000  1514.644701    0.00125    0.000000       -3.009922       1.0          1514.643451                 0.0         False
8    1517.655951    1517.654701   12.378418  1517.655951    3.010000  1517.654701    0.00125    0.000000       -1.562666       1.0          1514.643451                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:02:12]  --------------------------------------------------------------------------------
[09/27 15:02:12]  Iteration: 12 (0 solution, 11 counterexamples)
[09/27 15:02:15]  Generator returned sat in 1.832779 secs.
[09/27 15:02:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:16]  Improved number of small numbers from 46 to 64 out of a max of 113
[09/27 15:02:16]  Verifer returned sat in 1.127069 secs.
[09/27 15:02:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     987.338379     887.338379 -255.74259   987.338379    0.061768   887.338379    0.000000  100.000000        0.000004       6.0           887.338379                -1.0            -1
1     987.338379     987.338379 -255.74259   987.338379    0.061768   987.338379    0.000000    0.000000      -99.999996       2.0           887.338379                 1.0         False
2    1187.338379    1187.338375 -255.74259  1187.338379  200.000000  1187.338375    0.000000    0.000004        0.000004       1.0           887.338379                 0.0         False
3    1487.400142    1287.276611 -255.74259  1487.400142  300.061768  1287.276611    0.061768  200.061764      200.000000       1.0           887.338379                 0.0         False
4    1487.400142    1287.338375 -255.74259  1487.400142  149.030884  1287.338375    0.061768  200.000000      100.000000       2.0          1487.338375                 0.0         False
5    1509.946468    1436.807491 -255.74259  1509.946468  222.546326  1436.807491    0.061768   73.077209       22.546326       3.0          1487.338375                 0.0         False
6    1687.338375    1512.634701 -255.74259  1687.338375  250.469116  1512.634701    0.061768  174.641907       99.938232       1.0          1487.338375                 1.0         False
7    1887.400142    1687.338375 -255.74259  1887.400142  374.703674  1687.338375    0.061768  200.000000      200.000000       1.0          1487.338375                 0.0         False
8    2248.455654    1687.399902 -255.74259  2248.455654  561.055511  1687.399902  261.117279  299.938472      200.000000       2.0          1487.338375                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=8554267/32768, 
.[0m
[09/27 15:02:16]  --------------------------------------------------------------------------------
[09/27 15:02:16]  Iteration: 13 (0 solution, 12 counterexamples)
[09/27 15:02:17]  Generator returned sat in 0.143914 secs.
[09/27 15:02:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:02:17]  Improved gap from 0.08235677083333333 to 100
[09/27 15:02:18]  Improved number of small numbers from 29 to 50 out of a max of 114
[09/27 15:02:18]  Verifer returned sat in 1.458549 secs.
[09/27 15:02:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1626.929443   -1626.959961 -255.74259 -1626.929443    0.031006 -1626.959961    0.000000    0.030518       -0.031042       6.0         -1626.959961                -1.0            -1
1   -1626.898193   -1626.898193 -255.74259 -1626.898193    0.061768 -1626.898193    0.000000    0.000000      -99.999792       1.0         -1626.959961                 1.0         False
2   -1326.929199   -1426.898401 -255.74259 -1326.929199  299.968994 -1426.898401    0.000000   99.969202       99.969202       1.0         -1626.959961                 0.0         False
3   -1226.877812   -1326.898401 -255.74259 -1226.877812  200.020589 -1326.898401    0.000000  100.020589      100.020589       1.0         -1226.877812                 0.0         False
4   -1026.867517   -1226.898438 -255.74259 -1026.867517  300.030884 -1226.898438    0.030884  200.000037      200.000000       2.0         -1226.877812                 0.0         False
5   -1026.867517   -1126.898401 -255.74259 -1026.867517  149.015442 -1126.898401    0.030884  100.000000      100.000000       2.0         -1026.898401                 0.0         False
6    -903.344354   -1126.898401 -255.74259  -903.344354  223.523163 -1126.898401    0.030884  223.523163      123.523163       2.0         -1026.898401                 0.0         False
7    -791.582773    -926.898401 -255.74259  -791.582773  335.284744  -926.898401    0.030884  135.284744      135.284744       2.0         -1026.898401                 0.0         False
8    -423.940401    -903.344238 -255.74259  -423.940401  502.927116  -903.344238  202.958000  276.445837      200.000000       2.0         -1026.898401                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=26598063/131072, 
.[0m
[09/27 15:02:19]  --------------------------------------------------------------------------------
[09/27 15:02:19]  Iteration: 14 (0 solution, 13 counterexamples)
[09/27 15:02:20]  Generator returned sat in 0.508014 secs.
[09/27 15:02:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:02:20]  Improved gap from 0.0 to 100
[09/27 15:02:21]  Improved number of small numbers from 37 to 114 out of a max of 114
[09/27 15:02:21]  Verifer returned sat in 0.589604 secs.
[09/27 15:02:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1690.298584   -1990.298584  7.657715 -1690.298584    0.061768 -1990.298584    0.000000  300.000000      200.000000       7.0         -1990.298584                -1.0            -1
1   -1690.298584   -1790.298584  7.657715 -1690.298584  299.938477 -1790.298584    0.000000  100.000000      100.000000       2.0         -1990.298584                 1.0         False
2   -1522.257568   -1690.298584  7.657715 -1522.257568  268.041016 -1690.298584    0.000000  168.041016      168.041016       3.0         -1522.257568                 0.0         False
3   -1422.257568   -1690.298584  7.657715 -1422.257568  268.041016 -1690.298584    0.000000  268.041016      168.041016       3.0         -1522.257568                 1.0         False
4   -1289.237061   -1590.298340  7.657715 -1289.237061  401.061523 -1590.298340    1.061523  299.999756      200.000000       3.0         -1522.257568                 1.0         False
5   -1189.175293   -1489.421631  7.657715 -1189.175293  400.061523 -1489.421631    1.123291  299.123047      200.000000       3.0         -1190.298584                 1.0         False
6   -1089.236816   -1390.298340  7.657715 -1089.236816  399.061523 -1390.298340    1.123291  299.938232      199.938477       3.0         -1090.360107                 1.0         False
7    -791.582764   -1190.360107  7.657715  -791.582764  597.592285 -1190.360107  198.715820  200.061523      200.000000       3.0         -1090.360107                 1.0         False
8    -395.052002   -1190.298584  7.657715  -395.052002  596.592285 -1190.298584  495.246582  300.000000      200.000000       4.0          -890.298584                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1012091/2048, 
.[0m
[09/27 15:02:21]  --------------------------------------------------------------------------------
[09/27 15:02:21]  Iteration: 15 (0 solution, 14 counterexamples)
[09/27 15:02:22]  Generator returned sat in 0.370210 secs.
[09/27 15:02:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:22]  Improved gap from 0.0 to 0
[09/27 15:02:23]  Improved number of small numbers from 61 to 71 out of a max of 114
[09/27 15:02:23]  Verifer returned sat in 0.764194 secs.
[09/27 15:02:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1589.229561   -1789.229736 -392.312285 -1589.229561    0.061523 -1789.229736        0.0  200.000176      200.000000       6.0         -1789.229736                -1.0            -1
1   -1589.229561   -1789.229492 -392.312285 -1589.229561  199.997314 -1789.229492        0.0  199.999932      100.000000       6.0         -1789.229736                 0.0         False
2   -1589.229561   -1689.229492 -392.312285 -1589.229561   67.334229 -1689.229492        0.0   99.999932        0.000000       7.0         -1589.229561                 0.0         False
3   -1589.229561   -1589.229561 -292.312285 -1589.229561   67.331667 -1589.229561        0.0    0.000000        0.000000       8.0         -1589.229561                 0.0         False
4   -1489.232061   -1489.239561 -292.312285 -1489.232061   99.997500 -1489.239561        0.0    0.007500       -0.002500       1.0         -1589.229561                 1.0         False
5   -1489.229561   -1489.229561 -192.312500 -1489.229561    0.010000 -1489.229561        0.0    0.000000       -0.000215       1.0         -1489.229561                 0.0         False
6   -1489.219561   -1489.219561  -92.322510 -1489.219561    0.010000 -1489.219561        0.0    0.000000       -0.000225       1.0         -1489.229561                 0.0         False
7   -1489.209561   -1489.209561    7.657715 -1489.209561    0.010000 -1489.209561        0.0    0.000000       -0.010000       1.0         -1489.229561                 0.0         False
8   -1489.199561   -1489.199561    7.657715 -1489.199561    0.010000 -1489.199561        0.0    0.000000     -100.000000       1.0         -1489.229561                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:02:23]  --------------------------------------------------------------------------------
[09/27 15:02:23]  Iteration: 16 (0 solution, 15 counterexamples)
[09/27 15:02:26]  Generator returned sat in 1.630801 secs.
[09/27 15:02:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:26]  Improved gap from 0.0 to 71.875
[09/27 15:02:27]  Improved number of small numbers from 33 to 114 out of a max of 114
[09/27 15:02:27]  Verifer returned sat in 1.008490 secs.
[09/27 15:02:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2381.084473   -2409.209717 -392.312256 -2381.084473    0.061523 -2409.209717   0.000000   28.125244       28.125244       2.0         -2409.209717                -1.0            -1
1   -2381.084473   -2381.084473 -392.312256 -2381.084473   28.063721 -2381.084473   0.000000    0.000000      -71.874756       2.0         -2409.209717                 0.0         False
2   -2009.148193   -2209.209717 -392.312256 -2009.148193  371.936279 -2209.209717   0.061523  200.000000      200.000000       1.0         -2409.209717                 0.0         False
3   -2009.148193   -2109.209717 -392.312256 -2009.148193   76.875000 -2109.209717   0.061523  100.000000      100.000000       2.0         -2009.209717                 0.0         False
4   -2009.148193   -2082.770996 -392.312256 -2009.148193   75.875000 -2082.770996   0.061523   73.561279        0.000000       3.0         -2009.209717                 0.0         False
5   -2007.834473   -2007.895996 -367.500732 -2007.834473   74.875000 -2007.895996   0.061523    0.000000      -73.874756       1.0         -2007.895996                 0.0         False
6   -1933.959473   -1934.020996 -340.375977 -1933.959473   73.875000 -1934.020996   0.061523    0.000000      -72.875000       1.0         -1934.020996                 0.0         False
7   -1861.084473   -1861.145996 -312.250977 -1861.084473   72.875000 -1861.145996   0.061523    0.000000      -71.875000       1.0         -1861.145996                 0.0         False
8   -1789.209473   -1789.270996 -312.250977 -1789.209473   71.875000 -1789.270996   0.061523    0.000000     -100.000000       1.0         -1789.270996                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:02:27]  --------------------------------------------------------------------------------
[09/27 15:02:27]  Iteration: 17 (0 solution, 16 counterexamples)
[09/27 15:02:28]  Generator returned sat in 0.670550 secs.
[09/27 15:02:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:02:29]  Improved gap from 0.0 to 100
[09/27 15:02:29]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 15:02:29]  Verifer returned sat in 0.450958 secs.
[09/27 15:02:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2210.148438   -2210.178955 -340.375977 -2210.148438    0.030762 -2210.178955    0.000000    0.030518        0.030518       1.0         -2210.178955                -1.0            -1
1   -2010.240234   -2210.117676 -340.375977 -2010.240234  199.938721 -2210.117676    0.000000  199.877441       99.938721       1.0         -2210.178955                 0.0         False
2   -2010.209961   -2110.178955 -340.375977 -2010.209961  199.907715 -2110.178955    0.000000   99.968994       -0.031006       2.0         -2010.209961                 0.0         False
3   -1909.148193   -2010.178955 -340.375977 -1909.148193  201.030762 -2010.178955    0.000000  101.030762        1.030762       1.0         -2010.209961                 1.0         False
4   -1809.178955   -1811.209717 -340.375977 -1809.178955  201.000000 -1811.209717    0.000000    2.030762        1.000000       1.0         -1809.178955                 0.0         False
5   -1411.301758   -1710.178955 -340.375977 -1411.301758  399.907959 -1710.178955   98.877197  200.000000      200.000000       1.0         -1809.178955                 0.0         False
6   -1212.301758   -1610.209717 -340.375977 -1212.301758  399.000000 -1610.209717  197.877197  200.030762      200.000000       2.0         -1410.178955                 0.0         False
7   -1013.363281   -1510.178955 -340.375977 -1013.363281  398.969238 -1510.178955  296.815674  200.000000      200.000000       3.0         -1310.178955                 1.0         False
8    -913.332520   -1510.178955 -340.375977  -913.332520  300.030762 -1510.178955  296.846436  300.000000      200.000000       3.0         -1210.178955                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=1215883/4096, 
.[0m
[09/27 15:02:30]  --------------------------------------------------------------------------------
[09/27 15:02:30]  Iteration: 18 (0 solution, 17 counterexamples)
[09/27 15:02:30]  Generator returned sat in 0.321608 secs.
[09/27 15:02:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:02:31]  Improved number of small numbers from 71 to 83 out of a max of 113
[09/27 15:02:31]  Verifer returned sat in 0.726121 secs.
[09/27 15:02:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2011.287598   -2111.304932 -340.375977 -2011.287598    0.001709 -2111.304932    0.000000  100.017334        0.017493       1.0         -2111.304932                -1.0            -1
1   -1811.322510   -2011.285924 -340.375977 -1811.322510  299.982422 -2011.285924    0.000000  199.963415       99.982581       1.0         -2111.304932                 0.0         False
2   -1711.305091   -1811.322510 -340.375977 -1711.305091  299.980833 -1811.322510    0.000000  100.017419      100.000000       2.0         -1711.305091                 0.0         False
3   -1711.305091   -1711.306758 -340.375977 -1711.305091    0.010000 -1711.306758    0.000000    0.001667        0.000000       2.0         -1711.305091                 1.0         False
4   -1711.296758   -1711.298424 -340.375977 -1711.296758    0.010000 -1711.298424    0.000000    0.001667      -99.991667       1.0         -1711.305091                 1.0         False
5   -1111.303424   -1611.304932 -340.375977 -1111.303424  599.995000 -1611.304932  200.001667  299.999840      200.000000       1.0         -1711.305091                 0.0         False
6   -1111.303424   -1511.304932 -340.375977 -1111.303424    0.010000 -1511.304932  200.001667  199.999840      100.000000       2.0         -1311.305091                 0.0         False
7   -1111.303424   -1311.306758 -340.375977 -1111.303424    0.010000 -1311.306758  200.001667    0.001667        0.000000       3.0         -1311.305091                 1.0         False
8   -1111.295091   -1311.303223 -340.375977 -1111.295091    0.010000 -1311.303223  200.001667    0.006465      -99.991667       1.0         -1311.305091                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=120001/600, 
.[0m
[09/27 15:02:32]  --------------------------------------------------------------------------------
[09/27 15:02:32]  Iteration: 19 (0 solution, 18 counterexamples)
[09/27 15:02:35]  Generator returned sat in 2.939782 secs.
[09/27 15:02:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:35]  Improved gap from 0.0 to 100
[09/27 15:02:36]  Improved number of small numbers from 59 to 75 out of a max of 114
[09/27 15:02:36]  Verifer returned sat in 0.975231 secs.
[09/27 15:02:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1912.307373   -1912.308838 -540.345977 -1912.307373  100.002441 -1912.308838    0.00000    0.001465        0.001387       6.0         -1912.308838                -1.0            -1
1   -1812.306396   -1812.308838 -540.345977 -1812.306396  100.002441 -1812.308838    0.00000    0.002441        0.002363       1.0         -1912.308838                 1.0         False
2   -1812.306396   -1812.308760 -540.345977 -1812.306396    0.001465 -1812.308760    0.00000    0.002363      -99.997637       2.0         -1812.306396                 0.0         False
3   -1412.307510   -1704.192510 -540.345977 -1412.307510  400.001250 -1704.192510    0.00125  291.883750      200.000000       1.0         -1812.306396                 1.0         False
4   -1412.307510   -1612.308760 -540.345977 -1412.307510    0.010000 -1612.308760    0.00125  200.000000      100.000000       2.0         -1412.308760                 0.0         False
5   -1412.307510   -1412.310010 -540.345977 -1412.307510    1.020000 -1412.310010    0.00125    0.001250        0.000000       3.0         -1412.308760                 1.0         False
6   -1409.268760   -1409.271260 -540.345977 -1409.268760    3.040000 -1409.271260    0.00125    0.001250      -96.961250       1.0         -1412.308760                 1.0         False
7   -1112.308760   -1310.288760 -540.345977 -1112.308760  296.961250 -1310.288760    0.00125  197.978750       99.998750       1.0         -1412.308760                 0.0         False
8    -712.306260   -1112.308838 -540.345977  -712.306260  597.981250 -1112.308838  200.00250  200.000078      200.000000       1.0         -1412.308760                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 15:02:37]  --------------------------------------------------------------------------------
[09/27 15:02:37]  Iteration: 20 (0 solution, 19 counterexamples)
[09/27 15:02:40]  Generator returned sat in 2.119603 secs.
[09/27 15:02:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:02:40]  Improved gap from 0.0 to 100
[09/27 15:02:40]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 15:02:40]  Verifer returned sat in 0.440030 secs.
[09/27 15:02:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1915.308594   -2115.308594 -337.345947 -1915.308594  299.999756 -2115.308594        0.0  200.000000      200.000000       5.0         -2115.308594                -1.0            -1
1   -1815.308594   -2114.306152 -337.345947 -1815.308594  300.000000 -2114.306152        0.0  298.997559      200.000000       5.0         -2115.308594                 0.0         False
2   -1815.308594   -2015.308594 -337.345947 -1815.308594  199.997559 -2015.308594        0.0  200.000000      100.000000       6.0         -1815.308594                 0.0         False
3   -1815.308594   -1915.308594 -337.345947 -1815.308594  199.997500 -1915.308594        0.0  100.000000        0.000000       7.0         -1815.308594                 0.0         False
4   -1815.308594   -1815.308594 -337.345947 -1815.308594    0.010000 -1815.308594        0.0    0.000000     -100.000000       4.0         -1815.308594                 1.0         False
5   -1515.311035   -1615.308594 -337.345947 -1515.311035  299.997559 -1615.308594        0.0   99.997559       99.997559       1.0         -1815.308594                 0.0         False
6   -1214.308594   -1515.308594 -337.345947 -1214.308594  401.000000 -1515.308594      101.0  200.000000      200.000000       1.0         -1815.308594                 0.0         False
7   -1214.308594   -1415.308594 -337.345947 -1214.308594  199.500000 -1415.308594      101.0  100.000000      100.000000       2.0         -1315.308594                 0.0         False
8    -913.308594   -1315.308838 -337.345947  -913.308594  401.000000 -1315.308838      202.0  200.000244      200.000000       3.0         -1315.308594                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=202, 
.[0m
[09/27 15:02:41]  --------------------------------------------------------------------------------
[09/27 15:02:41]  Iteration: 21 (0 solution, 20 counterexamples)
[09/27 15:02:43]  Generator returned sat in 1.743947 secs.
[09/27 15:02:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:44]  Improved number of small numbers from 71 to 75 out of a max of 113
[09/27 15:02:44]  Verifer returned sat in 0.854462 secs.
[09/27 15:02:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1815.308594   -2015.823914 -337.345947 -1815.308594    0.061035 -2015.823914    0.000000  200.515320           200.0       2.0         -2015.823914                -1.0            -1
1   -1815.308594   -1915.777954 -337.345947 -1815.308594    0.030518 -1915.777954    0.000000  100.469360           100.0       2.0         -1815.308594                 0.0         False
2   -1515.686035   -1915.308594 -337.345947 -1515.686035  400.091919 -1915.308594   99.622559  300.000000           200.0       3.0         -1815.308594                 0.0         False
3   -1415.624756   -1815.308594 -337.345947 -1415.624756  400.061279 -1815.308594   99.683838  300.000000           200.0       4.0         -1515.308594                 0.0         False
4   -1315.594116   -1715.277954 -337.345947 -1315.594116  400.030640 -1715.277954   99.714478  299.969360           200.0       3.0         -1415.308594                 0.0         False
5   -1215.563477   -1615.262634 -337.345947 -1215.563477  400.000000 -1615.262634   99.745117  299.954041           200.0       3.0         -1315.308594                 0.0         False
6    -916.425598   -1515.277954 -337.345947  -916.425598  599.091919 -1515.277954  298.882996  299.969360           200.0       3.0         -1315.308594                 0.0         False
7    -617.333679   -1415.277954 -337.345947  -617.333679  599.061279 -1415.277954  497.974915  299.969360           200.0       3.0         -1115.308594                 0.0         False
8    -318.303040   -1315.278076 -337.345947  -318.303040  599.000000 -1315.278076  697.005554  299.969482           200.0       3.0         -1015.308594                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=9786017/16384, 
.[0m
[09/27 15:02:45]  --------------------------------------------------------------------------------
[09/27 15:02:45]  Iteration: 22 (0 solution, 21 counterexamples)
[09/27 15:02:47]  Generator returned sat in 1.257801 secs.
[09/27 15:02:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:02:47]  Improved gap from 0.0 to 100
[09/27 15:02:48]  Improved number of small numbers from 37 to 47 out of a max of 114
[09/27 15:02:48]  Verifer returned sat in 1.382695 secs.
[09/27 15:02:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2095.032471   -2195.032623 -337.345947 -2095.032471   99.969482 -2195.032623    0.000000  100.000153        0.000153       2.0         -2195.032623                -1.0            -1
1   -2095.032471   -2095.032623 -337.345947 -2095.032471   99.969482 -2095.032623    0.000000    0.000153      -99.999847       2.0         -2195.032623                 0.0         False
2   -1895.002045   -1895.032623 -337.345947 -1895.002045  200.030579 -1895.032623    0.000000    0.030579        0.030579       1.0         -2195.032623                 0.0         False
3   -1446.002045   -1895.032623 -337.345947 -1446.002045  449.030579 -1895.032623  149.030579  300.000000      200.000000       1.0         -2195.032623                 0.0         False
4   -1297.002045   -1795.002045 -337.345947 -1297.002045  449.000000 -1795.002045  198.030579  299.969421      200.000000       2.0         -1495.032623                 0.0         False
5   -1147.925598   -1602.032623 -337.345947 -1147.925598  449.045868 -1602.032623  247.107025  207.000000      200.000000       3.0         -1495.032623                 0.0         False
6    -916.425598   -1542.002045 -337.345947  -916.425598  438.500000 -1542.002045  378.607025  246.969421      200.000000       3.0         -1295.032623                 0.0         False
7    -634.849152   -1420.638133 -337.345947  -634.849152  528.545868 -1420.638133  560.183472  225.605509      200.000000       3.0         -1295.032623                 0.0         False
8    -299.908793   -1395.002197 -337.345947  -299.908793  560.545868 -1395.002197  795.123830  299.969574      200.000000       3.0         -1295.032623                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=58696655/98304, 
.[0m
[09/27 15:02:49]  --------------------------------------------------------------------------------
[09/27 15:02:49]  Iteration: 23 (0 solution, 22 counterexamples)
[09/27 15:02:53]  Generator returned sat in 3.630598 secs.
[09/27 15:02:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:02:53]  Improved gap from 0.0 to 100
[09/27 15:02:54]  Improved number of small numbers from 52 to 85 out of a max of 114
[09/27 15:02:54]  Verifer returned sat in 1.211692 secs.
[09/27 15:02:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1962.743164   -2095.032715 -337.345947 -1962.743164    0.061279 -2095.032715    0.000000  132.289551      132.289459       8.0         -2095.032715                -1.0            -1
1   -1962.743164   -2095.032471 -337.345947 -1962.743164    0.061279 -2095.032471    0.000000  132.289307       32.289459       2.0         -2095.032715                 1.0         False
2   -1895.032471   -1962.681885 -337.345947 -1895.032471  200.000000 -1962.681885    0.000000   67.649414        0.000153       1.0         -2095.032715                 0.0         False
3   -1895.032471   -1895.032623 -337.345947 -1895.032471   67.588301 -1895.032623    0.000000    0.000153      -99.999847       2.0         -1895.032471                 0.0         False
4   -1794.650172   -1795.032623 -337.345947 -1794.650172  100.382451 -1795.032623    0.000000    0.382451      -99.617549       1.0         -1895.032471                 0.0         False
5   -1645.458947   -1645.520104 -337.345947 -1645.458947  149.573676 -1645.520104    0.000000    0.061157      -50.426324       1.0         -1895.032471                 0.0         False
6   -1422.159590   -1529.134766 -337.345947 -1422.159590  223.360514 -1529.134766    0.000000  106.975176       72.873033       1.0         -1895.032471                 0.0         False
7   -1195.093994   -1395.032623 -337.345947 -1195.093994  334.040771 -1395.032623    0.000000  199.938629      199.938629       1.0         -1895.032471                 0.0         False
8    -894.971466   -1395.032471 -337.345947  -894.971466  500.061157 -1395.032471  200.061157  299.999847      200.000000       2.0         -1895.032471                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638901/8192, 
.[0m
[09/27 15:02:55]  --------------------------------------------------------------------------------
[09/27 15:02:55]  Iteration: 24 (0 solution, 23 counterexamples)
[09/27 15:02:57]  Generator returned sat in 1.739280 secs.
[09/27 15:02:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:02:58]  Improved number of small numbers from 44 to 113 out of a max of 113
[09/27 15:02:58]  Verifer returned sat in 0.347494 secs.
[09/27 15:02:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2128.619141   -2128.680420 -303.759277 -2128.619141    0.061279 -2128.680420    0.000000    0.061279             0.0       4.0         -2128.680420                -1.0            -1
1   -2128.619141   -2128.619141 -303.759277 -2128.619141    0.030518 -2128.619141    0.000000    0.000000          -100.0       5.0         -2128.619141                 0.0         False
2   -2025.619141   -2025.619141 -303.759277 -2025.619141  103.000000 -2025.619141    0.000000    0.000000           -97.0       1.0         -2128.619141                 0.0         False
3   -1628.557861   -1828.680420 -303.759277 -1628.557861  397.061279 -1828.680420    0.061279  200.061279           200.0       1.0         -2128.619141                 0.0         False
4   -1527.619141   -1728.619141 -303.759277 -1527.619141  301.000000 -1728.619141    1.000000  200.000000           200.0       2.0         -1528.619141                 0.0         False
5   -1326.619141   -1628.619141 -303.759277 -1326.619141  401.000000 -1628.619141  102.000000  200.000000           200.0       3.0         -1528.619141                 0.0         False
6   -1128.619141   -1529.134521 -303.759277 -1128.619141  398.000000 -1529.134521  200.000000  200.515381           200.0       3.0         -1328.619141                 0.0         False
7   -1028.588623   -1428.619141 -303.759277 -1028.588623  300.545898 -1428.619141  200.030518  200.000000           200.0       3.0         -1228.619141                 0.0         False
8    -927.588623   -1328.619385 -303.759277  -927.588623  301.000000 -1328.619385  201.030518  200.000244           200.0       3.0         -1228.619141                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=819325/4096, 
.[0m
[09/27 15:02:58]  --------------------------------------------------------------------------------
[09/27 15:02:58]  Iteration: 25 (0 solution, 24 counterexamples)
[09/27 15:02:59]  Generator returned sat in 0.148237 secs.
[09/27 15:02:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:02:59]  Improved gap from 0.01 to 100
[09/27 15:03:00]  Improved number of small numbers from 46 to 114 out of a max of 114
[09/27 15:03:00]  Verifer returned sat in 0.491624 secs.
[09/27 15:03:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2042.619385   -2129.680176 -303.759277 -2042.619385   87.122314 -2129.680176   0.000000   87.060791       -0.030762       6.0         -2129.680176                -1.0            -1
1   -2042.588379   -2042.588379 -303.759277 -2042.588379   87.091797 -2042.588379   0.000000    0.000000      -99.999756       1.0         -2042.588379                 1.0         False
2   -1942.588379   -1942.588623 -303.759277 -1942.588379  100.000000 -1942.588623   0.000000    0.000244      -99.999756       1.0         -2042.588379                 0.0         False
3   -1542.558105   -1785.619141 -303.759277 -1542.558105  400.030518 -1785.619141   0.030518  243.030518      200.000000       1.0         -2042.588379                 0.0         False
4   -1442.527588   -1686.649658 -303.759277 -1442.527588  343.061035 -1686.649658   0.061035  244.061035      200.000000       2.0         -1442.588623                 0.0         False
5   -1331.649902   -1592.073242 -303.759277 -1331.649902  354.938721 -1592.073242  10.938721  249.484619      200.000000       3.0         -1442.588623                 0.0         False
6   -1231.619141   -1442.588623 -303.759277 -1231.619141  349.515381 -1442.588623  10.969482  200.000000      200.000000       3.0         -1242.588623                 0.0         False
7   -1089.588623   -1342.588623 -303.759277 -1089.588623  342.030518 -1342.588623  53.000000  200.000000      200.000000       3.0         -1142.588623                 0.0         False
8    -946.527588   -1342.558105 -303.759277  -946.527588  343.061035 -1342.558105  96.061035  299.969482      200.000000       3.0         -1142.588623                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=96, 
.[0m
[09/27 15:03:00]  --------------------------------------------------------------------------------
[09/27 15:03:00]  Iteration: 26 (0 solution, 25 counterexamples)
[09/27 15:03:01]  Generator returned sat in 0.171219 secs.
[09/27 15:03:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:03:02]  Improved gap from 0.0 to 0
[09/27 15:03:02]  Improved number of small numbers from 60 to 83 out of a max of 114
[09/27 15:03:02]  Verifer returned sat in 1.041629 secs.
[09/27 15:03:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1537.462646   -1687.460938 -658.886963 -1537.462646  149.999268 -1687.460938        0.0  149.998291      149.998291       2.0         -1687.460938                -1.0            -1
1   -1537.462646   -1587.460938 -658.886963 -1537.462646  149.998047 -1587.460938        0.0   49.998291       49.998291       2.0         -1537.462646                 0.0         False
2   -1537.460449   -1537.461540 -658.886963 -1537.460449   50.000488 -1537.461540        0.0    0.001090      -49.999512       1.0         -1537.460449                 0.0         False
3   -1487.460915   -1487.460915 -558.887207 -1487.460915   50.000625 -1487.460915        0.0    0.000000       -0.000221       1.0         -1537.460449                 0.0         False
4   -1487.450915   -1487.450915 -458.906982 -1487.450915    0.010000 -1487.450915        0.0    0.000000       -0.009997       1.0         -1487.450915                 0.0         False
5   -1487.440915   -1487.440915 -358.916748 -1487.440915    0.010000 -1487.440915        0.0    0.000000       -0.009762       1.0         -1487.450915                 0.0         False
6   -1487.430915   -1487.430915 -258.926758 -1487.430915    0.010000 -1487.430915        0.0    0.000000       -0.009772       1.0         -1487.450915                 0.0         False
7   -1487.420915   -1487.420915 -158.936768 -1487.420915    0.010000 -1487.420915        0.0    0.000000       -0.009782       1.0         -1487.450915                 0.0         False
8   -1487.410915   -1487.410915  -58.947021 -1487.410915    0.010000 -1487.410915        0.0    0.000000       -0.010036       1.0         -1487.450915                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:03:03]  --------------------------------------------------------------------------------
[09/27 15:03:03]  Iteration: 27 (0 solution, 26 counterexamples)
[09/27 15:03:06]  Generator returned sat in 2.445876 secs.
[09/27 15:03:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:03:07]  Improved gap from 1.00125 to 100
[09/27 15:03:07]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:03:07]  Verifer returned sat in 0.514050 secs.
[09/27 15:03:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1488.462402   -1688.458252 -757.889404 -1488.462402    0.001465 -1688.458252    0.000000  199.995850       99.996094       2.0         -1688.458252                -1.0            -1
1   -1488.458496   -1488.460693 -757.889404 -1488.458496  199.999756 -1488.460693    0.000000    0.002197        0.000000       1.0         -1688.458252                 0.0         False
2   -1488.458496   -1488.458496 -757.889404 -1488.458496    0.001250 -1488.458496    0.000000    0.000000     -100.000000       2.0         -1488.458496                 0.0         False
3   -1288.459717   -1288.460938 -757.889404 -1288.459717  199.998779 -1288.460938    0.000000    0.001221       -0.001221       1.0         -1488.458496                 0.0         False
4    -889.463623   -1288.458496 -757.889404  -889.463623  398.997314 -1288.458496   98.994873  300.000000      200.000000       1.0         -1488.458496                 0.0         False
5    -889.463623   -1088.458496 -757.889404  -889.463623    0.010000 -1088.458496   98.994873  100.000000      100.000000       2.0          -988.458496                 0.0         False
6    -590.463623   -1088.458496 -757.889404  -590.463623  399.000000 -1088.458496  197.994873  300.000000      200.000000       2.0          -988.458496                 0.0         False
7    -590.463623    -888.458496 -757.889404  -590.463623    0.010000  -888.458496  197.994873  100.000000      100.000000       2.0          -788.458496                 0.0         False
8    -291.463623    -888.458496 -757.889404  -291.463623  399.000000  -888.458496  296.994873  300.000000      200.000000       2.0          -788.458496                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=198, 
.[0m
[09/27 15:03:07]  --------------------------------------------------------------------------------
[09/27 15:03:07]  Iteration: 28 (0 solution, 27 counterexamples)
[09/27 15:03:12]  Generator returned sat in 4.188534 secs.
[09/27 15:03:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:03:13]  Improved gap from 0.0 to 100
[09/27 15:03:13]  Improved number of small numbers from 68 to 82 out of a max of 114
[09/27 15:03:13]  Verifer returned sat in 0.992340 secs.
[09/27 15:03:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -986.470947   -1086.468506 -757.889404  -986.470947    0.002500 -1086.468506     0.0000   99.997559       99.997549       1.0         -1086.468506                -1.0            -1
1    -886.471191    -986.468496 -757.889404  -886.471191  199.997314  -986.468496     0.0000   99.997305       99.997305       1.0         -1086.468506                 0.0         False
2    -886.471191    -892.448496 -757.889404  -886.471191    0.002686  -892.448496     0.0000    5.977305       -0.002695       2.0          -886.471191                 0.0         False
3    -586.465996    -886.468496 -757.889404  -586.465996  305.982500  -886.468496     0.0025  300.000000      200.000000       1.0          -886.471191                 1.0         False
4    -586.465996    -786.468496 -757.889404  -586.465996    0.010000  -786.468496     0.0025  200.000000      100.000000       2.0          -586.468496                 0.0         False
5    -586.465996    -586.468496 -757.889404  -586.465996   99.010000  -586.468496     0.0025    0.000000        0.000000       3.0          -586.468496                 1.0         False
6    -335.465996    -586.468496 -757.889404  -335.465996  251.000000  -586.468496     0.0025  251.000000      151.000000       3.0          -586.468496                 1.0         False
7    -186.465996    -386.468496 -757.889404  -186.465996  400.000000  -386.468496     0.0025  200.000000      200.000000       2.0          -586.468496                 1.0         False
8     212.534004    -386.468262 -757.889404   212.534004  599.000000  -386.468262   299.0025  299.999766      200.000000       3.0          -586.468496                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=299, 
.[0m
[09/27 15:03:14]  --------------------------------------------------------------------------------
[09/27 15:03:14]  Iteration: 29 (0 solution, 28 counterexamples)
[09/27 15:03:20]  Generator returned sat in 4.916758 secs.
[09/27 15:03:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:03:21]  Improved gap from 0.0 to 50.0
[09/27 15:03:21]  Improved number of small numbers from 51 to 114 out of a max of 114
[09/27 15:03:21]  Verifer returned sat in 1.517385 secs.
[09/27 15:03:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1091.453613   -1091.514160 -852.843506 -1091.453613  325.439209 -1091.514160    0.000000    0.060547      -99.939209       1.0         -1091.514160                -1.0            -1
1    -766.074951    -991.514160 -852.843506  -766.074951  325.439209  -991.514160    0.000000  225.439209      125.439453       1.0         -1091.514160                 0.0         False
2    -766.074951    -791.514404 -852.843506  -766.074951    0.060547  -791.514404    0.000000   25.439453       25.439453       2.0          -766.074951                 0.0         False
3    -766.014404    -766.014404 -828.343506  -766.014404   25.500000  -766.014404    0.000000    0.000000      -50.000000       1.0          -766.074951                 1.0         False
4    -716.014404    -716.014404 -778.343506  -716.014404   50.000000  -716.014404    0.000000    0.000000      -50.000000       1.0          -766.074951                 0.0         False
5    -617.014404    -617.014404 -777.343750  -617.014404   99.000000  -617.014404    0.000000    0.000000      -50.000244       1.0          -766.074951                 0.0         False
6    -420.014404    -567.014160 -777.343750  -420.014404  197.000000  -567.014160    0.000000  146.999756       46.999756       1.0          -766.074951                 0.0         False
7    -174.014160    -419.953613 -777.343750  -174.014160  393.000000  -419.953613    0.000000  245.939453      193.000000       1.0          -766.074951                 0.0         False
8     365.046387    -267.014404 -777.343750   365.046387  785.000000  -267.014404  432.060547  200.000244      200.000000       2.0          -766.074951                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=221215/512, 
.[0m
[09/27 15:03:22]  --------------------------------------------------------------------------------
[09/27 15:03:22]  Iteration: 30 (0 solution, 29 counterexamples)
[09/27 15:03:24]  Generator returned sat in 0.933213 secs.
[09/27 15:03:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:03:24]  Improved gap from 0.0 to 100
[09/27 15:03:24]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:03:24]  Verifer returned sat in 0.410880 secs.
[09/27 15:03:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1121.710693   -1161.074951 -688.313232 -1121.710693    0.030273 -1161.074951   0.000000   39.364258       34.333984       2.0         -1161.074951                -1.0            -1
1    -856.074951   -1121.680420 -688.313232  -856.074951  305.000000 -1121.680420   0.000000  265.605469      199.969727       1.0         -1161.074951                 0.0         False
2    -766.074951    -956.044678 -688.313232  -766.074951  355.605469  -956.044678   0.000000  189.969727      189.969727       2.0         -1161.074951                 0.0         False
3    -651.014404    -856.044678 -688.313232  -651.014404  305.030273  -856.044678   5.030273  200.000000      200.000000       2.0          -656.044678                 0.0         False
4    -545.984131    -766.044678 -688.313232  -545.984131  305.030273  -766.044678  10.060547  210.000000      200.000000       2.0          -656.044678                 0.0         False
5    -425.651123    -666.135498 -688.313232  -425.651123  330.333008  -666.135498  30.393555  210.090820      200.000000       3.0          -656.044678                 0.0         False
6    -325.620850    -556.044678 -688.313232  -325.620850  310.121094  -556.044678  30.423828  200.000000      200.000000       3.0          -356.044678                 0.0         False
7    -220.560303    -461.044678 -688.313232  -220.560303  305.060547  -461.044678  35.484375  205.000000      200.000000       3.0          -256.044678                 0.0         False
8    -120.530029    -456.014404 -688.313232  -120.530029  305.030273  -456.014404  35.514648  299.969727      200.000000       3.0          -156.044678                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=26065/1024, 
.[0m
[09/27 15:03:25]  --------------------------------------------------------------------------------
[09/27 15:03:25]  Iteration: 31 (0 solution, 30 counterexamples)
[09/27 15:03:32]  Generator returned sat in 5.611821 secs.
[09/27 15:03:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:03:32]  Improved gap from 0.0 to 7.8125
[09/27 15:03:33]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:03:33]  Verifer returned sat in 1.127353 secs.
[09/27 15:03:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3173.061768   -3272.970703  1428.612549 -3173.061768  100.000000 -3272.970703        0.0   99.908936       99.908936       1.0         -3272.970703                -1.0            -1
1   -3172.970703   -3173.031250  1428.612549 -3172.970703  100.000000 -3173.031250        0.0    0.060547        0.000000       1.0         -3272.970703                 0.0         False
2   -3172.970703   -3172.970703  1470.769775 -3172.970703    0.030273 -3172.970703        0.0    0.000000      -57.842773       2.0         -3172.970703                 0.0         False
3   -2922.970703   -3047.940430  1470.769775 -2922.970703  250.000000 -3047.940430        0.0  124.969727       92.157227       1.0         -3172.970703                 1.0         False
4   -2922.940430   -2922.940674  1470.769775 -2922.940430  125.000000 -2922.940674        0.0    0.000244       -7.812500       1.0         -2922.940430                 0.0         False
5   -2860.440674   -2860.440674  1508.270020 -2860.440674   62.500000 -2860.440674        0.0    0.000000       -7.812500       1.0         -2860.440674                 0.0         False
6   -2829.190674   -2829.190674  1577.020020 -2829.190674   31.250000 -2829.190674        0.0    0.000000       -7.812500       1.0         -2829.190674                 0.0         False
7   -2813.565674   -2813.565674  1661.395020 -2813.565674   15.625000 -2813.565674        0.0    0.000000       -7.812500       1.0         -2813.565674                 0.0         False
8   -2805.753174   -2805.753174  1753.582275 -2805.753174    7.812500 -2805.753174        0.0    0.000000       -7.812744       1.0         -2805.753174                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:03:33]  --------------------------------------------------------------------------------
[09/27 15:03:33]  Iteration: 32 (0 solution, 31 counterexamples)
[09/27 15:03:35]  Generator returned sat in 0.278924 secs.
[09/27 15:03:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:03:36]  Improved gap from 6.8125 to 6.25
[09/27 15:03:36]  Improved number of small numbers from 55 to 114 out of a max of 114
[09/27 15:03:36]  Verifer returned sat in 1.720185 secs.
[09/27 15:03:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3874.409912   -4136.591064  1466.642822 -3874.409912    0.060303 -4136.591064        0.0  262.181152      162.181152       1.0         -4136.591064                -1.0            -1
1   -3874.409912   -3998.712158  1466.642822 -3874.409912  262.120605 -3998.712158        0.0  124.302246       62.181152       2.0         -4136.591064                 0.0         False
2   -3736.651611   -3898.651611  1466.642822 -3736.651611  262.060547 -3898.651611        0.0  162.000000       99.939453       3.0         -3736.651611                 1.0          True
3   -3636.651611   -3736.591309  1466.642822 -3636.651611  262.000000 -3736.591309        0.0   99.939697       99.939453       1.0         -3636.651611                 1.0         False
4   -3606.591309   -3636.591064  1466.642822 -3606.591309  130.000000 -3636.591064        0.0   29.999756       29.999756       1.0         -3606.591309                 0.0         False
5   -3572.591064   -3572.591064  1471.643066 -3572.591064   64.000000 -3572.591064        0.0    0.000000      -30.999756       1.0         -3572.591064                 0.0         False
6   -3541.591064   -3541.591064  1565.392822 -3541.591064   31.000000 -3541.591064        0.0    0.000000       -6.250000       1.0         -3541.591064                 0.0         False
7   -3527.091064   -3527.091064  1650.892822 -3527.091064   14.500000 -3527.091064        0.0    0.000000       -6.250000       1.0         -3527.091064                 0.0         False
8   -3520.841064   -3520.841064  1650.892822 -3520.841064    6.250000 -3520.841064        0.0    0.000000     -100.000000       1.0         -3520.841064                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:03:37]  --------------------------------------------------------------------------------
[09/27 15:03:37]  Iteration: 33 (0 solution, 32 counterexamples)
[09/27 15:03:38]  Generator returned sat in 0.399857 secs.
[09/27 15:03:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:03:39]  Improved gap from 0.0 to 60.9375
[09/27 15:03:39]  Improved number of small numbers from 65 to 114 out of a max of 114
[09/27 15:03:39]  Verifer returned sat in 0.739248 secs.
[09/27 15:03:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3759.126221   -3759.141357  1089.193115 -3759.126221    0.060303 -3759.141357        0.0    0.015137      -99.984619       1.0         -3759.141357                -1.0            -1
1   -3459.126465   -3559.141602  1089.193115 -3459.126465  300.014893 -3559.141602        0.0  100.015137      100.015137       1.0         -3759.141357                 0.0         False
2   -3459.126465   -3459.141602  1089.193115 -3459.126465    0.015137 -3459.141602        0.0    0.015137        0.015137       2.0         -3459.126465                 0.0         False
3   -3393.204102   -3424.079102  1089.193115 -3393.204102   65.937500 -3424.079102        0.0   30.875000      -34.062500       1.0         -3459.126465                 1.0         False
4   -3359.141602   -3359.141602  1128.255615 -3359.141602   64.937500 -3359.141602        0.0    0.000000      -60.937500       1.0         -3359.141602                 0.0         False
5   -3295.204102   -3295.204102  1164.318115 -3295.204102   63.937500 -3295.204102        0.0    0.000000      -60.937500       1.0         -3295.204102                 0.0         False
6   -3232.266602   -3232.266602  1201.380615 -3232.266602   62.937500 -3232.266602        0.0    0.000000      -60.937500       1.0         -3232.266602                 0.0         False
7   -3170.329102   -3170.329102  1239.443115 -3170.329102   61.937500 -3170.329102        0.0    0.000000      -60.937500       1.0         -3170.329102                 0.0         False
8   -3109.391602   -3109.391602  1239.443125 -3109.391602   60.937500 -3109.391602        0.0    0.000000      -99.999990       1.0         -3109.391602                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:03:40]  --------------------------------------------------------------------------------
[09/27 15:03:40]  Iteration: 34 (0 solution, 33 counterexamples)
[09/27 15:03:44]  Generator returned sat in 3.005314 secs.
[09/27 15:03:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:03:44]  Improved gap from 0.0 to 100
[09/27 15:03:45]  Improved number of small numbers from 60 to 110 out of a max of 114
[09/27 15:03:45]  Verifer returned sat in 1.015253 secs.
[09/27 15:03:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3690.186035   -3890.183838  1320.235107 -3690.186035    0.001465 -3890.183838    0.000000  199.997803      199.997803       1.0         -3890.183838                -1.0            -1
1   -3690.185059   -3790.183838  1320.235107 -3690.185059  199.998779 -3790.183838    0.000000   99.998779       99.998779       2.0         -3890.183838                 0.0         False
2   -3590.185059   -3690.183838  1320.235107 -3590.185059  199.998779 -3690.183838    0.000000   99.998779       99.998779       1.0         -3890.183838                 1.0          True
3   -3590.185059   -3590.193682  1320.235107 -3590.185059    0.001250 -3590.193682    0.000000    0.008623       -0.001221       2.0         -3590.185059                 0.0         False
4   -3590.183682   -3590.183838  1320.235107 -3590.183682    0.010000 -3590.183838    0.000000    0.000156      -99.999844       1.0         -3590.185059                 1.0         False
5   -3191.183838   -3423.183350  1320.235107 -3191.183838  399.000000 -3423.183350    0.000000  231.999512      199.000000       1.0         -3590.185059                 0.0         False
6   -2890.182373   -3390.183594  1320.235107 -2890.182373  533.000977 -3390.183594  200.001465  299.999756      200.000000       2.0         -3590.185059                 0.0         False
7   -2890.182373   -3290.183594  1320.235107 -2890.182373  267.500488 -3290.183594  200.001465  199.999756      100.000000       3.0         -3090.183838                 1.0          True
8   -2890.182373   -3190.183838  1320.235107 -2890.182373    0.010000 -3190.183838  200.001465  100.000000        0.000000       3.0         -3090.183838                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409603/2048, 
.[0m
[09/27 15:03:45]  --------------------------------------------------------------------------------
[09/27 15:03:45]  Iteration: 35 (0 solution, 34 counterexamples)
[09/27 15:03:53]  Generator returned sat in 6.823104 secs.
[09/27 15:03:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:03:54]  Improved gap from 0.0 to 14.0625
[09/27 15:03:55]  Improved number of small numbers from 58 to 114 out of a max of 114
[09/27 15:03:55]  Verifer returned sat in 1.274608 secs.
[09/27 15:03:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3590.194824   -3590.225342  1320.235107 -3590.194824    0.030273 -3590.225342        0.0    0.030518        0.030518       1.0         -3590.225342                -1.0            -1
1   -3390.255371   -3590.165039  1320.235107 -3390.255371  199.969971 -3590.165039        0.0  199.909668       99.969971       1.0         -3590.225342                 0.0         False
2   -3238.209961   -3390.225342  1320.235107 -3238.209961  351.955078 -3390.225342        0.0  152.015381      152.015381       1.0         -3590.225342                 0.0         False
3   -3238.209961   -3295.195068  1320.235107 -3238.209961  151.984863 -3295.195068        0.0   56.985107       52.015381       2.0         -3238.209961                 0.0         False
4   -2990.225342   -3190.225342  1320.235107 -2990.225342  304.969727 -3190.225342        0.0  200.000000      200.000000       1.0         -3238.209961                 1.0         False
5   -2990.225342   -3090.225342  1320.235107 -2990.225342    1.000000 -3090.225342        0.0  100.000000      100.000000       2.0         -2990.225342                 0.0         False
6   -2990.225342   -3090.195068  1320.235107 -2990.225342    3.000000 -3090.195068        0.0   99.969727        0.000000       3.0         -2990.225342                 1.0         False
7   -2990.225342   -2990.225342  1406.172363 -2990.225342    7.000000 -2990.225342        0.0    0.000000      -14.062744       4.0         -2990.225342                 1.0         False
8   -2975.225342   -2975.225342  1406.172607 -2975.225342   15.000000 -2975.225342        0.0    0.000000      -99.062500       1.0         -2990.225342                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:03:55]  --------------------------------------------------------------------------------
[09/27 15:03:55]  Iteration: 36 (0 solution, 35 counterexamples)
[09/27 15:03:58]  Generator returned sat in 1.975609 secs.
[09/27 15:03:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:04:00]  Improved gap from 0.0 to 18.75
[09/27 15:04:00]  Improved number of small numbers from 62 to 92 out of a max of 114
[09/27 15:04:00]  Verifer returned sat in 1.960602 secs.
[09/27 15:04:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6505.860352   -6505.890625  1326.142334 -6505.860352    0.030029 -6505.890625    0.000000    0.030273        0.030029       1.0         -6505.890625                -1.0            -1
1   -6205.890625   -6505.830322  1326.142334 -6205.890625  300.000000 -6505.830322    0.000000  299.939697      199.999756       1.0         -6505.890625                 0.0         False
2   -6205.890625   -6405.890381  1326.142334 -6205.890625    0.029785 -6405.890381    0.000000  199.999756       99.999756       2.0         -6205.890625                 0.0         False
3   -5520.010498   -6205.890381  1326.142334 -5520.010498  885.879883 -6205.890381  485.879883  200.000000      200.000000       1.0         -6205.890625                 1.0         False
4   -5278.070557   -6124.640493  1326.142334 -5278.070557  441.939941 -6124.640493  627.819824  218.750112      200.000000       2.0         -5905.890381                 0.0         False
5   -5276.850698   -6015.685303  1326.142334 -5276.850698  219.969971 -6015.685303  627.819824  111.014780      101.219858       3.0         -5904.670522                 1.0         False
6   -5276.850698   -5961.192871  1326.142334 -5276.850698  110.984985 -5961.192871  627.819824   56.522349        1.219858       3.0         -5904.670522                 1.0         False
7   -5276.850698   -5904.670522  1406.172363 -5276.850698   56.492493 -5904.670522  627.819824    0.000000      -18.750112       3.0         -5904.670522                 1.0         False
8   -5247.604452   -5885.920410  1406.172363 -5247.604452   29.246246 -5885.920410  627.819824   10.496134      -89.503866       1.0         -5875.424276                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:04:01]  --------------------------------------------------------------------------------
[09/27 15:04:01]  Iteration: 37 (0 solution, 36 counterexamples)
[09/27 15:04:03]  Generator returned sat in 0.436395 secs.
[09/27 15:04:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:04:03]  Improved gap from 0.0 to 18.75
[09/27 15:04:04]  Improved number of small numbers from 84 to 94 out of a max of 114
[09/27 15:04:04]  Verifer returned sat in 1.236756 secs.
[09/27 15:04:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5825.531006   -6025.590576  1326.14209 -5825.531006    0.060059 -6025.590576    0.000000  200.059570      199.999756       9.0         -6025.590576                -1.0            -1
1   -5825.531006   -6025.530762  1326.14209 -5825.531006  200.000000 -6025.530762    0.000000  199.999756       99.999756       2.0         -6025.590576                 1.0         False
2   -5825.531006   -5825.590698  1326.14209 -5825.531006  199.940186 -5825.590698    0.000000    0.059692       -0.000244       3.0         -5825.531006                 1.0          True
3   -5225.470825   -5725.530762  1326.14209 -5225.470825  600.119873 -5725.530762  300.059937  200.000000      200.000000       1.0         -5825.531006                 1.0         False
4   -5125.410889   -5625.530762  1326.14209 -5125.410889  300.059937 -5625.530762  300.119873  200.000000      200.000000       2.0         -5425.530762                 0.0         False
5   -5125.410889   -5525.531006  1326.14209 -5125.410889  150.029968 -5525.531006  300.119873  100.000244      100.000000       3.0         -5425.530762                 1.0         False
6   -5125.410889   -5464.598145  1326.14209 -5125.410889   76.014984 -5464.598145  300.119873   39.067383        0.000000       3.0         -5425.530762                 1.0         False
7   -5125.410889   -5425.530762  1407.39209 -5125.410889   39.007492 -5425.530762  300.119873    0.000000      -18.750000       4.0         -5425.530762                 1.0         False
8   -5104.907143   -5406.780762  1407.39209 -5104.907143   20.503746 -5406.780762  300.119873    1.753746      -98.246254       1.0         -5405.027016                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:04:04]  --------------------------------------------------------------------------------
[09/27 15:04:04]  Iteration: 38 (0 solution, 37 counterexamples)
[09/27 15:04:06]  Generator returned sat in 0.429213 secs.
[09/27 15:04:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:04:07]  Improved gap from 18.75 to 18.75
[09/27 15:04:08]  Improved number of small numbers from 53 to 77 out of a max of 114
[09/27 15:04:08]  Verifer returned sat in 1.959101 secs.
[09/27 15:04:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7965.014893   -8266.984619  1326.14209 -7965.014893    0.059814 -8266.984619    1.969971  299.999756      199.999836       5.0         -8266.984619                -1.0            -1
1   -7965.014893   -8166.984619  1326.14209 -7965.014893    0.059814 -8166.984619    1.969971  199.999756       99.999836       5.0         -8266.984619                 1.0         False
2   -7965.014893   -7967.014607  1326.14209 -7965.014893    0.030029 -7967.014607    1.969971    0.029744       -0.000164       4.0         -7966.984863                 1.0          True
3   -7366.984822   -7866.984700  1326.14209 -7366.984822  598.059814 -7866.984700  299.999878  200.000000      200.000000       1.0         -7966.984863                 1.0         False
4   -7266.954915   -7766.984863  1326.14209 -7266.954915  300.029907 -7766.984863  300.029785  200.000164      200.000000       2.0         -7566.984700                 0.0         False
5   -7266.954915   -7666.984863  1326.14209 -7266.954915  151.014954 -7666.984863  300.029785  100.000164      100.000000       3.0         -7566.984700                 1.0         False
6   -7266.954915   -7666.954590  1326.14209 -7266.954915   76.507477 -7666.954590  300.029785   99.969890        0.000000       3.0         -7566.984700                 1.0         False
7   -7266.954915   -7566.984700  1407.39209 -7266.954915   39.253738 -7566.984700  300.029785    0.000000      -18.750000       4.0         -7566.984700                 1.0         False
8   -7246.328045   -7548.234619  1407.39209 -7246.328045   20.626869 -7548.234619  300.029785    1.876789      -98.123131       1.0         -7546.357831                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:04:09]  --------------------------------------------------------------------------------
[09/27 15:04:09]  Iteration: 39 (0 solution, 38 counterexamples)
[09/27 15:04:13]  Generator returned sat in 2.693496 secs.
[09/27 15:04:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:04:14]  Improved gap from 0.0 to 50.0
[09/27 15:04:14]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/27 15:04:14]  Verifer returned sat in 1.630373 secs.
[09/27 15:04:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7517.044434   -7628.775146  778.082275 -7517.044434    0.029785 -7628.775146   1.969971  109.760742       99.910400       5.0         -7628.775146                -1.0            -1
1   -7516.954834   -7518.984863  778.082275 -7516.954834  109.850342 -7518.984863   1.969971    0.060059        0.000000       1.0         -7628.775146                 0.0         False
2   -7516.954834   -7518.924805  828.082275 -7516.954834    0.030029 -7518.924805   1.969971    0.000000      -50.000000       2.0         -7518.924805                 0.0         False
3   -7266.954834   -7388.894775  828.082275 -7266.954834  250.000000 -7388.894775   1.969971  119.969971      100.000000       1.0         -7518.924805                 0.0         False
4   -7266.954834   -7352.297852  828.082275 -7266.954834  119.940186 -7352.297852   1.969971   83.373047        0.000000       2.0         -7268.924805                 0.0         False
5   -7266.954834   -7268.924805  878.082275 -7266.954834   83.343506 -7268.924805   1.969971    0.000000      -50.000000       3.0         -7268.924805                 0.0         False
6   -7141.954834   -7208.914795  878.082275 -7141.954834  125.000000 -7208.914795   1.969971   64.989990      -25.000000       1.0         -7268.924805                 0.0         False
7   -7116.954834   -7118.924805  928.082275 -7116.954834   89.989990 -7118.924805   1.969971    0.000000      -50.000000       1.0         -7118.924805                 0.0         False
8   -7000.268311   -7068.924805  928.082275 -7000.268311  116.686523 -7068.924805   1.969971   66.686523      -33.313477       1.0         -7118.924805                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:04:15]  --------------------------------------------------------------------------------
[09/27 15:04:15]  Iteration: 40 (0 solution, 39 counterexamples)
[09/27 15:04:20]  Generator returned sat in 4.130871 secs.
[09/27 15:04:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:04:21]  Improved gap from 0.0 to 100
[09/27 15:04:22]  Improved number of small numbers from 68 to 83 out of a max of 114
[09/27 15:04:22]  Verifer returned sat in 1.358058 secs.
[09/27 15:04:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8099.230225   -8266.559570  878.082275 -8099.230225    0.0025 -8266.559570     0.0000  167.329346      167.329225       3.0          -8266.55957                -1.0            -1
1   -8099.230225   -8166.559450  878.082275 -8099.230225    0.0025 -8166.559450     0.0000   67.329225       67.329225       4.0          -8266.55957                 1.0         False
2   -7967.569450   -8099.227783  878.082275 -7967.569450  198.9900 -8099.227783     0.0000  131.658333       98.990000       1.0          -8266.55957                 1.0          True
3   -7967.569450   -7967.571950  878.082275 -7967.569450    0.0100 -7967.571950     0.0000    0.002500       -1.010000       2.0          -7967.56945                 0.0         False
4   -7966.556950   -7966.559450  878.082275 -7966.556950    1.0150 -7966.559450     0.0000    0.002500      -99.997500       1.0          -7967.56945                 1.0         False
5   -7665.559450   -7766.559450  878.082275 -7665.559450  301.0000 -7766.559450     0.0000  101.000000      101.000000       1.0          -7967.56945                 0.0         False
6   -7266.556950   -7766.559326  878.082275 -7266.556950  500.0025 -7766.559326   200.0025  299.999876      200.000000       2.0          -7967.56945                 0.0         False
7   -7266.556950   -7566.559570  878.082275 -7266.556950    0.0100 -7566.559570   200.0025  100.000121      100.000000       2.0          -7466.55945                 1.0          True
8   -7266.556950   -7566.557129  878.082275 -7266.556950    1.0150 -7566.557129   200.0025   99.997679        0.000000       3.0          -7466.55945                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=80001/400, 
.[0m
[09/27 15:04:22]  --------------------------------------------------------------------------------
[09/27 15:04:22]  Iteration: 41 (0 solution, 40 counterexamples)
[09/27 15:04:31]  Generator returned sat in 7.909813 secs.
[09/27 15:04:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:04:32]  Improved gap from 0.0 to 100
[09/27 15:04:32]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 15:04:32]  Verifer returned sat in 0.857134 secs.
[09/27 15:04:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8060.289062   -8066.616699  681.07959 -8060.289062    0.029541 -8066.616699   0.000000    6.327637        6.327393       3.0         -8066.616699                -1.0            -1
1   -8060.289062   -8060.318604  681.07959 -8060.289062    0.029785 -8060.318604   0.000000    0.029541      -93.672607       3.0         -8066.616699                 1.0         False
2   -7666.586914   -7966.616455  681.07959 -7666.586914  393.731689 -7966.616455   0.029541  300.000000      200.000000       1.0         -8066.616699                 1.0          True
3   -7666.586914   -7768.705811  681.07959 -7666.586914  299.969971 -7768.705811   0.029541  102.089355      100.000000       2.0         -7666.616455                 0.0         False
4   -7468.735840   -7766.616455  681.07959 -7468.735840  299.940430 -7766.616455   0.029541  297.851074      197.851074       3.0         -7468.765381                 1.0         False
5   -7468.735840   -7599.870361  681.07959 -7468.735840  297.821289 -7599.870361   0.029541  131.104980       97.851074       2.0         -7468.765381                 1.0         False
6   -7266.557129   -7466.616455  681.07959 -7266.557129  333.283691 -7466.616455   0.059326  200.000000      200.000000       1.0         -7468.765381                 1.0         False
7   -7134.273438   -7366.616455  681.07959 -7134.273438  332.283691 -7366.616455  32.343018  200.000000      200.000000       2.0         -7166.616455                 0.0         False
8   -7002.989746   -7366.586670  681.07959 -7002.989746  331.283691 -7366.586670  63.626709  299.970215      200.000000       3.0         -7066.616455                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=130247/2048, 
.[0m
[09/27 15:04:33]  --------------------------------------------------------------------------------
[09/27 15:04:33]  Iteration: 42 (0 solution, 41 counterexamples)
[09/27 15:04:55]  Generator returned sat in 21.113669 secs.
[09/27 15:04:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:04:56]  Improved gap from 0.0 to 100
[09/27 15:04:57]  Improved number of small numbers from 66 to 78 out of a max of 114
[09/27 15:04:57]  Verifer returned sat in 1.107305 secs.
[09/27 15:04:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7866.646240   -8066.616699  681.07959 -7866.646240     0.029541 -8066.616699     0.000000  199.970459      199.970459       2.0         -8066.616699                -1.0            -1
1   -7866.631592   -8066.616699  681.07959 -7866.631592   199.985107 -8066.616699     0.000000  199.985107       99.985107       2.0         -8066.616699                 0.0         False
2   -7666.631348   -7866.616699  681.07959 -7666.631348   399.985352 -7866.616699     0.000000  199.985352      199.985352       1.0         -8066.616699                 0.0         False
3   -7666.631348   -7864.631470  681.07959 -7666.631348    47.025848 -7864.631470     0.000000  198.000122       99.985352       2.0         -7666.631348                 0.0         False
4   -7466.601929   -7666.616699  681.07959 -7466.601929   398.029541 -7666.616699     0.014771  200.000000      200.000000       1.0         -7666.631348                 0.0         False
5   -7466.587158   -7601.989421  681.07959 -7466.587158   200.014771 -7601.989421     0.014771  135.387492      100.014771       2.0         -7466.601929                 0.0         False
6   -6804.004191   -7566.616699  681.07959 -6804.004191   797.970459 -7566.616699   462.612508  300.000000      200.000000       3.0         -7466.601929                 0.0         False
7   -6704.018962   -7366.616699  681.07959 -6704.018962   399.985229 -7366.616699   462.612508  199.985229      199.985229       2.0         -7166.631470                 1.0         False
8   -5653.033732   -7366.616699  681.07959 -5653.033732  1250.970459 -7366.616699  1413.582967  300.000000      200.000000       2.0         -7166.631470                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=8684963/6144, 
.[0m
[09/27 15:04:57]  --------------------------------------------------------------------------------
[09/27 15:04:57]  Iteration: 43 (0 solution, 42 counterexamples)
[09/27 15:05:03]  Generator returned sat in 4.301718 secs.
[09/27 15:05:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:05:03]  Improved gap from 0.0 to 100
[09/27 15:05:04]  Improved number of small numbers from 39 to 68 out of a max of 114
[09/27 15:05:04]  Verifer returned sat in 1.414149 secs.
[09/27 15:05:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6403.048340   -6403.107910 -532.325033 -6403.048340  267.766357 -6403.107910    0.000000    0.059570      -99.940428       3.0         -6403.107910                -1.0            -1
1   -6135.400879   -6303.107910 -532.325033 -6135.400879  267.707031 -6303.107910    0.000000  167.707031       67.707033       1.0         -6135.400879                 1.0         False
2   -6035.460205   -6103.107912 -532.325033 -6035.460205  267.647705 -6103.107912    0.000000   67.647707       67.647707       1.0         -6035.460205                 0.0         False
3   -6035.460205   -6103.107912 -532.325033 -6035.460205   67.588075 -6103.107912    0.000000   67.647707      -32.352293       1.0         -6035.460205                 0.0         False
4   -6002.725798   -6003.107912 -532.325033 -6002.725798  100.382113 -6003.107912    0.000000    0.382113      -99.617887       1.0         -6035.460205                 0.0         False
5   -5853.534742   -5903.107912 -532.325033 -5853.534742  149.573170 -5903.107912    0.000000   49.573170      -50.426830       1.0         -6035.460205                 0.0         False
6   -5679.748157   -5803.107912 -532.325033 -5679.748157  223.359755 -5803.107912    0.000000  123.359755       23.359755       1.0         -6035.460205                 0.0         False
7   -5469.068280   -5603.107912 -532.325033 -5469.068280  334.039632 -5603.107912    0.000000  134.039632      134.039632       1.0         -6035.460205                 0.0         False
8   -5103.048463   -5503.108154 -532.325033 -5103.048463  500.059448 -5503.108154  200.059448  200.000243      200.000000       2.0         -6035.460205                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638887/8192, 
.[0m
[09/27 15:05:05]  --------------------------------------------------------------------------------
[09/27 15:05:05]  Iteration: 44 (0 solution, 43 counterexamples)
[09/27 15:05:14]  Generator returned sat in 7.924099 secs.
[09/27 15:05:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:05:15]  Improved number of small numbers from 48 to 65 out of a max of 113
[09/27 15:05:15]  Verifer returned sat in 1.124265 secs.
[09/27 15:05:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6290.394775   -6490.394775 -532.325033 -6290.394775  199.940674 -6490.394775    0.000000  200.000000      199.999766       3.0         -6490.394775                -1.0            -1
1   -6290.394775   -6390.394541 -532.325033 -6290.394775  199.940674 -6390.394541    0.000000   99.999766       99.999766       2.0         -6490.394775                 1.0         False
2   -6090.335215   -6390.394531 -532.325033 -6090.335215  300.059326 -6390.394531    0.059326  299.999990      200.000000       3.0         -6490.394775                 1.0          True
3   -6090.335215   -6190.394775 -532.325033 -6090.335215   67.372884 -6190.394775    0.059326  100.000234      100.000000       2.0         -6090.394541                 1.0          True
4   -6090.276123   -6090.394541 -532.325033 -6090.276123  100.059326 -6090.394541    0.059326    0.059092        0.059092       3.0         -6090.394541                 1.0         False
5   -5941.246226   -6090.394541 -532.325033 -5941.246226  149.088989 -6090.394541    0.059326  149.088989       49.088989       3.0         -6090.394541                 1.0         False
6   -5867.701731   -5990.394541 -532.325033 -5867.701731  222.633484 -5990.394541    0.059326  122.633484       22.633484       2.0         -6090.394541                 1.0         False
7   -5657.384989   -5867.701731 -532.325033 -5657.384989  332.950226 -5867.701731    0.059326  210.257416      132.950226       1.0         -6090.394541                 1.0          True
8   -5200.741953   -5690.394775 -532.325033 -5200.741953  666.900452 -5690.394775  289.652588  200.000234      200.000000       2.0         -6090.394541                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=593087/2048, 
.[0m
[09/27 15:05:16]  --------------------------------------------------------------------------------
[09/27 15:05:16]  Iteration: 45 (0 solution, 44 counterexamples)
[09/27 15:05:31]  Generator returned sat in 13.664306 secs.
[09/27 15:05:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:05:31]  Improved gap from 0.0 to 100
[09/27 15:05:32]  Improved number of small numbers from 68 to 106 out of a max of 114
[09/27 15:05:32]  Verifer returned sat in 1.104726 secs.
[09/27 15:05:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6490.394775   -6490.396240 -532.324951 -6490.394775    0.001709 -6490.396240    0.000000    0.001465        0.000000       4.0         -6490.396240                -1.0            -1
1   -6190.396240   -6490.394531 -532.324951 -6190.396240  300.000000 -6490.394531    0.000000  299.998291      199.998535       1.0         -6490.396240                 1.0         False
2   -6190.396240   -6390.394775 -532.324951 -6190.396240    0.013184 -6390.394775    0.000000  199.998535       99.998535       2.0         -6190.396240                 0.0         False
3   -6190.396240   -6190.397865 -532.324951 -6190.396240    0.011719 -6190.397865    0.000000    0.001624       -0.001465       3.0         -6190.396240                 1.0         False
4   -6190.387865   -6190.389648 -532.324951 -6190.387865    0.010000 -6190.389648    0.000000    0.001784      -99.993089       1.0         -6190.387865                 1.0         False
5   -5891.384766   -6054.733643 -532.324951 -5891.384766  299.004883 -6054.733643    0.000000  163.348877       99.010010       1.0         -6190.387865                 0.0         False
6   -5720.072510   -5891.384766 -532.324951 -5720.072510  334.661133 -5891.384766    0.000000  171.312256      170.322266       2.0         -6190.387865                 0.0         False
7   -5390.393066   -5790.394775 -532.324951 -5390.393066  500.991699 -5790.394775  200.001709  200.000000      200.000000       2.0         -6190.387865                 1.0          True
8   -5390.393066   -5720.070801 -532.324951 -5390.393066    0.010000 -5720.070801  200.001709  129.676025      100.000000       2.0         -5590.394775                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819207/4096, 
.[0m
[09/27 15:05:33]  --------------------------------------------------------------------------------
[09/27 15:05:33]  Iteration: 46 (0 solution, 45 counterexamples)
[09/27 15:05:41]  Generator returned sat in 6.684952 secs.
[09/27 15:05:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:05:41]  Improved gap from 0.0 to 100
[09/27 15:05:42]  Improved number of small numbers from 68 to 96 out of a max of 114
[09/27 15:05:42]  Verifer returned sat in 1.046342 secs.
[09/27 15:05:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6155.409912   -6255.411377 -532.325195 -6155.409912    0.001709 -6255.411377        0.0  100.001465       99.999756       1.0         -6255.411377                -1.0            -1
1   -6155.409668   -6155.409668 -532.325195 -6155.409668  100.001709 -6155.409668        0.0    0.000000        0.000000       1.0         -6255.411377                 0.0         False
2   -6055.409668   -6055.411420 -532.325195 -6055.409668  100.000000 -6055.411420        0.0    0.001752        0.000000       1.0         -6055.409668                 0.0         False
3   -5855.403087   -6055.409668 -532.325195 -5855.403087  200.008333 -6055.409668        0.0  200.006581      100.006581       2.0         -6055.409668                 0.0         False
4   -5855.403087   -5855.409754 -532.325195 -5855.403087    0.010000 -5855.409754        0.0    0.006667        0.006581       2.0         -5855.403087                 1.0         False
5   -5855.399754   -5855.401420 -532.325195 -5855.399754    0.010000 -5855.401420        0.0    0.001667      -99.990086       1.0         -5855.403087                 1.0         False
6   -5554.386420   -5655.409668 -532.325195 -5554.386420  301.015000 -5655.409668        0.0  101.023248      101.023248       1.0         -5855.403087                 0.0         False
7   -5054.409668   -5655.407959 -532.325195 -5054.409668  601.000000 -5655.407959      301.0  299.998291      200.000000       2.0         -5855.403087                 0.0         False
8   -5054.409668   -5554.384521 -532.325195 -5054.409668    0.010000 -5554.384521      301.0  198.974854      100.000000       2.0         -5355.409668                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=301, 
.[0m
[09/27 15:05:43]  --------------------------------------------------------------------------------
[09/27 15:05:43]  Iteration: 47 (0 solution, 46 counterexamples)
[09/27 15:05:57]  Generator returned sat in 13.390037 secs.
[09/27 15:05:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:05:58]  Improved gap from 0.0 to 0
[09/27 15:05:58]  Improved number of small numbers from 90 to 114 out of a max of 114
[09/27 15:05:58]  Verifer returned sat in 0.417009 secs.
[09/27 15:05:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5058.498535   -5158.469238 -831.236084 -5058.498535  100.000000 -5158.469238        0.0  99.970703       99.970703       2.0         -5158.469238                -1.0            -1
1   -5058.498535   -5058.498535 -831.236084 -5058.498535   99.970459 -5058.498535        0.0   0.000000       -0.029297       2.0         -5058.498535                 0.0         False
2   -5058.439453   -5058.439453 -731.295654 -5058.439453    0.059082 -5058.439453        0.0   0.000000       -0.029785       1.0         -5058.439453                 0.0         False
3   -5058.409668   -5058.409668 -631.325195 -5058.409668    0.029785 -5058.409668        0.0   0.000000       -0.029541       1.0         -5058.409668                 0.0         False
4   -5057.409668   -5057.409668 -532.325195 -5057.409668    1.000000 -5057.409668        0.0   0.000000       -0.029541       1.0         -5058.409668                 0.0         False
5   -5056.409668   -5056.409668 -434.295410 -5056.409668    1.000000 -5056.409668        0.0   0.000000       -0.999756       1.0         -5058.409668                 0.0         False
6   -5055.409668   -5055.409668 -334.325439 -5055.409668    1.000000 -5055.409668        0.0   0.000000       -0.029785       1.0         -5058.409668                 0.0         False
7   -5054.409668   -5054.409668 -236.295410 -5054.409668    1.000000 -5054.409668        0.0   0.000000       -0.999756       1.0         -5058.409668                 0.0         False
8   -5053.409668   -5053.409668 -236.295410 -5053.409668    1.000000 -5053.409668        0.0   0.000000      -99.999756       1.0         -5058.409668                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:05:59]  --------------------------------------------------------------------------------
[09/27 15:05:59]  Iteration: 48 (0 solution, 47 counterexamples)
[09/27 15:06:11]  Generator returned sat in 11.494872 secs.
[09/27 15:06:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:06:12]  Improved number of small numbers from 63 to 69 out of a max of 113
[09/27 15:06:12]  Verifer returned sat in 0.831143 secs.
[09/27 15:06:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5058.557617   -5158.498779 -831.207031 -5058.557617  300.059082 -5158.498779    0.000000   99.941162       99.940918       2.0         -5158.498779                -1.0            -1
1   -4858.498779   -5058.498535 -831.207031 -4858.498779  300.000000 -5058.498535    0.000000  199.999756      199.999756       1.0         -4858.498779                 0.0         False
2   -4758.439331   -5058.439453 -831.207031 -4758.439331  300.059204 -5058.439453    0.059204  299.940918      200.000000       2.0         -4858.498779                 0.0         False
3   -4758.439331   -4858.498779 -831.207031 -4758.439331   24.058800 -4858.498779    0.059204  100.000244      100.000000       3.0         -4758.498535                 0.0         False
4   -4758.439331   -4858.498535 -831.207031 -4758.439331   49.117599 -4858.498535    0.059204  100.000000        0.000000       3.0         -4758.498535                 0.0         False
5   -4758.439331   -4758.498535 -831.207031 -4758.439331   99.235199 -4758.498535    0.059204    0.000000     -100.000000       4.0         -4758.498535                 0.0         False
6   -4558.968933   -4658.498535 -831.207031 -4558.968933  199.470398 -4658.498535    0.059204   99.470398       -0.529602       1.0         -4758.498535                 0.0         False
7   -4258.498535   -4558.498535 -831.207031 -4258.498535  399.940796 -4558.498535    0.059204  299.940796      199.940796       1.0         -4758.498535                 0.0         False
8   -3757.557739   -4458.498535 -831.207031 -3757.557739  800.881592 -4458.498535  400.940796  300.000000      200.000000       2.0         -4758.498535                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1642011/4096, 
.[0m
[09/27 15:06:13]  --------------------------------------------------------------------------------
[09/27 15:06:13]  Iteration: 49 (0 solution, 48 counterexamples)
[09/27 15:06:23]  Generator returned sat in 8.229631 secs.
[09/27 15:06:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:06:24]  Improved number of small numbers from 57 to 75 out of a max of 113
[09/27 15:06:24]  Verifer returned sat in 0.990629 secs.
[09/27 15:06:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4858.438232   -5158.437744 -931.267491 -4858.438232  300.059082 -5158.437744     0.0000  299.999512      199.999599       3.0         -5158.437744                -1.0            -1
1   -4858.438232   -5058.437831 -931.267491 -4858.438232  299.999000 -5058.437831     0.0000  199.999599       99.999599       3.0         -4858.438232                 1.0         False
2   -4758.439331   -4858.437988 -931.267491 -4758.439331  299.998500 -4858.437988     0.0000   99.998657       99.998500       1.0         -4758.439331                 1.0         False
3   -4758.439331   -4758.439831 -931.267491 -4758.439331    0.010000 -4758.439831     0.0000    0.000500       -0.001500       2.0         -4758.439331                 0.0         False
4   -4758.429831   -4758.430331 -931.267491 -4758.429831    0.010000 -4758.430331     0.0000    0.000500      -99.992000       1.0         -4758.439331                 1.0         False
5   -4158.400331   -4559.452831 -931.267491 -4158.400331  600.030000 -4559.452831   200.0375  201.015000      200.000000       1.0         -4758.439331                 0.0         False
6   -4058.400331   -4558.437744 -931.267491 -4058.400331  301.015000 -4558.437744   200.0375  299.999913      200.000000       2.0         -4258.437831                 0.0         False
7   -4058.400331   -4358.437988 -931.267491 -4058.400331    0.010000 -4358.437988   200.0375  100.000157      100.000000       3.0         -4258.437831                 1.0         False
8   -4058.400331   -4258.438477 -931.267491 -4058.400331    0.010000 -4258.438477   200.0375    0.000646        0.000000       3.0         -4258.437831                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=16003/80, 
.[0m
[09/27 15:06:24]  --------------------------------------------------------------------------------
[09/27 15:06:24]  Iteration: 50 (0 solution, 49 counterexamples)
[09/27 15:06:28]  Generator returned sat in 1.815373 secs.
[09/27 15:06:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:06:29]  Improved number of small numbers from 58 to 69 out of a max of 113
[09/27 15:06:29]  Verifer returned sat in 0.818072 secs.
[09/27 15:06:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4358.412155   -4858.441162 -931.267491 -4358.412155  300.058838 -4858.441162  200.030000  299.999007      199.999167       6.0         -4858.441162                -1.0            -1
1   -4358.412155   -4758.431738 -931.267491 -4358.412155  299.998535 -4758.431738  200.030000  199.989583       99.999167       2.0         -4558.442155                 1.0         False
2   -4258.410488   -4558.441406 -931.267491 -4258.410488  299.991250 -4558.441406  200.030000  100.000918      100.000833       1.0         -4458.440488                 1.0         False
3   -4258.410488   -4458.441322 -931.267491 -4258.410488    0.000833 -4458.441322  200.030000    0.000833        0.000833       2.0         -4458.440488                 0.0         False
4   -4258.401322   -4458.439655 -931.267491 -4258.401322    0.010000 -4458.439655  200.030000    0.008333      -99.990000       1.0         -4458.440488                 1.0         False
5   -3658.410488   -4258.441406 -931.267491 -3658.410488  599.999167 -4258.441406  400.030833  200.000085      200.000000       1.0         -4458.440488                 0.0         False
6   -3658.410488   -4258.440430 -931.267491 -3658.410488    0.010000 -4258.440430  400.030833  199.999108      100.000000       2.0         -4058.441322                 0.0         False
7   -3658.410488   -4058.441322 -931.267491 -3658.410488    0.010000 -4058.441322  400.030833    0.000000        0.000000       3.0         -4058.441322                 1.0         False
8   -3658.400488   -4058.441162 -931.267491 -3658.400488    0.010000 -4058.441162  400.030833    0.009840      -99.990000       1.0         -4058.441322                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=240001/1200, 
.[0m
[09/27 15:06:29]  --------------------------------------------------------------------------------
[09/27 15:06:29]  Iteration: 51 (0 solution, 50 counterexamples)
[09/27 15:06:33]  Generator returned sat in 2.289014 secs.
[09/27 15:06:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:06:33]  Improved gap from 0.0 to 100
[09/27 15:06:34]  Improved number of small numbers from 59 to 80 out of a max of 114
[09/27 15:06:34]  Verifer returned sat in 0.977053 secs.
[09/27 15:06:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4958.398438   -5158.399902 -931.267491 -4958.398438    0.000732 -5158.399902     0.0000  200.001465      100.001551       6.0         -5158.399902                -1.0            -1
1   -4958.398438   -4958.400146 -931.267491 -4958.398438  200.001250 -4958.400146     0.0000    0.001709        0.001551       3.0         -5158.399902                 1.0         False
2   -4658.409912   -4958.397738 -931.267491 -4658.409912  299.990234 -4958.397738     0.0000  299.987826      199.990076       1.0         -5158.399902                 1.0          True
3   -4658.409488   -4858.399902 -931.267491 -4658.409488  299.988250 -4858.399902     0.0000  199.990414       99.990500       2.0         -4658.409488                 0.0         False
4   -4658.409488   -4658.409988 -931.267491 -4658.409488    0.010000 -4658.409988     0.0000    0.000500       -0.009500       3.0         -4658.409488                 1.0         False
5   -4658.399988   -4658.399988 -931.267491 -4658.399988    0.010000 -4658.399988     0.0000    0.000000     -100.000000       1.0         -4658.409488                 1.0         False
6   -4058.399488   -4558.399902 -931.267491 -4058.399488  600.000500 -4558.399902   200.0005  299.999914      200.000000       1.0         -4658.409488                 0.0         False
7   -4058.399488   -4458.399902 -931.267491 -4058.399488    0.010000 -4458.399902   200.0005  199.999914      100.000000       2.0         -4258.399988                 0.0         False
8   -4058.399488   -4358.399902 -931.267491 -4058.399488    0.010000 -4358.399902   200.0005   99.999914        0.000000       3.0         -4258.399988                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=400001/2000, 
.[0m
[09/27 15:06:35]  --------------------------------------------------------------------------------
[09/27 15:06:35]  Iteration: 52 (0 solution, 51 counterexamples)
[09/27 15:06:45]  Generator returned sat in 8.677372 secs.
[09/27 15:06:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:06:46]  Improved gap from 0.0 to 51.5625
[09/27 15:06:47]  Improved number of small numbers from 57 to 66 out of a max of 114
[09/27 15:06:47]  Verifer returned sat in 2.004322 secs.
[09/27 15:06:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4434.836182   -4533.430608 -931.267491 -4434.836182    0.059082 -4533.430608        0.0   98.594426       98.594426       2.0         -4533.430608                -1.0            -1
1   -4434.777288   -4434.836370 -931.267491 -4434.777288   98.653320 -4434.836370        0.0    0.059082       -1.346680       2.0         -4533.430608                 0.0         False
2   -4433.430608   -4433.430608 -882.830078 -4433.430608    1.405762 -4433.430608        0.0    0.000000      -51.562587       1.0         -4433.430608                 0.0         False
3   -4181.101018   -4297.916936 -882.830078 -4181.101018  252.329590 -4297.916936        0.0  116.815918      100.767003       1.0         -4433.430608                 0.0         False
4   -4181.101018   -4265.052190 -882.830078 -4181.101018  116.756836 -4265.052190        0.0   83.951172        0.767003       2.0         -4181.101018                 0.0         False
5   -4181.101018   -4181.101018 -835.159581 -4181.101018   83.892090 -4181.101018        0.0    0.000000      -51.562500       3.0         -4181.101018                 0.0         False
6   -4055.936223   -4118.331324 -835.159581 -4055.936223  125.164795 -4118.331324        0.0   62.395101      -26.397705       1.0         -4181.101018                 0.0         False
7   -4029.538518   -4029.538518 -786.722168 -4029.538518   88.792806 -4029.538518        0.0    0.000000      -51.562587       1.0         -4029.538518                 0.0         False
8   -3912.781682   -3977.975830 -786.722168 -3912.781682  116.756836 -3977.975830        0.0   65.194148      -34.805751       1.0         -4029.538518                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:06:48]  --------------------------------------------------------------------------------
[09/27 15:06:48]  Iteration: 53 (0 solution, 52 counterexamples)
[09/27 15:06:52]  Generator returned sat in 2.657912 secs.
[09/27 15:06:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:06:53]  Improved gap from 0.0 to 3.125
[09/27 15:06:53]  Improved number of small numbers from 55 to 114 out of a max of 114
[09/27 15:06:53]  Verifer returned sat in 0.627755 secs.
[09/27 15:06:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5240.476807   -5437.292480 -127.405518 -5240.476807    0.058838 -5437.292480   0.000000  196.815674       96.815674       4.0         -5437.292480                -1.0            -1
1   -5240.417725   -5240.417725 -127.405518 -5240.417725  196.874756 -5240.417725   0.000000    0.000000       -3.125244       1.0         -5437.292480                 0.0         False
2   -4937.351562   -5237.292480 -127.405518 -4937.351562  303.066162 -5237.292480   0.000000  299.940918      199.940918       1.0         -5437.292480                 0.0         False
3   -4937.351562   -5037.292480 -127.405518 -4937.351562  299.881836 -5037.292480   0.000000   99.940918       99.940918       2.0         -4937.351562                 0.0         False
4   -4736.410645   -4937.292725 -127.405518 -4736.410645  300.881836 -4937.292725   0.881836  200.000244      200.000000       1.0         -4937.351562                 0.0         False
5   -4736.410645   -4840.417480 -127.405518 -4736.410645    1.000000 -4840.417480   0.881836  103.125000      100.000000       2.0         -4737.292480                 0.0         False
6   -4736.410645   -4740.351562 -127.405518 -4736.410645    2.000000 -4740.351562   0.881836    3.059082        0.000000       3.0         -4737.292480                 0.0         False
7   -4736.410645   -4737.292480  -30.530518 -4736.410645    3.000000 -4737.292480   0.881836    0.000000       -3.125000       4.0         -4737.292480                 0.0         False
8   -4732.410645   -4733.292480  -30.530518 -4732.410645    4.000000 -4733.292480   0.881836    0.000000      -99.125000       1.0         -4737.292480                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:06:54]  --------------------------------------------------------------------------------
[09/27 15:06:54]  Iteration: 54 (0 solution, 53 counterexamples)
[09/27 15:06:58]  Generator returned sat in 2.409122 secs.
[09/27 15:06:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:06:58]  Improved gap from 0.0 to 100
[09/27 15:06:58]  Improved number of small numbers from 46 to 114 out of a max of 114
[09/27 15:06:58]  Verifer returned sat in 0.463921 secs.
[09/27 15:06:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5837.381104   -6136.498535  569.675537 -5837.381104  299.117676 -6136.498535   0.000000  299.117432      199.117432       2.0         -6136.498535                -1.0            -1
1   -5837.381104   -6036.498535  569.675537 -5837.381104  299.088135 -6036.498535   0.000000  199.117432       99.117432       2.0         -5837.381104                 0.0         False
2   -5737.439941   -5837.351807  569.675537 -5737.439941  299.058594 -5837.351807   0.000000   99.911865       99.058594       1.0         -5737.439941                 0.0         False
3   -5538.322266   -5736.498779  569.675537 -5538.322266  299.029541 -5736.498779   0.000000  198.176514      198.176270       1.0         -5538.322266                 0.0         False
4   -5436.469238   -5636.498779  569.675537 -5436.469238  300.029541 -5636.498779   0.029297  200.000244      200.000000       2.0         -5538.322266                 0.0         False
5   -5337.439941   -5536.498535  569.675537 -5337.439941  299.029541 -5536.498535   0.029297  199.029297      199.029297       2.0         -5337.469238                 0.0         False
6   -5236.439697   -5536.498535  569.675537 -5236.439697  300.029541 -5536.498535   0.058838  300.000000      200.000000       2.0         -5337.469238                 0.0         False
7   -5236.439697   -5336.498779  569.675537 -5236.439697  299.029541 -5336.498779   0.058838  100.000244      100.000000       2.0         -5236.498535                 0.0         False
8   -5036.410400   -5336.498535  569.675537 -5036.410400  300.029541 -5336.498535   0.088135  300.000000      200.000000       3.0         -5236.498535                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=241/4096, 
.[0m
[09/27 15:06:59]  --------------------------------------------------------------------------------
[09/27 15:06:59]  Iteration: 55 (0 solution, 54 counterexamples)
[09/27 15:07:35]  Generator returned sat in 34.370266 secs.
[09/27 15:07:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:07:36]  Improved gap from 0.0 to 51.5625
[09/27 15:07:37]  Improved number of small numbers from 52 to 56 out of a max of 114
[09/27 15:07:37]  Verifer returned sat in 2.103570 secs.
[09/27 15:07:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5936.099121   -6034.748983  521.238037 -5936.099121   98.766846 -6034.748983        0.0   98.649862       98.649862       9.0         -6034.748983                -1.0            -1
1   -5936.040609   -5936.040609  521.238037 -5936.040609   98.708374 -5936.040609        0.0    0.000000       -1.291626       1.0         -5936.040609                 1.0         False
2   -5934.748983   -5934.748983  569.675293 -5934.748983    1.291626 -5934.748983        0.0    0.000000      -51.562744       1.0         -5934.748983                 0.0         False
3   -5682.593709   -5799.351278  569.675293 -5682.593709  252.155273 -5799.351278        0.0  116.757568      100.592529       1.0         -5934.748983                 0.0         False
4   -5682.593709   -5766.370199  569.675293 -5682.593709  116.698853 -5766.370199        0.0   83.776489        0.592529       2.0         -5682.593709                 0.0         False
5   -5682.534993   -5682.534993  617.461548 -5682.534993   83.835205 -5682.534993        0.0    0.000000      -51.562500       1.0         -5682.534993                 0.0         False
6   -5557.427999   -5619.765422  617.461548 -5557.427999  125.106995 -5619.765422        0.0   62.337423      -26.455505       1.0         -5682.534993                 0.0         False
7   -5530.972493   -5530.972493  665.899048 -5530.972493   88.792928 -5530.972493        0.0    0.000000      -51.562500       1.0         -5530.972493                 0.0         False
8   -5414.273641   -5479.409912  665.899048 -5414.273641  116.698853 -5479.409912        0.0   65.136271      -34.863647       1.0         -5530.972493                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:07:38]  --------------------------------------------------------------------------------
[09/27 15:07:38]  Iteration: 56 (0 solution, 55 counterexamples)
[09/27 15:07:42]  Generator returned sat in 2.267183 secs.
[09/27 15:07:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:07:42]  Improved gap from 0.0 to 100
[09/27 15:07:42]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/27 15:07:42]  Verifer returned sat in 0.589330 secs.
[09/27 15:07:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6034.690186   -6034.749023  521.179199 -6034.690186    0.029541 -6034.749023    0.000000    0.058838        0.000000       9.0         -6034.749023                -1.0            -1
1   -6034.690186   -6034.690186  521.179199 -6034.690186    0.029541 -6034.690186    0.000000    0.000000     -100.000000       3.0         -6034.749023                 1.0         False
2   -5634.719482   -5834.690186  521.179199 -5634.719482  399.970703 -5834.690186    0.000000  199.970703      199.970703       1.0         -6034.749023                 1.0          True
3   -5634.719482   -5736.631592  521.179199 -5634.719482    0.222222 -5736.631592    0.000000  101.912109       99.970703       2.0         -5634.719482                 0.0         False
4   -5634.719482   -5635.190186  521.179199 -5634.719482    0.333333 -5635.190186    0.000000    0.470703       -0.029297       3.0         -5634.719482                 1.0         False
5   -5634.690186   -5634.690186  521.179199 -5634.690186    0.500000 -5634.690186    0.000000    0.000000     -100.000000       1.0         -5634.719482                 1.0         False
6   -5534.690186   -5534.690186  521.179199 -5534.690186  100.000000 -5534.690186    0.000000    0.000000     -100.000000       1.0         -5634.719482                 0.0         False
7   -5234.719482   -5434.690186  521.179199 -5234.719482  299.970703 -5434.690186    0.000000  199.970703       99.970703       1.0         -5634.719482                 0.0         False
8   -4735.498779   -5234.690186  521.179199 -4735.498779  699.191406 -5234.690186  299.191406  200.000000      200.000000       1.0         -5634.719482                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=76593/256, 
.[0m
[09/27 15:07:43]  --------------------------------------------------------------------------------
[09/27 15:07:43]  Iteration: 57 (0 solution, 56 counterexamples)
[09/27 15:08:17]  Generator returned sat in 31.870829 secs.
[09/27 15:08:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:08:17]  Improved number of small numbers from 111 to 111 out of a max of 113
[09/27 15:08:17]  Verifer returned sat in 0.205168 secs.
[09/27 15:08:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5834.749023   -6034.749023  421.238037 -5834.749023    0.058594 -6034.749023    0.000000  200.000000      100.000000       2.0         -6034.749023                -1.0            -1
1   -5834.749023   -5834.749023  421.238037 -5834.749023    0.058594 -5834.749023    0.000000    0.000000        0.000000       3.0         -6034.749023                 0.0         False
2   -5601.347331   -5734.807617  421.238037 -5601.347331  233.401693 -5734.807617    0.000000  133.460286      133.401693       1.0         -6034.749023                 0.0         False
3   -5601.347331   -5734.749023  421.238037 -5601.347331   16.664225 -5734.749023    0.000000  133.401693       33.401693       2.0         -5601.347331                 0.0         False
4   -5601.347331   -5601.405924  421.238037 -5601.347331   33.328451 -5601.405924    0.000000    0.058594      -66.598307       3.0         -5601.347331                 0.0         False
5   -5534.749023   -5534.749023  421.238037 -5534.749023   66.656901 -5534.749023    0.000000    0.000000     -100.000000       1.0         -5601.347331                 0.0         False
6   -5401.435221   -5401.435221  421.238037 -5401.435221  133.313802 -5401.435221    0.000000    0.000000      -66.686198       1.0         -5601.347331                 0.0         False
7   -5134.807617   -5234.749023  421.238037 -5134.807617  266.627604 -5234.749023    0.000000   99.941406       99.941406       1.0         -5601.347331                 0.0         False
8   -4701.493815   -5134.749023  421.238037 -4701.493815  533.255208 -5134.749023  233.255208  200.000000      200.000000       1.0         -5601.347331                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=44785/192, 
.[0m
[09/27 15:08:17]  --------------------------------------------------------------------------------
[09/27 15:08:17]  Iteration: 58 (0 solution, 57 counterexamples)
[09/27 15:08:33]  Generator returned sat in 13.704400 secs.
[09/27 15:08:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:08:33]  Improved gap from 0.0 to 100
[09/27 15:08:34]  Improved number of small numbers from 68 to 93 out of a max of 114
[09/27 15:08:34]  Verifer returned sat in 0.916111 secs.
[09/27 15:08:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5754.968506   -6054.968262  421.237793 -5754.968506    0.001465 -6054.968262    0.000000  299.999756      199.999893       4.0         -6054.968262                -1.0            -1
1   -5754.968506   -5854.968506  421.237793 -5754.968506  299.998535 -5854.968506    0.000000  100.000000       99.999893       3.0         -6054.968262                 1.0         False
2   -5554.970947   -5854.968398  421.237793 -5554.970947  299.997559 -5854.968398    0.000000  299.997451      199.997451       3.0         -5554.970947                 1.0          True
3   -5554.970947   -5654.968398  421.237793 -5554.970947    2.017334 -5654.968398    0.000000   99.997451       99.997451       2.0         -5554.970947                 1.0         False
4   -5554.970947   -5554.972148  421.237793 -5554.970947    0.010000 -5554.972148    0.000000    0.001201       -0.002549       3.0         -5554.970947                 1.0         False
5   -5554.962148   -5554.968398  421.237793 -5554.962148    0.010000 -5554.968398    0.000000    0.006250      -99.993750       1.0         -5554.970947                 1.0         False
6   -5403.953398   -5454.968398  421.237793 -5403.953398  151.015000 -5454.968398    0.000000   51.015000      -48.985000       1.0         -5554.970947                 0.0         False
7   -5127.445898   -5254.968398  421.237793 -5127.445898  327.522500 -5254.968398    0.000000  127.522500      127.522500       1.0         -5554.970947                 0.0         False
8   -4612.682773   -5154.968506  421.237793 -4612.682773  642.285625 -5154.968506  342.285625  200.000107      200.000000       2.0         -5554.970947                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=547657/1600, 
.[0m
[09/27 15:08:35]  --------------------------------------------------------------------------------
[09/27 15:08:35]  Iteration: 59 (0 solution, 58 counterexamples)
[09/27 15:08:41]  Generator returned sat in 4.808992 secs.
[09/27 15:08:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:08:42]  Improved gap from 61.63230895996094 to 100
[09/27 15:08:43]  Improved number of small numbers from 48 to 83 out of a max of 114
[09/27 15:08:43]  Verifer returned sat in 1.321111 secs.
[09/27 15:08:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5119.762939   -5319.762939  421.237793 -5119.762939    0.058594 -5319.762939    0.000000  200.000000      199.999834       4.0         -5319.762939                -1.0            -1
1   -5119.762939   -5219.762939  421.237793 -5119.762939    0.058594 -5219.762939    0.000000  100.000000       99.999834       3.0         -5319.762939                 1.0         False
2   -4981.395020   -5119.762939  421.237793 -4981.395020  238.367920 -5119.762939    0.000000  138.367920      138.367754       3.0         -5319.762939                 1.0          True
3   -4981.395020   -5119.762695  421.237793 -4981.395020   27.392137 -5119.762695    0.000000  138.367676       38.367754       2.0         -4981.395020                 1.0          True
4   -4981.395020   -4981.395082  421.237793 -4981.395020   41.088206 -4981.395082    0.000000    0.000063      -61.632246       3.0         -4981.395020                 1.0         False
5   -4919.762773   -4919.762773  421.237793 -4919.762773   61.632309 -4919.762773    0.000000    0.000000     -100.000000       1.0         -4981.395020                 1.0         False
6   -4795.498156   -4795.556627  421.237793 -4795.498156  124.264618 -4795.556627    0.000000    0.058472      -75.735382       1.0         -4981.395020                 0.0         False
7   -4546.027391   -4619.762773  421.237793 -4546.027391  249.529236 -4619.762773    0.000000   73.735382       73.735382       1.0         -4981.395020                 0.0         False
8   -4119.704302   -4519.762939  421.237793 -4119.704302  500.058472 -4519.762939  200.058472  200.000166      200.000000       1.0         -4981.395020                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638879/8192, 
.[0m
[09/27 15:08:43]  --------------------------------------------------------------------------------
[09/27 15:08:43]  Iteration: 60 (0 solution, 59 counterexamples)
[09/27 15:08:55]  Generator returned sat in 10.352715 secs.
[09/27 15:08:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:08:57]  Improved number of small numbers from 57 to 66 out of a max of 113
[09/27 15:08:57]  Verifer returned sat in 1.094483 secs.
[09/27 15:08:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5119.762939   -5119.791992  421.237793 -5119.762939  400.058105 -5119.791992    0.000000    0.029053      -99.970825       4.0         -5119.791992                -1.0            -1
1   -4719.762939   -5019.792114  421.237793 -4719.762939  400.029053 -5019.792114    0.029175  300.000000      200.000000       1.0         -4719.792114                 1.0         False
2   -4719.762939   -4819.792114  421.237793 -4719.762939  299.941406 -4819.792114    0.029175  100.000000      100.000000       2.0         -4719.792114                 0.0         False
3   -4519.821289   -4726.937988  421.237793 -4519.821289  299.941650 -4726.937988    0.029175  207.087524      199.941650       3.0         -4719.792114                 0.0         False
4   -4519.821289   -4719.792114  421.237793 -4519.821289  195.427002 -4719.792114    0.029175  199.941650       99.941650       4.0         -4519.850464                 1.0         False
5   -4519.821289   -4519.850464  421.237793 -4519.821289  149.000000 -4519.850464    0.029175    0.000000       -0.058350       3.0         -4519.850464                 1.0         False
6   -4370.850464   -4420.821289  421.237793 -4370.850464  148.970825 -4420.821289    0.029175   49.941650       48.912476       1.0         -4370.879639                 1.0         False
7   -4119.762939   -4319.792114  421.237793 -4119.762939  301.029175 -4319.792114    0.029175  200.000000      200.000000       1.0         -4370.879639                 0.0         False
8   -3819.733765   -4219.792236  421.237793 -3819.733765  500.029175 -4219.792236  200.058350  200.000122      200.000000       2.0         -4370.879639                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638639/8192, 
.[0m
[09/27 15:08:57]  --------------------------------------------------------------------------------
[09/27 15:08:57]  Iteration: 61 (0 solution, 60 counterexamples)
[09/27 15:09:24]  Generator returned sat in 25.064551 secs.
[09/27 15:09:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:09:30]  Improved gap from 0.0 to 0
[09/27 15:09:31]  Improved number of small numbers from 60 to 68 out of a max of 114
[09/27 15:09:31]  Verifer returned sat in 6.233138 secs.
[09/27 15:09:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4715.759248   -4715.772998   421.237549 -4715.759248  0.001221 -4715.772998        0.0  0.01375        0.013506       6.0         -4715.772998                -1.0            -1
1   -4715.759248   -4715.759248   519.240479 -4715.759248  0.001250 -4715.759248        0.0  0.00000       -1.983564       2.0         -4715.772998                 0.0         False
2   -4713.775498   -4713.775498   619.226562 -4713.775498  1.983750 -4713.775498        0.0  0.00000       -0.013730       1.0         -4715.772998                 0.0         False
3   -4713.761748   -4713.761748   719.214111 -4713.761748  0.013750 -4713.761748        0.0  0.00000       -0.012432       1.0         -4713.761748                 0.0         False
4   -4713.749248   -4713.749248   819.202881 -4713.749248  0.012500 -4713.749248        0.0  0.00000       -0.011162       1.0         -4713.749248                 0.0         False
5   -4713.737998   -4713.737998   919.192871 -4713.737998  0.011250 -4713.737998        0.0  0.00000       -0.009922       1.0         -4713.737998                 0.0         False
6   -4713.727998   -4713.727998  1019.182861 -4713.727998  0.010000 -4713.727998        0.0  0.00000       -0.009932       1.0         -4713.727998                 0.0         False
7   -4713.717998   -4713.717998  1119.182617 -4713.717998  0.010000 -4713.717998        0.0  0.00000       -0.000176       1.0         -4713.727998                 0.0         False
8   -4713.707998   -4713.707998  1219.161377 -4713.707998  0.010000 -4713.707998        0.0  0.00000       -0.011416       1.0         -4713.727998                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:09:31]  --------------------------------------------------------------------------------
[09/27 15:09:31]  Iteration: 62 (0 solution, 61 counterexamples)
[09/27 15:10:04]  Generator returned sat in 31.236319 secs.
[09/27 15:10:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:10:06]  Improved gap from 0.0 to 53.125
[09/27 15:10:06]  Improved number of small numbers from 52 to 114 out of a max of 114
[09/27 15:10:06]  Verifer returned sat in 1.907381 secs.
[09/27 15:10:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5056.522217   -5127.429688  886.495361 -5056.522217  300.116211 -5127.429688    0.00000   70.907471       70.907471       1.0         -5127.429688                -1.0            -1
1   -4827.371338   -5056.463623  886.495361 -4827.371338  300.058350 -5056.463623    0.05835  229.033936      200.000000       1.0         -4827.429688                 0.0         False
2   -4827.312988   -5021.988037  886.495361 -4827.312988  229.092285 -5021.988037    0.05835  194.616699      100.058350       2.0         -4827.371338                 0.0         False
3   -4827.312988   -4827.429688  886.495361 -4827.312988  114.633545 -4827.429688    0.05835    0.058350        0.058350       3.0         -4827.371338                 1.0         False
4   -4713.737793   -4827.313232  886.495361 -4713.737793  113.633545 -4827.313232    0.05835  113.517090       13.633545       1.0         -4713.796143                 1.0         False
5   -4713.679688   -4713.738037  919.678711 -4713.679688  113.575195 -4713.738037    0.05835    0.000000      -53.125000       1.0         -4713.738037                 0.0         False
6   -4560.554688   -4660.612793  919.678711 -4560.554688  153.125000 -4660.612793    0.05835   99.999756        0.000000       1.0         -4713.738037                 0.0         False
7   -4560.554688   -4560.613037  966.553467 -4560.554688   82.408447 -4560.613037    0.05835    0.000000      -53.125244       2.0         -4560.613037                 0.0         False
8   -4479.146240   -4507.487793  966.553467 -4479.146240   81.408447 -4507.487793    0.05835   28.283203      -71.716797       1.0         -4479.204590                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:10:07]  --------------------------------------------------------------------------------
[09/27 15:10:07]  Iteration: 63 (0 solution, 62 counterexamples)
[09/27 15:10:20]  Generator returned sat in 11.166584 secs.
[09/27 15:10:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:10:20]  Improved gap from 0.0 to 100
[09/27 15:10:21]  Improved number of small numbers from 73 to 114 out of a max of 114
[09/27 15:10:21]  Verifer returned sat in 0.359499 secs.
[09/27 15:10:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5056.522217   -5208.147217  915.529541 -5056.522217  300.115967 -5208.147217        0.0  151.625000       99.941650       2.0         -5208.147217                -1.0            -1
1   -5056.406006   -5056.463867  915.529541 -5056.406006  151.741211 -5056.463867        0.0    0.057861        0.057861       1.0         -5056.406006                 0.0         False
2   -4904.722412   -5056.463867  915.529541 -4904.722412  151.741455 -5056.463867        0.0  151.741455       51.741455       1.0         -5056.406006                 0.0         False
3   -4904.722412   -4904.781006  915.529541 -4904.722412   24.062500 -4904.781006        0.0    0.058594      -48.258545       2.0         -4904.722412                 0.0         False
4   -4855.656006   -4855.713867  915.529541 -4855.656006   49.125000 -4855.713867        0.0    0.057861      -99.192139       1.0         -4904.722412                 0.0         False
5   -4756.463867   -4756.463867  915.529541 -4756.463867   99.250000 -4756.463867        0.0    0.000000     -100.000000       1.0         -4904.722412                 0.0         False
6   -4556.963867   -4656.463867  915.529541 -4556.963867  199.500000 -4656.463867        0.0   99.500000       -0.500000       1.0         -4904.722412                 0.0         False
7   -4256.463867   -4456.463867  915.529541 -4256.463867  400.000000 -4456.463867        0.0  200.000000      200.000000       1.0         -4904.722412                 0.0         False
8   -3655.463867   -4456.463867  915.529541 -3655.463867  801.000000 -4456.463867      501.0  300.000000      200.000000       1.0         -4904.722412                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=501, 
.[0m
[09/27 15:10:21]  --------------------------------------------------------------------------------
[09/27 15:10:21]  Iteration: 64 (0 solution, 63 counterexamples)
[09/27 15:10:34]  Generator returned sat in 10.343106 secs.
[09/27 15:10:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:10:35]  Verifer returned unsat in 1.410940 secs.
[09/27 15:10:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:10:35]  --------------------------------------------------------------------------------
[09/27 15:10:35]  Iteration: 65 (1 solution, 63 counterexamples)
[09/27 15:10:41]  Generator returned sat in 4.227019 secs.
[09/27 15:10:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:10:43]  Improved number of small numbers from 67 to 71 out of a max of 113
[09/27 15:10:43]  Verifer returned sat in 1.382869 secs.
[09/27 15:10:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4702.780518   -4702.780621  915.529541 -4702.780518    0.038574 -4702.780621    0.000000    0.000104      -61.903742       3.0         -4702.780621                -1.0            -1
1   -4540.838314   -4640.876775  915.529541 -4540.838314  161.942308 -4640.876775    0.000000  100.038462        0.038462       1.0         -4702.780621                 0.0         False
2   -4540.838314   -4540.876775  915.529541 -4540.838314    0.038462 -4540.876775    0.000000    0.038462      -99.961538       2.0         -4540.838314                 0.0         False
3   -4140.838314   -4394.165237  915.529541 -4140.838314  400.038462 -4394.165237    0.038462  253.288462      200.000000       1.0         -4540.838314                 0.0         False
4   -4040.799852   -4286.126775  915.529541 -4040.799852  353.326923 -4286.126775    0.076923  245.250000      200.000000       2.0         -4040.876775                 0.0         False
5   -3933.011390   -4140.876775  915.529541 -3933.011390  353.038462 -4140.876775    7.865385  200.000000      200.000000       3.0         -3940.876775                 0.0         False
6   -3757.492160   -4040.876775  915.529541 -3757.492160  375.519231 -4040.876775   83.384615  200.000000      200.000000       3.0         -3940.876775                 0.0         False
7   -3594.088314   -3940.876775  915.529541 -3594.088314  363.403846 -3940.876775  146.788462  200.000000      200.000000       3.0         -3740.876775                 0.0         False
8   -3440.761390   -3940.838135  915.529541 -3440.761390  353.326923 -3940.838135  200.115385  299.961360      200.000000       3.0         -3640.876775                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=5201/26, 
.[0m
[09/27 15:10:43]  --------------------------------------------------------------------------------
[09/27 15:10:43]  Iteration: 66 (1 solution, 64 counterexamples)
[09/27 15:11:06]  Generator returned sat in 20.214386 secs.
[09/27 15:11:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:11:07]  Improved gap from 0.0 to 18.75
[09/27 15:11:07]  Improved number of small numbers from 61 to 72 out of a max of 114
[09/27 15:11:07]  Verifer returned sat in 1.510098 secs.
[09/27 15:11:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4463.760462   -4463.762962  916.589355 -4463.760462    0.001465 -4463.762962    0.00000    0.002500        0.000059       2.0         -4463.762962                -1.0            -1
1   -4463.760462   -4463.760462  917.590547 -4463.760462    0.001465 -4463.760462    0.00000    0.000000      -98.998750       2.0         -4463.762962                 1.0         False
2   -4314.259837   -4314.260010  917.590547 -4314.259837  149.500625 -4314.260010    0.00000    0.000173      -49.498125       1.0         -4463.762962                 1.0          True
3   -4164.760498   -4164.761712  917.590547 -4164.760498  149.499512 -4164.761712    0.00000    0.001214        0.001214       1.0         -4164.760498                 0.0         False
4   -3864.760462   -4064.761712  917.590547 -3864.760462  300.001250 -4064.761712    0.00125  200.000000      200.000000       1.0         -4164.760498                 0.0         False
5   -3864.760462   -3964.761719  917.590547 -3864.760462  199.499375 -3964.761719    0.00125  100.000007      100.000000       2.0         -3864.761712                 0.0         False
6   -3864.760462   -3864.770462  917.590547 -3864.760462    0.010000 -3864.770462    0.00125    0.008750        0.000000       3.0         -3864.761712                 1.0         False
7   -3864.759212   -3864.760462  997.591797 -3864.759212    0.010000 -3864.760462    0.00125    0.000000      -19.997500       1.0         -3864.761712                 1.0         False
8   -3663.757962   -3844.762939  997.591797 -3663.757962  201.001250 -3844.762939    0.00125  181.003727       81.003750       1.0         -3864.761712                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:11:08]  --------------------------------------------------------------------------------
[09/27 15:11:08]  Iteration: 67 (1 solution, 65 counterexamples)
[09/27 15:11:27]  Generator returned sat in 16.833748 secs.
[09/27 15:11:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:11:27]  Improved gap from 0.0 to 100
[09/27 15:11:28]  Improved number of small numbers from 35 to 114 out of a max of 114
[09/27 15:11:28]  Verifer returned sat in 0.654457 secs.
[09/27 15:11:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4463.260254   -4663.702148  917.590576 -4463.260254  100.441895 -4663.702148    0.00000  200.441895      100.441895       3.0         -4663.702148                -1.0            -1
1   -4463.260254   -4563.702148  917.590576 -4463.260254  100.441895 -4563.702148    0.00000  100.441895        0.441895       4.0         -4663.702148                 1.0         False
2   -4463.260254   -4463.318604  917.590576 -4463.260254  100.383301 -4463.318604    0.00000    0.058350      -99.558105       3.0         -4463.260254                 1.0          True
3   -4063.760254   -4363.318848  917.590576 -4063.760254  399.558350 -4363.318848    0.00000  299.558594      199.941895       1.0         -4463.260254                 1.0         False
4   -3963.760498   -4263.318848  917.590576 -3963.760498  399.558350 -4263.318848    0.00000  299.558350      199.941650       2.0         -4463.260254                 0.0         False
5   -3863.760498   -4063.702148  917.590576 -3863.760498  399.558350 -4063.702148    0.00000  199.941650      199.941650       2.0         -4463.260254                 0.0         False
6   -3664.143799   -3963.702148  917.590576 -3664.143799  399.558350 -3963.702148   99.55835  200.000000      200.000000       2.0         -4463.260254                 0.0         False
7   -3664.143799   -3863.760498  917.590576 -3664.143799  199.808350 -3863.760498   99.55835  100.058350      100.000000       3.0         -3763.702148                 0.0         False
8   -3363.643799   -3863.702148  917.590576 -3363.643799  400.558350 -3863.702148  200.05835  300.000000      200.000000       3.0         -3763.702148                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819439/4096, 
.[0m
[09/27 15:11:28]  --------------------------------------------------------------------------------
[09/27 15:11:28]  Iteration: 68 (1 solution, 66 counterexamples)
[09/27 15:11:39]  Generator returned sat in 8.595501 secs.
[09/27 15:11:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:11:40]  Improved gap from 0.0 to 50.0
[09/27 15:11:40]  Improved number of small numbers from 60 to 67 out of a max of 114
[09/27 15:11:40]  Verifer returned sat in 1.436142 secs.
[09/27 15:11:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4263.500977   -4263.502132  617.390381 -4263.500977    0.001221 -4263.502132        0.0    0.001156        0.000977       9.0         -4263.502132                -1.0            -1
1   -4263.499632   -4263.499632  667.388060 -4263.499632    0.002500 -4263.499632        0.0    0.000000      -50.000000       1.0         -4263.502132                 1.0         False
2   -3963.499632   -4213.499632  667.388060 -3963.499632  300.000000 -4213.499632        0.0  250.000000      150.000000       1.0         -4263.502132                 0.0         False
3   -3913.500882   -4030.833799  667.388060 -3913.500882  299.998750 -4030.833799        0.0  117.332917       99.998750       2.0         -3913.500882                 0.0         False
4   -3913.499632   -3963.499632  667.388060 -3913.499632  117.334167 -3963.499632        0.0   50.000000        0.000000       3.0         -3913.499632                 0.0         False
5   -3913.499632   -3913.499632  717.388060 -3913.499632    0.010000 -3913.499632        0.0    0.000000      -50.000000       2.0         -3913.499632                 1.0         False
6   -3762.499632   -3863.499632  717.388060 -3762.499632  151.000000 -3863.499632        0.0  101.000000        1.000000       1.0         -3913.499632                 0.0         False
7   -3762.499632   -3762.499632  766.387939 -3762.499632   84.667083 -3762.499632        0.0    0.000000      -50.000120       2.0         -3762.499632                 0.0         False
8   -3660.999632   -3710.834961  766.387939 -3660.999632  101.500000 -3710.834961        0.0   49.835329      -48.500120       1.0         -3762.499632                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:11:41]  --------------------------------------------------------------------------------
[09/27 15:11:41]  Iteration: 69 (1 solution, 67 counterexamples)
[09/27 15:11:51]  Generator returned sat in 8.303857 secs.
[09/27 15:11:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:11:53]  Improved gap from 0.0 to 14.0625
[09/27 15:11:53]  Improved number of small numbers from 54 to 114 out of a max of 114
[09/27 15:11:53]  Verifer returned sat in 1.682453 secs.
[09/27 15:11:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4113.091797   -4213.150146  467.038574 -4113.091797    0.058105 -4213.150146        0.0  100.058350         0.05835       9.0         -4213.150146                -1.0            -1
1   -4113.091797   -4113.150146  467.038574 -4113.091797    0.058105 -4113.150146        0.0    0.058350       -99.94165       2.0         -4213.150146                 1.0         False
2   -4013.091797   -4013.150146  467.038574 -4013.091797  100.058350 -4013.150146        0.0    0.058350       -99.94165       1.0         -4213.150146                 0.0         False
3   -3625.150146   -3813.150146  467.038574 -3625.150146  388.000000 -3813.150146        0.0  188.000000       188.00000       1.0         -4213.150146                 0.0         False
4   -3618.150146   -3813.150146  467.038574 -3618.150146  195.000000 -3813.150146        0.0  195.000000        95.00000       1.0         -3618.150146                 0.0         False
5   -3618.150146   -3625.092041  467.038574 -3618.150146   98.500000 -3625.092041        0.0    6.941895        -5.00000       2.0         -3618.150146                 0.0         False
6   -3574.842041   -3574.842041  514.667969 -3574.842041   50.250000 -3574.842041        0.0    0.000000       -14.06250       1.0         -3574.842041                 0.0         False
7   -3548.717041   -3548.717041  588.542969 -3548.717041   26.125000 -3548.717041        0.0    0.000000       -14.06250       1.0         -3548.717041                 0.0         False
8   -3534.654541   -3534.654541  588.542969 -3534.654541   14.062500 -3534.654541        0.0    0.000000      -100.00000       1.0         -3534.654541                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:11:54]  --------------------------------------------------------------------------------
[09/27 15:11:54]  Iteration: 70 (1 solution, 68 counterexamples)
[09/27 15:12:21]  Generator returned sat in 25.331809 secs.
[09/27 15:12:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:12:22]  Improved gap from 0.0 to 100
[09/27 15:12:22]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:12:22]  Verifer returned sat in 0.444649 secs.
[09/27 15:12:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3911.121094   -4014.092041  566.09668 -3911.121094    0.058105 -4014.092041    0.000000  102.970947      102.970947       2.0         -4014.092041                -1.0            -1
1   -3911.121094   -4014.033936  566.09668 -3911.121094    0.058105 -4014.033936    0.000000  102.912842        2.970947       2.0         -4014.092041                 0.0         False
2   -3911.121094   -3911.179199  566.09668 -3911.121094  102.854736 -3911.179199    0.000000    0.058105      -97.029053       3.0         -4014.092041                 0.0         False
3   -3514.150146   -3812.179199  566.09668 -3514.150146  397.029053 -3812.179199    0.000000  298.029053      199.941895       1.0         -4014.092041                 1.0          True
4   -3414.150146   -3713.121094  566.09668 -3414.150146  398.029053 -3713.121094    0.000000  298.970947      199.941895       2.0         -4014.092041                 0.0         False
5   -3314.092041   -3514.092041  566.09668 -3314.092041  399.029053 -3514.092041    0.000000  200.000000      200.000000       2.0         -4014.092041                 0.0         False
6   -3114.062988   -3414.092041  566.09668 -3114.062988  400.029053 -3414.092041  100.029053  200.000000      200.000000       2.0         -4014.092041                 0.0         False
7   -3114.062988   -3314.092041  566.09668 -3114.062988    1.000000 -3314.092041  100.029053  100.000000      100.000000       3.0         -3214.092041                 0.0         False
8   -2814.033936   -3314.033936  566.09668 -2814.033936  400.029053 -3314.033936  200.058105  299.941895      200.000000       3.0         -3214.092041                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=409719/2048, 
.[0m
[09/27 15:12:22]  --------------------------------------------------------------------------------
[09/27 15:12:22]  Iteration: 71 (1 solution, 69 counterexamples)
[09/27 15:12:35]  Generator returned sat in 10.539409 secs.
[09/27 15:12:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:12:36]  Improved gap from 0.0 to 71.875
[09/27 15:12:36]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:12:36]  Verifer returned sat in 0.660783 secs.
[09/27 15:12:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4114.092041   -4313.976074  566.096436 -4114.092041  299.884033 -4313.976074        0.0  199.884033       99.884033       2.0         -4313.976074                -1.0            -1
1   -4014.092041   -4113.976074  566.096436 -4014.092041  299.884033 -4113.976074        0.0   99.884033       99.884033       1.0         -4313.976074                 0.0         False
2   -3885.967041   -4013.976074  566.096436 -3885.967041  228.009033 -4013.976074        0.0  128.009033      128.009033       1.0         -3885.967041                 0.0         False
3   -3885.967041   -3913.976074  566.096436 -3885.967041   71.875000 -3913.976074        0.0   28.009033       28.009033       2.0         -3885.967041                 0.0         False
4   -3842.101074   -3885.851074  566.096436 -3842.101074   71.875000 -3885.851074        0.0   43.750000      -28.125000       1.0         -3885.967041                 0.0         False
5   -3813.976074   -3813.976074  594.221436 -3813.976074   71.875000 -3813.976074        0.0    0.000000      -71.875000       1.0         -3885.967041                 0.0         False
6   -3742.101074   -3742.101074  622.346436 -3742.101074   71.875000 -3742.101074        0.0    0.000000      -71.875000       1.0         -3885.967041                 0.0         False
7   -3670.226074   -3670.226074  650.471436 -3670.226074   71.875000 -3670.226074        0.0    0.000000      -71.875000       1.0         -3885.967041                 0.0         False
8   -3598.351074   -3598.351074  650.471436 -3598.351074   71.875000 -3598.351074        0.0    0.000000     -100.000000       1.0         -3885.967041                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:12:37]  --------------------------------------------------------------------------------
[09/27 15:12:37]  Iteration: 72 (1 solution, 70 counterexamples)
[09/27 15:12:46]  Generator returned sat in 7.406458 secs.
[09/27 15:12:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:12:47]  Improved number of small numbers from 81 to 87 out of a max of 113
[09/27 15:12:47]  Verifer returned sat in 0.908806 secs.
[09/27 15:12:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4212.984131   -4313.976318  566.096191 -4212.984131    0.002500 -4313.976318    0.000000  100.992188        0.992188       5.0         -4313.976318                -1.0            -1
1   -4212.984131   -4212.984235  566.096191 -4212.984131  100.989746 -4212.984235    0.000000    0.000104      -99.007812       2.0         -4313.976318                 1.0         False
2   -3812.981735   -4113.976318  566.096191 -3812.981735  400.002500 -4113.976318    0.994583  300.000000      200.000000       1.0         -4313.976318                 0.0         False
3   -3712.981735   -3913.977985  566.096191 -3712.981735  400.000000 -3913.977985    0.994583  200.001667      200.000000       2.0         -3713.976318                 0.0         False
4   -3712.981735   -3813.978818  566.096191 -3712.981735  199.999167 -3813.978818    0.994583  100.002500      100.000000       3.0         -3713.976318                 0.0         False
5   -3312.979235   -3813.976318  566.096191 -3312.979235  500.005000 -3813.976318  200.997083  300.000000      200.000000       4.0         -3713.976318                 1.0         False
6   -3312.979235   -3713.973818  566.096191 -3312.979235    0.010000 -3713.973818  200.997083  199.997500      100.000000       2.0         -3513.976318                 1.0         False
7   -3312.979235   -3589.478089  566.096191 -3312.979235  100.002083 -3589.478089  200.997083   75.501771        0.000000       3.0         -3513.976318                 0.0         False
8   -3112.979235   -3513.973877  566.096191 -3112.979235  275.501771 -3513.973877  200.997083  199.997559      100.000000       1.0         -3513.976318                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=80001/400, 
.[0m
[09/27 15:12:48]  --------------------------------------------------------------------------------
[09/27 15:12:48]  Iteration: 73 (1 solution, 71 counterexamples)
[09/27 15:12:53]  Generator returned sat in 2.537265 secs.
[09/27 15:12:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:12:54]  Improved gap from 0.0 to 50.0
[09/27 15:12:54]  Improved number of small numbers from 85 to 114 out of a max of 114
[09/27 15:12:54]  Verifer returned sat in 1.028195 secs.
[09/27 15:12:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3932.650879   -4023.574707  475.691895 -3932.650879    0.057617 -4023.574707        0.0   90.923828       90.923584       7.0         -4023.574707                -1.0            -1
1   -3913.978760   -3932.593018  475.691895 -3913.978760  109.595947 -3932.593018        0.0   18.614258        9.595703       1.0         -4023.574707                 1.0         False
2   -3913.978760   -3913.978760  516.096191 -3913.978760    0.057617 -3913.978760        0.0    0.000000      -50.000000       2.0         -3913.978760                 0.0         False
3   -3664.036377   -3783.920898  516.096191 -3664.036377  249.942383 -3783.920898        0.0  119.884521       99.942383       1.0         -3913.978760                 0.0         False
4   -3664.036377   -3753.516846  516.096191 -3664.036377  119.826904 -3753.516846        0.0   89.480469       -0.057617       2.0         -3664.036377                 0.0         False
5   -3663.978760   -3663.978760  566.096191 -3663.978760   89.538086 -3663.978760        0.0    0.000000      -50.000000       1.0         -3663.978760                 0.0         False
6   -3538.978760   -3603.959473  566.096191 -3538.978760  125.000000 -3603.959473        0.0   64.980713      -25.000000       1.0         -3663.978760                 0.0         False
7   -3513.978760   -3513.978760  616.096191 -3513.978760   89.980713 -3513.978760        0.0    0.000000      -50.000000       1.0         -3513.978760                 0.0         False
8   -3394.209717   -3463.978760  616.096191 -3394.209717  119.769043 -3463.978760        0.0   69.769043      -30.230957       1.0         -3513.978760                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:12:55]  --------------------------------------------------------------------------------
[09/27 15:12:55]  Iteration: 74 (1 solution, 72 counterexamples)
[09/27 15:13:19]  Generator returned sat in 21.360343 secs.
[09/27 15:13:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:13:21]  Improved gap from 37.0869140625 to 50.0
[09/27 15:13:21]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 15:13:21]  Verifer returned sat in 2.046873 secs.
[09/27 15:13:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4568.522461   -4676.349365  466.153564 -4568.522461    0.028564 -4676.349365        0.0  107.826904      100.028564       9.0         -4676.349365                -1.0            -1
1   -4568.493652   -4568.551270  466.153564 -4568.493652  107.855713 -4568.551270        0.0    0.057617        0.057373       4.0         -4676.349365                 1.0         False
2   -4568.493652   -4568.493652  516.096191 -4568.493652    0.028564 -4568.493652        0.0    0.000000      -50.000000       2.0         -4568.493652                 0.0         False
3   -4318.493652   -4438.464600  516.096191 -4318.493652  250.000000 -4438.464600        0.0  119.970947      100.000000       1.0         -4568.493652                 0.0         False
4   -4318.493652   -4406.320801  516.096191 -4318.493652  119.942383 -4406.320801        0.0   87.827148        0.000000       2.0         -4318.493652                 0.0         False
5   -4318.493652   -4318.493652  566.096191 -4318.493652   82.115234 -4318.493652        0.0    0.000000      -50.000000       3.0         -4318.493652                 0.0         False
6   -4192.493652   -4259.150635  566.096191 -4192.493652  126.000000 -4259.150635        0.0   66.656982      -24.000000       1.0         -4318.493652                 0.0         False
7   -4168.493652   -4168.493652  616.096191 -4168.493652   90.656982 -4168.493652        0.0    0.000000      -50.000000       1.0         -4168.493652                 0.0         False
8   -4048.580078   -4118.493652  616.096191 -4048.580078  119.913574 -4118.493652        0.0   69.913574      -30.086426       1.0         -4168.493652                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:13:22]  --------------------------------------------------------------------------------
[09/27 15:13:22]  Iteration: 75 (1 solution, 73 counterexamples)
[09/27 15:13:36]  Generator returned sat in 11.927281 secs.
[09/27 15:13:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:13:37]  Improved number of small numbers from 66 to 113 out of a max of 113
[09/27 15:13:37]  Verifer returned sat in 0.523488 secs.
[09/27 15:13:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4759.150635   -4959.093018  566.096191 -4759.150635    0.057373 -4959.093018    0.000000  199.942383      199.885254       8.0         -4959.093018                -1.0            -1
1   -4759.150635   -4959.035889  566.096191 -4759.150635  199.884766 -4959.035889    0.000000  199.885254       99.885254       8.0         -4959.093018                 1.0         False
2   -4559.645020   -4759.093262  566.096191 -4559.645020  399.390869 -4759.093262    0.000000  199.448242      199.390869       1.0         -4959.093018                 1.0          True
3   -4559.645020   -4759.035889  566.096191 -4559.645020  198.333496 -4759.035889    0.000000  199.390869       99.390869       2.0         -4559.645020                 0.0         False
4   -4559.645020   -4559.645020  566.096191 -4559.645020  199.333496 -4559.645020    0.000000    0.000000       -0.609131       3.0         -4559.645020                 0.0         False
5   -4060.587402   -4459.093262  566.096191 -4060.587402  499.057617 -4459.093262  198.448486  200.057373      200.000000       1.0         -4559.645020                 1.0         False
6   -4060.587402   -4459.035645  566.096191 -4060.587402    1.000000 -4459.035645  198.448486  199.999756      100.000000       2.0         -4259.035889                 0.0         False
7   -4060.587402   -4259.035889  566.096191 -4060.587402    2.000000 -4259.035889  198.448486    0.000000        0.000000       3.0         -4259.035889                 0.0         False
8   -3758.978271   -4259.035889  566.096191 -3758.978271  301.609131 -4259.035889  200.057617  300.000000      200.000000       3.0         -4259.035889                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204859/1024, 
.[0m
[09/27 15:13:38]  --------------------------------------------------------------------------------
[09/27 15:13:38]  Iteration: 76 (1 solution, 74 counterexamples)
[09/27 15:14:07]  Generator returned sat in 26.279531 secs.
[09/27 15:14:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:14:07]  Improved number of small numbers from 62 to 113 out of a max of 113
[09/27 15:14:07]  Verifer returned sat in 0.635423 secs.
[09/27 15:14:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5060.587402   -5360.587402  566.096191 -5060.587402    0.057617 -5360.587402    0.000000  300.000000      200.000000       8.0         -5360.587402                -1.0            -1
1   -5060.587402   -5212.659180  566.096191 -5060.587402    0.028809 -5212.659180    0.000000  152.071777      100.000000       8.0         -5060.587402                 1.0         False
2   -4860.616211   -5112.573242  566.096191 -4860.616211  352.042969 -5112.573242    0.000000  251.957031      199.971191       4.0         -5060.587402                 1.0         False
3   -4760.558838   -5060.587402  566.096191 -4760.558838  352.014404 -5060.587402    0.028564  300.000000      200.000000       4.0         -4760.587402                 1.0         False
4   -4760.558838   -4860.587402  566.096191 -4760.558838    1.000000 -4860.587402    0.028564  100.000000      100.000000       2.0         -4760.587402                 1.0         False
5   -4684.522949   -4860.587402  566.096191 -4684.522949  176.035889 -4860.587402    0.028564  176.035889       76.035889       2.0         -4760.587402                 0.0         False
6   -4559.530029   -4660.587402  566.096191 -4559.530029  301.028809 -4660.587402    0.028564  101.028809      101.028809       1.0         -4760.587402                 0.0         False
7   -4160.530029   -4560.587402  566.096191 -4160.530029  500.028809 -4560.587402  200.057373  200.000000      200.000000       2.0         -4760.587402                 0.0         False
8   -4160.530029   -4559.530029  566.096191 -4160.530029    1.000000 -4559.530029  200.057373  198.942627      100.000000       2.0         -4360.587402                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409659/2048, 
.[0m
[09/27 15:14:08]  --------------------------------------------------------------------------------
[09/27 15:14:08]  Iteration: 77 (1 solution, 75 counterexamples)
[09/27 15:15:09]  Generator returned sat in 57.638504 secs.
[09/27 15:15:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:15:09]  Improved gap from 0.0 to 100
[09/27 15:15:10]  Improved number of small numbers from 42 to 57 out of a max of 114
[09/27 15:15:10]  Verifer returned sat in 1.390563 secs.
[09/27 15:15:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4759.602051   -4959.602051  566.096191 -4759.602051    0.057373 -4959.602051    0.000000  200.000000      199.971130       2.0         -4959.602051                -1.0            -1
1   -4759.602051   -4959.573181  566.096191 -4759.602051    0.028809 -4959.573181    0.000000  199.971130       99.971130       3.0         -4759.602051                 1.0         False
2   -4559.544495   -4759.573242  566.096191 -4559.544495  400.028687 -4759.573242    0.028687  200.000061      200.000000       1.0         -4759.602051                 1.0         False
3   -4559.544495   -4660.220723  566.096191 -4559.544495   31.037037 -4660.220723    0.028687  100.647542      100.000000       2.0         -4559.573181                 0.0         False
4   -4559.544495   -4659.573181  566.096191 -4559.544495   45.555556 -4659.573181    0.028687  100.000000        0.000000       3.0         -4559.573181                 1.0         False
5   -4559.544495   -4559.573181  566.096191 -4559.544495   67.333333 -4559.573181    0.028687    0.000000     -100.000000       4.0         -4559.573181                 1.0         False
6   -4459.544495   -4459.573181  566.096191 -4459.544495  100.000000 -4459.573181    0.028687    0.000000     -100.000000       1.0         -4559.573181                 1.0         False
7   -4159.573181   -4299.161707  566.096191 -4159.573181  299.971313 -4299.161707    0.028687  139.559839       99.971313       1.0         -4559.573181                 0.0         False
8   -3759.515808   -4159.573242  566.096191 -3759.515808  539.617212 -4159.573242  200.057373  200.000061      200.000000       1.0         -4559.573181                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638635/8192, 
.[0m
[09/27 15:15:11]  --------------------------------------------------------------------------------
[09/27 15:15:11]  Iteration: 78 (1 solution, 76 counterexamples)
[09/27 15:15:40]  Generator returned sat in 26.895330 secs.
[09/27 15:15:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:15:41]  Improved gap from 98.00125 to 100
[09/27 15:15:41]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 15:15:41]  Verifer returned sat in 0.585098 secs.
[09/27 15:15:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4558.572998   -4758.568359  566.096191 -4558.572998  100.009766 -4758.568359        0.0  199.995361       99.995361       9.0         -4758.568359                -1.0            -1
1   -4558.572998   -4558.573242  566.096191 -4558.572998  100.007568 -4558.573242        0.0    0.000244       -0.004639       3.0         -4558.572998                 1.0         False
2   -4458.568359   -4558.568359  566.096191 -4458.568359  100.004883 -4558.568359        0.0  100.000000        0.000000       1.0         -4458.568359                 1.0         False
3   -4458.565674   -4458.568359  566.096191 -4458.565674  100.002686 -4458.568359        0.0    0.002686      -99.997314       2.0         -4458.565674                 0.0         False
4   -4157.568359   -4357.568359  566.096191 -4157.568359  301.000000 -4357.568359        0.0  200.000000      101.000000       1.0         -4458.565674                 1.0         False
5   -4157.568359   -4158.568359  566.096191 -4157.568359   99.502441 -4158.568359        0.0    1.000000        1.000000       2.0         -4157.568359                 0.0         False
6   -3757.568359   -4157.565674  566.096191 -3757.568359  401.000000 -4157.565674      101.0  298.997314      200.000000       1.0         -4157.568359                 1.0         False
7   -3757.568359   -3958.568359  566.096191 -3757.568359    0.010000 -3958.568359      101.0  100.000000      100.000000       2.0         -3858.568359                 0.0         False
8   -3457.568359   -3958.565674  566.096191 -3457.568359  400.000000 -3958.565674      201.0  299.997314      200.000000       3.0         -3858.568359                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=201, 
.[0m
[09/27 15:15:42]  --------------------------------------------------------------------------------
[09/27 15:15:42]  Iteration: 79 (1 solution, 77 counterexamples)
[09/27 15:15:55]  Generator returned sat in 10.109866 secs.
[09/27 15:15:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:15:56]  Improved gap from 0.0 to 18.75
[09/27 15:15:57]  Improved number of small numbers from 77 to 89 out of a max of 114
[09/27 15:15:57]  Verifer returned sat in 1.692028 secs.
[09/27 15:15:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4093.845947   -4161.075859  421.108887 -4093.845947    0.002441 -4161.075859     0.0000   67.229912       -0.002393       1.0         -4161.075859                -1.0            -1
1   -4093.843359   -4093.843506  421.108887 -4093.843359   67.232500 -4093.843506     0.0000    0.000146      -99.999805       1.0         -4161.075859                 0.0         False
2   -3976.333496   -3976.333496  484.848691 -3976.333496  117.510010 -3976.333496     0.0000    0.000000      -18.750137       1.0         -4161.075859                 0.0         False
3   -3858.825928   -3858.828359  484.848691 -3858.825928  117.507568 -3858.828359     0.0000    0.002432       -1.242568       1.0         -3858.825928                 0.0         False
4   -3557.580859   -3757.583359  484.848691 -3557.580859  301.247500 -3757.583359     0.0025  200.000000      200.000000       1.0         -3858.825928                 0.0         False
5   -3557.580859   -3757.580811  484.848691 -3557.580859  151.623750 -3757.580811     0.0025  199.997451      100.000000       2.0         -3557.583359                 0.0         False
6   -3557.580859   -3557.590859  484.848691 -3557.580859    0.010000 -3557.590859     0.0025    0.007500        0.000000       3.0         -3557.583359                 1.0         False
7   -3557.578359   -3557.580859  566.096191 -3557.578359    0.010000 -3557.580859     0.0025    0.000000      -18.750000       1.0         -3557.583359                 1.0         False
8   -3358.575859   -3538.830811  566.096191 -3358.575859  199.002500 -3538.830811     0.0025  180.252451       80.252500       1.0         -3557.583359                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:15:57]  --------------------------------------------------------------------------------
[09/27 15:15:57]  Iteration: 80 (1 solution, 78 counterexamples)
[09/27 15:16:13]  Generator returned sat in 12.696813 secs.
[09/27 15:16:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:16:15]  Improved gap from 0.0 to 50.0
[09/27 15:16:15]  Improved number of small numbers from 43 to 114 out of a max of 114
[09/27 15:16:15]  Verifer returned sat in 2.106153 secs.
[09/27 15:16:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4122.043945   -4229.643066  434.848877 -4122.043945    0.057129 -4229.643066        0.0  107.599121      100.000000       2.0         -4229.643066                -1.0            -1
1   -4122.043945   -4122.101074  434.848877 -4122.043945    0.057129 -4122.101074        0.0    0.057129        0.000000       2.0         -4229.643066                 0.0         False
2   -4122.043945   -4122.043945  484.848877 -4122.043945    0.057129 -4122.043945        0.0    0.000000      -50.000000       3.0         -4229.643066                 0.0         False
3   -3872.101074   -3991.986328  484.848877 -3872.101074  249.942871 -3991.986328        0.0  119.885254       99.942871       1.0         -4229.643066                 1.0          True
4   -3872.101074   -3956.062988  484.848877 -3872.101074  119.828369 -3956.062988        0.0   83.961914       -0.057129       2.0         -3872.101074                 0.0         False
5   -3872.043945   -3872.043945  534.848877 -3872.043945   84.019043 -3872.043945        0.0    0.000000      -50.000000       1.0         -3872.043945                 0.0         False
6   -3746.043945   -3812.691406  534.848877 -3746.043945  126.000000 -3812.691406        0.0   66.647461      -24.000000       1.0         -3872.043945                 0.0         False
7   -3722.043945   -3722.043945  584.848877 -3722.043945   90.647461 -3722.043945        0.0    0.000000      -50.000000       1.0         -3722.043945                 0.0         False
8   -3604.034424   -3672.043945  584.848877 -3604.034424  118.009521 -3672.043945        0.0   68.009521      -31.990479       1.0         -3722.043945                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:16:16]  --------------------------------------------------------------------------------
[09/27 15:16:16]  Iteration: 81 (1 solution, 79 counterexamples)
[09/27 15:16:51]  Generator returned sat in 31.880279 secs.
[09/27 15:16:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:16:52]  Improved number of small numbers from 33 to 49 out of a max of 113
[09/27 15:16:52]  Verifer returned sat in 1.314437 secs.
[09/27 15:16:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4422.072510   -4422.101074  484.848877 -4422.072510  300.057129 -4422.101074    0.000000    0.028564      -99.971313       2.0         -4422.101074                -1.0            -1
1   -4122.043945   -4222.101196  484.848877 -4122.043945  300.057129 -4222.101196    0.000000  100.057251      100.057251       1.0         -4422.101074                 0.0         False
2   -3922.072571   -4122.101318  484.848877 -3922.072571  300.028625 -4122.101318    0.028625  200.000122      200.000000       2.0         -3922.101196                 0.0         False
3   -3922.072571   -4049.137207  484.848877 -3922.072571   63.503578 -4049.137207    0.028625  127.036011      100.000000       2.0         -3922.101196                 0.0         False
4   -3922.072571   -3922.129822  484.848877 -3922.072571  127.007156 -3922.129822    0.028625    0.028625        0.000000       3.0         -3922.101196                 0.0         False
5   -3796.094040   -3922.101196  484.848877 -3796.094040  126.007156 -3922.101196    0.028625  125.978531       25.978531       4.0         -3796.122665                 1.0         False
6   -3796.094040   -3822.101196  484.848877 -3796.094040  125.007156 -3822.101196    0.028625   25.978531      -74.021469       2.0         -3796.122665                 1.0         False
7   -3572.058258   -3622.101196  484.848877 -3572.058258  250.014313 -3622.101196    0.028625   50.014313       50.014313       1.0         -3796.122665                 0.0         False
8   -3122.043945   -3572.058350  484.848877 -3122.043945  500.028625 -3572.058350  200.057251  249.957153      200.000000       1.0         -3796.122665                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=3277269/16384, 
.[0m
[09/27 15:16:53]  --------------------------------------------------------------------------------
[09/27 15:16:53]  Iteration: 82 (1 solution, 80 counterexamples)
[09/27 15:17:35]  Generator returned sat in 38.911585 secs.
[09/27 15:17:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:17:36]  Improved gap from 0.0 to 45.3125
[09/27 15:17:36]  Improved number of small numbers from 51 to 114 out of a max of 114
[09/27 15:17:36]  Verifer returned sat in 1.294400 secs.
[09/27 15:17:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4238.336182   -4332.357178  495.104736 -4238.336182    0.057373 -4332.357178        0.0   94.020996       94.020752       2.0         -4332.357178                -1.0            -1
1   -4222.034180   -4238.278809  495.104736 -4222.034180  110.322998 -4238.278809        0.0   16.244629       10.322754       1.0         -4332.357178                 1.0         False
2   -4222.034180   -4222.034180  539.469238 -4222.034180    0.057373 -4222.034180        0.0    0.000000      -45.312744       2.0         -4222.034180                 0.0         False
3   -4058.086182   -4105.039307  539.469238 -4058.086182  163.947998 -4105.039307        0.0   46.953125       18.635254       1.0         -4222.034180                 1.0         False
4   -3876.721436   -4058.028809  539.469238 -3876.721436  228.317871 -4058.028809        0.0  181.307373      100.000000       1.0         -4222.034180                 0.0         False
5   -3876.721436   -3967.403564  539.469238 -3876.721436  181.250000 -3967.403564        0.0   90.682129        0.000000       2.0         -3876.721436                 0.0         False
6   -3876.721436   -3876.721436  594.156738 -3876.721436   90.625000 -3876.721436        0.0    0.000000      -45.312500       3.0         -3876.721436                 1.0         False
7   -3831.408936   -3831.408936  648.844238 -3831.408936   45.312500 -3831.408936        0.0    0.000000      -45.312500       1.0         -3831.408936                 1.0         False
8   -3603.789062   -3785.096436  648.844238 -3603.789062  227.619873 -3785.096436        0.0  181.307373       82.307373       1.0         -3831.408936                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:17:37]  --------------------------------------------------------------------------------
[09/27 15:17:37]  Iteration: 83 (1 solution, 81 counterexamples)
[09/27 15:17:51]  Generator returned sat in 11.682300 secs.
[09/27 15:17:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:17:53]  Improved number of small numbers from 58 to 64 out of a max of 113
[09/27 15:17:53]  Verifer returned sat in 1.297715 secs.
[09/27 15:17:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4223.308838   -4364.701309  661.006611 -4223.308838  305.045166 -4364.701309     0.0000  141.392471       44.432471       2.0         -4364.701309                -1.0            -1
1   -4059.658809   -4223.306309  661.006611 -4059.658809  305.042500 -4223.306309     0.0000  163.647500      108.082500       1.0         -4059.658809                 0.0         False
2   -3918.263809   -4167.741309  661.006611 -3918.263809  305.042500 -4167.741309     0.0000  249.477500      149.477500       2.0         -4059.658809                 0.0         False
3   -3918.263809   -4067.741309  661.006611 -3918.263809  149.482500 -4067.741309     0.0000  149.477500       49.477500       3.0         -3918.263809                 0.0         False
4   -3918.261309   -3918.261309  661.006611 -3918.261309  149.480000 -3918.261309     0.0000    0.000000      -50.520000       1.0         -3918.261309                 1.0         False
5   -3617.258809   -3767.741309  661.006611 -3617.258809  301.002500 -3767.741309     0.0000  150.482500      150.482500       1.0         -3918.261309                 0.0         False
6   -3267.738809   -3667.741455  661.006611 -3267.738809  500.002500 -3667.741455   200.0025  200.000146      200.000000       2.0         -3918.261309                 0.0         False
7   -3267.738809   -3617.256309  661.006611 -3267.738809    0.010000 -3617.256309   200.0025  149.515000      100.000000       2.0         -3467.741309                 0.0         False
8   -3267.738809   -3467.741455  661.006611 -3267.738809  149.512500 -3467.741455   200.0025    0.000146        0.000000       3.0         -3467.741309                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=80001/400, 
.[0m
[09/27 15:17:54]  --------------------------------------------------------------------------------
[09/27 15:17:54]  Iteration: 84 (1 solution, 82 counterexamples)
[09/27 15:18:07]  Generator returned sat in 9.972561 secs.
[09/27 15:18:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:18:07]  Improved gap from 0.0 to 100
[09/27 15:18:08]  Improved number of small numbers from 59 to 72 out of a max of 114
[09/27 15:18:08]  Verifer returned sat in 1.621038 secs.
[09/27 15:18:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3914.745850   -4014.749268  408.013486 -3914.745850    0.001221 -4014.749268    0.000000  100.003418      100.002334       6.0         -4014.749268                -1.0            -1
1   -3914.745850   -4014.748184  408.013486 -3914.745850    0.001221 -4014.748184    0.000000  100.002334        0.002334       2.0         -4014.749268                 1.0         False
2   -3614.749434   -3914.744434  408.013486 -3614.749434  399.998750 -3914.744434    0.000000  299.995000      199.998750       1.0         -4014.749268                 0.0         False
3   -3514.746934   -3814.748184  408.013486 -3514.746934  399.997500 -3814.748184    0.001250  300.000000      200.000000       2.0         -3514.748184                 0.0         False
4   -3514.746934   -3614.748184  408.013486 -3514.746934    0.010000 -3614.748184    0.001250  100.000000      100.000000       2.0         -3514.748184                 0.0         False
5   -3415.736934   -3614.748184  408.013486 -3415.736934  199.010000 -3614.748184    0.001250  199.010000       99.010000       2.0         -3514.748184                 0.0         False
6   -3266.738809   -3414.748184  408.013486 -3266.738809  348.008125 -3414.748184    0.001250  148.008125      148.008125       1.0         -3514.748184                 0.0         False
7   -2867.738809   -3414.746826  408.013486 -2867.738809  547.008125 -3414.746826  247.009375  299.998643      200.000000       2.0         -3514.748184                 0.0         False
8   -2867.738809   -3314.748047  408.013486 -2867.738809    0.010000 -3314.748047  247.009375  199.999863      100.000000       3.0         -3114.748184                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=395213/1600, 
.[0m
[09/27 15:18:09]  --------------------------------------------------------------------------------
[09/27 15:18:09]  Iteration: 85 (1 solution, 83 counterexamples)
[09/27 15:18:51]  Generator returned sat in 38.628855 secs.
[09/27 15:18:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:18:51]  Improved gap from 0.0 to 100
[09/27 15:18:52]  Improved number of small numbers from 67 to 112 out of a max of 114
[09/27 15:18:52]  Verifer returned sat in 1.026136 secs.
[09/27 15:18:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4014.747803   -4114.748047  508.013428 -4014.747803    0.000625 -4114.748047    0.000000  100.000244      100.000244       2.0         -4114.748047                -1.0            -1
1   -4014.747803   -4014.748047  508.013428 -4014.747803    0.000732 -4014.748047    0.000000    0.000244        0.000244       3.0         -4114.748047                 1.0         False
2   -3714.746826   -3914.748291  508.013428 -3714.746826  300.001221 -3914.748291    0.001221  200.000244      200.000000       1.0         -4114.748047                 1.0          True
3   -3614.746338   -3882.080566  508.013428 -3614.746338  300.000732 -3882.080566    0.001709  267.332520      200.000000       2.0         -3614.748047                 0.0         False
4   -3614.746338   -3748.748535  508.013428 -3614.746338    1.000000 -3748.748535    0.001709  134.000488      100.000000       3.0         -3614.748047                 1.0         False
5   -3614.746338   -3614.757559  508.013428 -3614.746338    0.010000 -3614.757559    0.001709    0.009512        0.000000       3.0         -3614.748047                 1.0         False
6   -3614.745850   -3614.747559  508.013428 -3614.745850    0.010000 -3614.747559    0.001709    0.000000      -99.999512       1.0         -3614.748047                 1.0         False
7   -3214.746338   -3414.748047  508.013428 -3214.746338  399.999512 -3414.748047    0.001709  200.000000      200.000000       1.0         -3614.748047                 0.0         False
8   -2914.745605   -3414.747803  508.013428 -2914.745605  500.000732 -3414.747803  200.002441  299.999756      200.000000       2.0         -3614.748047                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819203/4096, 
.[0m
[09/27 15:18:52]  --------------------------------------------------------------------------------
[09/27 15:18:52]  Iteration: 86 (1 solution, 84 counterexamples)
[09/27 15:19:03]  Generator returned sat in 7.450284 secs.
[09/27 15:19:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:19:04]  Improved gap from 0.0 to 51.5625
[09/27 15:19:04]  Improved number of small numbers from 34 to 114 out of a max of 114
[09/27 15:19:04]  Verifer returned sat in 1.100954 secs.
[09/27 15:19:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4014.027588   -4171.477539  564.742920 -4014.027588    0.057129 -4171.477539  56.729492  100.720459      100.720459       2.0         -4171.477539                -1.0            -1
1   -4014.027588   -4073.016113  564.742920 -4014.027588    0.057129 -4073.016113  56.729492    2.259033        0.720459       3.0         -4171.477539                 1.0         False
2   -4013.970703   -4070.700195  612.403076 -4013.970703    2.315918 -4070.700195  56.729492    0.000000      -51.562500       1.0         -4171.477539                 1.0          True
3   -3846.424805   -3935.955566  612.403076 -3846.424805  167.545898 -3935.955566  56.729492   32.801270       15.983398       1.0         -4171.477539                 0.0         False
4   -3762.465088   -3903.097168  612.403076 -3762.465088  116.760986 -3903.097168  56.729492   83.902588       -0.056885       1.0         -3819.194580                 0.0         False
5   -3762.408203   -3819.137695  660.840576 -3762.408203   83.959473 -3819.137695  56.729492    0.000000      -51.562500       1.0         -3819.137695                 0.0         False
6   -3637.626953   -3756.368652  660.840576 -3637.626953  124.781250 -3756.368652  56.729492   62.012207      -26.781250       1.0         -3819.137695                 0.0         False
7   -3610.845703   -3667.575195  709.277832 -3610.845703   88.793457 -3667.575195  56.729492    0.000000      -51.562744       1.0         -3667.575195                 0.0         False
8   -3494.084717   -3616.012451  709.277832 -3494.084717  116.760986 -3616.012451  56.729492   65.198242      -34.801758       1.0         -3667.575195                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:19:05]  --------------------------------------------------------------------------------
[09/27 15:19:05]  Iteration: 87 (1 solution, 85 counterexamples)
[09/27 15:19:46]  Generator returned sat in 38.235201 secs.
[09/27 15:19:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:19:47]  Improved gap from 0.01 to 100
[09/27 15:19:47]  Improved number of small numbers from 73 to 114 out of a max of 114
[09/27 15:19:47]  Verifer returned sat in 0.549110 secs.
[09/27 15:19:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4014.027588   -4213.861084  607.126221 -4014.027588    0.055420 -4213.861084    0.000000  199.833496      199.833252       2.0         -4213.861084                -1.0            -1
1   -4014.027588   -4113.861084  607.126221 -4014.027588  100.000000 -4113.861084    0.000000   99.833496       99.833252       3.0         -4213.861084                 1.0         False
2   -4013.916504   -4013.971924  607.126221 -4013.916504   99.944580 -4013.971924    0.000000    0.055420       -0.055664       1.0         -4013.916504                 1.0          True
3   -3914.208008   -3914.263916  607.126221 -3914.208008   99.763916 -3914.263916    0.000000    0.055908       -0.347168       1.0         -3914.208008                 0.0         False
4   -3714.736084   -3913.860840  607.126221 -3714.736084  199.527832 -3913.860840    0.000000  199.124756       99.124756       1.0         -3914.208008                 0.0         False
5   -3514.805176   -3713.861084  607.126221 -3514.805176  399.055664 -3713.861084    0.000000  199.055908      199.055664       1.0         -3914.208008                 0.0         False
6   -2915.749756   -3713.860840  607.126221 -2915.749756  798.111328 -3713.860840  498.111084  300.000000      200.000000       2.0         -3914.208008                 0.0         False
7   -2815.694092   -3514.749756  607.126221 -2815.694092  400.055664 -3514.749756  498.166748  200.888916      200.000000       2.0         -3313.860840                 1.0          True
8   -2815.555176   -3513.860840  607.126221 -2815.555176  201.027832 -3513.860840  498.166748  200.138916      100.138916       3.0         -3313.721924                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2040491/4096, 
.[0m
[09/27 15:19:48]  --------------------------------------------------------------------------------
[09/27 15:19:48]  Iteration: 88 (1 solution, 86 counterexamples)
[09/27 15:20:00]  Generator returned sat in 8.711549 secs.
[09/27 15:20:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:20:01]  Improved gap from 0.0 to 18.75
[09/27 15:20:01]  Improved number of small numbers from 70 to 114 out of a max of 114
[09/27 15:20:01]  Verifer returned sat in 0.975585 secs.
[09/27 15:20:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4333.747559   -4423.690430  607.125977 -4333.747559  299.056641 -4423.690430        0.0   89.942871       89.942871       1.0         -4423.690430                -1.0            -1
1   -4124.690430   -4333.690430  607.125977 -4124.690430  299.000000 -4333.690430        0.0  209.000000      199.000000       1.0         -4124.690430                 0.0         False
2   -4124.690430   -4223.690674  607.125977 -4124.690430  208.943359 -4223.690674        0.0   99.000244       99.000000       2.0         -4124.690430                 0.0         False
3   -4124.633789   -4124.690430  607.125977 -4124.633789   99.056885 -4124.690430        0.0    0.056641       -0.943359       3.0         -4124.633789                 1.0         False
4   -4123.690430   -4123.690430  688.183105 -4123.690430    1.000000 -4123.690430        0.0    0.000000      -18.942871       1.0         -4123.690430                 1.0         False
5   -3914.690430   -4013.747314  688.183105 -3914.690430  209.000000 -4013.747314        0.0   99.056885       90.057129       1.0         -4123.690430                 0.0         False
6   -3804.803955   -4004.747314  688.183105 -3804.803955  208.943359 -4004.747314        0.0  199.943359       99.943604       2.0         -3804.803955                 0.0         False
7   -3804.803955   -3805.747314  688.183105 -3804.803955    1.000000 -3805.747314        0.0    0.943359       -0.056396       2.0         -3804.803955                 1.0         False
8   -3804.747314   -3804.747314  688.183105 -3804.747314    1.000000 -3804.747314        0.0    0.000000      -99.999756       1.0         -3804.803955                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:20:02]  --------------------------------------------------------------------------------
[09/27 15:20:02]  Iteration: 89 (1 solution, 87 counterexamples)
[09/27 15:20:27]  Generator returned sat in 21.752476 secs.
[09/27 15:20:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:20:28]  Improved gap from 0.0 to 18.75
[09/27 15:20:28]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:20:28]  Verifer returned sat in 1.009003 secs.
[09/27 15:20:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4199.693848   -4299.693848  383.129395 -4199.693848    0.056396 -4299.693848   0.000000  100.000000        0.000000       7.0         -4299.693848                -1.0            -1
1   -4199.693848   -4199.693848  464.379395 -4199.693848  100.000000 -4199.693848   0.000000    0.000000      -18.750000       8.0         -4299.693848                 0.0         False
2   -4124.670410   -4124.670410  489.355957 -4124.670410   75.023438 -4124.670410   0.000000    0.000000      -18.750000       1.0         -4124.670410                 1.0          True
3   -3805.977051   -4005.920410  489.355957 -3805.977051  318.693359 -4005.920410   0.000000  199.943359      199.943359       1.0         -4124.670410                 0.0         False
4   -3686.227051   -4005.920410  489.355957 -3686.227051  319.693359 -4005.920410  19.693359  300.000000      200.000000       1.0         -4124.670410                 0.0         False
5   -3686.227051   -3805.920654  489.355957 -3686.227051   97.886719 -3805.920654  19.693359  100.000244      100.000000       2.0         -3705.920410                 0.0         False
6   -3686.227051   -3805.864014  489.355957 -3686.227051   98.886719 -3805.864014  19.693359   99.943604        0.000000       3.0         -3705.920410                 0.0         False
7   -3686.227051   -3705.920410  570.605957 -3686.227051   99.886719 -3705.920410  19.693359    0.000000      -18.750000       4.0         -3705.920410                 0.0         False
8   -3585.340332   -3687.170410  570.605957 -3585.340332  100.886719 -3687.170410  19.693359   82.136719      -17.863281       1.0         -3705.920410                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:20:29]  --------------------------------------------------------------------------------
[09/27 15:20:29]  Iteration: 90 (1 solution, 88 counterexamples)
[09/27 15:20:49]  Generator returned sat in 17.504233 secs.
[09/27 15:20:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:20:51]  Improved number of small numbers from 66 to 74 out of a max of 113
[09/27 15:20:51]  Verifer returned sat in 1.168853 secs.
[09/27 15:20:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4105.807617   -4371.769938  489.355957 -4105.807617    0.028076 -4371.769938    0.000000  265.962321           200.0       2.0         -4371.769938                -1.0            -1
1   -4105.807617   -4205.835876  489.355957 -4105.807617    0.056396 -4205.835876    0.000000  100.028259           100.0       2.0         -4371.769938                 0.0         False
2   -4105.807617   -4205.807617  489.355957 -4105.807617    0.028320 -4205.807617    0.000000  100.000000             0.0       3.0         -4105.807617                 0.0         False
3   -4105.807617   -4105.807617  489.355957 -4105.807617    0.028259 -4105.807617    0.000000    0.000000          -100.0       4.0         -4105.807617                 0.0         False
4   -3705.807617   -3905.807617  489.355957 -3705.807617  400.000000 -3905.807617    0.000000  200.000000           200.0       1.0         -4105.807617                 1.0         False
5   -3554.793488   -3811.638062  489.355957 -3554.793488  351.014130 -3811.638062   51.014130  205.830444           200.0       2.0         -3605.807617                 0.0         False
6   -3554.793488   -3705.835876  489.355957 -3554.793488  198.084778 -3705.835876   51.014130  100.028259           100.0       3.0         -3605.807617                 0.0         False
7   -3354.793488   -3705.807617  489.355957 -3354.793488  300.028259 -3705.807617   51.014130  300.000000           200.0       4.0         -3605.807617                 0.0         False
8   -2753.736969   -3605.779541  489.355957 -2753.736969  901.056519 -3605.779541  552.070648  299.971924           200.0       2.0         -3605.807617                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=18090251/32768, 
.[0m
[09/27 15:20:51]  --------------------------------------------------------------------------------
[09/27 15:20:51]  Iteration: 91 (1 solution, 89 counterexamples)
[09/27 15:21:13]  Generator returned sat in 18.769291 secs.
[09/27 15:21:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:21:14]  Improved gap from 0.0 to 100
[09/27 15:21:15]  Improved number of small numbers from 54 to 94 out of a max of 114
[09/27 15:21:15]  Verifer returned sat in 1.151730 secs.
[09/27 15:21:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4054.793701   -4154.737305  489.355957 -4054.793701  287.520996 -4154.737305    0.000000   99.943604       99.943604       2.0         -4154.737305                -1.0            -1
1   -3867.216064   -4054.737305  489.355957 -3867.216064  287.521240 -4054.737305    0.000000  187.521240      187.521240       1.0         -4154.737305                 0.0         False
2   -3867.103271   -4054.737061  489.355957 -3867.103271  187.634033 -4054.737061    0.000000  187.633789       87.634033       2.0         -3867.103271                 0.0         False
3   -3867.103271   -3867.159546  489.355957 -3867.103271   18.746475 -3867.159546    0.000000    0.056274      -12.365967       2.0         -3867.103271                 0.0         False
4   -3829.666595   -3829.722992  489.355957 -3829.666595   37.492950 -3829.722992    0.000000    0.056396      -74.929291       1.0         -3867.103271                 0.0         False
5   -3754.737091   -3754.737091  489.355957 -3754.737091   74.985901 -3754.737091    0.000000    0.000000      -99.999786       1.0         -3867.103271                 0.0         False
6   -3604.765289   -3654.737061  489.355957 -3604.765289  149.971802 -3654.737061    0.000000   49.971771      -50.027985       1.0         -3867.103271                 0.0         False
7   -3354.793457   -3454.737305  489.355957 -3354.793457  299.943604 -3454.737305    0.000000   99.943848       99.943848       1.0         -3867.103271                 0.0         False
8   -2854.850098   -3354.737305  489.355957 -2854.850098  599.887207 -3354.737305  299.887207  200.000000      200.000000       1.0         -3867.103271                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=614169/2048, 
.[0m
[09/27 15:21:16]  --------------------------------------------------------------------------------
[09/27 15:21:16]  Iteration: 92 (1 solution, 90 counterexamples)
[09/27 15:21:35]  Generator returned sat in 15.838602 secs.
[09/27 15:21:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:21:35]  Improved number of small numbers from 58 to 113 out of a max of 113
[09/27 15:21:35]  Verifer returned sat in 0.510805 secs.
[09/27 15:21:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4166.247803   -4317.418457  489.355957 -4166.247803  299.943848 -4317.418457    0.000000  151.170654       51.170654       2.0         -4317.418457                -1.0            -1
1   -4017.474609   -4166.191650  489.355957 -4017.474609  299.943848 -4166.191650    0.000000  148.717041       99.943848       1.0         -4317.418457                 1.0         False
2   -3867.103516   -4017.418701  489.355957 -3867.103516  299.088135 -4017.418701    0.000000  150.315186      150.314941       1.0         -3867.103516                 0.0         False
3   -3867.103516   -3917.418457  489.355957 -3867.103516  134.000000 -3917.418457    0.000000   50.314941       50.314941       2.0         -3867.103516                 0.0         False
4   -3717.418457   -3867.047119  489.355957 -3717.418457  200.000000 -3867.047119    0.000000  149.628662      100.000000       1.0         -3867.103516                 1.0         False
5   -3717.418457   -3717.474609  489.355957 -3717.418457  149.572266 -3717.474609    0.000000    0.056152        0.000000       2.0         -3717.418457                 0.0         False
6   -3494.116211   -3717.418457  489.355957 -3494.116211  223.358398 -3717.418457    0.000000  223.302246      123.302246       3.0         -3717.418457                 1.0         False
7   -3383.380859   -3517.418457  489.355957 -3383.380859  334.037598 -3517.418457    0.000000  134.037598      134.037598       2.0         -3717.418457                 1.0         False
8   -3017.362061   -3417.418701  489.355957 -3017.362061  500.056396 -3417.418701  200.056396  200.000244      200.000000       2.0         -3717.418457                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819431/4096, 
.[0m
[09/27 15:21:36]  --------------------------------------------------------------------------------
[09/27 15:21:36]  Iteration: 93 (1 solution, 91 counterexamples)
[09/27 15:21:50]  Generator returned sat in 10.923479 secs.
[09/27 15:21:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:21:53]  Improved gap from 0.05615234375 to 50.0
[09/27 15:21:53]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:21:53]  Verifer returned sat in 2.261290 secs.
[09/27 15:21:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4166.247803   -4316.191650  439.355957 -4166.247803  150.056152 -4316.191650    0.000000  149.943848       49.943848       3.0         -4316.191650                -1.0            -1
1   -4166.191650   -4166.191650  439.355957 -4166.191650  150.000000 -4166.191650    0.000000    0.000000      -50.000000       1.0         -4166.191650                 1.0         False
2   -4016.247803   -4041.191650  439.355957 -4016.247803  149.943848 -4041.191650    0.000000   24.943848       -0.056152       1.0         -4016.247803                 0.0         False
3   -4016.191650   -4016.191650  489.355957 -4016.191650   25.000000 -4016.191650    0.000000    0.000000      -50.000000       1.0         -4016.191650                 0.0         False
4   -3966.191650   -3966.191650  539.355957 -3966.191650   50.000000 -3966.191650    0.000000    0.000000      -50.000000       1.0         -4016.191650                 0.0         False
5   -3866.191650   -3916.191650  539.355957 -3866.191650  100.000000 -3916.191650    0.000000   50.000000      -50.000000       1.0         -4016.191650                 0.0         False
6   -3716.191650   -3816.191650  539.355957 -3716.191650  200.000000 -3816.191650    0.000000  100.000000        0.000000       1.0         -4016.191650                 0.0         False
7   -3416.191650   -3716.135498  539.355957 -3416.191650  400.000000 -3716.135498    0.000000  299.943848      200.000000       1.0         -4016.191650                 0.0         False
8   -2916.135498   -3516.191650  539.355957 -2916.135498  800.000000 -3516.191650  400.056152  200.000000      200.000000       2.0         -4016.191650                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819315/2048, 
.[0m
[09/27 15:21:54]  --------------------------------------------------------------------------------
[09/27 15:21:54]  Iteration: 94 (1 solution, 92 counterexamples)
[09/27 15:22:43]  Generator returned sat in 46.179667 secs.
[09/27 15:22:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:22:44]  Improved number of small numbers from 71 to 73 out of a max of 113
[09/27 15:22:44]  Verifer returned sat in 0.836364 secs.
[09/27 15:22:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4567.179395   -4767.179395  539.355713 -4567.179395  599.987305 -4767.179395     0.0000  200.000000           200.0       3.0         -4767.179395                -1.0            -1
1   -4167.191895   -4667.179395  539.355713 -4167.191895  599.987500 -4667.179395   299.9875  200.000000           200.0       3.0         -4767.179395                 0.0         False
2   -4067.189395   -4667.179395  539.355713 -4067.189395  300.002500 -4667.179395   299.9900  300.000000           200.0       3.0         -4367.179395                 0.0         False
3   -4067.189395   -4567.179395  539.355713 -4067.189395   75.010000 -4567.179395   299.9900  200.000000           100.0       4.0         -4367.179395                 0.0         False
4   -3818.169395   -4467.179395  539.355713 -3818.169395  449.020000 -4467.179395   349.0100  300.000000           200.0       4.0         -4367.179395                 1.0         False
5   -3818.169395   -4367.179395  539.355713 -3818.169395    0.010000 -4367.179395   349.0100  200.000000           100.0       4.0         -4167.179395                 1.0         False
6   -3569.149395   -4167.182129  539.355713 -3569.149395  449.020000 -4167.182129   398.0300  200.002734           200.0       3.0         -4167.179395                 1.0         False
7   -3569.149395   -4167.179395  539.355713 -3569.149395    0.010000 -4167.179395   398.0300  200.000000           100.0       4.0         -3967.179395                 0.0         False
8   -3320.129395   -4067.179395  539.355713 -3320.129395  449.020000 -4067.179395   447.0500  300.000000           200.0       3.0         -3967.179395                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=2451/25, 
.[0m
[09/27 15:22:45]  --------------------------------------------------------------------------------
[09/27 15:22:45]  Iteration: 95 (1 solution, 93 counterexamples)
[09/27 15:23:03]  Generator returned sat in 15.552250 secs.
[09/27 15:23:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:23:04]  Improved number of small numbers from 62 to 109 out of a max of 113
[09/27 15:23:04]  Verifer returned sat in 0.879029 secs.
[09/27 15:23:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4167.303955   -4367.135742  39.312256 -4167.303955  199.943848 -4367.135742    0.000000  199.831787       99.832031       1.0         -4367.135742                -1.0            -1
1   -4167.191895   -4167.247803  39.312256 -4167.191895  199.943848 -4167.247803    0.000000    0.055908       -0.055908       1.0         -4367.135742                 0.0         False
2   -3967.359863   -4167.135986  39.312256 -3967.359863  199.887939 -4167.135986    0.000000  199.776123       99.776123       1.0         -3967.359863                 0.0         False
3   -3967.303955   -4066.715820  39.312256 -3967.303955  199.832031 -4066.715820    0.000000   99.411865       -0.167969       2.0         -3967.303955                 0.0         False
4   -3765.967773   -3967.135742  39.312256 -3765.967773  300.748047 -3967.135742    0.000000  201.167969      101.168213       1.0         -3967.303955                 1.0         False
5   -3765.967773   -3867.135864  39.312256 -3765.967773  201.112061 -3867.135864    0.000000  101.168091        1.168213       2.0         -3765.967773                 0.0         False
6   -3564.467773   -3735.011719  39.312256 -3564.467773  302.668091 -3735.011719    0.000000  170.543945      102.668213       1.0         -3765.967773                 1.0         False
7   -3402.307617   -3567.135986  39.312256 -3402.307617  332.704102 -3567.135986    0.000000  164.828369      164.828369       2.0         -3765.967773                 0.0         False
8   -3067.079834   -3564.411621  39.312256 -3067.079834  500.056152 -3564.411621  200.056152  297.275635      200.000000       2.0         -3765.967773                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409715/2048, 
.[0m
[09/27 15:23:05]  --------------------------------------------------------------------------------
[09/27 15:23:05]  Iteration: 96 (1 solution, 94 counterexamples)
[09/27 15:23:28]  Generator returned sat in 20.272965 secs.
[09/27 15:23:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:23:29]  Improved gap from 0.0 to 1.5625
[09/27 15:23:30]  Improved number of small numbers from 66 to 85 out of a max of 114
[09/27 15:23:30]  Verifer returned sat in 0.996301 secs.
[09/27 15:23:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2970.991455   -2970.993896   39.312256 -2970.991455    0.001221 -2970.993896    0.00000    0.002441        0.000068       5.0         -2970.993896                -1.0            -1
1   -2970.991455   -2970.991455   39.312256 -2970.991455    0.001465 -2970.991455    0.00000    0.000000      -99.999932       3.0         -2970.993896                 0.0         False
2   -2670.992920   -2869.994023   39.312256 -2670.992920  299.998535 -2869.994023    0.00000  199.001104       99.998604       1.0         -2970.993896                 0.0         False
3   -2570.992773   -2670.991523   39.312256 -2570.992773  299.001250 -2670.991523    0.00000   99.998750       99.998750       1.0         -2570.992773                 0.0         False
4   -2370.990273   -2570.991699   39.312256 -2370.990273  300.001250 -2570.991699    0.00125  200.000176      200.000000       1.0         -2570.992773                 0.0         False
5   -2370.990273   -2470.991699   39.312256 -2370.990273    0.010000 -2470.991699    0.00125  100.000176      100.000000       2.0         -2370.991523                 0.0         False
6   -2370.990273   -2373.000273   39.312256 -2370.990273    1.010000 -2373.000273    0.00125    2.008750        0.000000       3.0         -2370.991523                 0.0         False
7   -2370.989023   -2370.990273  136.301025 -2370.989023    2.010000 -2370.990273    0.00125    0.000000       -3.009980       1.0         -2370.991523                 0.0         False
8   -2367.979023   -2367.980273  136.301025 -2367.979023    3.010000 -2367.980273    0.00125    0.000000      -99.999980       1.0         -2370.991523                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:23:30]  --------------------------------------------------------------------------------
[09/27 15:23:30]  Iteration: 97 (1 solution, 95 counterexamples)
[09/27 15:23:57]  Generator returned sat in 23.458724 secs.
[09/27 15:23:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:23:59]  Improved gap from 0.02789306640625 to 10.9375
[09/27 15:23:59]  Improved number of small numbers from 43 to 114 out of a max of 114
[09/27 15:23:59]  Verifer returned sat in 1.842726 secs.
[09/27 15:23:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3125.506104   -3225.394287 -89.678955 -3125.506104    0.055664 -3225.394287        0.0   99.888184       99.888184       9.0         -3225.394287                -1.0            -1
1   -3125.449951   -3125.449951 -89.678955 -3125.449951   99.944336 -3125.449951        0.0    0.000000       -0.055664       1.0         -3225.394287                 1.0         False
2   -3125.394287   -3125.394287  -0.616455 -3125.394287    0.055664 -3125.394287        0.0    0.000000      -10.937500       1.0         -3125.394287                 0.0         False
3   -3013.499268   -3014.456787  -0.616455 -3013.499268  111.895020 -3014.456787        0.0    0.957520        0.957520       1.0         -3125.394287                 0.0         False
4   -2804.519287   -3013.443359  -0.616455 -2804.519287  209.937500 -3013.443359        0.0  208.924072      109.937500       1.0         -3125.394287                 0.0         False
5   -2804.519287   -2815.456787  -0.616455 -2804.519287  111.006592 -2815.456787        0.0   10.937500        9.937500       2.0         -2804.519287                 0.0         False
6   -2705.450195   -2814.456787  -0.616455 -2705.450195  110.006592 -2814.456787        0.0  109.006592        9.006592       3.0         -2705.450195                 1.0         False
7   -2705.450195   -2705.450195  79.439453 -2705.450195  109.006592 -2705.450195        0.0    0.000000      -10.937500       2.0         -2705.450195                 1.0         False
8   -2597.443604   -2694.512695  79.439453 -2597.443604  108.006592 -2694.512695        0.0   97.069092       -2.930908       1.0         -2597.443604                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:24:00]  --------------------------------------------------------------------------------
[09/27 15:24:00]  Iteration: 98 (1 solution, 96 counterexamples)
[09/27 15:24:29]  Generator returned sat in 26.369184 secs.
[09/27 15:24:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:24:31]  Improved gap from 0.0 to 43.75
[09/27 15:24:31]  Improved number of small numbers from 88 to 114 out of a max of 114
[09/27 15:24:31]  Verifer returned sat in 2.229216 secs.
[09/27 15:24:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3503.222412   -3503.278320  467.125488 -3503.222412    0.055664 -3503.278320        0.0    0.055908       -4.805664       9.0         -3503.278320                -1.0            -1
1   -3398.416748   -3417.722168  467.125488 -3398.416748  104.861572 -3417.722168        0.0   19.305420        0.000000       1.0         -3503.278320                 1.0         False
2   -3398.416748   -3398.416748  523.375488 -3398.416748   19.250000 -3398.416748        0.0    0.000000      -43.750000       2.0         -3398.416748                 0.0         False
3   -3235.778320   -3278.472412  523.375488 -3235.778320  162.638428 -3278.472412        0.0   42.694092       18.888428       1.0         -3398.416748                 1.0         False
4   -3054.666504   -3235.722168  523.375488 -3054.666504  223.805908 -3235.722168        0.0  181.055664      100.000244       1.0         -3398.416748                 0.0         False
5   -3054.666504   -3154.666504  523.375488 -3054.666504  181.000000 -3154.666504        0.0  100.000000        0.000244       2.0         -3054.666504                 0.0         False
6   -3054.666504   -3054.666504  579.625244 -3054.666504   89.500000 -3054.666504        0.0    0.000000      -43.750000       3.0         -3054.666504                 1.0         False
7   -3010.916504   -3010.916504  635.875244 -3010.916504   43.750000 -3010.916504        0.0    0.000000      -43.750000       1.0         -3010.916504                 1.0         False
8   -2787.110840   -2967.166504  635.875244 -2787.110840  223.805664 -2967.166504        0.0  180.055664       80.055664       1.0         -3010.916504                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:24:32]  --------------------------------------------------------------------------------
[09/27 15:24:32]  Iteration: 99 (1 solution, 97 counterexamples)
[09/27 15:24:44]  Generator returned sat in 9.165233 secs.
[09/27 15:24:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:24:45]  Improved gap from 0.0 to 100
[09/27 15:24:46]  Improved number of small numbers from 34 to 51 out of a max of 114
[09/27 15:24:46]  Verifer returned sat in 1.557813 secs.
[09/27 15:24:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3694.404297   -3694.460205  663.16875 -3694.404297    0.027832 -3694.460205    0.000000    0.055908        0.055713       4.0         -3694.460205                -1.0            -1
1   -3694.404297   -3694.460010  663.16875 -3694.404297    0.027832 -3694.460010    0.000000    0.055713      -99.944287       3.0         -3694.460205                 1.0         False
2   -3366.149624   -3545.192354  663.16875 -3366.149624  328.310386 -3545.192354    0.000000  179.042730      128.310386       1.0         -3694.460205                 1.0          True
3   -3366.121731   -3454.601256  663.16875 -3366.121731  179.070623 -3454.601256    0.000000   88.479525       28.338279       2.0         -3366.121731                 0.0         False
4   -3366.065945   -3366.093838  663.16875 -3366.065945   88.535312 -3366.093838    0.000000    0.027893      -71.605935       1.0         -3366.065945                 1.0         False
5   -2994.460010   -3194.460010  663.16875 -2994.460010  371.633828 -3194.460010    0.000000  200.000000      200.000000       1.0         -3366.065945                 0.0         False
6   -2658.910752   -3094.460010  663.16875 -2658.910752  535.549258 -3094.460010  235.549258  200.000000      200.000000       2.0         -3366.065945                 0.0         False
7   -2658.910752   -2994.460205  663.16875 -2658.910752  179.070623 -2994.460205  235.549258  100.000195      100.000000       3.0         -2894.460010                 1.0          True
8   -2658.910752   -2994.432129  663.16875 -2658.910752   88.535312 -2994.432129  235.549258   99.972119        0.000000       3.0         -2894.460010                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=84903259/360448, 
.[0m
[09/27 15:24:47]  --------------------------------------------------------------------------------
[09/27 15:24:47]  Iteration: 100 (1 solution, 98 counterexamples)
[09/27 15:25:07]  Generator returned sat in 17.366030 secs.
[09/27 15:25:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:08]  Improved gap from 0.0 to 48.4375
[09/27 15:25:08]  Improved number of small numbers from 51 to 114 out of a max of 114
[09/27 15:25:08]  Verifer returned sat in 1.117936 secs.
[09/27 15:25:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3591.353027   -3591.380615  663.168945 -3591.353027    0.028076 -3591.380615    0.000000    0.027588       -0.027832       4.0         -3591.380615                -1.0            -1
1   -3591.324951   -3591.324951  714.731201 -3591.324951    0.055664 -3591.324951    0.000000    0.000000      -48.437500       1.0         -3591.380615                 1.0         False
2   -3466.578125   -3466.606201  714.731201 -3466.578125  124.746826 -3466.606201    0.000000    0.028076      -23.690674       1.0         -3591.380615                 0.0         False
3   -3442.887451   -3442.887451  766.293701 -3442.887451   23.718750 -3442.887451    0.000000    0.000000      -48.437500       1.0         -3442.887451                 0.0         False
4   -3394.449951   -3394.449951  768.418945 -3394.449951   48.437500 -3394.449951    0.000000    0.000000      -97.874756       1.0         -3442.887451                 0.0         False
5   -3296.574951   -3296.574951  819.981201 -3296.574951   97.875000 -3296.574951    0.000000    0.000000      -48.437500       1.0         -3442.887451                 0.0         False
6   -3099.824951   -3242.637451  819.981201 -3099.824951  196.750000 -3242.637451    0.000000  142.812500       48.312500       1.0         -3442.887451                 0.0         False
7   -2848.137451   -3099.797119  819.981201 -2848.137451  394.500000 -3099.797119    0.000000  251.659668      200.000000       1.0         -3442.887451                 0.0         False
8   -2309.797119   -3048.137451  819.981201 -2309.797119  790.000000 -3048.137451  438.340332  300.000000      200.000000       2.0         -3442.887451                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=897721/2048, 
.[0m
[09/27 15:25:09]  --------------------------------------------------------------------------------
[09/27 15:25:09]  Iteration: 101 (1 solution, 99 counterexamples)
[09/27 15:25:23]  Generator returned sat in 10.958425 secs.
[09/27 15:25:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:24]  Verifer returned unsat in 0.212323 secs.
[09/27 15:25:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:24]  --------------------------------------------------------------------------------
[09/27 15:25:24]  Iteration: 102 (2 solution, 99 counterexamples)
[09/27 15:25:30]  Generator returned sat in 3.160125 secs.
[09/27 15:25:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:30]  Verifer returned unsat in 0.190529 secs.
[09/27 15:25:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:30]  --------------------------------------------------------------------------------
[09/27 15:25:30]  Iteration: 103 (3 solution, 99 counterexamples)
[09/27 15:25:37]  Generator returned sat in 3.319492 secs.
[09/27 15:25:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:37]  Verifer returned unsat in 0.230739 secs.
[09/27 15:25:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:37]  --------------------------------------------------------------------------------
[09/27 15:25:37]  Iteration: 104 (4 solution, 99 counterexamples)
[09/27 15:25:44]  Generator returned sat in 3.340161 secs.
[09/27 15:25:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:44]  Verifer returned unsat in 0.284144 secs.
[09/27 15:25:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:44]  --------------------------------------------------------------------------------
[09/27 15:25:44]  Iteration: 105 (5 solution, 99 counterexamples)
[09/27 15:25:51]  Generator returned sat in 3.368493 secs.
[09/27 15:25:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:51]  Verifer returned unsat in 0.254511 secs.
[09/27 15:25:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:51]  --------------------------------------------------------------------------------
[09/27 15:25:51]  Iteration: 106 (6 solution, 99 counterexamples)
[09/27 15:25:58]  Generator returned sat in 3.257602 secs.
[09/27 15:25:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:58]  Verifer returned unsat in 0.218185 secs.
[09/27 15:25:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:25:58]  --------------------------------------------------------------------------------
[09/27 15:25:58]  Iteration: 107 (7 solution, 99 counterexamples)
[09/27 15:26:07]  Generator returned sat in 5.327735 secs.
[09/27 15:26:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:26:07]  Improved gap from 0.0 to 1.5625
[09/27 15:26:08]  Improved number of small numbers from 88 to 108 out of a max of 114
[09/27 15:26:08]  Verifer returned sat in 1.151085 secs.
[09/27 15:26:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2654.953857   -2654.956543 -273.202393 -2654.953857    0.001465 -2654.956543        0.0    0.002686        0.000000       8.0         -2654.956543                -1.0            -1
1   -2654.953857   -2654.953857 -174.764893 -2654.953857    0.001465 -2654.953857        0.0    0.000000       -1.562500       5.0         -2654.956543                 1.0         False
2   -2454.952637   -2553.391357 -174.764893 -2454.952637  200.001221 -2553.391357        0.0   98.438721       98.438721       1.0         -2654.956543                 1.0          True
3   -2353.391357   -2453.391602 -174.764893 -2353.391357  200.000000 -2453.391602        0.0  100.000244      100.000000       1.0         -2353.391357                 0.0         False
4   -2252.391602   -2354.382568 -174.764893 -2252.391602  201.000000 -2354.382568        0.0  101.990967      100.999756       2.0         -2353.391357                 0.0         False
5   -2152.382568   -2353.391357 -174.764893 -2152.382568  202.000000 -2353.391357        0.0  201.008789      101.008789       3.0         -2353.391357                 0.0         False
6   -2152.382568   -2153.391357 -174.764893 -2152.382568    0.010000 -2153.391357        0.0    1.008789        1.008789       2.0         -2152.382568                 1.0         False
7   -2152.381357   -2152.381357  -77.337402 -2152.381357    1.010000 -2152.381357        0.0    0.000000       -1.562510       1.0         -2152.382568                 0.0         False
8   -2150.371357   -2150.371582  -77.337402 -2150.371357    2.010000 -2150.371582        0.0    0.000225      -99.552510       1.0         -2152.382568                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:26:09]  --------------------------------------------------------------------------------
[09/27 15:26:09]  Iteration: 108 (7 solution, 100 counterexamples)
[09/27 15:26:27]  Generator returned sat in 14.883597 secs.
[09/27 15:26:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:26:27]  Improved gap from 0.0 to 100
[09/27 15:26:28]  Improved number of small numbers from 27 to 53 out of a max of 114
[09/27 15:26:28]  Verifer returned sat in 1.390014 secs.
[09/27 15:26:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2553.447021   -2753.447021 -174.709351 -2553.447021    0.055664 -2753.447021    0.000000  200.000000      199.999878       2.0         -2753.447021                -1.0            -1
1   -2453.391357   -2753.446777 -174.709351 -2453.391357  300.055664 -2753.446777    0.055542  299.999878      200.000000       2.0         -2753.447021                 0.0         False
2   -2453.391357   -2553.447021 -174.709351 -2453.391357    0.055420 -2553.447021    0.055542  100.000122      100.000000       3.0         -2453.446899                 0.0         False
3   -2453.391357   -2553.446777 -174.709351 -2453.391357   98.944580 -2553.446777    0.055542   99.999878        0.000000       3.0         -2453.446899                 0.0         False
4   -2453.391357   -2453.446899 -174.709351 -2453.391357   99.944580 -2453.446899    0.055542    0.000000     -100.000000       4.0         -2453.446899                 0.0         False
5   -1852.474670   -2353.446899 -174.709351 -1852.474670  600.916687 -2353.446899  200.972229  300.000000      200.000000       1.0         -2453.446899                 1.0         False
6   -1851.016327   -2153.446899 -174.709351 -1851.016327  301.458344 -2153.446899  200.972229  101.458344      101.458344       2.0         -2051.988556                 0.0         False
7   -1650.016327   -2053.447021 -174.709351 -1650.016327  302.458344 -2053.447021  203.430573  200.000122      200.000000       3.0         -2051.988556                 0.0         False
8   -1650.016327   -2051.933105 -174.709351 -1650.016327  152.229172 -2051.933105  203.430573  198.486206      100.000000       2.0         -1853.446899                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=6664193/32768, 
.[0m
[09/27 15:26:29]  --------------------------------------------------------------------------------
[09/27 15:26:29]  Iteration: 109 (7 solution, 101 counterexamples)
[09/27 15:27:23]  Generator returned sat in 50.512166 secs.
[09/27 15:27:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:27:23]  Improved gap from 0.0 to 100
[09/27 15:27:24]  Improved number of small numbers from 61 to 77 out of a max of 114
[09/27 15:27:24]  Verifer returned sat in 1.032770 secs.
[09/27 15:27:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2351.479492   -2551.478516 -174.709351 -2351.479492  200.002441 -2551.478516    0.000000  199.999023      199.998867       9.0         -2551.478516                -1.0            -1
1   -2351.477051   -2551.478271 -174.709351 -2351.477051  200.001465 -2551.478271    0.000000  200.001221      100.001309       3.0         -2351.477051                 1.0         False
2   -2351.477051   -2351.478359 -174.709351 -2351.477051    0.001465 -2351.478359    0.000000    0.001309        0.001309       2.0         -2351.477051                 1.0         False
3   -2051.477109   -2251.478359 -174.709351 -2051.477109  300.001250 -2251.478359    0.001250  200.000000      200.000000       1.0         -2351.477051                 1.0         False
4   -2051.477109   -2251.477109 -174.709351 -2051.477109    0.010000 -2251.477109    0.001250  199.998750      100.000000       2.0         -2051.478359                 0.0         False
5   -2051.477109   -2052.475859 -174.709351 -2051.477109    1.000000 -2052.475859    0.001250    0.997500        0.000000       3.0         -2051.478359                 1.0         False
6   -2051.474609   -2051.477109 -174.709351 -2051.474609    1.000000 -2051.477109    0.001250    0.001250      -99.997500       1.0         -2051.478359                 1.0         False
7   -1750.473984   -1851.478359 -174.709351 -1750.473984  301.001875 -1851.478359    0.001250  101.003125      101.003125       1.0         -2051.478359                 0.0         False
8   -1250.478984   -1751.478516 -174.709351 -1250.478984  600.998125 -1751.478516  300.999375  200.000156      200.000000       2.0         -2051.478359                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=481597/1600, 
.[0m
[09/27 15:27:24]  --------------------------------------------------------------------------------
[09/27 15:27:24]  Iteration: 110 (7 solution, 102 counterexamples)
[09/27 15:27:46]  Generator returned sat in 17.844336 secs.
[09/27 15:27:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:27:46]  Improved number of small numbers from 54 to 113 out of a max of 113
[09/27 15:27:46]  Verifer returned sat in 0.377627 secs.
[09/27 15:27:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2450.977295   -2451.004639 -174.709473 -2450.977295    0.055176 -2451.004639    0.000000    0.027344        0.027344       9.0         -2451.004639                -1.0            -1
1   -2450.949463   -2450.977295 -174.709473 -2450.949463    0.055176 -2450.977295    0.000000    0.027832      -99.944824       9.0         -2451.004639                 1.0         False
2   -2051.477295   -2251.490723 -174.709473 -2051.477295  399.500000 -2251.490723    0.000000  200.013428      199.527344       1.0         -2451.004639                 1.0          True
3   -2051.477295   -2251.004639 -174.709473 -2051.477295   99.250000 -2251.004639    0.000000  199.527344       99.527344       2.0         -2051.477295                 0.0         False
4   -2051.477295   -2151.004639 -174.709473 -2051.477295  199.500000 -2151.004639    0.000000   99.527344       -0.472656       3.0         -2051.477295                 1.0         False
5   -1751.004639   -2051.004639 -174.709473 -1751.004639  400.000000 -2051.004639    0.000000  300.000000      200.000000       1.0         -2051.477295                 1.0         False
6   -1751.004639   -1951.004639 -174.709473 -1751.004639  199.486084 -1951.004639    0.000000  200.000000      100.000000       2.0         -1751.004639                 0.0         False
7   -1551.032471   -1751.004639 -174.709473 -1551.032471  399.972168 -1751.004639    0.000000  199.972168      199.972168       3.0         -1751.004639                 1.0         False
8    -950.060303   -1751.004639 -174.709473  -950.060303  800.944336 -1751.004639  500.944336  300.000000      200.000000       3.0         -1751.004639                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=512967/1024, 
.[0m
[09/27 15:27:47]  --------------------------------------------------------------------------------
[09/27 15:27:47]  Iteration: 111 (7 solution, 103 counterexamples)
[09/27 15:28:04]  Generator returned sat in 13.407469 secs.
[09/27 15:28:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:06]  Verifer returned unsat in 2.137317 secs.
[09/27 15:28:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:06]  --------------------------------------------------------------------------------
[09/27 15:28:06]  Iteration: 112 (8 solution, 103 counterexamples)
[09/27 15:28:13]  Generator returned sat in 3.234138 secs.
[09/27 15:28:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:15]  Verifer returned unsat in 2.346112 secs.
[09/27 15:28:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:15]  --------------------------------------------------------------------------------
[09/27 15:28:15]  Iteration: 113 (9 solution, 103 counterexamples)
[09/27 15:28:22]  Generator returned sat in 3.192124 secs.
[09/27 15:28:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:23]  Verifer returned unsat in 1.472518 secs.
[09/27 15:28:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:23]  --------------------------------------------------------------------------------
[09/27 15:28:23]  Iteration: 114 (10 solution, 103 counterexamples)
[09/27 15:28:30]  Generator returned sat in 3.212431 secs.
[09/27 15:28:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:32]  Verifer returned unsat in 1.745197 secs.
[09/27 15:28:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:32]  --------------------------------------------------------------------------------
[09/27 15:28:32]  Iteration: 115 (11 solution, 103 counterexamples)
[09/27 15:28:38]  Generator returned sat in 3.184304 secs.
[09/27 15:28:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:39]  Verifer returned unsat in 0.968924 secs.
[09/27 15:28:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:39]  --------------------------------------------------------------------------------
[09/27 15:28:39]  Iteration: 116 (12 solution, 103 counterexamples)
[09/27 15:28:46]  Generator returned sat in 3.248305 secs.
[09/27 15:28:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:47]  Verifer returned unsat in 1.320623 secs.
[09/27 15:28:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:48]  --------------------------------------------------------------------------------
[09/27 15:28:48]  Iteration: 117 (13 solution, 103 counterexamples)
[09/27 15:28:54]  Generator returned sat in 3.360765 secs.
[09/27 15:28:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:56]  Verifer returned unsat in 1.956964 secs.
[09/27 15:28:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:28:56]  --------------------------------------------------------------------------------
[09/27 15:28:56]  Iteration: 118 (14 solution, 103 counterexamples)
[09/27 15:29:03]  Generator returned sat in 3.596668 secs.
[09/27 15:29:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:05]  Verifer returned unsat in 1.129085 secs.
[09/27 15:29:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:05]  --------------------------------------------------------------------------------
[09/27 15:29:05]  Iteration: 119 (15 solution, 103 counterexamples)
[09/27 15:29:11]  Generator returned sat in 3.271901 secs.
[09/27 15:29:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:12]  Verifer returned unsat in 0.941581 secs.
[09/27 15:29:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:12]  --------------------------------------------------------------------------------
[09/27 15:29:12]  Iteration: 120 (16 solution, 103 counterexamples)
[09/27 15:29:20]  Generator returned sat in 4.098462 secs.
[09/27 15:29:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:22]  Verifer returned unsat in 1.465445 secs.
[09/27 15:29:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:22]  --------------------------------------------------------------------------------
[09/27 15:29:22]  Iteration: 121 (17 solution, 103 counterexamples)
[09/27 15:29:28]  Generator returned sat in 3.209417 secs.
[09/27 15:29:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:30]  Verifer returned unsat in 1.262501 secs.
[09/27 15:29:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:30]  --------------------------------------------------------------------------------
[09/27 15:29:30]  Iteration: 122 (18 solution, 103 counterexamples)
[09/27 15:29:36]  Generator returned sat in 3.216633 secs.
[09/27 15:29:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:38]  Verifer returned unsat in 1.478381 secs.
[09/27 15:29:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:38]  --------------------------------------------------------------------------------
[09/27 15:29:38]  Iteration: 123 (19 solution, 103 counterexamples)
[09/27 15:29:45]  Generator returned sat in 3.251625 secs.
[09/27 15:29:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:47]  Verifer returned unsat in 1.738127 secs.
[09/27 15:29:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:47]  --------------------------------------------------------------------------------
[09/27 15:29:47]  Iteration: 124 (20 solution, 103 counterexamples)
[09/27 15:29:53]  Generator returned sat in 3.439111 secs.
[09/27 15:29:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:29:57]  Improved gap from 0.0 to 0
[09/27 15:29:58]  Improved number of small numbers from 45 to 58 out of a max of 114
[09/27 15:29:58]  Verifer returned sat in 4.753594 secs.
[09/27 15:29:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1555.112734   -1755.112734 -472.013611 -1555.112734    0.027588 -1755.112734        0.0  200.000000      200.000000       7.0         -1755.112734                -1.0            -1
1   -1555.112734   -1655.112734 -472.013611 -1555.112734    0.027832 -1655.112734        0.0  100.000000      100.000000       7.0         -1755.112734                 0.0         False
2   -1555.112734   -1556.057437 -472.013611 -1555.112734    0.055176 -1556.057437        0.0    0.944702        0.000000       8.0         -1755.112734                 0.0         False
3   -1555.112734   -1555.112734 -372.013611 -1555.112734    0.027832 -1555.112734        0.0    0.000000        0.000000       9.0         -1555.112734                 0.0         False
4   -1354.112734   -1555.112734 -372.013611 -1354.112734  201.000000 -1555.112734        0.0  201.000000      101.000000       9.0         -1555.112734                 1.0         False
5   -1354.112734   -1455.112734 -372.013611 -1354.112734  101.000000 -1455.112734        0.0  101.000000        1.000000       2.0         -1354.112734                 1.0         False
6   -1354.112734   -1354.112734 -273.013672 -1354.112734  100.972351 -1354.112734        0.0    0.000000       -0.000061       3.0         -1354.112734                 0.0         False
7   -1203.126559   -1354.085086 -273.013672 -1203.126559  150.986176 -1354.085086        0.0  150.958527       50.986115       1.0         -1354.112734                 0.0         False
8   -1178.078173   -1235.140625 -273.013672 -1178.078173  176.006912 -1235.140625        0.0   57.062452      -23.965500       2.0         -1354.112734                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:29:59]  --------------------------------------------------------------------------------
[09/27 15:29:59]  Iteration: 125 (20 solution, 104 counterexamples)
[09/27 15:30:34]  Generator returned sat in 32.294026 secs.
[09/27 15:30:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:30:35]  Improved gap from 0.0 to 100
[09/27 15:30:35]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 15:30:35]  Verifer returned sat in 0.552742 secs.
[09/27 15:30:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2268.581787   -2268.609131  41.427979 -2268.581787    0.055176 -2268.609131    0.000000    0.027344       -0.027588       9.0         -2268.609131                -1.0            -1
1   -2268.553955   -2268.554199  41.427979 -2268.553955    0.055176 -2268.554199    0.000000    0.000244      -99.999756       1.0         -2268.609131                 1.0         False
2   -1968.554199   -2068.554199  41.427979 -1968.554199  300.000000 -2068.554199    0.000000  100.000000      100.000000       1.0         -2268.609131                 0.0         False
3   -1768.581787   -1971.164307  41.427979 -1768.581787  299.972412 -1971.164307    0.000000  202.582520      199.972412       2.0         -1768.581787                 0.0         False
4   -1768.581787   -1968.526611  41.427979 -1768.581787    1.000000 -1968.526611    0.000000  199.944824       99.972412       2.0         -1768.581787                 1.0         False
5   -1768.581787   -1768.609131  41.427979 -1768.581787    1.000000 -1768.609131    0.000000    0.027344       -0.027588       3.0         -1768.581787                 1.0         False
6   -1767.609131   -1768.553955  41.427979 -1767.609131    1.000000 -1768.553955    0.000000    0.944824      -99.054932       1.0         -1768.581787                 1.0         False
7   -1566.443604   -1568.554199  41.427979 -1566.443604  202.110352 -1568.554199    0.000000    2.110596        2.110596       1.0         -1768.581787                 0.0         False
8   -1068.526611   -1568.526367  41.427979 -1068.526611  500.027588 -1568.526367  200.027588  299.972168      200.000000       2.0         -1768.581787                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819313/4096, 
.[0m
[09/27 15:30:36]  --------------------------------------------------------------------------------
[09/27 15:30:36]  Iteration: 126 (20 solution, 105 counterexamples)
[09/27 15:30:53]  Generator returned sat in 13.659955 secs.
[09/27 15:30:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:30:53]  Improved gap from 0.968963623046875 to 100
[09/27 15:30:53]  Improved number of small numbers from 102 to 114 out of a max of 114
[09/27 15:30:53]  Verifer returned sat in 0.388346 secs.
[09/27 15:30:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2267.554199   -2367.554199  40.427979 -2267.554199    0.054932 -2367.554199    0.000000  100.000000        0.000244       7.0         -2367.554199                -1.0            -1
1   -2267.554199   -2267.554199  40.427979 -2267.554199    0.054932 -2267.554199    0.000000    0.000000      -99.999756       3.0         -2367.554199                 1.0         False
2   -1967.554199   -2167.554199  40.427979 -1967.554199  300.000000 -2167.554199    0.000000  200.000000      100.000244       1.0         -2367.554199                 1.0          True
3   -1967.554199   -2067.499023  40.427979 -1967.554199   25.000000 -2067.499023    0.000000   99.944824        0.000244       2.0         -1967.554199                 0.0         False
4   -1967.554199   -1967.554199  40.427979 -1967.554199   50.000000 -1967.554199    0.000000    0.000000      -99.999756       3.0         -1967.554199                 1.0         False
5   -1867.554199   -1867.554199  40.427979 -1867.554199  100.000000 -1867.554199    0.000000    0.000000      -99.999756       1.0         -1967.554199                 1.0         False
6   -1568.554199   -1767.554199  40.427979 -1568.554199  299.000000 -1767.554199    0.000000  199.000000       99.000244       1.0         -1967.554199                 0.0         False
7   -1468.609375   -1568.554199  40.427979 -1468.609375  298.944824 -1568.554199    0.000000   99.944824       98.945068       2.0         -1468.609375                 0.0         False
8    -970.664551   -1468.554199  40.427979  -970.664551  597.889648 -1468.554199  296.889893  200.999756      200.000000       1.0         -1468.609375                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1216061/4096, 
.[0m
[09/27 15:30:54]  --------------------------------------------------------------------------------
[09/27 15:30:54]  Iteration: 127 (20 solution, 106 counterexamples)
[09/27 15:31:13]  Generator returned sat in 15.224275 secs.
[09/27 15:31:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:31:14]  Improved gap from 0.0 to 18.75
[09/27 15:31:15]  Improved number of small numbers from 87 to 108 out of a max of 114
[09/27 15:31:15]  Verifer returned sat in 2.081478 secs.
[09/27 15:31:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2562.499512   -2682.259766 -40.767090 -2562.499512  119.760010 -2682.259766   0.000000  119.760254       81.250244       7.0         -2682.259766                -1.0            -1
1   -2562.499512   -2562.499756 -40.767090 -2562.499512  119.705078 -2562.499756   0.000000    0.000244      -18.749756       7.0         -2562.499512                 1.0         False
2   -2243.694824   -2444.707031 -40.767090 -2243.694824  318.804932 -2444.707031   0.054932  200.957275      200.000000       1.0         -2562.499512                 1.0         False
3   -2143.694824   -2344.889648 -40.767090 -2143.694824  300.957275 -2344.889648   0.054932  201.139893      200.000000       2.0         -2143.749756                 0.0         False
4   -2143.694824   -2282.629639 -40.767090 -2143.694824  167.685059 -2282.629639   0.054932  138.879883      100.000000       3.0         -2143.749756                 1.0         False
5   -2143.639648   -2243.401855 -40.767090 -2143.639648  138.935059 -2243.401855   0.054932   99.707275        0.055176       3.0         -2143.694580                 1.0         False
6   -2143.639648   -2143.694580  40.427734 -2143.639648   99.652588 -2143.694580   0.054932    0.000000      -18.750000       2.0         -2143.694580                 1.0         False
7   -2044.042114   -2113.944580  40.427734 -2044.042114   99.597534 -2113.944580   0.054932   69.847534      -19.152466       1.0         -2044.097046                 1.0         False
8   -1946.204590   -2024.944580  40.427734 -1946.204590  167.685059 -2024.944580   0.054932   78.685059      -21.314941       1.0         -2044.097046                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:31:16]  --------------------------------------------------------------------------------
[09/27 15:31:16]  Iteration: 128 (20 solution, 107 counterexamples)
[09/27 15:31:32]  Generator returned sat in 13.132281 secs.
[09/27 15:31:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:31:33]  Improved gap from 0.0 to 100
[09/27 15:31:33]  Improved number of small numbers from 70 to 92 out of a max of 114
[09/27 15:31:33]  Verifer returned sat in 0.891589 secs.
[09/27 15:31:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2543.686523   -2743.685059  40.427734 -2543.686523  300.000000 -2743.685059       0.00  199.998535      199.998301       8.0         -2743.685059                -1.0            -1
1   -2443.686523   -2743.684824  40.427734 -2443.686523  299.998535 -2743.684824       0.00  299.998301      199.998301       2.0         -2443.686523                 1.0         False
2   -2443.686523   -2543.685059  40.427734 -2443.686523    0.001709 -2543.685059       0.00   99.998535       99.998301       2.0         -2443.686523                 1.0         False
3   -2443.686523   -2443.694824  40.427734 -2443.686523    0.011667 -2443.694824       0.00    0.008301       -0.001699       3.0         -2443.686523                 1.0         False
4   -2443.684824   -2443.684824  40.427734 -2443.684824    0.010000 -2443.684824       0.00    0.000000     -100.000000       1.0         -2443.684824                 1.0         False
5   -1843.674824   -2343.684814  40.427734 -1843.674824  600.010000 -2343.684814     200.01  299.999990      200.000000       1.0         -2443.684824                 0.0         False
6   -1843.674824   -2143.685059  40.427734 -1843.674824    0.010000 -2143.685059     200.01  100.000234      100.000000       2.0         -2043.684824                 0.0         False
7   -1843.674824   -2043.696289  40.427734 -1843.674824    0.010000 -2043.696289     200.01    0.011465        0.000000       3.0         -2043.684824                 1.0         False
8   -1843.674824   -2043.684824  40.427734 -1843.674824    0.010000 -2043.684824     200.01    0.000000     -100.000000       4.0         -2043.684824                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=20001/100, 
.[0m
[09/27 15:31:34]  --------------------------------------------------------------------------------
[09/27 15:31:34]  Iteration: 129 (20 solution, 108 counterexamples)
[09/27 15:32:17]  Generator returned sat in 39.363792 secs.
[09/27 15:32:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:32:18]  Improved gap from 0.0 to 0
[09/27 15:32:18]  Improved number of small numbers from 45 to 114 out of a max of 114
[09/27 15:32:18]  Verifer returned sat in 0.975792 secs.
[09/27 15:32:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2184.217529   -2393.190186 -319.039551 -2184.217529    0.027588 -2393.190186        0.0  208.972656      200.000000       5.0         -2393.190186                -1.0            -1
1   -2184.217529   -2284.217529 -319.039551 -2184.217529    0.027588 -2284.217529        0.0  100.000000      100.000000       3.0         -2393.190186                 1.0         False
2   -2184.217529   -2284.217529 -319.039551 -2184.217529    0.027588 -2284.217529        0.0  100.000000        0.000000       3.0         -2393.190186                 1.0          True
3   -2184.217529   -2184.217529 -219.039551 -2184.217529    0.027588 -2184.217529        0.0    0.000000        0.000000       4.0         -2393.190186                 1.0         False
4   -1976.244873   -2184.217529 -219.039551 -1976.244873  207.972656 -2184.217529        0.0  207.972656      107.972656       4.0         -2393.190186                 1.0          True
5   -1976.244873   -2084.217285 -219.039551 -1976.244873   99.000000 -2084.217285        0.0  107.972412        7.972656       2.0         -1976.244873                 1.0         False
6   -1976.244873   -1976.244873 -127.012207 -1976.244873  100.000000 -1976.244873        0.0    0.000000        0.000000       3.0         -1976.244873                 0.0         False
7   -1769.272217   -1976.244873 -127.012207 -1769.272217  206.972656 -1976.244873        0.0  206.972656      106.972656       3.0         -1976.244873                 1.0         False
8   -1769.272217   -1876.244873 -127.012207 -1769.272217  206.972656 -1876.244873        0.0  106.972656        6.972656       2.0         -1976.244873                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:32:18]  --------------------------------------------------------------------------------
[09/27 15:32:18]  Iteration: 130 (20 solution, 109 counterexamples)
[09/27 15:32:35]  Generator returned sat in 12.856029 secs.
[09/27 15:32:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:32:35]  Improved gap from 0.0 to 100
[09/27 15:32:37]  Improved number of small numbers from 52 to 69 out of a max of 114
[09/27 15:32:37]  Verifer returned sat in 1.603069 secs.
[09/27 15:32:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2447.888672   -2547.833984 -155.423162 -2447.888672  200.109863 -2547.833984    0.000000   99.945312       99.945246       5.0         -2547.833984                -1.0            -1
1   -2347.724121   -2447.833984 -155.423162 -2347.724121  200.109863 -2447.833984    0.000000  100.109863      100.109797       1.0         -2547.833984                 1.0         False
2   -2347.724121   -2447.833918 -155.423162 -2347.724121  100.054932 -2447.833918    0.000000  100.109797        0.109797       2.0         -2347.724121                 0.0         False
3   -2087.162598   -2309.505238 -155.423162 -2087.162598  360.671320 -2309.505238    0.000000  222.342640      160.671320       1.0         -2347.724121                 0.0         False
4   -1947.833918   -2210.505238 -155.423162 -1947.833918  361.671320 -2210.505238    0.000000  262.671320      200.000000       2.0         -2347.724121                 0.0         False
5   -1847.833918   -2047.833918 -155.423162 -1847.833918  362.671320 -2047.833918    0.000000  200.000000      200.000000       2.0         -2347.724121                 0.0         False
6   -1684.162598   -1947.888849 -155.423162 -1684.162598  363.671320 -1947.888849   63.671320  200.054932      200.000000       3.0         -2347.724121                 0.0         False
7   -1684.162598   -1947.833918 -155.423162 -1684.162598  181.808194 -1947.833918   63.671320  200.000000      100.000000       4.0         -1747.833918                 0.0         False
8   -1347.778986   -1847.779053 -155.423162 -1347.778986  536.383612 -1847.779053  200.054932  299.945135      200.000000       3.0         -1747.833918                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819425/4096, 
.[0m
[09/27 15:32:37]  --------------------------------------------------------------------------------
[09/27 15:32:37]  Iteration: 131 (20 solution, 110 counterexamples)
[09/27 15:33:02]  Generator returned sat in 21.387442 secs.
[09/27 15:33:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:04]  Verifer returned unsat in 1.966876 secs.
[09/27 15:33:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:04]  --------------------------------------------------------------------------------
[09/27 15:33:04]  Iteration: 132 (21 solution, 110 counterexamples)
[09/27 15:33:12]  Generator returned sat in 3.735811 secs.
[09/27 15:33:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:14]  Verifer returned unsat in 1.837116 secs.
[09/27 15:33:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:14]  --------------------------------------------------------------------------------
[09/27 15:33:14]  Iteration: 133 (22 solution, 110 counterexamples)
[09/27 15:33:21]  Generator returned sat in 3.752335 secs.
[09/27 15:33:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:23]  Verifer returned unsat in 1.489958 secs.
[09/27 15:33:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:23]  --------------------------------------------------------------------------------
[09/27 15:33:23]  Iteration: 134 (23 solution, 110 counterexamples)
[09/27 15:33:30]  Generator returned sat in 3.799609 secs.
[09/27 15:33:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:31]  Verifer returned unsat in 0.977837 secs.
[09/27 15:33:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:31]  --------------------------------------------------------------------------------
[09/27 15:33:31]  Iteration: 135 (24 solution, 110 counterexamples)
[09/27 15:33:39]  Generator returned sat in 3.787236 secs.
[09/27 15:33:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:40]  Verifer returned unsat in 0.960382 secs.
[09/27 15:33:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:40]  --------------------------------------------------------------------------------
[09/27 15:33:40]  Iteration: 136 (25 solution, 110 counterexamples)
[09/27 15:33:47]  Generator returned sat in 4.189274 secs.
[09/27 15:33:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:49]  Verifer returned unsat in 1.209863 secs.
[09/27 15:33:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:49]  --------------------------------------------------------------------------------
[09/27 15:33:49]  Iteration: 137 (26 solution, 110 counterexamples)
[09/27 15:33:56]  Generator returned sat in 3.741516 secs.
[09/27 15:33:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:58]  Verifer returned unsat in 1.589528 secs.
[09/27 15:33:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:33:58]  --------------------------------------------------------------------------------
[09/27 15:33:58]  Iteration: 138 (27 solution, 110 counterexamples)
[09/27 15:34:05]  Generator returned sat in 3.730747 secs.
[09/27 15:34:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:07]  Verifer returned unsat in 1.041528 secs.
[09/27 15:34:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:07]  --------------------------------------------------------------------------------
[09/27 15:34:07]  Iteration: 139 (28 solution, 110 counterexamples)
[09/27 15:34:14]  Generator returned sat in 3.722119 secs.
[09/27 15:34:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:16]  Verifer returned unsat in 2.245641 secs.
[09/27 15:34:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:16]  --------------------------------------------------------------------------------
[09/27 15:34:16]  Iteration: 140 (29 solution, 110 counterexamples)
[09/27 15:34:24]  Generator returned sat in 3.732616 secs.
[09/27 15:34:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:25]  Verifer returned unsat in 1.214580 secs.
[09/27 15:34:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:25]  --------------------------------------------------------------------------------
[09/27 15:34:25]  Iteration: 141 (30 solution, 110 counterexamples)
[09/27 15:34:33]  Generator returned sat in 4.037024 secs.
[09/27 15:34:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:34]  Verifer returned unsat in 1.381783 secs.
[09/27 15:34:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:34]  --------------------------------------------------------------------------------
[09/27 15:34:34]  Iteration: 142 (31 solution, 110 counterexamples)
[09/27 15:34:42]  Generator returned sat in 3.788092 secs.
[09/27 15:34:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:43]  Verifer returned unsat in 0.926182 secs.
[09/27 15:34:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:43]  --------------------------------------------------------------------------------
[09/27 15:34:43]  Iteration: 143 (32 solution, 110 counterexamples)
[09/27 15:34:50]  Generator returned sat in 3.772419 secs.
[09/27 15:34:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:51]  Verifer returned unsat in 1.236912 secs.
[09/27 15:34:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:34:51]  --------------------------------------------------------------------------------
[09/27 15:34:51]  Iteration: 144 (33 solution, 110 counterexamples)
[09/27 15:34:59]  Generator returned sat in 3.800738 secs.
[09/27 15:34:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:35:01]  Verifer returned unsat in 1.869542 secs.
[09/27 15:35:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:35:01]  --------------------------------------------------------------------------------
[09/27 15:35:01]  Iteration: 145 (34 solution, 110 counterexamples)
[09/27 15:35:09]  Generator returned sat in 4.101871 secs.
[09/27 15:35:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:35:11]  Verifer returned unsat in 2.209706 secs.
[09/27 15:35:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:35:11]  --------------------------------------------------------------------------------
[09/27 15:35:11]  Iteration: 146 (35 solution, 110 counterexamples)
[09/27 15:35:19]  Generator returned sat in 4.705716 secs.
[09/27 15:35:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:35:21]  Improved gap from 99.9925 to 100
[09/27 15:35:22]  Improved number of small numbers from 59 to 71 out of a max of 114
[09/27 15:35:22]  Verifer returned sat in 2.046918 secs.
[09/27 15:35:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4267.761475   -4367.760742 -455.445662 -4267.761475   99.994000 -4367.760742      0.000   99.999268        99.99911       8.0         -4367.760742                -1.0            -1
1   -4267.761475   -4367.752584 -455.445662 -4267.761475   99.993164 -4367.752584      0.000   99.991110        -0.00089       2.0         -4267.761475                 1.0         False
2   -4267.760584   -4267.760584 -455.445662 -4267.760584   99.992000 -4267.760584      0.000    0.000000      -100.00000       1.0         -4267.760584                 0.0         False
3   -3867.759584   -4167.094584 -455.445662 -3867.759584  400.001000 -4167.094584      0.001  299.334000       200.00000       1.0         -4267.760584                 0.0         False
4   -3867.759584   -3967.760584 -455.445662 -3867.759584    0.010000 -3967.760584      0.001  100.000000       100.00000       2.0         -3867.760584                 0.0         False
5   -3767.758584   -3867.761584 -455.445662 -3767.758584  200.001000 -3867.761584      0.001  100.002000       100.00100       3.0         -3867.760584                 0.0         False
6   -3567.760584   -3867.760584 -455.445662 -3567.760584  300.000000 -3867.760584      0.001  299.999000       199.99900       4.0         -3867.760584                 0.0         False
7   -3267.758584   -3667.760742 -455.445662 -3267.758584  600.001000 -3667.760742    200.002  200.000158       200.00000       2.0         -3867.760584                 1.0         False
8   -3267.758584   -3567.760742 -455.445662 -3267.758584    0.010000 -3567.760742    200.002  100.000158       100.00000       2.0         -3467.760584                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=200001/1000, 
.[0m
[09/27 15:35:22]  --------------------------------------------------------------------------------
[09/27 15:35:22]  Iteration: 147 (35 solution, 111 counterexamples)
[09/27 15:36:14]  Generator returned sat in 48.356931 secs.
[09/27 15:36:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:36:15]  Improved gap from 19.98875 to 50.0
[09/27 15:36:16]  Improved number of small numbers from 58 to 66 out of a max of 114
[09/27 15:36:16]  Verifer returned sat in 1.825417 secs.
[09/27 15:36:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5144.256104   -5240.585632  417.379150 -5144.256104    0.054688 -5240.585632        0.0  96.329528       96.329346       8.0         -5240.585632                -1.0            -1
1   -5132.860290   -5144.201110  417.379150 -5132.860290  107.725342 -5144.201110        0.0  11.340820        7.725160       1.0         -5240.585632                 1.0         False
2   -5132.860290   -5132.860290  459.653991 -5132.860290    0.054932 -5132.860290        0.0   0.000000      -50.000000       2.0         -5132.860290                 0.0         False
3   -5002.750426   -5002.805358  459.653991 -5002.750426  130.109863 -5002.805358        0.0   0.054932      -19.890137       1.0         -5132.860290                 1.0         False
4   -4882.915221   -4970.640563  459.653991 -4882.915221  119.890137 -4970.640563        0.0  87.725342       -0.054932       1.0         -4882.915221                 0.0         False
5   -4882.860290   -4882.860290  509.653991 -4882.860290   87.780273 -4882.860290        0.0   0.000000      -50.000000       1.0         -4882.860290                 0.0         False
6   -4756.860290   -4823.508646  509.653991 -4756.860290  126.000000 -4823.508646        0.0  66.648356      -24.000000       1.0         -4882.860290                 0.0         False
7   -4732.860290   -4732.860290  559.653809 -4732.860290   90.648356 -4732.860290        0.0   0.000000      -50.000182       1.0         -4732.860290                 0.0         False
8   -4612.970153   -4682.860107  559.653809 -4612.970153  119.890137 -4682.860107        0.0  69.889954      -30.110046       1.0         -4732.860290                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:36:17]  --------------------------------------------------------------------------------
[09/27 15:36:17]  Iteration: 148 (35 solution, 112 counterexamples)
[09/27 15:36:36]  Generator returned sat in 15.401226 secs.
[09/27 15:36:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:36:36]  Improved gap from 0.0 to 100
[09/27 15:36:36]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:36:36]  Verifer returned sat in 0.499588 secs.
[09/27 15:36:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5683.866211   -5683.867188  860.659912 -5683.866211  199.998779 -5683.867188   0.000000    0.000977        0.000244       9.0         -5683.867188                -1.0            -1
1   -5483.868896   -5683.865723  860.659912 -5483.868896  199.998291 -5683.865723   0.000000  199.996826       99.997559       1.0         -5483.868896                 1.0         False
2   -5359.867676   -5483.868408  860.659912 -5359.867676  323.998047 -5483.868408   0.000000  124.000732      123.998779       1.0         -5483.868896                 0.0         False
3   -5183.866943   -5383.866455  860.659912 -5183.866943  300.001465 -5383.866455   0.000000  199.999512      199.999512       2.0         -5183.866943                 0.0         False
4   -5083.865723   -5359.866943  860.659912 -5083.865723  300.000732 -5359.866943   0.000732  276.000488      200.000000       2.0         -5083.866455                 1.0         False
5   -5083.865723   -5183.866455  860.659912 -5083.865723    0.010000 -5183.866455   0.000732  100.000000      100.000000       2.0         -5083.866455                 1.0         False
6   -4883.863770   -5083.866455  860.659912 -4883.863770  300.001953 -5083.866455   0.002686  200.000000      200.000000       3.0         -5083.866455                 1.0         False
7   -4883.863770   -4983.866455  860.659912 -4883.863770    0.010000 -4983.866455   0.002686  100.000000      100.000000       2.0         -4883.866455                 1.0         False
8   -4607.863281   -4983.866455  860.659912 -4607.863281  376.000488 -4983.866455  76.003174  300.000000      200.000000       2.0         -4883.866455                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=155653/2048, 
.[0m
[09/27 15:36:37]  --------------------------------------------------------------------------------
[09/27 15:36:37]  Iteration: 149 (35 solution, 113 counterexamples)
[09/27 15:37:09]  Generator returned sat in 28.248753 secs.
[09/27 15:37:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:37:09]  Improved gap from 0.0 to 100
[09/27 15:37:10]  Improved number of small numbers from 68 to 90 out of a max of 114
[09/27 15:37:10]  Verifer returned sat in 0.825639 secs.
[09/27 15:37:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5683.860596   -5814.868408  860.659912 -5683.860596  300.000000 -5814.868408    0.000000  131.007812      131.007618       5.0         -5814.868408                -1.0            -1
1   -5514.870117   -5814.868214  860.659912 -5514.870117  299.998291 -5814.868214    0.000000  299.998097      199.998097       2.0         -5514.870117                 1.0         False
2   -5514.870117   -5683.858770  860.659912 -5514.870117    0.001667 -5683.858770    0.000000  168.988652       99.998097       2.0         -5514.870117                 1.0         False
3   -5514.870117   -5514.871547  860.659912 -5514.870117    0.005556 -5514.871547    0.000000    0.001430       -0.001903       3.0         -5514.870117                 1.0         False
4   -5514.861547   -5514.863214  860.659912 -5514.861547    0.010000 -5514.863214    0.000000    0.001667      -99.993333       1.0         -5514.870117                 1.0         False
5   -5215.858214   -5348.864325  860.659912 -5215.858214  299.005000 -5348.864325    0.000000  133.006111       99.010000       1.0         -5514.870117                 0.0         False
6   -5014.869881   -5215.858214  860.659912 -5014.869881  333.994444 -5215.858214    0.000000  200.988333      199.998333       2.0         -5514.870117                 0.0         False
7   -4714.866547   -5114.868408  860.659912 -4714.866547  500.991667 -5114.868408  200.001667  200.000194      200.000000       2.0         -5514.870117                 1.0          True
8   -4714.866547   -5014.868408  860.659912 -4714.866547    0.010000 -5014.868408  200.001667  100.000194      100.000000       2.0         -4914.868214                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=120001/600, 
.[0m
[09/27 15:37:11]  --------------------------------------------------------------------------------
[09/27 15:37:11]  Iteration: 150 (35 solution, 114 counterexamples)
[09/27 15:38:05]  Generator returned sat in 50.280741 secs.
[09/27 15:38:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:38:06]  Improved gap from 0.0 to 45.3125
[09/27 15:38:06]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:38:06]  Verifer returned sat in 1.414979 secs.
[09/27 15:38:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5581.278809   -5674.606689  710.925049 -5581.278809    0.054932 -5674.606689        0.0   93.327881       93.327637       6.0         -5674.606689                -1.0            -1
1   -5581.169189   -5581.223877  710.925049 -5581.169189   93.437500 -5581.223877        0.0    0.054688       -6.562744       1.0         -5674.606689                 1.0         False
2   -5574.606445   -5574.606445  765.612549 -5574.606445    6.617432 -5574.606445        0.0    0.000000      -45.312500       1.0         -5574.606445                 0.0         False
3   -5399.028564   -5444.286377  765.612549 -5399.028564  175.577881 -5444.286377        0.0   45.257812       30.265381       1.0         -5574.606445                 0.0         False
4   -5214.966064   -5398.973877  765.612549 -5214.966064  229.320312 -5398.973877        0.0  184.007812      114.327881       1.0         -5574.606445                 0.0         False
5   -5214.966064   -5329.293945  765.612549 -5214.966064  181.250000 -5329.293945        0.0  114.327881       14.327881       2.0         -5214.966064                 0.0         False
6   -5214.966064   -5214.966064  805.972168 -5214.966064   90.625000 -5214.966064        0.0    0.000000      -45.312500       3.0         -5214.966064                 1.0         False
7   -5169.653564   -5169.653564  860.659668 -5169.653564   45.312500 -5169.653564        0.0    0.000000      -45.312500       1.0         -5169.653564                 1.0         False
8   -4941.333252   -5124.341064  860.659668 -4941.333252  228.320312 -5124.341064        0.0  183.007812       83.007812       1.0         -5169.653564                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:38:07]  --------------------------------------------------------------------------------
[09/27 15:38:07]  Iteration: 151 (35 solution, 115 counterexamples)
[09/27 15:38:58]  Generator returned sat in 47.914494 secs.
[09/27 15:38:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:02]  Improved gap from 0.0 to 0
[09/27 15:39:02]  Improved number of small numbers from 33 to 114 out of a max of 114
[09/27 15:39:02]  Verifer returned sat in 3.371150 secs.
[09/27 15:39:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5826.595215   -6026.595215  1062.913818 -5826.595215    0.054688 -6026.595215    0.000000  200.000000      200.000000       5.0         -6026.595215                -1.0            -1
1   -5826.595215   -6026.595215  1062.913818 -5826.595215    0.054688 -6026.595215    0.000000  200.000000      100.000000       5.0         -6026.595215                 0.0         False
2   -5826.595215   -5902.358887  1062.913818 -5826.595215  199.999756 -5902.358887    0.000000   75.763672        0.000000       6.0         -6026.595215                 0.0         False
3   -5826.595215   -5826.595215  1162.913818 -5826.595215   75.763672 -5826.595215    0.000000    0.000000        0.000000       7.0         -5826.595215                 0.0         False
4   -5576.067871   -5826.595215  1162.913818 -5576.067871  250.527344 -5826.595215    0.000000  250.527344      150.527344       7.0         -5826.595215                 1.0         False
5   -5226.540527   -5726.595215  1162.913818 -5226.540527  600.054688 -5726.595215  200.054688  300.000000      200.000000       2.0         -5826.595215                 1.0         False
6   -5226.540527   -5614.595215  1162.913818 -5226.540527   86.881836 -5614.595215  200.054688  188.000000      100.000000       3.0         -5426.595215                 0.0         False
7   -5226.540527   -5426.595215  1162.913818 -5226.540527  150.440918 -5426.595215  200.054688    0.000000        0.000000       3.0         -5426.595215                 0.0         False
8   -4950.320068   -5426.540771  1162.913818 -4950.320068  276.220459 -5426.540771  200.054688  276.166016      176.220459       1.0         -5426.595215                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=25607/128, 
.[0m
[09/27 15:39:03]  --------------------------------------------------------------------------------
[09/27 15:39:03]  Iteration: 152 (35 solution, 116 counterexamples)
[09/27 15:39:10]  Generator returned sat in 4.145790 secs.
[09/27 15:39:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:17]  Improved gap from 0.0 to 0
[09/27 15:39:17]  Improved number of small numbers from 34 to 114 out of a max of 114
[09/27 15:39:17]  Verifer returned sat in 6.780174 secs.
[09/27 15:39:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5944.480957   -6144.480957  762.831543 -5944.480957  200.000000 -6144.480957    0.000000  200.000000      200.000000       5.0         -6144.480957                -1.0            -1
1   -5944.480957   -6144.453613  762.831543 -5944.480957  199.972656 -6144.453613    0.000000  199.972656      100.000000       5.0         -5944.480957                 0.0         False
2   -5944.480957   -6044.480957  762.831543 -5944.480957  199.945068 -6044.480957    0.000000  100.000000        0.000000       6.0         -5944.480957                 0.0         False
3   -5944.480957   -5944.480957  862.831543 -5944.480957    0.027344 -5944.480957    0.000000    0.000000        0.000000       7.0         -5944.480957                 0.0         False
4   -5645.426270   -5944.480957  862.831543 -5645.426270  299.054688 -5944.480957    0.000000  299.054688      199.054688       7.0         -5944.480957                 1.0         False
5   -5047.412598   -5744.480957  862.831543 -5047.412598  897.068359 -5744.480957  497.068359  200.000000      200.000000       2.0         -5944.480957                 1.0         False
6   -5047.412598   -5645.398926  862.831543 -5047.412598  149.000000 -5645.398926  497.068359  100.917969      100.000000       2.0         -5544.480957                 0.0         False
7   -4923.289551   -5544.480957  862.831543 -4923.289551  225.041016 -5544.480957  497.068359  124.123047      124.123047       3.0         -5544.480957                 0.0         False
8   -4733.892090   -5544.453613  862.831543 -4733.892090  313.520508 -5544.453613  510.588867  299.972656      200.000000       2.0         -5544.480957                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=522843/1024, 
.[0m
[09/27 15:39:18]  --------------------------------------------------------------------------------
[09/27 15:39:18]  Iteration: 153 (35 solution, 117 counterexamples)
[09/27 15:39:26]  Generator returned sat in 4.262813 secs.
[09/27 15:39:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:27]  Verifer returned unsat in 0.973660 secs.
[09/27 15:39:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:27]  --------------------------------------------------------------------------------
[09/27 15:39:27]  Iteration: 154 (36 solution, 117 counterexamples)
[09/27 15:39:35]  Generator returned sat in 4.416188 secs.
[09/27 15:39:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:37]  Verifer returned unsat in 1.133445 secs.
[09/27 15:39:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:37]  --------------------------------------------------------------------------------
[09/27 15:39:37]  Iteration: 155 (37 solution, 117 counterexamples)
[09/27 15:39:45]  Generator returned sat in 4.065890 secs.
[09/27 15:39:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:46]  Verifer returned unsat in 1.075540 secs.
[09/27 15:39:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:46]  --------------------------------------------------------------------------------
[09/27 15:39:46]  Iteration: 156 (38 solution, 117 counterexamples)
[09/27 15:39:54]  Generator returned sat in 4.069815 secs.
[09/27 15:39:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:55]  Verifer returned unsat in 0.713577 secs.
[09/27 15:39:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:39:55]  --------------------------------------------------------------------------------
[09/27 15:39:55]  Iteration: 157 (39 solution, 117 counterexamples)
[09/27 15:40:02]  Generator returned sat in 4.074161 secs.
[09/27 15:40:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:40:04]  Verifer returned unsat in 1.064734 secs.
[09/27 15:40:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:40:04]  --------------------------------------------------------------------------------
[09/27 15:40:04]  Iteration: 158 (40 solution, 117 counterexamples)
[09/27 15:40:45]  Generator returned sat in 37.046243 secs.
[09/27 15:40:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:40:47]  Improved gap from 0.0 to 0
[09/27 15:40:47]  Improved number of small numbers from 41 to 114 out of a max of 114
[09/27 15:40:47]  Verifer returned sat in 2.287140 secs.
[09/27 15:40:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4239.567383   -4459.540039  381.270264 -4239.567383    0.027588 -4459.540039        0.0  219.972656      200.000000       4.0         -4459.540039                -1.0            -1
1   -4239.567383   -4379.402832  381.270264 -4239.567383    0.054688 -4379.402832        0.0  139.835449      100.000000       5.0         -4459.540039                 0.0         False
2   -4239.567383   -4239.622314  381.270264 -4239.567383    0.027588 -4239.622314        0.0    0.054932        0.000000       6.0         -4239.567383                 0.0         False
3   -4239.567383   -4239.567383  481.270264 -4239.567383    0.027344 -4239.567383        0.0    0.000000        0.000000       7.0         -4239.567383                 0.0         False
4   -4019.594727   -4239.567383  481.270264 -4019.594727  219.972656 -4239.567383        0.0  219.972656      119.972656       7.0         -4239.567383                 1.0         False
5   -4019.594727   -4139.567139  481.270264 -4019.594727  139.835449 -4139.567139        0.0  119.972412       19.972656       2.0         -4019.594727                 1.0         False
6   -4019.594727   -4019.594727  561.297607 -4019.594727  119.945312 -4019.594727        0.0    0.000000        0.000000       3.0         -4019.594727                 0.0         False
7   -3849.635742   -4019.567383  561.297607 -3849.635742  169.958984 -4019.567383        0.0  169.931641       69.958984       1.0         -4019.594727                 0.0         False
8   -3824.587891   -3919.594482  561.297607 -3824.587891  194.979492 -3919.594482        0.0   95.006592       -4.993164       2.0         -4019.594727                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:40:48]  --------------------------------------------------------------------------------
[09/27 15:40:48]  Iteration: 159 (40 solution, 118 counterexamples)
[09/27 15:41:25]  Generator returned sat in 33.918444 secs.
[09/27 15:41:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:41:27]  Improved gap from 0.0 to 18.75
[09/27 15:41:28]  Improved number of small numbers from 76 to 112 out of a max of 114
[09/27 15:41:28]  Verifer returned sat in 1.829833 secs.
[09/27 15:41:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4419.569824   -4719.569824  561.297363 -4419.569824    0.002500 -4719.569824   0.000000  300.000000      200.000000       6.0         -4719.569824                -1.0            -1
1   -4419.569824   -4519.570068  561.297363 -4419.569824  299.997314 -4519.570068   0.000000  100.000244      100.000000       6.0         -4719.569824                 1.0         False
2   -4219.574951   -4519.569824  561.297363 -4219.574951  299.995117 -4519.569824   0.000000  299.994873      199.994873       7.0         -4219.574951                 1.0          True
3   -4219.574951   -4320.560059  561.297363 -4219.574951  299.992676 -4320.560059   0.000000  100.985107       99.994873       2.0         -4219.574951                 1.0         False
4   -4019.567383   -4219.569824  561.297363 -4019.567383  300.992676 -4219.569824   0.002441  200.000000      200.000000       1.0         -4219.574951                 1.0         False
5   -4019.567383   -4138.319824  561.297363 -4019.567383    0.010000 -4138.319824   0.002441  118.750000      100.000000       2.0         -4019.569824                 0.0         False
6   -4019.567383   -4021.577383  561.297363 -4019.567383    1.010000 -4021.577383   0.002441    2.007559        0.000000       3.0         -4019.569824                 1.0         False
7   -4019.564941   -4019.567383  642.544922 -4019.564941    2.010000 -4019.567383   0.002441    0.000000      -18.750000       1.0         -4019.569824                 1.0         False
8   -3820.562500   -4000.817383  642.544922 -3820.562500  199.002441 -4000.817383   0.002441  180.252441       80.252441       1.0         -4019.569824                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:41:28]  --------------------------------------------------------------------------------
[09/27 15:41:28]  Iteration: 160 (40 solution, 119 counterexamples)
[09/27 15:41:48]  Generator returned sat in 16.415993 secs.
[09/27 15:41:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:41:49]  Improved gap from 0.0 to 10.9375
[09/27 15:41:49]  Improved number of small numbers from 100 to 114 out of a max of 114
[09/27 15:41:49]  Verifer returned sat in 0.718610 secs.
[09/27 15:41:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4519.624756   -4719.569824  561.297363 -4519.624756    0.054688 -4719.569824        0.0  199.945068       99.945068       1.0         -4719.569824                -1.0            -1
1   -4375.562256   -4519.569824  561.297363 -4375.562256  344.007568 -4519.569824        0.0  144.007568      144.007568       1.0         -4719.569824                 0.0         False
2   -4375.562256   -4519.569824  561.297363 -4375.562256    0.054688 -4519.569824        0.0  144.007568       44.007568       1.0         -4375.562256                 0.0         False
3   -4231.569824   -4375.507324  561.297363 -4231.569824  288.000000 -4375.507324        0.0  143.937500       88.000000       1.0         -4375.562256                 0.0         False
4   -4230.507324   -4230.507324  561.297363 -4230.507324  145.000000 -4230.507324        0.0    0.000000      -10.937500       1.0         -4230.507324                 0.0         False
5   -4157.007324   -4157.007324  587.797363 -4157.007324   73.500000 -4157.007324        0.0    0.000000      -10.937500       1.0         -4157.007324                 0.0         False
6   -4119.257324   -4119.257324  641.109863 -4119.257324   37.750000 -4119.257324        0.0    0.000000      -19.875000       1.0         -4119.257324                 0.0         False
7   -4099.382324   -4099.382324  730.172363 -4099.382324   19.875000 -4099.382324        0.0    0.000000      -10.937500       1.0         -4099.382324                 0.0         False
8   -4088.444824   -4088.444824  819.234863 -4088.444824   10.937500 -4088.444824        0.0    0.000000      -10.937500       1.0         -4088.444824                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:41:50]  --------------------------------------------------------------------------------
[09/27 15:41:50]  Iteration: 161 (40 solution, 120 counterexamples)
[09/27 15:42:08]  Generator returned sat in 14.680997 secs.
[09/27 15:42:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:42:12]  Improved gap from 0.0 to 0
[09/27 15:42:13]  Improved number of small numbers from 48 to 114 out of a max of 114
[09/27 15:42:13]  Verifer returned sat in 4.126791 secs.
[09/27 15:42:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4611.449707   -4811.395020  442.137451 -4611.449707  200.027588 -4811.395020        0.0  199.945312      199.945312       2.0         -4811.395020                -1.0            -1
1   -4611.395020   -4712.422363  442.137451 -4611.395020  200.000000 -4712.422363        0.0  101.027344      100.000000       2.0         -4611.395020                 0.0         False
2   -4611.395020   -4611.422363  442.137451 -4611.395020  101.027344 -4611.422363        0.0    0.027344        0.000000       2.0         -4611.395020                 0.0         False
3   -4611.395020   -4611.395020  542.137451 -4611.395020    0.027344 -4611.395020        0.0    0.000000        0.000000       3.0         -4611.395020                 0.0         False
4   -4410.395020   -4611.395020  542.137451 -4410.395020  201.000000 -4611.395020        0.0  201.000000      101.000000       3.0         -4611.395020                 1.0         False
5   -4410.395020   -4511.395020  542.137451 -4410.395020  102.027344 -4511.395020        0.0  101.000000        1.000000       2.0         -4410.395020                 1.0         False
6   -4410.367676   -4410.367676  641.109619 -4410.367676  101.027344 -4410.367676        0.0    0.000000       -0.000488       1.0         -4410.367676                 0.0         False
7   -4259.340332   -4410.340332  641.109619 -4259.340332  151.027344 -4410.340332        0.0  151.000000       51.026855       1.0         -4410.367676                 0.0         False
8   -4234.299316   -4291.422363  641.109619 -4234.299316  176.041016 -4291.422363        0.0   57.123047      -23.932129       2.0         -4410.367676                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:42:13]  --------------------------------------------------------------------------------
[09/27 15:42:13]  Iteration: 162 (40 solution, 121 counterexamples)
[09/27 15:42:46]  Generator returned sat in 29.123438 secs.
[09/27 15:42:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:42:50]  Verifer returned unsat in 2.822768 secs.
[09/27 15:42:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:42:50]  --------------------------------------------------------------------------------
[09/27 15:42:50]  Iteration: 163 (41 solution, 121 counterexamples)
[09/27 15:42:59]  Generator returned sat in 4.801013 secs.
[09/27 15:42:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:00]  Verifer returned unsat in 1.330301 secs.
[09/27 15:43:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:00]  --------------------------------------------------------------------------------
[09/27 15:43:00]  Iteration: 164 (42 solution, 121 counterexamples)
[09/27 15:43:14]  Generator returned sat in 10.175197 secs.
[09/27 15:43:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:16]  Improved gap from 0.0 to 50.0
[09/27 15:43:16]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/27 15:43:16]  Verifer returned sat in 1.250186 secs.
[09/27 15:43:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3948.397949   -4058.069336  501.863281 -3948.397949    0.054688 -4058.069336        0.0  109.671387      109.671387       3.0         -4058.069336                -1.0            -1
1   -3948.343506   -3967.685791  501.863281 -3948.343506  109.725830 -3967.685791        0.0   19.342285        9.725830       3.0         -4058.069336                 1.0         False
2   -3948.343506   -3948.343506  542.137451 -3948.343506    0.054688 -3948.343506        0.0    0.000000      -50.000000       2.0         -3948.343506                 1.0          True
3   -3788.178955   -3818.288574  542.137451 -3788.178955  160.164551 -3818.288574        0.0   30.109619       10.164551       1.0         -3948.343506                 1.0         False
4   -3698.398193   -3788.124268  542.137451 -3698.398193  119.890381 -3788.124268        0.0   89.726074       -0.054688       1.0         -3698.398193                 0.0         False
5   -3698.343506   -3698.343506  592.137451 -3698.343506   89.780762 -3698.343506        0.0    0.000000      -50.000000       1.0         -3698.343506                 0.0         False
6   -3573.343506   -3638.325195  592.137451 -3573.343506  125.000000 -3638.325195        0.0   64.981689      -25.000000       1.0         -3698.343506                 0.0         False
7   -3548.343506   -3548.343506  642.137451 -3548.343506   89.981689 -3548.343506        0.0    0.000000      -50.000000       1.0         -3548.343506                 0.0         False
8   -3428.453125   -3498.343262  642.137451 -3428.453125  119.890381 -3498.343262        0.0   69.890137      -30.109619       1.0         -3548.343506                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:43:17]  --------------------------------------------------------------------------------
[09/27 15:43:17]  Iteration: 165 (42 solution, 122 counterexamples)
[09/27 15:43:27]  Generator returned sat in 6.318144 secs.
[09/27 15:43:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:28]  Verifer returned unsat in 0.995344 secs.
[09/27 15:43:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:28]  --------------------------------------------------------------------------------
[09/27 15:43:28]  Iteration: 166 (43 solution, 122 counterexamples)
[09/27 15:43:37]  Generator returned sat in 4.803263 secs.
[09/27 15:43:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:39]  Verifer returned unsat in 1.294345 secs.
[09/27 15:43:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:39]  --------------------------------------------------------------------------------
[09/27 15:43:39]  Iteration: 167 (44 solution, 122 counterexamples)
[09/27 15:43:48]  Generator returned sat in 4.782869 secs.
[09/27 15:43:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:50]  Verifer returned unsat in 1.371509 secs.
[09/27 15:43:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:43:50]  --------------------------------------------------------------------------------
[09/27 15:43:50]  Iteration: 168 (45 solution, 122 counterexamples)
[09/27 15:43:59]  Generator returned sat in 4.751782 secs.
[09/27 15:43:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:44:04]  Improved gap from 0.0 to 0
[09/27 15:44:04]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 15:44:04]  Verifer returned sat in 5.162807 secs.
[09/27 15:44:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3517.267822   -3717.267822  440.198486 -3517.267822    0.054443 -3717.267822    0.000000  200.000000      200.000000       7.0         -3717.267822                -1.0            -1
1   -3517.267822   -3617.267822  440.198486 -3517.267822    0.054443 -3617.267822    0.000000  100.000000      100.000000       7.0         -3717.267822                 0.0         False
2   -3517.267822   -3517.322754  440.198486 -3517.267822    0.027344 -3517.322754    0.000000    0.054932        0.000000       8.0         -3517.267822                 0.0         False
3   -3517.267822   -3517.267822  540.198486 -3517.267822    0.027344 -3517.267822    0.000000    0.000000        0.000000       9.0         -3517.267822                 0.0         False
4   -3218.213135   -3517.267822  540.198486 -3218.213135  299.054688 -3517.267822    0.000000  299.054688      199.054688       9.0         -3517.267822                 1.0         False
5   -2770.158447   -3404.517822  540.198486 -2770.158447  747.109375 -3404.517822  347.109375  287.250000      200.000000       2.0         -3517.267822                 1.0         False
6   -2682.853760   -3317.267822  540.198486 -2682.853760  374.554688 -3317.267822  347.109375  287.304688      187.304688       3.0         -3029.963135                 0.0         False
7   -2682.853760   -3146.342041  540.198486 -2682.853760  287.277344 -3146.342041  347.109375  116.378906       87.304688       3.0         -3029.963135                 0.0         False
8   -2470.131104   -3116.322754  540.198486 -2470.131104  329.101562 -3116.322754  347.136719  299.054932      200.000000       3.0         -3029.963135                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=88867/256, 
.[0m
[09/27 15:44:05]  --------------------------------------------------------------------------------
[09/27 15:44:05]  Iteration: 169 (45 solution, 123 counterexamples)
[09/27 15:45:07]  Generator returned sat in 58.162666 secs.
[09/27 15:45:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:45:08]  Improved number of small numbers from 41 to 113 out of a max of 113
[09/27 15:45:08]  Verifer returned sat in 0.414538 secs.
[09/27 15:45:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3669.431152   -3869.431152  592.361816 -3669.431152  300.054443 -3869.431152    0.000000  200.000000           200.0       3.0         -3869.431152                -1.0            -1
1   -3569.376709   -3769.485840  592.361816 -3569.376709  300.054443 -3769.485840    0.054443  200.054688           200.0       4.0         -3869.431152                 0.0         False
2   -3569.376709   -3769.431152  592.361816 -3569.376709    0.054688 -3769.431152    0.054443  200.000000           100.0       3.0         -3569.431152                 1.0          True
3   -3569.376709   -3669.431152  592.361816 -3569.376709  134.000000 -3669.431152    0.054443  100.000000             0.0       4.0         -3569.431152                 0.0         False
4   -3269.376709   -3569.431152  592.361816 -3269.376709  400.000000 -3569.431152    0.054443  300.000000           200.0       4.0         -3569.431152                 1.0         False
5   -2770.322021   -3373.540527  592.361816 -2770.322021  799.054688 -3373.540527  399.109131  204.109375           200.0       2.0         -3569.431152                 1.0         False
6   -2770.322021   -3369.431152  592.361816 -2770.322021  198.945312 -3369.431152  399.109131  200.000000           100.0       3.0         -3169.431152                 0.0         False
7   -2770.322021   -3269.431152  592.361816 -2770.322021  199.945312 -3269.431152  399.109131  100.000000             0.0       4.0         -3169.431152                 0.0         False
8   -2271.404053   -3169.431152  592.361816 -2271.404053  598.917969 -3169.431152  598.027100  300.000000           200.0       4.0         -3169.431152                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=153081/256, 
.[0m
[09/27 15:45:09]  --------------------------------------------------------------------------------
[09/27 15:45:09]  Iteration: 170 (45 solution, 124 counterexamples)
[09/27 15:45:46]  Generator returned sat in 33.314924 secs.
[09/27 15:45:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 15:45:47]  Improved gap from 0.0 to 100
[09/27 15:45:47]  Improved number of small numbers from 63 to 114 out of a max of 114
[09/27 15:45:47]  Verifer returned sat in 0.619212 secs.
[09/27 15:45:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3775.431396   -3840.728516  592.361816 -3775.431396  200.108887 -3840.728516    0.000000   65.297119       65.297119       1.0         -3840.728516                -1.0            -1
1   -3640.673828   -3775.376953  592.361816 -3640.673828  200.054688 -3775.376953    0.000000  134.703125      100.054688       1.0         -3640.673828                 0.0         False
2   -3640.673828   -3707.298096  592.361816 -3640.673828  134.648438 -3707.298096    0.000000   66.624268        0.054688       2.0         -3640.673828                 0.0         False
3   -3640.673828   -3640.728516  592.361816 -3640.673828   66.000000 -3640.728516    0.000000    0.054688      -99.945312       3.0         -3640.673828                 1.0         False
4   -3540.728516   -3540.728516  592.361816 -3540.728516  100.000000 -3540.728516    0.000000    0.000000     -100.000000       1.0         -3640.673828                 1.0         False
5   -3307.080078   -3373.540527  592.361816 -3307.080078  233.648438 -3373.540527    0.000000   66.460449       33.648438       1.0         -3640.673828                 0.0         False
6   -3040.782959   -3307.025391  592.361816 -3040.782959  332.757568 -3307.025391    0.000000  266.242432      199.945557       1.0         -3640.673828                 0.0         False
7   -2974.322266   -3140.728516  592.361816 -2974.322266  332.703125 -3140.728516    0.000000  166.406250      166.406250       2.0         -2974.322266                 0.0         False
8   -2640.673828   -3040.728516  592.361816 -2640.673828  500.054688 -3040.728516  200.054688  200.000000      200.000000       2.0         -2974.322266                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=25607/128, 
.[0m
[09/27 15:45:48]  --------------------------------------------------------------------------------
[09/27 15:45:48]  Iteration: 171 (45 solution, 125 counterexamples)
[09/27 15:46:22]  Generator returned sat in 29.680176 secs.
[09/27 15:46:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:46:22]  Improved number of small numbers from 113 to 113 out of a max of 113
[09/27 15:46:22]  Verifer returned sat in 0.158697 secs.
[09/27 15:46:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3775.431396   -3840.728516  592.361816 -3775.431396  200.108887 -3840.728516    0.000000   65.297119       65.297119       1.0         -3840.728516                -1.0            -1
1   -3640.673828   -3774.404541  592.361816 -3640.673828  200.054688 -3774.404541    0.000000  133.730713      100.054688       1.0         -3640.673828                 0.0         False
2   -3640.673828   -3708.216064  592.361816 -3640.673828  133.703613 -3708.216064    0.000000   67.542236        0.054688       2.0         -3640.673828                 0.0         False
3   -3640.673828   -3640.728516  592.361816 -3640.673828   66.000000 -3640.728516    0.000000    0.054688      -99.945312       3.0         -3640.673828                 1.0         False
4   -3540.728516   -3540.728516  592.361816 -3540.728516  100.000000 -3540.728516    0.000000    0.000000     -100.000000       1.0         -3640.673828                 1.0         False
5   -3307.052490   -3374.485840  592.361816 -3307.052490  233.676025 -3374.485840    0.000000   67.433350       33.676025       1.0         -3640.673828                 0.0         False
6   -3040.755615   -3307.025391  592.361816 -3040.755615  333.730225 -3307.025391    0.000000  266.269775      199.972900       1.0         -3640.673828                 0.0         False
7   -2973.322266   -3142.228516  592.361816 -2973.322266  333.703125 -3142.228516    0.000000  168.906250      167.406250       2.0         -2973.322266                 0.0         False
8   -2640.673828   -3040.728516  592.361816 -2640.673828  501.554688 -3040.728516  200.054688  200.000000      200.000000       2.0         -2973.322266                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=25607/128, 
.[0m
[09/27 15:46:23]  --------------------------------------------------------------------------------
[09/27 15:46:23]  Iteration: 172 (45 solution, 126 counterexamples)
[09/27 15:46:53]  Generator returned sat in 25.940716 secs.
[09/27 15:46:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:46:54]  Verifer returned unsat in 0.293303 secs.
[09/27 15:46:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:46:54]  --------------------------------------------------------------------------------
[09/27 15:46:54]  Iteration: 173 (46 solution, 126 counterexamples)
[09/27 15:47:05]  Generator returned sat in 6.723861 secs.
[09/27 15:47:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:05]  Improved gap from 0.0 to 100
[09/27 15:47:06]  Improved number of small numbers from 46 to 114 out of a max of 114
[09/27 15:47:06]  Verifer returned sat in 0.516170 secs.
[09/27 15:47:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3974.088867   -4274.061523  592.361816 -3974.088867    0.027344 -4274.061523   0.000000  299.972656        199.9729       2.0         -4274.061523                -1.0            -1
1   -3874.088867   -4174.007324  592.361816 -3874.088867  399.972656 -4174.007324   0.000000  299.918457        199.9729       2.0         -4274.061523                 0.0         False
2   -3774.061768   -4073.115967  592.361816 -3774.061768  399.945557 -4073.115967   0.000000  299.054199        200.0000       3.0         -3774.061768                 0.0         False
3   -3674.088867   -3974.061523  592.361816 -3674.088867  399.027100 -3974.061523   0.000000  299.972656        199.9729       3.0         -3674.088867                 0.0         False
4   -3574.034424   -3841.413330  592.361816 -3574.034424  400.027100 -3841.413330   0.027344  267.351562        200.0000       3.0         -3674.088867                 0.0         False
5   -3574.034424   -3774.061768  592.361816 -3574.034424    1.000000 -3774.061768   0.027344  200.000000        100.0000       4.0         -3574.061768                 0.0         False
6   -3326.453125   -3574.089111  592.361816 -3326.453125  447.581299 -3574.089111  47.608643  200.027344        200.0000       3.0         -3574.061768                 1.0         False
7   -3326.453125   -3574.061768  592.361816 -3326.453125    1.000000 -3574.061768  47.608643  200.000000        100.0000       4.0         -3374.061768                 0.0         False
8   -3126.425781   -3441.413330  592.361816 -3126.425781  400.027344 -3441.413330  47.635986  267.351562        200.0000       3.0         -3374.061768                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=195005/4096, 
.[0m
[09/27 15:47:06]  --------------------------------------------------------------------------------
[09/27 15:47:06]  Iteration: 174 (46 solution, 127 counterexamples)
[09/27 15:47:21]  Generator returned sat in 10.268763 secs.
[09/27 15:47:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:21]  Verifer returned unsat in 0.350755 secs.
[09/27 15:47:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:22]  --------------------------------------------------------------------------------
[09/27 15:47:22]  Iteration: 175 (47 solution, 127 counterexamples)
[09/27 15:47:31]  Generator returned sat in 5.451512 secs.
[09/27 15:47:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:32]  Verifer returned unsat in 0.216654 secs.
[09/27 15:47:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:32]  --------------------------------------------------------------------------------
[09/27 15:47:32]  Iteration: 176 (48 solution, 127 counterexamples)
[09/27 15:47:42]  Generator returned sat in 5.455872 secs.
[09/27 15:47:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:42]  Verifer returned unsat in 0.267637 secs.
[09/27 15:47:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:42]  --------------------------------------------------------------------------------
[09/27 15:47:42]  Iteration: 177 (49 solution, 127 counterexamples)
[09/27 15:47:52]  Generator returned sat in 5.352278 secs.
[09/27 15:47:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:53]  Verifer returned unsat in 0.303451 secs.
[09/27 15:47:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:47:53]  --------------------------------------------------------------------------------
[09/27 15:47:53]  Iteration: 178 (50 solution, 127 counterexamples)
[09/27 15:48:02]  Generator returned sat in 5.521701 secs.
[09/27 15:48:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:04]  Improved gap from 0.0 to 0
[09/27 15:48:04]  Improved number of small numbers from 74 to 114 out of a max of 114
[09/27 15:48:04]  Verifer returned sat in 1.165090 secs.
[09/27 15:48:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -377.888916    -577.888916  492.361816  -377.888916    0.026855  -577.888916        0.0  200.000000      200.000000       5.0          -577.888916                -1.0            -1
1    -377.888916    -495.807617  492.361816  -377.888916    0.081299  -495.807617        0.0  117.918701      100.000000       6.0          -577.888916                 0.0         False
2    -377.888916    -377.943115  492.361816  -377.888916    0.054199  -377.943115        0.0    0.054199        0.000000       7.0          -377.888916                 0.0         False
3    -377.888916    -377.888916  592.361816  -377.888916    0.026855  -377.888916        0.0    0.000000        0.000000       8.0          -377.888916                 0.0         False
4    -177.888916    -377.888916  592.361816  -177.888916  200.000000  -377.888916        0.0  200.000000      100.000000       8.0          -377.888916                 1.0         False
5    -177.888916    -177.888916  592.361816  -177.888916  117.918701  -177.888916        0.0    0.000000        0.000000       2.0          -177.888916                 1.0         False
6     -58.970215    -177.862061  592.361816   -58.970215  118.918701  -177.862061        0.0  118.891846       18.918701       1.0          -177.888916                 0.0         False
7     -57.943359     -57.943359  672.416016   -57.943359  119.918701   -57.943359        0.0    0.000000       -0.000244       1.0          -177.888916                 0.0         False
8      62.975342     -57.916260  672.416016    62.975342  120.918701   -57.916260        0.0  120.891602       20.918457       1.0          -177.888916                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:48:05]  --------------------------------------------------------------------------------
[09/27 15:48:05]  Iteration: 179 (50 solution, 128 counterexamples)
[09/27 15:48:21]  Generator returned sat in 11.893920 secs.
[09/27 15:48:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:21]  Verifer returned unsat in 0.225826 secs.
[09/27 15:48:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:21]  --------------------------------------------------------------------------------
[09/27 15:48:21]  Iteration: 180 (51 solution, 128 counterexamples)
[09/27 15:48:32]  Generator returned sat in 5.824630 secs.
[09/27 15:48:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:32]  Verifer returned unsat in 0.209078 secs.
[09/27 15:48:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:32]  --------------------------------------------------------------------------------
[09/27 15:48:32]  Iteration: 181 (52 solution, 128 counterexamples)
[09/27 15:48:42]  Generator returned sat in 5.832209 secs.
[09/27 15:48:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:43]  Verifer returned unsat in 0.247224 secs.
[09/27 15:48:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:43]  --------------------------------------------------------------------------------
[09/27 15:48:43]  Iteration: 182 (53 solution, 128 counterexamples)
[09/27 15:48:58]  Generator returned sat in 10.948531 secs.
[09/27 15:48:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:48:59]  Improved gap from 0.0 to 64.0625
[09/27 15:49:00]  Improved number of small numbers from 63 to 114 out of a max of 114
[09/27 15:49:00]  Verifer returned sat in 1.032364 secs.
[09/27 15:49:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     229.342285      29.396240  469.639404   229.342285  300.053955    29.396240        0.0  199.946045      199.946045       1.0            29.396240                -1.0            -1
1     329.396240      29.396240  469.639404   329.396240  300.000000    29.396240        0.0  300.000000      200.000000       1.0           329.396240                 0.0         False
2     429.342041     229.396240  469.639404   429.342041  399.945801   229.396240        0.0  199.945801      199.945801       2.0           329.396240                 0.0         False
3     429.342041     303.271484  469.639404   429.342041  125.125000   303.271484        0.0  126.070557       99.945801       3.0           429.342041                 0.0         False
4     429.396484     329.396240  469.639404   429.396484  126.125000   329.396240        0.0  100.000244        0.000244       4.0           429.342041                 0.0         False
5     429.396484     429.396484  505.576660   429.396484   63.062500   429.396484        0.0    0.000000      -64.062500       2.0           429.396484                 1.0         False
6     493.458984     493.458984  541.514160   493.458984   64.062500   493.458984        0.0    0.000000      -64.062500       1.0           429.396484                 0.0         False
7     558.521484     558.521484  576.451660   558.521484   65.062500   558.521484        0.0    0.000000      -64.062500       1.0           429.396484                 0.0         False
8     624.583984     622.583984  576.451660   624.583984   66.062500   622.583984        0.0    2.000000      -98.000000       1.0           429.396484                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:49:00]  --------------------------------------------------------------------------------
[09/27 15:49:00]  Iteration: 183 (53 solution, 129 counterexamples)
[09/27 15:49:47]  Generator returned sat in 42.606639 secs.
[09/27 15:49:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:49:48]  Improved gap from 0.0 to 100
[09/27 15:49:49]  Improved number of small numbers from 64 to 66 out of a max of 114
[09/27 15:49:49]  Verifer returned sat in 1.472914 secs.
[09/27 15:49:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -502.201416    -502.255137  505.57666  -502.201416    0.053711  -502.255137    0.000000    0.053721       -0.054189       8.0          -502.255137                -1.0            -1
1    -202.147227    -502.147227  505.57666  -202.147227  300.107910  -502.147227    0.000000  300.000000      200.000000       1.0          -502.255137                 1.0         False
2    -202.147227    -401.147227  505.57666  -202.147227    0.053955  -401.147227    0.000000  199.000000      100.000000       2.0          -202.147227                 0.0         False
3      -2.147227    -302.147227  505.57666    -2.147227  399.000000  -302.147227    0.000000  300.000000      200.000000       3.0          -202.147227                 0.0         False
4      97.852773    -202.147227  505.57666    97.852773  400.000000  -202.147227    0.000000  300.000000      200.000000       4.0          -202.147227                 0.0         False
5     298.852773      -3.363047  505.57666   298.852773  501.000000    -3.363047  101.000000  201.215820      200.000000       3.0          -202.147227                 1.0         False
6     298.852773      -2.147227  505.57666   298.852773  197.892090    -2.147227  101.000000  200.000000      100.000000       4.0           197.852773                 0.0         False
7     498.798818      97.852773  505.57666   498.798818  399.946045    97.852773  101.000000  299.946045      199.946045       4.0           197.852773                 1.0         False
8     699.825796     197.852773  505.57666   699.825796  500.973022   197.852773  201.973022  300.000000      200.000000       4.0           197.852773                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1654563/8192, 
.[0m
[09/27 15:49:50]  --------------------------------------------------------------------------------
[09/27 15:49:50]  Iteration: 184 (53 solution, 130 counterexamples)
[09/27 15:50:15]  Generator returned sat in 20.831957 secs.
[09/27 15:50:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:50:16]  Improved gap from 0.0 to 100
[09/27 15:50:16]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 15:50:16]  Verifer returned sat in 0.920721 secs.
[09/27 15:50:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -403.898926    -604.872070  505.576416  -403.898926    0.053467  -604.872070    0.000000  200.973145      100.973145       2.0          -604.872070                -1.0            -1
1    -403.872070    -504.872070  505.576416  -403.872070  201.000000  -504.872070    0.000000  101.000000        1.000000       2.0          -604.872070                 0.0         False
2    -304.898926    -403.845215  505.576416  -304.898926  199.973145  -403.845215    0.000000   98.946289       -0.026855       1.0          -304.898926                 0.0         False
3      -4.872070    -304.872070  505.576416    -4.872070  398.973145  -304.872070    0.000000  300.000000      200.000000       1.0          -304.898926                 0.0         False
4      95.101074    -104.872070  505.576416    95.101074  399.973145  -104.872070    0.000000  199.973145      199.973145       2.0          -304.898926                 0.0         False
5     296.101074      -5.214355  505.576416   296.101074  400.973145    -5.214355  100.973145  200.342285      200.000000       3.0          -304.898926                 0.0         False
6     296.101074      -4.872070  505.576416   296.101074  200.315430    -4.872070  100.973145  200.000000      100.000000       4.0           195.127930                 0.0         False
7     495.258789     195.127686  505.576416   495.258789  399.157715   195.127686  100.973145  199.157959      199.157715       3.0           195.127930                 1.0         False
8     696.258545     295.127686  505.576416   696.258545  400.157715   295.127686  201.130615  200.000244      200.000000       2.0           195.127930                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=823831/4096, 
.[0m
[09/27 15:50:17]  --------------------------------------------------------------------------------
[09/27 15:50:17]  Iteration: 185 (53 solution, 131 counterexamples)
[09/27 15:50:31]  Generator returned sat in 9.890942 secs.
[09/27 15:50:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:50:32]  Improved number of small numbers from 77 to 113 out of a max of 113
[09/27 15:50:32]  Verifer returned sat in 0.308001 secs.
[09/27 15:50:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -403.899170    -604.872070  505.576416  -403.899170    0.053467  -604.872070    0.000000  200.972900      100.972900       2.0          -604.872070                -1.0            -1
1    -403.872070    -504.872070  505.576416  -403.872070  201.000000  -504.872070    0.000000  101.000000        1.000000       2.0          -604.872070                 0.0         False
2    -304.875244    -403.868652  505.576416  -304.875244  199.996826  -403.868652    0.000000   98.993408       -0.003174       1.0          -304.875244                 0.0         False
3      -4.872070    -304.872070  505.576416    -4.872070  398.996582  -304.872070    0.000000  300.000000      200.000000       1.0          -304.875244                 0.0         False
4      95.124512    -104.895508  505.576416    95.124512  399.996582  -104.895508    0.000000  200.020020      199.996582       2.0          -304.875244                 0.0         False
5     296.101074      -7.882324  505.576416   296.101074  400.996582    -7.882324  100.973145  203.010254      200.000000       3.0          -304.875244                 0.0         False
6     296.101074      -4.872070  505.576416   296.101074  197.993164    -4.872070  100.973145  200.000000      100.000000       4.0           195.127930                 0.0         False
7     496.097656     195.127686  505.576416   496.097656  399.996582   195.127686  100.973145  199.996826      199.996582       3.0           195.127930                 1.0         False
8     697.097412     295.107666  505.576416   697.097412  400.996582   295.107666  201.969482  200.020264      200.000000       2.0           195.127930                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=827267/4096, 
.[0m
[09/27 15:50:33]  --------------------------------------------------------------------------------
[09/27 15:50:33]  Iteration: 186 (53 solution, 132 counterexamples)
[09/27 15:50:55]  Generator returned sat in 17.595010 secs.
[09/27 15:50:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:50:56]  Improved gap from 0.0 to 18.75
[09/27 15:50:56]  Improved number of small numbers from 36 to 114 out of a max of 114
[09/27 15:50:56]  Verifer returned sat in 1.034811 secs.
[09/27 15:50:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -328.023926    -527.996826  424.326416  -328.023926  200.026855  -527.996826     0.0000  199.972900       99.973145       2.0          -527.996826                -1.0            -1
1    -327.996826    -328.050781  424.326416  -327.996826  200.000000  -328.050781     0.0000    0.053955        0.000244       2.0          -327.996826                 0.0         False
2    -327.996826    -327.996826  505.576172  -327.996826    0.027100  -327.996826     0.0000    0.000000      -18.750000       2.0          -327.996826                 0.0         False
3      -9.273926    -209.496826  505.576172    -9.273926  318.722900  -209.496826     0.0000  200.222900      199.972900       1.0          -327.996826                 0.0         False
4     110.226074    -132.104980  505.576172   110.226074  319.722900  -132.104980    19.4729  222.858154      200.000000       2.0          -327.996826                 0.0         False
5     110.226074      -9.246826  505.576172   110.226074   98.972900    -9.246826    19.4729  100.000000      100.000000       2.0            90.753174                 0.0         False
6     110.226074      -9.246826  505.576172   110.226074   99.972900    -9.246826    19.4729  100.000000        0.000000       2.0            90.753174                 0.0         False
7     111.198975      91.726074  585.853271   111.198975  100.972900    91.726074    19.4729    0.000000      -18.750000       1.0            90.753174                 0.0         False
8     213.171875     110.476074  585.853271   213.171875  101.972900   110.476074    19.4729   83.222900      -16.777100       1.0            90.753174                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 15:50:57]  --------------------------------------------------------------------------------
[09/27 15:50:57]  Iteration: 187 (53 solution, 133 counterexamples)
[09/27 15:51:55]  Generator returned sat in 53.411678 secs.
[09/27 15:51:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:51:56]  Verifer returned unsat in 0.937090 secs.
[09/27 15:51:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:51:56]  --------------------------------------------------------------------------------
[09/27 15:51:56]  Iteration: 188 (54 solution, 133 counterexamples)
[09/27 15:52:06]  Generator returned sat in 5.743458 secs.
[09/27 15:52:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:09]  Verifer returned unsat in 2.103429 secs.
[09/27 15:52:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:09]  --------------------------------------------------------------------------------
[09/27 15:52:09]  Iteration: 189 (55 solution, 133 counterexamples)
[09/27 15:52:20]  Generator returned sat in 6.379141 secs.
[09/27 15:52:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:21]  Verifer returned unsat in 1.342534 secs.
[09/27 15:52:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:21]  --------------------------------------------------------------------------------
[09/27 15:52:21]  Iteration: 190 (56 solution, 133 counterexamples)
[09/27 15:52:32]  Generator returned sat in 5.626009 secs.
[09/27 15:52:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:33]  Verifer returned unsat in 0.928458 secs.
[09/27 15:52:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:33]  --------------------------------------------------------------------------------
[09/27 15:52:33]  Iteration: 191 (57 solution, 133 counterexamples)
[09/27 15:52:58]  Generator returned sat in 20.260811 secs.
[09/27 15:52:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:59]  Verifer returned unsat in 1.242292 secs.
[09/27 15:52:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:52:59]  --------------------------------------------------------------------------------
[09/27 15:52:59]  Iteration: 192 (58 solution, 133 counterexamples)
[09/27 15:53:10]  Generator returned sat in 6.065761 secs.
[09/27 15:53:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:53:15]  Improved gap from 0.0 to 0
[09/27 15:53:15]  Improved number of small numbers from 46 to 114 out of a max of 114
[09/27 15:53:15]  Verifer returned sat in 4.870739 secs.
[09/27 15:53:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    1129.560547     928.452637 -933.231201  1129.560547    0.027100   928.452637        0.0  201.107910      200.000000       6.0           928.452637                -1.0            -1
1    1129.560547    1028.452637 -933.231201  1129.560547    0.027100  1028.452637        0.0  101.107910      100.000000       6.0           928.452637                 0.0         False
2    1129.560547    1129.506592 -933.231201  1129.560547    0.027100  1129.506592        0.0    0.053955        0.000000       7.0           928.452637                 0.0         False
3    1129.560547    1129.560547 -833.231201  1129.560547    0.027100  1129.560547        0.0    0.000000        0.000000       8.0           928.452637                 0.0         False
4    1331.668457    1129.560547 -833.231201  1331.668457  202.107910  1129.560547        0.0  202.107910      102.107910       8.0           928.452637                 1.0          True
5    1331.668457    1229.560791 -833.231201  1331.668457  102.107910  1229.560791        0.0  102.107666        2.107910       2.0          1331.668457                 1.0         False
6    1331.668457    1331.668457 -735.339111  1331.668457  102.081055  1331.668457        0.0    0.000000        0.000000       3.0          1331.668457                 0.0         False
7    1484.762939    1331.695557 -735.339111  1484.762939  153.094482  1331.695557        0.0  153.067383       53.094482       1.0          1331.668457                 0.0         False
8    1510.310303    1449.533447 -735.339111  1510.310303  178.614746  1449.533447        0.0   60.776855      -21.358154       2.0          1331.668457                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:53:15]  --------------------------------------------------------------------------------
[09/27 15:53:15]  Iteration: 193 (58 solution, 134 counterexamples)
[09/27 15:53:44]  Generator returned sat in 24.513227 secs.
[09/27 15:53:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:53:45]  Improved gap from 0.0 to 100
[09/27 15:53:45]  Improved number of small numbers from 36 to 114 out of a max of 114
[09/27 15:53:45]  Verifer returned sat in 0.815784 secs.
[09/27 15:53:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     181.674805    -118.297852  14.627197   181.674805  300.080811  -118.297852    0.000000  299.972656      199.972656       2.0          -118.297852                -1.0            -1
1     181.756104      81.702148  14.627197   181.756104  300.053955    81.702148    0.000000  100.053955      100.053955       2.0           181.756104                 0.0         False
2     381.729004     181.701904  14.627197   381.729004  300.026855   181.701904    0.026855  200.000244      200.000000       2.0           381.702148                 0.0         False
3     381.729004     281.702148  14.627197   381.729004   99.500000   281.702148    0.026855  100.000000      100.000000       2.0           381.702148                 0.0         False
4     382.229004     381.702148  14.627197   382.229004  100.500000   381.702148    0.026855    0.500000        0.500000       3.0           381.702148                 0.0         False
5     581.729004     381.702148  14.627197   581.729004  200.000000   381.702148    0.026855  200.000000      100.000000       3.0           381.702148                 1.0         False
6     780.729004     481.702148  14.627197   780.729004  399.000000   481.702148    0.026855  299.000000      199.000000       2.0           381.702148                 1.0         False
7     881.729004     581.702148  14.627197   881.729004  400.000000   581.702148    0.026855  300.000000      200.000000       3.0           381.702148                 0.0         False
8    1380.729004     781.701904  14.627197  1380.729004  799.000000   781.701904  399.026855  200.000244      200.000000       2.0           381.702148                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=399, 
.[0m
[09/27 15:53:46]  --------------------------------------------------------------------------------
[09/27 15:53:46]  Iteration: 194 (58 solution, 135 counterexamples)
[09/27 15:54:36]  Generator returned sat in 45.601750 secs.
[09/27 15:54:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:54:38]  Verifer returned unsat in 1.356589 secs.
[09/27 15:54:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:54:38]  --------------------------------------------------------------------------------
[09/27 15:54:38]  Iteration: 195 (59 solution, 135 counterexamples)
[09/27 15:54:50]  Generator returned sat in 7.978345 secs.
[09/27 15:54:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:54:52]  Verifer returned unsat in 1.461748 secs.
[09/27 15:54:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:54:52]  --------------------------------------------------------------------------------
[09/27 15:54:52]  Iteration: 196 (60 solution, 135 counterexamples)
[09/27 15:55:08]  Generator returned sat in 11.874115 secs.
[09/27 15:55:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:55:08]  Verifer returned unsat in 0.217083 secs.
[09/27 15:55:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:55:08]  --------------------------------------------------------------------------------
[09/27 15:55:08]  Iteration: 197 (61 solution, 135 counterexamples)
[09/27 15:56:33]  Generator returned sat in 80.146415 secs.
[09/27 15:56:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:56:34]  Improved gap from 0.0 to 71.875
[09/27 15:56:34]  Improved number of small numbers from 64 to 114 out of a max of 114
[09/27 15:56:34]  Verifer returned sat in 0.902458 secs.
[09/27 15:56:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     271.661377     271.607422 -13.497803   271.661377    0.053955   271.607422        0.0    0.053955      -99.946045       5.0           271.607422                -1.0            -1
1     571.553711     371.607666 -13.497803   571.553711  299.946289   371.607666        0.0  199.946045       99.946289       1.0           271.607422                 1.0         False
2     771.607422     571.607422 -13.497803   771.607422  399.999756   571.607422        0.0  200.000000      200.000000       1.0           271.607422                 0.0         False
3     771.607422     670.286377 -13.497803   771.607422   72.875000   670.286377        0.0  101.321045      100.000000       2.0           771.607422                 0.0         False
4     771.607422     698.678711 -13.497803   771.607422   73.875000   698.678711        0.0   72.928711        0.000000       3.0           771.607422                 0.0         False
5     771.607422     771.607422  14.627197   771.607422   72.875000   771.607422        0.0    0.000000      -71.875000       4.0           771.607422                 1.0         False
6     843.482422     843.482422  42.751953   843.482422   71.875000   843.482422        0.0    0.000000      -71.875244       1.0           843.482422                 1.0         False
7     916.357422     916.357422  69.876953   916.357422   72.875000   916.357422        0.0    0.000000      -71.875244       1.0           843.482422                 0.0         False
8     990.232422     990.232422  69.876953   990.232422   73.875000   990.232422        0.0    0.000000      -98.000244       1.0           843.482422                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:56:35]  --------------------------------------------------------------------------------
[09/27 15:56:35]  Iteration: 198 (61 solution, 136 counterexamples)
[09/27 15:57:37]  Generator returned sat in 58.149354 secs.
[09/27 15:57:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 15:57:38]  Improved gap from 0.01 to 62.5
[09/27 15:57:38]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 15:57:38]  Verifer returned sat in 0.948550 secs.
[09/27 15:57:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     434.000000     334.053711  -50.997803   434.000000  137.607422   334.053711        0.0  99.946289       99.946289       5.0           334.053711                -1.0            -1
1     471.607422     434.053711  -50.997803   471.607422  137.553711   434.053711        0.0  37.553711       37.553711       1.0           471.607422                 1.0         False
2     471.607422     471.553711  -50.997803   471.607422   37.500000   471.553711        0.0   0.053711      -62.446289       2.0           471.607422                 0.0         False
3     534.053711     534.053711  -13.497803   534.053711   62.500000   534.053711        0.0   0.000000      -62.500000       1.0           471.607422                 1.0         False
4     596.553711     596.553711   24.002197   596.553711   62.500000   596.553711        0.0   0.000000      -62.500000       1.0           471.607422                 0.0         False
5     659.053711     659.053711   61.502197   659.053711   62.500000   659.053711        0.0   0.000000      -62.500000       1.0           471.607422                 0.0         False
6     721.553711     721.553711   99.002197   721.553711   62.500000   721.553711        0.0   0.000000      -62.500000       1.0           471.607422                 0.0         False
7     784.053711     784.053711  136.502197   784.053711   62.500000   784.053711        0.0   0.000000      -62.500000       1.0           471.607422                 0.0         False
8     846.553711     846.553711  136.502197   846.553711   62.500000   846.553711        0.0   0.000000     -100.000000       1.0           471.607422                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 15:57:39]  --------------------------------------------------------------------------------
[09/27 15:57:39]  Iteration: 199 (61 solution, 137 counterexamples)
[09/27 15:58:25]  Generator returned sat in 41.907573 secs.
[09/27 15:58:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:58:27]  Improved number of small numbers from 68 to 70 out of a max of 113
[09/27 15:58:27]  Verifer returned sat in 0.957725 secs.
[09/27 15:58:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -228.339111    -428.339111 -13.498047  -228.339111  530.287354  -428.339111    0.000000  200.000000      200.000000       5.0          -428.339111                -1.0            -1
1     101.948287    -428.339111 -13.498047   101.948287  530.287399  -428.339111  230.287399  300.000000      200.000000       5.0          -428.339111                 1.0         False
2     332.181975    -228.339111 -13.498047   332.181975  530.233688  -228.339111  360.521087  200.000000      200.000000       6.0           -28.339111                 1.0         False
3     662.361952    -228.339111 -13.498047   662.361952  530.179977  -228.339111  590.701063  300.000000      200.000000       6.0            71.660889                 1.0         False
4     662.361952    -128.339111 -13.498047   662.361952  266.089988  -128.339111  590.701063  200.000000      100.000000       4.0            71.660889                 1.0         False
5     861.496935     -28.339111 -13.498047   861.496935  399.134983   -28.339111  590.701063  299.134983      199.134983       4.0            71.660889                 1.0         False
6    1161.064426     171.255941 -13.498047  1161.064426  598.702474   171.255941  789.403537  200.404948      200.000000       2.0            71.660889                 1.0         False
7    1261.010715     271.660889 -13.498047  1261.010715  300.351237   271.660889  789.403537  199.946289      199.946289       2.0           471.607178                 0.0         False
8    1362.415663     271.660889 -13.498047  1362.415663  301.351237   271.660889  790.754774  300.000000      200.000000       2.0           471.607178                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204855/1024, 
.[0m
[09/27 15:58:27]  --------------------------------------------------------------------------------
[09/27 15:58:27]  Iteration: 200 (61 solution, 138 counterexamples)
[09/27 15:59:09]  Generator returned sat in 37.489576 secs.
[09/27 15:59:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:59:11]  Verifer returned unsat in 1.925168 secs.
[09/27 15:59:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:59:11]  --------------------------------------------------------------------------------
[09/27 15:59:11]  Iteration: 201 (62 solution, 138 counterexamples)
[09/27 15:59:23]  Generator returned sat in 6.763068 secs.
[09/27 15:59:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:59:24]  Verifer returned unsat in 1.121675 secs.
[09/27 15:59:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:59:24]  --------------------------------------------------------------------------------
[09/27 15:59:24]  Iteration: 202 (63 solution, 138 counterexamples)
[09/27 15:59:35]  Generator returned sat in 6.081040 secs.
[09/27 15:59:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 15:59:37]  Improved gap from 0.0 to 0
[09/27 15:59:37]  Improved number of small numbers from 66 to 72 out of a max of 114
[09/27 15:59:37]  Verifer returned sat in 1.995304 secs.
[09/27 15:59:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -600.330267    -800.330267 -113.498047  -600.330267    0.026611  -800.330267    0.000000  200.000000      200.000000       3.0          -800.330267                -1.0            -1
1    -600.330267    -797.214545 -113.498047  -600.330267    0.053711  -797.214545    0.000000  196.884277      100.000000       3.0          -800.330267                 0.0         False
2    -600.330267    -645.060303 -113.498047  -600.330267    0.026855  -645.060303    0.000000   44.730035        0.000000       4.0          -600.330267                 0.0         False
3    -600.330267    -600.330267  -13.498047  -600.330267   44.730035  -600.330267    0.000000    0.000000        0.000000       5.0          -600.330267                 0.0         False
4    -332.235215    -600.330267  -13.498047  -332.235215  268.095052  -600.330267    0.000000  268.095052      168.095052       5.0          -600.330267                 1.0         False
5      -0.303412    -400.330322  -13.498047    -0.303412  600.026855  -400.330322  200.026855  200.000055      200.000000       2.0          -600.330267                 1.0         False
6      -0.303412    -334.681504  -13.498047    -0.303412    1.000000  -334.681504  200.026855  134.351237      100.000000       3.0          -200.330267                 0.0         False
7      -0.303412    -200.357123  -13.498047    -0.303412  134.324382  -200.357123  200.026855    0.026855        0.000000       3.0          -200.330267                 0.0         False
8     267.818496    -200.303467  -13.498047   267.818496  268.148763  -200.303467  200.026855  268.095107      168.121908       1.0          -200.330267                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409655/2048, 
.[0m
[09/27 15:59:38]  --------------------------------------------------------------------------------
[09/27 15:59:38]  Iteration: 203 (63 solution, 139 counterexamples)
[09/27 16:00:26]  Generator returned sat in 43.649567 secs.
[09/27 16:00:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:00:27]  Improved gap from 0.0 to 3.125
[09/27 16:00:27]  Improved number of small numbers from 62 to 114 out of a max of 114
[09/27 16:00:27]  Verifer returned sat in 0.524503 secs.
[09/27 16:00:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -900.330078    -900.330078 -13.498291  -900.330078    0.053711  -900.330078   0.000000    0.000000        0.000000       2.0          -900.330078                -1.0            -1
1    -800.437500    -800.437500 -13.498291  -800.437500   99.892578  -800.437500   0.000000    0.000000       -0.107422       1.0          -900.330078                 0.0         False
2    -500.384033    -700.330078 -13.498291  -500.384033  300.053467  -700.330078   0.000000  199.946045      199.946045       1.0          -900.330078                 0.0         False
3    -400.330078    -600.330322 -13.498291  -400.330078  300.000000  -600.330322   0.000000  200.000244      200.000000       2.0          -400.330078                 0.0         False
4    -299.330322    -600.330078 -13.498291  -299.330322  301.000000  -600.330078   0.999756  300.000000      200.000000       3.0          -400.330078                 0.0         False
5    -299.330322    -500.330078 -13.498291  -299.330322    1.000000  -500.330078   0.999756  200.000000      100.000000       3.0          -300.330078                 0.0         False
6    -299.330322    -303.276611 -13.498291  -299.330322    2.000000  -303.276611   0.999756    2.946533        0.000000       3.0          -300.330078                 0.0         False
7    -299.276855    -300.276611  83.323242  -299.276855    3.000000  -300.276611   0.999756    0.000000       -3.125000       1.0          -300.330078                 0.0         False
8    -295.276855    -297.151611  83.323242  -295.276855    4.000000  -297.151611   0.999756    0.875000      -99.125000       1.0          -300.330078                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 16:00:28]  --------------------------------------------------------------------------------
[09/27 16:00:28]  Iteration: 204 (63 solution, 140 counterexamples)
[09/27 16:00:43]  Generator returned sat in 10.695749 secs.
[09/27 16:00:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:00:44]  Improved gap from 0.0 to 18.75
[09/27 16:00:45]  Improved number of small numbers from 48 to 114 out of a max of 114
[09/27 16:00:45]  Verifer returned sat in 1.401823 secs.
[09/27 16:00:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -899.473389   -1076.776855  -1.766113  -899.473389  177.410645 -1076.776855   0.000000  177.303467      177.303467       2.0         -1076.776855                -1.0            -1
1    -899.419678    -976.776855  -1.766113  -899.419678  177.357178  -976.776855   0.000000   77.357178       77.357178       2.0          -899.419678                 0.0         False
2    -899.419678    -899.419678   2.126709  -899.419678    0.053467  -899.419678   0.000000    0.000000      -18.750000       2.0          -899.419678                 0.0         False
3    -599.223389    -781.812500   2.126709  -599.223389  300.196289  -781.812500   0.000000  182.589111      181.446289       1.0          -899.419678                 0.0         False
4    -480.616211    -780.669434   2.126709  -480.616211  301.196289  -780.669434   0.053467  299.999756      200.000000       2.0          -899.419678                 0.0         False
5    -480.616211    -580.669678   2.126709  -480.616211   98.053711  -580.669678   0.053467  100.000000      100.000000       2.0          -480.669678                 0.0         False
6    -480.616211    -580.669678   2.126709  -480.616211   99.053711  -580.669678   0.053467  100.000000        0.000000       2.0          -480.669678                 0.0         False
7    -480.562500    -480.615967  83.322998  -480.562500  100.053711  -480.615967   0.053467    0.000000      -18.750000       1.0          -480.669678                 0.0         False
8    -379.508789    -461.865967  83.322998  -379.508789  101.053711  -461.865967   0.053467   82.303711      -17.696289       1.0          -480.669678                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 16:00:45]  --------------------------------------------------------------------------------
[09/27 16:00:45]  Iteration: 205 (63 solution, 141 counterexamples)
[09/27 16:00:58]  Generator returned sat in 7.957620 secs.
[09/27 16:00:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:01:03]  Improved gap from 0.0 to 0
[09/27 16:01:03]  Improved number of small numbers from 80 to 89 out of a max of 114
[09/27 16:01:03]  Verifer returned sat in 5.465732 secs.
[09/27 16:01:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -880.669678   -1101.642944    2.126709  -880.669678  220.999756 -1101.642944        0.0  220.973267      200.000000       2.0         -1101.642944                -1.0            -1
1    -880.669678    -980.669678    2.126709  -880.669678  220.973145  -980.669678        0.0  100.000000      100.000000       2.0          -880.669678                 0.0         False
2    -880.669678    -880.723145    2.126709  -880.669678  100.000000  -880.723145        0.0    0.053467        0.000000       3.0          -880.669678                 0.0         False
3    -880.669678    -880.669678  102.126709  -880.669678    0.026611  -880.669678        0.0    0.000000        0.000000       4.0          -880.669678                 0.0         False
4    -660.696411    -880.669678  102.126709  -660.696411  219.973267  -880.669678        0.0  219.973267      119.973267       4.0          -880.669678                 1.0         False
5    -660.696411    -780.669678  102.126709  -660.696411   99.000000  -780.669678        0.0  119.973267       19.973267       2.0          -660.696411                 1.0         False
6    -660.696411    -660.696411  182.153320  -660.696411  100.526733  -660.696411        0.0    0.000000       -0.000122       3.0          -660.696411                 0.0         False
7    -499.446411    -603.973145  182.153320  -499.446411  161.250000  -603.973145        0.0  104.526733       61.249878       1.0          -660.696411                 0.0         False
8    -383.999878    -560.696289  182.153320  -383.999878  219.973267  -560.696289        0.0  176.696411       76.696411       2.0          -660.696411                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:01:04]  --------------------------------------------------------------------------------
[09/27 16:01:04]  Iteration: 206 (63 solution, 142 counterexamples)
[09/27 16:01:34]  Generator returned sat in 24.981665 secs.
[09/27 16:01:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:01:34]  Improved gap from 0.00125 to 100
[09/27 16:01:35]  Improved number of small numbers from 56 to 82 out of a max of 114
[09/27 16:01:35]  Verifer returned sat in 0.968561 secs.
[09/27 16:01:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1083.669922   -1083.723145  5.073242 -1083.669922    0.053467 -1083.723145    0.000000    0.053223       -0.053467       4.0         -1083.723145                -1.0            -1
1    -880.669922   -1083.616211  5.073242  -880.669922  203.053223 -1083.616211    0.000000  202.946289      102.946533       1.0         -1083.723145                 1.0         False
2    -880.562988    -983.616333  5.073242  -880.562988  203.053223  -983.616333    0.000000  103.053345        3.053467       2.0         -1083.723145                 0.0         False
3    -836.643005    -880.509644  5.073242  -836.643005  146.973328  -880.509644    0.000000   43.866638      -53.026550       1.0          -836.643005                 1.0          True
4    -732.536316    -732.589661  5.073242  -732.536316  147.973328  -732.589661    0.000000    0.053345      -48.919861       1.0          -836.643005                 0.0         False
5    -583.616333    -583.669678  5.073242  -583.616333  148.973328  -583.669678    0.000000    0.053345        0.000122       1.0          -836.643005                 0.0         False
6    -433.696350    -583.616333  5.073242  -433.696350  149.973328  -583.616333    0.000000  149.919983       49.920105       2.0          -836.643005                 0.0         False
7    -283.669678    -483.456543  5.073242  -283.669678  299.946655  -483.456543    0.000000  199.786865       99.946777       2.0          -836.643005                 1.0          True
8     116.436768    -283.616455  5.073242   116.436768  599.893311  -283.616455  200.053223  200.000000      200.000000       1.0          -836.643005                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409709/2048, 
.[0m
[09/27 16:01:36]  --------------------------------------------------------------------------------
[09/27 16:01:36]  Iteration: 207 (63 solution, 143 counterexamples)
[09/27 16:02:35]  Generator returned sat in 54.939044 secs.
[09/27 16:02:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:02:38]  Verifer returned unsat in 2.438821 secs.
[09/27 16:02:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:02:38]  --------------------------------------------------------------------------------
[09/27 16:02:38]  Iteration: 208 (64 solution, 143 counterexamples)
[09/27 16:02:49]  Generator returned sat in 6.568477 secs.
[09/27 16:02:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:02:52]  Verifer returned unsat in 1.928863 secs.
[09/27 16:02:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:02:52]  --------------------------------------------------------------------------------
[09/27 16:02:52]  Iteration: 209 (65 solution, 143 counterexamples)
[09/27 16:03:05]  Generator returned sat in 9.016779 secs.
[09/27 16:03:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:03:06]  Verifer returned unsat in 0.658391 secs.
[09/27 16:03:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:03:06]  --------------------------------------------------------------------------------
[09/27 16:03:06]  Iteration: 210 (66 solution, 143 counterexamples)
[09/27 16:03:17]  Generator returned sat in 6.136957 secs.
[09/27 16:03:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:03:19]  Verifer returned unsat in 1.518419 secs.
[09/27 16:03:19]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:03:19]  --------------------------------------------------------------------------------
[09/27 16:03:19]  Iteration: 211 (67 solution, 143 counterexamples)
[09/27 16:03:31]  Generator returned sat in 6.362124 secs.
[09/27 16:03:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:03:33]  Improved gap from 0.0 to 0
[09/27 16:03:34]  Improved number of small numbers from 39 to 47 out of a max of 114
[09/27 16:03:34]  Verifer returned sat in 3.303945 secs.
[09/27 16:03:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -520.404199    -820.404199    5.073242  -520.404199    0.053223  -820.404199    0.000000  300.000000      200.000000       6.0          -820.404199                -1.0            -1
1    -520.404199    -720.404199    5.073242  -520.404199    0.053467  -720.404199    0.000000  200.000000      100.000000       7.0          -820.404199                 0.0         False
2    -520.404199    -569.720880    5.073242  -520.404199    0.053467  -569.720880    0.000000   49.316681        0.000000       8.0          -820.404199                 0.0         False
3    -520.404199    -520.404199  105.073242  -520.404199   49.263336  -520.404199    0.000000    0.000000        0.000000       9.0          -820.404199                 0.0         False
4    -270.877527    -520.404199  105.073242  -270.877527  249.526672  -520.404199    0.000000  249.526672      149.526672       9.0          -820.404199                 1.0          True
5      79.649146    -420.404199  105.073242    79.649146  600.053345  -420.404199  200.053345  300.000000      200.000000       2.0          -820.404199                 1.0         False
6      79.649146    -278.992543  105.073242    79.649146   73.658340  -278.992543  200.053345  158.588343      100.000000       3.0          -120.404199                 0.0         False
7      79.649146    -120.457544  105.073242    79.649146  158.534999  -120.457544  200.053345    0.053345        0.000000       3.0          -120.404199                 0.0         False
8     359.836628    -120.351074  105.073242   359.836628  280.240827  -120.351074  200.053345  280.134357      180.187482       1.0          -120.404199                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638837/8192, 
.[0m
[09/27 16:03:35]  --------------------------------------------------------------------------------
[09/27 16:03:35]  Iteration: 212 (67 solution, 144 counterexamples)
[09/27 16:04:25]  Generator returned sat in 44.772404 secs.
[09/27 16:04:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:04:25]  Improved gap from 0.0 to 0
[09/27 16:04:26]  Improved number of small numbers from 52 to 114 out of a max of 114
[09/27 16:04:26]  Verifer returned sat in 0.786431 secs.
[09/27 16:04:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     279.692139     -20.307861 -795.023438   279.692139    0.026611   -20.307861        0.0  300.000000      200.000000       6.0           -20.307861                -1.0            -1
1     279.692139     179.692139 -795.023438   279.692139    0.026611   179.692139        0.0  100.000000      100.000000       6.0           -20.307861                 0.0         False
2     279.692139     279.665527 -795.023438   279.692139    0.026611   279.665527        0.0    0.026611        0.000000       7.0           -20.307861                 0.0         False
3     279.692139     279.692139 -695.023438   279.692139    0.026611   279.692139        0.0    0.000000        0.000000       8.0           -20.307861                 0.0         False
4     428.692139     279.692139 -695.023438   428.692139  149.000000   279.692139        0.0  149.000000       49.000000       8.0           -20.307861                 1.0          True
5     428.692139     428.692139 -694.023193   428.692139   49.000000   428.692139        0.0    0.000000      -49.999756       2.0           428.692139                 1.0         False
6     478.692139     478.692139 -594.023438   478.692139   50.000000   478.692139        0.0    0.000000        0.000000       1.0           428.692139                 0.0         False
7     529.692139     529.692139 -545.023438   529.692139   51.000000   529.692139        0.0    0.000000        0.000000       1.0           428.692139                 0.0         False
8     581.692139     581.692139 -545.023193   581.692139   52.000000   581.692139        0.0    0.000000      -47.999756       1.0           428.692139                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:04:26]  --------------------------------------------------------------------------------
[09/27 16:04:26]  Iteration: 213 (67 solution, 145 counterexamples)
[09/27 16:05:07]  Generator returned sat in 35.893770 secs.
[09/27 16:05:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:05:08]  Improved gap from 0.0 to 71.875
[09/27 16:05:08]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/27 16:05:08]  Verifer returned sat in 0.973168 secs.
[09/27 16:05:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -666.785156    -666.838623 -773.191406  -666.785156    0.026367  -666.838623        0.0    0.053467        0.000244       9.0          -666.838623                -1.0            -1
1    -666.785156    -666.785156 -745.066650  -666.785156    0.026611  -666.785156        0.0    0.000000      -71.875000       3.0          -666.838623                 1.0         False
2    -294.910156    -494.910400 -745.066650  -294.910156  371.875000  -494.910400        0.0  200.000244      200.000000       1.0          -666.838623                 1.0          True
3    -294.910156    -394.910400 -745.066650  -294.910156   76.549072  -394.910400        0.0  100.000244      100.000000       2.0          -294.910156                 0.0         False
4    -294.910156    -394.883545 -745.066650  -294.910156   75.549072  -394.883545        0.0   99.973389        0.000000       3.0          -294.910156                 1.0         False
5    -294.910156    -294.910156 -716.941650  -294.910156   74.549072  -294.910156        0.0    0.000000      -71.875000       4.0          -294.910156                 1.0         False
6    -221.361084    -221.361084 -693.164795  -221.361084   73.549072  -221.361084        0.0    0.000000      -74.549072       1.0          -221.361084                 1.0         False
7    -146.812012    -146.812012 -665.039795  -146.812012   74.549072  -146.812012        0.0    0.000000      -71.875000       1.0          -221.361084                 0.0         False
8     -71.262939     -74.936768 -665.039795   -71.262939   75.549072   -74.936768        0.0    3.673828      -96.325928       1.0          -221.361084                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:05:09]  --------------------------------------------------------------------------------
[09/27 16:05:09]  Iteration: 214 (67 solution, 146 counterexamples)
[09/27 16:05:32]  Generator returned sat in 18.668875 secs.
[09/27 16:05:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:05:34]  Improved gap from 0.0 to 0
[09/27 16:05:34]  Improved number of small numbers from 47 to 55 out of a max of 114
[09/27 16:05:34]  Verifer returned sat in 1.726955 secs.
[09/27 16:05:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1213.400918   -1413.400918 -745.06665 -1213.400918    0.026611 -1413.400918    0.000000  200.000000      200.000000       9.0         -1413.400918                -1.0            -1
1   -1213.400918   -1413.400918 -745.06665 -1213.400918    0.052979 -1413.400918    0.000000  200.000000      100.000000       9.0         -1413.400918                 1.0         False
2   -1213.400918   -1256.991211 -745.06665 -1213.400918    0.026367 -1256.991211    0.000000   43.590293        0.000000       9.0         -1213.400918                 1.0         False
3   -1213.400918   -1213.400918 -645.06665 -1213.400918   43.563440 -1213.400918    0.000000    0.000000        0.000000       8.0         -1213.400918                 1.0         False
4    -948.055757   -1213.400918 -645.06665  -948.055757  265.345161 -1213.400918    0.000000  265.345161      165.345161       8.0         -1213.400918                 1.0         False
5    -615.383177   -1078.781560 -645.06665  -615.383177  598.017741 -1078.781560  198.017741  265.380642      200.000000       2.0         -1213.400918                 1.0         False
6    -580.754949    -948.029053 -645.06665  -580.754949  300.008870  -948.029053  198.017741  169.256363      134.628228       2.0          -778.772690                 0.0         False
7    -449.002441    -813.400918 -645.06665  -449.002441  301.008870  -813.400918  198.017741  166.380736      166.380736       3.0          -778.772690                 0.0         False
8    -313.374307    -778.746094 -645.06665  -313.374307  302.008870  -778.746094  200.026611  265.345176      200.000000       2.0          -778.772690                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819309/4096, 
.[0m
[09/27 16:05:35]  --------------------------------------------------------------------------------
[09/27 16:05:35]  Iteration: 215 (67 solution, 147 counterexamples)
[09/27 16:06:03]  Generator returned sat in 22.954750 secs.
[09/27 16:06:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:06:03]  Verifer returned unsat in 0.172141 secs.
[09/27 16:06:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:06:04]  --------------------------------------------------------------------------------
[09/27 16:06:04]  Iteration: 216 (68 solution, 147 counterexamples)
[09/27 16:06:17]  Generator returned sat in 8.680978 secs.
[09/27 16:06:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:06:18]  Improved gap from 0.0 to 0
[09/27 16:06:18]  Improved number of small numbers from 32 to 44 out of a max of 114
[09/27 16:06:18]  Verifer returned sat in 1.298117 secs.
[09/27 16:06:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1101.453978   -1366.378752 -857.01359 -1101.453978    0.026367 -1366.378752    0.000000  264.924774        200.0000       8.0         -1366.378752                -1.0            -1
1   -1101.453978   -1301.453978 -857.01359 -1101.453978    0.026367 -1301.453978    0.000000  200.000000        100.0000       7.0         -1366.378752                 0.0         False
2   -1101.453978   -1101.507080 -857.01359 -1101.453978    0.026367 -1101.507080    0.000000    0.053102          0.0000       8.0         -1366.378752                 0.0         False
3   -1101.453978   -1101.453978 -757.01359 -1101.453978    0.026550 -1101.453978    0.000000    0.000000          0.0000       9.0         -1366.378752                 0.0         False
4    -835.489378   -1101.453978 -757.01359  -835.489378  265.964600 -1101.453978    0.000000  265.964600        165.9646       9.0         -1366.378752                 1.0          True
5    -501.507078   -1001.453857 -757.01359  -501.507078  599.946899 -1001.453857  199.946899  299.999880        200.0000       2.0         -1366.378752                 1.0         False
6    -501.507078    -835.462828 -757.01359  -501.507078  299.973450  -835.462828  199.946899  134.008850        100.0000       2.0          -701.453978                 0.0         False
7    -334.542479    -701.453978 -757.01359  -334.542479  300.973450  -701.453978  199.946899  166.964600        166.9646       3.0          -701.453978                 0.0         False
8    -199.533629    -667.418701 -757.01359  -199.533629  301.973450  -667.418701  201.920349  265.964723        200.0000       2.0          -701.453978                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3308263/16384, 
.[0m
[09/27 16:06:19]  --------------------------------------------------------------------------------
[09/27 16:06:19]  Iteration: 217 (68 solution, 148 counterexamples)
[09/27 16:07:11]  Generator returned sat in 47.257015 secs.
[09/27 16:07:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 16:07:14]  Improved gap from 0.0 to 9.375
[09/27 16:07:15]  Improved number of small numbers from 49 to 114 out of a max of 114
[09/27 16:07:15]  Verifer returned sat in 3.115320 secs.
[09/27 16:07:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -277.152588    -479.243408 -936.438232  -277.152588    0.052979  -479.243408        0.0  202.090820      102.090820       1.0          -479.243408                -1.0            -1
1    -277.099609    -279.691650 -936.438232  -277.099609  202.143799  -279.691650        0.0    2.592041        2.143799       2.0          -479.243408                 0.0         False
2    -277.046387    -277.046387 -848.010254  -277.046387    2.645264  -277.046387        0.0    0.000000       -9.375000       1.0          -277.046387                 1.0          True
3    -267.671387    -267.671387 -757.385254  -267.671387    9.375000  -267.671387        0.0    0.000000       -9.375000       1.0          -277.046387                 0.0         False
4     -57.099365    -195.154053 -757.385254   -57.099365  210.572021  -195.154053        0.0  138.054688      101.197021       1.0          -277.046387                 0.0         False
5     -57.099365    -158.296387 -757.385254   -57.099365   83.537598  -158.296387        0.0  101.197021        1.197021       2.0           -57.099365                 0.0         False
6     -57.099365     -57.099365 -667.957275   -57.099365  101.143799   -57.099365        0.0    0.000000       -9.375000       3.0           -57.099365                 1.0         False
7      98.758545     -47.724365 -667.957275    98.758545  155.857910   -47.724365        0.0  146.482910       46.482910       1.0           -57.099365                 1.0         False
8      98.758545      52.275635 -667.957275    98.758545  146.429688    52.275635        0.0   46.482910      -53.517090       2.0            98.758545                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:07:15]  --------------------------------------------------------------------------------
[09/27 16:07:15]  Iteration: 218 (68 solution, 149 counterexamples)
[09/27 16:07:48]  Generator returned sat in 28.296029 secs.
[09/27 16:07:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:07:51]  Verifer returned unsat in 1.687636 secs.
[09/27 16:07:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:07:51]  --------------------------------------------------------------------------------
[09/27 16:07:51]  Iteration: 219 (69 solution, 149 counterexamples)
[09/27 16:08:03]  Generator returned sat in 7.441458 secs.
[09/27 16:08:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:05]  Verifer returned unsat in 1.998934 secs.
[09/27 16:08:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:05]  --------------------------------------------------------------------------------
[09/27 16:08:05]  Iteration: 220 (70 solution, 149 counterexamples)
[09/27 16:08:17]  Generator returned sat in 7.232010 secs.
[09/27 16:08:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:19]  Verifer returned unsat in 1.359760 secs.
[09/27 16:08:19]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:19]  --------------------------------------------------------------------------------
[09/27 16:08:19]  Iteration: 221 (71 solution, 149 counterexamples)
[09/27 16:08:31]  Generator returned sat in 7.080752 secs.
[09/27 16:08:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:33]  Verifer returned unsat in 1.587531 secs.
[09/27 16:08:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:33]  --------------------------------------------------------------------------------
[09/27 16:08:33]  Iteration: 222 (72 solution, 149 counterexamples)
[09/27 16:08:45]  Generator returned sat in 7.269872 secs.
[09/27 16:08:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:47]  Verifer returned unsat in 1.045122 secs.
[09/27 16:08:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:08:47]  --------------------------------------------------------------------------------
[09/27 16:08:47]  Iteration: 223 (73 solution, 149 counterexamples)
[09/27 16:08:59]  Generator returned sat in 7.399703 secs.
[09/27 16:09:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:09:03]  Improved gap from 0.0 to 0
[09/27 16:09:04]  Improved number of small numbers from 50 to 58 out of a max of 114
[09/27 16:09:04]  Verifer returned sat in 4.277740 secs.
[09/27 16:09:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1456.508579   -1656.614536 -351.853608 -1456.508579    0.052979 -1656.614536    0.000000  200.105957      200.000000       9.0         -1656.614536                -1.0            -1
1   -1456.508579   -1656.508579 -351.853608 -1456.508579    0.052979 -1656.508579    0.000000  200.000000      100.000000       6.0         -1656.614536                 1.0         False
2   -1456.508579   -1531.548340 -351.853608 -1456.508579   75.039795 -1531.548340    0.000000   75.039761        0.000000       7.0         -1656.614536                 0.0         False
3   -1456.508579   -1456.508579 -251.853608 -1456.508579   74.986755 -1456.508579    0.000000    0.000000        0.000000       8.0         -1456.508579                 0.0         False
4   -1206.482090   -1456.508579 -251.853608 -1206.482090  250.026489 -1456.508579    0.000000  250.026489      150.026489       8.0         -1456.508579                 1.0         False
5    -856.455601   -1256.508789 -251.853608  -856.455601  600.052979 -1256.508789  200.052979  200.000210      200.000000       2.0         -1456.508579                 1.0         False
6    -856.455601   -1206.429111 -251.853608  -856.455601    1.000000 -1206.429111  200.052979  149.920532      100.000000       2.0         -1056.508579                 0.0         False
7    -856.455601   -1056.561558 -251.853608  -856.455601  126.539734 -1056.561558  200.052979    0.052979        0.000000       3.0         -1056.508579                 0.0         False
8    -592.265201   -1056.455811 -251.853608  -592.265201  264.243378 -1056.455811  200.052979  264.137631      164.190399       1.0         -1056.508579                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819417/4096, 
.[0m
[09/27 16:09:05]  --------------------------------------------------------------------------------
[09/27 16:09:05]  Iteration: 224 (73 solution, 150 counterexamples)
[09/27 16:09:52]  Generator returned sat in 42.165348 secs.
[09/27 16:09:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/27 16:09:53]  Improved gap from 0.0 to 9.375
[09/27 16:09:54]  Improved number of small numbers from 51 to 114 out of a max of 114
[09/27 16:09:54]  Verifer returned sat in 1.777990 secs.
[09/27 16:09:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1195.205811   -1387.975098 -652.826904 -1195.205811    0.052979 -1387.975098        0.0  192.769287       92.769531       9.0         -1387.975098                -1.0            -1
1   -1185.831055   -1195.153076 -652.826904 -1185.831055  202.144043 -1195.153076        0.0    9.322021        2.144287       1.0         -1387.975098                 1.0         False
2   -1185.778076   -1185.778076 -564.399170 -1185.778076    9.375000 -1185.778076        0.0    0.000000       -9.375000       1.0         -1185.778076                 0.0         False
3   -1176.403076   -1176.403076 -473.774170 -1176.403076    9.375000 -1176.403076        0.0    0.000000       -9.375000       1.0         -1185.778076                 0.0         False
4    -965.831055   -1112.614502 -473.774170  -965.831055  210.572021 -1112.614502        0.0  146.783447      101.197021       1.0         -1185.778076                 0.0         False
5    -965.831055   -1067.028076 -473.774170  -965.831055   81.538574 -1067.028076        0.0  101.197021        1.197021       2.0          -965.831055                 0.0         False
6    -965.831055    -965.831055 -384.346191  -965.831055  101.144287  -965.831055        0.0    0.000000       -9.375000       3.0          -965.831055                 1.0         False
7    -808.972900    -956.456055 -384.346191  -808.972900  156.858154  -956.456055        0.0  147.483154       47.483154       1.0          -965.831055                 1.0         False
8    -801.297607    -856.455811 -384.346191  -801.297607  155.158447  -856.455811        0.0   55.158203      -44.841553       2.0          -801.297607                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:09:54]  --------------------------------------------------------------------------------
[09/27 16:09:54]  Iteration: 225 (73 solution, 151 counterexamples)
[09/27 16:10:37]  Generator returned sat in 37.790173 secs.
[09/27 16:10:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:10:41]  Improved gap from 0.0 to 0
[09/27 16:10:41]  Improved number of small numbers from 48 to 114 out of a max of 114
[09/27 16:10:41]  Verifer returned sat in 3.559666 secs.
[09/27 16:10:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1225.893799   -1426.999512 -514.908447 -1225.893799    0.026367 -1426.999512        0.0  201.105713      200.000000       9.0         -1426.999512                -1.0            -1
1   -1225.893799   -1326.999512 -514.908447 -1225.893799    0.026367 -1326.999512        0.0  101.105713      100.000000       5.0         -1426.999512                 1.0         False
2   -1225.893799   -1225.946777 -514.908447 -1225.893799    0.026367 -1225.946777        0.0    0.052979        0.000000       5.0         -1426.999512                 0.0         False
3   -1225.893799   -1225.893799 -414.908447 -1225.893799    0.026367 -1225.893799        0.0    0.000000        0.000000       6.0         -1426.999512                 0.0         False
4   -1025.788086   -1225.893799 -414.908447 -1025.788086  200.105713 -1225.893799        0.0  200.105713      100.105713       6.0         -1426.999512                 1.0          True
5   -1025.788086   -1125.893799 -414.908447 -1025.788086  100.105713 -1125.893799        0.0  100.105713        0.105713       2.0         -1025.788086                 1.0         False
6   -1025.788086   -1025.788086 -315.014160 -1025.788086  100.079346 -1025.788086        0.0    0.000000        0.000000       3.0         -1025.788086                 0.0         False
7    -875.695557    -975.774902 -315.014160  -875.695557  150.092529  -975.774902        0.0  100.079346       50.092529       1.0         -1025.788086                 0.0         False
8    -775.669189    -905.920410 -315.014160  -775.669189  200.105713  -905.920410        0.0  130.251221       50.118896       2.0         -1025.788086                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:10:42]  --------------------------------------------------------------------------------
[09/27 16:10:42]  Iteration: 226 (73 solution, 152 counterexamples)
[09/27 16:11:12]  Generator returned sat in 24.888889 secs.
[09/27 16:11:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:11:13]  Improved gap from 0.0 to 0
[09/27 16:11:13]  Improved number of small numbers from 61 to 114 out of a max of 114
[09/27 16:11:13]  Verifer returned sat in 0.832442 secs.
[09/27 16:11:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1225.893799   -1525.827881 -514.908447 -1225.893799    0.026367 -1525.827881    0.000000  299.934082      200.000000       9.0         -1525.827881                -1.0            -1
1   -1225.893799   -1375.880615 -514.908447 -1225.893799    0.026367 -1375.880615    0.000000  149.986816      100.000000       4.0         -1525.827881                 1.0         False
2   -1225.893799   -1225.946533 -514.908447 -1225.893799    0.026367 -1225.946533    0.000000    0.052734        0.000000       4.0         -1525.827881                 0.0         False
3   -1225.893799   -1225.893799 -414.908447 -1225.893799    0.026367 -1225.893799    0.000000    0.000000        0.000000       5.0         -1525.827881                 0.0         False
4    -925.920166   -1225.893799 -414.908447  -925.920166  299.973633 -1225.893799    0.000000  299.973633      199.973633       5.0         -1525.827881                 1.0          True
5    -625.946533   -1125.893799 -414.908447  -625.946533  599.947266 -1125.893799  199.947266  300.000000      200.000000       2.0         -1525.827881                 1.0         False
6    -625.946533    -925.893799 -414.908447  -625.946533  298.973633  -925.893799  199.947266  100.000000      100.000000       2.0          -825.893799                 0.0         False
7    -425.972900    -826.788086 -414.908447  -425.972900  299.973633  -826.788086  199.947266  200.867920      199.973633       3.0          -825.893799                 0.0         False
8    -325.867188    -825.867432 -414.908447  -325.867188  300.973633  -825.867432  200.026611  299.973633      200.000000       2.0          -825.893799                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819309/4096, 
.[0m
[09/27 16:11:14]  --------------------------------------------------------------------------------
[09/27 16:11:14]  Iteration: 227 (73 solution, 153 counterexamples)
[09/27 16:12:09]  Generator returned sat in 50.018327 secs.
[09/27 16:12:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:12:10]  Improved gap from 0.0 to 18.75
[09/27 16:12:10]  Improved number of small numbers from 67 to 114 out of a max of 114
[09/27 16:12:10]  Verifer returned sat in 0.880674 secs.
[09/27 16:12:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -456.971191    -538.167969 -1402.634277  -456.971191   81.302734  -538.167969        0.0   81.196777       81.196777       9.0          -538.167969                -1.0            -1
1    -456.917969    -456.917969 -1402.634277  -456.917969   81.250000  -456.917969        0.0    0.000000      -18.750000       1.0          -456.917969                 1.0         False
2    -239.115234    -357.812500 -1402.634277  -239.115234  217.802734  -357.812500        0.0  118.697266       99.052734       1.0          -456.917969                 0.0         False
3    -239.115234    -239.167969 -1402.634277  -239.115234    0.999756  -239.167969        0.0    0.052734       -0.947266       2.0          -239.115234                 0.0         False
4    -238.167969    -238.167969 -1321.384277  -238.167969    1.000000  -238.167969        0.0    0.000000      -18.750000       1.0          -239.115234                 1.0         False
5     -18.417969    -139.115234 -1321.384277   -18.417969  219.750000  -139.115234        0.0  120.697266      101.000000       1.0          -239.115234                 0.0         False
6      80.582031    -119.417969 -1321.384277    80.582031  219.697266  -119.417969        0.0  200.000000      100.000000       2.0            80.582031                 0.0         False
7      80.582031      79.529053 -1321.384277    80.582031    1.000000    79.529053        0.0    1.052979        0.000000       2.0            80.582031                 1.0         False
8      80.582031      80.582031 -1321.384277    80.582031    1.000000    80.582031        0.0    0.000000     -100.000000       3.0            80.582031                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:12:10]  --------------------------------------------------------------------------------
[09/27 16:12:10]  Iteration: 228 (73 solution, 154 counterexamples)
[09/27 16:12:57]  Generator returned sat in 41.812576 secs.
[09/27 16:12:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:12:59]  Improved gap from 0.0 to 0
[09/27 16:13:00]  Improved number of small numbers from 72 to 78 out of a max of 114
[09/27 16:13:00]  Verifer returned sat in 2.040790 secs.
[09/27 16:13:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0      -2.160947    -253.658447 -1421.384277    -2.160947    0.001221  -253.658447    0.00000  251.497500      200.000000       9.0          -253.658447                -1.0            -1
1      -2.160947    -102.162197 -1421.384277    -2.160947    0.002686  -102.162197    0.00000  100.001250      100.000000       7.0          -253.658447                 1.0         False
2      -2.160947    -102.160889 -1421.384277    -2.160947    0.001465  -102.160889    0.00000   99.999941        0.000000       8.0            -2.160947                 0.0         False
3      -2.160947      -2.160947 -1321.384277    -2.160947    0.001250    -2.160947    0.00000    0.000000        0.000000       9.0            -2.160947                 0.0         False
4     248.339053      -2.160947 -1321.384277   248.339053  250.500000    -2.160947    0.00000  250.500000      150.500000       9.0            -2.160947                 1.0         False
5     597.840303     197.838867 -1321.384277   597.840303  600.001250   197.838867  200.00125  200.000186      200.000000       2.0            -2.160947                 1.0         False
6     597.840303     263.834886 -1321.384277   597.840303    0.010000   263.834886  200.00125  134.004167      100.000000       2.0           397.839053                 0.0         False
7     597.840303     397.837803 -1321.384277   597.840303  134.002917   397.837803  200.00125    0.001250        0.000000       3.0           397.839053                 0.0         False
8     865.839886     397.840332 -1321.384277   865.839886  268.000833   397.840332  200.00125  267.998304      167.999583       1.0           397.839053                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 16:13:00]  --------------------------------------------------------------------------------
[09/27 16:13:00]  Iteration: 229 (73 solution, 155 counterexamples)
[09/27 16:13:34]  Generator returned sat in 28.716628 secs.
[09/27 16:13:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:13:35]  Improved gap from 0.0 to 18.75
[09/27 16:13:36]  Improved number of small numbers from 36 to 114 out of a max of 114
[09/27 16:13:36]  Verifer returned sat in 0.906204 secs.
[09/27 16:13:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -650.624756    -850.572266 -1402.634277  -650.624756    0.052734  -850.572266   0.000000  199.947510       99.947510       9.0          -850.572266                -1.0            -1
1    -650.572266    -732.217041 -1402.634277  -650.572266  200.000000  -732.217041   0.000000   81.644775        0.000000       7.0          -850.572266                 1.0         False
2    -650.572266    -650.572266 -1321.384277  -650.572266    0.052734  -650.572266   0.000000    0.000000      -18.750000       2.0          -650.572266                 1.0          True
3    -351.519531    -531.822266 -1321.384277  -351.519531  299.052734  -531.822266   0.000000  180.302734      180.302734       1.0          -650.572266                 0.0         False
4    -231.769531    -531.822021 -1321.384277  -231.769531  300.052734  -531.822021   0.052734  299.999756      200.000000       2.0          -650.572266                 0.0         False
5    -231.769531    -351.467041 -1321.384277  -231.769531   99.197510  -351.467041   0.052734  119.644775      100.000000       2.0          -231.822266                 0.0         False
6    -231.769531    -331.822266 -1321.384277  -231.769531  100.197510  -331.822266   0.052734  100.000000        0.000000       3.0          -231.822266                 0.0         False
7    -230.572021    -230.624756 -1241.331787  -230.572021  101.197510  -230.624756   0.052734    0.000000      -18.750000       1.0          -231.822266                 0.0         False
8    -128.374512    -211.874756 -1241.331787  -128.374512  102.197510  -211.874756   0.052734   83.447510      -16.552490       1.0          -231.822266                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 16:13:36]  --------------------------------------------------------------------------------
[09/27 16:13:36]  Iteration: 230 (73 solution, 156 counterexamples)
[09/27 16:14:16]  Generator returned sat in 35.038488 secs.
[09/27 16:14:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:14:20]  Improved gap from 0.0 to 0
[09/27 16:14:21]  Improved number of small numbers from 70 to 76 out of a max of 114
[09/27 16:14:21]  Verifer returned sat in 3.839593 secs.
[09/27 16:14:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -499.767865    -699.767865 -1421.384277  -499.767865    0.052490  -699.767865     0.0000  200.000000      200.000000       7.0          -699.767865                -1.0            -1
1    -499.767865    -699.767865 -1421.384277  -499.767865  199.998779  -699.767865     0.0000  200.000000      100.000000       7.0          -699.767865                 1.0         False
2    -499.767865    -545.768066 -1421.384277  -499.767865  199.997314  -545.768066     0.0000   46.000202        0.000000       4.0          -499.767865                 1.0         False
3    -499.767865    -499.767865 -1321.384277  -499.767865   45.998889  -499.767865     0.0000    0.000000        0.000000       5.0          -499.767865                 0.0         False
4    -231.769531    -499.767865 -1321.384277  -231.769531  267.998333  -499.767865     0.0000  267.998333      167.998333       5.0          -499.767865                 1.0         False
5     101.229635    -299.768066 -1321.384277   101.229635  600.997500  -299.768066   200.9975  200.000202      200.000000       2.0          -499.767865                 1.0         False
6     101.229635    -233.772031 -1321.384277   101.229635    0.010000  -233.772031   200.9975  134.004167      100.000000       3.0           -99.767865                 0.0         False
7     101.229635     -99.769115 -1321.384277   101.229635  134.002917   -99.769115   200.9975    0.001250        0.000000       3.0           -99.767865                 0.0         False
8     369.229219     -99.766846 -1321.384277   369.229219  268.000833   -99.766846   200.9975  267.998564      167.999583       1.0           -99.767865                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=80399/400, 
.[0m
[09/27 16:14:21]  --------------------------------------------------------------------------------
[09/27 16:14:21]  Iteration: 231 (73 solution, 157 counterexamples)
[09/27 16:14:44]  Generator returned sat in 17.160244 secs.
[09/27 16:14:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:14:45]  Improved gap from 0.0 to 0
[09/27 16:14:45]  Improved number of small numbers from 36 to 114 out of a max of 114
[09/27 16:14:45]  Verifer returned sat in 1.194824 secs.
[09/27 16:14:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -498.681641    -698.734131 -1422.470459  -498.681641   45.344727  -698.734131    0.000000  200.052490      200.000000       5.0          -698.734131                -1.0            -1
1    -498.681641    -698.681641 -1422.470459  -498.681641   45.344971  -698.681641    0.000000  200.000000      100.000000       5.0          -698.734131                 0.0         False
2    -498.681641    -598.681641 -1422.470459  -498.681641   45.292236  -598.681641    0.000000  100.000000        0.000000       6.0          -498.681641                 0.0         False
3    -498.681641    -498.681641 -1322.470459  -498.681641   45.239746  -498.681641    0.000000    0.000000        0.000000       7.0          -498.681641                 0.0         False
4    -231.769531    -498.681641 -1322.470459  -231.769531  266.912109  -498.681641    0.000000  266.912109      166.912109       7.0          -498.681641                 1.0         False
5     100.686523    -397.418213 -1322.470459   100.686523  599.368164  -397.418213  199.368164  298.736572      200.000000       2.0          -498.681641                 1.0         False
6     100.686523    -198.681641 -1322.470459   100.686523  298.684082  -198.681641  199.368164  100.000000      100.000000       2.0           -98.681641                 0.0         False
7     300.370605     -98.681641 -1322.470459   300.370605  299.684082   -98.681641  199.368164  199.684082      199.684082       3.0           -98.681641                 0.0         False
8     401.370605     -98.681641 -1322.470459   401.370605  300.684082   -98.681641  200.052246  300.000000      200.000000       3.0           -98.681641                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=409707/2048, 
.[0m
[09/27 16:14:46]  --------------------------------------------------------------------------------
[09/27 16:14:46]  Iteration: 232 (73 solution, 158 counterexamples)
[09/27 16:15:18]  Generator returned sat in 27.160501 secs.
[09/27 16:15:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:15:19]  Improved gap from 0.0 to 9.375
[09/27 16:15:20]  Improved number of small numbers from 89 to 114 out of a max of 114
[09/27 16:15:20]  Verifer returned sat in 0.855033 secs.
[09/27 16:15:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -498.681641    -698.681641 -1422.470459  -498.681641    0.002441  -698.681641        0.0  200.000000      200.000000       5.0          -698.681641                -1.0            -1
1    -498.681641    -605.061523 -1422.470459  -498.681641    0.002441  -605.061523        0.0  106.379883      100.000000       6.0          -698.681641                 1.0         False
2    -498.681641    -505.059082 -1422.470459  -498.681641  106.377500  -505.059082        0.0    6.377441        0.000000       3.0          -698.681641                 1.0          True
3    -398.684082    -398.686523 -1422.470459  -398.684082  106.375000  -398.686523        0.0    0.002441       -0.002441       1.0          -398.684082                 1.0          True
4    -291.311523    -398.681641 -1422.470459  -291.311523  107.375000  -398.681641        0.0  107.370117        7.370117       1.0          -398.684082                 0.0         False
5    -290.306641    -290.306641 -1340.220459  -290.306641  108.375000  -290.306641        0.0    0.000000       -9.375000       1.0          -398.684082                 0.0         False
6    -180.931641    -189.064209 -1340.220459  -180.931641  109.375000  -189.064209        0.0    8.132568        0.000000       1.0          -398.684082                 0.0         False
7     -78.689209    -180.931641 -1340.220459   -78.689209  110.375000  -180.931641        0.0  102.242432        2.242432       2.0          -398.684082                 0.0         False
8     -78.689209     -78.689209 -1251.838135   -78.689209    0.010000   -78.689209        0.0    0.000000       -9.375244       2.0           -78.689209                 1.0          True
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:15:20]  --------------------------------------------------------------------------------
[09/27 16:15:20]  Iteration: 233 (73 solution, 159 counterexamples)
[09/27 16:16:02]  Generator returned sat in 36.556368 secs.
[09/27 16:16:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:16:03]  Verifer returned unsat in 0.309298 secs.
[09/27 16:16:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:16:03]  --------------------------------------------------------------------------------
[09/27 16:16:03]  Iteration: 234 (74 solution, 159 counterexamples)
[09/27 16:16:17]  Generator returned sat in 8.552851 secs.
[09/27 16:16:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:16:18]  Verifer returned unsat in 0.311122 secs.
[09/27 16:16:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:16:18]  --------------------------------------------------------------------------------
[09/27 16:16:18]  Iteration: 235 (75 solution, 159 counterexamples)
[09/27 16:16:45]  Generator returned sat in 22.565268 secs.
[09/27 16:16:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:16:46]  Improved gap from 0.0 to 62.5
[09/27 16:16:47]  Improved number of small numbers from 53 to 114 out of a max of 114
[09/27 16:16:47]  Verifer returned sat in 0.886068 secs.
[09/27 16:16:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -447.576172    -447.602539 -920.948730  -447.576172    0.026367  -447.602539        0.0    0.026367        0.026367       2.0          -447.602539                -1.0            -1
1    -150.050293    -447.550049 -920.948730  -150.050293  297.552246  -447.550049        0.0  297.499756      197.552246       1.0          -447.602539                 0.0         False
2    -149.997803    -274.576172 -920.948730  -149.997803  297.552246  -274.576172        0.0  124.578369       97.604736       2.0          -447.602539                 0.0         False
3     -20.576172    -150.050293 -920.948730   -20.576172  254.000000  -150.050293        0.0  129.474121      127.026367       3.0           -20.576172                 0.0         False
4     -20.576172    -147.602295 -920.948730   -20.576172  126.000000  -147.602295        0.0  127.026123       27.026367       2.0           -20.576172                 1.0         False
5     -20.576172     -20.576172 -910.475098   -20.576172  127.000000   -20.576172        0.0    0.000000      -62.500000       3.0           -20.576172                 0.0         False
6      41.923828      41.923828 -872.975098    41.923828   62.500000    41.923828        0.0    0.000000      -62.500000       1.0            41.923828                 1.0         False
7     105.423828     105.423828 -838.474854   105.423828   63.500000   105.423828        0.0    0.000000      -64.499756       1.0            41.923828                 0.0         False
8     169.923828     169.923584 -838.474854   169.923828   64.500000   169.923584        0.0    0.000244      -99.999756       1.0            41.923828                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:16:47]  --------------------------------------------------------------------------------
[09/27 16:16:47]  Iteration: 236 (75 solution, 160 counterexamples)
[09/27 16:17:25]  Generator returned sat in 31.678138 secs.
[09/27 16:17:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:17:27]  Verifer returned unsat in 1.413107 secs.
[09/27 16:17:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:17:27]  --------------------------------------------------------------------------------
[09/27 16:17:27]  Iteration: 237 (76 solution, 160 counterexamples)
[09/27 16:17:40]  Generator returned sat in 8.260183 secs.
[09/27 16:17:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:17:45]  Improved gap from 0.0 to 0
[09/27 16:17:46]  Improved number of small numbers from 47 to 59 out of a max of 114
[09/27 16:17:46]  Verifer returned sat in 5.339536 secs.
[09/27 16:17:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -416.302695    -716.302695 -946.970098  -416.302695   50.815186  -716.302695    0.000000  300.000000      200.000000       8.0          -716.302695                -1.0            -1
1    -416.302695    -616.302695 -946.970098  -416.302695   50.815186  -616.302695    0.000000  200.000000      100.000000       9.0          -716.302695                 0.0         False
2    -416.302695    -467.117920 -946.970098  -416.302695   50.815186  -467.117920    0.000000   50.815225        0.000000       8.0          -716.302695                 1.0          True
3    -416.302695    -416.302695 -846.970098  -416.302695   50.763062  -416.302695    0.000000    0.000000        0.000000       9.0          -416.302695                 0.0         False
4    -165.776572    -416.302695 -846.970098  -165.776572  250.526123  -416.302695    0.000000  250.526123      150.526123       9.0          -416.302695                 1.0         False
5     183.749551    -316.302490 -846.970098   183.749551  600.052246  -316.302490  200.052246  299.999795      200.000000       2.0          -416.302695                 1.0         False
6     183.749551    -150.601198 -846.970098   183.749551    1.000000  -150.601198  200.052246  134.298503      100.000000       2.0           -16.302695                 0.0         False
7     183.801797     -16.302695 -846.970098   183.801797  134.350749   -16.302695  200.052246    0.052246        0.052246       3.0           -16.302695                 0.0         False
8     451.924925     -16.302490 -846.970098   451.924925  268.175374   -16.302490  200.052246  268.175169      168.175374       2.0           -16.302695                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409707/2048, 
.[0m
[09/27 16:17:47]  --------------------------------------------------------------------------------
[09/27 16:17:47]  Iteration: 238 (76 solution, 161 counterexamples)
[09/27 16:18:13]  Generator returned sat in 20.479951 secs.
[09/27 16:18:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:18:13]  Improved gap from 0.0 to 0
[09/27 16:18:14]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 16:18:14]  Verifer returned sat in 0.511983 secs.
[09/27 16:18:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1111.302490   -1311.302490 -251.970215 -1111.302490    0.052002 -1311.302490        0.0  200.000000      200.000000       6.0          -1311.30249                -1.0            -1
1   -1111.302490   -1211.302490 -251.970215 -1111.302490    0.052246 -1211.302490        0.0  100.000000      100.000000       6.0          -1311.30249                 0.0         False
2   -1111.302490   -1121.354736 -251.970215 -1111.302490   10.052002 -1121.354736        0.0   10.052246        0.000000       7.0          -1311.30249                 0.0         False
3   -1111.302490   -1111.302490 -151.970215 -1111.302490   10.000000 -1111.302490        0.0    0.000000        0.000000       8.0          -1111.30249                 0.0         False
4   -1007.302490   -1111.302490 -151.970215 -1007.302490  104.000000 -1111.302490        0.0  104.000000        4.000000       8.0          -1111.30249                 1.0         False
5   -1007.302490   -1007.302490  -60.970215 -1007.302490  101.000000 -1007.302490        0.0    0.000000       -5.000000       2.0          -1007.30249                 1.0         False
6    -905.302490    -905.302490  -60.970215  -905.302490  102.000000  -905.302490        0.0    0.000000       -3.000000       1.0          -1007.30249                 0.0         False
7    -802.302490    -802.302734  -60.970215  -802.302490  103.000000  -802.302734        0.0    0.000244        0.000000       1.0          -1007.30249                 0.0         False
8    -698.302734    -802.250244  -60.970215  -698.302734  104.000000  -802.250244        0.0  103.947510        3.999756       1.0          -1007.30249                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:18:14]  --------------------------------------------------------------------------------
[09/27 16:18:14]  Iteration: 239 (76 solution, 162 counterexamples)
[09/27 16:18:51]  Generator returned sat in 31.555413 secs.
[09/27 16:18:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:18:53]  Improved gap from 0.02606201171875 to 1.5625
[09/27 16:18:53]  Improved number of small numbers from 40 to 114 out of a max of 114
[09/27 16:18:53]  Verifer returned sat in 1.275449 secs.
[09/27 16:18:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1705.448730   -1805.344727  242.071777 -1705.448730   99.999756 -1805.344727   0.000000   99.895996       99.895752       4.0         -1805.344727                -1.0            -1
1   -1705.396973   -1805.344482  242.071777 -1705.396973   99.947754 -1805.344482   0.000000   99.947510       -0.052490       2.0         -1705.396973                 1.0         False
2   -1406.240479   -1705.344482  242.071777 -1406.240479  399.104004 -1705.344482   0.000000  299.104004      199.104004       1.0         -1705.396973                 0.0         False
3   -1406.240479   -1505.344727  242.071777 -1406.240479  299.052246 -1505.344727   0.000000   99.104248       99.104004       2.0         -1406.240479                 0.0         False
4   -1205.292480   -1406.188232  242.071777 -1205.292480  300.052246 -1406.188232   0.052002  200.843750      200.000000       1.0         -1406.240479                 0.0         False
5   -1205.292480   -1405.344482  242.071777 -1205.292480    1.000000 -1405.344482   0.052002  200.000000      100.000000       2.0         -1205.344482                 0.0         False
6   -1205.292480   -1305.344482  242.071777 -1205.292480    2.000000 -1305.344482   0.052002  100.000000        0.000000       3.0         -1205.344482                 0.0         False
7   -1205.292480   -1205.344482  340.509277 -1205.292480    2.000000 -1205.344482   0.052002    0.000000       -1.562500       4.0         -1205.344482                 1.0         False
8   -1203.292480   -1203.781982  340.509277 -1203.292480    2.000000 -1203.781982   0.052002    0.437500      -99.562500       1.0         -1205.344482                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 16:18:54]  --------------------------------------------------------------------------------
[09/27 16:18:54]  Iteration: 240 (76 solution, 163 counterexamples)
[09/27 16:19:31]  Generator returned sat in 31.893408 secs.
[09/27 16:19:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:19:32]  Improved number of small numbers from 60 to 113 out of a max of 113
[09/27 16:19:32]  Verifer returned sat in 0.361648 secs.
[09/27 16:19:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1719.162354   -1720.188721  155.889648 -1719.162354  101.025879 -1720.188721   0.000000    1.026367        0.000244       1.0         -1720.188721                -1.0            -1
1   -1619.188721   -1719.162354  155.889648 -1619.188721  101.000000 -1719.162354   0.000000   99.973633       -0.026123       2.0         -1619.188721                 0.0         False
2   -1406.240479   -1619.162598  155.889648 -1406.240479  312.921875 -1619.162598   0.000000  212.922119      112.922119       1.0         -1619.188721                 1.0         False
3   -1406.214600   -1419.162598  155.889648 -1406.214600  212.947998 -1419.162598   0.000000   12.947998       12.947998       2.0         -1406.214600                 0.0         False
4   -1119.136475   -1406.188477  155.889648 -1119.136475  300.026123 -1406.188477   0.026123  287.025879      200.000000       1.0         -1406.214600                 1.0         False
5   -1119.136475   -1268.649658  155.889648 -1119.136475    1.000000 -1268.649658   0.026123  149.487061      100.000000       2.0         -1119.162598                 0.0         False
6    -919.110596   -1219.162598  155.889648  -919.110596  349.512939 -1219.162598   0.052002  300.000000      200.000000       3.0         -1119.162598                 1.0         False
7    -919.110596   -1019.162598  155.889648  -919.110596    1.000000 -1019.162598   0.052002  100.000000      100.000000       2.0          -919.162598                 1.0         False
8    -633.084717   -1006.188477  155.889648  -633.084717  386.025879 -1006.188477  86.077881  287.025879      200.000000       3.0          -919.162598                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=88117/1024, 
.[0m
[09/27 16:19:32]  --------------------------------------------------------------------------------
[09/27 16:19:32]  Iteration: 241 (76 solution, 164 counterexamples)
[09/27 16:20:05]  Generator returned sat in 27.564467 secs.
[09/27 16:20:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:20:07]  Improved gap from 0.0 to 0
[09/27 16:20:07]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 16:20:07]  Verifer returned sat in 1.001959 secs.
[09/27 16:20:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2018.474609   -2218.474609   55.889648 -2018.474609    0.052002 -2218.474609        0.0  200.000000           200.0       9.0         -2218.474609                -1.0            -1
1   -2018.474609   -2118.474609   55.889648 -2018.474609   10.104004 -2118.474609        0.0  100.000000           100.0       7.0         -2218.474609                 1.0         False
2   -2018.474609   -2118.422607   55.889648 -2018.474609   10.052002 -2118.422607        0.0   99.947998             0.0       8.0         -2018.474609                 0.0         False
3   -2018.474609   -2018.474609  155.889648 -2018.474609   10.000000 -2018.474609        0.0    0.000000             0.0       9.0         -2018.474609                 0.0         False
4   -1914.474609   -2018.474609  155.889648 -1914.474609  104.000000 -2018.474609        0.0  104.000000             4.0       9.0         -2018.474609                 1.0         False
5   -1914.474609   -1914.474609  251.889648 -1914.474609  101.000000 -1914.474609        0.0    0.000000             0.0       2.0         -1914.474609                 1.0         False
6   -1812.474609   -1914.422607  251.889648 -1812.474609  102.000000 -1914.422607        0.0  101.947998             2.0       1.0         -1914.474609                 0.0         False
7   -1811.422607   -1811.422607  344.837646 -1811.422607  103.000000 -1811.422607        0.0    0.000000            -4.0       1.0         -1914.474609                 0.0         False
8   -1707.422607   -1707.422607  344.837646 -1707.422607  104.000000 -1707.422607        0.0    0.000000             0.0       1.0         -1914.474609                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:20:07]  --------------------------------------------------------------------------------
[09/27 16:20:07]  Iteration: 242 (76 solution, 165 counterexamples)
[09/27 16:20:57]  Generator returned sat in 44.476905 secs.
[09/27 16:20:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:20:59]  Improved number of small numbers from 64 to 89 out of a max of 113
[09/27 16:20:59]  Verifer returned sat in 0.883774 secs.
[09/27 16:20:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2165.631104   -2312.735596  55.889404 -2165.631104  147.208252 -2312.735596    0.000000  147.104492       99.947998       6.0         -2312.735596                -1.0            -1
1   -2165.579346   -2165.579346  55.889648 -2165.579346  147.156250 -2165.579346    0.000000    0.000000        0.000000       1.0         -2165.579346                 1.0         False
2   -2018.474854   -2165.579102  55.889648 -2018.474854  147.104492 -2165.579102    0.000000  147.104248       47.104492       1.0         -2018.474854                 0.0         False
3   -2018.474854   -2018.474854  55.889648 -2018.474854  147.052445 -2018.474854    0.000000    0.000000      -52.895508       2.0         -2018.474854                 0.0         False
4   -1797.896186   -1965.579300  55.889648 -1797.896186  220.578668 -1965.579300    0.000000  167.683115       67.683160       1.0         -2018.474854                 1.0         False
5   -1744.000633   -1865.579300  55.889648 -1744.000633  221.578668 -1865.579300    0.000000  121.578668       21.578713       2.0         -2018.474854                 0.0         False
6   -1533.211299   -1743.948631  55.889648 -1533.211299  332.368001 -1743.948631    0.000000  210.737332      132.368047       1.0         -2018.474854                 1.0          True
7   -1410.580630   -1565.579346  55.889648 -1410.580630  333.368001 -1565.579346    0.000000  154.998716      154.998716       2.0         -2018.474854                 0.0         False
8   -1065.527344   -1465.579346  55.889648 -1065.527344  500.052002 -1465.579346  200.052002  200.000000      200.000000       2.0         -2018.474854                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819413/4096, 
.[0m
[09/27 16:20:59]  --------------------------------------------------------------------------------
[09/27 16:20:59]  Iteration: 243 (76 solution, 166 counterexamples)
[09/27 16:21:34]  Generator returned sat in 28.638753 secs.
[09/27 16:21:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:21:35]  Improved gap from 0.0 to 0
[09/27 16:21:36]  Improved number of small numbers from 44 to 114 out of a max of 114
[09/27 16:21:36]  Verifer returned sat in 1.888725 secs.
[09/27 16:21:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2790.378906   -2990.430664  780.688965 -2790.378906    0.026123 -2990.430664        0.0  200.051758      200.000000       7.0         -2990.430664                -1.0            -1
1   -2790.378906   -2984.430664  780.688965 -2790.378906    0.026123 -2984.430664        0.0  194.051758      100.000000       8.0         -2990.430664                 1.0         False
2   -2790.378906   -2890.378662  780.688965 -2790.378906  194.051758 -2890.378662        0.0   99.999756        0.000000       9.0         -2990.430664                 1.0          True
3   -2790.378906   -2790.378906  880.688965 -2790.378906   99.974121 -2790.378906        0.0    0.000000        0.000000       9.0         -2790.378906                 1.0          True
4   -2689.353027   -2790.378906  880.688965 -2689.353027  101.025879 -2790.378906        0.0  101.025879        1.025879       9.0         -2790.378906                 1.0         False
5   -2689.353027   -2689.378906  880.688965 -2689.353027   98.025879 -2689.378906        0.0    0.025879      -98.974121       2.0         -2689.353027                 1.0         False
6   -2590.353027   -2590.378662  880.688965 -2590.353027   99.025879 -2590.378662        0.0    0.025635      -99.974121       1.0         -2689.353027                 0.0         False
7   -2490.352783   -2490.352783  960.715088 -2490.352783  100.025879 -2490.352783        0.0    0.000000      -19.947754       1.0         -2689.353027                 0.0         False
8   -2389.326904   -2470.404785  960.715088 -2389.326904  101.025879 -2470.404785        0.0   81.077881      -18.921875       1.0         -2689.353027                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:21:36]  --------------------------------------------------------------------------------
[09/27 16:21:36]  Iteration: 244 (76 solution, 167 counterexamples)
[09/27 16:22:31]  Generator returned sat in 49.150903 secs.
[09/27 16:22:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:22:32]  Improved gap from 0.0 to 100
[09/27 16:22:32]  Improved number of small numbers from 79 to 94 out of a max of 114
[09/27 16:22:32]  Verifer returned sat in 0.835527 secs.
[09/27 16:22:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3254.880859   -3491.352783  1181.662598 -3254.880859    0.052002 -3491.352783    0.000000  236.471924      136.471924       7.0         -3491.352783                -1.0            -1
1   -3254.880859   -3291.353027  1181.662598 -3254.880859  236.419922 -3291.353027    0.000000   36.472168       36.471924       8.0         -3491.352783                 1.0         False
2   -3254.880859   -3254.932780  1181.662598 -3254.880859    0.052002 -3254.932780    0.000000    0.051921      -63.528076       7.0         -3254.880859                 1.0          True
3   -2990.300781   -3191.352783  1181.662598 -2990.300781  264.631999 -3191.352783    0.000000  201.052002      101.052002       1.0         -3254.880859                 1.0         False
4   -2925.720785   -2991.352783  1181.662598 -2925.720785  265.631999 -2991.352783    0.000000   65.631999       65.631999       2.0         -3254.880859                 0.0         False
5   -2724.720785   -2990.301025  1181.662598 -2724.720785  266.631999 -2990.301025    0.000000  265.580241      166.631999       3.0         -3254.880859                 0.0         False
6   -2591.353027   -2891.352783  1181.662598 -2591.353027  398.947998 -2891.352783    0.000000  299.999756      199.999756       2.0         -3254.880859                 1.0          True
7   -2491.404785   -2724.720785  1181.662598 -2491.404785  399.947998 -2724.720785    0.000000  233.315999      199.947998       3.0         -3254.880859                 0.0         False
8   -2125.798787   -2591.352783  1181.662598 -2125.798787  598.921997 -2591.352783  265.553996  200.000000      200.000000       2.0         -3254.880859                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=6526255/24576, 
.[0m
[09/27 16:22:33]  --------------------------------------------------------------------------------
[09/27 16:22:33]  Iteration: 245 (76 solution, 168 counterexamples)
[09/27 16:23:10]  Generator returned sat in 31.304712 secs.
[09/27 16:23:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:23:11]  Improved gap from 0.0 to 0
[09/27 16:23:11]  Improved number of small numbers from 57 to 114 out of a max of 114
[09/27 16:23:11]  Verifer returned sat in 0.815910 secs.
[09/27 16:23:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2820.720947   -3021.746826  1181.662354 -2820.720947    0.026123 -3021.746826        0.0  201.025879      200.000000       7.0         -3021.746826                -1.0            -1
1   -2820.720947   -2920.720947  1181.662354 -2820.720947    0.026123 -2920.720947        0.0  100.000000      100.000000       8.0         -3021.746826                 0.0         False
2   -2820.720947   -2820.772949  1181.662354 -2820.720947   99.999756 -2820.772949        0.0    0.052002        0.000000       9.0         -3021.746826                 1.0          True
3   -2820.720947   -2820.720947  1281.662354 -2820.720947    0.026123 -2820.720947        0.0    0.000000        0.000000       9.0         -2820.720947                 1.0          True
4   -2620.695068   -2820.720947  1281.662354 -2620.695068  200.025879 -2820.720947        0.0  200.025879      100.025879       9.0         -2820.720947                 1.0         False
5   -2620.695068   -2720.720947  1281.662354 -2620.695068   99.000000 -2720.720947        0.0  100.025879        0.025879       2.0         -2620.695068                 1.0         False
6   -2620.695068   -2620.695068  1380.636475 -2620.695068  100.000000 -2620.695068        0.0    0.000000       -1.000000       3.0         -2620.695068                 0.0         False
7   -2519.695068   -2519.695068  1380.636475 -2519.695068  101.000000 -2519.695068        0.0    0.000000        0.000000       1.0         -2620.695068                 0.0         False
8   -2417.695068   -2500.746826  1380.636475 -2417.695068  102.000000 -2500.746826        0.0   83.051758        2.000000       1.0         -2620.695068                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:23:12]  --------------------------------------------------------------------------------
[09/27 16:23:12]  Iteration: 246 (76 solution, 169 counterexamples)
[09/27 16:23:58]  Generator returned sat in 39.643547 secs.
[09/27 16:23:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:24:00]  Verifer returned unsat in 1.547340 secs.
[09/27 16:24:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:24:00]  --------------------------------------------------------------------------------
[09/27 16:24:00]  Iteration: 247 (77 solution, 169 counterexamples)
[09/27 16:24:28]  Generator returned sat in 21.946959 secs.
[09/27 16:24:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:24:30]  Improved gap from 0.0 to 0
[09/27 16:24:30]  Improved number of small numbers from 44 to 114 out of a max of 114
[09/27 16:24:30]  Verifer returned sat in 1.364398 secs.
[09/27 16:24:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2196.228271   -2496.228271  557.169678 -2196.228271    0.051758 -2496.228271        0.0  300.000000      200.000000       7.0         -2496.228271                -1.0            -1
1   -2196.228271   -2298.331787  557.169678 -2196.228271   99.948242 -2298.331787        0.0  102.103516      100.000000       7.0         -2496.228271                 0.0         False
2   -2196.228271   -2296.228027  557.169678 -2196.228271   99.948242 -2296.228027        0.0   99.999756        0.000000       8.0         -2496.228271                 0.0         False
3   -2196.228271   -2196.228271  657.169678 -2196.228271   99.948242 -2196.228271        0.0    0.000000        0.000000       9.0         -2496.228271                 0.0         False
4   -2047.228271   -2196.228271  657.169678 -2047.228271  149.000000 -2196.228271        0.0  149.000000       49.000000       9.0         -2496.228271                 1.0          True
5   -2047.228271   -2047.279785  657.169678 -2047.228271   50.051758 -2047.279785        0.0    0.051514      -51.000000       2.0         -2047.228271                 1.0         False
6   -1996.228027   -1996.228027  752.117676 -1996.228027   51.051758 -1996.228027        0.0    0.000000       -5.051758       1.0         -2047.228271                 0.0         False
7   -1944.176270   -1944.228027  752.117676 -1944.176270   52.051758 -1944.228027        0.0    0.051758      -53.000000       1.0         -2047.228271                 0.0         False
8   -1891.176270   -1891.176270  752.117676 -1891.176270   53.051758 -1891.176270        0.0    0.000000     -100.000000       1.0         -2047.228271                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:24:31]  --------------------------------------------------------------------------------
[09/27 16:24:31]  Iteration: 248 (77 solution, 170 counterexamples)
[09/27 16:27:15]  Generator returned sat in 157.507573 secs.
[09/27 16:27:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:27:17]  Verifer returned unsat in 1.505098 secs.
[09/27 16:27:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:27:17]  --------------------------------------------------------------------------------
[09/27 16:27:17]  Iteration: 249 (78 solution, 170 counterexamples)
[09/27 16:27:35]  Generator returned sat in 11.618237 secs.
[09/27 16:27:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:27:38]  Improved gap from 0.0 to 0
[09/27 16:27:38]  Improved number of small numbers from 110 to 114 out of a max of 114
[09/27 16:27:38]  Verifer returned sat in 2.808299 secs.
[09/27 16:27:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2291.176514   -2511.150635  652.117676 -2291.176514    0.025635 -2511.150635        0.0  219.974121      200.000000       6.0         -2511.150635                -1.0            -1
1   -2291.176514   -2431.021240  652.117676 -2291.176514    0.025635 -2431.021240        0.0  139.844727      100.000000       6.0         -2511.150635                 0.0         False
2   -2291.176514   -2291.228271  652.117676 -2291.176514    0.051514 -2291.228271        0.0    0.051758        0.000000       7.0         -2511.150635                 0.0         False
3   -2291.176514   -2291.176514  752.117676 -2291.176514    0.025879 -2291.176514        0.0    0.000000        0.000000       8.0         -2291.176514                 0.0         False
4   -2071.202393   -2291.176514  752.117676 -2071.202393  219.974121 -2291.176514        0.0  219.974121      119.974121       8.0         -2291.176514                 1.0         False
5   -2071.202393   -2191.176514  752.117676 -2071.202393  139.844727 -2191.176514        0.0  119.974121       19.974121       2.0         -2071.202393                 1.0         False
6   -2071.202393   -2071.202393  832.143311 -2071.202393  119.948242 -2071.202393        0.0    0.000000       -0.000244       3.0         -2071.202393                 0.0         False
7   -1901.241211   -2071.176270  832.143311 -1901.241211  169.961182 -2071.176270        0.0  169.935059       69.960938       1.0         -2071.202393                 0.0         False
8   -1876.195557   -1971.202148  832.143311 -1876.195557  194.980713 -1971.202148        0.0   95.006592       -4.993408       2.0         -2071.202393                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:27:39]  --------------------------------------------------------------------------------
[09/27 16:27:39]  Iteration: 250 (78 solution, 171 counterexamples)
[09/27 16:28:02]  Generator returned sat in 16.372069 secs.
[09/27 16:28:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:28:11]  Improved gap from 0.0 to 0
[09/27 16:28:11]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 16:28:11]  Verifer returned sat in 8.875127 secs.
[09/27 16:28:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2145.726807   -2345.830322  532.205078 -2145.726807    0.025635 -2345.830322        0.0  200.103516      200.000000       9.0         -2345.830322                -1.0            -1
1   -2145.726807   -2245.830322  532.205078 -2145.726807    0.025635 -2245.830322        0.0  100.103516      100.000000       7.0         -2345.830322                 1.0         False
2   -2145.726807   -2145.778320  532.205078 -2145.726807  100.103516 -2145.778320        0.0    0.051514        0.000000       8.0         -2345.830322                 0.0         False
3   -2145.726807   -2145.726807  632.205078 -2145.726807    0.025635 -2145.726807        0.0    0.000000        0.000000       9.0         -2145.726807                 0.0         False
4   -1945.623291   -2145.726807  632.205078 -1945.623291  200.103516 -2145.726807        0.0  200.103516      100.103516       9.0         -2145.726807                 1.0         False
5   -1945.623291   -2045.726562  632.205078 -1945.623291  100.103516 -2045.726562        0.0  100.103271        0.103516       2.0         -1945.623291                 1.0         False
6   -1945.623291   -1945.623291  712.230957 -1945.623291  100.077637 -1945.623291        0.0    0.000000      -19.870605       3.0         -1945.623291                 0.0         False
7   -1795.532715   -1895.610352  712.230957 -1795.532715  150.090576 -1895.610352        0.0  100.077637       30.219971       1.0         -1945.623291                 0.0         False
8   -1695.506836   -1825.752441  712.230957 -1695.506836  200.103516 -1825.752441        0.0  130.245605       30.245850       2.0         -1945.623291                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:28:12]  --------------------------------------------------------------------------------
[09/27 16:28:12]  Iteration: 251 (78 solution, 172 counterexamples)
[09/27 16:28:40]  Generator returned sat in 21.083052 secs.
[09/27 16:28:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:28:41]  Improved gap from 0.0 to 0
[09/27 16:28:43]  Improved number of small numbers from 48 to 94 out of a max of 114
[09/27 16:28:43]  Verifer returned sat in 2.368240 secs.
[09/27 16:28:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2444.552002   -2644.552002   831.030273 -2444.552002  100.051514 -2644.552002        0.0  200.000000      200.000000       8.0         -2644.552002                -1.0            -1
1   -2444.552002   -2544.552002   831.030273 -2444.552002  100.051514 -2544.552002        0.0  100.000000      100.000000       7.0         -2644.552002                 0.0         False
2   -2444.552002   -2544.500244   831.030273 -2444.552002   99.999756 -2544.500244        0.0   99.948242        0.000000       8.0         -2444.552002                 0.0         False
3   -2444.552002   -2444.552002   931.030273 -2444.552002   31.793457 -2444.552002        0.0    0.000000        0.000000       9.0         -2444.552002                 0.0         False
4   -2328.655273   -2444.552002   931.030273 -2328.655273  115.896729 -2444.552002        0.0  115.896729       15.896729       9.0         -2444.552002                 1.0         False
5   -2328.655273   -2344.551899   931.030273 -2328.655273  107.948364 -2344.551899        0.0   15.896626      -84.103271       2.0         -2328.655273                 1.0         False
6   -2235.603535   -2235.603535  1022.081787 -2235.603535  108.948364 -2235.603535        0.0    0.000000       -0.000020       1.0         -2328.655273                 0.0         False
7   -2125.655171   -2235.551899  1022.081787 -2125.655171  109.948364 -2235.551899        0.0  109.896729        9.948345       1.0         -2328.655273                 0.0         False
8   -2124.603535   -2124.603760  1022.081787 -2124.603535  110.948364 -2124.603760        0.0    0.000225      -89.000020       1.0         -2328.655273                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:28:43]  --------------------------------------------------------------------------------
[09/27 16:28:43]  Iteration: 252 (78 solution, 173 counterexamples)
[09/27 16:29:37]  Generator returned sat in 47.205175 secs.
[09/27 16:29:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:29:39]  Improved number of small numbers from 46 to 58 out of a max of 113
[09/27 16:29:39]  Verifer returned sat in 1.313918 secs.
[09/27 16:29:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3169.443115   -3335.460449  1421.938779 -3169.443115  300.000000 -3335.460449    0.000000  166.017334       66.017393       7.0         -3335.460449                -1.0            -1
1   -3035.511963   -3169.391823  1421.938779 -3035.511963  299.948486 -3169.391823    0.000000  133.879860       99.948545       1.0         -3035.511963                 1.0         False
2   -2835.460508   -3035.460508  1421.938779 -2835.460508  333.931315 -3035.460508    0.000000  200.000000      200.000000       1.0         -3035.511963                 0.0         False
3   -2701.529193   -3035.408994  1421.938779 -2701.529193  333.931315 -3035.408994   33.931315  299.948486      200.000000       2.0         -3035.511963                 0.0         False
4   -2701.529193   -2935.460508  1421.938779 -2701.529193  165.965658 -2935.460508   33.931315  200.000000      100.000000       3.0         -2735.460508                 0.0         False
5   -2701.529193   -2835.460508  1421.938779 -2701.529193  199.948486 -2835.460508   33.931315  100.000000        0.000000       4.0         -2735.460508                 0.0         False
6   -2401.606463   -2735.460508  1421.938779 -2401.606463  399.922729 -2735.460508   33.931315  299.922729      199.922729       4.0         -2735.460508                 1.0         False
7   -1951.670855   -2609.338163  1421.938779 -1951.670855  749.858337 -2609.338163  383.789653  273.877655      200.000000       2.0         -2735.460508                 1.0         False
8   -1851.619342   -2435.486328  1421.938779 -1851.619342  373.929169 -2435.486328  383.841166  200.025820      200.000000       2.0         -2235.460508                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=5732923/16384, 
.[0m
[09/27 16:29:40]  --------------------------------------------------------------------------------
[09/27 16:29:40]  Iteration: 253 (78 solution, 174 counterexamples)
[09/27 16:31:00]  Generator returned sat in 73.747970 secs.
[09/27 16:31:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:31:01]  Improved gap from 0.0 to 100
[09/27 16:31:02]  Improved number of small numbers from 41 to 114 out of a max of 114
[09/27 16:31:02]  Verifer returned sat in 1.019272 secs.
[09/27 16:31:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2801.542236   -3001.503662  1346.935791 -2801.542236    0.012939 -3001.503662    0.000000  199.961426      199.961426       1.0         -3001.503662                -1.0            -1
1   -2801.542236   -3001.490723  1346.935791 -2801.542236    0.012939 -3001.490723    0.000000  199.948486       99.961426       2.0         -3001.503662                 0.0         False
2   -2801.516357   -2801.529297  1346.935791 -2801.516357  199.974365 -2801.529297    0.000000    0.012939       -0.012695       1.0         -3001.503662                 1.0          True
3   -2801.503418   -2801.503662  1346.935791 -2801.503418    0.025879 -2801.503662    0.000000    0.000244      -99.999756       1.0         -2801.503418                 0.0         False
4   -2601.503662   -2651.503418  1346.935791 -2601.503662  200.000000 -2651.503418    0.000000   49.999756        0.000000       1.0         -2801.503418                 0.0         False
5   -2301.516113   -2552.184570  1346.935791 -2301.516113  349.987305 -2552.184570    0.000000  250.668457      199.987549       1.0         -2801.503418                 0.0         False
6   -2301.516113   -2501.503418  1346.935791 -2301.516113  249.344727 -2501.503418    0.000000  199.987305       99.987549       2.0         -2301.516113                 0.0         False
7   -2127.486328   -2362.516357  1346.935791 -2127.486328  374.017090 -2362.516357    0.000000  235.030029      174.017334       3.0         -2301.516113                 1.0         False
8   -1801.490723   -2201.503662  1346.935791 -1801.490723  561.025635 -2201.503662  200.012939  200.000000      200.000000       2.0         -2301.516113                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819253/4096, 
.[0m
[09/27 16:31:02]  --------------------------------------------------------------------------------
[09/27 16:31:02]  Iteration: 254 (78 solution, 175 counterexamples)
[09/27 16:32:19]  Generator returned sat in 70.123875 secs.
[09/27 16:32:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:32:21]  Improved gap from 0.0 to 17.1875
[09/27 16:32:22]  Improved number of small numbers from 70 to 91 out of a max of 114
[09/27 16:32:22]  Verifer returned sat in 1.940403 secs.
[09/27 16:32:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3395.510986   -3596.506104  1841.938291 -3395.510986    0.002441 -3596.506104     0.0000  200.995117      100.995176       9.0         -3596.506104                -1.0            -1
1   -3395.510986   -3496.506104  1841.938291 -3395.510986    0.002441 -3496.506104     0.0000  100.995117        0.995176       9.0         -3596.506104                 1.0         False
2   -3395.510986   -3395.511162  1841.938291 -3395.510986  100.992500 -3395.511162     0.0000    0.000176      -99.004824       3.0         -3596.506104                 1.0          True
3   -3096.508662   -3196.506162  1841.938291 -3096.508662  299.002500 -3196.506162     0.0000   99.997500       99.997500       1.0         -3596.506104                 1.0          True
4   -2896.503662   -3096.506348  1841.938291 -2896.503662  300.002500 -3096.506348     0.0025  200.000186      200.000000       1.0         -3596.506104                 0.0         False
5   -2896.503662   -3096.503906  1841.938291 -2896.503662    0.010000 -3096.503906     0.0025  199.997744      100.000000       2.0         -2896.506162                 0.0         False
6   -2896.503662   -2995.636162  1841.938291 -2896.503662    1.010000 -2995.636162     0.0025   99.130000        0.000000       3.0         -2896.506162                 0.0         False
7   -2893.693662   -2893.696162  1921.940674 -2893.693662  101.940000 -2893.696162     0.0025    0.000000      -17.187617       1.0         -2896.506162                 1.0         False
8   -2790.753662   -2876.508545  1921.940674 -2790.753662  102.940000 -2876.508545     0.0025   85.752383      -14.247617       1.0         -2896.506162                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 16:32:22]  --------------------------------------------------------------------------------
[09/27 16:32:22]  Iteration: 255 (78 solution, 176 counterexamples)
[09/27 16:32:53]  Generator returned sat in 23.990129 secs.
[09/27 16:32:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:32:55]  Verifer returned unsat in 1.416199 secs.
[09/27 16:32:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:32:55]  --------------------------------------------------------------------------------
[09/27 16:32:55]  Iteration: 256 (79 solution, 176 counterexamples)
[09/27 16:33:10]  Generator returned sat in 9.686739 secs.
[09/27 16:33:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:33:12]  Verifer returned unsat in 1.732090 secs.
[09/27 16:33:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:33:12]  --------------------------------------------------------------------------------
[09/27 16:33:12]  Iteration: 257 (80 solution, 176 counterexamples)
[09/27 16:33:32]  Generator returned sat in 13.709527 secs.
[09/27 16:33:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:33:36]  Improved gap from 0.0 to 0
[09/27 16:33:36]  Improved number of small numbers from 57 to 114 out of a max of 114
[09/27 16:33:36]  Verifer returned sat in 3.950570 secs.
[09/27 16:33:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7870.901123   -8072.003662  1832.235596 -7870.901123    0.025391 -8072.003662        0.0  201.102539      200.000000       9.0         -8072.003662                -1.0            -1
1   -7870.901123   -7972.003418  1832.235596 -7870.901123    0.025391 -7972.003418        0.0  101.102295      100.000000       8.0         -8072.003662                 1.0         False
2   -7870.901123   -7870.952148  1832.235596 -7870.901123    0.025635 -7870.952148        0.0    0.051025        0.000000       9.0         -8072.003662                 0.0         False
3   -7870.901123   -7870.901123  1932.235596 -7870.901123    0.025635 -7870.901123        0.0    0.000000        0.000000       9.0         -8072.003662                 1.0          True
4   -7668.798584   -7870.901123  1932.235596 -7668.798584  202.102539 -7870.901123        0.0  202.102539      102.102539       9.0         -8072.003662                 1.0          True
5   -7668.798584   -7770.901123  1932.235596 -7668.798584  102.102295 -7770.901123        0.0  102.102539        2.102539       2.0         -7668.798584                 1.0         False
6   -7668.798584   -7668.798584  2030.107422 -7668.798584  102.076660 -7668.798584        0.0    0.000000       -0.025635       3.0         -7668.798584                 0.0         False
7   -7515.708984   -7668.772949  2030.107422 -7515.708984  153.089600 -7668.772949        0.0  153.063965       53.063965       1.0         -7668.798584                 0.0         False
8   -7490.164062   -7550.926514  2030.107422 -7490.164062  178.608887 -7550.926514        0.0   60.762451      -21.391113       2.0         -7668.798584                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:33:37]  --------------------------------------------------------------------------------
[09/27 16:33:37]  Iteration: 258 (80 solution, 177 counterexamples)
[09/27 16:34:08]  Generator returned sat in 26.028412 secs.
[09/27 16:34:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:34:16]  Improved gap from 0.0 to 0
[09/27 16:34:16]  Improved number of small numbers from 35 to 114 out of a max of 114
[09/27 16:34:16]  Verifer returned sat in 7.081431 secs.
[09/27 16:34:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7962.437256   -8227.416260  1923.771729 -7962.437256    0.025391 -8227.416260    0.000000  264.979004      200.000000       7.0         -8227.416260                -1.0            -1
1   -7962.437256   -8162.437256  1923.771729 -7962.437256    0.025635 -8162.437256    0.000000  200.000000      100.000000       7.0         -8227.416260                 0.0         False
2   -7962.437256   -7962.488525  1923.771729 -7962.437256  199.974365 -7962.488525    0.000000    0.051270        0.000000       8.0         -8227.416260                 0.0         False
3   -7962.437256   -7962.437256  2023.771729 -7962.437256    0.025391 -7962.437256    0.000000    0.000000        0.000000       9.0         -7962.437256                 0.0         False
4   -7696.420166   -7962.437256  2023.771729 -7696.420166  266.017090 -7962.437256    0.000000  266.017090      166.017090       9.0         -7962.437256                 1.0         False
5   -7362.411621   -7862.437256  2023.771729 -7362.411621  600.025635 -7862.437256  200.025635  300.000000      200.000000       2.0         -7962.437256                 1.0         False
6   -7362.411621   -7712.796387  2023.771729 -7362.411621   49.025635 -7712.796387  200.025635  150.359131      100.000000       3.0         -7562.437256                 0.0         False
7   -7362.411621   -7562.462891  2023.771729 -7362.411621  150.333252 -7562.462891  200.025635    0.025635        0.000000       3.0         -7562.437256                 0.0         False
8   -7086.283447   -7562.411621  2023.771729 -7086.283447  276.153809 -7562.411621  200.025635  276.102539      176.128174       1.0         -7562.437256                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819305/4096, 
.[0m
[09/27 16:34:17]  --------------------------------------------------------------------------------
[09/27 16:34:17]  Iteration: 259 (80 solution, 178 counterexamples)
[09/27 16:35:01]  Generator returned sat in 38.243655 secs.
[09/27 16:35:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:35:01]  Improved gap from 0.0 to 1.5625
[09/27 16:35:02]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 16:35:02]  Verifer returned sat in 0.565378 secs.
[09/27 16:35:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7760.437256   -8060.437256  2023.771729 -7760.437256    0.051025 -8060.437256        0.0  300.000000      200.000000       8.0         -8060.437256                -1.0            -1
1   -7660.488281   -7860.437256  2023.771729 -7660.488281  399.948975 -7860.437256        0.0  199.948975      199.948975       5.0         -8060.437256                 1.0         False
2   -7660.386230   -7860.437256  2023.771729 -7660.386230  200.051025 -7860.437256        0.0  200.051025      100.051025       5.0         -7660.386230                 1.0          True
3   -7660.386230   -7660.437256  2023.771729 -7660.386230  199.000000 -7660.437256        0.0    0.051025        0.051025       2.0         -7660.386230                 1.0         False
4   -7460.437256   -7660.335205  2023.771729 -7460.437256  200.000000 -7660.335205        0.0  199.897949      100.000000       1.0         -7660.386230                 0.0         False
5   -7459.335205   -7560.437256  2023.771729 -7459.335205  201.000000 -7560.437256        0.0  101.102051        1.102051       2.0         -7660.386230                 0.0         False
6   -7358.437256   -7460.437256  2023.771729 -7358.437256  202.000000 -7460.437256        0.0  102.000000        2.000000       3.0         -7660.386230                 0.0         False
7   -7358.437256   -7358.437256  2120.209229 -7358.437256    1.000000 -7358.437256        0.0    0.000000       -1.562500       2.0         -7358.437256                 1.0          True
8   -7356.437256   -7356.437256  2218.209229 -7356.437256    2.000000 -7356.437256        0.0    0.000000       -1.562500       1.0         -7358.437256                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:35:02]  --------------------------------------------------------------------------------
[09/27 16:35:02]  Iteration: 260 (80 solution, 179 counterexamples)
[09/27 16:35:47]  Generator returned sat in 39.330910 secs.
[09/27 16:35:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:35:48]  Improved gap from 0.0 to 100
[09/27 16:35:48]  Improved number of small numbers from 71 to 114 out of a max of 114
[09/27 16:35:48]  Verifer returned sat in 0.403326 secs.
[09/27 16:35:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7959.770752   -8060.437256  2023.771484 -7959.770752  100.666667 -8060.437256    0.000000  100.666504        0.666504       9.0         -8060.437256                -1.0            -1
1   -7959.770508   -7959.821533  2023.771484 -7959.770508  100.666748 -7959.821533    0.000000    0.051025      -99.333252       9.0         -8060.437256                 1.0         False
2   -7859.154785   -7860.437256  2023.771484 -7859.154785  100.666748 -7860.437256    0.000000    1.282471      -98.717529       1.0         -8060.437256                 1.0          True
3   -7560.488281   -7694.420410  2023.771484 -7560.488281  299.948975 -7694.420410    0.000000  133.932129       99.948975       1.0         -8060.437256                 0.0         False
4   -7360.437500   -7560.437256  2023.771484 -7360.437500  333.982910 -7560.437256    0.000000  199.999756      199.999756       1.0         -8060.437256                 0.0         False
5   -7192.753662   -7460.437256  2023.771484 -7192.753662  367.683594 -7460.437256   67.683594  200.000000      200.000000       2.0         -8060.437256                 0.0         False
6   -7026.070068   -7360.437256  2023.771484 -7026.070068  366.683594 -7360.437256  134.367188  200.000000      200.000000       2.0         -7160.437256                 1.0          True
7   -6860.386475   -7325.120850  2023.771484 -6860.386475  365.683594 -7325.120850  200.050781  264.683594      200.000000       3.0         -7060.437256                 1.0         False
8   -6760.386475   -7160.437500  2023.771484 -6760.386475  364.683594 -7160.437500  200.050781  200.000244      200.000000       3.0         -6960.437256                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=51213/256, 
.[0m
[09/27 16:35:49]  --------------------------------------------------------------------------------
[09/27 16:35:49]  Iteration: 261 (80 solution, 180 counterexamples)
[09/27 16:36:39]  Generator returned sat in 44.179515 secs.
[09/27 16:36:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:36:39]  Improved gap from 0.0 to 0
[09/27 16:36:40]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 16:36:40]  Verifer returned sat in 0.370815 secs.
[09/27 16:36:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7377.386475   -7593.335693  1843.746094 -7377.386475    0.025391 -7593.335693        0.0  215.949219      200.000000       9.0         -7593.335693                -1.0            -1
1   -7377.386475   -7477.386475  1843.746094 -7377.386475    0.025391 -7477.386475        0.0  100.000000      100.000000       9.0         -7593.335693                 1.0         False
2   -7377.386475   -7377.437256  1843.746094 -7377.386475    0.025391 -7377.437256        0.0    0.050781        0.000000       7.0         -7593.335693                 1.0          True
3   -7377.386475   -7377.386475  1943.746094 -7377.386475    0.025391 -7377.386475        0.0    0.000000        0.000000       8.0         -7593.335693                 0.0         False
4   -7160.437256   -7377.386475  1943.746094 -7160.437256  216.949219 -7377.386475        0.0  216.949219      116.949219       8.0         -7593.335693                 1.0          True
5   -7160.437256   -7277.386475  1943.746094 -7160.437256  101.000000 -7277.386475        0.0  116.949219       16.949219       2.0         -7160.437256                 1.0         False
6   -7160.437256   -7160.437256  2023.771484 -7160.437256  102.000000 -7160.437256        0.0    0.000000       -3.025391       3.0         -7160.437256                 0.0         False
7   -7057.437256   -7057.462646  2023.771484 -7057.437256  103.000000 -7057.462646        0.0    0.025391       -0.025391       1.0         -7160.437256                 0.0         False
8   -6953.462646   -7057.411865  2023.771484 -6953.462646  104.000000 -7057.411865        0.0  103.949219        3.949219       1.0         -7160.437256                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:36:40]  --------------------------------------------------------------------------------
[09/27 16:36:40]  Iteration: 262 (80 solution, 181 counterexamples)
[09/27 16:37:16]  Generator returned sat in 30.106737 secs.
[09/27 16:37:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:37:17]  Improved gap from 0.0 to 0
[09/27 16:37:17]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 16:37:17]  Verifer returned sat in 0.518336 secs.
[09/27 16:37:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7360.589600   -7560.589600  1923.771484 -7360.589600    0.025391 -7560.589600    0.000000  200.000000      200.000000       8.0           -7560.5896                -1.0            -1
1   -7360.589600   -7557.437256  1923.771484 -7360.589600    0.025391 -7557.437256    0.000000  196.847656      100.000000       9.0           -7560.5896                 1.0         False
2   -7360.589600   -7360.640381  1923.771484 -7360.589600    0.050781 -7360.640381    0.000000    0.050781        0.000000       5.0           -7560.5896                 1.0          True
3   -7360.589600   -7360.589600  2023.771484 -7360.589600    0.025391 -7360.589600    0.000000    0.000000        0.000000       6.0           -7360.5896                 0.0         False
4   -7159.538818   -7360.589600  2023.771484 -7159.538818  201.050781 -7360.589600    0.000000  201.050781      101.050781       6.0           -7360.5896                 1.0         False
5   -6760.640381   -7260.589600  2023.771484 -6760.640381  599.949219 -7260.589600  199.949219  300.000000      200.000000       2.0           -7360.5896                 1.0         False
6   -6760.640381   -7061.589600  2023.771484 -6760.640381  299.974609 -7061.589600  199.949219  101.000000      100.000000       2.0           -6960.5896                 0.0         False
7   -6560.665771   -6962.488037  2023.771484 -6560.665771  300.974609 -6962.488037  199.949219  201.873047      199.974609       3.0           -6960.5896                 0.0         False
8   -6460.564209   -6960.564209  2023.771484 -6460.564209  301.974609 -6960.564209  200.025391  299.974609      200.000000       2.0           -6960.5896                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=102413/512, 
.[0m
[09/27 16:37:18]  --------------------------------------------------------------------------------
[09/27 16:37:18]  Iteration: 263 (80 solution, 182 counterexamples)
[09/27 16:38:29]  Generator returned sat in 65.204869 secs.
[09/27 16:38:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:38:31]  Improved gap from 0.0 to 0
[09/27 16:38:32]  Improved number of small numbers from 39 to 49 out of a max of 114
[09/27 16:38:32]  Verifer returned sat in 2.390811 secs.
[09/27 16:38:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6964.729095   -7164.729095  1923.771484 -6964.729095    0.025146 -7164.729095    0.000000  200.000000      200.000000       7.0         -7164.729095                -1.0            -1
1   -6964.729095   -7159.644663  1923.771484 -6964.729095    0.025146 -7159.644663    0.000000  194.915568      100.000000       5.0         -7164.729095                 1.0         False
2   -6964.729095   -6964.754639  1923.771484 -6964.729095    0.050537 -6964.754639    0.000000    0.025543        0.000000       5.0         -7164.729095                 0.0         False
3   -6964.729095   -6964.729095  2023.771484 -6964.729095    0.025330 -6964.729095    0.000000    0.000000        0.000000       6.0         -6964.729095                 0.0         False
4   -6763.678436   -6964.729095  2023.771484 -6763.678436  201.050659 -6964.729095    0.000000  201.050659      101.050659       6.0         -6964.729095                 1.0         False
5   -6366.712209   -6765.813527  2023.771484 -6366.712209  598.016886 -6765.813527  198.016886  201.084432      200.000000       2.0         -6964.729095                 1.0         False
6   -6267.788198   -6763.653107  2023.771484 -6267.788198  300.008443 -6763.653107  198.016886  297.848022      198.924011       2.0         -6465.805084                 0.0         False
7   -6264.627777   -6564.729095  2023.771484 -6264.627777  301.008443 -6564.729095  198.016886  102.084432      102.084432       3.0         -6465.805084                 0.0         False
8   -6064.703766   -6465.779785  2023.771484 -6064.703766  302.008443 -6465.779785  200.025330  201.050690      200.000000       2.0         -6465.805084                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277215/16384, 
.[0m
[09/27 16:38:32]  --------------------------------------------------------------------------------
[09/27 16:38:32]  Iteration: 264 (80 solution, 183 counterexamples)
[09/27 16:39:09]  Generator returned sat in 30.570304 secs.
[09/27 16:39:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:39:10]  Improved gap from 0.0 to 0
[09/27 16:39:10]  Improved number of small numbers from 41 to 114 out of a max of 114
[09/27 16:39:10]  Verifer returned sat in 1.055043 secs.
[09/27 16:39:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7563.412598   -7764.203613  1923.771484 -7563.412598    0.050293 -7764.203613    0.000000  200.791016      200.000000       3.0         -7764.203613                -1.0            -1
1   -7563.412598   -7763.412598  1923.771484 -7563.412598    0.025391 -7763.412598    0.000000  200.000000      100.000000       4.0         -7563.412598                 0.0         False
2   -7563.412598   -7563.463135  1923.771484 -7563.412598    0.025146 -7563.463135    0.000000    0.050537        0.000000       4.0         -7563.412598                 0.0         False
3   -7563.412598   -7563.412598  2023.771484 -7563.412598    0.025391 -7563.412598    0.000000    0.000000        0.000000       5.0         -7563.412598                 0.0         False
4   -7363.570801   -7563.412598  2023.771484 -7363.570801  199.841797 -7563.412598    0.000000  199.841797       99.841797       5.0         -7563.412598                 1.0         False
5   -6964.729004   -7463.412598  2023.771484 -6964.729004  598.683594 -7463.412598  198.683594  300.000000      200.000000       2.0         -7563.412598                 1.0         False
6   -6964.729004   -7363.412598  2023.771484 -6964.729004  299.341797 -7363.412598  198.683594  200.000000      100.000000       2.0         -7163.412598                 0.0         False
7   -6864.387207   -7163.412598  2023.771484 -6864.387207  300.341797 -7163.412598  198.683594  100.341797      100.341797       3.0         -7163.412598                 0.0         False
8   -6663.387207   -7063.412842  2023.771484 -6663.387207  301.341797 -7063.412842  200.025391  200.000244      200.000000       2.0         -7163.412598                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=102413/512, 
.[0m
[09/27 16:39:11]  --------------------------------------------------------------------------------
[09/27 16:39:11]  Iteration: 265 (80 solution, 184 counterexamples)
[09/27 16:39:32]  Generator returned sat in 14.605915 secs.
[09/27 16:39:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:39:33]  Improved gap from 0.0 to 0
[09/27 16:39:34]  Improved number of small numbers from 39 to 49 out of a max of 114
[09/27 16:39:34]  Verifer returned sat in 1.705574 secs.
[09/27 16:39:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7661.427805   -7861.885793  1923.771484 -7661.427805    0.050537 -7861.885793    0.000000  200.457987      200.000000       3.0         -7861.885793                -1.0            -1
1   -7661.427805   -7861.427805  1923.771484 -7661.427805    0.050537 -7861.427805    0.000000  200.000000      100.000000       4.0         -7861.885793                 0.0         False
2   -7661.427805   -7661.478271  1923.771484 -7661.427805    0.025146 -7661.478271    0.000000    0.050466        0.000000       5.0         -7661.427805                 0.0         False
3   -7661.427805   -7661.427805  2023.771484 -7661.427805    0.025208 -7661.427805    0.000000    0.000000        0.000000       6.0         -7661.427805                 0.0         False
4   -7461.919403   -7661.427805  2023.771484 -7461.919403  199.508403 -7661.427805    0.000000  199.508403       99.508403       6.0         -7661.427805                 1.0         False
5   -7063.411000   -7461.461415  2023.771484 -7063.411000  598.016805 -7461.461415  198.016805  200.033610      200.000000       1.0         -7661.427805                 1.0         False
6   -6963.436208   -7461.427805  2023.771484 -6963.436208  300.008403 -7461.427805  198.016805  299.974792      199.974792       2.0         -7161.453013                 0.0         False
7   -6962.402598   -7261.427805  2023.771484 -6962.402598  301.008403 -7261.427805  198.016805  101.008403      101.008403       3.0         -7161.453013                 0.0         False
8   -6761.402598   -7261.427734  2023.771484 -6761.402598  302.008403 -7261.427734  200.025208  299.999929      200.000000       3.0         -7161.453013                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277213/16384, 
.[0m
[09/27 16:39:34]  --------------------------------------------------------------------------------
[09/27 16:39:34]  Iteration: 266 (80 solution, 185 counterexamples)
[09/27 16:39:57]  Generator returned sat in 16.999820 secs.
[09/27 16:39:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:39:59]  Improved gap from 0.0 to 0
[09/27 16:39:59]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 16:39:59]  Verifer returned sat in 1.661771 secs.
[09/27 16:39:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7738.143311   -7938.143311  1923.771484 -7738.143311  200.050049 -7938.143311    0.000000  200.000000      200.000000       3.0         -7938.143311                -1.0            -1
1   -7738.143311   -7937.042725  1923.771484 -7738.143311  199.999756 -7937.042725    0.000000  198.899414      100.000000       4.0         -7738.143311                 0.0         False
2   -7738.143311   -7788.643555  1923.771484 -7738.143311    0.050049 -7788.643555    0.000000   50.500244        0.000000       5.0         -7738.143311                 0.0         False
3   -7738.143311   -7738.143311  2023.771484 -7738.143311   50.500000 -7738.143311    0.000000    0.000000        0.000000       6.0         -7738.143311                 0.0         False
4   -7438.143311   -7738.143311  2023.771484 -7438.143311  300.000000 -7738.143311    0.000000  300.000000      200.000000       6.0         -7738.143311                 1.0         False
5   -6940.243896   -7637.093262  2023.771484 -6940.243896  797.899414 -7637.093262  397.899414  298.949951      200.000000       2.0         -7738.143311                 1.0         False
6   -6840.244141   -7538.143311  2023.771484 -6840.244141  398.949707 -7538.143311  397.899414  299.999756      199.999756       3.0         -7238.143555                 0.0         False
7   -6740.294189   -7338.193848  2023.771484 -6740.294189  399.949707 -7338.193848  397.899414  200.000244      199.949707       3.0         -7238.143555                 0.0         False
8   -6539.344727   -7338.143311  2023.771484 -6539.344727  400.949707 -7338.143311  498.798584  300.000000      200.000000       4.0         -7238.143555                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2043079/4096, 
.[0m
[09/27 16:40:00]  --------------------------------------------------------------------------------
[09/27 16:40:00]  Iteration: 267 (80 solution, 186 counterexamples)
[09/27 16:40:33]  Generator returned sat in 27.357203 secs.
[09/27 16:40:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:40:35]  Improved gap from 0.0 to 0
[09/27 16:40:36]  Improved number of small numbers from 71 to 102 out of a max of 114
[09/27 16:40:36]  Verifer returned sat in 1.907691 secs.
[09/27 16:40:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7382.331787   -7582.331787  1923.77124 -7382.331787    0.024902 -7582.331787    0.000000  200.000000      200.000000       4.0         -7582.331787                -1.0            -1
1   -7382.331787   -7579.256348  1923.77124 -7382.331787    0.025146 -7579.256348    0.000000  196.924561      100.000000       4.0         -7582.331787                 0.0         False
2   -7382.331787   -7382.382080  1923.77124 -7382.331787    0.050049 -7382.382080    0.000000    0.050293        0.000000       5.0         -7582.331787                 0.0         False
3   -7382.331787   -7382.331787  2023.77124 -7382.331787    0.025146 -7382.331787    0.000000    0.000000        0.000000       6.0         -7382.331787                 0.0         False
4   -7181.281494   -7382.331787  2023.77124 -7181.281494  201.050293 -7382.331787    0.000000  201.050293      101.050293       6.0         -7382.331787                 1.0         False
5   -6782.306641   -7182.331909  2023.77124 -6782.306641  600.025146 -7182.331909  200.025146  200.000122      200.000000       2.0         -7382.331787                 1.0         False
6   -6683.294189   -7082.369629  2023.77124 -6683.294189  299.012573 -7082.369629  200.025146  199.050293      199.012451       2.0         -6883.319336                 0.0         False
7   -6582.331909   -6983.369629  2023.77124 -6582.331909  300.012573 -6983.369629  200.025146  201.012573      199.974731       3.0         -6883.319336                 0.0         False
8   -6482.331909   -6883.407471  2023.77124 -6482.331909  301.012573 -6883.407471  200.025146  201.050415      199.974731       3.0         -6883.319336                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819303/4096, 
.[0m
[09/27 16:40:36]  --------------------------------------------------------------------------------
[09/27 16:40:36]  Iteration: 268 (80 solution, 187 counterexamples)
[09/27 16:42:42]  Generator returned sat in 119.307446 secs.
[09/27 16:42:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:42:43]  Improved gap from 0.0 to 0
[09/27 16:42:44]  Improved number of small numbers from 68 to 72 out of a max of 114
[09/27 16:42:44]  Verifer returned sat in 1.680481 secs.
[09/27 16:42:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7693.798135   -7969.798760  1923.77124 -7693.798135    0.003662 -7969.798760    0.00000  276.000625        200.0000       4.0         -7969.798760                -1.0            -1
1   -7693.798135   -7893.798135  1923.77124 -7693.798135    0.002500 -7893.798135    0.00000  200.000000        100.0000       4.0         -7693.798135                 0.0         False
2   -7693.798135   -7693.800537  1923.77124 -7693.798135    0.001465 -7693.800537    0.00000    0.002402          0.0000       5.0         -7693.798135                 0.0         False
3   -7693.798135   -7693.798135  2023.77124 -7693.798135    0.001250 -7693.798135    0.00000    0.000000          0.0000       6.0         -7693.798135                 0.0         False
4   -7418.795635   -7693.798135  2023.77124 -7418.795635  275.002500 -7693.798135    0.00000  275.002500        175.0025       6.0         -7693.798135                 1.0         False
5   -7082.294385   -7493.798340  2023.77124 -7082.294385  611.503750 -7493.798340  211.50375  200.000205        200.0000       2.0         -7693.798135                 1.0         False
6   -7082.294385   -7393.798135  2023.77124 -7082.294385    0.010000 -7393.798135  211.50375  100.000000        100.0000       2.0         -7293.798135                 0.0         False
7   -7032.289385   -7293.798135  2023.77124 -7032.289385  150.005000 -7293.798135  211.50375   50.005000         50.0050       3.0         -7293.798135                 0.0         False
8   -6807.291885   -7293.798135  2023.77124 -6807.291885  275.002500 -7293.798135  211.50375  275.002500        175.0025       3.0         -7293.798135                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=169203/800, 
.[0m
[09/27 16:42:45]  --------------------------------------------------------------------------------
[09/27 16:42:45]  Iteration: 269 (80 solution, 188 counterexamples)
[09/27 16:43:11]  Generator returned sat in 19.662819 secs.
[09/27 16:43:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:43:11]  Improved gap from 0.0 to 100
[09/27 16:43:12]  Improved number of small numbers from 49 to 100 out of a max of 114
[09/27 16:43:12]  Verifer returned sat in 1.248486 secs.
[09/27 16:43:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7908.039307   -7908.089600  1824.746338 -7908.039307    0.049805 -7908.089600      0.000    0.050293        0.000244       9.0         -7908.089600                -1.0            -1
1   -7908.039307   -7908.039551  1824.746338 -7908.039307    0.025146 -7908.039551      0.000    0.000244      -99.999756       3.0         -7908.039307                 1.0         False
2   -7508.064453   -7708.039551  1824.746338 -7508.064453  399.975098 -7708.039551      0.000  199.975098      199.975098       1.0         -7908.039307                 1.0         False
3   -7508.064453   -7625.581092  1824.746338 -7508.064453  111.344455 -7625.581092      0.000  117.516639       99.975098       2.0         -7508.064453                 0.0         False
4   -7458.564409   -7608.039385  1824.746338 -7458.564409  167.016683 -7608.039385      0.000  149.474976       49.475142       3.0         -7508.064453                 1.0         False
5   -7357.514360   -7458.539551  1824.746338 -7357.514360  250.525024 -7458.539551      0.000  101.025190       50.525190       1.0         -7508.064453                 1.0         False
6   -7208.039551   -7408.039307  1824.746338 -7208.039551  250.500000 -7408.039307      0.000  199.999756      100.000000       2.0         -7208.039551                 0.0         False
7   -7032.289307   -7208.039551  1824.746338 -7032.289307  375.750000 -7208.039551      0.000  175.750244      175.750244       2.0         -7208.039551                 1.0         False
8   -6644.414551   -7208.014404  1824.746338 -6644.414551  563.625000 -7208.014404    263.625  299.974854      200.000000       2.0         -7208.039551                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=2109/8, 
.[0m
[09/27 16:43:13]  --------------------------------------------------------------------------------
[09/27 16:43:13]  Iteration: 270 (80 solution, 189 counterexamples)
[09/27 16:44:25]  Generator returned sat in 65.846380 secs.
[09/27 16:44:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:44:26]  Verifer returned unsat in 0.420306 secs.
[09/27 16:44:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:44:26]  --------------------------------------------------------------------------------
[09/27 16:44:26]  Iteration: 271 (81 solution, 189 counterexamples)
[09/27 16:45:29]  Generator returned sat in 56.996465 secs.
[09/27 16:45:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:45:32]  Verifer returned unsat in 1.513901 secs.
[09/27 16:45:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:45:32]  --------------------------------------------------------------------------------
[09/27 16:45:32]  Iteration: 272 (82 solution, 189 counterexamples)
[09/27 16:45:54]  Generator returned sat in 16.498263 secs.
[09/27 16:45:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:45:58]  Improved gap from 0.0 to 0
[09/27 16:45:58]  Improved number of small numbers from 53 to 114 out of a max of 114
[09/27 16:45:58]  Verifer returned sat in 3.180540 secs.
[09/27 16:45:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7875.710205   -8075.635254  1724.746338 -7875.710205    0.024902 -8075.635254        0.0  199.925049      199.925049       4.0         -8075.635254                -1.0            -1
1   -7875.635254   -7976.735107  1724.746338 -7875.635254  200.000000 -7976.735107        0.0  101.099854      100.000000       4.0         -8075.635254                 1.0         False
2   -7875.635254   -7875.685303  1724.746338 -7875.635254    0.025146 -7875.685303        0.0    0.050049        0.000000       2.0         -7875.635254                 1.0          True
3   -7875.635254   -7875.635254  1824.746338 -7875.635254    0.025146 -7875.635254        0.0    0.000000        0.000000       3.0         -7875.635254                 0.0         False
4   -7674.635254   -7875.635254  1824.746338 -7674.635254  201.000000 -7875.635254        0.0  201.000000      101.000000       3.0         -7875.635254                 1.0         False
5   -7674.635254   -7775.635254  1824.746338 -7674.635254  102.099854 -7775.635254        0.0  101.000000        1.000000       2.0         -7674.635254                 1.0         False
6   -7673.560303   -7673.560303  1922.671387 -7673.560303  102.074951 -7673.560303        0.0    0.000000        0.000000       1.0         -7673.560303                 0.0         False
7   -7520.485352   -7673.535400  1922.671387 -7520.485352  153.074951 -7673.535400        0.0  153.050049       53.074951       1.0         -7673.560303                 0.0         False
8   -7494.947998   -7555.660400  1922.671387 -7494.947998  178.587402 -7555.660400        0.0   60.712402      -21.387695       2.0         -7673.560303                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:45:59]  --------------------------------------------------------------------------------
[09/27 16:45:59]  Iteration: 273 (82 solution, 190 counterexamples)
[09/27 16:46:39]  Generator returned sat in 33.778719 secs.
[09/27 16:46:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:46:41]  Improved gap from 0.0 to 0
[09/27 16:46:42]  Improved number of small numbers from 68 to 74 out of a max of 114
[09/27 16:46:42]  Verifer returned sat in 2.070354 secs.
[09/27 16:46:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8041.268587   -8307.914421  1724.746338 -8041.268587    0.025146 -8307.914421      0.000  266.645833      200.000000       5.0         -8307.914421                -1.0            -1
1   -8041.268587   -8241.268587  1724.746338 -8041.268587    0.074951 -8241.268587      0.000  200.000000      100.000000       6.0         -8307.914421                 0.0         False
2   -8041.268587   -8041.318604  1724.746338 -8041.268587    0.050049 -8041.318604      0.000    0.050016        0.000000       7.0         -8041.268587                 0.0         False
3   -8041.268587   -8041.268587  1824.746338 -8041.268587    0.025000 -8041.268587      0.000    0.000000        0.000000       8.0         -8041.268587                 0.0         False
4   -7774.585254   -8041.268587  1824.746338 -7774.585254  266.683333 -8041.268587      0.000  266.683333      166.683333       8.0         -8041.268587                 1.0         False
5   -7441.243587   -7941.268555  1824.746338 -7441.243587  600.025000 -7941.268555    200.025  299.999967      200.000000       2.0         -8041.268587                 1.0         False
6   -7441.243587   -7774.951921  1824.746338 -7441.243587    1.000000 -7774.951921    200.025  133.683333      100.000000       3.0         -7641.268587                 0.0         False
7   -7441.243587   -7641.293587  1824.746338 -7441.243587  133.658333 -7641.293587    200.025    0.025000        0.000000       3.0         -7641.268587                 0.0         False
8   -7174.451921   -7641.243408  1824.746338 -7174.451921  266.816667 -7641.243408    200.025  266.766488      166.791667       1.0         -7641.268587                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=8001/40, 
.[0m
[09/27 16:46:42]  --------------------------------------------------------------------------------
[09/27 16:46:42]  Iteration: 274 (82 solution, 191 counterexamples)
[09/27 16:47:30]  Generator returned sat in 40.959555 secs.
[09/27 16:47:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:47:35]  Improved gap from 0.0 to 0
[09/27 16:47:36]  Improved number of small numbers from 45 to 114 out of a max of 114
[09/27 16:47:36]  Verifer returned sat in 5.329461 secs.
[09/27 16:47:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8090.437256   -8291.536621  1773.915039 -8090.437256    0.024658 -8291.536621        0.0  201.099365      200.000000       7.0         -8291.536621                -1.0            -1
1   -8090.437256   -8191.536621  1773.915039 -8090.437256    0.024902 -8191.536621        0.0  101.099365      100.000000       7.0         -8291.536621                 0.0         False
2   -8090.437256   -8090.486816  1773.915039 -8090.437256    0.024902 -8090.486816        0.0    0.049561        0.000000       7.0         -8291.536621                 0.0         False
3   -8090.437256   -8090.437256  1873.915039 -8090.437256    0.024902 -8090.437256        0.0    0.000000        0.000000       8.0         -8291.536621                 0.0         False
4   -7890.337891   -8090.437256  1873.915039 -7890.337891  200.099365 -8090.437256        0.0  200.099365      100.099365       8.0         -8291.536621                 1.0          True
5   -7890.337891   -7990.437256  1873.915039 -7890.337891  100.099365 -7990.437256        0.0  100.099365        0.099365       2.0         -7890.337891                 1.0         False
6   -7890.337891   -7890.337891  1973.815674 -7890.337891  100.074463 -7890.337891        0.0    0.000000        0.000000       3.0         -7890.337891                 0.0         False
7   -7740.250977   -7890.313232  1973.815674 -7740.250977  150.086914 -7890.313232        0.0  150.062256       50.086914       1.0         -7890.337891                 0.0         False
8   -7715.207764   -7790.337891  1973.815674 -7715.207764  175.105469 -7790.337891        0.0   75.130127      -24.869873       2.0         -7890.337891                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:47:36]  --------------------------------------------------------------------------------
[09/27 16:47:36]  Iteration: 275 (82 solution, 192 counterexamples)
[09/27 16:48:34]  Generator returned sat in 51.413267 secs.
[09/27 16:48:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:48:36]  Improved gap from 0.0 to 0
[09/27 16:48:36]  Improved number of small numbers from 91 to 114 out of a max of 114
[09/27 16:48:36]  Verifer returned sat in 1.450891 secs.
[09/27 16:48:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7891.337891   -8105.313232  1685.890381 -7891.337891    0.049561 -8105.313232        0.0  213.975342      200.000000       5.0         -8105.313232                -1.0            -1
1   -7891.337891   -7991.337891  1685.890381 -7891.337891    0.024902 -7991.337891        0.0  100.000000      100.000000       6.0         -7891.337891                 0.0         False
2   -7891.337891   -7891.362549  1685.890381 -7891.337891    0.024902 -7891.362549        0.0    0.024658        0.000000       7.0         -7891.337891                 0.0         False
3   -7891.337891   -7891.337891  1785.890381 -7891.337891    0.024658 -7891.337891        0.0    0.000000        0.000000       8.0         -7891.337891                 0.0         False
4   -7783.337891   -7891.337891  1785.890381 -7783.337891  108.000000 -7891.337891        0.0  108.000000        8.000000       8.0         -7891.337891                 1.0         False
5   -7783.337891   -7783.337891  1873.915039 -7783.337891  105.000000 -7783.337891        0.0    0.000000       -3.975342       2.0         -7783.337891                 1.0         False
6   -7677.337891   -7679.387451  1873.915039 -7677.337891  106.000000 -7679.387451        0.0    2.049561        2.024658       1.0         -7783.337891                 0.0         False
7   -7572.387451   -7679.362549  1873.915039 -7572.387451  107.000000 -7679.362549        0.0  106.975098        6.975098       2.0         -7783.337891                 0.0         False
8   -7571.362549   -7571.362549  1965.914795 -7571.362549  108.000000 -7571.362549        0.0    0.000000       -0.000244       1.0         -7783.337891                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:48:37]  --------------------------------------------------------------------------------
[09/27 16:48:37]  Iteration: 276 (82 solution, 193 counterexamples)
[09/27 16:49:07]  Generator returned sat in 23.699605 secs.
[09/27 16:49:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:49:13]  Improved gap from 0.0 to 0
[09/27 16:49:13]  Improved number of small numbers from 87 to 91 out of a max of 114
[09/27 16:49:13]  Verifer returned sat in 5.820750 secs.
[09/27 16:49:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8173.499349   -8440.495807  1865.914795 -8173.499349    0.001221 -8440.495807    0.00000  266.996458      200.000000       8.0         -8440.495807                -1.0            -1
1   -8173.499349   -8370.503099  1865.914795 -8173.499349    0.001250 -8370.503099    0.00000  197.003750      100.000000       9.0         -8440.495807                 0.0         False
2   -8173.499349   -8173.501953  1865.914795 -8173.499349    0.001250 -8173.501953    0.00000    0.002604        0.000000       8.0         -8440.495807                 1.0          True
3   -8173.499349   -8173.499349  1965.914795 -8173.499349    0.001250 -8173.499349    0.00000    0.000000        0.000000       9.0         -8440.495807                 0.0         False
4   -7905.501016   -8173.499349  1965.914795 -7905.501016  267.998333 -8173.499349    0.00000  267.998333      167.998333       9.0         -8440.495807                 1.0          True
5   -7573.498099   -8073.499268  1965.914795 -7573.498099  600.001250 -8073.499268  200.00125  299.999919      200.000000       2.0         -8440.495807                 1.0         False
6   -7573.498099   -7907.503516  1965.914795 -7573.498099    0.010000 -7907.503516  200.00125  134.004167      100.000000       3.0         -7773.499349                 0.0         False
7   -7573.498099   -7773.500599  1965.914795 -7573.498099  134.002917 -7773.500599  200.00125    0.001250        0.000000       3.0         -7773.499349                 0.0         False
8   -7305.498516   -7773.498291  1965.914795 -7305.498516  268.000833 -7773.498291  200.00125  267.998525      167.999583       1.0         -7773.499349                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 16:49:14]  --------------------------------------------------------------------------------
[09/27 16:49:14]  Iteration: 277 (82 solution, 194 counterexamples)
[09/27 16:50:59]  Generator returned sat in 98.815130 secs.
[09/27 16:51:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:51:01]  Improved gap from 0.0 to 0
[09/27 16:51:02]  Improved number of small numbers from 66 to 114 out of a max of 114
[09/27 16:51:02]  Verifer returned sat in 2.000258 secs.
[09/27 16:51:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8993.627441   -9194.652100  1865.914795 -8993.627441    0.024414 -9194.652100        0.0  201.024658      200.000000       7.0         -9194.652100                -1.0            -1
1   -8993.627441   -9094.701416  1865.914795 -8993.627441    0.024414 -9094.701416        0.0  101.073975      100.000000       7.0         -9194.652100                 0.0         False
2   -8993.627441   -8993.652100  1865.914795 -8993.627441    0.024414 -8993.652100        0.0    0.024658        0.000000       8.0         -9194.652100                 0.0         False
3   -8993.627441   -8993.627441  1965.914795 -8993.627441    0.024414 -8993.627441        0.0    0.000000        0.000000       9.0         -9194.652100                 0.0         False
4   -8793.602783   -8993.627441  1965.914795 -8793.602783  200.024658 -8993.627441        0.0  200.024658      100.024658       9.0         -9194.652100                 1.0          True
5   -8793.602783   -8893.627441  1965.914795 -8793.602783  100.073975 -8893.627441        0.0  100.024658        0.024658       2.0         -8793.602783                 1.0         False
6   -8793.578125   -8793.578125  2065.865234 -8793.578125  100.049316 -8793.578125        0.0    0.000000       -0.000244       1.0         -8793.578125                 0.0         False
7   -8643.528809   -8793.553223  2065.865234 -8643.528809  150.049316 -8793.553223        0.0  150.024414       50.049072       1.0         -8793.578125                 0.0         False
8   -8618.491455   -8673.651855  2065.865234 -8618.491455  175.061768 -8673.651855        0.0   55.160400      -24.913574       2.0         -8793.578125                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:51:03]  --------------------------------------------------------------------------------
[09/27 16:51:03]  Iteration: 278 (82 solution, 195 counterexamples)
[09/27 16:51:50]  Generator returned sat in 40.754180 secs.
[09/27 16:51:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:51:51]  Improved gap from 0.0 to 0
[09/27 16:51:52]  Improved number of small numbers from 41 to 49 out of a max of 114
[09/27 16:51:52]  Verifer returned sat in 1.903410 secs.
[09/27 16:51:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9586.072876   -9853.046848  2458.360229 -9586.072876    0.024414 -9853.046848    0.000000  266.973972      200.000000       5.0         -9853.046848                -1.0            -1
1   -9586.072876   -9786.072876  2458.360229 -9586.072876    0.024658 -9786.072876    0.000000  200.000000      100.000000       6.0         -9853.046848                 0.0         False
2   -9586.072876   -9586.122070  2458.360229 -9586.072876    0.024658 -9586.122070    0.000000    0.049194        0.000000       7.0         -9853.046848                 0.0         False
3   -9586.072876   -9586.072876  2558.360229 -9586.072876    0.024658 -9586.072876    0.000000    0.000000        0.000000       8.0         -9853.046848                 0.0         False
4   -9320.061917   -9586.072876  2558.360229 -9320.061917  266.010959 -9586.072876    0.000000  266.010959      166.010959       8.0         -9853.046848                 1.0          True
5   -8988.056437   -9386.105754  2558.360229 -8988.056437  598.016439 -9386.105754  198.016439  200.032878      200.000000       2.0         -9853.046848                 1.0         False
6   -8888.081095   -9320.037354  2558.360229 -8888.081095  300.008219 -9320.037354  198.016439  233.939819      199.975342       2.0         -9086.097534                 0.0         False
7   -8821.012695   -9186.072876  2558.360229 -8821.012695  301.008219 -9186.072876  198.016439  167.043742      167.043742       3.0         -9086.097534                 0.0         False
8   -8686.048218   -9186.072754  2558.360229 -8686.048218  302.008219 -9186.072754  200.024658  299.999878      200.000000       3.0         -9086.097534                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819301/4096, 
.[0m
[09/27 16:51:53]  --------------------------------------------------------------------------------
[09/27 16:51:53]  Iteration: 279 (82 solution, 196 counterexamples)
[09/27 16:52:27]  Generator returned sat in 27.466979 secs.
[09/27 16:52:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:52:29]  Improved number of small numbers from 72 to 91 out of a max of 113
[09/27 16:52:29]  Verifer returned sat in 0.844299 secs.
[09/27 16:52:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9688.105713   -9788.056396  2360.34375 -9688.105713  367.349609 -9788.056396    0.000000   99.950684       -0.049316       2.0         -9788.056396                -1.0            -1
1   -9420.756104   -9688.056396  2360.34375 -9420.756104  367.300293 -9688.056396    0.000000  267.300293      167.300293       1.0         -9420.756104                 0.0         False
2   -9320.804932   -9488.056396  2360.34375 -9320.804932  367.251465 -9488.056396    0.000000  167.251465      167.251465       2.0         -9320.804932                 0.0         False
3   -9320.804932   -9488.056396  2360.34375 -9320.804932  149.122986 -9488.056396    0.000000  167.251465       67.251465       2.0         -9320.804932                 0.0         False
4   -9320.804932   -9320.805054  2360.34375 -9320.804932  150.122986 -9320.805054    0.000000    0.000122      -32.748535       3.0         -9320.804932                 0.0         False
5   -8988.056396   -9221.854248  2360.34375 -8988.056396  332.748657 -9221.854248    0.000000  233.797852      200.000000       1.0         -9320.804932                 1.0         False
6   -8888.105591   -9188.056396  2360.34375 -8888.105591  333.748657 -9188.056396    0.000000  299.950806      199.950806       2.0         -9320.804932                 0.0         False
7   -8853.307739   -8988.105591  2360.34375 -8853.307739  334.748657 -8988.105591    0.000000  134.797852      134.748657       3.0         -9320.804932                 0.0         False
8   -8488.007202   -8988.056396  2360.34375 -8488.007202  500.098389 -8988.056396  200.049194  300.000000      200.000000       4.0         -9320.804932                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638803/8192, 
.[0m
[09/27 16:52:29]  --------------------------------------------------------------------------------
[09/27 16:52:29]  Iteration: 280 (82 solution, 197 counterexamples)
[09/27 16:53:15]  Generator returned sat in 39.140489 secs.
[09/27 16:53:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:53:19]  Improved gap from 0.0 to 0
[09/27 16:53:20]  Improved number of small numbers from 68 to 74 out of a max of 114
[09/27 16:53:20]  Verifer returned sat in 4.450186 secs.
[09/27 16:53:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8788.076396   -8988.076396  2260.34375 -8788.076396    0.001465 -8988.076396    0.00000  200.000000      200.000000       6.0         -8988.076396                -1.0            -1
1   -8788.076396   -8987.080146  2260.34375 -8788.076396  199.999756 -8987.080146    0.00000  199.003750      100.000000       6.0         -8988.076396                 0.0         False
2   -8788.076396   -8834.076416  2260.34375 -8788.076396  199.003750 -8834.076416    0.00000   46.000020        0.000000       6.0         -8788.076396                 0.0         False
3   -8788.076396   -8788.076396  2360.34375 -8788.076396   45.998889 -8788.076396    0.00000    0.000000        0.000000       7.0         -8788.076396                 0.0         False
4   -8520.078063   -8788.076396  2360.34375 -8520.078063  267.998333 -8788.076396    0.00000  267.998333      167.998333       7.0         -8788.076396                 1.0         False
5   -8188.075146   -8688.076172  2360.34375 -8188.075146  600.001250 -8688.076172  200.00125  299.999775      200.000000       2.0         -8788.076396                 1.0         False
6   -8188.075146   -8522.080563  2360.34375 -8188.075146    0.010000 -8522.080563  200.00125  134.004167      100.000000       3.0         -8388.076396                 0.0         False
7   -8188.075146   -8388.077646  2360.34375 -8188.075146  134.002917 -8388.077646  200.00125    0.001250        0.000000       3.0         -8388.076396                 0.0         False
8   -7920.075563   -8388.075195  2360.34375 -7920.075563  268.000833 -8388.075195  200.00125  267.998382      167.999583       1.0         -8388.076396                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 16:53:21]  --------------------------------------------------------------------------------
[09/27 16:53:21]  Iteration: 281 (82 solution, 198 counterexamples)
[09/27 16:54:30]  Generator returned sat in 62.987052 secs.
[09/27 16:54:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:54:32]  Improved gap from 0.0 to 0
[09/27 16:54:32]  Improved number of small numbers from 47 to 55 out of a max of 114
[09/27 16:54:32]  Verifer returned sat in 1.413619 secs.
[09/27 16:54:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8788.089683   -8988.089683  2260.357036 -8788.089683    0.024658 -8988.089683    0.000000  200.000000      200.000000       9.0         -8988.089683                -1.0            -1
1   -8788.089683   -8988.089683  2260.357036 -8788.089683    0.049072 -8988.089683    0.000000  200.000000      100.000000       9.0         -8988.089683                 1.0         False
2   -8788.089683   -8831.677002  2260.357036 -8788.089683    0.024658 -8831.677002    0.000000   43.587319        0.000000       8.0         -8788.089683                 1.0         False
3   -8788.089683   -8788.089683  2360.357036 -8788.089683   43.562826 -8788.089683    0.000000    0.000000        0.000000       9.0         -8788.089683                 0.0         False
4   -8522.745444   -8788.089683  2360.357036 -8522.745444  265.344238 -8788.089683    0.000000  265.344238      165.344238       9.0         -8788.089683                 1.0         False
5   -8190.073325   -8588.097861  2360.357036 -8190.073325  598.016357 -8588.097861  198.016357  200.008179      200.000000       2.0         -8788.089683                 1.0         False
6   -8090.073325   -8489.122397  2360.357036 -8090.073325  300.008179 -8489.122397  198.016357  201.032715      200.000000       2.0         -8288.089683                 0.0         False
7   -7990.097861   -8388.089683  2360.357036 -7990.097861  301.008179 -8388.089683  198.016357  199.975464      199.975464       3.0         -8288.089683                 0.0         False
8   -7888.065146   -8388.065186  2360.357036 -7888.065146  302.008179 -8388.065186  200.024536  299.975503      200.000000       3.0         -8288.089683                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638601/8192, 
.[0m
[09/27 16:54:33]  --------------------------------------------------------------------------------
[09/27 16:54:33]  Iteration: 282 (82 solution, 199 counterexamples)
[09/27 16:55:47]  Generator returned sat in 67.051702 secs.
[09/27 16:55:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:55:48]  Improved gap from 0.0 to 0
[09/27 16:55:48]  Improved number of small numbers from 46 to 114 out of a max of 114
[09/27 16:55:48]  Verifer returned sat in 1.006993 secs.
[09/27 16:55:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8788.089600   -9026.015869  2260.356934 -8788.089600    0.024414 -9026.015869        0.0  237.926270      200.000000       7.0         -9026.015869                -1.0            -1
1   -8788.089600   -8900.064941  2260.356934 -8788.089600  111.950684 -8900.064941        0.0  111.975342      100.000000       7.0         -9026.015869                 0.0         False
2   -8788.089600   -8788.138672  2260.356934 -8788.089600    0.048828 -8788.138672        0.0    0.049072        0.000000       8.0         -8788.089600                 0.0         False
3   -8788.089600   -8788.089600  2360.356934 -8788.089600    0.024414 -8788.089600        0.0    0.000000        0.000000       9.0         -8788.089600                 0.0         False
4   -8668.114258   -8788.089600  2360.356934 -8668.114258  119.975342 -8788.089600        0.0  119.975342       19.975342       9.0         -8788.089600                 1.0         False
5   -8668.114258   -8668.114258  2440.381348 -8668.114258  116.975342 -8668.114258        0.0    0.000000       -0.000244       2.0         -8668.114258                 1.0         False
6   -8550.138916   -8587.114014  2440.381348 -8550.138916  117.975342 -8587.114014        0.0   36.975098       17.975098       1.0         -8668.114258                 0.0         False
7   -8468.138672   -8468.163086  2440.381348 -8468.138672  118.975342 -8468.163086        0.0    0.024414       -0.024658       1.0         -8668.114258                 0.0         False
8   -8348.187744   -8468.114014  2440.381348 -8348.187744  119.975342 -8468.114014        0.0  119.926270       19.926270       1.0         -8668.114258                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:55:49]  --------------------------------------------------------------------------------
[09/27 16:55:49]  Iteration: 283 (82 solution, 200 counterexamples)
[09/27 16:56:52]  Generator returned sat in 55.884569 secs.
[09/27 16:56:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:56:53]  Improved gap from 0.0 to 45.3125
[09/27 16:56:54]  Improved number of small numbers from 54 to 114 out of a max of 114
[09/27 16:56:54]  Verifer returned sat in 1.219755 secs.
[09/27 16:56:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8906.051758   -9014.440186  2286.707275 -8906.051758    0.024658 -9014.440186        0.0  108.388428      108.388184       5.0         -9014.440186                -1.0            -1
1   -8906.051758   -8916.027100  2286.707275 -8906.051758    0.048828 -8916.027100        0.0    9.975342        8.388184       5.0         -9014.440186                 1.0         False
2   -8906.051758   -8906.051758  2333.006592 -8906.051758    0.024658 -8906.051758        0.0    0.000000      -45.312500       3.0         -8906.051758                 1.0          True
3   -8788.065186   -8788.089600  2333.006592 -8788.065186  117.986572 -8788.089600        0.0    0.024414      -27.325928       1.0         -8906.051758                 1.0         False
4   -8560.739014   -8741.777100  2333.006592 -8560.739014  227.350586 -8741.777100        0.0  181.038086      100.000244       1.0         -8906.051758                 0.0         False
5   -8560.739014   -8649.388672  2333.006592 -8560.739014  175.250000 -8649.388672        0.0   88.649658        0.000244       2.0         -8560.739014                 0.0         False
6   -8560.739014   -8560.739014  2387.693848 -8560.739014   88.625000 -8560.739014        0.0    0.000000      -45.312500       3.0         -8560.739014                 1.0         False
7   -8515.426514   -8515.426514  2441.381348 -8515.426514   45.312500 -8515.426514        0.0    0.000000      -46.312500       1.0         -8515.426514                 1.0         False
8   -8288.075928   -8469.114014  2441.381348 -8288.075928  227.350586 -8469.114014        0.0  181.038086       81.038086       1.0         -8515.426514                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 16:56:54]  --------------------------------------------------------------------------------
[09/27 16:56:54]  Iteration: 284 (82 solution, 201 counterexamples)
[09/27 16:58:19]  Generator returned sat in 77.419044 secs.
[09/27 16:58:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 16:58:22]  Improved gap from 0.0 to 0
[09/27 16:58:23]  Improved number of small numbers from 106 to 108 out of a max of 114
[09/27 16:58:23]  Verifer returned sat in 3.133209 secs.
[09/27 16:58:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8814.440186   -9014.440186  2333.006348 -8814.440186    0.048584 -9014.440186    0.000000  200.000000      200.000000       7.0         -9014.440186                -1.0            -1
1   -8814.440186   -9014.440186  2333.006348 -8814.440186    0.048584 -9014.440186    0.000000  200.000000      100.000000       7.0         -9014.440186                 0.0         False
2   -8814.440186   -8860.066406  2333.006348 -8814.440186    0.048584 -8860.066406    0.000000   45.626221        0.000000       8.0         -9014.440186                 0.0         False
3   -8814.440186   -8814.440186  2433.006348 -8814.440186   45.577257 -8814.440186    0.000000    0.000000        0.000000       9.0         -9014.440186                 0.0         False
4   -8547.074300   -8814.440186  2433.006348 -8547.074300  267.365885 -8814.440186    0.000000  267.365885      167.365885       9.0         -9014.440186                 1.0          True
5   -8214.391357   -8714.440186  2433.006348 -8214.391357  600.048828 -8714.440186  200.048828  300.000000      200.000000       2.0         -9014.440186                 1.0         False
6   -8214.391357   -8545.781331  2433.006348 -8214.391357    1.000000 -8545.781331  200.048828  131.341146      100.000000       2.0         -8414.440186                 0.0         False
7   -8210.903076   -8414.440186  2433.006348 -8210.903076  134.829427 -8414.440186  200.048828    3.488281        3.488281       3.0         -8414.440186                 0.0         False
8   -7946.976644   -8414.391602  2433.006348 -7946.976644  267.414714 -8414.391602  200.048828  267.366130      167.414714       2.0         -8414.440186                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=102425/512, 
.[0m
[09/27 16:58:23]  --------------------------------------------------------------------------------
[09/27 16:58:23]  Iteration: 285 (82 solution, 202 counterexamples)
[09/27 16:59:58]  Generator returned sat in 88.560630 secs.
[09/27 16:59:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 16:59:59]  Improved gap from 66.61666666666666 to 100
[09/27 17:00:00]  Improved number of small numbers from 57 to 72 out of a max of 114
[09/27 17:00:00]  Verifer returned sat in 1.393696 secs.
[09/27 17:00:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8414.470459   -8714.470215  2433.006348 -8414.470459  200.000732 -8714.470215    0.000000  299.999756      199.999905       2.0         -8714.470215                -1.0            -1
1   -8414.470459   -8614.470364  2433.006348 -8414.470459    0.000488 -8614.470364    0.000000  199.999905       99.999905       2.0         -8414.470459                 0.0         False
2   -8214.470007   -8514.470215  2433.006348 -8214.470007  400.000357 -8514.470215    0.000357  299.999851      200.000000       3.0         -8414.470459                 0.0         False
3   -8214.470007   -8314.470364  2433.006348 -8214.470007  298.999643 -8314.470364    0.000357  100.000000      100.000000       2.0         -8214.470364                 1.0         False
4   -8014.470364   -8214.470721  2433.006348 -8014.470364  299.999643 -8214.470721    0.000357  200.000000      199.999643       3.0         -8214.470364                 0.0         False
5   -7714.470900   -8214.470215  2433.006348 -7714.470900  499.999464 -8214.470215  199.999464  299.999851      200.000000       2.0         -8214.470364                 1.0         False
6   -7714.470900   -8014.488221  2433.006348 -7714.470900    0.010000 -8014.488221  199.999464  100.017857      100.000000       3.0         -7914.470364                 0.0         False
7   -7664.487686   -7914.470364  2433.006348 -7664.487686  150.001071 -7914.470364  199.999464   49.983214       49.983214       3.0         -7914.470364                 1.0         False
8   -7414.469650   -7864.486816  2433.006348 -7414.469650  300.001250 -7864.486816  200.000714  250.016452      200.000000       1.0         -7914.470364                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=560001/2800, 
.[0m
[09/27 17:00:01]  --------------------------------------------------------------------------------
[09/27 17:00:01]  Iteration: 286 (82 solution, 203 counterexamples)
[09/27 17:01:05]  Generator returned sat in 57.135782 secs.
[09/27 17:01:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:01:07]  Improved gap from 0.0 to 57.8125
[09/27 17:01:07]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 17:01:07]  Verifer returned sat in 1.591110 secs.
[09/27 17:01:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8116.908936   -8216.567139  2433.006348 -8116.908936    0.048584 -8216.567139        0.0   99.658203       99.658203       9.0         -8216.567139                -1.0            -1
1   -8015.664795   -8116.860107  2433.006348 -8015.664795  200.902344 -8116.860107        0.0  101.195312      100.902344       1.0         -8216.567139                 1.0         False
2   -8015.664795   -8016.567383  2433.006348 -8015.664795  101.146484 -8016.567383        0.0    0.902588        0.902344       2.0         -8015.664795                 0.0         False
3   -7915.469727   -7918.469727  2433.006348 -7915.469727  101.097656 -7918.469727        0.0    3.000000        1.097412       1.0         -7915.469727                 1.0         False
4   -7816.372070   -7916.567139  2433.006348 -7816.372070  102.097656 -7916.567139        0.0  100.195068        0.195068       2.0         -7915.469727                 0.0         False
5   -7816.372070   -7816.372070  2474.998535 -7816.372070  100.146484 -7816.372070        0.0    0.000000      -57.812744       2.0         -7816.372070                 1.0         False
6   -7716.274414   -7758.559326  2474.998535 -7716.274414  100.097656 -7758.559326        0.0   42.284912      -57.715088       1.0         -7716.274414                 1.0         False
7   -7657.461670   -7657.461670  2516.088379 -7657.461670  101.097656 -7657.461670        0.0    0.000000      -57.812500       1.0         -7716.274414                 0.0         False
8   -7555.364014   -7599.649170  2516.088379 -7555.364014  102.097656 -7599.649170        0.0   44.285156      -55.714844       1.0         -7716.274414                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:01:08]  --------------------------------------------------------------------------------
[09/27 17:01:08]  Iteration: 287 (82 solution, 204 counterexamples)
[09/27 17:02:03]  Generator returned sat in 48.401200 secs.
[09/27 17:02:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:02:04]  Improved gap from 0.0 to 0
[09/27 17:02:05]  Improved number of small numbers from 64 to 68 out of a max of 114
[09/27 17:02:05]  Verifer returned sat in 1.674367 secs.
[09/27 17:02:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -8416.37332   -8692.373945  2832.812529  -8416.37332    0.048584 -8692.373945    0.00000  276.000625        200.0000       8.0         -8692.373945                -1.0            -1
1    -8416.37332   -8604.870820  2832.812529  -8416.37332  276.000488 -8604.870820    0.00000  188.497500        100.0000       6.0         -8692.373945                 1.0         False
2    -8416.37332   -8416.375977  2832.812529  -8416.37332    0.001465 -8416.375977    0.00000    0.002656          0.0000       6.0         -8416.373320                 0.0         False
3    -8416.37332   -8416.373320  2932.812529  -8416.37332    0.001250 -8416.373320    0.00000    0.000000          0.0000       7.0         -8416.373320                 0.0         False
4    -8141.37082   -8416.373320  2932.812529  -8141.37082  275.002500 -8416.373320    0.00000  275.002500        175.0025       7.0         -8416.373320                 1.0         False
5    -7816.37207   -8216.373535  2932.812529  -7816.37207  600.001250 -8216.373535  200.00125  200.000215        200.0000       2.0         -8416.373320                 1.0         False
6    -7816.37207   -8116.373320  2932.812529  -7816.37207    0.010000 -8116.373320  200.00125  100.000000        100.0000       2.0         -8016.373320                 0.0         False
7    -7766.36707   -8016.373320  2932.812529  -7766.36707  150.005000 -8016.373320  200.00125   50.005000         50.0050       3.0         -8016.373320                 0.0         False
8    -7541.36957   -8016.373320  2932.812529  -7541.36957  275.002500 -8016.373320  200.00125  275.002500        175.0025       3.0         -8016.373320                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 17:02:06]  --------------------------------------------------------------------------------
[09/27 17:02:06]  Iteration: 288 (82 solution, 205 counterexamples)
[09/27 17:04:02]  Generator returned sat in 110.061834 secs.
[09/27 17:04:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:04:03]  Improved gap from 0.0 to 0
[09/27 17:04:04]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 17:04:04]  Verifer returned sat in 0.601757 secs.
[09/27 17:04:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8416.373291   -8716.373291  2832.812500 -8416.373291    0.024170 -8716.373291        0.0  300.000000      200.000000       9.0         -8716.373291                -1.0            -1
1   -8416.373291   -8616.373291  2832.812500 -8416.373291    0.024170 -8616.373291        0.0  200.000000      100.000000       4.0         -8716.373291                 1.0         False
2   -8416.373291   -8516.373291  2832.812500 -8416.373291    0.048828 -8516.373291        0.0  100.000000        0.000000       4.0         -8716.373291                 0.0         False
3   -8416.373291   -8416.373291  2932.812500 -8416.373291    0.024414 -8416.373291        0.0    0.000000        0.000000       5.0         -8416.373291                 0.0         False
4   -8266.373291   -8416.373291  2932.812500 -8266.373291  150.000000 -8416.373291        0.0  150.000000       50.000000       5.0         -8416.373291                 1.0         False
5   -8266.373291   -8266.397949  2932.812500 -8266.373291  100.000000 -8266.397949        0.0    0.024658      -50.000000       2.0         -8266.373291                 1.0         False
6   -8165.397949   -8198.422363  2932.812500 -8165.397949  101.000000 -8198.422363        0.0   33.024414      -49.024658       1.0         -8266.373291                 0.0         False
7   -8096.422363   -8096.422363  3012.861328 -8096.422363  102.000000 -8096.422363        0.0    0.000000       -0.000244       1.0         -8266.373291                 0.0         False
8   -7993.422363   -8096.397705  3012.861328 -7993.422363  103.000000 -8096.397705        0.0  102.975342        2.999756       1.0         -8266.373291                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:04:04]  --------------------------------------------------------------------------------
[09/27 17:04:04]  Iteration: 289 (82 solution, 206 counterexamples)
[09/27 17:05:16]  Generator returned sat in 65.309053 secs.
[09/27 17:05:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:05:18]  Improved gap from 0.0 to 18.75
[09/27 17:05:18]  Improved number of small numbers from 106 to 112 out of a max of 114
[09/27 17:05:18]  Verifer returned sat in 1.636321 secs.
[09/27 17:05:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8416.373291   -8613.285400  2731.517578 -8416.373291    0.048584 -8613.285400        0.0  196.912109       98.705078       1.0         -8613.285400                -1.0            -1
1   -8416.373291   -8416.373291  2731.517578 -8416.373291    0.048828 -8416.373291        0.0    0.000000       -1.294922       2.0         -8613.285400                 0.0         False
2   -8149.591553   -8315.078369  2731.517578 -8149.591553  266.781738 -8315.078369        0.0  165.486816      165.486816       1.0         -8613.285400                 1.0          True
3   -8015.078369   -8215.179932  2731.517578 -8015.078369  300.000000 -8215.179932        0.0  200.101562      200.000000       2.0         -8613.285400                 0.0         False
4   -8015.078369   -8149.542725  2731.517578 -8015.078369  200.052734 -8149.542725        0.0  134.464355      100.000000       2.0         -8015.078369                 1.0          True
5   -8015.078369   -8048.345296  2731.517578 -8015.078369  134.415283 -8048.345296        0.0   33.266927        0.000000       3.0         -8015.078369                 1.0         False
6   -7913.978760   -8015.078369  2731.517578 -7913.978760  134.366536 -8015.078369        0.0  101.099609        1.099609       4.0         -7913.978760                 1.0         False
7   -7913.978760   -7913.978760  2811.667969 -7913.978760  101.050781 -7913.978760        0.0    0.000000      -18.750000       2.0         -7913.978760                 1.0         False
8   -7795.196777   -7895.228760  2811.667969 -7795.196777  118.781982 -7895.228760        0.0  100.031982        0.031982       1.0         -7913.978760                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:05:19]  --------------------------------------------------------------------------------
[09/27 17:05:19]  Iteration: 290 (82 solution, 207 counterexamples)
[09/27 17:06:47]  Generator returned sat in 81.043609 secs.
[09/27 17:06:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:06:48]  Improved gap from 3.5516666666666667 to 100
[09/27 17:06:49]  Improved number of small numbers from 68 to 72 out of a max of 114
[09/27 17:06:49]  Verifer returned sat in 1.066550 secs.
[09/27 17:06:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8705.351318   -8905.350296  2811.667969 -8705.351318  399.993652 -8905.350296     0.0000  199.998978      199.998978       1.0         -8905.350296                -1.0            -1
1   -8505.357796   -8905.350296  2811.667969 -8505.357796  399.992500 -8905.350296    99.9925  300.000000      200.000000       1.0         -8605.350296                 0.0         False
2   -8405.366546   -8705.350296  2811.667969 -8405.366546  399.991250 -8705.350296    99.9925  199.991250      199.991250       2.0         -8505.359046                 0.0         False
3   -8405.366546   -8673.350296  2811.667969 -8405.366546    0.504395 -8673.350296    99.9925  167.991250       99.991250       3.0         -8505.359046                 1.0         False
4   -8405.366546   -8505.360296  2811.667969 -8405.366546    0.010000 -8505.360296    99.9925    0.001250       -0.008750       3.0         -8505.359046                 1.0         False
5   -8405.357796   -8505.350296  2811.667969 -8405.357796    0.010000 -8505.350296    99.9925    0.000000     -100.000000       1.0         -8505.359046                 1.0         False
6   -8304.337796   -8405.350296  2811.667969 -8304.337796  101.020000 -8405.350296    99.9925    1.020000      -98.980000       1.0         -8505.359046                 0.0         False
7   -7968.317796   -8305.350296  2811.667969 -7968.317796  337.040000 -8305.350296    99.9925  237.040000      137.040000       1.0         -8505.359046                 0.0         False
8   -7430.272796   -8105.350342  2811.667969 -7430.272796  775.085000 -8105.350342   475.0775  200.000046      200.000000       2.0         -8505.359046                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=75017/200, 
.[0m
[09/27 17:06:49]  --------------------------------------------------------------------------------
[09/27 17:06:49]  Iteration: 291 (82 solution, 208 counterexamples)
[09/27 17:07:49]  Generator returned sat in 53.118328 secs.
[09/27 17:07:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:07:51]  Improved gap from 0.0 to 0
[09/27 17:07:51]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/27 17:07:51]  Verifer returned sat in 0.637114 secs.
[09/27 17:07:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8906.382324   -9106.406738  3012.699951 -8906.382324    0.024170 -9106.406738    0.000000  200.024414      200.000000       5.0         -9106.406738                -1.0            -1
1   -8906.382324   -9106.382324  3012.699951 -8906.382324    0.048584 -9106.382324    0.000000  200.000000      100.000000       5.0         -9106.406738                 0.0         False
2   -8906.382324   -9006.382324  3012.699951 -8906.382324    0.048828 -9006.382324    0.000000  100.000000        0.000000       6.0         -9106.406738                 0.0         False
3   -8906.382324   -8906.382324  3112.699951 -8906.382324    0.024414 -8906.382324    0.000000    0.000000        0.000000       7.0         -8906.382324                 0.0         False
4   -8705.309082   -8906.382324  3112.699951 -8705.309082  201.073242 -8906.382324    0.000000  201.073242      101.073242       7.0         -8906.382324                 1.0         False
5   -8303.235840   -8708.955566  3112.699951 -8303.235840  603.146484 -8708.955566  203.146484  202.573242      200.000000       2.0         -8906.382324                 1.0         False
6   -8203.235840   -8609.979736  3112.699951 -8203.235840  302.573242 -8609.979736  203.146484  203.597412      200.000000       2.0         -8406.382324                 0.0         False
7   -8103.260010   -8606.382080  3112.699951 -8103.260010  303.573242 -8606.382080  203.146484  299.975586      199.975830       3.0         -8406.382324                 0.0         False
8   -8098.662354   -8506.357666  3112.699951 -8098.662354  304.573242 -8506.357666  203.146484  204.548828      104.573486       3.0         -8406.382324                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=104011/512, 
.[0m
[09/27 17:07:51]  --------------------------------------------------------------------------------
[09/27 17:07:51]  Iteration: 292 (82 solution, 209 counterexamples)
[09/27 17:08:33]  Generator returned sat in 34.780182 secs.
[09/27 17:08:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:08:35]  Improved gap from 0.0 to 0
[09/27 17:08:35]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 17:08:35]  Verifer returned sat in 1.488907 secs.
[09/27 17:08:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8955.531006   -9155.531006  3409.773193 -8955.531006    0.024414 -9155.531006    0.000000  200.000000      200.000000       8.0         -9155.531006                -1.0            -1
1   -8955.531006   -9155.531006  3409.773193 -8955.531006    0.024414 -9155.531006    0.000000  200.000000      100.000000       8.0         -9155.531006                 1.0         False
2   -8955.531006   -8955.555420  3409.773193 -8955.531006    0.048828 -8955.555420    0.000000    0.024414        0.000000       9.0         -9155.531006                 1.0         False
3   -8955.531006   -8955.531006  3509.773193 -8955.531006    0.024414 -8955.531006    0.000000    0.000000        0.000000       8.0         -8955.531006                 1.0          True
4   -8754.482178   -8955.531006  3509.773193 -8754.482178  201.048828 -8955.531006    0.000000  201.048828      101.048828       8.0         -8955.531006                 1.0         False
5   -8352.433350   -8759.152832  3509.773193 -8352.433350  603.097656 -8759.152832  203.097656  203.621826      200.000000       2.0         -8955.531006                 1.0         False
6   -8253.506348   -8754.457520  3509.773193 -8253.506348  302.548828 -8754.457520  203.097656  297.853516      198.927002       2.0         -8456.604004                 0.0         False
7   -8247.811035   -8555.531006  3509.773193 -8247.811035  303.548828 -8555.531006  203.097656  104.622314      104.622314       3.0         -8456.604004                 0.0         False
8   -8047.884521   -8456.579834  3509.773193 -8047.884521  304.548828 -8456.579834  207.646484  201.048828      200.000000       2.0         -8456.604004                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=106315/512, 
.[0m
[09/27 17:08:36]  --------------------------------------------------------------------------------
[09/27 17:08:36]  Iteration: 293 (82 solution, 210 counterexamples)
[09/27 17:09:26]  Generator returned sat in 43.563513 secs.
[09/27 17:09:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:09:28]  Improved gap from 0.0 to 0
[09/27 17:09:28]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 17:09:28]  Verifer returned sat in 1.392406 secs.
[09/27 17:09:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8565.257812   -8765.257812  3409.772949 -8565.257812    0.024170 -8765.257812    0.000000  200.000000      200.000000       7.0         -8765.257812                -1.0            -1
1   -8565.257812   -8765.257812  3409.772949 -8565.257812    0.024170 -8765.257812    0.000000  200.000000      100.000000       7.0         -8765.257812                 0.0         False
2   -8565.257812   -8665.257812  3409.772949 -8565.257812    0.024170 -8665.257812    0.000000  100.000000        0.000000       8.0         -8765.257812                 0.0         False
3   -8565.257812   -8565.257812  3509.772949 -8565.257812    0.024414 -8565.257812    0.000000    0.000000        0.000000       9.0         -8765.257812                 0.0         False
4   -8364.208984   -8565.257812  3509.772949 -8364.208984  201.048828 -8565.257812    0.000000  201.048828      101.048828       9.0         -8765.257812                 1.0          True
5   -7962.160156   -8365.806641  3509.772949 -7962.160156  603.097656 -8365.806641  203.097656  200.548828      200.000000       2.0         -8765.257812                 1.0         False
6   -7862.160156   -8266.831299  3509.772949 -7862.160156  300.548828 -8266.831299  203.097656  201.573486      200.000000       2.0         -8065.257812                 0.0         False
7   -7762.184814   -8165.257812  3509.772949 -7762.184814  301.548828 -8165.257812  203.097656  199.975342      199.975342       3.0         -8065.257812                 0.0         False
8   -7659.611328   -8165.257812  3509.772949 -7659.611328  302.548828 -8165.257812  205.646484  300.000000      200.000000       3.0         -8065.257812                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=105291/512, 
.[0m
[09/27 17:09:29]  --------------------------------------------------------------------------------
[09/27 17:09:29]  Iteration: 294 (82 solution, 211 counterexamples)
[09/27 17:09:56]  Generator returned sat in 21.162239 secs.
[09/27 17:09:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:09:58]  Improved gap from 0.0 to 0
[09/27 17:09:59]  Improved number of small numbers from 74 to 80 out of a max of 114
[09/27 17:09:59]  Verifer returned sat in 2.008514 secs.
[09/27 17:09:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9955.927227  -10203.719870  3409.772949 -9955.927227    0.024170 -10203.719870    0.000000  247.792643      200.000000       7.0        -10203.719870                -1.0            -1
1   -9955.927227  -10055.927227  3409.772949 -9955.927227    0.024170 -10055.927227    0.000000  100.000000      100.000000       7.0        -10203.719870                 0.0         False
2   -9955.927227  -10055.902832  3409.772949 -9955.927227   99.999756 -10055.902832    0.000000   99.975605        0.000000       8.0        -10203.719870                 0.0         False
3   -9955.927227   -9955.927227  3509.772949 -9955.927227    0.024414  -9955.927227    0.000000    0.000000        0.000000       9.0         -9955.927227                 0.0         False
4   -9707.085755   -9955.927227  3509.772949 -9707.085755  248.841471  -9955.927227    0.000000  248.841471      148.841471       9.0         -9955.927227                 1.0         False
5   -9357.244284   -9855.927002  3509.772949 -9357.244284  598.682943  -9855.927002  198.682943  299.999775      200.000000       2.0         -9955.927227                 1.0         False
6   -9357.244284   -9656.268799  3509.772949 -9357.244284  299.341471  -9656.268799  198.682943  100.341572      100.000000       2.0         -9555.927227                 0.0         False
7   -9157.244385   -9555.927227  3509.772949 -9157.244385  300.341471  -9555.927227  198.682943  199.999899      199.999899       3.0         -9555.927227                 0.0         False
8   -9055.902813   -9555.902813  3509.772949 -9055.902813  301.341471  -9555.902813  200.024414  299.975586      200.000000       2.0         -9555.927227                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204825/1024, 
.[0m
[09/27 17:10:00]  --------------------------------------------------------------------------------
[09/27 17:10:00]  Iteration: 295 (82 solution, 212 counterexamples)
[09/27 17:10:28]  Generator returned sat in 21.751357 secs.
[09/27 17:10:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:10:30]  Improved gap from 0.0 to 0
[09/27 17:10:30]  Improved number of small numbers from 32 to 114 out of a max of 114
[09/27 17:10:30]  Verifer returned sat in 1.095528 secs.
[09/27 17:10:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10260.976074  -10460.976074  3714.821777 -10260.976074    0.024414 -10460.976074    0.000000  200.000000      200.000000       9.0        -10460.976074                -1.0            -1
1  -10260.976074  -10457.902832  3714.821777 -10260.976074  199.999756 -10457.902832    0.000000  196.926758      100.000000       8.0        -10460.976074                 1.0         False
2  -10260.976074  -10261.000488  3714.821777 -10260.976074  196.926758 -10261.000488    0.000000    0.024414        0.000000       8.0        -10260.976074                 0.0         False
3  -10260.976074  -10260.976074  3814.821777 -10260.976074    0.024414 -10260.976074    0.000000    0.000000        0.000000       9.0        -10260.976074                 0.0         False
4  -10059.927246  -10260.976074  3814.821777 -10059.927246  201.048828 -10260.976074    0.000000  201.048828      101.048828       9.0        -10260.976074                 1.0         False
5   -9660.951660  -10160.975830  3814.821777  -9660.951660  600.024414 -10160.975830  200.024414  299.999756      200.000000       2.0        -10260.976074                 1.0         False
6   -9659.939209  -10059.902832  3814.821777  -9659.939209  301.012207 -10059.902832  200.024414  199.939209      101.012451       2.0         -9859.963623                 0.0         False
7   -9557.866211   -9864.012695  3814.821777  -9557.866211  302.012207  -9864.012695  200.024414  106.122070      103.085449       3.0         -9859.963623                 0.0         False
8   -9360.976074   -9859.939453  3814.821777  -9360.976074  303.012207  -9859.939453  200.024414  298.938965      199.975586       2.0         -9859.963623                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=204825/1024, 
.[0m
[09/27 17:10:31]  --------------------------------------------------------------------------------
[09/27 17:10:31]  Iteration: 296 (82 solution, 213 counterexamples)
[09/27 17:11:44]  Generator returned sat in 66.202161 secs.
[09/27 17:11:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:11:45]  Improved gap from 0.0 to 0
[09/27 17:11:45]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/27 17:11:45]  Verifer returned sat in 0.902428 secs.
[09/27 17:11:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9146.854736   -9446.854736  2600.700195 -9146.854736    0.02417 -9446.854736        0.0  300.000000           200.0       5.0         -9446.854736                -1.0            -1
1   -9146.854736   -9246.854736  2600.700195 -9146.854736  100.00000 -9246.854736        0.0  100.000000           100.0       6.0         -9446.854736                 0.0         False
2   -9146.854736   -9146.879150  2600.700195 -9146.854736   99.97583 -9146.879150        0.0    0.024414             0.0       7.0         -9146.854736                 0.0         False
3   -9146.854736   -9146.854736  2700.700195 -9146.854736    0.02417 -9146.854736        0.0    0.000000             0.0       8.0         -9146.854736                 0.0         False
4   -8996.854736   -9146.854736  2700.700195 -8996.854736  150.00000 -9146.854736        0.0  150.000000            50.0       8.0         -9146.854736                 1.0         False
5   -8996.854736   -8996.854736  2750.700195 -8996.854736   50.00000 -8996.854736        0.0    0.000000             0.0       2.0         -8996.854736                 1.0         False
6   -8945.854736   -8945.854736  2799.700195 -8945.854736   51.00000 -8945.854736        0.0    0.000000             0.0       1.0         -8996.854736                 0.0         False
7   -8893.854736   -8893.854736  2847.700195 -8893.854736   52.00000 -8893.854736        0.0    0.000000             0.0       1.0         -8996.854736                 0.0         False
8   -8840.854736   -8840.854736  2847.700195 -8840.854736   53.00000 -8840.854736        0.0    0.000000           -47.0       1.0         -8996.854736                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:11:46]  --------------------------------------------------------------------------------
[09/27 17:11:46]  Iteration: 297 (82 solution, 214 counterexamples)
[09/27 17:12:25]  Generator returned sat in 32.609836 secs.
[09/27 17:12:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:12:27]  Improved gap from 0.0 to 0
[09/27 17:12:27]  Improved number of small numbers from 85 to 114 out of a max of 114
[09/27 17:12:27]  Verifer returned sat in 0.874698 secs.
[09/27 17:12:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9146.854736   -9346.903320  2600.700195 -9146.854736    0.024414 -9346.903320    0.000000  200.048584      200.000000       7.0         -9346.903320                -1.0            -1
1   -9146.854736   -9346.854736  2600.700195 -9146.854736  200.024414 -9346.854736    0.000000  200.000000      100.000000       7.0         -9346.903320                 0.0         False
2   -9146.854736   -9146.879150  2600.700195 -9146.854736  200.000000 -9146.879150    0.000000    0.024414        0.000000       8.0         -9146.854736                 0.0         False
3   -9146.854736   -9146.854736  2700.700195 -9146.854736    0.024170 -9146.854736    0.000000    0.000000        0.000000       9.0         -9146.854736                 0.0         False
4   -8946.757812   -9146.854736  2700.700195 -8946.757812  200.096924 -9146.854736    0.000000  200.096924      100.096924       9.0         -9146.854736                 1.0         False
5   -8546.660889   -8948.097168  2700.700195 -8546.660889  600.193848 -8948.097168  200.193848  201.242432      200.000000       2.0         -9146.854736                 1.0         False
6   -8446.806396   -8946.733643  2700.700195 -8446.806396  301.096924 -8946.733643  200.193848  299.733398      199.854492       2.0         -8647.000244                 0.0         False
7   -8444.442871   -8749.976074  2700.700195 -8444.442871  302.096924 -8749.976074  200.193848  105.339355      102.218018       3.0         -8647.000244                 0.0         False
8   -8246.685303   -8646.976074  2700.700195 -8246.685303  303.096924 -8646.976074  200.193848  200.096924      199.975586       2.0         -8647.000244                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409997/2048, 
.[0m
[09/27 17:12:28]  --------------------------------------------------------------------------------
[09/27 17:12:28]  Iteration: 298 (82 solution, 215 counterexamples)
[09/27 17:13:16]  Generator returned sat in 41.683738 secs.
[09/27 17:13:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:13:20]  Improved gap from 0.0 to 0
[09/27 17:13:21]  Improved number of small numbers from 110 to 114 out of a max of 114
[09/27 17:13:21]  Verifer returned sat in 3.936299 secs.
[09/27 17:13:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9146.854980   -9346.854980  2502.796875 -9146.854980    0.023926 -9346.854980        0.0  200.000000      200.000000       9.0         -9346.854980                -1.0            -1
1   -9146.854980   -9248.951660  2502.796875 -9146.854980    0.024170 -9248.951660        0.0  102.096680      100.000000       5.0         -9346.854980                 1.0         False
2   -9146.854980   -9146.903320  2502.796875 -9146.854980    0.024170 -9146.903320        0.0    0.048340        0.000000       5.0         -9346.854980                 0.0         False
3   -9146.854980   -9146.854980  2602.796875 -9146.854980    0.024170 -9146.854980        0.0    0.000000        0.000000       6.0         -9346.854980                 0.0         False
4   -8946.854980   -9146.854980  2602.796875 -8946.854980  200.000000 -9146.854980        0.0  200.000000      100.000000       6.0         -9346.854980                 1.0          True
5   -8946.854980   -9046.854980  2602.796875 -8946.854980  102.096680 -9046.854980        0.0  100.000000        0.000000       2.0         -8946.854980                 1.0         False
6   -8944.782471   -8944.782471  2700.700195 -8944.782471  102.072510 -8944.782471        0.0    0.000000       -0.024170       1.0         -8944.782471                 0.0         False
7   -8791.709961   -8944.758057  2700.700195 -8791.709961  153.072510 -8944.758057        0.0  153.048096       53.048340       1.0         -8944.782471                 0.0         False
8   -8766.173340   -8826.878906  2700.700195 -8766.173340  178.584717 -8826.878906        0.0   60.705566      -21.415039       2.0         -8944.782471                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:13:21]  --------------------------------------------------------------------------------
[09/27 17:13:21]  Iteration: 299 (82 solution, 216 counterexamples)
[09/27 17:14:34]  Generator returned sat in 65.153701 secs.
[09/27 17:14:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:14:36]  Improved gap from 0.0 to 0
[09/27 17:14:36]  Improved number of small numbers from 68 to 74 out of a max of 114
[09/27 17:14:36]  Verifer returned sat in 2.062114 secs.
[09/27 17:14:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9746.817480  -10015.149772  2502.796875 -9746.817480    0.001221 -10015.149772    0.00000  268.332292      200.000000       6.0        -10015.149772                -1.0            -1
1   -9746.817480   -9946.817480  2502.796875 -9746.817480    0.001465  -9946.817480    0.00000  200.000000      100.000000       6.0        -10015.149772                 0.0         False
2   -9746.817480   -9746.820068  2502.796875 -9746.817480    0.002441  -9746.820068    0.00000    0.002588        0.000000       7.0        -10015.149772                 0.0         False
3   -9746.817480   -9746.817480  2602.796875 -9746.817480    0.001250  -9746.817480    0.00000    0.000000        0.000000       8.0         -9746.817480                 0.0         False
4   -9479.483314   -9746.817480  2602.796875 -9479.483314  267.334167  -9746.817480    0.00000  267.334167      167.334167       8.0         -9746.817480                 1.0         False
5   -9146.816230   -9546.817627  2602.796875 -9146.816230  600.001250  -9546.817627  200.00125  200.000146      200.000000       2.0         -9746.817480                 1.0         False
6   -9146.816230   -9477.485814  2602.796875 -9146.816230    0.010000  -9477.485814  200.00125  130.668333      100.000000       2.0         -9346.817480                 0.0         False
7   -9142.813730   -9346.817480  2602.796875 -9142.813730  134.670833  -9346.817480  200.00125    4.002500        4.002500       3.0         -9346.817480                 0.0         False
8   -8879.480814   -9346.816406  2602.796875 -8879.480814  267.335417  -9346.816406  200.00125  267.334342      167.335417       2.0         -9346.817480                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 17:14:37]  --------------------------------------------------------------------------------
[09/27 17:14:37]  Iteration: 300 (82 solution, 217 counterexamples)
[09/27 17:15:17]  Generator returned sat in 32.229669 secs.
[09/27 17:15:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:15:24]  Improved gap from 0.0 to 0
[09/27 17:15:24]  Improved number of small numbers from 64 to 70 out of a max of 114
[09/27 17:15:24]  Verifer returned sat in 7.060030 secs.
[09/27 17:15:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10351.493503  -10618.159791  2502.796875 -10351.493503    0.000488 -10618.159791    0.000000  266.666288      200.000000       6.0        -10618.159791                -1.0            -1
1  -10351.493503  -10551.493503  2502.796875 -10351.493503    0.000732 -10551.493503    0.000000  200.000000      100.000000       6.0        -10618.159791                 0.0         False
2  -10351.493503  -10351.494629  2502.796875 -10351.493503    0.000488 -10351.494629    0.000000    0.001126        0.000000       7.0        -10351.493503                 0.0         False
3  -10351.493503  -10351.493503  2602.796875 -10351.493503    0.000455 -10351.493503    0.000000    0.000000        0.000000       8.0        -10351.493503                 0.0         False
4  -10084.826533  -10351.493503  2602.796875 -10084.826533  266.666970 -10351.493503    0.000000  266.666970      166.666970       8.0        -10351.493503                 1.0         False
5   -9751.493049  -10151.493652  2602.796875  -9751.493049  600.000455 -10151.493652  200.000455  200.000149      200.000000       2.0        -10351.493503                 1.0         False
6   -9751.493049  -10084.830473  2602.796875  -9751.493049    0.010000 -10084.830473  200.000455  133.336970      100.000000       3.0         -9951.493503                 0.0         False
7   -9751.493049   -9951.493503  2602.796875  -9751.493049  133.336515  -9951.493503  200.000455    0.000000        0.000000       3.0         -9951.493503                 0.0         False
8   -9484.824791   -9951.493164  2602.796875  -9484.824791  266.668258  -9951.493164  200.000455  266.667918      166.668258       1.0         -9951.493503                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=440001/2200, 
.[0m
[09/27 17:15:25]  --------------------------------------------------------------------------------
[09/27 17:15:25]  Iteration: 301 (82 solution, 218 counterexamples)
[09/27 17:16:16]  Generator returned sat in 43.429097 secs.
[09/27 17:16:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:16:17]  Improved gap from 0.0 to 0
[09/27 17:16:17]  Improved number of small numbers from 66 to 114 out of a max of 114
[09/27 17:16:17]  Verifer returned sat in 0.753953 secs.
[09/27 17:16:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10351.493408  -10651.493408  2502.796631 -10351.493408    0.024170 -10651.493408        0.0  300.000000      200.000000       7.0        -10651.493408                -1.0            -1
1  -10351.493408  -10451.493408  2502.796631 -10351.493408   99.999756 -10451.493408        0.0  100.000000      100.000000       7.0        -10651.493408                 0.0         False
2  -10351.493408  -10451.469238  2502.796631 -10351.493408   99.999756 -10451.469238        0.0   99.975830        0.000000       8.0        -10651.493408                 0.0         False
3  -10351.493408  -10351.493408  2602.796631 -10351.493408   99.951904 -10351.493408        0.0    0.000000        0.000000       9.0        -10351.493408                 0.0         False
4  -10201.493408  -10351.493408  2602.796631 -10201.493408  150.000000 -10351.493408        0.0  150.000000       50.000000       9.0        -10351.493408                 1.0         False
5  -10201.493408  -10201.493408  2652.796631 -10201.493408   50.000000 -10201.493408        0.0    0.000000        0.000000       2.0        -10201.493408                 1.0         False
6  -10150.493408  -10150.493652  2652.796631 -10150.493408   51.000000 -10150.493652        0.0    0.000244      -49.000000       1.0        -10201.493408                 0.0         False
7  -10098.493652  -10098.493652  2749.796631 -10098.493652   52.000000 -10098.493652        0.0    0.000000       -0.000244       1.0        -10201.493408                 0.0         False
8  -10045.493652  -10045.493652  2749.796875 -10045.493652   53.000000 -10045.493652        0.0    0.000000      -47.000000       1.0        -10201.493408                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:16:18]  --------------------------------------------------------------------------------
[09/27 17:16:18]  Iteration: 302 (82 solution, 219 counterexamples)
[09/27 17:17:41]  Generator returned sat in 75.823738 secs.
[09/27 17:17:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:17:46]  Improved gap from 0.0 to 0
[09/27 17:17:47]  Improved number of small numbers from 68 to 74 out of a max of 114
[09/27 17:17:47]  Verifer returned sat in 5.319993 secs.
[09/27 17:17:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10299.452710  -10499.452710  2649.796875 -10299.452710    0.045654 -10499.452710    0.000000  200.000000      200.000000       7.0         -10499.45271                -1.0            -1
1  -10299.452710  -10499.452710  2649.796875 -10299.452710    0.045654 -10499.452710    0.000000  200.000000      100.000000       7.0         -10499.45271                 0.0         False
2  -10299.452710  -10399.452637  2649.796875 -10299.452710   44.510254 -10399.452637    0.000000   99.999927        0.000000       8.0         -10499.45271                 0.0         False
3  -10299.452710  -10299.452710  2749.796875 -10299.452710   44.464646 -10299.452710    0.000000    0.000000        0.000000       9.0         -10299.45271                 0.0         False
4  -10032.755740  -10299.452710  2749.796875 -10032.755740  266.696970 -10299.452710    0.000000  266.696970      166.696970       9.0         -10299.45271                 1.0         False
5   -9699.407255  -10199.452637  2749.796875  -9699.407255  600.045455 -10199.452637  200.045455  299.999927      200.000000       2.0         -10299.45271                 1.0         False
6   -9699.407255  -10033.483013  2749.796875  -9699.407255    1.000000 -10033.483013  200.045455  134.030303      100.000000       3.0          -9899.45271                 0.0         False
7   -9699.407255   -9899.452710  2749.796875  -9699.407255  133.484848  -9899.452710  200.045455    0.000000        0.000000       3.0          -9899.45271                 0.0         False
8   -9432.664831   -9899.407471  2749.796875  -9432.664831  266.742424  -9899.407471  200.045455  266.697185      166.742424       1.0          -9899.45271                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=4401/22, 
.[0m
[09/27 17:17:47]  --------------------------------------------------------------------------------
[09/27 17:17:47]  Iteration: 303 (82 solution, 220 counterexamples)
[09/27 17:19:07]  Generator returned sat in 72.197557 secs.
[09/27 17:19:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:19:12]  Improved gap from 0.0 to 0
[09/27 17:19:13]  Improved number of small numbers from 68 to 74 out of a max of 114
[09/27 17:19:13]  Verifer returned sat in 5.214167 secs.
[09/27 17:19:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -10299.45271  -10575.452085  2649.796875 -10299.45271    0.001221 -10575.452085    0.00000  275.999375       200.00000       7.0        -10575.452085                -1.0            -1
1   -10299.45271  -10487.952085  2649.796875 -10299.45271    0.001221 -10487.952085    0.00000  188.499375       100.00000       7.0        -10575.452085                 0.0         False
2   -10299.45271  -10299.455078  2649.796875 -10299.45271    0.002500 -10299.455078    0.00000    0.002369         0.00000       8.0        -10575.452085                 0.0         False
3   -10299.45271  -10299.452710  2749.796875 -10299.45271    0.001250 -10299.452710    0.00000    0.000000         0.00000       9.0        -10299.452710                 0.0         False
4   -10024.45146  -10299.452710  2749.796875 -10024.45146  275.001250 -10299.452710    0.00000  275.001250       175.00125       9.0        -10299.452710                 1.0         False
5    -9699.45146  -10199.452637  2749.796875  -9699.45146  600.001250 -10199.452637  200.00125  299.999927       200.00000       2.0        -10299.452710                 1.0         False
6    -9699.45146   -9999.452710  2749.796875  -9699.45146    0.010000  -9999.452710  200.00125  100.000000       100.00000       2.0         -9899.452710                 0.0         False
7    -9649.44646   -9899.452710  2749.796875  -9649.44646  150.005000  -9899.452710  200.00125   50.005000        50.00500       3.0         -9899.452710                 0.0         False
8    -9424.44896   -9899.451660  2749.796875  -9424.44896  275.002500  -9899.451660  200.00125  275.001451       175.00250       2.0         -9899.452710                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/800, 
.[0m
[09/27 17:19:14]  --------------------------------------------------------------------------------
[09/27 17:19:14]  Iteration: 304 (82 solution, 221 counterexamples)
[09/27 17:19:43]  Generator returned sat in 22.015793 secs.
[09/27 17:19:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:19:50]  Improved gap from 0.0 to 0
[09/27 17:19:51]  Improved number of small numbers from 59 to 63 out of a max of 114
[09/27 17:19:51]  Verifer returned sat in 7.468058 secs.
[09/27 17:19:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9514.447110   -9781.112943  1667.916275 -9514.447110    0.001000 -9781.112943      0.000  266.665833      200.000000       7.0         -9781.112943                -1.0            -1
1   -9514.447110   -9714.447110  1667.916275 -9514.447110    0.001000 -9714.447110      0.000  200.000000      100.000000       7.0         -9781.112943                 0.0         False
2   -9514.447110   -9514.448975  1667.916275 -9514.447110    0.002197 -9514.448975      0.000    0.001865        0.000000       8.0         -9781.112943                 0.0         False
3   -9514.447110   -9514.447110  1767.916275 -9514.447110    0.001000 -9514.447110      0.000    0.000000        0.000000       9.0         -9514.447110                 0.0         False
4   -9247.779776   -9514.447110  1767.916275 -9247.779776  266.667333 -9514.447110      0.000  266.667333      166.667333       9.0         -9514.447110                 1.0         False
5   -8914.446110   -9414.447021  1767.916275 -8914.446110  600.001000 -9414.447021    200.001  299.999912      200.000000       2.0         -9514.447110                 1.0         False
6   -8914.446110   -9247.787776  1767.916275 -8914.446110    0.010000 -9247.787776    200.001  133.340667      100.000000       3.0         -9114.447110                 0.0         False
7   -8914.446110   -9114.447110  1767.916275 -8914.446110  133.334667 -9114.447110    200.001    0.000000        0.000000       3.0         -9114.447110                 0.0         False
8   -8647.778776   -9114.447110  1767.916275 -8647.778776  266.667333 -9114.447110    200.001  266.667333      166.667333       3.0         -9114.447110                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=200001/1000, 
.[0m
[09/27 17:19:51]  --------------------------------------------------------------------------------
[09/27 17:19:51]  Iteration: 305 (82 solution, 222 counterexamples)
[09/27 17:22:15]  Generator returned sat in 135.686165 secs.
[09/27 17:22:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:22:16]  Improved gap from 0.0 to 0
[09/27 17:22:17]  Improved number of small numbers from 38 to 46 out of a max of 114
[09/27 17:22:17]  Verifer returned sat in 1.993606 secs.
[09/27 17:22:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9514.447110   -9714.447110  1667.916275 -9514.447110    0.047852 -9714.447110    0.000000  200.000000      200.000000       7.0         -9714.447110                -1.0            -1
1   -9514.447110   -9713.703620  1667.916275 -9514.447110    0.048096 -9713.703620    0.000000  199.256510      100.000000       6.0         -9714.447110                 0.0         False
2   -9514.447110   -9514.891113  1667.916275 -9514.447110  199.256348 -9514.891113    0.000000    0.444004        0.000000       7.0         -9714.447110                 0.0         False
3   -9514.447110   -9514.447110  1767.916275 -9514.447110    0.443888 -9514.447110    0.000000    0.000000        0.000000       8.0         -9514.447110                 0.0         False
4   -9314.559333   -9514.447110  1767.916275 -9314.559333  199.887777 -9514.447110    0.000000  199.887777       99.887777       8.0         -9514.447110                 1.0         False
5   -8916.415046   -9314.511237  1767.916275 -8916.415046  598.032064 -9314.511237  198.032064  200.064128      200.000000       1.0         -9514.447110                 1.0         False
6   -8816.463141   -9314.447021  1767.916275 -8816.463141  300.016032 -9314.447021  198.032064  299.951816      199.951904       2.0         -9014.495205                 0.0         False
7   -8815.398926   -9114.447110  1767.916275 -8815.398926  301.016032 -9114.447110  198.032064  101.016120      101.016120       3.0         -9014.495205                 0.0         False
8   -8614.399014   -9114.447021  1767.916275 -8614.399014  302.016032 -9114.447021  200.048096  299.999912      200.000000       3.0         -9014.495205                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819397/4096, 
.[0m
[09/27 17:22:18]  --------------------------------------------------------------------------------
[09/27 17:22:18]  Iteration: 306 (82 solution, 223 counterexamples)
[09/27 17:23:19]  Generator returned sat in 53.193475 secs.
[09/27 17:23:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:23:20]  Improved gap from 0.0 to 0
[09/27 17:23:20]  Improved number of small numbers from 106 to 114 out of a max of 114
[09/27 17:23:20]  Verifer returned sat in 0.845064 secs.
[09/27 17:23:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -11665.248535  -11865.248779  3818.717529 -11665.248535    0.047852 -11865.248779    0.000000  200.000244      200.000000       6.0        -11865.248779                -1.0            -1
1  -11665.248535  -11865.248535  3818.717529 -11665.248535    0.520996 -11865.248535    0.000000  200.000000      100.000000       7.0        -11865.248779                 0.0         False
2  -11665.248535  -11665.721191  3818.717529 -11665.248535    0.472900 -11665.721191    0.000000    0.472656        0.000000       8.0        -11665.248535                 0.0         False
3  -11665.248535  -11665.248535  3918.717529 -11665.248535    0.424561 -11665.248535    0.000000    0.000000        0.000000       9.0        -11665.248535                 0.0         False
4  -11465.399170  -11665.248535  3918.717529 -11465.399170  199.849365 -11665.248535    0.000000  199.849365       99.849365       9.0        -11665.248535                 1.0         False
5  -11066.549805  -11565.248535  3918.717529 -11066.549805  598.698730 -11565.248535  198.698730  300.000000      200.000000       2.0        -11665.248535                 1.0         False
6  -11066.549805  -11465.248535  3918.717529 -11066.549805  299.349365 -11465.248535  198.698730  200.000000      100.000000       2.0        -11265.248535                 0.0         False
7  -10966.200439  -11265.248535  3918.717529 -10966.200439  300.349365 -11265.248535  198.698730  100.349365      100.349365       3.0        -11265.248535                 0.0         False
8  -10765.200439  -11165.248779  3918.717529 -10765.200439  301.349365 -11165.248779  200.048096  200.000244      200.000000       2.0        -11265.248535                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819397/4096, 
.[0m
[09/27 17:23:21]  --------------------------------------------------------------------------------
[09/27 17:23:21]  Iteration: 307 (82 solution, 224 counterexamples)
[09/27 17:25:28]  Generator returned sat in 119.770254 secs.
[09/27 17:25:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:25:31]  Improved gap from 0.0 to 0
[09/27 17:25:31]  Improved number of small numbers from 41 to 114 out of a max of 114
[09/27 17:25:31]  Verifer returned sat in 2.243802 secs.
[09/27 17:25:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12131.391113  -12342.367188  3829.673584 -12131.391113    0.024170 -12342.367188        0.0  210.976074      200.000000       2.0        -12342.367188                -1.0            -1
1  -12131.391113  -12231.463135  3829.673584 -12131.391113    0.048096 -12231.463135        0.0  100.072021      100.000000       2.0        -12342.367188                 0.0         False
2  -12131.391113  -12131.415039  3829.673584 -12131.391113    0.024170 -12131.415039        0.0    0.023926        0.000000       3.0        -12131.391113                 0.0         False
3  -12131.391113  -12131.391113  3929.673584 -12131.391113    0.023926 -12131.391113        0.0    0.000000        0.000000       4.0        -12131.391113                 1.0         False
4  -11920.415039  -12131.391113  3929.673584 -11920.415039  210.976074 -12131.391113        0.0  210.976074      110.976074       4.0        -12131.391113                 1.0         False
5  -11920.415039  -12031.390869  3929.673584 -11920.415039  100.072021 -12031.390869        0.0  110.975830       10.976074       2.0        -11920.415039                 1.0         False
6  -11920.415039  -11920.415039  4018.697510 -11920.415039  100.048096 -11920.415039        0.0    0.000000        0.000000       3.0        -11920.415039                 0.0         False
7  -11709.438965  -11920.415039  4018.697510 -11709.438965  210.976074 -11920.415039        0.0  210.976074      110.976074       3.0        -11920.415039                 1.0         False
8  -11709.438965  -11820.414795  4018.697510 -11709.438965  210.976074 -11820.414795        0.0  110.975830       10.976074       2.0        -11920.415039                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:25:32]  --------------------------------------------------------------------------------
[09/27 17:25:32]  Iteration: 308 (82 solution, 225 counterexamples)
[09/27 17:28:16]  Generator returned sat in 156.970755 secs.
[09/27 17:28:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:28:18]  Improved gap from 0.0 to 0
[09/27 17:28:18]  Improved number of small numbers from 90 to 114 out of a max of 114
[09/27 17:28:18]  Verifer returned sat in 1.540741 secs.
[09/27 17:28:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12131.391357  -12334.487305  3829.673584 -12131.391357    0.023926 -12334.487305        0.0  203.095947      200.000000       4.0        -12334.487305                -1.0            -1
1  -12131.391357  -12234.487305  3829.673584 -12131.391357    0.071777 -12234.487305        0.0  103.095947      100.000000       4.0        -12334.487305                 0.0         False
2  -12131.391357  -12131.439209  3829.673584 -12131.391357    0.048096 -12131.439209        0.0    0.047852        0.000000       5.0        -12131.391357                 0.0         False
3  -12131.391357  -12131.391357  3929.673584 -12131.391357    0.023926 -12131.391357        0.0    0.000000        0.000000       6.0        -12131.391357                 0.0         False
4  -11929.295410  -12131.391357  3929.673584 -11929.295410  202.095947 -12131.391357        0.0  202.095947      102.095947       6.0        -12131.391357                 1.0         False
5  -11929.295410  -12031.391113  3929.673584 -11929.295410  102.095947 -12031.391113        0.0  102.095703        2.095947       2.0        -11929.295410                 1.0         False
6  -11929.295410  -11929.295410  4027.577637 -11929.295410  102.072021 -11929.295410        0.0    0.000000        0.000000       3.0        -11929.295410                 0.0         False
7  -11776.211426  -11929.271240  4027.577637 -11776.211426  153.083984 -11929.271240        0.0  153.059814       53.083984       1.0        -11929.295410                 0.0         False
8  -11750.669189  -11811.415283  4027.577637 -11750.669189  178.602051 -11811.415283        0.0   60.746094      -21.373779       2.0        -11929.295410                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:28:19]  --------------------------------------------------------------------------------
[09/27 17:28:19]  Iteration: 309 (82 solution, 226 counterexamples)
[09/27 17:30:12]  Generator returned sat in 105.219172 secs.
[09/27 17:30:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:30:13]  Improved gap from 0.0 to 0
[09/27 17:30:13]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/27 17:30:13]  Verifer returned sat in 0.576749 secs.
[09/27 17:30:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12181.297119  -12382.321045  3829.67334 -12181.297119    0.071533 -12382.321045        0.0  201.023926      200.000000       6.0        -12382.321045                -1.0            -1
1  -12181.297119  -12281.297119  3829.67334 -12181.297119    0.071533 -12281.297119        0.0  100.000000      100.000000       7.0        -12382.321045                 0.0         False
2  -12181.297119  -12181.344971  3829.67334 -12181.297119    0.047852 -12181.344971        0.0    0.047852        0.000000       8.0        -12181.297119                 0.0         False
3  -12181.297119  -12181.297119  3929.67334 -12181.297119    0.023682 -12181.297119        0.0    0.000000        0.000000       9.0        -12181.297119                 0.0         False
4  -11980.273193  -12181.297119  3929.67334 -11980.273193  201.023926 -12181.297119        0.0  201.023926      101.023926       9.0        -12181.297119                 1.0         False
5  -11980.273193  -12081.297119  3929.67334 -11980.273193  100.000000 -12081.297119        0.0  101.023926        1.023926       2.0        -11980.273193                 1.0         False
6  -11980.273193  -11981.297119  3929.67334 -11980.273193  101.000000 -11981.297119        0.0    1.023926      -98.976074       3.0        -11980.273193                 0.0         False
7  -11879.297119  -11879.297119  4027.67334 -11879.297119  102.000000 -11879.297119        0.0    0.000000        0.000000       1.0        -11980.273193                 0.0         False
8  -11776.297119  -11861.321045  4027.67334 -11776.297119  103.000000 -11861.321045        0.0   85.023926        3.000000       1.0        -11980.273193                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:30:14]  --------------------------------------------------------------------------------
[09/27 17:30:14]  Iteration: 310 (82 solution, 227 counterexamples)
[09/27 17:31:22]  Generator returned sat in 60.978334 secs.
[09/27 17:31:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:31:25]  Improved gap from 0.0 to 0
[09/27 17:31:25]  Improved number of small numbers from 57 to 114 out of a max of 114
[09/27 17:31:25]  Verifer returned sat in 2.142800 secs.
[09/27 17:31:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12093.822266  -12313.798340  3705.275146 -12093.822266    0.023682 -12313.798340        0.0  219.976074      200.000000       6.0        -12313.798340                -1.0            -1
1  -12093.822266  -12231.678711  3705.275146 -12093.822266    0.071777 -12231.678711        0.0  137.856445      100.000000       7.0        -12313.798340                 0.0         False
2  -12093.822266  -12093.870117  3705.275146 -12093.822266    0.047607 -12093.870117        0.0    0.047852        0.000000       8.0        -12093.822266                 0.0         False
3  -12093.822266  -12093.822266  3805.275146 -12093.822266    0.023926 -12093.822266        0.0    0.000000        0.000000       8.0        -12093.822266                 1.0         False
4  -11873.846191  -12093.822266  3805.275146 -11873.846191  219.976074 -12093.822266        0.0  219.976074      119.976074       8.0        -12093.822266                 1.0         False
5  -11873.846191  -11993.822266  3805.275146 -11873.846191  137.856445 -11993.822266        0.0  119.976074       19.976074       2.0        -11873.846191                 1.0         False
6  -11873.846191  -11873.846191  3885.298828 -11873.846191  119.952148 -11873.846191        0.0    0.000000       -0.000244       3.0        -11873.846191                 0.0         False
7  -11702.882080  -11873.822021  3885.298828 -11702.882080  170.964111 -11873.822021        0.0  170.939941       70.963867       1.0        -11873.846191                 0.0         False
8  -11677.339844  -11773.845947  3885.298828 -11677.339844  196.482178 -11773.845947        0.0   96.506104       -3.493896       2.0        -11873.846191                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:31:26]  --------------------------------------------------------------------------------
[09/27 17:31:26]  Iteration: 311 (82 solution, 228 counterexamples)
[09/27 17:33:15]  Generator returned sat in 101.980931 secs.
[09/27 17:33:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:33:17]  Improved gap from 0.0 to 18.75
[09/27 17:33:17]  Improved number of small numbers from 92 to 114 out of a max of 114
[09/27 17:33:17]  Verifer returned sat in 1.265663 secs.
[09/27 17:33:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12393.869873  -12493.535889  3705.275146 -12393.869873   99.713379 -12493.535889        0.0   99.666016       -0.047363       6.0        -12493.535889                -1.0            -1
1  -12393.822510  -12393.822510  3705.275146 -12393.822510   99.713379 -12393.822510        0.0    0.000000     -100.000000       1.0        -12493.535889                 1.0         False
2  -12060.568604  -12193.822510  3705.275146 -12060.568604  333.253906 -12193.822510        0.0  133.253906      133.253906       1.0        -12493.535889                 0.0         False
3  -11893.917969  -12093.822510  3705.275146 -11893.917969  299.904541 -12093.822510        0.0  199.904541      199.904541       2.0        -11893.917969                 0.0         False
4  -11893.917969  -12060.520752  3705.275146 -11893.917969  199.856689 -12060.520752        0.0  166.602783       99.904541       2.0        -11893.917969                 1.0         False
5  -11893.869873  -11993.822510  3705.275146 -11893.869873  166.650879 -11993.822510        0.0   99.952637       -0.047363       3.0        -11893.869873                 1.0         False
6  -11893.822510  -11893.822510  3785.322754 -11893.822510  100.000000 -11893.822510        0.0    0.000000      -19.952393       1.0        -11893.822510                 1.0         False
7  -11693.822510  -11872.664062  3785.322754 -11693.822510  200.000000 -11872.664062        0.0  178.841553       80.047607       1.0        -11893.822510                 0.0         False
8  -11684.807373  -11773.869873  3785.322754 -11684.807373  187.856689 -11773.869873        0.0   89.062500      -10.937256       2.0        -11684.807373                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:33:18]  --------------------------------------------------------------------------------
[09/27 17:33:18]  Iteration: 312 (82 solution, 229 counterexamples)
[09/27 17:35:54]  Generator returned sat in 148.983421 secs.
[09/27 17:35:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:35:55]  Improved gap from 0.0 to 0
[09/27 17:35:55]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 17:35:55]  Verifer returned sat in 0.480445 secs.
[09/27 17:35:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12409.774902  -12625.679688  6928.703613 -12409.774902    0.047607 -12625.679688        0.0  215.904785      200.000000       6.0        -12625.679688                -1.0            -1
1  -12409.774902  -12509.774902  6928.703613 -12409.774902    0.047607 -12509.774902        0.0  100.000000      100.000000       7.0        -12625.679688                 0.0         False
2  -12409.774902  -12509.727295  6928.703613 -12409.774902    0.047607 -12509.727295        0.0   99.952393        0.000000       8.0        -12625.679688                 0.0         False
3  -12409.774902  -12409.774902  7028.703613 -12409.774902   99.952393 -12409.774902        0.0    0.000000        0.000000       9.0        -12625.679688                 0.0         False
4  -12192.870117  -12409.774902  7028.703613 -12192.870117  216.904785 -12409.774902        0.0  216.904785      116.904785       9.0        -12625.679688                 1.0          True
5  -12192.870117  -12294.917725  7028.703613 -12192.870117  101.000000 -12294.917725        0.0  102.047607       16.904785       2.0        -12192.870117                 1.0         False
6  -12192.870117  -12192.870117  7108.798828 -12192.870117  102.000000 -12192.870117        0.0    0.000000       -3.000000       3.0        -12192.870117                 0.0         False
7  -12089.870117  -12089.870117  7108.798828 -12089.870117  103.000000 -12089.870117        0.0    0.000000        0.000000       1.0        -12192.870117                 0.0         False
8  -11985.870117  -12089.822510  7108.798828 -11985.870117  104.000000 -12089.822510        0.0  103.952393        4.000000       1.0        -12192.870117                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:35:56]  --------------------------------------------------------------------------------
[09/27 17:35:56]  Iteration: 313 (82 solution, 230 counterexamples)
[09/27 17:36:50]  Generator returned sat in 46.321205 secs.
[09/27 17:36:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:36:55]  Improved gap from 0.0 to 0
[09/27 17:36:56]  Improved number of small numbers from 53 to 68 out of a max of 114
[09/27 17:36:56]  Verifer returned sat in 5.528428 secs.
[09/27 17:36:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12471.697418  -12673.792633  6928.703369 -12471.697418    0.023926 -12673.792633        0.0  202.095215      200.000000       9.0        -12673.792633                -1.0            -1
1  -12471.697418  -12573.792633  6928.703369 -12471.697418  202.094971 -12573.792633        0.0  102.095215      100.000000       9.0        -12673.792633                 1.0         False
2  -12471.697418  -12471.744873  6928.703369 -12471.697418    0.023926 -12471.744873        0.0    0.047455        0.000000       8.0        -12471.697418                 1.0          True
3  -12471.697418  -12471.697418  7028.703369 -12471.697418    0.023926 -12471.697418        0.0    0.000000        0.000000       9.0        -12471.697418                 0.0         False
4  -12269.602203  -12471.697418  7028.703369 -12269.602203  202.095215 -12471.697418        0.0  202.095215      102.095215       9.0        -12471.697418                 1.0         False
5  -12269.602203  -12371.697266  7028.703369 -12269.602203  102.095215 -12371.697266        0.0  102.095062        2.095215       2.0        -12269.602203                 1.0         False
6  -12269.602203  -12269.602203  7126.584473 -12269.602203  102.071411 -12269.602203        0.0    0.000000       -0.023682       3.0        -12269.602203                 0.0         False
7  -12116.518890  -12269.578400  7126.584473 -12116.518890  153.083313 -12269.578400        0.0  153.059509       53.059631       1.0        -12269.602203                 0.0         False
8  -12090.977234  -12151.721436  7126.584473 -12090.977234  178.601166 -12151.721436        0.0   60.744202      -21.398712       2.0        -12269.602203                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:36:56]  --------------------------------------------------------------------------------
[09/27 17:36:56]  Iteration: 314 (82 solution, 231 counterexamples)
[09/27 17:39:22]  Generator returned sat in 137.880987 secs.
[09/27 17:39:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:39:24]  Improved gap from 0.0 to 10.9375
[09/27 17:39:24]  Improved number of small numbers from 104 to 114 out of a max of 114
[09/27 17:39:24]  Verifer returned sat in 1.534145 secs.
[09/27 17:39:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13273.885010  -13373.869385  7630.875244 -13273.885010    0.015625 -13373.869385        0.0   99.984375       99.984375       8.0        -13373.869385                -1.0            -1
1  -13273.885010  -13273.900635  7630.875244 -13273.885010    0.046631 -13273.900635        0.0    0.015625       -0.015625       8.0        -13373.869385                 1.0         False
2  -13273.869385  -13273.869385  7719.937744 -13273.869385    0.031250 -13273.869385        0.0    0.000000      -10.937500       1.0        -13273.869385                 1.0          True
3  -13062.916260  -13162.931885  7719.937744 -13062.916260  210.953125 -13162.931885        0.0  100.015625      100.015625       1.0        -13273.869385                 0.0         False
4  -12951.994385  -13162.931885  7719.937744 -12951.994385  210.937500 -13162.931885        0.0  210.937500      110.937500       1.0        -12951.994385                 0.0         False
5  -12951.994385  -12963.853516  7719.937744 -12951.994385  110.968750 -12963.853516        0.0   11.859131       10.937500       2.0        -12951.994385                 0.0         False
6  -12853.884766  -12962.931641  7719.937744 -12853.884766  109.968750 -12962.931641        0.0  109.046875        9.047119       3.0        -12853.884766                 1.0         False
7  -12853.884766  -12853.884766  7799.953125 -12853.884766  108.968750 -12853.884766        0.0    0.000000      -10.937500       2.0        -12853.884766                 1.0         False
8  -12745.916016  -12842.947266  7799.953125 -12745.916016  107.968750 -12842.947266        0.0   97.031250       -2.968750       1.0        -12745.916016                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:39:25]  --------------------------------------------------------------------------------
[09/27 17:39:25]  Iteration: 315 (82 solution, 232 counterexamples)
[09/27 17:40:16]  Generator returned sat in 43.796520 secs.
[09/27 17:40:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:40:17]  Improved gap from 0.95263671875 to 18.75
[09/27 17:40:18]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 17:40:18]  Verifer returned sat in 1.290772 secs.
[09/27 17:40:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13429.650146  -13448.400391  7686.608887 -13429.650146    0.047363 -13448.400391        0.0   18.750244       -0.047119       9.0        -13448.400391                -1.0            -1
1  -13429.603027  -13429.603027  7767.858887 -13429.603027   18.797363 -13429.603027        0.0    0.000000      -18.750000       1.0        -13448.400391                 1.0         False
2  -13410.853027  -13410.853027  7849.108887 -13410.853027   18.750000 -13410.853027        0.0    0.000000      -18.750000       1.0        -13410.853027                 0.0         False
3  -13093.055664  -13293.305664  7849.108887 -13093.055664  317.797363 -13293.305664        0.0  200.250000      199.047363       1.0        -13410.853027                 0.0         False
4  -13093.055664  -13228.447510  7849.108887 -13093.055664  155.094727 -13228.447510        0.0  135.391846       99.047363       2.0        -13093.055664                 0.0         False
5  -13093.055664  -13093.103027  7849.108887 -13093.055664    1.000000 -13093.103027        0.0    0.047363       -0.952637       3.0        -13093.055664                 1.0         False
6  -13092.103027  -13092.103027  7930.358887 -13092.103027    1.000000 -13092.103027        0.0    0.000000      -18.750000       1.0        -13093.055664                 1.0         False
7  -12890.900391  -13073.352783  7930.358887 -12890.900391  201.202637 -13073.352783        0.0  182.452393       82.452637       1.0        -13093.055664                 0.0         False
8  -12890.900391  -12973.352783  7930.358887 -12890.900391  155.094727 -12973.352783        0.0   82.452393      -17.547363       2.0        -12890.900391                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:40:18]  --------------------------------------------------------------------------------
[09/27 17:40:18]  Iteration: 316 (82 solution, 233 counterexamples)
[09/27 17:41:34]  Generator returned sat in 68.497338 secs.
[09/27 17:41:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:41:36]  Improved gap from 0.0 to 0
[09/27 17:41:36]  Improved number of small numbers from 42 to 114 out of a max of 114
[09/27 17:41:36]  Verifer returned sat in 1.286097 secs.
[09/27 17:41:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13212.022217  -13432.998535  7669.027832 -13212.022217    0.023682 -13432.998535        0.0  220.976318      200.000000       9.0        -13432.998535                -1.0            -1
1  -13212.022217  -13332.998535  7669.027832 -13212.022217    0.023682 -13332.998535        0.0  120.976318      100.000000       8.0        -13432.998535                 1.0         False
2  -13212.022217  -13229.951416  7669.027832 -13212.022217    0.047363 -13229.951416        0.0   17.929199        0.000000       8.0        -13432.998535                 0.0         False
3  -13212.022217  -13212.022217  7769.027832 -13212.022217    0.023438 -13212.022217        0.0    0.000000        0.000000       9.0        -13212.022217                 0.0         False
4  -12992.045898  -13212.022217  7769.027832 -12992.045898  219.976318 -13212.022217        0.0  219.976318      119.976318       9.0        -13212.022217                 1.0         False
5  -12992.045898  -13112.021973  7769.027832 -12992.045898  119.976318 -13112.021973        0.0  119.976074       19.976318       2.0        -12992.045898                 1.0         False
6  -12992.045898  -12992.045898  7849.051514 -12992.045898  119.952881 -12992.045898        0.0    0.000000        0.000000       3.0        -12992.045898                 0.0         False
7  -12821.081299  -12992.021973  7849.051514 -12821.081299  170.964600 -12992.021973        0.0  170.940674       70.964600       1.0        -12992.045898                 0.0         False
8  -12795.539551  -12892.045654  7849.051514 -12795.539551  196.482422 -12892.045654        0.0   96.506104       -3.493652       2.0        -12992.045898                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:41:37]  --------------------------------------------------------------------------------
[09/27 17:41:37]  Iteration: 317 (82 solution, 234 counterexamples)
[09/27 17:44:37]  Generator returned sat in 172.498458 secs.
[09/27 17:44:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:44:39]  Improved gap from 0.0472412109375 to 43.75
[09/27 17:44:39]  Improved number of small numbers from 49 to 114 out of a max of 114
[09/27 17:44:39]  Verifer returned sat in 1.722606 secs.
[09/27 17:44:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14252.713135  -14370.915771  7573.659668 -14252.713135    0.070801 -14370.915771        0.0  118.202637      118.202637       6.0        -14370.915771                -1.0            -1
1  -14252.713135  -14272.689697  7573.659668 -14252.713135    0.047119 -14272.689697        0.0   19.976562       18.202637       6.0        -14252.713135                 1.0         False
2  -14252.713135  -14252.713135  7611.707031 -14252.713135    0.023682 -14252.713135        0.0    0.000000      -43.750000       3.0        -14252.713135                 1.0         False
3  -14092.713135  -14140.439453  7611.707031 -14092.713135  160.000000 -14140.439453        0.0   47.726318       16.250000       1.0        -14252.713135                 1.0         False
4  -13908.963135  -14092.689697  7611.707031 -13908.963135  231.476318 -14092.689697        0.0  183.726562      100.000000       1.0        -14252.713135                 0.0         False
5  -13908.963135  -14008.963135  7611.707031 -13908.963135  181.000000 -14008.963135        0.0  100.000000        0.000000       2.0        -13908.963135                 0.0         False
6  -13908.963135  -13908.963135  7667.957031 -13908.963135   89.500000 -13908.963135        0.0    0.000000      -43.750000       3.0        -13908.963135                 1.0         False
7  -13865.213135  -13865.213135  7724.206787 -13865.213135   43.750000 -13865.213135        0.0    0.000000      -43.750244       1.0        -13865.213135                 1.0         False
8  -13636.736572  -13820.463135  7724.206787 -13636.736572  228.476562 -13820.463135        0.0  183.726562       84.726318       1.0        -13865.213135                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:44:40]  --------------------------------------------------------------------------------
[09/27 17:44:40]  Iteration: 318 (82 solution, 235 counterexamples)
[09/27 17:45:47]  Generator returned sat in 59.165859 secs.
[09/27 17:45:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:45:49]  Improved gap from 0.0 to 9.375
[09/27 17:45:49]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 17:45:49]  Verifer returned sat in 1.368607 secs.
[09/27 17:45:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14072.641846  -14273.594482  7383.807617 -14072.641846    9.516113 -14273.594482        0.0  200.952637      109.374756       3.0        -14273.594482                -1.0            -1
1  -14072.641846  -14082.016602  7383.807617 -14072.641846    9.469238 -14082.016602        0.0    9.374756        9.374756       3.0        -14072.641846                 1.0         False
2  -14072.594482  -14072.594482  7465.010498 -14072.594482    9.422119 -14072.594482        0.0    0.000000       -9.375000       1.0        -14072.594482                 1.0         False
3  -14063.219482  -14063.219482  7555.635498 -14063.219482    9.375000 -14063.219482        0.0    0.000000       -9.375000       1.0        -14063.219482                 0.0         False
4  -13852.844482  -14053.844482  7555.635498 -13852.844482  210.375000 -14053.844482        0.0  201.000000      101.000000       1.0        -14063.219482                 0.0         False
5  -13852.844482  -13953.844482  7555.635498 -13852.844482   28.172119 -13953.844482        0.0  101.000000        1.000000       2.0        -13852.844482                 0.0         False
6  -13852.844482  -13852.844482  7645.260498 -13852.844482   29.172119 -13852.844482        0.0    0.000000       -9.375000       3.0        -13852.844482                 1.0         False
7  -13822.672363  -13843.469482  7645.260498 -13822.672363   30.172119 -13843.469482        0.0   20.797119      -79.202881       1.0        -13852.844482                 1.0         False
8  -13633.094482  -13743.469482  7645.260498 -13633.094482  210.375000 -13743.469482        0.0  110.375000       10.375000       1.0        -13852.844482                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:45:50]  --------------------------------------------------------------------------------
[09/27 17:45:50]  Iteration: 319 (82 solution, 236 counterexamples)
[09/27 17:46:29]  Generator returned sat in 30.682810 secs.
[09/27 17:46:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:46:30]  Improved gap from 0.0 to 9.375
[09/27 17:46:30]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 17:46:30]  Verifer returned sat in 1.023180 secs.
[09/27 17:46:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14081.829102  -14282.016602  7383.807617 -14081.829102    0.03125 -14282.016602        0.0  200.18750       100.18750       1.0        -14282.016602                -1.0            -1
1  -14081.829102  -14082.016602  7383.807617 -14081.829102    0.03125 -14082.016602        0.0    0.18750         0.18750       2.0        -14282.016602                 0.0         False
2  -14081.829102  -14081.829102  7474.245117 -14081.829102    0.03125 -14081.829102        0.0    0.00000        -9.37500       3.0        -14282.016602                 1.0          True
3  -14072.454102  -14072.454102  7564.870117 -14072.454102    9.37500 -14072.454102        0.0    0.00000        -9.37500       1.0        -14282.016602                 1.0          True
4  -13861.891602  -13982.797852  7564.870117 -13861.891602  210.56250 -13982.797852        0.0  120.90625       101.18750       1.0        -14282.016602                 0.0         False
5  -13861.891602  -13963.079102  7564.870117 -13861.891602  100.21875 -13963.079102        0.0  101.18750         1.18750       2.0        -13861.891602                 0.0         False
6  -13861.860352  -13861.860352  7654.276367 -13861.860352  101.21875 -13861.860352        0.0    0.00000        -9.37500       1.0        -13861.891602                 1.0         False
7  -13650.266602  -13852.485352  7654.276367 -13650.266602  211.59375 -13852.485352        0.0  202.21875       102.21875       1.0        -13861.891602                 0.0         False
8  -13650.266602  -13752.485352  7654.276367 -13650.266602  131.31250 -13752.485352        0.0  102.21875         2.21875       2.0        -13650.266602                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:46:31]  --------------------------------------------------------------------------------
[09/27 17:46:31]  Iteration: 320 (82 solution, 237 counterexamples)
[09/27 17:47:23]  Generator returned sat in 43.635672 secs.
[09/27 17:47:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:47:26]  Improved gap from 0.0 to 9.375
[09/27 17:47:26]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 17:47:26]  Verifer returned sat in 2.513597 secs.
[09/27 17:47:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14635.043457  -14835.012451  7936.803223 -14635.043457  200.062500 -14835.012451        0.0  199.968994       99.968994       1.0        -14835.012451                -1.0            -1
1  -14634.949951  -14635.012451  7936.803223 -14634.949951  200.062500 -14635.012451        0.0    0.062500        0.062500       1.0        -14835.012451                 0.0         False
2  -14634.949951  -14634.949951  8027.240967 -14634.949951    0.031006 -14634.949951        0.0    0.000000       -9.499756       2.0        -14634.949951                 0.0         False
3  -14625.449951  -14625.449951  8117.865723 -14625.449951    9.500000 -14625.449951        0.0    0.000000       -9.375000       1.0        -14634.949951                 1.0         False
4  -14414.887451  -14554.449951  8117.865723 -14414.887451  210.562500 -14554.449951        0.0  139.562500      101.187500       1.0        -14634.949951                 0.0         False
5  -14414.887451  -14516.074951  8117.865723 -14414.887451   81.562500 -14516.074951        0.0  101.187500        1.187500       2.0        -14414.887451                 0.0         False
6  -14414.856201  -14414.856201  8207.271973 -14414.856201  101.218750 -14414.856201        0.0    0.000000       -9.375000       1.0        -14414.887451                 1.0         False
7  -14203.262451  -14405.481201  8207.271973 -14203.262451  211.593750 -14405.481201        0.0  202.218750      102.218750       1.0        -14414.887451                 0.0         False
8  -14203.262451  -14305.480957  8207.271973 -14203.262451  149.968750 -14305.480957        0.0  102.218506        2.218750       2.0        -14203.262451                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:47:26]  --------------------------------------------------------------------------------
[09/27 17:47:26]  Iteration: 321 (82 solution, 238 counterexamples)
[09/27 17:48:58]  Generator returned sat in 83.677413 secs.
[09/27 17:48:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:48:59]  Improved gap from 0.0 to 1.5625
[09/27 17:48:59]  Improved number of small numbers from 69 to 69 out of a max of 114
[09/27 17:48:59]  Verifer returned sat in 0.983753 secs.
[09/27 17:48:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -15005.481201  -15005.482451  8109.283223 -15005.481201    0.00125 -15005.482451    0.00000    0.00125         0.00125       2.0        -15005.482451                -1.0            -1
1  -14705.481201  -14905.484951  8109.283223 -14705.481201  300.00125 -14905.484951    0.00125  200.00250       200.00000       1.0        -15005.482451                 0.0         False
2  -14605.482451  -14805.483701  8109.283223 -14605.482451  300.00125 -14805.483701    0.00125  200.00000       199.99875       2.0        -15005.482451                 0.0         False
3  -14505.481201  -14705.482451  8109.283223 -14505.481201  300.00125 -14705.482451    0.00125  200.00000       200.00000       3.0        -15005.482451                 0.0         False
4  -14405.479951  -14605.482451  8109.283223 -14405.479951  300.00125 -14605.482451    0.00250  200.00000       200.00000       2.0        -15005.482451                 1.0          True
5  -14405.479951  -14605.482451  8109.283223 -14405.479951    0.01000 -14605.482451    0.00250  200.00000       100.00000       2.0        -14405.482451                 0.0         False
6  -14405.479951  -14406.491201  8109.283223 -14405.479951    1.01000 -14406.491201    0.00250    1.00875         0.00000       3.0        -14405.482451                 0.0         False
7  -14405.478701  -14405.481201  8207.271973 -14405.478701    1.01000 -14405.481201    0.00250    0.00000        -2.01000       1.0        -14405.482451                 1.0         False
8  -14403.468701  -14403.471201  8207.271973 -14403.468701    2.01000 -14403.471201    0.00250    0.00000      -100.00000       1.0        -14405.482451                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 17:49:00]  --------------------------------------------------------------------------------
[09/27 17:49:00]  Iteration: 322 (82 solution, 239 counterexamples)
[09/27 17:50:16]  Generator returned sat in 68.661915 secs.
[09/27 17:50:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:50:18]  Improved gap from 0.0 to 100
[09/27 17:50:18]  Improved number of small numbers from 104 to 114 out of a max of 114
[09/27 17:50:18]  Verifer returned sat in 0.717303 secs.
[09/27 17:50:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -15205.515869  -15305.609375  7907.343262 -15205.515869    0.046875 -15305.609375    0.000000  100.093506       98.046631       5.0        -15305.609375                -1.0            -1
1  -15003.609375  -15205.468750  7907.343262 -15003.609375  302.000000 -15205.468750    0.000000  201.859375      199.953125       1.0        -15305.609375                 1.0         False
2  -14903.515869  -15201.750000  7907.343262 -14903.515869  301.952881 -15201.750000    0.046631  298.187500      200.000000       2.0        -14903.562500                 0.0         False
3  -14903.515869  -15103.562500  7907.343262 -14903.515869  298.140381 -15103.562500    0.046631  200.000000      100.000000       3.0        -14903.562500                 1.0         False
4  -14903.515869  -14903.609375  7907.343262 -14903.515869  101.023438 -14903.609375    0.046631    0.046875        0.000000       3.0        -14903.562500                 1.0         False
5  -14752.633057  -14903.515625  7907.343262 -14752.633057  150.929688 -14903.515625    0.046631  150.835938       50.882812       1.0        -14903.562500                 1.0         False
6  -14603.422119  -14703.562500  7907.343262 -14603.422119  300.046875 -14703.562500    0.046631  100.093750      100.093750       1.0        -14903.562500                 0.0         False
7  -14203.468994  -14703.562500  7907.343262 -14203.468994  500.046875 -14703.562500  200.093506  300.000000      200.000000       1.0        -14903.562500                 0.0         False
8  -14203.468994  -14603.422119  7907.343262 -14203.468994  101.023438 -14603.422119  200.093506  199.859619      100.000000       2.0        -14403.562500                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=12803/64, 
.[0m
[09/27 17:50:19]  --------------------------------------------------------------------------------
[09/27 17:50:19]  Iteration: 323 (82 solution, 240 counterexamples)
[09/27 17:50:49]  Generator returned sat in 22.607615 secs.
[09/27 17:50:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 17:50:51]  Improved gap from 0.0 to 100
[09/27 17:50:52]  Improved number of small numbers from 78 to 110 out of a max of 114
[09/27 17:50:52]  Verifer returned sat in 1.650290 secs.
[09/27 17:50:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -15102.492676  -15302.492676  7907.343262 -15102.492676    0.046875 -15302.492676    0.000000  200.000000      200.000000       3.0        -15302.492676                -1.0            -1
1  -15102.492676  -15285.352051  7907.343262 -15102.492676    0.046875 -15285.352051    0.000000  182.859375      100.000000       3.0        -15302.492676                 1.0         False
2  -15102.492676  -15102.492676  7907.343262 -15102.492676  182.812988 -15102.492676    0.000000    0.000000        0.000000       3.0        -15302.492676                 1.0          True
3  -15002.445801  -15102.492676  7907.343262 -15002.445801  100.046875 -15102.492676    0.000000  100.046875        0.046875       3.0        -15002.445801                 1.0          True
4  -15002.445801  -15002.445801  7907.343262 -15002.445801  100.000000 -15002.445801    0.000000    0.000000      -99.953125       2.0        -15002.445801                 1.0         False
5  -14860.992676  -14885.492432  7907.343262 -14860.992676  141.453125 -14885.492432    0.000000   24.499756      -58.500000       1.0        -15002.445801                 1.0         False
6  -14635.539185  -14802.492432  7907.343262 -14635.539185  249.953247 -14802.492432    0.000000  166.953247       66.953491       1.0        -15002.445801                 0.0         False
7  -14402.539062  -14602.492676  7907.343262 -14402.539062  399.953369 -14602.492676    0.000000  199.953613      199.953613       1.0        -15002.445801                 0.0         False
8  -14002.562744  -14502.492676  7907.343262 -14002.562744  599.929932 -14502.492676  299.929932  200.000000      200.000000       2.0        -15002.445801                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1228513/4096, 
.[0m
[09/27 17:50:52]  --------------------------------------------------------------------------------
[09/27 17:50:52]  Iteration: 324 (82 solution, 241 counterexamples)
[09/27 17:54:22]  Generator returned sat in 202.133327 secs.
[09/27 17:54:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:54:24]  Improved gap from 0.0 to 18.75
[09/27 17:54:25]  Improved number of small numbers from 66 to 114 out of a max of 114
[09/27 17:54:25]  Verifer returned sat in 1.635462 secs.
[09/27 17:54:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -15102.492676  -15253.236328  7758.086914 -15102.492676    0.046387 -15253.236328   0.000000  150.743652       50.743652       4.0        -15253.236328                -1.0            -1
1  -15102.492676  -15102.492676  7758.086914 -15102.492676    0.046387 -15102.492676   0.000000    0.000000      -49.256348       2.0        -15253.236328                 1.0         False
2  -14802.399414  -14953.236328  7758.086914 -14802.399414  300.093262 -14953.236328   0.000000  150.836914      150.836914       1.0        -15253.236328                 1.0          True
3  -14653.189697  -14854.439453  7758.086914 -14653.189697  300.046631 -14854.439453   0.046631  201.203125      200.000000       2.0        -14653.236328                 0.0         False
4  -14653.189697  -14802.353027  7758.086914 -14653.189697  199.398438 -14802.353027   0.046631  149.116699      100.000000       2.0        -14653.236328                 1.0         False
5  -14653.189697  -14753.236328  7758.086914 -14653.189697  149.069824 -14753.236328   0.046631  100.000000        0.000000       3.0        -14653.236328                 1.0         False
6  -14653.189697  -14653.236328  7839.336914 -14653.189697   99.000000 -14653.236328   0.046631    0.000000      -18.750000       4.0        -14653.236328                 1.0         False
7  -14553.588135  -14634.486328  7839.336914 -14553.588135   99.601562 -14634.486328   0.046631   80.851562      -19.148438       1.0        -14653.236328                 1.0         False
8  -14465.572998  -14534.486084  7839.336914 -14465.572998  168.866699 -14534.486084   0.046631   68.866455      -31.133301       1.0        -14653.236328                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:54:25]  --------------------------------------------------------------------------------
[09/27 17:54:25]  Iteration: 325 (82 solution, 242 counterexamples)
[09/27 17:55:13]  Generator returned sat in 39.064383 secs.
[09/27 17:55:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:55:14]  Improved gap from 0.0 to 18.75
[09/27 17:55:14]  Improved number of small numbers from 28 to 114 out of a max of 114
[09/27 17:55:14]  Verifer returned sat in 1.131787 secs.
[09/27 17:55:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14922.901367  -14922.948242  7526.688232 -14922.901367  182.360596 -14922.948242   0.000000    0.046875       -1.063721       4.0        -14922.948242                -1.0            -1
1  -14740.587646  -14826.151611  7526.688232 -14740.587646  182.360596 -14826.151611   0.000000   85.563965       81.250000       1.0        -14922.948242                 1.0         False
2  -14740.587646  -14740.587646  7526.688232 -14740.587646   85.517578 -14740.587646   0.000000    0.000000      -18.750000       2.0        -14740.587646                 0.0         False
3  -14621.791260  -14621.837646  7526.688232 -14621.791260  118.796387 -14621.837646   0.000000    0.046387        0.046387       1.0        -14740.587646                 1.0         False
4  -14319.727051  -14621.744385  7526.688232 -14319.727051  302.110596 -14621.744385   2.110596  299.906738      200.000000       1.0        -14740.587646                 0.0         False
5  -14319.727051  -14521.837646  7526.688232 -14319.727051  103.203613 -14521.837646   2.110596  200.000000      100.000000       2.0        -14321.837646                 0.0         False
6  -14319.727051  -14421.837646  7526.688232 -14319.727051  102.203613 -14421.837646   2.110596  100.000000        0.000000       3.0        -14321.837646                 1.0         False
7  -14318.523438  -14320.634033  7606.734619 -14318.523438  101.203613 -14320.634033   2.110596    0.000000      -18.750000       1.0        -14320.634033                 1.0         False
8  -14016.413086  -14301.884033  7606.734619 -14016.413086  302.110352 -14301.884033   2.110596  283.360352      183.360352       1.0        -14320.634033                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 17:55:15]  --------------------------------------------------------------------------------
[09/27 17:55:15]  Iteration: 326 (82 solution, 243 counterexamples)
[09/27 17:57:06]  Generator returned sat in 102.475103 secs.
[09/27 17:57:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:57:09]  Improved gap from 17.366455078125 to 18.75
[09/27 17:57:09]  Improved number of small numbers from 66 to 114 out of a max of 114
[09/27 17:57:09]  Verifer returned sat in 2.425727 secs.
[09/27 17:57:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14548.733398  -14661.372803  7374.484375 -14548.733398    0.046387 -14661.372803   0.000000  112.639404       43.731934       3.0        -14661.372803                -1.0            -1
1  -14548.733398  -14548.756592  7374.484375 -14548.733398    0.023193 -14548.756592   0.000000    0.023193      -56.268066       3.0        -14548.733398                 1.0         False
2  -14192.442139  -14392.465332  7374.484375 -14192.442139  356.314453 -14392.465332   0.023193  200.000000      200.000000       1.0        -14548.733398                 1.0         False
3  -14192.442139  -14292.465576  7374.484375 -14192.442139  183.476807 -14292.465576   0.023193  100.000244      100.000000       2.0        -14192.465332                 0.0         False
4  -14108.988770  -14254.942139  7374.484375 -14108.988770  183.453613 -14254.942139   0.023193  145.930176       83.453369       3.0        -14109.011963                 1.0         False
5  -14108.988770  -14190.980957  7374.484375 -14108.988770  145.907227 -14190.980957   0.023193   81.968994      -16.546631       2.0        -14109.011963                 1.0         False
6  -14091.215576  -14091.238770  7454.507812 -14091.215576   99.742188 -14091.238770   0.023193    0.000000      -18.750000       1.0        -14091.238770                 1.0         False
7  -13888.988770  -14072.488525  7454.507812 -13888.988770  202.226807 -14072.488525   0.023193  183.476562       83.476807       1.0        -14091.238770                 0.0         False
8  -13888.988770  -13972.488525  7454.507812 -13888.988770  183.453613 -13972.488525   0.023193   83.476562      -16.523193       2.0        -13889.011963                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 17:57:10]  --------------------------------------------------------------------------------
[09/27 17:57:10]  Iteration: 327 (82 solution, 244 counterexamples)
[09/27 17:57:53]  Generator returned sat in 34.815017 secs.
[09/27 17:57:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:57:55]  Improved gap from 0.0 to 18.75
[09/27 17:57:55]  Improved number of small numbers from 63 to 114 out of a max of 114
[09/27 17:57:55]  Verifer returned sat in 1.275715 secs.
[09/27 17:57:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14192.442383  -14393.803467  7374.484375 -14192.442383  102.138916 -14393.803467   0.000000  201.361084      199.999756       3.0        -14393.803467                -1.0            -1
1  -14192.442383  -14294.534912  7374.484375 -14192.442383  102.092285 -14294.534912   0.000000  102.092529       99.999756       3.0        -14192.442383                 1.0         False
2  -14192.442383  -14192.488525  7374.484375 -14192.442383  102.046143 -14192.488525   0.000000    0.046143       -0.000244       4.0        -14192.442383                 1.0         False
3  -14093.553467  -14093.599609  7374.484375 -14093.553467   98.935059 -14093.599609   0.000000    0.046143       -1.111328       1.0        -14093.553467                 1.0         False
4  -13792.395752  -14092.442139  7374.484375 -13792.395752  301.203857 -14092.442139   0.046387  300.000000      200.000000       1.0        -14093.553467                 0.0         False
5  -13792.395752  -13892.442383  7374.484375 -13792.395752  101.046387 -13892.442383   0.046387  100.000244      100.000000       2.0        -13792.442139                 0.0         False
6  -13792.349609  -13892.442139  7374.484375 -13792.349609  100.046387 -13892.442139   0.046387  100.046143        0.046143       3.0        -13792.395996                 1.0         False
7  -13792.349609  -13792.395996  7455.687988 -13792.349609   99.046387 -13792.395996   0.046387    0.000000      -18.750244       2.0        -13792.395996                 1.0         False
8  -13694.303223  -13773.645752  7455.687988 -13694.303223   98.046387 -13773.645752   0.046387   79.296143      -20.703857       1.0        -13694.349609                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 17:57:56]  --------------------------------------------------------------------------------
[09/27 17:57:56]  Iteration: 328 (82 solution, 245 counterexamples)
[09/27 17:58:58]  Generator returned sat in 53.729100 secs.
[09/27 17:58:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 17:59:00]  Improved gap from 18.750244140625 to 18.75
[09/27 17:59:01]  Improved number of small numbers from 38 to 114 out of a max of 114
[09/27 17:59:01]  Verifer returned sat in 2.091139 secs.
[09/27 17:59:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14563.422363  -14763.376221  7374.484375 -14563.422363  200.023193 -14763.376221    0.000000  199.953857       99.977051       1.0        -14763.376221                -1.0            -1
1  -14563.376221  -14563.399658  7374.484375 -14563.376221  200.000000 -14563.399658    0.000000    0.023438        0.023193       1.0        -14563.376221                 0.0         False
2  -14363.422607  -14563.353516  7374.484375 -14363.422607  199.977051 -14563.353516    0.000000  199.930908       99.976807       1.0        -14363.422607                 0.0         False
3  -14363.376465  -14363.399414  7374.484375 -14363.376465  199.977051 -14363.399414    0.000000    0.022949        0.022949       1.0        -14363.422607                 0.0         False
4  -13962.422607  -14363.353271  7374.484375 -13962.422607  400.976807 -14363.353271  100.976807  299.953857      200.000000       1.0        -14363.422607                 0.0         False
5  -13962.422607  -14163.399658  7374.484375 -13962.422607   99.023193 -14163.399658  100.976807  100.000244      100.000000       2.0        -14063.399414                 0.0         False
6  -13962.422607  -14160.445801  7374.484375 -13962.422607   98.023193 -14160.445801  100.976807   97.046387        0.000000       3.0        -14063.399414                 1.0         False
7  -13962.422607  -14063.399414  7455.734375 -13962.422607   97.023193 -14063.399414  100.976807    0.000000      -18.750000       4.0        -14063.399414                 1.0         False
8  -13866.399414  -14044.649414  7455.734375 -13866.399414   96.023193 -14044.649414  100.976807   77.273193      -22.726807       1.0        -13967.376221                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 17:59:01]  --------------------------------------------------------------------------------
[09/27 17:59:01]  Iteration: 329 (82 solution, 246 counterexamples)
[09/27 18:00:12]  Generator returned sat in 62.276666 secs.
[09/27 18:00:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:00:13]  Improved gap from 0.0 to 100
[09/27 18:00:14]  Improved number of small numbers from 62 to 104 out of a max of 114
[09/27 18:00:14]  Verifer returned sat in 1.346799 secs.
[09/27 18:00:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14444.025635  -14743.979248  7374.484375 -14444.025635  299.999756 -14743.979248    0.000000  299.953613      199.953613       4.0        -14743.979248                -1.0            -1
1  -14444.025635  -14543.979248  7374.484375 -14444.025635  299.953613 -14543.979248    0.000000   99.953613       99.953613       4.0        -14444.025635                 1.0         False
2  -14243.933105  -14443.979248  7374.484375 -14243.933105  300.046143 -14443.979248    0.046143  200.000000      200.000000       1.0        -14444.025635                 1.0         False
3  -14243.933105  -14343.979248  7374.484375 -14243.933105   38.244232 -14343.979248    0.046143  100.000000      100.000000       2.0        -14243.979248                 0.0         False
4  -14243.933105  -14294.002411  7374.484375 -14243.933105   75.488464 -14294.002411    0.046143   50.023163        0.000000       3.0        -14243.979248                 1.0         False
5  -14143.979340  -14243.979248  7374.484375 -14143.979340  149.976929 -14243.979248    0.046143   99.953766       -0.046234       4.0        -14243.979248                 1.0         False
6  -13944.979248  -14143.979248  7374.484375 -13944.979248  298.953857 -14143.979248    0.046143  198.953857       98.953857       1.0        -14243.979248                 1.0         False
7  -13843.979248  -13945.025635  7374.484375 -13843.979248  299.953857 -13945.025635    0.046143  101.000244       99.953857       2.0        -14243.979248                 0.0         False
8  -13346.071777  -13843.979492  7374.484375 -13346.071777  598.907715 -13843.979492  297.907471  200.000244      200.000000       1.0        -14243.979248                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=152505/512, 
.[0m
[09/27 18:00:15]  --------------------------------------------------------------------------------
[09/27 18:00:15]  Iteration: 330 (82 solution, 247 counterexamples)
[09/27 18:01:33]  Generator returned sat in 69.872918 secs.
[09/27 18:01:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:01:34]  Improved gap from 0.0 to 64.0625
[09/27 18:01:35]  Improved number of small numbers from 31 to 114 out of a max of 114
[09/27 18:01:35]  Verifer returned sat in 0.923568 secs.
[09/27 18:01:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14544.048584  -14844.048340  7474.553467 -14544.048584    0.022949 -14844.048340   0.000000  299.999756      200.000000       9.0        -14844.048340                -1.0            -1
1  -14444.025391  -14644.048584  7474.553467 -14444.025391  400.022949 -14644.048584   0.023193  200.000000      200.000000       2.0        -14844.048340                 1.0         False
2  -14344.002441  -14644.048340  7474.553467 -14344.002441  300.022949 -14644.048340   0.046143  299.999756      200.000000       3.0        -14344.048584                 0.0         False
3  -14344.002441  -14444.048584  7474.553467 -14344.002441  252.250000 -14444.048584   0.046143  100.000000      100.000000       3.0        -14344.048584                 1.0         False
4  -14317.877441  -14444.025391  7474.553467 -14317.877441  126.125000 -14444.025391   0.046143  126.101807       26.125000       3.0        -14317.923584                 1.0         False
5  -14317.877441  -14317.923584  7484.365967 -14317.877441   63.062500 -14317.923584   0.046143    0.000000      -64.062500       2.0        -14317.923584                 1.0         False
6  -14253.814941  -14253.861084  7519.303467 -14253.814941   64.062500 -14253.861084   0.046143    0.000000      -65.062500       1.0        -14317.923584                 0.0         False
7  -14188.752441  -14188.798584  7555.240723 -14188.752441   65.062500 -14188.798584   0.046143    0.000000      -64.062744       1.0        -14317.923584                 0.0         False
8  -14122.689941  -14124.735840  7555.240723 -14122.689941   66.062500 -14124.735840   0.046143    1.999756      -98.000244       1.0        -14317.923584                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:01:35]  --------------------------------------------------------------------------------
[09/27 18:01:35]  Iteration: 331 (82 solution, 248 counterexamples)
[09/27 18:04:05]  Generator returned sat in 141.450006 secs.
[09/27 18:04:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:04:08]  Improved gap from 0.0 to 25.0
[09/27 18:04:08]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/27 18:04:08]  Verifer returned sat in 2.078351 secs.
[09/27 18:04:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13687.806152  -13787.806152  6518.311035 -13687.806152    0.022949 -13787.806152        0.0  100.000000      100.000000       1.0        -13787.806152                -1.0            -1
1  -13687.806152  -13687.851807  6518.311035 -13687.806152   99.976807 -13687.851807        0.0    0.045654        0.000000       2.0        -13787.806152                 0.0         False
2  -13687.806152  -13687.806152  6593.310791 -13687.806152    0.022949 -13687.806152        0.0    0.000000      -25.000244       3.0        -13687.806152                 1.0          True
3  -13555.760254  -13565.828857  6593.310791 -13555.760254  132.045898 -13565.828857        0.0   10.068604        7.045654       1.0        -13687.806152                 1.0         False
4  -13432.782959  -13562.805908  6593.310791 -13432.782959  133.045898 -13562.805908        0.0  130.022949       30.022949       2.0        -13687.806152                 0.0         False
5  -13432.760010  -13432.760010  6638.264893 -13432.760010  130.045898 -13432.760010        0.0    0.000000      -25.000000       1.0        -13432.760010                 1.0          True
6  -13301.714111  -13407.760010  6638.264893 -13301.714111  131.045898 -13407.760010        0.0  106.045898        6.045898       1.0        -13432.760010                 0.0         False
7  -13275.714111  -13275.714111  6681.218994 -13275.714111  132.045898 -13275.714111        0.0    0.000000      -25.000000       1.0        -13432.760010                 0.0         False
8  -13142.668213  -13250.714111  6681.218994 -13142.668213  133.045898 -13250.714111        0.0  108.045898        8.045898       1.0        -13432.760010                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:04:08]  --------------------------------------------------------------------------------
[09/27 18:04:08]  Iteration: 332 (82 solution, 249 counterexamples)
[09/27 18:06:03]  Generator returned sat in 106.571822 secs.
[09/27 18:06:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:06:05]  Improved gap from 0.0 to 45.3125
[09/27 18:06:05]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 18:06:05]  Verifer returned sat in 1.078083 secs.
[09/27 18:06:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13687.806152  -13796.010254  6583.577393 -13687.806152    0.068848 -13796.010254        0.0  108.204102       99.977051       1.0        -13796.010254                -1.0            -1
1  -13687.806152  -13687.829102  6583.577393 -13687.806152    0.068848 -13687.829102        0.0    0.022949       -0.022949       2.0        -13796.010254                 0.0         False
2  -13687.783203  -13687.783203  6638.264893 -13687.783203    0.045898 -13687.783203        0.0    0.000000      -45.312500       1.0        -13687.783203                 1.0          True
3  -13566.635254  -13566.658203  6638.264893 -13566.635254  121.147949 -13566.658203        0.0    0.022949      -24.164551       1.0        -13687.783203                 0.0         False
4  -13337.306152  -13512.579102  6638.264893 -13337.306152  229.352051 -13512.579102        0.0  175.272949      105.164551       1.0        -13687.783203                 0.0         False
5  -13337.306152  -13425.954102  6638.264893 -13337.306152  175.250000 -13425.954102        0.0   88.647949        5.164551       2.0        -13337.306152                 0.0         False
6  -13337.306152  -13337.306152  6687.787842 -13337.306152   88.625000 -13337.306152        0.0    0.000000      -45.312500       3.0        -13337.306152                 1.0         False
7  -13291.993652  -13291.993652  6742.475342 -13291.993652   45.312500 -13291.993652        0.0    0.000000      -45.312500       1.0        -13291.993652                 1.0         False
8  -13071.408203  -13246.681152  6742.475342 -13071.408203  220.585449 -13246.681152        0.0  175.272949       75.272949       1.0        -13291.993652                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:06:06]  --------------------------------------------------------------------------------
[09/27 18:06:06]  Iteration: 333 (82 solution, 250 counterexamples)
[09/27 18:08:32]  Generator returned sat in 137.992953 secs.
[09/27 18:08:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:08:33]  Improved gap from 0.0 to 100
[09/27 18:08:33]  Improved number of small numbers from 83 to 114 out of a max of 114
[09/27 18:08:33]  Verifer returned sat in 0.643003 secs.
[09/27 18:08:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13766.673096  -13766.675781  6562.464844 -13766.673096    0.002686 -13766.675781    0.000000    0.002686       -0.002441       1.0        -13766.675781                -1.0            -1
1  -13666.673340  -13766.670654  6562.464844 -13666.673340  100.002441 -13766.670654    0.000000   99.997314       -0.002686       1.0        -13766.675781                 0.0         False
2  -13666.670654  -13666.670654  6562.464844 -13666.670654  100.000000 -13666.670654    0.000000    0.000000     -100.000000       1.0        -13666.670654                 0.0         False
3  -13266.668213  -13566.658447  6562.464844 -13266.668213  400.002441 -13566.658447    0.002441  299.987793      200.000000       1.0        -13666.670654                 0.0         False
4  -13266.668213  -13466.665771  6562.464844 -13266.668213    0.010000 -13466.665771    0.002441  199.995117      100.000000       2.0        -13266.670654                 0.0         False
5  -13266.668213  -13366.670654  6562.464844 -13266.668213  149.002441 -13366.670654    0.002441  100.000000        0.000000       3.0        -13266.670654                 1.0         False
6  -13217.668213  -13266.668213  6562.464844 -13217.668213  149.000000 -13266.668213    0.002441   48.997559      -51.000000       1.0        -13217.670654                 1.0         False
7  -12966.670654  -13066.670654  6562.464844 -12966.670654  299.995117 -13066.670654    0.002441   99.997559       99.997559       1.0        -13217.670654                 0.0         False
8  -12565.675537  -12966.670898  6562.464844 -12565.675537  500.992676 -12966.670898  200.995117  200.000244      200.000000       1.0        -13217.670654                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=411633/2048, 
.[0m
[09/27 18:08:34]  --------------------------------------------------------------------------------
[09/27 18:08:34]  Iteration: 334 (82 solution, 251 counterexamples)
[09/27 18:09:26]  Generator returned sat in 43.970521 secs.
[09/27 18:09:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:09:28]  Improved gap from 0.0 to 9.375
[09/27 18:09:28]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 18:09:28]  Verifer returned sat in 1.402840 secs.
[09/27 18:09:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13766.673096  -13885.423096  6662.421387 -13766.673096    0.045898 -13885.423096        0.0  118.750000       99.954102       5.0        -13885.423096                -1.0            -1
1  -13685.218994  -13766.627197  6662.421387 -13685.218994  200.204102 -13766.627197        0.0   81.408203       81.408203       1.0        -13885.423096                 1.0         False
2  -13685.218994  -13685.218994  6671.638184 -13685.218994    9.420898 -13685.218994        0.0    0.000000       -9.375000       2.0        -13685.218994                 0.0         False
3  -13675.843994  -13675.843994  6762.263184 -13675.843994    9.375000 -13675.843994        0.0    0.000000       -9.375000       1.0        -13675.843994                 1.0         False
4  -13465.264893  -13665.468994  6762.263184 -13465.264893  210.579102 -13665.468994        0.0  200.204102      101.204102       1.0        -13675.843994                 0.0         False
5  -13465.264893  -13566.468994  6762.263184 -13465.264893  102.158203 -13566.468994        0.0  101.204102        1.204102       2.0        -13465.264893                 0.0         False
6  -13465.264893  -13465.264893  6851.684082 -13465.264893  101.158203 -13465.264893        0.0    0.000000       -9.375000       3.0        -13465.264893                 1.0         False
7  -13365.106689  -13455.889893  6851.684082 -13365.106689  100.158203 -13455.889893        0.0   90.783203       -9.216797       1.0        -13365.106689                 1.0         False
8  -13245.310791  -13355.889893  6851.684082 -13245.310791  210.579102 -13355.889893        0.0  110.579102       10.579102       1.0        -13365.106689                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:09:29]  --------------------------------------------------------------------------------
[09/27 18:09:29]  Iteration: 335 (82 solution, 252 counterexamples)
[09/27 18:11:28]  Generator returned sat in 110.970355 secs.
[09/27 18:11:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:11:29]  Improved gap from 0.0 to 100
[09/27 18:11:29]  Improved number of small numbers from 96 to 98 out of a max of 114
[09/27 18:11:29]  Verifer returned sat in 0.747981 secs.
[09/27 18:11:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13766.468994  -13966.480469  6671.637939 -13766.468994    0.045898 -13966.480469    0.000000  200.011475      200.000000       1.0        -13966.480469                -1.0            -1
1  -13666.457520  -13866.468994  6671.637939 -13666.457520  300.022949 -13866.468994    0.011475  200.000000      200.000000       2.0        -13966.480469                 0.0         False
2  -13566.446045  -13866.468994  6671.637939 -13566.446045  300.011475 -13866.468994    0.022949  300.000000      200.000000       2.0        -13566.468994                 1.0          True
3  -13566.446045  -13715.594971  6671.637939 -13566.446045  100.076341 -13715.594971    0.022949  149.125977      100.000000       3.0        -13566.468994                 1.0         False
4  -13566.446045  -13666.457520  6671.637939 -13566.446045  149.114511 -13666.457520    0.022949   99.988525        0.000000       3.0        -13566.468994                 1.0         False
5  -13443.762804  -13566.468994  6671.637939 -13443.762804  222.671766 -13566.468994    0.022949  122.683241       22.683241       4.0        -13566.468994                 1.0         False
6  -13233.438395  -13400.476644  6671.637939 -13233.438395  333.007650 -13400.476644    0.022949  167.015299      133.007650       1.0        -13566.468994                 1.0         False
7  -13066.446045  -13266.469238  6671.637939 -13066.446045  334.007650 -13266.469238    0.022949  200.000244      200.000000       2.0        -13566.468994                 0.0         False
8  -12766.434814  -13233.449951  6671.637939 -12766.434814  500.011475 -13233.449951  200.034180  266.980957      200.000000       2.0        -13566.468994                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409623/2048, 
.[0m
[09/27 18:11:30]  --------------------------------------------------------------------------------
[09/27 18:11:30]  Iteration: 336 (82 solution, 253 counterexamples)
[09/27 18:12:41]  Generator returned sat in 62.744150 secs.
[09/27 18:12:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:12:43]  Improved gap from 0.0 to 9.375
[09/27 18:12:43]  Improved number of small numbers from 69 to 114 out of a max of 114
[09/27 18:12:43]  Verifer returned sat in 1.626365 secs.
[09/27 18:12:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13834.530273  -13978.155273  6671.637695 -13834.530273    0.045654 -13978.155273        0.0  143.625000       99.953857       1.0        -13978.155273                -1.0            -1
1  -13777.997070  -13834.484131  6671.637695 -13777.997070  200.158203 -13834.484131        0.0   56.487061       56.487061       1.0        -13978.155273                 0.0         False
2  -13777.997070  -13777.997070  6705.775635 -13777.997070    9.420898 -13777.997070        0.0    0.000000       -9.375000       2.0        -13777.997070                 0.0         False
3  -13768.622070  -13768.622070  6796.400635 -13768.622070    9.375000 -13768.622070        0.0    0.000000       -9.375000       1.0        -13768.622070                 1.0         False
4  -13558.088867  -13749.825928  6796.400635 -13558.088867  210.533203 -13749.825928        0.0  191.737061      101.158203       1.0        -13768.622070                 0.0         False
5  -13558.088867  -13659.247070  6796.400635 -13558.088867   85.658203 -13659.247070        0.0  101.158203        1.158203       2.0        -13558.088867                 0.0         False
6  -13558.042969  -13558.042969  6885.821533 -13558.042969  101.204102 -13558.042969        0.0    0.000000       -9.375000       1.0        -13558.088867                 1.0         False
7  -13346.463867  -13548.667969  6885.821533 -13346.463867  211.579102 -13548.667969        0.0  202.204102      102.204102       1.0        -13558.088867                 0.0         False
8  -13346.463867  -13448.667969  6885.821533 -13346.463867  202.157959 -13448.667969        0.0  102.204102        2.204102       2.0        -13346.463867                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:12:44]  --------------------------------------------------------------------------------
[09/27 18:12:44]  Iteration: 337 (82 solution, 254 counterexamples)
[09/27 18:13:45]  Generator returned sat in 53.080017 secs.
[09/27 18:13:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:13:47]  Improved gap from 0.0 to 28.125
[09/27 18:13:47]  Improved number of small numbers from 110 to 112 out of a max of 114
[09/27 18:13:47]  Verifer returned sat in 1.696352 secs.
[09/27 18:13:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13777.997070  -13877.997314  6615.150635 -13777.997070    0.083252 -13877.997314        0.0  100.000244      100.000000       1.0        -13877.997314                -1.0            -1
1  -13777.997070  -13778.163737  6615.150635 -13777.997070    0.083252 -13778.163737        0.0    0.166667        0.000000       2.0        -13877.997314                 0.0         False
2  -13777.997070  -13777.997070  6687.025635 -13777.997070    0.083252 -13777.997070        0.0    0.000000      -28.125000       3.0        -13877.997314                 1.0          True
3  -13646.705404  -13652.955404  6687.025635 -13646.705404  131.291667 -13652.955404        0.0    6.250000        3.166667       1.0        -13877.997314                 1.0          True
4  -13520.663737  -13649.872070  6687.025635 -13520.663737  132.291667 -13649.872070        0.0  129.208333       29.208333       2.0        -13877.997314                 0.0         False
5  -13520.580404  -13520.580404  6729.608968 -13520.580404  129.291667 -13520.580404        0.0    0.000000      -28.125000       1.0        -13520.580404                 1.0          True
6  -13390.288737  -13492.455404  6729.608968 -13390.288737  130.291667 -13492.455404        0.0  102.166667        2.166667       1.0        -13520.580404                 0.0         False
7  -13361.163737  -13361.163737  6770.192139 -13361.163737  131.291667 -13361.163737        0.0    0.000000      -28.125163       1.0        -13520.580404                 0.0         False
8  -13228.872070  -13333.038574  6770.192139 -13228.872070  132.291667 -13333.038574        0.0  104.166504        4.166504       1.0        -13520.580404                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:13:48]  --------------------------------------------------------------------------------
[09/27 18:13:48]  Iteration: 338 (82 solution, 255 counterexamples)
[09/27 18:15:20]  Generator returned sat in 83.584474 secs.
[09/27 18:15:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:15:22]  Improved gap from 0.0 to 45.3125
[09/27 18:15:22]  Improved number of small numbers from 94 to 114 out of a max of 114
[09/27 18:15:22]  Verifer returned sat in 1.202374 secs.
[09/27 18:15:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13877.951416  -13877.997314  6615.150635 -13877.951416    0.045654 -13877.997314        0.0    0.045898        0.045898       4.0        -13877.997314                -1.0            -1
1  -13777.997314  -13781.884277  6615.150635 -13777.997314  100.000000 -13781.884277        0.0    3.886963        0.000000       1.0        -13877.997314                 1.0         False
2  -13777.997314  -13777.997314  6669.837891 -13777.997314    0.045898 -13777.997314        0.0    0.000000      -45.312744       2.0        -13777.997314                 0.0         False
3  -13600.680420  -13648.667969  6669.837891 -13600.680420  177.316895 -13648.667969        0.0   47.987549       32.004150       1.0        -13777.997314                 1.0         False
4  -13419.338623  -13600.634277  6669.837891 -13419.338623  229.329346 -13600.634277        0.0  181.295654      113.345947       1.0        -13777.997314                 0.0         False
5  -13419.338623  -13510.009277  6669.837891 -13419.338623  181.250000 -13510.009277        0.0   90.670654       13.345947       2.0        -13419.338623                 0.0         False
6  -13419.338623  -13419.338623  6711.179443 -13419.338623   90.625000 -13419.338623        0.0    0.000000      -45.312500       3.0        -13419.338623                 1.0         False
7  -13374.026123  -13374.026123  6765.866943 -13374.026123   45.312500 -13374.026123        0.0    0.000000      -45.312500       1.0        -13374.026123                 1.0         False
8  -13147.417969  -13328.713623  6765.866943 -13147.417969  226.608154 -13328.713623        0.0  181.295654       81.295654       1.0        -13374.026123                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:15:22]  --------------------------------------------------------------------------------
[09/27 18:15:22]  Iteration: 339 (82 solution, 256 counterexamples)
[09/27 18:17:04]  Generator returned sat in 93.474083 secs.
[09/27 18:17:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:17:06]  Improved gap from 0.0 to 26.5625
[09/27 18:17:07]  Improved number of small numbers from 43 to 114 out of a max of 114
[09/27 18:17:07]  Verifer returned sat in 1.730061 secs.
[09/27 18:17:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13756.810303  -13856.799072  6355.262695 -13756.810303    0.045654 -13856.799072        0.0   99.988770       99.988770       3.0        -13856.799072                -1.0            -1
1  -13756.810303  -13756.821777  6355.262695 -13756.810303   99.988525 -13756.821777        0.0    0.011475       -0.011230       3.0        -13856.799072                 1.0         False
2  -13756.798828  -13756.798828  6427.359375 -13756.798828    0.022949 -13756.798828        0.0    0.000000      -27.903076       1.0        -13756.798828                 1.0          True
3  -13623.872803  -13631.906982  6427.359375 -13623.872803  132.926025 -13631.906982        0.0    8.034180        5.022949       1.0        -13756.798828                 0.0         False
4  -13497.980957  -13628.895752  6427.359375 -13497.980957  133.926025 -13628.895752        0.0  130.914795       30.914795       2.0        -13756.798828                 0.0         False
5  -13497.969727  -13497.969727  6469.870605 -13497.969727  130.926025 -13497.969727        0.0    0.000000      -26.562744       1.0        -13497.969727                 1.0          True
6  -13366.043701  -13471.406982  6469.870605 -13366.043701  131.926025 -13471.406982        0.0  105.363281        5.363281       1.0        -13497.969727                 0.0         False
7  -13338.480957  -13338.480957  6510.382080 -13338.480957  132.926025 -13338.480957        0.0    0.000000      -26.562500       1.0        -13497.969727                 0.0         False
8  -13204.554932  -13311.918457  6510.382080 -13204.554932  133.926025 -13311.918457        0.0  107.363525        7.363525       1.0        -13497.969727                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:17:07]  --------------------------------------------------------------------------------
[09/27 18:17:07]  Iteration: 340 (82 solution, 257 counterexamples)
[09/27 18:19:12]  Generator returned sat in 116.108676 secs.
[09/27 18:19:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:19:14]  Improved gap from 0.0 to 9.375
[09/27 18:19:14]  Improved number of small numbers from 112 to 112 out of a max of 114
[09/27 18:19:14]  Verifer returned sat in 1.836714 secs.
[09/27 18:19:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13688.216553  -13888.404053  6355.262695 -13688.216553    0.062500 -13888.404053        0.0  200.187500       100.18750       2.0        -13888.404053                -1.0            -1
1  -13688.216553  -13688.404053  6355.262695 -13688.216553    0.031250 -13688.404053        0.0    0.187500         0.18750       3.0        -13688.216553                 1.0         False
2  -13688.216553  -13688.216553  6445.700195 -13688.216553    0.031250 -13688.216553        0.0    0.000000        -9.37500       4.0        -13688.216553                 1.0         False
3  -13678.841553  -13678.841553  6536.325195 -13678.841553    9.375000 -13678.841553        0.0    0.000000        -9.37500       1.0        -13688.216553                 1.0         False
4  -13468.279053  -13660.060303  6536.325195 -13468.279053  210.562500 -13660.060303        0.0  191.781250       101.18750       1.0        -13688.216553                 0.0         False
5  -13468.279053  -13551.351969  6536.325195 -13468.279053   29.343750 -13551.351969        0.0   83.072917         1.18750       2.0        -13468.279053                 0.0         False
6  -13468.247803  -13468.247803  6625.731445 -13468.247803   83.104167 -13468.247803        0.0    0.000000        -9.37500       1.0        -13468.279053                 1.0         False
7  -13256.654053  -13458.872803  6625.731445 -13256.654053  211.593750 -13458.872803        0.0  202.218750       102.21875       1.0        -13468.279053                 0.0         False
8  -13256.654053  -13358.872803  6625.731445 -13256.654053  202.187500 -13358.872803        0.0  102.218750         2.21875       2.0        -13256.654053                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:19:15]  --------------------------------------------------------------------------------
[09/27 18:19:15]  Iteration: 341 (82 solution, 258 counterexamples)
[09/27 18:20:56]  Generator returned sat in 92.589456 secs.
[09/27 18:20:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:20:57]  Improved gap from 0.0 to 1.5625
[09/27 18:20:57]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/27 18:20:57]  Verifer returned sat in 0.462691 secs.
[09/27 18:20:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14068.248047  -14068.293701  6355.262695 -14068.248047    0.045654 -14068.293701   0.000000    0.045654        0.045654       9.0        -14068.293701                -1.0            -1
1  -13768.339355  -13968.293701  6355.262695 -13768.339355  299.954346 -13968.293701   0.000000  199.954346      199.954346       1.0        -14068.293701                 1.0         False
2  -13768.339355  -13968.293701  6355.262695 -13768.339355  199.908691 -13968.293701   0.000000  199.954346       99.954346       1.0        -13768.339355                 0.0         False
3  -13669.248047  -13768.293701  6355.262695 -13669.248047  299.045654 -13768.293701   0.000000   99.045654       99.045654       1.0        -13768.339355                 0.0         False
4  -13468.248047  -13669.202393  6355.262695 -13468.248047  300.045654 -13669.202393   0.045654  200.908691      200.000000       1.0        -13768.339355                 0.0         False
5  -13468.248047  -13668.293701  6355.262695 -13468.248047    1.000000 -13668.293701   0.045654  200.000000      100.000000       2.0        -13468.293701                 0.0         False
6  -13468.248047  -13468.339355  6355.262695 -13468.248047    1.000000 -13468.339355   0.045654    0.045654        0.000000       3.0        -13468.293701                 1.0         False
7  -13467.293701  -13467.339355  6452.308350 -13467.293701    1.000000 -13467.339355   0.045654    0.000000       -2.000000       1.0        -13468.293701                 1.0         False
8  -13465.293701  -13465.339355  6452.308350 -13465.293701    2.000000 -13465.339355   0.045654    0.000000     -100.000000       1.0        -13468.293701                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 18:20:58]  --------------------------------------------------------------------------------
[09/27 18:20:58]  Iteration: 342 (82 solution, 259 counterexamples)
[09/27 18:22:55]  Generator returned sat in 108.097299 secs.
[09/27 18:22:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:22:56]  Improved gap from 0.0 to 0
[09/27 18:22:57]  Improved number of small numbers from 68 to 89 out of a max of 114
[09/27 18:22:57]  Verifer returned sat in 1.752399 secs.
[09/27 18:22:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14925.258789  -14925.261230  6355.262451 -14925.258789    0.001465 -14925.261230    0.00000    0.002441        0.001377       1.0        -14925.261230                -1.0            -1
1  -14925.258789  -14925.260010  6355.262451 -14925.258789    0.002441 -14925.260010    0.00000    0.001221      -99.998623       2.0        -14925.261230                 0.0         False
2  -14625.261230  -14825.260166  6355.262451 -14625.261230  299.998779 -14825.260166    0.00000  199.998936       99.998936       1.0        -14925.261230                 1.0          True
3  -14526.258916  -14625.260166  6355.262451 -14526.258916  299.001250 -14625.260166    0.00000   99.001250       99.001250       1.0        -14526.258916                 0.0         False
4  -14325.258916  -14525.260254  6355.262451 -14325.258916  300.001250 -14525.260254    0.00125  200.000088      200.000000       1.0        -14526.258916                 0.0         False
5  -14325.258916  -14425.260254  6355.262451 -14325.258916    0.010000 -14425.260254    0.00125  100.000088      100.000000       2.0        -14325.260166                 0.0         False
6  -14325.258916  -14325.271240  6355.262451 -14325.258916    0.010000 -14325.271240    0.00125    0.011074        0.000000       3.0        -14325.260166                 1.0         False
7  -14325.258916  -14325.260166  6455.262207 -14325.258916    0.010000 -14325.260166    0.00125    0.000000       -0.000244       4.0        -14325.260166                 1.0         False
8  -14325.248916  -14325.250244  6455.262207 -14325.248916    0.010000 -14325.250244    0.00125    0.000078      -99.990244       1.0        -14325.260166                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=1, loss_amount=0, 
.[0m
[09/27 18:22:58]  --------------------------------------------------------------------------------
[09/27 18:22:58]  Iteration: 343 (82 solution, 260 counterexamples)
[09/27 18:24:12]  Generator returned sat in 65.613443 secs.
[09/27 18:24:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:14]  Improved gap from 0.0 to 0
[09/27 18:24:14]  Improved number of small numbers from 73 to 114 out of a max of 114
[09/27 18:24:14]  Verifer returned sat in 1.504775 secs.
[09/27 18:24:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -14524.304443  -14624.259033  6355.262451 -14524.304443    0.045654 -14624.259033        0.0   99.954590       99.954346       1.0        -14624.259033                -1.0            -1
1  -14524.259033  -14624.258789  6355.262451 -14524.259033  100.000000 -14624.258789        0.0   99.999756       -0.000244       2.0        -14624.259033                 0.0         False
2  -14324.213379  -14524.258789  6355.262451 -14324.213379  300.045410 -14524.258789        0.0  200.045410      100.045410       1.0        -14624.259033                 1.0          True
3  -14324.213379  -14424.258789  6355.262451 -14324.213379  100.000000 -14424.258789        0.0  100.045410        0.045410       2.0        -14324.213379                 0.0         False
4  -14324.213379  -14324.213379  6455.217041 -14324.213379  100.000000 -14324.213379        0.0    0.000000        0.000000       3.0        -14324.213379                 1.0         False
5  -14224.213379  -14324.213379  6455.217041 -14224.213379  100.000000 -14324.213379        0.0  100.000000        0.000000       3.0        -14324.213379                 1.0         False
6  -14224.213379  -14224.213379  6555.217041 -14224.213379  100.000000 -14224.213379        0.0    0.000000        0.000000       2.0        -14324.213379                 1.0         False
7  -14124.213379  -14224.213379  6555.217041 -14124.213379  100.000000 -14224.213379        0.0  100.000000        0.000000       2.0        -14324.213379                 1.0          True
8  -14124.213379  -14124.213379  6555.217041 -14124.213379  100.000000 -14124.213379        0.0    0.000000     -100.000000       2.0        -14324.213379                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/27 18:24:15]  --------------------------------------------------------------------------------
[09/27 18:24:15]  Iteration: 344 (82 solution, 261 counterexamples)
[09/27 18:24:29]  Generator returned unsat in 5.953088 secs.
[09/27 18:24:29]  [96mNo more solutions found[0m
[09/27 18:24:29]  Final solutions:
[09/27 18:24:29]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  31: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  32: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  33: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  34: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  35: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  36: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  37: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  38: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  39: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  40: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  41: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  42: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  43: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  44: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  45: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  46: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  47: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  48: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  49: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  50: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  51: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  52: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  53: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  54: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  55: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  56: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  57: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  58: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  59: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  60: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  61: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  62: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  63: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  64: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  65: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  66: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  67: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  68: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  69: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  70: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  71: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  72: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  73: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  74: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  75: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  76: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  77: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  78: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/27 18:24:29]  79: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  80: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  81: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/27 18:24:29]  Took 12159.608387 secs.
