[09/26 11:44:29]  --------------------------------------------------------------------------------
[09/26 11:44:29]  Iteration: 1 (0 solution, 0 counterexamples)
[09/26 11:44:29]  Generator returned sat in 0.004421 secs.
[09/26 11:44:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:44:29]  Improved gap from 0.0 to 100
[09/26 11:44:30]  Improved number of small numbers from 114 to 114 out of a max of 114
[09/26 11:44:30]  Verifer returned sat in 0.297197 secs.
[09/26 11:44:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0       -199.500        -299.50     199.5     -199.500      0.250      -299.50      0.000   100.00             0.0       8.0               -299.5                -1.0            -1
1       -199.500        -199.50     199.5     -199.500     99.750      -199.50      0.000     0.00          -100.0       8.0               -299.5                 0.0         False
2        -99.500         -99.50     199.5      -99.500    100.000       -99.50      0.000     0.00          -100.0       1.0               -299.5                 0.0         False
3        300.500          81.50     199.5      300.500    400.000        81.50      0.000   219.00           200.0       1.0               -299.5                 0.0         False
4       1644.500         100.75     199.5     1644.500   1563.000       100.75   1244.000   299.75           200.0       2.0               -299.5                 0.0         False
5       4621.875         200.50     199.5     4621.875   3277.125       200.50   4121.375   300.00           200.0       3.0               -299.5                 0.0         False
6      11027.125         300.50     199.5    11027.125   6705.250       300.50  10426.625   300.00           200.0       4.0               -299.5                 0.0         False
7      24248.125         500.50     199.5    24248.125  13521.000       500.50  23547.625   200.00           200.0       3.0               -299.5                 0.0         False
8      51291.000         500.75     199.5    51291.000  27242.875       500.75  50490.500   299.75           200.0       3.0               -299.5                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=98493/2, 
.[0m
[09/26 11:44:30]  --------------------------------------------------------------------------------
[09/26 11:44:30]  Iteration: 2 (0 solution, 1 counterexamples)
[09/26 11:44:30]  Generator returned sat in 0.069353 secs.
[09/26 11:44:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:31]  Improved number of small numbers from 32 to 113 out of a max of 113
[09/26 11:44:31]  Verifer returned sat in 0.436986 secs.
[09/26 11:44:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     699.198730     699.073730 -699.198975   699.198730    0.062500   699.073730    0.000000    0.125000        0.000000       6.0            699.07373                -1.0            -1
1     699.198730     699.198730 -699.198975   699.198730    0.062500   699.198730    0.000000    0.000000     -100.000000       5.0            699.07373                 1.0         False
2     799.698975     799.698730 -699.198975   799.698975  100.500244   799.698730    0.000000    0.000244      -99.499756       1.0            699.07373                 1.0          True
3    1199.198730     899.761230 -699.198975  1199.198730  399.500000   899.761230    0.000000  299.437500      200.000000       1.0            699.07373                 0.0         False
4    1299.198730    1099.198730 -699.198975  1299.198730  399.437500  1099.198730    0.000000  200.000000      200.000000       2.0           1299.19873                 0.0         False
5    1697.917480    1099.261230 -699.198975  1697.917480  598.718750  1099.261230  298.718750  299.937500      200.000000       3.0           1299.19873                 0.0         False
6    1697.917480    1249.729980 -699.198975  1697.917480    1.000000  1249.729980  298.718750  149.468750      100.000000       3.0           1399.19873                 0.0         False
7    1897.917480    1399.198730 -699.198975  1897.917480  349.468750  1399.198730  298.718750  200.000000      200.000000       3.0           1399.19873                 0.0         False
8    2171.651855    1399.260986 -699.198975  2171.651855  473.734375  1399.260986  472.453125  299.937744      200.000000       2.0           1399.19873                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=30237/64, 
.[0m
[09/26 11:44:31]  --------------------------------------------------------------------------------
[09/26 11:44:31]  Iteration: 3 (0 solution, 2 counterexamples)
[09/26 11:44:31]  Generator returned sat in 0.100919 secs.
[09/26 11:44:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:32]  Improved number of small numbers from 95 to 99 out of a max of 113
[09/26 11:44:32]  Verifer returned sat in 0.605839 secs.
[09/26 11:44:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     800.196045     700.198730 -700.199219   800.196045   99.999756   700.198730    0.00000   99.997314       99.997070       2.0            700.19873                -1.0            -1
1     800.198730     800.198730 -700.198975   800.198730  100.000000   800.198730    0.00000    0.000000        0.000000       1.0            700.19873                 0.0         False
2    1000.193848     899.193730 -700.198975  1000.193848  199.995117   899.193730    0.00000  101.000117       99.995117       1.0            700.19873                 0.0         False
3    1200.196230    1000.196230 -700.198975  1200.196230  301.002500  1000.196230    0.00000  200.000000      199.997500       1.0            700.19873                 0.0         False
4    1300.198730    1000.198730 -700.198975  1300.198730  300.002500  1000.198730    0.00000  300.000000      200.000000       2.0           1300.19873                 0.0         False
5    1300.198730    1200.196230 -700.198975  1300.198730  299.002500  1200.196230    0.00000  100.002500      100.000000       3.0           1300.19873                 0.0         False
6    1951.702480    1300.198486 -700.198975  1951.702480  751.506250  1300.198486  451.50375  200.000244      200.000000       3.0           1300.19873                 1.0         False
7    1951.702480    1300.198730 -700.198975  1951.702480    0.010000  1300.198730  451.50375  200.000000      100.000000       4.0           1500.19873                 1.0         False
8    2202.712480    1400.198730 -700.198975  2202.712480  451.010000  1400.198730  502.51375  300.000000      200.000000       3.0           1500.19873                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=402011/800, 
.[0m
[09/26 11:44:33]  --------------------------------------------------------------------------------
[09/26 11:44:33]  Iteration: 4 (0 solution, 3 counterexamples)
[09/26 11:44:33]  Generator returned sat in 0.083590 secs.
[09/26 11:44:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:33]  Improved number of small numbers from 113 to 113 out of a max of 113
[09/26 11:44:33]  Verifer returned sat in 0.188472 secs.
[09/26 11:44:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     600.198486     500.323242 -700.198975   600.198486  200.000000   500.323242    0.000000   99.875244       99.875244       4.0           500.323242                -1.0            -1
1     700.198486     600.323242 -700.198975   700.198486  199.875244   600.323242    0.000000   99.875244       99.875244       1.0           700.198486                 0.0         False
2     800.198486     700.323242 -700.198975   800.198486  199.875244   700.323242    0.000000   99.875244       99.875244       1.0           700.198486                 0.0         False
3    1100.323242     800.323242 -700.198975  1100.323242  400.000000   800.323242  100.000000  200.000000      200.000000       1.0           700.198486                 0.0         False
4    1300.323242     900.323242 -700.198975  1300.323242  400.000000   900.323242  200.000000  200.000000      200.000000       2.0           700.198486                 0.0         False
5    1500.323242     900.447998 -700.198975  1500.323242  400.000000   900.447998  300.000000  299.875244      200.000000       3.0           700.198486                 0.0         False
6    1600.447998    1100.198486 -700.198975  1600.447998  400.000000  1100.198486  300.124756  200.124756      200.000000       3.0           700.198486                 0.0         False
7    1800.323242    1100.323242 -700.198975  1800.323242  400.000000  1100.323242  400.000000  300.000000      200.000000       4.0           700.198486                 0.0         False
8    1900.323242    1200.447998 -700.198975  1900.323242  400.000000  1200.447998  400.000000  299.875244      200.000000       3.0           700.198486                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=200, 
.[0m
[09/26 11:44:34]  --------------------------------------------------------------------------------
[09/26 11:44:34]  Iteration: 5 (0 solution, 4 counterexamples)
[09/26 11:44:34]  Generator returned sat in 0.017006 secs.
[09/26 11:44:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:34]  Improved gap from 0.0 to 0
[09/26 11:44:35]  Improved number of small numbers from 61 to 72 out of a max of 114
[09/26 11:44:35]  Verifer returned sat in 0.846498 secs.
[09/26 11:44:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     900.310742     700.310547 -1100.159219   900.310742    0.002686   700.310547        0.0  200.000195      200.000000       9.0           700.310547                -1.0            -1
1    1000.308105     800.310742 -1100.159219  1000.308105  299.997559   800.310742        0.0  199.997363      199.997363       8.0           700.310547                 1.0         False
2    1000.310742     900.308105 -1100.159219  1000.310742  200.000000   900.308105        0.0  100.002637      100.000000       7.0          1000.310742                 1.0          True
3    1000.310742     900.310742 -1100.159219  1000.310742    0.997500   900.310742        0.0  100.000000        0.000000       8.0          1000.310742                 1.0         False
4    1000.310742    1000.310742 -1000.159424  1000.310742    0.995000  1000.310742        0.0    0.000000       -0.000205       3.0          1000.310742                 1.0         False
5    1000.320742    1000.320742  -900.169434  1000.320742    0.010000  1000.320742        0.0    0.000000       -0.000215       1.0          1000.320742                 0.0         False
6    1000.330742    1000.330742  -800.189209  1000.330742    0.010000  1000.330742        0.0    0.000000       -0.009990       1.0          1000.320742                 0.0         False
7    1000.340742    1000.340742  -700.199219  1000.340742    0.010000  1000.340742        0.0    0.000000       -0.010000       1.0          1000.320742                 0.0         False
8    1000.350742    1000.350742  -700.199219  1000.350742    0.010000  1000.350742        0.0    0.000000     -100.000000       1.0          1000.320742                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:44:35]  --------------------------------------------------------------------------------
[09/26 11:44:35]  Iteration: 6 (0 solution, 5 counterexamples)
[09/26 11:44:36]  Generator returned sat in 0.342330 secs.
[09/26 11:44:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:36]  Improved gap from 0.0 to 100
[09/26 11:44:38]  Improved number of small numbers from 68 to 92 out of a max of 114
[09/26 11:44:38]  Verifer returned sat in 1.727182 secs.
[09/26 11:44:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     102.274170     -97.724365 -302.124219   102.274170    0.003418   -97.724365    0.000000  199.998535      199.998428       1.0           -97.724365                -1.0            -1
1     102.274170       2.275635 -302.124219   102.274170    0.001709     2.275635    0.000000   99.998535       99.998428       2.0           102.274170                 0.0         False
2     302.274170     102.275742 -302.124219   302.274170  299.998535   102.275742    0.000000  199.998428      199.998428       1.0           102.274170                 1.0         False
3     302.274170     102.277409 -302.124219   302.274170  199.996826   102.277409    0.000000  199.996761       99.998428       2.0           302.274170                 0.0         False
4     302.274170     302.272409 -302.124219   302.274170    0.010000   302.272409    0.000000    0.001761       -0.001572       3.0           302.274170                 1.0         False
5     302.282409     302.280742 -302.124219   302.282409    0.010000   302.280742    0.000000    0.001667      -99.993333       1.0           302.274170                 1.0         False
6     501.305742     423.647409 -302.124219   501.305742  199.025000   423.647409    0.000000   77.658333       -0.970000       1.0           302.274170                 0.0         False
7    1142.067409     602.275742 -302.124219  1142.067409  718.420000   602.275742  339.791667  200.000000      200.000000       1.0           302.274170                 0.0         False
8    1302.277409     702.275635 -302.124219  1302.277409  360.210000   702.275635  400.001667  200.000107      200.000000       2.0           902.275742                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=240001/600, 
.[0m
[09/26 11:44:38]  --------------------------------------------------------------------------------
[09/26 11:44:38]  Iteration: 7 (0 solution, 6 counterexamples)
[09/26 11:44:38]  Generator returned sat in 0.056188 secs.
[09/26 11:44:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:39]  Improved gap from 0.0 to 100
[09/26 11:44:40]  Improved number of small numbers from 59 to 83 out of a max of 114
[09/26 11:44:40]  Verifer returned sat in 1.236094 secs.
[09/26 11:44:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     202.270752      70.263428 -470.111997   202.270752    0.001709    70.263428    0.000000  132.007324      132.007232       1.0            70.263428                -1.0            -1
1     202.270752     170.263428 -470.111997   202.270752    0.001709   170.263428    0.000000   32.007324       32.007232       2.0            70.263428                 0.0         False
2     470.261963     202.272409 -470.111997   470.261963  299.998535   202.272409    0.000000  267.989554      199.998443       1.0            70.263428                 1.0          True
3     470.261963     270.263520 -470.111997   470.261963    0.001667   270.263520    0.000000  199.998443       99.998443       2.0           470.261963                 0.0         False
4     470.261963     470.255187 -470.111997   470.261963    0.010000   470.255187    0.000000    0.006776       -0.001557       3.0           470.261963                 1.0         False
5     470.265187     470.263520 -470.111997   470.265187    0.010000   470.263520    0.000000    0.001667      -99.998333       1.0           470.261963                 1.0         False
6     737.264631     670.263520 -470.111997   737.264631  267.001111   670.263520    0.000000   67.001111       67.001111       1.0           470.261963                 0.0         False
7    1336.264631     770.263520 -470.111997  1336.264631  666.001111   770.263520  366.001111  200.000000      200.000000       1.0           470.261963                 0.0         False
8    1470.265187     770.265381 -470.111997  1470.265187  334.000556   770.265381  400.001667  299.998139      200.000000       2.0          1070.263520                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=240001/600, 
.[0m
[09/26 11:44:40]  --------------------------------------------------------------------------------
[09/26 11:44:40]  Iteration: 8 (0 solution, 7 counterexamples)
[09/26 11:44:41]  Generator returned sat in 0.197236 secs.
[09/26 11:44:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:44:41]  Improved gap from 0.0 to 100
[09/26 11:44:42]  Improved number of small numbers from 77 to 96 out of a max of 114
[09/26 11:44:42]  Verifer returned sat in 0.875229 secs.
[09/26 11:44:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -131.732031    -131.734375 -268.116445  -131.732031    0.001221  -131.734375       0.00    0.002344        0.000000       1.0          -131.734375                -1.0            -1
1    -131.732031    -131.732031 -268.116445  -131.732031    0.001250  -131.732031       0.00    0.000000     -100.000000       2.0          -131.734375                 0.0         False
2      68.267969      68.266846 -268.116445    68.267969  200.000000    68.266846       0.00    0.001123        0.000000       1.0          -131.734375                 1.0          True
3     368.259277      68.267969 -268.116445   368.259277  299.992432    68.267969       0.00  299.991309      199.991309       2.0          -131.734375                 0.0         False
4     368.259277     168.267969 -268.116445   368.259277    0.010000   168.267969       0.00  199.991309       99.991309       2.0           368.259277                 1.0          True
5     368.259277     368.259219 -268.116445   368.259277    0.010000   368.259219       0.00    0.000059       -0.008691       3.0           368.259277                 1.0         False
6     368.269219     368.267969 -268.116445   368.269219    0.010000   368.267969       0.00    0.001250      -99.998750       1.0           368.259277                 1.0         False
7     669.277969     568.267969 -268.116445   669.277969  301.010000   568.267969       0.00  101.010000      101.010000       1.0           368.259277                 0.0         False
8    1270.277969     568.267969 -268.116445  1270.277969  702.010000   568.267969     402.01  300.000000      200.000000       1.0           368.259277                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=40201/100, 
.[0m
[09/26 11:44:42]  --------------------------------------------------------------------------------
[09/26 11:44:42]  Iteration: 9 (0 solution, 8 counterexamples)
[09/26 11:44:43]  Generator returned sat in 0.142324 secs.
[09/26 11:44:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:44:45]  Improved gap from 0.0 to 6.25
[09/26 11:44:46]  Improved number of small numbers from 51 to 58 out of a max of 114
[09/26 11:44:46]  Verifer returned sat in 3.182058 secs.
[09/26 11:44:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     138.423096     138.361007 -268.116455   138.423096    0.124512   138.361007    0.000000    0.062089        0.062079       1.0           138.361007                -1.0            -1
1     138.485519     138.485519 -174.490967   138.485519    0.124512   138.485519    0.000000    0.000000       -6.250010       1.0           138.361007                 0.0         False
2     144.797775     144.797775  -80.803213   144.797775    6.312256   144.797775    0.000000    0.000000       -6.250000       1.0           138.361007                 0.0         False
3     151.047775     151.047775   12.946777   151.047775    6.250000   151.047775    0.000000    0.000000       -6.250010       1.0           151.047775                 0.0         False
4     180.546310     180.546310   83.448252   180.546310   29.498535   180.546310    0.000000    0.000000       -6.250000       1.0           151.047775                 0.0         False
5     280.417159     186.796310   83.448252   280.417159   99.870850   186.796310    0.000000   93.620850       -6.379150       1.0           151.047775                 0.0         False
6     321.728805     286.796310   83.448252   321.728805  134.932495   286.796310    0.000000   34.932495      -65.067505       1.0           151.047775                 0.0         False
7     626.759628     486.796310   83.448252   626.759628  339.963318   486.796310    0.000000  139.963318      139.963318       1.0           151.047775                 0.0         False
8    1270.277969     586.796143   83.448252  1270.277969  783.481659   586.796143  483.481659  200.000167      200.000000       2.0           151.047775                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=15842727/32768, 
.[0m
[09/26 11:44:46]  --------------------------------------------------------------------------------
[09/26 11:44:46]  Iteration: 10 (0 solution, 9 counterexamples)
[09/26 11:44:47]  Generator returned sat in 0.759500 secs.
[09/26 11:44:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:44:48]  Improved gap from 0.0 to 100
[09/26 11:44:49]  Improved number of small numbers from 26 to 40 out of a max of 114
[09/26 11:44:49]  Verifer returned sat in 1.883868 secs.
[09/26 11:44:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1629.148682   -1629.272949  1399.517752 -1629.148682  299.875488 -1629.272949    0.000000    0.124268      -99.875491       8.0         -1629.272949                -1.0            -1
1   -1329.397461   -1429.273190  1399.517752 -1329.397461  299.875488 -1429.273190    0.000000   99.875729       99.875729       1.0         -1629.272949                 1.0         False
2   -1229.397580   -1329.273190  1399.517752 -1229.397580  199.875610 -1329.273190    0.000000   99.875610       99.875610       1.0         -1229.397580                 0.0         False
3    -928.397580   -1229.273190  1399.517752  -928.397580  400.875610 -1229.273190  100.875610  200.000000      200.000000       1.0         -1229.397580                 0.0         False
4    -927.959775   -1179.725934  1399.517752  -927.959775  200.437805 -1179.725934  100.875610  150.890549      100.437805       2.0         -1028.835385                 0.0         False
5    -279.099103   -1129.273190  1399.517752  -279.099103  799.751221 -1129.273190  550.174088  300.000000      200.000000       3.0         -1028.835385                 0.0         False
6    -179.223492   -1028.835385  1399.517752  -179.223492  399.875610 -1028.835385  550.174088  299.437805      199.875610       3.0          -729.397580                 1.0         False
7     -77.785687    -829.273190  1399.517752   -77.785687  400.875610  -829.273190  551.487503  200.000000      200.000000       3.0          -729.397580                 1.0         False
8     -77.347882    -829.272949  1399.517752   -77.347882  200.437805  -829.272949  551.487503  200.437564      100.437805       3.0          -628.835385                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=29531301/65536, 
.[0m
[09/26 11:44:50]  --------------------------------------------------------------------------------
[09/26 11:44:50]  Iteration: 11 (0 solution, 10 counterexamples)
[09/26 11:44:51]  Generator returned sat in 0.465545 secs.
[09/26 11:44:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:51]  Improved gap from 0.01 to 1.5625
[09/26 11:44:53]  Improved number of small numbers from 33 to 48 out of a max of 114
[09/26 11:44:53]  Verifer returned sat in 1.701800 secs.
[09/26 11:44:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -704.791484   -1004.104492  1399.517752  -704.791484  198.437500 -1004.104492  100.87561  198.437398       98.437500       2.0         -1004.104492                -1.0            -1
1    -704.791484    -805.667094  1399.517752  -704.791484  198.423340  -805.667094  100.87561    0.000000       -1.562500       2.0          -805.667094                 0.0         False
2    -403.228984    -704.104736  1399.517752  -403.228984  301.562500  -704.104736  100.87561  200.000142      200.000000       1.0          -805.667094                 0.0         False
3    -403.228984    -604.104736  1399.517752  -403.228984    1.971193  -604.104736  100.87561  100.000142      100.000000       2.0          -504.104594                 0.0         False
4    -403.228984    -604.090088  1399.517752  -403.228984    1.956790  -604.090088  100.87561   99.985493        0.000000       3.0          -504.104594                 0.0         False
5    -403.228984    -504.104594  1497.955078  -403.228984    1.935185  -504.104594  100.87561    0.000000       -1.562674       4.0          -504.104594                 0.0         False
6    -401.326206    -502.201817  1596.052246  -401.326206    1.902778  -502.201817  100.87561    0.000000       -1.562728       1.0          -502.201817                 0.0         False
7    -399.472040    -500.347650  1693.979736  -399.472040    1.854167  -500.347650  100.87561    0.000000       -1.781071       1.0          -500.347650                 0.0         False
8    -397.690790    -498.566406  1693.979736  -397.690790    1.781250  -498.566406  100.87561    0.000006      -99.999821       1.0          -498.566400                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:44:53]  --------------------------------------------------------------------------------
[09/26 11:44:53]  Iteration: 12 (0 solution, 11 counterexamples)
[09/26 11:44:55]  Generator returned sat in 1.177716 secs.
[09/26 11:44:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:44:55]  Improved gap from 0.0 to 100
[09/26 11:44:56]  Improved number of small numbers from 49 to 53 out of a max of 114
[09/26 11:44:56]  Verifer returned sat in 1.474895 secs.
[09/26 11:44:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -703.415283    -907.508586  1497.955078  -703.415283  304.279541  -907.508586    0.000000  204.093303      199.937968       2.0          -907.508586                -1.0            -1
1    -603.291118    -807.539653  1497.955078  -603.291118  304.217468  -807.539653    0.062134  204.186401      200.000000       2.0          -603.353252                 0.0         False
2    -507.353252    -703.353252  1497.955078  -507.353252  300.124268  -703.353252    0.062134  195.937866      195.937866       2.0          -507.415385                 0.0         False
3    -403.228984    -703.291118  1497.955078  -403.228984  300.062134  -703.291118    0.124268  299.937866      200.000000       3.0          -403.353252                 0.0         False
4    -293.731914    -603.353252  1497.955078  -293.731914  409.434937  -603.353252    9.621338  300.000000      200.000000       4.0          -403.353252                 0.0         False
5    -184.359111    -499.166850  1497.955078  -184.359111  409.372803  -499.166850   18.994141  295.813599      200.000000       3.0          -203.353252                 1.0         False
6     -70.799907    -403.291118  1497.955078   -70.799907  409.372803  -403.291118   32.553345  299.937866      200.000000       3.0          -203.353252                 0.0         False
7     230.262227    -303.291118  1497.955078   230.262227  601.000000  -303.291118  233.615479  299.937866      200.000000       3.0          -203.353252                 0.0         False
8     531.448628    -203.353252  1497.955078   531.448628  601.124268  -203.353252  434.801880  300.000000      200.000000       4.0          -203.353252                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=3483079/8192, 
.[0m
[09/26 11:44:57]  --------------------------------------------------------------------------------
[09/26 11:44:57]  Iteration: 13 (0 solution, 12 counterexamples)
[09/26 11:44:58]  Generator returned sat in 0.924028 secs.
[09/26 11:44:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:44:59]  Improved number of small numbers from 65 to 85 out of a max of 113
[09/26 11:44:59]  Verifer returned sat in 0.771777 secs.
[09/26 11:44:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -607.365723    -807.365723  1497.955078  -607.365723  304.279785  -807.365723    0.00000  200.000000      199.999805       2.0          -807.365723                -1.0            -1
1    -507.368164    -773.357194  1497.955078  -507.368164  299.997559  -773.357194    0.00000  265.989030      199.997363       2.0          -507.368164                 0.0         False
2    -507.368164    -607.365527  1497.955078  -507.368164  265.986816  -607.365527    0.00000   99.997363       99.997363       2.0          -507.368164                 0.0         False
3    -307.363027    -607.365479  1497.955078  -307.363027  300.002500  -607.365479    0.00250  299.999951      200.000000       3.0          -507.368164                 0.0         False
4    -307.363027    -507.365527  1497.955078  -307.363027    0.010000  -507.365527    0.00250  200.000000      100.000000       2.0          -307.365527                 1.0         False
5    -107.365527    -307.365527  1497.955078  -107.365527  399.997500  -307.365527    0.00250  199.997500      199.997500       3.0          -307.365527                 0.0         False
6     291.633223    -307.365479  1497.955078   291.633223  598.996250  -307.365479  298.99875  299.999951      200.000000       2.0          -307.365527                 1.0         False
7     291.633223    -107.365527  1497.955078   291.633223    0.010000  -107.365527  298.99875  100.000000      100.000000       2.0            -7.365527                 0.0         False
8     792.643223    -107.365479  1497.955078   792.643223  601.010000  -107.365479  600.00875  299.999951      200.000000       3.0            -7.365527                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=96001/160, 
.[0m
[09/26 11:44:59]  --------------------------------------------------------------------------------
[09/26 11:44:59]  Iteration: 14 (0 solution, 13 counterexamples)
[09/26 11:45:00]  Generator returned sat in 0.241199 secs.
[09/26 11:45:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:45:01]  Improved gap from 0.0 to 100
[09/26 11:45:02]  Improved number of small numbers from 59 to 74 out of a max of 114
[09/26 11:45:02]  Verifer returned sat in 1.555679 secs.
[09/26 11:45:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0    -616.363037    -916.361572  1797.933828  -616.363037    0.001250  -916.361572    0.000000  299.998535      199.998740       2.0          -916.361572                -1.0            -1
1    -516.362793    -816.361572  1797.933828  -516.362793  399.998779  -816.361572    0.000000  299.998779      199.998984       2.0          -916.361572                 0.0         False
2    -516.359131    -616.361777  1797.933828  -516.359131  300.002441  -616.361777    0.000000  100.002646      100.002646       2.0          -516.359131                 0.0         False
3    -316.360527    -516.363027  1797.933828  -316.360527  300.001250  -516.363027    0.001250  200.001250      200.000000       3.0          -316.361777                 0.0         False
4    -316.360527    -516.361777  1797.933828  -316.360527    0.010000  -516.361777    0.001250  200.000000      100.000000       3.0          -316.361777                 1.0         False
5    -316.360527    -316.361777  1797.933828  -316.360527    1.000000  -316.361777    0.001250    0.000000        0.000000       3.0          -316.361777                 1.0         False
6    -315.360527    -315.361777  1797.933828  -315.360527    1.000000  -315.361777    0.001250    0.000000      -99.000000       1.0          -316.361777                 1.0         False
7     -11.858652    -116.361777  1797.933828   -11.858652  303.501875  -116.361777    0.001250  104.501875      104.501875       1.0          -316.361777                 0.0         False
8     788.141348     -16.361816  1797.933828   788.141348  904.501875   -16.361816  604.503125  200.000039      200.000000       2.0          -316.361777                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=967203/1600, 
.[0m
[09/26 11:45:02]  --------------------------------------------------------------------------------
[09/26 11:45:02]  Iteration: 15 (0 solution, 14 counterexamples)
[09/26 11:45:04]  Generator returned sat in 1.198744 secs.
[09/26 11:45:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:45:04]  Improved gap from 0.01 to 100
[09/26 11:45:05]  Improved number of small numbers from 70 to 72 out of a max of 114
[09/26 11:45:05]  Verifer returned sat in 1.269710 secs.
[09/26 11:45:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -1016.637939   -1016.693685  1998.154625 -1016.637939    0.166504 -1016.693685    0.000000    0.055745       -0.055366       2.0         -1016.693685                -1.0            -1
1   -1016.582574   -1016.582574  1998.154625 -1016.582574    0.111111 -1016.582574    0.000000    0.000000     -100.000000       1.0         -1016.582574                 0.0         False
2    -916.582574    -916.582574  1998.154625  -916.582574  100.000000  -916.582574    0.000000    0.000000     -100.000000       1.0         -1016.582574                 0.0         False
3    -464.568685    -765.902018  1998.154625  -464.568685  452.013889  -765.902018   52.013889  249.319444      200.000000       1.0         -1016.582574                 0.0         False
4    -361.485352    -668.013129  1998.154625  -361.485352  352.402778  -668.013129   55.097222  251.430556      200.000000       2.0          -416.582574                 0.0         False
5    -261.429796    -567.207574  1998.154625  -261.429796  351.486111  -567.207574   55.152778  250.625000      200.000000       3.0          -316.582574                 0.0         False
6    -160.624240    -416.582574  1998.154625  -160.624240  351.430556  -416.582574   55.958333  200.000000      200.000000       3.0          -216.582574                 0.0         False
7      -9.249240    -316.582574  1998.154625    -9.249240  351.375000  -316.582574  107.333333  200.000000      200.000000       3.0          -116.582574                 0.0         False
8     143.153537    -316.527100  1998.154625   143.153537  352.402778  -316.527100  159.736111  299.944526      200.000000       3.0          -116.582574                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=3767/36, 
.[0m
[09/26 11:45:06]  --------------------------------------------------------------------------------
[09/26 11:45:06]  Iteration: 16 (0 solution, 15 counterexamples)
[09/26 11:45:06]  Generator returned sat in 0.178735 secs.
[09/26 11:45:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:45:07]  Improved gap from 0.0 to 0
[09/26 11:45:07]  Improved number of small numbers from 59 to 79 out of a max of 114
[09/26 11:45:07]  Verifer returned sat in 0.832747 secs.
[09/26 11:45:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3334.562500   -3434.560059  4416.131986 -3334.562500    0.001465 -3434.560059        0.0   99.997559       99.997435       2.0         -3434.560059                -1.0            -1
1   -3234.558838   -3334.561035  4416.131986 -3234.558838  200.001221 -3334.561035        0.0  100.002197      100.001097       1.0         -3434.560059                 0.0         False
2   -3234.558838   -3234.559935  4416.131986 -3234.558838  100.001465 -3234.559935        0.0    0.001097        0.001097       2.0         -3234.558838                 0.0         False
3   -3134.559935   -3234.557373  4416.131986 -3134.559935  100.000000 -3234.557373        0.0   99.997438        0.000000       1.0         -3134.559935                 0.0         False
4   -3134.559935   -3134.559935  4516.131836 -3134.559935    0.010000 -3134.559935        0.0    0.000000       -0.000150       2.0         -3134.559935                 0.0         False
5   -3134.549935   -3134.549935  4616.121826 -3134.549935    0.010000 -3134.549935        0.0    0.000000       -0.000160       1.0         -3134.559935                 0.0         False
6   -3134.539935   -3134.539935  4716.111816 -3134.539935    0.010000 -3134.539935        0.0    0.000000       -0.000169       1.0         -3134.559935                 0.0         False
7   -3134.529935   -3134.529935  4816.092041 -3134.529935    0.010000 -3134.529935        0.0    0.000000       -0.009945       1.0         -3134.559935                 0.0         False
8   -3134.519935   -3134.519935  4816.092041 -3134.519935    0.010000 -3134.519935        0.0    0.000000      -99.999945       1.0         -3134.559935                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:45:08]  --------------------------------------------------------------------------------
[09/26 11:45:08]  Iteration: 17 (0 solution, 16 counterexamples)
[09/26 11:45:12]  Generator returned sat in 3.981215 secs.
[09/26 11:45:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:45:13]  Improved gap from 0.0 to 100
[09/26 11:45:13]  Improved number of small numbers from 72 to 92 out of a max of 114
[09/26 11:45:13]  Verifer returned sat in 0.734796 secs.
[09/26 11:45:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3234.558838   -3334.558838  4816.092041 -3234.558838   99.875977 -3334.558838    0.000000  100.000000        0.000000       2.0         -3334.558838                -1.0            -1
1   -3234.558838   -3234.558838  4816.092041 -3234.558838   99.876221 -3234.558838    0.000000    0.000000     -100.000000       2.0         -3334.558838                 0.0         False
2   -2922.949219   -3034.558838  4816.092041 -2922.949219  311.609619 -3034.558838    0.000000  111.609619      111.609619       1.0         -3334.558838                 0.0         False
3   -2922.949219   -2967.768311  4816.092041 -2922.949219   22.847622 -2967.768311    0.000000   44.819092       11.609619       2.0         -2922.949219                 0.0         False
4   -2922.949219   -2922.949326  4816.092041 -2922.949219   44.695244 -2922.949326    0.000000    0.000107      -88.390381       3.0         -2922.949219                 0.0         False
5   -2834.558838   -2834.558838  4816.092041 -2834.558838   88.390488 -2834.558838    0.000000    0.000000     -100.000000       1.0         -2922.949219                 0.0         False
6   -2658.777863   -2734.558838  4816.092041 -2658.777863  175.780975 -2734.558838    0.000000   75.780975      -24.219025       1.0         -2922.949219                 0.0         False
7   -2383.996887   -2534.558838  4816.092041 -2383.996887  350.561951 -2534.558838    0.000000  150.561951      150.561951       1.0         -2922.949219                 0.0         False
8   -1834.434937   -2434.558838  4816.092041 -1834.434937  700.123901 -2434.558838  400.123901  200.000000      200.000000       2.0         -2922.949219                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=3277815/8192, 
.[0m
[09/26 11:45:14]  --------------------------------------------------------------------------------
[09/26 11:45:14]  Iteration: 18 (0 solution, 17 counterexamples)
[09/26 11:45:15]  Generator returned sat in 0.641007 secs.
[09/26 11:45:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:45:15]  Improved gap from 0.752197265625 to 100
[09/26 11:45:17]  Improved number of small numbers from 37 to 57 out of a max of 114
[09/26 11:45:17]  Verifer returned sat in 1.564442 secs.
[09/26 11:45:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3932.672607   -4033.920410  4916.334844 -3932.672607   101.247803 -4033.920410     0.000000  101.247803        1.247935       3.0         -4033.920410                -1.0            -1
1   -3932.672607   -3932.672607  4916.334844 -3932.672607   101.124023 -3932.672607     0.000000    0.000000      -98.752065       3.0         -3932.672607                 1.0         False
2   -3832.177246   -3832.301035  4916.334844 -3832.177246   100.495361 -3832.301035     0.000000    0.123789      -98.256704       1.0         -3832.177246                 1.0         False
3   -3433.796641   -3731.548838  4916.334844 -3433.796641   398.504395 -3731.548838     0.123901  297.628296      200.000000       1.0         -3832.177246                 0.0         False
4   -3333.920542   -3633.920410  4916.334844 -3333.920542   397.504395 -3633.920410     0.123901  299.875967      199.876099       2.0         -3334.044443                 0.0         False
5   -3333.920542   -3533.672739  4916.334844 -3333.920542   299.752197 -3533.672739     0.123901  199.628296       99.876099       3.0         -3334.044443                 1.0         False
6   -3233.920542   -3333.920542  4916.334844 -3233.920542   299.628296 -3333.920542     0.123901   99.876099       99.876099       1.0         -3234.044443                 1.0         False
7   -2238.911753   -3233.920542  4916.334844 -2238.911753  1094.884888 -3233.920542   795.008789  200.000000      200.000000       1.0         -3234.044443                 0.0         False
8   -1345.026865   -3233.796875  4916.334844 -1345.026865  1093.884888 -3233.796875  1588.893677  299.876333      200.000000       2.0         -2933.920542                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=6507601/4096, 
.[0m
[09/26 11:45:17]  --------------------------------------------------------------------------------
[09/26 11:45:17]  Iteration: 19 (0 solution, 18 counterexamples)
[09/26 11:45:19]  Generator returned sat in 1.087842 secs.
[09/26 11:45:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:45:19]  Improved gap from 0.0 to 0
[09/26 11:45:20]  Improved number of small numbers from 36 to 44 out of a max of 114
[09/26 11:45:20]  Verifer returned sat in 1.192817 secs.
[09/26 11:45:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3333.796641   -3632.292246  4516.210942 -3333.796641    0.123779 -3632.292246    0.000000  298.495605      200.000000       6.0         -3632.292246                -1.0            -1
1   -3333.796641   -3433.796641  4516.210942 -3333.796641  100.000000 -3433.796641    0.000000  100.000000      100.000000       6.0         -3632.292246                 0.0         False
2   -3333.796641   -3433.672852  4516.210942 -3333.796641   99.875977 -3433.672852    0.000000   99.876211        0.000000       7.0         -3333.796641                 0.0         False
3   -3333.796641   -3333.796641  4616.210942 -3333.796641   99.752197 -3333.796641    0.000000    0.000000        0.000000       8.0         -3333.796641                 0.0         False
4   -3033.920542   -3333.796641  4616.210942 -3033.920542  299.876099 -3333.796641    0.000000  299.876099      199.876099       8.0         -3333.796641                 1.0         False
5   -2832.982493   -3133.796641  4616.210942 -2832.982493  500.814148 -3133.796641  100.814148  200.000000      200.000000       2.0         -3333.796641                 1.0         False
6   -2533.168345   -3033.796641  4616.210942 -2533.168345  499.814148 -3033.796641  300.628296  200.000000      200.000000       2.0         -2833.796641                 0.0         False
7   -2234.354197   -3033.796641  4616.210942 -2234.354197  498.814148 -3033.796641  499.442444  300.000000      200.000000       2.0         -2733.796641                 0.0         False
8   -2036.540049   -2933.672852  4616.210942 -2036.540049  497.814148 -2933.672852  597.256592  299.876211      200.000000       3.0         -2633.796641                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=2446363/4096, 
.[0m
[09/26 11:45:21]  --------------------------------------------------------------------------------
[09/26 11:45:21]  Iteration: 20 (0 solution, 19 counterexamples)
[09/26 11:45:24]  Generator returned sat in 2.972871 secs.
[09/26 11:45:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:45:25]  Improved number of small numbers from 19 to 113 out of a max of 113
[09/26 11:45:25]  Verifer returned sat in 0.849165 secs.
[09/26 11:45:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3565.910400   -3865.910400  4748.324707 -3565.910400    0.124023 -3865.910400    0.000000  300.000000      200.000000       7.0         -3865.910400                -1.0            -1
1   -3465.786621   -3665.910400  4748.324707 -3465.786621  400.123779 -3665.910400    0.123779  200.000000      200.000000       7.0         -3865.910400                 1.0         False
2   -3465.662842   -3665.910400  4748.324707 -3465.662842  200.123779 -3665.910400    0.123779  200.123779      100.123779       7.0         -3465.786621                 1.0          True
3   -3368.158203   -3563.662598  4748.324707 -3368.158203  297.628418 -3563.662598    0.123779  195.380615       97.628418       3.0         -3465.786621                 1.0         False
4   -3265.910400   -3465.786621  4748.324707 -3265.910400  297.628418 -3465.786621    0.123779  199.752441       99.876221       3.0         -3465.786621                 1.0         False
5   -3168.034424   -3265.910400  4748.324707 -3168.034424  297.628418 -3265.910400    0.123779   97.752197       97.752197       1.0         -3465.786621                 1.0         False
6   -2717.972412   -3165.910645  4748.324707 -2717.972412  547.814209 -3165.910645  247.937988  200.000244      200.000000       1.0         -3465.786621                 0.0         False
7   -2717.972412   -3065.910400  4748.324707 -2717.972412  199.875977 -3065.910400  247.937988  100.000000      100.000000       2.0         -2965.910400                 0.0         False
8   -2319.158203   -2965.910645  4748.324707 -2319.158203  498.814209 -2965.910645  446.752197  200.000244      200.000000       3.0         -2965.910400                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=914695/2048, 
.[0m
[09/26 11:45:26]  --------------------------------------------------------------------------------
[09/26 11:45:26]  Iteration: 21 (0 solution, 20 counterexamples)
[09/26 11:45:29]  Generator returned sat in 3.120414 secs.
[09/26 11:45:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:45:30]  Improved number of small numbers from 65 to 76 out of a max of 113
[09/26 11:45:30]  Verifer returned sat in 0.970823 secs.
[09/26 11:45:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3516.974854   -3616.974854  4499.389219 -3516.974854    0.001221 -3616.974854    0.00000  100.000000        0.000059       8.0         -3616.974854                -1.0            -1
1   -3516.974854   -3516.974912  4499.389219 -3516.974854    0.001250 -3516.974912    0.00000    0.000059      -99.999941       6.0         -3616.974854                 1.0         False
2   -3116.976162   -3367.473662  4499.389219 -3116.976162  399.998750 -3367.473662    0.00000  250.497500      199.998750       1.0         -3616.974854                 1.0          True
3   -3016.973662   -3216.974912  4499.389219 -3016.973662  350.500000 -3216.974912    0.00125  200.000000      200.000000       2.0         -3016.974912                 0.0         False
4   -3016.973662   -3216.974912  4499.389219 -3016.973662    0.010000 -3216.974912    0.00125  200.000000      100.000000       2.0         -3016.974912                 1.0         False
5   -2917.968662   -3116.974912  4499.389219 -2917.968662  299.005000 -3116.974912    0.00125  199.005000       99.005000       3.0         -3016.974912                 1.0         False
6   -2717.972412   -2916.974912  4499.389219 -2717.972412  399.001250 -2916.974912    0.00125  199.001250      199.001250       1.0         -3016.974912                 1.0         False
7   -2216.972412   -2916.973633  4499.389219 -2216.972412  700.001250 -2916.973633  400.00250  299.998721      200.000000       2.0         -3016.974912                 0.0         False
8   -2216.972412   -2816.974912  4499.389219 -2216.972412    0.010000 -2816.974912  400.00250  200.000000      100.000000       3.0         -2616.974912                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=320001/800, 
.[0m
[09/26 11:45:31]  --------------------------------------------------------------------------------
[09/26 11:45:31]  Iteration: 22 (0 solution, 21 counterexamples)
[09/26 11:45:32]  Generator returned sat in 0.147792 secs.
[09/26 11:45:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:45:33]  Improved number of small numbers from 61 to 83 out of a max of 113
[09/26 11:45:33]  Verifer returned sat in 1.074470 secs.
[09/26 11:45:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3316.973633   -3317.973145  4299.387344 -3316.973633  300.999756 -3317.973145    0.000000    0.999512       -0.000596       8.0         -3317.973145                -1.0            -1
1   -3016.973877   -3316.973037  4299.387344 -3016.973877  300.999268 -3316.973037    0.000000  299.999160      199.999160       1.0         -3016.973877                 1.0         False
2   -3016.973877   -3216.972900  4299.387344 -3016.973877  199.998779 -3216.972900    0.000000  199.999023       99.999160       2.0         -3016.973877                 0.0         False
3   -3016.973877   -3116.973037  4299.387344 -3016.973877  199.998535 -3116.973037    0.000000   99.999160       -0.000840       3.0         -3016.973877                 1.0         False
4   -2816.973662   -2916.973037  4299.387344 -2816.973662  299.999375 -2916.973037    0.000000   99.999375       99.999375       1.0         -3016.973877                 1.0         False
5   -2365.973350   -2816.973145  4299.387344 -2365.973350  550.999688 -2816.973145  250.999687  200.000107      200.000000       1.0         -3016.973877                 0.0         False
6   -2365.973350   -2815.976162  4299.387344 -2365.973350    0.010000 -2815.976162  250.999687  199.003125      100.000000       2.0         -2616.973037                 0.0         False
7   -2264.974600   -2616.973037  4299.387344 -2264.974600  300.001875 -2616.973037  250.999687  100.998750      100.998750       3.0         -2616.973037                 1.0         False
8   -1916.972412   -2516.973145  4299.387344 -1916.972412  449.000938 -2516.973145  400.000625  200.000107      200.000000       2.0         -2616.973037                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=640001/1600, 
.[0m
[09/26 11:45:34]  --------------------------------------------------------------------------------
[09/26 11:45:34]  Iteration: 23 (0 solution, 22 counterexamples)
[09/26 11:45:36]  Generator returned sat in 1.492991 secs.
[09/26 11:45:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:45:37]  Improved gap from 0.01 to 0
[09/26 11:45:37]  Improved number of small numbers from 68 to 77 out of a max of 114
[09/26 11:45:37]  Verifer returned sat in 1.439543 secs.
[09/26 11:45:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0     -3217.3054     -3217.3179  4299.387207   -3217.3054  0.002441   -3217.3179        0.0   0.0125        0.012227       6.0           -3217.3179                -1.0            -1
1     -3217.3054     -3217.3054  4399.374756   -3217.3054  0.002500   -3217.3054        0.0   0.0000       -0.000225       6.0           -3217.3179                 1.0         False
2     -3216.9729     -3216.9729  4499.042480   -3216.9729  0.332500   -3216.9729        0.0   0.0000        0.000000       1.0           -3217.3179                 1.0          True
3     -3216.6429     -3216.6429  4598.712402   -3216.6429  0.330000   -3216.6429        0.0   0.0000       -0.000078       1.0           -3216.6429                 0.0         False
4     -3216.6304     -3216.6304  4698.699951   -3216.6304  0.012500   -3216.6304        0.0   0.0000       -0.000029       1.0           -3216.6304                 0.0         False
5     -3216.6179     -3216.6179  4798.687256   -3216.6179  0.012500   -3216.6179        0.0   0.0000       -0.000225       1.0           -3216.6304                 0.0         False
6     -3216.6079     -3216.6079  4898.677246   -3216.6079  0.010000   -3216.6079        0.0   0.0000       -0.000234       1.0           -3216.6079                 0.0         False
7     -3216.5979     -3216.5979  4998.667480   -3216.5979  0.010000   -3216.5979        0.0   0.0000        0.000000       1.0           -3216.6079                 0.0         False
8     -3216.5879     -3216.5879  4998.667480   -3216.5879  0.010000   -3216.5879        0.0   0.0000      -99.990000       1.0           -3216.6079                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:45:38]  --------------------------------------------------------------------------------
[09/26 11:45:38]  Iteration: 24 (0 solution, 23 counterexamples)
[09/26 11:45:40]  Generator returned sat in 1.885999 secs.
[09/26 11:45:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:45:42]  Improved gap from 0.0 to 100
[09/26 11:45:43]  Improved number of small numbers from 58 to 66 out of a max of 114
[09/26 11:45:43]  Verifer returned sat in 2.194834 secs.
[09/26 11:45:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4213.251221   -4213.253734  5295.320814 -4213.251221    0.001221 -4213.253734    0.00000    0.002513        0.000013       1.0         -4213.253734                -1.0            -1
1   -4213.251221   -4213.251234  5295.320814 -4213.251221    0.001221 -4213.251234    0.00000    0.000013      -99.999987       2.0         -4213.253734                 0.0         False
2   -3813.249984   -4113.251234  5295.320814 -3813.249984  400.001250 -4113.251234    0.00125  300.000000      200.000000       1.0         -4213.253734                 1.0          True
3   -3813.249984   -3913.252484  5295.320814 -3813.249984    9.999028 -3913.252484    0.00125  100.001250      100.000000       2.0         -3813.251234                 0.0         False
4   -3747.252067   -3913.251234  5295.320814 -3747.252067  165.999167 -3913.251234    0.00125  165.997917       65.997917       3.0         -3813.251234                 1.0         False
5   -3513.251234   -3780.582484  5295.320814 -3513.251234  399.998750 -3780.582484    0.00125  267.330000      199.998750       2.0         -3813.251234                 1.0         False
6   -3013.248734   -3613.251465  5295.320814 -3013.248734  767.332500 -3613.251465  400.00250  200.000231      200.000000       2.0         -3813.251234                 1.0         False
7   -3013.248734   -3513.251234  5295.320814 -3013.248734    0.010000 -3513.251234  400.00250  100.000000      100.000000       2.0         -3413.251234                 1.0          True
8   -2912.233734   -3513.250000  5295.320814 -2912.233734  201.015000 -3513.250000  400.00250  201.013766      101.015000       3.0         -3413.251234                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=320001/800, 
.[0m
[09/26 11:45:43]  --------------------------------------------------------------------------------
[09/26 11:45:43]  Iteration: 25 (0 solution, 24 counterexamples)
[09/26 11:45:45]  Generator returned sat in 1.385193 secs.
[09/26 11:45:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:45:46]  Improved gap from 0.0 to 0
[09/26 11:45:46]  Improved number of small numbers from 60 to 91 out of a max of 114
[09/26 11:45:46]  Verifer returned sat in 0.968126 secs.
[09/26 11:45:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3413.247559   -3413.250000  4495.319580 -3413.247559    0.002686 -3413.250000        0.0    0.002441        0.002441       3.0         -3413.250000                -1.0            -1
1   -3276.177490   -3413.247314  4495.319580 -3276.177490  137.072510 -3413.247314        0.0  137.069824       37.072510       1.0         -3413.250000                 1.0         False
2   -3145.217285   -3276.174805  4495.319580 -3145.217285  268.030029 -3276.174805        0.0  130.957520       68.032715       1.0         -3413.250000                 0.0         False
3   -3145.214844   -3145.217285  4495.319580 -3145.214844  130.959961 -3145.217285        0.0    0.002441      -31.964844       2.0         -3145.214844                 0.0         False
4   -3013.257324   -3013.259984  4495.319580 -3013.257324  131.959961 -3013.259984        0.0    0.002660       -0.007324       1.0         -3145.214844                 1.0         False
5   -3013.249984   -3013.249984  4595.309570 -3013.249984    0.010000 -3013.249984        0.0    0.000000       -0.009993       1.0         -3013.249984                 0.0         False
6   -3013.239984   -3013.239984  4695.299564 -3013.239984    0.010000 -3013.239984        0.0    0.000000       -0.010000       1.0         -3013.249984                 0.0         False
7   -3013.229984   -3013.229984  4795.289795 -3013.229984    0.010000 -3013.229984        0.0    0.000000       -0.009769       1.0         -3013.249984                 0.0         False
8   -3013.219984   -3013.219984  4895.279541 -3013.219984    0.010000 -3013.219984        0.0    0.000000       -0.010023       1.0         -3013.249984                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:45:47]  --------------------------------------------------------------------------------
[09/26 11:45:47]  Iteration: 26 (0 solution, 25 counterexamples)
[09/26 11:45:50]  Generator returned sat in 2.074840 secs.
[09/26 11:45:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:45:50]  Improved gap from 1.0 to 0
[09/26 11:45:51]  Improved number of small numbers from 77 to 96 out of a max of 114
[09/26 11:45:51]  Verifer returned sat in 0.706069 secs.
[09/26 11:45:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3513.248779   -3613.247314  4665.325439 -3513.248779    0.002441 -3613.247314        0.0   99.998535       70.007080       6.0         -3613.247314                -1.0            -1
1   -3383.257324   -3513.247314  4665.325439 -3383.257324  229.989990 -3513.247314        0.0  129.989990       99.998535       1.0         -3613.247314                 1.0         False
2   -3283.257324   -3383.255981  4665.325439 -3283.257324  229.989990 -3383.255981        0.0   99.998657       99.998535       1.0         -3613.247314                 0.0         False
3   -3153.267324   -3283.255859  4665.325439 -3153.267324  229.988657 -3283.255859        0.0  129.988535      129.988535       1.0         -3153.267324                 0.0         False
4   -3153.267324   -3183.256104  4665.325439 -3153.267324    1.000000 -3183.256104        0.0   29.988779       29.988535       2.0         -3153.267324                 0.0         False
5   -3153.267324   -3153.267324  4735.336670 -3153.267324    0.010000 -3153.267324        0.0    0.000000       -0.000234       3.0         -3153.267324                 1.0         False
6   -3153.257324   -3153.257324  4834.326904 -3153.257324    0.010000 -3153.257324        0.0    0.000000       -1.000000       1.0         -3153.267324                 1.0         False
7   -3152.257324   -3152.257324  4934.326904 -3152.257324    1.000000 -3152.257324        0.0    0.000000        0.000000       1.0         -3153.267324                 0.0         False
8   -3151.257324   -3151.257324  4934.326904 -3151.257324    1.000000 -3151.257324        0.0    0.000000      -99.000000       1.0         -3153.267324                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:45:51]  --------------------------------------------------------------------------------
[09/26 11:45:51]  Iteration: 27 (0 solution, 26 counterexamples)
[09/26 11:45:55]  Generator returned sat in 2.932013 secs.
[09/26 11:45:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:45:56]  Improved number of small numbers from 67 to 80 out of a max of 113
[09/26 11:45:56]  Verifer returned sat in 0.984424 secs.
[09/26 11:45:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4319.579834   -4352.249023  4934.326904 -4319.579834  165.999512 -4352.249023    0.000000   32.669189       32.669157       1.0         -4352.249023                -1.0            -1
1   -4186.250488   -4319.578991  4934.326904 -4186.250488  165.998535 -4319.578991    0.000000  133.328503       65.998503       1.0         -4186.250488                 0.0         False
2   -4052.250658   -4186.249546  4934.326904 -4052.250658  267.328333 -4186.249546    0.000000  133.998889       99.998333       1.0         -4186.250488                 0.0         False
3   -4052.249824   -4052.258158  4934.326904 -4052.249824  133.999722 -4052.258158    0.000000    0.008333       -0.000833       2.0         -4052.249824                 0.0         False
4   -4052.248158   -4052.248991  4934.326904 -4052.248158    0.010000 -4052.248991    0.000000    0.000833      -99.999167       1.0         -4052.248158                 1.0         False
5   -3652.248991   -3852.248991  4934.326904 -3652.248991  400.000000 -3852.248991    0.000000  200.000000      200.000000       1.0         -4052.248158                 0.0         False
6   -3152.248158   -3802.253991  4934.326904 -3152.248158  700.000833 -3802.253991  400.000833  250.005000      200.000000       2.0         -4052.248158                 0.0         False
7   -3152.248158   -3652.249023  4934.326904 -3152.248158  250.004167 -3652.249023  400.000833  100.000033      100.000000       3.0         -3552.248991                 1.0          True
8   -3152.248158   -3652.248047  4934.326904 -3152.248158    0.010000 -3652.248047  400.000833   99.999056        0.000000       3.0         -3552.248991                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=480001/1200, 
.[0m
[09/26 11:45:57]  --------------------------------------------------------------------------------
[09/26 11:45:57]  Iteration: 28 (0 solution, 27 counterexamples)
[09/26 11:45:59]  Generator returned sat in 1.451561 secs.
[09/26 11:45:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:45:59]  Improved gap from 0.0 to 3.125
[09/26 11:45:59]  Improved number of small numbers from 41 to 114 out of a max of 114
[09/26 11:45:59]  Verifer returned sat in 0.514324 secs.
[09/26 11:45:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4336.429199   -4436.305908  4934.32666 -4336.429199    0.123291 -4436.305908   0.000000   99.876709       99.876709       9.0         -4436.305908                -1.0            -1
1   -4136.182373   -4336.305908  4934.32666 -4136.182373  300.123535 -4336.305908   0.123535  200.000000      200.000000       1.0         -4436.305908                 1.0         False
2   -4058.060547   -4236.305908  4934.32666 -4058.060547  278.121826 -4236.305908   0.123535  178.121826      178.121826       2.0         -4058.184082                 0.0         False
3   -4058.060547   -4138.307617  4934.32666 -4058.060547  162.000000 -4138.307617   0.123535   80.123535       78.121826       3.0         -4058.184082                 0.0         False
4   -4058.060547   -4075.305908  4934.32666 -4058.060547   80.000000 -4075.305908   0.123535   17.121826      -21.878174       3.0         -4058.184082                 0.0         False
5   -4036.182373   -4036.305908  5031.20166 -4036.182373   39.000000 -4036.305908   0.123535    0.000000       -3.125000       1.0         -4036.305908                 0.0         False
6   -4017.682373   -4017.805908  5107.57666 -4017.682373   18.500000 -4017.805908   0.123535    0.000000       -8.250000       1.0         -4017.805908                 0.0         False
7   -4009.432373   -4009.555908  5204.45166 -4009.432373    8.250000 -4009.555908   0.123535    0.000000       -3.125000       1.0         -4009.555908                 0.0         False
8   -4006.307373   -4006.430908  5204.45166 -4006.307373    3.125000 -4006.430908   0.123535    0.000000     -100.000000       1.0         -4006.430908                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:46:00]  --------------------------------------------------------------------------------
[09/26 11:46:00]  Iteration: 29 (0 solution, 28 counterexamples)
[09/26 11:46:03]  Generator returned sat in 2.533896 secs.
[09/26 11:46:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:46:04]  Improved gap from 0.0 to 23.4375
[09/26 11:46:04]  Improved number of small numbers from 72 to 114 out of a max of 114
[09/26 11:46:04]  Verifer returned sat in 0.683541 secs.
[09/26 11:46:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4235.935791   -4236.058838  4934.326416 -4235.935791   99.999756 -4236.058838        0.0    0.123047        0.123047       9.0         -4236.058838                -1.0            -1
1   -4136.182373   -4136.305664  4934.326416 -4136.182373   99.876465 -4136.305664        0.0    0.123291       -0.123535       1.0         -4136.182373                 1.0         False
2   -4036.058838   -4136.058838  4934.326416 -4036.058838  100.246826 -4136.058838        0.0  100.000000        0.000000       1.0         -4136.182373                 0.0         False
3   -4036.058838   -4036.058838  5010.888916 -4036.058838   28.437500 -4036.058838        0.0    0.000000      -23.437500       2.0         -4036.058838                 0.0         False
4   -4008.621338   -4008.621338  5083.451416 -4008.621338   27.437500 -4008.621338        0.0    0.000000      -23.437500       1.0         -4008.621338                 0.0         False
5   -3982.183838   -3982.183838  5157.013916 -3982.183838   26.437500 -3982.183838        0.0    0.000000      -23.437500       1.0         -3982.183838                 0.0         False
6   -3956.746338   -3956.746338  5231.576416 -3956.746338   25.437500 -3956.746338        0.0    0.000000      -23.437500       1.0         -3956.746338                 0.0         False
7   -3932.308838   -3932.308838  5307.138916 -3932.308838   24.437500 -3932.308838        0.0    0.000000      -23.437500       1.0         -3932.308838                 0.0         False
8   -3908.871338   -3908.871338  5307.139160 -3908.871338   23.437500 -3908.871338        0.0    0.000000      -99.999756       1.0         -3908.871338                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:46:05]  --------------------------------------------------------------------------------
[09/26 11:46:05]  Iteration: 30 (0 solution, 29 counterexamples)
[09/26 11:46:07]  Generator returned sat in 1.162234 secs.
[09/26 11:46:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:46:09]  Improved gap from 0.0 to 6.25
[09/26 11:46:11]  Improved number of small numbers from 46 to 54 out of a max of 114
[09/26 11:46:11]  Verifer returned sat in 3.857554 secs.
[09/26 11:46:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4173.640381   -4173.702245  4934.326172 -4173.640381    0.185059 -4173.702245    0.000000    0.061864        0.061620       6.0         -4173.702245                -1.0            -1
1   -4173.578954   -4173.578954  5027.891602 -4173.578954    0.123291 -4173.578954    0.000000    0.000000       -6.311523       1.0         -4173.578954                 1.0         False
2   -4167.267308   -4167.267308  5121.641479 -4167.267308    6.311646 -4167.267308    0.000000    0.000000       -6.250000       1.0         -4173.578954                 0.0         False
3   -4161.017308   -4161.017308  5215.391357 -4161.017308    6.250000 -4161.017308    0.000000    0.000000       -6.250122       1.0         -4161.017308                 0.0         False
4   -4132.522435   -4132.522435  5286.896606 -4132.522435   28.494873 -4132.522435    0.000000    0.000000       -6.250000       1.0         -4161.017308                 0.0         False
5   -4036.161962   -4126.272435  5286.896606 -4036.161962   96.360474 -4126.272435    0.000000   90.110474       -9.889526       1.0         -4161.017308                 0.0         False
6   -3996.102452   -4026.272435  5286.896606 -3996.102452  130.169983 -4026.272435    0.000000   30.169983      -69.830017       1.0         -4161.017308                 0.0         False
7   -3691.697698   -3826.272435  5286.896606 -3691.697698  334.574738 -3826.272435    0.000000  134.574738      134.574738       1.0         -4161.017308                 0.0         False
8   -3046.485067   -3726.272461  5286.896606 -3046.485067  779.787369 -3726.272461  479.787369  200.000026      200.000000       2.0         -4161.017308                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=31443345/65536, 
.[0m
[09/26 11:46:11]  --------------------------------------------------------------------------------
[09/26 11:46:11]  Iteration: 31 (0 solution, 30 counterexamples)
[09/26 11:46:17]  Generator returned sat in 4.690351 secs.
[09/26 11:46:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:46:18]  Improved gap from 0.0 to 100
[09/26 11:46:18]  Improved number of small numbers from 48 to 114 out of a max of 114
[09/26 11:46:18]  Verifer returned sat in 0.743962 secs.
[09/26 11:46:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4367.072754   -4567.134033  5327.943359 -4367.072754    0.061768 -4567.134033    0.000000  200.061279      200.000000       6.0         -4567.134033                -1.0            -1
1   -4367.072754   -4567.072510  5327.943359 -4367.072754    0.061768 -4567.072510    0.000000  199.999756      100.000000       5.0         -4567.134033                 1.0         False
2   -4367.010986   -4367.072754  5327.943359 -4367.010986  200.061523 -4367.072754    0.000000    0.061768        0.061768       3.0         -4567.134033                 1.0          True
3   -4167.134277   -4367.072510  5327.943359 -4167.134277  199.938477 -4367.072510    0.000000  199.938232       99.938477       2.0         -4167.134277                 1.0          True
4   -4167.134277   -4167.195557  5327.943359 -4167.134277    1.000000 -4167.195557    0.000000    0.061279       -0.061523       2.0         -4167.134277                 1.0         False
5   -4166.195557   -4167.072754  5327.943359 -4166.195557    1.000000 -4167.072754    0.000000    0.877197      -99.122803       1.0         -4167.134277                 1.0         False
6   -4065.072754   -4067.072510  5327.943359 -4065.072754  102.000000 -4067.072510    0.000000    1.999756      -98.000000       1.0         -4167.134277                 0.0         False
7   -3713.072510   -3967.072510  5327.943359 -3713.072510  354.000000 -3967.072510    0.000000  254.000000      154.000244       1.0         -4167.134277                 0.0         False
8   -3159.010986   -3767.072754  5327.943359 -3159.010986  808.061523 -3767.072754  408.061768  200.000000      200.000000       2.0         -4167.134277                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1671421/4096, 
.[0m
[09/26 11:46:18]  --------------------------------------------------------------------------------
[09/26 11:46:18]  Iteration: 32 (0 solution, 31 counterexamples)
[09/26 11:46:21]  Generator returned sat in 1.840340 secs.
[09/26 11:46:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:21]  Verifer returned unsat in 0.174635 secs.
[09/26 11:46:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:21]  --------------------------------------------------------------------------------
[09/26 11:46:21]  Iteration: 33 (1 solution, 31 counterexamples)
[09/26 11:46:23]  Generator returned sat in 0.243126 secs.
[09/26 11:46:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:23]  Verifer returned unsat in 0.155171 secs.
[09/26 11:46:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:23]  --------------------------------------------------------------------------------
[09/26 11:46:23]  Iteration: 34 (2 solution, 31 counterexamples)
[09/26 11:46:24]  Generator returned sat in 0.303679 secs.
[09/26 11:46:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:24]  Verifer returned unsat in 0.194278 secs.
[09/26 11:46:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:24]  --------------------------------------------------------------------------------
[09/26 11:46:24]  Iteration: 35 (3 solution, 31 counterexamples)
[09/26 11:46:26]  Generator returned sat in 0.943046 secs.
[09/26 11:46:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:27]  Improved gap from 0.0 to 0
[09/26 11:46:27]  Improved number of small numbers from 60 to 85 out of a max of 114
[09/26 11:46:27]  Verifer returned sat in 0.927363 secs.
[09/26 11:46:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3916.403564   -4084.430908  4777.274170 -3916.403564  168.027500 -4084.430908        0.0  168.027344      100.000000       6.0         -4084.430908                -1.0            -1
1   -3916.403564   -3916.403564  4777.274170 -3916.403564  168.025146 -3916.403564        0.0    0.000000        0.000000       4.0         -3916.403564                 1.0         False
2   -3748.381104   -3914.393486  4777.274170 -3748.381104  168.022461 -3914.393486        0.0  166.012383       68.022461       1.0         -3748.381104                 1.0         False
3   -3716.403486   -3748.381104  4777.274170 -3716.403486  197.990000 -3748.381104        0.0   31.977617        0.000078       2.0         -3748.381104                 0.0         False
4   -3716.403486   -3716.403486  4877.273926 -3716.403486    0.010000 -3716.403486        0.0    0.000000       -0.000166       2.0         -3716.403486                 1.0         False
5   -3716.393486   -3716.393486  4977.264092 -3716.393486    0.010000 -3716.393486        0.0    0.000000        0.000000       1.0         -3716.403486                 1.0         False
6   -3616.393486   -3716.390869  4977.264092 -3616.393486  100.000000 -3716.390869        0.0   99.997383        0.000000       1.0         -3716.403486                 0.0         False
7   -3616.393486   -3616.393486  5077.263916 -3616.393486   16.995117 -3616.393486        0.0    0.000000       -0.000176       2.0         -3616.393486                 0.0         False
8   -3616.383486   -3616.383486  5077.263916 -3616.383486    0.010000 -3616.383486        0.0    0.000000      -99.990176       1.0         -3616.383486                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:46:28]  --------------------------------------------------------------------------------
[09/26 11:46:28]  Iteration: 36 (3 solution, 32 counterexamples)
[09/26 11:46:42]  Generator returned sat in 12.691010 secs.
[09/26 11:46:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:42]  Verifer returned unsat in 0.175143 secs.
[09/26 11:46:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:42]  --------------------------------------------------------------------------------
[09/26 11:46:42]  Iteration: 37 (4 solution, 32 counterexamples)
[09/26 11:46:43]  Generator returned sat in 0.208294 secs.
[09/26 11:46:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:43]  Verifer returned unsat in 0.191527 secs.
[09/26 11:46:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:43]  --------------------------------------------------------------------------------
[09/26 11:46:43]  Iteration: 38 (5 solution, 32 counterexamples)
[09/26 11:46:44]  Generator returned sat in 0.209662 secs.
[09/26 11:46:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:45]  Verifer returned unsat in 0.132654 secs.
[09/26 11:46:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:45]  --------------------------------------------------------------------------------
[09/26 11:46:45]  Iteration: 39 (6 solution, 32 counterexamples)
[09/26 11:46:46]  Generator returned sat in 0.204648 secs.
[09/26 11:46:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:46]  Verifer returned unsat in 0.161034 secs.
[09/26 11:46:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:46]  --------------------------------------------------------------------------------
[09/26 11:46:46]  Iteration: 40 (7 solution, 32 counterexamples)
[09/26 11:46:47]  Generator returned sat in 0.205923 secs.
[09/26 11:46:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:48]  Verifer returned unsat in 0.135976 secs.
[09/26 11:46:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:48]  --------------------------------------------------------------------------------
[09/26 11:46:48]  Iteration: 41 (8 solution, 32 counterexamples)
[09/26 11:46:49]  Generator returned sat in 0.219231 secs.
[09/26 11:46:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:49]  Verifer returned unsat in 0.161352 secs.
[09/26 11:46:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:49]  --------------------------------------------------------------------------------
[09/26 11:46:49]  Iteration: 42 (9 solution, 32 counterexamples)
[09/26 11:46:50]  Generator returned sat in 0.319620 secs.
[09/26 11:46:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:51]  Verifer returned unsat in 0.108620 secs.
[09/26 11:46:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:51]  --------------------------------------------------------------------------------
[09/26 11:46:51]  Iteration: 43 (10 solution, 32 counterexamples)
[09/26 11:46:52]  Generator returned sat in 0.549684 secs.
[09/26 11:46:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:53]  Improved number of small numbers from 66 to 72 out of a max of 113
[09/26 11:46:53]  Verifer returned sat in 0.961893 secs.
[09/26 11:46:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3324.321045   -3428.660117  4890.589541 -3324.321045    0.001465 -3428.660117    0.00000  104.339072        4.339072       2.0         -3428.660117                -1.0            -1
1   -3029.328451   -3324.319701  4890.589541 -3029.328451  399.331667 -3324.319701    0.00000  294.991250      199.331667       1.0         -3428.660117                 0.0         False
2   -3029.328451   -3228.660117  4890.589541 -3029.328451  294.990000 -3228.660117    0.00000  199.331667       99.331667       2.0         -3029.328451                 0.0         False
3   -2828.661367   -3029.328451  4890.589541 -2828.661367  399.998750 -3029.328451    0.00000  200.667083      199.998750       3.0         -3029.328451                 0.0         False
4   -2828.661367   -3027.660117  4890.589541 -2828.661367  200.665833 -3027.660117    0.00000  198.998750       99.998750       2.0         -2828.661367                 1.0         False
5   -2629.667617   -2828.660117  4890.589541 -2629.667617  397.992500 -2828.660117    0.00000  198.992500      198.992500       1.0         -2828.661367                 0.0         False
6   -2228.663867   -2828.658936  4890.589541 -2228.663867  599.996250 -2828.658936  299.99625  299.998818      200.000000       2.0         -2828.661367                 0.0         False
7   -2228.663867   -2628.660117  4890.589541 -2228.663867    0.010000 -2628.660117  299.99625  100.000000      100.000000       2.0         -2528.660117                 0.0         False
8   -1928.658867   -2628.659912  4890.589541 -1928.658867  400.005000 -2628.659912  400.00125  299.999795      200.000000       3.0         -2528.660117                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=320001/800, 
.[0m
[09/26 11:46:54]  --------------------------------------------------------------------------------
[09/26 11:46:54]  Iteration: 44 (10 solution, 33 counterexamples)
[09/26 11:46:57]  Generator returned sat in 1.844534 secs.
[09/26 11:46:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:46:57]  Improved gap from 0.18438720703125 to 100
[09/26 11:46:57]  Improved number of small numbers from 64 to 114 out of a max of 114
[09/26 11:46:57]  Verifer returned sat in 0.832678 secs.
[09/26 11:46:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3131.251221   -3131.351562  4690.780518 -3131.251221    0.100098 -3131.351562   0.000000    0.100342       -2.399902       5.0         -3131.351562                -1.0            -1
1   -2928.851562   -3032.351318  4690.780518 -2928.851562  202.500000 -3032.351318   0.000000  103.499756       99.999756       1.0         -3131.351562                 1.0         False
2   -2928.851562   -2928.851562  4690.780518 -2928.851562  103.400146 -2928.851562   0.000000    0.000000       -0.000244       2.0         -2928.851562                 0.0         False
3   -2830.551514   -2830.551514  4690.780518 -2830.551514   98.300049 -2830.551514   0.000000    0.000000       -1.700195       1.0         -2830.551514                 0.0         False
4   -2528.751465   -2730.551270  4690.780518 -2528.751465  301.800049 -2730.551270   0.099854  201.699951      200.000000       1.0         -2830.551514                 0.0         False
5   -2428.651367   -2629.051514  4690.780518 -2428.651367  301.800049 -2629.051514   0.199951  200.200195      200.000000       2.0         -2830.551514                 0.0         False
6   -2328.051514   -2529.751465  4690.780518 -2328.051514  300.800049 -2529.751465   0.799805  200.900146      200.000000       3.0         -2328.851318                 0.0         False
7   -2228.151611   -2428.851318  4690.780518 -2228.151611  300.800049 -2428.851318   0.799805  199.899902      199.899902       3.0         -2328.851318                 1.0         False
8   -2126.251465   -2428.751465  4690.780518 -2126.251465  301.800049 -2428.751465   2.599854  299.900146      200.000000       3.0         -2328.851318                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=5/2, 
.[0m
[09/26 11:46:58]  --------------------------------------------------------------------------------
[09/26 11:46:58]  Iteration: 45 (10 solution, 34 counterexamples)
[09/26 11:47:00]  Generator returned sat in 0.709426 secs.
[09/26 11:47:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:00]  Verifer returned unsat in 0.101457 secs.
[09/26 11:47:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:00]  --------------------------------------------------------------------------------
[09/26 11:47:00]  Iteration: 46 (11 solution, 34 counterexamples)
[09/26 11:47:02]  Generator returned sat in 0.565005 secs.
[09/26 11:47:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:02]  Improved gap from 0.0 to 100
[09/26 11:47:02]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/26 11:47:02]  Verifer returned sat in 0.723544 secs.
[09/26 11:47:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2529.466064   -2829.466064  4291.395264 -2529.466064  100.491699 -2829.466064    0.000000  300.000000      200.000000       8.0         -2829.466064                -1.0            -1
1   -2529.466064   -2629.834961  4291.395264 -2529.466064  100.368652 -2629.834961    0.000000  100.368896      100.000000       5.0         -2529.466064                 1.0         False
2   -2529.466064   -2529.466064  4291.395264 -2529.466064  100.245850 -2529.466064    0.000000    0.000000        0.000000       3.0         -2529.466064                 1.0         False
3   -2429.343262   -2429.466064  4291.395264 -2429.343262  100.122803 -2429.466064    0.000000    0.122803        0.122803       1.0         -2429.343262                 0.0         False
4   -2028.466064   -2429.220215  4291.395264 -2028.466064  401.000000 -2429.220215  101.000000  299.754150      200.000000       1.0         -2429.343262                 0.0         False
5   -2028.466064   -2230.720215  4291.395264 -2028.466064  100.307373 -2230.720215  101.000000  101.254150      100.000000       2.0         -2129.466064                 0.0         False
6   -1829.974365   -2180.781738  4291.395264 -1829.974365  299.745850 -2180.781738  101.000000  249.807373      198.491699       3.0         -2129.466064                 0.0         False
7   -1829.974365   -2129.466064  4291.395264 -1829.974365  249.684326 -2129.466064  101.000000  198.491699       98.491699       4.0         -1930.974365                 0.0         False
8   -1228.343262   -2029.466064  4291.395264 -1228.343262  800.122803 -2029.466064  501.122803  300.000000      200.000000       3.0         -1930.974365                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638903/4096, 
.[0m
[09/26 11:47:03]  --------------------------------------------------------------------------------
[09/26 11:47:03]  Iteration: 47 (11 solution, 35 counterexamples)
[09/26 11:47:05]  Generator returned sat in 1.291141 secs.
[09/26 11:47:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:06]  Improved number of small numbers from 94 to 113 out of a max of 113
[09/26 11:47:06]  Verifer returned sat in 0.424483 secs.
[09/26 11:47:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2430.466309   -2730.466064  4192.395264 -2430.466309  400.507324 -2730.466064    0.000000  299.999756      199.999756       6.0         -2730.466064                -1.0            -1
1   -2329.958496   -2552.218750  4192.395264 -2329.958496  400.507568 -2552.218750    0.507568  221.752686      200.000000       7.0         -2730.466064                 1.0         False
2   -2151.203613   -2530.466064  4192.395264 -2151.203613  400.507568 -2530.466064   79.262451  300.000000      200.000000       3.0         -2730.466064                 1.0          True
3   -2100.700928   -2380.966064  4192.395264 -2100.700928  350.502686 -2380.966064   79.262451  201.002686      150.502686       3.0         -2179.963379                 0.0         False
4   -1951.203613   -2330.466064  4192.395264 -1951.203613  350.500000 -2330.466064   79.262451  300.000000      200.000000       4.0         -2030.466064                 0.0         False
5   -1677.950928   -2130.466309  4192.395264 -1677.950928  573.252686 -2130.466309  252.515137  200.000244      200.000000       2.0         -2030.466064                 1.0         False
6   -1677.950928   -2056.216064  4192.395264 -1677.950928    0.010000 -2056.216064  252.515137  125.750000      100.000000       3.0         -1930.466064                 0.0         False
7   -1477.950928   -2030.466064  4192.395264 -1477.950928  325.750000 -2030.466064  252.515137  300.000000      200.000000       4.0         -1930.466064                 0.0         False
8   -1151.200928   -1930.466064  4192.395264 -1151.200928  626.750000 -1930.466064  479.265137  300.000000      200.000000       4.0         -1930.466064                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638411/4096, 
.[0m
[09/26 11:47:06]  --------------------------------------------------------------------------------
[09/26 11:47:06]  Iteration: 48 (11 solution, 36 counterexamples)
[09/26 11:47:12]  Generator returned sat in 4.860101 secs.
[09/26 11:47:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:13]  Improved gap from 0.0 to 100
[09/26 11:47:13]  Improved number of small numbers from 60 to 66 out of a max of 114
[09/26 11:47:13]  Verifer returned sat in 0.930290 secs.
[09/26 11:47:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -2658.088867   -2858.086564  4420.015764 -2658.088867    0.002686 -2858.086564      0.000  199.997697      199.997697       1.0         -2858.086564                -1.0            -1
1   -2458.091564   -2858.086564  4420.015764 -2458.091564  399.995000 -2858.086564     99.995  300.000000      200.000000       1.0         -2858.086564                 0.0         False
2   -2358.099064   -2658.086564  4420.015764 -2358.099064  399.992500 -2658.086564     99.995  199.992500      199.992500       2.0         -2458.094064                 0.0         False
3   -2358.099064   -2558.086564  4420.015764 -2358.099064    0.010010 -2558.086564     99.995   99.992500       99.992500       3.0         -2458.094064                 1.0         False
4   -2358.099064   -2458.096564  4420.015764 -2358.099064    0.010000 -2458.096564     99.995    0.002500       -0.007500       3.0         -2458.094064                 1.0         False
5   -2358.091564   -2458.086564  4420.015764 -2358.091564    0.010000 -2458.086564     99.995    0.000000     -100.000000       1.0         -2458.094064                 1.0         False
6   -2057.081564   -2258.086564  4420.015764 -2057.081564  301.010000 -2258.086564     99.995  101.010000      101.010000       1.0         -2458.094064                 0.0         False
7   -1406.081564   -2258.086426  4420.015764 -1406.081564  752.010000 -2258.086426    552.005  299.999861      200.000000       2.0         -2458.094064                 0.0         False
8   -1406.081564   -2058.086670  4420.015764 -1406.081564    0.010000 -2058.086670    552.005  100.000105      100.000000       2.0         -1958.086564                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=45201/100, 
.[0m
[09/26 11:47:14]  --------------------------------------------------------------------------------
[09/26 11:47:14]  Iteration: 49 (11 solution, 37 counterexamples)
[09/26 11:47:25]  Generator returned sat in 9.552176 secs.
[09/26 11:47:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:47:26]  Improved number of small numbers from 58 to 70 out of a max of 113
[09/26 11:47:26]  Verifer returned sat in 1.206438 secs.
[09/26 11:47:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3274.773682   -3474.771356  4420.015764 -3274.773682    0.000488 -3474.771356    0.000000  199.997674       99.997674       2.0         -3474.771356                -1.0            -1
1   -3074.771981   -3274.773193  4420.015764 -3074.771981  399.999375 -3274.773193    0.000000  200.001212      199.999375       1.0         -3474.771356                 0.0         False
2   -3074.771981   -3274.771240  4420.015764 -3074.771981  200.000732 -3274.771240    0.000000  199.999259       99.999375       2.0         -3074.771981                 0.0         False
3   -3074.771240   -3108.098439  4420.015764 -3074.771240  200.000000 -3108.098439    0.000000   33.327199        0.000116       3.0         -3074.771240                 0.0         False
4   -2358.089064   -3074.771356  4420.015764 -2358.089064  750.009375 -3074.771356  416.682292  300.000000      200.000000       2.0         -3074.771240                 1.0         False
5   -2358.089064   -2974.771240  4420.015764 -2358.089064    0.010000 -2974.771240  416.682292  199.999884      100.000000       2.0         -2774.771356                 0.0         False
6   -2358.089064   -2874.771356  4420.015764 -2358.089064    0.010000 -2874.771356  416.682292  100.000000        0.000000       3.0         -2774.771356                 0.0         False
7   -2108.088439   -2774.771356  4420.015764 -2108.088439  350.000625 -2774.771356  416.682292  250.000625      150.000625       4.0         -2774.771356                 1.0         False
8   -1558.088439   -2674.771356  4420.015764 -1558.088439  800.000625 -2674.771356  816.682917  300.000000      200.000000       2.0         -2774.771356                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=640001/1600, 
.[0m
[09/26 11:47:27]  --------------------------------------------------------------------------------
[09/26 11:47:27]  Iteration: 50 (11 solution, 38 counterexamples)
[09/26 11:47:42]  Generator returned sat in 14.502041 secs.
[09/26 11:47:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:43]  Improved gap from 0.0 to 100
[09/26 11:47:43]  Improved number of small numbers from 73 to 83 out of a max of 114
[09/26 11:47:43]  Verifer returned sat in 1.017202 secs.
[09/26 11:47:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -3597.473145   -3597.474609  4420.015869 -3597.473145    0.003906 -3597.474609    0.000000    0.001465       -0.001035       6.0         -3597.474609                -1.0            -1
1   -3597.471924   -3597.472109  4420.015869 -3597.471924    0.002686 -3597.472109    0.000000    0.000186      -99.999814       1.0         -3597.471924                 1.0         False
2   -3363.460859   -3397.472168  4420.015869 -3363.460859  234.011250 -3397.472168    0.000000   34.011309       34.011250       1.0         -3597.471924                 0.0         False
3   -3363.460859   -3363.462109  4420.015869 -3363.460859    9.313333 -3363.462109    0.000000    0.001250      -65.988750       2.0         -3363.460859                 0.0         False
4   -2997.473359   -3297.472109  4420.015869 -2997.473359  365.988750 -3297.472109    0.000000  299.998750      199.998750       1.0         -3363.460859                 0.0         False
5   -2297.488984   -3097.472109  4420.015869 -2297.488984  999.983125 -3097.472109  599.983125  200.000000      200.000000       2.0         -3363.460859                 0.0         False
6   -2297.488984   -3097.472109  4420.015869 -2297.488984    0.010000 -3097.472109  599.983125  200.000000      100.000000       2.0         -2897.472109                 0.0         False
7   -2097.488984   -2997.472109  4420.015869 -2097.488984  400.000000 -2997.472109  599.983125  300.000000      200.000000       3.0         -2897.472109                 0.0         False
8   -1797.488984   -2897.470947  4420.015869 -1797.488984  600.000000 -2897.470947  799.983125  299.998838      200.000000       2.0         -2897.472109                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1279973/1600, 
.[0m
[09/26 11:47:44]  --------------------------------------------------------------------------------
[09/26 11:47:44]  Iteration: 51 (11 solution, 39 counterexamples)
[09/26 11:47:47]  Generator returned sat in 1.839916 secs.
[09/26 11:47:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:48]  Improved gap from 0.0025 to 100
[09/26 11:47:49]  Improved number of small numbers from 59 to 75 out of a max of 114
[09/26 11:47:49]  Verifer returned sat in 1.764988 secs.
[09/26 11:47:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4098.144775   -4198.142334  5020.686071 -4098.144775    0.002686 -4198.142334     0.0000   99.997559       99.997536       1.0         -4198.142334                -1.0            -1
1   -3898.144775   -4098.142334  5020.686071 -3898.144775  299.997559 -4098.142334     0.0000  199.997559      199.997536       1.0         -4198.142334                 0.0         False
2   -3898.144775   -3998.142311  5020.686071 -3898.144775  199.995117 -3998.142311     0.0000   99.997536       99.997536       2.0         -3898.144775                 0.0         False
3   -3698.139811   -3898.142311  5020.686071 -3698.139811  300.002500 -3898.142311     0.0025  200.000000      200.000000       1.0         -3898.144775                 1.0         False
4   -3698.139811   -3829.690645  5020.686071 -3698.139811    0.010000 -3829.690645     0.0025  131.548333      100.000000       2.0         -3698.142311                 0.0         False
5   -3698.139811   -3698.142311  5020.686071 -3698.139811    0.020000 -3698.142311     0.0025    0.000000        0.000000       3.0         -3698.142311                 1.0         False
6   -3698.099811   -3698.102311  5020.686071 -3698.099811    0.040000 -3698.102311     0.0025    0.000000      -99.960000       1.0         -3698.142311                 1.0         False
7   -3396.979811   -3598.142311  5020.686071 -3396.979811  301.120000 -3598.142311     0.0025  201.160000      101.160000       1.0         -3698.142311                 0.0         False
8   -2798.137311   -3398.142334  5020.686071 -2798.137311  800.002500 -3398.142334   400.0050  200.000023      200.000000       2.0         -3698.142311                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=160001/400, 
.[0m
[09/26 11:47:49]  --------------------------------------------------------------------------------
[09/26 11:47:49]  Iteration: 52 (11 solution, 40 counterexamples)
[09/26 11:47:52]  Generator returned sat in 1.048131 secs.
[09/26 11:47:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:47:53]  Improved number of small numbers from 72 to 72 out of a max of 113
[09/26 11:47:53]  Verifer returned sat in 0.883147 secs.
[09/26 11:47:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4098.144775   -4198.142334  5020.686071 -4098.144775    0.002686 -4198.142334    0.000000   99.997559       99.997536       1.0         -4198.142334                -1.0            -1
1   -3898.144775   -4098.142334  5020.686071 -3898.144775  299.997559 -4098.142334    0.000000  199.997559      199.997536       1.0         -4198.142334                 0.0         False
2   -3898.144775   -3998.142311  5020.686071 -3898.144775  199.995117 -3998.142311    0.000000   99.997536       99.997536       2.0         -3898.144775                 0.0         False
3   -3698.139811   -3898.142311  5020.686071 -3698.139811  300.002500 -3898.142311    0.002500  200.000000      200.000000       1.0         -3898.144775                 1.0         False
4   -3698.139811   -3829.690645  5020.686071 -3698.139811    0.010000 -3829.690645    0.002500  131.548333      100.000000       2.0         -3698.142311                 0.0         False
5   -3698.139811   -3698.142311  5020.686071 -3698.139811    0.020000 -3698.142311    0.002500    0.000000        0.000000       3.0         -3698.142311                 1.0         False
6   -3698.099811   -3698.102311  5020.686071 -3698.099811    0.040000 -3698.102311    0.002500    0.000000      -99.960000       1.0         -3698.142311                 1.0         False
7   -3396.999811   -3537.910335  5020.686071 -3396.999811  301.100000 -3537.910335    0.002500  140.908023      101.140000       1.0         -3698.142311                 0.0         False
8   -2798.137370   -3398.142334  5020.686071 -2798.137370  739.770465 -3398.142334  400.004941  200.000023      200.000000       2.0         -3698.142311                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819205/2048, 
.[0m
[09/26 11:47:53]  --------------------------------------------------------------------------------
[09/26 11:47:53]  Iteration: 53 (11 solution, 41 counterexamples)
[09/26 11:48:07]  Generator returned sat in 12.723029 secs.
[09/26 11:48:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:48:08]  Improved gap from 44.99625 to 100
[09/26 11:48:08]  Improved number of small numbers from 67 to 71 out of a max of 114
[09/26 11:48:08]  Verifer returned sat in 0.918750 secs.
[09/26 11:48:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4766.902588   -4838.403281  5020.686071 -4766.902588    0.001465 -4838.403281    0.000000   71.500693       71.500693       9.0         -4838.403281                -1.0            -1
1   -4766.902588   -4809.901719  5020.686071 -4766.902588   71.499512 -4809.901719    0.000000   42.999131      -28.499307       6.0         -4838.403281                 1.0         False
2   -4738.403281   -4738.403281  5020.686071 -4738.403281   71.498437 -4738.403281    0.000000    0.000000     -100.000000       1.0         -4738.403281                 1.0          True
3   -4638.402031   -4638.403281  5020.686071 -4638.402031  100.001250 -4638.403281    0.000000    0.001250      -99.998750       1.0         -4738.403281                 0.0         False
4   -4387.402656   -4537.403281  5020.686071 -4387.402656  251.000625 -4537.403281    0.000000  150.000625       51.000625       1.0         -4738.403281                 0.0         False
5   -4138.404531   -4338.403281  5020.686071 -4138.404531  398.998750 -4338.403281    0.000000  199.998750      199.998750       1.0         -4738.403281                 0.0         False
6   -3737.903906   -4338.403076  5020.686071 -3737.903906  600.499375 -4338.403076  300.499375  299.999795      200.000000       2.0         -4738.403281                 0.0         False
7   -3737.903906   -4138.403281  5020.686071 -3737.903906    0.010000 -4138.403281  300.499375  100.000000      100.000000       2.0         -4038.403281                 0.0         False
8   -3437.898906   -4038.403320  5020.686071 -3437.898906  400.005000 -4038.403320  400.504375  200.000039      200.000000       3.0         -4038.403281                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=640807/1600, 
.[0m
[09/26 11:48:09]  --------------------------------------------------------------------------------
[09/26 11:48:09]  Iteration: 54 (11 solution, 42 counterexamples)
[09/26 11:48:13]  Generator returned sat in 3.106480 secs.
[09/26 11:48:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:48:14]  Improved gap from 0.0025 to 100
[09/26 11:48:14]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/26 11:48:14]  Verifer returned sat in 0.624618 secs.
[09/26 11:48:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5138.147461   -5238.025146  5020.686279 -5138.147461     0.122314 -5238.025146     0.000000   99.877686       99.877686       1.0         -5238.025146                -1.0            -1
1   -5038.147461   -5138.025146  5020.686279 -5038.147461   199.877686 -5138.025146     0.000000   99.877686       99.877686       1.0         -5238.025146                 0.0         False
2   -4837.902832   -5038.025146  5020.686279 -4837.902832   300.122314 -5038.025146     0.122314  200.000000      200.000000       1.0         -5238.025146                 0.0         False
3   -4837.902832   -5037.902588  5020.686279 -4837.902832    25.937500 -5037.902588     0.122314  199.877441      100.000000       2.0         -4838.025146                 0.0         False
4   -4837.902832   -4838.025146  5020.686279 -4837.902832    50.875000 -4838.025146     0.122314    0.000000        0.000000       3.0         -4838.025146                 1.0         False
5   -4737.152832   -4838.025146  5020.686279 -4737.152832   100.750000 -4838.025146     0.122314  100.750000        0.750000       3.0         -4838.025146                 1.0         False
6   -4637.402832   -4738.025146  5020.686279 -4637.402832   200.500000 -4738.025146     0.122314  100.500000        0.500000       2.0         -4838.025146                 1.0         False
7   -4337.902832   -4538.025146  5020.686279 -4337.902832   400.000000 -4538.025146     0.122314  200.000000      200.000000       1.0         -4838.025146                 1.0          True
8   -3136.902832   -4438.025146  5020.686279 -3136.902832  1401.000000 -4438.025146  1101.122314  200.000000      200.000000       2.0         -4838.025146                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1101, 
.[0m
[09/26 11:48:15]  --------------------------------------------------------------------------------
[09/26 11:48:15]  Iteration: 55 (11 solution, 43 counterexamples)
[09/26 11:48:17]  Generator returned sat in 0.688156 secs.
[09/26 11:48:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:48:17]  Improved number of small numbers from 113 to 113 out of a max of 113
[09/26 11:48:17]  Verifer returned sat in 0.205979 secs.
[09/26 11:48:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5138.147461   -5238.025146  5020.686279 -5138.147461     0.122314 -5238.025146     0.000000   99.877686       99.877686       1.0         -5238.025146                -1.0            -1
1   -5038.147461   -5138.025146  5020.686279 -5038.147461   199.877686 -5138.025146     0.000000   99.877686       99.877686       1.0         -5238.025146                 0.0         False
2   -4837.902832   -5038.025146  5020.686279 -4837.902832   300.122314 -5038.025146     0.122314  200.000000      200.000000       1.0         -5238.025146                 0.0         False
3   -4837.902832   -5037.902588  5020.686279 -4837.902832    25.000000 -5037.902588     0.122314  199.877441      100.000000       2.0         -4838.025146                 0.0         False
4   -4837.902832   -4838.025146  5020.686279 -4837.902832    50.000000 -4838.025146     0.122314    0.000000        0.000000       3.0         -4838.025146                 1.0         False
5   -4737.902832   -4838.025146  5020.686279 -4737.902832   100.000000 -4838.025146     0.122314  100.000000        0.000000       3.0         -4838.025146                 1.0         False
6   -4637.902832   -4738.025146  5020.686279 -4637.902832   200.000000 -4738.025146     0.122314  100.000000        0.000000       2.0         -4838.025146                 1.0         False
7   -4337.902832   -4538.025146  5020.686279 -4337.902832   400.000000 -4538.025146     0.122314  200.000000      200.000000       1.0         -4838.025146                 1.0          True
8   -3136.902832   -4438.025146  5020.686279 -3136.902832  1401.000000 -4438.025146  1101.122314  200.000000      200.000000       2.0         -4838.025146                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1101, 
.[0m
[09/26 11:48:17]  --------------------------------------------------------------------------------
[09/26 11:48:17]  Iteration: 56 (11 solution, 44 counterexamples)
[09/26 11:48:20]  Generator returned sat in 1.228635 secs.
[09/26 11:48:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:48:22]  Improved gap from 0.01 to 0
[09/26 11:48:22]  Improved number of small numbers from 64 to 72 out of a max of 114
[09/26 11:48:22]  Verifer returned sat in 2.024194 secs.
[09/26 11:48:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4938.931885   -5038.928076  4820.696279 -4938.931885    99.999756 -5038.928076        0.0   99.996191       99.996191       1.0         -5038.928076                -1.0            -1
1   -4938.928076   -4938.930664  4820.696279 -4938.928076   100.000000 -4938.930664        0.0    0.002588        0.000000       1.0         -5038.928076                 0.0         False
2   -4938.928076   -4938.928076  4920.696279 -4938.928076     0.001465 -4938.928076        0.0    0.000000        0.000000       2.0         -4938.928076                 0.0         False
3   -4838.928076   -4938.928076  4920.696279 -4838.928076   100.000000 -4938.928076        0.0  100.000000        0.000000       2.0         -4938.928076                 1.0         False
4   -4838.928076   -4838.928076  5020.686279 -4838.928076     0.010000 -4838.928076        0.0    0.000000       -0.010000       2.0         -4838.928076                 1.0         False
5   -4838.918076   -4838.918076  5020.686279 -4838.918076     0.010000 -4838.918076        0.0    0.000000     -100.000000       1.0         -4838.928076                 1.0         False
6   -4637.878076   -4638.918076  5020.686279 -4637.878076   201.040000 -4638.918076        0.0    1.040000        1.040000       1.0         -4838.928076                 0.0         False
7   -3635.818076   -4637.876953  5020.686279 -3635.818076  1003.100000 -4637.876953      703.1  298.958877      200.000000       1.0         -4838.928076                 0.0         False
8   -3635.818076   -4438.918213  5020.686279 -3635.818076     0.010000 -4438.918213      703.1  100.000137      100.000000       2.0         -4338.918076                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=7031/10, 
.[0m
[09/26 11:48:23]  --------------------------------------------------------------------------------
[09/26 11:48:23]  Iteration: 57 (11 solution, 45 counterexamples)
[09/26 11:48:35]  Generator returned sat in 10.721311 secs.
[09/26 11:48:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:48:35]  Improved gap from 0.0 to 100
[09/26 11:48:36]  Improved number of small numbers from 57 to 76 out of a max of 114
[09/26 11:48:36]  Verifer returned sat in 1.180388 secs.
[09/26 11:48:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5038.805908   -5038.806152  4920.696279 -5038.805908    99.999756 -5038.806152    0.000000    0.000244        0.000098       1.0         -5038.806152                -1.0            -1
1   -4938.928223   -4939.050146  4920.696279 -4938.928223    99.877930 -4939.050146    0.000000    0.121924       -0.122217       1.0         -4938.928223                 0.0         False
2   -4638.683936   -4938.805908  4920.696279 -4638.683936   300.366211 -4938.805908    0.122070  299.999902      200.000000       1.0         -4938.928223                 0.0         False
3   -4638.683936   -4738.806152  4920.696279 -4638.683936    60.840085 -4738.806152    0.122070  100.000146      100.000000       2.0         -4638.806006                 0.0         False
4   -4638.683936   -4638.806006  4920.696279 -4638.683936    90.260127 -4638.806006    0.122070    0.000000        0.000000       3.0         -4638.806006                 1.0         False
5   -4504.293745   -4638.806006  4920.696279 -4504.293745   134.390191 -4638.806006    0.122070  134.390191       34.390191       3.0         -4638.806006                 1.0         False
6   -4438.098649   -4538.805908  4920.696279 -4438.098649   200.585286 -4538.805908    0.122070  100.585189        0.585286       2.0         -4638.806006                 1.0         False
7   -4238.805908   -4338.806006  4920.696279 -4238.805908   299.877930 -4338.806006    0.122070   99.878027       99.878027       1.0         -4638.806006                 1.0          True
8   -3287.867041   -4238.806152  4920.696279 -3287.867041  1050.816895 -4238.806152  750.938965  200.000146      200.000000       1.0         -4638.806006                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1537673/2048, 
.[0m
[09/26 11:48:37]  --------------------------------------------------------------------------------
[09/26 11:48:37]  Iteration: 58 (11 solution, 46 counterexamples)
[09/26 11:48:45]  Generator returned sat in 6.395024 secs.
[09/26 11:48:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:48:46]  Improved number of small numbers from 58 to 79 out of a max of 113
[09/26 11:48:46]  Verifer returned sat in 0.875249 secs.
[09/26 11:48:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -4804.305420   -5004.303711  4786.194018 -4804.305420    0.000488 -5004.303711        0.0  199.998291       99.998325       9.0         -5004.303711                -1.0            -1
1   -4804.302490   -4804.304932  4786.194018 -4804.302490  200.001221 -4804.304932        0.0    0.002441        0.001254       1.0         -5004.303711                 1.0         False
2   -4604.304199   -4704.303745  4786.194018 -4604.304199  200.000732 -4704.303745        0.0   99.999545       99.999545       1.0         -4604.304199                 0.0         False
3   -4504.303745   -4604.303955  4786.194018 -4504.303745  200.000000 -4604.303955        0.0  100.000211      100.000000       1.0         -4504.303745                 0.0         False
4   -4504.303745   -4604.302979  4786.194018 -4504.303745    0.010000 -4604.302979        0.0   99.999234        0.000000       2.0         -4504.303745                 0.0         False
5   -4504.303745   -4504.303745  4886.193848 -4504.303745    1.000000 -4504.303745        0.0    0.000000       -0.000170       3.0         -4504.303745                 1.0         False
6   -4503.303745   -4503.303745  4985.184082 -4503.303745    1.000000 -4503.303745        0.0    0.000000       -0.009936       1.0         -4504.303745                 1.0         False
7   -4503.293745   -4503.293745  5085.174072 -4503.293745    0.010000 -4503.293745        0.0    0.000000       -0.009946       1.0         -4503.293745                 0.0         False
8   -4503.283745   -4503.283745  5185.173828 -4503.283745    0.010000 -4503.283745        0.0    0.000000       -0.000190       1.0         -4503.293745                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:48:46]  --------------------------------------------------------------------------------
[09/26 11:48:46]  Iteration: 59 (11 solution, 47 counterexamples)
[09/26 11:49:10]  Generator returned sat in 22.084429 secs.
[09/26 11:49:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:49:11]  Improved number of small numbers from 30 to 34 out of a max of 113
[09/26 11:49:11]  Verifer returned sat in 1.202231 secs.
[09/26 11:49:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5522.304199   -5822.303940  4886.193848 -5522.304199    0.000732 -5822.303940     0.000000  299.999741      199.999741       3.0          -5822.30394                -1.0            -1
1   -5024.917691   -5722.303940  4886.193848 -5024.917691  797.386249 -5722.303940   397.386249  300.000000      200.000000       3.0          -5822.30394                 0.0         False
2   -4527.531808   -5522.303940  4886.193848 -4527.531808  797.385883 -5522.303940   794.772132  200.000000      200.000000       2.0          -5322.30394                 0.0         False
3   -3930.146291   -5519.996699  4886.193848 -3930.146291  797.385517 -5519.996699  1292.157649  297.692758      200.000000       3.0          -5222.30394                 0.0         False
4   -3830.146291   -5422.303940  4886.193848 -3830.146291  397.692758 -5422.303940  1292.157649  300.000000      200.000000       4.0          -5122.30394                 0.0         False
5   -3482.299912   -5222.303940  4886.193848 -3482.299912  647.846379 -5222.303940  1540.004028  200.000000      200.000000       3.0          -5122.30394                 1.0         False
6   -3359.376723   -5122.304199  4886.193848 -3359.376723  322.923190 -5122.304199  1562.927218  200.000259      200.000000       3.0          -4922.30394                 0.0         False
7   -3359.376723   -5122.303940  4886.193848 -3359.376723  160.461595 -5122.303940  1562.927218  200.000000      100.000000       4.0          -4922.30394                 0.0         False
8   -3030.145925   -5022.303940  4886.193848 -3030.145925  529.230797 -5022.303940  1692.158015  300.000000      200.000000       4.0          -4922.30394                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=3276803/8192, 
.[0m
[09/26 11:49:12]  --------------------------------------------------------------------------------
[09/26 11:49:12]  Iteration: 60 (11 solution, 48 counterexamples)
[09/26 11:49:22]  Generator returned sat in 9.217734 secs.
[09/26 11:49:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:49:23]  Verifer returned unsat in 0.178363 secs.
[09/26 11:49:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:49:23]  --------------------------------------------------------------------------------
[09/26 11:49:23]  Iteration: 61 (12 solution, 48 counterexamples)
[09/26 11:49:27]  Generator returned sat in 2.424168 secs.
[09/26 11:49:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:49:27]  Improved gap from 0.01 to 100
[09/26 11:49:28]  Improved number of small numbers from 64 to 106 out of a max of 114
[09/26 11:49:28]  Verifer returned sat in 0.976666 secs.
[09/26 11:49:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6122.303955   -6122.304443  5286.192627 -6122.303955    0.002441 -6122.304443    0.000000    0.000488       -0.001221       3.0         -6122.304443                -1.0            -1
1   -6122.302002   -6122.302734  5286.192627 -6122.302002    0.002441 -6122.302734    0.000000    0.000732      -99.999268       1.0         -6122.304443                 1.0         False
2   -5822.302002   -5922.302979  5286.192627 -5822.302002  300.000732 -5922.302979    0.000000  100.000977      100.000732       1.0         -6122.304443                 0.0         False
3   -5622.302979   -5822.801211  5286.192627 -5622.302979  300.000000 -5822.801211    0.000000  200.498232      199.999756       2.0         -5622.302979                 0.0         False
4   -5622.302979   -5822.301025  5286.192627 -5622.302979    0.010000 -5822.301025    0.000000  199.998047       99.999756       2.0         -5622.302979                 1.0         False
5   -5622.302979   -5622.311211  5286.192627 -5622.302979    0.010000 -5622.311211    0.000000    0.008232       -0.000244       3.0         -5622.302979                 1.0         False
6   -5622.301211   -5622.302044  5286.192627 -5622.301211    0.010000 -5622.302044    0.000000    0.000833      -99.998477       1.0         -5622.302979                 1.0         False
7   -5222.303711   -5422.302734  5286.192627 -5222.303711  399.998333 -5422.302734    0.000000  199.999023      199.999023       1.0         -5622.302979                 0.0         False
8   -4623.306152   -5322.302979  5286.192627 -4623.306152  798.996582 -5322.302979  498.996582  200.000244      200.000000       2.0         -5622.302979                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1021945/2048, 
.[0m
[09/26 11:49:28]  --------------------------------------------------------------------------------
[09/26 11:49:28]  Iteration: 62 (12 solution, 49 counterexamples)
[09/26 11:49:41]  Generator returned sat in 11.688377 secs.
[09/26 11:49:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:49:42]  Improved gap from 0.0 to 0
[09/26 11:49:42]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/26 11:49:42]  Verifer returned sat in 0.708462 secs.
[09/26 11:49:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5824.946289   -6026.458008  5188.836182 -5824.946289   0.122070 -6026.458008        0.0  201.511719      200.000000       8.0         -6026.458008                -1.0            -1
1   -5824.946289   -5925.068604  5188.836182 -5824.946289   0.122070 -5925.068604        0.0  100.122314      100.000000       9.0         -6026.458008                 0.0         False
2   -5824.946289   -5924.946289  5188.836182 -5824.946289  99.999756 -5924.946289        0.0  100.000000        0.000000       8.0         -6026.458008                 1.0          True
3   -5824.946289   -5824.946289  5288.202393 -5824.946289  99.877686 -5824.946289        0.0    0.000000       -0.633789       9.0         -5824.946289                 0.0         False
4   -5725.190430   -5725.312500  5288.202393 -5725.190430  99.755859 -5725.312500        0.0    0.122070       -0.877930       1.0         -5725.190430                 1.0         False
5   -5724.312500   -5724.312500  5387.202393 -5724.312500   1.000000 -5724.312500        0.0    0.000000       -1.000000       1.0         -5724.312500                 0.0         False
6   -5723.312500   -5723.312500  5486.202637 -5723.312500   1.000000 -5723.312500        0.0    0.000000       -0.999756       1.0         -5724.312500                 0.0         False
7   -5722.312500   -5722.312500  5585.202393 -5722.312500   1.000000 -5722.312500        0.0    0.000000       -1.000000       1.0         -5724.312500                 0.0         False
8   -5721.312500   -5721.312500  5684.324463 -5721.312500   1.000000 -5721.312500        0.0    0.000000       -0.877930       1.0         -5724.312500                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:49:43]  --------------------------------------------------------------------------------
[09/26 11:49:43]  Iteration: 63 (12 solution, 50 counterexamples)
[09/26 11:50:04]  Generator returned sat in 19.351444 secs.
[09/26 11:50:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:04]  Verifer returned unsat in 0.351746 secs.
[09/26 11:50:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:04]  --------------------------------------------------------------------------------
[09/26 11:50:04]  Iteration: 64 (13 solution, 50 counterexamples)
[09/26 11:50:07]  Generator returned sat in 0.727215 secs.
[09/26 11:50:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:07]  Verifer returned unsat in 0.342826 secs.
[09/26 11:50:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:07]  --------------------------------------------------------------------------------
[09/26 11:50:07]  Iteration: 65 (14 solution, 50 counterexamples)
[09/26 11:50:09]  Generator returned sat in 0.755793 secs.
[09/26 11:50:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:10]  Verifer returned unsat in 0.210673 secs.
[09/26 11:50:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:10]  --------------------------------------------------------------------------------
[09/26 11:50:10]  Iteration: 66 (15 solution, 50 counterexamples)
[09/26 11:50:12]  Generator returned sat in 0.713739 secs.
[09/26 11:50:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:12]  Verifer returned unsat in 0.214890 secs.
[09/26 11:50:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:12]  --------------------------------------------------------------------------------
[09/26 11:50:12]  Iteration: 67 (16 solution, 50 counterexamples)
[09/26 11:50:14]  Generator returned sat in 0.714659 secs.
[09/26 11:50:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:15]  Verifer returned unsat in 0.181921 secs.
[09/26 11:50:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:15]  --------------------------------------------------------------------------------
[09/26 11:50:15]  Iteration: 68 (17 solution, 50 counterexamples)
[09/26 11:50:17]  Generator returned sat in 1.022031 secs.
[09/26 11:50:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:18]  Verifer returned unsat in 0.129302 secs.
[09/26 11:50:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:18]  --------------------------------------------------------------------------------
[09/26 11:50:18]  Iteration: 69 (18 solution, 50 counterexamples)
[09/26 11:50:20]  Generator returned sat in 1.001760 secs.
[09/26 11:50:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:21]  Improved gap from 0.1219482421875 to 100
[09/26 11:50:22]  Improved number of small numbers from 30 to 54 out of a max of 114
[09/26 11:50:22]  Verifer returned sat in 1.551217 secs.
[09/26 11:50:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8219.454102   -8219.514893  7365.432833 -8219.454102    0.182861 -8219.514893    0.000000    0.060791       -0.061047       3.0         -8219.514893                -1.0            -1
1   -8219.392822   -8219.392822  7365.432833 -8219.392822    0.122070 -8219.392822    0.000000    0.000000      -99.999768       1.0         -8219.392822                 0.0         False
2   -8119.332031   -8119.393054  7365.432833 -8119.332031  100.060791 -8119.393054    0.000000    0.061023      -99.938977       1.0         -8219.392822                 0.0         False
3   -7877.790074   -8019.393054  7365.432833 -7877.790074  241.602980 -8019.393054    0.000000  141.602980       41.602980       1.0         -8219.392822                 0.0         False
4   -7655.988584   -7819.393054  7365.432833 -7655.988584  363.404470 -7819.393054    0.000000  163.404470      163.404470       1.0         -8219.392822                 0.0         False
5   -7273.286349   -7720.100370  7365.432833 -7273.286349  546.106705 -7720.100370  246.106705  200.707316      200.000000       2.0         -8219.392822                 0.0         False
6   -7273.286349   -7655.927610  7365.432833 -7273.286349  200.646342 -7655.927610  246.106705  136.534556      100.000000       2.0         -7519.393054                 0.0         False
7   -7107.851393   -7519.393054  7365.432833 -7107.851393  301.969513 -7519.393054  246.106705  165.434957      165.434957       3.0         -7519.393054                 0.0         False
8   -6819.332080   -7419.393066  7365.432833 -6819.332080  453.954269 -7419.393066  400.060974  200.000012      200.000000       2.0         -7519.393054                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=6554599/16384, 
.[0m
[09/26 11:50:22]  --------------------------------------------------------------------------------
[09/26 11:50:22]  Iteration: 70 (18 solution, 51 counterexamples)
[09/26 11:50:36]  Generator returned sat in 12.112955 secs.
[09/26 11:50:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:50:38]  Improved number of small numbers from 40 to 61 out of a max of 113
[09/26 11:50:38]  Verifer returned sat in 1.521505 secs.
[09/26 11:50:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7418.344238   -7618.283293  7365.432833 -7418.344238    0.061035 -7618.283293    0.000000  199.939054       99.939054       1.0         -7618.283293                -1.0            -1
1   -7418.344238   -7418.344238  7365.432833 -7418.344238  194.670898 -7418.344238    0.000000    0.000000       -0.060946       2.0         -7618.283293                 0.0         False
2   -7223.734619   -7418.283293  7365.432833 -7223.734619  194.609619 -7418.283293    0.000000  194.548674       94.548674       1.0         -7223.734619                 1.0          True
3   -7223.734619   -7318.283293  7365.432833 -7223.734619  194.487793 -7318.283293    0.000000   94.548674       -5.451326       2.0         -7223.734619                 0.0         False
4   -6920.039396   -7217.283293  7365.432833 -6920.039396  398.243896 -7217.283293    0.000000  297.243896      198.243896       1.0         -7223.734619                 1.0         False
5   -6920.039396   -7018.283293  7365.432833 -6920.039396  199.121948 -7018.283293    0.000000   98.243896       98.243896       2.0         -6920.039396                 0.0         False
6   -6517.722319   -6918.283293  7365.432833 -6517.722319  500.560974 -6918.283293  200.560974  200.000000      200.000000       1.0         -6920.039396                 1.0         False
7   -6517.722319   -6818.283293  7365.432833 -6517.722319  199.000000 -6818.283293  200.560974  100.000000      100.000000       2.0         -6718.283293                 0.0         False
8   -6118.222319   -6818.283203  7365.432833 -6118.222319  499.500000 -6818.283203  400.060974  299.999910      200.000000       3.0         -6718.283293                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=6554599/16384, 
.[0m
[09/26 11:50:38]  --------------------------------------------------------------------------------
[09/26 11:50:38]  Iteration: 71 (18 solution, 52 counterexamples)
[09/26 11:50:46]  Generator returned sat in 6.387429 secs.
[09/26 11:50:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:47]  Improved gap from 0.0 to 100
[09/26 11:50:48]  Improved number of small numbers from 59 to 75 out of a max of 114
[09/26 11:50:48]  Verifer returned sat in 1.142993 secs.
[09/26 11:50:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7218.278076   -7418.276367  7365.432833 -7218.278076    0.001667 -7418.276367    0.000000  199.998291       99.998460       3.0         -7418.276367                -1.0            -1
1   -7018.278076   -7218.276536  7365.432833 -7018.278076  399.998291 -7218.276536    0.000000  199.998460      199.998460       1.0         -7418.276367                 1.0         False
2   -7018.278076   -7118.276536  7365.432833 -7018.278076    0.001709 -7118.276536    0.000000   99.998460       99.998460       2.0         -7018.278076                 0.0         False
3   -7018.278076   -7018.284870  7365.432833 -7018.278076    0.011719 -7018.284870    0.000000    0.006794       -0.001540       3.0         -7018.278076                 1.0         False
4   -7018.274870   -7018.276536  7365.432833 -7018.274870    0.010000 -7018.276536    0.000000    0.001667      -99.998333       1.0         -7018.274870                 1.0         False
5   -6917.256536   -6917.276536  7365.432833 -6917.256536  101.020000 -6917.276536    0.000000    0.020000      -98.980000       1.0         -7018.274870                 0.0         False
6   -6613.736536   -6718.276536  7365.432833 -6613.736536  303.540000 -6718.276536    0.000000  104.540000      104.540000       1.0         -7018.274870                 0.0         False
7   -5960.192370   -6718.276536  7365.432833 -5960.192370  758.084167 -6718.276536  458.084167  300.000000      200.000000       1.0         -7018.274870                 0.0         False
8   -5960.192370   -6518.276611  7365.432833 -5960.192370  149.000000 -6518.276611  458.084167  100.000075      100.000000       2.0         -6418.276536                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=549701/1200, 
.[0m
[09/26 11:50:48]  --------------------------------------------------------------------------------
[09/26 11:50:48]  Iteration: 72 (18 solution, 53 counterexamples)
[09/26 11:50:58]  Generator returned sat in 8.329037 secs.
[09/26 11:50:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:50:59]  Improved gap from 0.0 to 4.6875
[09/26 11:50:59]  Improved number of small numbers from 55 to 114 out of a max of 114
[09/26 11:50:59]  Verifer returned sat in 0.692220 secs.
[09/26 11:50:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7115.371338   -7115.492920  7365.432861 -7115.371338    0.487793 -7115.492920        0.0   0.121582       -0.122314       4.0         -7115.492920                -1.0            -1
1   -7115.127197   -7115.249023  7365.432861 -7115.127197    0.365723 -7115.249023        0.0   0.121826      -99.878174       1.0         -7115.127197                 1.0         False
2   -6915.127197   -6915.249023  7365.432861 -6915.127197  200.121826 -6915.249023        0.0   0.121826        0.121826       1.0         -7115.127197                 0.0         False
3   -6815.249023   -6893.189941  7365.432861 -6815.249023  100.000000 -6893.189941        0.0  77.940918        0.000000       1.0         -6815.249023                 0.0         False
4   -6815.249023   -6815.249023  7438.932861 -6815.249023   51.000000 -6815.249023        0.0   0.000000      -26.500000       2.0         -6815.249023                 0.0         False
5   -6788.749023   -6788.749023  7524.682861 -6788.749023   26.500000 -6788.749023        0.0   0.000000      -14.250000       1.0         -6788.749023                 0.0         False
6   -6774.499023   -6774.499023  7619.995117 -6774.499023   14.250000 -6774.499023        0.0   0.000000       -4.687744       1.0         -6774.499023                 0.0         False
7   -6766.374023   -6766.374023  7711.870117 -6766.374023    8.125000 -6766.374023        0.0   0.000000       -4.687744       1.0         -6766.374023                 0.0         False
8   -6761.311523   -6761.311523  7784.995117 -6761.311523    5.062500 -6761.311523        0.0   0.000000      -26.500244       1.0         -6761.311523                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:51:00]  --------------------------------------------------------------------------------
[09/26 11:51:00]  Iteration: 73 (18 solution, 54 counterexamples)
[09/26 11:51:13]  Generator returned sat in 11.210476 secs.
[09/26 11:51:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:51:14]  Improved number of small numbers from 58 to 66 out of a max of 113
[09/26 11:51:14]  Verifer returned sat in 1.165510 secs.
[09/26 11:51:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6662.630859   -6862.628447  7032.447041 -6662.630859  299.999756 -6862.628447    0.00000  199.997588      199.997588       3.0         -6862.628447                -1.0            -1
1   -6562.630947   -6762.628662  7032.447041 -6562.630947  299.997500 -6762.628662    0.00000  199.997715      199.997500       4.0         -6562.630947                 1.0         False
2   -6562.630947   -6762.628447  7032.447041 -6562.630947    0.002500 -6762.628447    0.00000  199.997500       99.997500       4.0         -6562.630947                 1.0         False
3   -6509.137197   -6662.628447  7032.447041 -6509.137197  253.491250 -6662.628447    0.00000  153.491250       53.491250       3.0         -6562.630947                 1.0         False
4   -6310.137197   -6519.099697  7032.447041 -6310.137197  352.491250 -6519.099697    0.00000  208.962500      152.491250       2.0         -6562.630947                 1.0         False
5   -5815.117197   -6462.628418  7032.447041 -5815.117197  703.982500 -6462.628418  347.51125  299.999971      200.000000       2.0         -6562.630947                 0.0         False
6   -5815.117197   -6310.137197  7032.447041 -5815.117197    0.010000 -6310.137197  347.51125  147.508750      100.000000       3.0         -6162.628447                 0.0         False
7   -5787.370322   -6162.628447  7032.447041 -5787.370322  175.255625 -6162.628447  347.51125   27.746875       27.746875       3.0         -6162.628447                 1.0         False
8   -5462.625947   -6134.879150  7032.447041 -5462.625947  352.491250 -6134.879150  400.00250  272.250703      200.000000       1.0         -6162.628447                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[09/26 11:51:14]  --------------------------------------------------------------------------------
[09/26 11:51:14]  Iteration: 74 (18 solution, 55 counterexamples)
[09/26 11:51:24]  Generator returned sat in 7.788929 secs.
[09/26 11:51:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:51:25]  Improved number of small numbers from 73 to 90 out of a max of 113
[09/26 11:51:25]  Verifer returned sat in 0.835368 secs.
[09/26 11:51:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6662.628418   -6862.628662  7032.447021 -6662.628418  206.009766 -6862.628662    0.000000  200.000244      200.000000       1.0         -6862.628662                -1.0            -1
1   -6656.620117   -6762.628418  7032.447021 -6656.620117  206.008545 -6762.628418    0.000000  106.008301      106.008301       2.0         -6656.620117                 0.0         False
2   -6656.618408   -6728.601751  7032.447021 -6656.618408  106.010010 -6728.601751    0.000000   71.983343        6.010010       3.0         -6656.618408                 1.0         False
3   -6462.635085   -6656.618418  7032.447021 -6462.635085  265.966667 -6656.618418    0.000000  193.983333       99.993333       2.0         -6656.618408                 1.0         False
4   -6462.635085   -6462.636751  7032.447021 -6462.635085    0.010000 -6462.636751    0.000000    0.001667       -0.006667       2.0         -6462.635085                 1.0         False
5   -6462.626751   -6462.628418  7032.447021 -6462.626751    0.010000 -6462.628418    0.000000    0.001667      -99.998333       1.0         -6462.635085                 1.0         False
6   -6328.626751   -6328.626751  7032.447021 -6328.626751  134.001667 -6328.626751    0.000000    0.000000      -65.998333       1.0         -6462.635085                 0.0         False
7   -5962.628418   -6162.628418  7032.447021 -5962.628418  365.998333 -6162.628418    0.000000  200.000000      200.000000       1.0         -6462.635085                 0.0         False
8   -5462.626751   -6062.628418  7032.447021 -5462.626751  700.001667 -6062.628418  400.001667  200.000000      200.000000       2.0         -6462.635085                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=240001/600, 
.[0m
[09/26 11:51:25]  --------------------------------------------------------------------------------
[09/26 11:51:25]  Iteration: 75 (18 solution, 56 counterexamples)
[09/26 11:51:33]  Generator returned sat in 5.858565 secs.
[09/26 11:51:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:51:35]  Improved number of small numbers from 45 to 62 out of a max of 113
[09/26 11:51:35]  Verifer returned sat in 1.452318 secs.
[09/26 11:51:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6561.197021   -6663.683594  7032.447021 -6561.197021    0.121582 -6663.683594   0.000000  102.486572       95.756509       1.0         -6663.683594                -1.0            -1
1   -6561.197021   -6561.318643  7032.447021 -6561.197021    0.121826 -6561.318643   0.000000    0.121621       -4.243491       2.0         -6663.683594                 0.0         False
2   -6257.075234   -6556.953369  7032.447021 -6257.075234  304.243408 -6556.953369   0.000000  299.878135      199.878296       1.0         -6663.683594                 1.0          True
3   -6257.075234   -6456.953530  7032.447021 -6257.075234  298.878296 -6456.953530   0.000000  199.878296       99.878296       2.0         -6257.075234                 0.0         False
4   -6157.075234   -6256.953530  7032.447021 -6157.075234  299.878296 -6256.953530   0.000000   99.878296       99.878296       1.0         -6257.075234                 1.0         False
5   -5953.831826   -6156.953530  7032.447021 -5953.831826  303.121704 -6156.953530   3.121704  200.000000      200.000000       1.0         -6257.075234                 0.0         False
6   -5851.710122   -6056.953530  7032.447021 -5851.710122  302.121704 -6056.953530   5.243408  200.000000      200.000000       2.0         -5856.953530                 0.0         False
7   -5750.588418   -5956.953530  7032.447021 -5750.588418  301.121704 -5956.953530   6.365112  200.000000      200.000000       3.0         -5756.953530                 1.0         False
8   -5650.466714   -5856.953613  7032.447021 -5650.466714  300.121704 -5856.953613   6.486816  200.000083      200.000000       3.0         -5656.953530                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=13285/2048, 
.[0m
[09/26 11:51:35]  --------------------------------------------------------------------------------
[09/26 11:51:35]  Iteration: 76 (18 solution, 57 counterexamples)
[09/26 11:52:05]  Generator returned sat in 28.205606 secs.
[09/26 11:52:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:07]  Improved number of small numbers from 41 to 64 out of a max of 113
[09/26 11:52:07]  Verifer returned sat in 1.373043 secs.
[09/26 11:52:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7100.527832   -7400.527588  7032.447021 -7100.527832    0.121582 -7400.527588    0.000000  299.999756      199.999817       2.0         -7400.527588                -1.0            -1
1   -7100.527832   -7300.527588  7032.447021 -7100.527832    0.121826 -7300.527588    0.000000  199.999756       99.999817       2.0         -7400.527588                 0.0         False
2   -7100.527832   -7147.652841  7032.447021 -7100.527832  199.878418 -7147.652841    0.000000   47.125009       -0.000183       3.0         -7400.527588                 0.0         False
3   -6980.150754   -7052.902484  7032.447021 -6980.150754  167.502087 -7052.902484    0.000000   72.751730       20.376895       1.0         -6980.150754                 1.0          True
4   -6800.649353   -6980.029050  7032.447021 -6800.649353  252.253131 -6980.029050    0.000000  179.379697       99.878296       1.0         -6980.150754                 0.0         False
5   -6600.649353   -6800.527649  7032.447021 -6600.649353  379.379697 -6800.527649    0.000000  199.878296      199.878296       1.0         -6980.150754                 0.0         False
6   -6230.458104   -6800.405762  7032.447021 -6230.458104  570.069545 -6800.405762  270.069545  299.878113      200.000000       2.0         -6980.150754                 0.0         False
7   -6230.458104   -6600.527649  7032.447021 -6230.458104  286.034773 -6600.527649  270.069545  100.000000      100.000000       2.0         -6500.527649                 0.0         False
8   -5900.405945   -6600.527588  7032.447021 -5900.405945  430.052159 -6600.527588  400.121704  299.999939      200.000000       3.0         -6500.527649                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277797/8192, 
.[0m
[09/26 11:52:07]  --------------------------------------------------------------------------------
[09/26 11:52:07]  Iteration: 77 (18 solution, 58 counterexamples)
[09/26 11:52:18]  Generator returned sat in 8.628603 secs.
[09/26 11:52:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:52:19]  Improved number of small numbers from 48 to 56 out of a max of 113
[09/26 11:52:19]  Verifer returned sat in 1.516804 secs.
[09/26 11:52:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7153.852295   -7353.913019  6985.832392 -7153.852295    0.060547 -7353.913019    0.000000  200.060724      100.060724       1.0         -7353.913019                -1.0            -1
1   -7153.852295   -7153.973810  6985.832392 -7153.852295    0.060791 -7153.973810    0.000000    0.121515        0.060724       2.0         -7353.913019                 0.0         False
2   -7153.852295   -7153.913019  6985.832392 -7153.852295    0.060791 -7153.913019    0.000000    0.060724      -99.939276       3.0         -7353.913019                 1.0          True
3   -6753.852228   -6954.579686  6985.832392 -6753.852228  400.060791 -6954.579686    0.060791  200.666667      200.000000       1.0         -7353.913019                 1.0          True
4   -6753.852228   -6953.913019  6985.832392 -6753.852228  200.666667 -6953.913019    0.060791  200.000000      100.000000       2.0         -6753.913019                 0.0         False
5   -6652.458104   -6768.064488  6985.832392 -6652.458104  301.394124 -6768.064488    0.060791  115.545593      101.394124       3.0         -6753.913019                 1.0         False
6   -6230.458104   -6653.913019  6985.832392 -6230.458104  537.545593 -6653.913019  223.454915  200.000000      200.000000       2.0         -6753.913019                 1.0         False
7   -6230.458104   -6553.913019  6985.832392 -6230.458104  151.333333 -6553.913019  223.454915  100.000000      100.000000       2.0         -6453.913019                 1.0         False
8   -5853.791437   -6453.913086  6985.832392 -5853.791437  476.666667 -6453.913086  400.121582  200.000067      200.000000       3.0         -6453.913019                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638649/4096, 
.[0m
[09/26 11:52:20]  --------------------------------------------------------------------------------
[09/26 11:52:20]  Iteration: 78 (18 solution, 59 counterexamples)
[09/26 11:52:34]  Generator returned sat in 12.451543 secs.
[09/26 11:52:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:35]  Improved number of small numbers from 103 to 113 out of a max of 113
[09/26 11:52:35]  Verifer returned sat in 0.366210 secs.
[09/26 11:52:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8143.737061   -8154.521240  7885.954102 -8143.737061  300.486084 -8154.521240   0.000000   10.784180       10.297852       1.0         -8154.521240                -1.0            -1
1   -7854.156494   -8143.615479  7885.954102 -7854.156494  300.364746 -8143.615479   0.000000  289.458984      199.878418       1.0         -7854.156494                 0.0         False
2   -7854.156494   -7954.278076  7885.954102 -7854.156494  289.337402 -7954.278076   0.000000  100.121582       99.878418       2.0         -7854.156494                 0.0         False
3   -7653.913330   -7854.156494  7885.954102 -7653.913330  300.364746 -7854.156494   0.121582  200.121582      200.000000       3.0         -7854.156494                 1.0         False
4   -7553.670166   -7798.764404  7885.954102 -7553.670166  300.364746 -7798.764404   0.364746  244.729492      200.000000       2.0         -7854.156494                 1.0         False
5   -7453.548584   -7654.034912  7885.954102 -7453.548584  344.851074 -7654.034912   0.486328  200.000000      200.000000       3.0         -7854.156494                 1.0          True
6   -7353.305420   -7554.034912  7885.954102 -7353.305420  300.243164 -7554.034912   0.729492  200.000000      200.000000       3.0         -7354.034912                 1.0          True
7   -7253.183838   -7476.399658  7885.954102 -7253.183838  300.121582 -7476.399658   0.851074  222.364746      200.000000       3.0         -7254.034912                 1.0         False
8   -7153.183838   -7453.913086  7885.954102 -7153.183838  322.364746 -7453.913086   0.851074  299.878174      200.000000       3.0         -7254.034912                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=249/512, 
.[0m
[09/26 11:52:35]  --------------------------------------------------------------------------------
[09/26 11:52:35]  Iteration: 79 (18 solution, 60 counterexamples)
[09/26 11:52:42]  Generator returned sat in 4.660097 secs.
[09/26 11:52:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:42]  Verifer returned unsat in 0.234970 secs.
[09/26 11:52:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:42]  --------------------------------------------------------------------------------
[09/26 11:52:42]  Iteration: 80 (19 solution, 60 counterexamples)
[09/26 11:52:46]  Generator returned sat in 1.727567 secs.
[09/26 11:52:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:46]  Verifer returned unsat in 0.208650 secs.
[09/26 11:52:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:46]  --------------------------------------------------------------------------------
[09/26 11:52:46]  Iteration: 81 (20 solution, 60 counterexamples)
[09/26 11:52:49]  Generator returned sat in 0.987121 secs.
[09/26 11:52:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:49]  Verifer returned unsat in 0.227843 secs.
[09/26 11:52:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:49]  --------------------------------------------------------------------------------
[09/26 11:52:49]  Iteration: 82 (21 solution, 60 counterexamples)
[09/26 11:52:52]  Generator returned sat in 1.053609 secs.
[09/26 11:52:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:52]  Verifer returned unsat in 0.172256 secs.
[09/26 11:52:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:53]  --------------------------------------------------------------------------------
[09/26 11:52:53]  Iteration: 83 (22 solution, 60 counterexamples)
[09/26 11:52:56]  Generator returned sat in 1.239963 secs.
[09/26 11:52:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:52:56]  Improved gap from 4.182373046875 to 100
[09/26 11:52:56]  Improved number of small numbers from 83 to 114 out of a max of 114
[09/26 11:52:56]  Verifer returned sat in 0.540031 secs.
[09/26 11:52:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7253.179199   -7529.027344  7284.169678 -7253.179199  275.726318 -7529.027344    0.000000  275.848145      176.848145       2.0         -7529.027344                -1.0            -1
1   -7253.179199   -7330.027344  7284.169678 -7253.179199  275.726562 -7330.027344    0.000000   76.848145       76.848145       2.0         -7529.027344                 0.0         False
2   -6980.723389   -7253.179443  7284.169678 -6980.723389  349.303955 -7253.179443   49.303955  223.152100      200.000000       3.0         -7529.027344                 0.0         False
3   -6854.693115   -7178.966553  7284.169678 -6854.693115  349.182373 -7178.966553   75.334229  248.939209      200.000000       2.0         -6930.027344                 0.0         False
4   -6754.571533   -7080.088135  7284.169678 -6754.571533  349.060791 -7080.088135   75.455811  250.060791      200.000000       3.0         -6830.027344                 0.0         False
5   -6754.571533   -6930.027344  7284.169678 -6754.571533  248.939209 -6930.027344   75.455811  100.000000      100.000000       3.0         -6830.027344                 0.0         False
6   -6530.419434   -6853.936279  7284.169678 -6530.419434  324.152100 -6853.936279   99.607910  223.908936      200.000000       3.0         -6830.027344                 0.0         False
7   -6430.298096   -6730.027344  7284.169678 -6430.298096  324.030273 -6730.027344   99.729248  200.000000      200.000000       2.0         -6530.027344                 0.0         False
8   -6281.237305   -6680.088135  7284.169678 -6281.237305  349.060791 -6680.088135  148.790039  250.060791      200.000000       3.0         -6530.027344                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=300377/4096, 
.[0m
[09/26 11:52:57]  --------------------------------------------------------------------------------
[09/26 11:52:57]  Iteration: 84 (22 solution, 61 counterexamples)
[09/26 11:53:00]  Generator returned sat in 1.283343 secs.
[09/26 11:53:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:00]  Verifer returned unsat in 0.221910 secs.
[09/26 11:53:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:00]  --------------------------------------------------------------------------------
[09/26 11:53:00]  Iteration: 85 (23 solution, 61 counterexamples)
[09/26 11:53:03]  Generator returned sat in 1.050241 secs.
[09/26 11:53:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:04]  Verifer returned unsat in 0.107840 secs.
[09/26 11:53:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:04]  --------------------------------------------------------------------------------
[09/26 11:53:04]  Iteration: 86 (24 solution, 61 counterexamples)
[09/26 11:53:07]  Generator returned sat in 1.117731 secs.
[09/26 11:53:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:07]  Verifer returned unsat in 0.166571 secs.
[09/26 11:53:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:07]  --------------------------------------------------------------------------------
[09/26 11:53:07]  Iteration: 87 (25 solution, 61 counterexamples)
[09/26 11:53:10]  Generator returned sat in 1.030943 secs.
[09/26 11:53:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:10]  Verifer returned unsat in 0.174901 secs.
[09/26 11:53:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:10]  --------------------------------------------------------------------------------
[09/26 11:53:10]  Iteration: 88 (26 solution, 61 counterexamples)
[09/26 11:53:13]  Generator returned sat in 1.112511 secs.
[09/26 11:53:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:13]  Verifer returned unsat in 0.108656 secs.
[09/26 11:53:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:13]  --------------------------------------------------------------------------------
[09/26 11:53:13]  Iteration: 89 (27 solution, 61 counterexamples)
[09/26 11:53:16]  Generator returned sat in 0.984630 secs.
[09/26 11:53:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:17]  Verifer returned unsat in 0.245450 secs.
[09/26 11:53:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:17]  --------------------------------------------------------------------------------
[09/26 11:53:17]  Iteration: 90 (28 solution, 61 counterexamples)
[09/26 11:53:20]  Generator returned sat in 0.965309 secs.
[09/26 11:53:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:20]  Verifer returned unsat in 0.288645 secs.
[09/26 11:53:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:20]  --------------------------------------------------------------------------------
[09/26 11:53:20]  Iteration: 91 (29 solution, 61 counterexamples)
[09/26 11:53:23]  Generator returned sat in 0.962147 secs.
[09/26 11:53:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:23]  Verifer returned unsat in 0.222824 secs.
[09/26 11:53:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:23]  --------------------------------------------------------------------------------
[09/26 11:53:23]  Iteration: 92 (30 solution, 61 counterexamples)
[09/26 11:53:26]  Generator returned sat in 0.992375 secs.
[09/26 11:53:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:26]  Verifer returned unsat in 0.216011 secs.
[09/26 11:53:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:26]  --------------------------------------------------------------------------------
[09/26 11:53:26]  Iteration: 93 (31 solution, 61 counterexamples)
[09/26 11:53:29]  Generator returned sat in 0.984918 secs.
[09/26 11:53:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:30]  Verifer returned unsat in 0.221059 secs.
[09/26 11:53:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:30]  --------------------------------------------------------------------------------
[09/26 11:53:30]  Iteration: 94 (32 solution, 61 counterexamples)
[09/26 11:53:33]  Generator returned sat in 0.993482 secs.
[09/26 11:53:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:33]  Verifer returned unsat in 0.242355 secs.
[09/26 11:53:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:33]  --------------------------------------------------------------------------------
[09/26 11:53:33]  Iteration: 95 (33 solution, 61 counterexamples)
[09/26 11:53:36]  Generator returned sat in 0.969905 secs.
[09/26 11:53:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:36]  Verifer returned unsat in 0.170059 secs.
[09/26 11:53:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:36]  --------------------------------------------------------------------------------
[09/26 11:53:36]  Iteration: 96 (34 solution, 61 counterexamples)
[09/26 11:53:39]  Generator returned sat in 0.968444 secs.
[09/26 11:53:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:39]  Verifer returned unsat in 0.199691 secs.
[09/26 11:53:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:39]  --------------------------------------------------------------------------------
[09/26 11:53:39]  Iteration: 97 (35 solution, 61 counterexamples)
[09/26 11:53:42]  Generator returned sat in 0.984851 secs.
[09/26 11:53:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:43]  Verifer returned unsat in 0.325987 secs.
[09/26 11:53:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:43]  --------------------------------------------------------------------------------
[09/26 11:53:43]  Iteration: 98 (36 solution, 61 counterexamples)
[09/26 11:53:45]  Generator returned sat in 0.975022 secs.
[09/26 11:53:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:46]  Verifer returned unsat in 0.213059 secs.
[09/26 11:53:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:46]  --------------------------------------------------------------------------------
[09/26 11:53:46]  Iteration: 99 (37 solution, 61 counterexamples)
[09/26 11:53:49]  Generator returned sat in 0.987983 secs.
[09/26 11:53:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:49]  Verifer returned unsat in 0.154815 secs.
[09/26 11:53:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:49]  --------------------------------------------------------------------------------
[09/26 11:53:49]  Iteration: 100 (38 solution, 61 counterexamples)
[09/26 11:53:52]  Generator returned sat in 0.973632 secs.
[09/26 11:53:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:52]  Verifer returned unsat in 0.236416 secs.
[09/26 11:53:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:52]  --------------------------------------------------------------------------------
[09/26 11:53:52]  Iteration: 101 (39 solution, 61 counterexamples)
[09/26 11:53:55]  Generator returned sat in 0.993160 secs.
[09/26 11:53:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:55]  Verifer returned unsat in 0.225118 secs.
[09/26 11:53:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:56]  --------------------------------------------------------------------------------
[09/26 11:53:56]  Iteration: 102 (40 solution, 61 counterexamples)
[09/26 11:53:58]  Generator returned sat in 1.006755 secs.
[09/26 11:53:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:59]  Verifer returned unsat in 0.184479 secs.
[09/26 11:53:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:53:59]  --------------------------------------------------------------------------------
[09/26 11:53:59]  Iteration: 103 (41 solution, 61 counterexamples)
[09/26 11:54:02]  Generator returned sat in 0.986450 secs.
[09/26 11:54:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:54:02]  Improved gap from 0.0 to 0
[09/26 11:54:03]  Improved number of small numbers from 34 to 46 out of a max of 114
[09/26 11:54:03]  Verifer returned sat in 1.163012 secs.
[09/26 11:54:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9817.917988  -10117.917988  7334.230103 -9817.917988    0.121582 -10117.917988    0.00000  300.000000       200.00000       4.0        -10117.917988                -1.0            -1
1   -9817.917988  -10017.917988  7334.230103 -9817.917988  200.121338 -10017.917988    0.00000  200.000000       100.00000       4.0        -10117.917988                 0.0         False
2   -9817.917988   -9892.069580  7334.230103 -9817.917988  200.000000  -9892.069580    0.00000   74.151592         0.00000       5.0         -9817.917988                 0.0         False
3   -9817.917988   -9817.917988  7434.230103 -9817.917988   74.030365  -9817.917988    0.00000    0.000000         0.00000       6.0         -9817.917988                 0.0         False
4   -9518.857258   -9817.917988  7434.230103 -9518.857258  299.060730  -9817.917988    0.00000  299.060730       199.06073       6.0         -9817.917988                 1.0         False
5   -9118.796528   -9617.918213  7434.230103 -9118.796528  699.121460  -9617.918213  299.12146  200.000225       200.00000       2.0         -9817.917988                 1.0         False
6   -9118.796528   -9518.478718  7434.230103 -9118.796528  136.075684  -9518.478718  299.12146  100.560730       100.00000       2.0         -9417.917988                 0.0         False
7   -8918.917988   -9417.917988  7434.230103 -8918.917988  300.439270  -9417.917988  299.12146  199.878540       199.87854       3.0         -9417.917988                 0.0         False
8   -8717.796528   -9417.917969  7434.230103 -8717.796528  401.000000  -9417.917969  400.12146  299.999980       200.00000       2.0         -9417.917988                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277795/8192, 
.[0m
[09/26 11:54:03]  --------------------------------------------------------------------------------
[09/26 11:54:03]  Iteration: 104 (41 solution, 62 counterexamples)
[09/26 11:54:37]  Generator returned sat in 31.964050 secs.
[09/26 11:54:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:54:40]  Improved gap from 0.0 to 50.0
[09/26 11:54:41]  Improved number of small numbers from 27 to 42 out of a max of 114
[09/26 11:54:41]  Verifer returned sat in 3.536864 secs.
[09/26 11:54:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9518.039551   -9717.918213  7384.230103 -9518.039551   199.878662 -9717.918213    0.00000  199.878662      199.878437       2.0         -9717.918213                -1.0            -1
1   -9518.039551   -9617.917988  7384.230103 -9518.039551   199.756836 -9617.917988    0.00000   99.878438       99.878438       3.0         -9518.039551                 1.0         False
2   -9317.796528   -9517.918213  7384.230103 -9317.796528   300.121460 -9517.918213    0.12146  200.000225      200.000000       1.0         -9518.039551                 1.0         False
3   -9317.796528   -9418.296528  7384.230103 -9317.796528     5.390182 -9418.296528    0.12146  100.378540      100.000000       2.0         -9317.917988                 0.0         False
4   -9317.796528   -9417.917988  7384.230103 -9317.796528    11.780365 -9417.917988    0.12146  100.000000        0.000000       3.0         -9317.917988                 1.0         False
5   -9317.796528   -9317.917988  7434.230103 -9317.796528    24.560730 -9317.917988    0.12146    0.000000      -50.000000       4.0         -9317.917988                 1.0         False
6   -9267.675068   -9267.917988  7434.230103 -9267.675068    50.121460 -9267.917988    0.12146    0.121460      -99.878540       1.0         -9317.917988                 1.0         False
7   -8867.796528   -9167.917988  7434.230103 -8867.796528   400.000000 -9167.917988    0.12146  300.000000      200.000000       1.0         -9317.917988                 0.0         False
8   -7868.796528   -9067.917969  7434.230103 -7868.796528  1299.000000 -9067.917969  899.12146  299.999980      200.000000       2.0         -9317.917988                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=899, 
.[0m
[09/26 11:54:42]  --------------------------------------------------------------------------------
[09/26 11:54:42]  Iteration: 105 (41 solution, 63 counterexamples)
[09/26 11:54:46]  Generator returned sat in 2.388378 secs.
[09/26 11:54:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:54:47]  Improved gap from 0.1214599609375 to 48.4375
[09/26 11:54:48]  Improved number of small numbers from 27 to 41 out of a max of 114
[09/26 11:54:48]  Verifer returned sat in 2.328612 secs.
[09/26 11:54:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9418.282471   -9618.160889  7184.473022 -9418.282471     0.121582 -9618.160889     0.00000  199.878418       99.878438       1.0         -9618.160889                -1.0            -1
1   -9317.917969   -9418.160908  7184.473022 -9317.917969   300.242920 -9418.160908     0.00000  100.242939      100.242939       1.0         -9618.160889                 0.0         False
2   -9118.039448   -9418.160889  7184.473022 -9118.039448   300.121460 -9418.160889     0.12146  299.999980      200.000000       2.0         -9118.160908                 0.0         False
3   -9118.039448   -9218.160908  7184.473022 -9118.039448     5.194870 -9218.160908     0.12146  100.000000      100.000000       2.0         -9118.160908                 1.0         False
4   -9118.039448   -9142.061848  7184.473022 -9118.039448    11.389740 -9142.061848     0.12146   23.900940        0.000000       3.0         -9118.160908                 1.0         False
5   -9118.039448   -9118.160908  7236.035522 -9118.039448    23.779480 -9118.160908     0.12146    0.000000      -48.437500       4.0         -9118.160908                 1.0         False
6   -9069.480488   -9069.723408  7236.035522 -9069.480488    48.558960 -9069.723408     0.12146    0.121460      -99.878540       1.0         -9118.160908                 1.0         False
7   -8674.609028   -8869.723408  7236.035522 -8674.609028   394.992920 -8869.723408     0.12146  194.992920      194.992920       1.0         -9118.160908                 0.0         False
8   -7533.939229   -8769.723633  7236.035522 -7533.939229  1335.662720 -8769.723633  1035.78418  200.000225      200.000000       2.0         -9118.160908                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=8484149/8192, 
.[0m
[09/26 11:54:49]  --------------------------------------------------------------------------------
[09/26 11:54:49]  Iteration: 106 (41 solution, 64 counterexamples)
[09/26 11:54:56]  Generator returned sat in 4.591839 secs.
[09/26 11:54:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 11:54:57]  Improved gap from 0.0 to 0
[09/26 11:54:58]  Improved number of small numbers from 59 to 71 out of a max of 114
[09/26 11:54:58]  Verifer returned sat in 2.164461 secs.
[09/26 11:54:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9418.621338   -9418.622764  6736.551025 -9418.621338  0.002441 -9418.622764        0.0  0.001426        0.001221       5.0         -9418.622764                -1.0            -1
1   -9418.620264   -9418.620264  6836.088135 -9418.620264  0.002500 -9418.620264        0.0  0.000000       -0.460596       1.0         -9418.622764                 1.0         False
2   -9418.159639   -9418.159639  6936.066895 -9418.159639  0.460625 -9418.159639        0.0  0.000000       -0.021211       1.0         -9418.622764                 0.0         False
3   -9418.138389   -9418.138389  7036.055664 -9418.138389  0.021250 -9418.138389        0.0  0.000000       -0.011191       1.0         -9418.138389                 0.0         False
4   -9418.127139   -9418.127139  7136.045654 -9418.127139  0.011250 -9418.127139        0.0  0.000000       -0.009951       1.0         -9418.127139                 0.0         False
5   -9418.117139   -9418.117139  7236.035645 -9418.117139  0.010000 -9418.117139        0.0  0.000000       -0.009961       1.0         -9418.117139                 0.0         False
6   -9418.107139   -9418.107139  7336.025635 -9418.107139  0.010000 -9418.107139        0.0  0.000000       -0.009971       1.0         -9418.117139                 0.0         False
7   -9418.097139   -9418.097139  7436.015625 -9418.097139  0.010000 -9418.097139        0.0  0.000000       -0.009980       1.0         -9418.117139                 0.0         False
8   -9418.087139   -9418.087139  7436.015625 -9418.087139  0.010000 -9418.087139        0.0  0.000000      -99.999980       1.0         -9418.117139                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:54:59]  --------------------------------------------------------------------------------
[09/26 11:54:59]  Iteration: 107 (41 solution, 65 counterexamples)
[09/26 11:55:16]  Generator returned sat in 15.149317 secs.
[09/26 11:55:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:55:16]  Improved gap from 0.0 to 0
[09/26 11:55:16]  Improved number of small numbers from 104 to 114 out of a max of 114
[09/26 11:55:16]  Verifer returned sat in 0.439889 secs.
[09/26 11:55:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9717.369873   -9817.005615  7134.934082 -9717.369873   99.999756 -9817.005615        0.0   99.635742       99.635742       4.0         -9817.005615                -1.0            -1
1   -9717.127197   -9717.248291  7134.934082 -9717.127197   99.878418 -9717.248291        0.0    0.121094       -0.121582       1.0         -9717.127197                 1.0         False
2   -9517.126953   -9617.005615  7134.934082 -9517.126953  200.121338 -9617.005615        0.0   99.878662       99.878662       1.0         -9717.127197                 0.0         False
3   -9417.005615   -9517.005859  7134.934082 -9417.005615  200.000000 -9517.005859        0.0  100.000244      100.000000       1.0         -9417.005615                 0.0         False
4   -9417.005615   -9418.126953  7134.934082 -9417.005615    1.000000 -9418.126953        0.0    1.121338        0.000000       2.0         -9417.005615                 0.0         False
5   -9417.005615   -9417.005615  7231.934082 -9417.005615    1.000000 -9417.005615        0.0    0.000000       -3.000000       3.0         -9417.005615                 0.0         False
6   -9414.005615   -9414.005615  7330.934082 -9414.005615    3.000000 -9414.005615        0.0    0.000000       -1.000000       1.0         -9417.005615                 1.0         False
7   -9413.005615   -9413.005615  7430.934082 -9413.005615    1.000000 -9413.005615        0.0    0.000000        0.000000       1.0         -9413.005615                 0.0         False
8   -9412.005615   -9412.005615  7430.934082 -9412.005615    1.000000 -9412.005615        0.0    0.000000      -99.000000       1.0         -9413.005615                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:55:17]  --------------------------------------------------------------------------------
[09/26 11:55:17]  Iteration: 108 (41 solution, 66 counterexamples)
[09/26 11:56:40]  Generator returned sat in 80.732866 secs.
[09/26 11:56:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:56:42]  Improved gap from 6.364013671875 to 100
[09/26 11:56:42]  Improved number of small numbers from 38 to 114 out of a max of 114
[09/26 11:56:42]  Verifer returned sat in 1.835758 secs.
[09/26 11:56:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10285.482910  -10435.165039  7134.934082 -10285.482910  149.682129 -10435.165039   0.000000  149.682129       49.682129       2.0        -10435.165039                -1.0            -1
1  -10285.482910  -10285.543701  7134.934082 -10285.482910  149.621338 -10285.543701   0.000000    0.060791      -50.317871       2.0        -10285.482910                 0.0         False
2  -10135.983154  -10136.043945  7134.934082 -10135.983154  149.560547 -10136.043945   0.000000    0.060791       -0.818115       1.0        -10135.983154                 0.0         False
3   -9835.104492  -10135.165039  7134.934082  -9835.104492  300.939453 -10135.165039   0.060547  300.000000      200.000000       1.0        -10135.983154                 0.0         False
4   -9835.104492   -9951.897217  7134.934082  -9835.104492  299.939453  -9951.897217   0.060547  116.732178      100.000000       2.0         -9835.165039                 0.0         False
5   -9635.043701   -9835.165283  7134.934082  -9635.043701  316.792969  -9835.165283   0.121338  200.000244      200.000000       3.0         -9835.165039                 0.0         False
6   -9519.250977   -9749.897217  7134.934082  -9519.250977  315.792969  -9749.897217  15.914062  214.732178      200.000000       2.0         -9535.165039                 0.0         False
7   -9419.190186   -9635.165039  7134.934082  -9419.190186  314.792969  -9635.165039  15.974854  200.000000      200.000000       3.0         -9435.165039                 0.0         False
8   -9305.397217   -9635.104248  7134.934082  -9305.397217  313.792969  -9635.104248  29.767822  299.939209      200.000000       3.0         -9335.165039                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=121681/4096, 
.[0m
[09/26 11:56:43]  --------------------------------------------------------------------------------
[09/26 11:56:43]  Iteration: 109 (41 solution, 67 counterexamples)
[09/26 11:56:50]  Generator returned sat in 5.280955 secs.
[09/26 11:56:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:56:50]  Improved gap from 87.51516723632812 to 100
[09/26 11:56:51]  Improved number of small numbers from 62 to 106 out of a max of 114
[09/26 11:56:51]  Verifer returned sat in 0.992272 secs.
[09/26 11:56:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10134.245361  -10434.123779  7134.934082 -10134.245361  299.757324 -10434.123779    0.000000  299.878418      199.878662       4.0        -10434.123779                -1.0            -1
1  -10134.245361  -10334.124023  7134.934082 -10134.245361  299.757324 -10334.124023    0.000000  199.878662       99.878662       2.0        -10434.123779                 1.0         False
2  -10083.699219  -10134.124023  7134.934082 -10083.699219  250.424805 -10134.124023    0.000000   50.424805       50.424805       1.0        -10083.699219                 0.0         False
3  -10083.699219  -10083.820444  7134.934082 -10083.699219   24.969666 -10083.820444    0.000000    0.121226      -49.575195       2.0        -10083.699219                 0.0         False
4  -10033.881113  -10034.002686  7134.934082 -10033.881113   49.939331 -10034.002686    0.000000    0.121572      -99.757090       1.0        -10083.699219                 0.0         False
5   -9934.124023   -9934.124023  7134.934082  -9934.124023   99.878662  -9934.124023    0.000000    0.000000     -100.000000       1.0        -10083.699219                 0.0         False
6   -9734.366699   -9833.760010  7134.934082  -9734.366699  199.757324  -9833.760010    0.000000   99.393311       -0.242676       1.0        -10083.699219                 0.0         False
7   -9434.245361   -9634.124023  7134.934082  -9434.245361  399.514648  -9634.124023    0.000000  199.878662      199.878662       1.0        -10083.699219                 0.0         False
8   -8835.094727   -9634.002441  7134.934082  -8835.094727  799.029297  -9634.002441  499.029297  299.878418      200.000000       2.0        -10083.699219                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=255503/512, 
.[0m
[09/26 11:56:52]  --------------------------------------------------------------------------------
[09/26 11:56:52]  Iteration: 110 (41 solution, 68 counterexamples)
[09/26 11:56:59]  Generator returned sat in 4.960099 secs.
[09/26 11:56:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:57:00]  Improved gap from 0.0 to 1.5625
[09/26 11:57:00]  Improved number of small numbers from 46 to 114 out of a max of 114
[09/26 11:57:00]  Verifer returned sat in 0.812766 secs.
[09/26 11:57:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10337.127441  -10537.249023  7238.059082 -10337.127441    0.060547 -10537.249023        0.0  200.121582      100.121582       1.0        -10537.249023                -1.0            -1
1  -10337.127441  -10337.249023  7238.059082 -10337.127441  200.060547 -10337.249023        0.0    0.121582        0.121582       2.0        -10537.249023                 0.0         False
2  -10137.249023  -10337.066895  7238.059082 -10137.249023  200.000000 -10337.066895        0.0  199.817871      100.000000       1.0        -10137.249023                 1.0          True
3  -10137.249023  -10142.993164  7238.059082 -10137.249023    5.307129 -10142.993164        0.0    5.744141        0.000000       2.0        -10137.249023                 0.0         False
4  -10137.249023  -10137.249023  7336.496338 -10137.249023    4.307129 -10137.249023        0.0    0.000000       -1.562744       3.0        -10137.249023                 1.0         False
5  -10133.941895  -10133.941895  7433.189453 -10133.941895    3.307129 -10133.941895        0.0    0.000000       -1.562500       1.0        -10133.941895                 1.0         False
6  -10032.379395  -10132.379395  7433.189453 -10032.379395  101.562500 -10132.379395        0.0  100.000000        0.000000       1.0        -10133.941895                 0.0         False
7  -10032.379395  -10032.379395  7528.882568 -10032.379395    5.306885 -10032.379395        0.0    0.000000       -4.306885       2.0        -10032.379395                 0.0         False
8  -10028.072510  -10028.072510  7528.882568 -10028.072510    4.306885 -10028.072510        0.0    0.000000     -100.000000       1.0        -10028.072510                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 11:57:00]  --------------------------------------------------------------------------------
[09/26 11:57:00]  Iteration: 111 (41 solution, 69 counterexamples)
[09/26 11:57:23]  Generator returned sat in 20.366107 secs.
[09/26 11:57:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 11:57:23]  Improved gap from 0.0 to 100
[09/26 11:57:24]  Improved number of small numbers from 93 to 112 out of a max of 114
[09/26 11:57:24]  Verifer returned sat in 0.852573 secs.
[09/26 11:57:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10337.127441  -10437.127441  7137.9375 -10337.127441    0.002500 -10437.127441    0.000000  100.000000        0.000000       1.0        -10437.127441                -1.0            -1
1  -10337.127441  -10337.127441  7137.9375 -10337.127441    0.001465 -10337.127441    0.000000    0.000000     -100.000000       2.0        -10337.127441                 0.0         False
2   -9937.138916  -10137.127441  7137.9375  -9937.138916  399.988525 -10137.127441    0.000000  199.988525      199.988525       1.0        -10337.127441                 1.0         False
3   -9937.128906  -10137.126221  7137.9375  -9937.128906  199.998535 -10137.126221    0.000000  199.997314       99.998535       2.0         -9937.128906                 0.0         False
4   -9937.128906   -9937.137441  7137.9375  -9937.128906    0.010000  -9937.137441    0.000000    0.008535       -0.001465       2.0         -9937.128906                 1.0         False
5   -9937.127441   -9937.127441  7137.9375  -9937.127441    0.010000  -9937.127441    0.000000    0.000000     -100.000000       1.0         -9937.128906                 1.0         False
6   -9537.127441   -9770.459473  7137.9375  -9537.127441  400.000000  -9770.459473    0.000000  233.332031      200.000000       1.0         -9937.128906                 0.0         False
7   -9037.125977   -9737.127441  7137.9375  -9037.125977  733.333496  -9737.127441  400.001465  300.000000      200.000000       2.0         -9937.128906                 0.0         False
8   -9037.125977   -9637.127441  7137.9375  -9037.125977   99.005000  -9637.127441  400.001465  200.000000      100.000000       3.0         -9437.127441                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819203/2048, 
.[0m
[09/26 11:57:25]  --------------------------------------------------------------------------------
[09/26 11:57:25]  Iteration: 112 (41 solution, 70 counterexamples)
[09/26 11:57:37]  Generator returned sat in 10.211363 secs.
[09/26 11:57:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:57:37]  Verifer returned unsat in 0.157441 secs.
[09/26 11:57:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:57:37]  --------------------------------------------------------------------------------
[09/26 11:57:37]  Iteration: 113 (42 solution, 70 counterexamples)
[09/26 11:57:44]  Generator returned sat in 4.097780 secs.
[09/26 11:57:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:57:44]  Improved gap from 0.0 to 100
[09/26 11:57:45]  Improved number of small numbers from 58 to 94 out of a max of 114
[09/26 11:57:45]  Verifer returned sat in 1.154617 secs.
[09/26 11:57:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10522.332764  -10822.211182  7137.9375 -10522.332764    0.121338 -10822.211182    0.000000  299.878418      199.878662       4.0        -10822.211182                -1.0            -1
1  -10522.332764  -10622.211426  7137.9375 -10522.332764  299.757080 -10622.211426    0.000000   99.878662       99.878662       2.0        -10822.211182                 1.0         False
2  -10470.298096  -10522.211426  7137.9375 -10470.298096  151.913330 -10522.211426    0.000000   51.913330       51.913330       1.0        -10470.298096                 1.0          True
3  -10470.298096  -10470.298135  7137.9375 -10470.298096   49.109833 -10470.298135    0.000000    0.000039      -48.086670       2.0        -10470.298096                 0.0         False
4  -10421.188302  -10421.309640  7137.9375 -10421.188302   49.109833 -10421.309640    0.000000    0.121338      -98.976876       1.0        -10470.298096                 1.0         False
5  -10322.089974  -10322.211312  7137.9375 -10322.089974   99.219666 -10322.211312    0.000000    0.121338      -99.878549       1.0        -10470.298096                 0.0         False
6  -10122.771981  -10222.211182  7137.9375 -10122.771981  199.439331 -10222.211182    0.000000   99.439200       -0.560555       1.0        -10470.298096                 0.0         False
7   -9822.332520  -10022.211426  7137.9375  -9822.332520  399.878662 -10022.211426    0.000000  199.878906      199.878906       1.0        -10470.298096                 0.0         False
8   -9221.454102   -9922.211426  7137.9375  -9221.454102  800.757324  -9922.211426  500.757324  200.000000      200.000000       2.0        -10470.298096                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1025551/2048, 
.[0m
[09/26 11:57:45]  --------------------------------------------------------------------------------
[09/26 11:57:45]  Iteration: 114 (42 solution, 71 counterexamples)
[09/26 11:58:27]  Generator returned sat in 39.445853 secs.
[09/26 11:58:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:58:27]  Improved gap from 0.43939208984375 to 100
[09/26 11:58:28]  Improved number of small numbers from 43 to 114 out of a max of 114
[09/26 11:58:28]  Verifer returned sat in 0.527688 secs.
[09/26 11:58:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10928.152100  -10928.212891  7137.937256 -10928.152100     0.060791 -10928.212891    0.000000    0.060791        0.060791       4.0        -10928.212891                -1.0            -1
1  -10928.152100  -10928.152344  7137.937256 -10928.152100     0.030273 -10928.152344    0.000000    0.000244      -99.939209       2.0        -10928.152100                 1.0         False
2  -10728.212891  -10783.212891  7137.937256 -10728.212891   199.939453 -10783.212891    0.000000   55.000000        0.000000       1.0        -10928.152100                 1.0         False
3  -10728.212891  -10728.212891  7137.937256 -10728.212891     0.060547 -10728.212891    0.000000    0.000000     -100.000000       2.0        -10728.212891                 0.0         False
4  -10528.182617  -10528.212891  7137.937256 -10528.182617   200.030273 -10528.212891    0.000000    0.030273        0.030273       1.0        -10728.212891                 1.0         False
5   -9527.243164  -10428.212891  7137.937256  -9527.243164  1000.969727 -10428.212891  700.969727  200.000000      200.000000       1.0        -10728.212891                 0.0         False
6   -9527.243164  -10422.353027  7137.937256  -9527.243164   176.500000 -10422.353027  700.969727  194.140137      100.000000       2.0        -10228.212891                 0.0         False
7   -9327.273438  -10326.725342  7137.937256  -9327.273438   394.109863 -10326.725342  700.969727  298.482178      199.969727       3.0        -10228.212891                 1.0         False
8   -9227.213135  -10228.212891  7137.937256  -9227.213135   398.542480 -10228.212891  700.999756  300.000000      200.000000       4.0        -10228.212891                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=2871295/4096, 
.[0m
[09/26 11:58:28]  --------------------------------------------------------------------------------
[09/26 11:58:28]  Iteration: 115 (42 solution, 72 counterexamples)
[09/26 11:59:03]  Generator returned sat in 31.943300 secs.
[09/26 11:59:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:03]  Verifer returned unsat in 0.194439 secs.
[09/26 11:59:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:03]  --------------------------------------------------------------------------------
[09/26 11:59:03]  Iteration: 116 (43 solution, 72 counterexamples)
[09/26 11:59:07]  Generator returned sat in 1.589780 secs.
[09/26 11:59:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:07]  Verifer returned unsat in 0.242785 secs.
[09/26 11:59:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:07]  --------------------------------------------------------------------------------
[09/26 11:59:07]  Iteration: 117 (44 solution, 72 counterexamples)
[09/26 11:59:11]  Generator returned sat in 1.604635 secs.
[09/26 11:59:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:11]  Verifer returned unsat in 0.189850 secs.
[09/26 11:59:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:11]  --------------------------------------------------------------------------------
[09/26 11:59:11]  Iteration: 118 (45 solution, 72 counterexamples)
[09/26 11:59:15]  Generator returned sat in 1.588214 secs.
[09/26 11:59:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:16]  Verifer returned unsat in 0.260098 secs.
[09/26 11:59:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:16]  --------------------------------------------------------------------------------
[09/26 11:59:16]  Iteration: 119 (46 solution, 72 counterexamples)
[09/26 11:59:19]  Generator returned sat in 1.594403 secs.
[09/26 11:59:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:20]  Verifer returned unsat in 0.233856 secs.
[09/26 11:59:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:20]  --------------------------------------------------------------------------------
[09/26 11:59:20]  Iteration: 120 (47 solution, 72 counterexamples)
[09/26 11:59:24]  Generator returned sat in 1.820865 secs.
[09/26 11:59:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:24]  Verifer returned unsat in 0.231216 secs.
[09/26 11:59:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:24]  --------------------------------------------------------------------------------
[09/26 11:59:24]  Iteration: 121 (48 solution, 72 counterexamples)
[09/26 11:59:28]  Generator returned sat in 1.659628 secs.
[09/26 11:59:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:29]  Verifer returned unsat in 0.248255 secs.
[09/26 11:59:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 11:59:29]  --------------------------------------------------------------------------------
[09/26 11:59:29]  Iteration: 122 (49 solution, 72 counterexamples)
[09/26 12:00:03]  Generator returned sat in 32.363933 secs.
[09/26 12:00:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:00:04]  Improved gap from 0.0 to 100
[09/26 12:00:05]  Improved number of small numbers from 47 to 53 out of a max of 114
[09/26 12:00:05]  Verifer returned sat in 1.444887 secs.
[09/26 12:00:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9594.562256  -10395.534557  7137.932256 -9594.562256    0.060791 -10395.534557   800.972227    0.000075      -67.334092       4.0        -10395.534557                -1.0            -1
1   -9227.230664  -10295.532057  7137.932256 -9227.230664  367.331667 -10295.532057   800.972227  267.329167      199.997500       1.0        -10395.534557                 1.0         False
2   -9127.230664  -10128.200391  7137.932256 -9127.230664  367.329167 -10128.200391   800.972227  199.997500      199.997500       2.0         -9928.202891                 0.0         False
3   -9027.225664  -10128.197754  7137.932256 -9027.225664  300.002500 -10128.197754   800.974727  299.997363      200.000000       3.0         -9828.200391                 0.0         False
4   -9027.225664  -10028.200391  7137.932256 -9027.225664    0.010000 -10028.200391   800.974727  200.000000      100.000000       3.0         -9828.200391                 1.0         False
5   -8827.228164   -9828.200391  7137.932256 -8827.228164  399.997500  -9828.200391   800.974727  199.997500      199.997500       3.0         -9828.200391                 1.0         False
6   -8578.225664   -9828.197998  7137.932256 -8578.225664  449.000000  -9828.197998   949.974727  299.997607      200.000000       2.0         -9828.200391                 1.0         False
7   -8578.225664   -9628.202891  7137.932256 -8578.225664    0.010000  -9628.202891   949.974727  100.002500      100.000000       3.0         -9528.200391                 0.0         False
8   -8079.231914   -9628.200195  7137.932256 -8079.231914  598.996250  -9628.200195  1248.968477  299.999805      200.000000       3.0         -9528.200391                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=71679/160, 
.[0m
[09/26 12:00:05]  --------------------------------------------------------------------------------
[09/26 12:00:05]  Iteration: 123 (49 solution, 73 counterexamples)
[09/26 12:00:24]  Generator returned sat in 16.252823 secs.
[09/26 12:00:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:00:25]  Improved gap from 0.0 to 100
[09/26 12:00:26]  Improved number of small numbers from 67 to 75 out of a max of 114
[09/26 12:00:26]  Verifer returned sat in 1.493532 secs.
[09/26 12:00:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9128.620605   -9228.741699  5938.473389 -9128.620605  100.000000 -9228.741699    0.000000  100.121094        0.121094       3.0         -9228.741699                -1.0            -1
1   -9128.620605   -9128.620605  5938.473389 -9128.620605  100.000000 -9128.620605    0.000000    0.000000      -99.878906       2.0         -9228.741699                 1.0         False
2   -9028.741699   -9028.741699  5938.473389 -9028.741699   99.878906 -9028.741699    0.000000    0.000000     -100.000000       1.0         -9028.741699                 1.0          True
3   -8629.609985   -8898.924479  5938.473389 -8629.609985  399.131714 -8898.924479    0.000000  269.314494      199.131714       1.0         -9028.741699                 0.0         False
4   -8535.450012   -8728.741699  5938.473389 -8535.450012  363.474467 -8728.741699    0.000000  193.291687      193.291687       2.0         -8535.450012                 0.0         False
5   -8182.529999   -8629.489014  5938.473389 -8182.529999  546.211700 -8629.489014  246.211700  200.747314      200.000000       2.0         -8535.450012                 1.0         False
6   -8182.529999   -8535.329041  5938.473389 -8182.529999  200.626343 -8535.329041  246.211700  106.587341      100.000000       2.0         -8428.741699                 1.0         False
7   -7987.177826   -8428.741699  5938.473389 -7987.177826  301.939514 -8428.741699  246.211700  195.352173      195.352173       3.0         -8428.741699                 1.0         False
8   -7728.620728   -8328.741943  5938.473389 -7728.620728  453.909271 -8328.741943  400.120972  200.000244      200.000000       2.0         -8428.741699                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277791/8192, 
.[0m
[09/26 12:00:26]  --------------------------------------------------------------------------------
[09/26 12:00:26]  Iteration: 124 (49 solution, 74 counterexamples)
[09/26 12:00:49]  Generator returned sat in 20.762567 secs.
[09/26 12:00:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:00:50]  Improved gap from 0.0 to 0
[09/26 12:00:51]  Improved number of small numbers from 60 to 68 out of a max of 114
[09/26 12:00:51]  Verifer returned sat in 1.274415 secs.
[09/26 12:00:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7383.576665   -7385.544999  5840.452393 -7383.576665  0.001465 -7385.544999        0.0  1.968333        1.968171       9.0         -7385.544999                -1.0            -1
1   -7383.576665   -7383.576665  5938.473389 -7383.576665  0.001667 -7383.576665        0.0  0.000000       -0.010833       2.0         -7385.544999                 1.0         False
2   -7383.565832   -7383.565832  6038.464355 -7383.565832  0.010833 -7383.565832        0.0  0.000000       -0.009033       1.0         -7385.544999                 0.0         False
3   -7383.556665   -7383.556665  6138.464111 -7383.556665  0.009167 -7383.556665        0.0  0.000000       -0.000111       1.0         -7383.556665                 0.0         False
4   -7382.568332   -7382.568332  6237.475830 -7382.568332  0.988333 -7382.568332        0.0  0.000000       -0.000059       1.0         -7383.556665                 0.0         False
5   -7382.558332   -7382.558332  6337.465820 -7382.558332  0.010000 -7382.558332        0.0  0.000000       -0.000068       1.0         -7382.558332                 0.0         False
6   -7382.548332   -7382.548332  6437.446045 -7382.548332  0.010000 -7382.548332        0.0  0.000000       -0.009844       1.0         -7382.558332                 0.0         False
7   -7382.538332   -7382.538332  6537.445801 -7382.538332  0.010000 -7382.538332        0.0  0.000000       -0.000088       1.0         -7382.558332                 0.0         False
8   -7382.528332   -7382.528332  6637.435791 -7382.528332  0.010000 -7382.528332        0.0  0.000000       -0.000098       1.0         -7382.558332                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:00:51]  --------------------------------------------------------------------------------
[09/26 12:00:51]  Iteration: 125 (49 solution, 75 counterexamples)
[09/26 12:01:08]  Generator returned sat in 13.834044 secs.
[09/26 12:01:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:01:08]  Improved number of small numbers from 56 to 113 out of a max of 113
[09/26 12:01:08]  Verifer returned sat in 0.468005 secs.
[09/26 12:01:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7482.558105   -7583.920654  6037.46582 -7482.558105    0.120605 -7583.920654    0.000000  101.362549           100.0       7.0         -7583.920654                -1.0            -1
1   -7482.558105   -7482.558105  6037.46582 -7482.558105    0.120605 -7482.558105    0.000000    0.000000             0.0       2.0         -7583.920654                 1.0         False
2   -7182.437256   -7382.558105  6037.46582 -7182.437256  300.120850 -7382.558105    0.120850  200.000000           200.0       1.0         -7583.920654                 0.0         False
3   -7082.074707   -7282.678955  6037.46582 -7082.074707  300.362549 -7282.678955    0.483398  200.120850           200.0       2.0         -7583.920654                 0.0         False
4   -6981.953857   -7282.558105  6037.46582 -6981.953857  300.241699 -7282.558105    0.604248  300.000000           200.0       3.0         -6982.558105                 0.0         False
5   -6981.953857   -7182.558105  6037.46582 -6981.953857  199.000000 -7182.558105    0.604248  200.000000           100.0       4.0         -6982.558105                 0.0         False
6   -6782.953857   -7082.558105  6037.46582 -6782.953857  399.000000 -7082.558105    0.604248  299.000000           199.0       4.0         -6982.558105                 1.0         False
7   -6282.953857   -6931.497803  6037.46582 -6282.953857  799.000000 -6931.497803  399.604248  248.939697           200.0       2.0         -6982.558105                 1.0         False
8   -6181.833252   -6882.558105  6037.46582 -6181.833252  350.060303 -6882.558105  400.724854  300.000000           200.0       3.0         -6582.558105                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=819447/2048, 
.[0m
[09/26 12:01:09]  --------------------------------------------------------------------------------
[09/26 12:01:09]  Iteration: 126 (49 solution, 76 counterexamples)
[09/26 12:01:14]  Generator returned sat in 3.309296 secs.
[09/26 12:01:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:01:15]  Improved number of small numbers from 98 to 98 out of a max of 113
[09/26 12:01:15]  Verifer returned sat in 0.523785 secs.
[09/26 12:01:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7482.558105   -7682.497803  6037.46582 -7482.558105     0.120605 -7682.497803    0.000000  199.939697      100.000000       8.0         -7682.497803                -1.0            -1
1   -7482.558105   -7482.558105  6037.46582 -7482.558105     0.120605 -7482.558105    0.000000    0.000000        0.000000       2.0         -7682.497803                 1.0         False
2   -7182.497803   -7447.184570  6037.46582 -7182.497803   300.060303 -7447.184570    0.060303  264.626465      200.000000       1.0         -7682.497803                 0.0         False
3   -7082.074707   -7332.027954  6037.46582 -7082.074707   365.049561 -7332.027954    0.483398  249.469849      200.000000       2.0         -7682.497803                 0.0         False
4   -6982.074707   -7282.558105  6037.46582 -6982.074707   349.469849 -7282.558105    0.483398  300.000000      200.000000       3.0         -6982.558105                 0.0         False
5   -6982.074707   -7182.558105  6037.46582 -6982.074707     1.000000 -7182.558105    0.483398  200.000000      100.000000       4.0         -6982.558105                 0.0         False
6   -6782.135010   -7082.558105  6037.46582 -6782.135010   399.939697 -7082.558105    0.483398  299.939697      199.939697       4.0         -6982.558105                 1.0         False
7   -5906.990540   -6931.497803  6037.46582 -5906.990540  1175.084167 -6931.497803  775.567566  248.939697      200.000000       2.0         -6982.558105                 1.0         False
8   -5805.869934   -6882.558105  6037.46582 -5805.869934   350.060303 -6882.558105  776.688171  300.000000      200.000000       3.0         -6582.558105                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=12717339/16384, 
.[0m
[09/26 12:01:16]  --------------------------------------------------------------------------------
[09/26 12:01:16]  Iteration: 127 (49 solution, 77 counterexamples)
[09/26 12:01:26]  Generator returned sat in 8.061627 secs.
[09/26 12:01:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:01:27]  Improved number of small numbers from 41 to 113 out of a max of 113
[09/26 12:01:27]  Verifer returned sat in 0.661839 secs.
[09/26 12:01:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7185.014648   -7200.195801  6037.465576 -7185.014648    0.120605 -7200.195801    0.000000   15.181152        0.000000       9.0         -7200.195801                -1.0            -1
1   -7185.014648   -7185.014648  6037.465576 -7185.014648    0.060547 -7185.014648    0.000000    0.000000     -100.000000       2.0         -7185.014648                 1.0         False
2   -6793.195801   -6989.074951  6037.465576 -6793.195801  391.818848 -6989.074951    0.000000  195.879150      191.818848       1.0         -7185.014648                 0.0         False
3   -6597.256104   -6892.074951  6037.465576 -6597.256104  391.818848 -6892.074951   87.758545  207.060303      200.000000       2.0         -7185.014648                 0.0         False
4   -6497.195557   -6793.135498  6037.465576 -6497.195557  307.120850 -6793.135498   87.819092  208.120850      200.000000       2.0         -6585.014648                 0.0         False
5   -6314.437256   -6685.014648  6037.465576 -6314.437256  390.879150 -6685.014648  170.577393  200.000000      200.000000       3.0         -6585.014648                 0.0         False
6   -6211.376953   -6588.014648  6037.465576 -6211.376953  303.060303 -6588.014648  173.637695  203.000000      200.000000       3.0         -6385.014648                 0.0         False
7   -6111.316650   -6485.014648  6037.465576 -6111.316650  303.060303 -6485.014648  173.697998  200.000000      200.000000       3.0         -6385.014648                 0.0         False
8   -6004.195801   -6484.954102  6037.465576 -6004.195801  307.120850 -6484.954102  180.818848  299.939453      200.000000       3.0         -6385.014648                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=380927/4096, 
.[0m
[09/26 12:01:28]  --------------------------------------------------------------------------------
[09/26 12:01:28]  Iteration: 128 (49 solution, 78 counterexamples)
[09/26 12:01:56]  Generator returned sat in 26.184771 secs.
[09/26 12:01:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:01:57]  Improved number of small numbers from 59 to 65 out of a max of 113
[09/26 12:01:57]  Verifer returned sat in 1.034046 secs.
[09/26 12:01:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7829.563721   -7829.566037  6682.016965 -7829.563721  400.007324 -7829.566037     0.0000    0.002317        0.002317       1.0         -7829.566037                -1.0            -1
1   -7429.561037   -7829.566037  6682.016965 -7429.561037  400.005000 -7829.566037   100.0050  300.000000      200.000000       1.0         -7529.566037                 0.0         False
2   -7329.558537   -7629.566162  6682.016965 -7329.558537  400.002500 -7629.566162   100.0075  200.000125      200.000000       2.0         -7429.566037                 0.0         False
3   -7329.558537   -7562.232704  6682.016965 -7329.558537  200.000000 -7562.232704   100.0075  132.666667      100.000000       3.0         -7429.566037                 0.0         False
4   -7129.558537   -7529.566037  6682.016965 -7129.558537  332.666667 -7529.566037   100.0075  300.000000      200.000000       4.0         -7429.566037                 0.0         False
5   -6828.558537   -7429.565918  6682.016965 -6828.558537  601.000000 -7429.565918   301.0075  299.999881      200.000000       2.0         -7429.566037                 1.0         False
6   -6828.558537   -7273.129926  6682.016965 -6828.558537    0.010000 -7273.129926   301.0075  143.563889      100.000000       3.0         -7129.566037                 0.0         False
7   -6828.558537   -7229.566037  6682.016965 -6828.558537  143.561389 -7229.566037   301.0075  100.000000        0.000000       4.0         -7129.566037                 0.0         False
8   -6327.558537   -7129.566037  6682.016965 -6327.558537  601.000000 -7129.566037   502.0075  300.000000      200.000000       4.0         -7129.566037                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=402, 
.[0m
[09/26 12:01:58]  --------------------------------------------------------------------------------
[09/26 12:01:58]  Iteration: 129 (49 solution, 79 counterexamples)
[09/26 12:02:09]  Generator returned sat in 8.694516 secs.
[09/26 12:02:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:02:10]  Improved gap from 0.0 to 100
[09/26 12:02:10]  Improved number of small numbers from 27 to 114 out of a max of 114
[09/26 12:02:10]  Verifer returned sat in 1.117300 secs.
[09/26 12:02:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7229.799561   -7429.679199  6682.01709 -7229.799561    0.120605 -7429.679199    0.000000  199.879639      199.879639       9.0         -7429.679199                -1.0            -1
1   -7229.799561   -7329.679199  6682.01709 -7229.799561    0.120605 -7329.679199    0.000000   99.879639       99.879639       2.0         -7429.679199                 1.0         False
2   -7029.558594   -7229.679199  6682.01709 -7029.558594  300.120605 -7229.679199    0.120605  200.000000      200.000000       1.0         -7429.679199                 1.0          True
3   -7029.558594   -7229.558350  6682.01709 -7029.558594   51.439697 -7229.558350    0.120605  199.879150      100.000000       2.0         -7029.679199                 0.0         False
4   -7029.558594   -7029.799316  6682.01709 -7029.558594  101.879395 -7029.799316    0.120605    0.120117        0.000000       3.0         -7029.679199                 1.0         False
5   -6826.919922   -7029.558594  6682.01709 -6826.919922  202.758789 -7029.558594    0.120605  202.518066      102.638672       1.0         -7029.679199                 1.0         False
6   -6826.919922   -6929.678955  6682.01709 -6826.919922  200.439697 -6929.678955    0.120605  102.638428        2.638672       2.0         -6827.040527                 0.0         False
7   -6529.678955   -6827.040527  6682.01709 -6529.678955  399.879395 -6827.040527    0.120605  297.240967      199.879639       3.0         -6827.040527                 1.0         False
8   -6028.161133   -6629.679199  6682.01709 -6028.161133  798.758789 -6629.679199  401.518066  200.000000      200.000000       2.0         -6827.040527                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=411031/1024, 
.[0m
[09/26 12:02:11]  --------------------------------------------------------------------------------
[09/26 12:02:11]  Iteration: 130 (49 solution, 80 counterexamples)
[09/26 12:02:53]  Generator returned sat in 39.633075 secs.
[09/26 12:02:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:02:54]  Improved number of small numbers from 80 to 113 out of a max of 113
[09/26 12:02:54]  Verifer returned sat in 0.483391 secs.
[09/26 12:02:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7429.558594   -7429.679443  6682.016846 -7429.558594    0.120605 -7429.679443    0.000000    0.120850        0.120605       9.0         -7429.679443                -1.0            -1
1   -7129.799805   -7429.558594  6682.016846 -7129.799805  299.879639 -7429.558594    0.000000  299.758789      199.879395       2.0         -7429.679443                 1.0         False
2   -7070.503174   -7229.679199  6682.016846 -7070.503174  359.055420 -7229.679199    0.000000  159.176025      159.176025       2.0         -7429.679443                 0.0         False
3   -7070.382812   -7229.438232  6682.016846 -7070.382812  159.296387 -7229.438232    0.000000  159.055420       59.296387       3.0         -7070.382812                 0.0         False
4   -6909.845459   -7070.503174  6682.016846 -6909.845459  319.592773 -7070.503174    0.000000  160.657715      119.833740       3.0         -7070.382812                 1.0         False
5   -6430.317627   -6929.679199  6682.016846 -6430.317627  640.185547 -6929.679199  299.361572  200.000000      200.000000       2.0         -7070.382812                 1.0         False
6   -6430.317627   -6829.679443  6682.016846 -6430.317627    1.000000 -6829.679443  299.361572  100.000244      100.000000       2.0         -6729.679199                 0.0         False
7   -6330.438477   -6729.679199  6682.016846 -6330.438477  199.879395 -6729.679199  299.361572   99.879150       99.879150       3.0         -6729.679199                 0.0         False
8   -6029.558838   -6629.679443  6682.016846 -6029.558838  400.758789 -6629.679443  400.120361  200.000244      200.000000       1.0         -6729.679199                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638893/4096, 
.[0m
[09/26 12:02:54]  --------------------------------------------------------------------------------
[09/26 12:02:54]  Iteration: 131 (49 solution, 81 counterexamples)
[09/26 12:03:02]  Generator returned sat in 4.793922 secs.
[09/26 12:03:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:03:03]  Improved gap from 0.01 to 0
[09/26 12:03:03]  Improved number of small numbers from 68 to 77 out of a max of 114
[09/26 12:03:03]  Verifer returned sat in 1.349601 secs.
[09/26 12:03:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7129.800049   -7130.792305  6384.025391 -7129.800049   0.99375 -7130.792305        0.0  0.992256        0.992188       9.0         -7130.792305                -1.0            -1
1   -7129.799805   -7129.799805  6482.040771 -7129.799805   0.99250 -7129.799805        0.0  0.000000       -0.992188       1.0         -7129.799805                 1.0         False
2   -7128.807305   -7128.807305  6582.028076 -7128.807305   0.99250 -7128.807305        0.0  0.000000       -0.012383       1.0         -7129.799805                 0.0         False
3   -7128.794805   -7128.794805  6682.016846 -7128.794805   0.01250 -7128.794805        0.0  0.000000       -0.011113       1.0         -7128.794805                 0.0         False
4   -7128.783555   -7128.783555  6782.006836 -7128.783555   0.01125 -7128.783555        0.0  0.000000       -0.009873       1.0         -7128.783555                 0.0         False
5   -7128.773555   -7128.773555  6881.996826 -7128.773555   0.01000 -7128.773555        0.0  0.000000       -0.009883       1.0         -7128.773555                 0.0         False
6   -7128.763555   -7128.763555  6981.986816 -7128.763555   0.01000 -7128.763555        0.0  0.000000       -0.009893       1.0         -7128.773555                 0.0         False
7   -7128.753555   -7128.753555  7081.976807 -7128.753555   0.01000 -7128.753555        0.0  0.000000       -0.009902       1.0         -7128.773555                 0.0         False
8   -7128.743555   -7128.743555  7181.966797 -7128.743555   0.01000 -7128.743555        0.0  0.000000       -0.009912       1.0         -7128.773555                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:03:04]  --------------------------------------------------------------------------------
[09/26 12:03:04]  Iteration: 132 (49 solution, 82 counterexamples)
[09/26 12:03:37]  Generator returned sat in 30.109953 secs.
[09/26 12:03:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:03:38]  Improved gap from 0.002890625 to 3.125
[09/26 12:03:39]  Improved number of small numbers from 53 to 76 out of a max of 114
[09/26 12:03:39]  Verifer returned sat in 1.929720 secs.
[09/26 12:03:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6292.843750   -6426.237305  6055.339111 -6292.843750  133.453613 -6426.237305        0.0  133.393555      133.393555       6.0         -6426.237305                -1.0            -1
1   -6292.843750   -6426.177013  6055.339111 -6292.843750  133.393311 -6426.177013        0.0  133.333263       33.393555       6.0         -6292.843750                 0.0         False
2   -6292.783499   -6292.783499  6118.760254 -6292.783499  133.393514 -6292.783499        0.0    0.000000       -3.125052       1.0         -6292.843750                 0.0         False
3   -6159.450166   -6189.658499  6118.760254 -6159.450166  133.333333 -6189.658499        0.0   30.208333       30.208281       1.0         -6159.450166                 0.0         False
4   -6122.991833   -6122.991833  6118.760498 -6122.991833   66.666667 -6122.991833        0.0    0.000000      -33.333141       1.0         -6122.991833                 0.0         False
5   -6089.658499   -6089.658499  6215.635254 -6089.658499   33.333333 -6089.658499        0.0    0.000000       -3.125052       1.0         -6089.658499                 0.0         False
6   -6072.991833   -6072.991833  6298.968506 -6072.991833   16.666667 -6072.991833        0.0    0.000000       -3.125133       1.0         -6072.991833                 0.0         False
7   -6064.658499   -6064.658499  6389.593750 -6064.658499    8.333333 -6064.658499        0.0    0.000000       -4.166556       1.0         -6064.658499                 0.0         False
8   -6060.491833   -6060.491833  6389.593750 -6060.491833    4.166667 -6060.491833        0.0    0.000000      -99.999889       1.0         -6060.491833                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:03:39]  --------------------------------------------------------------------------------
[09/26 12:03:39]  Iteration: 133 (49 solution, 83 counterexamples)
[09/26 12:04:13]  Generator returned sat in 31.073747 secs.
[09/26 12:04:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:04:13]  Improved gap from 0.0 to 100
[09/26 12:04:14]  Improved number of small numbers from 52 to 88 out of a max of 114
[09/26 12:04:14]  Verifer returned sat in 1.117856 secs.
[09/26 12:04:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6292.783691   -6592.783447  6055.338867 -6292.783691    0.120361 -6592.783447    0.000000  299.999756      200.000000       4.0         -6592.783447                -1.0            -1
1   -6292.783691   -6492.783691  6055.338867 -6292.783691  299.879639 -6492.783691    0.000000  200.000000      100.000000       5.0         -6592.783447                 1.0         False
2   -6240.993408   -6292.783691  6055.338867 -6240.993408  251.790283 -6292.783691    0.000000   51.790283       51.790283       3.0         -6240.993408                 1.0          True
3   -6240.993408   -6241.113410  6055.338867 -6240.993408   24.054985 -6241.113410    0.000000    0.120001      -48.209717       2.0         -6240.993408                 1.0         False
4   -6192.003440   -6192.003440  6055.338867 -6192.003440   49.109970 -6192.003440    0.000000    0.000000      -99.219748       1.0         -6240.993408                 0.0         False
5   -6092.783499   -6092.783499  6055.338867 -6092.783499   99.219940 -6092.783499    0.000000    0.000000      -99.999808       1.0         -6240.993408                 0.0         False
6   -5893.343619   -5992.783499  6055.338867 -5893.343619  199.439880 -5992.783499    0.000000   99.439880       -0.559928       1.0         -6240.993408                 0.0         False
7   -5592.903739   -5792.783691  6055.338867 -5592.903739  399.879761 -5792.783691    0.000000  199.879953      199.879953       1.0         -6240.993408                 0.0         False
8   -4992.024170   -5692.783691  6055.338867 -4992.024170  800.759521 -5692.783691  500.759521  200.000000      200.000000       2.0         -6240.993408                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=2051111/4096, 
.[0m
[09/26 12:04:15]  --------------------------------------------------------------------------------
[09/26 12:04:15]  Iteration: 134 (49 solution, 84 counterexamples)
[09/26 12:04:46]  Generator returned sat in 28.573475 secs.
[09/26 12:04:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:04:46]  Improved gap from 0.0 to 100
[09/26 12:04:47]  Improved number of small numbers from 70 to 114 out of a max of 114
[09/26 12:04:47]  Verifer returned sat in 0.481706 secs.
[09/26 12:04:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6097.163086   -6198.763916  6055.338623 -6097.163086    0.119873 -6198.763916    0.000000  101.600830      101.480469       2.0         -6198.763916                -1.0            -1
1   -6097.163086   -6198.643555  6055.338623 -6097.163086    0.119873 -6198.643555    0.000000  101.480469        1.480469       2.0         -6198.763916                 0.0         False
2   -5798.643555   -6097.163086  6055.338623 -5798.643555  400.000000 -6097.163086    0.000000  298.519531      200.000000       3.0         -6198.763916                 0.0         False
3   -5798.643555   -5998.643555  6055.338623 -5798.643555  151.319580 -5998.643555    0.000000  200.000000      100.000000       2.0         -5798.643555                 1.0          True
4   -5648.203613   -5849.323730  6055.338623 -5648.203613  350.439941 -5849.323730    0.000000  201.120117      150.439941       3.0         -5798.643555                 0.0         False
5   -5499.003906   -5798.643555  6055.338623 -5499.003906  350.319824 -5798.643555    0.000000  299.639648      199.639648       4.0         -5499.003906                 1.0         False
6   -5499.003906   -5649.203613  6055.338623 -5499.003906  299.519531 -5649.203613    0.000000  150.199707       99.639648       3.0         -5499.003906                 1.0         False
7   -5298.763672   -5498.643555  6055.338623 -5298.763672  350.439941 -5498.643555    0.000000  199.879883      199.879883       1.0         -5499.003906                 1.0         False
8   -4798.523438   -5399.763916  6055.338623 -4798.523438  700.120117 -5399.763916  400.120117  201.120361      200.000000       2.0         -5499.003906                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409723/1024, 
.[0m
[09/26 12:04:47]  --------------------------------------------------------------------------------
[09/26 12:04:47]  Iteration: 135 (49 solution, 85 counterexamples)
[09/26 12:05:22]  Generator returned sat in 32.176401 secs.
[09/26 12:05:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:05:23]  Verifer returned unsat in 0.351214 secs.
[09/26 12:05:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:05:23]  --------------------------------------------------------------------------------
[09/26 12:05:23]  Iteration: 136 (50 solution, 85 counterexamples)
[09/26 12:05:28]  Generator returned sat in 2.413375 secs.
[09/26 12:05:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:05:28]  Verifer returned unsat in 0.279757 secs.
[09/26 12:05:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:05:28]  --------------------------------------------------------------------------------
[09/26 12:05:28]  Iteration: 137 (51 solution, 85 counterexamples)
[09/26 12:05:35]  Generator returned sat in 4.538872 secs.
[09/26 12:05:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:05:36]  Improved number of small numbers from 48 to 113 out of a max of 113
[09/26 12:05:36]  Verifer returned sat in 0.473452 secs.
[09/26 12:05:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7870.883057   -8071.763184  6055.338379 -7870.883057    0.119873 -8071.763184    0.000000  200.880127      200.000000       3.0         -8071.763184                -1.0            -1
1   -7870.883057   -7970.883057  6055.338379 -7870.883057    0.119873 -7970.883057    0.000000  100.000000      100.000000       3.0         -8071.763184                 0.0         False
2   -7670.763184   -7970.883057  6055.338379 -7670.763184  300.119873 -7970.883057    0.119873  300.000000      200.000000       3.0         -8071.763184                 0.0         False
3   -7570.763184   -7870.883057  6055.338379 -7570.763184  400.000000 -7870.883057    0.119873  300.000000      200.000000       4.0         -8071.763184                 0.0         False
4   -7470.883057   -7670.883057  6055.338379 -7470.883057  399.880127 -7670.883057    0.119873  199.880127      199.880127       3.0         -7471.002930                 1.0          True
5   -7119.883057   -7571.003174  6055.338379 -7119.883057  550.880127 -7571.003174  251.000000  200.120117      200.000000       3.0         -7471.002930                 0.0         False
6   -7119.883057   -7570.883057  6055.338379 -7119.883057    1.000000 -7570.883057  251.000000  200.000000      100.000000       4.0         -7370.883057                 0.0         False
7   -7020.383057   -7370.883057  6055.338379 -7020.383057  299.500000 -7370.883057  251.000000   99.500000       99.500000       3.0         -7370.883057                 1.0         False
8   -6669.383057   -7271.262939  6055.338379 -6669.383057  450.500000 -7271.262939  401.500000  200.379883      200.000000       1.0         -7370.883057                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1644053/4096, 
.[0m
[09/26 12:05:37]  --------------------------------------------------------------------------------
[09/26 12:05:37]  Iteration: 138 (51 solution, 86 counterexamples)
[09/26 12:06:16]  Generator returned sat in 36.863601 secs.
[09/26 12:06:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:06:17]  Improved gap from 0.0 to 0
[09/26 12:06:17]  Improved number of small numbers from 60 to 81 out of a max of 114
[09/26 12:06:17]  Verifer returned sat in 0.908072 secs.
[09/26 12:06:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7871.645996   -8071.645996  6056.101133 -7871.645996    0.002686 -8071.645996        0.0  200.000000      199.999814       4.0         -8071.645996                -1.0            -1
1   -7871.645996   -7971.645811  6056.101133 -7871.645996    0.002686 -7971.645811        0.0   99.999814       99.999814       4.0         -8071.645996                 1.0         False
2   -7671.645811   -7971.645752  6056.101133 -7671.645811  300.000000 -7971.645752        0.0  299.999941      200.000000       3.0         -8071.645996                 1.0          True
3   -7671.645811   -7771.645996  6056.101133 -7671.645811    1.010010 -7771.645996        0.0  100.000186      100.000000       2.0         -7671.645811                 1.0          True
4   -7671.645811   -7671.658203  6056.101133 -7671.645811    2.010010 -7671.658203        0.0    0.012393        0.000000       3.0         -7671.645811                 0.0         False
5   -7671.645811   -7671.645811  6156.091309 -7671.645811    0.010000 -7671.645811        0.0    0.000000       -0.009824       4.0         -7671.645811                 1.0         False
6   -7671.635811   -7671.635811  6256.091064 -7671.635811    0.010000 -7671.635811        0.0    0.000000       -0.000068       1.0         -7671.645811                 1.0         False
7   -7670.625811   -7670.625811  6353.071289 -7670.625811    1.010000 -7670.625811        0.0    0.000000       -2.009844       1.0         -7671.645811                 0.0         False
8   -7668.615811   -7668.615967  6353.071289 -7668.615811    2.010000 -7668.615967        0.0    0.000156      -99.999844       1.0         -7671.645811                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:06:18]  --------------------------------------------------------------------------------
[09/26 12:06:18]  Iteration: 139 (51 solution, 87 counterexamples)
[09/26 12:06:40]  Generator returned sat in 19.524154 secs.
[09/26 12:06:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:06:41]  Improved gap from 0.0 to 1.5625
[09/26 12:06:42]  Improved number of small numbers from 78 to 83 out of a max of 114
[09/26 12:06:42]  Verifer returned sat in 1.216167 secs.
[09/26 12:06:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7871.645996   -7971.645996  5956.101318 -7871.645996  0.014404 -7971.645996        0.0  100.000000      100.000000       4.0         -7971.645996                -1.0            -1
1   -7871.645996   -7873.646240  5956.101318 -7871.645996  0.014404 -7873.646240        0.0    2.000244        0.000000       3.0         -7971.645996                 1.0         False
2   -7871.645996   -7871.645996  6054.538818 -7871.645996  1.985840 -7871.645996        0.0    0.000000       -1.562500       3.0         -7971.645996                 0.0         False
3   -7869.674803   -7869.674803  6152.567383 -7869.674803  1.971193 -7869.674803        0.0    0.000000       -1.562742       1.0         -7869.674803                 0.0         False
4   -7867.718013   -7867.718013  6250.610835 -7867.718013  1.956790 -7867.718013        0.0    0.000000       -1.562500       1.0         -7867.718013                 0.0         False
5   -7865.782827   -7865.782827  6348.675537 -7865.782827  1.935185 -7865.782827        0.0    0.000000       -1.562613       1.0         -7865.782827                 0.0         False
6   -7863.880050   -7863.880050  6446.481445 -7863.880050  1.902778 -7863.880050        0.0    0.000000       -1.853927       1.0         -7863.880050                 0.0         False
7   -7862.025883   -7862.025883  6544.700195 -7862.025883  1.854167 -7862.025883        0.0    0.000000       -1.781010       1.0         -7862.025883                 0.0         False
8   -7860.244633   -7860.244633  6643.137451 -7860.244633  1.781250 -7860.244633        0.0    0.000000       -1.562504       1.0         -7860.244633                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:06:42]  --------------------------------------------------------------------------------
[09/26 12:06:42]  Iteration: 140 (51 solution, 88 counterexamples)
[09/26 12:07:13]  Generator returned sat in 28.077367 secs.
[09/26 12:07:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:07:14]  Improved number of small numbers from 59 to 113 out of a max of 113
[09/26 12:07:14]  Verifer returned sat in 0.965649 secs.
[09/26 12:07:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7761.426514   -7861.306885  6643.137451 -7761.426514  300.119629 -7861.306885    0.000000   99.880371       99.880371       9.0         -7861.306885                -1.0            -1
1   -7561.187012   -7761.306885  6643.137451 -7561.187012  300.119873 -7761.306885    0.119873  200.000000      200.000000       1.0         -7861.306885                 1.0         False
2   -7561.187012   -7661.426514  6643.137451 -7561.187012   38.324951 -7661.426514    0.119873  100.119629      100.000000       2.0         -7561.306885                 0.0         False
3   -7561.187012   -7661.306885  6643.137451 -7561.187012   38.205078 -7661.306885    0.119873  100.000000        0.000000       3.0         -7561.306885                 1.0         False
4   -7561.187012   -7561.306885  6643.137451 -7561.187012   75.410156 -7561.306885    0.119873    0.000000     -100.000000       4.0         -7561.306885                 1.0         False
5   -7411.366699   -7461.306885  6643.137451 -7411.366699  149.820312 -7461.306885    0.119873   49.820312      -50.179688       1.0         -7561.306885                 1.0         False
6   -7211.306885   -7361.306885  6643.137451 -7211.306885  249.880127 -7361.306885    0.119873  149.880127       49.880127       1.0         -7561.306885                 0.0         False
7   -6961.306885   -7259.947266  6643.137451 -6961.306885  399.880127 -7259.947266    0.119873  298.520508      199.880127       2.0         -7561.306885                 0.0         False
8   -6461.067139   -7061.306885  6643.137451 -6461.067139  798.760254 -7061.306885  400.239746  200.000000      200.000000       2.0         -7561.306885                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638891/4096, 
.[0m
[09/26 12:07:15]  --------------------------------------------------------------------------------
[09/26 12:07:15]  Iteration: 141 (51 solution, 89 counterexamples)
[09/26 12:07:45]  Generator returned sat in 26.915954 secs.
[09/26 12:07:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:07:45]  Verifer returned unsat in 0.157547 secs.
[09/26 12:07:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:07:45]  --------------------------------------------------------------------------------
[09/26 12:07:45]  Iteration: 142 (52 solution, 89 counterexamples)
[09/26 12:07:50]  Generator returned sat in 2.582271 secs.
[09/26 12:07:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:07:51]  Verifer returned unsat in 0.168842 secs.
[09/26 12:07:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:07:51]  --------------------------------------------------------------------------------
[09/26 12:07:51]  Iteration: 143 (53 solution, 89 counterexamples)
[09/26 12:07:56]  Generator returned sat in 2.681725 secs.
[09/26 12:07:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:07:57]  Improved gap from 81.02993774414062 to 100
[09/26 12:07:58]  Improved number of small numbers from 44 to 54 out of a max of 114
[09/26 12:07:58]  Verifer returned sat in 1.414249 secs.
[09/26 12:07:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7215.488281   -7241.932979  6643.137451 -7215.488281    0.119873 -7241.932979    0.000000   26.444698       26.444698       3.0         -7241.932979                -1.0            -1
1   -7215.488281   -7215.488384  6643.137451 -7215.488281    0.119873 -7215.488384    0.000000    0.000103      -73.555302       3.0         -7241.932979                 1.0         False
2   -7042.052730   -7141.112606  6643.137451 -7042.052730  173.435654 -7141.112606    0.000000   99.059875       -0.119751       1.0         -7241.932979                 1.0          True
3   -7041.813228   -7041.932979  6643.137451 -7041.813228   99.299377 -7041.932979    0.000000    0.119751      -99.880249       1.0         -7041.813228                 0.0         False
4   -6791.283290   -6941.932979  6643.137451 -6791.283290  250.649689 -6941.932979    0.000000  150.649689       50.649689       1.0         -7041.813228                 0.0         False
5   -6542.052730   -6741.932979  6643.137451 -6542.052730  399.880249 -6741.932979    0.000000  199.880249      199.880249       1.0         -7041.813228                 0.0         False
6   -6141.813228   -6641.992855  6643.137451 -6141.813228  600.119751 -6641.992855  300.119751  200.059875      200.000000       2.0         -7041.813228                 0.0         False
7   -6041.813228   -6541.932979  6643.137451 -6041.813228  300.059875 -6541.932979  300.119751  200.000000      200.000000       2.0         -6341.932979                 1.0          True
8   -5841.813228   -6541.813232  6643.137451 -5841.813228  400.000000 -6541.813232  400.119751  299.880253      200.000000       3.0         -6341.932979                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277781/8192, 
.[0m
[09/26 12:07:58]  --------------------------------------------------------------------------------
[09/26 12:07:58]  Iteration: 144 (53 solution, 90 counterexamples)
[09/26 12:09:00]  Generator returned sat in 59.138493 secs.
[09/26 12:09:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:09:01]  Improved gap from 0.0 to 17.1875
[09/26 12:09:02]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/26 12:09:02]  Verifer returned sat in 1.067720 secs.
[09/26 12:09:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7159.182861   -7176.370605  6577.574707 -7159.182861    0.062500 -7176.370605     0.0000   17.187744       17.187500       4.0         -7176.370605                -1.0            -1
1   -7159.120605   -7159.120605  6643.137451 -7159.120605   17.250000 -7159.120605     0.0000    0.000000      -17.187500       1.0         -7176.370605                 1.0         False
2   -7141.933105   -7141.933105  6725.949951 -7141.933105   17.187500 -7141.933105     0.0000    0.000000      -17.187500       1.0         -7141.933105                 0.0         False
3   -7124.733887   -7124.733887  6808.750732 -7124.733887   17.199219 -7124.733887     0.0000    0.000000      -17.187500       1.0         -7141.933105                 0.0         False
4   -7020.460449   -7107.546387  6808.750732 -7020.460449  104.273438 -7107.546387     0.0000   87.085938      -12.914062       1.0         -7141.933105                 0.0         False
5   -7003.397949   -7003.397949  6826.469482 -7003.397949  104.148438 -7003.397949     0.0000    0.000000      -78.132812       1.0         -7003.397949                 0.0         False
6   -6725.327637   -6925.265137  6826.469482 -6725.327637  278.070312 -6925.265137     0.0000  199.937500       99.937500       1.0         -7003.397949                 0.0         False
7   -6525.327637   -6725.265137  6826.469482 -6525.327637  399.937500 -6725.265137     0.0000  199.937500      199.937500       1.0         -7003.397949                 0.0         False
8   -5959.702637   -6725.202393  6826.469482 -5959.702637  765.562500 -6725.202393   465.5625  299.937256      200.000000       2.0         -7003.397949                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=7449/16, 
.[0m
[09/26 12:09:02]  --------------------------------------------------------------------------------
[09/26 12:09:02]  Iteration: 145 (53 solution, 91 counterexamples)
[09/26 12:09:50]  Generator returned sat in 45.238562 secs.
[09/26 12:09:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:09:52]  Improved gap from 0.03125 to 17.1875
[09/26 12:09:53]  Improved number of small numbers from 50 to 114 out of a max of 114
[09/26 12:09:53]  Verifer returned sat in 2.271304 secs.
[09/26 12:09:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6110.539795   -6110.599854  6515.739990 -6110.539795    0.179688 -6110.599854    0.000000    0.060059        0.060059       1.0         -6110.599854                -1.0            -1
1   -6110.479980   -6110.479980  6598.373047 -6110.479980    0.119873 -6110.479980    0.000000    0.000000      -17.247070       1.0         -6110.479980                 0.0         False
2   -6093.232666   -6093.232666  6681.185303 -6093.232666   17.247314 -6093.232666    0.000000    0.000000      -17.187500       1.0         -6110.479980                 0.0         False
3   -6076.045166   -6076.045166  6763.997803 -6076.045166   17.187500 -6076.045166    0.000000    0.000000      -17.187500       1.0         -6076.045166                 0.0         False
4   -6025.302979   -6058.857666  6763.997803 -6025.302979   50.742188 -6058.857666    0.000000   33.554688      -66.445312       1.0         -6076.045166                 0.0         False
5   -5957.493164   -5957.493164  6826.469482 -5957.493164  101.364502 -5957.493164    0.000000    0.000000      -36.163818       1.0         -6076.045166                 0.0         False
6   -5721.389160   -5921.329346  6826.469482 -5721.389160  236.104004 -5921.329346    0.000000  199.940186       99.940186       1.0         -6076.045166                 0.0         False
7   -5531.509521   -5721.329346  6826.469482 -5531.509521  389.819824 -5721.329346    0.000000  189.819824      189.819824       1.0         -6076.045166                 0.0         False
8   -4994.981201   -5621.329346  6826.469482 -4994.981201  726.348145 -5621.329346  426.348145  200.000000      200.000000       2.0         -6076.045166                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=873161/2048, 
.[0m
[09/26 12:09:53]  --------------------------------------------------------------------------------
[09/26 12:09:53]  Iteration: 146 (53 solution, 92 counterexamples)
[09/26 12:10:04]  Generator returned sat in 8.014320 secs.
[09/26 12:10:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:10:06]  Improved gap from 0.0 to 0
[09/26 12:10:06]  Improved number of small numbers from 74 to 92 out of a max of 114
[09/26 12:10:06]  Verifer returned sat in 1.932439 secs.
[09/26 12:10:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6125.312988   -6125.315674  6498.373047 -6125.312988    0.002500 -6125.315674        0.0   0.002686        0.000000       1.0         -6125.315674                -1.0            -1
1   -6125.312988   -6125.312988  6598.373047 -6125.312988    0.002686 -6125.312988        0.0   0.000000        0.000000       2.0         -6125.315674                 0.0         False
2   -6025.315674   -6125.312979  6598.373047 -6025.315674   99.997314 -6125.312979        0.0  99.997305       -0.002686       1.0         -6125.315674                 1.0          True
3   -6025.312979   -6025.312979  6698.372803 -6025.312979  100.000000 -6025.312979        0.0   0.000000       -0.000234       1.0         -6125.315674                 0.0         False
4   -6025.302979   -6025.302979  6798.363037 -6025.302979    0.010000 -6025.302979        0.0   0.000000        0.000000       1.0         -6025.302979                 0.0         False
5   -6025.292979   -6025.292979  6898.353027 -6025.292979    0.010000 -6025.292979        0.0   0.000000       -0.000010       1.0         -6025.302979                 0.0         False
6   -6025.282979   -6025.282979  6998.343018 -6025.282979    0.010000 -6025.282979        0.0   0.000000       -0.000020       1.0         -6025.302979                 0.0         False
7   -6025.272979   -6025.272979  7098.323047 -6025.272979    0.010000 -6025.272979        0.0   0.000000       -0.009990       1.0         -6025.302979                 0.0         False
8   -6025.262979   -6025.262979  7198.322998 -6025.262979    0.010000 -6025.262979        0.0   0.000000       -0.000039       1.0         -6025.302979                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:10:07]  --------------------------------------------------------------------------------
[09/26 12:10:07]  Iteration: 147 (53 solution, 93 counterexamples)
[09/26 12:10:53]  Generator returned sat in 42.690390 secs.
[09/26 12:10:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:10:53]  Improved gap from 0.179443359375 to 100
[09/26 12:10:54]  Improved number of small numbers from 58 to 71 out of a max of 114
[09/26 12:10:54]  Verifer returned sat in 0.920078 secs.
[09/26 12:10:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6927.252930   -7127.133545  7500.193408 -6927.252930    0.119629 -7127.133545    0.000000  199.880615      199.880420       2.0         -7127.133545                -1.0            -1
1   -6927.252930   -7051.213387  7500.193408 -6927.252930    0.119629 -7051.213387    0.000000  123.960457       99.880420       2.0         -7127.133545                 0.0         False
2   -6727.252979   -6927.133350  7500.193408 -6727.252979  323.960409 -6927.133350    0.000000  199.880371      199.880371       1.0         -7127.133545                 0.0         False
3   -6627.013721   -6827.133350  7500.193408 -6627.013721  300.119629 -6827.133350    0.119629  200.000000      200.000000       2.0         -6627.133350                 0.0         False
4   -6627.013721   -6751.788786  7500.193408 -6627.013721  151.059814 -6751.788786    0.119629  124.655436      100.000000       3.0         -6627.133350                 0.0         False
5   -6224.654834   -6627.133350  7500.193408 -6224.654834  527.014323 -6627.133350  202.478516  200.000000      200.000000       3.0         -6627.133350                 1.0         False
6   -6160.147673   -6627.133350  7500.193408 -6160.147673  264.507161 -6627.133350  202.478516  264.507161      164.507161       3.0         -6362.626188                 1.0         False
7   -5826.894092   -6527.133301  7500.193408 -5826.894092  597.760742 -6527.133301  400.239258  299.999951      200.000000       3.0         -6362.626188                 1.0         False
8   -5826.894092   -6351.788818  7500.193408 -5826.894092  299.880371 -6351.788818  400.239258  124.655469      100.000000       2.0         -6227.133350                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819445/2048, 
.[0m
[09/26 12:10:54]  --------------------------------------------------------------------------------
[09/26 12:10:54]  Iteration: 148 (53 solution, 94 counterexamples)
[09/26 12:11:14]  Generator returned sat in 16.995997 secs.
[09/26 12:11:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:11:15]  Improved gap from 0.0 to 0
[09/26 12:11:15]  Improved number of small numbers from 56 to 114 out of a max of 114
[09/26 12:11:15]  Verifer returned sat in 0.402994 secs.
[09/26 12:11:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -5554.878662   -5554.908447  5927.908447 -5554.878662    0.029785 -5554.908447        0.0  0.029785       -0.030029       2.0         -5554.908447                -1.0            -1
1   -5554.848633   -5554.848633  6027.908447 -5554.848633    0.059814 -5554.848633        0.0  0.000000        0.000000       1.0         -5554.908447                 0.0         False
2   -5554.788818   -5554.788818  6127.848633 -5554.788818    0.059814 -5554.788818        0.0  0.000000        0.000000       1.0         -5554.908447                 0.0         False
3   -5453.759033   -5454.788818  6127.848633 -5453.759033  101.029785 -5454.788818        0.0  1.029785        1.029785       1.0         -5554.908447                 0.0         False
4   -5453.759033   -5453.759033  6226.818848 -5453.759033    1.000000 -5453.759033        0.0  0.000000        0.000000       2.0         -5453.759033                 0.0         False
5   -5452.759033   -5452.759033  6325.818848 -5452.759033    1.000000 -5452.759033        0.0  0.000000        0.000000       1.0         -5453.759033                 0.0         False
6   -5451.759033   -5451.759033  6424.818848 -5451.759033    1.000000 -5451.759033        0.0  0.000000        0.000000       1.0         -5453.759033                 0.0         False
7   -5450.759033   -5450.759033  6522.818848 -5450.759033    1.000000 -5450.759033        0.0  0.000000       -1.000000       1.0         -5453.759033                 0.0         False
8   -5449.759033   -5449.759033  6522.818848 -5449.759033    1.000000 -5449.759033        0.0  0.000000     -100.000000       1.0         -5453.759033                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:11:16]  --------------------------------------------------------------------------------
[09/26 12:11:16]  Iteration: 149 (53 solution, 95 counterexamples)
[09/26 12:11:56]  Generator returned sat in 37.563900 secs.
[09/26 12:11:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:11:58]  Improved gap from 0.0 to 3.125
[09/26 12:11:58]  Improved number of small numbers from 55 to 114 out of a max of 114
[09/26 12:11:58]  Verifer returned sat in 1.599872 secs.
[09/26 12:11:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6736.396484   -6836.277100  7306.071533 -6736.396484  200.119385 -6836.277100        0.0   99.880615       99.880615       2.0         -6836.277100                -1.0            -1
1   -6736.277100   -6736.277100  7306.071533 -6736.277100  100.000000 -6736.277100        0.0    0.000000        0.000000       1.0         -6736.277100                 0.0         False
2   -6475.396729   -6637.515869  7306.071533 -6475.396729  260.880371 -6637.515869        0.0  162.119141      160.880371       1.0         -6736.277100                 0.0         False
3   -6475.396729   -6538.282715  7306.071533 -6475.396729  162.000000 -6538.282715        0.0   62.885986       60.880371       2.0         -6475.396729                 0.0         False
4   -6458.282715   -6475.277100  7306.071533 -6458.282715   80.000000 -6475.277100        0.0   16.994385      -22.005615       1.0         -6458.282715                 0.0         False
5   -6436.277100   -6436.277100  7402.946533 -6436.277100   39.000000 -6436.277100        0.0    0.000000       -3.125000       1.0         -6436.277100                 0.0         False
6   -6417.777100   -6417.777100  7484.446289 -6417.777100   18.500000 -6417.777100        0.0    0.000000       -3.125244       1.0         -6417.777100                 0.0         False
7   -6409.527100   -6409.527100  7576.196533 -6409.527100    8.250000 -6409.527100        0.0    0.000000       -3.125000       1.0         -6409.527100                 0.0         False
8   -6406.402100   -6406.402100  7654.190918 -6406.402100    3.125000 -6406.402100        0.0    0.000000      -22.005615       1.0         -6406.402100                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:11:59]  --------------------------------------------------------------------------------
[09/26 12:11:59]  Iteration: 150 (53 solution, 96 counterexamples)
[09/26 12:12:43]  Generator returned sat in 41.424750 secs.
[09/26 12:12:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:12:44]  Improved number of small numbers from 57 to 68 out of a max of 113
[09/26 12:12:44]  Verifer returned sat in 0.985983 secs.
[09/26 12:12:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6659.294922   -6659.296257  6855.247070 -6659.294922  0.003750 -6659.296257        0.0  0.001335       -0.000977       9.0         -6659.296257                -1.0            -1
1   -6659.293757   -6659.293757  6955.246826 -6659.293757  0.002500 -6659.293757        0.0  0.000000       -0.000055       1.0         -6659.293757                 1.0         False
2   -6659.292507   -6659.292507  7054.578125 -6659.292507  0.001250 -6659.292507        0.0  0.000000       -0.667507       1.0         -6659.292507                 0.0         False
3   -6658.624868   -6658.624868  7154.577881 -6658.624868  0.667639 -6658.624868        0.0  0.000000       -0.000112       1.0         -6659.292507                 0.0         False
4   -6658.287715   -6658.287715  7254.230957 -6658.287715  0.337153 -6658.287715        0.0  0.000000       -0.009883       1.0         -6658.287715                 0.0         False
5   -6658.277715   -6658.277715  7354.220947 -6658.277715  0.010000 -6658.277715        0.0  0.000000       -0.009893       1.0         -6658.277715                 0.0         False
6   -6658.267715   -6658.267715  7454.210938 -6658.267715  0.010000 -6658.267715        0.0  0.000000       -0.009902       1.0         -6658.277715                 0.0         False
7   -6658.257715   -6658.257715  7554.210693 -6658.257715  0.010000 -6658.257715        0.0  0.000000       -0.000146       1.0         -6658.277715                 0.0         False
8   -6658.247715   -6658.247715  7654.190918 -6658.247715  0.010000 -6658.247715        0.0  0.000000       -0.009922       1.0         -6658.277715                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:12:45]  --------------------------------------------------------------------------------
[09/26 12:12:45]  Iteration: 151 (53 solution, 97 counterexamples)
[09/26 12:13:16]  Generator returned sat in 27.668297 secs.
[09/26 12:13:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:13:17]  Improved gap from 5.5338541666666664e-05 to 1.5625
[09/26 12:13:18]  Improved number of small numbers from 60 to 69 out of a max of 114
[09/26 12:13:18]  Verifer returned sat in 2.195776 secs.
[09/26 12:13:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7630.085678   -7632.046499  7827.999512 -7630.085678  1.947761 -7632.046499        0.0  1.960821        1.960709       2.0         -7632.046499                -1.0            -1
1   -7630.085678   -7630.085678  7924.104248 -7630.085678  1.947998 -7630.085678        0.0  0.000000       -1.934555       2.0         -7632.046499                 0.0         False
2   -7628.150977   -7628.150977  8022.182617 -7628.150977  1.934701 -7628.150977        0.0  0.000000       -1.921484       1.0         -7628.150977                 0.0         False
3   -7626.229335   -7626.229335  8120.273926 -7626.229335  1.921642 -7626.229335        0.0  0.000000       -1.908534       1.0         -7626.229335                 0.0         False
4   -7624.320753   -7624.320753  8218.711182 -7624.320753  1.908582 -7624.320753        0.0  0.000000       -1.562696       1.0         -7624.320753                 0.0         False
5   -7622.438290   -7622.438290  8316.828857 -7622.438290  1.882463 -7622.438290        0.0  0.000000       -1.562558       1.0         -7622.438290                 0.0         False
6   -7620.581947   -7620.581947  8414.972412 -7620.581947  1.856343 -7620.581947        0.0  0.000000       -1.562660       1.0         -7620.581947                 0.0         False
7   -7618.758253   -7618.758253  8512.930176 -7618.758253  1.823694 -7618.758253        0.0  0.000000       -1.781202       1.0         -7618.758253                 0.0         False
8   -7616.977003   -7616.977003  8512.930176 -7616.977003  1.781250 -7616.977003        0.0  0.000000      -99.999952       1.0         -7616.977003                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:13:19]  --------------------------------------------------------------------------------
[09/26 12:13:19]  Iteration: 152 (53 solution, 98 counterexamples)
[09/26 12:14:32]  Generator returned sat in 70.537101 secs.
[09/26 12:14:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:14:32]  Improved gap from 0.0 to 100
[09/26 12:14:34]  Improved number of small numbers from 40 to 61 out of a max of 114
[09/26 12:14:34]  Verifer returned sat in 1.754685 secs.
[09/26 12:14:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7914.583740   -7914.703125  8110.537069 -7914.583740    0.059814 -7914.703125    0.000000    0.119385        0.000204       1.0         -7914.703125                -1.0            -1
1   -7914.583740   -7914.583740  8110.537069 -7914.583740    0.059814 -7914.583740    0.000000    0.000000      -99.999796       2.0         -7914.703125                 0.0         False
2   -7625.260986   -7714.583944  8110.537069 -7625.260986  289.322754 -7714.583944    0.000000   89.322958       89.322958       1.0         -7914.703125                 1.0          True
3   -7625.201490   -7625.261121  8110.537069 -7625.201490   89.382454 -7625.261121    0.000000    0.059631      -10.617546       2.0         -7625.201490                 0.0         False
4   -7580.569894   -7580.569894  8110.537069 -7580.569894   44.691227 -7580.569894    0.000000    0.000000      -65.985950       1.0         -7580.569894                 1.0         False
5   -7492.187441   -7514.583944  8110.537069 -7492.187441   88.382454 -7514.583944    0.000000   22.396503      -77.603497       1.0         -7580.569894                 0.0         False
6   -7338.819036   -7414.583944  8110.537069 -7338.819036  175.764908 -7414.583944    0.000000   75.764908      -24.235092       1.0         -7580.569894                 0.0         False
7   -7064.054128   -7214.583944  8110.537069 -7064.054128  350.529816 -7214.583944    0.000000  150.529816      150.529816       1.0         -7580.569894                 0.0         False
8   -6514.524313   -7114.583984  8110.537069 -6514.524313  700.059631 -7114.583984  400.059631  200.000040      200.000000       2.0         -7580.569894                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=6554577/16384, 
.[0m
[09/26 12:14:35]  --------------------------------------------------------------------------------
[09/26 12:14:35]  Iteration: 153 (53 solution, 99 counterexamples)
[09/26 12:15:12]  Generator returned sat in 34.185287 secs.
[09/26 12:15:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:15:13]  Improved gap from 0.0 to 48.4375
[09/26 12:15:13]  Improved number of small numbers from 53 to 114 out of a max of 114
[09/26 12:15:13]  Verifer returned sat in 0.669179 secs.
[09/26 12:15:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7075.836670   -7275.836670  8056.849609 -7075.836670    0.119141 -7275.836670    0.000000  200.000000      100.000000       9.0          -7275.83667                -1.0            -1
1   -7075.836670   -7075.836914  8056.849609 -7075.836670    0.119385 -7075.836914    0.000000    0.000244        0.000000       2.0          -7275.83667                 1.0         False
2   -6975.956299   -6999.555420  8056.849609 -6975.956299   99.880615 -6999.555420    0.000000   23.599121       -0.119629       1.0          -7275.83667                 1.0          True
3   -6975.836670   -6975.836670  8108.412109 -6975.836670   23.718750 -6975.836670    0.000000    0.000000      -48.437500       1.0          -6975.83667                 0.0         False
4   -6927.399170   -6927.399170  8110.537109 -6927.399170   48.437500 -6927.399170    0.000000    0.000000      -97.875000       1.0          -6975.83667                 0.0         False
5   -6829.524170   -6829.524170  8110.537109 -6829.524170   97.875000 -6829.524170    0.000000    0.000000     -100.000000       1.0          -6975.83667                 0.0         False
6   -6632.774170   -6729.524170  8110.537109 -6632.774170  196.750000 -6729.524170    0.000000   96.750000       -3.250000       1.0          -6975.83667                 0.0         False
7   -6335.024170   -6529.524414  8110.537109 -6335.024170  394.500000 -6529.524414    0.000000  194.500244      194.500000       1.0          -6975.83667                 0.0         False
8   -5739.524414   -6429.524414  8110.537109 -5739.524414  790.000000 -6429.524414  489.999756  200.000244      200.000000       2.0          -6975.83667                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=2007039/4096, 
.[0m
[09/26 12:15:14]  --------------------------------------------------------------------------------
[09/26 12:15:14]  Iteration: 154 (53 solution, 100 counterexamples)
[09/26 12:15:48]  Generator returned sat in 31.500128 secs.
[09/26 12:15:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:15:49]  Verifer returned unsat in 0.159162 secs.
[09/26 12:15:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:15:49]  --------------------------------------------------------------------------------
[09/26 12:15:49]  Iteration: 155 (54 solution, 100 counterexamples)
[09/26 12:16:01]  Generator returned sat in 9.693639 secs.
[09/26 12:16:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:16:02]  Improved number of small numbers from 75 to 113 out of a max of 113
[09/26 12:16:02]  Verifer returned sat in 0.447716 secs.
[09/26 12:16:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6833.890381   -6947.497070  8110.537109 -6833.890381    0.119141 -6947.497070   0.000000  113.606689      113.606689       2.0         -6947.497070                -1.0            -1
1   -6833.890381   -6878.045898  8110.537109 -6833.890381  113.487061 -6878.045898   0.000000   44.155518       13.606689       2.0         -6947.497070                 0.0         False
2   -6764.677734   -6764.796875  8110.537109 -6764.677734  113.368164 -6764.796875   0.000000    0.119141      -17.180664       1.0         -6764.677734                 0.0         False
3   -6418.377930   -6662.890625  8110.537109 -6418.377930  346.418945 -6662.890625  29.119141  215.393555      200.000000       1.0         -6764.677734                 0.0         False
4   -6318.258789   -6562.771484  8110.537109 -6318.258789  315.512695 -6562.771484  29.238281  215.274414      200.000000       2.0         -6347.497070                 0.0         False
5   -6218.139648   -6447.497070  8110.537109 -6218.139648  315.393555 -6447.497070  29.357422  200.000000      200.000000       3.0         -6247.497070                 0.0         False
6   -6101.792969   -6347.497070  8110.537109 -6101.792969  316.346680 -6347.497070  45.704102  200.000000      200.000000       3.0         -6247.497070                 0.0         False
7   -5985.922852   -6247.616211  8110.537109 -5985.922852  315.870117 -6247.616211  61.574219  200.119141      200.000000       3.0         -6047.497070                 0.0         False
8   -5870.529297   -6247.497070  8110.537109 -5870.529297  315.512695 -6247.497070  76.967773  300.000000      200.000000       4.0         -5947.497070                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=48875/1024, 
.[0m
[09/26 12:16:03]  --------------------------------------------------------------------------------
[09/26 12:16:03]  Iteration: 156 (54 solution, 101 counterexamples)
[09/26 12:16:25]  Generator returned sat in 18.859802 secs.
[09/26 12:16:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:16:25]  Improved number of small numbers from 99 to 113 out of a max of 113
[09/26 12:16:25]  Verifer returned sat in 0.284246 secs.
[09/26 12:16:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7034.393066   -7133.890625  8296.93042 -7034.393066  300.002686 -7133.890625    0.000000   99.497559       99.497559       2.0         -7133.890625                -1.0            -1
1   -6833.890625   -7034.390625  8296.93042 -6833.890625  300.000000 -7034.390625    0.000000  200.500000      200.000000       1.0         -6833.890625                 0.0         False
2   -6833.890625   -6999.554443  8296.93042 -6833.890625  200.497500 -6999.554443    0.000000  165.663818      100.000000       2.0         -6833.890625                 0.0         False
3   -6732.887939   -6933.890381  8296.93042 -6732.887939  266.666504 -6933.890381    0.000000  201.002441      101.002686       3.0         -6833.890625                 0.0         False
4   -6533.890625   -6833.890625  8296.93042 -6533.890625  399.999756 -6833.890625    0.000000  300.000000      200.000000       4.0         -6833.890625                 0.0         False
5   -6433.890625   -6732.887939  8296.93042 -6433.890625  400.000000 -6732.887939    0.000000  298.997314      200.000000       3.0         -6833.890625                 1.0         False
6   -6132.887939   -6633.890381  8296.93042 -6132.887939  600.000000 -6633.890381  201.002686  299.999756      200.000000       3.0         -6833.890625                 0.0         False
7   -6132.887939   -6533.890625  8296.93042 -6132.887939    0.010000 -6533.890625  201.002686  200.000000      100.000000       4.0         -6333.890625                 0.0         False
8   -5733.887939   -6433.890625  8296.93042 -5733.887939  599.000000 -6433.890625  400.002686  300.000000      200.000000       4.0         -6333.890625                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638411/4096, 
.[0m
[09/26 12:16:26]  --------------------------------------------------------------------------------
[09/26 12:16:26]  Iteration: 157 (54 solution, 102 counterexamples)
[09/26 12:16:55]  Generator returned sat in 25.991444 secs.
[09/26 12:16:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:16:56]  Improved gap from 98.79193115234375 to 100
[09/26 12:16:56]  Improved number of small numbers from 105 to 105 out of a max of 114
[09/26 12:16:56]  Verifer returned sat in 0.879702 secs.
[09/26 12:16:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7034.101339   -7334.065625  8397.10542 -7034.101339    0.035714 -7334.065625    0.000000  299.964286      199.964286       1.0         -7334.065625                -1.0            -1
1   -7034.101339   -7234.065625  8397.10542 -7034.101339  199.964286 -7234.065625    0.000000  199.964286       99.964286       2.0         -7334.065625                 0.0         False
2   -7034.101339   -7066.857292  8397.10542 -7034.101339  199.928571 -7066.857292    0.000000   32.755952       -0.035714       3.0         -7034.101339                 1.0          True
3   -6834.101339   -7034.065625  8397.10542 -6834.101339  232.755952 -7034.065625    0.000000  199.964286       99.964286       1.0         -7034.101339                 1.0         False
4   -6684.931696   -6834.065625  8397.10542 -6684.931696  349.133929 -6834.065625    0.000000  149.133929      149.133929       1.0         -7034.101339                 0.0         False
5   -6310.364732   -6834.065625  8397.10542 -6310.364732  523.700893 -6834.065625  223.700893  300.000000      200.000000       1.0         -7034.101339                 0.0         False
6   -6310.364732   -6684.895982  8397.10542 -6310.364732    1.000000 -6684.895982  223.700893  150.830357      100.000000       2.0         -6534.065625                 0.0         False
7   -6110.525446   -6534.065625  8397.10542 -6110.525446  350.669643 -6534.065625  223.700893  199.839286      199.839286       3.0         -6534.065625                 1.0         False
8   -5834.029911   -6434.065625  8397.10542 -5834.029911  476.334821 -6434.065625  400.035714  200.000000      200.000000       2.0         -6534.065625                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=11201/28, 
.[0m
[09/26 12:16:57]  --------------------------------------------------------------------------------
[09/26 12:16:57]  Iteration: 158 (54 solution, 103 counterexamples)
[09/26 12:17:41]  Generator returned sat in 40.406448 secs.
[09/26 12:17:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:17:41]  Improved gap from 0.0 to 100
[09/26 12:17:41]  Improved number of small numbers from 109 to 114 out of a max of 114
[09/26 12:17:41]  Verifer returned sat in 0.357166 secs.
[09/26 12:17:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7183.931641   -7283.931641  8397.105225 -7183.931641    0.118652 -7283.931641    0.000000  100.000000             0.0       9.0         -7283.931641                -1.0            -1
1   -7183.931641   -7183.931641  8397.105225 -7183.931641    0.118896 -7183.931641    0.000000    0.000000          -100.0       2.0         -7283.931641                 1.0         False
2   -6883.931641   -6984.931641  8397.105225 -6883.931641  300.000000 -6984.931641    0.000000  101.000000           100.0       1.0         -7283.931641                 1.0          True
3   -6684.931641   -6883.931641  8397.105225 -6684.931641  300.000000 -6883.931641    0.000000  199.000000           199.0       2.0         -7283.931641                 0.0         False
4   -6684.931641   -6833.990967  8397.105225 -6684.931641    1.000000 -6833.990967    0.000000  149.059326            99.0       2.0         -6684.931641                 1.0          True
5   -6684.931641   -6684.931641  8397.105225 -6684.931641    1.000000 -6684.931641    0.000000    0.000000            -1.0       3.0         -6684.931641                 1.0         False
6   -6683.931641   -6683.931641  8397.105225 -6683.931641    1.000000 -6683.931641    0.000000    0.000000          -100.0       1.0         -6684.931641                 1.0         False
7   -6283.931641   -6483.931641  8397.105225 -6283.931641  400.000000 -6483.931641    0.000000  200.000000           200.0       1.0         -6684.931641                 0.0         False
8   -5783.812988   -6383.931641  8397.105225 -5783.812988  700.118652 -6383.931641  400.118652  200.000000           200.0       2.0         -6684.931641                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819443/2048, 
.[0m
[09/26 12:17:42]  --------------------------------------------------------------------------------
[09/26 12:17:42]  Iteration: 159 (54 solution, 104 counterexamples)
[09/26 12:17:53]  Generator returned sat in 7.922357 secs.
[09/26 12:17:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:17:55]  Improved gap from 0.0 to 3.125
[09/26 12:17:56]  Improved number of small numbers from 64 to 72 out of a max of 114
[09/26 12:17:56]  Verifer returned sat in 3.097636 secs.
[09/26 12:17:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6781.383209   -6781.394740  8181.068115 -6781.383209    0.005615 -6781.394740    0.000000    0.011531        0.011322       1.0         -6781.394740                -1.0            -1
1   -6781.383209   -6781.383209  8277.931641 -6781.383209    0.005859 -6781.383209    0.000000    0.000000       -3.125152       2.0         -6781.394740                 0.0         False
2   -6778.252443   -6778.252443  8374.801027 -6778.252443    3.130766 -6778.252443    0.000000    0.000000       -3.125000       1.0         -6781.394740                 1.0          True
3   -6775.127443   -6775.127443  8459.141602 -6775.127443    3.125000 -6775.127443    0.000000    0.000000      -15.659426       1.0         -6775.127443                 0.0         False
4   -6759.467849   -6759.467849  8556.016357 -6759.467849   15.659594 -6759.467849    0.000000    0.000000       -3.125076       1.0         -6775.127443                 0.0         False
5   -6699.977535   -6699.977535  8583.605225 -6699.977535   59.490314 -6699.977535    0.000000    0.000000      -16.045895       1.0         -6775.127443                 0.0         False
6   -6483.937406   -6683.931641  8583.605225 -6483.937406  216.040129 -6683.931641    0.000000  199.994234       99.994234       1.0         -6775.127443                 0.0         False
7   -6285.499906   -6483.931641  8583.605225 -6285.499906  398.431734 -6483.931641    0.000000  198.431734      198.431734       1.0         -6775.127443                 0.0         False
8   -5534.427489   -6383.931885  8583.605225 -5534.427489  949.504151 -6383.931885  649.504151  200.000244      200.000000       2.0         -6775.127443                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1408125/2168, 
.[0m
[09/26 12:17:57]  --------------------------------------------------------------------------------
[09/26 12:17:57]  Iteration: 160 (54 solution, 105 counterexamples)
[09/26 12:18:17]  Generator returned sat in 16.690645 secs.
[09/26 12:18:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:18:17]  Verifer returned unsat in 0.190752 secs.
[09/26 12:18:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:18:17]  --------------------------------------------------------------------------------
[09/26 12:18:17]  Iteration: 161 (55 solution, 105 counterexamples)
[09/26 12:18:25]  Generator returned sat in 4.098910 secs.
[09/26 12:18:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:18:27]  Improved number of small numbers from 28 to 38 out of a max of 113
[09/26 12:18:27]  Verifer returned sat in 1.688176 secs.
[09/26 12:18:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6820.400146   -7086.641589  8420.073404 -6820.400146    0.059570 -7086.641589    0.000000  266.241443      199.999917       8.0         -7086.641589                -1.0            -1
1   -6820.400146   -7020.400064  8420.073404 -6820.400146  266.182129 -7020.400064    0.000000  199.999917       99.999917       2.0         -7086.641589                 1.0         False
2   -6775.127443   -6920.400064  8420.073404 -6775.127443  245.272621 -6920.400064    0.000000  145.272621       45.272621       3.0         -6775.127443                 0.0         False
3   -6520.340677   -6775.127443  8420.073404 -6520.340677  400.059387 -6775.127443    0.059387  254.727379      200.000000       2.0         -6775.127443                 0.0         False
4   -6420.281289   -6667.956061  8420.073404 -6420.281289  354.786767 -6667.956061    0.118774  247.555997      200.000000       2.0         -6420.400064                 0.0         False
5   -6315.221902   -6520.400064  8420.073404 -6315.221902  352.615385 -6520.400064    5.178162  200.000000      200.000000       3.0         -6320.400064                 0.0         False
6   -6139.914210   -6420.400064  8420.073404 -6139.914210  375.307692 -6420.400064   80.485854  200.000000      200.000000       3.0         -6320.400064                 0.0         False
7   -5975.896674   -6320.400064  8420.073404 -5975.896674  364.017536 -6320.400064  144.503390  200.000000      200.000000       3.0         -6120.400064                 0.0         False
8   -5821.109907   -6267.956299  8420.073404 -5821.109907  354.786767 -6267.956299  199.290156  247.556235      200.000000       3.0         -6020.400064                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=5, loss_amount=42421911/212992, 
.[0m
[09/26 12:18:27]  --------------------------------------------------------------------------------
[09/26 12:18:27]  Iteration: 162 (55 solution, 106 counterexamples)
[09/26 12:19:28]  Generator returned sat in 57.771300 secs.
[09/26 12:19:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:19:30]  Improved number of small numbers from 68 to 113 out of a max of 113
[09/26 12:19:30]  Verifer returned sat in 0.948058 secs.
[09/26 12:19:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6618.509033   -6783.647217  8118.122803 -6618.509033    0.059326 -6783.647217    0.000000  165.138184       99.940430       4.0         -6783.647217                -1.0            -1
1   -6618.509033   -6683.469238  8118.122803 -6618.509033  165.078857 -6683.469238    0.000000   64.960205       -0.059570       2.0         -6783.647217                 1.0         False
2   -6518.449463   -6618.449463  8118.122803 -6518.449463  165.019775 -6618.449463    0.000000  100.000000        0.000000       1.0         -6518.449463                 1.0          True
3   -6518.449463   -6518.449463  8118.122803 -6518.449463    0.059326 -6518.449463    0.000000    0.000000     -100.000000       2.0         -6518.449463                 0.0         False
4   -6252.251709   -6418.449463  8118.122803 -6252.251709  266.197754 -6418.449463    0.000000  166.197754       66.197754       1.0         -6518.449463                 1.0         False
5   -6020.330811   -6218.449463  8118.122803 -6020.330811  398.118652 -6218.449463    0.000000  198.118652      198.118652       1.0         -6518.449463                 0.0         False
6   -5619.390137   -6218.449463  8118.122803 -5619.390137  599.059326 -6218.449463  299.059326  300.000000      200.000000       1.0         -6518.449463                 0.0         False
7   -5619.390137   -6018.449463  8118.122803 -5619.390137  149.000000 -6018.449463  299.059326  100.000000      100.000000       2.0         -5918.449463                 0.0         False
8   -5318.390137   -6018.390137  8118.122803 -5318.390137  401.000000 -6018.390137  400.059326  299.940674      200.000000       3.0         -5918.449463                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638643/4096, 
.[0m
[09/26 12:19:30]  --------------------------------------------------------------------------------
[09/26 12:19:30]  Iteration: 163 (55 solution, 107 counterexamples)
[09/26 12:19:52]  Generator returned sat in 18.998455 secs.
[09/26 12:19:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:19:55]  Improved gap from 0.0 to 32.8125
[09/26 12:19:56]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/26 12:19:56]  Verifer returned sat in 2.879469 secs.
[09/26 12:19:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -6585.518555   -6585.636963  8118.122803 -6585.518555    0.059326 -6585.636963    0.000000    0.118408        0.118408       6.0         -6585.636963                -1.0            -1
1   -6585.518555   -6585.518555  8185.191650 -6585.518555    0.059326 -6585.518555    0.000000    0.000000      -32.812744       2.0         -6585.636963                 1.0         False
2   -6551.261963   -6551.261963  8250.935303 -6551.261963   34.256592 -6551.261963    0.000000    0.000000      -32.812500       1.0         -6585.636963                 1.0          True
3   -6418.449463   -6518.449463  8250.935303 -6418.449463  132.812500 -6518.449463    0.000000  100.000000        0.000000       1.0         -6585.636963                 0.0         False
4   -6118.449463   -6418.449463  8250.935303 -6118.449463  400.000000 -6418.449463    0.000000  300.000000      200.000000       2.0         -6585.636963                 0.0         False
5   -6118.449463   -6318.449463  8250.935303 -6118.449463  199.000000 -6318.449463    0.000000  200.000000      100.000000       2.0         -6118.449463                 1.0          True
6   -6118.449463   -6132.179443  8250.935303 -6118.449463   98.500000 -6132.179443    0.000000   13.729980        0.000000       3.0         -6118.449463                 1.0         False
7   -6083.929443   -6083.929688  8250.935303 -6083.929443   48.250000 -6083.929688    0.000000    0.000244      -65.479980       1.0         -6083.929443                 1.0         False
8   -5318.390137   -6018.449463  8250.935303 -5318.390137  765.539551 -6018.449463  400.059326  300.000000      200.000000       1.0         -6083.929443                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=1638643/4096, 
.[0m
[09/26 12:19:56]  --------------------------------------------------------------------------------
[09/26 12:19:56]  Iteration: 164 (55 solution, 108 counterexamples)
[09/26 12:21:08]  Generator returned sat in 68.133503 secs.
[09/26 12:21:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:08]  Verifer returned unsat in 0.291360 secs.
[09/26 12:21:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:08]  --------------------------------------------------------------------------------
[09/26 12:21:08]  Iteration: 165 (56 solution, 108 counterexamples)
[09/26 12:21:16]  Generator returned sat in 4.483943 secs.
[09/26 12:21:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:17]  Verifer returned unsat in 0.257512 secs.
[09/26 12:21:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:17]  --------------------------------------------------------------------------------
[09/26 12:21:17]  Iteration: 166 (57 solution, 108 counterexamples)
[09/26 12:21:28]  Generator returned sat in 7.699081 secs.
[09/26 12:21:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:28]  Verifer returned unsat in 0.132775 secs.
[09/26 12:21:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:28]  --------------------------------------------------------------------------------
[09/26 12:21:28]  Iteration: 167 (58 solution, 108 counterexamples)
[09/26 12:21:36]  Generator returned sat in 4.182921 secs.
[09/26 12:21:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:36]  Verifer returned unsat in 0.253987 secs.
[09/26 12:21:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:36]  --------------------------------------------------------------------------------
[09/26 12:21:36]  Iteration: 168 (59 solution, 108 counterexamples)
[09/26 12:21:44]  Generator returned sat in 4.370601 secs.
[09/26 12:21:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:45]  Verifer returned unsat in 0.138134 secs.
[09/26 12:21:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:45]  --------------------------------------------------------------------------------
[09/26 12:21:45]  Iteration: 169 (60 solution, 108 counterexamples)
[09/26 12:21:52]  Generator returned sat in 4.307437 secs.
[09/26 12:21:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:53]  Verifer returned unsat in 0.175136 secs.
[09/26 12:21:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:21:53]  --------------------------------------------------------------------------------
[09/26 12:21:53]  Iteration: 170 (61 solution, 108 counterexamples)
[09/26 12:22:00]  Generator returned sat in 4.141666 secs.
[09/26 12:22:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:01]  Verifer returned unsat in 0.178770 secs.
[09/26 12:22:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:01]  --------------------------------------------------------------------------------
[09/26 12:22:01]  Iteration: 171 (62 solution, 108 counterexamples)
[09/26 12:22:08]  Generator returned sat in 4.296034 secs.
[09/26 12:22:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:09]  Verifer returned unsat in 0.234629 secs.
[09/26 12:22:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:09]  --------------------------------------------------------------------------------
[09/26 12:22:09]  Iteration: 172 (63 solution, 108 counterexamples)
[09/26 12:22:17]  Generator returned sat in 4.625549 secs.
[09/26 12:22:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:17]  Verifer returned unsat in 0.245151 secs.
[09/26 12:22:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:17]  --------------------------------------------------------------------------------
[09/26 12:22:17]  Iteration: 173 (64 solution, 108 counterexamples)
[09/26 12:22:25]  Generator returned sat in 4.017967 secs.
[09/26 12:22:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:25]  Verifer returned unsat in 0.184516 secs.
[09/26 12:22:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:25]  --------------------------------------------------------------------------------
[09/26 12:22:25]  Iteration: 174 (65 solution, 108 counterexamples)
[09/26 12:22:33]  Generator returned sat in 4.010543 secs.
[09/26 12:22:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:33]  Verifer returned unsat in 0.199198 secs.
[09/26 12:22:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:33]  --------------------------------------------------------------------------------
[09/26 12:22:33]  Iteration: 175 (66 solution, 108 counterexamples)
[09/26 12:22:41]  Generator returned sat in 3.991238 secs.
[09/26 12:22:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:41]  Verifer returned unsat in 0.164360 secs.
[09/26 12:22:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:22:41]  --------------------------------------------------------------------------------
[09/26 12:22:41]  Iteration: 176 (67 solution, 108 counterexamples)
[09/26 12:22:49]  Generator returned sat in 4.313378 secs.
[09/26 12:22:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:22:49]  Verifer returned unsat in 0.414099 secs.
[09/26 12:22:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:22:49]  --------------------------------------------------------------------------------
[09/26 12:22:49]  Iteration: 177 (68 solution, 108 counterexamples)
[09/26 12:22:57]  Generator returned sat in 3.990761 secs.
[09/26 12:22:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:22:57]  Verifer returned unsat in 0.288170 secs.
[09/26 12:22:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:22:57]  --------------------------------------------------------------------------------
[09/26 12:22:57]  Iteration: 178 (69 solution, 108 counterexamples)
[09/26 12:23:05]  Generator returned sat in 4.077415 secs.
[09/26 12:23:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:05]  Verifer returned unsat in 0.239918 secs.
[09/26 12:23:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:05]  --------------------------------------------------------------------------------
[09/26 12:23:05]  Iteration: 179 (70 solution, 108 counterexamples)
[09/26 12:23:13]  Generator returned sat in 4.053837 secs.
[09/26 12:23:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:13]  Verifer returned unsat in 0.189003 secs.
[09/26 12:23:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:13]  --------------------------------------------------------------------------------
[09/26 12:23:13]  Iteration: 180 (71 solution, 108 counterexamples)
[09/26 12:23:21]  Generator returned sat in 4.054320 secs.
[09/26 12:23:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:21]  Verifer returned unsat in 0.199748 secs.
[09/26 12:23:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:21]  --------------------------------------------------------------------------------
[09/26 12:23:21]  Iteration: 181 (72 solution, 108 counterexamples)
[09/26 12:23:29]  Generator returned sat in 4.236793 secs.
[09/26 12:23:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:29]  Verifer returned unsat in 0.259999 secs.
[09/26 12:23:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:29]  --------------------------------------------------------------------------------
[09/26 12:23:29]  Iteration: 182 (73 solution, 108 counterexamples)
[09/26 12:23:37]  Generator returned sat in 3.988251 secs.
[09/26 12:23:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:37]  Verifer returned unsat in 0.280640 secs.
[09/26 12:23:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:23:37]  --------------------------------------------------------------------------------
[09/26 12:23:37]  Iteration: 183 (74 solution, 108 counterexamples)
[09/26 12:24:17]  Generator returned sat in 36.135168 secs.
[09/26 12:24:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:17]  Verifer returned unsat in 0.157445 secs.
[09/26 12:24:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:18]  --------------------------------------------------------------------------------
[09/26 12:24:18]  Iteration: 184 (75 solution, 108 counterexamples)
[09/26 12:24:25]  Generator returned sat in 4.010822 secs.
[09/26 12:24:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:25]  Verifer returned unsat in 0.177864 secs.
[09/26 12:24:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:25]  --------------------------------------------------------------------------------
[09/26 12:24:25]  Iteration: 185 (76 solution, 108 counterexamples)
[09/26 12:24:33]  Generator returned sat in 3.740634 secs.
[09/26 12:24:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:33]  Verifer returned unsat in 0.167757 secs.
[09/26 12:24:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:33]  --------------------------------------------------------------------------------
[09/26 12:24:33]  Iteration: 186 (77 solution, 108 counterexamples)
[09/26 12:24:41]  Generator returned sat in 4.104858 secs.
[09/26 12:24:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:41]  Verifer returned unsat in 0.174167 secs.
[09/26 12:24:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:24:41]  --------------------------------------------------------------------------------
[09/26 12:24:41]  Iteration: 187 (78 solution, 108 counterexamples)
[09/26 12:25:00]  Generator returned sat in 15.293550 secs.
[09/26 12:25:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:01]  Verifer returned unsat in 0.451027 secs.
[09/26 12:25:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:01]  --------------------------------------------------------------------------------
[09/26 12:25:01]  Iteration: 188 (79 solution, 108 counterexamples)
[09/26 12:25:09]  Generator returned sat in 5.412944 secs.
[09/26 12:25:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:10]  Verifer returned unsat in 0.211421 secs.
[09/26 12:25:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:10]  --------------------------------------------------------------------------------
[09/26 12:25:10]  Iteration: 189 (80 solution, 108 counterexamples)
[09/26 12:25:18]  Generator returned sat in 4.640370 secs.
[09/26 12:25:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:18]  Verifer returned unsat in 0.225515 secs.
[09/26 12:25:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:18]  --------------------------------------------------------------------------------
[09/26 12:25:18]  Iteration: 190 (81 solution, 108 counterexamples)
[09/26 12:25:33]  Generator returned sat in 11.152535 secs.
[09/26 12:25:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:34]  Verifer returned unsat in 0.301638 secs.
[09/26 12:25:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:34]  --------------------------------------------------------------------------------
[09/26 12:25:34]  Iteration: 191 (82 solution, 108 counterexamples)
[09/26 12:25:50]  Generator returned sat in 13.165537 secs.
[09/26 12:25:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:51]  Verifer returned unsat in 0.250361 secs.
[09/26 12:25:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:25:51]  --------------------------------------------------------------------------------
[09/26 12:25:51]  Iteration: 192 (83 solution, 108 counterexamples)
[09/26 12:26:03]  Generator returned sat in 9.103604 secs.
[09/26 12:26:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:26:04]  Verifer returned unsat in 0.167317 secs.
[09/26 12:26:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:26:04]  --------------------------------------------------------------------------------
[09/26 12:26:04]  Iteration: 193 (84 solution, 108 counterexamples)
[09/26 12:26:24]  Generator returned sat in 16.325280 secs.
[09/26 12:26:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:26:25]  Improved gap from 0.0 to 1.5625
[09/26 12:26:25]  Improved number of small numbers from 44 to 114 out of a max of 114
[09/26 12:26:25]  Verifer returned sat in 1.430094 secs.
[09/26 12:26:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12805.207520  -12905.148193  8301.497803 -12805.207520  300.177490 -12905.148193   0.000000   99.940674       99.940674       7.0        -12905.148193                -1.0            -1
1  -12605.030029  -12805.148193  8301.497803 -12605.030029  300.118164 -12805.148193   0.118164  200.000000      200.000000       1.0        -12605.148193                 1.0         False
2  -12504.970703  -12705.148438  8301.497803 -12504.970703  300.059326 -12705.148438   0.177490  200.000244      200.000000       2.0        -12505.148193                 0.0         False
3  -12504.970703  -12631.620361  8301.497803 -12504.970703    2.375000 -12631.620361   0.177490  126.472168      100.000000       3.0        -12505.148193                 0.0         False
4  -12504.970703  -12605.148193  8301.497803 -12504.970703    3.562500 -12605.148193   0.177490  100.000000        0.000000       4.0        -12505.148193                 0.0         False
5  -12504.970703  -12505.148193  8399.935303 -12504.970703    2.562500 -12505.148193   0.177490    0.000000       -1.562500       4.0        -12505.148193                 1.0         False
6  -12503.408203  -12503.585693  8497.591553 -12503.408203    1.562500 -12503.585693   0.177490    0.000000       -2.343750       1.0        -12503.585693                 1.0         False
7  -12501.064453  -12501.241943  8596.029053 -12501.064453    2.343750 -12501.241943   0.177490    0.000000       -1.562500       1.0        -12503.585693                 0.0         False
8  -12497.548828  -12499.679443  8596.029053 -12497.548828    3.515625 -12499.679443   0.177490    1.953125      -98.046875       1.0        -12503.585693                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:26:26]  --------------------------------------------------------------------------------
[09/26 12:26:26]  Iteration: 194 (84 solution, 109 counterexamples)
[09/26 12:26:47]  Generator returned sat in 17.282136 secs.
[09/26 12:26:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:26:48]  Improved number of small numbers from 48 to 62 out of a max of 113
[09/26 12:26:48]  Verifer returned sat in 1.206956 secs.
[09/26 12:26:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12905.385010  -13105.503418  8501.734497 -12905.385010    0.118408 -13105.503418    0.000000  200.118408      199.999878       2.0        -13105.503418                -1.0            -1
1  -12905.385010  -13105.384766  8501.734497 -12905.385010    0.118408 -13105.384766    0.000000  199.999756       99.999878       2.0        -13105.503418                 0.0         False
2  -12905.385010  -13005.384888  8501.734497 -12905.385010  169.585938 -13005.384888    0.000000   99.999878       -0.000122       3.0        -13105.503418                 0.0         False
3  -12835.798723  -12859.882421  8501.734497 -12835.798723  169.586165 -12859.882421    0.000000   24.083698      -30.413835       1.0        -13105.503418                 1.0          True
4  -12605.503174  -12805.384888  8501.734497 -12605.503174  254.379247 -12805.384888    0.000000  199.881714       99.881714       1.0        -13105.503418                 0.0         False
5  -12423.816017  -12605.384888  8501.734497 -12423.816017  381.568871 -12605.384888    0.000000  181.568871      181.568871       1.0        -13105.503418                 0.0         False
6  -12033.031581  -12505.384888  8501.734497 -12033.031581  572.353306 -12505.384888  272.353306  200.000000      200.000000       2.0        -13105.503418                 0.0         False
7  -11947.854928  -12405.384888  8501.734497 -11947.854928  285.176653 -12405.384888  272.353306  185.176653      185.176653       2.0        -12220.208235                 0.0         False
8  -11705.266602  -12405.266602  8501.734497 -11705.266602  427.764980 -12405.266602  400.118286  299.881714      200.000000       3.0        -12220.208235                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277769/8192, 
.[0m
[09/26 12:26:49]  --------------------------------------------------------------------------------
[09/26 12:26:49]  Iteration: 195 (84 solution, 110 counterexamples)
[09/26 12:27:08]  Generator returned sat in 15.676084 secs.
[09/26 12:27:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:27:08]  Improved gap from 0.0 to 9.375
[09/26 12:27:09]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/26 12:27:09]  Verifer returned sat in 0.441468 secs.
[09/26 12:27:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12884.729004  -13184.610840  8601.852539 -12884.729004  400.000000 -13184.610840   0.000000  299.881836      199.882080       3.0        -13184.610840                -1.0            -1
1  -12784.729004  -12984.611084  8601.852539 -12784.729004  399.881836 -12984.611084   0.000000  199.882080      199.882080       3.0        -12784.729004                 1.0         False
2  -12684.492920  -12884.611084  8601.852539 -12684.492920  300.118164 -12884.611084   0.118164  200.000000      200.000000       2.0        -12684.611084                 1.0         False
3  -12684.492920  -12784.611084  8601.852539 -12684.492920   13.753418 -12784.611084   0.118164  100.000000      100.000000       2.0        -12684.611084                 1.0         False
4  -12684.492920  -12784.492676  8601.852539 -12684.492920   12.753418 -12784.492676   0.118164   99.881592        0.000000       3.0        -12684.611084                 1.0         False
5  -12684.492920  -12684.611084  8692.477295 -12684.492920   11.753418 -12684.611084   0.118164    0.000000       -9.375244       4.0        -12684.611084                 1.0         False
6  -12673.739502  -12673.857666  8781.724121 -12673.739502   10.753418 -12673.857666   0.118164    0.000000       -9.375000       1.0        -12673.857666                 1.0         False
7  -12661.986084  -12662.104248  8869.970459 -12661.986084   11.753418 -12662.104248   0.118164    0.000000       -9.375244       1.0        -12673.857666                 0.0         False
8  -12649.232666  -12652.729004  8869.970459 -12649.232666   12.753418 -12652.729004   0.118164    3.378174      -96.621826       1.0        -12673.857666                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:27:09]  --------------------------------------------------------------------------------
[09/26 12:27:09]  Iteration: 196 (84 solution, 111 counterexamples)
[09/26 12:27:58]  Generator returned sat in 45.781997 secs.
[09/26 12:27:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:27:59]  Verifer returned unsat in 0.227936 secs.
[09/26 12:27:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:27:59]  --------------------------------------------------------------------------------
[09/26 12:27:59]  Iteration: 197 (85 solution, 111 counterexamples)
[09/26 12:28:07]  Generator returned sat in 4.591509 secs.
[09/26 12:28:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:28:08]  Verifer returned unsat in 0.204699 secs.
[09/26 12:28:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:28:08]  --------------------------------------------------------------------------------
[09/26 12:28:08]  Iteration: 198 (86 solution, 111 counterexamples)
[09/26 12:28:23]  Generator returned sat in 12.310420 secs.
[09/26 12:28:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:28:24]  Improved gap from 0.0 to 4.6875
[09/26 12:28:24]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/26 12:28:24]  Verifer returned sat in 0.813902 secs.
[09/26 12:28:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12233.402588  -12432.930176  9142.996338 -12233.402588  199.763428 -12432.930176        0.0  199.527588      199.527588       1.0        -12432.930176                -1.0            -1
1  -12233.166504  -12377.929932  9142.996338 -12233.166504  199.763672 -12377.929932        0.0  144.763428       99.763672       2.0        -12432.930176                 0.0         False
2  -12178.166260  -12232.930176  9142.996338 -12178.166260  199.763672 -12232.930176        0.0   54.763916       54.763916       1.0        -12432.930176                 1.0          True
3  -12144.930176  -12177.930176  9142.996338 -12144.930176   88.000000 -12177.930176        0.0   33.000000      -12.000000       1.0        -12144.930176                 0.0         False
4  -12132.930176  -12132.930176  9238.308594 -12132.930176   45.000000 -12132.930176        0.0    0.000000       -4.687744       1.0        -12132.930176                 0.0         False
5  -12109.430176  -12109.430176  9314.808838 -12109.430176   23.500000 -12109.430176        0.0    0.000000       -4.687500       1.0        -12109.430176                 0.0         False
6  -12096.680176  -12096.680176  9402.058594 -12096.680176   12.750000 -12096.680176        0.0    0.000000       -4.687744       1.0        -12096.680176                 0.0         False
7  -12089.305176  -12089.305176  9494.683838 -12089.305176    7.375000 -12089.305176        0.0    0.000000       -4.687500       1.0        -12089.305176                 0.0         False
8  -12084.617676  -12084.617676  9589.996094 -12084.617676    4.687500 -12084.617676        0.0    0.000000       -4.687744       1.0        -12084.617676                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:28:25]  --------------------------------------------------------------------------------
[09/26 12:28:25]  Iteration: 199 (86 solution, 112 counterexamples)
[09/26 12:28:52]  Generator returned sat in 23.309279 secs.
[09/26 12:28:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:28:53]  Improved number of small numbers from 59 to 113 out of a max of 113
[09/26 12:28:53]  Verifer returned sat in 0.635232 secs.
[09/26 12:28:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13084.468018  -13084.495850  9694.562012 -13084.468018    0.027832 -13084.495850    0.000000    0.027832      -99.972168       6.0        -13084.495850                -1.0            -1
1  -12684.495850  -12984.356934  9694.562012 -12684.495850  400.000000 -12984.356934    0.000000  299.861084      200.000000       1.0        -13084.495850                 1.0         False
2  -12684.468262  -12884.495850  9694.562012 -12684.468262  299.888672 -12884.495850    0.000000  200.027588      100.027588       2.0        -12684.468262                 0.0         False
3  -12485.468018  -12684.495850  9694.562012 -12485.468018  399.027832 -12684.495850    0.000000  199.027832      199.027832       3.0        -12684.468262                 0.0         False
4  -12485.468018  -12684.190430  9694.562012 -12485.468018  199.000000 -12684.190430    0.000000  198.722412       99.027832       2.0        -12485.468018                 1.0         False
5  -12284.523926  -12484.495850  9694.562012 -12284.523926  399.666504 -12484.495850    0.000000  199.971924      199.971924       1.0        -12485.468018                 0.0         False
6  -11884.662598  -12484.495850  9694.562012 -11884.662598  599.833252 -12484.495850  299.833252  300.000000      200.000000       1.0        -12485.468018                 0.0         False
7  -11884.662598  -12284.495850  9694.562012 -11884.662598    1.000000 -12284.495850  299.833252  100.000000      100.000000       2.0        -12184.495850                 0.0         False
8  -11584.468018  -12284.495850  9694.562012 -11584.468018  400.194580 -12284.495850  400.027832  300.000000      200.000000       2.0        -12184.495850                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819257/2048, 
.[0m
[09/26 12:28:53]  --------------------------------------------------------------------------------
[09/26 12:28:53]  Iteration: 200 (86 solution, 113 counterexamples)
[09/26 12:29:15]  Generator returned sat in 18.412808 secs.
[09/26 12:29:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:29:17]  Improved number of small numbers from 65 to 67 out of a max of 113
[09/26 12:29:17]  Verifer returned sat in 1.081381 secs.
[09/26 12:29:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12684.496094  -12684.497100  9394.563262 -12684.496094    0.001221 -12684.497100    0.000000    0.001006        0.001006       2.0          -12684.4971                -1.0            -1
1  -12484.404183  -12684.494600  9394.563262 -12484.404183  200.092917 -12684.494600    0.000000  200.090417      100.092917       1.0          -12684.4971                 0.0         False
2  -12484.401683  -12484.497100  9394.563262 -12484.401683  200.092917 -12484.497100    0.000000    0.095417        0.095417       2.0          -12684.4971                 0.0         False
3  -12284.594600  -12484.400433  9394.563262 -12284.594600  199.902500 -12484.400433    0.000000  199.805833       99.902500       1.0          -12284.5946                 0.0         False
4  -12084.498350  -12284.594600  9394.563262 -12084.498350  399.902083 -12284.594600    0.000000  200.096250      199.998750       2.0          -12284.5946                 0.0         False
5  -11484.791475  -12184.497314  9394.563262 -11484.791475  799.803125 -12184.497314  499.705625  200.000215      200.000000       2.0          -12284.5946                 0.0         False
6  -11484.791475  -12084.497100  9394.563262 -11484.791475    0.010000 -12084.497100  499.705625  100.000000      100.000000       2.0          -11984.4971                 0.0         False
7  -11384.824808  -12084.497100  9394.563262 -11384.824808  199.966667 -12084.497100  499.705625  199.966667       99.966667       2.0          -11984.4971                 0.0         False
8  -11184.792725  -11984.495850  9394.563262 -11184.792725  399.998750 -11984.495850  499.705625  299.997500      199.998750       2.0          -11984.4971                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=799529/1600, 
.[0m
[09/26 12:29:17]  --------------------------------------------------------------------------------
[09/26 12:29:17]  Iteration: 201 (86 solution, 114 counterexamples)
[09/26 12:29:54]  Generator returned sat in 32.585676 secs.
[09/26 12:29:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:29:54]  Improved gap from 0.0 to 100
[09/26 12:29:55]  Improved number of small numbers from 64 to 80 out of a max of 114
[09/26 12:29:55]  Verifer returned sat in 1.123953 secs.
[09/26 12:29:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12584.741943  -12684.494629  9295.060449 -12584.741943    0.002686 -12684.494629     0.0000   99.752686        0.252344       1.0        -12684.494629                -1.0            -1
1  -12584.741943  -12584.741943  9295.060449 -12584.741943   99.750000 -12584.741943     0.0000    0.000000      -99.747656       2.0        -12684.494629                 0.0         False
2  -12484.994141  -12484.994287  9295.060449 -12484.994141   99.747803 -12484.994287     0.0000    0.000146      -99.999854       1.0        -12484.994141                 1.0          True
3  -12085.994912  -12384.994141  9295.060449 -12085.994912  398.999375 -12384.994141     0.0000  298.999229      198.999375       1.0        -12484.994141                 0.0         False
4  -12085.994912  -12284.994287  9295.060449 -12085.994912  198.499687 -12284.994287     0.0000  198.999375       98.999375       2.0        -12085.994912                 0.0         False
5  -11884.996787  -12085.994912  9295.060449 -11884.996787  399.997500 -12085.994912     0.0000  200.998125      199.997500       3.0        -12085.994912                 1.0         False
6  -11485.996787  -11984.994385  9295.060449 -11485.996787  599.998125 -11984.994385   298.9975  200.000098      200.000000       2.0        -12085.994912                 1.0         False
7  -11485.996787  -11884.994287  9295.060449 -11485.996787    0.010000 -11884.994287   298.9975  100.000000      100.000000       2.0        -11784.994287                 1.0          True
8  -11184.991787  -11884.991699  9295.060449 -11184.991787  401.005000 -11884.991699   400.0025  299.997412      200.000000       3.0        -11784.994287                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[09/26 12:29:56]  --------------------------------------------------------------------------------
[09/26 12:29:56]  Iteration: 202 (86 solution, 115 counterexamples)
[09/26 12:30:40]  Generator returned sat in 40.350870 secs.
[09/26 12:30:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:30:40]  Verifer returned unsat in 0.318279 secs.
[09/26 12:30:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:30:40]  --------------------------------------------------------------------------------
[09/26 12:30:40]  Iteration: 203 (87 solution, 115 counterexamples)
[09/26 12:30:49]  Generator returned sat in 4.871088 secs.
[09/26 12:30:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:30:49]  Verifer returned unsat in 0.198551 secs.
[09/26 12:30:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:30:49]  --------------------------------------------------------------------------------
[09/26 12:30:49]  Iteration: 204 (88 solution, 115 counterexamples)
[09/26 12:30:58]  Generator returned sat in 4.807251 secs.
[09/26 12:30:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:30:58]  Verifer returned unsat in 0.243399 secs.
[09/26 12:30:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:30:58]  --------------------------------------------------------------------------------
[09/26 12:30:58]  Iteration: 205 (89 solution, 115 counterexamples)
[09/26 12:31:07]  Generator returned sat in 4.618493 secs.
[09/26 12:31:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:31:07]  Verifer returned unsat in 0.223717 secs.
[09/26 12:31:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:31:07]  --------------------------------------------------------------------------------
[09/26 12:31:07]  Iteration: 206 (90 solution, 115 counterexamples)
[09/26 12:31:15]  Generator returned sat in 4.488916 secs.
[09/26 12:31:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:31:16]  Improved gap from 0.0 to 0
[09/26 12:31:17]  Improved number of small numbers from 50 to 54 out of a max of 114
[09/26 12:31:17]  Verifer returned sat in 1.451610 secs.
[09/26 12:31:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13325.534072  -13625.534072  9413.178125 -13325.534072    0.117676 -13625.534072    0.000000  300.000000      200.000000       7.0        -13625.534072                -1.0            -1
1  -13325.534072  -13525.534072  9413.178125 -13325.534072  199.882080 -13525.534072    0.000000  200.000000      100.000000       7.0        -13625.534072                 0.0         False
2  -13325.534072  -13371.886963  9413.178125 -13325.534072  199.882080 -13371.886963    0.000000   46.352891        0.000000       8.0        -13625.534072                 0.0         False
3  -13325.534072  -13325.534072  9513.178125 -13325.534072   46.235297 -13325.534072    0.000000    0.000000        0.000000       9.0        -13325.534072                 0.0         False
4  -13107.181126  -13325.534072  9513.178125 -13107.181126  218.352946 -13325.534072    0.000000  218.352946      118.352946       9.0        -13325.534072                 1.0         False
5  -12899.004653  -13125.534072  9513.178125 -12899.004653  426.529419 -13125.534072   26.529419  200.000000      200.000000       2.0        -13325.534072                 1.0         False
6  -12673.475234  -13025.534072  9513.178125 -12673.475234  425.529419 -13025.534072  152.058838  200.000000      200.000000       2.0        -12825.534072                 0.0         False
7  -12448.945815  -12925.534072  9513.178125 -12448.945815  424.529419 -12925.534072  276.588257  200.000000      200.000000       3.0        -12725.534072                 0.0         False
8  -12225.416396  -12925.416504  9513.178125 -12225.416396  423.529419 -12925.416504  400.117676  299.882432      200.000000       3.0        -12625.534072                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=False, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=4, loss_amount=819441/2048, 
.[0m
[09/26 12:31:18]  --------------------------------------------------------------------------------
[09/26 12:31:18]  Iteration: 207 (90 solution, 116 counterexamples)
[09/26 12:32:03]  Generator returned sat in 41.665697 secs.
[09/26 12:32:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:32:04]  Improved gap from 0.0 to 7.8125
[09/26 12:32:04]  Improved number of small numbers from 32 to 114 out of a max of 114
[09/26 12:32:04]  Verifer returned sat in 0.990660 secs.
[09/26 12:32:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -13614.494385  -13614.494385  9013.992432 -13614.494385  307.930176 -13614.494385   0.000000    0.000000        0.000000       5.0        -13614.494385                -1.0            -1
1  -13306.564209  -13522.306885  9013.992432 -13306.564209  307.930176 -13522.306885   7.930176  207.812500      200.000000       1.0        -13614.494385                 1.0         False
2  -13206.564209  -13414.494629  9013.992432 -13206.564209  307.812500 -13414.494629   7.930176  200.000244      200.000000       2.0        -13214.494385                 0.0         False
3  -13206.564209  -13314.494629  9013.992432 -13206.564209   76.500000 -13314.494629   7.930176  100.000244      100.000000       3.0        -13214.494385                 1.0         False
4  -13206.564209  -13232.236816  9013.992432 -13206.564209   37.250000 -13232.236816   7.930176   17.742432        0.000000       3.0        -13214.494385                 1.0         False
5  -13206.564209  -13214.494385  9106.179932 -13206.564209   17.625000 -13214.494385   7.930176    0.000000       -7.812500       4.0        -13214.494385                 1.0         False
6  -13198.751709  -13206.681885  9194.461426 -13198.751709    7.812500 -13206.681885   7.930176    0.000000      -11.718506       1.0        -13206.681885                 1.0         False
7  -13187.032959  -13194.963135  9286.648682 -13187.032959   11.718750 -13194.963135   7.930176    0.000000       -7.812500       1.0        -13206.681885                 0.0         False
8  -13169.454834  -13187.150635  9286.648682 -13169.454834   17.578125 -13187.150635   7.930176    9.765625      -90.234375       1.0        -13206.681885                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=True, ramp_down_queue=True, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:32:05]  --------------------------------------------------------------------------------
[09/26 12:32:05]  Iteration: 208 (90 solution, 117 counterexamples)
[09/26 12:33:02]  Generator returned sat in 53.731375 secs.
[09/26 12:33:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:33:04]  Improved gap from 0.0 to 0
[09/26 12:33:05]  Improved number of small numbers from 61 to 67 out of a max of 114
[09/26 12:33:05]  Verifer returned sat in 2.398099 secs.
[09/26 12:33:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -12158.705146  -12158.707646  8608.798096 -12158.705146  0.001221 -12158.707646        0.0   0.0025        0.000176       3.0        -12158.707646                -1.0            -1
1  -12158.705146  -12158.705146  8708.797852 -12158.705146  0.001465 -12158.705146        0.0   0.0000       -0.000068       2.0        -12158.707646                 0.0         False
2  -12157.768480  -12157.768480  8806.926025 -12157.768480  0.936667 -12157.768480        0.0   0.0000       -0.935228       1.0        -12158.707646                 0.0         False
3  -12156.833063  -12156.833063  8906.520996 -12156.833063  0.935417 -12156.833063        0.0   0.0000       -0.404840       1.0        -12156.833063                 0.0         False
4  -12156.428063  -12156.428063  9006.179932 -12156.428063  0.405000 -12156.428063        0.0   0.0000       -0.340905       1.0        -12156.428063                 0.0         False
5  -12156.087021  -12156.087021  9106.179688 -12156.087021  0.341042 -12156.087021        0.0   0.0000       -0.000107       1.0        -12156.087021                 0.0         False
6  -12156.075771  -12156.075771  9206.168457 -12156.075771  0.011250 -12156.075771        0.0   0.0000       -0.000088       1.0        -12156.075771                 0.0         False
7  -12156.065771  -12156.065771  9306.148682 -12156.065771  0.010000 -12156.065771        0.0   0.0000       -0.009863       1.0        -12156.065771                 0.0         False
8  -12156.055771  -12156.055771  9306.148682 -12156.055771  0.010000 -12156.055771        0.0   0.0000      -99.999863       1.0        -12156.065771                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=True, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:33:06]  --------------------------------------------------------------------------------
[09/26 12:33:06]  Iteration: 209 (90 solution, 118 counterexamples)
[09/26 12:33:46]  Generator returned sat in 36.538588 secs.
[09/26 12:33:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:33:46]  Verifer returned unsat in 0.233540 secs.
[09/26 12:33:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:33:46]  --------------------------------------------------------------------------------
[09/26 12:33:46]  Iteration: 210 (91 solution, 118 counterexamples)
[09/26 12:33:59]  Generator returned sat in 9.057703 secs.
[09/26 12:33:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:00]  Verifer returned unsat in 0.695218 secs.
[09/26 12:34:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:00]  --------------------------------------------------------------------------------
[09/26 12:34:00]  Iteration: 211 (92 solution, 118 counterexamples)
[09/26 12:34:10]  Generator returned sat in 6.020355 secs.
[09/26 12:34:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:11]  Verifer returned unsat in 0.552019 secs.
[09/26 12:34:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:11]  --------------------------------------------------------------------------------
[09/26 12:34:11]  Iteration: 212 (93 solution, 118 counterexamples)
[09/26 12:34:21]  Generator returned sat in 6.968828 secs.
[09/26 12:34:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:22]  Verifer returned unsat in 0.598059 secs.
[09/26 12:34:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:22]  --------------------------------------------------------------------------------
[09/26 12:34:22]  Iteration: 213 (94 solution, 118 counterexamples)
[09/26 12:34:36]  Generator returned sat in 9.717250 secs.
[09/26 12:34:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:34:37]  Improved gap from 0.0 to 0
[09/26 12:34:37]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/26 12:34:37]  Verifer returned sat in 1.006687 secs.
[09/26 12:34:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10760.638916  -10960.404053  7310.497070 -10760.638916    0.117188 -10960.404053        0.0  199.765137       99.765381       1.0        -10960.404053                -1.0            -1
1  -10760.638916  -10760.639160  7310.497070 -10760.638916  199.647461 -10760.639160        0.0    0.000244       -0.234619       2.0        -10960.404053                 0.0         False
2  -10561.108887  -10759.404297  7310.497070 -10561.108887  199.530273 -10759.404297        0.0  198.295410       99.295410       1.0        -10561.108887                 1.0          True
3  -10559.874023  -10560.991211  7310.497070 -10559.874023  199.530273 -10560.991211        0.0    1.117188        0.530273       1.0        -10561.108887                 0.0         False
4  -10559.874023  -10559.874023  7409.966553 -10559.874023    1.000000 -10559.874023        0.0    0.000000       -0.000244       2.0        -10559.874023                 0.0         False
5  -10459.991455  -10460.873779  7409.966553 -10459.991455   99.882568 -10460.873779        0.0    0.882324       -0.117676       1.0        -10559.874023                 1.0         False
6  -10459.873779  -10459.873779  7508.966797 -10459.873779    1.000000 -10459.873779        0.0    0.000000       -0.999756       1.0        -10459.873779                 0.0         False
7  -10458.873779  -10458.873779  7607.966553 -10458.873779    1.000000 -10458.873779        0.0    0.000000       -1.000000       1.0        -10459.873779                 0.0         False
8  -10457.873779  -10457.873779  7607.966797 -10457.873779    1.000000 -10457.873779        0.0    0.000000      -99.999756       1.0        -10459.873779                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:34:38]  --------------------------------------------------------------------------------
[09/26 12:34:38]  Iteration: 214 (94 solution, 119 counterexamples)
[09/26 12:35:14]  Generator returned sat in 33.174098 secs.
[09/26 12:35:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:35:16]  Improved number of small numbers from 31 to 50 out of a max of 113
[09/26 12:35:16]  Verifer returned sat in 1.345319 secs.
[09/26 12:35:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10660.577881  -10859.815186  7211.142639 -10660.577881    0.117188 -10859.815186    0.000000  199.237305      100.471985       2.0        -10859.815186                -1.0            -1
1  -10660.577881  -10727.638326  7211.142639 -10660.577881    0.117188 -10727.638326    0.000000   67.060445        0.471985       2.0        -10859.815186                 0.0         False
2  -10328.227743  -10660.460449  7211.142639 -10328.227743  399.410583 -10660.460449   32.822123  299.410583      200.000000       1.0        -10859.815186                 0.0         False
3  -10228.345052  -10561.049805  7211.142639 -10228.345052  399.293274 -10561.049805   32.822123  299.882629      199.882690       2.0        -10261.167175                 0.0         False
4  -10228.345052  -10461.049866  7211.142639 -10228.345052  299.765381 -10461.049866   32.822123  199.882690       99.882690       3.0        -10261.167175                 0.0         False
5  -10028.345052  -10261.049866  7211.142639 -10028.345052  399.882690 -10261.049866   32.822123  199.882690      199.882690       1.0        -10261.167175                 1.0         False
6   -9827.817159  -10260.932617  7211.142639  -9827.817159  400.410583 -10260.932617  133.232707  299.882751      200.000000       2.0        -10261.167175                 0.0         False
7   -9827.817159  -10061.167175  7211.142639  -9827.817159  199.205292 -10061.167175  133.232707  100.117310      100.000000       3.0         -9961.049866                 0.0         False
8   -9328.110433  -10061.049805  7211.142639  -9328.110433  599.824036 -10061.049805  432.939433  299.999939      200.000000       3.0         -9961.049866                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277761/8192, 
.[0m
[09/26 12:35:17]  --------------------------------------------------------------------------------
[09/26 12:35:17]  Iteration: 215 (94 solution, 120 counterexamples)
[09/26 12:35:49]  Generator returned sat in 28.463448 secs.
[09/26 12:35:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:35:50]  Improved gap from 98.90104166666667 to 100
[09/26 12:35:50]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/26 12:35:50]  Verifer returned sat in 1.011050 secs.
[09/26 12:35:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10926.807129  -11026.777832  7211.142822 -10926.807129    0.029053 -11026.777832    0.000000   99.970703       -0.029297       2.0        -11026.777832                -1.0            -1
1  -10626.719238  -10926.777832  7211.142822 -10626.719238  400.058594 -10926.777832    0.058594  300.000000      200.000000       1.0        -11026.777832                 0.0         False
2  -10526.689941  -10817.041748  7211.142822 -10526.689941  400.029297 -10817.041748    0.087891  290.263916      200.000000       2.0        -10526.777832                 0.0         False
3  -10426.660889  -10630.631348  7211.142822 -10426.660889  390.292969 -10630.631348    0.116943  203.853516      200.000000       3.0        -10426.777832                 0.0         False
4  -10426.660889  -10626.777832  7211.142822 -10426.660889  198.073242 -10626.777832    0.116943  200.000000      100.000000       4.0        -10426.777832                 0.0         False
5  -10127.587646  -10426.807373  7211.142822 -10127.587646  499.073242 -10426.807373   99.190186  200.029541      200.000000       3.0        -10426.777832                 1.0         False
6  -10127.587646  -10426.777832  7211.142822 -10127.587646  195.117188 -10426.777832   99.190186  200.000000      100.000000       4.0        -10226.777832                 0.0         False
7   -9927.616943  -10226.777832  7211.142822  -9927.616943  399.970703 -10226.777832   99.190186  199.970703      199.970703       3.0        -10226.777832                 1.0         False
8   -9526.631592  -10226.777832  7211.142822  -9526.631592  600.956055 -10226.777832  400.146240  300.000000      200.000000       3.0        -10226.777832                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=204815/512, 
.[0m
[09/26 12:35:51]  --------------------------------------------------------------------------------
[09/26 12:35:51]  Iteration: 216 (94 solution, 121 counterexamples)
[09/26 12:36:35]  Generator returned sat in 40.031882 secs.
[09/26 12:36:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:36:35]  Verifer returned unsat in 0.133462 secs.
[09/26 12:36:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:36:35]  --------------------------------------------------------------------------------
[09/26 12:36:35]  Iteration: 217 (95 solution, 121 counterexamples)
[09/26 12:37:48]  Generator returned sat in 68.678964 secs.
[09/26 12:37:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:37:49]  Improved number of small numbers from 97 to 97 out of a max of 113
[09/26 12:37:49]  Verifer returned sat in 0.872919 secs.
[09/26 12:37:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -11426.777832  -11626.777832  7211.142822 -11426.777832  300.002500 -11626.777832    0.000000  200.000000      200.000000       2.0        -11626.777832                -1.0            -1
1  -11326.777832  -11619.771582  7211.142822 -11326.777832  300.000000 -11619.771582    0.000000  292.993750      200.000000       2.0        -11326.777832                 0.0         False
2  -11326.777832  -11426.780332  7211.142822 -11326.777832  199.333333 -11426.780332    0.000000  100.002500      100.000000       3.0        -11326.777832                 0.0         False
3  -11227.446999  -11426.777832  7211.142822 -11227.446999  199.333333 -11426.777832    0.000000  199.330833       99.330833       4.0        -11326.777832                 0.0         False
4  -11026.777832  -11326.777832  7211.142822 -11026.777832  400.000000 -11326.777832    0.000000  300.000000      200.000000       4.0        -11326.777832                 1.0         False
5  -10579.280957  -11126.777832  7211.142822 -10579.280957  747.496875 -11126.777832  347.496875  200.000000      200.000000       2.0        -11326.777832                 1.0         False
6  -10579.280957  -11026.780332  7211.142822 -10579.280957    0.010000 -11026.780332  347.496875  100.002500      100.000000       3.0        -10926.777832                 0.0         False
7  -10478.279707  -11026.777832  7211.142822 -10478.279707  201.003750 -11026.777832  347.496875  201.001250      101.001250       4.0        -10926.777832                 0.0         False
8  -10226.775332  -10926.777832  7211.142822 -10226.775332  452.505625 -10926.777832  400.002500  300.000000      200.000000       4.0        -10926.777832                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=160001/400, 
.[0m
[09/26 12:37:49]  --------------------------------------------------------------------------------
[09/26 12:37:49]  Iteration: 218 (95 solution, 122 counterexamples)
[09/26 12:38:25]  Generator returned sat in 31.707516 secs.
[09/26 12:38:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:38:26]  Improved number of small numbers from 30 to 113 out of a max of 113
[09/26 12:38:26]  Verifer returned sat in 0.528415 secs.
[09/26 12:38:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -11026.590332  -11027.090576  6611.455322 -11026.590332  399.500000 -11027.090576    0.000000    0.500244        0.500244       2.0        -11027.090576                -1.0            -1
1  -10627.707520  -11026.473389  6611.455322 -10627.707520  399.383057 -11026.473389   99.383057  299.382812      200.000000       1.0        -10727.090576                 0.0         False
2  -10527.824463  -10927.090576  6611.455322 -10527.824463  399.265869 -10927.090576   99.383057  299.883057      199.883057       2.0        -10627.207520                 0.0         False
3  -10527.090332  -10727.590576  6611.455322 -10527.090332  300.617188 -10727.590576   99.383057  101.117188      100.617188       3.0        -10626.473389                 0.0         False
4  -10327.707520  -10727.090576  6611.455322 -10327.707520  300.500000 -10727.090576   99.383057  300.000000      200.000000       4.0        -10427.090576                 0.0         False
5  -10027.941895  -10626.356201  6611.455322 -10027.941895  599.765625 -10626.356201  299.148682  299.265625      200.000000       2.0        -10427.090576                 1.0         False
6  -10026.324707  -10527.090576  6611.455322 -10026.324707  300.882812 -10527.090576  299.148682  201.617188      101.617188       3.0        -10325.473389                 0.0         False
7  -10026.324707  -10427.090576  6611.455322 -10026.324707  201.500000 -10427.090576  299.148682  101.617188        1.617188       4.0        -10325.473389                 0.0         False
8   -9526.941895  -10327.090576  6611.455322  -9526.941895  601.000000 -10327.090576  500.148682  300.000000      200.000000       4.0        -10325.473389                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=25649/64, 
.[0m
[09/26 12:38:26]  --------------------------------------------------------------------------------
[09/26 12:38:26]  Iteration: 219 (95 solution, 123 counterexamples)
[09/26 12:39:52]  Generator returned sat in 81.341850 secs.
[09/26 12:39:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:39:53]  Improved number of small numbers from 30 to 40 out of a max of 113
[09/26 12:39:53]  Verifer returned sat in 1.188104 secs.
[09/26 12:39:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -11849.278564  -11849.395764  6611.455322 -11849.278564    0.117188 -11849.395764    0.000000    0.117199       -0.116932       2.0        -11849.395764                -1.0            -1
1  -11341.137947  -11849.161633  6611.455322 -11341.137947  508.257816 -11849.161633  208.023686  300.000000      200.000000       1.0        -11849.395764                 0.0         False
2  -11132.997196  -11749.161633  6611.455322 -11132.997196  508.140751 -11749.161633  316.164436  300.000000      200.000000       2.0        -11449.161633                 0.0         False
3  -10924.973511  -11649.161621  6611.455322 -10924.973511  508.023686 -11649.161621  424.188122  299.999988      200.000000       3.0        -11349.161633                 0.0         False
4  -10924.973511  -11530.796462  6611.455322 -10924.973511  255.011843 -11530.796462  424.188122  181.634830      100.000000       3.0        -11349.161633                 1.0         False
5  -10725.090576  -11349.161633  6611.455322 -10725.090576  381.517764 -11349.161633  424.188122  199.882935      199.882935       3.0        -11349.161633                 1.0         False
6  -10353.696865  -11335.916992  6611.455322 -10353.696865  571.276646 -11335.916992  695.464768  286.755359      200.000000       2.0        -11349.161633                 1.0         False
7  -10353.696865  -11149.278698  6611.455322 -10353.696865  286.638323 -11149.278698  695.464768  100.117065      100.000000       3.0        -11049.161633                 0.0         False
8  -10024.856445  -11149.161621  6611.455322 -10024.856445  428.957485 -11149.161621  824.305187  299.999988      200.000000       3.0        -11049.161633                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=3277759/8192, 
.[0m
[09/26 12:39:54]  --------------------------------------------------------------------------------
[09/26 12:39:54]  Iteration: 220 (95 solution, 124 counterexamples)
[09/26 12:40:26]  Generator returned sat in 27.797796 secs.
[09/26 12:40:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:40:26]  Verifer returned unsat in 0.200842 secs.
[09/26 12:40:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:40:26]  --------------------------------------------------------------------------------
[09/26 12:40:26]  Iteration: 221 (96 solution, 124 counterexamples)
[09/26 12:41:06]  Generator returned sat in 36.112198 secs.
[09/26 12:41:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:07]  Verifer returned unsat in 0.600109 secs.
[09/26 12:41:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:07]  --------------------------------------------------------------------------------
[09/26 12:41:07]  Iteration: 222 (97 solution, 124 counterexamples)
[09/26 12:41:16]  Generator returned sat in 5.197821 secs.
[09/26 12:41:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:17]  Verifer returned unsat in 0.294712 secs.
[09/26 12:41:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:17]  --------------------------------------------------------------------------------
[09/26 12:41:17]  Iteration: 223 (98 solution, 124 counterexamples)
[09/26 12:41:31]  Generator returned sat in 10.564893 secs.
[09/26 12:41:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:32]  Verifer returned unsat in 0.211388 secs.
[09/26 12:41:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:32]  --------------------------------------------------------------------------------
[09/26 12:41:32]  Iteration: 224 (99 solution, 124 counterexamples)
[09/26 12:41:41]  Generator returned sat in 5.633848 secs.
[09/26 12:41:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:41:42]  Improved number of small numbers from 67 to 69 out of a max of 113
[09/26 12:41:42]  Verifer returned sat in 0.875822 secs.
[09/26 12:41:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8203.773823   -8403.773823  6611.455322 -8203.773823    0.000625 -8403.773823    0.000000  200.000000           200.0       9.0         -8403.773823                -1.0            -1
1   -8103.772573   -8303.773823  6611.455322 -8103.772573  300.001250 -8303.773823    0.001250  200.000000           200.0       3.0         -8403.773823                 1.0         False
2   -8003.771948   -8303.773823  6611.455322 -8003.771948  300.000625 -8303.773823    0.001875  300.000000           200.0       3.0         -8003.773823                 0.0         False
3   -8003.771948   -8203.773823  6611.455322 -8003.771948  299.999375 -8203.773823    0.001875  200.000000           100.0       4.0         -8003.773823                 0.0         False
4   -7653.772261   -8103.773823  6611.455322 -7653.772261  549.999688 -8103.773823  150.001563  300.000000           200.0       4.0         -8003.773823                 1.0         False
5   -7653.772261   -8003.773823  6611.455322 -7653.772261    0.010000 -8003.773823  150.001563  200.000000           100.0       4.0         -7803.773823                 1.0         False
6   -7253.767261   -7903.773682  6611.455322 -7253.767261  600.005000 -7903.773682  350.006562  299.999858           200.0       3.0         -7803.773823                 1.0         False
7   -7253.767261   -7803.773823  6611.455322 -7253.767261    0.010000 -7803.773823  350.006562  200.000000           100.0       4.0         -7603.773823                 0.0         False
8   -6853.762261   -7703.773823  6611.455322 -6853.762261  600.005000 -7703.773823  550.011562  300.000000           200.0       3.0         -7603.773823                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=40001/100, 
.[0m
[09/26 12:41:43]  --------------------------------------------------------------------------------
[09/26 12:41:43]  Iteration: 225 (99 solution, 125 counterexamples)
[09/26 12:42:44]  Generator returned sat in 57.138477 secs.
[09/26 12:42:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:42:45]  Improved gap from 0.00125 to 100
[09/26 12:42:45]  Improved number of small numbers from 38 to 114 out of a max of 114
[09/26 12:42:45]  Verifer returned sat in 0.838205 secs.
[09/26 12:42:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8436.023926   -8436.140625  6611.570312 -8436.023926    0.116943 -8436.140625    0.000000    0.116699      -32.135010       9.0         -8436.140625                -1.0            -1
1   -8403.888916   -8403.888916  6611.570312 -8403.888916   32.251709 -8403.888916    0.000000    0.000000     -100.000000       1.0         -8436.140625                 1.0         False
2   -8003.771973   -8303.888916  6611.570312 -8003.771973  400.116943 -8303.888916    0.116943  300.000000      200.000000       1.0         -8436.140625                 0.0         False
3   -8003.771973   -8203.888916  6611.570312 -8003.771973  299.883301 -8203.888916    0.116943  200.000000      100.000000       2.0         -8003.888916                 0.0         False
4   -7822.578613   -8022.812256  6611.570312 -7822.578613  381.193359 -8022.812256    0.116943  200.116699      181.193359       3.0         -8003.888916                 0.0         False
5   -7451.905273   -7903.888916  6611.570312 -7451.905273  570.790039 -7903.888916  251.983643  200.000000      200.000000       2.0         -8003.888916                 1.0         False
6   -7451.905273   -7903.888916  6611.570312 -7451.905273    1.000000 -7903.888916  251.983643  200.000000      100.000000       2.0         -7703.888916                 0.0         False
7   -7352.405273   -7703.888916  6611.570312 -7352.405273  299.500000 -7703.888916  251.983643   99.500000       99.500000       3.0         -7703.888916                 0.0         False
8   -7003.655273   -7604.271973  6611.570312 -7003.655273  448.250000 -7604.271973  400.233643  200.383057      200.000000       1.0         -7703.888916                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819439/2048, 
.[0m
[09/26 12:42:46]  --------------------------------------------------------------------------------
[09/26 12:42:46]  Iteration: 226 (99 solution, 126 counterexamples)
[09/26 12:42:59]  Generator returned sat in 9.116326 secs.
[09/26 12:43:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[09/26 12:43:01]  Improved gap from 0.0 to 0
[09/26 12:43:01]  Improved number of small numbers from 72 to 84 out of a max of 114
[09/26 12:43:01]  Verifer returned sat in 1.769792 secs.
[09/26 12:43:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8003.783936   -8003.784424  6511.570312 -8003.783936  0.000732 -8003.784424        0.0  0.000488       -0.000732       2.0         -8003.784424                -1.0            -1
1   -8003.783203   -8003.783203  6611.570068 -8003.783203  0.001221 -8003.783203        0.0  0.000000       -0.000244       1.0         -8003.784424                 0.0         False
2   -8003.771973   -8003.771973  6711.548584 -8003.771973  0.011230 -8003.771973        0.0  0.000000       -0.010498       1.0         -8003.784424                 0.0         False
3   -8003.761348   -8003.761348  6811.538574 -8003.761348  0.010625 -8003.761348        0.0  0.000000       -0.009883       1.0         -8003.761348                 0.0         False
4   -8003.751348   -8003.751348  6911.538438 -8003.751348  0.010000 -8003.751348        0.0  0.000000       -0.000020       1.0         -8003.751348                 0.0         False
5   -8003.741348   -8003.741348  7011.528320 -8003.741348  0.010000 -8003.741348        0.0  0.000000       -0.000137       1.0         -8003.751348                 0.0         False
6   -8003.731348   -8003.731348  7111.508545 -8003.731348  0.010000 -8003.731348        0.0  0.000000       -0.009912       1.0         -8003.751348                 0.0         False
7   -8003.721348   -8003.721348  7211.498535 -8003.721348  0.010000 -8003.721348        0.0  0.000000       -0.009922       1.0         -8003.751348                 0.0         False
8   -8003.711348   -8003.711348  7211.498535 -8003.711348  0.010000 -8003.711348        0.0  0.000000      -99.999922       1.0         -8003.751348                 0.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=True, ramp_down_bq=True, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:43:02]  --------------------------------------------------------------------------------
[09/26 12:43:02]  Iteration: 227 (99 solution, 127 counterexamples)
[09/26 12:43:53]  Generator returned sat in 46.157210 secs.
[09/26 12:43:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:43:54]  Improved gap from 0.0 to 0
[09/26 12:43:54]  Improved number of small numbers from 60 to 114 out of a max of 114
[09/26 12:43:54]  Verifer returned sat in 0.869784 secs.
[09/26 12:43:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8204.776855   -8404.776855  6812.563965 -8204.776855  200.000000 -8404.776855        0.0  200.000000      100.000000       6.0         -8404.776855                -1.0            -1
1   -8204.776855   -8204.776855  6812.563965 -8204.776855  199.883057 -8204.776855        0.0    0.000000        0.000000       3.0         -8204.776855                 1.0         False
2   -8005.010254   -8104.776855  6812.563965 -8005.010254  199.766602 -8104.776855        0.0   99.766602       99.766602       1.0         -8005.010254                 1.0         False
3   -8004.776855   -8005.893555  6812.563965 -8004.776855  100.000000 -8005.893555        0.0    1.116699        0.000000       2.0         -8004.776855                 0.0         False
4   -8004.776855   -8004.776855  6911.563965 -8004.776855    1.000000 -8004.776855        0.0    0.000000       -1.000000       2.0         -8004.776855                 1.0         False
5   -8003.776855   -8003.776855  7009.064209 -8003.776855    1.000000 -8003.776855        0.0    0.000000       -2.499756       1.0         -8004.776855                 1.0         False
6   -7901.276855   -8001.277100  7009.064209 -7901.276855  102.500000 -8001.277100        0.0  100.000244        0.000244       1.0         -8004.776855                 0.0         False
7   -7901.276855   -7901.276855  7109.063965 -7901.276855   56.866455 -7901.276855        0.0    0.000000        0.000000       2.0         -7901.276855                 0.0         False
8   -7900.276855   -7900.276855  7207.063965 -7900.276855    1.000000 -7900.276855        0.0    0.000000       -1.000000       1.0         -7900.276855                 1.0         False
fefficient=False, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=True, ramp_up_cwnd=False, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=0, loss_amount=0, 
.[0m
[09/26 12:43:55]  --------------------------------------------------------------------------------
[09/26 12:43:55]  Iteration: 228 (99 solution, 128 counterexamples)
[09/26 12:44:13]  Generator returned sat in 13.942446 secs.
[09/26 12:44:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:44:14]  Improved number of small numbers from 99 to 105 out of a max of 113
[09/26 12:44:14]  Verifer returned sat in 0.541937 secs.
[09/26 12:44:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8204.893799   -8437.329508  6812.563965 -8204.893799    0.116455 -8437.329508    0.000000  232.435710      200.000000       7.0         -8437.329508                -1.0            -1
1   -8204.893799   -8337.095947  6812.563965 -8204.893799  232.319336 -8337.095947    0.000000  132.202148      100.000000       7.0         -8437.329508                 1.0         False
2   -8104.893555   -8204.893799  6812.563965 -8104.893555  232.202393 -8204.893799    0.000000  100.000244      100.000244       4.0         -8104.893555                 1.0          True
3   -7906.602051   -8172.407308  6812.563965 -7906.602051  298.291748 -8172.407308    0.000000  265.805257      198.291748       2.0         -8104.893555                 1.0         False
4   -7906.485107   -8104.893799  6812.563965 -7906.485107  265.922201 -8104.893799    0.000000  198.408691       98.408691       3.0         -7906.485107                 0.0         False
5   -7705.010498   -7906.602051  6812.563965 -7705.010498  399.883301 -7906.602051    0.000000  201.591553      199.883301       3.0         -7906.485107                 1.0         False
6   -7305.777100   -7904.893799  6812.563965 -7305.777100  600.824951 -7904.893799  299.116699  300.000000      200.000000       2.0         -7906.485107                 1.0         False
7   -7305.777100   -7704.893799  6812.563965 -7305.777100  299.412476 -7704.893799  299.116699  100.000000      100.000000       2.0         -7604.893799                 0.0         False
8   -7004.777100   -7704.893799  6812.563965 -7004.777100  401.000000 -7704.893799  400.116699  300.000000      200.000000       2.0         -7604.893799                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819439/2048, 
.[0m
[09/26 12:44:15]  --------------------------------------------------------------------------------
[09/26 12:44:15]  Iteration: 229 (99 solution, 129 counterexamples)
[09/26 12:44:44]  Generator returned sat in 25.082269 secs.
[09/26 12:44:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:44:45]  Improved number of small numbers from 59 to 113 out of a max of 113
[09/26 12:44:45]  Verifer returned sat in 0.622798 secs.
[09/26 12:44:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8204.905273   -8404.901367  6712.57373 -8204.905273    0.002686 -8404.901367    0.000000  199.996094       99.998535       7.0         -8404.901367                -1.0            -1
1   -8204.905273   -8251.912354  6712.57373 -8204.905273    0.001221 -8251.912354    0.000000   47.007080       -0.001465       7.0         -8204.905273                 1.0         False
2   -7904.902344   -8204.903809  6712.57373 -7904.902344  347.010010 -8204.903809    0.001465  300.000000      200.000000       1.0         -8204.905273                 1.0         False
3   -7804.903564   -8104.903809  6712.57373 -7804.903564  399.998779 -8104.903809    0.001465  299.998779      199.998779       2.0         -8204.905273                 0.0         False
4   -7804.903564   -8004.903809  6712.57373 -7804.903564  299.997559 -8004.903809    0.001465  199.998779       99.998779       3.0         -7804.905029                 0.0         False
5   -7606.895020   -7804.905029  6712.57373 -7606.895020  398.007324 -7804.905029    0.001465  198.008545      198.007324       3.0         -7804.905029                 1.0         False
6   -7204.901123   -7704.903809  6712.57373 -7204.901123  600.002441 -7704.903809  300.002686  200.000000      200.000000       2.0         -7804.905029                 1.0         False
7   -7204.901123   -7604.903809  6712.57373 -7204.901123    0.010000 -7604.903809  300.002686  100.000000      100.000000       2.0         -7504.903809                 0.0         False
8   -6904.901123   -7604.902344  6712.57373 -6904.901123  400.000000 -7604.902344  400.002686  299.998535      200.000000       3.0         -7504.903809                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638405/4096, 
.[0m
[09/26 12:44:46]  --------------------------------------------------------------------------------
[09/26 12:44:46]  Iteration: 230 (99 solution, 130 counterexamples)
[09/26 12:45:20]  Generator returned sat in 29.042873 secs.
[09/26 12:45:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:45:20]  Improved number of small numbers from 57 to 113 out of a max of 113
[09/26 12:45:20]  Verifer returned sat in 0.593901 secs.
[09/26 12:45:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8200.621582   -8402.621582  6710.349854 -8200.621582    0.116699 -8402.621582    0.000000  202.000000       102.05835       6.0         -8402.621582                -1.0            -1
1   -8200.621582   -8300.621582  6710.349854 -8200.621582    0.058350 -8300.621582    0.000000  100.000000         2.05835       7.0         -8200.621582                 1.0         False
2   -7902.738281   -8200.563232  6710.349854 -7902.738281  397.883301 -8200.563232    0.000000  297.824951       199.94165       1.0         -8200.621582                 1.0         False
3   -7802.679932   -8102.679932  6710.349854 -7802.679932  397.883301 -8102.679932    0.000000  300.000000       200.00000       2.0         -8200.621582                 0.0         False
4   -7802.679932   -7902.738281  6710.349854 -7802.679932  299.941650 -7902.738281    0.000000  100.058350       100.00000       3.0         -7802.679932                 0.0         False
5   -7402.854980   -7802.679932  6710.349854 -7402.854980  499.883301 -7802.679932  199.824951  200.000000       200.00000       3.0         -7802.679932                 1.0         False
6   -7402.854980   -7802.679932  6710.349854 -7402.854980  199.941650 -7802.679932  199.824951  200.000000       100.00000       3.0         -7602.679932                 1.0         False
7   -7251.913330   -7603.838379  6710.349854 -7251.913330  350.941650 -7603.838379  199.824951  152.100098       150.94165       3.0         -7602.679932                 1.0         False
8   -6902.621826   -7602.621826  6710.349854 -6902.621826  501.391602 -7602.621826  400.058105  299.941895       200.00000       2.0         -7602.679932                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819319/2048, 
.[0m
[09/26 12:45:21]  --------------------------------------------------------------------------------
[09/26 12:45:21]  Iteration: 231 (99 solution, 131 counterexamples)
[09/26 12:45:38]  Generator returned sat in 11.882674 secs.
[09/26 12:45:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:45:38]  Improved gap from 44.145721435546875 to 100
[09/26 12:45:39]  Improved number of small numbers from 42 to 114 out of a max of 114
[09/26 12:45:39]  Verifer returned sat in 0.661613 secs.
[09/26 12:45:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10712.713623  -10812.713867  9220.383789 -10712.713623   99.999756 -10812.713867    0.000000  100.000244      100.000244       6.0        -10812.713867                -1.0            -1
1  -10712.713623  -10786.655518  9220.383789 -10712.713623  100.000000 -10786.655518    0.000000   73.941895        0.000244       7.0        -10812.713867                 1.0         False
2  -10712.713623  -10712.713623  9220.383789 -10712.713623   73.825195 -10712.713623    0.000000    0.000000      -99.999756       4.0        -10712.713623                 1.0          True
3  -10312.830322  -10562.830566  9220.383789 -10312.830322  399.883301 -10562.830566    0.000000  250.000244      199.883545       1.0        -10712.713623                 1.0         False
4  -10312.830322  -10512.713867  9220.383789 -10312.830322  249.883301 -10512.713867    0.000000  199.883545       99.883545       2.0        -10312.830322                 0.0         False
5  -10112.830566  -10312.830322  9220.383789 -10112.830566  399.883301 -10312.830322    0.000000  199.999756      199.883301       3.0        -10312.830322                 1.0         False
6   -9712.005371  -10312.713623  9220.383789  -9712.005371  600.824951 -10312.713623  300.708496  299.999756      200.000000       2.0        -10312.830322                 1.0         False
7   -9712.005371  -10112.713867  9220.383789  -9712.005371    1.000000 -10112.713867  300.708496  100.000000      100.000000       2.0        -10012.713867                 1.0          True
8   -9410.505371  -10012.713867  9220.383789  -9410.505371  401.500000 -10012.713867  402.208496  200.000000      200.000000       3.0        -10012.713867                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=823723/2048, 
.[0m
[09/26 12:45:39]  --------------------------------------------------------------------------------
[09/26 12:45:39]  Iteration: 232 (99 solution, 132 counterexamples)
[09/26 12:46:05]  Generator returned sat in 21.453682 secs.
[09/26 12:46:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:46:06]  Verifer returned unsat in 0.187324 secs.
[09/26 12:46:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:46:06]  --------------------------------------------------------------------------------
[09/26 12:46:06]  Iteration: 233 (100 solution, 132 counterexamples)
[09/26 12:46:17]  Generator returned sat in 6.403889 secs.
[09/26 12:46:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:46:18]  Verifer returned unsat in 0.118236 secs.
[09/26 12:46:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:46:18]  --------------------------------------------------------------------------------
[09/26 12:46:18]  Iteration: 234 (101 solution, 132 counterexamples)
[09/26 12:46:27]  Generator returned sat in 5.569742 secs.
[09/26 12:46:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:46:28]  Improved gap from 0.0 to 0
[09/26 12:46:28]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/26 12:46:28]  Verifer returned sat in 0.664752 secs.
[09/26 12:46:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10781.661377  -11032.659668  9415.882568 -10781.661377    0.001221 -11032.659668    0.000000  250.998291      200.000000       7.0        -11032.659668                -1.0            -1
1  -10781.661377  -10981.661133  9415.882568 -10781.661377    0.002500 -10981.661133    0.000000  199.999756      100.000000       7.0        -11032.659668                 0.0         False
2  -10781.661377  -10881.661133  9415.882568 -10781.661377    0.001250 -10881.661133    0.000000   99.999756        0.000000       7.0        -10781.661377                 0.0         False
3  -10781.661377  -10781.661377  9515.882568 -10781.661377    0.001221 -10781.661377    0.000000    0.000000        0.000000       8.0        -10781.661377                 0.0         False
4  -10531.660645  -10781.661377  9515.882568 -10531.660645  250.000732 -10781.661377    0.000000  250.000732      150.000732       8.0        -10781.661377                 1.0         False
5  -10082.660156  -10581.661377  9515.882568 -10082.660156  699.001221 -10581.661377  299.001221  200.000000      200.000000       2.0        -10781.661377                 1.0         False
6  -10082.660156  -10531.659424  9515.882568 -10082.660156    0.010000 -10531.659424  299.001221  149.998047      100.000000       2.0        -10381.661377                 0.0         False
7   -9981.656250  -10381.661377  9515.882568  -9981.656250  251.001953 -10381.661377  299.001221  101.003906      101.003906       3.0        -10381.661377                 0.0         False
8   -9681.660156  -10331.662109  9515.882568  -9681.660156  401.000000 -10331.662109  400.001221  250.000732      200.000000       2.0        -10381.661377                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638405/4096, 
.[0m
[09/26 12:46:29]  --------------------------------------------------------------------------------
[09/26 12:46:29]  Iteration: 235 (101 solution, 133 counterexamples)
[09/26 12:46:58]  Generator returned sat in 25.016002 secs.
[09/26 12:46:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:46:59]  Verifer returned unsat in 0.247400 secs.
[09/26 12:46:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:46:59]  --------------------------------------------------------------------------------
[09/26 12:46:59]  Iteration: 236 (102 solution, 133 counterexamples)
[09/26 12:47:10]  Generator returned sat in 6.574326 secs.
[09/26 12:47:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:47:10]  Verifer returned unsat in 0.285464 secs.
[09/26 12:47:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:47:10]  --------------------------------------------------------------------------------
[09/26 12:47:10]  Iteration: 237 (103 solution, 133 counterexamples)
[09/26 12:47:22]  Generator returned sat in 6.614352 secs.
[09/26 12:47:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:47:22]  Verifer returned unsat in 0.192590 secs.
[09/26 12:47:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:47:22]  --------------------------------------------------------------------------------
[09/26 12:47:22]  Iteration: 238 (104 solution, 133 counterexamples)
[09/26 12:48:04]  Generator returned sat in 37.224983 secs.
[09/26 12:48:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:48:06]  Improved number of small numbers from 38 to 46 out of a max of 113
[09/26 12:48:06]  Verifer returned sat in 1.514341 secs.
[09/26 12:48:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10499.719971  -10948.723813  9465.880517 -10499.719971  150.003418 -10948.723813  299.000195  150.003647       50.005186       6.0        -10948.723813                -1.0            -1
1  -10499.719971  -10798.720223  9465.880517 -10499.719971  150.003418 -10798.720223  299.000195    0.000057      -49.994814       6.0        -10948.723813                 1.0         False
2  -10349.717464  -10748.725351  9465.880517 -10349.717464  150.002564 -10748.725351  299.000195  100.007692        0.007692       1.0        -10648.717659                 1.0          True
3  -10349.717464  -10648.725351  9465.880517 -10349.717464    0.001026 -10648.725351  299.000195    0.007692      -99.992308       2.0        -10648.717659                 0.0         False
4  -10049.726182  -10548.723044  9465.880517 -10049.726182  299.998974 -10548.723044  299.000195  199.996667       99.998974       1.0        -10648.717659                 0.0         False
5   -9849.726182  -10348.725351  9465.880517  -9849.726182  399.996667 -10348.725351  299.000195  199.998974      199.998974       1.0        -10648.717659                 0.0         False
6   -9449.726823  -10248.725586  9465.880517  -9449.726823  599.998333 -10248.725586  598.998528  200.000235      200.000000       2.0        -10648.717659                 0.0         False
7   -9449.726823  -10148.725351  9465.880517  -9449.726823    0.010000 -10148.725351  598.998528  100.000000      100.000000       2.0        -10048.725351                 0.0         False
8   -9149.724131  -10048.725586  9465.880517  -9149.724131  400.002692 -10048.725586  699.001221  200.000235      200.000000       3.0        -10048.725351                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=390001/975, 
.[0m
[09/26 12:48:06]  --------------------------------------------------------------------------------
[09/26 12:48:06]  Iteration: 239 (104 solution, 134 counterexamples)
[09/26 12:49:37]  Generator returned sat in 86.164420 secs.
[09/26 12:49:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:49:38]  Improved number of small numbers from 60 to 113 out of a max of 113
[09/26 12:49:38]  Verifer returned sat in 0.541188 secs.
[09/26 12:49:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10349.717529  -10616.934326  9166.872559 -10349.717529    0.058105 -10616.934326    0.000000  267.216797      200.000000       6.0        -10616.934326                -1.0            -1
1  -10349.717529  -10449.717529  9166.872559 -10349.717529  267.158691 -10449.717529    0.000000  100.000000      100.000000       7.0        -10616.934326                 0.0         False
2  -10349.717529  -10447.775635  9166.872559 -10349.717529    0.116455 -10447.775635    0.000000   98.058105        0.000000       8.0        -10349.717529                 0.0         False
3  -10349.717529  -10349.717529  9166.872559 -10349.717529    0.058350 -10349.717529    0.000000    0.000000     -100.000000       9.0        -10349.717529                 0.0         False
4   -9949.775635  -10149.717529  9166.872559  -9949.775635  399.941895 -10149.717529    0.000000  199.941895      199.941895       1.0        -10349.717529                 1.0         False
5   -9549.804688  -10049.775635  9166.872559  -9549.804688  599.912842 -10049.775635  299.912842  200.058105      200.000000       2.0        -10349.717529                 0.0         False
6   -9549.804688   -9949.717773  9166.872559  -9549.804688  200.000000  -9949.717773  299.912842  100.000244      100.000000       2.0         -9849.717529                 0.0         False
7   -9349.804932   -9849.775635  9166.872559  -9349.804932  300.000000  -9849.775635  299.912842  200.057861      199.999756       3.0         -9849.717529                 0.0         False
8   -9099.862793   -9849.717529  9166.872559  -9099.862793  450.000000  -9849.717529  449.854736  300.000000      200.000000       4.0         -9849.717529                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1842605/4096, 
.[0m
[09/26 12:49:38]  --------------------------------------------------------------------------------
[09/26 12:49:38]  Iteration: 240 (104 solution, 135 counterexamples)
[09/26 12:49:55]  Generator returned sat in 11.730175 secs.
[09/26 12:49:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:49:55]  Improved number of small numbers from 113 to 113 out of a max of 113
[09/26 12:49:55]  Verifer returned sat in 0.231242 secs.
[09/26 12:49:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0  -10349.717529  -10616.268311  9166.872559 -10349.717529    0.058105 -10616.268311    0.000000  266.550781      200.000000       7.0        -10616.268311                -1.0            -1
1  -10349.717529  -10449.717529  9166.872559 -10349.717529  266.492920 -10449.717529    0.000000  100.000000      100.000000       7.0        -10616.268311                 0.0         False
2  -10349.717529  -10447.775635  9166.872559 -10349.717529    0.116455 -10447.775635    0.000000   98.058105        0.000000       8.0        -10349.717529                 0.0         False
3  -10349.717529  -10349.717529  9166.872559 -10349.717529    0.057861 -10349.717529    0.000000    0.000000     -100.000000       9.0        -10349.717529                 0.0         False
4   -9949.775635  -10149.717529  9166.872559  -9949.775635  399.941895 -10149.717529    0.000000  199.941895      199.941895       1.0        -10349.717529                 1.0         False
5   -9549.804688  -10049.775635  9166.872559  -9549.804688  599.912842 -10049.775635  299.912842  200.058105      200.000000       2.0        -10349.717529                 0.0         False
6   -9549.804688   -9949.717773  9166.872559  -9549.804688  200.000000  -9949.717773  299.912842  100.000244      100.000000       2.0         -9849.717529                 0.0         False
7   -9349.804932   -9849.775635  9166.872559  -9349.804932  300.000000  -9849.775635  299.912842  200.057861      199.999756       3.0         -9849.717529                 0.0         False
8   -9099.862793   -9849.717529  9166.872559  -9099.862793  450.000000  -9849.717529  449.854736  300.000000      200.000000       4.0         -9849.717529                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1842605/4096, 
.[0m
[09/26 12:49:56]  --------------------------------------------------------------------------------
[09/26 12:49:56]  Iteration: 241 (104 solution, 136 counterexamples)
[09/26 12:51:05]  Generator returned sat in 64.473114 secs.
[09/26 12:51:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:51:06]  Improved gap from 0.0 to 0
[09/26 12:51:06]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/26 12:51:06]  Verifer returned sat in 0.941420 secs.
[09/26 12:51:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8372.988525   -8572.988525  9066.872314 -8372.988525    0.057617 -8572.988525    0.000000  200.000000      200.000000       7.0         -8572.988525                -1.0            -1
1   -8372.988525   -8570.998779  9066.872314 -8372.988525  200.000000 -8570.998779    0.000000  198.010254      100.000000       7.0         -8572.988525                 0.0         False
2   -8372.988525   -8472.237549  9066.872314 -8372.988525  198.009766 -8472.237549    0.000000   99.249023        0.000000       8.0         -8372.988525                 0.0         False
3   -8372.988525   -8372.988525  9166.872314 -8372.988525   99.249023 -8372.988525    0.000000    0.000000        0.000000       9.0         -8372.988525                 0.0         False
4   -8073.490479   -8372.988525  9166.872314 -8073.490479  299.498047 -8372.988525    0.000000  299.498047      199.498047       9.0         -8372.988525                 1.0         False
5   -7673.987305   -8272.988525  9166.872314 -7673.987305  699.001221 -8272.988525  299.001221  300.000000      200.000000       2.0         -8372.988525                 1.0         False
6   -7673.987305   -8073.489258  9166.872314 -7673.987305    0.010000 -8073.489258  299.001221  100.500732      100.000000       2.0         -7972.988525                 0.0         False
7   -7473.988770   -7972.988525  9166.872314 -7473.988770  300.499268 -7972.988525  299.001221  199.998535      199.998535       3.0         -7972.988525                 0.0         False
8   -7272.987305   -7972.987305  9166.872314 -7272.987305  401.000000 -7972.987305  400.001221  299.998779      200.000000       2.0         -7972.988525                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638405/4096, 
.[0m
[09/26 12:51:06]  --------------------------------------------------------------------------------
[09/26 12:51:06]  Iteration: 242 (104 solution, 137 counterexamples)
[09/26 12:51:20]  Generator returned sat in 9.000473 secs.
[09/26 12:51:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:51:21]  Improved gap from 0.0 to 0
[09/26 12:51:21]  Improved number of small numbers from 59 to 114 out of a max of 114
[09/26 12:51:21]  Verifer returned sat in 1.103529 secs.
[09/26 12:51:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8469.032471   -8669.034912  9301.205811 -8469.032471    0.057373 -8669.034912    0.000000  200.002441           200.0       7.0         -8669.034912                -1.0            -1
1   -8469.032471   -8569.039795  9301.205811 -8469.032471  100.010000 -8569.039795    0.000000  100.007324           100.0       7.0         -8669.034912                 0.0         False
2   -8469.032471   -8569.032227  9301.205811 -8469.032471  100.007324 -8569.032227    0.000000   99.999756             0.0       8.0         -8469.032471                 0.0         False
3   -8469.032471   -8469.032471  9401.205811 -8469.032471   50.498779 -8469.032471    0.000000    0.000000             0.0       9.0         -8469.032471                 0.0         False
4   -8169.032471   -8469.032471  9401.205811 -8169.032471  300.000000 -8469.032471    0.000000  300.000000           200.0       9.0         -8469.032471                 1.0         False
5   -7770.025146   -8369.032471  9401.205811 -7770.025146  699.007324 -8369.032471  299.007324  300.000000           200.0       2.0         -8469.032471                 1.0         False
6   -7770.025146   -8269.032471  9401.205811 -7770.025146    0.010000 -8269.032471  299.007324  200.000000           100.0       3.0         -8069.032471                 0.0         False
7   -7769.025146   -8069.034912  9401.205811 -7769.025146  201.000000 -8069.034912  299.007324    1.002441             1.0       3.0         -8069.032471                 0.0         False
8   -7369.030029   -8069.032471  9401.205811 -7369.030029  400.997559 -8069.032471  400.002441  300.000000           200.0       4.0         -8069.032471                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819205/2048, 
.[0m
[09/26 12:51:22]  --------------------------------------------------------------------------------
[09/26 12:51:22]  Iteration: 243 (104 solution, 138 counterexamples)
[09/26 12:51:34]  Generator returned sat in 7.352131 secs.
[09/26 12:51:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:51:35]  Improved gap from 0.0 to 0
[09/26 12:51:36]  Improved number of small numbers from 67 to 114 out of a max of 114
[09/26 12:51:36]  Verifer returned sat in 1.210227 secs.
[09/26 12:51:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8342.995117   -8542.995117  9303.206055 -8342.995117    0.001250 -8542.995117    0.000000  200.000000      200.000000       7.0         -8542.995117                -1.0            -1
1   -8342.995117   -8443.000244  9303.206055 -8342.995117    0.002500 -8443.000244    0.000000  100.005127      100.000000       7.0         -8542.995117                 0.0         False
2   -8342.995117   -8392.745605  9303.206055 -8342.995117    0.001465 -8392.745605    0.000000   49.750488        0.000000       8.0         -8342.995117                 0.0         False
3   -8342.995117   -8342.995117  9403.206055 -8342.995117   49.749023 -8342.995117    0.000000    0.000000        0.000000       9.0         -8342.995117                 0.0         False
4   -8043.497070   -8342.995117  9403.206055 -8043.497070  299.498047 -8342.995117    0.000000  299.498047      199.498047       9.0         -8342.995117                 1.0         False
5   -7643.993896   -8142.995117  9403.206055 -7643.993896  699.001221 -8142.995117  299.001221  200.000000      200.000000       2.0         -8342.995117                 1.0         False
6   -7643.993896   -8043.495850  9403.206055 -7643.993896    0.010000 -8043.495850  299.001221  100.500732      100.000000       2.0         -7942.995117                 0.0         False
7   -7443.995361   -7942.995117  9403.206055 -7443.995361  300.499268 -7942.995117  299.001221  199.998535      199.998535       3.0         -7942.995117                 0.0         False
8   -7242.993896   -7942.994141  9403.206055 -7242.993896  401.000000 -7942.994141  400.001221  299.999023      200.000000       2.0         -7942.995117                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638405/4096, 
.[0m
[09/26 12:51:36]  --------------------------------------------------------------------------------
[09/26 12:51:36]  Iteration: 244 (104 solution, 139 counterexamples)
[09/26 12:52:09]  Generator returned sat in 27.976330 secs.
[09/26 12:52:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:09]  Verifer returned unsat in 0.307715 secs.
[09/26 12:52:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:09]  --------------------------------------------------------------------------------
[09/26 12:52:09]  Iteration: 245 (105 solution, 139 counterexamples)
[09/26 12:52:22]  Generator returned sat in 8.424776 secs.
[09/26 12:52:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:23]  Verifer returned unsat in 0.299155 secs.
[09/26 12:52:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:23]  --------------------------------------------------------------------------------
[09/26 12:52:23]  Iteration: 246 (106 solution, 139 counterexamples)
[09/26 12:52:34]  Generator returned sat in 6.893508 secs.
[09/26 12:52:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:35]  Verifer returned unsat in 0.190553 secs.
[09/26 12:52:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:35]  --------------------------------------------------------------------------------
[09/26 12:52:35]  Iteration: 247 (107 solution, 139 counterexamples)
[09/26 12:52:51]  Generator returned sat in 11.454789 secs.
[09/26 12:52:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:52]  Verifer returned unsat in 0.524135 secs.
[09/26 12:52:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:52:52]  --------------------------------------------------------------------------------
[09/26 12:52:52]  Iteration: 248 (108 solution, 139 counterexamples)
[09/26 12:53:29]  Generator returned sat in 32.549065 secs.
[09/26 12:53:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:53:30]  Improved number of small numbers from 53 to 113 out of a max of 113
[09/26 12:53:30]  Verifer returned sat in 0.600393 secs.
[09/26 12:53:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7802.656250   -7802.771973  8562.751221 -7802.656250  100.231445 -7802.771973    0.000000    0.115723       -0.115967       2.0         -7802.771973                -1.0            -1
1   -7702.656250   -7802.540283  8562.751221 -7702.656250  100.115723 -7802.540283    0.000000   99.884033       -0.115967       1.0         -7702.656250                 0.0         False
2   -7702.540283   -7702.540283  8562.751221 -7702.540283  100.000000 -7702.540283    0.000000    0.000000     -100.000000       1.0         -7702.540283                 0.0         False
3   -7403.540283   -7502.540283  8562.751221 -7403.540283  299.000000 -7502.540283    0.000000   99.000000       99.000000       1.0         -7702.540283                 0.0         False
4   -7202.540283   -7451.598145  8562.751221 -7202.540283  300.000000 -7451.598145    0.000000  249.057861      200.000000       2.0         -7702.540283                 0.0         False
5   -7150.598145   -7353.714111  8562.751221 -7150.598145  301.000000 -7353.714111    0.000000  203.115967      151.942139       2.0         -7702.540283                 0.0         False
6   -7051.714111   -7205.540527  8562.751221 -7051.714111  302.000000 -7205.540527    0.000000  153.826416      150.826172       3.0         -7702.540283                 0.0         False
7   -6902.540527   -7202.540283  8562.751221 -6902.540527  303.000000 -7202.540283    0.000000  299.999756      199.999756       4.0         -7702.540283                 0.0         False
8   -6402.424561   -7051.598389  8562.751221 -6402.424561  800.115723 -7051.598389  400.115723  249.058105      200.000000       2.0         -7702.540283                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=819437/2048, 
.[0m
[09/26 12:53:30]  --------------------------------------------------------------------------------
[09/26 12:53:30]  Iteration: 249 (108 solution, 140 counterexamples)
[09/26 12:54:25]  Generator returned sat in 49.816578 secs.
[09/26 12:54:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:54:25]  Verifer returned unsat in 0.268420 secs.
[09/26 12:54:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:54:25]  --------------------------------------------------------------------------------
[09/26 12:54:25]  Iteration: 250 (109 solution, 140 counterexamples)
[09/26 12:54:37]  Generator returned sat in 7.266995 secs.
[09/26 12:54:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:54:38]  Verifer returned unsat in 0.353900 secs.
[09/26 12:54:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:54:38]  --------------------------------------------------------------------------------
[09/26 12:54:38]  Iteration: 251 (110 solution, 140 counterexamples)
[09/26 12:54:49]  Generator returned sat in 6.655360 secs.
[09/26 12:54:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:54:49]  Verifer returned unsat in 0.209073 secs.
[09/26 12:54:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:54:49]  --------------------------------------------------------------------------------
[09/26 12:54:49]  Iteration: 252 (111 solution, 140 counterexamples)
[09/26 12:55:19]  Generator returned sat in 25.189099 secs.
[09/26 12:55:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:55:20]  Improved gap from 0.0 to 100
[09/26 12:55:20]  Improved number of small numbers from 68 to 114 out of a max of 114
[09/26 12:55:20]  Verifer returned sat in 0.557510 secs.
[09/26 12:55:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7342.610596   -7642.610352  8562.751221 -7342.610596  299.928467 -7642.610352    0.000000  299.999756      199.999756       4.0         -7642.610352                -1.0            -1
1   -7342.610596   -7442.610352  8562.751221 -7342.610596  299.928571 -7442.610352    0.000000   99.999756       99.999756       3.0         -7642.610352                 1.0         False
2   -7142.753418   -7401.438965  8562.751221 -7142.753418  299.856934 -7401.438965    0.000000  258.685547      199.856934       3.0         -7142.753418                 1.0          True
3   -7142.753418   -7242.610352  8562.751221 -7142.753418   49.267822 -7242.610352    0.000000   99.856934       99.856934       2.0         -7142.753418                 1.0         False
4   -7142.753418   -7242.610352  8562.751221 -7142.753418   99.535645 -7242.610352    0.000000   99.856934       -0.143066       2.0         -7142.753418                 1.0         False
5   -7042.539062   -7042.610352  8562.751221 -7042.539062  200.071289 -7042.610352    0.000000    0.071289        0.071289       1.0         -7142.753418                 1.0         False
6   -6863.196045   -7042.539062  8562.751221 -6863.196045  179.414307 -7042.539062    0.000000  179.343018       79.414307       2.0         -6863.196045                 0.0         False
7   -6682.710449   -6863.196289  8562.751221 -6682.710449  359.828613 -6863.196289    0.000000  180.485840      159.899902       2.0         -6863.196045                 1.0         False
8   -6142.539062   -6742.610352  8562.751221 -6142.539062  720.657227 -6742.610352  400.071289  200.000000      200.000000       2.0         -6863.196045                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=409673/1024, 
.[0m
[09/26 12:55:20]  --------------------------------------------------------------------------------
[09/26 12:55:20]  Iteration: 253 (111 solution, 141 counterexamples)
[09/26 12:55:59]  Generator returned sat in 33.893439 secs.
[09/26 12:55:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:55:59]  Verifer returned unsat in 0.276011 secs.
[09/26 12:55:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:55:59]  --------------------------------------------------------------------------------
[09/26 12:55:59]  Iteration: 254 (112 solution, 141 counterexamples)
[09/26 12:56:11]  Generator returned sat in 7.015491 secs.
[09/26 12:56:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:12]  Verifer returned unsat in 0.312670 secs.
[09/26 12:56:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:12]  --------------------------------------------------------------------------------
[09/26 12:56:12]  Iteration: 255 (113 solution, 141 counterexamples)
[09/26 12:56:23]  Generator returned sat in 7.132883 secs.
[09/26 12:56:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:24]  Verifer returned unsat in 0.281891 secs.
[09/26 12:56:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:24]  --------------------------------------------------------------------------------
[09/26 12:56:24]  Iteration: 256 (114 solution, 141 counterexamples)
[09/26 12:56:37]  Generator returned sat in 8.945712 secs.
[09/26 12:56:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:38]  Verifer returned unsat in 0.245897 secs.
[09/26 12:56:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:38]  --------------------------------------------------------------------------------
[09/26 12:56:38]  Iteration: 257 (115 solution, 141 counterexamples)
[09/26 12:56:49]  Generator returned sat in 6.791803 secs.
[09/26 12:56:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:50]  Verifer returned unsat in 0.172769 secs.
[09/26 12:56:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:56:50]  --------------------------------------------------------------------------------
[09/26 12:56:50]  Iteration: 258 (116 solution, 141 counterexamples)
[09/26 12:57:01]  Generator returned sat in 6.821417 secs.
[09/26 12:57:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:57:01]  Verifer returned unsat in 0.279965 secs.
[09/26 12:57:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:57:01]  --------------------------------------------------------------------------------
[09/26 12:57:01]  Iteration: 259 (117 solution, 141 counterexamples)
[09/26 12:57:19]  Generator returned sat in 13.069044 secs.
[09/26 12:57:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:57:21]  Improved number of small numbers from 38 to 58 out of a max of 113
[09/26 12:57:21]  Verifer returned sat in 1.428995 secs.
[09/26 12:57:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7149.959229   -7150.074951  8170.158009 -7149.959229    0.057617 -7150.074951    0.000000    0.115723        0.057911       2.0         -7150.074951                -1.0            -1
1   -7149.959229   -7150.017090  8170.158009 -7149.959229    0.057617 -7150.017090    0.000000    0.057861      -99.942089       2.0         -7150.074951                 0.0         False
2   -6806.136475   -7050.017140  8170.158009 -6806.136475  343.880615 -7050.017140    0.000000  243.880665      143.880665       1.0         -7150.074951                 0.0         False
3   -6806.136475   -6950.017140  8170.158009 -6806.136475  243.822781 -6950.017140    0.000000  143.880665       43.880665       2.0         -6806.136475                 0.0         False
4   -6584.282968   -6750.017140  8170.158009 -6584.282968  365.734172 -6750.017140    0.000000  165.734172      165.734172       1.0         -6806.136475                 0.0         False
5   -6201.415882   -6650.722380  8170.158009 -6201.415882  548.601257 -6650.722380  248.601257  200.705241      200.000000       2.0         -6806.136475                 0.0         False
6   -6201.415882   -6584.225107  8170.158009 -6201.415882  200.647380 -6584.225107  248.601257  134.207967      100.000000       2.0         -6450.017140                 0.0         False
7   -6034.652780   -6450.017140  8170.158009 -6034.652780  300.971069 -6450.017140  248.601257  166.763102      166.763102       3.0         -6450.017140                 0.0         False
8   -5749.959278   -6350.017334  8170.158009 -5749.959278  451.456604 -6350.017334  400.057861  200.000194      200.000000       2.0         -6450.017140                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=1638637/4096, 
.[0m
[09/26 12:57:21]  --------------------------------------------------------------------------------
[09/26 12:57:21]  Iteration: 260 (117 solution, 142 counterexamples)
[09/26 12:57:51]  Generator returned sat in 25.362072 secs.
[09/26 12:57:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:57:52]  Verifer returned unsat in 0.165642 secs.
[09/26 12:57:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:57:52]  --------------------------------------------------------------------------------
[09/26 12:57:52]  Iteration: 261 (118 solution, 142 counterexamples)
[09/26 12:58:03]  Generator returned sat in 7.159672 secs.
[09/26 12:58:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:04]  Verifer returned unsat in 0.130686 secs.
[09/26 12:58:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:04]  --------------------------------------------------------------------------------
[09/26 12:58:04]  Iteration: 262 (119 solution, 142 counterexamples)
[09/26 12:58:15]  Generator returned sat in 6.889798 secs.
[09/26 12:58:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:16]  Verifer returned unsat in 0.177289 secs.
[09/26 12:58:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:16]  --------------------------------------------------------------------------------
[09/26 12:58:16]  Iteration: 263 (120 solution, 142 counterexamples)
[09/26 12:58:28]  Generator returned sat in 7.351748 secs.
[09/26 12:58:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:28]  Verifer returned unsat in 0.164354 secs.
[09/26 12:58:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:28]  --------------------------------------------------------------------------------
[09/26 12:58:28]  Iteration: 264 (121 solution, 142 counterexamples)
[09/26 12:58:40]  Generator returned sat in 7.268447 secs.
[09/26 12:58:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:41]  Verifer returned unsat in 0.170520 secs.
[09/26 12:58:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:41]  --------------------------------------------------------------------------------
[09/26 12:58:41]  Iteration: 265 (122 solution, 142 counterexamples)
[09/26 12:58:52]  Generator returned sat in 6.943655 secs.
[09/26 12:58:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:52]  Verifer returned unsat in 0.188318 secs.
[09/26 12:58:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 12:58:53]  --------------------------------------------------------------------------------
[09/26 12:58:53]  Iteration: 266 (123 solution, 142 counterexamples)
[09/26 12:59:27]  Generator returned sat in 30.218152 secs.
[09/26 12:59:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:59:28]  Verifer returned unsat in 0.382350 secs.
[09/26 12:59:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:59:28]  --------------------------------------------------------------------------------
[09/26 12:59:28]  Iteration: 267 (124 solution, 142 counterexamples)
[09/26 12:59:39]  Generator returned sat in 6.667423 secs.
[09/26 12:59:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:59:40]  Verifer returned unsat in 0.334190 secs.
[09/26 12:59:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:59:40]  --------------------------------------------------------------------------------
[09/26 12:59:40]  Iteration: 268 (125 solution, 142 counterexamples)
[09/26 12:59:53]  Generator returned sat in 8.364846 secs.
[09/26 12:59:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:59:53]  Verifer returned unsat in 0.303479 secs.
[09/26 12:59:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 12:59:53]  --------------------------------------------------------------------------------
[09/26 12:59:53]  Iteration: 269 (126 solution, 142 counterexamples)
[09/26 13:00:05]  Generator returned sat in 7.134580 secs.
[09/26 13:00:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:00:06]  Improved gap from 0.0 to 0
[09/26 13:00:07]  Improved number of small numbers from 39 to 49 out of a max of 114
[09/26 13:00:07]  Verifer returned sat in 1.576982 secs.
[09/26 13:00:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7151.534940   -7451.534940  8669.36921 -7151.534940    0.115723 -7451.534940    0.000000  300.000000      200.000000       6.0          -7451.53494                -1.0            -1
1   -7151.534940   -7351.534940  8669.36921 -7151.534940    0.115723 -7351.534940    0.000000  200.000000      100.000000       7.0          -7451.53494                 0.0         False
2   -7151.534940   -7227.092773  8669.36921 -7151.534940  199.999756 -7227.092773    0.000000   75.557834        0.000000       8.0          -7451.53494                 0.0         False
3   -7151.534940   -7151.534940  8769.36921 -7151.534940   75.442200 -7151.534940    0.000000    0.000000        0.000000       9.0          -7151.53494                 0.0         False
4   -6851.650540   -7151.534940  8769.36921 -6851.650540  299.884399 -7151.534940    0.000000  299.884399      199.884399       9.0          -7151.53494                 1.0         False
5   -6452.766141   -6951.534940  8769.36921 -6452.766141  698.768799 -6951.534940  298.768799  200.000000      200.000000       2.0          -7151.53494                 1.0         False
6   -6302.381742   -6851.535156  8769.36921 -6302.381742  350.384399 -6851.535156  349.153198  200.000216      200.000000       2.0          -6651.53494                 0.0         False
7   -6302.381742   -6776.053739  8769.36921 -6302.381742  176.192200 -6776.053739  349.153198  124.518799      100.000000       3.0          -6651.53494                 0.0         False
8   -6051.419339   -6751.419434  8769.36921 -6051.419339  375.481201 -6751.419434  400.115601  299.884494      200.000000       3.0          -6651.53494                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=3, loss_amount=3277747/8192, 
.[0m
[09/26 13:00:07]  --------------------------------------------------------------------------------
[09/26 13:00:07]  Iteration: 270 (126 solution, 143 counterexamples)
[09/26 13:01:26]  Generator returned sat in 74.018694 secs.
[09/26 13:01:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:01:28]  Improved gap from 0.0 to 3.125
[09/26 13:01:29]  Improved number of small numbers from 51 to 60 out of a max of 114
[09/26 13:01:29]  Verifer returned sat in 2.803925 secs.
[09/26 13:01:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7451.477051   -7451.534940  8769.253906 -7451.477051    0.173340 -7451.534940    0.000000    0.057889       -0.057415       1.0         -7451.534940                -1.0            -1
1   -7451.419461   -7451.419461  8866.128662 -7451.419461    0.115479 -7451.419461    0.000000    0.000000       -3.125069       1.0         -7451.419461                 0.0         False
2   -7448.236722   -7448.236722  8962.945992 -7448.236722    3.182739 -7448.236722    0.000000    0.000000       -3.125000       1.0         -7451.419461                 0.0         False
3   -7445.111722   -7445.111722  9059.820801 -7445.111722    3.125000 -7445.111722    0.000000    0.000000       -3.125191       1.0         -7445.111722                 0.0         False
4   -7428.140287   -7428.140287  9142.849557 -7428.140287   16.971436 -7428.140287    0.000000    0.000000       -3.125000       1.0         -7445.111722                 0.0         False
5   -7363.610501   -7425.015287  9142.849557 -7363.610501   64.529785 -7425.015287    0.000000   61.404785      -38.595215       1.0         -7445.111722                 0.0         False
6   -7313.042630   -7325.015287  9142.849557 -7313.042630  111.972656 -7325.015287    0.000000   11.972656      -88.027344       1.0         -7445.111722                 0.0         False
7   -6971.849759   -7211.801216  9142.849557 -6971.849759  353.165527 -7211.801216    0.000000  239.951457      153.165527       1.0         -7445.111722                 0.0         False
8   -6424.957547   -7025.015381  9142.849557 -6424.957547  786.843669 -7025.015381  400.057739  200.000094      200.000000       2.0         -7445.111722                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=3277273/8192, 
.[0m
[09/26 13:01:30]  --------------------------------------------------------------------------------
[09/26 13:01:30]  Iteration: 271 (126 solution, 144 counterexamples)
[09/26 13:02:15]  Generator returned sat in 40.420382 secs.
[09/26 13:02:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:02:15]  Verifer returned unsat in 0.270916 secs.
[09/26 13:02:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:02:15]  --------------------------------------------------------------------------------
[09/26 13:02:15]  Iteration: 272 (127 solution, 144 counterexamples)
[09/26 13:02:36]  Generator returned sat in 15.536528 secs.
[09/26 13:02:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:02:36]  Verifer returned unsat in 0.202559 secs.
[09/26 13:02:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:02:36]  --------------------------------------------------------------------------------
[09/26 13:02:36]  Iteration: 273 (128 solution, 144 counterexamples)
[09/26 13:03:41]  Generator returned sat in 60.413053 secs.
[09/26 13:03:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:03:42]  Improved number of small numbers from 38 to 113 out of a max of 113
[09/26 13:03:42]  Verifer returned sat in 0.696328 secs.
[09/26 13:03:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7424.919922   -7598.429443  9139.979492 -7424.919922    0.115479 -7598.429443    0.000000  173.509521      173.509521       2.0         -7598.429443                -1.0            -1
1   -7424.919922   -7598.429443  9139.979492 -7424.919922    0.115479 -7598.429443    0.000000  173.509521       73.509521       2.0         -7598.429443                 1.0         False
2   -7424.919922   -7424.919922  9139.979492 -7424.919922  173.394287 -7424.919922    0.000000    0.000000      -26.490479       3.0         -7598.429443                 1.0         False
3   -7251.641113   -7298.429688  9139.979492 -7251.641113  173.278809 -7298.429688    0.000000   46.788574       46.788330       1.0         -7251.641113                 1.0          True
4   -7124.150879   -7251.525635  9139.979492 -7124.150879  174.278809 -7251.525635    0.000000  127.374756       74.278564       1.0         -7251.641113                 0.0         False
5   -7076.246826   -7148.102539  9139.979492 -7076.246826  175.278809 -7148.102539    0.000000   71.855713       22.182617       2.0         -7251.641113                 0.0         False
6   -6798.544922   -7076.131348  9139.979492 -6798.544922  349.557617 -7076.131348    0.000000  277.586426      199.884521       1.0         -7251.641113                 1.0          True
7   -6725.573730   -6898.429443  9139.979492 -6725.573730  350.557617 -6898.429443    0.000000  172.855713      172.855713       2.0         -7251.641113                 0.0         False
8   -6198.314209   -6798.429688  9139.979492 -6198.314209  700.115234 -6798.429688  400.115234  200.000244      200.000000       2.0         -7251.641113                 1.0          True
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=1, loss_amount=204859/512, 
.[0m
[09/26 13:03:43]  --------------------------------------------------------------------------------
[09/26 13:03:43]  Iteration: 274 (128 solution, 145 counterexamples)
[09/26 13:04:46]  Generator returned sat in 57.572177 secs.
[09/26 13:04:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:04:47]  Improved gap from 0.0 to 0
[09/26 13:04:47]  Improved number of small numbers from 70 to 114 out of a max of 114
[09/26 13:04:47]  Verifer returned sat in 0.556937 secs.
[09/26 13:04:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -7373.318115   -7673.318115  9039.979492 -7373.318115    0.002441 -7673.318115    0.000000  300.000000      200.000000       6.0         -7673.318115                -1.0            -1
1   -7373.318115   -7573.318115  9039.979492 -7373.318115    0.002441 -7573.318115    0.000000  200.000000      100.000000       6.0         -7673.318115                 0.0         False
2   -7373.318115   -7448.319336  9039.979492 -7373.318115   75.001465 -7448.319336    0.000000   75.001221        0.000000       7.0         -7673.318115                 0.0         False
3   -7373.318115   -7373.318115  9139.979492 -7373.318115   74.998779 -7373.318115    0.000000    0.000000        0.000000       8.0         -7373.318115                 0.0         False
4   -7073.320557   -7373.318115  9139.979492 -7073.320557  299.997559 -7373.318115    0.000000  299.997559      199.997559       8.0         -7373.318115                 1.0         False
5   -6673.322998   -7173.320557  9139.979492 -6673.322998  699.995117 -7173.320557  299.995117  200.002441      200.000000       2.0         -7373.318115                 1.0         False
6   -6673.322998   -7173.318115  9139.979492 -6673.322998    0.010000 -7173.318115  299.995117  200.000000      100.000000       3.0         -6973.318115                 0.0         False
7   -6672.322998   -6973.814453  9139.979492 -6672.322998  201.000000 -6973.814453  299.995117    1.496338        1.000000       3.0         -6973.318115                 0.0         False
8   -6273.315674   -6973.315674  9139.979492 -6273.315674  400.503662 -6973.315674  400.002441  299.997559      200.000000       2.0         -6973.318115                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=819205/2048, 
.[0m
[09/26 13:04:47]  --------------------------------------------------------------------------------
[09/26 13:04:47]  Iteration: 275 (128 solution, 146 counterexamples)
[09/26 13:05:10]  Generator returned sat in 17.011048 secs.
[09/26 13:05:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:05:10]  Verifer returned unsat in 0.100483 secs.
[09/26 13:05:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:05:10]  --------------------------------------------------------------------------------
[09/26 13:05:10]  Iteration: 276 (129 solution, 146 counterexamples)
[09/26 13:05:25]  Generator returned sat in 9.436966 secs.
[09/26 13:05:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:05:25]  Verifer returned unsat in 0.119439 secs.
[09/26 13:05:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:05:25]  --------------------------------------------------------------------------------
[09/26 13:05:25]  Iteration: 277 (130 solution, 146 counterexamples)
[09/26 13:05:52]  Generator returned sat in 21.781971 secs.
[09/26 13:05:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:05:53]  Verifer returned unsat in 0.523458 secs.
[09/26 13:05:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:05:53]  --------------------------------------------------------------------------------
[09/26 13:05:53]  Iteration: 278 (131 solution, 146 counterexamples)
[09/26 13:06:06]  Generator returned sat in 7.609723 secs.
[09/26 13:06:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:06]  Verifer returned unsat in 0.243252 secs.
[09/26 13:06:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:06]  --------------------------------------------------------------------------------
[09/26 13:06:06]  Iteration: 279 (132 solution, 146 counterexamples)
[09/26 13:06:19]  Generator returned sat in 7.586929 secs.
[09/26 13:06:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:20]  Verifer returned unsat in 0.266429 secs.
[09/26 13:06:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:20]  --------------------------------------------------------------------------------
[09/26 13:06:20]  Iteration: 280 (133 solution, 146 counterexamples)
[09/26 13:06:37]  Generator returned sat in 12.695050 secs.
[09/26 13:06:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:38]  Verifer returned unsat in 0.138198 secs.
[09/26 13:06:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:38]  --------------------------------------------------------------------------------
[09/26 13:06:38]  Iteration: 281 (134 solution, 146 counterexamples)
[09/26 13:06:54]  Generator returned sat in 11.077388 secs.
[09/26 13:06:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:54]  Verifer returned unsat in 0.216790 secs.
[09/26 13:06:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:06:55]  --------------------------------------------------------------------------------
[09/26 13:06:55]  Iteration: 282 (135 solution, 146 counterexamples)
[09/26 13:07:08]  Generator returned sat in 8.066567 secs.
[09/26 13:07:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:07:08]  Verifer returned unsat in 0.269384 secs.
[09/26 13:07:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:07:08]  --------------------------------------------------------------------------------
[09/26 13:07:08]  Iteration: 283 (136 solution, 146 counterexamples)
[09/26 13:07:49]  Generator returned sat in 35.254854 secs.
[09/26 13:07:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:07:49]  Verifer returned unsat in 0.162063 secs.
[09/26 13:07:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:07:49]  --------------------------------------------------------------------------------
[09/26 13:07:49]  Iteration: 284 (137 solution, 146 counterexamples)
[09/26 13:08:03]  Generator returned sat in 8.154899 secs.
[09/26 13:08:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:08:03]  Verifer returned unsat in 0.283122 secs.
[09/26 13:08:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:08:03]  --------------------------------------------------------------------------------
[09/26 13:08:03]  Iteration: 285 (138 solution, 146 counterexamples)
[09/26 13:09:19]  Generator returned sat in 71.072694 secs.
[09/26 13:09:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:09:20]  Verifer returned unsat in 0.337887 secs.
[09/26 13:09:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:09:20]  --------------------------------------------------------------------------------
[09/26 13:09:20]  Iteration: 286 (139 solution, 146 counterexamples)
[09/26 13:10:30]  Generator returned sat in 65.078815 secs.
[09/26 13:10:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:10:31]  Improved gap from 0.0 to 23.4375
[09/26 13:10:32]  Improved number of small numbers from 41 to 50 out of a max of 114
[09/26 13:10:32]  Verifer returned sat in 1.838037 secs.
[09/26 13:10:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -9235.812256   -9239.485393  10706.146729 -9235.812256    0.115479 -9239.485393    0.000000    3.673138        3.673096       8.0         -9239.485393                -1.0            -1
1   -9235.696819   -9235.696819  10778.920696 -9235.696819    3.788574 -9235.696819    0.000000    0.000000      -23.437500       1.0         -9239.485393                 1.0         False
2   -9212.259319   -9212.259319  10855.483196 -9212.259319   23.437500 -9212.259319    0.000000    0.000000      -23.437500       1.0         -9239.485393                 0.0         False
3   -8888.821819   -9154.744915  10855.483196 -8888.821819  323.437500 -9154.744915    0.000000  265.923096      200.000000       1.0         -9239.485393                 0.0         False
4   -8788.937176   -8988.821819  10855.483196 -8788.937176  365.807739 -8988.821819    0.000000  199.884644      199.884644       2.0         -9239.485393                 0.0         False
5   -8499.576580   -8888.937012  10855.483196 -8499.576580  489.245239 -8888.937012  189.245239  200.115192      200.000000       3.0         -9239.485393                 0.0         False
6   -8499.576580   -8888.821819  10855.483196 -8499.576580    1.000000 -8888.821819  189.245239  200.000000      100.000000       4.0         -8688.821819                 0.0         False
7   -8299.691936   -8688.821819  10855.483196 -8299.691936  399.884644 -8688.821819  189.245239  199.884644      199.884644       3.0         -8688.821819                 1.0         False
8   -7949.691936   -8588.822021  10855.483196 -7949.691936  549.884644 -8588.822021  439.129883  200.000202      200.000000       2.0         -8688.821819                 0.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=449669/1024, 
.[0m
[09/26 13:10:33]  --------------------------------------------------------------------------------
[09/26 13:10:33]  Iteration: 287 (139 solution, 147 counterexamples)
[09/26 13:11:31]  Generator returned sat in 53.309237 secs.
[09/26 13:11:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:11:32]  Improved number of small numbers from 67 to 73 out of a max of 113
[09/26 13:11:32]  Verifer returned sat in 1.098701 secs.
[09/26 13:11:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay_t  last_decrease_f_0,t  exceed_queue_f_0,t this_decrease
0   -8602.687012   -8702.686895  10855.483154 -8602.687012    0.002686 -8702.686895    0.00000   99.999883       99.997383       2.0         -8702.686895                -1.0            -1
1   -8402.681895   -8702.684395  10855.483154 -8402.681895  300.005000 -8702.684395    0.00250  300.000000      200.000000       2.0         -8702.686895                 0.0         False
2   -8402.681895   -8602.684395  10855.483154 -8402.681895  299.997314 -8602.684395    0.00250  200.000000      100.000000       2.0         -8402.684395                 0.0         False
3   -8303.679395   -8402.686895  10855.483154 -8303.679395  299.002500 -8402.686895    0.00250   99.005000       99.002500       3.0         -8303.681895                 0.0         False
4   -8102.681895   -8402.684395  10855.483154 -8102.681895  300.002500 -8402.684395    0.00250  300.000000      200.000000       4.0         -8303.681895                 0.0         False
5   -7653.680645   -8302.684326  10855.483154 -7653.680645  749.001250 -8302.684326  349.00375  299.999932      200.000000       2.0         -8303.681895                 1.0         False
6   -7653.680645   -8202.684326  10855.483154 -7653.680645    0.010000 -8202.684326  349.00375  199.999932      100.000000       3.0         -8002.684395                 0.0         False
7   -7653.680645   -8102.684395  10855.483154 -7653.680645    1.010000 -8102.684395  349.00375  100.000000        0.000000       4.0         -8002.684395                 0.0         False
8   -7154.175645   -8002.684395  10855.483154 -7154.175645  599.505000 -8002.684395  548.50875  300.000000      200.000000       4.0         -8002.684395                 1.0         False
fefficient=True, bounded_queue=True, bounded_loss_count=True, bounded_loss_amount=False, ramp_up_cwnd=True, ramp_down_cwnd=False, 
, ramp_up_bq=False, ramp_down_bq=False, ramp_up_queue=False, ramp_down_queue=False, loss_count=2, loss_amount=87761/160, 
.[0m
[09/26 13:11:33]  --------------------------------------------------------------------------------
[09/26 13:11:33]  Iteration: 288 (139 solution, 148 counterexamples)
[09/26 13:11:47]  Generator returned sat in 9.308021 secs.
[09/26 13:11:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:11:48]  Verifer returned unsat in 0.238514 secs.
[09/26 13:11:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:11:48]  --------------------------------------------------------------------------------
[09/26 13:11:48]  Iteration: 289 (140 solution, 148 counterexamples)
[09/26 13:12:32]  Generator returned sat in 38.870677 secs.
[09/26 13:12:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:12:32]  Verifer returned unsat in 0.122315 secs.
[09/26 13:12:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:12:32]  --------------------------------------------------------------------------------
[09/26 13:12:32]  Iteration: 290 (141 solution, 148 counterexamples)
[09/26 13:12:56]  Generator returned sat in 18.863147 secs.
[09/26 13:12:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:12:56]  Verifer returned unsat in 0.176976 secs.
[09/26 13:12:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:12:56]  --------------------------------------------------------------------------------
[09/26 13:12:56]  Iteration: 291 (142 solution, 148 counterexamples)
[09/26 13:13:09]  Generator returned sat in 8.146401 secs.
[09/26 13:13:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:10]  Verifer returned unsat in 0.208233 secs.
[09/26 13:13:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:10]  --------------------------------------------------------------------------------
[09/26 13:13:10]  Iteration: 292 (143 solution, 148 counterexamples)
[09/26 13:13:25]  Generator returned sat in 10.084438 secs.
[09/26 13:13:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:25]  Verifer returned unsat in 0.201779 secs.
[09/26 13:13:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:25]  --------------------------------------------------------------------------------
[09/26 13:13:25]  Iteration: 293 (144 solution, 148 counterexamples)
[09/26 13:13:39]  Generator returned sat in 9.069176 secs.
[09/26 13:13:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:40]  Verifer returned unsat in 0.176713 secs.
[09/26 13:13:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:40]  --------------------------------------------------------------------------------
[09/26 13:13:40]  Iteration: 294 (145 solution, 148 counterexamples)
[09/26 13:13:52]  Generator returned sat in 8.031330 secs.
[09/26 13:13:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:53]  Verifer returned unsat in 0.242845 secs.
[09/26 13:13:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[09/26 13:13:53]  --------------------------------------------------------------------------------
[09/26 13:13:53]  Iteration: 295 (146 solution, 148 counterexamples)
[09/26 13:14:29]  Generator returned sat in 31.349079 secs.
[09/26 13:14:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:14:30]  Verifer returned unsat in 0.238911 secs.
[09/26 13:14:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:14:30]  --------------------------------------------------------------------------------
[09/26 13:14:30]  Iteration: 296 (147 solution, 148 counterexamples)
[09/26 13:14:45]  Generator returned sat in 10.630651 secs.
[09/26 13:14:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:14:46]  Verifer returned unsat in 0.202464 secs.
[09/26 13:14:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:14:46]  --------------------------------------------------------------------------------
[09/26 13:14:46]  Iteration: 297 (148 solution, 148 counterexamples)
[09/26 13:14:58]  Generator returned sat in 7.976623 secs.
[09/26 13:14:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:14:59]  Verifer returned unsat in 0.264072 secs.
[09/26 13:14:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[09/26 13:14:59]  --------------------------------------------------------------------------------
[09/26 13:14:59]  Iteration: 298 (149 solution, 148 counterexamples)
