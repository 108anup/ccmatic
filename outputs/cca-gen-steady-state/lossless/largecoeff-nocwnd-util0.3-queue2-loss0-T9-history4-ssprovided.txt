[08/24 18:36:21]  --------------------------------------------------------------------------------
[08/24 18:36:21]  Iteration: 1 (0 solution, 0 counterexamples)
[08/24 18:36:21]  Generator returned sat in 0.004193 secs.
[08/24 18:36:21]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + 1S_f[0][t-2] + 1S_f[0][t-3] + 1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:21]  Improved number of small numbers from 98 to 98 out of a max of 98
[08/24 18:36:21]  Verifer returned sat in 0.252490 secs.
[08/24 18:36:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0          24.95         -75.25     75.25        24.95       0.1       -75.25        0.0    100.2           100.2
1          24.95          24.75     75.25        24.95       0.1        24.75        0.0      0.2             0.2
2          24.95          24.75     75.25        24.95       0.1        24.75        0.0      0.2           -99.8
3         224.85         124.75     75.25       224.85     200.1       124.75        0.0    100.1             0.1
4         224.85         224.75     75.25       224.85     100.0       224.75        0.0      0.1           -99.9
5         624.75         324.75     75.25       624.75     400.0       324.75        0.0    300.0           200.0
6        1024.75         524.65     75.25      1024.75     700.0       524.65        0.0    500.1           500.0
7        1724.55         524.75     75.25      1724.55    1199.9       524.75        0.0   1199.8          1099.8
8        2124.65         624.75     75.25      2124.65    1599.9       624.75        0.0   1499.9          1399.9
fefficient=True, bounded_queue=False, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:22]  --------------------------------------------------------------------------------
[08/24 18:36:22]  Iteration: 2 (0 solution, 1 counterexamples)
[08/24 18:36:22]  Generator returned sat in 0.033507 secs.
[08/24 18:36:22]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + -1S_f[0][t-3] + 1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:22]  Improved gap from 0.0025 to 100
[08/24 18:36:22]  Improved number of small numbers from 91 to 99 out of a max of 99
[08/24 18:36:22]  Verifer returned sat in 0.148079 secs.
[08/24 18:36:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.752441     -75.250488  75.249756    24.752441    0.099609   -75.250488        0.0  100.002930      100.002686
1      24.752441      24.747070  75.249756    24.752441    0.002686    24.747070        0.0    0.005371        0.002686
2      24.752441      24.749756  75.249756    24.752441    0.002441    24.749756        0.0    0.002686      -99.997314
3     624.749756     124.749756  75.249756   624.749756  600.000000   124.749756        0.0  500.000000      400.000000
4     624.749756     224.749756  75.249756   624.749756    0.010000   224.749756        0.0  400.000000      300.000000
5     624.749756     424.749512  75.249756   624.749756    0.010000   424.749512        0.0  200.000244      200.000000
6     624.749756     524.749512  75.249756   624.749756    0.010000   524.749512        0.0  100.000244      100.000000
7     624.749756     524.749756  75.249756   624.749756    0.010000   524.749756        0.0  100.000000        0.000000
8     624.749756     624.749756  75.249756   624.749756    0.010000   624.749756        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:22]  --------------------------------------------------------------------------------
[08/24 18:36:22]  Iteration: 3 (0 solution, 2 counterexamples)
[08/24 18:36:22]  Generator returned sat in 0.004546 secs.
[08/24 18:36:22]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + -1S_f[0][t-1] + 1S_f[0][t-3] + 1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:22]  Improved number of small numbers from 79 to 98 out of a max of 98
[08/24 18:36:22]  Verifer returned sat in 0.173623 secs.
[08/24 18:36:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.752197    -100.992676  100.992188    24.752197    0.099365  -100.992676        0.0  125.744873      125.744873
1      24.752197      -0.992676  100.992188    24.752197    0.002441    -0.992676        0.0   25.744873       25.744873
2      24.752197      24.749512  100.992188    24.752197    0.002197    24.749512        0.0    0.002686      -74.255127
3     624.749512      99.007324  100.992188   624.749512  600.000000    99.007324        0.0  525.742188      425.742188
4     624.749512     224.749512  100.992188   624.749512    0.010000   224.749512        0.0  400.000000      325.742188
5     624.749512     299.007568  100.992188   624.749512    0.010000   299.007568        0.0  325.741943      225.742188
6     624.749512     499.007324  100.992188   624.749512    0.010000   499.007324        0.0  125.742188      125.742188
7     624.749512     524.749512  100.992188   624.749512    0.010000   524.749512        0.0  100.000000       25.742188
8     624.749512     624.749512  100.992188   624.749512    0.010000   624.749512        0.0    0.000000      -74.257812
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:22]  --------------------------------------------------------------------------------
[08/24 18:36:22]  Iteration: 4 (0 solution, 3 counterexamples)
[08/24 18:36:22]  Generator returned sat in 0.008342 secs.
[08/24 18:36:22]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + -1S_f[0][t-1] + 1S_f[0][t-2] + 1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:23]  Improved number of small numbers from 63 to 98 out of a max of 98
[08/24 18:36:23]  Verifer returned sat in 0.161491 secs.
[08/24 18:36:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.750000    -101.001221  100.991943    24.750000    0.099121  -101.001221        0.0  125.751221      125.750977
1      24.750000      -1.001221  100.991943    24.750000    0.002197    -1.001221        0.0   25.751221       25.750977
2      24.750000      24.749268  100.991943    24.750000    0.001953    24.749268        0.0    0.000732      -74.249023
3     599.009277      99.007324  100.991943   599.009277  574.260010    99.007324        0.0  500.001953      400.010254
4     599.009277     199.009277  100.991943   599.009277    0.010000   199.009277        0.0  400.000000      300.010254
5     599.009277     299.000977  100.991943   599.009277    0.010000   299.000977        0.0  300.008301      200.010254
6     599.009277     398.999023  100.991943   599.009277    0.010000   398.999023        0.0  200.010254      100.010254
7     599.009277     598.998779  100.991943   599.009277    0.010000   598.998779        0.0    0.010498        0.010254
8     599.009277     599.009277  100.991943   599.009277    0.010000   599.009277        0.0    0.000000      -99.989746
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:23]  --------------------------------------------------------------------------------
[08/24 18:36:23]  Iteration: 5 (0 solution, 4 counterexamples)
[08/24 18:36:23]  Generator returned sat in 0.013772 secs.
[08/24 18:36:23]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + -1S_f[0][t-1] + 1S_f[0][t-2] + 1S_f[0][t-3] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:23]  Improved number of small numbers from 82 to 98 out of a max of 98
[08/24 18:36:23]  Verifer returned sat in 0.139720 secs.
[08/24 18:36:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.749756    -201.002197  100.991943    24.749756    0.098877  -201.002197        0.0  225.751953      225.751953
1      24.749756    -101.002197  100.991943    24.749756    0.001953  -101.002197        0.0  125.751953      125.751953
2      24.749756      -1.002197  100.991943    24.749756    0.001709    -1.002197        0.0   25.751953       25.751953
3     499.008789      98.997803  100.991943   499.008789  500.010986    98.997803        0.0  400.010986      400.010986
4     499.008789      99.008789  100.991943   499.008789    0.010000    99.008789        0.0  400.000000      300.010986
5     499.008789     198.998047  100.991943   499.008789    0.010000   198.998047        0.0  300.010742      200.010986
6     499.008789     298.997803  100.991943   499.008789    0.010000   298.997803        0.0  200.010986      100.010986
7     499.008789     498.997803  100.991943   499.008789    0.010000   498.997803        0.0    0.010986        0.010986
8     499.008789     498.998047  100.991943   499.008789    0.010000   498.998047        0.0    0.010742      -99.989014
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:23]  --------------------------------------------------------------------------------
[08/24 18:36:23]  Iteration: 6 (0 solution, 5 counterexamples)
[08/24 18:36:23]  Generator returned sat in 0.044849 secs.
[08/24 18:36:23]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:24]  Improved number of small numbers from 73 to 98 out of a max of 98
[08/24 18:36:24]  Verifer returned sat in 0.150032 secs.
[08/24 18:36:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.749512    -299.990723  100.991699    24.749512    0.098633  -299.990723        0.0  324.740234      324.740234
1      24.749512    -199.990967  100.991699    24.749512    0.001953  -199.990967        0.0  224.740479      224.740234
2      24.749512     -99.990723  100.991699    24.749512    0.001465   -99.990723        0.0  124.740234      124.740234
3     400.009033       0.009033  100.991699   400.009033  499.999756     0.009033        0.0  400.000000      399.999756
4     400.009033       0.009277  100.991699   400.009033    0.010000     0.009277        0.0  399.999756      299.999756
5     400.009033     198.998047  100.991699   400.009033    0.010000   198.998047        0.0  201.010986      199.999756
6     400.009033     298.997559  100.991699   400.009033    0.010000   298.997559        0.0  101.011475       99.999756
7     400.009033     399.998047  100.991943   400.009033    0.010000   399.998047        0.0    0.010986        0.000000
8     400.009033     400.009033  100.991943   400.009033    0.010000   400.009033        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:24]  --------------------------------------------------------------------------------
[08/24 18:36:24]  Iteration: 7 (0 solution, 6 counterexamples)
[08/24 18:36:24]  Generator returned sat in 0.009170 secs.
[08/24 18:36:24]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:24]  Improved number of small numbers from 65 to 98 out of a max of 98
[08/24 18:36:24]  Verifer returned sat in 0.155748 secs.
[08/24 18:36:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.749268    -300.990723  101.991699    24.749268    0.098389  -300.990723        0.0  325.739990      325.739990
1      24.749268    -200.990967  101.991699    24.749268    0.001709  -200.990967        0.0  225.740234      225.739990
2      24.749268    -100.990967  101.991699    24.749268    0.001221  -100.990967        0.0  125.740234      125.739990
3     399.009033      -0.990967  101.991699   399.009033  500.000000    -0.990967        0.0  400.000000      399.999756
4     399.009033      -0.990723  101.991699   399.009033    0.010000    -0.990723        0.0  399.999756      299.999756
5     399.009033     198.998047  101.991699   399.009033    0.010000   198.998047        0.0  200.010986      199.999756
6     399.009033     298.997314  101.991699   399.009033    0.010000   298.997314        0.0  100.011719       99.999756
7     399.009033     398.998535  101.991943   399.009033    0.010000   398.998535        0.0    0.010498        0.000000
8     399.009033     399.009033  101.991943   399.009033    0.010000   399.009033        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:24]  --------------------------------------------------------------------------------
[08/24 18:36:24]  Iteration: 8 (0 solution, 7 counterexamples)
[08/24 18:36:24]  Generator returned sat in 0.016762 secs.
[08/24 18:36:24]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-2] + -1S_f[0][t-3] + 1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:25]  Improved number of small numbers from 63 to 98 out of a max of 98
[08/24 18:36:25]  Verifer returned sat in 0.158333 secs.
[08/24 18:36:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.749023    -378.490479  179.491211    24.749023    0.098145  -378.490479        0.0  403.239502      403.239502
1      24.749023    -278.490479  179.491211    24.749023    0.001465  -278.490479        0.0  303.239502      303.239502
2      24.749023    -178.490479  179.491211    24.749023    0.000977  -178.490479        0.0  203.239502      203.239502
3     321.509521    -178.490479  179.491211   321.509521  500.000000  -178.490479        0.0  500.000000      400.000000
4     321.509521      -0.990967  179.491211   321.509521    0.010000    -0.990967        0.0  322.500488      300.000000
5     321.509521     121.509277  179.491211   321.509521    0.010000   121.509277        0.0  200.000244      200.000000
6     321.509521     121.509521  179.491211   321.509521    0.010000   121.509521        0.0  200.000000      100.000000
7     321.509521     321.499512  179.491211   321.509521    0.010000   321.499512        0.0    0.010010        0.000000
8     321.509521     321.509521  179.491211   321.509521    0.010000   321.509521        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:25]  --------------------------------------------------------------------------------
[08/24 18:36:25]  Iteration: 9 (0 solution, 8 counterexamples)
[08/24 18:36:25]  Generator returned sat in 0.032817 secs.
[08/24 18:36:25]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-2] + 1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:25]  Improved number of small numbers from 94 to 98 out of a max of 98
[08/24 18:36:25]  Verifer returned sat in 0.123744 secs.
[08/24 18:36:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      24.748779    -378.490723  179.491211    24.748779    0.097900  -378.490723        0.0  403.239502      403.239502
1      24.748779    -278.490723  179.491211    24.748779    0.001221  -278.490723        0.0  303.239502      303.239502
2      24.748779    -178.490723  179.491211    24.748779    0.000732  -178.490723        0.0  203.239502      203.239502
3     321.509277    -178.490479  179.491211   321.509277  500.000000  -178.490479        0.0  499.999756      400.000000
4     321.509277     -78.490723  179.491211   321.509277    0.010000   -78.490723        0.0  400.000000      300.000000
5     321.509277      99.009033  179.491211   321.509277    0.010000    99.009033        0.0  222.500244      200.000000
6     321.509277     221.509277  179.491211   321.509277    0.010000   221.509277        0.0  100.000000      100.000000
7     321.509277     299.009033  179.491211   321.509277    0.010000   299.009033        0.0   22.500244        0.000000
8     321.509277     321.509277  179.491211   321.509277    0.010000   321.509277        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:25]  --------------------------------------------------------------------------------
[08/24 18:36:25]  Iteration: 10 (0 solution, 9 counterexamples)
[08/24 18:36:26]  Generator returned sat in 0.032958 secs.
[08/24 18:36:26]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:26]  Verifer returned unsat in 0.126438 secs.
[08/24 18:36:26]  Proved solution: 
[1m[92mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:26]  --------------------------------------------------------------------------------
[08/24 18:36:26]  Iteration: 11 (1 solution, 9 counterexamples)
[08/24 18:36:26]  Generator returned sat in 0.010740 secs.
[08/24 18:36:26]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-4] + -1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:26]  Improved gap from 0.00030517578125 to 0
[08/24 18:36:27]  Improved number of small numbers from 42 to 99 out of a max of 99
[08/24 18:36:27]  Verifer returned sat in 0.724585 secs.
[08/24 18:36:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1232.970215    1131.970703 -1430.970215  1232.970215    0.097656  1131.970703        0.0  100.999512        0.999512
1    1232.970215    1232.969971 -1331.969971  1232.970215    0.000977  1232.969971        0.0    0.000244       -0.000244
2    1232.970703    1232.970703 -1231.970215  1232.970703    0.000732  1232.970703        0.0    0.000000        0.000000
3    1332.970947    1232.970703 -1231.970215  1332.970947  100.000244  1232.970703        0.0  100.000244        0.000244
4    1332.970947    1332.970703 -1131.970459  1332.970947  100.000000  1332.970703        0.0    0.000244        0.000000
5    1431.971436    1332.970947 -1130.970947  1431.971436   99.000732  1332.970947        0.0   99.000488        0.000000
6    1431.971436    1431.971436 -1030.970947  1431.971436   99.000244  1431.971436        0.0    0.000000        0.000000
7    1629.972168    1431.971436 -1030.970947  1629.972168  198.000732  1431.971436        0.0  198.000732       98.000732
8    1629.972168    1531.971436 -1030.970947  1629.972168   98.000732  1531.971436        0.0   98.000732       -1.999268
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:27]  --------------------------------------------------------------------------------
[08/24 18:36:27]  Iteration: 12 (1 solution, 10 counterexamples)
[08/24 18:36:27]  Generator returned sat in 0.041037 secs.
[08/24 18:36:27]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-2] + -1S_f[0][t-4] + -1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:27]  Improved gap from 0.0 to 100
[08/24 18:36:27]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/24 18:36:27]  Verifer returned sat in 0.178194 secs.
[08/24 18:36:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1629.970947    1529.970947 -1030.970947  1629.970947    0.097656  1529.970947        0.0  100.000000      100.000000
1    1629.970947    1529.970947 -1030.970947  1629.970947    0.000977  1529.970947        0.0  100.000000        0.000000
2    1630.970703    1630.970703 -1030.970947  1630.970703  100.999756  1630.970703        0.0    0.000000      -99.000244
3    2227.971924    1729.970947 -1030.970947  2227.971924  597.001221  1729.970947        0.0  498.000977      398.000977
4    2227.971924    1928.971436 -1030.970947  2227.971924   99.999756  1928.971436        0.0  299.000488      298.000977
5    2227.971924    1930.970947 -1030.970947  2227.971924  199.000000  1930.970947        0.0  297.000977      198.000977
6    2227.971924    2029.970947 -1030.970947  2227.971924  297.000732  2029.970947        0.0  198.000977       98.000977
7    2229.970947    2129.970947 -1030.970947  2229.970947  200.000000  2129.970947        0.0  100.000000        0.000000
8    2229.970947    2229.970947 -1030.970947  2229.970947   99.999512  2229.970947        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:27]  --------------------------------------------------------------------------------
[08/24 18:36:27]  Iteration: 13 (1 solution, 11 counterexamples)
[08/24 18:36:28]  Generator returned sat in 0.031224 secs.
[08/24 18:36:28]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-2] + -1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:28]  Improved gap from 0.0 to 98.4375
[08/24 18:36:28]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/24 18:36:28]  Verifer returned sat in 0.251097 secs.
[08/24 18:36:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2526.849121    2329.973145 -1927.849365  2526.849121    0.097656  2329.973145        0.0  196.875977      100.000000
1    2526.849121    2526.848633 -1927.849365  2526.849121    0.000977  2526.848633        0.0    0.000488        0.000000
2    2526.849121    2526.849121 -1926.286865  2526.849121    0.000488  2526.849121        0.0    0.000000      -98.437500
3    2725.285645    2626.848145 -1926.285889  2725.285645  198.436523  2626.848145        0.0   98.437500        0.000000
4    2823.724121    2823.723633 -1926.285889  2823.724121  196.875977  2823.723633        0.0    0.000488       -1.561523
5    2923.723145    2825.285645 -1924.723389  2923.723145   99.999512  2825.285645        0.0   98.437500        0.000000
6    3122.160156    2923.723145 -1924.723389  3122.160156  296.874512  2923.723145        0.0  198.437012       98.437012
7    3122.160645    3023.723145 -1924.722900  3122.160645  198.437500  3023.723145        0.0   98.437500       -1.562012
8    3123.722656    3123.722656 -1924.722900  3123.722656   99.999512  3123.722656        0.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:28]  --------------------------------------------------------------------------------
[08/24 18:36:28]  Iteration: 14 (1 solution, 12 counterexamples)
[08/24 18:36:28]  Generator returned sat in 0.020091 secs.
[08/24 18:36:28]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-2] + -1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:28]  Improved gap from 0.00018310546875 to 96.875
[08/24 18:36:29]  Improved number of small numbers from 52 to 99 out of a max of 99
[08/24 18:36:29]  Verifer returned sat in 0.280792 secs.
[08/24 18:36:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2526.848633  -18911.151367 -1929.286377  2526.848633    0.097656 -18911.151367    21338.0  100.000000      100.000000
1    2526.848633  -18811.151367 -1929.286377  2526.848633    0.000488 -18811.151367    21338.0    0.000000        0.000000
2    2526.848877  -18811.151367 -1926.285889  2526.848877    0.000244 -18811.151367    21338.0    0.000244      -96.999268
3    2920.723145  -18713.151855 -1926.285889  2920.723145  393.874512 -18713.151855    21338.0  295.875000      196.875000
4    2920.723145  -18516.276611 -1926.285889  2920.723145  101.000000 -18516.276611    21338.0   98.999756       96.875000
5    2920.723145  -18514.151855 -1923.160889  2920.723145   98.999512 -18514.151855    21338.0   96.875000        0.000000
6    3119.722900  -18417.276855 -1923.160889  3119.722900  295.874756 -18417.276855    21338.0  198.999756       98.999756
7    3120.723145  -18317.276855 -1923.160889  3120.723145  200.000000 -18317.276855    21338.0  100.000000        0.000000
8    3120.723145  -18217.276855 -1923.160889  3120.723145   99.999756 -18217.276855    21338.0    0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:29]  --------------------------------------------------------------------------------
[08/24 18:36:29]  Iteration: 15 (1 solution, 13 counterexamples)
[08/24 18:36:29]  Generator returned sat in 0.076412 secs.
[08/24 18:36:29]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-2] + 1S_f[0][t-3] + -1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:29]  Improved gap from 0.0003846153846153846 to 100
[08/24 18:36:29]  Improved number of small numbers from 55 to 99 out of a max of 99
[08/24 18:36:29]  Verifer returned sat in 0.260878 secs.
[08/24 18:36:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t     losts_0,t     queue_t  bottle_queue_t
0    2520.957275  -19010.907471 -1829.530518  2520.957275    0.097656 -19010.907471  21431.864746  100.000000      100.000000
1    2520.957275  -19010.907471 -1829.530518  2520.957275    0.048584 -19010.907471  21431.864746  100.000000        0.000000
2    2620.761963  -18811.151611 -1829.530518  2620.761963  199.804688 -18811.151611  21431.864746    0.048828       -0.195312
3    2920.957275  -18710.907471 -1829.530518  2920.957275  300.244141 -18710.907471  21431.864746  200.000000      200.000000
4    2920.957275  -18710.809814 -1829.530518  2920.957275  100.244141 -18710.809814  21431.864746  199.902344      100.000000
5    2920.957275  -18610.907471 -1829.530518  2920.957275  199.853516 -18610.907471  21431.864746  100.000000        0.000000
6    3021.103760  -18410.956299 -1829.530518  3021.103760  200.146484 -18410.956299  21431.864746    0.195312        0.146484
7    3220.957275  -18410.907471 -1829.530518  3220.957275  200.048828 -18410.907471  21431.864746  200.000000      100.000000
8    3220.957275  -18310.907471 -1829.530518  3220.957275   99.951172 -18310.907471  21431.864746  100.000000        0.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:30]  --------------------------------------------------------------------------------
[08/24 18:36:30]  Iteration: 16 (1 solution, 14 counterexamples)
[08/24 18:36:30]  Generator returned sat in 0.117410 secs.
[08/24 18:36:30]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-2] + 1S_f[0][t-3] + -1S_f[0][t-4] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:30]  Improved number of small numbers from 82 to 98 out of a max of 98
[08/24 18:36:30]  Verifer returned sat in 0.187639 secs.
[08/24 18:36:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t     losts_0,t     queue_t  bottle_queue_t
0    2520.957031  -19010.907715 -1829.530762  2520.957031    0.097656 -19010.907715  21431.864746  100.000000       99.999756
1    2520.957031  -19010.907471 -1829.530762  2520.957031    0.048340 -19010.907471  21431.864746   99.999756       -0.000244
2    2617.908691  -18813.980225 -1829.530762  2617.908691  196.951416 -18813.980225  21431.864746    0.024170       -3.048584
3    2920.957275  -18710.907471 -1829.530762  2920.957275  303.072754 -18710.907471  21431.864746  200.000000      200.000000
4    2920.957275  -18709.883301 -1829.530762  2920.957275  104.072998 -18709.883301  21431.864746  198.975830      100.000000
5    2920.957275  -18610.907471 -1829.530762  2920.957275  198.951416 -18610.907471  21431.864746  100.000000        0.000000
6    3024.005859  -18410.907471 -1829.530762  3024.005859  203.048584 -18410.907471  21431.864746    3.048584        3.048584
7    3222.981445  -18410.907471 -1829.530762  3222.981445  202.024170 -18410.907471  21431.864746  202.024170      102.024170
8    3222.981445  -18310.907471 -1829.530762  3222.981445   99.975830 -18310.907471  21431.864746  102.024170        2.024170
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:30]  --------------------------------------------------------------------------------
[08/24 18:36:30]  Iteration: 17 (1 solution, 15 counterexamples)
[08/24 18:36:30]  Generator returned sat in 0.053809 secs.
[08/24 18:36:30]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-3] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:31]  Improved gap from 0.00125 to 48.4375
[08/24 18:36:31]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/24 18:36:31]  Verifer returned sat in 0.376034 secs.
[08/24 18:36:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t   service_0,t     losts_0,t    queue_t  bottle_queue_t
0    2769.492432  -18662.421143 -1829.530762  2769.492432    0.097656 -18662.421143  21431.864746   0.048828        0.024414
1    2769.492432  -18662.396729 -1777.968262  2769.492432    0.024414 -18662.396729  21431.864746   0.024414      -48.413086
2    2817.929932  -18613.959229 -1729.506348  2817.929932   48.461914 -18613.959229  21431.864746   0.024414      -51.513672
3    2869.468018  -18562.421143 -1677.943848  2869.468018   51.562500 -18562.421143  21431.864746   0.024414      -48.413086
4    2969.419189  -18513.983643 -1629.481934  2969.419189   99.975586 -18513.983643  21431.864746  51.538086        0.000000
5    3017.856689  -18462.445557 -1581.020020  3017.856689   99.975586 -18462.445557  21431.864746  48.437500       -3.100586
6    3069.394775  -18410.907471 -1529.457520  3069.394775   99.975586 -18410.907471  21431.864746  48.437500        0.000000
7    3124.033447  -18362.469971 -1529.433105  3124.033447  103.076172 -18362.469971  21431.864746  54.638672      -45.336914
8    3169.370361  -18262.494385 -1529.433105  3169.370361   99.975586 -18262.494385  21431.864746   0.000000     -100.000000
fefficient=True, bounded_queue=True, bounded_loss=True, total_losses=0
cwnd: [100, 602]
queue: [0, 400].[0m
[08/24 18:36:31]  --------------------------------------------------------------------------------
[08/24 18:36:31]  Iteration: 18 (1 solution, 16 counterexamples)
[08/24 18:36:31]  Generator returned sat in 0.032330 secs.
[08/24 18:36:31]  Candidate solution: 
[1m[94mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-3] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:31]  Verifer returned unsat in 0.128376 secs.
[08/24 18:36:31]  Proved solution: 
[1m[92mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-3] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:31]  --------------------------------------------------------------------------------
[08/24 18:36:31]  Iteration: 19 (2 solution, 16 counterexamples)
[08/24 18:36:32]  Generator returned unsat in 0.061356 secs.
[08/24 18:36:32]  [96mNo more solutions found[0m
[08/24 18:36:32]  Final solutions:
[08/24 18:36:32]  0: [1m[92mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-3] + 1)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:32]  1: [1m[92mc_f[0][t] = max(0.01, + 1S_f[0][t-1] + -1S_f[0][t-4] + 0)
cwnd: [100, 602]
queue: [0, 400][0m
[08/24 18:36:32]  Took 10.944921 secs.
