[07/14 14:03:33]  --------------------------------------------------------------------------------
[07/14 14:03:33]  Iteration: 1 (0 solution, 0 counterexamples)
[07/14 14:03:33]  Generator returned sat in 0.005339 secs.
[07/14 14:03:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:03:33]  Improved gap from 1/10 to 100
[07/14 14:03:33]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:03:33]  Verifer returned sat in 0.221833 secs.
[07/14 14:03:33]  Counter example: 
[93m   arrival_0,t  cwnd_0,t  service_0,t  wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0     -7779.78       0.1     -7879.78   7879.78        0.0                0.0    100.0           100.0
1     -7779.78       0.1     -7879.78   7879.78        0.0                0.0    100.0             0.0
2     -7479.78     400.0     -7679.78   7879.78        0.0                0.0    200.0           200.0
3     -7479.68     200.1     -7679.78   7879.78        0.1                0.0    200.0           100.0
4     -6877.48     802.2     -7579.78   7879.78      402.3                0.1    300.0           200.0
5     -4971.08    2206.4     -7436.78   7879.78     2308.7              402.3    157.0           100.0
6      -227.28    4900.8     -7279.78   7879.78     6952.5             2308.7    100.0           100.0
7     10276.32   10603.6     -7279.78   7879.78    17256.1             6952.5    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:34]  --------------------------------------------------------------------------------
[07/14 14:03:34]  Iteration: 2 (0 solution, 1 counterexamples)
[07/14 14:03:34]  Generator returned sat in 0.011265 secs.
[07/14 14:03:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:03:34]  Improved gap from 1/800 to 100
[07/14 14:03:34]  Improved number of small numbers from 78 to 82 out of a max of 90
[07/14 14:03:34]  Verifer returned sat in 0.271770 secs.
[07/14 14:03:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7779.780273    0.099854 -7879.780273  7879.779785    0.000000             0.0000  100.000000       99.999756
1 -7779.780273    0.100098 -7879.777529  7879.779785    0.000000             0.0000   99.997256       -0.000244
2 -7479.780029  399.997500 -7779.780029  7879.779785    0.000000             0.0000  300.000000      200.000000
3 -7379.777588  400.002441 -7679.780029  7879.779785    0.002500             0.0000  299.999941      199.999941
4 -7379.777588    0.010000 -7479.780029  7879.779785    0.002500             0.0025   99.999941       99.999941
5 -6677.767529  802.010000 -7379.780273  7879.779785  602.012500             0.0025  100.000244      100.000000
6 -6677.767529    0.010000 -7361.780029  7879.779785  602.012500           602.0125   82.000000        0.000000
7 -6121.752529  638.015000 -7279.780029  7879.779785  858.027588           602.0125  299.999912      199.999912
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:03:34]  --------------------------------------------------------------------------------
[07/14 14:03:34]  Iteration: 3 (0 solution, 2 counterexamples)
[07/14 14:03:34]  Generator returned sat in 0.004430 secs.
[07/14 14:03:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:03:34]  Improved gap from 1/800 to 100
[07/14 14:03:35]  Improved number of small numbers from 50 to 60 out of a max of 90
[07/14 14:03:35]  Verifer returned sat in 0.599663 secs.
[07/14 14:03:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7598.618164    0.099609 -7698.615446  7744.615202    0.000000           0.000000   99.997282       99.997282
1 -7598.615446  100.000000 -7698.615234  7744.615202    0.000000           0.000000   99.999788        0.000000
2 -7563.939453  134.675781 -7563.942113  7744.615202    0.000000           0.000000    0.002660      -65.324007
3 -7398.612946  165.329167 -7398.615446  7744.615202    0.000000           0.000000    0.002500        0.002500
4 -6781.286279  617.329167 -7298.615479  7744.615202  417.329167           0.000000  100.000033      100.000000
5 -6781.286279    0.010000 -7298.615446  7744.615202  417.329167         417.329167  100.000000        0.000000
6 -6481.286279  400.000000 -7198.615446  7744.615202  417.329167         417.329167  300.000000      200.000000
7 -6079.286279  702.000000 -7098.615234  7744.615202  819.329102         417.329167  199.999854      100.000065
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:03:35]  --------------------------------------------------------------------------------
[07/14 14:03:35]  Iteration: 4 (0 solution, 3 counterexamples)
[07/14 14:03:35]  Generator returned sat in 0.008731 secs.
[07/14 14:03:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:35]  Improved gap from 1/400 to 100
[07/14 14:03:36]  Improved number of small numbers from 59 to 69 out of a max of 90
[07/14 14:03:36]  Verifer returned sat in 0.599173 secs.
[07/14 14:03:36]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7998.608643    0.099609 -7998.611104  7744.615234    0.00000            0.00000    0.002461        0.002461
1 -7998.608643    0.001250 -7998.611104  7744.615234    0.00000            0.00000    0.002461      -99.997539
2 -7798.609854  200.001250 -7798.611328  7744.615234    0.00000            0.00000    0.001475        0.001250
3 -7798.609854    0.001250 -7798.611104  7744.615234    0.00000            0.00000    0.001250      -99.998750
4 -7498.609854  300.001250 -7698.611104  7744.615234    0.00000            0.00000  200.001250      100.001250
5 -6948.609854  750.001250 -7498.611328  7744.615234  350.00125            0.00000  200.000225      200.000000
6 -6948.609854    0.010000 -7498.611104  7744.615234  350.00125          350.00125  200.000000      100.000000
7 -6698.599854  450.010000 -7398.611084  7744.615234  500.01123          350.00125  200.000000      100.000020
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:03:36]  --------------------------------------------------------------------------------
[07/14 14:03:36]  Iteration: 5 (0 solution, 4 counterexamples)
[07/14 14:03:36]  Generator returned sat in 0.031149 secs.
[07/14 14:03:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:36]  Improved gap from 51/2048 to 100
[07/14 14:03:36]  Improved number of small numbers from 48 to 90 out of a max of 90
[07/14 14:03:36]  Verifer returned sat in 0.305396 secs.
[07/14 14:03:36]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9431.127197     0.099609 -9531.126953  7744.61499     0.000000           0.000000   99.999756       99.999756
1 -9431.127197     0.049805 -9531.126953  7744.61499     0.000000           0.000000   99.999756       -0.000244
2 -9131.126953   400.000000 -9331.127197  7744.61499     0.000000           0.000000  200.000244      200.000000
3 -9131.077393   200.049805 -9232.126953  7744.61499     0.049561           0.000000  101.000000      100.000000
4 -8782.502686   449.574707 -9214.126953  7744.61499   248.624268           0.049561  183.000000      100.000000
5 -8132.640625   832.862061 -9041.126953  7744.61499   798.486328         248.624268  110.000000      100.000000
6 -6848.347412  1394.293213 -8931.127197  7744.61499  1882.779785         798.486328  200.000000      199.999756
7 -4806.407715  2241.939697 -8931.126953  7744.61499  3924.719238        1882.779785  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:37]  --------------------------------------------------------------------------------
[07/14 14:03:37]  Iteration: 6 (0 solution, 5 counterexamples)
[07/14 14:03:37]  Generator returned sat in 0.018668 secs.
[07/14 14:03:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:37]  Improved number of small numbers from 62 to 67 out of a max of 89
[07/14 14:03:37]  Verifer returned sat in 0.548742 secs.
[07/14 14:03:37]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9431.127441     0.099365 -9531.126953  7744.614746     0.000000           0.000000   99.999512       99.999512
1 -9431.127441     0.049805 -9523.903632  7744.614746     0.000000           0.000000   92.776191       -0.000488
2 -9131.016452   392.887180 -9331.127197  7744.614746     0.110596           0.000000  200.000149      199.999905
3 -9130.966553   200.050049 -9232.126953  7744.614746     0.160305           0.110596  101.000095      100.000095
4 -8781.391574   450.575073 -9214.126953  7744.614746   249.735379           0.160305  183.000000      100.000000
5 -8132.640625   831.750949 -9041.126953  7744.614746   798.486328         249.735379  110.000000      100.000000
6 -6849.014079  1393.626546 -8931.127197  7744.614746  1882.779541         798.486328  199.333577      199.333333
7 -4806.407959  2241.939697 -8931.126953  7744.614746  3924.718994        1882.779541  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:38]  --------------------------------------------------------------------------------
[07/14 14:03:38]  Iteration: 7 (0 solution, 6 counterexamples)
[07/14 14:03:38]  Generator returned sat in 0.015247 secs.
[07/14 14:03:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:38]  Improved gap from 407/16384 to 100
[07/14 14:03:38]  Improved number of small numbers from 29 to 90 out of a max of 90
[07/14 14:03:38]  Verifer returned sat in 0.419585 secs.
[07/14 14:03:38]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7998.448730     0.099121 -8098.448975  7744.61499     0.000000           0.000000  100.000244      100.000244
1 -7998.448730     0.024902 -7998.473633  7744.61499     0.000000           0.000000    0.024902        0.000244
2 -7998.424072     0.049561 -7998.448730  7744.61499     0.000000           0.000000    0.024658      -99.975098
3 -7698.423828   300.024902 -7852.448975  7744.61499     0.024658           0.000000  154.000488      100.000488
4 -7278.886963   573.537354 -7798.448975  7744.61499   219.562256           0.024658  299.999756      199.999756
5 -6618.068359   960.818359 -7698.448730  7744.61499   880.380371         219.562256  200.000000      100.000244
6 -5226.340820  1591.727539 -7598.448975  7744.61499  2172.107910         880.380371  200.000244      100.000244
7 -2911.249756  2515.091309 -7498.448730  7744.61499  4387.198975        2172.107910  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:38]  --------------------------------------------------------------------------------
[07/14 14:03:38]  Iteration: 8 (0 solution, 7 counterexamples)
[07/14 14:03:39]  Generator returned sat in 0.022638 secs.
[07/14 14:03:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:39]  Improved number of small numbers from 63 to 89 out of a max of 89
[07/14 14:03:39]  Verifer returned sat in 0.168369 secs.
[07/14 14:03:39]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7998.448730    0.098877 -8198.448975  7744.614746    0.000000           0.000000  200.000244      100.000244
1 -7998.448730    0.024902 -8098.448975  7744.614746    0.000000           0.000000  100.000244        0.000244
2 -7698.449219  399.999756 -7998.436523  7744.614746    0.000000           0.000000  299.987305      199.999756
3 -7698.424316  300.012207 -7798.448975  7744.614746    0.024658           0.000000  100.000000      100.000000
4 -7597.924316  200.500000 -7698.778076  7744.614746    0.524658           0.024658  100.329102      100.000000
5 -7497.917969  200.335449 -7598.778320  7744.614746    0.531006           0.524658  100.329346      100.000000
6 -7397.918213  200.329102 -7498.448975  7744.614746    0.531006           0.531006   99.999756       99.999756
7 -6797.259766  700.658203 -7498.448975  7744.614746  501.189209           0.531006  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:03:39]  --------------------------------------------------------------------------------
[07/14 14:03:39]  Iteration: 9 (0 solution, 8 counterexamples)
[07/14 14:03:39]  Generator returned sat in 0.015592 secs.
[07/14 14:03:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:39]  Improved gap from 405/16384 to 100
[07/14 14:03:39]  Improved number of small numbers from 54 to 90 out of a max of 90
[07/14 14:03:39]  Verifer returned sat in 0.239389 secs.
[07/14 14:03:39]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8098.424316     0.098633 -8198.424316  7844.590088     0.000000           0.000000  100.000000      100.000000
1 -8098.424316    99.950684 -8198.424316  7844.590088     0.000000           0.000000  100.000000        0.000000
2 -7798.424316   400.000000 -7998.424316  7844.590088     0.000000           0.000000  200.000000      200.000000
3 -7798.374756   200.049561 -7932.124023  7844.590088     0.049561           0.000000  133.699707      100.000000
4 -7598.374756   333.699707 -7798.424561  7844.590088     0.049561           0.049561  200.000244      200.000000
5 -6730.975830  1067.399170 -7798.424316  7844.590088   767.448730           0.049561  299.999756      199.999756
6 -5863.076416  1167.899170 -7698.424316  7844.590088  1535.348145         767.448730  299.999756      199.999756
7 -4877.827148  1285.249023 -7598.424316  7844.590088  2520.596924        1535.348145  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:03:40]  --------------------------------------------------------------------------------
[07/14 14:03:40]  Iteration: 10 (0 solution, 9 counterexamples)
[07/14 14:03:40]  Generator returned sat in 0.017924 secs.
[07/14 14:03:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:40]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:03:40]  Verifer returned sat in 0.115282 secs.
[07/14 14:03:40]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8098.424316     0.098633 -8198.424316  7844.590088     0.000000           0.000000  100.000000      100.000000
1 -8098.424316    99.950684 -8198.424316  7844.590088     0.000000           0.000000  100.000000        0.000000
2 -7798.424316   400.000000 -8098.424316  7844.590088     0.000000           0.000000  300.000000      200.000000
3 -7798.374756   300.049561 -7898.973877  7844.590088     0.049561           0.000000  100.549561      100.000000
4 -7598.374756   300.549561 -7798.424316  7844.590088     0.049561           0.049561  200.000000      200.000000
5 -6797.275635  1001.099121 -7698.424316  7844.590088   767.448730           0.049561  133.699951      133.699951
6 -5929.376465  1001.599121 -7698.424316  7844.590088  1535.348145         767.448730  233.699707      133.699707
7 -5160.977051  1002.099121 -7598.424316  7844.590088  2237.447266        1535.348145  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:03:40]  --------------------------------------------------------------------------------
[07/14 14:03:40]  Iteration: 11 (0 solution, 10 counterexamples)
[07/14 14:03:40]  Generator returned sat in 0.020388 secs.
[07/14 14:03:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:40]  Improved gap from 51/4096 to 100
[07/14 14:03:41]  Improved number of small numbers from 39 to 90 out of a max of 90
[07/14 14:03:41]  Verifer returned sat in 0.345877 secs.
[07/14 14:03:41]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7737.273193     0.098389 -7937.273193  7844.5896     0.000000           0.000000  200.000000      199.999756
1 -7737.273193     0.024658 -7837.272949  7844.5896     0.000000           0.000000   99.999756       99.999756
2 -7737.272949   100.000000 -7837.272949  7844.5896     0.000000           0.000000  100.000000        0.000000
3 -7737.248535   100.024414 -7737.272949  7844.5896     0.000000           0.000000    0.024414      -99.975586
4 -7337.223877   400.049072 -7637.272949  7844.5896   100.049072           0.000000  200.000000      100.000000
5 -6836.674805   700.549072 -7537.272949  7844.5896   400.598389         100.049072  299.999756      199.999756
6 -5985.625488  1151.049072 -7373.272949  7844.5896  1151.647461         400.598389  236.000000      200.000000
7 -4524.076416  1697.549072 -7337.272949  7844.5896  2513.196777        1151.647461  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:41]  --------------------------------------------------------------------------------
[07/14 14:03:41]  Iteration: 12 (0 solution, 11 counterexamples)
[07/14 14:03:41]  Generator returned sat in 0.128847 secs.
[07/14 14:03:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:41]  Improved number of small numbers from 57 to 89 out of a max of 89
[07/14 14:03:41]  Verifer returned sat in 0.185699 secs.
[07/14 14:03:41]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7937.223633     0.098145 -7937.273193  7844.5896     0.000000           0.000000    0.049561        0.049316
1 -7937.223633     0.024414 -7937.272949  7844.5896     0.000000           0.000000    0.049316      -99.950684
2 -7837.248535   100.024414 -7837.272949  7844.5896     0.000000           0.000000    0.024414      -99.975586
3 -7637.248291   200.024658 -7637.273193  7844.5896     0.000000           0.000000    0.024902        0.024658
4 -6937.223877   700.049316 -7637.272949  7844.5896   400.049072           0.000000  300.000000      200.000000
5 -5936.674561  1300.549316 -7470.272949  7844.5896  1300.598389         400.049072  233.000000      200.000000
6 -4134.625244  2035.049316 -7373.273193  7844.5896  3002.647705        1300.598389  236.000244      200.000000
7 -1807.076172  2563.549316 -7337.272949  7844.5896  5230.197021        3002.647705  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:42]  --------------------------------------------------------------------------------
[07/14 14:03:42]  Iteration: 13 (0 solution, 12 counterexamples)
[07/14 14:03:42]  Generator returned sat in 0.023165 secs.
[07/14 14:03:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:42]  Improved number of small numbers from 71 to 71 out of a max of 89
[07/14 14:03:42]  Verifer returned sat in 0.392556 secs.
[07/14 14:03:42]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7937.223633     0.098145 -8037.272949  7844.5896     0.000000           0.000000  100.049316        0.049316
1 -7937.223633     0.024414 -7937.272949  7844.5896     0.000000           0.000000    0.049316      -99.950684
2 -7837.248535   100.024414 -7837.272949  7844.5896     0.000000           0.000000    0.024414      -99.975586
3 -7637.248291   200.024658 -7637.273193  7844.5896     0.000000           0.000000    0.024902        0.024658
4 -7037.223999   600.049194 -7570.606201  7844.5896   300.048950           0.000000  233.333252      200.000000
5 -5936.674561  1333.882690 -7470.272949  7844.5896  1300.598389         300.048950  233.000000      200.000000
6 -4101.291870  2068.382690 -7373.273193  7844.5896  3035.981079        1300.598389  236.000244      200.000000
7 -1740.409424  2596.882690 -7337.272949  7844.5896  5296.863770        3035.981079  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:42]  --------------------------------------------------------------------------------
[07/14 14:03:42]  Iteration: 14 (0 solution, 13 counterexamples)
[07/14 14:03:43]  Generator returned sat in 0.026671 secs.
[07/14 14:03:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:43]  Improved gap from 401/32768 to 100
[07/14 14:03:43]  Improved number of small numbers from 58 to 90 out of a max of 90
[07/14 14:03:43]  Verifer returned sat in 0.286270 secs.
[07/14 14:03:43]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8037.224365     0.097656 -8037.273193  7844.589355     0.000000           0.000000    0.048828        0.048828
1 -8037.224365     0.024658 -8037.273193  7844.589355     0.000000           0.000000    0.048828      -99.951172
2 -7837.248779   200.024414 -7837.273193  7844.589355     0.000000           0.000000    0.024414        0.024414
3 -7837.248779     0.024414 -7837.273193  7844.589355     0.000000           0.000000    0.024414      -99.975586
4 -7437.224365   400.048828 -7737.273193  7844.589355   100.048828           0.000000  200.000000      100.000000
5 -6636.675537  1000.548828 -7550.273193  7844.589355   700.597900         100.048828  212.999756      199.999756
6 -5274.626465  1575.048828 -7439.273193  7844.589355  1962.646973         700.597900  201.999756      199.999756
7 -3105.077393  2371.548828 -7337.273438  7844.589355  4032.195801        1962.646973  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:43]  --------------------------------------------------------------------------------
[07/14 14:03:43]  Iteration: 15 (0 solution, 14 counterexamples)
[07/14 14:03:43]  Generator returned sat in 0.029047 secs.
[07/14 14:03:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:43]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/14 14:03:43]  Verifer returned sat in 0.138228 secs.
[07/14 14:03:43]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8037.267334     0.097412 -8037.273193  7844.589111     0.000000           0.000000    0.005859        0.005859
1 -8037.267334     0.003174 -8037.273193  7844.589111     0.000000           0.000000    0.005859      -99.994141
2 -7837.249023   200.024170 -7837.273193  7844.589111     0.000000           0.000000    0.024170        0.024170
3 -7837.249023     0.024170 -7837.273193  7844.589111     0.000000           0.000000    0.024170      -99.975830
4 -7437.273193   400.000000 -7737.248779  7844.589111    99.999756           0.000000  199.975830      100.000244
5 -6636.700195  1000.548828 -7550.273193  7844.589111   700.597900          99.999756  212.975098      199.975098
6 -5274.626465  1575.048828 -7439.273193  7844.589111  1962.646729         700.597900  202.000000      200.000000
7 -3105.077637  2371.548828 -7337.273682  7844.589111  4032.195801        1962.646729  200.000244      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:44]  --------------------------------------------------------------------------------
[07/14 14:03:44]  Iteration: 16 (0 solution, 15 counterexamples)
[07/14 14:03:44]  Generator returned sat in 0.035431 secs.
[07/14 14:03:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:44]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:03:44]  Verifer returned sat in 0.165788 secs.
[07/14 14:03:44]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8037.272705     0.097412 -8037.273193  7844.589111     0.000000           0.000000    0.000488        0.000488
1 -8037.272705     0.000244 -8037.273193  7844.589111     0.000000           0.000000    0.000488      -99.999512
2 -7837.272949   200.000244 -7837.273193  7844.589111     0.000000           0.000000    0.000244        0.000244
3 -7837.272949     0.000244 -7837.273193  7844.589111     0.000000           0.000000    0.000244      -99.999756
4 -7437.272949   400.000244 -7737.248779  7844.589111    99.999512           0.000000  199.976318      100.000732
5 -6636.700195  1000.549072 -7550.273193  7844.589111   700.597656          99.999512  212.975342      199.975342
6 -5274.626465  1575.049072 -7439.273193  7844.589111  1962.646729         700.597656  202.000000      200.000000
7 -3105.077393  2371.549072 -7337.273682  7844.589111  4032.195801        1962.646729  200.000488      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:44]  --------------------------------------------------------------------------------
[07/14 14:03:44]  Iteration: 17 (0 solution, 16 counterexamples)
[07/14 14:03:45]  Generator returned sat in 0.048629 secs.
[07/14 14:03:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:45]  Improved number of small numbers from 56 to 89 out of a max of 89
[07/14 14:03:45]  Verifer returned sat in 0.222426 secs.
[07/14 14:03:45]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8037.273193     0.097168 -8037.273438  7844.589111        0.0                0.0    0.000244        0.000244
1 -8037.273193     0.000244 -8037.273438  7844.589111        0.0                0.0    0.000244      -99.999756
2 -7837.273193   200.000244 -7837.273438  7844.589111        0.0                0.0    0.000244        0.000244
3 -7737.273193   100.000244 -7737.273438  7844.589111        0.0                0.0    0.000244        0.000244
4 -7487.273193   250.000244 -7737.273438  7844.589111       50.0                0.0  200.000244      100.000244
5 -6836.773193   850.500244 -7550.273438  7844.589111      600.5               50.0  113.000244      100.000244
6 -5524.773193  1425.000244 -7439.273438  7844.589111     1812.5              600.5  102.000244      100.000244
7 -3605.273193  2021.500244 -7337.274170  7844.589111     3632.0             1812.5  100.000977      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:45]  --------------------------------------------------------------------------------
[07/14 14:03:45]  Iteration: 18 (0 solution, 17 counterexamples)
[07/14 14:03:45]  Generator returned sat in 0.101477 secs.
[07/14 14:03:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:46]  Improved number of small numbers from 59 to 89 out of a max of 89
[07/14 14:03:46]  Verifer returned sat in 0.237737 secs.
[07/14 14:03:46]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8037.249023     0.097168 -8037.273682  7844.589111     0.000000           0.000000    0.024658        0.024658
1 -8037.249023     0.024170 -8037.273682  7844.589111     0.000000           0.000000    0.024658      -99.975342
2 -7637.273682   400.000000 -7837.273682  7844.589111     0.000000           0.000000  200.000000      200.000000
3 -7637.249268   200.024414 -7737.273682  7844.589111     0.024414           0.000000  100.000000      100.000000
4 -6936.724854   800.524414 -7737.273682  7844.589111   600.548584           0.024414  200.000244      100.000244
5 -5735.700684  1401.024414 -7550.273682  7844.589111  1701.572998         600.548584  113.000000      100.000000
6 -3873.176270  1975.524414 -7439.273682  7844.589111  3464.097168        1701.572998  102.000244      100.000244
7 -1403.152100  2572.024414 -7337.274414  7844.589111  5834.121338        3464.097168  100.000977      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:46]  --------------------------------------------------------------------------------
[07/14 14:03:46]  Iteration: 19 (0 solution, 18 counterexamples)
[07/14 14:03:46]  Generator returned sat in 0.065635 secs.
[07/14 14:03:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:46]  Improved number of small numbers from 35 to 89 out of a max of 89
[07/14 14:03:46]  Verifer returned sat in 0.210717 secs.
[07/14 14:03:46]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7060.273682     0.096924 -7360.273682  7067.588867     0.000000           0.000000  300.000000      200.000000
1 -7060.273682     0.024170 -7230.273682  7067.588867     0.000000           0.000000  170.000000      100.000000
2 -6860.273682   370.000000 -7129.273682  7067.588867     0.000000           0.000000  269.000000      200.000000
3 -6760.249268   369.024414 -6960.273682  7067.588867     0.024414           0.000000  200.000000      200.000000
4 -6390.724854   569.524414 -6860.273682  7067.588867   369.548340           0.024414  100.000488      100.000488
5 -5735.700928   755.024414 -6760.273682  7067.588867   924.572754         369.548340  100.000000      100.000000
6 -4895.676514   940.024414 -6760.273682  7067.588867  1664.597168         924.572754  200.000000      100.000000
7 -4055.152100  1040.524414 -6660.273438  7067.588867  2405.121338        1664.597168  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:47]  --------------------------------------------------------------------------------
[07/14 14:03:47]  Iteration: 20 (0 solution, 19 counterexamples)
[07/14 14:03:47]  Generator returned sat in 0.095504 secs.
[07/14 14:03:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:47]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:03:47]  Verifer returned sat in 0.116710 secs.
[07/14 14:03:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7060.273682    0.096924 -7360.273682  7067.588867     0.000000           0.000000  300.000000           200.0
1 -7060.273682    0.024170 -7160.273682  7067.588867     0.000000           0.000000  100.000000           100.0
2 -6860.273682  300.000000 -7160.273682  7067.588867     0.000000           0.000000  300.000000           200.0
3 -6591.249268  569.024414 -6960.273682  7067.588867   169.024414           0.000000  200.000000           200.0
4 -6221.724854  569.524414 -6860.273682  7067.588867   538.548828         169.024414  100.000000           100.0
5 -5751.700439  570.024414 -6760.273682  7067.588867   908.573242         538.548828  100.000000           100.0
6 -5281.176025  570.524414 -6760.273682  7067.588867  1279.097656         908.573242  200.000000           100.0
7 -4910.151611  571.024414 -6660.273438  7067.588867  1550.122070        1279.097656  199.999756           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:47]  --------------------------------------------------------------------------------
[07/14 14:03:47]  Iteration: 21 (0 solution, 20 counterexamples)
[07/14 14:03:48]  Generator returned sat in 0.088702 secs.
[07/14 14:03:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:48]  Improved number of small numbers from 62 to 64 out of a max of 89
[07/14 14:03:48]  Verifer returned sat in 0.459545 secs.
[07/14 14:03:48]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7060.273682     0.096680 -7260.273682  7067.588623      0.000000           0.000000  200.000000      200.000000
1 -7060.273682     0.023926 -7260.273682  7067.588623      0.000000           0.000000  200.000000      100.000000
2 -6860.273926   399.999756 -7087.273682  7067.588623      0.000000           0.000000  226.999756      199.999756
3 -6860.249512   227.024170 -6960.273682  7067.588623      0.024170           0.000000  100.000000      100.000000
4 -6019.213257   941.036255 -6860.273682  7067.588623    741.060425           0.024170  100.000000      100.000000
5 -3907.158875  2212.054382 -6760.273682  7067.588623   2753.114807         741.060425  100.000000      100.000000
6   -34.577301  3972.581573 -6760.273682  7067.588623   6425.696381        2753.114807  300.000000      200.000000
7  6024.795059  6359.372360 -6660.273682  7067.588623  12485.068604        6425.696381  200.000137      100.000137
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:48]  --------------------------------------------------------------------------------
[07/14 14:03:48]  Iteration: 22 (0 solution, 21 counterexamples)
[07/14 14:03:49]  Generator returned sat in 0.052345 secs.
[07/14 14:03:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:49]  Improved gap from 99/4096 to 100
[07/14 14:03:49]  Improved number of small numbers from 63 to 65 out of a max of 90
[07/14 14:03:49]  Verifer returned sat in 0.448422 secs.
[07/14 14:03:49]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7260.249512     0.096680 -7360.249512  7167.564453     0.000000           0.000000  100.000000      100.000000
1 -7260.249512     0.023926 -7260.273926  7167.564453     0.000000           0.000000    0.024414        0.000000
2 -7260.225586     0.048340 -7260.249512  7167.564453     0.000000           0.000000    0.023926      -99.976074
3 -6960.225342   300.024170 -7060.249512  7167.564453     0.024170           0.000000  100.000000      100.000000
4 -6609.689087   450.536255 -7060.249512  7167.564453   250.560425           0.024170  200.000000      100.000000
5 -6133.384705   676.304382 -6960.249512  7167.564453   626.864807         250.560425  200.000000      100.000000
6 -5318.428131  1014.956573 -6860.249512  7167.564453  1341.821381         626.864807  200.000000      100.000000
7 -3995.493271  1522.934860 -6760.249512  7167.564453  2564.756104        1341.821381  200.000137      100.000137
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:50]  --------------------------------------------------------------------------------
[07/14 14:03:50]  Iteration: 23 (0 solution, 22 counterexamples)
[07/14 14:03:50]  Generator returned sat in 0.079484 secs.
[07/14 14:03:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:50]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:03:50]  Verifer returned sat in 0.144939 secs.
[07/14 14:03:50]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -7360.201172     0.096680 -7360.249512  7167.564453     0.000000           0.000000    0.04834         0.04834
1 -7360.201172     0.024170 -7360.225342  7167.564453     0.000000           0.000000    0.02417       -99.95166
2 -7160.249512   199.975830 -7160.273682  7167.564453     0.000000           0.000000    0.02417         0.00000
3 -6960.225342   200.048340 -7060.249512  7167.564453     0.024170           0.000000  100.00000       100.00000
4 -6659.628662   400.596680 -7060.249512  7167.564453   200.620850           0.024170  200.00000       100.00000
5 -6057.935303   801.693359 -6960.249512  7167.564453   602.314209         200.620850  300.00000       200.00000
6 -4754.048584  1603.886719 -6860.249512  7167.564453  1806.200928         602.314209  300.00000       200.00000
7 -1845.775146  3208.273438 -6760.249512  7167.564453  4614.474365        1806.200928  300.00000       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:50]  --------------------------------------------------------------------------------
[07/14 14:03:50]  Iteration: 24 (0 solution, 23 counterexamples)
[07/14 14:03:51]  Generator returned sat in 0.068549 secs.
[07/14 14:03:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:03:51]  Improved gap from 395/16384 to 100
[07/14 14:03:52]  Improved number of small numbers from 29 to 52 out of a max of 90
[07/14 14:03:52]  Verifer returned sat in 0.854921 secs.
[07/14 14:03:52]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6157.943115     0.096436 -6257.991196  7367.506235     0.000000           0.000000  100.048081      100.048081
1 -6157.943115     0.048340 -6157.991211  7367.506235     0.000000           0.000000    0.048096        0.048081
2 -6057.943115   100.048096 -6057.991196  7367.506235     0.000000           0.000000    0.048081        0.048081
3 -5857.942979   200.048218 -6057.991196  7367.506235     0.048218           0.000000  200.000000      100.000000
4 -5557.346543   500.596436 -5857.991211  7367.506235   100.644775           0.048218  199.999893      199.999878
5 -4605.653564  1151.692871 -5857.991196  7367.506235  1052.337524         100.644775  200.000107      100.000107
6 -2401.767930  2403.885742 -5687.991196  7367.506235  3156.223267        1052.337524  130.000000      100.000000
7  2461.503555  4993.271484 -5657.990967  7367.506235  7819.494873        3156.223267  299.999648      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:52]  --------------------------------------------------------------------------------
[07/14 14:03:52]  Iteration: 25 (0 solution, 24 counterexamples)
[07/14 14:03:52]  Generator returned sat in 0.123098 secs.
[07/14 14:03:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:03:52]  Improved gap from 1/1600 to 100
[07/14 14:03:53]  Improved number of small numbers from 57 to 74 out of a max of 90
[07/14 14:03:53]  Verifer returned sat in 0.617397 secs.
[07/14 14:03:53]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6715.096680    0.096436 -6715.099121  7367.506104    0.00000            0.00000    0.002441        0.001221
1 -6715.096680    0.001465 -6715.097842  7367.506104    0.00000            0.00000    0.001162      -99.998779
2 -6615.096592  100.001250 -6615.097900  7367.506104    0.00000            0.00000    0.001309      -99.998691
3 -6315.096436  300.001465 -6515.097842  7367.506104    0.00125            0.00000  200.000156      100.000215
4 -6315.096436    0.010000 -6415.097842  7367.506104    0.00125            0.00125  100.000156        0.000215
5 -5814.076592  601.020000 -6315.097656  7367.506104  301.02125            0.00125  199.999814      100.000059
6 -5814.076592    0.010000 -6182.097842  7367.506104  301.02125          301.02125   67.000000        0.000059
7 -5214.056592  667.020000 -6115.097900  7367.506104  701.04126          301.02125  200.000049      100.000049
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:03:53]  --------------------------------------------------------------------------------
[07/14 14:03:53]  Iteration: 26 (0 solution, 25 counterexamples)
[07/14 14:03:54]  Generator returned sat in 0.328041 secs.
[07/14 14:03:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:03:54]  Improved gap from 0 to 100
[07/14 14:03:54]  Improved number of small numbers from 54 to 66 out of a max of 90
[07/14 14:03:54]  Verifer returned sat in 0.596669 secs.
[07/14 14:03:54]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6515.097900     0.096436 -6715.097900  7367.506104     0.000000           0.000000  200.000000      200.000000
1 -6515.097900     0.024170 -6715.097900  7367.506104     0.000000           0.000000  200.000000      100.000000
2 -6413.037598   302.060303 -6615.097900  7367.506104     0.000000           0.000000  202.060303      102.060303
3 -6413.037598     0.024109 -6515.097900  7367.506104     0.000000           0.000000  102.060303        2.060303
4 -6413.037598   102.036163 -6413.037628  7367.506104     0.000000           0.000000    0.000031      -97.939697
5 -6106.953247   306.084381 -6315.097900  7367.506104     8.144653           0.000000  200.000000      100.000000
6 -5546.326675   760.626572 -6115.097900  7367.506104   468.771225           8.144653  100.000000      100.000000
7 -4103.886818  1542.439857 -6115.097900  7367.506104  1811.210938         468.771225  200.000145      100.000145
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:03:55]  --------------------------------------------------------------------------------
[07/14 14:03:55]  Iteration: 27 (0 solution, 26 counterexamples)
[07/14 14:03:55]  Generator returned sat in 0.274437 secs.
[07/14 14:03:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:03:55]  Improved gap from 395/16384 to 100
[07/14 14:03:56]  Improved number of small numbers from 32 to 88 out of a max of 90
[07/14 14:03:56]  Verifer returned sat in 0.622961 secs.
[07/14 14:03:56]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6562.664307     0.096191 -6662.664062  7315.072266     0.000000           0.000000   99.999756       99.999756
1 -6562.664307     0.048340 -6662.664062  7315.072266     0.000000           0.000000   99.999756       -0.000244
2 -6314.567871   348.096191 -6462.664185  7315.072266     0.000000           0.000000  148.096313      148.096191
3 -6314.567871    46.048096 -6462.664062  7315.072266     0.000000           0.000000  148.096191       48.096191
4 -6314.567871   148.048096 -6362.664062  7315.072266     0.000000           0.000000   48.096191      -51.903809
5 -6062.615967   300.048096 -6162.664062  7315.072266     0.048096           0.000000  100.000000      100.000000
6 -5410.543701   752.072266 -6062.664062  7315.072266   452.120605           0.048096  199.999756      199.999756
7 -4080.435059  1530.108398 -6062.664062  7315.072266  1782.229004         452.120605  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:03:56]  --------------------------------------------------------------------------------
[07/14 14:03:56]  Iteration: 28 (0 solution, 27 counterexamples)
[07/14 14:03:56]  Generator returned sat in 0.080599 secs.
[07/14 14:03:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:03:57]  Improved gap from 197/8192 to 100
[07/14 14:03:57]  Improved number of small numbers from 70 to 72 out of a max of 90
[07/14 14:03:57]  Verifer returned sat in 0.381626 secs.
[07/14 14:03:57]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6762.664062     0.096191 -6762.664062  7315.072266     0.000000           0.000000    0.000000     -100.000000
1 -6562.664062   200.000000 -6662.664062  7315.072266     0.000000           0.000000  100.000000        0.000000
2 -6462.664062   200.000000 -6562.664062  7315.072266     0.000000           0.000000  100.000000        0.000000
3 -6462.664062    48.500000 -6462.664062  7315.072266     0.000000           0.000000    0.000000     -100.000000
4 -6262.664062   200.000000 -6262.712158  7315.072266     0.000000           0.000000    0.048096        0.000000
5 -5861.236206   401.475952 -6162.664062  7315.072266   201.427856           0.000000  100.000000      100.000000
6 -4957.022278  1004.213928 -6062.664062  7315.072266   905.641785         201.427856  200.000000      200.000000
7 -3248.701385  1908.320892 -6062.664062  7315.072266  2613.962646         905.641785  200.000031      100.000031
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:03:57]  --------------------------------------------------------------------------------
[07/14 14:03:57]  Iteration: 29 (0 solution, 28 counterexamples)
[07/14 14:03:58]  Generator returned sat in 0.112785 secs.
[07/14 14:03:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:03:58]  Improved number of small numbers from 43 to 89 out of a max of 89
[07/14 14:03:58]  Verifer returned sat in 0.220993 secs.
[07/14 14:03:58]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6918.986084     0.095947 -7118.985840  7315.072021     0.000000           0.000000  199.999756      199.999756
1 -6918.985840   200.000000 -7018.986084  7315.072021     0.000000           0.000000  100.000244      100.000000
2 -6918.985840    99.999756 -6919.034180  7315.072021     0.000000           0.000000    0.048340        0.000000
3 -6818.986084   100.048096 -6819.034180  7315.072266     0.000000           0.000000    0.048096        0.000000
4 -6567.510254   251.523926 -6818.985840  7315.072266    51.475830           0.000000  199.999756      100.000000
5 -6062.461914   705.048096 -6618.986084  7315.072266   356.524170          51.475830  200.000000      200.000000
6 -4550.317627  1712.144287 -6618.986084  7315.072266  1868.668457         356.524170  200.000000      100.000000
7 -1123.980957  3626.336670 -6518.985840  7315.072266  5195.004883        1868.668457  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:58]  --------------------------------------------------------------------------------
[07/14 14:03:58]  Iteration: 30 (0 solution, 29 counterexamples)
[07/14 14:03:59]  Generator returned sat in 0.063074 secs.
[07/14 14:03:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:03:59]  Improved gap from 197/4096 to 100
[07/14 14:03:59]  Improved number of small numbers from 70 to 90 out of a max of 90
[07/14 14:03:59]  Verifer returned sat in 0.210330 secs.
[07/14 14:03:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6918.986084     0.095947 -7118.985840  7315.072021     0.000000           0.000000  199.999756      199.999756
1 -6918.985840   200.000000 -7018.986084  7315.072021     0.000000           0.000000  100.000244      100.000000
2 -6918.985840    99.952148 -7017.033691  7315.072021     0.000000           0.000000   98.047852        0.000000
3 -6818.985840   198.047852 -6918.985840  7315.072021     0.000000           0.000000  100.000000        0.000000
4 -6618.937988   300.047852 -6818.985840  7315.072021     0.047852           0.000000  200.000000      100.000000
5 -6016.842041   802.095947 -6718.485352  7315.072021   402.144043           0.047852  299.499268      199.999756
6 -4411.601074  1904.740234 -6618.985840  7315.072021  2007.384766         402.144043  200.000000      100.000000
7  -500.120605  4111.480469 -6518.985840  7315.072021  5818.865234        2007.384766  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:03:59]  --------------------------------------------------------------------------------
[07/14 14:03:59]  Iteration: 31 (0 solution, 30 counterexamples)
[07/14 14:03:59]  Generator returned sat in 0.078437 secs.
[07/14 14:04:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:00]  Improved gap from 49/2048 to 100
[07/14 14:04:00]  Improved number of small numbers from 63 to 90 out of a max of 90
[07/14 14:04:00]  Verifer returned sat in 0.221455 secs.
[07/14 14:04:00]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6918.986328     0.095703 -7117.033691  7313.119629     0.000000           0.000000  198.047363      198.047363
1 -6918.986084   198.047607 -7017.033936  7313.119629     0.000000           0.000000   98.047852       98.047607
2 -6918.986084    98.000000 -7017.033691  7313.119629     0.000000           0.000000   98.047607       -1.952393
3 -6884.668457   132.365234 -6917.033691  7313.119629     0.000000           0.000000   32.365234      -67.634766
4 -6616.985840   300.047852 -6817.033691  7313.119629     0.047852           0.000000  200.000000      100.000000
5 -6014.889893   802.095947 -6717.033691  7313.119629   402.143799           0.047852  300.000000      200.000000
6 -4408.697998  1906.191895 -6606.033691  7313.119629  2008.335693         402.143799  189.000000      100.000000
7  -472.314209  4125.383789 -6517.033691  7313.119629  5844.719482        2008.335693  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:00]  --------------------------------------------------------------------------------
[07/14 14:04:00]  Iteration: 32 (0 solution, 31 counterexamples)
[07/14 14:04:00]  Generator returned sat in 0.069229 secs.
[07/14 14:04:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:01]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:01]  Verifer returned sat in 0.141024 secs.
[07/14 14:04:01]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -6917.033691     0.095703 -7117.033691  7313.119629      0.000000           0.000000    200.0           200.0
1 -6817.033691   300.000000 -7041.033691  7313.119629      0.000000           0.000000    224.0           200.0
2 -6817.033691   223.976074 -7017.033691  7313.119629      0.000000           0.000000    200.0           100.0
3 -6717.009766   300.023926 -6917.033691  7313.119629      0.023926           0.000000    200.0           100.0
4 -6114.961914   802.047852 -6817.033691  7313.119629    402.071777           0.023926    300.0           200.0
5 -4584.866211  1830.095703 -6717.033691  7313.119629   1832.167480         402.071777    300.0           200.0
6  -922.674805  3962.191406 -6606.033691  7313.119629   5494.358887        1832.167480    189.0           100.0
7  7125.708008  8237.382812 -6517.033691  7313.119629  13442.741699        5494.358887    200.0           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:01]  --------------------------------------------------------------------------------
[07/14 14:04:01]  Iteration: 33 (0 solution, 32 counterexamples)
[07/14 14:04:01]  Generator returned sat in 0.096190 secs.
[07/14 14:04:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:02]  Improved number of small numbers from 69 to 71 out of a max of 89
[07/14 14:04:02]  Verifer returned sat in 0.475950 secs.
[07/14 14:04:02]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6917.033936     0.095215 -7117.069580  7313.119385     0.000000           0.000000  200.035645      199.999756
1 -6817.034180   300.035400 -7117.033691  7313.119385     0.000000           0.000000  299.999512      199.999512
2 -6817.034180   223.976074 -7017.033691  7313.119385     0.000000           0.000000  199.999512       99.999512
3 -6617.019336   400.014355 -6917.033691  7313.119385     0.014355           0.000000  300.000000      200.000000
4 -6114.961914   802.057422 -6783.033691  7313.119385   402.071777           0.014355  266.000000      200.000000
5 -4841.875781  1539.086133 -6683.033691  7313.119385  1575.157910         402.071777  266.000000      200.000000
6 -2463.246582  2644.629199 -6606.033691  7313.119385  3953.787109        1575.157910  189.000000      100.000000
7  1627.697217  4279.943799 -6517.033691  7313.119385  7944.730713        3953.787109  200.000195      100.000195
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:02]  --------------------------------------------------------------------------------
[07/14 14:04:02]  Iteration: 34 (0 solution, 33 counterexamples)
[07/14 14:04:03]  Generator returned sat in 0.148108 secs.
[07/14 14:04:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:03]  Improved gap from 195/4096 to 100
[07/14 14:04:03]  Improved number of small numbers from 49 to 90 out of a max of 90
[07/14 14:04:03]  Verifer returned sat in 0.280554 secs.
[07/14 14:04:03]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7622.519775     0.094971 -7822.519775  8016.442871     0.000000           0.000000  200.000000           200.0
1 -7622.519775     0.047363 -7722.567383  8016.442871     0.000000           0.000000  100.047607           100.0
2 -7622.519775   100.047363 -7722.519775  8016.442871     0.000000           0.000000  100.000000             0.0
3 -7522.519775   200.000000 -7622.519775  8016.442871     0.000000           0.000000  100.000000             0.0
4 -7121.019775   501.500000 -7422.519775  8016.442871   101.500000           0.000000  200.000000           200.0
5 -6517.472168   803.547607 -7322.519775  8016.442871   605.047607         101.500000  200.000000           200.0
6 -5511.924561  1205.547607 -7322.519775  8016.442871  1610.595215         605.047607  200.000000           100.0
7 -4204.376953  1507.547607 -7222.519531  8016.442871  2718.142822        1610.595215  299.999756           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:03]  --------------------------------------------------------------------------------
[07/14 14:04:03]  Iteration: 35 (0 solution, 34 counterexamples)
[07/14 14:04:04]  Generator returned sat in 0.065150 secs.
[07/14 14:04:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:04]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:04]  Verifer returned sat in 0.125810 secs.
[07/14 14:04:04]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7622.519775     0.094971 -7822.519775  8016.442871     0.000000           0.000000  200.000000           200.0
1 -7622.519775     0.047363 -7722.567383  8016.442871     0.000000           0.000000  100.047607           100.0
2 -7622.519775   100.047363 -7722.269775  8016.442871     0.000000           0.000000   99.750000             0.0
3 -7522.519775   199.750000 -7622.519775  8016.442871     0.000000           0.000000  100.000000             0.0
4 -7121.019775   501.500000 -7422.519775  8016.442871   101.500000           0.000000  200.000000           200.0
5 -6517.472168   803.547607 -7322.519775  8016.442871   605.047607         101.500000  200.000000           200.0
6 -5512.174561  1205.297607 -7322.519775  8016.442871  1610.345215         605.047607  200.000000           100.0
7 -4204.876953  1507.297607 -7222.519531  8016.442871  2717.642822        1610.345215  299.999756           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:04]  --------------------------------------------------------------------------------
[07/14 14:04:04]  Iteration: 36 (0 solution, 35 counterexamples)
[07/14 14:04:05]  Generator returned sat in 0.098138 secs.
[07/14 14:04:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:05]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:05]  Verifer returned sat in 0.114705 secs.
[07/14 14:04:05]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7622.519775     0.094727 -7922.519775  8016.442627     0.000000           0.000000  300.000000      200.000000
1 -7622.519775     0.047363 -7822.519775  8016.442627     0.000000           0.000000  200.000000      100.000000
2 -7622.519775   100.047363 -7722.519775  8016.442627     0.000000           0.000000  100.000000        0.000000
3 -7522.520020   199.999756 -7622.519775  8016.442627     0.000000           0.000000   99.999756       -0.000244
4 -7270.520020   351.999756 -7447.745850  8016.442627    51.999756           0.000000  125.226074      100.000000
5 -6666.972412   728.773682 -7322.520020  8016.442627   555.547363          51.999756  100.000244      100.000000
6 -5636.199219  1130.773438 -7322.519775  8016.442627  1486.320557         555.547363  200.000000      100.000000
7 -4403.425781  1432.773438 -7222.519531  8016.442627  2519.094238        1486.320557  299.999512      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:05]  --------------------------------------------------------------------------------
[07/14 14:04:05]  Iteration: 37 (0 solution, 36 counterexamples)
[07/14 14:04:06]  Generator returned sat in 0.074620 secs.
[07/14 14:04:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:06]  Improved gap from 97/4096 to 100
[07/14 14:04:06]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:04:06]  Verifer returned sat in 0.132126 secs.
[07/14 14:04:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7622.520020     0.094482 -7822.543213  8016.442627     0.000000           0.000000  200.023193      199.999512
1 -7622.520020     0.047363 -7822.519531  8016.442627     0.000000           0.000000  199.999512       99.999512
2 -7622.520020   100.047119 -7722.519531  8016.442627     0.000000           0.000000   99.999512       -0.000488
3 -7422.495850   300.023682 -7622.519531  8016.442627     0.023682           0.000000  200.000000      100.000000
4 -7120.448486   502.047363 -7447.745605  8016.442627   151.879883           0.023682  175.417236      150.191162
5 -6417.044434   878.821289 -7422.519531  8016.442627   705.475098         151.879883  300.000000      200.000000
6 -5536.223145  1180.821289 -7247.555176  8016.442627  1486.296387         705.475098  225.035645      200.000000
7 -4203.473145  1557.785645 -7222.519531  8016.442627  2719.046631        1486.296387  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:06]  --------------------------------------------------------------------------------
[07/14 14:04:06]  Iteration: 38 (0 solution, 37 counterexamples)
[07/14 14:04:07]  Generator returned sat in 0.131903 secs.
[07/14 14:04:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:07]  Improved number of small numbers from 64 to 66 out of a max of 89
[07/14 14:04:07]  Verifer returned sat in 0.490941 secs.
[07/14 14:04:07]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7712.519775    0.093994 -8012.519531  8016.442627     0.000000           0.000000  299.999756      199.999756
1 -7712.519775    0.047363 -7912.519531  8016.442627     0.000000           0.000000  199.999756       99.999756
2 -7712.519775  199.976074 -7712.543213  8016.442627     0.000000           0.000000    0.023438       -0.000244
3 -7235.051807  477.491406 -7622.519531  8016.442627   277.467725           0.000000  110.000000      100.000000
4 -6714.306104  630.745703 -7512.519531  8016.442627   698.213428         277.467725  100.000000      100.000000
5 -6096.933252  717.372852 -7412.519531  8016.442627  1215.586279         698.213428  100.000000      100.000000
6 -5536.223145  660.710107 -7312.519531  8016.442627  1576.296387        1215.586279  200.000000      200.000000
7 -5093.868091  642.355054 -7312.519531  8016.442627  2018.651367        1576.296387  200.000073      100.000073
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:07]  --------------------------------------------------------------------------------
[07/14 14:04:07]  Iteration: 39 (0 solution, 38 counterexamples)
[07/14 14:04:08]  Generator returned sat in 0.169836 secs.
[07/14 14:04:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:08]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/14 14:04:08]  Verifer returned sat in 0.148623 secs.
[07/14 14:04:08]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -7712.520020    0.093750 -7958.520020  8016.442627     0.000000           0.000000    246.0      200.000000
1 -7712.520020    0.011963 -7912.520020  8016.442627     0.000000           0.000000    200.0      100.000000
2 -7712.520020  199.976074 -7786.520020  8016.442627     0.000000           0.000000     74.0        0.000000
3 -6816.306152  970.213867 -7635.520020  8016.442627   596.213867           0.000000    223.0      200.000000
4 -6714.306152  325.000000 -7512.520020  8016.442627   698.213867         596.213867    100.0      100.000000
5 -6412.306152  402.000000 -7412.520020  8016.442627   900.213867         698.213867    100.0      100.000000
6 -6136.306152  376.000000 -7312.520020  8016.442627   976.213867         900.213867    200.0      200.000000
7 -6011.306152  325.000000 -7312.519775  8016.442627  1101.213623         976.213867    200.0      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:08]  --------------------------------------------------------------------------------
[07/14 14:04:08]  Iteration: 40 (0 solution, 39 counterexamples)
[07/14 14:04:09]  Generator returned sat in 0.109539 secs.
[07/14 14:04:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:09]  Improved number of small numbers from 59 to 89 out of a max of 89
[07/14 14:04:09]  Verifer returned sat in 0.206981 secs.
[07/14 14:04:09]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7712.520020     0.093506 -7912.520020  8016.442383     0.000000           0.000000  200.000000      200.000000
1 -7712.520020     0.011963 -7912.520020  8016.442383     0.000000           0.000000  200.000000      100.000000
2 -7712.520020   199.976074 -7712.526123  8016.442383     0.000000           0.000000    0.006104        0.000000
3 -7512.514160   200.011963 -7612.520020  8016.442383     0.005859           0.000000  100.000000      100.000000
4 -7060.490234   552.023926 -7512.520020  8016.442383   252.030029           0.005859  199.999756      199.999756
5 -5954.442139  1306.047852 -7412.520264  8016.442383  1358.077881         252.030029  100.000244      100.000000
6 -3290.343750  2764.098633 -7382.520020  8016.442383  3822.176514        1358.077881  269.999756      199.999756
7  2084.853760  5645.197266 -7312.520020  8016.442383  9197.373779        3822.176514  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:10]  --------------------------------------------------------------------------------
[07/14 14:04:10]  Iteration: 41 (0 solution, 40 counterexamples)
[07/14 14:04:10]  Generator returned sat in 0.138266 secs.
[07/14 14:04:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:10]  Improved gap from 0 to 100
[07/14 14:04:11]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/14 14:04:11]  Verifer returned sat in 0.328558 secs.
[07/14 14:04:11]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2368.577393    0.093262 -2368.624268  8016.442383    0.000000           0.000000    0.046875        0.000244
1 -2368.577393    0.023438 -2368.577393  8016.442383    0.000000           0.000000    0.000000      -99.999756
2 -2268.554199  100.023193 -2268.577637  8016.442383    0.000000           0.000000    0.023438      -99.976562
3 -1968.554199  300.023438 -2168.577393  8016.442383    0.023193           0.000000  200.000000      100.000244
4 -1968.554199  102.023438 -2068.577393  8016.442383    0.023193           0.023193  100.000000        0.000244
5 -1262.507324  806.046875 -1868.577637  8016.442383  506.070312           0.023193  100.000000      100.000000
6 -1160.507324  202.000000 -1868.577393  8016.442383  508.070312         506.070312  199.999756      100.000000
7 -1160.507324  152.000000 -1768.577393  8016.442383  508.070312         508.070312   99.999756        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:04:11]  --------------------------------------------------------------------------------
[07/14 14:04:11]  Iteration: 42 (0 solution, 41 counterexamples)
[07/14 14:04:12]  Generator returned sat in 0.688210 secs.
[07/14 14:04:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:12]  Improved gap from 0 to 100
[07/14 14:04:13]  Improved number of small numbers from 27 to 37 out of a max of 90
[07/14 14:04:13]  Verifer returned sat in 0.884329 secs.
[07/14 14:04:13]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2669.618896     0.093018 -2669.665654  8317.48377     0.000000           0.000000    0.046758        0.000127
1 -2669.618896     0.023438 -2669.619023  8317.48377     0.000000           0.000000    0.000127      -99.999873
2 -2469.619023   200.000000 -2569.619023  8317.48377     0.000000           0.000000  100.000000        0.000000
3 -2469.619023     0.023315 -2469.619023  8317.48377     0.000000           0.000000    0.000000     -100.000000
4 -2067.502446   402.116577 -2369.619023  8317.48377     2.116577           0.000000  300.000000      200.000000
5 -1564.444158   803.058289 -2258.619023  8317.48377   405.174866           2.116577  289.000000      200.000000
6  -827.915013  1025.529144 -2169.619023  8317.48377  1041.704010         405.174866  300.000000      200.000000
7   -13.150441  1114.764572 -1969.619141  8317.48377  1756.468750        1041.704010  199.999949      199.999832
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:13]  --------------------------------------------------------------------------------
[07/14 14:04:13]  Iteration: 43 (0 solution, 42 counterexamples)
[07/14 14:04:14]  Generator returned sat in 0.212368 secs.
[07/14 14:04:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:14]  Improved gap from 381/8192 to 100
[07/14 14:04:14]  Improved number of small numbers from 43 to 90 out of a max of 90
[07/14 14:04:14]  Verifer returned sat in 0.294464 secs.
[07/14 14:04:14]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2873.804932    0.092773 -2873.804932  8117.493896    0.000000           0.000000    0.000000        0.000000
1 -2773.758545  100.046387 -2773.805176  8117.493896    0.000000           0.000000    0.046631        0.046387
2 -2573.805176  200.000000 -2673.804932  8117.493896    0.000000           0.000000   99.999756       99.999756
3 -2473.758545  200.046387 -2584.804932  8117.493896    0.046387           0.000000  111.000000      100.000000
4 -2338.235352  246.523193 -2573.804932  8117.493896   10.261475           0.046387  225.308105      125.308105
5 -2338.235352  225.261719 -2473.804932  8117.493896   10.261475          10.261475  125.308105       25.308105
6 -1836.281738  627.261719 -2373.804932  8117.493896  337.523193          10.261475  200.000000      100.000000
7 -1615.150879  421.130859 -2273.804932  8117.493896  458.654053         337.523193  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:14]  --------------------------------------------------------------------------------
[07/14 14:04:14]  Iteration: 44 (0 solution, 43 counterexamples)
[07/14 14:04:15]  Generator returned sat in 0.107517 secs.
[07/14 14:04:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:15]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/14 14:04:15]  Verifer returned sat in 0.165913 secs.
[07/14 14:04:15]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2638.328369    0.092773 -2638.328369  8117.493896    0.000000           0.000000    0.000000        0.000000
1 -2538.305176  100.023193 -2538.328369  8117.493896    0.000000           0.000000    0.023193        0.023193
2 -2438.305176  100.023193 -2438.328369  8117.493896    0.000000           0.000000    0.023193        0.023193
3 -2238.305176  200.023193 -2346.328125  8117.493896    0.023193           0.000000  107.999756      100.000000
4 -2098.293213  248.011719 -2338.328369  8117.493896    0.046387           0.023193  239.988770      139.988770
5 -2098.293213  226.005859 -2238.328369  8117.493896    0.046387           0.046387  139.988770       39.988770
6 -1836.281982  402.000000 -2138.328125  8117.493896  102.046143           0.046387  200.000000      100.000244
7 -1729.281982  307.000000 -2038.328125  8117.493896  109.046143         102.046143  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:16]  --------------------------------------------------------------------------------
[07/14 14:04:16]  Iteration: 45 (0 solution, 44 counterexamples)
[07/14 14:04:16]  Generator returned sat in 0.158173 secs.
[07/14 14:04:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:17]  Improved number of small numbers from 69 to 71 out of a max of 89
[07/14 14:04:17]  Verifer returned sat in 0.380849 secs.
[07/14 14:04:17]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2638.351562     0.092529 -2638.351562  8117.493896     0.000000           0.000000    0.000000        0.000000
1 -2338.351562   300.000000 -2579.351562  8117.493896     0.000000           0.000000  241.000000      200.000000
2 -2238.351807   340.999756 -2438.351562  8117.493896     0.000000           0.000000  199.999756      199.999756
3 -2238.305176   200.046387 -2338.351562  8117.493896     0.046387           0.000000  100.000000      100.000000
4 -1886.235596   452.069580 -2238.351562  8117.493896   252.115967           0.046387  100.000000      100.000000
5 -1135.631226   850.604370 -2238.351562  8117.493896   802.720337         252.115967  300.000000      200.000000
6   -57.724670  1377.906555 -2081.351562  8117.493896  1880.626892         802.720337  143.000000      100.000000
7  1996.635162  2197.359833 -2038.351562  8117.493896  3734.986816        1880.626892  299.999908      199.999908
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:17]  --------------------------------------------------------------------------------
[07/14 14:04:17]  Iteration: 46 (0 solution, 45 counterexamples)
[07/14 14:04:18]  Generator returned sat in 0.199280 secs.
[07/14 14:04:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:18]  Improved number of small numbers from 50 to 89 out of a max of 89
[07/14 14:04:18]  Verifer returned sat in 0.260483 secs.
[07/14 14:04:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -2286.281982    0.092285 -2286.281982  8117.493896    0.000000           0.000000      0.0        0.000000
1 -1986.281982  300.000000 -2186.281982  8117.493896    0.000000           0.000000    200.0      200.000000
2 -1986.281982  100.092529 -2186.281982  8117.493896    0.000000           0.000000    200.0      100.000000
3 -1886.235596  300.046387 -2086.281982  8117.493896    0.046387           0.000000    200.0      100.000000
4 -1886.235596  102.000000 -1986.281982  8117.493896    0.046387           0.046387    100.0        0.000000
5 -1482.235596  504.000000 -1886.281982  8117.493896  204.046387           0.046387    200.0      100.000000
6 -1482.235596  152.000000 -1686.281982  8117.493896  204.046387         204.046387      0.0        0.000000
7  -528.235596  954.000000 -1686.281738  8117.493896  958.046143         204.046387    200.0      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:04:18]  --------------------------------------------------------------------------------
[07/14 14:04:18]  Iteration: 47 (0 solution, 46 counterexamples)
[07/14 14:04:19]  Generator returned sat in 0.385501 secs.
[07/14 14:04:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:19]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:19]  Verifer returned sat in 0.125873 secs.
[07/14 14:04:19]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2386.281982    0.092285 -2386.281982  8117.493896    0.000000           0.000000    0.000000          -100.0
1 -1986.281982  400.000000 -2186.281982  8117.493896    0.000000           0.000000  200.000000           200.0
2 -1986.281982  100.092529 -2178.281982  8117.493896    0.000000           0.000000  192.000000           100.0
3 -1582.281738  596.000244 -2086.281982  8117.493896  204.000244           0.000000  300.000000           200.0
4 -1582.281738  152.000000 -1916.235840  8117.493896  204.000244         204.000244  129.953857           100.0
5 -1482.235596  230.000000 -1886.281982  8117.493896  204.046387         204.000244  200.000000           100.0
6 -1482.235596  148.000000 -1686.281982  8117.493896  204.046387         204.046387    0.000000             0.0
7 -1258.235596  224.000000 -1586.281982  8117.493896  228.046387         204.046387  100.000000           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:04:20]  --------------------------------------------------------------------------------
[07/14 14:04:20]  Iteration: 48 (0 solution, 47 counterexamples)
[07/14 14:04:20]  Generator returned sat in 0.296861 secs.
[07/14 14:04:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:21]  Improved number of small numbers from 33 to 89 out of a max of 89
[07/14 14:04:21]  Verifer returned sat in 0.277755 secs.
[07/14 14:04:21]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2282.316162    0.092041 -2282.316162  8013.528076   0.000000           0.000000    0.000000      -99.999756
1 -1882.316406  399.999756 -2178.339355  8013.528076   0.000000           0.000000  296.022949      200.000000
2 -1882.316406    0.011719 -2082.316406  8013.528076   0.000000           0.000000  200.000000      100.000000
3 -1782.304932  300.011475 -1883.641846  8013.528076   0.011475           0.000000  101.325439      100.000000
4 -1682.293213  201.337158 -1782.316406  8013.528076   0.023193           0.011475  100.000000      100.000000
5 -1582.281738  200.011475 -1682.316406  8013.528076   0.034424           0.023193  100.000244      100.000244
6 -1480.281982  202.000000 -1586.304688  8013.528076   0.034424           0.034424  105.988281      102.000000
7 -1382.270264  204.000000 -1582.316162  8013.528076   0.045898           0.034424  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:21]  --------------------------------------------------------------------------------
[07/14 14:04:21]  Iteration: 49 (0 solution, 48 counterexamples)
[07/14 14:04:22]  Generator returned sat in 0.141283 secs.
[07/14 14:04:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:22]  Improved number of small numbers from 44 to 89 out of a max of 89
[07/14 14:04:22]  Verifer returned sat in 0.263132 secs.
[07/14 14:04:22]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2182.310547    0.092041 -2182.310791  8013.528076   0.000000           0.000000    0.000244        0.000000
1 -1882.310791  300.000000 -2082.310791  8013.528076   0.000000           0.000000  200.000000      199.999756
2 -1882.310791    0.005859 -1982.310791  8013.528076   0.000000           0.000000  100.000000       99.999756
3 -1782.304932  200.005859 -1916.975342  8013.528076   0.005615           0.000000  134.664795      100.000000
4 -1682.299072  234.670654 -1828.530273  8013.528076   0.011475           0.005615  146.219727      100.000000
5 -1582.293213  246.225586 -1682.310791  8013.528076   0.017334           0.011475  100.000244      100.000000
6 -1407.180664  275.112793 -1659.400391  8013.528076   0.017334           0.017334  252.202393      175.112549
7 -1382.270264  277.112793 -1582.310547  8013.528076   0.022949           0.017334  200.017334      100.017334
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:22]  --------------------------------------------------------------------------------
[07/14 14:04:22]  Iteration: 50 (0 solution, 49 counterexamples)
[07/14 14:04:25]  Generator returned sat in 2.516458 secs.
[07/14 14:04:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:26]  Improved gap from 1/400 to 0
[07/14 14:04:26]  Improved number of small numbers from 71 to 84 out of a max of 90
[07/14 14:04:26]  Verifer returned sat in 0.337902 secs.
[07/14 14:04:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2182.310547    0.092041 -2382.310547  8013.527832        0.0                0.0  200.000000      200.000000
1 -2082.310547  300.000000 -2282.310547  8013.527832        0.0                0.0  200.000000      200.000000
2 -2082.310547    0.005859 -2182.310547  8013.527832        0.0                0.0  100.000000      100.000000
3 -1982.307861  200.002686 -2082.310547  8013.527832        0.0                0.0  100.002686      100.002686
4 -1982.307861    0.010000 -1982.320557  8013.527832        0.0                0.0    0.012695        0.002686
5 -1982.307861    0.010000 -1982.310547  8113.520508        0.0                0.0    0.002686       -0.004639
6 -1982.300547    0.010000 -1982.303047  8213.510742        0.0                0.0    0.002500       -0.007090
7 -1982.293047    0.010000 -1982.293213  8213.510742        0.0                0.0    0.000166      -99.999590
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:04:26]  --------------------------------------------------------------------------------
[07/14 14:04:26]  Iteration: 51 (0 solution, 50 counterexamples)
[07/14 14:04:28]  Generator returned sat in 1.572341 secs.
[07/14 14:04:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:04:29]  Improved number of small numbers from 58 to 89 out of a max of 89
[07/14 14:04:29]  Verifer returned sat in 0.218759 secs.
[07/14 14:04:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2267.311035    0.092041 -2367.311035  8013.997803        0.0                0.0  100.000000       99.999756
1 -2267.311035   99.977051 -2267.379883  8013.997803        0.0                0.0    0.068848       -0.000244
2 -1967.310791  300.069092 -2267.310791  8013.997803        0.0                0.0  300.000000      200.000000
3 -1967.310791    0.023193 -2067.310791  8013.997803        0.0                0.0  100.000000      100.000000
4 -1967.310791    0.500000 -1967.333740  8013.997803        0.0                0.0    0.022949        0.000000
5 -1966.833740    0.500000 -1966.856934  8113.520508        0.0                0.0    0.023193       -0.000244
6 -1966.356934    0.500000 -1966.379639  8213.043457        0.0                0.0    0.022705       -0.000488
7 -1965.879639    0.500000 -1965.879883  8213.043701        0.0                0.0    0.000244      -99.522949
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:04:29]  --------------------------------------------------------------------------------
[07/14 14:04:29]  Iteration: 52 (0 solution, 51 counterexamples)
[07/14 14:04:30]  Generator returned sat in 0.197047 secs.
[07/14 14:04:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:04:30]  Improved gap from 141/2048 to 100
[07/14 14:04:30]  Improved number of small numbers from 37 to 47 out of a max of 90
[07/14 14:04:30]  Verifer returned sat in 0.775802 secs.
[07/14 14:04:31]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16354.650879     0.092041 -16354.696686  8013.997803      0.000000           0.000000    0.045807        0.045807
1 -16354.650879     0.022949 -16354.696686  8013.997803      0.000000           0.000000    0.045807      -99.954193
2 -15954.696686   400.000000 -16233.696686  8013.997803      0.000000           0.000000  279.000000      200.000000
3 -15954.673676   279.023010 -16054.696686  8013.997803      0.023010           0.000000  100.000000      100.000000
4 -15345.127655   709.546021 -15954.696686  8013.997803    509.569031           0.023010  100.000000      100.000000
5 -13824.535614  1620.592041 -15854.696686  8013.997803   1930.161072         509.569031  100.000000      100.000000
6 -10492.351532  3432.184082 -15854.696686  8013.997803   5162.345154        1930.161072  200.000000      100.000000
7  -3726.483368  6965.868164 -15754.696533  8013.997803  11828.213135        5162.345154  200.000031      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:31]  --------------------------------------------------------------------------------
[07/14 14:04:31]  Iteration: 53 (0 solution, 52 counterexamples)
[07/14 14:04:32]  Generator returned sat in 0.226647 secs.
[07/14 14:04:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:04:32]  Improved number of small numbers from 55 to 89 out of a max of 89
[07/14 14:04:32]  Verifer returned sat in 0.269053 secs.
[07/14 14:04:32]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16054.696777     0.091797 -16254.696533  8013.997559     0.000000           0.000000  199.999756      199.999756
1 -16054.696777     0.046143 -16232.696533  8013.997559     0.000000           0.000000  177.999756       99.999756
2 -16054.696777     0.046143 -16054.742676  8013.997803     0.000000           0.000000    0.045898        0.000000
3 -15854.650635   200.092041 -16054.696533  8013.997803     0.046143           0.000000  199.999756      100.000000
4 -15553.466309   501.184082 -15954.696533  8013.997803   201.229980           0.046143  200.000244      100.000488
5 -14611.098389  1142.368164 -15754.696777  8013.997803  1043.598389         201.229980  100.000000      100.000000
6 -12275.339111  2435.759277 -15754.696533  8013.997803  3279.357666        1043.598389  199.999756      100.000000
7  -7452.820312  5022.518555 -15654.696533  8013.997803  7901.876465        3279.357666  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:32]  --------------------------------------------------------------------------------
[07/14 14:04:32]  Iteration: 54 (0 solution, 53 counterexamples)
[07/14 14:04:33]  Generator returned sat in 0.233968 secs.
[07/14 14:04:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:04:33]  Improved gap from 2095/1024 to 100
[07/14 14:04:34]  Improved number of small numbers from 68 to 77 out of a max of 90
[07/14 14:04:34]  Verifer returned sat in 0.531503 secs.
[07/14 14:04:34]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16054.697021     0.091797 -16254.696777  8013.997803      0.000000           0.000000  199.999756      199.999756
1 -16054.697021     0.046143 -16154.696777  8013.997803      0.000000           0.000000   99.999756       99.999756
2 -16054.697021     0.022949 -16154.696777  8013.997803      0.000000           0.000000   99.999756       -0.000244
3 -15854.673706   300.023071 -16054.696777  8013.997803      0.022949           0.000000  200.000122      100.000122
4 -15354.627686   700.046143 -15954.696533  8013.997803    300.069214           0.022949  299.999634      199.999878
5 -14154.534912  1500.092407 -15754.696777  8013.997803   1500.161865         300.069214  100.000000      100.000000
6 -11054.350098  3200.184814 -15754.696533  8013.997803   4500.346680        1500.161865  199.999756      100.000000
7  -4703.980103  6550.369751 -15654.696777  8013.997803  10750.716553        4500.346680  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:34]  --------------------------------------------------------------------------------
[07/14 14:04:34]  Iteration: 55 (0 solution, 54 counterexamples)
[07/14 14:04:35]  Generator returned sat in 0.224810 secs.
[07/14 14:04:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:04:35]  Improved number of small numbers from 71 to 73 out of a max of 89
[07/14 14:04:35]  Verifer returned sat in 0.369709 secs.
[07/14 14:04:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16054.697266     0.091553 -16254.696777  8013.997803     0.000000           0.000000  199.999512      199.999512
1 -16054.697266     0.046143 -16154.696777  8013.997803     0.000000           0.000000   99.999512       99.999512
2 -16054.697266     0.022705 -16154.696777  8013.997803     0.000000           0.000000   99.999512       -0.000488
3 -15821.340413   333.356364 -16054.696777  8013.997803    33.356364           0.000000  200.000000      100.000000
4 -15354.627686   666.712728 -15954.696777  8013.997803   300.069092          33.356364  300.000000      200.000000
5 -14321.202230  1333.425456 -15754.696777  8013.997803  1333.494548         300.069092  100.000000      100.000000
6 -11754.351318  2666.850911 -15754.696777  8013.997803  3800.345459        1333.494548  200.000000      100.000000
7  -6620.649495  5333.701823 -15654.696777  8013.997803  8834.047119        3800.345459  200.000163      100.000163
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:04:35]  --------------------------------------------------------------------------------
[07/14 14:04:35]  Iteration: 56 (0 solution, 55 counterexamples)
[07/14 14:04:36]  Generator returned sat in 0.266057 secs.
[07/14 14:04:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:37]  Improved gap from 0 to 100
[07/14 14:04:37]  Improved number of small numbers from 56 to 80 out of a max of 90
[07/14 14:04:37]  Verifer returned sat in 0.523237 secs.
[07/14 14:04:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15754.630615    0.091553 -15754.633057  7513.931396    0.000000           0.000000    0.002441        0.000000
1 -15754.630371    0.002686 -15754.630615  7513.931396    0.000000           0.000000    0.000244      -99.999756
2 -15654.628174  100.002441 -15654.630615  7513.931396    0.000000           0.000000    0.002441      -99.997559
3 -15354.627930  300.002686 -15554.630430  7513.931396    0.002686           0.000000  199.999814      100.000000
4 -15354.627930    0.010000 -15454.630615  7513.931396    0.002686           0.002686  100.000000        0.000000
5 -15003.112930  451.515000 -15254.630615  7513.931396  151.517500           0.002686  100.000186      100.000186
6 -15003.112930    0.010000 -15154.632930  7513.931396  151.517500         151.517500    0.002500        0.000186
7 -14401.604180  601.511250 -15154.630615  7513.931396  553.026367         151.517500  200.000068      100.000068
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:04:37]  --------------------------------------------------------------------------------
[07/14 14:04:37]  Iteration: 57 (0 solution, 56 counterexamples)
[07/14 14:04:38]  Generator returned sat in 0.366510 secs.
[07/14 14:04:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:38]  Improved gap from 1/550 to 100
[07/14 14:04:39]  Improved number of small numbers from 51 to 59 out of a max of 90
[07/14 14:04:39]  Verifer returned sat in 0.597090 secs.
[07/14 14:04:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15018.244873     0.091309 -15051.623811  7513.931641     0.000000           0.000000   33.378938       33.378938
1 -15018.244873    33.378906 -15018.290477  7513.931641     0.000000           0.000000    0.045604      -66.621062
2 -14951.578034    66.712443 -14951.623811  7513.931641     0.000000           0.000000    0.045776      -99.954224
3 -14851.578034   100.045776 -14851.623811  7513.931641     0.000000           0.000000    0.045776      -99.954224
4 -14350.032258   501.591553 -14751.623811  7513.931641   101.591553           0.000000  300.000000      200.000000
5 -14250.032258   400.000000 -14551.623811  7513.931641   101.591553         101.591553  200.000000      200.000000
6 -13048.532258  1401.500000 -14517.229442  7513.931641  1203.091553         101.591553  265.605632      200.000000
7 -12812.546337   501.591553 -14451.623779  7513.931641  1339.077637        1203.091553  299.999806      199.999837
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:39]  --------------------------------------------------------------------------------
[07/14 14:04:39]  Iteration: 58 (0 solution, 57 counterexamples)
[07/14 14:04:40]  Generator returned sat in 0.295405 secs.
[07/14 14:04:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:04:41]  Improved number of small numbers from 52 to 68 out of a max of 89
[07/14 14:04:41]  Verifer returned sat in 0.612055 secs.
[07/14 14:04:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15018.101074     0.091064 -15051.623811  7513.931396     0.000000           0.000000   33.522737       33.522492
1 -15018.101074    33.378662 -15018.123779  7513.931641     0.000000           0.000000    0.022705      -66.477263
2 -14951.578125    66.545654 -14951.623811  7513.931641     0.000000           0.000000    0.045686      -99.954314
3 -14851.578034   100.045776 -14851.623811  7513.931641     0.000000           0.000000    0.045776      -99.954224
4 -14349.532258   502.091553 -14751.623779  7513.931641   102.091553           0.000000  299.999969      200.000000
5 -14249.782227   399.750000 -14551.623811  7513.931641   102.091553         102.091553  199.750031      199.750031
6 -13048.032258  1401.500000 -14516.896109  7513.931641  1203.591553         102.091553  265.272298      200.000000
7 -12811.213003   502.091553 -14451.623779  7513.931641  1340.410889        1203.591553  299.999887      199.999919
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:41]  --------------------------------------------------------------------------------
[07/14 14:04:41]  Iteration: 59 (0 solution, 58 counterexamples)
[07/14 14:04:43]  Generator returned sat in 0.648106 secs.
[07/14 14:04:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:04:43]  Improved gap from 373/16384 to 100
[07/14 14:04:43]  Improved number of small numbers from 29 to 90 out of a max of 90
[07/14 14:04:43]  Verifer returned sat in 0.353231 secs.
[07/14 14:04:43]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.578369     0.090820 -15051.578125  7513.885986     0.000000            0.00000   99.999756       99.999756
1 -14951.578369     0.045654 -15051.578125  7513.885986     0.000000            0.00000   99.999756       -0.000244
2 -14851.532715   200.045410 -14851.578125  7513.885986     0.000000            0.00000    0.045410        0.045410
3 -14551.532715   300.045410 -14851.578125  7513.885986     0.045410            0.00000  300.000000      200.000000
4 -14451.532715   400.000000 -14751.578125  7513.885986   100.045410            0.04541  200.000000      100.000000
5 -14051.532715   600.000000 -14651.578125  7513.885986   300.045410          100.04541  300.000000      200.000000
6 -13951.532715   400.000000 -14551.578125  7513.885986   300.045410          300.04541  300.000000      200.000000
7 -13000.532715  1251.000000 -14451.578125  7513.885986  1151.045654          300.04541  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:43]  --------------------------------------------------------------------------------
[07/14 14:04:43]  Iteration: 60 (0 solution, 59 counterexamples)
[07/14 14:04:44]  Generator returned sat in 0.447568 secs.
[07/14 14:04:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:45]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/14 14:04:45]  Verifer returned sat in 0.150526 secs.
[07/14 14:04:45]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.578369     0.090820 -15051.578369  7513.885742     0.000000            0.00000  100.000000       99.999756
1 -14951.578369     0.045410 -15051.566650  7513.885986     0.000000            0.00000   99.988281        0.000000
2 -14851.532715   200.033936 -14851.578369  7513.885986     0.000000            0.00000    0.045654        0.045654
3 -14551.532959   300.045410 -14851.578369  7513.885986     0.045410            0.00000  300.000000      200.000000
4 -14451.532959   400.000000 -14751.578125  7513.885986   100.045410            0.04541  199.999756      100.000000
5 -14051.555664   599.977051 -14651.578369  7513.885986   300.045410          100.04541  299.977295      199.977295
6 -13951.532959   400.000000 -14551.578369  7513.885986   300.045410          300.04541  300.000000      200.000000
7 -13201.532959  1050.000000 -14451.578125  7513.885986  1050.045166          300.04541  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:45]  --------------------------------------------------------------------------------
[07/14 14:04:45]  Iteration: 61 (0 solution, 60 counterexamples)
[07/14 14:04:48]  Generator returned sat in 2.250406 secs.
[07/14 14:04:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:48]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:48]  Verifer returned sat in 0.120018 secs.
[07/14 14:04:48]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.578369     0.090820 -15151.578369  7513.885742        0.0                0.0  200.000000      100.000000
1 -14951.578369     0.045410 -15051.578369  7513.885742        0.0                0.0  100.000000        0.000000
2 -14851.532715   200.045654 -14951.578369  7513.885742        0.0                0.0  100.045654        0.045654
3 -13351.578369  1600.000000 -14851.578369  7513.885742     1200.0                0.0  300.000000      200.000000
4 -12851.578369   800.000000 -14751.578369  7513.885742     1600.0             1200.0  300.000000      200.000000
5 -12751.578369   400.000000 -14651.578369  7513.885742     1700.0             1600.0  200.000000      100.000000
6 -12751.578369   200.000000 -14551.578369  7513.885742     1700.0             1700.0  100.000000        0.000000
7 -11951.578369   900.000000 -14351.578369  7513.885742     2300.0             1700.0  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:48]  --------------------------------------------------------------------------------
[07/14 14:04:48]  Iteration: 62 (0 solution, 61 counterexamples)
[07/14 14:04:49]  Generator returned sat in 0.408575 secs.
[07/14 14:04:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:04:50]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:50]  Verifer returned sat in 0.108047 secs.
[07/14 14:04:50]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.578613     0.090576 -15151.578369  7513.885498        0.0                0.0  199.999756       99.999756
1 -14951.578613     0.045410 -15051.578369  7513.885498        0.0                0.0   99.999756       -0.000244
2 -14851.532959   200.045410 -14951.578369  7513.885498        0.0                0.0  100.045410        0.045410
3 -13351.578369  1600.000000 -14851.578369  7513.885498     1200.0                0.0  300.000000      200.000000
4 -12851.578369   800.000000 -14751.578369  7513.885498     1600.0             1200.0  300.000000      200.000000
5 -12751.578369   400.000000 -14651.578369  7513.885498     1700.0             1600.0  200.000000      100.000000
6 -12751.578369   200.000000 -14551.578369  7513.885498     1700.0             1700.0  100.000000        0.000000
7 -11851.078369  1000.500000 -14351.578613  7513.885498     2400.5             1700.0  100.000244      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:50]  --------------------------------------------------------------------------------
[07/14 14:04:50]  Iteration: 63 (0 solution, 62 counterexamples)
[07/14 14:04:51]  Generator returned sat in 0.528913 secs.
[07/14 14:04:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:04:51]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:51]  Verifer returned sat in 0.126423 secs.
[07/14 14:04:51]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.578857     0.090332 -15151.578613  7513.885498        0.0                0.0  199.999756       99.999756
1 -14951.578857     0.045410 -14984.578613  7513.885498        0.0                0.0   32.999756       -0.000244
2 -14851.555908   133.022705 -14851.578613  7513.885498        0.0                0.0    0.022705        0.022705
3 -13217.578613  1634.000000 -14851.578613  7513.885498     1334.0                0.0  300.000000      200.000000
4 -12917.578613   600.000000 -14751.578613  7513.885498     1534.0             1334.0  300.000000      200.000000
5 -12751.578613   466.000000 -14651.578613  7513.885498     1600.0             1534.0  300.000000      200.000000
6 -12651.578613   400.000000 -14514.578613  7513.885498     1600.0             1600.0  263.000000      200.000000
7 -11839.078613  1075.500000 -14351.578613  7513.885498     2412.5             1600.0  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:52]  --------------------------------------------------------------------------------
[07/14 14:04:52]  Iteration: 64 (0 solution, 63 counterexamples)
[07/14 14:04:53]  Generator returned sat in 0.513907 secs.
[07/14 14:04:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:53]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:53]  Verifer returned sat in 0.120681 secs.
[07/14 14:04:53]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.579102     0.090332 -15151.578857  7513.885498        0.0                0.0  199.999756       99.999756
1 -14951.579102     0.045166 -14984.578857  7513.885498        0.0                0.0   32.999756       -0.000244
2 -14851.556152   133.022705 -14851.578857  7513.885498        0.0                0.0    0.022705        0.022705
3 -13217.578857  1634.000000 -14851.578857  7513.885498     1334.0                0.0  300.000000      200.000000
4 -12917.578857   600.000000 -14751.578857  7513.885498     1534.0             1334.0  300.000000      200.000000
5 -12751.578857   466.000000 -14651.578857  7513.885498     1600.0             1534.0  300.000000      200.000000
6 -12651.578857   400.000000 -14514.578857  7513.885498     1600.0             1600.0  263.000000      200.000000
7 -11440.578857  1474.000000 -14351.578857  7513.885498     2811.0             1600.0  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:53]  --------------------------------------------------------------------------------
[07/14 14:04:53]  Iteration: 65 (0 solution, 64 counterexamples)
[07/14 14:04:54]  Generator returned sat in 0.243599 secs.
[07/14 14:04:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:55]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:04:55]  Verifer returned sat in 0.204246 secs.
[07/14 14:04:55]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.579346     0.090088 -15151.578857  7513.885254     0.000000           0.000000  199.999512       99.999512
1 -14951.579346     0.045166 -14984.578857  7513.885254     0.000000           0.000000   32.999512       -0.000488
2 -14851.556152   133.022705 -14851.578857  7513.885254     0.000000           0.000000    0.022705        0.022705
3 -13067.579102  1783.999756 -14851.578857  7513.885254  1483.999756           0.000000  300.000000      200.000000
4 -12917.579102   450.000000 -14751.578857  7513.885254  1533.999756        1483.999756  300.000000      200.000000
5 -12868.079102   349.500000 -14651.578857  7513.885254  1534.022461        1533.999756  249.477295      149.477295
6 -12817.556396   300.000000 -14514.578857  7513.885254  1534.022461        1534.022461  163.000000      100.000000
7 -11706.556396  1274.000000 -14351.579102  7513.885254  2545.022461        1534.022461  100.000244      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:55]  --------------------------------------------------------------------------------
[07/14 14:04:55]  Iteration: 66 (0 solution, 65 counterexamples)
[07/14 14:04:56]  Generator returned sat in 0.178061 secs.
[07/14 14:04:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:56]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/14 14:04:56]  Verifer returned sat in 0.172931 secs.
[07/14 14:04:56]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14951.579590     0.090088 -15151.579102  7513.885254     0.000000           0.000000  199.999512       99.999512
1 -14951.579590     0.045166 -14984.578857  7513.885254     0.000000           0.000000   32.999268       -0.000488
2 -14851.556396   133.022461 -14918.245768  7513.885254     0.000000           0.000000   66.689372        0.022705
3 -13067.579346  1850.666423 -14851.579102  7513.885254  1483.999756           0.000000  300.000000      200.000000
4 -12917.579346   450.000000 -14751.578857  7513.885254  1533.999756        1483.999756  299.999756      200.000000
5 -12868.079102   349.500000 -14651.579102  7513.885254  1534.022461        1533.999756  249.477539      149.477539
6 -12717.556641   400.000000 -14514.579102  7513.885254  1534.022461        1534.022461  263.000000      200.000000
7 -11706.556641  1274.000000 -14351.579346  7513.885254  2445.022461        1534.022461  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:56]  --------------------------------------------------------------------------------
[07/14 14:04:56]  Iteration: 67 (0 solution, 66 counterexamples)
[07/14 14:04:57]  Generator returned sat in 0.200054 secs.
[07/14 14:04:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:04:58]  Improved gap from 23/1024 to 100
[07/14 14:04:58]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 14:04:58]  Verifer returned sat in 0.303612 secs.
[07/14 14:04:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15001.157715    0.089600 -15001.202393  7513.885254    0.000000           0.000000    0.044678        0.044678
1 -15001.157715    0.022461 -15001.202393  7513.885254    0.000000           0.000000    0.044678      -99.955322
2 -14801.180176  200.022217 -14801.202393  7513.885254    0.000000           0.000000    0.022217        0.022217
3 -14801.179932    0.022461 -14801.202393  7513.885254    0.000000           0.000000    0.022461      -99.977539
4 -14401.179932  400.022461 -14701.202393  7513.885254    0.022461           0.000000  300.000000      200.000000
5 -14251.179932  450.000000 -14601.202393  7513.885254   50.022461           0.022461  300.000000      200.000000
6 -14251.179932  300.000000 -14501.202393  7513.885254   50.022461          50.022461  200.000000      100.000000
7 -13551.179932  900.000000 -14401.202393  7513.885254  650.022217          50.022461  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:04:58]  --------------------------------------------------------------------------------
[07/14 14:04:58]  Iteration: 68 (0 solution, 67 counterexamples)
[07/14 14:05:00]  Generator returned sat in 0.682160 secs.
[07/14 14:05:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:00]  Improved number of small numbers from 52 to 71 out of a max of 89
[07/14 14:05:00]  Verifer returned sat in 0.577476 secs.
[07/14 14:05:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15199.205078    0.089355 -15499.204893  7811.895264     0.0000             0.0000  299.999814      200.000000
1 -15199.205078    0.002686 -15299.205078  7811.895264     0.0000             0.0000  100.000000      100.000000
2 -15199.202393  100.002686 -15299.194893  7811.895264     0.0000             0.0000   99.992500        0.002686
3 -15199.202393   99.992500 -15199.204893  7811.895264     0.0000             0.0000    0.002500      -99.997314
4 -14799.212393  399.992500 -14999.205078  7811.895264    99.9925             0.0000  100.000186      100.000186
5 -14799.212393    0.010000 -14999.204893  7811.895264    99.9925            99.9925  100.000000        0.000186
6 -14599.212393  300.000000 -14808.204893  7811.895264    99.9925            99.9925  109.000000      100.000186
7 -14017.212393  691.000000 -14799.204834  7811.895264   581.9925            99.9925  199.999941      100.000186
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:00]  --------------------------------------------------------------------------------
[07/14 14:05:00]  Iteration: 69 (0 solution, 68 counterexamples)
[07/14 14:05:01]  Generator returned sat in 0.191393 secs.
[07/14 14:05:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:02]  Improved number of small numbers from 63 to 65 out of a max of 89
[07/14 14:05:02]  Verifer returned sat in 0.443445 secs.
[07/14 14:05:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15199.205322    0.089111 -15499.205078  7811.895020    0.000000             0.0000  299.999756      199.999756
1 -15199.205322    0.002686 -15299.205078  7811.895020    0.000000             0.0000   99.999756       99.999756
2 -15199.202637  100.002441 -15299.200264  7811.895020    0.000000             0.0000   99.997627        0.002441
3 -15099.216006  199.984258 -15199.204893  7811.895264    0.000000             0.0000   99.988887       -0.010684
4 -14799.212578  399.992314 -14999.205322  7811.895264   99.992500             0.0000  100.000244      100.000244
5 -14799.212578    0.010000 -14999.205078  7811.895264   99.992500            99.9925  100.000000        0.000244
6 -14599.212393  300.000186 -14808.204893  7811.895264   99.992500            99.9925  109.000000      100.000430
7 -14167.212300  541.000093 -14799.205078  7811.895264  431.992676            99.9925  200.000103      100.000347
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:02]  --------------------------------------------------------------------------------
[07/14 14:05:02]  Iteration: 70 (0 solution, 69 counterexamples)
[07/14 14:05:03]  Generator returned sat in 0.265082 secs.
[07/14 14:05:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:04]  Improved number of small numbers from 54 to 89 out of a max of 89
[07/14 14:05:04]  Verifer returned sat in 0.187141 secs.
[07/14 14:05:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15199.205322    0.089111 -15499.205322  7811.89502    0.000000           0.000000  300.000000      200.000000
1 -15199.205322    0.002686 -15299.205566  7811.89502    0.000000           0.000000  100.000244      100.000000
2 -15199.202881  100.002686 -15299.200195  7811.89502    0.000000           0.000000   99.997314        0.002441
3 -15099.215820  199.984375 -15167.205078  7811.89502    0.000000           0.000000   67.989258       -0.010498
4 -14835.204834  332.000244 -14999.205322  7811.89502   64.000488           0.000000  100.000000      100.000000
5 -14835.204834    0.010000 -14999.205078  7811.89502   64.000488          64.000488   99.999756        0.000000
6 -14635.209473  299.995117 -14835.204834  7811.89502   64.000488          64.000488  135.994873       99.995361
7 -14439.204102  332.000244 -14799.205078  7811.89502  160.001221          64.000488  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:04]  --------------------------------------------------------------------------------
[07/14 14:05:04]  Iteration: 71 (0 solution, 70 counterexamples)
[07/14 14:05:05]  Generator returned sat in 0.199554 secs.
[07/14 14:05:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:05]  Improved gap from 365/8192 to 32.8125
[07/14 14:05:06]  Improved number of small numbers from 39 to 90 out of a max of 90
[07/14 14:05:06]  Verifer returned sat in 0.541351 secs.
[07/14 14:05:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15084.888672    0.089111 -15186.451172  7812.995361        0.0                0.0  101.562500      100.044434
1 -15084.888672  101.562256 -15084.933105  7812.995361        0.0                0.0    0.044434        0.044434
2 -15084.888672    0.022217 -15084.933105  7880.182617        0.0                0.0    0.044434      -32.768311
3 -14983.415039  101.518066 -15052.076172  7911.477295        0.0                0.0   68.661133        0.000000
4 -14983.415039   67.187500 -14983.415039  7978.664795        0.0                0.0    0.000000      -32.812500
5 -14932.656006   50.759033 -14950.602539  8045.852295        0.0                0.0   17.946533      -14.865967
6 -14883.437256   67.165283 -14917.790039  8111.499512        0.0                0.0   34.352783        0.000000
7 -14850.646973   67.143066 -14882.437256  8111.499756        0.0                0.0   31.790283      -67.209473
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:05:06]  --------------------------------------------------------------------------------
[07/14 14:05:06]  Iteration: 72 (0 solution, 71 counterexamples)
[07/14 14:05:07]  Generator returned sat in 0.200018 secs.
[07/14 14:05:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:07]  Improved gap from 7997/80 to 100
[07/14 14:05:08]  Improved number of small numbers from 50 to 56 out of a max of 90
[07/14 14:05:08]  Verifer returned sat in 0.596888 secs.
[07/14 14:05:08]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15300.647285    0.089111 -15600.647285  8128.709541   0.000000             0.0000  300.000000      200.000000
1 -15300.647285    0.000732 -15400.647285  8128.709541   0.000000             0.0000  100.000000      100.000000
2 -15300.647285    0.021973 -15400.647217  8128.709541   0.000000             0.0000   99.999932        0.000000
3 -15300.647285    0.000625 -15300.647285  8128.709541   0.000000             0.0000    0.000000     -100.000000
4 -15150.646035  150.001250 -15200.647285  8128.709541   0.000000             0.0000   50.001250      -49.998750
5 -14800.644785  400.002500 -15000.647461  8128.709541   0.002500             0.0000  200.000176      200.000000
6 -14800.644785    0.010000 -14900.647285  8128.709541   0.002500             0.0025  100.000000      100.000000
7 -14700.624785  200.020000 -14900.647217  8128.709541   0.022461             0.0025  199.999971      100.000039
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:08]  --------------------------------------------------------------------------------
[07/14 14:05:08]  Iteration: 73 (0 solution, 72 counterexamples)
[07/14 14:05:10]  Generator returned sat in 0.838394 secs.
[07/14 14:05:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:10]  Improved gap from 0 to 100
[07/14 14:05:11]  Improved number of small numbers from 43 to 67 out of a max of 90
[07/14 14:05:11]  Verifer returned sat in 0.829225 secs.
[07/14 14:05:11]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15450.886719     0.088867 -15550.886675  8128.709541     0.000000           0.000000   99.999956       99.999956
1 -15450.886719     0.022461 -15550.886475  8128.709541     0.000000           0.000000   99.999756       -0.000044
2 -15350.886475   200.000000 -15450.886475  8128.709541     0.000000           0.000000  100.000000        0.000200
3 -15350.886475     0.022278 -15350.886675  8128.709541     0.000000           0.000000    0.000200      -99.999800
4 -15250.842119   100.044556 -15250.886475  8128.709541     0.000000           0.000000    0.044355      -99.955444
5 -14900.797363   350.089111 -15069.886475  8128.709541     0.000000           0.000000  169.089111      150.089312
6 -14179.208252   890.678223 -14950.886675  8128.709541   671.678223           0.000000  100.000200      100.000200
7 -13188.530229  1090.678223 -14950.886475  8128.709541  1562.356201         671.678223  200.000044      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:11]  --------------------------------------------------------------------------------
[07/14 14:05:11]  Iteration: 74 (0 solution, 73 counterexamples)
[07/14 14:05:12]  Generator returned sat in 0.495159 secs.
[07/14 14:05:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:13]  Improved number of small numbers from 35 to 89 out of a max of 89
[07/14 14:05:13]  Verifer returned sat in 0.286573 secs.
[07/14 14:05:13]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15450.886719    0.088867 -15550.886719  8128.709717    0.000000           0.000000  100.000000      100.000000
1 -15450.886719    0.021973 -15550.886719  8128.709717    0.000000           0.000000  100.000000        0.000000
2 -15350.803223  200.083496 -15450.886719  8128.709717    0.000000           0.000000  100.083496        0.083496
3 -15350.803223    0.005371 -15350.808594  8128.709717    0.000000           0.000000    0.005371      -99.916504
4 -15250.764160  100.044434 -15250.769531  8128.709717    0.000000           0.000000    0.005371      -99.877441
5 -15000.666504  250.103027 -15050.886719  8128.709717    0.000000           0.000000   50.220215       50.220215
6 -14600.783691  450.103027 -15050.886719  8128.709717  250.103027           0.000000  200.000000      100.000000
7 -14200.719727  600.063965 -14950.886719  8128.709717  550.166992         250.103027  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:13]  --------------------------------------------------------------------------------
[07/14 14:05:13]  Iteration: 75 (0 solution, 74 counterexamples)
[07/14 14:05:14]  Generator returned sat in 0.510904 secs.
[07/14 14:05:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:14]  Improved gap from 91/4096 to 100
[07/14 14:05:14]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/14 14:05:14]  Verifer returned sat in 0.192129 secs.
[07/14 14:05:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.699951    0.088867 -15500.699707  8128.709473    0.000000           0.000000   99.999756       99.999756
1 -15400.699951    0.022217 -15400.722168  8128.709473    0.000000           0.000000    0.022217       -0.000244
2 -15200.677734  200.044434 -15400.699707  8128.709473    0.000000           0.000000  200.021973      100.021973
3 -15200.677734    0.021973 -15300.699707  8128.709473    0.000000           0.000000  100.021973        0.021973
4 -15200.677734  100.021973 -15200.699707  8128.709473    0.000000           0.000000    0.021973      -99.978027
5 -15000.666504  200.033203 -15000.699707  8128.709473    0.000000           0.000000    0.033203        0.033203
6 -14600.666504  400.033203 -14900.699707  8128.709473  200.033203           0.000000  100.000000      100.000000
7 -14300.649902  400.016602 -14900.699707  8128.709473  400.049805         200.033203  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:15]  --------------------------------------------------------------------------------
[07/14 14:05:15]  Iteration: 76 (0 solution, 75 counterexamples)
[07/14 14:05:16]  Generator returned sat in 0.805584 secs.
[07/14 14:05:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:17]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:05:17]  Verifer returned sat in 0.130205 secs.
[07/14 14:05:17]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.699951    0.088867 -15500.699707  8128.709473    0.000000           0.000000   99.999756       99.999756
1 -15400.699951    0.022217 -15400.722168  8128.709473    0.000000           0.000000    0.022217       -0.000244
2 -15200.677734  200.044434 -15400.699707  8128.709473    0.000000           0.000000  200.021973      100.021973
3 -15200.677734    0.021973 -15300.699707  8128.709473    0.000000           0.000000  100.021973        0.021973
4 -15200.677734  100.021973 -15200.699707  8128.709473    0.000000           0.000000    0.021973      -99.978027
5 -15000.666504  200.033203 -15000.699707  8128.709473    0.000000           0.000000    0.033203        0.033203
6 -14600.666504  400.033203 -14900.699707  8128.709473  200.033203           0.000000  100.000000      100.000000
7 -14500.649902  200.016602 -14900.699707  8128.709473  200.049805         200.033203  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:17]  --------------------------------------------------------------------------------
[07/14 14:05:17]  Iteration: 77 (0 solution, 76 counterexamples)
[07/14 14:05:20]  Generator returned sat in 1.649726 secs.
[07/14 14:05:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:20]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/14 14:05:20]  Verifer returned sat in 0.206553 secs.
[07/14 14:05:20]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.700195     0.088379 -15500.699707  8128.708984     0.000000           0.000000   99.999512       99.999512
1 -15400.700195     0.021729 -15400.722168  8128.708984     0.000000           0.000000    0.021973       -0.000488
2 -15200.677979   200.044189 -15400.699707  8128.708984     0.000000           0.000000  200.021729      100.021729
3 -15200.677979     0.021973 -15300.699707  8128.708984     0.000000           0.000000  100.021729        0.021729
4 -15200.677734   100.021973 -15200.699707  8128.708984     0.000000           0.000000    0.021973      -99.978027
5 -15000.666504   200.033203 -15000.699707  8128.708984     0.000000           0.000000    0.033203        0.033203
6 -14600.666504   400.033203 -14900.699951  8128.708984   200.033203           0.000000  100.000244      100.000000
7 -13300.600708  1400.066040 -14900.699707  8128.708984  1300.099121         200.033203  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:20]  --------------------------------------------------------------------------------
[07/14 14:05:20]  Iteration: 78 (0 solution, 77 counterexamples)
[07/14 14:05:21]  Generator returned sat in 0.358742 secs.
[07/14 14:05:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:22]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/14 14:05:22]  Verifer returned sat in 0.223298 secs.
[07/14 14:05:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.700439     0.088379 -15500.699707  8128.70874     0.000000           0.000000   99.999268       99.999268
1 -15400.700439     0.021484 -15400.722168  8128.70874     0.000000           0.000000    0.021729       -0.000732
2 -15200.677979   200.044189 -15400.699707  8128.70874     0.000000           0.000000  200.021729      100.021729
3 -15200.677979     0.021973 -15300.699707  8128.70874     0.000000           0.000000  100.021729        0.021729
4 -15200.677734   100.021973 -15200.699707  8128.70874     0.000000           0.000000    0.021973      -99.978027
5 -15000.666504   200.033203 -15000.699707  8128.70874     0.000000           0.000000    0.033203        0.033203
6 -14600.666504   400.033203 -14900.699951  8128.70874   200.033203           0.000000  100.000244      100.000000
7 -13700.633911  1000.032837 -14900.699707  8128.70874  1000.065674         200.033203  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:22]  --------------------------------------------------------------------------------
[07/14 14:05:22]  Iteration: 79 (0 solution, 78 counterexamples)
[07/14 14:05:23]  Generator returned sat in 0.490888 secs.
[07/14 14:05:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:24]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/14 14:05:24]  Verifer returned sat in 0.212913 secs.
[07/14 14:05:24]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.700439     0.088135 -15500.699707  8128.708496     0.000000           0.000000   99.999268       99.999023
1 -15400.700439     0.021484 -15400.722168  8128.708740     0.000000           0.000000    0.021729       -0.000732
2 -15200.678223   200.043945 -15400.699707  8128.708740     0.000000           0.000000  200.021484      100.021484
3 -15200.678223     0.021973 -15300.699707  8128.708740     0.000000           0.000000  100.021484        0.021484
4 -15200.677734   100.021973 -15200.699707  8128.708740     0.000000           0.000000    0.021973      -99.978027
5 -15000.666504   200.033203 -15000.699707  8128.708740     0.000000           0.000000    0.033203        0.033203
6 -14600.666504   400.033203 -14900.699951  8128.708740   200.033203           0.000000  100.000244      100.000000
7 -13500.617310  1200.049438 -14900.699707  8128.708740  1100.082520         200.033203  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:24]  --------------------------------------------------------------------------------
[07/14 14:05:24]  Iteration: 80 (0 solution, 79 counterexamples)
[07/14 14:05:27]  Generator returned sat in 2.191434 secs.
[07/14 14:05:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:05:27]  Improved gap from 0 to 100
[07/14 14:05:27]  Improved number of small numbers from 65 to 90 out of a max of 90
[07/14 14:05:27]  Verifer returned sat in 0.224725 secs.
[07/14 14:05:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.700439    0.087891 -15400.703125  8128.709229    0.000000           0.000000    0.002686        0.001221
1 -15400.700439    0.001465 -15400.701660  8128.709229    0.000000           0.000000    0.001221      -99.998779
2 -15300.701660  100.000000 -15300.701660  8128.709229    0.000000           0.000000    0.000000     -100.000000
3 -15000.700439  300.001221 -15200.701660  8128.709229    0.001221           0.000000  200.000000      100.000000
4 -15000.700439    0.010000 -15000.702881  8128.709229    0.001221           0.001221    0.001221        0.000000
5 -14199.704102  800.997559 -14900.701904  8128.709229  600.997314           0.001221  100.000488      100.000244
6 -14199.704102    0.010000 -14900.701660  8128.709229  600.997314         600.997314  100.000244        0.000244
7 -13698.704346  601.000000 -14800.701660  8128.709229  901.997314         600.997314  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:28]  --------------------------------------------------------------------------------
[07/14 14:05:28]  Iteration: 81 (0 solution, 80 counterexamples)
[07/14 14:05:29]  Generator returned sat in 0.258272 secs.
[07/14 14:05:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:05:29]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:05:29]  Verifer returned sat in 0.116513 secs.
[07/14 14:05:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.700439    0.087891 -15400.703125  8128.709229    0.000000           0.000000    0.002686        0.001221
1 -15400.700439    0.001465 -15400.701660  8128.709229    0.000000           0.000000    0.001221      -99.998779
2 -15300.701660  100.000000 -15300.701660  8128.709229    0.000000           0.000000    0.000000     -100.000000
3 -15000.200439  300.501221 -15200.701660  8128.709229    0.501221           0.000000  200.000000      100.000000
4 -15000.200439    0.010000 -15000.702881  8128.709229    0.501221           0.501221    0.001221        0.000000
5 -14199.704102  800.497559 -14900.701904  8128.709229  600.997314           0.501221  100.000488      100.000244
6 -14199.704102    0.010000 -14900.701660  8128.709229  600.997314         600.997314  100.000244        0.000244
7 -13699.204346  600.500000 -14800.701660  8128.709229  901.497314         600.997314  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:29]  --------------------------------------------------------------------------------
[07/14 14:05:29]  Iteration: 82 (0 solution, 81 counterexamples)
[07/14 14:05:32]  Generator returned sat in 1.906585 secs.
[07/14 14:05:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:33]  Improved number of small numbers from 69 to 73 out of a max of 89
[07/14 14:05:33]  Verifer returned sat in 0.399569 secs.
[07/14 14:05:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15400.700928    0.087646 -15400.702148  8128.709229    0.000000           0.000000    0.001221        0.001221
1 -15400.700928    0.000732 -15400.701904  8128.709229    0.000000           0.000000    0.000977      -99.998779
2 -15300.701904  100.000000 -15300.701904  8128.709229    0.000000           0.000000    0.000000      -99.999756
3 -15000.200928  300.500977 -15200.701660  8128.709229    0.501221           0.000000  199.999512      100.000000
4 -15000.200928    0.010000 -15000.702209  8128.709229    0.501221           0.501221    0.000061        0.000000
5 -14200.186599  800.014390 -14900.702148  8128.709229  600.515305           0.501221  100.000244      100.000244
6 -14200.186599    0.010000 -14900.701660  8128.709229  600.515305         600.515305   99.999756        0.000244
7 -13700.171355  600.015000 -14800.702148  8128.709229  900.530762         600.515305  200.000032      100.000032
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:05:33]  --------------------------------------------------------------------------------
[07/14 14:05:33]  Iteration: 83 (0 solution, 82 counterexamples)
[07/14 14:05:36]  Generator returned sat in 1.579532 secs.
[07/14 14:05:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:36]  Improved gap from 16025/16384 to 18.75
[07/14 14:05:36]  Improved number of small numbers from 46 to 90 out of a max of 90
[07/14 14:05:36]  Verifer returned sat in 0.373720 secs.
[07/14 14:05:36]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15296.609375    0.087402 -15396.653564  8124.660400        0.0                0.0  100.044189      100.043945
1 -15296.609375    0.043701 -15296.653564  8124.660400        0.0                0.0    0.044189        0.043945
2 -15296.609375    0.043945 -15296.653320  8124.660645        0.0                0.0    0.043945      -99.955811
3 -14996.653320  300.000000 -15196.653564  8124.660645        0.0                0.0  200.000244      100.000244
4 -14996.653320  150.000000 -14996.697021  8124.660645        0.0                0.0    0.043701        0.000244
5 -14921.697021   75.000000 -14959.241211  8149.704102        0.0                0.0   37.544189        0.000000
6 -14921.697021   37.500000 -14921.697021  8230.954102        0.0                0.0    0.000000      -18.750000
7 -14902.947021   18.750000 -14902.947021  8230.954346        0.0                0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:05:36]  --------------------------------------------------------------------------------
[07/14 14:05:36]  Iteration: 84 (0 solution, 83 counterexamples)
[07/14 14:05:38]  Generator returned sat in 0.598668 secs.
[07/14 14:05:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:05:38]  Improved gap from 0 to 0
[07/14 14:05:38]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/14 14:05:38]  Verifer returned sat in 0.264823 secs.
[07/14 14:05:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14924.512695    0.087402 -15124.512695  7852.519531        0.0                0.0  200.000000      199.999756
1 -14924.512695   26.043457 -15124.512451  7852.519531        0.0                0.0  199.999756       99.999756
2 -14924.512695    0.043701 -15024.512451  7852.519531        0.0                0.0   99.999756       -0.000244
3 -14823.512451  201.000000 -14824.512451  7852.519531        0.0                0.0    1.000000        1.000000
4 -14823.512451    1.000000 -14823.556396  7950.607178        0.0                0.0    0.043945       -0.912354
5 -14822.556396    1.000000 -14822.600098  8049.650879        0.0                0.0    0.043701       -0.912598
6 -14821.600098    1.000000 -14821.643799  8148.650879        0.0                0.0    0.043701       -0.956299
7 -14820.643799    1.000000 -14820.643799  8148.650879        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:05:39]  --------------------------------------------------------------------------------
[07/14 14:05:39]  Iteration: 85 (0 solution, 84 counterexamples)
[07/14 14:05:40]  Generator returned sat in 0.315488 secs.
[07/14 14:05:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:05:40]  Improved gap from 1779/2048 to 1.5625
[07/14 14:05:40]  Improved number of small numbers from 80 to 90 out of a max of 90
[07/14 14:05:40]  Verifer returned sat in 0.223936 secs.
[07/14 14:05:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14924.512939    0.087158 -15124.512695  7852.519531        0.0                0.0  199.999756      199.999756
1 -14924.512939   26.043213 -15124.512451  7852.519531        0.0                0.0  199.999512       99.999756
2 -14924.512939    0.043457 -15024.512451  7852.519531        0.0                0.0   99.999512       -0.000244
3 -14724.490723  300.021729 -14824.512695  7852.519531        0.0                0.0  100.021973      100.021973
4 -14724.490723    2.000000 -14822.365479  7852.519531        0.0                0.0   97.874756        0.021973
5 -14724.490723    2.000000 -14724.512695  7950.956787        0.0                0.0    0.021973       -1.540771
6 -14722.512695    2.000000 -14722.949951  8049.394287        0.0                0.0    0.437256       -1.125244
7 -14720.949951    2.000000 -14721.387451  8049.394287        0.0                0.0    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:05:41]  --------------------------------------------------------------------------------
[07/14 14:05:41]  Iteration: 86 (0 solution, 85 counterexamples)
[07/14 14:05:43]  Generator returned sat in 1.058964 secs.
[07/14 14:05:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:43]  Improved gap from 7/800 to 100
[07/14 14:05:44]  Improved number of small numbers from 27 to 47 out of a max of 90
[07/14 14:05:44]  Verifer returned sat in 0.737962 secs.
[07/14 14:05:44]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15024.469482     0.087158 -15224.469482  7952.476196     0.000000           0.000000  200.000000      199.999878
1 -15024.469482    26.043213 -15124.469482  7952.476196     0.000000           0.000000  100.000000       99.999878
2 -14824.469482   300.000000 -15024.469360  7952.476196     0.000000           0.000000  199.999878      199.999878
3 -14824.425781   200.043579 -15024.469238  7952.476196     0.043457           0.000000  200.000000      100.000122
4 -14724.360413   300.065369 -14924.469360  7952.476196     0.108948           0.043457  200.000000      100.000000
5 -14474.262360   450.098053 -14824.469360  7952.476196    50.207001           0.108948  300.000000      200.000000
6 -14099.115280   675.147079 -14724.469360  7952.476196   425.354080          50.207001  200.000000      100.000000
7 -13286.394661  1012.720619 -14624.469238  7952.476196  1038.074707         425.354080  299.999870      199.999992
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:05:44]  --------------------------------------------------------------------------------
[07/14 14:05:44]  Iteration: 87 (0 solution, 86 counterexamples)
[07/14 14:05:47]  Generator returned sat in 2.044558 secs.
[07/14 14:05:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:47]  Improved gap from 7835/8192 to 50.0
[07/14 14:05:47]  Improved number of small numbers from 72 to 90 out of a max of 90
[07/14 14:05:47]  Verifer returned sat in 0.233973 secs.
[07/14 14:05:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15124.513428    0.087158 -15224.513428  7952.519531        0.0                0.0  100.000000       99.999756
1 -15124.513428   99.956299 -15174.513428  7952.519531        0.0                0.0   50.000000       -0.000244
2 -14825.426270  349.087158 -15024.513428  7952.519531        0.0                0.0  199.087158      199.086914
3 -14825.426270   50.956543 -14924.513428  7952.519531        0.0                0.0   99.087158       99.086914
4 -14825.426270   50.956543 -14825.469727  7952.519531        0.0                0.0    0.043457       -0.913086
5 -14774.513184   50.956543 -14824.513184  8002.519531        0.0                0.0   50.000000        0.000000
6 -14773.556641   50.956543 -14774.513184  8052.519531        0.0                0.0    0.956543      -49.043457
7 -14723.556641   50.956543 -14724.513184  8052.519531        0.0                0.0    0.956543      -99.043457
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:05:47]  --------------------------------------------------------------------------------
[07/14 14:05:47]  Iteration: 88 (0 solution, 87 counterexamples)
[07/14 14:05:49]  Generator returned sat in 0.917316 secs.
[07/14 14:05:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:50]  Improved gap from 357/8192 to 0
[07/14 14:05:50]  Improved number of small numbers from 59 to 90 out of a max of 90
[07/14 14:05:50]  Verifer returned sat in 0.271121 secs.
[07/14 14:05:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15024.556885    0.087158 -15324.556641  8002.519287   0.000000           0.000000  299.999756      199.999756
1 -15024.556885    0.043701 -15224.556641  8002.519287   0.000000           0.000000  199.999756       99.999756
2 -15024.556885  199.956543 -15024.600342  8002.519531   0.000000           0.000000    0.043457        0.000000
3 -14924.513184  100.087158 -14924.556885  8002.519531   0.000000           0.000000    0.043701        0.043701
4 -14724.382568  200.174316 -14825.513428  8002.519531   0.174316           0.000000  100.956543      100.000000
5 -14724.382568    1.500000 -14824.556641  8002.519531   0.174316           0.174316   99.999756        0.000000
6 -14724.382568    3.000000 -14724.556885  8102.519531   0.174316           0.174316    0.000000        0.000000
7 -14718.382568    6.000000 -14724.556641  8102.519531   0.174316           0.174316    5.999756      -94.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:05:50]  --------------------------------------------------------------------------------
[07/14 14:05:50]  Iteration: 89 (0 solution, 88 counterexamples)
[07/14 14:05:52]  Generator returned sat in 0.566708 secs.
[07/14 14:05:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:52]  Improved number of small numbers from 29 to 59 out of a max of 89
[07/14 14:05:52]  Verifer returned sat in 0.636525 secs.
[07/14 14:05:52]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14774.360596     0.086914 -14974.360596  7652.323242    0.000000           0.000000  200.000000      100.000000
1 -14774.360596     0.043457 -14774.360596  7652.323242    0.000000           0.000000    0.000000        0.000000
2 -14540.969238   233.391357 -14674.360596  7652.323242    0.000000           0.000000  133.391357      133.391357
3 -14540.969238    66.673930 -14674.360596  7652.323242    0.000000           0.000000  133.391357       33.391357
4 -14540.969238   133.347860 -14541.012919  7652.323425    0.000000           0.000000    0.043681      -66.608459
5 -14274.317200   266.695719 -14474.360779  7652.323425    0.043579           0.000000  200.000000      100.000000
6 -13939.425761   534.891439 -14374.360779  7652.323425  134.935018           0.043579  300.000000      200.000000
7 -13168.142883  1071.282878 -14274.360596  7652.323425  806.218018         134.935018  299.999695      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:05:53]  --------------------------------------------------------------------------------
[07/14 14:05:53]  Iteration: 90 (0 solution, 89 counterexamples)
[07/14 14:05:56]  Generator returned sat in 2.241568 secs.
[07/14 14:05:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:05:56]  Improved number of small numbers from 48 to 89 out of a max of 89
[07/14 14:05:56]  Verifer returned sat in 0.244405 secs.
[07/14 14:05:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14898.979980    0.086670 -15098.980225  8144.701416    0.000000           0.000000  200.000244           200.0
1 -14898.979980    0.043213 -14998.979980  8144.701416    0.000000           0.000000  100.000000           100.0
2 -14798.979980  200.000000 -14898.979980  8144.701416    0.000000           0.000000  100.000000           100.0
3 -14101.806152  797.173828 -14895.110352  8144.701416  597.173828           0.000000  196.130371           100.0
4 -13898.849609  399.086914 -14698.979980  8144.701416  700.130371         597.173828  100.000000           100.0
5 -13798.806152  200.043457 -14698.979980  8144.701416  700.173828         700.130371  200.000000           100.0
6 -13798.806152  100.521729 -14499.023438  8144.701416  700.173828         700.173828    0.043457             0.0
7 -13399.762695  399.086914 -14498.979980  8144.701416  899.217285         700.173828  200.000000           100.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:05:57]  --------------------------------------------------------------------------------
[07/14 14:05:57]  Iteration: 91 (0 solution, 90 counterexamples)
[07/14 14:06:01]  Generator returned sat in 3.222934 secs.
[07/14 14:06:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:06:02]  Improved number of small numbers from 58 to 81 out of a max of 89
[07/14 14:06:02]  Verifer returned sat in 0.490091 secs.
[07/14 14:06:02]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14898.980225     0.086426 -15098.979980  8144.701416     0.000000           0.000000  199.999756      199.999756
1 -14898.980225     0.043213 -15098.979980  8144.701416     0.000000           0.000000  199.999756       99.999756
2 -14408.480469   690.499512 -14898.979980  8144.701416   390.499512           0.000000  100.000000      100.000000
3 -14408.480469    50.000000 -14898.979980  8144.701416   390.499512         390.499512  100.000000        0.000000
4 -14108.480469   400.000000 -14798.979980  8144.701416   390.499512         390.499512  300.000000      200.000000
5 -13158.480469  1250.000000 -14698.979980  8144.701416  1340.499390         390.499512  200.000122      100.000122
6 -13158.480469     0.010000 -14574.979980  8144.701416  1340.499390        1340.499390   76.000122        0.000122
7 -12748.460591   486.020000 -14398.980225  8144.701416  1450.519531        1340.499390  200.000103      199.999858
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:02]  --------------------------------------------------------------------------------
[07/14 14:06:02]  Iteration: 92 (0 solution, 91 counterexamples)
[07/14 14:06:04]  Generator returned sat in 1.466557 secs.
[07/14 14:06:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:06:05]  Improved gap from 1/800 to 100
[07/14 14:06:05]  Improved number of small numbers from 50 to 62 out of a max of 90
[07/14 14:06:05]  Verifer returned sat in 0.838496 secs.
[07/14 14:06:05]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16316.981445     0.086182 -16316.984028  9362.70522     0.000000           0.000000    0.002583        0.002583
1 -16316.981445     0.001250 -16316.983887  9362.70522     0.000000           0.000000    0.002441      -99.997417
2 -16129.984131   186.999756 -16183.640695  9362.70522     0.000000           0.000000   53.656564      -13.000103
3 -16041.982778   141.657917 -16041.984028  9362.70522     0.000000           0.000000    0.001250      -24.998750
4 -15416.997153   624.986875 -16016.983887  9362.70522   399.986875           0.000000  199.999858      100.000000
5 -15416.997153     0.010000 -15916.984028  9362.70522   399.986875         399.986875  100.000000        0.000000
6 -15116.997153   400.000000 -15716.984028  9362.70522   399.986875         399.986875  200.000000      200.000000
7 -14229.497153  1087.500000 -15716.983887  9362.70522  1287.486816         399.986875  199.999917      100.000059
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:06]  --------------------------------------------------------------------------------
[07/14 14:06:06]  Iteration: 93 (0 solution, 92 counterexamples)
[07/14 14:06:08]  Generator returned sat in 1.531524 secs.
[07/14 14:06:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:06:08]  Improved gap from 0 to 100
[07/14 14:06:09]  Improved number of small numbers from 49 to 69 out of a max of 90
[07/14 14:06:09]  Verifer returned sat in 0.693941 secs.
[07/14 14:06:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16116.980713    0.085938 -16116.983643  9362.70522    0.000000           0.000000    0.002930        0.002690
1 -16116.980713    0.001465 -16116.980903  9362.70522    0.000000           0.000000    0.000190      -99.997310
2 -15716.983403  399.997500 -15916.983643  9362.70522    0.000000           0.000000  200.000239      200.000000
3 -15616.982178  300.001465 -15816.983403  9362.70522    0.001250           0.000000  199.999976      199.999976
4 -15616.982178    0.010000 -15816.983403  9362.70522    0.001250           0.001250  199.999976       99.999976
5 -15216.977153  600.005000 -15716.983398  9362.70522  200.006348           0.001250  299.999897      199.999902
6 -15216.977153    0.010000 -15616.983398  9362.70522  200.006348         200.006348  199.999897       99.999902
7 -15016.967041  400.010010 -15516.983398  9362.70522  300.016113         200.006348  200.000244      100.000249
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:09]  --------------------------------------------------------------------------------
[07/14 14:06:09]  Iteration: 94 (0 solution, 93 counterexamples)
[07/14 14:06:14]  Generator returned sat in 3.051464 secs.
[07/14 14:06:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:06:14]  Improved gap from 0 to 100
[07/14 14:06:14]  Improved number of small numbers from 81 to 90 out of a max of 90
[07/14 14:06:14]  Verifer returned sat in 0.202817 secs.
[07/14 14:06:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.919434    0.085693 -16265.419434  9412.662598    0.000000           0.000000  198.500000      100.021484
1 -16066.919434    0.021484 -16066.940918  9412.662598    0.000000           0.000000    0.021484        0.021484
2 -15966.897949  100.042969 -16065.419189  9412.662598    0.000000           0.000000   98.521240        0.042969
3 -15966.897949    0.021240 -15966.919434  9412.662598    0.000000           0.000000    0.021484      -99.957031
4 -15666.919434  300.000000 -15866.940918  9412.662598    0.021484           0.000000  200.000000      100.000000
5 -15466.919434  400.000000 -15766.940674  9412.662598    0.021484           0.021484  299.999756      200.000000
6 -15466.919434  299.978516 -15566.940918  9412.662598    0.021484           0.021484  100.000000      100.000000
7 -15165.440918  401.478516 -15566.940674  9412.662598  201.500000           0.021484  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:14]  --------------------------------------------------------------------------------
[07/14 14:06:14]  Iteration: 95 (0 solution, 94 counterexamples)
[07/14 14:06:16]  Generator returned sat in 0.399060 secs.
[07/14 14:06:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:06:16]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/14 14:06:16]  Verifer returned sat in 0.122877 secs.
[07/14 14:06:16]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.919678    0.085449 -16264.919678  9412.662598    0.000000           0.000000  198.000000      100.021484
1 -16066.919678    0.021484 -16066.941162  9412.662598    0.000000           0.000000    0.021484        0.021484
2 -15966.898193  100.042969 -16064.935791  9412.662598    0.000000           0.000000   98.037598        0.042969
3 -15966.898193    0.020996 -15966.919678  9412.662598    0.000000           0.000000    0.021484      -99.957031
4 -15666.919678  300.000000 -15866.941162  9412.662598    0.021484           0.000000  200.000000      100.000000
5 -15466.919678  400.000000 -15766.941162  9412.662598    0.021484           0.021484  300.000000      200.000000
6 -15466.919678  299.994629 -15567.441162  9412.662598    0.021484           0.021484  100.500000      100.000000
7 -15165.941162  401.478516 -15566.940918  9412.662598  201.000000           0.021484  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:16]  --------------------------------------------------------------------------------
[07/14 14:06:16]  Iteration: 96 (0 solution, 95 counterexamples)
[07/14 14:06:18]  Generator returned sat in 0.523854 secs.
[07/14 14:06:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:06:18]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:06:18]  Verifer returned sat in 0.150057 secs.
[07/14 14:06:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.919678    0.085449 -16265.919678  9412.662598    0.000000           0.000000  199.000000      100.021484
1 -16066.919678    0.021484 -16066.941162  9412.662598    0.000000           0.000000    0.021484        0.021484
2 -15966.898193  100.042969 -16064.935791  9412.662598    0.000000           0.000000   98.037598        0.042969
3 -15966.898193    0.020996 -15966.919678  9412.662598    0.000000           0.000000    0.021484      -99.957031
4 -15666.919678  300.000000 -15866.941162  9412.662598    0.021484           0.000000  200.000000      100.000000
5 -15466.919678  400.000000 -15766.941162  9412.662598    0.021484           0.021484  300.000000      200.000000
6 -15466.919678  298.994629 -15566.941162  9412.662598    0.021484           0.021484  100.000000      100.000000
7 -15165.941162  400.978516 -15566.940918  9412.662598  201.000000           0.021484  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:18]  --------------------------------------------------------------------------------
[07/14 14:06:18]  Iteration: 97 (0 solution, 96 counterexamples)
[07/14 14:06:20]  Generator returned sat in 0.429660 secs.
[07/14 14:06:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:20]  Improved gap from 349/8192 to 100
[07/14 14:06:20]  Improved number of small numbers from 78 to 90 out of a max of 90
[07/14 14:06:20]  Verifer returned sat in 0.194847 secs.
[07/14 14:06:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.919922    0.084961 -16166.941162  9412.662354    0.000000                0.0  100.021240      100.021240
1 -16066.919922    0.021484 -16066.941406  9412.662354    0.000000                0.0    0.021484        0.021240
2 -15866.941406  200.000000 -16066.419922  9412.662354    0.000000                0.0  199.478516       99.999756
3 -15866.941406    0.021484 -15874.941162  9412.662354    0.000000                0.0    7.999756       -0.000244
4 -15582.441162  292.500000 -15861.941406  9412.662354   84.500000                0.0  195.000244      100.000000
5 -15382.441406  395.000000 -15766.941162  9412.662354   84.500000               84.5  299.999756      199.999756
6 -15382.441406  299.978760 -15582.941162  9412.662354   84.500000               84.5  115.999756       99.999756
7 -15205.941162  292.500000 -15566.941162  9412.662354  160.999756               84.5  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:06:21]  --------------------------------------------------------------------------------
[07/14 14:06:21]  Iteration: 98 (0 solution, 97 counterexamples)
[07/14 14:06:25]  Generator returned sat in 2.909580 secs.
[07/14 14:06:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:25]  Improved gap from 87/4096 to 100
[07/14 14:06:25]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:06:25]  Verifer returned sat in 0.187085 secs.
[07/14 14:06:25]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -16066.919922      0.084961 -16166.919922  9412.662354      0.000000           0.000000  100.00000       100.00000
1 -16066.919922      0.042480 -16166.919922  9412.662354      0.000000           0.000000  100.00000         0.00000
2 -16066.877441    100.042480 -16066.919922  9412.662354      0.000000           0.000000    0.04248       -99.95752
3 -15766.877441    300.042480 -15966.919922  9412.662354      0.042480           0.000000  200.00000       100.00000
4 -15066.792480    900.084961 -15866.919922  9412.662354    600.127441           0.042480  200.00000       100.00000
5 -13016.622559   2250.169922 -15759.919922  9412.662354   2550.297363         600.127441  193.00000       100.00000
6  -8248.782715   4960.839844 -15566.919922  9412.662354   7218.137207        2550.297363  100.00000       100.00000
7   2172.896973  10521.679688 -15566.919922  9412.662354  17439.816895        7218.137207  300.00000       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:25]  --------------------------------------------------------------------------------
[07/14 14:06:25]  Iteration: 99 (0 solution, 98 counterexamples)
[07/14 14:06:27]  Generator returned sat in 0.493128 secs.
[07/14 14:06:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:27]  Improved number of small numbers from 74 to 84 out of a max of 89
[07/14 14:06:27]  Verifer returned sat in 0.349350 secs.
[07/14 14:06:27]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.920410      0.084717 -16167.045898  9412.662109      0.000000           0.000000  100.125488       99.999756
1 -16066.920410      0.041992 -16165.475098  9412.662109      0.000000           0.000000   98.554688       -0.000244
2 -16066.898926     98.576172 -16066.919922  9412.662109      0.000000           0.000000    0.020996      -99.978760
3 -15766.898682    300.021240 -15966.920166  9412.662109      0.021118           0.000000  200.000366      100.000366
4 -15066.167969    900.731079 -15866.919922  9412.662109    600.751953           0.021118  200.000000      100.000244
5 -13016.373047   2249.794922 -15759.919922  9412.662109   2550.547119         600.751953  192.999756      100.000000
6  -8248.782959   4960.589844 -15566.920166  9412.662109   7218.136963        2550.547119  100.000244      100.000244
7   2172.896484  10521.679688 -15566.919922  9412.662109  17439.816650        7218.136963  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:28]  --------------------------------------------------------------------------------
[07/14 14:06:28]  Iteration: 100 (0 solution, 99 counterexamples)
[07/14 14:06:30]  Generator returned sat in 0.551369 secs.
[07/14 14:06:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:30]  Improved gap from 403681/4096 to 100
[07/14 14:06:30]  Improved number of small numbers from 84 to 86 out of a max of 90
[07/14 14:06:30]  Verifer returned sat in 0.305699 secs.
[07/14 14:06:30]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.920410      0.084473 -16165.475098  9412.662109      0.000000           0.000000   98.554688       98.554688
1 -16066.920410      0.041748 -16165.475098  9412.662109      0.000000           0.000000   98.554688       -1.445312
2 -16065.454346    100.020752 -16065.475098  9412.662109      0.000000           0.000000    0.020752      -99.979248
3 -15765.454102    300.020996 -15965.475098  9412.662109      0.020752           0.000000  200.000244      100.000244
4 -15064.412354    901.041992 -15865.475098  9412.662109    596.518066           0.020752  204.544678      104.544678
5 -13015.873047   2253.083984 -15759.919922  9412.662109   2549.047119         596.518066  194.999756      100.554932
6  -8245.372070   4965.500732 -15566.920166  9412.662109   7220.103027        2549.047119  101.445068      100.000000
7   2183.016724  10529.833862 -15565.475098  9412.662109  17448.491943        7220.103027  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:30]  --------------------------------------------------------------------------------
[07/14 14:06:30]  Iteration: 101 (0 solution, 100 counterexamples)
[07/14 14:06:32]  Generator returned sat in 0.617472 secs.
[07/14 14:06:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:33]  Improved number of small numbers from 63 to 65 out of a max of 89
[07/14 14:06:33]  Verifer returned sat in 0.525964 secs.
[07/14 14:06:33]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.920410      0.084473 -16165.475098  9412.661865      0.000000           0.000000   98.554688       98.554688
1 -16066.920410      0.041504 -16165.141927  9412.661865      0.000000           0.000000   98.221517       -1.445312
2 -16065.204285     99.937642 -16065.225159  9412.661865      0.000000           0.000000    0.020874      -99.729187
3 -15765.454224    299.770935 -15965.475098  9412.661865      0.020874           0.000000  200.000000      100.000000
4 -15064.412354    901.041870 -15865.475098  9412.661865    596.518066           0.020874  204.544678      104.544678
5 -13015.873047   2253.083984 -15759.919922  9412.661865   2548.922028         596.518066  195.124847      100.680023
6  -8245.372070   4965.625824 -15566.920166  9412.661865   7220.103027        2548.922028  101.445068      100.000000
7   2183.766907  10530.584045 -15565.475098  9412.661865  17449.242188        7220.103027  299.999817      199.999817
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:33]  --------------------------------------------------------------------------------
[07/14 14:06:33]  Iteration: 102 (0 solution, 101 counterexamples)
[07/14 14:06:35]  Generator returned sat in 0.607774 secs.
[07/14 14:06:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:35]  Improved gap from 202155/2048 to 100
[07/14 14:06:36]  Improved number of small numbers from 60 to 60 out of a max of 90
[07/14 14:06:36]  Verifer returned sat in 0.679615 secs.
[07/14 14:06:36]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16066.920410      0.084473 -16165.475098  9412.661865      0.000000           0.000000   98.554688       98.554688
1 -16066.920410      0.041504 -16163.503881  9412.661865      0.000000           0.000000   96.583471       -1.445312
2 -16065.214722     98.289159 -16065.235596  9412.661865      0.000000           0.000000    0.020874      -99.739624
3 -15765.464661    299.770935 -15965.475098  9412.661865      0.010437           0.000000  200.000000      100.000000
4 -15063.922791    901.541870 -15865.092270  9412.661865    596.518066           0.010437  204.651413      105.034241
5 -13015.873047   2252.701157 -15759.919922  9412.661865   2549.172028         596.518066  194.874847      100.430023
6  -8245.372070   4965.375824 -15566.920166  9412.661865   7220.103027        2549.172028  101.445068      100.000000
7   2183.766907  10530.584045 -15565.475098  9412.661865  17449.242188        7220.103027  299.999817      199.999817
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:36]  --------------------------------------------------------------------------------
[07/14 14:06:36]  Iteration: 103 (0 solution, 102 counterexamples)
[07/14 14:06:38]  Generator returned sat in 0.978349 secs.
[07/14 14:06:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:38]  Improved gap from 403541/6144 to 100
[07/14 14:06:39]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 14:06:39]  Verifer returned sat in 0.220300 secs.
[07/14 14:06:39]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16126.750977    0.084229 -16230.771729  9412.661621    0.000000           0.000000  104.020752      100.020752
1 -16126.750977    0.041504 -16226.771729  9412.661621    0.000000           0.000000  100.020752        0.020752
2 -16126.750977    0.020508 -16126.771729  9412.661621    0.000000           0.000000    0.020752      -99.979248
3 -15826.750977  300.020752 -15928.771729  9412.661621    0.020752           0.000000  102.000000      100.000000
4 -15474.250977  454.500000 -15826.771729  9412.661621  252.520508           0.020752  100.000244      100.000244
5 -14972.751221  601.500000 -15826.771729  9412.661621  654.020508         252.520508  200.000000      100.000000
6 -14721.251221  451.500000 -15626.771729  9412.661621  705.520508         654.020508  200.000000      200.000000
7 -14466.751221  454.500000 -15626.771729  9412.661621  960.020508         705.520508  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:39]  --------------------------------------------------------------------------------
[07/14 14:06:39]  Iteration: 104 (0 solution, 103 counterexamples)
[07/14 14:06:41]  Generator returned sat in 0.542282 secs.
[07/14 14:06:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:41]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:06:41]  Verifer returned sat in 0.169272 secs.
[07/14 14:06:41]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16126.750977    0.084229 -16262.771729  9412.661621    0.000000           0.000000  136.020752      100.020752
1 -16126.750977    0.041504 -16226.771729  9412.661621    0.000000           0.000000  100.020752        0.020752
2 -16126.750977    0.020508 -16126.771729  9412.661621    0.000000           0.000000    0.020752      -99.979248
3 -15826.750977  300.020752 -15946.771729  9412.661621    0.020752           0.000000  120.000000      100.000000
4 -15472.250977  474.500000 -15826.771729  9412.661621  254.520508           0.020752  100.000244      100.000244
5 -14971.751221  600.500000 -15826.771729  9412.661621  655.020508         254.520508  200.000000      100.000000
6 -14721.251221  450.500000 -15626.771729  9412.661621  705.520508         655.020508  200.000000      200.000000
7 -14440.751221  480.500000 -15626.771729  9412.661621  986.020508         705.520508  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:41]  --------------------------------------------------------------------------------
[07/14 14:06:41]  Iteration: 105 (0 solution, 104 counterexamples)
[07/14 14:06:43]  Generator returned sat in 0.490214 secs.
[07/14 14:06:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:43]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/14 14:06:43]  Verifer returned sat in 0.153704 secs.
[07/14 14:06:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16126.750977    0.084229 -16263.105062  9412.661621    0.000000           0.000000  136.354085      100.020752
1 -16126.750977    0.041504 -16226.771729  9412.661621    0.000000           0.000000  100.020752        0.020752
2 -16126.750977    0.020508 -16126.771729  9412.661621    0.000000           0.000000    0.020752      -99.979248
3 -15825.751465  301.020264 -15946.771729  9412.661621    1.020264           0.000000  120.000000      100.000000
4 -15471.251465  474.500000 -15826.771729  9412.661621  255.520264           1.020264  100.000000      100.000000
5 -14971.251465  600.000000 -15826.771729  9412.661621  655.520264         255.520264  200.000000      100.000000
6 -14721.251465  450.000000 -15626.771729  9412.661621  705.520264         655.520264  200.000000      200.000000
7 -14441.251465  480.000000 -15626.771729  9412.661621  985.520264         705.520264  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:43]  --------------------------------------------------------------------------------
[07/14 14:06:43]  Iteration: 106 (0 solution, 105 counterexamples)
[07/14 14:06:45]  Generator returned sat in 0.519359 secs.
[07/14 14:06:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:45]  Improved gap from 345/8192 to 100
[07/14 14:06:47]  Improved number of small numbers from 24 to 34 out of a max of 90
[07/14 14:06:47]  Verifer returned sat in 1.146744 secs.
[07/14 14:06:47]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14474.071777     0.083984 -14474.114066  7660.003715     0.000000           0.000000    0.042289        0.042289
1 -14474.071777     0.021240 -14474.114066  7660.003715     0.000000           0.000000    0.042289      -99.957711
2 -14074.114066   400.000000 -14274.114066  7660.003715     0.000000           0.000000  200.000000      200.000000
3 -14074.093009   200.021057 -14274.114066  7660.003715     0.021057           0.000000  200.000000      100.000000
4 -13674.061423   600.031586 -14174.114066  7660.003715   200.052643           0.021057  300.000000      200.000000
5 -12624.014045  1350.047379 -13999.114066  7660.003715  1150.100021         200.052643  225.000000      200.000000
6 -10411.442977  2437.571068 -13874.114066  7660.003715  3362.671089        1150.100021  100.000000      100.000000
7  -6255.086375  4256.356602 -13874.114014  7660.003715  7419.027588        3362.671089  200.000051      100.000103
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:47]  --------------------------------------------------------------------------------
[07/14 14:06:47]  Iteration: 107 (0 solution, 106 counterexamples)
[07/14 14:06:51]  Generator returned sat in 2.598616 secs.
[07/14 14:06:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:06:51]  Improved gap from 107735/8192 to 100
[07/14 14:06:52]  Improved number of small numbers from 35 to 41 out of a max of 90
[07/14 14:06:52]  Verifer returned sat in 1.013057 secs.
[07/14 14:06:52]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18239.668457     0.083984 -18239.668559  7660.003662     0.000000           0.000000    0.000102        0.000102
1 -18039.668559   200.000000 -18139.668559  7660.003662     0.000000           0.000000  100.000000      100.000000
2 -18039.668559   100.000000 -18139.668559  7660.003662     0.000000           0.000000  100.000000        0.000000
3 -17746.066056   393.602503 -18032.668559  7660.003662    93.602503           0.000000  193.000000      100.000000
4 -17037.662302   901.403754 -17839.668559  7660.003662   702.006257          93.602503  100.000000      100.000000
5 -15335.056670  1802.605632 -17825.668559  7660.003662  2304.611889         702.006257  186.000000      100.000000
6 -12345.648223  3175.408447 -17739.668559  7660.003662  5094.020336        2304.611889  300.000000      200.000000
7  -7442.535552  5203.112671 -17639.668457  7660.003662  9897.133057        5094.020336  299.999848      199.999950
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:06:52]  --------------------------------------------------------------------------------
[07/14 14:06:52]  Iteration: 108 (0 solution, 107 counterexamples)
[07/14 14:07:02]  Generator returned sat in 8.823642 secs.
[07/14 14:07:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:07:04]  Improved number of small numbers from 34 to 38 out of a max of 89
[07/14 14:07:04]  Verifer returned sat in 1.254576 secs.
[07/14 14:07:04]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18239.668457     0.083984 -18239.668559  7560.003662     0.000000           0.000000    0.000102      -99.999898
1 -17939.668559   300.000000 -18139.668559  7560.003662     0.000000           0.000000  200.000000      100.000000
2 -17939.668559   199.999756 -18006.668559  7560.003662     0.000000           0.000000   67.000000        0.000000
3 -17739.668508   267.000051 -17858.668559  7560.003662     0.000051           0.000000  119.000000      100.000000
4 -17152.168483   706.500025 -17739.668559  7560.003662   387.500076           0.000051  200.000000      200.000000
5 -16397.418470   954.750013 -17639.668559  7560.003662  1042.250089         387.500076  200.000000      200.000000
6 -15568.043463  1029.375006 -17539.668559  7560.003662  1771.625096        1042.250089  200.000000      200.000000
7 -14773.355960   994.687503 -17539.668457  7560.003662  2566.312500        1771.625096  199.999997      100.000099
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:04]  --------------------------------------------------------------------------------
[07/14 14:07:04]  Iteration: 109 (0 solution, 108 counterexamples)
[07/14 14:07:07]  Generator returned sat in 1.480403 secs.
[07/14 14:07:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:07:07]  Improved gap from 43/2048 to 100
[07/14 14:07:07]  Improved number of small numbers from 71 to 90 out of a max of 90
[07/14 14:07:07]  Verifer returned sat in 0.211413 secs.
[07/14 14:07:07]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18023.372314    0.083740 -18223.372559  7560.003662    0.000000                0.0  200.000244      100.021240
1 -18023.372314    1.062744 -18023.393555  7560.003662    0.000000                0.0    0.021240        0.021240
2 -17923.351562  100.041992 -18023.393437  7560.003662    0.000000                0.0  100.041875        0.041992
3 -17923.351562    0.020996 -17923.372559  7560.003662    0.000000                0.0    0.020996      -99.958008
4 -17622.372559  301.000000 -17823.393555  7560.003662    0.000000                0.0  201.020996      101.020996
5 -17622.372559  201.000000 -17674.393437  7560.003662    0.000000                0.0   52.020879        1.020996
6 -17324.393437  350.000000 -17623.393555  7560.003662   99.000000                0.0  200.000117      100.000117
7 -16898.925049  625.468506 -17423.393555  7560.003662  424.468506               99.0  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:07:07]  --------------------------------------------------------------------------------
[07/14 14:07:07]  Iteration: 110 (0 solution, 109 counterexamples)
[07/14 14:07:11]  Generator returned sat in 1.833880 secs.
[07/14 14:07:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:07:11]  Improved gap from 343/16384 to 100
[07/14 14:07:11]  Improved number of small numbers from 58 to 66 out of a max of 90
[07/14 14:07:11]  Verifer returned sat in 0.490054 secs.
[07/14 14:07:11]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18123.351562    0.083496 -18123.393555  7560.003662     0.000000           0.000000    0.041992        0.041992
1 -18123.351562    0.020996 -18123.393555  7560.003662     0.000000           0.000000    0.041992      -99.958008
2 -17823.393799  299.999756 -17923.393555  7560.003662     0.000000           0.000000   99.999756       99.999756
3 -17823.393799    0.020935 -17923.393555  7560.003662     0.000000           0.000000   99.999756       -0.000244
4 -17722.372620  201.020935 -17723.393555  7560.003662     0.000000           0.000000    1.020935        1.020935
5 -17121.372620  602.020935 -17723.393555  7560.003662   302.020935           0.000000  300.000000      200.000000
6 -16819.862152  601.510468 -17623.393555  7560.003662   603.531403         302.020935  200.000000      100.000000
7 -16268.606918  751.255234 -17423.393555  7560.003662  1054.786621         603.531403  100.000015      100.000015
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:11]  --------------------------------------------------------------------------------
[07/14 14:07:11]  Iteration: 111 (0 solution, 110 counterexamples)
[07/14 14:07:13]  Generator returned sat in 0.662924 secs.
[07/14 14:07:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:07:14]  Improved gap from 0 to 100
[07/14 14:07:14]  Improved number of small numbers from 54 to 58 out of a max of 90
[07/14 14:07:14]  Verifer returned sat in 0.628553 secs.
[07/14 14:07:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18223.351807    0.083252 -18223.351807  7560.003662     0.000000           0.000000    0.000000        0.000000
1 -18123.351807  100.000000 -18123.393555  7560.003662     0.000000           0.000000    0.041748        0.000000
2 -18123.351807    0.020996 -18123.351807  7560.003662     0.000000           0.000000    0.000000     -100.000000
3 -17723.330933  400.020874 -18023.351807  7560.003662     0.020874           0.000000  300.000000      200.000000
4 -17522.820496  500.510437 -17923.351807  7560.003662   100.531311           0.020874  300.000000      200.000000
5 -17272.002655  550.817841 -17823.351807  7560.003662   351.349152         100.531311  200.000000      100.000000
6 -16746.093735  725.908920 -17714.351807  7560.003662   777.258072         351.349152  191.000000      100.000000
7 -16110.139275  826.954460 -17623.351807  7560.003662  1213.212646         777.258072  299.999886      199.999886
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:14]  --------------------------------------------------------------------------------
[07/14 14:07:14]  Iteration: 112 (0 solution, 111 counterexamples)
[07/14 14:07:17]  Generator returned sat in 0.722842 secs.
[07/14 14:07:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:07:17]  Improved gap from 341/32768 to 100
[07/14 14:07:18]  Improved number of small numbers from 33 to 39 out of a max of 90
[07/14 14:07:18]  Verifer returned sat in 0.814333 secs.
[07/14 14:07:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19123.070801    0.083008 -19123.070831  7560.003662     0.000000           0.000000    0.000031        0.000031
1 -19023.070831  100.000000 -19123.070831  7560.003662     0.000000           0.000000  100.000000        0.000000
2 -18923.070831  200.000000 -19023.070831  7560.003662     0.000000           0.000000  100.000000        0.000000
3 -18723.029205  300.041626 -18823.070831  7560.003662     0.041626           0.000000  100.000000      100.000000
4 -18222.008392  601.020813 -18763.070831  7560.003662   301.062439           0.041626  240.000000      200.000000
5 -17620.497986  841.510406 -18643.070831  7560.003662   802.572845         301.062439  220.000000      200.000000
6 -16848.742783  991.755203 -18623.070831  7560.003662  1474.328049         802.572845  300.000000      200.000000
7 -16351.865181  796.877602 -18523.070801  7560.003662  1971.205566        1474.328049  200.000053      100.000084
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:18]  --------------------------------------------------------------------------------
[07/14 14:07:18]  Iteration: 113 (0 solution, 112 counterexamples)
[07/14 14:07:21]  Generator returned sat in 1.793034 secs.
[07/14 14:07:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:07:21]  Improved number of small numbers from 42 to 89 out of a max of 89
[07/14 14:07:21]  Verifer returned sat in 0.181788 secs.
[07/14 14:07:21]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19123.070801    0.082764 -19123.070801  7560.003418     0.000000           0.000000    0.000000        0.000000
1 -19023.071045   99.999756 -19123.070801  7560.003418     0.000000           0.000000   99.999756       -0.000244
2 -18923.071045  199.999756 -19023.070801  7560.003418     0.000000           0.000000   99.999756       -0.000244
3 -18142.497803  880.572998 -18915.070801  7560.003418   580.572754           0.000000  192.000244      100.000244
4 -18021.498047  313.000000 -18763.070801  7560.003418   601.572754         580.572754  140.000000      100.000000
5 -17620.498047  541.000000 -18623.070801  7560.003418   802.572998         601.572754  199.999756      199.999756
6 -17219.497803  601.000000 -18523.070801  7560.003418  1203.572754         802.572998  100.000244      100.000244
7 -16730.498047  589.000000 -18523.070801  7560.003418  1592.572754        1203.572754  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:22]  --------------------------------------------------------------------------------
[07/14 14:07:22]  Iteration: 114 (0 solution, 113 counterexamples)
[07/14 14:07:24]  Generator returned sat in 1.170857 secs.
[07/14 14:07:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:07:25]  Improved number of small numbers from 64 to 89 out of a max of 89
[07/14 14:07:25]  Verifer returned sat in 0.232996 secs.
[07/14 14:07:25]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19223.070801     0.082764 -19223.071045  7560.003418     0.000000           0.000000    0.000244      -99.999756
1 -19023.071289   199.999756 -19123.071045  7560.003418     0.000000           0.000000   99.999756       -0.000244
2 -18923.071289   199.999756 -18923.112549  7560.003418     0.000000           0.000000    0.041260       -0.000244
3 -18722.581055   200.531494 -18823.071045  7560.003418     0.041504           0.000000  100.448486      100.448486
4 -18021.498047   801.531494 -18763.071045  7560.003418   601.572754           0.041504  140.000244      100.000244
5 -16818.966797  1342.531494 -18723.071045  7560.003418  1604.104248         601.572754  300.000000      200.000000
6 -15475.373047  1643.593750 -18523.071045  7560.003418  2947.697998        1604.104248  100.000000      100.000000
7 -13480.779297  2094.593750 -18523.070801  7560.003418  4842.291748        2947.697998  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:25]  --------------------------------------------------------------------------------
[07/14 14:07:25]  Iteration: 115 (0 solution, 114 counterexamples)
[07/14 14:07:28]  Generator returned sat in 1.471483 secs.
[07/14 14:07:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:07:28]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:07:28]  Verifer returned sat in 0.151039 secs.
[07/14 14:07:28]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19223.070801     0.082764 -19223.071045  7560.003418     0.000000           0.000000    0.000244      -99.999756
1 -19023.071289   199.999756 -19123.071045  7560.003418     0.000000           0.000000   99.999756       -0.000244
2 -18923.071289   199.999756 -18923.112549  7560.003418     0.000000           0.000000    0.041260       -0.000244
3 -18722.581055   200.531494 -18823.071045  7560.003418     0.489990           0.000000  100.000000      100.000000
4 -18020.049561   802.531494 -18723.071045  7560.003418   603.021484           0.489990  100.000000      100.000000
5 -16715.518066  1404.531494 -18723.071045  7560.003418  1707.552979         603.021484  300.000000      200.000000
6 -15308.924316  1706.593750 -18623.071045  7560.003418  3114.146729        1707.552979  200.000000      100.000000
7 -13500.330566  2008.593750 -18523.071045  7560.003418  4822.740479        3114.146729  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:28]  --------------------------------------------------------------------------------
[07/14 14:07:28]  Iteration: 116 (0 solution, 115 counterexamples)
[07/14 14:07:31]  Generator returned sat in 1.034939 secs.
[07/14 14:07:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:07:31]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:07:31]  Verifer returned sat in 0.152404 secs.
[07/14 14:07:31]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19223.070801     0.082520 -19223.071289  7560.003418     0.000000           0.000000    0.000488      -99.999512
1 -19023.071533   199.999756 -19123.071289  7560.003418     0.000000           0.000000   99.999756       -0.000244
2 -18923.071533   199.999756 -18923.112793  7560.003418     0.000000           0.000000    0.041260       -0.000244
3 -18719.081299   204.031494 -18823.071289  7560.003418     0.000244           0.000000  103.989746      103.989746
4 -18017.539551   805.531494 -18724.071289  7560.003418   602.521484           0.000244  104.010254      103.010254
5 -16716.018311  1405.531494 -18723.071289  7560.003418  1707.052979         602.521484  300.000000      200.000000
6 -15308.924561  1707.093750 -18623.071289  7560.003418  3114.146729        1707.052979  200.000000      100.000000
7 -13500.330811  2008.593750 -18523.071045  7560.003418  4822.740234        3114.146729  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:31]  --------------------------------------------------------------------------------
[07/14 14:07:31]  Iteration: 117 (0 solution, 116 counterexamples)
[07/14 14:07:34]  Generator returned sat in 1.211838 secs.
[07/14 14:07:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:07:35]  Improved number of small numbers from 65 to 69 out of a max of 89
[07/14 14:07:35]  Verifer returned sat in 0.473791 secs.
[07/14 14:07:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19152.291504     0.082275 -19152.311861  7560.003174     0.000000           0.000000    0.020357      -29.220215
1 -19023.071533   129.240327 -19123.071289  7560.003174     0.000000           0.000000   99.999756       -0.000244
2 -18923.071777   199.999512 -18923.112793  7560.003174     0.000000           0.000000    0.041016       -0.000488
3 -18021.049072   902.063721 -18823.071289  7560.003174   702.022217           0.000000  100.000000      100.000000
4 -17174.156355   946.892718 -18723.071289  7560.003174  1448.914934         702.022217  100.000000      100.000000
5 -16198.709996  1075.446359 -18623.071289  7560.003174  2324.361293        1448.914934  100.000000      100.000000
6 -15308.924561   989.785435 -18523.071289  7560.003174  3114.146729        2324.361293  100.000000      100.000000
7 -14462.031843   946.892718 -18523.071289  7560.003174  3861.039307        3114.146729  200.000140      100.000140
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:35]  --------------------------------------------------------------------------------
[07/14 14:07:35]  Iteration: 118 (0 solution, 117 counterexamples)
[07/14 14:07:37]  Generator returned sat in 0.771619 secs.
[07/14 14:07:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:07:37]  Improved gap from 0 to 100
[07/14 14:07:37]  Improved number of small numbers from 48 to 90 out of a max of 90
[07/14 14:07:37]  Verifer returned sat in 0.240492 secs.
[07/14 14:07:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18280.208008    0.082031 -18280.249268  7560.00293    0.000000           0.000000    0.041260        0.000000
1 -18280.208008    0.020508 -18280.208008  7560.00293    0.000000           0.000000    0.000000     -100.000000
2 -17880.208252  399.999756 -18080.208008  7560.00293    0.000000           0.000000  199.999756      199.999756
3 -17880.187256  200.020752 -17980.208252  7560.00293    0.020752           0.000000  100.000244      100.000000
4 -17528.125977  452.061523 -17940.208008  7560.00293  252.082031           0.020752  160.000000      100.000000
5 -17176.125977  512.000000 -17880.208008  7560.00293  404.082031         252.082031  300.000000      200.000000
6 -17174.125977  302.000000 -17780.208008  7560.00293  404.082031         404.082031  202.000000      102.000000
7 -16772.125977  604.000000 -17680.208008  7560.00293  608.082031         404.082031  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:38]  --------------------------------------------------------------------------------
[07/14 14:07:38]  Iteration: 119 (0 solution, 118 counterexamples)
[07/14 14:07:40]  Generator returned sat in 0.619267 secs.
[07/14 14:07:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:07:40]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:07:40]  Verifer returned sat in 0.124007 secs.
[07/14 14:07:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18280.208008    0.082031 -18280.249268  7560.00293    0.000000           0.000000    0.041260        0.000000
1 -18280.208008    0.020508 -18280.208008  7560.00293    0.000000           0.000000    0.000000     -100.000000
2 -17880.208252  399.999756 -18080.208008  7560.00293    0.000000           0.000000  199.999756      199.999756
3 -17880.187256  200.020752 -17980.208252  7560.00293    0.020752           0.000000  100.000244      100.000000
4 -17528.125977  452.061523 -17940.208008  7560.00293  252.082031           0.020752  160.000000      100.000000
5 -17176.125977  512.000000 -17880.208008  7560.00293  404.082031         252.082031  300.000000      200.000000
6 -17174.125977  302.000000 -17780.208008  7560.00293  404.082031         404.082031  202.000000      102.000000
7 -16771.625977  604.500000 -17680.208008  7560.00293  608.582031         404.082031  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:40]  --------------------------------------------------------------------------------
[07/14 14:07:40]  Iteration: 120 (0 solution, 119 counterexamples)
[07/14 14:07:43]  Generator returned sat in 1.142313 secs.
[07/14 14:07:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:07:43]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:07:43]  Verifer returned sat in 0.125012 secs.
[07/14 14:07:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18280.208008    0.082031 -18280.249268  7560.00293    0.000000           0.000000    0.041260        0.000000
1 -18280.208008    0.020264 -18280.208008  7560.00293    0.000000           0.000000    0.000000     -100.000000
2 -17880.208496  399.999512 -18080.208008  7560.00293    0.000000           0.000000  199.999512      199.999512
3 -17880.187256  200.020752 -17980.208252  7560.00293    0.020752           0.000000  100.000244      100.000000
4 -17528.125977  452.061523 -17940.208008  7560.00293  252.082031           0.020752  160.000000      100.000000
5 -17176.125977  512.000000 -17880.208008  7560.00293  404.082031         252.082031  300.000000      200.000000
6 -17174.125977  302.000000 -17780.208008  7560.00293  404.082031         404.082031  202.000000      102.000000
7 -16771.125977  605.000000 -17680.208008  7560.00293  609.082031         404.082031  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:43]  --------------------------------------------------------------------------------
[07/14 14:07:43]  Iteration: 121 (0 solution, 120 counterexamples)
[07/14 14:07:46]  Generator returned sat in 0.948401 secs.
[07/14 14:07:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:07:46]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:07:46]  Verifer returned sat in 0.136066 secs.
[07/14 14:07:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18280.208008    0.081787 -18280.249512  7560.002686    0.000000           0.000000    0.041504        0.000000
1 -18280.208008    0.020020 -18280.208008  7560.002686    0.000000           0.000000    0.000000     -100.000000
2 -17880.208496  399.999512 -18080.208008  7560.002686    0.000000           0.000000  199.999512      199.999512
3 -17880.187256  200.020752 -17980.208496  7560.002686    0.020752           0.000000  100.000488      100.000000
4 -17528.126221  452.061523 -17940.208008  7560.002686  252.081787           0.020752  160.000000      100.000000
5 -17176.126221  512.000000 -17880.208008  7560.002686  404.081787         252.081787  300.000000      200.000000
6 -17174.126221  302.000000 -17780.208008  7560.002686  404.081787         404.081787  202.000000      102.000000
7 -16770.626221  605.500000 -17680.208008  7560.002686  609.581787         404.081787  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:46]  --------------------------------------------------------------------------------
[07/14 14:07:46]  Iteration: 122 (0 solution, 121 counterexamples)
[07/14 14:07:49]  Generator returned sat in 1.140319 secs.
[07/14 14:07:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:07:49]  Improved gap from 409599/4096 to 100
[07/14 14:07:49]  Improved number of small numbers from 86 to 90 out of a max of 90
[07/14 14:07:49]  Verifer returned sat in 0.170496 secs.
[07/14 14:07:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18280.208252    0.081543 -18280.250000  7560.002441    0.000000           0.000000    0.041748        0.000000
1 -18280.208252    0.019775 -18280.208252  7560.002441    0.000000           0.000000    0.000000     -100.000000
2 -17880.208496  399.999756 -18080.208252  7560.002441    0.000000           0.000000  199.999756      199.999756
3 -17880.187500  200.020752 -17980.208984  7560.002441    0.020752           0.000000  100.000732      100.000000
4 -17528.126709  452.061523 -17940.208252  7560.002441  252.081543           0.020752  160.000000      100.000000
5 -17176.126709  512.000000 -17880.208252  7560.002441  404.081787         252.081543  299.999756      199.999756
6 -17174.126465  302.000000 -17780.208252  7560.002441  404.081787         404.081787  202.000000      102.000000
7 -16770.126465  606.000000 -17680.208008  7560.002441  610.081787         404.081787  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:50]  --------------------------------------------------------------------------------
[07/14 14:07:50]  Iteration: 123 (0 solution, 122 counterexamples)
[07/14 14:07:52]  Generator returned sat in 1.022490 secs.
[07/14 14:07:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:07:52]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:07:52]  Verifer returned sat in 0.115203 secs.
[07/14 14:07:52]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18280.208252    0.081543 -18280.250000  7560.002441    0.000000           0.000000    0.041748        0.000000
1 -18280.208252    0.019775 -18280.208252  7560.002441    0.000000           0.000000    0.000000     -100.000000
2 -17880.208496  399.999756 -18080.208252  7560.002441    0.000000           0.000000  199.999756      199.999756
3 -17880.187500  200.020752 -17980.208984  7560.002441    0.020752           0.000000  100.000732      100.000000
4 -17528.126709  452.061523 -17940.208252  7560.002441  252.081543           0.020752  160.000000      100.000000
5 -17176.126709  512.000000 -17880.208252  7560.002441  404.081787         252.081543  299.999756      199.999756
6 -17174.126465  302.000000 -17780.208252  7560.002441  404.081787         404.081787  202.000000      102.000000
7 -16921.126465  455.000000 -17680.208008  7560.002441  559.081787         404.081787  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:07:53]  --------------------------------------------------------------------------------
[07/14 14:07:53]  Iteration: 124 (0 solution, 123 counterexamples)
[07/14 14:07:56]  Generator returned sat in 1.575336 secs.
[07/14 14:07:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:07:56]  Improved gap from 167/4096 to 100
[07/14 14:07:56]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:07:56]  Verifer returned sat in 0.188134 secs.
[07/14 14:07:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18535.096436    0.081543 -18535.096436  7814.890381    0.000000           0.000000    0.000000        0.000000
1 -18435.096436  100.000000 -18535.096436  7814.890381    0.000000           0.000000  100.000000        0.000000
2 -18435.055664  100.040771 -18435.096436  7814.890381    0.000000           0.000000    0.040771      -99.959229
3 -18035.055664  400.040771 -18254.096436  7814.890381    0.040771           0.000000  219.000000      200.000000
4 -17830.555664  423.500000 -18233.096436  7814.890381  204.540771           0.040771  198.000000      100.000000
5 -17573.555664  455.000000 -18035.096436  7814.890381  361.540771         204.540771  100.000000      100.000000
6 -17071.555664  602.000000 -17973.096436  7814.890381  663.540771         361.540771  238.000000      200.000000
7 -16886.055664  423.500000 -17935.096436  7814.890381  849.040771         663.540771  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:07:56]  --------------------------------------------------------------------------------
[07/14 14:07:56]  Iteration: 125 (0 solution, 124 counterexamples)
[07/14 14:07:59]  Generator returned sat in 1.558595 secs.
[07/14 14:07:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:00]  Improved number of small numbers from 34 to 40 out of a max of 89
[07/14 14:08:00]  Verifer returned sat in 0.825959 secs.
[07/14 14:08:00]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24225.091553     0.081299 -24225.091728  7814.890381     0.000000           0.000000    0.000175        0.000175
1 -23925.091728   300.000000 -24125.091728  7814.890381     0.000000           0.000000  200.000000      200.000000
2 -23825.091728   300.000000 -24025.091728  7814.890381     0.000000           0.000000  200.000000      200.000000
3 -23825.051079   200.040649 -24025.091728  7814.890381     0.040649           0.000000  200.000000      100.000000
4 -23422.990105   602.060974 -23885.091728  7814.890381   302.101624           0.040649  160.000000      100.000000
5 -22317.898643  1265.091461 -23808.091728  7814.890381  1207.193085         302.101624  283.000000      200.000000
6 -20375.761452  2225.137192 -23725.091728  7814.890381  3049.330276        1207.193085  300.000000      200.000000
7 -16886.055664  3789.705788 -23525.091797  7814.890381  6439.036133        3049.330276  200.000000      199.999931
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:01]  --------------------------------------------------------------------------------
[07/14 14:08:01]  Iteration: 126 (0 solution, 125 counterexamples)
[07/14 14:08:19]  Generator returned sat in 16.819369 secs.
[07/14 14:08:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:19]  Improved number of small numbers from 42 to 89 out of a max of 89
[07/14 14:08:19]  Verifer returned sat in 0.280691 secs.
[07/14 14:08:19]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24225.051025      0.081055 -24225.091553  7814.890381      0.000000           0.000000    0.040527        0.040527
1 -23925.091797    299.999756 -24125.091797  7814.890381      0.000000           0.000000  200.000000      199.999756
2 -23925.091797    199.999756 -24071.091553  7814.890381      0.000000           0.000000  145.999756       99.999756
3 -23825.051025    246.040527 -24025.091553  7814.890381      0.040527           0.000000  200.000000      100.000000
4 -23132.469971    892.581055 -23885.091553  7814.890381    492.621826           0.040527  259.999756      199.999756
5 -21126.807129   2265.662598 -23825.091553  7814.890381   2398.284424         492.621826  300.000000      200.000000
6 -16402.981934   5023.825195 -23725.091553  7814.890381   7122.109619        2398.284424  200.000000      100.000000
7  -5954.831543  10648.150391 -23525.092041  7814.890381  17470.260010        7122.109619  100.000488      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:20]  --------------------------------------------------------------------------------
[07/14 14:08:20]  Iteration: 127 (0 solution, 126 counterexamples)
[07/14 14:08:22]  Generator returned sat in 0.890936 secs.
[07/14 14:08:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:22]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:08:22]  Verifer returned sat in 0.119150 secs.
[07/14 14:08:22]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24225.071289      0.081055 -24225.091553  7814.890381      0.000000           0.000000    0.020264        0.020264
1 -23925.091797    299.999756 -24125.091553  7814.890381      0.000000           0.000000  199.999756      199.999756
2 -23925.091797    199.979492 -24071.091553  7814.890381      0.000000           0.000000  145.999756       99.999756
3 -23825.071289    246.020264 -24025.091553  7814.890381      0.020264           0.000000  200.000000      100.000000
4 -23132.030762    893.040527 -23885.800781  7814.890381    493.331055           0.020264  260.438965      199.729736
5 -21126.807129   2265.662598 -23825.091553  7814.890381   2398.284424         493.331055  300.000000      200.000000
6 -16402.481934   5024.325195 -23725.091553  7814.890381   7122.609619        2398.284424  200.000000      100.000000
7  -5952.831543  10649.650391 -23525.092041  7814.890381  17470.260010        7122.609619  102.000488      102.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:23]  --------------------------------------------------------------------------------
[07/14 14:08:23]  Iteration: 128 (0 solution, 127 counterexamples)
[07/14 14:08:25]  Generator returned sat in 0.831238 secs.
[07/14 14:08:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:25]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/14 14:08:25]  Verifer returned sat in 0.128779 secs.
[07/14 14:08:25]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24225.071777      0.081055 -24225.091797  7814.890381      0.000000           0.000000    0.020020        0.020020
1 -23925.092285    299.999512 -24125.091797  7814.890381      0.000000           0.000000  199.999512      199.999512
2 -23925.092285    199.994385 -24071.091797  7814.890381      0.000000           0.000000  145.999512       99.999512
3 -23825.071533    246.020264 -24025.091797  7814.890381      0.020020           0.000000  200.000244      100.000244
4 -23131.531250    893.540527 -23886.551025  7814.890381    493.581055           0.020020  261.438721      199.979492
5 -21127.307373   2265.662598 -23825.091797  7814.890381   2397.784424         493.581055  300.000000      200.000000
6 -16402.482178   5024.825195 -23725.091797  7814.890381   7122.609619        2397.784424  200.000000      100.000000
7  -5951.331787  10651.150391 -23525.092529  7814.890381  17470.259766        7122.609619  103.500977      103.500244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:26]  --------------------------------------------------------------------------------
[07/14 14:08:26]  Iteration: 129 (0 solution, 128 counterexamples)
[07/14 14:08:30]  Generator returned sat in 2.608986 secs.
[07/14 14:08:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:30]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:08:30]  Verifer returned sat in 0.117382 secs.
[07/14 14:08:30]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24025.091797     0.081055 -24225.091797  7814.890381     0.000000           0.000000  200.000000           200.0
1 -23925.091797   300.000000 -24225.091797  7814.890381     0.000000           0.000000  300.000000           200.0
2 -23925.091797   199.994385 -24125.091797  7814.890381     0.000000           0.000000  200.000000           100.0
3 -17914.982178  6210.109619 -23988.591797  7814.890381  5910.109619           0.000000  163.500000           100.0
4 -17604.482178   474.000000 -23825.091797  7814.890381  6020.609619        5910.109619  200.000000           200.0
5 -17003.482178   801.000000 -23725.091797  7814.890381  6521.609619        6020.609619  200.000000           200.0
6 -16402.482178   801.000000 -23725.091797  7814.890381  7122.609619        6521.609619  200.000000           100.0
7 -16074.482178   528.000000 -23525.092529  7814.890381  7350.609619        7122.609619  100.000732           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:30]  --------------------------------------------------------------------------------
[07/14 14:08:30]  Iteration: 130 (0 solution, 129 counterexamples)
[07/14 14:08:35]  Generator returned sat in 3.157830 secs.
[07/14 14:08:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:36]  Improved number of small numbers from 62 to 64 out of a max of 89
[07/14 14:08:36]  Verifer returned sat in 0.509751 secs.
[07/14 14:08:36]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24225.071777    0.080811 -24225.092041  7814.890137     0.000000           0.000000    0.020264        0.020264
1 -24071.072021  154.020020 -24125.092041  7814.890137     0.000000           0.000000   54.020020       54.020020
2 -24071.072021    0.020020 -24071.092041  7814.890381     0.000000           0.000000    0.020020      -45.979736
3 -23825.071777  246.020264 -23988.592041  7814.890381     0.020264           0.000000  163.500000      100.000244
4 -23391.561646  597.010132 -23925.092041  7814.890381   333.530396           0.020264  200.000000      100.000244
5 -22892.056580  699.505066 -23825.092041  7814.890381   733.035461         333.530396  200.000000      100.000244
6 -22249.304047  842.752533 -23725.092041  7814.890381  1275.787994         733.035461  200.000000      100.000244
7 -21499.927780  949.376266 -23525.093018  7814.890381  1925.164062        1275.787994  100.001175      100.000443
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:36]  --------------------------------------------------------------------------------
[07/14 14:08:36]  Iteration: 131 (0 solution, 130 counterexamples)
[07/14 14:08:39]  Generator returned sat in 1.247692 secs.
[07/14 14:08:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:08:39]  Improved gap from 331/16384 to 100
[07/14 14:08:39]  Improved number of small numbers from 27 to 90 out of a max of 90
[07/14 14:08:39]  Verifer returned sat in 0.275857 secs.
[07/14 14:08:39]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.617432    0.080566 -24624.637695  8214.435791     0.000000           0.000000  100.020264      100.020264
1 -24524.617432  100.020020 -24524.657959  8214.435791     0.000000           0.000000    0.040527        0.020264
2 -24524.617432    0.020020 -24524.637695  8214.435791     0.000000           0.000000    0.020264      -99.979736
3 -24324.617676  200.020020 -24324.637695  8214.435791     0.000000           0.000000    0.020020        0.020020
4 -23822.617676  502.020020 -24224.637695  8214.435791   302.020020           0.000000  100.000000      100.000000
5 -23320.577148  602.040527 -24124.637695  8214.435791   704.060547         302.020020  100.000000      100.000000
6 -22618.577148  802.000000 -24074.627686  8214.435791  1206.060791         704.060547  249.989746      199.999756
7 -22366.546875  502.020020 -24024.637695  8214.435791  1358.091064        1206.060791  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:40]  --------------------------------------------------------------------------------
[07/14 14:08:40]  Iteration: 132 (0 solution, 131 counterexamples)
[07/14 14:08:42]  Generator returned sat in 0.731450 secs.
[07/14 14:08:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:08:42]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:08:42]  Verifer returned sat in 0.116507 secs.
[07/14 14:08:42]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.617432    0.080566 -24625.637695  8214.435791     0.000000           0.000000  101.020264      100.020264
1 -24524.617432  100.020020 -24524.657959  8214.435791     0.000000           0.000000    0.040527        0.020264
2 -24524.617432    0.020020 -24524.637695  8214.435791     0.000000           0.000000    0.020264      -99.979736
3 -24324.617676  200.020020 -24324.637695  8214.435791     0.000000           0.000000    0.020020        0.020020
4 -23822.617676  502.020020 -24224.637695  8214.435791   302.020020           0.000000  100.000000      100.000000
5 -23320.577148  602.040527 -24124.637695  8214.435791   704.060547         302.020020  100.000000      100.000000
6 -22618.577148  802.000000 -24074.627686  8214.435791  1206.060791         704.060547  249.989746      199.999756
7 -22366.546875  502.020020 -24024.637695  8214.435791  1358.091064        1206.060791  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:42]  --------------------------------------------------------------------------------
[07/14 14:08:42]  Iteration: 133 (0 solution, 132 counterexamples)
[07/14 14:08:45]  Generator returned sat in 0.777304 secs.
[07/14 14:08:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:08:45]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:08:45]  Verifer returned sat in 0.109990 secs.
[07/14 14:08:45]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.617432    0.080322 -24625.637939  8214.435547     0.000000           0.000000  101.020508      100.020264
1 -24524.617432  100.019775 -24524.657959  8214.435547     0.000000           0.000000    0.040527        0.020264
2 -24524.617432    0.019775 -24524.637695  8214.435547     0.000000           0.000000    0.020264      -99.979736
3 -24324.617676  200.020020 -24324.637939  8214.435547     0.000000           0.000000    0.020264        0.020020
4 -23822.117920  502.520020 -24224.637695  8214.435547   302.019775           0.000000  100.500000      100.500000
5 -23320.577393  602.040527 -24124.637695  8214.435547   704.060303         302.019775  100.000000      100.000000
6 -22618.577393  802.000000 -24074.377930  8214.435547  1206.060791         704.060303  249.739746      199.999512
7 -22365.797119  502.520020 -24024.637695  8214.435547  1358.841064        1206.060791  299.999512      199.999512
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:45]  --------------------------------------------------------------------------------
[07/14 14:08:45]  Iteration: 134 (0 solution, 133 counterexamples)
[07/14 14:08:48]  Generator returned sat in 1.177594 secs.
[07/14 14:08:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:08:48]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:08:48]  Verifer returned sat in 0.131525 secs.
[07/14 14:08:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.617432    0.080078 -24626.638184  8214.435547     0.000000           0.000000  102.020752      100.020264
1 -24524.617432  100.019531 -24524.658203  8214.435547     0.000000           0.000000    0.040771        0.020264
2 -24524.617432    0.019531 -24524.637695  8214.435547     0.000000           0.000000    0.020264      -99.979736
3 -24324.617920  200.019775 -24324.637939  8214.435547     0.000000           0.000000    0.020020        0.019775
4 -23822.117920  502.520020 -24224.637939  8214.435547   302.019775           0.000000  100.500244      100.500000
5 -23320.577637  602.040527 -24124.637695  8214.435547   704.060059         302.019775  100.000000      100.000000
6 -22618.577637  802.000000 -24074.377930  8214.435547  1206.060547         704.060059  249.739746      199.999512
7 -22365.797363  502.520020 -24024.637695  8214.435547  1358.841064        1206.060547  299.999268      199.999268
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:49]  --------------------------------------------------------------------------------
[07/14 14:08:49]  Iteration: 135 (0 solution, 134 counterexamples)
[07/14 14:08:53]  Generator returned sat in 2.646731 secs.
[07/14 14:08:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:08:53]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:08:53]  Verifer returned sat in 0.111302 secs.
[07/14 14:08:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.617676    0.080078 -24626.638428  8214.435547     0.000000           0.000000  102.020752      100.020264
1 -24524.617676  100.019287 -24624.637939  8214.435547     0.000000           0.000000  100.020264        0.020264
2 -24524.617676    0.019531 -24524.637939  8214.435547     0.000000           0.000000    0.020264      -99.979736
3 -24324.618164  200.019775 -24324.638184  8214.435547     0.000000           0.000000    0.020020        0.019775
4 -24022.137939  302.500244 -24224.637939  8214.435547   102.060059           0.000000  100.439941      100.439941
5 -23320.577881  802.000000 -24124.637939  8214.435547   704.060059         102.060059  100.000000      100.000000
6 -22618.577881  802.000000 -24074.378174  8214.435547  1206.060547         704.060059  249.739746      199.999512
7 -22365.797607  502.520020 -24024.637695  8214.435547  1358.840820        1206.060547  299.999268      199.999512
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:08:53]  --------------------------------------------------------------------------------
[07/14 14:08:53]  Iteration: 136 (0 solution, 135 counterexamples)
[07/14 14:09:02]  Generator returned sat in 7.233697 secs.
[07/14 14:09:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:09:02]  Improved number of small numbers from 75 to 89 out of a max of 89
[07/14 14:09:02]  Verifer returned sat in 0.147778 secs.
[07/14 14:09:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.597900    0.079590 -24624.637939  8214.435059     0.000000           0.000000  100.040039      100.040039
1 -24524.597900    0.040039 -24624.637939  8214.435059     0.000000           0.000000  100.040039        0.040039
2 -24524.597900    0.039795 -24524.637939  8214.435059     0.000000           0.000000    0.040039      -99.959961
3 -24424.598145  100.039795 -24424.637939  8214.435059     0.000000           0.000000    0.039795      -99.960205
4 -23824.558350  600.079590 -24224.637939  8214.435059   300.079590           0.000000  100.000000      100.000000
5 -23124.058350  800.500000 -24189.637939  8214.435059   900.579590         300.079590  165.000000      100.000000
6 -22618.558350  670.500000 -24074.378174  8214.435059  1206.080078         900.579590  249.739746      199.999512
7 -22167.278564  701.019531 -24024.637939  8214.435059  1557.360107        1206.080078  299.999268      199.999268
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:09:03]  --------------------------------------------------------------------------------
[07/14 14:09:03]  Iteration: 137 (0 solution, 136 counterexamples)
[07/14 14:09:08]  Generator returned sat in 3.646416 secs.
[07/14 14:09:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:08]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:09:08]  Verifer returned sat in 0.125130 secs.
[07/14 14:09:08]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24524.597900    0.079590 -24724.427734  8214.435059     0.000000           0.000000  199.829834      100.040039
1 -24524.597900    0.040039 -24624.637939  8214.435059     0.000000           0.000000  100.040039        0.040039
2 -24524.597900    0.039795 -24524.637939  8214.435059     0.000000           0.000000    0.040039      -99.959961
3 -24424.598145  100.039795 -24424.637939  8214.435059     0.000000           0.000000    0.039795      -99.960205
4 -23824.558350  600.079590 -24224.637939  8214.435059   300.079590           0.000000  100.000000      100.000000
5 -23124.058350  800.500000 -24189.637939  8214.435059   900.579590         300.079590  165.000000      100.000000
6 -22618.558350  670.500000 -24074.378174  8214.435059  1206.080078         900.579590  249.739746      199.999512
7 -22167.278564  701.019531 -24024.637939  8214.435059  1557.360107        1206.080078  299.999268      199.999268
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:09:09]  --------------------------------------------------------------------------------
[07/14 14:09:09]  Iteration: 138 (0 solution, 137 counterexamples)
[07/14 14:09:22]  Generator returned sat in 11.442766 secs.
[07/14 14:09:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:09:22]  Improved number of small numbers from 73 to 89 out of a max of 89
[07/14 14:09:22]  Verifer returned sat in 0.162554 secs.
[07/14 14:09:22]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24424.638428    0.079590 -24624.638428  8214.435059    0.000000           0.000000  200.000000      200.000000
1 -24424.638428    0.039551 -24576.298340  8214.435059    0.000000           0.000000  151.659912      100.000000
2 -24424.638428    0.039551 -24424.677979  8214.435059    0.000000           0.000000    0.039551        0.000000
3 -24326.138428   98.539551 -24424.638184  8214.435059    0.000000           0.000000   98.499756       -1.500000
4 -24124.598389  300.039795 -24324.638184  8214.435059    0.039551           0.000000  200.000244      100.000488
5 -23898.728760  425.869873 -24224.638428  8214.435059  125.909668           0.039551  200.000000      100.000000
6 -23572.839111  525.889648 -24074.378418  8214.435059  251.799316         125.909668  249.739990      200.000000
7 -23121.559570  701.019531 -24024.638184  8214.435059  703.078613         251.799316  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:09:22]  --------------------------------------------------------------------------------
[07/14 14:09:22]  Iteration: 139 (0 solution, 138 counterexamples)
[07/14 14:09:25]  Generator returned sat in 0.911073 secs.
[07/14 14:09:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:09:25]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:09:25]  Verifer returned sat in 0.146073 secs.
[07/14 14:09:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24424.638428    0.079590 -24624.638428  8214.435059    0.000000           0.000000  200.000000      200.000000
1 -24424.638428    0.039551 -24576.298340  8214.435059    0.000000           0.000000  151.659912      100.000000
2 -24424.638428    0.039551 -24424.677979  8214.435059    0.000000           0.000000    0.039551        0.000000
3 -24325.638428   99.039551 -24424.638184  8214.435059    0.000000           0.000000   98.999756       -1.000000
4 -24124.598389  300.039795 -24324.638184  8214.435059    0.039551           0.000000  200.000244      100.000488
5 -23898.728760  425.869873 -24224.638428  8214.435059  125.909668           0.039551  200.000000      100.000000
6 -23572.839111  525.889648 -24074.378418  8214.435059  251.799316         125.909668  249.739990      200.000000
7 -23121.559570  701.019531 -24024.638184  8214.435059  703.078613         251.799316  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:09:25]  --------------------------------------------------------------------------------
[07/14 14:09:25]  Iteration: 140 (0 solution, 139 counterexamples)
[07/14 14:09:29]  Generator returned sat in 1.249364 secs.
[07/14 14:09:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:29]  Improved gap from 161/8192 to 100
[07/14 14:09:29]  Improved number of small numbers from 43 to 90 out of a max of 90
[07/14 14:09:29]  Verifer returned sat in 0.371943 secs.
[07/14 14:09:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24324.638672    0.079102 -24424.638916  8214.434814     0.000000           0.000000  100.000244      100.000244
1 -24324.638672    0.039795 -24324.638916  8214.434814     0.000000           0.000000    0.000244        0.000244
2 -24324.599121    0.039795 -24324.638916  8214.434814     0.000000           0.000000    0.039795      -99.960205
3 -24024.599121  300.039795 -24153.638916  8214.434814     0.039795           0.000000  129.000000      100.000000
4 -23718.059326  435.539795 -24024.638916  8214.434814   206.579102           0.039795  100.000488      100.000488
5 -23232.520020  585.539795 -23924.638916  8214.434814   592.118896         206.579102  100.000000      100.000000
6 -22546.980225  785.539795 -23824.638916  8214.434814  1177.658447         592.118896  100.000244      100.000244
7 -21696.940674  950.039795 -23824.638916  8214.434814  1927.698242        1177.658447  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:09:29]  --------------------------------------------------------------------------------
[07/14 14:09:29]  Iteration: 141 (0 solution, 140 counterexamples)
[07/14 14:09:34]  Generator returned sat in 3.278671 secs.
[07/14 14:09:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:35]  Improved number of small numbers from 43 to 89 out of a max of 89
[07/14 14:09:35]  Verifer returned sat in 0.182272 secs.
[07/14 14:09:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24624.678467    0.079102 -24924.678467  8614.474365    0.000000           0.000000  300.000000      200.000000
1 -24624.678467    0.039795 -24724.678467  8614.474365    0.000000           0.000000  100.000000      100.000000
2 -24624.678467  100.000000 -24685.678467  8614.474365    0.000000           0.000000   61.000000        0.000000
3 -24024.599365  661.079102 -24524.678467  8614.474365  300.079346           0.000000  199.999756      199.999756
4 -24024.599121  200.000000 -24424.678467  8614.474365  300.079346         300.079346  100.000000      100.000000
5 -23624.099121  500.500000 -24324.678467  8614.474365  600.579346         300.079346  100.000000      100.000000
6 -23543.599121  180.500000 -24271.678467  8614.474365  600.579346         600.579346  127.500000       80.500000
7 -23237.099121  434.000000 -24224.678467  8614.474365  787.579102         600.579346  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:09:35]  --------------------------------------------------------------------------------
[07/14 14:09:35]  Iteration: 142 (0 solution, 141 counterexamples)
[07/14 14:09:38]  Generator returned sat in 1.392543 secs.
[07/14 14:09:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:38]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/14 14:09:38]  Verifer returned sat in 0.138056 secs.
[07/14 14:09:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24624.639160    0.079102 -24824.678467  8614.474365    0.000000           0.000000  200.039307      100.039551
1 -24624.639160    0.039307 -24624.678711  8614.474365    0.000000           0.000000    0.039551        0.039551
2 -24624.639160    0.039551 -24624.678711  8614.474365    0.000000           0.000000    0.039551      -99.960449
3 -24002.599365  622.079346 -24446.678467  8614.474365  322.079346           0.000000  121.999756      100.000000
4 -23935.599121  189.000000 -24424.678711  8614.474365  322.079346         322.079346  167.000244       67.000244
5 -23524.099365  578.500000 -24291.345215  8614.474365  600.579346         322.079346  166.666504      100.000000
6 -23524.099121  166.666748 -24224.678467  8614.474365  600.579346         600.579346  100.000000        0.000244
7 -23068.265625  555.833496 -24124.678711  8614.474365  856.412842         600.579346  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:09:39]  --------------------------------------------------------------------------------
[07/14 14:09:39]  Iteration: 143 (0 solution, 142 counterexamples)
[07/14 14:09:43]  Generator returned sat in 2.450526 secs.
[07/14 14:09:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:43]  Improved gap from 1967/2048 to 20.3125
[07/14 14:09:43]  Improved number of small numbers from 81 to 90 out of a max of 90
[07/14 14:09:43]  Verifer returned sat in 0.278834 secs.
[07/14 14:09:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24132.570068    0.079102 -24343.570312  8590.385498   0.000000           0.000000  211.000244      200.000000
1 -24132.570068    0.039307 -24332.570068  8590.385498   0.000000           0.000000  200.000000      100.000000
2 -23932.570312  399.999756 -24132.570068  8590.385498   0.000000           0.000000  199.999756      199.999756
3 -23876.990967  255.579102 -24032.570312  8590.385498   0.039551           0.000000  155.539795      155.539551
4 -23876.990967  155.500000 -23955.320312  8590.385498   0.039551           0.039551   78.289795       55.539551
5 -23876.990967   78.250000 -23916.695312  8634.845947   0.039551           0.039551   39.664795        0.000000
6 -23876.990967   39.625000 -23877.030518  8714.533447   0.039551           0.039551    0.000000      -20.312500
7 -23856.678467   20.312500 -23856.718018  8714.533447   0.039551           0.039551    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:09:44]  --------------------------------------------------------------------------------
[07/14 14:09:44]  Iteration: 144 (0 solution, 143 counterexamples)
[07/14 14:09:46]  Generator returned sat in 0.927324 secs.
[07/14 14:09:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:47]  Improved number of small numbers from 36 to 89 out of a max of 89
[07/14 14:09:47]  Verifer returned sat in 0.207281 secs.
[07/14 14:09:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24132.570312    0.078857 -24232.589844  8390.405029    0.000000           0.000000  100.019531        0.019531
1 -24132.570312    0.039062 -24132.589844  8390.405029    0.000000           0.000000    0.019531      -99.980469
2 -23436.070312  696.519531 -24031.628906  8390.405029  296.519775           0.000000  299.038818      199.999756
3 -23436.070312  199.480225 -23932.589600  8390.405029  296.519775         296.519775  199.999512       99.999756
4 -23436.070312  199.980225 -23732.609375  8390.405029  296.519775         296.519775    0.019287       -0.000244
5 -23235.609375  200.480225 -23632.589844  8390.405029  296.980469         296.519775  100.000000      100.000000
6 -23136.089844  199.519531 -23532.589844  8390.405029  296.980469         296.980469   99.519531       99.519531
7 -23035.589844  200.019531 -23532.589844  8390.405029  297.000000         296.980469  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:09:47]  --------------------------------------------------------------------------------
[07/14 14:09:47]  Iteration: 145 (0 solution, 144 counterexamples)
[07/14 14:09:50]  Generator returned sat in 1.610710 secs.
[07/14 14:09:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:51]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/14 14:09:51]  Verifer returned sat in 0.132976 secs.
[07/14 14:09:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24132.570557    0.078613 -24232.589844  8390.405029    0.000000           0.000000  100.019287        0.019287
1 -24132.570557    0.039062 -24132.589844  8390.405029    0.000000           0.000000    0.019287      -99.980713
2 -23436.070312  696.519531 -24031.629150  8390.405029  296.519775           0.000000  299.039062      199.999756
3 -23436.070312  199.480225 -23932.589844  8390.405029  296.519775         296.519775  199.999756       99.999756
4 -23436.070312  199.980225 -23732.609375  8390.405029  296.519775         296.519775    0.019287       -0.000244
5 -23235.609375  200.480225 -23699.416504  8390.405029  296.980225         296.519775  166.826904      100.000244
6 -23136.089844  266.346436 -23532.589844  8390.405029  296.980225         296.980225   99.519775       99.519775
7 -22968.763184  266.846436 -23532.589844  8390.405029  363.826660         296.980225  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:09:51]  --------------------------------------------------------------------------------
[07/14 14:09:51]  Iteration: 146 (0 solution, 145 counterexamples)
[07/14 14:09:55]  Generator returned sat in 2.389048 secs.
[07/14 14:09:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:56]  Improved number of small numbers from 79 to 81 out of a max of 89
[07/14 14:09:56]  Verifer returned sat in 0.233095 secs.
[07/14 14:09:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24132.570801    0.078369 -24232.589844  8390.404785    0.000000           0.000000  100.019043        0.019043
1 -24132.570801    0.038818 -24132.589844  8390.404785    0.000000           0.000000    0.019043      -99.980957
2 -23436.070312  696.519531 -24031.629150  8390.404785  296.519531           0.000000  299.039307      200.000000
3 -23436.070312   88.546766 -23932.589844  8390.404785  296.519531         296.519531  200.000000      100.000000
4 -23436.070312  133.320150 -23732.609375  8390.404785  296.519531         296.519531    0.019531        0.000000
5 -23235.609619  200.480225 -23699.416504  8390.404785  296.980225         296.519531  166.826660      100.000000
6 -23136.089844  266.346436 -23532.589844  8390.404785  296.980225         296.980225   99.519775       99.519775
7 -22835.589966  400.019653 -23532.589844  8390.404785  496.999756         296.980225  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:09:56]  --------------------------------------------------------------------------------
[07/14 14:09:56]  Iteration: 147 (0 solution, 146 counterexamples)
[07/14 14:09:59]  Generator returned sat in 1.223421 secs.
[07/14 14:09:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:09:59]  Improved gap from 321/16384 to 100
[07/14 14:10:00]  Improved number of small numbers from 30 to 78 out of a max of 90
[07/14 14:10:00]  Verifer returned sat in 0.560515 secs.
[07/14 14:10:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24232.982178    0.078125 -24233.021240  8490.81665   0.000000           0.000000    0.039062        0.019531
1 -24232.982178    0.019775 -24233.001465  8490.81665   0.000000           0.000000    0.019287      -99.980469
2 -23833.001709  399.999756 -24133.001709  8490.81665   0.000000           0.000000  300.000000      200.000000
3 -23833.001709  132.986938 -24033.001465  8490.81665   0.000000           0.000000  199.999756      100.000000
4 -23833.001709  199.980408 -23933.001678  8490.81665   0.000000           0.000000   99.999969        0.000000
5 -23632.531067  300.470612 -23799.380615  8490.81665   0.019775           0.000000  166.829773      100.450867
6 -23632.531067  166.810547 -23683.697998  8490.81665   0.019775           0.019775   51.147156        0.450867
7 -23432.962402  250.715820 -23633.001465  8490.81665   0.039062           0.019775  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:10:00]  --------------------------------------------------------------------------------
[07/14 14:10:00]  Iteration: 148 (0 solution, 147 counterexamples)
[07/14 14:10:04]  Generator returned sat in 2.183193 secs.
[07/14 14:10:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:10:04]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:10:04]  Verifer returned sat in 0.140132 secs.
[07/14 14:10:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24233.943115    0.078125 -24233.982178  8491.777588    0.000000           0.000000    0.039062        0.019531
1 -24233.943115    0.019531 -24233.962646  8491.777588    0.000000           0.000000    0.019531      -99.980469
2 -23933.962646  300.000000 -24133.001709  8491.777588    0.000000           0.000000  199.039062      100.000000
3 -23733.962646  399.039062 -23933.962646  8491.777588    0.000000           0.000000  200.000000      200.000000
4 -23733.943115  200.019531 -23833.962646  8491.777588    0.019531           0.000000  100.000000      100.000000
5 -23533.933350  300.009766 -23752.962646  8491.777588  100.029297           0.019531  119.000000      100.000000
6 -23312.908936  340.024414 -23733.962646  8491.777588  121.053711         100.029297  300.000000      200.000000
7 -23312.908936  270.012207 -23633.962646  8491.777588  121.053711         121.053711  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:10:04]  --------------------------------------------------------------------------------
[07/14 14:10:04]  Iteration: 149 (0 solution, 148 counterexamples)
[07/14 14:10:18]  Generator returned sat in 11.907063 secs.
[07/14 14:10:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:18]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:10:18]  Verifer returned sat in 0.133418 secs.
[07/14 14:10:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24134.433350    0.078125 -24234.511475  8491.777344    0.000000           0.000000  100.078125      100.039062
1 -24134.433350    0.039062 -24134.472412  8491.777344    0.000000           0.000000    0.039062        0.039062
2 -23834.472412  300.000000 -24133.001953  8491.777344    0.000000           0.000000  298.529541      200.000000
3 -23734.472412  398.529541 -23934.472412  8491.777344    0.000000           0.000000  200.000000      200.000000
4 -23634.433350  300.039062 -23934.472412  8491.777344    0.039062           0.000000  300.000000      200.000000
5 -23533.933350  400.500000 -23752.962891  8491.777344  100.539062           0.039062  118.490479      100.000000
6 -22891.845703  760.578125 -23634.472412  8491.777344  642.626709         100.539062  100.000000      100.000000
7 -22391.345703  600.500000 -23634.472412  8491.777344  943.126709         642.626709  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:18]  --------------------------------------------------------------------------------
[07/14 14:10:18]  Iteration: 150 (0 solution, 149 counterexamples)
[07/14 14:10:22]  Generator returned sat in 1.867216 secs.
[07/14 14:10:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:22]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:10:22]  Verifer returned sat in 0.139078 secs.
[07/14 14:10:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24134.452881     0.078125 -24234.472412  8491.777344     0.000000           0.000000  100.019531      100.019531
1 -24134.452881     0.039062 -24134.472412  8491.777344     0.000000           0.000000    0.019531        0.019531
2 -23834.472412   300.000000 -24034.472412  8491.777344     0.000000           0.000000  200.000000      200.000000
3 -23834.472412   200.000000 -23934.472412  8491.777344     0.000000           0.000000  100.000000      100.000000
4 -23434.472412   500.000000 -23934.472412  8491.777344   200.000000           0.000000  300.000000      200.000000
5 -23083.972412   650.500000 -23752.962891  8491.777344   450.500000         200.000000  218.490479      200.000000
6 -22413.693848   888.769043 -23634.472656  8491.777344  1020.778564         450.500000  200.000244      200.000000
7 -21568.810059  1044.884033 -23634.472412  8491.777344  1765.662354        1020.778564  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:22]  --------------------------------------------------------------------------------
[07/14 14:10:22]  Iteration: 151 (0 solution, 150 counterexamples)
[07/14 14:10:25]  Generator returned sat in 1.009660 secs.
[07/14 14:10:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:26]  Improved number of small numbers from 73 to 89 out of a max of 89
[07/14 14:10:26]  Verifer returned sat in 0.153128 secs.
[07/14 14:10:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24134.452881    0.077637 -24334.472412  8491.7771     0.000000           0.000000  200.019531      100.019531
1 -24134.452881    0.038574 -24234.472412  8491.7771     0.000000           0.000000  100.019531        0.019531
2 -23459.203125  775.269287 -24034.472412  8491.7771   375.269531           0.000000  199.999756      199.999756
3 -23459.203125  199.980469 -24034.472412  8491.7771   375.269531         375.269531  199.999756       99.999756
4 -23159.222412  499.980469 -23934.472412  8491.7771   575.249756         375.269531  200.000244      100.000244
5 -22758.722656  600.500000 -23752.962891  8491.7771   775.749756         575.249756  218.490479      200.000000
6 -22413.694092  563.519043 -23634.472412  8491.7771  1020.778320         775.749756  200.000000      200.000000
7 -21813.194092  800.500000 -23634.472412  8491.7771  1621.278320        1020.778320  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:26]  --------------------------------------------------------------------------------
[07/14 14:10:26]  Iteration: 152 (0 solution, 151 counterexamples)
[07/14 14:10:30]  Generator returned sat in 2.170712 secs.
[07/14 14:10:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:30]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:10:30]  Verifer returned sat in 0.186561 secs.
[07/14 14:10:30]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24134.452881     0.077637 -24334.472412  8491.7771     0.000000           0.000000  200.019531      100.019531
1 -24134.452881     0.038574 -24234.472412  8491.7771     0.000000           0.000000  100.019531        0.019531
2 -23459.203125   775.269287 -24034.472412  8491.7771   375.269531           0.000000  199.999756      199.999756
3 -23459.203125   199.980469 -23934.472412  8491.7771   375.269531         375.269531   99.999756       99.999756
4 -23159.202881   400.000000 -23834.472412  8491.7771   575.269531         375.269531  100.000000      100.000000
5 -22258.702881  1000.500000 -23752.962891  8491.7771  1375.769531         575.269531  118.490479      100.000000
6 -21313.424316  1063.769043 -23634.472412  8491.7771  2121.048096        1375.769531  200.000000      200.000000
7 -20381.039795  1132.384521 -23634.472412  8491.7771  3053.432617        2121.048096  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:30]  --------------------------------------------------------------------------------
[07/14 14:10:30]  Iteration: 153 (0 solution, 152 counterexamples)
[07/14 14:10:33]  Generator returned sat in 0.956242 secs.
[07/14 14:10:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:33]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/14 14:10:33]  Verifer returned sat in 0.156242 secs.
[07/14 14:10:33]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24234.434082     0.077148 -24234.472900  8491.776855     0.000000           0.000000    0.038818        0.038574
1 -24234.434082     0.019531 -24234.472656  8491.776855     0.000000           0.000000    0.038574      -99.961426
2 -23459.203369   775.269287 -24034.472656  8491.776855   375.269531           0.000000  199.999756      199.999756
3 -23459.203369    66.666667 -23934.472900  8491.776855   375.269531         375.269531  100.000000       99.999756
4 -23159.203369   400.000000 -23834.472656  8491.776855   575.269287         375.269531  100.000000      100.000000
5 -22258.703369  1000.500000 -23752.963135  8491.776855  1375.769287         575.269287  118.490479      100.000000
6 -21313.424805  1063.769043 -23634.472900  8491.776855  2121.048096        1375.769287  200.000000      199.999756
7 -20381.040283  1132.384521 -23634.472656  8491.776855  3053.432129        2121.048096  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:34]  --------------------------------------------------------------------------------
[07/14 14:10:34]  Iteration: 154 (0 solution, 153 counterexamples)
[07/14 14:10:36]  Generator returned sat in 1.110466 secs.
[07/14 14:10:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:37]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:10:37]  Verifer returned sat in 0.133718 secs.
[07/14 14:10:37]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24234.434082     0.077148 -24234.472900  8491.776855     0.000000           0.000000    0.038818        0.038574
1 -24234.434082     0.019531 -24234.472656  8491.776855     0.000000           0.000000    0.038574      -99.961426
2 -23459.203369   775.269287 -24034.472656  8491.776855   375.269531           0.000000  199.999756      199.999756
3 -23459.203369    50.000000 -23934.472900  8491.776855   375.269531         375.269531  100.000000       99.999756
4 -23159.203369   400.000000 -23834.472656  8491.776855   575.269287         375.269531  100.000000      100.000000
5 -22258.703369  1000.500000 -23752.963135  8491.776855  1375.769287         575.269287  118.490479      100.000000
6 -21313.424805  1063.769043 -23634.472900  8491.776855  2121.048096        1375.769287  200.000000      199.999756
7 -20381.040283  1132.384521 -23634.472656  8491.776855  3053.432129        2121.048096  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:37]  --------------------------------------------------------------------------------
[07/14 14:10:37]  Iteration: 155 (0 solution, 154 counterexamples)
[07/14 14:10:40]  Generator returned sat in 1.231321 secs.
[07/14 14:10:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:40]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:10:40]  Verifer returned sat in 0.120088 secs.
[07/14 14:10:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24234.434082    0.076904 -24234.473145  8491.776855     0.000000           0.000000    0.039062        0.038818
1 -24234.434082    0.019287 -24234.472900  8491.776855     0.000000           0.000000    0.038818      -99.961182
2 -23459.203613  775.269287 -24134.472900  8491.776855   375.269531           0.000000  299.999756      199.999756
3 -23459.203613  299.499512 -24033.972656  8491.776855   375.269531         375.269531  199.499512       99.999756
4 -22859.203613  799.499512 -23834.472900  8491.776855   775.269287         375.269531  200.000000      200.000000
5 -22258.703613  800.500000 -23754.472900  8491.776855  1375.769287         775.269287  120.000000      100.000000
6 -21618.203613  760.500000 -23634.472900  8491.776855  1916.269287        1375.769287  100.000000      100.000000
7 -20918.704102  799.499512 -23634.472900  8491.776855  2515.768799        1916.269287  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:40]  --------------------------------------------------------------------------------
[07/14 14:10:40]  Iteration: 156 (0 solution, 155 counterexamples)
[07/14 14:10:44]  Generator returned sat in 1.465339 secs.
[07/14 14:10:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:44]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/14 14:10:44]  Verifer returned sat in 0.169148 secs.
[07/14 14:10:44]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24234.434326    0.076904 -24334.473145  8491.776611     0.000000           0.000000  100.038818        0.038818
1 -24234.434326    0.019287 -24234.473145  8491.776611     0.000000           0.000000    0.038818      -99.961182
2 -23459.204102  775.269043 -24134.473145  8491.776611   375.269287           0.000000  299.999756      199.999756
3 -23459.204102  299.990234 -23934.473145  8491.776611   375.269287         375.269287   99.999756       99.999756
4 -23009.208740  549.995117 -23834.473145  8491.776611   725.264404         375.269287  100.000000      100.000000
5 -22308.708740  800.500000 -23834.473145  8491.776611  1325.764404         725.264404  200.000000      100.000000
6 -21908.208740  600.500000 -23659.725586  8491.776611  1626.264404        1325.764404  125.252441      100.000000
7 -21483.466064  549.995117 -23634.473145  8491.776611  1951.007080        1626.264404  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:44]  --------------------------------------------------------------------------------
[07/14 14:10:44]  Iteration: 157 (0 solution, 156 counterexamples)
[07/14 14:10:49]  Generator returned sat in 2.934764 secs.
[07/14 14:10:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:49]  Improved number of small numbers from 73 to 89 out of a max of 89
[07/14 14:10:49]  Verifer returned sat in 0.184855 secs.
[07/14 14:10:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24234.434570    0.076904 -24334.473145  8491.776367     0.000000           0.000000  100.038574        0.038574
1 -24234.434570    0.019043 -24234.473145  8491.776367     0.000000           0.000000    0.038574      -99.961426
2 -23359.194336  875.278809 -24134.473145  8491.776367   475.278809           0.000000  300.000000      200.000000
3 -23359.194336  299.990234 -23934.473145  8491.776367   475.278809         475.278809  100.000000      100.000000
4 -23009.208984  449.985352 -23834.473145  8491.776367   725.264160         475.278809  100.000000      100.000000
5 -22308.708984  800.500000 -23834.473145  8491.776367  1325.764160         725.264160  200.000000      100.000000
6 -21908.208984  600.500000 -23659.725586  8491.776367  1626.264160        1325.764160  125.252441      100.000000
7 -21483.466309  549.995117 -23634.473145  8491.776367  1951.006836        1626.264160  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:50]  --------------------------------------------------------------------------------
[07/14 14:10:50]  Iteration: 158 (0 solution, 157 counterexamples)
[07/14 14:10:52]  Generator returned sat in 1.039661 secs.
[07/14 14:10:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:53]  Improved number of small numbers from 47 to 61 out of a max of 89
[07/14 14:10:53]  Verifer returned sat in 0.696345 secs.
[07/14 14:10:53]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -24134.434570     0.076660 -24334.473145  8491.776367     0.000000           0.000000  200.038574      100.038574
1 -24134.434570     0.038574 -24134.473389  8491.776367     0.000000           0.000000    0.038818        0.038574
2 -23009.266846  1125.206543 -24034.473145  8491.776367   825.206482           0.000000  199.999817      199.999817
3 -23009.266846   133.358968 -23934.473145  8491.776367   825.206482         825.206482   99.999817       99.999817
4 -22909.228210   200.038452 -23834.473389  8491.776367   825.244934         825.206482  100.000244      100.000000
5 -22308.709229   700.519226 -23834.473145  8491.776367  1225.764160         825.244934  299.999756      199.999756
6 -21857.949371   750.759613 -23659.725586  8491.776367  1676.523773        1225.764160  125.252441      100.000000
7 -21057.826889   925.374924 -23634.473145  8491.776367  2276.646484        1676.523773  299.999771      199.999771
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:10:54]  --------------------------------------------------------------------------------
[07/14 14:10:54]  Iteration: 159 (0 solution, 158 counterexamples)
[07/14 14:10:57]  Generator returned sat in 1.440718 secs.
[07/14 14:10:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:10:57]  Improved gap from 0 to 100
[07/14 14:10:57]  Improved number of small numbers from 84 to 90 out of a max of 90
[07/14 14:10:57]  Verifer returned sat in 0.164092 secs.
[07/14 14:10:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -23534.011719    0.076660 -23634.011475  8491.776123    0.000000                0.0   99.999756       99.999756
1 -23534.011719    0.038330 -23634.011475  8491.776123    0.000000                0.0   99.999756       -0.000244
2 -23333.992432  300.019043 -23434.011475  8491.776123    0.000000                0.0  100.019043      100.019043
3 -23333.992432  100.000000 -23334.011719  8491.776123    0.000000                0.0    0.019287        0.019043
4 -23134.011719  200.000000 -23334.011475  8491.776123    0.000000                0.0  199.999756       99.999756
5 -22934.011475  400.000000 -23234.011475  8491.776123    0.000000                0.0  300.000000      200.000000
6 -22434.011475  800.000000 -23115.011719  8491.776123  400.000000                0.0  281.000244      200.000000
7 -22276.511719  438.500000 -23034.011475  8491.776123  457.499756              400.0  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:10:57]  --------------------------------------------------------------------------------
[07/14 14:10:57]  Iteration: 160 (0 solution, 159 counterexamples)
[07/14 14:11:03]  Generator returned sat in 4.173482 secs.
[07/14 14:11:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:04]  Improved number of small numbers from 63 to 79 out of a max of 89
[07/14 14:11:04]  Verifer returned sat in 0.413299 secs.
[07/14 14:11:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -23634.011475    0.076416 -23634.049805  8491.776123    0.000000           0.000000    0.038330        0.019165
1 -23634.011475    0.019043 -23634.030518  8491.776123    0.000000           0.000000    0.019043      -99.980835
2 -23334.011475  300.019043 -23434.030762  8491.776123    0.000000           0.000000  100.019287      100.019165
3 -23334.011475   88.888889 -23334.030640  8491.776123    0.000000           0.000000    0.019165        0.019165
4 -23200.697306  133.333333 -23234.030762  8491.776123    0.000000           0.000000   33.333455       33.333333
5 -23034.030762  200.000000 -23234.011475  8491.776123    0.000000           0.000000  199.980713       99.999878
6 -22934.011475  300.000000 -23134.030640  8491.776123    0.019165           0.000000  200.000000      100.000000
7 -22283.011475  851.000000 -23034.030518  8491.776123  451.019287           0.019165  299.999756      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:11:04]  --------------------------------------------------------------------------------
[07/14 14:11:04]  Iteration: 161 (0 solution, 160 counterexamples)
[07/14 14:11:07]  Generator returned sat in 1.378480 secs.
[07/14 14:11:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:08]  Improved gap from 157/8192 to 100
[07/14 14:11:08]  Improved number of small numbers from 36 to 50 out of a max of 90
[07/14 14:11:08]  Verifer returned sat in 0.743822 secs.
[07/14 14:11:08]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -25864.244629     0.076416 -26064.244629  10921.990011     0.000000           0.000000  200.000000      199.999898
1 -25864.244629     0.038330 -25964.244629  10921.990011     0.000000           0.000000  100.000000       99.999898
2 -25864.244629     0.038330 -25964.244527  10921.990011     0.000000           0.000000   99.999898       -0.000102
3 -25857.557418   106.687109 -25864.244527  10921.990011     0.000000           0.000000    6.687109      -93.312891
4 -25704.213863   160.030664 -25704.252193  10921.990011     0.000000           0.000000    0.038330      -39.969336
5 -25464.206197   240.045996 -25664.244527  10921.990011     0.038330           0.000000  200.000000      100.000000
6 -24702.137203   962.068994 -25467.244527  10921.990011   562.107324           0.038330  203.000000      200.000000
7 -22666.033712  2239.103491 -25464.244385  10921.990011  2598.210693         562.107324  199.999980      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:11:09]  --------------------------------------------------------------------------------
[07/14 14:11:09]  Iteration: 162 (0 solution, 161 counterexamples)
[07/14 14:11:12]  Generator returned sat in 1.585499 secs.
[07/14 14:11:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:13]  Improved number of small numbers from 47 to 47 out of a max of 89
[07/14 14:11:13]  Verifer returned sat in 0.617934 secs.
[07/14 14:11:13]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -25864.244629     0.076416 -26064.244629  10921.990011     0.000000           0.000000  200.000000      199.999898
1 -25864.244629     0.038330 -25964.244629  10921.990011     0.000000           0.000000  100.000000       99.999898
2 -25864.244629     0.038330 -25964.244527  10921.990011     0.000000           0.000000   99.999898       -0.000102
3 -25857.409270   106.835258 -25864.244527  10921.990011     0.000000           0.000000    6.835258      -93.164742
4 -25703.991641   160.252886 -25704.252193  10921.990011     0.000000           0.000000    0.260552      -39.747114
5 -25463.872864   240.379329 -25664.244527  10921.990011     0.038330           0.000000  200.333333      100.333333
6 -24702.137203   962.068994 -25467.244527  10921.990011   562.107324           0.038330  203.000000      200.000000
7 -22666.533712  2238.603491 -25464.244385  10921.990011  2597.710693         562.107324  199.999980      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:11:13]  --------------------------------------------------------------------------------
[07/14 14:11:13]  Iteration: 163 (0 solution, 162 counterexamples)
[07/14 14:11:18]  Generator returned sat in 2.880945 secs.
[07/14 14:11:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:18]  Improved gap from 313/8192 to 100
[07/14 14:11:19]  Improved number of small numbers from 46 to 56 out of a max of 90
[07/14 14:11:19]  Verifer returned sat in 0.600138 secs.
[07/14 14:11:19]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26207.246582    0.076172 -26207.361420  10921.98999    0.000000           0.000000    0.114838        0.114838
1 -26207.246582    0.019287 -26207.265900  10921.98999    0.000000           0.000000    0.019318      -99.885162
2 -25907.332764  299.933136 -26007.361420  10921.98999    0.000000           0.000000  100.028656      100.028656
3 -25907.332764    0.019104 -26007.361420  10921.98999    0.000000           0.000000  100.028656        0.028656
4 -25907.332764  100.009552 -25907.332764  10921.98999    0.000000           0.000000    0.000000      -99.971344
5 -25707.361420  199.971344 -25740.672465  10921.98999    0.000000           0.000000   33.311045        0.000000
6 -25507.342316  233.330149 -25707.361420  10921.98999    0.019104           0.000000  200.000000      100.000000
7 -24755.847092  951.495224 -25607.361328  10921.98999  551.514404           0.019104  299.999832      199.999924
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:11:19]  --------------------------------------------------------------------------------
[07/14 14:11:19]  Iteration: 164 (0 solution, 163 counterexamples)
[07/14 14:11:22]  Generator returned sat in 1.089170 secs.
[07/14 14:11:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:22]  Improved number of small numbers from 54 to 89 out of a max of 89
[07/14 14:11:22]  Verifer returned sat in 0.152140 secs.
[07/14 14:11:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26207.323242     0.076172 -26207.361328  10921.98999     0.000000           0.000000    0.038086        0.038086
1 -26207.323242     0.019043 -26207.361328  10921.98999     0.000000           0.000000    0.038086      -99.961914
2 -25907.304199   300.057129 -26107.361328  10921.98999     0.000000           0.000000  200.057129      100.057129
3 -25907.304199     0.019043 -26007.361328  10921.98999     0.000000           0.000000  100.057129        0.057129
4 -25907.304199   100.038086 -25907.304199  10921.98999     0.000000           0.000000    0.000000      -99.942871
5 -25557.199463   350.104736 -25807.361328  10921.98999     0.000000           0.000000  250.161865      150.161865
6 -24957.151855   850.209473 -25707.361328  10921.98999   550.209473           0.000000  200.000000      100.000000
7 -23280.337646  1876.814209 -25607.361328  10921.98999  2027.023682         550.209473  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:11:22]  --------------------------------------------------------------------------------
[07/14 14:11:22]  Iteration: 165 (0 solution, 164 counterexamples)
[07/14 14:11:26]  Generator returned sat in 1.320673 secs.
[07/14 14:11:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:26]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:11:26]  Verifer returned sat in 0.113001 secs.
[07/14 14:11:26]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26207.323242     0.076172 -26207.361328  10921.98999     0.000000           0.000000    0.038086        0.038086
1 -26207.323242     0.019043 -26207.361328  10921.98999     0.000000           0.000000    0.038086      -99.961914
2 -25907.304199   300.057129 -26107.361328  10921.98999     0.000000           0.000000  200.057129      100.057129
3 -25907.304199     0.047607 -26007.361328  10921.98999     0.000000           0.000000  100.057129        0.057129
4 -25907.304199   100.047607 -25907.304199  10921.98999     0.000000           0.000000    0.000000      -99.942871
5 -25657.228027   250.076172 -25707.361328  10921.98999     0.000000           0.000000   50.133301       50.133301
6 -25257.285156   450.076172 -25707.361328  10921.98999   250.076172           0.000000  200.000000      100.000000
7 -24180.670898  1276.614258 -25607.361328  10921.98999  1126.690430         250.076172  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:11:26]  --------------------------------------------------------------------------------
[07/14 14:11:26]  Iteration: 166 (0 solution, 165 counterexamples)
[07/14 14:11:29]  Generator returned sat in 1.106088 secs.
[07/14 14:11:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:30]  Improved number of small numbers from 51 to 64 out of a max of 89
[07/14 14:11:30]  Verifer returned sat in 0.610029 secs.
[07/14 14:11:30]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26107.396484     0.075928 -26207.331403  10921.959961     0.000000           0.000000   99.934919       99.934814
1 -26107.396484     0.010986 -26107.407575  10921.960066     0.000000           0.000000    0.011091       -0.065081
2 -25907.304199   200.103376 -26007.331403  10921.960066     0.000000           0.000000  100.027204      100.027204
3 -25907.304199     0.010882 -26007.331403  10921.960066     0.000000           0.000000  100.027204        0.027204
4 -25907.304199   100.016323 -25907.304199  10921.960205     0.000000           0.000000    0.000000      -99.972656
5 -25657.228027   250.076172 -25707.361328  10921.960205     0.000000           0.000000   50.133301       50.103516
6 -25182.262033   525.099295 -25707.331403  10921.960205   250.076172           0.000000  274.993199      174.993338
7 -24068.106288  1389.148943 -25607.331299  10921.960205  1239.225342         250.076172  299.999669      199.999913
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:11:30]  --------------------------------------------------------------------------------
[07/14 14:11:30]  Iteration: 167 (0 solution, 166 counterexamples)
[07/14 14:11:52]  Generator returned sat in 20.336153 secs.
[07/14 14:11:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:11:53]  Improved gap from 0 to 100
[07/14 14:11:53]  Improved number of small numbers from 86 to 90 out of a max of 90
[07/14 14:11:53]  Verifer returned sat in 0.160736 secs.
[07/14 14:11:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26609.304199    0.075684 -26709.304443  11423.932617     0.000000           0.000000  100.000244      100.000000
1 -26609.304199    0.038086 -26709.304199  11423.932617     0.000000           0.000000  100.000000        0.000000
2 -26609.304199   99.962158 -26609.304199  11423.932617     0.000000           0.000000    0.000000     -100.000000
3 -26508.554443  100.749756 -26509.304199  11423.932617     0.000000           0.000000    0.749756      -99.250244
4 -25907.304199  602.000000 -26409.304199  11423.932617   301.999756           0.000000  200.000244      100.000244
5 -25505.304443  602.000000 -26209.304199  11423.932617   603.999756         301.999756  100.000000      100.000000
6 -24803.304443  802.000000 -26209.304199  11423.932617  1106.000000         603.999756  299.999756      199.999756
7 -24501.304199  602.000000 -26109.304199  11423.932617  1407.999756        1106.000000  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:11:53]  --------------------------------------------------------------------------------
[07/14 14:11:53]  Iteration: 168 (0 solution, 167 counterexamples)
[07/14 14:11:56]  Generator returned sat in 1.086951 secs.
[07/14 14:11:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:11:56]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:11:56]  Verifer returned sat in 0.119023 secs.
[07/14 14:11:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26609.304199    0.075684 -26709.554443  11423.932617     0.000000           0.000000  100.250244      100.000000
1 -26609.304199    0.038086 -26709.304199  11423.932617     0.000000           0.000000  100.000000        0.000000
2 -26609.304199   99.962158 -26609.304199  11423.932617     0.000000           0.000000    0.000000     -100.000000
3 -26508.554443  100.749756 -26509.304199  11423.932617     0.000000           0.000000    0.749756      -99.250244
4 -25907.304199  602.000000 -26409.304199  11423.932617   301.999756           0.000000  200.000244      100.000244
5 -25505.304443  602.000000 -26209.304199  11423.932617   603.999756         301.999756  100.000000      100.000000
6 -24803.304443  802.000000 -26209.304199  11423.932617  1106.000000         603.999756  299.999756      199.999756
7 -24501.304199  602.000000 -26109.304199  11423.932617  1407.999756        1106.000000  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:11:57]  --------------------------------------------------------------------------------
[07/14 14:11:57]  Iteration: 169 (0 solution, 168 counterexamples)
[07/14 14:12:03]  Generator returned sat in 4.103786 secs.
[07/14 14:12:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:12:03]  Improved gap from 309/8192 to 20.3125
[07/14 14:12:04]  Improved number of small numbers from 32 to 55 out of a max of 90
[07/14 14:12:04]  Verifer returned sat in 0.763259 secs.
[07/14 14:12:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -26978.894043    0.075195 -26994.859660  11423.932617    0.00000            0.00000   15.965617        0.000122
1 -26978.894043    0.037842 -26978.894043  11423.932617    0.00000            0.00000    0.000000      -99.999878
2 -26878.856445  100.037598 -26878.894043  11423.932617    0.00000            0.00000    0.037598      -99.962280
3 -26498.327393  380.566650 -26678.894165  11423.932617    0.03772            0.00000  180.529053      180.529053
4 -26498.327393  159.982747 -26578.894287  11423.932617    0.03772            0.03772   80.529175       80.529053
5 -26498.327393   80.491374 -26518.677572  11443.403524    0.03772            0.03772   20.312459       -0.000041
6 -26477.894165   40.745687 -26498.365072  11522.970337    0.03772            0.03772   20.433187        0.000000
7 -26477.454508   20.872843 -26477.931885  11522.970459    0.03772            0.03772    0.439657      -99.560221
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:12:04]  --------------------------------------------------------------------------------
[07/14 14:12:04]  Iteration: 170 (0 solution, 169 counterexamples)
[07/14 14:12:18]  Generator returned sat in 12.556450 secs.
[07/14 14:12:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:12:19]  Improved gap from 0 to 100
[07/14 14:12:19]  Improved number of small numbers from 55 to 82 out of a max of 90
[07/14 14:12:19]  Verifer returned sat in 0.573326 secs.
[07/14 14:12:19]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27268.705322    0.074951 -27367.742920  11713.743896   0.000000           0.000000   99.037598        0.000000
1 -27268.705322    0.018799 -27268.705322  11713.743896   0.000000           0.000000    0.000000     -100.000000
2 -27068.686768  200.018555 -27068.705363  11713.743896   0.000000           0.000000    0.018595        0.018555
3 -26768.686564  300.018799 -26968.705322  11713.743896   0.018799           0.000000  199.999959      199.999959
4 -26768.667725  200.018799 -26935.718018  11713.743896   0.037598           0.018799  167.012695      100.000000
5 -26768.667725  166.993652 -26828.905363  11713.743896   0.037598           0.037598   60.200041        0.000000
6 -26468.667765  360.200000 -26768.705322  11713.743896   0.037598           0.037598  299.999959      199.999959
7 -26468.167725  300.500000 -26668.705322  11713.743896   0.537354           0.037598  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:12:19]  --------------------------------------------------------------------------------
[07/14 14:12:19]  Iteration: 171 (0 solution, 170 counterexamples)
[07/14 14:12:28]  Generator returned sat in 6.748952 secs.
[07/14 14:12:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:12:28]  Improved gap from 0 to 100
[07/14 14:12:28]  Improved number of small numbers from 28 to 90 out of a max of 90
[07/14 14:12:28]  Verifer returned sat in 0.239094 secs.
[07/14 14:12:28]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27069.186523    0.074707 -27269.186523  11714.225098   0.000000           0.000000  200.000000      200.000000
1 -27069.186523    0.018555 -27235.032227  11714.225098   0.000000           0.000000  165.845703      100.000000
2 -27069.186523    0.018799 -27069.205078  11714.225098   0.000000           0.000000    0.018555        0.000000
3 -26869.167725  200.037354 -26969.186523  11714.225098   0.018799           0.000000  100.000000      100.000000
4 -26869.167725    0.500000 -26969.186523  11714.225098   0.018799           0.018799  100.000000        0.000000
5 -26569.149170  400.018555 -26769.186523  11714.225098   0.037598           0.018799  199.999756      199.999756
6 -26569.149170    0.500000 -26769.186523  11714.225098   0.037598           0.037598  199.999756       99.999756
7 -26467.898926  301.250000 -26669.186279  11714.225098   1.287598           0.037598  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:12:29]  --------------------------------------------------------------------------------
[07/14 14:12:29]  Iteration: 172 (0 solution, 171 counterexamples)
[07/14 14:12:32]  Generator returned sat in 1.320913 secs.
[07/14 14:12:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:12:32]  Improved number of small numbers from 85 to 85 out of a max of 89
[07/14 14:12:32]  Verifer returned sat in 0.134760 secs.
[07/14 14:12:32]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27069.186523    0.074707 -27269.186523  11714.225098   0.000000           0.000000  200.000000      200.000000
1 -27069.186523    0.018555 -27235.032227  11714.225098   0.000000           0.000000  165.845703      100.000000
2 -27069.186523    0.018799 -27069.205078  11714.225098   0.000000           0.000000    0.018555        0.000000
3 -26869.167725  200.037354 -26969.186523  11714.225098   0.018799           0.000000  100.000000      100.000000
4 -26869.167725    0.500000 -26968.986523  11714.225098   0.018799           0.018799   99.800000        0.000000
5 -26569.149170  399.818555 -26769.186523  11714.225098   0.037598           0.018799  199.999756      199.999756
6 -26569.149170    0.500000 -26769.186523  11714.225098   0.037598           0.037598  199.999756       99.999756
7 -26468.398926  300.750000 -26669.186279  11714.225098   0.787598           0.037598  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:12:33]  --------------------------------------------------------------------------------
[07/14 14:12:33]  Iteration: 173 (0 solution, 172 counterexamples)
[07/14 14:12:42]  Generator returned sat in 7.625033 secs.
[07/14 14:12:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:12:42]  Improved gap from 1/2 to 0
[07/14 14:12:43]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:12:43]  Verifer returned sat in 0.196223 secs.
[07/14 14:12:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27169.177490    0.074707 -27269.186768  11714.224854   0.000000           0.000000  100.009277      100.009277
1 -27169.177490    0.009277 -27269.186768  11714.224854   0.000000           0.000000  100.009277        0.009277
2 -27169.177490    0.018555 -27169.186768  11714.224854   0.000000           0.000000    0.009277      -99.990723
3 -26969.186768  200.000000 -26969.196045  11714.224854   0.000000           0.000000    0.009277        0.000000
4 -26768.196045  201.000000 -26869.186768  11714.224854   0.009277           0.000000  100.981445      100.981445
5 -26768.196045    0.500000 -26869.186768  11714.224854   0.009277           0.009277  100.981445        0.981445
6 -26768.196045    1.500000 -26768.214600  11813.243408   0.009277           0.009277    0.009277        0.000000
7 -26765.705322    2.500000 -26768.205322  11813.243408   0.009277           0.009277    2.490723      -97.509277
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:12:43]  --------------------------------------------------------------------------------
[07/14 14:12:43]  Iteration: 174 (0 solution, 173 counterexamples)
[07/14 14:12:46]  Generator returned sat in 1.470836 secs.
[07/14 14:12:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:12:47]  Improved gap from 39/4096 to 20.3125
[07/14 14:12:47]  Improved number of small numbers from 48 to 66 out of a max of 90
[07/14 14:12:47]  Verifer returned sat in 0.608243 secs.
[07/14 14:12:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27869.112549    0.074707 -27869.149902  11714.224854        0.0                0.0    0.037354        0.018433
1 -27869.112549    0.018555 -27869.130859  11714.224854        0.0                0.0    0.018311      -99.981567
2 -27469.131104  399.999756 -27769.130859  11714.224854        0.0                0.0  299.999756      199.999878
3 -27469.131104  299.981323 -27569.130981  11714.224854        0.0                0.0   99.999878       99.999878
4 -27418.140320  150.990662 -27498.809326  11714.224854        0.0                0.0   80.669006       50.990662
5 -27418.140320   76.495331 -27469.130859  11763.234192        0.0                0.0   50.990540        0.000000
6 -27418.140320   39.247665 -27418.140320  11842.921631        0.0                0.0    0.000000      -20.312561
7 -27397.516487   20.623833 -27397.827637  11842.921875        0.0                0.0    0.311150      -99.688484
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:12:47]  --------------------------------------------------------------------------------
[07/14 14:12:47]  Iteration: 175 (0 solution, 174 counterexamples)
[07/14 14:12:52]  Generator returned sat in 2.904541 secs.
[07/14 14:12:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:12:53]  Improved gap from 153/16384 to 0
[07/14 14:12:53]  Improved number of small numbers from 29 to 90 out of a max of 90
[07/14 14:12:53]  Verifer returned sat in 0.292373 secs.
[07/14 14:12:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27469.131104    0.074463 -27701.794434  11695.897949    0.000000           0.000000  232.663330      132.663574
1 -27469.131104    0.018555 -27601.794434  11695.897949    0.000000           0.000000  132.663330       32.663574
2 -27469.131104  132.654053 -27501.794678  11763.234131    0.000000           0.000000   32.663574       -0.000244
3 -27169.131104  332.663574 -27369.131104  11763.234131    0.000000           0.000000  200.000000      199.999756
4 -26869.135742  499.995361 -27269.130859  11763.234131  299.995117           0.000000  100.000000      100.000000
5 -26869.135742    0.500000 -27169.890137  11763.234131  299.995117         299.995117    0.759277        0.000000
6 -26868.145020    1.750000 -27169.130859  11862.243408  299.995117         299.995117    0.990723        0.000000
7 -26865.510742    3.625000 -27168.140137  11862.243408  299.995117         299.995117    2.634277      -97.365723
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:12:53]  --------------------------------------------------------------------------------
[07/14 14:12:53]  Iteration: 176 (0 solution, 175 counterexamples)
[07/14 14:12:57]  Generator returned sat in 1.735177 secs.
[07/14 14:12:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:12:57]  Improved gap from 19/4096 to 100
[07/14 14:12:57]  Improved number of small numbers from 86 to 90 out of a max of 90
[07/14 14:12:57]  Verifer returned sat in 0.171067 secs.
[07/14 14:12:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27469.131104    0.074463 -27769.130859  11763.234131    0.000000           0.000000  299.999756      200.000000
1 -27469.131104    0.018311 -27669.131104  11763.234131    0.000000           0.000000  200.000000      100.000000
2 -27469.131104  199.990479 -27569.131104  11763.234131    0.000000           0.000000  100.000000        0.000000
3 -27452.310791  116.820312 -27469.130859  11763.234131    0.000000           0.000000   16.820068      -83.179688
4 -27292.900391  176.230469 -27301.819092  11763.234131    0.000000           0.000000    8.918701      -23.769287
5 -27036.473389  265.345703 -27169.131104  11763.234131    0.000000           0.000000  132.657715      132.657715
6 -26770.112549  399.018555 -27069.131104  11763.234131  199.018555           0.000000  100.000000      100.000000
7 -26670.103271  200.009277 -27069.131104  11763.234131  199.027832         199.018555  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:12:58]  --------------------------------------------------------------------------------
[07/14 14:12:58]  Iteration: 177 (0 solution, 176 counterexamples)
[07/14 14:13:01]  Generator returned sat in 1.570399 secs.
[07/14 14:13:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:13:01]  Verifer returned unsat in 0.025893 secs.
[07/14 14:13:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:13:01]  --------------------------------------------------------------------------------
[07/14 14:13:01]  Iteration: 178 (1 solution, 176 counterexamples)
[07/14 14:13:05]  Generator returned sat in 1.714841 secs.
[07/14 14:13:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:13:06]  Improved number of small numbers from 44 to 89 out of a max of 89
[07/14 14:13:06]  Verifer returned sat in 0.241162 secs.
[07/14 14:13:06]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27569.149902     0.074463 -27569.168457  11662.308594     0.000000           0.000000    0.018555        0.000000
1 -27569.131104     0.037354 -27569.149658  11762.289795     0.000000           0.000000    0.018555        0.000000
2 -27370.075439   199.074219 -27569.131104  11762.289795     0.000000           0.000000  199.055664       99.055664
3 -27370.075439   199.037354 -27370.093994  11763.234131     0.000000           0.000000    0.018555        0.000000
4 -27170.056641   200.037354 -27370.075439  11763.234131     0.018555           0.000000  200.000244      100.000244
5 -26770.407959   599.648926 -27270.075439  11763.234131   199.667725           0.018555  299.999756      199.999756
6 -25571.554199  1498.853516 -27170.075195  11763.234131  1298.521240         199.667725  299.999756      200.000000
7 -22673.328125  3198.225830 -27070.075195  11763.234131  4196.747070        1298.521240  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:06]  --------------------------------------------------------------------------------
[07/14 14:13:06]  Iteration: 179 (1 solution, 177 counterexamples)
[07/14 14:13:09]  Generator returned sat in 1.512992 secs.
[07/14 14:13:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:13:10]  Improved gap from 19/1024 to 100
[07/14 14:13:10]  Improved number of small numbers from 61 to 84 out of a max of 90
[07/14 14:13:10]  Verifer returned sat in 0.448748 secs.
[07/14 14:13:10]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27570.075439     0.074463 -27670.075684  11763.234131     0.000000           0.000000  100.000244      100.000000
1 -27570.075439   100.000000 -27670.075439  11763.234131     0.000000           0.000000  100.000000        0.000000
2 -27370.075439   300.000000 -27519.631348  11763.234131     0.000000           0.000000  149.555908      100.000000
3 -27370.075439   149.518616 -27470.075439  11763.234131     0.000000           0.000000  100.000000        0.000000
4 -27170.038208   300.037231 -27370.075439  11763.234131     0.037109           0.000000  200.000122      100.000122
5 -26469.463867   900.574463 -27270.075439  11763.234131   500.611816           0.037109  299.999756      199.999756
6 -24718.258789  2051.204834 -27170.075439  11763.234131  2151.816650         500.611816  300.000000      200.000000
7 -20615.349121  4402.909668 -27070.075195  11763.234131  6154.726562        2151.816650  299.999512      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:10]  --------------------------------------------------------------------------------
[07/14 14:13:10]  Iteration: 180 (1 solution, 178 counterexamples)
[07/14 14:13:14]  Generator returned sat in 1.229521 secs.
[07/14 14:13:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:13:14]  Improved gap from 1220761/12288 to 100
[07/14 14:13:14]  Improved number of small numbers from 76 to 90 out of a max of 90
[07/14 14:13:14]  Verifer returned sat in 0.175841 secs.
[07/14 14:13:14]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27570.729492     0.074463 -27670.075684  11763.234131     0.000000           0.000000   99.346191       99.346191
1 -27570.729492    99.336426 -27667.458740  11763.234131     0.000000           0.000000   96.729248       -0.653809
2 -27370.075684   297.383057 -27519.612793  11763.234131     0.000000           0.000000  149.537109      100.000000
3 -27370.075684     0.009277 -27470.075684  11763.234131     0.000000           0.000000  100.000000        0.000000
4 -27169.057129   301.018555 -27370.075439  11763.234131     0.037109           0.000000  200.981201      100.981445
5 -26470.117920   899.920410 -27270.066406  11763.234131   501.920166           0.037109  298.028320      198.037598
6 -24718.259033  2049.887207 -27170.066406  11763.234131  2151.816650         501.920166  299.990723      200.000000
7 -20617.966064  4400.283691 -27070.075439  11763.234131  6154.726318        2151.816650  297.383057      197.383301
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:14]  --------------------------------------------------------------------------------
[07/14 14:13:14]  Iteration: 181 (1 solution, 179 counterexamples)
[07/14 14:13:30]  Generator returned sat in 13.271089 secs.
[07/14 14:13:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:13:30]  Improved number of small numbers from 72 to 89 out of a max of 89
[07/14 14:13:30]  Verifer returned sat in 0.143707 secs.
[07/14 14:13:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27570.729736    0.074219 -27870.075684  11763.233887   0.000000           0.000000  299.345947      199.345947
1 -27570.729736   99.336182 -27770.075684  11763.233887   0.000000           0.000000  199.345947       99.345947
2 -27370.075928  399.999756 -27670.075684  11763.233887   0.000000           0.000000  299.999756      199.999756
3 -27270.075684  400.000000 -27470.075928  11763.233887   0.000000           0.000000  200.000244      200.000000
4 -27268.075928  202.000000 -27370.075684  11763.233887   0.009277           0.000000  101.990479      101.990479
5 -27168.066406  202.000000 -27270.075928  11763.233887   0.018799           0.009277  101.990723      101.990479
6 -27068.057129  202.000000 -27170.075684  11763.233887   0.028076           0.018799  101.990479      101.990479
7 -26968.047607  202.000000 -27070.075928  11763.233887   0.037109           0.028076  101.991211      101.990967
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:30]  --------------------------------------------------------------------------------
[07/14 14:13:30]  Iteration: 182 (1 solution, 180 counterexamples)
[07/14 14:13:36]  Generator returned sat in 3.409712 secs.
[07/14 14:13:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:13:36]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:13:36]  Verifer returned sat in 0.127485 secs.
[07/14 14:13:36]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27570.729736     0.074219 -27870.075684  11763.233887     0.000000           0.000000  299.345947      199.345947
1 -27570.729736    99.336182 -27670.075684  11763.233887     0.000000           0.000000   99.345947       99.345947
2 -27370.075928   299.999756 -27670.075684  11763.233887     0.000000           0.000000  299.999756      199.999756
3 -27270.075684   400.000000 -27470.075928  11763.233887     0.000000           0.000000  200.000244      200.000000
4 -27268.075928   202.000000 -27470.075684  11763.233887     0.037109           0.000000  201.962646      101.962646
5 -26868.038574   602.000000 -27270.075928  11763.233887   202.037109           0.037109  200.000244      200.000000
6 -25666.039307  1401.999512 -27170.075684  11763.233887  1404.036377         202.037109  100.000000      100.000000
7 -23764.039307  2002.000000 -27070.075928  11763.233887  3206.036377        1404.036377  100.000244      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:36]  --------------------------------------------------------------------------------
[07/14 14:13:36]  Iteration: 183 (1 solution, 181 counterexamples)
[07/14 14:13:40]  Generator returned sat in 1.424629 secs.
[07/14 14:13:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:13:40]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/14 14:13:40]  Verifer returned sat in 0.205428 secs.
[07/14 14:13:40]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27570.729980     0.074219 -27870.075928  11763.233887     0.000000           0.000000  299.345947      199.345947
1 -27570.729980    99.335693 -27670.075928  11763.233887     0.000000           0.000000   99.345947       99.345947
2 -27370.076172   299.999756 -27670.075928  11763.233887     0.000000           0.000000  299.999756      199.999756
3 -27270.075928   400.000000 -27470.159424  11763.233887     0.000000           0.000000  200.083496      200.000000
4 -27268.659424   201.500000 -27469.825928  11763.233887     0.037109           0.000000  201.129395      101.379395
5 -26867.788818   602.000000 -27270.159424  11763.233887   202.287109           0.037109  200.083496      200.000000
6 -25666.039307  1401.833008 -27170.075928  11763.233887  1404.036133         202.287109  100.000488      100.000488
7 -23764.039795  2002.000000 -27070.076172  11763.233887  3206.035889        1404.036133  100.000488      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:40]  --------------------------------------------------------------------------------
[07/14 14:13:40]  Iteration: 184 (1 solution, 182 counterexamples)
[07/14 14:13:47]  Generator returned sat in 4.262032 secs.
[07/14 14:13:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:13:47]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:13:47]  Verifer returned sat in 0.148805 secs.
[07/14 14:13:47]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -27670.075928     0.074219 -27970.075928  11763.233887       0.00                0.0    300.0           200.0
1 -27670.075928     0.037109 -27770.075928  11763.233887       0.00                0.0    100.0           100.0
2 -27570.075928   200.000000 -27670.075928  11763.233887       0.00                0.0    100.0           100.0
3 -27570.075928   100.000000 -27670.075928  11763.233887       0.00                0.0    100.0             0.0
4 -27168.075928   502.000000 -27470.075928  11763.233887     202.00                0.0    100.0           100.0
5 -26417.075928   851.000000 -27370.075928  11763.233887     853.00              202.0    100.0           100.0
6 -25491.575928  1025.500000 -27296.075928  11763.233887    1678.50              853.0    126.0           100.0
7 -24356.825928  1260.750000 -27170.075928  11763.233887    2713.25             1678.5    100.0           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:47]  --------------------------------------------------------------------------------
[07/14 14:13:47]  Iteration: 185 (1 solution, 183 counterexamples)
[07/14 14:13:53]  Generator returned sat in 3.444955 secs.
[07/14 14:13:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:13:53]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:13:53]  Verifer returned sat in 0.116210 secs.
[07/14 14:13:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -27670.076172    0.074219 -27870.076172  11763.233887        0.0                0.0   200.00          200.00
1 -27670.076172    0.037109 -27770.076172  11763.233887        0.0                0.0   100.00          100.00
2 -27520.326172  249.750000 -27770.076172  11763.233887        0.0                0.0   249.75          149.75
3 -27520.326172  249.750000 -27637.076172  11763.233887        0.0                0.0   116.75           49.75
4 -26902.576172  734.500000 -27470.076172  11763.233887      367.5                0.0   200.00          200.00
5 -26502.076172  600.500000 -27370.076172  11763.233887      668.0              367.5   200.00          200.00
6 -25901.576172  800.500000 -27270.076172  11763.233887     1268.5              668.0   100.00          100.00
7 -25267.076172  734.500000 -27270.076172  11763.233887     1803.0             1268.5   200.00          100.00
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:54]  --------------------------------------------------------------------------------
[07/14 14:13:54]  Iteration: 186 (1 solution, 184 counterexamples)
[07/14 14:13:57]  Generator returned sat in 1.528249 secs.
[07/14 14:13:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:13:57]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:13:57]  Verifer returned sat in 0.111445 secs.
[07/14 14:13:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -27670.076172    0.073975 -27870.076172  11763.233643     0.000000           0.000000   200.00          200.00
1 -27670.076172    0.036865 -27770.076172  11763.233643     0.000000           0.000000   100.00          100.00
2 -27520.326416  249.749756 -27770.076172  11763.233643     1.999756           0.000000   247.75          147.75
3 -27520.326416  247.750000 -27637.076172  11763.233643     1.999756           1.999756   114.75           47.75
4 -26904.576416  730.500000 -27470.076172  11763.233643   365.499756           1.999756   200.00          200.00
5 -26503.076416  601.500000 -27370.076172  11763.233643   666.999756         365.499756   200.00          200.00
6 -25901.576416  801.500000 -27270.076172  11763.233643  1268.499756         666.999756   100.00          100.00
7 -25266.076416  735.500000 -27270.076172  11763.233643  1803.999756        1268.499756   200.00          100.00
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:13:58]  --------------------------------------------------------------------------------
[07/14 14:13:58]  Iteration: 187 (1 solution, 185 counterexamples)
[07/14 14:14:01]  Generator returned sat in 1.479517 secs.
[07/14 14:14:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:02]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:14:02]  Verifer returned sat in 0.126436 secs.
[07/14 14:14:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27670.076172    0.073730 -27870.076172  11763.233643     0.000000           0.000000  200.000000      200.000000
1 -27670.076172    0.036865 -27770.076172  11763.233643     0.000000           0.000000  100.000000      100.000000
2 -27520.826416  249.249756 -27770.076172  11763.233643     1.499756           0.000000  247.750000      147.750000
3 -27520.826416  247.750000 -27637.076172  11763.233643     1.499756           1.499756  114.750000       47.750000
4 -26905.076416  730.500000 -27470.076172  11763.233643   364.999756           1.499756  200.000000      200.000000
5 -26503.076416  602.000000 -27370.076172  11763.233643   666.999756         364.999756  200.000000      200.000000
6 -25901.076416  802.000000 -27270.076172  11763.233643  1268.999512         666.999756  100.000244      100.000244
7 -25265.076660  736.000000 -27270.076172  11763.233643  1803.999512        1268.999512  201.000000      101.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:02]  --------------------------------------------------------------------------------
[07/14 14:14:02]  Iteration: 188 (1 solution, 186 counterexamples)
[07/14 14:14:07]  Generator returned sat in 2.517335 secs.
[07/14 14:14:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:07]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:14:07]  Verifer returned sat in 0.131918 secs.
[07/14 14:14:07]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -27670.076172     0.073730 -27870.076172  11763.233398      0.000               0.00    200.0           200.0
1 -27670.076172     0.036865 -27770.076172  11763.233398      0.000               0.00    100.0           100.0
2 -27570.076172   200.000000 -27670.076172  11763.233398      0.000               0.00    100.0           100.0
3 -27570.076172   100.000000 -27661.076172  11763.233398      0.000               0.00     91.0             0.0
4 -27250.076172   411.000000 -27570.076172  11763.233398    120.000               0.00    200.0           100.0
5 -26431.576172  1018.500000 -27370.076172  11763.233398    738.500             120.00    200.0           200.0
6 -24501.826172  2129.750000 -27270.076172  11763.233398   2568.250             738.50    200.0           200.0
7 -20723.201172  3978.625000 -27270.076172  11763.233398   6246.875            2568.25    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:07]  --------------------------------------------------------------------------------
[07/14 14:14:07]  Iteration: 189 (1 solution, 187 counterexamples)
[07/14 14:14:11]  Generator returned sat in 1.438022 secs.
[07/14 14:14:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:11]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:14:11]  Verifer returned sat in 0.131899 secs.
[07/14 14:14:11]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27670.076172     0.073486 -27920.076416  11763.233154     0.000000           0.000000  250.000244      200.000000
1 -27670.076172     0.036621 -27770.076172  11763.233154     0.000000           0.000000  100.000000      100.000000
2 -27570.076172   200.000000 -27670.076172  11763.233154     0.000000           0.000000  100.000000      100.000000
3 -27570.076172   100.000000 -27661.076416  11763.233154     0.000000           0.000000   91.000244        0.000000
4 -27250.076416   411.000000 -27570.076172  11763.233154   119.999756           0.000000  200.000000      100.000000
5 -26431.576416  1018.500000 -27370.076172  11763.233154   738.500000         119.999756  199.999756      199.999756
6 -24501.826172  2129.750000 -27270.076416  11763.233154  2568.250000         738.500000  200.000244      200.000000
7 -20723.201416  3978.625000 -27270.076172  11763.233154  6246.875000        2568.250000  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:11]  --------------------------------------------------------------------------------
[07/14 14:14:11]  Iteration: 190 (1 solution, 188 counterexamples)
[07/14 14:14:15]  Generator returned sat in 1.578006 secs.
[07/14 14:14:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:16]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:14:16]  Verifer returned sat in 0.137860 secs.
[07/14 14:14:16]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27670.076172     0.073486 -27970.076172  11763.233154     0.000000           0.000000  300.000000      200.000000
1 -27670.076172     0.036377 -27770.076172  11763.233154     0.000000           0.000000  100.000000      100.000000
2 -27570.076172   200.000000 -27770.076172  11763.233154     0.000000           0.000000  200.000000      100.000000
3 -27570.075195   200.000977 -27661.076660  11763.233154     0.000000           0.000000   91.001465        0.000977
4 -27250.076660   411.000000 -27570.076172  11763.233154   119.999512           0.000000  200.000000      100.000000
5 -26431.576660  1018.500000 -27370.076172  11763.233154   738.500000         119.999512  199.999512      199.999512
6 -24301.826172  2329.750000 -27270.076660  11763.233154  2768.250000         738.500000  200.000488      200.000000
7 -20223.201660  4278.625000 -27270.076172  11763.233154  6746.875000        2768.250000  299.999512      199.999512
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:16]  --------------------------------------------------------------------------------
[07/14 14:14:16]  Iteration: 191 (1 solution, 189 counterexamples)
[07/14 14:14:20]  Generator returned sat in 1.852458 secs.
[07/14 14:14:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:21]  Improved number of small numbers from 72 to 74 out of a max of 89
[07/14 14:14:21]  Verifer returned sat in 0.350787 secs.
[07/14 14:14:21]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -27670.076660     0.073486 -27970.076172  11763.23291     0.000000           0.000000  299.999512      199.999512
1 -27670.076660     0.036377 -27770.076172  11763.23291     0.000000           0.000000   99.999512       99.999512
2 -27570.076660   199.999512 -27770.076172  11763.23291     0.000000           0.000000  199.999512       99.999512
3 -27570.075439   200.000732 -27611.076416  11763.23291     0.000000           0.000000   41.000977        0.000732
4 -27250.076660   360.999756 -27570.076172  11763.23291   119.999512           0.000000  200.000000      100.000000
5 -26506.577026   943.499634 -27370.076172  11763.23291   763.499146         119.999512  100.000000      100.000000
6 -24389.327576  2217.249451 -27270.076660  11763.23291  2768.250000         763.499146  112.499084      112.498596
7 -20491.952972  4009.873688 -27270.076172  11763.23291  6478.123535        2768.250000  299.999664      199.999664
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:21]  --------------------------------------------------------------------------------
[07/14 14:14:21]  Iteration: 192 (1 solution, 190 counterexamples)
[07/14 14:14:25]  Generator returned sat in 1.635455 secs.
[07/14 14:14:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:25]  Improved gap from 301/32768 to 100
[07/14 14:14:25]  Improved number of small numbers from 49 to 90 out of a max of 90
[07/14 14:14:25]  Verifer returned sat in 0.219792 secs.
[07/14 14:14:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t  service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -28270.984131    0.073242 -28271.02124  11763.233154     0.000000           0.000000    0.037109        0.037109
1 -28270.984131    0.018311 -28271.02124  11763.233154     0.000000           0.000000    0.037109      -99.962891
2 -28071.021240  200.000000 -28171.02124  11763.233154     0.000000           0.000000  100.000000        0.000000
3 -27871.002686  300.018555 -27971.02124  11763.233154     0.018555           0.000000  100.000000      100.000000
4 -27369.002686  602.000000 -27922.02124  11763.233154   402.018311           0.018555  151.000244      100.000244
5 -26820.002930  700.000000 -27771.02124  11763.233154   851.018311         402.018311  100.000000      100.000000
6 -26118.002930  802.000000 -27671.02124  11763.233154  1353.018555         851.018311  199.999756      199.999756
7 -25716.002686  602.000000 -27671.02124  11763.233154  1755.018311        1353.018555  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:26]  --------------------------------------------------------------------------------
[07/14 14:14:26]  Iteration: 193 (1 solution, 191 counterexamples)
[07/14 14:14:29]  Generator returned sat in 1.456618 secs.
[07/14 14:14:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:30]  Improved number of small numbers from 44 to 52 out of a max of 89
[07/14 14:14:30]  Verifer returned sat in 0.668025 secs.
[07/14 14:14:30]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -29377.140381     0.072998 -29477.176880  11763.233154     0.000000           0.000000  100.036499      100.036499
1 -29377.140381     0.036377 -29377.176880  11763.233154     0.000000           0.000000    0.036499        0.036499
2 -29077.176880   300.000000 -29277.176880  11763.233154     0.000000           0.000000  200.000000      200.000000
3 -29077.140259   200.036621 -29177.176880  11763.233154     0.036621           0.000000  100.000000      100.000000
4 -28275.085327   902.054932 -29177.176880  11763.233154   602.091553           0.036621  300.000000      200.000000
5 -26820.002930  1755.082397 -29057.176880  11763.233154  2057.173950         602.091553  180.000000      100.000000
6 -23925.379333  3074.623596 -28917.176880  11763.233154  4751.797546        2057.173950  240.000000      200.000000
7 -19031.443939  5133.935394 -28777.177002  11763.233154  9545.733154        4751.797546  199.999908      199.999786
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:14:30]  --------------------------------------------------------------------------------
[07/14 14:14:30]  Iteration: 194 (1 solution, 192 counterexamples)
[07/14 14:14:37]  Generator returned sat in 3.948109 secs.
[07/14 14:14:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:37]  Improved gap from 299/8192 to 21.875
[07/14 14:14:37]  Improved number of small numbers from 31 to 90 out of a max of 90
[07/14 14:14:37]  Verifer returned sat in 0.350834 secs.
[07/14 14:14:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -31280.536621    0.072998 -31280.536865  13545.343262   0.000000           0.000000    0.000244      -21.249512
1 -31212.375488   68.161377 -31212.411865  13576.593018   0.000000           0.000000    0.036377      -21.838623
2 -31190.500488   21.911377 -31190.536621  13576.593018   0.000000           0.000000    0.036133      -99.963623
3 -30843.463867  347.072754 -30990.536865  13576.593018   0.036621           0.000000  147.036377      147.036377
4 -30843.463867  147.000000 -30919.036621  13576.593018   0.036621           0.036621   75.536133       47.036377
5 -30843.463867   75.500000 -30883.213867  13629.556641   0.036621           0.036621   39.713379        0.000000
6 -30843.427246   39.750000 -30843.500488  13707.681641   0.036621           0.036621    0.036621      -21.838379
7 -30821.588867   21.875000 -30821.625488  13707.681641   0.036621           0.036621    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:14:37]  --------------------------------------------------------------------------------
[07/14 14:14:37]  Iteration: 195 (1 solution, 193 counterexamples)
[07/14 14:14:41]  Generator returned sat in 1.566861 secs.
[07/14 14:14:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:42]  Improved gap from 75/4096 to 100
[07/14 14:14:42]  Improved number of small numbers from 55 to 90 out of a max of 90
[07/14 14:14:42]  Verifer returned sat in 0.235630 secs.
[07/14 14:14:42]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -31007.989502    0.072754 -31207.989258  13576.593018   0.000000           0.000000  199.999756      100.000000
1 -31007.989258  200.000000 -31107.989502  13576.593018   0.000000           0.000000  100.000244        0.000244
2 -30707.989502  400.000000 -30907.989502  13576.593018   0.000000           0.000000  200.000000      200.000000
3 -30658.967529  249.021973 -30892.281250  13576.593018  49.021973           0.000000  184.291748      100.000000
4 -30558.894287  284.364990 -30804.062500  13576.593018  49.094971          49.021973  196.073242      100.000244
5 -30458.821533  296.145996 -30607.989502  13576.593018  49.167969          49.094971  100.000000      100.000000
6 -30258.748535  300.072998 -30607.989502  13576.593018  49.240967          49.167969  300.000000      200.000000
7 -30258.748535  294.182373 -30507.989258  13576.593018  49.240967          49.240967  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:14:42]  --------------------------------------------------------------------------------
[07/14 14:14:42]  Iteration: 196 (1 solution, 194 counterexamples)
[07/14 14:14:46]  Generator returned sat in 1.757787 secs.
[07/14 14:14:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:14:46]  Improved gap from 149/4096 to 21.875
[07/14 14:14:47]  Improved number of small numbers from 63 to 90 out of a max of 90
[07/14 14:14:47]  Verifer returned sat in 0.327227 secs.
[07/14 14:14:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -30841.699707    0.072510 -30841.736084  13576.593018    0.000000           0.000000    0.036377      -99.963623
1 -30741.699707  100.036377 -30741.736084  13576.593018    0.000000           0.000000    0.036377      -99.963623
2 -30145.845703  595.890381 -30641.736084  13576.593018  205.890381           0.000000  290.000000      190.000000
3 -30145.845703  290.000000 -30470.413330  13576.593018  205.890381         205.890381  118.677246       90.000000
4 -30117.522949  147.000000 -30398.949707  13576.593018  205.890381         205.890381   75.536377       18.322754
5 -30117.522949   75.500000 -30341.736084  13654.718018  205.890381         205.890381   18.322754       -3.552246
6 -30096.095703   39.750000 -30319.861084  13732.843018  205.890381         205.890381   17.875000       -4.000000
7 -30092.095703   21.875000 -30297.986084  13732.843018  205.890381         205.890381    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:14:47]  --------------------------------------------------------------------------------
[07/14 14:14:47]  Iteration: 197 (1 solution, 195 counterexamples)
[07/14 14:15:00]  Generator returned sat in 10.386437 secs.
[07/14 14:15:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:15:00]  Improved gap from 297/8192 to 100
[07/14 14:15:00]  Improved number of small numbers from 53 to 90 out of a max of 90
[07/14 14:15:00]  Verifer returned sat in 0.262740 secs.
[07/14 14:15:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -30740.500244    0.072510 -30740.536621  13576.593018    0.000000           0.000000    0.036377        0.036133
1 -30640.500244  100.036377 -30740.536377  13576.593018    0.000000           0.000000  100.036133        0.036133
2 -30640.500244  100.036133 -30640.536377  13576.593018    0.000000           0.000000    0.036133      -99.963867
3 -30290.536377  350.000000 -30440.536377  13576.593018   49.999756           0.000000  100.000244      100.000244
4 -30040.536621  350.000000 -30440.536377  13576.593018  199.999756          49.999756  200.000000      100.000000
5 -29890.536621  350.000000 -30290.536377  13576.593018  249.999756         199.999756  150.000000      100.000000
6 -29690.536621  350.000000 -30208.203125  13576.593018  250.000000         249.999756  267.666504      199.999756
7 -29608.203125  350.000000 -30140.536377  13576.593018  332.333252         250.000000  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:15:00]  --------------------------------------------------------------------------------
[07/14 14:15:00]  Iteration: 198 (1 solution, 196 counterexamples)
[07/14 14:15:07]  Generator returned sat in 4.303351 secs.
[07/14 14:15:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:15:08]  Improved number of small numbers from 41 to 71 out of a max of 89
[07/14 14:15:08]  Verifer returned sat in 0.598275 secs.
[07/14 14:15:08]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -30640.536377    0.072266 -30740.536621  13576.593018    0.000000           0.000000  100.000244      100.000244
1 -30640.536377   99.963623 -30640.572754  13576.593018    0.000000           0.000000    0.036377        0.000244
2 -30542.881836   97.690918 -30640.536377  13578.938232    0.000000           0.000000   97.654541        0.000000
3 -30042.608887  597.927490 -30541.809326  13578.938232  300.272949           0.000000  198.927490      100.000000
4 -29942.572632  298.963745 -30392.399902  13578.938232  300.309163         300.272949  149.518107      100.000041
5 -29942.572632  149.481873 -30242.918050  13578.938232  300.309163         300.309163    0.036255        0.000041
6 -29344.681396  597.927490 -30242.881592  13578.938232  599.200195         300.309163  299.000000      199.000244
7 -29344.681396  298.963745 -30142.881836  13578.938232  599.200195         599.200195  199.000244       99.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:15:08]  --------------------------------------------------------------------------------
[07/14 14:15:08]  Iteration: 199 (1 solution, 197 counterexamples)
[07/14 14:15:46]  Generator returned sat in 36.065070 secs.
[07/14 14:15:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:15:47]  Improved gap from 37/2048 to 100
[07/14 14:15:47]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/14 14:15:47]  Verifer returned sat in 0.279248 secs.
[07/14 14:15:47]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35291.787598      0.072266 -35291.823730  18127.879883      0.000000           0.000000    0.036133        0.035889
1 -35291.787598      0.018066 -35291.823486  18127.879883      0.000000           0.000000    0.035889      -99.964111
2 -34891.823730    399.999756 -35191.823486  18127.879883      0.000000           0.000000  299.999756      199.999756
3 -34891.805664    300.017822 -34998.823486  18127.879883      0.017822           0.000000  107.000000      100.000000
4 -33812.769531   1186.036133 -34891.823486  18127.879883    979.053955           0.017822  100.000000      100.000000
5 -30740.697266   3172.072266 -34876.823486  18127.879883   3951.126221         979.053955  185.000000      100.000000
6 -23951.552734   6974.144531 -34691.823486  18127.879883  10640.270752        3951.126221  100.000000      100.000000
7  -9489.263672  14562.289062 -34691.823486  18127.879883  25002.559814       10640.270752  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:15:47]  --------------------------------------------------------------------------------
[07/14 14:15:47]  Iteration: 200 (1 solution, 198 counterexamples)
[07/14 14:15:54]  Generator returned sat in 4.750878 secs.
[07/14 14:15:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:15:54]  Improved gap from 3/1400 to 100
[07/14 14:15:55]  Improved number of small numbers from 49 to 70 out of a max of 90
[07/14 14:15:55]  Verifer returned sat in 0.749102 secs.
[07/14 14:15:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -34016.258545    0.072266 -34216.256531  18024.924072    0.00000              0.000  199.997986      100.002197
1 -34016.258545  199.996094 -34016.260742  18024.924072    0.00000              0.000    0.002197        0.002197
2 -33816.262695  199.998047 -33966.264531  18024.924072    0.00000              0.000  150.001836       99.998047
3 -33816.260531  150.004000 -33916.260531  18024.924072    0.00000              0.000  100.000000        0.000211
4 -33616.258531  300.002000 -33716.260742  18024.924072    0.00200              0.000  100.000211      100.000211
5 -33616.258531    0.010000 -33666.273865  18024.924072    0.00200              0.002   50.013333        0.000211
6 -33516.266531  150.005333 -33616.260531  18024.924072    0.00200              0.002   99.992000       -0.007789
7 -33316.253198  300.005333 -33516.260498  18024.924072    0.00415              0.002  200.003150      100.003394
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:15:55]  --------------------------------------------------------------------------------
[07/14 14:15:55]  Iteration: 201 (1 solution, 199 counterexamples)
[07/14 14:16:06]  Generator returned sat in 8.501578 secs.
[07/14 14:16:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:16:06]  Improved gap from 37/1024 to 100
[07/14 14:16:07]  Improved number of small numbers from 36 to 44 out of a max of 90
[07/14 14:16:07]  Verifer returned sat in 0.855551 secs.
[07/14 14:16:07]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -34215.999268     0.072266 -34315.999240  18224.66257     0.000000           0.000000   99.999972       99.999972
1 -34215.999268    99.981934 -34315.999240  18224.66257     0.000000           0.000000   99.999972       -0.000028
2 -34115.981173   200.018066 -34115.999240  18224.66257     0.000000           0.000000    0.018066        0.018066
3 -34115.981173     0.018066 -34115.999240  18224.66257     0.000000           0.000000    0.018066      -99.981934
4 -33713.972140   402.027100 -34015.999240  18224.66257     2.027100           0.000000  300.000000      200.000000
5 -32809.431491  1204.540649 -33858.999240  18224.66257   906.567749           2.027100  143.000000      100.000000
6 -30630.120517  2322.310974 -33781.999240  18224.66257  2985.878723         906.567749  166.000000      100.000000
7 -26643.154055  4152.966461 -33715.999023  18224.66257  6872.844971        2985.878723  199.999997      100.000214
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:16:07]  --------------------------------------------------------------------------------
[07/14 14:16:07]  Iteration: 202 (1 solution, 200 counterexamples)
[07/14 14:16:13]  Generator returned sat in 3.099314 secs.
[07/14 14:16:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:16:13]  Improved gap from 37/1024 to 100
[07/14 14:16:14]  Improved number of small numbers from 41 to 49 out of a max of 90
[07/14 14:16:14]  Verifer returned sat in 0.719234 secs.
[07/14 14:16:14]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -36306.887939     0.072021 -36406.896823  20315.560153     0.000000           0.000000  100.008883      100.008883
1 -36306.887939    99.999756 -36306.896823  20315.560153     0.000000           0.000000    0.008883        0.008883
2 -36206.896823   100.000000 -36206.905856  20315.560153     0.000000           0.000000    0.009033        0.000000
3 -36206.887790     0.018066 -36206.896823  20315.560153     0.000000           0.000000    0.009033      -99.990967
4 -35804.896823   402.000000 -36106.883273  20315.560153     2.000000           0.000000  299.986450      200.000000
5 -35100.356173  1004.527100 -36006.896823  20315.560153   706.540649           2.000000  200.000000      100.000000
6 -33392.047458  1908.308716 -35906.896823  20315.560153  2214.849365         706.540649  300.000000      200.000000
7 -30228.084384  3463.963074 -35806.896729  20315.560153  5278.812500        2214.849365  299.999845      199.999939
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:16:14]  --------------------------------------------------------------------------------
[07/14 14:16:14]  Iteration: 203 (1 solution, 201 counterexamples)
[07/14 14:16:18]  Generator returned sat in 1.936408 secs.
[07/14 14:16:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:16:18]  Improved gap from 37/4096 to 100
[07/14 14:16:19]  Improved number of small numbers from 35 to 37 out of a max of 90
[07/14 14:16:19]  Verifer returned sat in 0.994574 secs.
[07/14 14:16:19]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -36306.887939     0.071777 -36406.896823  20315.560153     0.000000           0.000000  100.008883      100.008883
1 -36306.887939    99.999512 -36306.896823  20315.560153     0.000000           0.000000    0.008883        0.008883
2 -36206.896823   100.000000 -36306.896823  20315.560153     0.000000           0.000000  100.000000        0.000000
3 -36206.892381   100.004442 -36206.896823  20315.560153     0.000000           0.000000    0.004442      -99.995558
4 -35754.894602   452.002221 -36106.883273  20315.560153    52.002221           0.000000  299.986450      200.000000
5 -34975.350621  1079.530431 -36006.896823  20315.560153   831.535097          52.002221  200.011104      100.011104
6 -32954.566079  2220.795646 -35877.896823  20315.560153  2752.330744         831.535097  171.000000      100.000000
7 -29134.872610  3990.693469 -35806.896729  20315.560153  6472.024170        2752.330744  199.999949      100.000043
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:16:20]  --------------------------------------------------------------------------------
[07/14 14:16:20]  Iteration: 204 (1 solution, 202 counterexamples)
[07/14 14:16:35]  Generator returned sat in 13.112756 secs.
[07/14 14:16:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:16:35]  Improved gap from 147/8192 to 100
[07/14 14:16:36]  Improved number of small numbers from 45 to 67 out of a max of 90
[07/14 14:16:36]  Verifer returned sat in 0.686332 secs.
[07/14 14:16:36]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -36284.191895    0.071533 -36384.191895  20619.789125    0.000000           0.000000  100.000000       99.999789
1 -36284.191895    0.035645 -36306.896823  20619.789125    0.000000           0.000000   22.704928       -0.000211
2 -36184.191684  122.705139 -36284.191650  20619.789125    0.000000           0.000000   99.999967        0.000000
3 -35984.155762  300.035889 -36184.191650  20619.789125    0.035889           0.000000  200.000000      100.000033
4 -35984.155762  151.017944 -36084.191684  20619.789125    0.035889           0.035889  100.000033        0.000033
5 -35486.227572  597.928223 -35984.191650  20619.789125  197.964111           0.035889  299.999967      200.000000
6 -35486.227572  299.964111 -35884.191650  20619.789125  197.964111         197.964111  199.999967      100.000000
7 -34784.763428  901.464111 -35784.191650  20619.789125  799.427979         197.964111  200.000244      100.000277
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:16:36]  --------------------------------------------------------------------------------
[07/14 14:16:36]  Iteration: 205 (1 solution, 203 counterexamples)
[07/14 14:16:50]  Generator returned sat in 11.695560 secs.
[07/14 14:16:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:16:51]  Improved gap from 1/800 to 100
[07/14 14:16:51]  Improved number of small numbers from 41 to 59 out of a max of 90
[07/14 14:16:51]  Verifer returned sat in 0.647844 secs.
[07/14 14:16:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -36434.186768    0.071289 -36434.189463  20619.789125    0.000000           0.000000    0.002695        0.002695
1 -36434.186768    0.001250 -36434.189463  20619.789125    0.000000           0.000000    0.002695      -99.997305
2 -36034.189463  400.000000 -36234.189697  20619.789125    0.000000           0.000000  200.000234      200.000000
3 -36034.189463    0.001250 -36134.190400  20619.789125    0.000000           0.000000  100.000938      100.000000
4 -35834.189463  300.000938 -36134.189463  20619.789125    0.000000           0.000000  300.000000      200.000000
5 -35384.188057  750.001406 -35934.189697  20619.789125  450.001221           0.000000  100.000420      100.000186
6 -35384.188057    0.010000 -35834.190713  20619.789125  450.001221         450.001221    0.001436        0.000186
7 -35084.174805  300.014687 -35834.189453  20619.789125  550.014648         450.001221  200.000000      100.000010
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:16:51]  --------------------------------------------------------------------------------
[07/14 14:16:51]  Iteration: 206 (1 solution, 204 counterexamples)
[07/14 14:16:58]  Generator returned sat in 3.799899 secs.
[07/14 14:16:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:16:58]  Improved gap from 73/4096 to 100
[07/14 14:16:58]  Improved number of small numbers from 68 to 79 out of a max of 90
[07/14 14:16:58]  Verifer returned sat in 0.493335 secs.
[07/14 14:16:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -36384.243164    0.071289 -36484.278564  20619.789062    0.000000           0.000000  100.035400      100.035400
1 -36384.242920  100.035645 -36384.278564  20619.789062    0.000000           0.000000    0.035645        0.035645
2 -36284.243164  100.035400 -36284.278564  20619.789062    0.000000           0.000000    0.035400        0.035400
3 -36217.588135   66.690430 -36284.278564  20619.789062    0.000000           0.000000   66.690430      -33.309570
4 -35984.242920  300.035645 -36184.278564  20619.789062    0.035400           0.000000  200.000244      100.000244
5 -35734.225342  450.017822 -36084.278564  20619.789062   50.053467           0.035400  299.999756      199.999756
6 -35509.216187  525.008911 -35984.278564  20619.789062  275.062378          50.053467  200.000000      100.000000
7 -34996.711731  712.504456 -35884.278564  20619.789062  687.566650         275.062378  200.000183      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:16:59]  --------------------------------------------------------------------------------
[07/14 14:16:59]  Iteration: 207 (1 solution, 205 counterexamples)
[07/14 14:17:03]  Generator returned sat in 1.928598 secs.
[07/14 14:17:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:17:03]  Improved gap from 0 to 100
[07/14 14:17:03]  Improved number of small numbers from 38 to 90 out of a max of 90
[07/14 14:17:03]  Verifer returned sat in 0.355272 secs.
[07/14 14:17:03]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35409.124756    0.071045 -35509.142334  20368.767334    0.000000           0.000000  100.017578      100.017578
1 -35409.124512  100.017822 -35409.142334  20368.767334    0.000000           0.000000    0.017822        0.017822
2 -35109.142578  299.999756 -35309.142334  20368.767334    0.000000           0.000000  199.999756      199.999756
3 -35109.142578  199.999756 -35309.142334  20368.767334    0.000000           0.000000  199.999756       99.999756
4 -35109.142334  200.000000 -35159.133545  20368.767334    0.000000           0.000000   49.991211        0.000000
5 -34909.124756  250.008789 -35109.142334  20368.767334    0.017578           0.000000  200.000000      100.000000
6 -34684.120361  425.004395 -35009.142334  20368.767334   25.022217           0.017578  299.999756      199.999756
7 -34321.617920  662.502197 -34909.142334  20368.767334  287.524658          25.022217  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:17:04]  --------------------------------------------------------------------------------
[07/14 14:17:04]  Iteration: 208 (1 solution, 206 counterexamples)
[07/14 14:17:24]  Generator returned sat in 17.719149 secs.
[07/14 14:17:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:17:24]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:17:24]  Verifer returned sat in 0.134035 secs.
[07/14 14:17:24]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35409.124756     0.071045 -35509.142334  20368.767334     0.0000              0.000  100.017578      100.017578
1 -35409.124756   100.017578 -35410.142334  20368.767334     0.0000              0.000    1.017578        0.017578
2 -35209.142334   201.000000 -35309.142334  20368.767334     0.0000              0.000  100.000000      100.000000
3 -35209.142334   100.000000 -35309.142334  20368.767334     0.0000              0.000  100.000000        0.000000
4 -34708.642334   600.500000 -35209.142334  20368.767334   300.5000              0.000  200.000000      100.000000
5 -33604.392334  1304.250000 -35009.142334  20368.767334  1304.7500            300.500  100.000000      100.000000
6 -31146.517334  2557.875000 -34983.142334  20368.767334  3662.6250           1304.750  174.000000      100.000000
7 -26830.204834  4490.312500 -34909.142334  20368.767334  7778.9375           3662.625  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:17:24]  --------------------------------------------------------------------------------
[07/14 14:17:24]  Iteration: 209 (1 solution, 207 counterexamples)
[07/14 14:17:29]  Generator returned sat in 1.954406 secs.
[07/14 14:17:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:17:29]  Improved number of small numbers from 78 to 80 out of a max of 89
[07/14 14:17:29]  Verifer returned sat in 0.309823 secs.
[07/14 14:17:29]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35409.125244     0.070801 -35509.142578  20368.766846     0.000000           0.000000  100.017334      100.017090
1 -35409.125244   100.017090 -35410.142334  20368.766846     0.000000           0.000000    1.017090        0.017090
2 -35209.142822   200.999512 -35309.142578  20368.766846     0.000000           0.000000   99.999756       99.999512
3 -35209.142822    99.999512 -35309.142334  20368.767090     0.000000           0.000000   99.999512       -0.000244
4 -34708.142822   600.999512 -35209.142334  20368.767090   300.499512           0.000000  200.500000      100.500244
5 -33603.643555  1304.999268 -35009.142578  20368.767090  1303.625854         300.499512  101.873169      101.873169
6 -31146.517822  2558.998901 -34983.142334  20368.767090  3662.624756        1303.625854  173.999756      100.000000
7 -26828.519226  4491.998352 -34909.142578  20368.767090  7780.623535        3662.624756  299.999817      199.999817
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:17:30]  --------------------------------------------------------------------------------
[07/14 14:17:30]  Iteration: 210 (1 solution, 208 counterexamples)
[07/14 14:17:34]  Generator returned sat in 1.874327 secs.
[07/14 14:17:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:17:34]  Improved gap from 145/4096 to 100
[07/14 14:17:35]  Improved number of small numbers from 69 to 73 out of a max of 90
[07/14 14:17:35]  Verifer returned sat in 0.385905 secs.
[07/14 14:17:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35409.142334     0.070801 -35658.642090  20468.766846     0.000000           0.000000  249.499756      200.000000
1 -35409.142334   249.481934 -35534.554199  20468.766846     0.000000           0.000000  125.411865      100.000000
2 -35309.142334   225.411865 -35435.529510  20468.766846     0.000000           0.000000  126.387177      100.000000
3 -35309.142334     0.017700 -35409.142334  20468.766846     0.000000           0.000000  100.000000        0.000000
4 -34908.607422   500.534912 -35209.142334  20468.766846   100.534912           0.000000  200.000000      200.000000
5 -33705.481323  1403.126099 -35109.142334  20468.766846  1203.661011         100.534912  200.000000      200.000000
6 -31146.517822  2758.963501 -35009.142334  20468.766846  3662.624756        1203.661011  199.999756      199.999756
7 -26406.572327  4939.945251 -35009.142334  20468.766846  8302.570068        3662.624756  299.999939      199.999939
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:17:35]  --------------------------------------------------------------------------------
[07/14 14:17:35]  Iteration: 211 (1 solution, 209 counterexamples)
[07/14 14:17:39]  Generator returned sat in 1.886582 secs.
[07/14 14:17:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:17:40]  Improved gap from 145/8192 to 100
[07/14 14:17:40]  Improved number of small numbers from 77 to 79 out of a max of 90
[07/14 14:17:40]  Verifer returned sat in 0.287372 secs.
[07/14 14:17:40]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35409.142334     0.070557 -35509.106934  20368.731201     0.000000           0.000000   99.964600       99.964600
1 -35409.106934   100.000000 -35509.106934  20368.731201     0.000000           0.000000  100.000000        0.000000
2 -35309.106934   200.000000 -35409.106934  20368.731201     0.000000           0.000000  100.000000        0.000000
3 -35309.071533   100.035400 -35309.106934  20368.731201     0.000000           0.000000    0.035400      -99.964600
4 -34707.036133   602.070801 -35209.106934  20368.731201   302.070801           0.000000  200.000000      100.000000
5 -33402.429932  1504.606201 -35009.106934  20368.731201  1406.677002         302.070801  200.000000      200.000000
6 -30544.020630  3058.409302 -34917.106934  20368.731201  4265.086304        1406.677002  108.000000      100.000000
7 -25278.906677  5373.113953 -34909.106934  20368.731201  9430.200195        4265.086304  200.000061      100.000061
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:17:40]  --------------------------------------------------------------------------------
[07/14 14:17:40]  Iteration: 212 (1 solution, 210 counterexamples)
[07/14 14:17:50]  Generator returned sat in 7.413979 secs.
[07/14 14:17:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:17:50]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/14 14:17:50]  Verifer returned sat in 0.158318 secs.
[07/14 14:17:50]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35509.071777     0.070557 -35609.107178  20368.731201     0.000000           0.000000  100.035400        0.035400
1 -35509.071777   100.035400 -35509.106934  20368.731201     0.000000           0.000000    0.035156      -99.964600
2 -35409.071533   100.035400 -35409.107178  20368.731201     0.000000           0.000000    0.035645      -99.964355
3 -35009.107178   400.000000 -35309.106934  20368.731201     0.000000           0.000000  299.999756      200.000000
4 -34907.606934   401.500000 -35209.106934  20368.731201   101.499756           0.000000  200.000244      100.000488
5 -33903.857178  1203.750000 -35009.107178  20368.731201  1005.250000         101.499756  100.000000      100.000000
6 -31396.732178  2607.125000 -34917.106934  20368.731201  3412.375000        1005.250000  107.999756      100.000000
7 -26808.544434  4696.187500 -34909.106934  20368.731201  7900.562500        3412.375000  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:17:51]  --------------------------------------------------------------------------------
[07/14 14:17:51]  Iteration: 213 (1 solution, 211 counterexamples)
[07/14 14:17:57]  Generator returned sat in 4.049536 secs.
[07/14 14:17:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:17:57]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:17:57]  Verifer returned sat in 0.121528 secs.
[07/14 14:17:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -35509.071777    0.070557 -35609.107178  20368.731201     0.000000           0.000000  100.035400        0.035400
1 -35509.071777  100.035400 -35509.106934  20368.731201     0.000000           0.000000    0.035156      -99.964600
2 -35409.071533  100.035400 -35409.107178  20368.731201     0.000000           0.000000    0.035645      -99.964355
3 -35009.107178  400.000000 -35209.107178  20368.731201     0.000000           0.000000  200.000000      200.000000
4 -35007.607178  201.500000 -35209.107178  20368.731201     0.017578           0.000000  201.482422      101.482422
5 -34607.590088  601.499512 -35009.107178  20368.731201   301.517090           0.017578  100.000000      100.000000
6 -33906.090088  801.500000 -34917.106934  20368.731201   903.017090         301.517090  107.999756      100.000000
7 -33428.589355  585.500488 -34909.106934  20368.731201  1280.517822         903.017090  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:17:58]  --------------------------------------------------------------------------------
[07/14 14:17:58]  Iteration: 214 (1 solution, 212 counterexamples)
[07/14 14:18:02]  Generator returned sat in 1.891937 secs.
[07/14 14:18:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:18:02]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:18:02]  Verifer returned sat in 0.149636 secs.
[07/14 14:18:02]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -39301.601807     0.070312 -39601.601807  20368.730957     0.000000           0.000000  300.000000           200.0
1 -39201.601807   400.000000 -39401.601807  20368.730957     0.000000           0.000000  200.000000           200.0
2 -39101.601807   300.000000 -39398.672119  20368.730957     0.000000           0.000000  297.070312           200.0
3 -39001.601807   397.070312 -39201.601807  20368.730957     0.000000           0.000000  200.000000           200.0
4 -39001.566650   200.035156 -39101.601807  20368.730957     0.035156           0.000000  100.000000           100.0
5 -38200.013916   901.552734 -39101.601807  20368.730957   701.587891           0.035156  200.000000           100.0
6 -36452.044189  1947.969727 -39001.601807  20368.730957  2249.557617         701.587891  300.000000           200.0
7 -33428.589600  3323.454590 -38801.601807  20368.730957  5273.012207        2249.557617  100.000000           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:18:03]  --------------------------------------------------------------------------------
[07/14 14:18:03]  Iteration: 215 (1 solution, 213 counterexamples)
[07/14 14:18:09]  Generator returned sat in 3.342455 secs.
[07/14 14:18:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:18:09]  Improved gap from 0 to 21.875
[07/14 14:18:09]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:18:09]  Verifer returned sat in 0.305252 secs.
[07/14 14:18:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -39578.097900    0.070312 -39614.812744  20445.226807   0.000000           0.000000   36.714844        0.000000
1 -39578.097900   36.679688 -39578.097900  20445.226807   0.000000           0.000000    0.000000     -100.000000
2 -39468.054932  110.042969 -39468.090088  20445.226807   0.000000           0.000000    0.035156      -89.957031
3 -39156.742432  311.347656 -39310.812744  20445.226807   0.035156           0.000000  154.035156      121.320312
4 -39156.742432  154.000000 -39235.312744  20445.226807   0.035156           0.035156   78.535156       21.320312
5 -39156.742432   78.500000 -39178.097900  20523.351807   0.035156           0.035156   21.320312       -0.554688
6 -39137.312744   40.750000 -39156.222900  20601.476807   0.035156           0.035156   18.875000       -3.000000
7 -39134.312744   21.875000 -39134.347900  20601.476807   0.035156           0.035156    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:18:09]  --------------------------------------------------------------------------------
[07/14 14:18:09]  Iteration: 216 (1 solution, 214 counterexamples)
[07/14 14:18:17]  Generator returned sat in 5.099423 secs.
[07/14 14:18:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:18:17]  Improved gap from 0 to 100
[07/14 14:18:18]  Improved number of small numbers from 60 to 86 out of a max of 90
[07/14 14:18:18]  Verifer returned sat in 0.381262 secs.
[07/14 14:18:18]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -39556.742432     0.070068 -39575.765381  20601.476562     0.000000           0.000000   19.022949        0.000244
1 -39556.742432     0.035156 -39556.742432  20601.476562     0.000000           0.000000    0.000000      -99.999756
2 -39356.742676   199.999756 -39456.742432  20601.476562     0.000000           0.000000   99.999756        0.000000
3 -39156.707397   300.035034 -39256.742676  20601.476562     0.035156           0.000000  100.000122      100.000122
4 -38654.637451   602.070068 -39256.742432  20601.476562   402.104980           0.035156  200.000000      100.000244
5 -37648.497314  1206.140137 -39056.742676  20601.476562  1208.245361         402.104980  200.000000      200.000000
6 -35434.217041  2414.280273 -39056.742432  20601.476562  3422.525635        1208.245361  199.999756      100.000000
7 -30803.656250  4830.560547 -38956.742432  20601.476562  7953.085938        3422.525635  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:18:18]  --------------------------------------------------------------------------------
[07/14 14:18:18]  Iteration: 217 (1 solution, 215 counterexamples)
[07/14 14:18:48]  Generator returned sat in 27.237707 secs.
[07/14 14:18:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:18:48]  Improved gap from 503/512 to 0
[07/14 14:18:48]  Improved number of small numbers from 57 to 86 out of a max of 90
[07/14 14:18:48]  Verifer returned sat in 0.489316 secs.
[07/14 14:18:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -39148.119873    0.069824 -39448.119629  20601.476562   0.000000           0.000000  299.999756      199.999756
1 -39148.119873    0.035156 -39348.119629  20601.476562   0.000000           0.000000  199.999756       99.999756
2 -39148.119873    0.017578 -39181.447191  20601.476562   0.000000           0.000000   33.327318       -0.000244
3 -39048.102139  133.345052 -39048.119629  20601.476562   0.000000           0.000000    0.017490        0.017490
4 -38848.102051  200.017578 -38948.119873  20601.476562   0.017578           0.000000  100.000244      100.000000
5 -38848.102051    2.000000 -38850.137207  20601.476562   0.017578           0.017578    2.017578        0.000000
6 -38847.119629    3.000000 -38847.155029  20700.494141   0.017578           0.017578    0.017822        0.000000
7 -38842.637451    4.500000 -38847.137207  20700.494141   0.017578           0.017578    4.482178      -95.517822
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:18:49]  --------------------------------------------------------------------------------
[07/14 14:18:49]  Iteration: 218 (1 solution, 216 counterexamples)
[07/14 14:18:55]  Generator returned sat in 3.530010 secs.
[07/14 14:18:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:18:55]  Improved number of small numbers from 37 to 59 out of a max of 89
[07/14 14:18:55]  Verifer returned sat in 0.565945 secs.
[07/14 14:18:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -39097.124268    0.069824 -39397.124023  20601.476562   0.000000           0.000000  299.999756      199.999847
1 -39097.124268    0.017578 -39297.124023  20601.476562   0.000000           0.000000  199.999756       99.999847
2 -39097.124268    0.017578 -39130.451660  20601.476562   0.000000           0.000000   33.327393       -0.000153
3 -38997.106689  133.344971 -38997.124115  20601.476562   0.000000           0.000000    0.017426        0.017426
4 -38797.106659  200.017456 -38997.124023  20601.476562   0.017456           0.000000  199.999908      100.000000
5 -38797.106659  102.008728 -38850.137207  20601.476562   0.017456           0.017456   53.013092        0.000000
6 -38697.106659  153.013092 -38726.626297  20601.476562   0.017456           0.017456   29.502182        0.000000
7 -38497.089203  229.519638 -38697.124023  20601.476562   0.034668           0.017456  200.000153      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:18:56]  --------------------------------------------------------------------------------
[07/14 14:18:56]  Iteration: 219 (1 solution, 217 counterexamples)
[07/14 14:19:28]  Generator returned sat in 29.634325 secs.
[07/14 14:19:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:19:28]  Improved gap from 0 to 100
[07/14 14:19:28]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/14 14:19:28]  Verifer returned sat in 0.350787 secs.
[07/14 14:19:28]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -42104.054199     0.069580 -42204.071533  23508.424072      0.000000           0.000000  100.017334      100.017334
1 -42104.054199     0.017578 -42104.089111  23508.424072      0.000000           0.000000    0.034912        0.017334
2 -42104.054199     0.017578 -42104.071533  23508.424072      0.000000           0.000000    0.017334      -99.982666
3 -41804.053955   300.017578 -41927.071533  23508.424072      0.017334           0.000000  123.000244      100.000244
4 -40923.027832  1004.026367 -41804.071777  23508.424072    781.043701           0.017334  100.000244      100.000000
5 -38916.953857  2106.074219 -41804.071533  23508.424072   2587.117676         781.043701  300.000000      200.000000
6 -35457.842529  3759.111328 -41704.071533  23508.424072   6046.229004        2587.117676  200.000000      100.000000
7 -29573.175537  6084.666992 -41604.071533  23508.424072  11830.895996        6046.229004  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:19:29]  --------------------------------------------------------------------------------
[07/14 14:19:29]  Iteration: 220 (1 solution, 218 counterexamples)
[07/14 14:19:33]  Generator returned sat in 2.045783 secs.
[07/14 14:19:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:19:34]  Improved number of small numbers from 83 to 83 out of a max of 89
[07/14 14:19:34]  Verifer returned sat in 0.233670 secs.
[07/14 14:19:34]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -42104.062744     0.069580 -42204.071533  23508.424072      0.000000           0.000000  100.008789      100.008789
1 -42104.062744     0.017578 -42104.089111  23508.424072      0.000000           0.000000    0.026367        0.008789
2 -42104.062744     0.017578 -42104.071533  23508.424072      0.000000           0.000000    0.008789      -99.991211
3 -41798.054932   306.016602 -41932.404134  23508.424072      6.016602           0.000000  128.332601      100.000000
4 -40923.027832  1003.359701 -41804.071777  23508.424072    781.043701           6.016602  100.000244      100.000000
5 -38916.953857  2106.074219 -41804.071533  23508.424072   2587.117676         781.043701  300.000000      200.000000
6 -35456.842529  3760.111328 -41704.071533  23508.424072   6047.229004        2587.117676  200.000000      100.000000
7 -29559.010335  6097.832194 -41604.071533  23508.424072  11845.061198        6047.229004  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:19:34]  --------------------------------------------------------------------------------
[07/14 14:19:34]  Iteration: 221 (1 solution, 219 counterexamples)
[07/14 14:19:39]  Generator returned sat in 2.216127 secs.
[07/14 14:19:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:19:39]  Improved gap from 516381/8192 to 100
[07/14 14:19:40]  Improved number of small numbers from 23 to 33 out of a max of 90
[07/14 14:19:40]  Verifer returned sat in 1.057759 secs.
[07/14 14:19:40]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41362.642334     0.069336 -41362.676895  23708.396433      0.000000           0.000000    0.034561        0.034561
1 -41362.642334     0.017578 -41362.676895  23708.396433      0.000000           0.000000    0.034561      -99.965439
2 -41162.676895   200.000000 -41262.676895  23708.396433      0.000000           0.000000  100.000000        0.000000
3 -40862.659500   400.017395 -41162.676895  23708.396433      0.017395           0.000000  300.000000      200.000000
4 -40161.133408  1001.526093 -40962.676895  23708.396433    601.543488           0.017395  200.000000      200.000000
5 -38057.344269  2303.789139 -40862.676895  23708.396433   2605.332626         601.543488  200.000000      200.000000
6 -34000.160561  4257.183708 -40862.676895  23708.396433   6562.516335        2605.332626  300.000000      200.000000
7 -27312.884998  6987.275562 -40762.676758  23708.396433  13149.791992        6562.516335  299.999767      199.999905
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:19:41]  --------------------------------------------------------------------------------
[07/14 14:19:41]  Iteration: 222 (1 solution, 220 counterexamples)
[07/14 14:19:48]  Generator returned sat in 4.788095 secs.
[07/14 14:19:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:19:48]  Improved gap from 0 to 100
[07/14 14:19:48]  Improved number of small numbers from 79 to 90 out of a max of 90
[07/14 14:19:48]  Verifer returned sat in 0.210869 secs.
[07/14 14:19:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41262.711914    0.069092 -41362.734619  23708.431396    0.000000           0.000000  100.022705      100.000000
1 -41262.711914    0.034668 -41262.711914  23708.431396    0.000000           0.000000    0.000000        0.000000
2 -41162.677246  100.034668 -41162.711914  23708.431396    0.000000           0.000000    0.034668        0.034668
3 -41062.711914  100.000000 -41162.711670  23708.431396    0.000000           0.000000   99.999756        0.000000
4 -40862.677246  300.034424 -41062.711914  23708.431396    0.034668           0.000000  200.000000      100.000000
5 -40662.177246  400.500000 -40865.711914  23708.431396    0.534668           0.034668  203.000000      200.000000
6 -40270.677246  594.500000 -40862.711670  23708.431396  292.034668           0.534668  299.999756      200.000000
7 -39970.177002  600.500000 -40762.711670  23708.431396  592.534668         292.034668  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:19:49]  --------------------------------------------------------------------------------
[07/14 14:19:49]  Iteration: 223 (1 solution, 221 counterexamples)
[07/14 14:19:54]  Generator returned sat in 2.610800 secs.
[07/14 14:19:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:19:54]  Improved number of small numbers from 69 to 71 out of a max of 89
[07/14 14:19:54]  Verifer returned sat in 0.386553 secs.
[07/14 14:19:54]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41262.711914     0.068848 -41362.711914  23708.431152     0.000000           0.000000  100.000000       99.999756
1 -41262.711914     0.034668 -41262.711914  23708.431152     0.000000           0.000000    0.000000       -0.000244
2 -41162.677490   100.034424 -41162.711914  23708.431152     0.000000           0.000000    0.034424        0.034180
3 -41162.643799     0.068115 -41162.711670  23708.431396     0.000000           0.000000    0.067871      -99.931885
4 -40862.677246   300.034424 -41062.711914  23708.431396     0.034668           0.000000  200.000000      100.000000
5 -40512.160034   550.517212 -40883.711914  23708.431396   150.551880           0.034668  221.000000      200.000000
6 -39899.401428   833.758606 -40862.711670  23708.431396   763.310486         150.551880  199.999756      100.000000
7 -39082.021881  1017.379303 -40762.711914  23708.431396  1480.689941         763.310486  200.000092      100.000092
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:19:55]  --------------------------------------------------------------------------------
[07/14 14:19:55]  Iteration: 224 (1 solution, 222 counterexamples)
[07/14 14:20:00]  Generator returned sat in 2.335300 secs.
[07/14 14:20:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:20:00]  Improved gap from 0 to 100
[07/14 14:20:01]  Improved number of small numbers from 48 to 58 out of a max of 90
[07/14 14:20:01]  Verifer returned sat in 0.821294 secs.
[07/14 14:20:01]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41422.965576     0.068848 -41522.965616  23708.431152     0.000000           0.000000  100.000040      100.000040
1 -41422.965576     0.034424 -41522.965616  23708.431152     0.000000           0.000000  100.000040        0.000040
2 -41422.965576   100.000000 -41422.965616  23708.431152     0.000000           0.000000    0.000040      -99.999960
3 -41322.931193   100.034424 -41322.965616  23708.431152     0.000000           0.000000    0.034424      -99.965576
4 -40822.896769   500.068848 -41122.965616  23708.431152   100.068848           0.000000  200.000000      200.000000
5 -39972.362345  1050.534424 -41122.965616  23708.431152   850.603271         100.068848  300.000000      200.000000
6 -39146.595133  1125.767212 -40927.965616  23708.431152  1576.370483         850.603271  205.000000      200.000000
7 -37998.211527  1353.383606 -40922.965576  23708.431152  2724.753906        1576.370483  200.000143      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:20:01]  --------------------------------------------------------------------------------
[07/14 14:20:01]  Iteration: 225 (1 solution, 223 counterexamples)
[07/14 14:20:08]  Generator returned sat in 4.743362 secs.
[07/14 14:20:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:20:09]  Improved gap from 0 to 100
[07/14 14:20:09]  Improved number of small numbers from 49 to 90 out of a max of 90
[07/14 14:20:09]  Verifer returned sat in 0.270071 secs.
[07/14 14:20:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41791.204346    0.068604 -41791.204346  23976.669678    0.000000           0.000000    0.000000        0.000000
1 -41691.204346  100.000000 -41691.204346  23976.669678    0.000000           0.000000    0.000000        0.000000
2 -41691.169922    0.034424 -41691.204102  23976.669678    0.000000           0.000000    0.034180      -99.965576
3 -41591.169678  100.034424 -41591.204346  23976.669678    0.000000           0.000000    0.034668      -99.965332
4 -41091.135498  500.068848 -41491.204346  23976.669678  100.068848           0.000000  300.000000      200.000000
5 -40989.635498  401.500000 -41391.204102  23976.669678  101.568848         100.068848  299.999756      200.000000
6 -40688.135254  601.500000 -41203.204346  23976.669678  403.068848         101.568848  112.000244      100.000244
7 -40022.635498  777.500000 -41191.204346  23976.669678  868.568848         403.068848  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:20:09]  --------------------------------------------------------------------------------
[07/14 14:20:09]  Iteration: 226 (1 solution, 224 counterexamples)
[07/14 14:20:14]  Generator returned sat in 2.513763 secs.
[07/14 14:20:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:20:15]  Improved number of small numbers from 77 to 83 out of a max of 89
[07/14 14:20:15]  Verifer returned sat in 0.299715 secs.
[07/14 14:20:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41891.204346    0.068359 -41891.204346  23976.669434    0.000000           0.000000    0.000000     -100.000000
1 -41691.204346  200.000000 -41691.204346  23976.669434    0.000000           0.000000    0.000000        0.000000
2 -41691.170166    0.034180 -41691.204346  23976.669434    0.000000           0.000000    0.034180      -99.965820
3 -41571.168457  120.035889 -41571.176807  23976.669434    0.000000           0.000000    0.008350      -79.964111
4 -41091.135498  480.041309 -41491.204346  23976.669434  100.068848           0.000000  300.000000      200.000000
5 -40989.635498  401.500000 -41391.204346  23976.669434  101.568848         100.068848  300.000000      200.000000
6 -40688.135498  601.500000 -41203.204346  23976.669434  403.068848         101.568848  112.000000      100.000000
7 -40062.690576  737.444922 -41191.204346  23976.669434  828.513916         403.068848  299.999854      199.999854
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:20:15]  --------------------------------------------------------------------------------
[07/14 14:20:15]  Iteration: 227 (1 solution, 225 counterexamples)
[07/14 14:20:20]  Generator returned sat in 2.657097 secs.
[07/14 14:20:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:20:21]  Improved gap from 0 to 100
[07/14 14:20:21]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 14:20:21]  Verifer returned sat in 0.261021 secs.
[07/14 14:20:21]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41689.712158    0.068115 -41689.746338  23976.669434     0.000000           0.000000    0.034180        0.000000
1 -41689.712158    0.017090 -41689.712158  23976.669434     0.000000           0.000000    0.000000     -100.000000
2 -41489.712158  200.000000 -41489.729248  23976.669434     0.000000           0.000000    0.017090        0.000000
3 -41289.695068  200.034180 -41489.712158  23976.669434     0.017090           0.000000  200.000000      100.000000
4 -41088.126709  401.568359 -41289.712158  23976.669434   101.585449           0.017090  100.000000      100.000000
5 -40386.626709  801.500000 -41289.712158  23976.669434   603.085449         101.585449  300.000000      200.000000
6 -40285.092529  401.534180 -41189.712158  23976.669434   704.619385         603.085449  200.000244      100.000244
7 -39883.592773  601.500000 -41089.712158  23976.669434  1006.119385         704.619385  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:20:21]  --------------------------------------------------------------------------------
[07/14 14:20:21]  Iteration: 228 (1 solution, 226 counterexamples)
[07/14 14:20:28]  Generator returned sat in 4.104981 secs.
[07/14 14:20:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:20:28]  Improved gap from 279/16384 to 100
[07/14 14:20:29]  Improved number of small numbers from 36 to 46 out of a max of 90
[07/14 14:20:29]  Verifer returned sat in 0.961837 secs.
[07/14 14:20:29]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41717.204346     0.068115 -41717.238571  23976.669434     0.000000           0.000000    0.034225        0.034225
1 -41717.204346     0.016846 -41717.204514  23976.669434     0.000000           0.000000    0.000168      -99.965775
2 -41517.238571   199.965942 -41517.255600  23976.669434     0.000000           0.000000    0.017029        0.000000
3 -41317.221542   200.034058 -41517.238571  23976.669434     0.017029           0.000000  200.000000      100.000000
4 -40915.670456   601.551086 -41417.238571  23976.669434   201.568115           0.017029  300.000000      200.000000
5 -39861.894913  1353.775543 -41289.712158  23976.669434  1155.343658         201.568115  272.473587      200.000000
6 -37760.890022  2373.478477 -41189.712158  23976.669434  3156.348549        1155.343658  272.473587      200.000000
7 -33980.356274  4053.007336 -41117.238525  23976.669434  6936.882080        3156.348549  200.000172      100.000217
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:20:29]  --------------------------------------------------------------------------------
[07/14 14:20:29]  Iteration: 229 (1 solution, 227 counterexamples)
[07/14 14:20:52]  Generator returned sat in 20.010895 secs.
[07/14 14:20:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:20:52]  Improved gap from 1/800 to 100
[07/14 14:20:53]  Improved number of small numbers from 49 to 90 out of a max of 90
[07/14 14:20:53]  Verifer returned sat in 0.260530 secs.
[07/14 14:20:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41617.255615    0.068115 -41783.256592  23976.686279    0.000000           0.000000  166.000977      100.000000
1 -41617.255615    0.001465 -41717.255371  23976.686279    0.000000           0.000000   99.999756        0.000000
2 -41517.254150  200.001221 -41517.255615  23976.686279    0.000000           0.000000    0.001465        0.001465
3 -41517.254150    0.001465 -41517.255615  23976.686279    0.000000           0.000000    0.001465      -99.998535
4 -41117.254150  400.001465 -41417.255615  23976.686279    0.001465           0.000000  300.000000      200.000000
5 -41117.254150    0.010000 -41317.255615  23976.686279    0.001465           0.001465  200.000000      100.000000
6 -41016.254150  301.000000 -41217.255615  23976.686279    0.001465           0.001465  201.000000      101.000000
7 -40766.254150  451.000000 -41117.255615  23976.686279  151.001221           0.001465  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:20:53]  --------------------------------------------------------------------------------
[07/14 14:20:53]  Iteration: 230 (1 solution, 228 counterexamples)
[07/14 14:21:02]  Generator returned sat in 6.137393 secs.
[07/14 14:21:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:21:02]  Improved gap from 3/4096 to 0
[07/14 14:21:02]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:21:02]  Verifer returned sat in 0.206013 secs.
[07/14 14:21:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41713.254883    0.068115 -41813.254883  23976.686279   0.000000           0.000000  100.000000      100.000000
1 -41713.254883    0.001465 -41713.255615  23976.686279   0.000000           0.000000    0.000732        0.000000
2 -41580.254150  133.001465 -41713.254883  23976.686279   0.000000           0.000000  133.000732       33.000732
3 -41580.254150  133.000000 -41580.254150  23976.686279   0.000000           0.000000    0.000000      -66.999268
4 -41313.254150  267.000000 -41413.254883  23976.686279   0.000732           0.000000  100.000000      100.000000
5 -41313.254150    2.000000 -41317.255615  23976.686279   0.000732           0.000732    4.000732        0.000000
6 -41312.254883    5.000000 -41313.254883  24075.687012   0.000732           0.000732    0.999268        0.000000
7 -41302.254150   11.000000 -41312.255615  24075.687012   0.000732           0.000732   10.000732      -89.999268
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:21:02]  --------------------------------------------------------------------------------
[07/14 14:21:02]  Iteration: 231 (1 solution, 229 counterexamples)
[07/14 14:21:08]  Generator returned sat in 2.809657 secs.
[07/14 14:21:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:21:08]  Verifer returned unsat in 0.025735 secs.
[07/14 14:21:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:21:08]  --------------------------------------------------------------------------------
[07/14 14:21:08]  Iteration: 232 (2 solution, 229 counterexamples)
[07/14 14:21:16]  Generator returned sat in 4.722903 secs.
[07/14 14:21:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:21:16]  Improved gap from 1/2048 to 0
[07/14 14:21:16]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:21:16]  Verifer returned sat in 0.172151 secs.
[07/14 14:21:16]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41713.254883    0.068115 -41813.254883  23943.685547   0.000000           0.000000  100.000000       66.999512
1 -41713.254883    0.001465 -41713.255859  23943.685547   0.000000           0.000000    0.000977      -33.000488
2 -41580.254395  133.001465 -41580.254883  23943.685547   0.000000           0.000000    0.000488        0.000000
3 -41447.587891  132.666992 -41480.254395  23943.685547   0.000000           0.000000   32.666504       32.666504
4 -41280.253906  200.000488 -41380.254395  23943.685547   0.000488           0.000000  100.000000      100.000000
5 -41280.253906    2.000000 -41284.253906  23943.685547   0.000488           0.000488    3.999512        0.000000
6 -41280.253418    4.000000 -41280.254395  24042.686035   0.000488           0.000488    0.000488       -0.999023
7 -41273.253906    7.000000 -41279.254883  24042.686035   0.000488           0.000488    6.000488      -93.999512
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:21:16]  --------------------------------------------------------------------------------
[07/14 14:21:16]  Iteration: 233 (2 solution, 230 counterexamples)
[07/14 14:21:23]  Generator returned sat in 3.794336 secs.
[07/14 14:21:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:21:23]  Improved gap from 139/8192 to 100
[07/14 14:21:23]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:21:23]  Verifer returned sat in 0.148520 secs.
[07/14 14:21:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41580.288330    0.067871 -41680.288330  23843.719482        0.0                0.0  100.000000      100.000000
1 -41580.288330    0.033936 -41580.322266  23843.719482        0.0                0.0    0.033936        0.000000
2 -41560.322266   20.000000 -41580.288330  23843.719482        0.0                0.0   19.966064      -80.033936
3 -40902.288330  678.000000 -41480.288330  23843.719482      378.0                0.0  200.000000      100.000000
4 -40761.288330  341.000000 -41352.822266  23843.719482      419.0              378.0  172.533936      100.000000
5 -40761.288330  172.500000 -41280.288330  23843.719482      419.0              419.0  100.000000        0.000000
6 -40065.288330  796.000000 -41180.288330  23843.719482      915.0              419.0  200.000000      100.000000
7 -39865.288330  400.000000 -41080.288330  23843.719482      915.0              915.0  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:21:23]  --------------------------------------------------------------------------------
[07/14 14:21:23]  Iteration: 234 (2 solution, 231 counterexamples)
[07/14 14:21:33]  Generator returned sat in 6.445071 secs.
[07/14 14:21:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:21:33]  Improved gap from 139/4096 to 20.3125
[07/14 14:21:33]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:21:33]  Verifer returned sat in 0.305733 secs.
[07/14 14:21:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41580.288574    0.067871 -41880.288574  23843.719482        0.0                0.0  300.000000      200.000000
1 -41580.288574  299.966064 -41780.288574  23843.719482        0.0                0.0  200.000000      100.000000
2 -41380.288574  400.000000 -41680.288574  23843.719482        0.0                0.0  300.000000      200.000000
3 -41373.288574  307.000000 -41535.788574  23843.719482        7.0                0.0  155.500000      100.000000
4 -41373.288574  155.500000 -41440.629639  23843.719482        7.0                7.0   60.341064        0.000000
5 -41355.379639   78.250000 -41380.288574  23923.406982        7.0                7.0   17.908936       -2.403564
6 -41333.663574   39.625000 -41359.976074  24003.094482        7.0                7.0   19.312500       -1.000000
7 -41332.663574   20.312500 -41339.663574  24003.094482        7.0                7.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:21:33]  --------------------------------------------------------------------------------
[07/14 14:21:33]  Iteration: 235 (2 solution, 232 counterexamples)
[07/14 14:21:42]  Generator returned sat in 5.654120 secs.
[07/14 14:21:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:21:42]  Improved gap from 4165/4096 to 20.3125
[07/14 14:21:42]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:21:42]  Verifer returned sat in 0.255086 secs.
[07/14 14:21:42]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41349.153076    0.067871 -41449.187012  23843.719482        0.0                0.0  100.033936        0.033936
1 -41349.153076    0.033936 -41349.187012  23843.719482        0.0                0.0    0.033936      -99.966064
2 -40949.187012  400.000000 -41241.244141  23843.719482        0.0                0.0  292.057129      200.000000
3 -40931.244141  310.000000 -41109.528076  23843.719482        0.0                0.0  178.283936      117.942871
4 -40931.244141  155.500000 -41009.528076  23843.719482        0.0                0.0   78.283936       17.942871
5 -40931.244141   78.250000 -40949.187012  23923.406982        0.0                0.0   17.942871       -2.369629
6 -40909.562012   39.625000 -40928.874512  24003.094482        0.0                0.0   19.312500       -1.000000
7 -40908.562012   20.312500 -40908.562012  24003.094482        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:21:43]  --------------------------------------------------------------------------------
[07/14 14:21:43]  Iteration: 236 (2 solution, 233 counterexamples)
[07/14 14:21:50]  Generator returned sat in 4.490356 secs.
[07/14 14:21:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:21:50]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:21:50]  Verifer returned sat in 0.150835 secs.
[07/14 14:21:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -41149.187012    0.067627 -41349.187012  23843.719482        0.0                0.0    200.0           200.0
1 -41149.187012    0.002500 -41249.187012  23843.719482        0.0                0.0    100.0           100.0
2 -41049.187012  200.000000 -41149.187012  23843.719482        0.0                0.0    100.0           100.0
3 -41049.187012  100.000000 -41149.187012  23843.719482        0.0                0.0    100.0             0.0
4 -40848.687012  300.500000 -40949.187012  23843.719482        0.5                0.0    100.0           100.0
5 -40848.687012    0.010000 -40949.187012  23843.719482        0.5                0.5    100.0             0.0
6 -40648.187012  300.500000 -40798.187012  23843.719482        0.5                0.5    149.5           100.5
7 -40270.687012  527.000000 -40749.187012  23843.719482      278.5                0.5    200.0           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:21:50]  --------------------------------------------------------------------------------
[07/14 14:21:50]  Iteration: 237 (2 solution, 234 counterexamples)
[07/14 14:22:03]  Generator returned sat in 10.063320 secs.
[07/14 14:22:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:04]  Improved gap from 69/8192 to 100
[07/14 14:22:04]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/14 14:22:04]  Verifer returned sat in 0.216762 secs.
[07/14 14:22:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41311.794189    0.067139 -41311.827637  23806.359863    0.000000           0.000000    0.033447        0.033447
1 -41311.794189    0.016846 -41311.810791  23806.359863    0.000000           0.000000    0.016602      -99.966553
2 -40911.827637  399.983154 -41111.827637  23806.359863    0.000000           0.000000  200.000000      200.000000
3 -40911.811035  200.016602 -41111.827637  23806.359863    0.016602           0.000000  200.000000      100.000000
4 -40711.311035  400.500000 -41011.827637  23806.359863    0.516602           0.016602  300.000000      200.000000
5 -40410.844727  600.466309 -40857.827637  23806.359863  200.983154           0.516602  245.999756      199.999756
6 -40148.344482  508.500000 -40811.827637  23806.359863  463.483154         200.983154  200.000000      100.000000
7 -39747.844482  600.500000 -40711.827637  23806.359863  763.982910         463.483154  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:22:04]  --------------------------------------------------------------------------------
[07/14 14:22:04]  Iteration: 238 (2 solution, 235 counterexamples)
[07/14 14:22:13]  Generator returned sat in 6.392634 secs.
[07/14 14:22:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:14]  Improved number of small numbers from 49 to 57 out of a max of 89
[07/14 14:22:14]  Verifer returned sat in 0.630021 secs.
[07/14 14:22:14]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41311.793945     0.067139 -41411.827637  23806.359619     0.000000           0.000000  100.033691      100.033691
1 -41311.793945     0.033691 -41311.827637  23806.359619     0.000000           0.000000    0.033691        0.033691
2 -41011.827881   299.999756 -41211.827637  23806.359619     0.000000           0.000000  199.999756      199.999756
3 -41011.794067   200.033569 -41211.827637  23806.359619     0.033569           0.000000  200.000000      100.000000
4 -40711.277283   500.516785 -41029.827637  23806.359619   100.550354           0.033569  218.000000      200.000000
5 -40114.518890   814.758392 -40957.827637  23806.359619   597.308990         100.550354  245.999756      199.999756
6 -39444.639450   915.879196 -40811.827637  23806.359619  1267.188187         597.308990  100.000000      100.000000
7 -38286.199852  1258.439598 -40811.827637  23806.359619  2325.627686        1267.188187  200.000099      100.000099
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:22:14]  --------------------------------------------------------------------------------
[07/14 14:22:14]  Iteration: 239 (2 solution, 236 counterexamples)
[07/14 14:22:22]  Generator returned sat in 4.521253 secs.
[07/14 14:22:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:22]  Improved number of small numbers from 61 to 89 out of a max of 89
[07/14 14:22:22]  Verifer returned sat in 0.223075 secs.
[07/14 14:22:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41211.827881     0.066895 -41411.827637  23806.359619      0.000000           0.000000  199.999756      199.999756
1 -41211.827881     0.033691 -41311.827637  23806.359619      0.000000           0.000000   99.999756       99.999756
2 -41011.827637   300.000000 -41211.827637  23806.359619      0.000000           0.000000  200.000000      200.000000
3 -41011.793945   200.033691 -41111.827881  23806.359619      0.033691           0.000000  100.000244      100.000000
4 -40410.227051   701.567139 -41111.827637  23806.359619    501.600586           0.033691  200.000000      100.000000
5 -39005.592773  1604.634277 -40945.827637  23806.359619   1806.234863         501.600586  134.000000      100.000000
6 -35662.824219  3476.768555 -40811.827881  23806.359619   4949.003662        1806.234863  200.000000      199.999756
7 -28607.787109  7255.037109 -40811.827637  23806.359619  12004.040527        4949.003662  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:22:22]  --------------------------------------------------------------------------------
[07/14 14:22:22]  Iteration: 240 (2 solution, 237 counterexamples)
[07/14 14:22:29]  Generator returned sat in 4.290195 secs.
[07/14 14:22:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:30]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:22:30]  Verifer returned sat in 0.118746 secs.
[07/14 14:22:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41211.827881    0.066895 -41411.827637  23806.359619    0.000000           0.000000  199.999756      199.999756
1 -41211.827881    0.033691 -41410.361328  23806.359619    0.000000           0.000000  198.533447       99.999756
2 -41011.827637  398.533691 -41211.827637  23806.359619    0.000000           0.000000  200.000000      200.000000
3 -40611.726562  600.101074 -41111.827881  23806.359619  400.101074           0.000000  100.000244      100.000000
4 -40410.227051  301.499756 -41111.827637  23806.359619  501.600586         400.101074  200.000000      100.000000
5 -40310.193359  300.033691 -40945.827637  23806.359619  501.634277         501.600586  134.000000      100.000000
6 -40176.693359  267.500000 -40811.827881  23806.359619  501.667969         501.634277  133.466553      133.466309
7 -40008.659912  301.500000 -40811.827637  23806.359619  603.167725         501.667969  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:22:30]  --------------------------------------------------------------------------------
[07/14 14:22:30]  Iteration: 241 (2 solution, 238 counterexamples)
[07/14 14:22:39]  Generator returned sat in 5.796448 secs.
[07/14 14:22:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:39]  Improved number of small numbers from 53 to 57 out of a max of 89
[07/14 14:22:39]  Verifer returned sat in 0.615662 secs.
[07/14 14:22:39]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41211.828125    0.066650 -41411.827881  23806.359375     0.000000           0.000000  199.999756      199.999756
1 -41211.828125    0.016602 -41411.827881  23806.359375     0.000000           0.000000  199.999756       99.999756
2 -41011.828125  399.999756 -41227.827881  23806.359375     0.000000           0.000000  215.999756      199.999756
3 -41011.811218  216.016663 -41211.827881  23806.359375     0.016663           0.000000  200.000000      100.000000
4 -40902.302887  309.508331 -41011.827881  23806.359375     0.033325           0.016663  109.491669      109.491669
5 -40455.540390  556.254166 -41011.827881  23806.359375   356.287491           0.033325  200.000000      100.000000
6 -40159.913307  495.627083 -40811.828125  23806.359375   551.914574         356.287491  100.000244      100.000000
7 -39610.600254  649.313297 -40811.827881  23806.359375  1001.227539         551.914574  200.000088      100.000088
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:22:40]  --------------------------------------------------------------------------------
[07/14 14:22:40]  Iteration: 242 (2 solution, 239 counterexamples)
[07/14 14:22:52]  Generator returned sat in 9.625107 secs.
[07/14 14:22:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:53]  Improved number of small numbers from 59 to 63 out of a max of 89
[07/14 14:22:53]  Verifer returned sat in 0.377745 secs.
[07/14 14:22:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -41211.828369    0.066406 -41411.828125  23806.359375    0.000000           0.000000  199.999756       99.999756
1 -41211.828369    0.016846 -41311.828125  23806.359375    0.000000           0.000000   99.999756       -0.000244
2 -41011.828369  299.999756 -41111.828125  23806.359375    0.000000           0.000000   99.999756       99.999756
3 -41011.828369   50.008331 -41011.836456  23806.359375    0.000000           0.000000    0.008087       -0.000244
4 -40911.819794  100.016663 -40911.828125  23806.359375    0.000000           0.000000    0.008331        0.008331
5 -40711.794800  200.033325 -40911.828125  23806.359375    0.033325           0.000000  200.000000      100.000000
6 -40410.244812  501.549988 -40811.828125  23806.359375  101.583313           0.033325  300.000000      200.000000
7 -39756.411499  953.833313 -40711.828125  23806.359375  655.416748         101.583313  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:22:53]  --------------------------------------------------------------------------------
[07/14 14:22:53]  Iteration: 243 (2 solution, 240 counterexamples)
[07/14 14:22:58]  Generator returned sat in 2.634397 secs.
[07/14 14:22:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:22:59]  Improved gap from 17/1024 to 100
[07/14 14:22:59]  Improved number of small numbers from 84 to 86 out of a max of 90
[07/14 14:22:59]  Verifer returned sat in 0.245033 secs.
[07/14 14:22:59]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -43452.072266     0.066162 -43552.072266  23707.958496     0.000000           0.000000  100.000000      100.000000
1 -43452.072266    99.966553 -43552.072266  23707.958496     0.000000           0.000000  100.000000        0.000000
2 -43152.072510   399.999756 -43352.072266  23707.958496     0.000000           0.000000  199.999756      199.999756
3 -43152.039062   200.033203 -43352.072266  23707.958496     0.033203           0.000000  200.000000      100.000000
4 -42850.489258   501.549805 -43152.072266  23707.958496   201.583008           0.033203  100.000000      100.000000
5 -41796.664551  1153.824707 -43125.072266  23707.958496  1055.407715         201.583008  273.000000      200.000000
6 -40110.427490  1959.237061 -43052.072266  23707.958496  2741.644775        1055.407715  200.000000      100.000000
7 -37070.071899  3240.355591 -42952.072266  23707.958496  5582.000488        2741.644775  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:22:59]  --------------------------------------------------------------------------------
[07/14 14:22:59]  Iteration: 244 (2 solution, 241 counterexamples)
[07/14 14:23:11]  Generator returned sat in 9.336986 secs.
[07/14 14:23:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:23:12]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/14 14:23:12]  Verifer returned sat in 0.164580 secs.
[07/14 14:23:12]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -43352.072510    0.066162 -43552.072266  23707.958496    0.000000           0.000000  199.999756      199.999756
1 -43352.072510    0.033203 -43552.072266  23707.958496    0.000000           0.000000  199.999756       99.999756
2 -43152.072266  400.000000 -43452.072266  23707.958496    0.000000           0.000000  300.000000      200.000000
3 -42874.929408  577.142857 -43349.072266  23707.958496  177.142857           0.000000  297.000000      200.000000
4 -42780.357980  391.571429 -43152.072266  23707.958496  271.714286         177.142857  100.000000      100.000000
5 -42483.072266  397.285714 -43086.072266  23707.958496  469.000000         271.714286  134.000000      100.000000
6 -42233.929408  383.142857 -42952.072266  23707.958496  618.142857         469.000000  100.000000      100.000000
7 -41942.357980  391.571429 -42952.072266  23707.958496  809.714111         618.142857  200.000174      100.000174
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:23:12]  --------------------------------------------------------------------------------
[07/14 14:23:12]  Iteration: 245 (2 solution, 242 counterexamples)
[07/14 14:23:20]  Generator returned sat in 4.854465 secs.
[07/14 14:23:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:23:20]  Improved number of small numbers from 76 to 89 out of a max of 89
[07/14 14:23:20]  Verifer returned sat in 0.218541 secs.
[07/14 14:23:20]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -43452.055664     0.066162 -43552.072266  23707.958496     0.000000           0.000000  100.016602      100.016602
1 -43452.055664     0.033203 -43452.072266  23707.958496     0.000000           0.000000    0.016602        0.016602
2 -43152.072266   300.000000 -43352.072510  23707.958496     0.000000           0.000000  200.000244      200.000000
3 -43152.055908   200.016602 -43349.072266  23707.958496     0.016357           0.000000  197.000000      100.000000
4 -42946.031006   403.024902 -43152.072266  23707.958496   106.041260           0.016357  100.000000      100.000000
5 -42289.993652   756.037354 -43152.072266  23707.958496   662.078613         106.041260  200.000000      100.000000
6 -41254.437500  1235.556152 -42952.072266  23707.958496  1497.634766         662.078613  200.000000      200.000000
7 -39401.103271  2053.334229 -42952.072266  23707.958496  3250.968994        1497.634766  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:23:21]  --------------------------------------------------------------------------------
[07/14 14:23:21]  Iteration: 246 (2 solution, 243 counterexamples)
[07/14 14:23:28]  Generator returned sat in 4.324135 secs.
[07/14 14:23:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:23:28]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/14 14:23:28]  Verifer returned sat in 0.197597 secs.
[07/14 14:23:28]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -43452.055664    0.066162 -43552.072266  23707.958496   0.000000           0.000000  100.016602        3.012451
1 -43452.055664    0.032959 -43452.072510  23707.958496   0.000000           0.000000    0.016846      -96.987549
2 -43152.072510  300.000000 -43355.068115  23707.958496   0.000000           0.000000  202.995605      102.995605
3 -43055.065918  300.002197 -43155.068359  23707.958496   0.002197           0.000000  100.000244      100.000000
4 -42955.064209  200.001953 -43055.068115  23707.958496   0.003906           0.002197  100.000000      100.000000
5 -42855.062012  200.002197 -43022.734619  23707.958496   0.006104           0.003906  167.666504      100.000000
6 -42855.061768  167.666748 -42877.622314  23707.958496   0.006104           0.006104   22.554443        0.000244
7 -42655.059814  222.556396 -42855.068115  23707.958496   0.008301           0.006104  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:23:29]  --------------------------------------------------------------------------------
[07/14 14:23:29]  Iteration: 247 (2 solution, 244 counterexamples)
[07/14 14:23:35]  Generator returned sat in 3.233565 secs.
[07/14 14:23:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:23:35]  Improved number of small numbers from 59 to 85 out of a max of 89
[07/14 14:23:35]  Verifer returned sat in 0.322598 secs.
[07/14 14:23:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -43455.068115     0.066162 -43555.068359  23707.958252     0.000000           0.000000  100.000244      100.000000
1 -43455.068115     0.032959 -43552.072266  23707.958252     0.000000           0.000000   97.004150        0.000000
2 -43155.068359   397.003906 -43355.068115  23707.958252     0.000000           0.000000  199.999756      199.999756
3 -43155.051636   200.016479 -43355.068115  23707.958252     0.016357           0.000000  200.000122      100.000122
4 -42953.518799   401.532959 -43255.068115  23707.958252     1.549561           0.016357  299.999756      199.999756
5 -42448.952637   804.565918 -43055.068359  23707.958252   506.115479           1.549561  100.000244      100.000000
6 -40938.321045  1610.631836 -42955.068115  23707.958252  1816.747070         506.115479  200.000000      200.000000
7 -37915.557373  3222.763672 -42955.068115  23707.958252  4739.510742        1816.747070  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:23:36]  --------------------------------------------------------------------------------
[07/14 14:23:36]  Iteration: 248 (2 solution, 245 counterexamples)
[07/14 14:23:57]  Generator returned sat in 18.177758 secs.
[07/14 14:23:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:23:58]  Improved number of small numbers from 26 to 38 out of a max of 89
[07/14 14:23:58]  Verifer returned sat in 1.024507 secs.
[07/14 14:23:58]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -44838.163330     0.066162 -44838.179757  23507.982910     0.000000           0.000000    0.016427        0.016275
1 -44838.163330     0.008301 -44838.171487  23607.966553     0.000000           0.000000    0.008157       -0.000083
2 -44838.154947     0.016541 -44838.163217  23707.958252     0.000000           0.000000    0.008270        0.000000
3 -44638.146676   200.016541 -44838.154947  23707.958252     0.008270           0.000000  200.000000      100.000000
4 -44537.084649   301.062027 -44638.154947  23707.958252     0.008270           0.008270  101.062027      101.062027
5 -43786.520555   851.626122 -44638.154947  23707.958252   651.634392           0.008270  200.000000      100.000000
6 -42408.068967  1578.451588 -44538.154947  23707.958252  1830.085979         651.634392  300.000000      200.000000
7 -39889.391586  2818.677382 -44438.154785  23707.958252  4248.763428        1830.085979  299.999772      199.999933
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:23:58]  --------------------------------------------------------------------------------
[07/14 14:23:58]  Iteration: 249 (2 solution, 246 counterexamples)
[07/14 14:24:06]  Generator returned sat in 4.745247 secs.
[07/14 14:24:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:24:06]  Improved gap from 271/16384 to 100
[07/14 14:24:07]  Improved number of small numbers from 29 to 39 out of a max of 90
[07/14 14:24:07]  Verifer returned sat in 0.931775 secs.
[07/14 14:24:07]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -45685.349609     0.066162 -45785.349717  23607.966553     0.000000           0.000000  100.000107      100.000107
1 -45685.349609     0.033203 -45785.349717  23607.966553     0.000000           0.000000  100.000107        0.000107
2 -45685.316636   100.033081 -45685.349717  23607.966553     0.000000           0.000000    0.033081      -99.966919
3 -45385.316636   300.033081 -45486.349717  23607.966553     0.033081           0.000000  101.000000      100.000000
4 -44586.767014   899.549622 -45485.349717  23607.966553   598.582703           0.033081  300.000000      200.000000
5 -43086.442582  1800.324432 -45358.349717  23607.966553  1998.907135         598.582703  273.000000      200.000000
6 -40167.455933  3191.986649 -45285.349717  23607.966553  4817.893784        1998.907135  300.000000      200.000000
7 -35376.975960  5090.479973 -45085.349854  23607.966553  9608.373535        4817.893784  100.000358      100.000221
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:24:07]  --------------------------------------------------------------------------------
[07/14 14:24:07]  Iteration: 250 (2 solution, 247 counterexamples)
[07/14 14:24:24]  Generator returned sat in 13.556459 secs.
[07/14 14:24:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:24:25]  Improved number of small numbers from 42 to 83 out of a max of 89
[07/14 14:24:25]  Verifer returned sat in 0.618726 secs.
[07/14 14:24:25]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -45685.349854     0.066162 -45785.349854  23607.966553     0.000000           0.000000  100.000000      100.000000
1 -45685.349854     0.033203 -45785.349609  23607.966553     0.000000           0.000000   99.999756        0.000000
2 -45685.316650   100.032959 -45685.349717  23607.966553     0.000000           0.000000    0.033066      -99.966797
3 -45385.316636   300.033081 -45486.349609  23607.966553     0.032959           0.000000  101.000015      100.000259
4 -44885.250488   601.066162 -45485.349854  23607.966553   400.099365           0.032959  200.000000      100.000000
5 -43882.118164  1203.132324 -45285.349854  23607.966553  1303.231689         400.099365  100.000000      100.000000
6 -41574.853516  2407.264648 -45285.349609  23607.966553  3410.496338        1303.231689  299.999756      200.000000
7 -37059.323975  4815.529297 -45185.349609  23607.966553  7926.025391        3410.496338  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:24:25]  --------------------------------------------------------------------------------
[07/14 14:24:25]  Iteration: 251 (2 solution, 248 counterexamples)
[07/14 14:24:35]  Generator returned sat in 7.048539 secs.
[07/14 14:24:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:24:36]  Improved number of small numbers from 36 to 89 out of a max of 89
[07/14 14:24:36]  Verifer returned sat in 0.283746 secs.
[07/14 14:24:36]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48184.341064     0.066162 -48384.341064  23607.966553      0.000000           0.000000  200.000000      200.000000
1 -48184.341064     0.016602 -48384.341064  23607.966553      0.000000           0.000000  200.000000      100.000000
2 -48184.341064     0.032959 -48184.357422  23607.966553      0.000000           0.000000    0.016357        0.000000
3 -47984.324463   200.032959 -48184.340820  23607.966553      0.016602           0.000000  199.999756      100.000000
4 -47583.258057   601.066162 -47984.341064  23607.966553    301.082764           0.016602  100.000244      100.000244
5 -46080.125977  1603.132324 -47984.340820  23607.966553   1704.214844         301.082764  200.000000      100.000244
6 -42872.844727  3407.281250 -47884.341064  23607.966553   4711.496338        1704.214844  300.000000      200.000000
7 -36057.282471  7115.562256 -47784.340820  23607.966553  11527.058350        4711.496338  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:24:36]  --------------------------------------------------------------------------------
[07/14 14:24:36]  Iteration: 252 (2 solution, 249 counterexamples)
[07/14 14:24:48]  Generator returned sat in 8.938734 secs.
[07/14 14:24:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:24:48]  Improved number of small numbers from 54 to 89 out of a max of 89
[07/14 14:24:48]  Verifer returned sat in 0.211069 secs.
[07/14 14:24:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48284.341064    0.066162 -48284.341064  23507.966553    0.000000           0.000000    0.000000        0.000000
1 -48084.341064  200.000000 -48284.319092  23507.966553    0.000000           0.000000  199.978027      100.000000
2 -48084.341064    0.033203 -48184.341064  23507.966553    0.000000           0.000000  100.000000        0.000000
3 -47784.308105  400.032959 -48083.307861  23507.966553    0.032959           0.000000  298.966797      200.000000
4 -47784.308105  202.033203 -47984.341064  23507.966553    0.032959           0.032959  200.000000      100.000000
5 -47533.841064  450.467041 -47834.824463  23507.966553  150.499756           0.032959  150.483643      100.000244
6 -47333.808105  350.516602 -47784.341064  23507.966553  150.532959         150.499756  300.000000      200.000000
7 -47333.808105  299.966797 -47684.341064  23507.966553  150.532959         150.532959  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:24:49]  --------------------------------------------------------------------------------
[07/14 14:24:49]  Iteration: 253 (2 solution, 250 counterexamples)
[07/14 14:24:54]  Generator returned sat in 2.823310 secs.
[07/14 14:24:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:24:55]  Improved number of small numbers from 85 to 85 out of a max of 89
[07/14 14:24:55]  Verifer returned sat in 0.169143 secs.
[07/14 14:24:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48284.341064    0.066162 -48284.341064  23507.966553    0.000000           0.000000    0.000000        0.000000
1 -48084.341064  200.000000 -48284.341064  23507.966553    0.000000           0.000000  200.000000      100.000000
2 -48084.341064    0.033203 -48184.341064  23507.966553    0.000000           0.000000  100.000000        0.000000
3 -47784.308105  400.032959 -48083.307861  23507.966553    0.032959           0.000000  298.966797      200.000000
4 -47784.308105  202.033203 -47984.154248  23507.966553    0.032959           0.032959  199.813184      100.000000
5 -47533.841064  450.280225 -47834.824463  23507.966553  150.499756           0.032959  150.483643      100.000244
6 -47333.808105  350.516602 -47784.341064  23507.966553  150.532959         150.499756  300.000000      200.000000
7 -47333.808105  299.966797 -47684.341064  23507.966553  150.532959         150.532959  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:24:55]  --------------------------------------------------------------------------------
[07/14 14:24:55]  Iteration: 254 (2 solution, 251 counterexamples)
[07/14 14:25:05]  Generator returned sat in 6.378403 secs.
[07/14 14:25:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:25:05]  Improved number of small numbers from 41 to 89 out of a max of 89
[07/14 14:25:05]  Verifer returned sat in 0.270059 secs.
[07/14 14:25:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48184.333008    0.066162 -48382.357666  23507.966553   0.000000           0.000000  198.024658      100.008057
1 -48184.333008  198.024658 -48284.341064  23507.966553   0.000000           0.000000  100.008057        0.008057
2 -48184.333008    0.008057 -48184.341064  23507.966553   0.000000           0.000000    0.008057      -99.991943
3 -47784.332764  400.008301 -47984.341064  23507.966553   0.008301           0.000000  200.000000      200.000000
4 -47784.324463  200.008301 -47885.002197  23507.966553   0.016602           0.008301  100.661133      100.000000
5 -47684.316162  200.669434 -47884.341064  23507.966553   0.024658           0.016602  200.000244      100.000244
6 -47684.316162  151.000000 -47784.337646  23507.966553   0.024658           0.024658   99.996826        0.000244
7 -47484.307861  300.005127 -47684.341064  23507.966553   0.032959           0.024658  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:25:05]  --------------------------------------------------------------------------------
[07/14 14:25:05]  Iteration: 255 (2 solution, 252 counterexamples)
[07/14 14:25:13]  Generator returned sat in 4.625013 secs.
[07/14 14:25:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:25:13]  Improved gap from 271/16384 to 100
[07/14 14:25:14]  Improved number of small numbers from 52 to 90 out of a max of 90
[07/14 14:25:14]  Verifer returned sat in 0.267532 secs.
[07/14 14:25:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48316.947021    0.065918 -48316.963623  23507.966553   0.000000           0.000000    0.016602        0.016602
1 -48116.963867  199.999756 -48216.963623  23507.966553   0.000000           0.000000   99.999756       99.999756
2 -48116.963867   99.983398 -48116.980225  23507.966553   0.000000           0.000000    0.016357       -0.000244
3 -47914.731934  202.248291 -48051.702148  23507.966553   0.016602           0.000000  136.953613      102.215088
4 -47816.930664  234.754883 -47916.963623  23507.966553   0.032959           0.016602  100.000000      100.000000
5 -47648.553223  268.377441 -47916.963623  23507.966553  33.197021           0.032959  235.213379      135.213379
6 -47648.553223  235.197021 -47784.324707  23507.966553  33.197021          33.197021  102.574463       35.213379
7 -47483.750244  267.377441 -47684.341309  23507.966553  33.213379          33.197021  167.377686      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:25:14]  --------------------------------------------------------------------------------
[07/14 14:25:14]  Iteration: 256 (2 solution, 253 counterexamples)
[07/14 14:25:38]  Generator returned sat in 20.824877 secs.
[07/14 14:25:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:25:38]  Improved number of small numbers from 47 to 89 out of a max of 89
[07/14 14:25:38]  Verifer returned sat in 0.215967 secs.
[07/14 14:25:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48316.947266    0.065674 -48384.295898  23575.298584    0.000000           0.000000   67.348633       67.348633
1 -48116.964111  267.331787 -48384.295654  23575.298584    0.000000           0.000000  267.331543      167.331787
2 -48116.964111   99.983154 -48184.295898  23575.298584    0.000000           0.000000   67.331787       67.331787
3 -47914.731934  269.563965 -48084.295898  23575.298584    0.015381           0.000000  169.548584      169.548584
4 -47784.280518  300.000000 -48034.288086  23575.298584    0.030273           0.015381  249.977295      199.985107
5 -47684.250244  350.007568 -47984.295898  23575.298584    0.045654           0.030273  300.000000      200.000000
6 -47684.250244  200.000000 -47884.295898  23575.298584    0.045654           0.045654  200.000000      100.000000
7 -47483.750244  400.500000 -47684.341553  23575.298584  100.545410           0.045654  100.045898      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:25:38]  --------------------------------------------------------------------------------
[07/14 14:25:38]  Iteration: 257 (2 solution, 254 counterexamples)
[07/14 14:25:46]  Generator returned sat in 4.401477 secs.
[07/14 14:25:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:25:46]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:25:46]  Verifer returned sat in 0.132652 secs.
[07/14 14:25:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48316.947266    0.065674 -48384.295898  23575.298584    0.000000           0.000000   67.348633       67.348633
1 -48116.964111  267.331787 -48384.295654  23575.298584    0.000000           0.000000  267.331543      167.331787
2 -48116.964111   99.983154 -48184.295898  23575.298584    0.000000           0.000000   67.331787       67.331787
3 -47914.731934  269.563965 -48084.295898  23575.298584    0.015381           0.000000  169.548584      169.548584
4 -47784.280518  300.000000 -48034.288086  23575.298584    0.030273           0.015381  249.977295      199.985107
5 -47684.250244  350.007568 -47984.295898  23575.298584    0.045654           0.030273  300.000000      200.000000
6 -47684.250244  200.000000 -47805.295898  23575.298584    0.045654           0.045654  121.000000      100.000000
7 -47186.250244  619.000000 -47684.341553  23575.298584  298.045654           0.045654  200.045654      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:25:46]  --------------------------------------------------------------------------------
[07/14 14:25:46]  Iteration: 258 (2 solution, 255 counterexamples)
[07/14 14:25:57]  Generator returned sat in 7.804100 secs.
[07/14 14:25:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:25:58]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:25:58]  Verifer returned sat in 0.126667 secs.
[07/14 14:25:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48316.947510    0.065674 -48384.296143  23575.298584    0.000000           0.000000   67.348633       67.348389
1 -48116.964355  267.331787 -48384.295898  23575.298584    0.000000           0.000000  267.331543      167.331543
2 -48116.964355   99.983154 -48184.295898  23575.298584    0.000000           0.000000   67.331543       67.331543
3 -47914.731934  269.563965 -48084.296143  23575.298584    0.015381           0.000000  169.548828      169.548584
4 -47784.280762  300.000000 -48034.288330  23575.298584    0.030273           0.015381  249.977295      199.984863
5 -47684.250488  350.007568 -47984.295898  23575.298584    0.045654           0.030273  299.999756      199.999756
6 -47684.250488  200.000000 -47805.296143  23575.298584    0.045654           0.045654  121.000000       99.999756
7 -46986.250488  819.000000 -47684.341797  23575.298584  498.045410           0.045654  200.045898      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:25:58]  --------------------------------------------------------------------------------
[07/14 14:25:58]  Iteration: 259 (2 solution, 256 counterexamples)
[07/14 14:26:17]  Generator returned sat in 16.325784 secs.
[07/14 14:26:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:26:18]  Improved number of small numbers from 51 to 59 out of a max of 89
[07/14 14:26:18]  Verifer returned sat in 0.558397 secs.
[07/14 14:26:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47816.849365    0.065674 -48116.849243  23575.298584    0.000000           0.000000  299.999878      199.999878
1 -47816.816406  300.032837 -47916.849243  23575.298584    0.000000           0.000000  100.032837      100.032837
2 -47816.816406    0.032959 -47816.849243  23575.298584    0.000000           0.000000    0.032837        0.032837
3 -47616.849243  200.000000 -47816.832825  23575.298584    0.000000           0.000000  199.983582      100.000000
4 -47516.816406  300.016418 -47716.849243  23575.298584    0.000000           0.000000  200.032837      100.032837
5 -47516.816406  200.000000 -47566.832825  23575.298584    0.000000           0.000000   50.016418        0.032837
6 -47316.816406  250.016418 -47416.849243  23575.298584    0.032837           0.000000  100.000000      100.000000
7 -46491.841034  924.975372 -47416.849121  23575.298584  725.008057           0.032837  200.000031      100.000153
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:26:18]  --------------------------------------------------------------------------------
[07/14 14:26:18]  Iteration: 260 (2 solution, 257 counterexamples)
[07/14 14:26:25]  Generator returned sat in 3.421710 secs.
[07/14 14:26:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:26:25]  Improved gap from 269/16384 to 100
[07/14 14:26:26]  Improved number of small numbers from 31 to 41 out of a max of 90
[07/14 14:26:26]  Verifer returned sat in 0.868186 secs.
[07/14 14:26:26]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48489.241455     0.065430 -48563.27421  23575.298584     0.000000           0.000000   74.032755       74.032755
1 -48489.241455     0.032959 -48489.27421  23575.298584     0.000000           0.000000    0.032755      -25.967245
2 -48163.274210   326.000000 -48363.27421  23575.298584     0.000000           0.000000  200.000000      200.000000
3 -48163.241373   200.032837 -48331.27421  23575.298584     0.032837           0.000000  168.000000      100.000000
4 -47767.224955   564.016418 -48163.27421  23575.298584   296.049255           0.032837  100.000000      100.000000
5 -46933.216746   934.008209 -48163.27421  23575.298584  1030.057465         296.049255  200.000000      100.000000
6 -46266.212641   867.004105 -47963.27421  23575.298584  1597.061569        1030.057465  100.000000      100.000000
7 -45196.710589  1169.502052 -47963.27417  23575.298584  2566.563477        1597.061569  200.000105      100.000145
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:26:26]  --------------------------------------------------------------------------------
[07/14 14:26:26]  Iteration: 261 (2 solution, 258 counterexamples)
[07/14 14:26:34]  Generator returned sat in 5.094487 secs.
[07/14 14:26:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:26:35]  Improved gap from 67/4096 to 100
[07/14 14:26:35]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 14:26:35]  Verifer returned sat in 0.183795 secs.
[07/14 14:26:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48463.274170     0.065430 -48563.274170  23575.298584     0.000000           0.000000  100.000000      100.000000
1 -48463.274170    99.967285 -48463.306641  23575.298584     0.000000           0.000000    0.032471        0.000000
2 -48263.274170   200.032471 -48363.274170  23575.298584     0.000000           0.000000  100.000000      100.000000
3 -48163.241455   200.032715 -48263.274170  23575.298584     0.032715           0.000000  100.000000      100.000000
4 -47463.208740   800.032715 -48263.273926  23575.298584   500.065430           0.032715  299.999756      200.000000
5 -46563.110352  1200.098145 -48163.274170  23575.298584  1400.163574         500.065430  200.000244      100.000244
6 -45163.012451  1600.098145 -47983.274170  23575.298584  2700.261719        1400.163574  120.000000      100.000000
7 -43122.914307  2160.098145 -47963.273926  23575.298584  4640.359619        2700.261719  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:26:35]  --------------------------------------------------------------------------------
[07/14 14:26:35]  Iteration: 262 (2 solution, 259 counterexamples)
[07/14 14:26:47]  Generator returned sat in 8.661066 secs.
[07/14 14:26:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:26:47]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:26:47]  Verifer returned sat in 0.155760 secs.
[07/14 14:26:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48463.274170    0.065430 -48563.274170  23575.298584     0.000000           0.000000  100.000000           100.0
1 -48463.274170   99.967285 -48463.306641  23575.298584     0.000000           0.000000    0.032471             0.0
2 -48263.274170  200.032471 -48463.274170  23575.298584     0.000000           0.000000  200.000000           100.0
3 -48163.241455  300.032715 -48303.274170  23575.298584     0.032715           0.000000  140.000000           100.0
4 -47783.241455  520.000000 -48263.273926  23575.298584   280.032715           0.032715  199.999756           100.0
5 -47583.175781  400.065430 -48063.274170  23575.298584   280.098389         280.032715  200.000000           200.0
6 -46983.175781  800.000000 -48043.274170  23575.298584   880.098389         280.098389  180.000000           100.0
7 -46643.175781  520.000000 -47963.273926  23575.298584  1120.098389         880.098389  199.999756           100.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:26:47]  --------------------------------------------------------------------------------
[07/14 14:26:47]  Iteration: 263 (2 solution, 260 counterexamples)
[07/14 14:26:58]  Generator returned sat in 7.783421 secs.
[07/14 14:26:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:26:59]  Improved gap from 67/2048 to 100
[07/14 14:26:59]  Improved number of small numbers from 75 to 77 out of a max of 90
[07/14 14:26:59]  Verifer returned sat in 0.358391 secs.
[07/14 14:26:59]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48463.274170     0.065186 -48563.274170  23575.29834     0.000000           0.000000  100.000000      100.000000
1 -48463.274170     0.032715 -48563.274170  23575.29834     0.000000           0.000000  100.000000        0.000000
2 -48463.241699   100.032471 -48463.274170  23575.29834     0.000000           0.000000    0.032471      -99.967529
3 -48163.241455   300.032715 -48363.208740  23575.29834     0.032715           0.000000  199.934570      100.000000
4 -47763.045166   600.130859 -48263.273926  23575.29834   300.229004           0.032715  199.999756      100.000000
5 -46912.913696  1050.131226 -48063.274170  23575.29834   950.360474         300.229004  200.000000      200.000000
6 -45462.782471  1650.131226 -48063.274170  23575.29834  2300.491699         950.360474  300.000000      200.000000
7 -43662.749390  2100.033081 -47963.273926  23575.29834  4000.524902        2300.491699  299.999634      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:26:59]  --------------------------------------------------------------------------------
[07/14 14:26:59]  Iteration: 264 (2 solution, 261 counterexamples)
[07/14 14:27:07]  Generator returned sat in 4.336874 secs.
[07/14 14:27:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:27:07]  Improved gap from 794891/8192 to 100
[07/14 14:27:07]  Improved number of small numbers from 46 to 90 out of a max of 90
[07/14 14:27:07]  Verifer returned sat in 0.253514 secs.
[07/14 14:27:07]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47514.413574    0.064941 -47514.446289  22526.437744    0.000000           0.000000    0.032715        0.000000
1 -47514.413574    0.016357 -47514.413574  22526.437744    0.000000           0.000000    0.000000     -100.000000
2 -47314.397461  200.016113 -47314.413574  22526.437744    0.000000           0.000000    0.016113        0.016113
3 -47234.413574   80.000000 -47234.413574  22526.437744    0.000000           0.000000    0.000000      -20.000000
4 -47092.897217  141.516357 -47114.413574  22526.437744    0.000000           0.000000   21.516357       21.516357
5 -46912.913574  201.500000 -47014.413574  22526.437744    1.500000           0.000000  100.000000      100.000000
6 -46462.163574  550.750000 -46914.413574  22526.437744  352.249756           1.500000  100.000244      100.000244
7 -45806.788818  755.375000 -46914.413574  22526.437744  907.624756         352.249756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:27:07]  --------------------------------------------------------------------------------
[07/14 14:27:07]  Iteration: 265 (2 solution, 262 counterexamples)
[07/14 14:27:14]  Generator returned sat in 3.931559 secs.
[07/14 14:27:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:27:15]  Improved number of small numbers from 70 to 74 out of a max of 89
[07/14 14:27:15]  Verifer returned sat in 0.335409 secs.
[07/14 14:27:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47514.413574    0.064941 -47514.446045  22526.4375     0.000000           0.000000    0.032471        0.000000
1 -47514.413574    0.016357 -47514.413574  22526.4375     0.000000           0.000000    0.000000     -100.000000
2 -47234.413574  280.000000 -47314.413574  22526.4375     0.000000           0.000000   80.000000       80.000000
3 -47234.413574   80.000000 -47234.413574  22526.4375     0.000000           0.000000    0.000000      -20.000000
4 -46932.897339  301.516235 -47214.413574  22526.4375     0.000000           0.000000  281.516235      181.516235
5 -46459.881104  754.532471 -47114.413574  22526.4375   354.532471           0.000000  300.000000      200.000000
6 -46082.614868  677.266235 -46914.413574  22526.4375   631.798706         354.532471  200.000000      200.000000
7 -45463.981750  818.633118 -46914.413574  22526.4375  1250.431641         631.798706  200.000183      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:27:15]  --------------------------------------------------------------------------------
[07/14 14:27:15]  Iteration: 266 (2 solution, 263 counterexamples)
[07/14 14:27:21]  Generator returned sat in 2.892467 secs.
[07/14 14:27:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:27:22]  Improved number of small numbers from 59 to 61 out of a max of 89
[07/14 14:27:22]  Verifer returned sat in 0.457774 secs.
[07/14 14:27:22]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47514.413574    0.064941 -47614.413574  22526.437256     0.000000           0.000000  100.000000        0.000000
1 -47514.413574    0.032227 -47514.413574  22526.437256     0.000000           0.000000    0.000000     -100.000000
2 -47314.381348  200.032227 -47314.413574  22526.437256     0.000000           0.000000    0.032227        0.032227
3 -47239.405457   75.008118 -47239.405457  22526.437256     0.000000           0.000000    0.000000      -24.991882
4 -46937.889221  301.516235 -47214.413574  22526.437256     0.000000           0.000000  276.524353      176.524353
5 -46610.639221  603.774353 -47114.413574  22526.437256   303.774353           0.000000  200.000000      100.000000
6 -46208.752045  601.887177 -46914.413574  22526.437256   605.661530         303.774353  100.000000      100.000000
7 -45520.320633  788.431412 -46914.413574  22526.437256  1194.092773         605.661530  200.000168      100.000168
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:27:22]  --------------------------------------------------------------------------------
[07/14 14:27:22]  Iteration: 267 (2 solution, 264 counterexamples)
[07/14 14:27:30]  Generator returned sat in 4.536468 secs.
[07/14 14:27:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:27:30]  Improved gap from 0 to 100
[07/14 14:27:30]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:27:30]  Verifer returned sat in 0.148219 secs.
[07/14 14:27:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47314.413574    0.064941 -47414.413574  22426.437256    0.000000           0.000000  100.000000      100.000000
1 -47314.413574    0.032227 -47414.413574  22426.437256    0.000000           0.000000  100.000000        0.000000
2 -47082.723633  331.689941 -47314.413574  22426.437256    0.000000           0.000000  231.689941      131.689941
3 -47082.723633  231.673828 -47214.413574  22426.437256    0.000000           0.000000  131.689941       31.689941
4 -47082.723633  101.500000 -47082.739746  22426.437256    0.000000           0.000000    0.016113      -68.310059
5 -46915.402832  167.336914 -46915.402832  22426.437256    0.000000           0.000000    0.000000       -0.989258
6 -46714.397461  201.005371 -46814.413574  22426.437256    0.016113           0.000000  100.000000      100.000000
7 -46012.892090  801.505371 -46814.413574  22426.437256  501.521484           0.016113  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:27:31]  --------------------------------------------------------------------------------
[07/14 14:27:31]  Iteration: 268 (2 solution, 265 counterexamples)
[07/14 14:27:37]  Generator returned sat in 2.978391 secs.
[07/14 14:27:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:27:37]  Improved gap from 0 to 100
[07/14 14:27:37]  Improved number of small numbers from 61 to 90 out of a max of 90
[07/14 14:27:37]  Verifer returned sat in 0.217442 secs.
[07/14 14:27:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47314.414062    0.064697 -47414.429932  22426.437256        0.0                0.0  100.015869      100.015869
1 -47314.414062    0.031982 -47314.429932  22426.437256        0.0                0.0    0.015869        0.015869
2 -47014.429932  300.000000 -47214.429932  22426.437256        0.0                0.0  200.000000      200.000000
3 -47014.429932    5.000000 -47214.429932  22426.437256        0.0                0.0  200.000000      100.000000
4 -47014.429932  104.000000 -47083.429932  22426.437256        0.0                0.0   69.000000        0.000000
5 -46914.429932  169.000000 -46914.429932  22426.437256        0.0                0.0    0.000000        0.000000
6 -46678.429932  236.000000 -46814.429932  22426.437256       36.0                0.0  100.000000      100.000000
7 -45941.929932  836.500000 -46814.429688  22426.437256      572.5               36.0  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:27:37]  --------------------------------------------------------------------------------
[07/14 14:27:37]  Iteration: 269 (2 solution, 266 counterexamples)
[07/14 14:27:45]  Generator returned sat in 4.278410 secs.
[07/14 14:27:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:27:45]  Improved gap from 265/16384 to 100
[07/14 14:27:45]  Improved number of small numbers from 30 to 90 out of a max of 90
[07/14 14:27:45]  Verifer returned sat in 0.279982 secs.
[07/14 14:27:45]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47691.398193     0.064453 -47791.398193  22803.405518     0.000000           0.000000  100.000000      100.000000
1 -47691.398193     0.032471 -47791.398193  22803.405518     0.000000           0.000000  100.000000        0.000000
2 -47391.398193   400.000000 -47591.398438  22803.405518     0.000000           0.000000  200.000244      200.000000
3 -47391.365967   200.032471 -47591.398193  22803.405518     0.032227           0.000000  200.000000      100.000000
4 -47090.833496   500.532471 -47491.398193  22803.405518   200.564453           0.032227  200.000244      100.000244
5 -46339.801270   951.032471 -47309.398438  22803.405518   851.596924         200.564453  118.000244      100.000000
6 -45083.269043  1374.532471 -47253.398193  22803.405518  1908.129395         851.596924  261.999756      199.999756
7 -43463.236328  1882.032471 -47191.398193  22803.405518  3528.161865        1908.129395  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:27:46]  --------------------------------------------------------------------------------
[07/14 14:27:46]  Iteration: 270 (2 solution, 267 counterexamples)
[07/14 14:28:15]  Generator returned sat in 26.031238 secs.
[07/14 14:28:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:28:15]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/14 14:28:15]  Verifer returned sat in 0.202210 secs.
[07/14 14:28:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47442.974609    0.064209 -47443.006836  22454.997803    0.000000           0.000000    0.032227        0.015869
1 -47442.974609    0.016113 -47442.990479  22454.997803    0.000000           0.000000    0.015869      -99.984131
2 -47242.974365  200.016113 -47242.990723  22454.997803    0.000000           0.000000    0.016357        0.016113
3 -47042.974609  200.016113 -47242.990479  22454.997803    0.015869           0.000000  200.000000      100.000000
4 -47042.974609    2.000000 -47043.006592  22454.997803    0.015869           0.015869    0.016113        0.000000
5 -46638.006836  404.983887 -47042.990479  22454.997803  204.983643           0.015869  200.000000      100.000000
6 -46638.006836    2.000000 -46942.990479  22454.997803  204.983643         204.983643  100.000000        0.000000
7 -46433.006836  305.000000 -46842.990479  22454.997803  209.983643         204.983643  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:28:16]  --------------------------------------------------------------------------------
[07/14 14:28:16]  Iteration: 271 (2 solution, 268 counterexamples)
[07/14 14:28:23]  Generator returned sat in 3.820175 secs.
[07/14 14:28:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:28:23]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/14 14:28:23]  Verifer returned sat in 0.150721 secs.
[07/14 14:28:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47442.974854    0.063965 -47443.006836  22454.997559    0.000000           0.000000    0.031982        0.015625
1 -47442.974854    0.015869 -47442.990479  22454.997559    0.000000           0.000000    0.015625      -99.984375
2 -47242.974365  200.016113 -47242.990479  22454.997559    0.000000           0.000000    0.016113        0.016113
3 -47041.998779  200.991699 -47242.990479  22454.997559    0.983398           0.000000  200.008301      100.008301
4 -47041.998779    2.000000 -47042.990479  22454.997559    0.983398           0.983398    0.008301        0.008301
5 -46638.007080  404.000000 -47042.990479  22454.997559  204.983398           0.983398  200.000000      100.000000
6 -46638.007080    2.000000 -46941.990479  22454.997559  204.983398         204.983398   99.000000        0.000000
7 -46432.007080  305.000000 -46842.990479  22454.997559  210.983398         204.983398  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:28:23]  --------------------------------------------------------------------------------
[07/14 14:28:23]  Iteration: 272 (2 solution, 269 counterexamples)
[07/14 14:28:31]  Generator returned sat in 4.264980 secs.
[07/14 14:28:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:28:31]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:28:31]  Verifer returned sat in 0.112513 secs.
[07/14 14:28:31]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47442.974854    0.063965 -47443.006836  22454.997559    0.000000           0.000000    0.031982        0.015625
1 -47442.974854    0.015869 -47442.990479  22454.997559    0.000000           0.000000    0.015625      -99.984375
2 -47242.974365  200.016113 -47242.990479  22454.997559    0.000000           0.000000    0.016113        0.016113
3 -47041.499268  201.491211 -47242.990479  22454.997559    1.483398           0.000000  200.007812      100.007812
4 -47041.499268    2.000000 -47042.990479  22454.997559    1.483398           1.483398    0.007812        0.007812
5 -46638.007080  403.500000 -47042.990479  22454.997559  204.983398           1.483398  200.000000      100.000000
6 -46638.007080    2.000000 -46941.990479  22454.997559  204.983398         204.983398   99.000000        0.000000
7 -46432.507080  304.500000 -46842.990479  22454.997559  210.483398         204.983398  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:28:31]  --------------------------------------------------------------------------------
[07/14 14:28:31]  Iteration: 273 (2 solution, 270 counterexamples)
[07/14 14:28:38]  Generator returned sat in 3.471313 secs.
[07/14 14:28:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:28:39]  Improved number of small numbers from 54 to 66 out of a max of 89
[07/14 14:28:39]  Verifer returned sat in 0.586904 secs.
[07/14 14:28:39]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47276.354980    0.063965 -47476.386963  22454.997559    0.000000           0.000000  200.031982      100.032166
1 -47276.354980    0.031982 -47276.387146  22454.997559    0.000000           0.000000    0.032166        0.032166
2 -47176.355164  100.031982 -47176.387146  22454.997559    0.000000           0.000000    0.031982        0.031982
3 -46976.355164  200.031982 -47078.435120  22454.997559    0.031982           0.000000  102.047974      100.000000
4 -46976.355164  102.015991 -47033.975098  22454.997559    0.031982           0.031982   57.587952        0.000000
5 -46638.007080  395.936035 -46976.386963  22454.997559  138.380066           0.031982  199.999817      100.000000
6 -46638.007080  199.968018 -46876.387146  22454.997559  138.380066         138.380066  100.000000        0.000000
7 -46235.507080  502.500000 -46776.386963  22454.997559  240.880127         138.380066  299.999756      199.999939
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:28:39]  --------------------------------------------------------------------------------
[07/14 14:28:39]  Iteration: 274 (2 solution, 271 counterexamples)
[07/14 14:28:53]  Generator returned sat in 11.193828 secs.
[07/14 14:28:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:28:54]  Improved number of small numbers from 47 to 89 out of a max of 89
[07/14 14:28:54]  Verifer returned sat in 0.269675 secs.
[07/14 14:28:54]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47408.773193    0.063965 -47608.773193  22687.383545    0.000000           0.000000  200.000000      200.000000
1 -47408.773193    0.031982 -47508.773193  22687.383545    0.000000           0.000000  100.000000      100.000000
2 -47208.773193  300.000000 -47508.772949  22687.383545    0.000000           0.000000  299.999756      200.000000
3 -47208.741211  300.031738 -47408.773193  22687.383545    0.031982           0.000000  200.000000      100.000000
4 -47208.741211  102.000000 -47208.805176  22687.383545    0.031982           0.031982    0.031982        0.000000
5 -46755.305176  453.468018 -47110.084961  22687.383545  253.467773           0.031982  101.312012      100.000244
6 -46655.273193  201.343994 -47076.751709  22687.383545  253.500000         253.467773  167.978516      100.000000
7 -46655.240967  168.010742 -47008.772949  22687.383545  253.500000         253.500000  100.031982        0.032227
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:28:54]  --------------------------------------------------------------------------------
[07/14 14:28:54]  Iteration: 275 (2 solution, 272 counterexamples)
[07/14 14:29:04]  Generator returned sat in 6.779928 secs.
[07/14 14:29:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:29:05]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:29:05]  Verifer returned sat in 0.106421 secs.
[07/14 14:29:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47408.773193    0.063965 -47608.773193  22687.383545    0.000000           0.000000  200.000000      200.000000
1 -47408.773193    0.031982 -47508.773193  22687.383545    0.000000           0.000000  100.000000      100.000000
2 -47208.773193  300.000000 -47508.773193  22687.383545    0.000000           0.000000  300.000000      200.000000
3 -47208.741211  300.031982 -47408.773193  22687.383545    0.031982           0.000000  200.000000      100.000000
4 -47208.741211  102.000000 -47208.805176  22687.383545    0.031982           0.031982    0.031982        0.000000
5 -46755.805176  452.968018 -47109.751709  22687.383545  252.967773           0.031982  100.978760      100.000244
6 -46655.273193  201.510742 -47076.751709  22687.383545  253.500000         252.967773  167.978516      100.000000
7 -46655.240967  168.010742 -47008.772949  22687.383545  253.500000         253.500000  100.031982        0.032227
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:29:05]  --------------------------------------------------------------------------------
[07/14 14:29:05]  Iteration: 276 (2 solution, 273 counterexamples)
[07/14 14:29:36]  Generator returned sat in 27.690670 secs.
[07/14 14:29:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:29:36]  Verifer returned unsat in 0.033244 secs.
[07/14 14:29:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:29:36]  --------------------------------------------------------------------------------
[07/14 14:29:36]  Iteration: 277 (3 solution, 273 counterexamples)
[07/14 14:29:43]  Generator returned sat in 3.659859 secs.
[07/14 14:29:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:29:44]  Improved number of small numbers from 32 to 48 out of a max of 89
[07/14 14:29:44]  Verifer returned sat in 0.626522 secs.
[07/14 14:29:44]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47531.273193    0.063477 -47831.272949  22809.883539    0.000000           0.000000  299.999756      199.999995
1 -47531.273193    0.031738 -47731.272949  22809.883539    0.000000           0.000000  199.999756       99.999995
2 -47331.273193  399.999756 -47531.273188  22809.883539    0.000000           0.000000  199.999995      199.999995
3 -47131.241205  400.031982 -47431.273188  22809.883539  200.031982           0.000000  100.000000      100.000000
4 -47031.225214  200.015991 -47331.297363  22809.883539  200.047974         200.031982  100.024175      100.000000
5 -47031.225214  100.007996 -47309.771189  22809.883539  200.047974         200.047974   78.498001        0.000000
6 -46958.711222  151.011993 -47158.775187  22809.883545  200.047974         200.047974    0.015991      -27.486002
7 -46731.209223  227.517990 -47131.273193  22809.883545  200.063721         200.047974  200.000250      100.000250
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:29:44]  --------------------------------------------------------------------------------
[07/14 14:29:44]  Iteration: 278 (3 solution, 274 counterexamples)
[07/14 14:30:02]  Generator returned sat in 14.282910 secs.
[07/14 14:30:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:30:02]  Improved number of small numbers from 45 to 89 out of a max of 89
[07/14 14:30:02]  Verifer returned sat in 0.195031 secs.
[07/14 14:30:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -47481.281250    0.063477 -47681.281250  22759.891357    0.000000           0.000000  200.000000      199.999756
1 -47481.281250    0.015625 -47581.281006  22759.891357    0.000000           0.000000   99.999756       99.999756
2 -47481.265381  100.015625 -47481.281006  22759.891357    0.000000           0.000000    0.015625        0.015625
3 -47281.265381  200.015625 -47431.273193  22759.891357    0.015625           0.000000  149.992188      100.000000
4 -47181.249512  250.008057 -47281.281006  22759.891357    0.031494           0.015625  100.000000      100.000000
5 -46981.249512  300.000000 -47190.281006  22759.891357  100.031494           0.031494  109.000000      100.000000
6 -46799.249512  291.000000 -47173.265381  22759.891357  100.047363         100.031494  273.968506      181.984131
7 -46799.249512  258.007812 -47081.281006  22759.891357  100.047363         100.047363  181.984131       81.984131
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:30:03]  --------------------------------------------------------------------------------
[07/14 14:30:03]  Iteration: 279 (3 solution, 275 counterexamples)
[07/14 14:30:30]  Generator returned sat in 23.925819 secs.
[07/14 14:30:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:30:31]  Improved number of small numbers from 37 to 45 out of a max of 89
[07/14 14:30:31]  Verifer returned sat in 0.867999 secs.
[07/14 14:30:31]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -48240.400391     0.063477 -48440.400269  23519.01062     0.000000           0.000000  199.999878      199.999878
1 -48240.400391     0.031738 -48349.400269  23519.01062     0.000000           0.000000  108.999878       99.999878
2 -48040.400269   309.000000 -48240.400269  23519.01062     0.000000           0.000000  200.000000      200.000000
3 -48040.368530   200.031738 -48240.400269  23519.01062     0.031738           0.000000  200.000000      100.000000
4 -47740.320923   500.047607 -48140.400269  23519.01062   200.079346           0.031738  200.000000      100.000000
5 -46981.249512   959.071411 -47971.400269  23519.01062   859.150757         200.079346  131.000000      100.000000
6 -45404.642395  1707.607117 -47940.400269  23519.01062  2335.757874         859.150757  200.000000      100.000000
7 -42743.231720  2861.410675 -47840.400146  23519.01062  4797.168701        2335.757874  299.999725      199.999847
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:30:31]  --------------------------------------------------------------------------------
[07/14 14:30:31]  Iteration: 280 (3 solution, 276 counterexamples)
[07/14 14:30:38]  Generator returned sat in 3.354370 secs.
[07/14 14:30:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:30:38]  Improved gap from 0 to 100
[07/14 14:30:39]  Improved number of small numbers from 38 to 44 out of a max of 90
[07/14 14:30:39]  Verifer returned sat in 0.832674 secs.
[07/14 14:30:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -49001.162109     0.063232 -49001.162272  24079.772624     0.000000           0.000000    0.000163        0.000163
1 -48901.162272   100.000000 -49001.162272  24079.772624     0.000000           0.000000  100.000000        0.000000
2 -48601.162272   400.000000 -48801.162272  24079.772624     0.000000           0.000000  200.000000      200.000000
3 -48601.130534   200.031738 -48801.162272  24079.772624     0.031738           0.000000  200.000000      100.000000
4 -48300.582926   500.547607 -48701.162272  24079.772624   200.579346           0.031738  200.000000      100.000000
5 -47449.261515  1051.321411 -48537.162272  24079.772624   951.900757         200.579346  136.000000      100.000000
6 -45743.779399  1841.482117 -48476.162272  24079.772624  2557.382874         951.900757  175.000000      100.000000
7 -42831.056224  3087.723175 -48301.162354  24079.772624  5270.106201        2557.382874  199.999929      199.999847
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:30:39]  --------------------------------------------------------------------------------
[07/14 14:30:39]  Iteration: 281 (3 solution, 277 counterexamples)
[07/14 14:30:47]  Generator returned sat in 4.281351 secs.
[07/14 14:30:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:30:47]  Improved gap from 259/16384 to 100
[07/14 14:30:48]  Improved number of small numbers from 24 to 34 out of a max of 90
[07/14 14:30:48]  Verifer returned sat in 1.067374 secs.
[07/14 14:30:48]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -51732.048096     0.062988 -51832.048029  26910.658381     0.000000           0.000000   99.999933       99.999933
1 -51732.048096     0.031738 -51832.048029  26910.658381     0.000000           0.000000   99.999933       -0.000067
2 -51432.048029   400.000000 -51632.048029  26910.658381     0.000000           0.000000  200.000000      200.000000
3 -51432.016413   200.031616 -51632.048029  26910.658381     0.031616           0.000000  200.000000      100.000000
4 -51130.968989   501.047424 -51432.048029  26910.658381   201.079041           0.031616  100.000000      100.000000
5 -50078.397852  1152.571136 -51408.048029  26910.658381  1153.650177         201.079041  176.000000      100.000000
6 -48300.541147  1953.856705 -51332.048029  26910.658381  2731.506882        1153.650177  300.000000      200.000000
7 -45368.756090  3231.785057 -51132.048096  26910.658381  5663.291748        2731.506882  100.000257      100.000191
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:30:48]  --------------------------------------------------------------------------------
[07/14 14:30:48]  Iteration: 282 (3 solution, 278 counterexamples)
[07/14 14:31:27]  Generator returned sat in 35.663682 secs.
[07/14 14:31:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:31:28]  Improved gap from 129/8192 to 100
[07/14 14:31:28]  Improved number of small numbers from 81 to 90 out of a max of 90
[07/14 14:31:28]  Verifer returned sat in 0.264332 secs.
[07/14 14:31:28]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56632.646729     0.062988 -56732.646729  26910.658447      0.000000           0.000000  100.000000      100.000000
1 -56632.646729    99.968262 -56732.646484  26910.658447      0.000000           0.000000   99.999756        0.000000
2 -56432.646729   299.999756 -56605.646729  26910.658447      0.000000           0.000000  173.000000      100.000000
3 -56332.615234   273.031494 -56432.646729  26910.658447      0.031494           0.000000  100.000000      100.000000
4 -55586.552246   846.062988 -56378.646484  26910.658447    646.094482           0.031494  145.999756      100.000000
5 -53686.426025  2046.125977 -56232.646729  26910.658447   2446.220459         646.094482  100.000244      100.000244
6 -49321.174316  4465.251953 -56232.646729  26910.658447   6711.472412        2446.220459  200.000000      100.000000
7 -40390.670410  9130.503906 -56132.646484  26910.658447  15441.976318        6711.472412  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:31:28]  --------------------------------------------------------------------------------
[07/14 14:31:28]  Iteration: 283 (3 solution, 279 counterexamples)
[07/14 14:31:34]  Generator returned sat in 3.198462 secs.
[07/14 14:31:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:31:35]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:31:35]  Verifer returned sat in 0.133897 secs.
[07/14 14:31:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56632.646729     0.062988 -56735.146729  26910.658447      0.000000           0.000000  102.500000      100.000000
1 -56632.646729    99.968262 -56732.646484  26910.658447      0.000000           0.000000   99.999756        0.000000
2 -56432.646729   299.999756 -56604.146729  26910.658447      0.000000           0.000000  171.500000      100.000000
3 -56332.615234   271.531494 -56432.646729  26910.658447      0.031494           0.000000  100.000000      100.000000
4 -55586.552246   846.062988 -56378.646484  26910.658447    646.094482           0.031494  145.999756      100.000000
5 -53685.926025  2046.625977 -56232.646729  26910.658447   2446.220459         646.094482  100.500244      100.500244
6 -49321.174316  4465.251953 -56232.646729  26910.658447   6711.472412        2446.220459  200.000000      100.000000
7 -40390.170410  9131.003906 -56132.646484  26910.658447  15442.476318        6711.472412  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:31:35]  --------------------------------------------------------------------------------
[07/14 14:31:35]  Iteration: 284 (3 solution, 280 counterexamples)
[07/14 14:31:54]  Generator returned sat in 15.320352 secs.
[07/14 14:31:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:31:54]  Improved gap from 129/8192 to 100
[07/14 14:31:55]  Improved number of small numbers from 40 to 48 out of a max of 90
[07/14 14:31:55]  Verifer returned sat in 0.934752 secs.
[07/14 14:31:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56050.662842    0.062744 -56150.662720  26910.658447    0.000000           0.000000   99.999878       99.999878
1 -56050.662842    0.031494 -56150.662720  26910.658447    0.000000           0.000000   99.999878       -0.000122
2 -55750.662720  400.000000 -55950.662720  26910.658447    0.000000           0.000000  200.000000      200.000000
3 -55750.631226  200.031494 -55918.631226  26910.658447    0.031494           0.000000  167.968506      100.000000
4 -55586.552490  332.047241 -55750.662720  26910.658447   64.110229           0.031494  100.000000      100.000000
5 -55120.528870  566.023621 -55750.662720  26910.658447  430.133850          64.110229  200.000000      100.000000
6 -54837.517059  483.011810 -55650.662720  26910.658447  613.145660         430.133850  200.000000      100.000000
7 -54528.042648  509.474411 -55550.662598  26910.658447  722.620117         613.145660  299.999832      199.999954
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:31:55]  --------------------------------------------------------------------------------
[07/14 14:31:55]  Iteration: 285 (3 solution, 281 counterexamples)
[07/14 14:32:05]  Generator returned sat in 5.894132 secs.
[07/14 14:32:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:32:05]  Improved gap from 0 to 100
[07/14 14:32:05]  Improved number of small numbers from 31 to 90 out of a max of 90
[07/14 14:32:05]  Verifer returned sat in 0.372049 secs.
[07/14 14:32:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56146.542480    0.062500 -56346.542236  26910.658447     0.000000           0.000000  199.999756      199.999756
1 -56146.542480    0.031494 -56246.542236  26910.658447     0.000000           0.000000   99.999756       99.999756
2 -55946.542480  299.999756 -56146.542236  26910.658447     0.000000           0.000000  199.999756      199.999756
3 -55946.510986  200.031250 -56146.542236  26910.658447     0.031250           0.000000  200.000000      100.000000
4 -55845.995361  300.515625 -56046.542236  26910.658447     0.031250           0.031250  200.515625      100.515625
5 -55293.737549  752.773438 -55874.542236  26910.658447   352.804932           0.031250  227.999756      199.999756
6 -54872.850586  648.886719 -55746.542236  26910.658447   773.691650         352.804932  100.000000      100.000000
7 -54247.907227  724.943359 -55746.542236  26910.658447  1298.635010         773.691650  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:32:05]  --------------------------------------------------------------------------------
[07/14 14:32:05]  Iteration: 286 (3 solution, 282 counterexamples)
[07/14 14:32:12]  Generator returned sat in 3.626335 secs.
[07/14 14:32:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:32:13]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:32:13]  Verifer returned sat in 0.132054 secs.
[07/14 14:32:13]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56146.542480    0.062500 -56346.542236  26910.658447    0.000000           0.000000  199.999756      199.999756
1 -56146.542480    0.031494 -56246.542236  26910.658447    0.000000           0.000000   99.999756       99.999756
2 -55946.542236  300.000000 -56146.542236  26910.658447    0.000000           0.000000  200.000000      200.000000
3 -55747.542236  399.000000 -56146.542236  26910.658447  199.000000           0.000000  200.000000      100.000000
4 -55547.542236  400.000000 -56046.542236  26910.658447  199.000000         199.000000  300.000000      200.000000
5 -55545.542236  302.000000 -55874.542236  26910.658447  199.031494         199.000000  129.968506      101.968506
6 -55252.010742  423.500000 -55746.542236  26910.658447  394.531494         199.031494  100.000000      100.000000
7 -54739.760742  612.250000 -55746.542236  26910.658447  806.781494         394.531494  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:32:13]  --------------------------------------------------------------------------------
[07/14 14:32:13]  Iteration: 287 (3 solution, 283 counterexamples)
[07/14 14:32:25]  Generator returned sat in 8.225619 secs.
[07/14 14:32:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:32:25]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:32:25]  Verifer returned sat in 0.123339 secs.
[07/14 14:32:25]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56146.542725     0.062256 -56346.542236  26910.658447     0.000000           0.000000  199.999512      199.999512
1 -56146.542725     0.031250 -56246.542236  26910.658447     0.000000           0.000000   99.999512       99.999512
2 -55946.542480   299.999756 -56146.542236  26910.658447     0.000000           0.000000  199.999756      199.999756
3 -55747.542236   399.000000 -56146.542236  26910.658447   198.999756           0.000000  200.000244      100.000244
4 -55547.542480   400.000000 -56046.542236  26910.658447   198.999756         198.999756  300.000000      200.000000
5 -54745.542480  1102.000000 -55874.542236  26910.658447   900.999756         198.999756  228.000000      200.000000
6 -54150.042480   823.500000 -55746.542236  26910.658447  1496.499756         900.999756  100.000000      100.000000
7 -53437.792480   812.250000 -55746.542236  26910.658447  2108.749756        1496.499756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:32:25]  --------------------------------------------------------------------------------
[07/14 14:32:25]  Iteration: 288 (3 solution, 284 counterexamples)
[07/14 14:32:58]  Generator returned sat in 29.069536 secs.
[07/14 14:32:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:32:58]  Improved number of small numbers from 55 to 89 out of a max of 89
[07/14 14:32:58]  Verifer returned sat in 0.177710 secs.
[07/14 14:32:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56346.526611    0.062256 -56346.557861  26910.658203    0.000000           0.000000    0.031250        0.015869
1 -56346.526611    0.015381 -56346.542480  26910.658203    0.000000           0.000000    0.015869      -99.984131
2 -55946.542480  400.000000 -56146.542480  26910.658203    0.000000           0.000000  200.000000      200.000000
3 -55827.557861  318.984619 -56080.542480  26910.658203  118.984619           0.000000  134.000000      100.000000
4 -55669.057861  292.500000 -55946.542480  26910.658203  118.984619         118.984619  158.500000      158.500000
5 -55625.557861  202.000000 -55846.542480  26910.658203  120.984619         118.984619  100.000000      100.000000
6 -55474.557861  251.000000 -55746.542480  26910.658203  171.984619         120.984619  100.000000      100.000000
7 -55282.057861  292.500000 -55746.542236  26910.658203  264.484375         171.984619  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:32:58]  --------------------------------------------------------------------------------
[07/14 14:32:58]  Iteration: 289 (3 solution, 285 counterexamples)
[07/14 14:33:05]  Generator returned sat in 3.549803 secs.
[07/14 14:33:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:33:06]  Improved number of small numbers from 79 to 79 out of a max of 89
[07/14 14:33:06]  Verifer returned sat in 0.349159 secs.
[07/14 14:33:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56346.526611    0.062256 -56346.542480  26910.658203    0.000000           0.000000    0.015869        0.015869
1 -56346.526611    0.015381 -56346.542480  26910.658203    0.000000           0.000000    0.015869      -99.984131
2 -55946.542480  400.000000 -56148.042480  26910.658203    0.000000           0.000000  201.500000      200.000000
3 -55827.557861  320.484619 -56081.034790  26910.658203  118.984619           0.000000  134.492310      100.000000
4 -55669.054016  292.996155 -55946.542480  26910.658203  118.984619         118.984619  158.503845      158.503845
5 -55626.057861  201.500000 -55846.542480  26910.658203  120.484619         118.984619  100.000000      100.000000
6 -55474.557861  251.500000 -55746.542480  26910.658203  171.984619         120.484619  100.000000      100.000000
7 -55281.561707  292.996155 -55746.542236  26910.658203  264.484375         171.984619  200.496155      100.496399
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:33:06]  --------------------------------------------------------------------------------
[07/14 14:33:06]  Iteration: 290 (3 solution, 286 counterexamples)
[07/14 14:33:23]  Generator returned sat in 13.194495 secs.
[07/14 14:33:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:33:23]  Improved gap from 1/400 to 100
[07/14 14:33:24]  Improved number of small numbers from 49 to 63 out of a max of 90
[07/14 14:33:24]  Verifer returned sat in 0.668473 secs.
[07/14 14:33:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56546.558594    0.061768 -56743.559980  26907.654453    0.00000            0.00000  197.001387      100.000137
1 -56546.558594    0.015381 -56646.558594  26907.654453    0.00000            0.00000  100.000000        0.000137
2 -56346.557373  300.001221 -56543.552480  26907.654453    0.00000            0.00000  196.995107      100.001357
3 -56346.557373    0.001250 -56346.558730  26907.654453    0.00000            0.00000    0.001357        0.001357
4 -56146.557480  200.001250 -56346.558594  26907.654453    0.00125            0.00000  199.999863      100.000000
5 -56146.557480    0.010000 -56146.559980  26907.654453    0.00125            0.00125    0.001250        0.000000
6 -55946.557480  200.001250 -56080.891647  26907.654453    0.00125            0.00125  134.332917      100.000000
7 -55846.556230  234.334167 -56046.558594  26907.654453    0.00250            0.00125  199.999863      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:33:24]  --------------------------------------------------------------------------------
[07/14 14:33:24]  Iteration: 291 (3 solution, 287 counterexamples)
[07/14 14:33:49]  Generator returned sat in 21.165653 secs.
[07/14 14:33:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:33:49]  Improved gap from 6561033/81920 to 100
[07/14 14:33:49]  Improved number of small numbers from 31 to 90 out of a max of 90
[07/14 14:33:49]  Verifer returned sat in 0.339797 secs.
[07/14 14:33:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56566.468018    0.061523 -56566.499023  26827.594482   0.000000            0.00000    0.031006        0.031006
1 -56566.468018    0.015625 -56566.498779  26827.594482   0.000000            0.00000    0.030762      -99.968994
2 -56466.498779  100.000000 -56466.498779  26827.594482   0.000000            0.00000    0.000000      -99.999756
3 -56277.543945  188.954834 -56277.559814  26827.594482   0.000000            0.00000    0.015869      -11.044922
4 -56038.612793  238.947021 -56166.499023  26827.594482  27.886230            0.00000  100.000000      100.000000
5 -56038.612793    0.500000 -56133.332275  26827.594482  27.886230           27.88623   66.833252        0.000000
6 -55938.612793  166.833252 -55966.499023  26827.594482  27.886230           27.88623    0.000000        0.000000
7 -55699.665771  238.947021 -55966.498779  26827.594482  27.901611           27.88623  238.931396      138.931641
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:33:49]  --------------------------------------------------------------------------------
[07/14 14:33:49]  Iteration: 292 (3 solution, 288 counterexamples)
[07/14 14:34:17]  Generator returned sat in 24.579957 secs.
[07/14 14:34:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:34:18]  Improved gap from 0 to 100
[07/14 14:34:18]  Improved number of small numbers from 50 to 84 out of a max of 90
[07/14 14:34:18]  Verifer returned sat in 0.556161 secs.
[07/14 14:34:18]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56447.827881     0.061523 -56647.827881  26908.92334     0.000000           0.000000  200.000000      200.000000
1 -56447.827881     0.030518 -56552.320332  26908.92334     0.000000           0.000000  104.492451      100.000000
2 -56447.827881     0.030762 -56447.827881  26908.92334     0.000000           0.000000    0.000000        0.000000
3 -56247.797119   200.030762 -56447.827881  26908.92334     0.030762           0.000000  200.000000      100.000000
4 -56146.781738   301.015381 -56325.828022  26908.92334     1.046143           0.030762  178.000142      100.000000
5 -55946.781880   378.000000 -56173.827881  26908.92334     1.046143           1.046143  225.999858      199.999858
6 -54868.781738  1304.000000 -56047.827881  26908.92334  1079.045898           1.046143  100.000244      100.000244
7 -53915.781982  1053.000000 -56047.827881  26908.92334  1932.045898        1079.045898  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:34:19]  --------------------------------------------------------------------------------
[07/14 14:34:19]  Iteration: 293 (3 solution, 289 counterexamples)
[07/14 14:34:52]  Generator returned sat in 30.164836 secs.
[07/14 14:34:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:34:53]  Improved gap from 63/2048 to 0
[07/14 14:34:53]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:34:53]  Verifer returned sat in 0.196220 secs.
[07/14 14:34:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56647.858643    0.061523 -56647.858643  26908.923340   0.000000           0.000000    0.000000       -0.030762
1 -56647.827881    0.030762 -56647.827881  26908.923340   0.000000           0.000000    0.000000     -100.000000
2 -56447.797119  200.030762 -56547.827881  26908.923340   0.000000           0.000000  100.030762        0.030762
3 -56447.797119   99.780762 -56447.827881  27008.892578   0.000000           0.000000    0.030762        0.000000
4 -56247.766357  200.061523 -56347.797119  27008.892578   0.030762           0.000000  100.000000      100.000000
5 -56247.766357    1.500000 -56251.266357  27008.892578   0.030762           0.030762    3.469238        0.000000
6 -56247.735596    3.500000 -56247.797119  27108.861816   0.030762           0.030762    0.030762        0.000000
7 -56240.266357    7.500000 -56247.766357  27108.861816   0.030762           0.030762    7.469238      -92.530762
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:34:53]  --------------------------------------------------------------------------------
[07/14 14:34:53]  Iteration: 294 (3 solution, 290 counterexamples)
[07/14 14:35:05]  Generator returned sat in 8.720039 secs.
[07/14 14:35:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:35:05]  Verifer returned unsat in 0.026453 secs.
[07/14 14:35:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:35:05]  --------------------------------------------------------------------------------
[07/14 14:35:05]  Iteration: 295 (4 solution, 290 counterexamples)
[07/14 14:35:15]  Generator returned sat in 5.813759 secs.
[07/14 14:35:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:35:15]  Improved gap from 1985/2048 to 0
[07/14 14:35:15]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 14:35:15]  Verifer returned sat in 0.298762 secs.
[07/14 14:35:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56646.817871    0.061279 -56646.817871  27008.892090   0.000000           0.000000    0.000000        0.000000
1 -56346.818115  299.999756 -56646.817871  27008.892090   0.000000           0.000000  299.999756      199.999756
2 -56246.818115  399.999756 -56546.817871  27008.892090   0.000000           0.000000  299.999756      199.999756
3 -56246.318115  300.499756 -56446.817871  27008.892090   0.000000           0.000000  200.499756      100.499756
4 -56145.818115  300.999756 -56246.817871  27008.892090   0.030518           0.000000  100.969238      100.969238
5 -56145.818115    1.500000 -56246.817871  27008.892090   0.030518           0.030518  100.969238        0.969238
6 -56145.818115    2.000000 -56146.817871  27107.922852   0.030518           0.030518    0.969238        0.000000
7 -56144.287354    2.500000 -56145.848633  27107.922852   0.030518           0.030518    1.530762      -98.469238
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:35:15]  --------------------------------------------------------------------------------
[07/14 14:35:15]  Iteration: 296 (4 solution, 291 counterexamples)
[07/14 14:35:41]  Generator returned sat in 22.585773 secs.
[07/14 14:35:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:35:42]  Improved gap from 16635/8192 to 100
[07/14 14:35:42]  Improved number of small numbers from 56 to 62 out of a max of 90
[07/14 14:35:42]  Verifer returned sat in 0.527467 secs.
[07/14 14:35:42]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56646.817871     0.061279 -56646.817871  27008.89209     0.000000            0.00000    0.000000        0.000000
1 -56546.787109   100.030762 -56546.817871  27008.89209     0.000000            0.00000    0.030762        0.030762
2 -56246.818115   299.999756 -56461.817871  27008.89209     0.000000            0.00000  214.999756      199.999756
3 -56246.787231   215.030640 -56421.333191  27008.89209     0.030640            0.00000  174.515320      100.000000
4 -56087.302551   334.000000 -56346.817871  27008.89209    59.515320            0.03064  200.000000      100.000000
5 -55919.302551   368.000000 -56246.817871  27008.89209   127.515320           59.51532  200.000000      100.000000
6 -55719.302551   400.000000 -56146.817871  27008.89209   127.515320          127.51532  300.000000      200.000000
7 -54807.529572  1211.772980 -55946.818115  27008.89209  1039.288086          127.51532  100.000458      100.000214
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:35:43]  --------------------------------------------------------------------------------
[07/14 14:35:43]  Iteration: 297 (4 solution, 292 counterexamples)
[07/14 14:35:51]  Generator returned sat in 5.139717 secs.
[07/14 14:35:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:35:52]  Improved gap from 251/16384 to 100
[07/14 14:35:52]  Improved number of small numbers from 32 to 38 out of a max of 90
[07/14 14:35:52]  Verifer returned sat in 0.853833 secs.
[07/14 14:35:52]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56777.290283    0.061279 -56777.290328  27008.89209     0.000000           0.000000    0.000045        0.000045
1 -56777.259689    0.030640 -56777.290328  27008.89209     0.000000           0.000000    0.030640      -99.969360
2 -56677.259689  100.030640 -56677.290328  27008.89209     0.000000           0.000000    0.030640      -99.969360
3 -56377.259689  300.030640 -56477.290328  27008.89209     0.030640           0.000000  100.000000      100.000000
4 -56026.244369  451.015320 -56452.813308  27008.89209   151.045959           0.030640  275.522980      200.000000
5 -55750.782668  550.984680 -56358.290328  27008.89209   426.507660         151.045959  181.000000      100.000000
6 -55336.290328  595.492340 -56177.290328  27008.89209   741.000000         426.507660  100.000000      100.000000
7 -54837.544158  598.746170 -56177.290283  27008.89209  1139.746094         741.000000  200.000031      100.000076
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:35:53]  --------------------------------------------------------------------------------
[07/14 14:35:53]  Iteration: 298 (4 solution, 293 counterexamples)
[07/14 14:36:14]  Generator returned sat in 17.938044 secs.
[07/14 14:36:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:36:15]  Improved number of small numbers from 30 to 89 out of a max of 89
[07/14 14:36:15]  Verifer returned sat in 0.310356 secs.
[07/14 14:36:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56777.259521    0.061035 -56777.267334  27008.891846     0.000000           0.000000    0.007812        0.007812
1 -56747.259521   30.007812 -56747.267334  27008.891846     0.000000           0.000000    0.007812      -69.992188
2 -56377.267334  370.000000 -56577.267334  27008.891846     0.000000           0.000000  200.000000      200.000000
3 -56377.259521  200.007812 -56477.267334  27008.891846     0.007568           0.000000  100.000244      100.000244
4 -55927.255859  550.003906 -56477.267334  27008.891846   350.011475           0.007568  200.000000      100.000000
5 -55447.253906  680.001953 -56377.267334  27008.891846   730.013428         350.011475  200.000000      100.000000
6 -55007.252930  640.000977 -56177.290283  27008.891846  1070.014160         730.013428  100.023193      100.000244
7 -54337.310059  769.966064 -56177.267334  27008.891846  1539.957520        1070.014160  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:36:15]  --------------------------------------------------------------------------------
[07/14 14:36:15]  Iteration: 299 (4 solution, 294 counterexamples)
[07/14 14:36:23]  Generator returned sat in 4.581458 secs.
[07/14 14:36:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:36:23]  Improved gap from 125/16384 to 100
[07/14 14:36:24]  Improved number of small numbers from 36 to 48 out of a max of 90
[07/14 14:36:24]  Verifer returned sat in 0.699160 secs.
[07/14 14:36:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56039.994629    0.060791 -56139.994789  27008.891846    0.000000           0.000000  100.000160      100.000160
1 -56039.994629   99.999756 -56139.994789  27008.891846    0.000000           0.000000  100.000160        0.000160
2 -56039.994629    0.015381 -56039.994789  27008.891846    0.000000           0.000000    0.000160      -99.999840
3 -55739.979530  300.015259 -55915.240974  27008.891846    0.015259           0.000000  175.246185      100.000000
4 -55539.964272  375.261444 -55839.994789  27008.891846    0.030518           0.015259  300.000000      200.000000
5 -55351.833549  488.130722 -55739.987160  27008.891846  188.161240           0.030518  199.992371      100.000000
6 -55007.252930  544.572990 -55539.994789  27008.891846  432.741859         188.161240  100.000000      100.000000
7 -54459.220249  648.032681 -55539.994629  27008.891846  780.774658         432.741859  299.999722      199.999882
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:36:24]  --------------------------------------------------------------------------------
[07/14 14:36:24]  Iteration: 300 (4 solution, 295 counterexamples)
[07/14 14:36:39]  Generator returned sat in 11.452412 secs.
[07/14 14:36:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:36:40]  Improved gap from 1/576 to 100
[07/14 14:36:40]  Improved number of small numbers from 49 to 61 out of a max of 90
[07/14 14:36:40]  Verifer returned sat in 0.659368 secs.
[07/14 14:36:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56389.958740    0.060547 -56389.960622  27258.856012   0.000000           0.000000    0.001882        0.000216
1 -56389.958740    0.000977 -56389.958740  27258.856012   0.000000           0.000000    0.000000      -99.999784
2 -56289.958008  100.000732 -56289.958956  27258.856012   0.000000           0.000000    0.000948      -99.999052
3 -56089.958122  200.000833 -56089.958956  27258.856012   0.000000           0.000000    0.000833        0.000833
4 -55839.957706  250.001250 -56089.958740  27258.856012  50.000417           0.000000  200.000618      100.000833
5 -55839.957706    0.010000 -55889.958956  27258.856012  50.000417          50.000417    0.000833        0.000833
6 -55639.953539  200.005000 -55789.961456  27258.856012  50.000417          50.000417  100.007500      100.005000
7 -55489.959789  250.001250 -55789.958740  27258.856012  99.999023          50.000417  199.999928      100.000143
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:36:40]  --------------------------------------------------------------------------------
[07/14 14:36:40]  Iteration: 301 (4 solution, 296 counterexamples)
[07/14 14:37:21]  Generator returned sat in 37.452922 secs.
[07/14 14:37:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:37:22]  Improved number of small numbers from 48 to 89 out of a max of 89
[07/14 14:37:22]  Verifer returned sat in 0.246315 secs.
[07/14 14:37:22]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57272.110352    0.060547 -57272.140869  28141.007568    0.000000           0.000000    0.030518        0.000000
1 -57272.110352    0.015137 -57272.110352  28141.007568    0.000000           0.000000    0.000000     -100.000000
2 -56872.110352  400.000000 -57172.110352  28141.007568    0.000000           0.000000  300.000000      200.000000
3 -56384.049805  788.060547 -57072.110352  28141.007568  388.060547           0.000000  300.000000      200.000000
4 -56288.019531  396.030273 -56872.110352  28141.007568  388.075684         388.060547  196.015137      196.015137
5 -56284.019531  200.015137 -56872.110352  28141.007568  388.090576         388.075684  200.000244      100.000244
6 -56284.019531  102.007568 -56772.110352  28141.007568  388.090576         388.090576  100.000244        0.000244
7 -55934.019775  450.000000 -56672.110352  28141.007568  438.090820         388.090576  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:37:22]  --------------------------------------------------------------------------------
[07/14 14:37:22]  Iteration: 302 (4 solution, 297 counterexamples)
[07/14 14:37:32]  Generator returned sat in 6.358998 secs.
[07/14 14:37:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:37:32]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:37:32]  Verifer returned sat in 0.124372 secs.
[07/14 14:37:32]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57056.284668    0.060547 -57145.345215  27925.181885    0.000000           0.000000   89.060547             0.0
1 -57056.284668    0.030273 -57056.284668  27925.181885    0.000000           0.000000    0.000000          -100.0
2 -56656.284668  400.000000 -56856.284668  27925.181885    0.000000           0.000000  200.000000           200.0
3 -56556.284668  300.000000 -56800.814941  27925.181885    0.000000           0.000000  244.530273           200.0
4 -56284.019531  516.795410 -56756.284668  27925.181885  172.265137           0.000000  300.000000           200.0
5 -56284.019531    2.000000 -56656.284668  27925.181885  172.265137         172.265137  200.000000           100.0
6 -56184.019531  300.000000 -56456.284668  27925.181885  172.265137         172.265137  100.000000           100.0
7 -55767.224121  516.795410 -56456.284668  27925.181885  389.060547         172.265137  300.000000           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:37:33]  --------------------------------------------------------------------------------
[07/14 14:37:33]  Iteration: 303 (4 solution, 298 counterexamples)
[07/14 14:37:42]  Generator returned sat in 5.363859 secs.
[07/14 14:37:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:37:42]  Improved number of small numbers from 75 to 85 out of a max of 89
[07/14 14:37:42]  Verifer returned sat in 0.300196 secs.
[07/14 14:37:42]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57056.254395    0.060303 -57056.284668  27925.181641    0.000000           0.000000    0.030273        0.030029
1 -57056.254395    0.015137 -57056.254639  27925.181885    0.000000           0.000000    0.000244      -99.969727
2 -56656.284668  399.969971 -56856.284668  27925.181885    0.000000           0.000000  200.000000      200.000000
3 -56589.103027  267.181641 -56800.814941  27925.181885    0.000000           0.000000  211.711914      167.181641
4 -56284.019531  516.795410 -56756.284668  27925.181885  172.265137           0.000000  300.000000      200.000000
5 -56284.019531    2.000000 -56656.284668  27925.181885  172.265137         172.265137  200.000000      100.000000
6 -56183.019531  301.000000 -56516.484668  27925.181885  172.265137         172.265137  161.200000      101.000000
7 -55767.224121  576.995410 -56456.284668  27925.181885  389.060547         172.265137  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:37:43]  --------------------------------------------------------------------------------
[07/14 14:37:43]  Iteration: 304 (4 solution, 299 counterexamples)
[07/14 14:37:53]  Generator returned sat in 6.641512 secs.
[07/14 14:37:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:37:53]  Improved number of small numbers from 47 to 89 out of a max of 89
[07/14 14:37:53]  Verifer returned sat in 0.198888 secs.
[07/14 14:37:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56856.284912    0.060059 -57156.284668  27925.181641    0.000000           0.000000  299.999756      199.999756
1 -56856.284912    0.014893 -56956.284668  27925.181641    0.000000           0.000000   99.999756       99.999756
2 -56856.284912    0.007568 -56856.292236  27925.181641    0.000000           0.000000    0.007324       -0.000244
3 -56656.277100  200.015137 -56756.284912  27925.181641    0.007568           0.000000  100.000244      100.000000
4 -56654.269775  102.007568 -56756.284668  27925.181641    0.007568           0.007568  102.007324        2.007324
5 -56252.261963  504.015137 -56656.284668  27925.181641  150.007568           0.007568  254.015137      154.015137
6 -56252.261963  254.007568 -56516.485107  27925.181641  150.007568         150.007568  114.215576       54.015137
7 -55498.762695  867.714844 -56456.284668  27925.181641  657.522217         150.007568  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:37:54]  --------------------------------------------------------------------------------
[07/14 14:37:54]  Iteration: 305 (4 solution, 300 counterexamples)
[07/14 14:38:04]  Generator returned sat in 6.639076 secs.
[07/14 14:38:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:38:04]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/14 14:38:04]  Verifer returned sat in 0.270758 secs.
[07/14 14:38:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56856.285156    0.059814 -57056.284668  27925.181396    0.000000           0.000000  199.999512      199.999512
1 -56856.285156    0.014893 -56956.284912  27925.181396    0.000000           0.000000   99.999756       99.999512
2 -56856.285156    0.007324 -56856.292236  27925.181641    0.000000           0.000000    0.007080       -0.000244
3 -56656.277344  200.014893 -56756.284912  27925.181641    0.007568           0.000000  100.000000      100.000000
4 -56604.277466  151.999878 -56756.284912  27925.181641    0.007568           0.007568  151.999878       51.999878
5 -56152.277588  603.999756 -56556.284912  27925.181641  204.007324           0.007568  200.000000      200.000000
6 -56152.277588  152.003662 -56516.485107  27925.181641  204.007324         204.007324  160.200195      100.000000
7 -55648.770752  663.707031 -56456.284668  27925.181641  607.513916         204.007324  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:38:05]  --------------------------------------------------------------------------------
[07/14 14:38:05]  Iteration: 306 (4 solution, 301 counterexamples)
[07/14 14:38:47]  Generator returned sat in 38.254821 secs.
[07/14 14:38:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:38:47]  Improved gap from 15/2048 to 100
[07/14 14:38:47]  Improved number of small numbers from 76 to 90 out of a max of 90
[07/14 14:38:47]  Verifer returned sat in 0.178812 secs.
[07/14 14:38:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56856.285156    0.059814 -57056.282471  27924.178955    0.000000           0.000000  199.997314      198.997314
1 -56856.285156    0.014893 -56956.284912  27924.178955    0.000000           0.000000   99.999756       98.997314
2 -56856.285156    0.007080 -56955.282471  27924.178955    0.000000           0.000000   98.997314       -1.002686
3 -56504.778564  450.503906 -56755.282471  27924.178955  150.503662           0.000000  100.000244      100.000244
4 -56452.778809  152.000000 -56755.282471  27924.178955  150.503662         150.503662  152.000000       52.000000
5 -56151.275146  453.503662 -56556.284912  27924.178955  204.007324         150.503662  201.002441      200.000000
6 -56151.275146  200.998779 -56516.485107  27924.178955  204.007324         204.007324  161.202637      100.000000
7 -55753.282959  559.194824 -56455.282471  27924.178955  501.999268         204.007324  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:38:47]  --------------------------------------------------------------------------------
[07/14 14:38:47]  Iteration: 307 (4 solution, 302 counterexamples)
[07/14 14:38:57]  Generator returned sat in 6.468116 secs.
[07/14 14:38:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:38:58]  Improved number of small numbers from 79 to 81 out of a max of 89
[07/14 14:38:58]  Verifer returned sat in 0.382733 secs.
[07/14 14:38:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56856.285400    0.059814 -57155.282471  27924.178711     0.000000           0.000000  298.997070      198.997070
1 -56856.285400    0.014893 -56955.282471  27924.178711     0.000000           0.000000   98.997070       98.997070
2 -56856.285400    0.007080 -56955.282471  27924.178711     0.000000           0.000000   98.997070       -1.002930
3 -56504.778564  450.503906 -56822.949137  27924.178711   150.503906           0.000000  167.666667      100.000000
4 -56504.778564  167.666667 -56755.282471  27924.178711   150.503906         150.503906  100.000000        0.000000
5 -55869.445231  735.333333 -56655.282471  27924.178711   485.837240         150.503906  300.000000      200.000000
6 -55869.445231  151.500000 -56516.485107  27924.178711   485.837240         485.837240  161.202637      100.000000
7 -55114.719808  915.928060 -56455.282471  27924.178711  1140.562500         485.837240  200.000163      100.000163
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:38:58]  --------------------------------------------------------------------------------
[07/14 14:38:58]  Iteration: 308 (4 solution, 303 counterexamples)
[07/14 14:39:07]  Generator returned sat in 5.390168 secs.
[07/14 14:39:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:39:08]  Improved gap from 0 to 100
[07/14 14:39:08]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/14 14:39:08]  Verifer returned sat in 0.229928 secs.
[07/14 14:39:08]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57460.680176    0.059570 -57460.710205  27924.178467    0.000000           0.000000    0.030029        0.030029
1 -57460.680176    0.015137 -57460.680420  27924.178467    0.000000           0.000000    0.000244      -99.969971
2 -57360.695557   99.984863 -57360.710205  27924.178467    0.000000           0.000000    0.014648      -99.985352
3 -57060.695312  300.014893 -57260.710205  27924.178467    0.014893           0.000000  200.000000      100.000000
4 -57060.695312  101.500000 -57060.710205  27924.178467    0.014893           0.014893    0.000000        0.000000
5 -56257.739990  802.955322 -56960.710205  27924.178467  602.969971           0.014893  100.000244      100.000244
6 -56156.240234  201.500000 -56960.710205  27924.178467  604.469971         602.969971  200.000000      100.000000
7 -56156.240234  151.500000 -56860.710205  27924.178467  604.469971         604.469971  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:39:08]  --------------------------------------------------------------------------------
[07/14 14:39:08]  Iteration: 309 (4 solution, 304 counterexamples)
[07/14 14:39:26]  Generator returned sat in 14.358880 secs.
[07/14 14:39:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:39:26]  Improved gap from 4035/4096 to 0
[07/14 14:39:27]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:39:27]  Verifer returned sat in 0.162817 secs.
[07/14 14:39:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57260.695312    0.059570 -57260.725098  27724.178467   0.000000           0.000000    0.029785        0.014893
1 -57260.695312    0.014893 -57260.710205  27724.178467   0.000000           0.000000    0.014893      -99.985107
2 -57094.023682  166.686523 -57094.038574  27724.178467   0.000000           0.000000    0.014893      -33.313477
3 -56960.695312  133.343262 -56960.710205  27724.178467   0.000000           0.000000    0.014893        0.014893
4 -56760.695312  200.014893 -56860.710205  27724.178467   0.014893           0.000000  100.000000      100.000000
5 -56760.695312    1.500000 -56761.975098  27724.178467   0.014893           0.014893    1.264893        0.000000
6 -56759.710205    2.250000 -56760.710205  27823.193359   0.014893           0.014893    0.985107        0.000000
7 -56757.320312    3.375000 -56759.725098  27823.193359   0.014893           0.014893    2.389893      -97.610107
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:39:27]  --------------------------------------------------------------------------------
[07/14 14:39:27]  Iteration: 310 (4 solution, 305 counterexamples)
[07/14 14:39:39]  Generator returned sat in 8.475748 secs.
[07/14 14:39:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:39:39]  Improved gap from 243/8192 to 100
[07/14 14:39:40]  Improved number of small numbers from 31 to 74 out of a max of 90
[07/14 14:39:40]  Verifer returned sat in 0.826820 secs.
[07/14 14:39:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57188.951660    0.059082 -57288.981445  27724.178467    0.000000           0.000000  100.029785      100.029785
1 -57188.951660    0.029541 -57188.981445  27724.178467    0.000000           0.000000    0.029785        0.029785
2 -57188.951660    0.029541 -57188.981445  27724.178467    0.000000           0.000000    0.029785      -99.970215
3 -56862.707520  326.273926 -57088.981420  27724.178467   26.273926           0.000000  199.999975      100.000000
4 -56862.707520  164.636963 -56889.010986  27724.178467   26.273926          26.273926    0.029541        0.000000
5 -56465.796387  396.940674 -56888.981201  27724.178467  223.185018          26.273926  199.999797      100.000041
6 -56465.796387  199.970337 -56788.981420  27724.178467  223.185018         223.185018  100.000015        0.000041
7 -56115.840897  449.955505 -56688.981445  27724.178467  273.140625         223.185018  299.999924      199.999924
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:39:40]  --------------------------------------------------------------------------------
[07/14 14:39:40]  Iteration: 311 (4 solution, 306 counterexamples)
[07/14 14:40:19]  Generator returned sat in 34.933937 secs.
[07/14 14:40:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:40:19]  Improved gap from 0 to 100
[07/14 14:40:20]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/14 14:40:20]  Verifer returned sat in 0.254843 secs.
[07/14 14:40:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56916.818359    0.058838 -57116.818359  27552.015381    0.000000           0.000000  200.000000      200.000000
1 -56916.818359    0.014648 -57016.818359  27552.015381    0.000000           0.000000  100.000000      100.000000
2 -56916.818359    0.014893 -56932.433350  27552.015381    0.000000           0.000000   15.614990        0.000000
3 -56916.818359    0.014648 -56916.818359  27552.015381    0.000000           0.000000    0.000000     -100.000000
4 -56616.803711  300.014648 -56750.151855  27552.015381    0.014648           0.000000  133.333496      100.000000
5 -56465.796631  284.340576 -56716.818359  27552.015381    0.029541           0.014648  250.992188      150.992188
6 -56465.796631  250.977783 -56559.818359  27552.015381    0.029541           0.029541   93.992188       50.992188
7 -55773.311035  786.477783 -56516.818359  27552.015381  443.507568           0.029541  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:40:20]  --------------------------------------------------------------------------------
[07/14 14:40:20]  Iteration: 312 (4 solution, 307 counterexamples)
[07/14 14:40:39]  Generator returned sat in 15.351114 secs.
[07/14 14:40:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:40:39]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:40:39]  Verifer returned sat in 0.176040 secs.
[07/14 14:40:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56916.818359     0.058838 -57116.818359  27552.015381    0.000000           0.000000  200.000000      200.000000
1 -56916.818359     0.014648 -57016.818359  27552.015381    0.000000           0.000000  100.000000      100.000000
2 -56916.818359     0.003662 -56916.825684  27552.015381    0.000000           0.000000    0.007324        0.000000
3 -56916.818359     0.003662 -56916.818359  27552.015381    0.000000           0.000000    0.000000     -100.000000
4 -56516.811035   400.007324 -56750.151855  27552.015381  100.007324           0.000000  133.333496      100.000000
5 -56315.807617   334.336914 -56716.818359  27552.015381  132.834961         100.007324  268.175781      168.175781
6 -56315.807617   268.172119 -56616.818359  27552.015381  132.834961         132.834961  168.175781       68.175781
7 -55347.639160  1136.344238 -56516.818359  27552.015381  869.179199         132.834961  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:40:40]  --------------------------------------------------------------------------------
[07/14 14:40:40]  Iteration: 313 (4 solution, 308 counterexamples)
[07/14 14:40:58]  Generator returned sat in 14.711708 secs.
[07/14 14:40:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:40:59]  Improved number of small numbers from 41 to 51 out of a max of 89
[07/14 14:40:59]  Verifer returned sat in 0.574793 secs.
[07/14 14:40:59]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56900.534180    0.058594 -57198.537615  27552.015381    0.000000           0.000000  298.003435      199.999773
1 -56900.534180    0.014648 -57094.539446  27552.015381    0.000000           0.000000  194.005266       99.999773
2 -56900.534180    0.003418 -57000.533953  27552.015381    0.000000           0.000000   99.999773       -0.000227
3 -56800.533953  200.000000 -56800.533953  27552.015381    0.000000           0.000000    0.000000        0.000000
4 -56600.532122  200.001831 -56700.533953  27552.015381    0.001831           0.000000  100.000000      100.000000
5 -56402.528460  298.003662 -56700.533953  27552.015381   38.864205           0.001831  259.141288      159.141288
6 -56361.667916  300.001831 -56500.533953  27552.015381   38.866037          38.864205  100.000000      100.000000
7 -56160.667001  301.000916 -56500.533936  27552.015381  139.866943          38.866037  199.999991      100.000009
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/14 14:40:59]  --------------------------------------------------------------------------------
[07/14 14:40:59]  Iteration: 314 (4 solution, 309 counterexamples)
[07/14 14:41:32]  Generator returned sat in 28.903464 secs.
[07/14 14:41:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:41:32]  Improved gap from 0 to 100
[07/14 14:41:33]  Improved number of small numbers from 49 to 82 out of a max of 90
[07/14 14:41:33]  Verifer returned sat in 0.692471 secs.
[07/14 14:41:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56612.834229    0.058594 -56712.863281  27752.083496    0.000000           0.000000  100.029053      100.029053
1 -56612.834229    0.029297 -56612.863281  27752.083496    0.000000           0.000000    0.029053        0.029053
2 -56312.863525  299.999756 -56512.863289  27752.083496    0.000000           0.000000  199.999764      199.999756
3 -55913.068367  599.794922 -56512.775391  27752.083496  399.794678           0.000000  199.912346      100.000236
4 -55713.039307  399.941406 -56412.863281  27752.083496  399.824219         399.794678  299.999756      199.999756
5 -55713.039307  299.970703 -56246.216154  27752.083496  399.824219         399.824219  133.352628       99.999756
6 -55446.421232  399.970703 -56112.863281  27752.083496  566.441895         399.824219  100.000155      100.000155
7 -55146.479980  399.941406 -56112.863281  27752.083496  766.383301         566.441895  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:41:33]  --------------------------------------------------------------------------------
[07/14 14:41:33]  Iteration: 315 (4 solution, 310 counterexamples)
[07/14 14:41:46]  Generator returned sat in 9.648492 secs.
[07/14 14:41:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:41:47]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/14 14:41:47]  Verifer returned sat in 0.225525 secs.
[07/14 14:41:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56804.911377    0.058350 -57004.911377  28044.131348   0.000000           0.000000  200.000000      200.000000
1 -56704.911377  300.000000 -56904.911377  28044.131348   0.000000           0.000000  200.000000      200.000000
2 -56704.911377  200.000000 -56825.911133  28044.131348   0.000000           0.000000  120.999756      100.000000
3 -56583.852783  242.058350 -56804.911133  28044.131348   0.014648           0.000000  221.043701      121.043945
4 -56583.852783  221.029297 -56604.911377  28044.131348   0.014648           0.014648   21.043945       21.043945
5 -56304.896729  300.000000 -56604.911133  28044.131348   0.029297           0.014648  299.985107      199.985352
6 -56304.896729  260.500000 -56504.903809  28044.131348   0.029297           0.029297  199.977783       99.985352
7 -56204.867188  300.007324 -56404.911133  28044.131348   0.043701           0.029297  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:41:47]  --------------------------------------------------------------------------------
[07/14 14:41:47]  Iteration: 316 (4 solution, 311 counterexamples)
[07/14 14:41:55]  Generator returned sat in 4.532883 secs.
[07/14 14:41:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:41:56]  Improved number of small numbers from 38 to 89 out of a max of 89
[07/14 14:41:56]  Verifer returned sat in 0.248776 secs.
[07/14 14:41:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56856.926025    0.058105 -57056.940430  28044.131348    0.000000           0.000000  200.014404      199.999756
1 -56756.925781  300.014648 -56956.925781  28044.131348    0.000000           0.000000  200.000000      200.000000
2 -56656.926025  299.999756 -56956.925781  28044.131348    0.000000           0.000000  299.999756      199.999756
3 -56656.926025    0.014648 -56856.925781  28044.131348    0.000000           0.000000  199.999756       99.999756
4 -56656.889160  200.036621 -56730.926025  28044.131348    0.000000           0.000000   74.036865        0.036621
5 -56204.871338  526.054688 -56656.925781  28044.131348  152.054688           0.000000  299.999756      199.999756
6 -56091.843750  413.027344 -56456.925781  28044.131348  165.082031         152.054688  200.000000      200.000000
7 -55885.330078  406.513672 -56456.925781  28044.131348  371.595703         165.082031  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:41:56]  --------------------------------------------------------------------------------
[07/14 14:41:56]  Iteration: 317 (4 solution, 312 counterexamples)
[07/14 14:42:12]  Generator returned sat in 11.587334 secs.
[07/14 14:42:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:42:12]  Improved gap from 1/2000 to 100
[07/14 14:42:12]  Improved number of small numbers from 55 to 90 out of a max of 90
[07/14 14:42:12]  Verifer returned sat in 0.287986 secs.
[07/14 14:42:12]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56557.065918     0.058105 -56557.065918  28044.131348    0.000000                0.0    0.000000       -0.086914
1 -56556.979004     0.086914 -56556.979004  28044.131348    0.000000                0.0    0.000000     -100.000000
2 -56356.949951   200.029053 -56456.978760  28044.131348    0.000000                0.0  100.028809        0.029053
3 -56356.949951    99.956543 -56356.979004  28044.131348    0.000000                0.0    0.029053      -99.970947
4 -55956.979004   400.000000 -56256.979004  28044.131348    0.000000                0.0  300.000000      200.000000
5 -55156.979004  1100.000000 -56156.978760  28044.131348  700.000000                0.0  299.999756      200.000000
6 -55156.979004   150.000000 -56056.979004  28044.131348  700.000000              700.0  200.000000      100.000000
7 -54756.979004   600.000000 -55956.978760  28044.131348  999.999756              700.0  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:42:13]  --------------------------------------------------------------------------------
[07/14 14:42:13]  Iteration: 318 (4 solution, 313 counterexamples)
[07/14 14:42:41]  Generator returned sat in 24.834530 secs.
[07/14 14:42:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:42:42]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:42:42]  Verifer returned sat in 0.150151 secs.
[07/14 14:42:42]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56656.978760     0.058105 -56656.978760  28044.131348     0.000000           0.000000    0.000000          -100.0
1 -56456.978760   200.000000 -56456.978760  28044.131348     0.000000           0.000000    0.000000             0.0
2 -56156.978760   300.000000 -56456.978760  28044.131348     0.000000           0.000000  300.000000           200.0
3 -56156.978760   299.970947 -56320.854736  28044.131348     0.000000           0.000000  163.875977           100.0
4 -55216.226807  1104.627930 -56156.978760  28044.131348   840.751953           0.000000  100.000000           100.0
5 -54761.912842   554.313965 -56156.978760  28044.131348  1095.065918         840.751953  300.000000           200.0
6 -54761.912842   279.156982 -55956.978760  28044.131348  1095.065918        1095.065918  100.000000           100.0
7 -53757.284912  1104.627930 -55956.978760  28044.131348  1999.693848        1095.065918  200.000000           100.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:42:42]  --------------------------------------------------------------------------------
[07/14 14:42:42]  Iteration: 319 (4 solution, 314 counterexamples)
[07/14 14:43:09]  Generator returned sat in 23.415068 secs.
[07/14 14:43:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:43:10]  Improved number of small numbers from 60 to 62 out of a max of 89
[07/14 14:43:10]  Verifer returned sat in 0.408829 secs.
[07/14 14:43:10]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56656.978760    0.058105 -56656.978760  28044.131104     0.000000           0.000000    0.000000     -100.000000
1 -56456.978760  200.000000 -56456.978760  28044.131104     0.000000           0.000000    0.000000        0.000000
2 -56156.979004  299.999756 -56456.978760  28044.131104     0.000000           0.000000  299.999756      199.999756
3 -56156.979004  299.985474 -56320.854736  28044.131104     0.000000           0.000000  163.875732       99.999756
4 -55498.113953  822.740784 -56156.978760  28044.131104   558.864807           0.000000  100.000000      100.000000
5 -55184.743561  413.370392 -56156.978760  28044.131104   763.535477         558.864807  208.699722      108.699722
6 -55184.743561  208.685196 -55956.978760  28044.131104   763.535477         763.535477    8.699722        8.699722
7 -54360.848732  832.594551 -55956.978760  28044.131104  1396.129883         763.535477  200.000145      100.000145
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:43:10]  --------------------------------------------------------------------------------
[07/14 14:43:10]  Iteration: 320 (4 solution, 315 counterexamples)
[07/14 14:43:20]  Generator returned sat in 5.770271 secs.
[07/14 14:43:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:43:20]  Improved number of small numbers from 65 to 69 out of a max of 89
[07/14 14:43:20]  Verifer returned sat in 0.309891 secs.
[07/14 14:43:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t  service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56356.978760    0.057861 -56556.97876  28044.131104    0.000000           0.000000  200.000000      100.000000
1 -56356.978760  199.985352 -56456.97876  28044.131104    0.000000           0.000000  100.000000        0.000000
2 -56056.979004  399.999756 -56356.97876  28044.131104    0.000000           0.000000  299.999756      199.999756
3 -55960.949707  396.029053 -56156.97876  28044.131104   96.029053           0.000000  100.000000      100.000000
4 -55860.935181  200.014526 -56156.97876  28044.131104   96.043579          96.029053  200.000000      100.000000
5 -55860.935181  102.007263 -56056.97876  28044.131104   96.043579          96.043579  100.000000        0.000000
6 -55156.420654  804.514526 -55856.97876  28044.131104  600.558105          96.043579  100.000000      100.000000
7 -54852.163391  404.257263 -55856.97876  28044.131104  804.815186         600.558105  200.000183      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:43:20]  --------------------------------------------------------------------------------
[07/14 14:43:20]  Iteration: 321 (4 solution, 316 counterexamples)
[07/14 14:43:30]  Generator returned sat in 5.362731 secs.
[07/14 14:43:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:43:30]  Improved gap from 213111/16384 to 100
[07/14 14:43:31]  Improved number of small numbers from 31 to 50 out of a max of 90
[07/14 14:43:31]  Verifer returned sat in 0.718935 secs.
[07/14 14:43:31]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56177.851074    0.057617 -56377.851074  28044.131104    0.000000           0.000000  200.000000      100.000206
1 -56177.851074  199.985596 -56277.851280  28044.131104    0.000000           0.000000  100.000206        0.000206
2 -56090.851280  187.000000 -56177.851280  28044.131104    0.000000           0.000000   87.000000      -13.000000
3 -55877.847649  300.003632 -56029.856689  28044.131104    0.003632           0.000000  152.005409      100.000000
4 -55877.847649  152.001816 -55977.851280  28044.131104    0.003632           0.003632  100.000000        0.000000
5 -55149.344925  828.502724 -55777.851280  28044.131104  528.506355           0.003632  100.000000      100.000000
6 -54833.093563  416.251362 -55777.851074  28044.131104  734.628174         528.506355  210.129337      110.129543
7 -54833.093563  210.125681 -55677.851074  28044.131104  734.628174         734.628174  110.129337       10.129543
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:43:31]  --------------------------------------------------------------------------------
[07/14 14:43:31]  Iteration: 322 (4 solution, 317 counterexamples)
[07/14 14:44:10]  Generator returned sat in 35.320294 secs.
[07/14 14:44:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:44:10]  Improved gap from 59/4096 to 100
[07/14 14:44:11]  Improved number of small numbers from 45 to 90 out of a max of 90
[07/14 14:44:11]  Verifer returned sat in 0.239930 secs.
[07/14 14:44:11]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56270.796875    0.057373 -56271.739258  28038.018799   0.000000           0.000000    0.942383        0.942139
1 -56270.796875    0.014160 -56270.811035  28038.018799   0.000000           0.000000    0.014160      -99.057861
2 -55871.739258  399.071777 -56071.739014  28038.018799   0.000000           0.000000  199.999756      199.999756
3 -55871.739258    0.014160 -56005.415527  28038.018799   0.000000           0.000000  133.676270       99.999756
4 -55871.739258  133.661865 -55871.753418  28038.018799   0.000000           0.000000    0.014160       -0.000244
5 -55671.724609  200.028809 -55777.851318  28038.018799   0.014404           0.000000  106.112305      100.000000
6 -55529.878662  247.958252 -55771.739014  28038.018799   0.028564           0.014404  241.831787      141.831787
7 -55529.878662  241.817383 -55671.739014  28038.018799   0.028564           0.028564  141.831787       41.831787
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:44:11]  --------------------------------------------------------------------------------
[07/14 14:44:11]  Iteration: 323 (4 solution, 318 counterexamples)
[07/14 14:44:26]  Generator returned sat in 10.951675 secs.
[07/14 14:44:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:44:26]  Verifer returned unsat in 0.049100 secs.
[07/14 14:44:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:44:26]  --------------------------------------------------------------------------------
[07/14 14:44:26]  Iteration: 324 (5 solution, 318 counterexamples)
[07/14 14:44:45]  Generator returned sat in 15.227093 secs.
[07/14 14:44:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:44:45]  Improved gap from 29/4096 to 100
[07/14 14:44:46]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/14 14:44:46]  Verifer returned sat in 0.298579 secs.
[07/14 14:44:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56564.075439    0.057373 -56764.075195  28038.018555    0.000000           0.000000  199.999756      199.999756
1 -56564.075439    0.013916 -56764.075195  28038.018555    0.000000           0.000000  199.999756       99.999756
2 -56564.075439  199.996582 -56664.075195  28038.018555    0.000000           0.000000   99.999756       -0.000244
3 -56564.068115  100.007080 -56564.071777  28038.018555    0.000000           0.000000    0.003662      -99.992920
4 -56263.555908  300.515869 -56364.075439  28038.018555    0.519287           0.000000  100.000244      100.000000
5 -56263.555908    1.000000 -56364.075195  28038.018555    0.519287           0.519287  100.000000        0.000000
6 -56211.055908  152.500000 -56264.075195  28038.018555    0.519287           0.519287   52.500000      -47.500000
7 -55808.057617  455.498291 -56164.075195  28038.018555  156.017578           0.519287  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:44:46]  --------------------------------------------------------------------------------
[07/14 14:44:46]  Iteration: 325 (5 solution, 319 counterexamples)
[07/14 14:44:57]  Generator returned sat in 6.929564 secs.
[07/14 14:44:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:44:57]  Improved number of small numbers from 54 to 60 out of a max of 89
[07/14 14:44:57]  Verifer returned sat in 0.430846 secs.
[07/14 14:44:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56563.133057    0.057373 -56763.132812  28037.076172    0.000000            0.00000  199.999756      199.999756
1 -56563.133057    0.028809 -56763.132812  28037.076172    0.000000            0.00000  199.999756       99.999756
2 -56563.133057    0.028809 -56563.161499  28037.076172    0.000000            0.00000    0.028442       -0.000244
3 -56463.104126  100.057373 -56463.132812  28037.076172    0.000000            0.00000    0.028687        0.028687
4 -56162.546753  300.586060 -56463.132812  28037.076172  100.586060            0.00000  200.000000      100.000000
5 -56162.546753  151.293030 -56363.132812  28037.076172  100.586060          100.58606  100.000000        0.000000
6 -55935.092865  327.453888 -56263.132812  28037.076172  100.586060          100.58606  227.453888      127.453888
7 -55570.865921  591.680832 -56163.132812  28037.076172  392.266846          100.58606  200.000046      100.000046
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:44:58]  --------------------------------------------------------------------------------
[07/14 14:44:58]  Iteration: 326 (5 solution, 320 counterexamples)
[07/14 14:45:14]  Generator returned sat in 12.612645 secs.
[07/14 14:45:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:45:15]  Improved gap from 59/8192 to 100
[07/14 14:45:15]  Improved number of small numbers from 31 to 49 out of a max of 90
[07/14 14:45:15]  Verifer returned sat in 0.696969 secs.
[07/14 14:45:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56761.504883    0.057129 -56861.505112  28135.448471    0.000000           0.000000  100.000229      100.000229
1 -56761.504883    0.028809 -56861.497803  28135.448471    0.000000           0.000000   99.992920        0.000229
2 -56561.505127  299.992676 -56661.505127  28135.448471    0.000000           0.000000  100.000000       99.999985
3 -56561.505127    0.007202 -56661.505112  28135.448471    0.000000           0.000000   99.999985       -0.000015
4 -56260.994308  400.510803 -56461.505112  28135.448471  100.510803           0.000000  100.000000      100.000000
5 -56159.738907  201.255402 -56363.133057  28135.448471  101.766205         100.510803  101.627945      100.000000
6 -56159.738907  101.627701 -56263.132812  28135.448471  101.766205         101.766205    1.627701        0.000000
7 -55211.680458  949.686150 -56261.504883  28135.448471  849.824463         101.766205  199.999962      100.000191
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:45:15]  --------------------------------------------------------------------------------
[07/14 14:45:15]  Iteration: 327 (5 solution, 321 counterexamples)
[07/14 14:45:30]  Generator returned sat in 10.785511 secs.
[07/14 14:45:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:45:31]  Improved gap from 202869/2048 to 100
[07/14 14:45:31]  Improved number of small numbers from 41 to 90 out of a max of 90
[07/14 14:45:31]  Verifer returned sat in 0.297420 secs.
[07/14 14:45:31]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57197.047363    0.056885 -57197.047607  28135.448242    0.000000           0.000000    0.000244        0.000000
1 -57097.047607  100.000000 -57197.047363  28135.448242    0.000000           0.000000   99.999756       -0.000244
2 -57097.019043  100.028320 -57097.047363  28135.448242    0.000000           0.000000    0.028320      -99.971680
3 -56797.018799  300.028564 -56930.714111  28135.448242    0.028320           0.000000  133.666992      100.000244
4 -56797.018799  133.666748 -56897.047363  28135.448242    0.028320           0.028320  100.000244        0.000244
5 -56313.352295  583.666748 -56697.047363  28135.448242  283.695068           0.028320  100.000000      100.000000
6 -56212.852295  200.500000 -56648.695068  28135.448242  284.195068         283.695068  151.647705      100.000000
7 -56212.852295  141.509521 -56597.047363  28135.448242  284.195068         284.195068  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:45:31]  --------------------------------------------------------------------------------
[07/14 14:45:31]  Iteration: 328 (5 solution, 322 counterexamples)
[07/14 14:45:45]  Generator returned sat in 9.939342 secs.
[07/14 14:45:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:45:45]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/14 14:45:45]  Verifer returned sat in 0.127941 secs.
[07/14 14:45:45]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57197.033203    0.056641 -57197.047363  28135.448242    0.000000           0.000000    0.014160        0.014160
1 -57097.047852   99.999512 -57197.047363  28135.448242    0.000000           0.000000   99.999512       -0.000488
2 -57096.061523  100.985840 -57096.075684  28135.448242    0.000000           0.000000    0.014160      -99.014160
3 -56797.019043  299.056641 -56997.047363  28135.448242    0.028076           0.000000  200.000244      100.000244
4 -56797.019043  100.500000 -56897.047363  28135.448242    0.028076           0.028076  100.000244        0.000244
5 -56246.019287  651.000000 -56697.047363  28135.448242  283.695068           0.028076  167.333008      167.333008
6 -56213.338135  200.014160 -56664.056641  28135.448242  283.709229         283.695068  167.009277      100.000000
7 -56213.338135  166.995361 -56597.047363  28135.448242  283.709229         283.709229  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:45:45]  --------------------------------------------------------------------------------
[07/14 14:45:45]  Iteration: 329 (5 solution, 323 counterexamples)
[07/14 14:46:09]  Generator returned sat in 19.867455 secs.
[07/14 14:46:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:46:10]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:46:10]  Verifer returned sat in 0.198151 secs.
[07/14 14:46:10]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57197.033203    0.056641 -57497.033203  28335.434082   0.000000           0.000000  300.000000           200.0
1 -57197.033203    0.028320 -57297.033203  28335.434082   0.000000           0.000000  100.000000           100.0
2 -57197.033203    0.028320 -57197.061523  28335.434082   0.000000           0.000000    0.028320             0.0
3 -56943.259766  253.801758 -57181.948242  28335.434082  53.773438           0.000000  184.915039           100.0
4 -56843.231445  284.943359 -57040.919922  28335.434082  53.801758          53.773438  143.886719           100.0
5 -56716.089844  271.028320 -56897.033203  28335.434082  80.943359          53.801758  100.000000           100.0
6 -56530.061523  286.028320 -56897.033203  28335.434082  80.971680          80.943359  286.000000           186.0
7 -56530.061523  285.971680 -56797.033203  28335.434082  80.971680          80.971680  186.000000            86.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:46:10]  --------------------------------------------------------------------------------
[07/14 14:46:10]  Iteration: 330 (5 solution, 324 counterexamples)
[07/14 14:46:20]  Generator returned sat in 6.007887 secs.
[07/14 14:46:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:46:20]  Improved number of small numbers from 73 to 85 out of a max of 89
[07/14 14:46:20]  Verifer returned sat in 0.248663 secs.
[07/14 14:46:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57297.033447    0.056641 -57497.033203  28335.433594    0.000000           0.000000  199.999756      199.999756
1 -57297.033447    0.028320 -57397.033203  28335.433594    0.000000           0.000000   99.999756       99.999756
2 -57297.033447    0.028076 -57397.033203  28335.433594    0.000000           0.000000   99.999756       -0.000244
3 -56943.260254  453.772949 -57225.855859  28335.433594   53.773193           0.000000  228.822412      199.999756
4 -56943.260254  136.088672 -57197.033203  28335.433594   53.773193          53.773193  199.999756       99.999756
5 -56739.127002  404.133008 -56997.033203  28335.433594  157.906006          53.773193  100.000195      100.000195
6 -56638.627197  200.500000 -56954.678516  28335.433594  157.934326         157.906006  158.116992      100.471680
7 -56638.627197  136.088672 -56897.033203  28335.433594  157.934326         157.934326  100.471680        0.471680
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:46:21]  --------------------------------------------------------------------------------
[07/14 14:46:21]  Iteration: 331 (5 solution, 325 counterexamples)
[07/14 14:46:59]  Generator returned sat in 34.768400 secs.
[07/14 14:47:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:47:00]  Improved gap from 29/4096 to 0
[07/14 14:47:00]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/14 14:47:00]  Verifer returned sat in 0.273872 secs.
[07/14 14:47:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56835.636963    0.056396 -57035.636963  27774.037354   0.000000           0.000000  200.000000      100.000000
1 -56835.636963    0.028320 -56835.636963  27774.037354   0.000000           0.000000    0.000000        0.000000
2 -56635.636963  200.000000 -56835.636963  27774.037354   0.000000           0.000000  200.000000      100.000000
3 -56635.636963  198.528320 -56635.651123  27774.037354   0.000000           0.000000    0.014160        0.000000
4 -56435.622803  200.028320 -56535.637207  27774.037354   0.013916           0.000000  100.000488      100.000244
5 -56435.622803    2.000000 -56438.151123  27774.037354   0.013916           0.013916    2.514404        0.000244
6 -56434.637207    3.500000 -56435.636963  27873.051514   0.013916           0.013916    0.985840        0.000000
7 -56430.623047    5.000000 -56434.651123  27873.051758   0.013916           0.013916    4.014160      -95.985596
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:47:00]  --------------------------------------------------------------------------------
[07/14 14:47:00]  Iteration: 332 (5 solution, 326 counterexamples)
[07/14 14:47:14]  Generator returned sat in 9.612048 secs.
[07/14 14:47:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:47:14]  Improved gap from 29/2048 to 21.875
[07/14 14:47:14]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:47:14]  Verifer returned sat in 0.205447 secs.
[07/14 14:47:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -56835.636963    0.056396 -56936.144043  27674.544434    0.00000            0.00000  100.50708         0.50708
1 -56835.636963    0.028320 -56835.636963  27674.544434    0.00000            0.00000    0.00000       -99.49292
2 -56436.144043  399.492920 -56636.144043  27674.544434    0.00000            0.00000  200.00000       200.00000
3 -56332.144043  304.000000 -56536.144043  27674.544434   25.48584            0.00000  178.51416       178.51416
4 -56332.144043  154.000000 -56436.144043  27674.544434   25.48584           25.48584   78.51416        78.51416
5 -56332.144043   78.500000 -56378.908203  27695.433594   25.48584           25.48584   21.27832        -0.59668
6 -56312.672363   40.750000 -56357.033203  27773.558594   25.48584           25.48584   18.87500        -3.00000
7 -56309.672363   21.875000 -56335.158203  27773.558594   25.48584           25.48584    0.00000      -100.00000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:47:15]  --------------------------------------------------------------------------------
[07/14 14:47:15]  Iteration: 333 (5 solution, 327 counterexamples)
[07/14 14:47:29]  Generator returned sat in 10.614223 secs.
[07/14 14:47:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:47:29]  Verifer returned unsat in 0.032742 secs.
[07/14 14:47:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:47:30]  --------------------------------------------------------------------------------
[07/14 14:47:30]  Iteration: 334 (6 solution, 327 counterexamples)
[07/14 14:47:45]  Generator returned sat in 11.879856 secs.
[07/14 14:47:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:47:46]  Improved gap from 2019/2048 to 21.875
[07/14 14:47:46]  Improved number of small numbers from 52 to 90 out of a max of 90
[07/14 14:47:46]  Verifer returned sat in 0.229112 secs.
[07/14 14:47:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56619.732910    0.056396 -56919.732666  27674.544189        0.0                0.0  299.999756      200.000000
1 -56619.732666  300.000000 -56719.732910  27674.544189        0.0                0.0  100.000244      100.000244
2 -56619.732666    0.028320 -56683.954834  27674.544189        0.0                0.0   64.222168        0.000244
3 -56378.954834  305.000000 -56619.732910  27674.544189        0.0                0.0  240.778076      140.778076
4 -56378.954834  154.000000 -56458.051270  27674.544189        0.0                0.0   79.096436       40.778076
5 -56378.954834   78.500000 -56419.732666  27733.766113        0.0                0.0   40.777832        0.000000
6 -56378.954834   40.750000 -56378.954834  27811.891113        0.0                0.0    0.000000      -21.875000
7 -56357.079834   21.875000 -56357.079834  27811.891113        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/14 14:47:46]  --------------------------------------------------------------------------------
[07/14 14:47:46]  Iteration: 335 (6 solution, 328 counterexamples)
[07/14 14:48:16]  Generator returned sat in 26.458545 secs.
[07/14 14:48:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:48:17]  Improved gap from 231/16384 to 100
[07/14 14:48:17]  Improved number of small numbers from 56 to 90 out of a max of 90
[07/14 14:48:17]  Verifer returned sat in 0.266831 secs.
[07/14 14:48:17]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -56757.079834    0.056396 -56957.079834  27811.891113    0.000000           0.000000  200.000000      200.000000
1 -56757.065918  200.013916 -56857.080078  27811.891113    0.000000           0.000000  100.014160      100.013916
2 -56757.065918    0.014160 -56757.079834  27811.891113    0.000000           0.000000    0.013916        0.013916
3 -56757.065674    0.014160 -56757.079834  27811.891113    0.000000           0.000000    0.014160      -99.985840
4 -56455.051514  302.028320 -56657.079834  27811.891113    2.028076           0.000000  200.000244      100.000244
5 -56455.051514  153.014160 -56457.079834  27811.891113    2.028076           2.028076    0.000244        0.000244
6 -55697.023438  758.028320 -56457.079834  27811.891113  560.056396           2.028076  200.000000      100.000000
7 -55516.009277  381.014160 -56357.079834  27811.891113  641.070312         560.056396  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:48:17]  --------------------------------------------------------------------------------
[07/14 14:48:17]  Iteration: 336 (6 solution, 329 counterexamples)
[07/14 14:48:30]  Generator returned sat in 8.962942 secs.
[07/14 14:48:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:48:31]  Improved gap from 231/8192 to 0
[07/14 14:48:31]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/14 14:48:31]  Verifer returned sat in 0.253707 secs.
[07/14 14:48:31]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57774.635742    0.056152 -57874.650146  27811.890869    0.000000           0.000000  100.014404      100.014160
1 -57774.635742  100.013916 -57774.664062  27811.890869    0.000000           0.000000    0.028320        0.014160
2 -57774.635742    0.014160 -57774.649902  27811.890869    0.000000           0.000000    0.014160      -99.985840
3 -57374.649902  400.000000 -57574.649902  27811.890869    0.000000           0.000000  200.000000      200.000000
4 -56772.649902  802.000000 -57474.649902  27811.890869  601.999756           0.000000  100.000244      100.000244
5 -56772.649902    2.000000 -57380.635742  27811.890869  601.999756         601.999756    5.986084        0.000244
6 -56772.635986    6.000000 -57374.649902  27910.905029  601.999756         601.999756    0.014160       -0.971680
7 -56758.650146   14.000000 -57373.664062  27910.905029  601.999756         601.999756   13.014160      -86.985840
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:48:31]  --------------------------------------------------------------------------------
[07/14 14:48:31]  Iteration: 337 (6 solution, 330 counterexamples)
[07/14 14:48:48]  Generator returned sat in 13.337428 secs.
[07/14 14:48:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:48:49]  Improved gap from 0 to 0
[07/14 14:48:49]  Improved number of small numbers from 51 to 90 out of a max of 90
[07/14 14:48:49]  Verifer returned sat in 0.225540 secs.
[07/14 14:48:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57774.648193    0.055908 -58074.643311  27811.903320    0.000000           0.000000  299.995117      199.995117
1 -57774.643311  300.000000 -57974.643066  27811.903320    0.000000           0.000000  199.999756      100.000000
2 -57774.643311  199.998333 -57874.643066  27811.903320    0.000000           0.000000   99.999756        0.000000
3 -57660.310547  214.332520 -57674.643311  27811.903320    0.000000           0.000000   14.332764       14.332764
4 -57351.144531  323.498779 -57574.643311  27811.903320  123.498779           0.000000  100.000000      100.000000
5 -57351.144531    2.000000 -57478.644775  27811.903320  123.498779         123.498779    4.001465        0.000000
6 -57350.145996    5.000000 -57473.646484  27910.904785  123.498779         123.498779    0.001709        0.000000
7 -57340.647705    9.500000 -57473.644775  27910.904785  123.498779         123.498779    9.498291      -90.501709
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:48:49]  --------------------------------------------------------------------------------
[07/14 14:48:49]  Iteration: 338 (6 solution, 331 counterexamples)
[07/14 14:49:01]  Generator returned sat in 8.298897 secs.
[07/14 14:49:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:49:02]  Improved gap from 7/4096 to 0
[07/14 14:49:02]  Improved number of small numbers from 68 to 90 out of a max of 90
[07/14 14:49:02]  Verifer returned sat in 0.304811 secs.
[07/14 14:49:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57811.643555    0.055664 -58111.643555  27649.902832   0.000000           0.000000  300.000000      200.000000
1 -57811.643555  299.999756 -57911.643799  27649.902832   0.000000           0.000000  100.000244      100.000000
2 -57811.643555   99.999756 -57811.643555  27649.902832   0.000000           0.000000    0.000000        0.000000
3 -57511.643555  300.000000 -57811.643555  27649.902832   0.000000           0.000000  300.000000      200.000000
4 -57509.643555  302.000000 -57611.643555  27649.902832   1.000244           0.000000  100.999756      100.999756
5 -57509.643555    2.000000 -57514.643799  27649.902832   1.000244           1.000244    4.000000        0.999756
6 -57509.643555    4.000000 -57511.643555  27748.903076   1.000244           1.000244    0.999756        0.000000
7 -57504.643311    6.000000 -57510.643799  27748.903076   1.000244           1.000244    5.000244      -94.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:49:02]  --------------------------------------------------------------------------------
[07/14 14:49:02]  Iteration: 339 (6 solution, 332 counterexamples)
[07/14 14:49:12]  Generator returned sat in 5.136277 secs.
[07/14 14:49:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:49:12]  Verifer returned unsat in 0.024381 secs.
[07/14 14:49:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:49:12]  --------------------------------------------------------------------------------
[07/14 14:49:12]  Iteration: 340 (7 solution, 332 counterexamples)
[07/14 14:49:26]  Generator returned sat in 10.232280 secs.
[07/14 14:49:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:49:27]  Improved gap from 0 to 100
[07/14 14:49:27]  Improved number of small numbers from 36 to 52 out of a max of 90
[07/14 14:49:27]  Verifer returned sat in 0.771708 secs.
[07/14 14:49:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57615.689453    0.055420 -57715.717285  27353.976328    0.000000           0.000000  100.027832      100.027598
1 -57615.689453    0.027832 -57615.717051  27353.976328    0.000000           0.000000    0.027598        0.027598
2 -57515.717051  100.000000 -57615.717041  27353.976328    0.000000           0.000000   99.999990        0.000000
3 -57315.689209  300.027832 -57483.717051  27353.976328    0.027832           0.000000  168.000010      100.000010
4 -57315.689209  152.013916 -57315.717051  27353.976328    0.027832           0.027832    0.000010        0.000010
5 -56785.668345  530.020874 -57265.717051  27353.976328  230.048706           0.027832  250.000000      200.000000
6 -56768.657908  267.010437 -57215.717051  27353.976328  230.048706         230.048706  217.010437      117.010437
7 -56315.152689  670.515656 -57115.717041  27353.976328  600.564209         230.048706  200.000143      100.000153
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:49:28]  --------------------------------------------------------------------------------
[07/14 14:49:28]  Iteration: 341 (7 solution, 333 counterexamples)
[07/14 14:50:08]  Generator returned sat in 36.679105 secs.
[07/14 14:50:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:50:09]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/14 14:50:09]  Verifer returned sat in 0.163183 secs.
[07/14 14:50:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57615.689453    0.055420 -57715.717285  27353.976318    0.000000           0.000000  100.027832      100.027832
1 -57615.689453    0.027588 -57615.717285  27353.976318    0.000000           0.000000    0.027832        0.027832
2 -57515.717285  100.000000 -57615.717285  27353.976318    0.000000           0.000000  100.000000        0.000000
3 -57263.675537  352.041748 -57415.717285  27353.976318    0.027832           0.000000  152.013916      152.013916
4 -57263.675537  152.000000 -57415.717285  27353.976318    0.027832           0.027832  152.013916       52.013916
5 -56711.689453  704.000000 -57215.717285  27353.976318  304.027832           0.027832  200.000000      200.000000
6 -56709.689453  202.000000 -57215.717285  27353.976318  304.027832         304.027832  202.000000      102.000000
7 -56107.689453  804.000000 -57115.717041  27353.976318  808.027588         304.027832  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:50:09]  --------------------------------------------------------------------------------
[07/14 14:50:09]  Iteration: 342 (7 solution, 334 counterexamples)
[07/14 14:50:23]  Generator returned sat in 10.250767 secs.
[07/14 14:50:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:50:24]  Improved number of small numbers from 44 to 89 out of a max of 89
[07/14 14:50:24]  Verifer returned sat in 0.269589 secs.
[07/14 14:50:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57441.041260    0.055420 -57441.069092  27353.976318    0.000000           0.000000    0.027832        0.013672
1 -57441.041260    0.013916 -57441.054932  27353.976318    0.000000           0.000000    0.013672      -99.986328
2 -57241.041260  200.013672 -57241.054932  27353.976318    0.000000           0.000000    0.013672        0.013672
3 -56911.703369  329.351562 -57241.054932  27353.976318   29.351562           0.000000  300.000000      200.000000
4 -56911.703369  166.675781 -57141.054932  27353.976318   29.351562          29.351562  200.000000      100.000000
5 -56711.689697  400.013672 -56941.055176  27353.976318   29.365723          29.351562  199.999756      199.999512
6 -56709.682617  202.006836 -56870.054932  27353.976318   29.365723          29.365723  131.006592      102.006592
7 -56352.178955  488.510254 -56841.054932  27353.976318  288.875977          29.365723  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:50:24]  --------------------------------------------------------------------------------
[07/14 14:50:24]  Iteration: 343 (7 solution, 335 counterexamples)
[07/14 14:50:36]  Generator returned sat in 7.581769 secs.
[07/14 14:50:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:50:36]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/14 14:50:36]  Verifer returned sat in 0.206438 secs.
[07/14 14:50:36]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57441.041260    0.055176 -57441.069092  27353.976074     0.000000           0.000000    0.027832        0.013672
1 -57441.041260    0.013672 -57441.044678  27353.976074     0.000000           0.000000    0.003418      -99.986328
2 -57041.055176  399.989502 -57241.055176  27353.976074     0.000000           0.000000  200.000000      199.999756
3 -57037.041504  204.013672 -57141.054932  27353.976074     0.003418           0.000000  104.010010      104.010010
4 -57037.041504  104.006836 -57141.054932  27353.976074     0.003418           0.003418  104.010010        4.010010
5 -56385.061768  755.989746 -57021.050049  27353.976074   455.993164           0.003418  179.995117      100.000000
6 -56185.062012  379.994873 -56941.054932  27353.976074   455.993164         455.993164  299.999756      199.999756
7 -55515.069458  969.992310 -56841.054932  27353.976074  1025.985596         455.993164  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:50:37]  --------------------------------------------------------------------------------
[07/14 14:50:37]  Iteration: 344 (7 solution, 336 counterexamples)
[07/14 14:50:47]  Generator returned sat in 6.388867 secs.
[07/14 14:50:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:50:47]  Improved gap from 113/8192 to 100
[07/14 14:50:48]  Improved number of small numbers from 68 to 70 out of a max of 90
[07/14 14:50:48]  Verifer returned sat in 0.451900 secs.
[07/14 14:50:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57441.017334    0.055176 -57541.017090  27453.937988     0.000000           0.000000   99.999756       99.999756
1 -57441.017334    0.027588 -57441.044678  27453.937988     0.000000           0.000000    0.027344       -0.000244
2 -57041.055420  399.989258 -57441.017090  27453.937988    99.961670           0.000000  300.000000      200.000000
3 -56745.110596  595.944824 -57341.017090  27453.937988   295.906738          99.961670  299.999756      199.999756
4 -56745.110596  299.972412 -57141.017090  27453.937988   295.906738         295.906738   99.999756       99.999756
5 -56095.068970  750.041382 -57118.037781  27453.937988   845.948120         295.906738  177.020691      100.000000
6 -55895.068970  377.020691 -56941.054932  27453.937988   845.948120         845.948120  200.037842      200.000000
7 -55106.672150  988.434662 -56841.054932  27453.937988  1634.344727         845.948120  100.038055      100.000214
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:50:48]  --------------------------------------------------------------------------------
[07/14 14:50:48]  Iteration: 345 (7 solution, 337 counterexamples)
[07/14 14:50:58]  Generator returned sat in 6.238000 secs.
[07/14 14:50:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 14:50:59]  Improved number of small numbers from 67 to 69 out of a max of 89
[07/14 14:50:59]  Verifer returned sat in 0.358341 secs.
[07/14 14:50:59]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57441.017334    0.054932 -57541.017090  27453.937744     0.000000           0.000000   99.999756       99.999512
1 -57441.017334    0.027588 -57441.044678  27453.937988     0.000000           0.000000    0.027344       -0.000244
2 -57041.055664  399.989014 -57441.017090  27453.937988    99.961670           0.000000  299.999756      199.999756
3 -56745.110596  595.944824 -57341.017090  27453.937988   295.906738          99.961670  299.999756      199.999756
4 -56745.110596  299.972412 -57141.017090  27453.937988   295.906738         295.906738   99.999756       99.999756
5 -56095.124146  749.986206 -57118.010193  27453.937988   845.892944         295.906738  176.993103      100.000000
6 -55895.124146  376.993103 -56941.017090  27453.937988   845.892944         845.892944  200.000000      200.000000
7 -55129.634491  965.489655 -56841.054932  27453.937988  1611.382568         845.892944  100.037872      100.000031
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:50:59]  --------------------------------------------------------------------------------
[07/14 14:50:59]  Iteration: 346 (7 solution, 338 counterexamples)
[07/14 14:51:43]  Generator returned sat in 39.367140 secs.
[07/14 14:51:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:51:43]  Improved gap from 16159/16384 to 0
[07/14 14:51:43]  Improved number of small numbers from 47 to 90 out of a max of 90
[07/14 14:51:43]  Verifer returned sat in 0.268525 secs.
[07/14 14:51:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57441.017578    0.054688 -57441.044922  27453.937988    0.000000           0.000000    0.027344        0.013672
1 -57441.017578    0.013672 -57441.031006  27453.937988    0.000000           0.000000    0.013428      -99.986328
2 -57041.055664  399.975342 -57241.031250  27453.937988   99.975586           0.000000  100.000000      100.000000
3 -56841.055664  300.000000 -57141.031250  27453.937988   99.975586          99.975586  200.000000      200.000000
4 -56589.055664  452.000000 -57041.031250  27453.937988  350.989258          99.975586  100.986328      100.986328
5 -56589.055664    1.500000 -57041.031006  27453.937988  350.989258         350.989258  100.986084        0.986328
6 -56589.055664    4.250000 -56941.031250  27552.951660  350.989258         350.989258    0.986328        0.000000
7 -56581.666992    8.375000 -56940.044678  27552.951660  350.989258         350.989258    7.388428      -92.611328
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:51:44]  --------------------------------------------------------------------------------
[07/14 14:51:44]  Iteration: 347 (7 solution, 339 counterexamples)
[07/14 14:51:55]  Generator returned sat in 7.033446 secs.
[07/14 14:51:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:51:55]  Verifer returned unsat in 0.037399 secs.
[07/14 14:51:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:51:55]  --------------------------------------------------------------------------------
[07/14 14:51:55]  Iteration: 348 (8 solution, 339 counterexamples)
[07/14 14:52:05]  Generator returned sat in 6.135433 secs.
[07/14 14:52:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:52:06]  Verifer returned unsat in 0.022847 secs.
[07/14 14:52:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:52:06]  --------------------------------------------------------------------------------
[07/14 14:52:06]  Iteration: 349 (9 solution, 339 counterexamples)
[07/14 14:52:15]  Generator returned sat in 5.118561 secs.
[07/14 14:52:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:52:16]  Verifer returned unsat in 0.019876 secs.
[07/14 14:52:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:52:16]  --------------------------------------------------------------------------------
[07/14 14:52:16]  Iteration: 350 (10 solution, 339 counterexamples)
[07/14 14:52:26]  Generator returned sat in 6.757647 secs.
[07/14 14:52:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:52:27]  Improved gap from 7/256 to 0
[07/14 14:52:27]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:52:27]  Verifer returned sat in 0.169680 secs.
[07/14 14:52:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57441.003662    0.054688 -57441.031006  27453.937744   0.000000           0.000000    0.027344        0.027344
1 -57441.003662    0.027344 -57441.031006  27453.937988   0.000000           0.000000    0.027344      -99.972412
2 -57241.031250  199.999756 -57341.031250  27453.937988   0.000000           0.000000  100.000000        0.000000
3 -57207.976562  133.054688 -57208.003906  27520.883301   0.000000           0.000000    0.027344        0.000000
4 -57007.921875  200.082031 -57107.976562  27520.883301   0.027344           0.000000  100.027344      100.027344
5 -57007.921875    1.500000 -57107.976562  27520.883301   0.027344           0.027344  100.027344        0.027344
6 -57007.921875    2.750000 -57007.976562  27619.910645   0.027344           0.027344    0.027344       -0.945312
7 -57003.324219    4.625000 -57007.003906  27619.910645   0.027344           0.027344    3.652344      -96.347656
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:52:27]  --------------------------------------------------------------------------------
[07/14 14:52:27]  Iteration: 351 (10 solution, 340 counterexamples)
[07/14 14:52:46]  Generator returned sat in 14.353658 secs.
[07/14 14:52:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:52:46]  Improved gap from 223/8192 to 100
[07/14 14:52:46]  Improved number of small numbers from 53 to 86 out of a max of 90
[07/14 14:52:46]  Verifer returned sat in 0.501470 secs.
[07/14 14:52:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -57507.354004    0.054199 -57507.381592  27453.9375    0.000000                0.0    0.027588        0.027588
1 -57507.354004    0.027100 -57507.381592  27453.9375    0.000000                0.0    0.027588      -99.972412
2 -57341.243652  166.137939 -57341.270854  27453.9375    0.000000                0.0    0.027201      -33.862061
3 -57274.937520   66.333333 -57307.381592  27453.9375    0.000000                0.0   32.444071      -67.555929
4 -57007.381592  300.000000 -57107.381592  27453.9375    0.000000                0.0  100.000000      100.000000
5 -56256.881592  850.500000 -57007.381592  27453.9375  550.500000                0.0  200.000000      200.000000
6 -56256.881592    1.500000 -57007.381592  27453.9375  550.500000              550.5  200.000000      100.000000
7 -56154.131592  302.750000 -56907.381348  27453.9375  553.249756              550.5  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:52:47]  --------------------------------------------------------------------------------
[07/14 14:52:47]  Iteration: 352 (10 solution, 341 counterexamples)
[07/14 14:53:25]  Generator returned sat in 33.945078 secs.
[07/14 14:53:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:53:25]  Verifer returned unsat in 0.037735 secs.
[07/14 14:53:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:53:25]  --------------------------------------------------------------------------------
[07/14 14:53:25]  Iteration: 353 (11 solution, 341 counterexamples)
[07/14 14:53:39]  Generator returned sat in 9.629070 secs.
[07/14 14:53:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:53:39]  Improved gap from 100241/2048 to 100
[07/14 14:53:40]  Improved number of small numbers from 61 to 68 out of a max of 90
[07/14 14:53:40]  Verifer returned sat in 0.417764 secs.
[07/14 14:53:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58016.300537    0.053955 -58016.327637  27453.937256    0.000000           0.000000    0.027100        0.026855
1 -58016.300537    0.013428 -58016.327393  27453.937256    0.000000           0.000000    0.026855      -99.973145
2 -57616.327637  399.999756 -57816.327393  27453.937256    0.000000           0.000000  199.999756      199.999756
3 -57216.354492  599.972900 -57816.300293  27453.937256  399.972900           0.000000  199.972900      100.000000
4 -57116.340942  299.986450 -57716.327393  27453.937256  399.986450         399.972900  200.000000      100.000000
5 -57116.340942  149.993225 -57592.337555  27453.937256  399.986450         399.986450   76.010162        0.000000
6 -56592.378204  599.972900 -57516.327393  27453.937256  623.949219         399.986450  299.999969      199.999969
7 -56592.378204  299.986450 -57316.327637  27453.937256  623.949219         623.949219  100.000214       99.999969
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:53:40]  --------------------------------------------------------------------------------
[07/14 14:53:40]  Iteration: 354 (11 solution, 342 counterexamples)
[07/14 14:54:05]  Generator returned sat in 20.938132 secs.
[07/14 14:54:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:54:05]  Verifer returned unsat in 0.035646 secs.
[07/14 14:54:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:54:05]  --------------------------------------------------------------------------------
[07/14 14:54:05]  Iteration: 355 (12 solution, 342 counterexamples)
[07/14 14:54:14]  Generator returned sat in 4.991882 secs.
[07/14 14:54:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:54:15]  Verifer returned unsat in 0.033491 secs.
[07/14 14:54:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:54:15]  --------------------------------------------------------------------------------
[07/14 14:54:15]  Iteration: 356 (13 solution, 342 counterexamples)
[07/14 14:54:29]  Generator returned sat in 9.977516 secs.
[07/14 14:54:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:54:29]  Improved gap from 221/16384 to 100
[07/14 14:54:30]  Improved number of small numbers from 21 to 90 out of a max of 90
[07/14 14:54:30]  Verifer returned sat in 0.296721 secs.
[07/14 14:54:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58862.351318    0.053955 -58962.351074  27453.923828    0.000000           0.000000   99.999756       99.999756
1 -58862.351318    0.013428 -58962.310791  27453.923828    0.000000           0.000000   99.959473       -0.000244
2 -58562.351318  399.959473 -58762.351074  27453.923828    0.000000           0.000000  199.999756      199.999756
3 -58462.323975  300.027100 -58662.351318  27453.923828    0.027100           0.000000  200.000244      200.000000
4 -58362.310791  300.013428 -58662.351074  27453.923828    0.040283           0.027100  300.000000      200.000000
5 -58362.310791  299.986572 -58562.351074  27453.923828    0.040283           0.040283  200.000000      100.000000
6 -57860.337646  701.973145 -58362.351318  27453.923828  402.013428           0.040283  100.000244      100.000000
7 -57459.351318  500.986572 -58362.351074  27453.923828  639.257568         402.013428  263.742188      163.742188
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:54:30]  --------------------------------------------------------------------------------
[07/14 14:54:30]  Iteration: 357 (13 solution, 343 counterexamples)
[07/14 14:55:02]  Generator returned sat in 28.550986 secs.
[07/14 14:55:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:55:03]  Improved number of small numbers from 50 to 58 out of a max of 89
[07/14 14:55:03]  Verifer returned sat in 0.519498 secs.
[07/14 14:55:03]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58962.324219    0.053711 -58962.351074  27453.923828     0.000000           0.000000    0.026855        0.026855
1 -58962.324219    0.013672 -58962.351074  27453.923828     0.000000           0.000000    0.026855      -99.973145
2 -58662.351074  300.000000 -58762.351074  27453.923828     0.000000           0.000000  100.000000      100.000000
3 -58662.337585  100.013489 -58662.351074  27453.923828     0.000000           0.000000    0.013489        0.013489
4 -57860.324097  802.026978 -58563.342082  27453.923828   602.026978           0.000000  100.991007      100.000000
5 -57760.310608  201.004496 -58562.351074  27453.923828   602.040466         602.026978  200.000000      100.000000
6 -57760.310608  101.500000 -58363.837585  27453.923828   602.040466         602.040466    1.486511        0.000000
7 -56959.770142  802.026978 -58362.351074  27453.923828  1102.581055         602.040466  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:55:04]  --------------------------------------------------------------------------------
[07/14 14:55:04]  Iteration: 358 (13 solution, 344 counterexamples)
[07/14 14:55:16]  Generator returned sat in 8.090796 secs.
[07/14 14:55:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:55:17]  Improved number of small numbers from 58 to 58 out of a max of 89
[07/14 14:55:17]  Verifer returned sat in 0.492001 secs.
[07/14 14:55:17]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58962.324219    0.053711 -58962.351074  27453.923828     0.000000           0.000000    0.026855        0.026855
1 -58962.324219    0.013672 -58962.351074  27453.923828     0.000000           0.000000    0.026855      -99.973145
2 -58662.351074  300.000000 -58763.101074  27453.923828     0.000000           0.000000  100.750000      100.000000
3 -58662.337585  100.763489 -58662.351074  27453.923828     0.000000           0.000000    0.013489        0.013489
4 -57860.324097  802.026978 -58563.342082  27453.923828   602.026978           0.000000  100.991007      100.000000
5 -57760.310608  201.004496 -58561.601074  27453.923828   602.040466         602.026978  199.250000      100.000000
6 -57760.310608  102.250000 -58363.837585  27453.923828   602.040466         602.040466    1.486511        0.000000
7 -56959.770142  802.026978 -58362.351074  27453.923828  1102.581055         602.040466  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:55:17]  --------------------------------------------------------------------------------
[07/14 14:55:17]  Iteration: 359 (13 solution, 345 counterexamples)
[07/14 14:55:32]  Generator returned sat in 10.777925 secs.
[07/14 14:55:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:55:32]  Improved gap from 55/4096 to 100
[07/14 14:55:33]  Improved number of small numbers from 57 to 88 out of a max of 90
[07/14 14:55:33]  Verifer returned sat in 0.476192 secs.
[07/14 14:55:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58962.337891    0.053711 -59062.337646  27453.923584    0.000000           0.000000   99.999756       99.999756
1 -58962.337891    0.006836 -59062.337646  27453.923584    0.000000           0.000000   99.999756       -0.000244
2 -58762.337891  299.999756 -58962.337646  27453.923584    0.000000           0.000000  199.999756       99.999756
3 -58762.337891   66.319824 -58862.324219  27453.923584    0.000000           0.000000   99.986328       -0.000244
4 -58562.331055  299.993164 -58713.841064  27453.923584    0.006592           0.000000  151.503418      100.000000
5 -58562.331055  151.496582 -58593.095947  27453.923584    0.006592           0.006592   30.758301        0.000000
6 -57996.102783  596.986572 -58562.337646  27453.923584  266.235107           0.006592  299.999756      199.999756
7 -57996.102783  299.993286 -58462.337646  27453.923584  266.235107         266.235107  199.999756       99.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:55:33]  --------------------------------------------------------------------------------
[07/14 14:55:33]  Iteration: 360 (13 solution, 346 counterexamples)
[07/14 14:56:13]  Generator returned sat in 35.670737 secs.
[07/14 14:56:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 14:56:13]  Improved gap from 1/400 to 100
[07/14 14:56:14]  Improved number of small numbers from 50 to 66 out of a max of 90
[07/14 14:56:14]  Verifer returned sat in 0.615809 secs.
[07/14 14:56:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58962.341064    0.053467 -59062.341064  27453.926992   0.000000            0.00000  100.000000       99.999990
1 -58962.341064    0.001465 -59062.341055  27453.926992   0.000000            0.00000   99.999990       -0.000010
2 -58862.341055  200.000000 -58862.341064  27453.926992   0.000000            0.00000    0.000010        0.000000
3 -58662.339600  200.001465 -58860.341055  27453.926992   0.001250            0.00000  198.000205      100.000205
4 -58662.339600    0.010000 -58662.341055  27453.926992   0.001250            0.00125    0.000205        0.000205
5 -58461.319805  201.020000 -58562.341064  27453.926992   1.020000            0.00125  100.001260      100.001250
6 -58461.319805    0.010000 -58462.341055  27453.926992   1.020000            1.02000    0.001250        0.001250
7 -58261.301055  200.020000 -58462.340820  27453.926992   1.039795            1.02000  199.999971      100.000205
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:56:14]  --------------------------------------------------------------------------------
[07/14 14:56:14]  Iteration: 361 (13 solution, 347 counterexamples)
[07/14 14:56:44]  Generator returned sat in 25.910731 secs.
[07/14 14:56:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:56:45]  Improved gap from 219/16384 to 100
[07/14 14:56:45]  Improved number of small numbers from 35 to 45 out of a max of 90
[07/14 14:56:45]  Verifer returned sat in 0.826082 secs.
[07/14 14:56:45]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58962.340820     0.053467 -59062.341055  27453.926992     0.000000           0.000000  100.000234      100.000234
1 -58962.340820     0.013428 -59062.341055  27453.926992     0.000000           0.000000  100.000234        0.000234
2 -58762.341055   300.000000 -58862.341055  27453.926992     0.000000           0.000000  100.000000      100.000000
3 -58762.341055     0.013367 -58862.341055  27453.926992     0.000000           0.000000  100.000000        0.000000
4 -58560.314321   302.026733 -58762.341055  27453.926992     0.000000           0.000000  202.026733      102.026733
5 -57706.287588  1056.053467 -58662.341055  27453.926992   656.053467           0.000000  300.000000      200.000000
6 -57378.260854   628.026733 -58462.341055  27453.926992   884.080200         656.053467  200.000000      200.000000
7 -57064.247488   514.013367 -58462.340820  27453.926992  1198.093506         884.080200  199.999827      100.000061
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 14:56:46]  --------------------------------------------------------------------------------
[07/14 14:56:46]  Iteration: 362 (13 solution, 348 counterexamples)
[07/14 14:56:56]  Generator returned sat in 6.124023 secs.
[07/14 14:56:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 14:56:56]  Improved gap from 1/1000 to 100
[07/14 14:56:57]  Improved number of small numbers from 41 to 53 out of a max of 90
[07/14 14:56:57]  Verifer returned sat in 0.937071 secs.
[07/14 14:56:57]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59057.791016     0.053223 -59057.817812  27453.926992     0.000000           0.000000    0.026797        0.026797
1 -59057.791016     0.013428 -59057.817812  27453.926992     0.000000           0.000000    0.026797      -99.973203
2 -58857.804446   200.013367 -58863.817627  27453.926992     0.000000           0.000000    6.013181        0.013367
3 -58857.804446     0.013367 -58857.817812  27453.926992     0.000000           0.000000    0.013367      -99.986633
4 -58555.791079   302.026733 -58757.817812  27453.926992     0.000000           0.000000  202.026733      102.026733
5 -57701.764345  1056.053467 -58657.817627  27453.926992   656.053467           0.000000  299.999815      200.000000
6 -57701.764345   103.000000 -58457.817812  27453.926992   656.053467         656.053467  100.000000      100.000000
7 -56993.764345   808.000000 -58457.817627  27453.926992  1264.053223         656.053467  200.000059      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:56:57]  --------------------------------------------------------------------------------
[07/14 14:56:57]  Iteration: 363 (13 solution, 349 counterexamples)
[07/14 14:57:35]  Generator returned sat in 33.186600 secs.
[07/14 14:57:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:57:35]  Improved gap from 0 to 100
[07/14 14:57:35]  Improved number of small numbers from 55 to 90 out of a max of 90
[07/14 14:57:35]  Verifer returned sat in 0.273053 secs.
[07/14 14:57:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58459.397705    0.052979 -58459.397705  27302.426758    0.000000           0.000000    0.000000        0.000000
1 -58359.371094  100.026611 -58359.397705  27302.426758    0.000000           0.000000    0.026611        0.026611
2 -58059.397705  300.000000 -58259.397705  27302.426758    0.000000           0.000000  200.000000      200.000000
3 -58059.371094  200.026611 -58159.397949  27302.426758    0.026367           0.000000  100.000488      100.000244
4 -58059.371094    1.000000 -58059.424316  27302.426758    0.026367           0.026367    0.026855        0.000244
5 -57756.424561  302.973389 -57959.397705  27302.426758  102.973145           0.026367  100.000000      100.000000
6 -57756.424561    1.000000 -57910.884521  27302.426758  102.973145         102.973145   51.486816        0.000000
7 -57556.397949  251.513428 -57859.397705  27302.426758  102.999756         102.973145  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:57:36]  --------------------------------------------------------------------------------
[07/14 14:57:36]  Iteration: 364 (13 solution, 350 counterexamples)
[07/14 14:57:49]  Generator returned sat in 9.021415 secs.
[07/14 14:57:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 14:57:50]  Improved number of small numbers from 63 to 89 out of a max of 89
[07/14 14:57:50]  Verifer returned sat in 0.148525 secs.
[07/14 14:57:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58459.397705    0.052979 -58459.397705  27302.426758    0.000000           0.000000    0.000000        0.000000
1 -58359.371338  100.026367 -58359.397705  27302.426758    0.000000           0.000000    0.026367        0.026367
2 -58059.397705  300.000000 -58259.397705  27302.426758    0.000000           0.000000  200.000000      200.000000
3 -58059.384277  200.013428 -58259.397705  27302.426758    0.013428           0.000000  200.000000      100.000000
4 -58059.384277  101.000000 -58159.397705  27302.426758    0.013428           0.013428  100.000000        0.000000
5 -57555.884277  603.500000 -57985.397705  27302.426758  203.513428           0.013428  226.000000      200.000000
6 -57555.884277  138.000000 -57910.884521  27302.426758  203.513428         203.513428  151.486816      100.000000
7 -56732.844727  974.526367 -57859.397705  27302.426758  926.552979         203.513428  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:57:50]  --------------------------------------------------------------------------------
[07/14 14:57:50]  Iteration: 365 (13 solution, 351 counterexamples)
[07/14 14:58:06]  Generator returned sat in 11.905303 secs.
[07/14 14:58:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:58:06]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:58:06]  Verifer returned sat in 0.131246 secs.
[07/14 14:58:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58460.397705    0.052979 -58460.397705  27302.426758    0.000000           0.000000    0.000000       -1.000000
1 -58359.371338  101.026367 -58359.397705  27302.426758    0.000000           0.000000    0.026367        0.026367
2 -58059.397705  300.000000 -58259.397705  27302.426758    0.000000           0.000000  200.000000      200.000000
3 -58059.384277  200.013428 -58259.397705  27302.426758    0.013428           0.000000  200.000000      100.000000
4 -58059.384277  101.500000 -58159.397705  27302.426758    0.013428           0.013428  100.000000        0.000000
5 -57555.884277  603.500000 -57984.397705  27302.426758  203.513428           0.013428  225.000000      200.000000
6 -57555.884277  138.500000 -57910.884521  27302.426758  203.513428         203.513428  151.486816      100.000000
7 -56732.844727  974.526367 -57859.397705  27302.426758  926.552979         203.513428  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:58:07]  --------------------------------------------------------------------------------
[07/14 14:58:07]  Iteration: 366 (13 solution, 352 counterexamples)
[07/14 14:58:25]  Generator returned sat in 14.620704 secs.
[07/14 14:58:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:58:26]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 14:58:26]  Verifer returned sat in 0.121138 secs.
[07/14 14:58:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58460.397705    0.052734 -58460.410889  27302.426758    0.000000           0.000000    0.013184       -0.999756
1 -58359.371582  101.039307 -58459.397949  27302.426758    0.000000           0.000000  100.026367        0.026367
2 -58059.397949  400.000000 -58259.397949  27302.426758    0.000000           0.000000  200.000000      200.000000
3 -57957.871338  301.526611 -58259.397949  27302.426758  101.513428           0.000000  200.013184      100.013184
4 -57957.871338    1.000000 -58059.397949  27302.426758  101.513428         101.513428    0.013184        0.013184
5 -57555.884521  402.000000 -57984.397949  27302.426758  203.513428         101.513428  225.000000      200.000000
6 -57555.884521    1.000000 -57910.884766  27302.426758  203.513428         203.513428  151.486816      100.000000
7 -57356.858154  350.513184 -57859.397949  27302.426758  302.539795         203.513428  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:58:26]  --------------------------------------------------------------------------------
[07/14 14:58:26]  Iteration: 367 (13 solution, 353 counterexamples)
[07/14 14:58:37]  Generator returned sat in 6.207707 secs.
[07/14 14:58:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:58:38]  Improved number of small numbers from 52 to 62 out of a max of 89
[07/14 14:58:38]  Verifer returned sat in 0.613338 secs.
[07/14 14:58:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58460.397705    0.052490 -58460.411377  27302.42627    0.000000           0.000000    0.013672       -0.999756
1 -58359.391357  101.020020 -58359.397949  27302.42627    0.000000           0.000000    0.006592        0.006592
2 -58007.883057  351.514893 -58259.397949  27302.42627   51.515106           0.000000  199.999786      199.999786
3 -58007.876129  200.006714 -58259.397949  27302.42627   51.521820          51.515106  200.000000      100.000000
4 -58007.876129  101.003357 -58059.404663  27302.42627   51.521820          51.521820    0.006714        0.000000
5 -57555.884521  451.998322 -58059.397949  27302.42627  203.513428          51.521820  300.000000      200.000000
6 -57555.884521  226.999161 -57959.397949  27302.42627  203.513428         203.513428  200.000000      100.000000
7 -57114.885780  640.998741 -57859.397949  27302.42627  544.511963         203.513428  200.000206      100.000206
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:58:38]  --------------------------------------------------------------------------------
[07/14 14:58:38]  Iteration: 368 (13 solution, 354 counterexamples)
[07/14 14:59:13]  Generator returned sat in 31.201896 secs.
[07/14 14:59:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:59:14]  Improved number of small numbers from 24 to 89 out of a max of 89
[07/14 14:59:14]  Verifer returned sat in 0.237603 secs.
[07/14 14:59:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58709.312744    0.052246 -58709.338867  27452.367188    0.000000           0.000000    0.026123      -99.973877
1 -58609.312744  100.026123 -58609.338867  27452.367188    0.000000           0.000000    0.026123      -99.973877
2 -58157.843262  451.495605 -58409.338867  27452.367188   51.495605           0.000000  200.000000      200.000000
3 -58157.816895  200.026367 -58309.338867  27452.367188   51.521973          51.495605  100.000000      100.000000
4 -58157.816895    1.000000 -58209.365234  27452.367188   51.521973          51.521973    0.026367        0.000000
5 -57556.882812  600.960449 -58209.338867  27452.367188  452.456055          51.521973  200.000000      100.000000
6 -57556.882812    1.000000 -58109.338867  27452.367188  452.456055         452.456055  100.000000        0.000000
7 -57355.882812  301.000000 -58009.338867  27452.367188  453.456055         452.456055  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 14:59:14]  --------------------------------------------------------------------------------
[07/14 14:59:14]  Iteration: 369 (13 solution, 355 counterexamples)
[07/14 14:59:39]  Generator returned sat in 20.750124 secs.
[07/14 14:59:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:59:40]  Improved gap from 107/8192 to 0
[07/14 14:59:40]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 14:59:40]  Verifer returned sat in 0.201260 secs.
[07/14 14:59:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58709.312744    0.052246 -58909.312744  27752.341064   0.000000           0.000000  200.000000      200.000000
1 -58709.312744    0.026123 -58809.312744  27752.341064   0.000000           0.000000  100.000000      100.000000
2 -58609.312744  200.000000 -58709.312744  27752.341064   0.000000           0.000000  100.000000      100.000000
3 -58609.312744   99.776123 -58609.338867  27752.341064   0.000000           0.000000    0.026123        0.000000
4 -58409.286621  200.052246 -58509.312744  27752.341064   0.026123           0.000000  100.000000      100.000000
5 -58409.286621    2.000000 -58412.838867  27752.341064   0.026123           0.026123    3.526123        0.000000
6 -58408.312744    4.500000 -58409.312744  27851.367188   0.026123           0.026123    0.973877        0.000000
7 -58399.786621    9.500000 -58408.338867  27851.367188   0.026123           0.026123    8.526123      -91.473877
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 14:59:40]  --------------------------------------------------------------------------------
[07/14 14:59:40]  Iteration: 370 (13 solution, 356 counterexamples)
[07/14 14:59:51]  Generator returned sat in 6.900752 secs.
[07/14 14:59:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:59:52]  Verifer returned unsat in 0.042094 secs.
[07/14 14:59:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 14:59:52]  --------------------------------------------------------------------------------
[07/14 14:59:52]  Iteration: 371 (14 solution, 356 counterexamples)
[07/14 15:00:05]  Generator returned sat in 8.995881 secs.
[07/14 15:00:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:00:06]  Improved gap from 213/8192 to 100
[07/14 15:00:06]  Improved number of small numbers from 24 to 90 out of a max of 90
[07/14 15:00:06]  Verifer returned sat in 0.350811 secs.
[07/14 15:00:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59321.439697    0.051758 -59325.426514  27802.610352    0.000000           0.000000    3.986816        3.986816
1 -59321.439697    0.013184 -59321.452881  27802.610352    0.000000           0.000000    0.013184      -96.013184
2 -59125.413818  196.039062 -59125.426514  27802.610352    0.000000           0.000000    0.012695        0.012695
3 -59125.413574    0.012939 -59125.426514  27802.610352    0.000000           0.000000    0.012939      -99.987061
4 -58724.900635  400.525879 -58925.426514  27802.610352  100.525879           0.000000  100.000000      100.000000
5 -58624.887451  200.013184 -58860.101807  27802.610352  100.538818         100.525879  134.675537      100.000244
6 -58624.887451  134.662354 -58825.426514  27802.610352  100.538818         100.538818  100.000244        0.000244
7 -57855.062988  869.824707 -58725.426514  27802.610352  670.363525         100.538818  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:00:06]  --------------------------------------------------------------------------------
[07/14 15:00:06]  Iteration: 372 (14 solution, 357 counterexamples)
[07/14 15:00:32]  Generator returned sat in 21.730550 secs.
[07/14 15:00:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:00:33]  Improved gap from 2101/4096 to 100
[07/14 15:00:33]  Improved number of small numbers from 44 to 90 out of a max of 90
[07/14 15:00:33]  Verifer returned sat in 0.286060 secs.
[07/14 15:00:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59025.455566    0.051758 -59291.780273  27802.126465    0.000000                0.0  266.324707      200.000000
1 -59025.455566    0.012939 -59125.455566  27802.126465    0.000000                0.0  100.000000      100.000000
2 -59025.442627  100.012939 -59025.468506  27802.126465    0.000000                0.0    0.025879        0.012939
3 -59025.442627    0.012939 -59025.455566  27802.126465    0.000000                0.0    0.012939      -99.987061
4 -58625.455566  400.000000 -58925.455566  27802.126465    0.000000                0.0  300.000000      200.000000
5 -58224.955566  700.500000 -58825.455322  27802.126465  400.500000                0.0  199.999756      100.000000
6 -58224.955566  100.006592 -58625.455566  27802.126465  400.500000              400.5    0.000000        0.000000
7 -57524.448975  700.506592 -58625.455322  27802.126465  801.006592              400.5  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:00:33]  --------------------------------------------------------------------------------
[07/14 15:00:33]  Iteration: 373 (14 solution, 358 counterexamples)
[07/14 15:00:56]  Generator returned sat in 18.950550 secs.
[07/14 15:00:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:00:57]  Improved gap from 8139/8192 to 0
[07/14 15:00:57]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 15:00:57]  Verifer returned sat in 0.237005 secs.
[07/14 15:00:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59025.455566    0.051758 -59226.205566  27702.876465   0.000000           0.000000  200.750000      100.750000
1 -59025.455566  200.750000 -59125.455566  27702.876465   0.000000           0.000000  100.000000        0.750000
2 -59025.455566    0.025879 -59025.455566  27702.876465   0.000000           0.000000    0.000000      -99.250000
3 -58926.179688   99.275879 -58926.205566  27802.850586   0.000000           0.000000    0.025879        0.000000
4 -58726.153809  200.051758 -58826.179688  27802.850586   0.025879           0.000000  100.000000      100.000000
5 -58726.153809    2.000000 -58730.705566  27802.850586   0.025879           0.025879    4.525879        0.000000
6 -58725.179688    5.500000 -58726.179688  27901.876465   0.025879           0.025879    0.974121        0.000000
7 -58713.653809   12.500000 -58725.205566  27901.876465   0.025879           0.025879   11.525879      -88.474121
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 15:00:57]  --------------------------------------------------------------------------------
[07/14 15:00:57]  Iteration: 374 (14 solution, 359 counterexamples)
[07/14 15:01:13]  Generator returned sat in 11.772044 secs.
[07/14 15:01:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:01:14]  Improved gap from 0 to 100
[07/14 15:01:14]  Improved number of small numbers from 32 to 57 out of a max of 90
[07/14 15:01:14]  Verifer returned sat in 0.758456 secs.
[07/14 15:01:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59825.788086    0.051270 -60024.230188  27802.850586    0.000000           0.000000  198.442102      100.000055
1 -59825.788086  198.441895 -59925.775391  27802.850586    0.000000           0.000000   99.987305        0.000055
2 -59525.788330  399.987061 -59792.284921  27802.850586    0.000000           0.000000  266.496591      199.999811
3 -59525.788330    0.012878 -59725.762384  27802.850586    0.000000           0.000000  199.974054       99.999811
4 -59425.775262  299.987122 -59577.794434  27802.850586    0.012878           0.000000  152.006293      100.000000
5 -59425.775262  151.993561 -59425.801019  27802.850586    0.012878           0.012878    0.012878        0.000000
6 -58829.813898  595.974243 -59425.788086  27802.850586  295.974365           0.012878  299.999823      199.999878
7 -58829.813898  299.987122 -59325.788086  27802.850586  295.974365         295.974365  199.999823       99.999878
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:01:15]  --------------------------------------------------------------------------------
[07/14 15:01:15]  Iteration: 375 (14 solution, 360 counterexamples)
[07/14 15:01:42]  Generator returned sat in 22.930025 secs.
[07/14 15:01:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:01:42]  Improved gap from 6175193/81920 to 100
[07/14 15:01:43]  Improved number of small numbers from 41 to 53 out of a max of 90
[07/14 15:01:43]  Verifer returned sat in 0.845785 secs.
[07/14 15:01:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -60601.431396    0.051270 -60601.456787  27802.850586    0.000000           0.000000    0.025391        0.012640
1 -60601.431396    0.012939 -60601.444037  27802.850586    0.000000           0.000000    0.012640      -99.987360
2 -60401.444037  200.000000 -60501.444037  27802.850586    0.000000           0.000000  100.000000        0.000000
3 -60175.044037  326.400000 -60401.443848  27802.850586   26.387183           0.000000  200.012628      100.012817
4 -60175.044037  165.200000 -60201.444037  27802.850586   26.387183          26.387183    0.012817        0.012817
5 -59526.256854  648.800000 -60201.444037  27802.850586  475.187183          26.387183  200.000000      100.000000
6 -59399.856854  326.400000 -60001.444037  27802.850586  501.587183         475.187183  100.000000      100.000000
7 -59334.656854  165.200000 -60001.443848  27802.850586  501.587183         501.587183  165.199811       65.200000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:01:43]  --------------------------------------------------------------------------------
[07/14 15:01:43]  Iteration: 376 (14 solution, 361 counterexamples)
[07/14 15:02:10]  Generator returned sat in 21.989194 secs.
[07/14 15:02:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:02:10]  Improved gap from 95 to 100
[07/14 15:02:11]  Improved number of small numbers from 29 to 88 out of a max of 90
[07/14 15:02:11]  Verifer returned sat in 0.744761 secs.
[07/14 15:02:11]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -60526.037109     0.051270 -60626.050049  27626.943848    0.000000           0.000000  100.012939      100.012939
1 -60526.037109     0.012939 -60526.050049  27626.943848    0.000000           0.000000    0.012939        0.012939
2 -60426.037109   100.012939 -60426.050049  27626.943848    0.000000           0.000000    0.012939        0.012939
3 -60426.037109     0.012817 -60426.050049  27626.943848    0.000000           0.000000    0.012939      -99.987061
4 -60125.524414   300.525635 -60292.883301  27626.943848    0.525635           0.000000  166.833252      100.000000
5 -60025.511475   266.846191 -60226.050049  27626.943848    0.538330           0.525635  200.000244      100.000244
6 -59992.088623   233.423096 -60026.050049  27626.943848    0.538330           0.538330   33.423096       33.423096
7 -58958.165527  1067.346191 -60026.049805  27626.943848  767.884521           0.538330  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:02:11]  --------------------------------------------------------------------------------
[07/14 15:02:11]  Iteration: 377 (14 solution, 362 counterexamples)
[07/14 15:02:42]  Generator returned sat in 26.709345 secs.
[07/14 15:02:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:02:43]  Improved gap from 105/8192 to 100
[07/14 15:02:43]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/14 15:02:43]  Verifer returned sat in 0.224133 secs.
[07/14 15:02:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -60526.037354    0.051270 -60526.062988  27626.943604     0.000000           0.000000    0.025635        0.025635
1 -60526.037354    0.012695 -60526.056641  27626.943604     0.000000           0.000000    0.019287      -99.974365
2 -60326.062988  199.993652 -60326.075439  27626.943604     0.000000           0.000000    0.012451        0.000000
3 -59726.075439  600.000000 -60326.062988  27626.943604   399.987305           0.000000  200.000244      100.000244
4 -59526.075684  400.000000 -60226.062988  27626.943604   399.987305         399.987305  300.000000      200.000000
5 -59026.088379  799.987305 -60126.062744  27626.943604   899.974121         399.987305  200.000244      100.000488
6 -58726.088623  500.000000 -60026.062988  27626.943604  1099.974365         899.974121  200.000000      100.000000
7 -58526.088623  400.000000 -59926.062744  27626.943604  1099.974365        1099.974365  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:02:43]  --------------------------------------------------------------------------------
[07/14 15:02:43]  Iteration: 378 (14 solution, 363 counterexamples)
[07/14 15:02:55]  Generator returned sat in 7.992811 secs.
[07/14 15:02:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:02:56]  Improved gap from 0 to 100
[07/14 15:02:56]  Improved number of small numbers from 34 to 90 out of a max of 90
[07/14 15:02:56]  Verifer returned sat in 0.442111 secs.
[07/14 15:02:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59037.582764    0.051025 -59137.589111  27626.943604   0.000000           0.000000  100.006348      100.006348
1 -59037.582764    0.006348 -59137.588867  27626.943604   0.000000           0.000000  100.006104        0.006348
2 -59037.582764    0.006592 -59037.588867  27626.943604   0.000000           0.000000    0.006104      -99.993652
3 -58737.582520  300.006348 -58904.253662  27626.943604   0.006592           0.000000  166.664551      100.000000
4 -58637.576172  266.670898 -58804.336914  27626.943604   0.012939           0.006592  166.747803      100.000000
5 -58504.362549  299.961426 -58670.905273  27626.943604   0.019287           0.012939  166.523438      133.207275
6 -58337.563477  333.322510 -58637.588867  27626.943604   0.025635           0.019287  299.999756      200.000000
7 -58337.563477  299.993652 -58537.589111  27626.943604   0.025635           0.025635  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:02:57]  --------------------------------------------------------------------------------
[07/14 15:02:57]  Iteration: 379 (14 solution, 364 counterexamples)
[07/14 15:03:13]  Generator returned sat in 11.987629 secs.
[07/14 15:03:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:03:14]  Improved number of small numbers from 53 to 81 out of a max of 89
[07/14 15:03:14]  Verifer returned sat in 0.619644 secs.
[07/14 15:03:14]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59037.583008     0.050781 -59237.582764  27626.943359     0.000000           0.000000  199.999756      199.999756
1 -59037.583008     0.025391 -59237.582764  27626.943359     0.000000           0.000000  199.999756       99.999756
2 -59037.583008     0.025391 -59037.608154  27626.943359     0.000000           0.000000    0.025146       -0.000244
3 -58837.557129   200.051025 -58970.916260  27626.943359     0.025513           0.000000  133.333618      100.000122
4 -58837.557129   133.333252 -58837.608276  27626.943359     0.025513           0.025513    0.025635        0.000122
5 -57770.967285  1066.615479 -58837.582764  27626.943359   766.615479           0.025513  300.000000      200.000000
6 -57770.967285   100.012695 -58737.582764  27626.943359   766.615479         766.615479  200.000000      100.000000
7 -57304.274902   666.692383 -58637.582764  27626.943359  1133.307617         766.615479  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:03:14]  --------------------------------------------------------------------------------
[07/14 15:03:14]  Iteration: 380 (14 solution, 365 counterexamples)
[07/14 15:03:25]  Generator returned sat in 6.609094 secs.
[07/14 15:03:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:03:26]  Improved gap from 13/1024 to 100
[07/14 15:03:26]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 15:03:26]  Verifer returned sat in 0.235795 secs.
[07/14 15:03:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59884.633789    0.050537 -59984.633789  27626.943359    0.000000           0.000000  100.000000      100.000000
1 -59884.633789    0.012695 -59984.633789  27626.943359    0.000000           0.000000  100.000000        0.000000
2 -59584.633789  400.000000 -59784.633789  27626.943359    0.000000           0.000000  200.000000      200.000000
3 -59584.633789    0.012695 -59784.633789  27626.943359    0.000000           0.000000  200.000000      100.000000
4 -59484.621094  300.012695 -59684.633789  27626.943359    0.000000           0.000000  200.012695      100.012695
5 -58934.621094  750.012695 -59517.975586  27626.943359  450.012695           0.000000  133.341797      100.000000
6 -58934.621094  133.329102 -59484.633789  27626.943359  450.012695         450.012695  100.000000        0.000000
7 -58451.291992  583.329102 -59384.633789  27626.943359  733.341553         450.012695  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:03:26]  --------------------------------------------------------------------------------
[07/14 15:03:26]  Iteration: 381 (14 solution, 366 counterexamples)
[07/14 15:03:37]  Generator returned sat in 6.336642 secs.
[07/14 15:03:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:03:38]  Improved number of small numbers from 71 to 85 out of a max of 89
[07/14 15:03:38]  Verifer returned sat in 0.324741 secs.
[07/14 15:03:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -60087.158936    0.050293 -60187.171875  27829.481201     0.000000           0.000000  100.012939      100.012939
1 -60087.158936  100.000000 -60087.171875  27829.481201     0.000000           0.000000    0.012939        0.012939
2 -59787.171875  300.000000 -59987.171875  27829.481201     0.000000           0.000000  200.000000      200.000000
3 -59787.171875    0.012451 -59987.171631  27829.481201     0.000000           0.000000  199.999756      100.000000
4 -59687.146362  300.025269 -59866.171875  27829.481201     0.000000           0.000000  179.025513      100.025513
5 -58934.621338  931.550537 -59787.171875  27829.481201   652.550537           0.000000  200.000000      100.000000
6 -58934.621338  100.000000 -59587.184326  27829.481201   652.550537         652.550537    0.012451        0.000000
7 -58134.652832  799.980957 -59587.171631  27829.481201  1252.518799         652.550537  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:03:38]  --------------------------------------------------------------------------------
[07/14 15:03:38]  Iteration: 382 (14 solution, 367 counterexamples)
[07/14 15:03:52]  Generator returned sat in 9.498762 secs.
[07/14 15:03:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:03:53]  Improved number of small numbers from 61 to 79 out of a max of 89
[07/14 15:03:53]  Verifer returned sat in 0.536266 secs.
[07/14 15:03:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -60120.513346    0.050049 -60220.538493  27829.481201    0.000000           0.000000  100.025146      100.024984
1 -60120.513346    0.025146 -60120.538330  27829.481201    0.000000           0.000000    0.024984        0.024984
2 -59987.146484  133.391846 -60120.538330  27829.481201    0.000000           0.000000  133.391846       33.391846
3 -59987.146484   22.177517 -59987.171631  27829.481201    0.000000           0.000000    0.025146      -66.608154
4 -59720.538493  266.633138 -59920.538330  27829.481201    0.000000           0.000000  199.999837       99.999837
5 -59320.588623  599.949707 -59820.538330  27829.481201  199.949707           0.000000  300.000000      200.000000
6 -59320.588623  299.974854 -59620.538493  27829.481201  199.949707         199.949707  100.000163      100.000000
7 -58603.993368  816.595418 -59620.538330  27829.481201  816.544922         199.949707  200.000041      100.000041
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:03:53]  --------------------------------------------------------------------------------
[07/14 15:03:53]  Iteration: 383 (14 solution, 368 counterexamples)
[07/14 15:04:06]  Generator returned sat in 8.873450 secs.
[07/14 15:04:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:04:07]  Improved number of small numbers from 37 to 55 out of a max of 89
[07/14 15:04:07]  Verifer returned sat in 0.707481 secs.
[07/14 15:04:07]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -60120.513428    0.049805 -60120.525859  27829.480957    0.000000           0.000000    0.012431        0.012431
1 -60120.513428    0.006104 -60120.525635  27829.480957    0.000000           0.000000    0.012207      -99.987569
2 -59920.519531  200.006104 -60020.525635  27829.480957    0.000000           0.000000  100.006104        0.006327
3 -59920.519531    0.012512 -59920.525859  27829.480957    0.000000           0.000000    0.006327      -99.993673
4 -59520.513346  400.012512 -59720.525859  27829.480957    0.012512           0.000000  200.000000      200.000000
5 -59520.507090  200.006256 -59720.525635  27829.480957    0.018768           0.012512  199.999776      100.000000
6 -59520.507090  100.003128 -59620.525859  27829.480957    0.018768           0.018768  100.000000        0.000000
7 -58920.503962  700.003128 -59520.525635  27829.480957  400.021729           0.018768  199.999944      100.000168
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:04:08]  --------------------------------------------------------------------------------
[07/14 15:04:08]  Iteration: 384 (14 solution, 369 counterexamples)
[07/14 15:04:40]  Generator returned sat in 27.763387 secs.
[07/14 15:04:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:04:40]  Improved gap from 0 to 100
[07/14 15:04:41]  Improved number of small numbers from 57 to 75 out of a max of 90
[07/14 15:04:41]  Verifer returned sat in 0.558441 secs.
[07/14 15:04:41]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59520.013184    0.049561 -59620.013428  27829.480957    0.000000             0.0000  100.000244      100.000157
1 -59520.013184    0.002686 -59620.013340  27829.480957    0.000000             0.0000  100.000157        0.000157
2 -59520.013184    0.002686 -59520.013184  27829.480957    0.000000             0.0000    0.000000      -99.999843
3 -59220.010742  300.002441 -59320.013340  27829.480957    0.002500             0.0000  100.000098      100.000098
4 -59220.010742    0.010000 -59220.013340  27829.480957    0.002500             0.0025    0.000098        0.000098
5 -58819.495840  400.515000 -59220.013184  27829.480957  100.517500             0.0025  299.999843      200.000000
6 -58819.495840    0.010000 -59070.269590  27829.480957  100.517500           100.5175  150.256250      100.000000
7 -58719.493340  250.258750 -59020.013184  27829.480957  100.519775           100.5175  200.000068      100.000225
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:04:41]  --------------------------------------------------------------------------------
[07/14 15:04:41]  Iteration: 385 (14 solution, 370 counterexamples)
[07/14 15:05:08]  Generator returned sat in 22.028970 secs.
[07/14 15:05:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:05:08]  Verifer returned unsat in 0.034341 secs.
[07/14 15:05:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:05:08]  --------------------------------------------------------------------------------
[07/14 15:05:08]  Iteration: 386 (15 solution, 370 counterexamples)
[07/14 15:05:20]  Generator returned sat in 7.432861 secs.
[07/14 15:05:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:05:20]  Improved gap from 0 to 100
[07/14 15:05:21]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/14 15:05:21]  Verifer returned sat in 0.256724 secs.
[07/14 15:05:21]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59419.531982    0.049805 -59719.025879  27829.480713    0.000000           0.000000  299.493896      200.000000
1 -59419.531982    0.012451 -59519.532227  27829.480713    0.000000           0.000000  100.000244      100.000000
2 -59419.531982    0.012451 -59419.531982  27829.480713    0.000000           0.000000    0.000000        0.000000
3 -59419.519775    0.012207 -59419.531982  27829.480713    0.000000           0.000000    0.012207      -99.987793
4 -59119.519775  300.012207 -59219.532227  27829.480713    0.012207           0.000000  100.000244      100.000000
5 -59119.519775    0.500000 -59219.531982  27829.480713    0.012207           0.012207  100.000000        0.000000
6 -59018.269775  201.250000 -59119.531982  27829.480713    0.012207           0.012207  101.250000        1.250000
7 -58517.144775  602.375000 -59019.531982  27829.480713  302.387207           0.012207  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:05:21]  --------------------------------------------------------------------------------
[07/14 15:05:21]  Iteration: 387 (15 solution, 371 counterexamples)
[07/14 15:05:32]  Generator returned sat in 6.509209 secs.
[07/14 15:05:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:05:33]  Improved number of small numbers from 57 to 85 out of a max of 89
[07/14 15:05:33]  Verifer returned sat in 0.464401 secs.
[07/14 15:05:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59468.263184    0.049805 -59619.531982  27829.480469    0.000000           0.000000  151.268799      151.268799
1 -59468.263184    0.024902 -59519.532227  27829.480469    0.000000           0.000000   51.269043       51.268799
2 -59468.263184    0.024902 -59468.263306  27829.480469    0.000000           0.000000    0.000122      -48.731201
3 -59069.213501  399.049805 -59319.531982  27829.480469  150.318359           0.000000  100.000122      100.000122
4 -58969.188721  200.024902 -59220.069336  27829.480469  150.343262         150.318359  100.537354      100.000000
5 -58969.188721  100.512451 -59219.531982  27829.480469  150.343262         150.343262  100.000000        0.000000
6 -58669.188721  400.000000 -59119.531982  27829.480469  150.343262         150.343262  300.000000      200.000000
7 -58168.688721  800.500000 -59019.531982  27829.480469  650.843262         150.343262  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:05:33]  --------------------------------------------------------------------------------
[07/14 15:05:33]  Iteration: 388 (15 solution, 372 counterexamples)
[07/14 15:06:16]  Generator returned sat in 38.888764 secs.
[07/14 15:06:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:06:17]  Verifer returned unsat in 0.051465 secs.
[07/14 15:06:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:06:17]  --------------------------------------------------------------------------------
[07/14 15:06:17]  Iteration: 389 (16 solution, 372 counterexamples)
[07/14 15:06:44]  Generator returned sat in 22.290646 secs.
[07/14 15:06:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:06:44]  Verifer returned unsat in 0.025740 secs.
[07/14 15:06:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:06:44]  --------------------------------------------------------------------------------
[07/14 15:06:44]  Iteration: 390 (17 solution, 372 counterexamples)
[07/14 15:07:05]  Generator returned sat in 16.537436 secs.
[07/14 15:07:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:07:06]  Improved gap from 51/2048 to 100
[07/14 15:07:06]  Improved number of small numbers from 81 to 90 out of a max of 90
[07/14 15:07:06]  Verifer returned sat in 0.213832 secs.
[07/14 15:07:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59419.532715    0.049561 -59519.532959  27879.450195    0.000000           0.000000  100.000244      100.000244
1 -59419.532715    0.024658 -59519.532715  27879.450195    0.000000           0.000000  100.000000        0.000244
2 -59319.507812  200.024902 -59321.107666  27879.450195    0.000000           0.000000    1.599854        0.025146
3 -59319.507812    1.599609 -59319.532959  27879.450195    0.000000           0.000000    0.025146      -99.974854
4 -58916.433350  403.099609 -59219.532715  27879.450195  101.524902           0.000000  201.574463      101.574707
5 -58916.433350  201.549805 -59019.532959  27879.450195  101.524902         101.524902    1.574707        1.574707
6 -58111.808838  806.199219 -59019.532959  27879.450195  607.724121         101.524902  300.000000      200.000000
7 -58008.709229  403.099609 -58919.532715  27879.450195  610.823730         607.724121  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:07:06]  --------------------------------------------------------------------------------
[07/14 15:07:06]  Iteration: 391 (17 solution, 373 counterexamples)
[07/14 15:07:17]  Generator returned sat in 7.018333 secs.
[07/14 15:07:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:07:18]  Verifer returned unsat in 0.029171 secs.
[07/14 15:07:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:07:18]  --------------------------------------------------------------------------------
[07/14 15:07:18]  Iteration: 392 (18 solution, 373 counterexamples)
[07/14 15:07:58]  Generator returned sat in 36.014894 secs.
[07/14 15:07:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:07:59]  Improved gap from 1/800 to 100
[07/14 15:07:59]  Improved number of small numbers from 57 to 74 out of a max of 90
[07/14 15:07:59]  Verifer returned sat in 0.701504 secs.
[07/14 15:08:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58780.860840    0.049561 -58780.861084  27879.450195     0.0000             0.0000    0.000244      -66.331543
1 -58714.526855   66.334229 -58714.529209  27879.450195     0.0000             0.0000    0.002354      -99.997559
2 -58545.526709  169.002500 -58545.529053  27879.450195     0.0000             0.0000    0.002344      -30.997412
3 -58314.526611  231.002441 -58514.529209  27879.450195     0.0025             0.0000  200.000098      100.000186
4 -58314.526611    0.010000 -58414.529209  27879.450195     0.0025             0.0025  100.000098        0.000186
5 -57964.006709  450.520000 -58214.529297  27879.450195   150.5225             0.0025  100.000088      100.000088
6 -57964.006709    0.010000 -58214.529209  27879.450195   150.5225           150.5225  100.000000        0.000088
7 -57613.486709  450.520000 -58114.529297  27879.450195   301.0425           150.5225  200.000088      100.000088
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:08:00]  --------------------------------------------------------------------------------
[07/14 15:08:00]  Iteration: 393 (18 solution, 374 counterexamples)
[07/14 15:08:14]  Generator returned sat in 9.658907 secs.
[07/14 15:08:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:08:14]  Improved gap from 1/400 to 100
[07/14 15:08:15]  Improved number of small numbers from 78 to 86 out of a max of 90
[07/14 15:08:15]  Verifer returned sat in 0.269764 secs.
[07/14 15:08:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58714.526855    0.049316 -58714.529297  27879.450195    0.000000             0.0000    0.002441        0.002441
1 -58714.526611    0.002686 -58714.529297  27879.450195    0.000000             0.0000    0.002686      -99.997314
2 -58314.529297  400.000000 -58514.529297  27879.450195    0.000000             0.0000  200.000000      200.000000
3 -58314.526611  200.002686 -58514.529297  27879.450195    0.002500             0.0000  200.000186      100.000186
4 -58314.526611    0.010000 -58414.529297  27879.450195    0.002500             0.0025  100.000186        0.000186
5 -57964.021797  450.505000 -58314.529297  27879.450195  150.507500             0.0025  200.000000      100.000000
6 -57964.021797    0.010000 -58214.529297  27879.450195  150.507500           150.5075  100.000000        0.000000
7 -57613.516797  450.505000 -58114.529297  27879.450195  301.012451           150.5075  200.000049      100.000049
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:08:15]  --------------------------------------------------------------------------------
[07/14 15:08:15]  Iteration: 394 (18 solution, 375 counterexamples)
[07/14 15:08:32]  Generator returned sat in 12.406705 secs.
[07/14 15:08:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:08:32]  Improved gap from 507/1024 to 0
[07/14 15:08:33]  Improved number of small numbers from 73 to 80 out of a max of 90
[07/14 15:08:33]  Verifer returned sat in 0.366743 secs.
[07/14 15:08:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58714.504883    0.049072 -58714.529541  27879.450195   0.000000           0.000000    0.024658        0.024414
1 -58714.504883    0.024414 -58714.529297  27879.450195   0.000000           0.000000    0.024414      -99.975586
2 -58414.529297  300.000000 -58614.029541  27879.450195   0.000000           0.000000  199.500244      100.000000
3 -58414.504883  199.524658 -58414.529297  27879.450195   0.000000           0.000000    0.024414        0.024414
4 -58214.504639  200.024658 -58314.566406  27879.450195   0.024658           0.000000  100.037109      100.000000
5 -58214.504639  100.012329 -58314.103271  27879.450195   0.024658           0.024658   99.573975        0.000000
6 -58213.566284  100.512329 -58214.529297  27978.511719   0.024658           0.024658    0.938354       -0.000122
7 -58113.492310  101.012329 -58213.590820  27978.511719   0.024658           0.024658  100.073853        0.073853
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 15:08:33]  --------------------------------------------------------------------------------
[07/14 15:08:33]  Iteration: 395 (18 solution, 376 counterexamples)
[07/14 15:08:46]  Generator returned sat in 8.765466 secs.
[07/14 15:08:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:08:47]  Improved number of small numbers from 29 to 89 out of a max of 89
[07/14 15:08:47]  Verifer returned sat in 0.283347 secs.
[07/14 15:08:47]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58780.846436     0.048828 -58880.859131  27945.779541     0.000000           0.000000  100.012695        0.012695
1 -58780.846436     0.012207 -58780.858887  27945.779541     0.000000           0.000000    0.012451      -99.987305
2 -58480.858887   300.000000 -58580.859131  27945.779541     0.000000           0.000000  100.000244      100.000244
3 -58380.846680   200.012451 -58547.525635  27945.779541     0.012451           0.000000  166.666504      100.000000
4 -58380.846436   166.666748 -58380.871338  27945.779541     0.012451           0.012451    0.012451        0.000244
5 -57247.050293  1133.808594 -58380.859131  27945.779541   933.808594           0.012451  200.000244      100.000244
6 -57247.050293   100.000000 -58280.858887  27945.779541   933.808594         933.808594  100.000000        0.000244
7 -56613.216797   733.833496 -58180.858887  27945.779541  1367.642090         933.808594  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:08:47]  --------------------------------------------------------------------------------
[07/14 15:08:47]  Iteration: 396 (18 solution, 377 counterexamples)
[07/14 15:09:03]  Generator returned sat in 11.653603 secs.
[07/14 15:09:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:09:04]  Improved number of small numbers from 55 to 63 out of a max of 89
[07/14 15:09:04]  Verifer returned sat in 0.605366 secs.
[07/14 15:09:04]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58743.101562    0.048828 -58880.859131  27945.779541    0.000000           0.000000  137.757568       37.757568
1 -58743.101562    0.002930 -58743.104462  27945.779541    0.000000           0.000000    0.002899      -62.242432
2 -58480.858887  262.245575 -58680.859131  27945.779541    0.000000           0.000000  200.000244      100.000244
3 -58380.846680  300.012451 -58530.865112  27945.779541    0.012451           0.000000  150.005981      100.000000
4 -58380.846436  150.006226 -58480.859131  27945.779541    0.012451           0.012451  100.000244        0.000244
5 -57880.852905  599.993774 -58380.859131  27945.779541  200.006226           0.012451  300.000000      200.000000
6 -57880.852905  299.996887 -58280.858887  27945.779541  200.006226         200.006226  199.999756      100.000000
7 -57430.341766  650.510895 -58180.859131  27945.779541  550.517334         200.006226  200.000031      100.000031
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:09:04]  --------------------------------------------------------------------------------
[07/14 15:09:04]  Iteration: 397 (18 solution, 378 counterexamples)
[07/14 15:09:17]  Generator returned sat in 8.522607 secs.
[07/14 15:09:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:09:18]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 15:09:18]  Verifer returned sat in 0.123676 secs.
[07/14 15:09:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58880.859131    0.048828 -58880.859131  27945.779297   0.000000           0.000000    0.000000             0.0
1 -58680.859131  200.000000 -58830.420166  27945.779297   0.000000           0.000000  149.561035           100.0
2 -58680.859131    0.024414 -58680.883545  27945.779297   0.000000           0.000000    0.024414             0.0
3 -58480.834717  200.048828 -58580.907959  27945.779297   0.024414           0.000000  100.048828           100.0
4 -58480.834717  100.024414 -58580.859131  27945.779297   0.024414           0.024414  100.000000             0.0
5 -58180.737061  400.097656 -58380.859131  27945.779297   0.122070           0.024414  200.000000           200.0
6 -58180.688232  200.048828 -58280.907959  27945.779297   0.170898           0.122070  100.048828           100.0
7 -58180.688232  100.024414 -58280.859131  27945.779297   0.170898           0.170898  100.000000             0.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:09:18]  --------------------------------------------------------------------------------
[07/14 15:09:18]  Iteration: 398 (18 solution, 379 counterexamples)
[07/14 15:09:57]  Generator returned sat in 34.632197 secs.
[07/14 15:09:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:09:58]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 15:09:58]  Verifer returned sat in 0.110389 secs.
[07/14 15:09:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58880.859131    0.048584 -58880.859131  27945.779053   0.000000           0.000000    0.000000        0.000000
1 -58680.859131  200.000000 -58829.389648  27945.779053   0.000000           0.000000  148.530518      100.000000
2 -58680.859131    0.012207 -58680.871338  27945.779053   0.000000           0.000000    0.012207        0.000000
3 -58480.846924  200.024414 -58580.908203  27945.779053   0.012207           0.000000  100.049072      100.000000
4 -58480.846924  100.012207 -58580.859131  27945.779053   0.012207           0.012207  100.000000        0.000000
5 -58180.798096  400.048828 -58380.859131  27945.779053   0.146484           0.012207  199.914551      199.914551
6 -58180.688232  200.024414 -58280.908203  27945.779053   0.158691           0.146484  100.061279      100.012207
7 -58180.688232  100.012207 -58280.859131  27945.779053   0.158691           0.158691  100.012207        0.012207
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:09:58]  --------------------------------------------------------------------------------
[07/14 15:09:58]  Iteration: 399 (18 solution, 380 counterexamples)
[07/14 15:10:24]  Generator returned sat in 21.512313 secs.
[07/14 15:10:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:10:25]  Improved gap from 49/4096 to 100
[07/14 15:10:25]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/14 15:10:25]  Verifer returned sat in 0.132354 secs.
[07/14 15:10:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58880.859375    0.048340 -58880.859375  27945.779053   0.000000           0.000000    0.000000        0.000000
1 -58680.859375  200.000000 -58829.389648  27945.779053   0.000000           0.000000  148.530273      100.000000
2 -58680.859375    0.012207 -58680.871338  27945.779053   0.000000           0.000000    0.011963        0.000000
3 -58480.846924  200.024414 -58580.908203  27945.779053   0.011963           0.000000  100.049316      100.000488
4 -58480.846924  100.012207 -58580.359131  27945.779053   0.011963           0.011963   99.500244        0.000488
5 -58180.298340  400.048828 -58380.859375  27945.779053   0.561035           0.011963  200.000000      200.000000
6 -58180.273926  200.024414 -58280.908447  27945.779053   0.585449           0.561035  100.049072      100.000000
7 -58180.273926  100.012207 -58280.859375  27945.779053   0.585449           0.585449  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:10:25]  --------------------------------------------------------------------------------
[07/14 15:10:25]  Iteration: 400 (18 solution, 381 counterexamples)
[07/14 15:11:08]  Generator returned sat in 38.263941 secs.
[07/14 15:11:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:11:09]  Improved number of small numbers from 62 to 87 out of a max of 89
[07/14 15:11:09]  Verifer returned sat in 0.394516 secs.
[07/14 15:11:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58880.859375    0.047852 -58880.859375  27945.778809   0.000000           0.000000    0.000000        0.000000
1 -58680.859375  200.000000 -58826.228760  27945.778809   0.000000           0.000000  145.369385      100.000000
2 -58680.859375    0.024170 -58680.883301  27945.778809   0.000000           0.000000    0.023926        0.000000
3 -58480.835449  200.047852 -58581.407471  27945.778809   0.023926           0.000000  100.548096      100.000000
4 -58480.835449  100.523926 -58579.418457  27945.778809   0.023926           0.023926   98.559082        0.000000
5 -58180.298340  399.096191 -58380.883545  27945.778809   0.561279           0.023926  200.023926      199.999756
6 -58180.274170  200.048096 -58281.407471  27945.778809   0.585205           0.561279  100.548096      100.000000
7 -58180.274170  100.524048 -58280.859375  27945.778809   0.585205           0.585205  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:11:09]  --------------------------------------------------------------------------------
[07/14 15:11:09]  Iteration: 401 (18 solution, 382 counterexamples)
[07/14 15:11:27]  Generator returned sat in 13.448841 secs.
[07/14 15:11:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:11:28]  Improved gap from 0 to 100
[07/14 15:11:28]  Improved number of small numbers from 73 to 80 out of a max of 90
[07/14 15:11:28]  Verifer returned sat in 0.369017 secs.
[07/14 15:11:28]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58747.510010    0.047607 -58747.510091  27945.778564    0.000000           0.000000    0.000081        0.000000
1 -58480.835449  266.674642 -58747.510010  27945.778564    0.000000           0.000000  266.674561      166.674561
2 -58480.835449    0.023682 -58547.510254  27945.778564    0.000000           0.000000   66.674805       66.674561
3 -58480.835449   66.674642 -58480.835449  27945.778564    0.000000           0.000000    0.000000      -33.325439
4 -58247.486165  233.349284 -58364.708496  27945.778564    0.023682           0.000000  117.198649      100.000163
5 -58247.486165  117.174642 -58289.152832  27945.778564    0.023682           0.023682   41.642985        0.000163
6 -57984.188477  304.940674 -58247.510010  27945.778564    0.023682           0.023682  263.297852      163.297852
7 -57673.412598  574.073730 -58147.510010  27945.778564  274.097412           0.023682  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:11:28]  --------------------------------------------------------------------------------
[07/14 15:11:28]  Iteration: 402 (18 solution, 383 counterexamples)
[07/14 15:12:24]  Generator returned sat in 51.118179 secs.
[07/14 15:12:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:12:25]  Improved number of small numbers from 62 to 73 out of a max of 89
[07/14 15:12:25]  Verifer returned sat in 0.416442 secs.
[07/14 15:12:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58647.510010    0.047607 -58747.510010  27945.778564    0.000000               0.00  100.000000       99.999756
1 -58647.510010    0.002441 -58647.510010  27945.778564    0.000000               0.00    0.000000       -0.000244
2 -58595.458252   52.051758 -58595.460635  27945.778564    0.000000               0.00    0.002383      -47.948486
3 -58546.480010   48.980625 -58546.482510  27945.778809    0.000000               0.00    0.002500      -98.970000
4 -58347.507510  198.975000 -58347.510010  27945.778809    0.000000               0.00    0.002500        0.002500
5 -57799.060010  548.450000 -58347.510010  27945.778809  348.450000               0.00  200.000000      100.000000
6 -57799.060010    0.010000 -58147.512510  27945.778809  348.450000             348.45    0.002500        0.000000
7 -57599.057510  200.005000 -58047.510254  27945.778809  348.452393             348.45  100.000352      100.000107
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:12:25]  --------------------------------------------------------------------------------
[07/14 15:12:25]  Iteration: 403 (18 solution, 384 counterexamples)
[07/14 15:12:44]  Generator returned sat in 13.993882 secs.
[07/14 15:12:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:12:45]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/14 15:12:45]  Verifer returned sat in 0.235267 secs.
[07/14 15:12:45]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58446.982422    0.047363 -58746.982422  27845.250977    0.000000                0.0  300.000000      200.000000
1 -58446.982422    0.002197 -58546.982422  27845.250977    0.000000                0.0  100.000000      100.000000
2 -58446.982422  100.000000 -58546.982178  27845.250977    0.000000                0.0   99.999756        0.000000
3 -58421.732178  125.250000 -58446.982422  27845.250977    0.000000                0.0   25.250244      -74.749756
4 -58045.982422  401.000000 -58246.982422  27845.250977  101.000000                0.0  100.000000      100.000000
5 -57945.482422  200.500000 -58146.982422  27845.250977  101.500000              101.0  100.000000      100.000000
6 -57945.232422  100.250000 -58046.982422  27845.250977  101.500000              101.5    0.250000        0.250000
7 -57544.482422  401.000000 -58046.982178  27845.250977  302.499756              101.5  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:12:45]  --------------------------------------------------------------------------------
[07/14 15:12:45]  Iteration: 404 (18 solution, 385 counterexamples)
[07/14 15:12:58]  Generator returned sat in 8.502472 secs.
[07/14 15:12:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:12:58]  Improved number of small numbers from 67 to 89 out of a max of 89
[07/14 15:12:58]  Verifer returned sat in 0.157173 secs.
[07/14 15:12:59]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58446.982666    0.047119 -58646.982422  27845.250732    0.000000                0.0  199.999756      199.999756
1 -58446.982666    0.001953 -58546.982422  27845.250732    0.000000                0.0   99.999756       99.999756
2 -58446.981201  100.001221 -58446.982422  27845.250732    0.000000                0.0    0.001221        0.001221
3 -58421.732422   25.250000 -58446.982422  27845.250732    0.000000                0.0   25.250000      -74.750000
4 -58034.357422  412.625000 -58252.794922  27845.250732  101.000000                0.0  117.437500      111.625000
5 -57945.482422  206.312500 -58149.888672  27845.250732  101.500000              101.0  102.906250      100.000000
6 -57945.232422  103.156250 -58046.982422  27845.250732  101.500000              101.5    0.250000        0.250000
7 -57093.904297  851.578125 -58046.982178  27845.250732  653.078369              101.5  299.999512      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:12:59]  --------------------------------------------------------------------------------
[07/14 15:12:59]  Iteration: 405 (18 solution, 386 counterexamples)
[07/14 15:13:11]  Generator returned sat in 7.704401 secs.
[07/14 15:13:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:13:12]  Improved number of small numbers from 48 to 89 out of a max of 89
[07/14 15:13:12]  Verifer returned sat in 0.219752 secs.
[07/14 15:13:12]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58266.958984    0.047119 -58566.958740  27845.250732    0.000000           0.000000  299.999756      199.999756
1 -58266.958984    0.023682 -58366.958740  27845.250732    0.000000           0.000000   99.999756       99.999756
2 -58193.958984  172.999756 -58266.958984  27845.250732    0.000000           0.000000   73.000000       72.999756
3 -58193.958984   73.000000 -58239.958740  27845.250732    0.000000           0.000000   45.999756      -27.000244
4 -57966.958740  273.000000 -58166.958740  27845.250732    0.000000           0.000000  200.000000      100.000000
5 -57657.458740  509.500000 -58066.958740  27845.250732  154.726318           0.000000  254.773682      154.773682
6 -57657.458740  254.750000 -57866.958740  27845.250732  154.726318         154.726318   54.773682       54.773682
7 -57143.607422  568.625000 -57866.958740  27845.250732  523.351318         154.726318  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:13:12]  --------------------------------------------------------------------------------
[07/14 15:13:12]  Iteration: 406 (18 solution, 387 counterexamples)
[07/14 15:13:25]  Generator returned sat in 8.587662 secs.
[07/14 15:13:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:13:26]  Improved number of small numbers from 53 to 89 out of a max of 89
[07/14 15:13:26]  Verifer returned sat in 0.226038 secs.
[07/14 15:13:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58366.946777    0.047119 -58466.958984  27845.250488    0.000000           0.000000  100.012207      100.011963
1 -58366.946777    0.023682 -58366.958740  27845.250488    0.000000           0.000000    0.011963        0.011963
2 -58209.811035  157.147705 -58266.958740  27845.250488    0.000000           0.000000   57.147705       57.147705
3 -58209.810791   57.147949 -58209.822754  27845.250488    0.000000           0.000000    0.011963      -42.852051
4 -57966.958740  242.864014 -58166.958740  27845.250488    0.000000           0.000000  200.000000      100.000000
5 -57581.230713  585.728027 -58066.958740  27845.250488  192.852051           0.000000  292.875977      192.875977
6 -57581.230713  292.864014 -57866.958984  27845.250488  192.852051         192.852051   92.876221       92.875977
7 -56916.947021  757.159912 -57866.958740  27845.250488  750.011719         192.852051  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:13:26]  --------------------------------------------------------------------------------
[07/14 15:13:26]  Iteration: 407 (18 solution, 388 counterexamples)
[07/14 15:13:49]  Generator returned sat in 17.721375 secs.
[07/14 15:13:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:13:49]  Improved gap from 1/40 to 0
[07/14 15:13:49]  Improved number of small numbers from 80 to 84 out of a max of 90
[07/14 15:13:49]  Verifer returned sat in 0.315672 secs.
[07/14 15:13:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58166.959229    0.047119 -58466.958984  27845.250488        0.0                0.0  299.999756      199.999756
1 -58166.959229    0.001465 -58266.958984  27845.250488        0.0                0.0   99.999756       99.999756
2 -57966.959229  299.999756 -58266.958984  27845.250488        0.0                0.0  299.999756      199.999756
3 -57866.958984  400.000000 -58066.958984  27845.250488        0.0                0.0  200.000000      200.000000
4 -57466.958984  600.000000 -57966.959229  27845.250488      400.0                0.0  100.000244      100.000000
5 -57466.958984    0.010000 -57866.960234  27845.250488      400.0              400.0    0.001250        0.000000
6 -57466.945234    0.015000 -57866.946484  27945.236572      400.0              400.0    0.001250       -0.000166
7 -57466.923984    0.022500 -57866.945068  27945.236816      400.0              400.0    0.021084      -99.978672
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/14 15:13:50]  --------------------------------------------------------------------------------
[07/14 15:13:50]  Iteration: 408 (18 solution, 389 counterexamples)
[07/14 15:14:20]  Generator returned sat in 26.087738 secs.
[07/14 15:14:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:14:21]  Improved gap from 193/16384 to 100
[07/14 15:14:22]  Improved number of small numbers from 26 to 51 out of a max of 90
[07/14 15:14:22]  Verifer returned sat in 0.840675 secs.
[07/14 15:14:22]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58518.437744    0.046875 -58645.363037  27797.154462    0.000000           0.000000  126.925293      126.925214
1 -58518.437744    0.023682 -58645.362793  27797.154462    0.000000           0.000000  126.925049       26.925214
2 -58518.437744    0.023682 -58518.461453  27797.154462    0.000000           0.000000    0.023709      -73.074786
3 -58121.414334  397.047119 -58345.362958  27797.154462   23.948624           0.000000  200.000000      200.000000
4 -58121.390775  200.023560 -58345.362793  27797.154462   23.972183          23.948624  199.999835      100.000000
5 -58121.390775  101.511780 -58245.362958  27797.154462   23.972183          23.972183  100.000000        0.000000
6 -57624.437894  596.952881 -58145.362793  27797.154462  220.925293          23.972183  299.999606      199.999771
7 -57624.437894  299.976440 -58045.362793  27797.154462  220.925293         220.925293  199.999606       99.999771
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:14:22]  --------------------------------------------------------------------------------
[07/14 15:14:22]  Iteration: 409 (18 solution, 390 counterexamples)
[07/14 15:15:05]  Generator returned sat in 38.337797 secs.
[07/14 15:15:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:15:06]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/14 15:15:06]  Verifer returned sat in 0.244997 secs.
[07/14 15:15:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58646.338379    0.046631 -58846.338379  27998.129639    0.000000           0.000000  200.000000      200.000000
1 -58646.338379    0.023438 -58846.338135  27998.129639    0.000000           0.000000  199.999756      100.000000
2 -58646.338379    0.023438 -58746.338379  27998.129639    0.000000           0.000000  100.000000        0.000000
3 -58165.385254  580.953125 -58593.320557  27998.129639  180.953125           0.000000  246.982178      200.000000
4 -58121.390869  290.976562 -58546.338135  27998.129639  180.976562         180.953125  243.970703      143.970947
5 -58121.390869  145.988281 -58386.367676  27998.129639  180.976562         180.976562   84.000244       43.970947
6 -57624.437988  580.953125 -58337.338379  27998.129639  421.900391         180.976562  291.000000      200.000000
7 -57624.437988  290.976562 -58146.338379  27998.129639  421.900391         421.900391  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:15:06]  --------------------------------------------------------------------------------
[07/14 15:15:06]  Iteration: 410 (18 solution, 391 counterexamples)
[07/14 15:15:23]  Generator returned sat in 12.396367 secs.
[07/14 15:15:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:15:24]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/14 15:15:24]  Verifer returned sat in 0.115599 secs.
[07/14 15:15:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58646.338379    0.046631 -58846.338379  27998.129639    0.000000           0.000000  200.000000      200.000000
1 -58646.338379    0.023438 -58846.338135  27998.129639    0.000000           0.000000  199.999756      100.000000
2 -58646.338379    0.023438 -58746.338379  27998.129639    0.000000           0.000000  100.000000        0.000000
3 -58173.385254  572.953125 -58581.320557  27998.129639  172.953125           0.000000  234.982178      200.000000
4 -58121.390869  286.976562 -58546.338135  27998.129639  172.964844         172.953125  251.982422      151.982666
5 -58121.390869  143.988281 -58386.367676  27998.129639  172.964844         172.964844   92.011963       51.982666
6 -57636.449707  576.953125 -58335.326660  27998.129639  409.888672         172.964844  288.988281      200.000000
7 -57636.449707  288.976562 -58146.338379  27998.129639  409.888672         409.888672  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:15:24]  --------------------------------------------------------------------------------
[07/14 15:15:24]  Iteration: 411 (18 solution, 392 counterexamples)
[07/14 15:15:44]  Generator returned sat in 15.463523 secs.
[07/14 15:15:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:15:45]  Improved number of small numbers from 76 to 81 out of a max of 89
[07/14 15:15:45]  Verifer returned sat in 0.272845 secs.
[07/14 15:15:45]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58620.437500    0.046387 -58920.437256  27998.129395    0.000000           0.000000  299.999756      199.999756
1 -58620.437500    0.023193 -58820.437256  27998.129395    0.000000           0.000000  199.999756       99.999756
2 -58620.437500    0.022949 -58620.460449  27998.129395    0.000000           0.000000    0.022949       -0.000244
3 -58221.414062  399.046387 -58520.437256  27998.129395  199.023193           0.000000  100.000000      100.000000
4 -58121.390869  200.023193 -58520.437256  27998.129395  199.046387         199.023193  200.000000      100.000000
5 -58121.390869  100.511597 -58396.867340  27998.129395  199.046387         199.046387   76.430084        0.000000
6 -57598.867340  598.953613 -58320.437256  27998.129395  421.570068         199.046387  299.999847      199.999847
7 -57598.867340  299.976807 -58120.437500  27998.129395  421.570068         421.570068  100.000092       99.999847
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/14 15:15:45]  --------------------------------------------------------------------------------
[07/14 15:15:45]  Iteration: 412 (18 solution, 393 counterexamples)
[07/14 15:16:11]  Generator returned sat in 21.395158 secs.
[07/14 15:16:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:16:12]  Improved number of small numbers from 47 to 64 out of a max of 89
[07/14 15:16:12]  Verifer returned sat in 0.721915 secs.
[07/14 15:16:12]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -59207.260010    0.046387 -59307.260010  28484.951904    0.000000           0.000000  100.000000       99.999756
1 -59207.260010    0.022949 -59207.282959  28484.951991    0.000000           0.000000    0.022949       -0.000157
2 -58907.260010  300.022949 -59107.259853  28484.951991    0.000000           0.000000  199.999843      199.999843
3 -58649.688424  457.571429 -59007.259853  28484.951991  257.571429           0.000000  100.000000      100.000000
4 -58520.402710  229.285714 -58922.425781  28484.951991  286.857143         257.571429  115.165928      100.000000
5 -58520.402710  115.142857 -58907.259853  28484.951991  286.857143         286.857143  100.000000        0.000000
6 -58162.831281  457.571429 -58736.522374  28484.951991  444.428571         286.857143  129.262521      100.000000
7 -58062.808088  229.285714 -58707.259766  28484.951991  444.451660         444.428571  200.000017      100.000105
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:16:13]  --------------------------------------------------------------------------------
[07/14 15:16:13]  Iteration: 413 (18 solution, 394 counterexamples)
[07/14 15:16:39]  Generator returned sat in 22.071218 secs.
[07/14 15:16:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:16:40]  Improved gap from 2/235 to 100
[07/14 15:16:41]  Improved number of small numbers from 31 to 41 out of a max of 90
[07/14 15:16:41]  Verifer returned sat in 0.842299 secs.
[07/14 15:16:41]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58462.858643    0.046387 -58760.855642  27840.550405    0.000000           0.000000  297.997000      199.999868
1 -58462.858643    0.022949 -58562.858511  27840.550405    0.000000           0.000000   99.999868       99.999868
2 -58462.858511  100.000000 -58562.858511  27840.550405    0.000000           0.000000  100.000000        0.000000
3 -58462.858511    0.005737 -58462.858511  27840.550405    0.000000           0.000000    0.000000     -100.000000
4 -58162.852773  300.005737 -58362.858398  27840.550405    0.005737           0.000000  199.999888      100.000000
5 -58162.852773  151.502869 -58195.101339  27840.550405    0.005737           0.005737   32.242828        0.000000
6 -57598.084127  597.011475 -58062.858511  27840.550405  364.774384           0.005737  100.000000      100.000000
7 -57398.078390  300.005737 -58062.858398  27840.550405  464.780029         364.774384  199.999979      100.000092
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:16:41]  --------------------------------------------------------------------------------
[07/14 15:16:41]  Iteration: 414 (18 solution, 395 counterexamples)
[07/14 15:17:21]  Generator returned sat in 34.718485 secs.
[07/14 15:17:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:17:21]  Improved gap from 47/4096 to 100
[07/14 15:17:22]  Improved number of small numbers from 29 to 39 out of a max of 90
[07/14 15:17:22]  Verifer returned sat in 0.916160 secs.
[07/14 15:17:22]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58562.861572    0.046143 -58762.861379  27940.553274    0.000000           0.000000  199.999807      199.999807
1 -58562.861572    0.022949 -58662.861379  27940.553274    0.000000           0.000000   99.999807       99.999807
2 -58562.861379  100.000000 -58662.861379  27940.553274    0.000000           0.000000  100.000000        0.000000
3 -58562.861379    0.005737 -58562.861379  27940.553274    0.000000           0.000000    0.000000     -100.000000
4 -58162.852773  400.008606 -58462.861328  27940.553274   98.498566           0.000000  201.509989      101.510040
5 -58162.852773  201.504303 -58317.380026  27940.553274   98.498566          98.498566   56.028687        1.510040
6 -57225.662298  993.219162 -58262.861379  27940.553274  737.199081          98.498566  300.000000      200.000000
7 -57027.552717  498.109581 -58062.861572  27940.553274  935.308594         737.199081  100.000262      100.000069
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:17:22]  --------------------------------------------------------------------------------
[07/14 15:17:22]  Iteration: 415 (18 solution, 396 counterexamples)
[07/14 15:17:42]  Generator returned sat in 14.819190 secs.
[07/14 15:17:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:17:43]  Improved number of small numbers from 32 to 36 out of a max of 89
[07/14 15:17:43]  Verifer returned sat in 0.919220 secs.
[07/14 15:17:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58562.861816    0.045898 -58762.861379  27940.553274    0.000000            0.00000  199.999563      199.999563
1 -58562.861816    0.022705 -58662.861379  27940.553274    0.000000            0.00000   99.999563       99.999563
2 -58483.884902  178.976477 -58662.861379  27940.553274    0.000000            0.00000  178.976477       78.976477
3 -58483.884902    0.005737 -58483.884902  27940.553274    0.000000            0.00000    0.000000      -21.023523
4 -58203.899819  279.985083 -58462.861328  27940.553274   58.961560            0.00000  199.999949      100.000000
5 -58203.899819  140.992542 -58317.380026  27940.553274   58.961560           58.96156   54.518646        0.000000
6 -57700.448300  557.970166 -58242.840725  27940.553274  262.413080           58.96156  279.979346      200.000000
7 -57700.442562  279.985083 -58062.861572  27940.553274  262.418701          262.41308  100.000309      100.000116
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:17:44]  --------------------------------------------------------------------------------
[07/14 15:17:44]  Iteration: 416 (18 solution, 397 counterexamples)
[07/14 15:17:57]  Generator returned sat in 8.953348 secs.
[07/14 15:17:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:17:58]  Verifer returned unsat in 0.046346 secs.
[07/14 15:17:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:17:58]  --------------------------------------------------------------------------------
[07/14 15:17:58]  Iteration: 417 (19 solution, 397 counterexamples)
[07/14 15:18:17]  Generator returned sat in 14.372285 secs.
[07/14 15:18:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/14 15:18:18]  Improved number of small numbers from 29 to 58 out of a max of 89
[07/14 15:18:18]  Verifer returned sat in 0.769381 secs.
[07/14 15:18:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -58272.097168    0.045898 -58472.097168  27649.788818    0.000000           0.000000  200.000000      200.000000
1 -58272.097168    0.022705 -58455.865409  27649.788818    0.000000           0.000000  183.768241      100.000000
2 -58272.096961  183.768448 -58372.096961  27649.788818    0.000000           0.000000  100.000000        0.000207
3 -58072.085609  300.011353 -58223.113770  27649.788818    0.011353           0.000000  151.016808      100.000207
4 -58072.085609  151.005676 -58172.096961  27649.788818    0.011353           0.011353  100.000000        0.000207
5 -57378.040199  794.045410 -58072.096924  27649.788818  494.056885           0.011353  199.999840      100.000085
6 -57180.017334  398.022705 -57872.097168  27649.788818  592.079468         494.056885  100.000366      100.000366
7 -57080.006348  200.011353 -57872.096924  27649.788818  592.090820         592.079468  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=1.[0m
[07/14 15:18:18]  --------------------------------------------------------------------------------
[07/14 15:18:18]  Iteration: 418 (19 solution, 398 counterexamples)
[07/14 15:18:40]  Generator returned unsat in 16.637587 secs.
[07/14 15:18:40]  [96mNo more solutions found[0m
[07/14 15:18:40]  Final solutions:
[07/14 15:18:40]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:18:40]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:18:40]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:18:40]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:18:40]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:18:40]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:18:40]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:18:40]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:18:40]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:18:40]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:18:40]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:18:40]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:18:40]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:18:40]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:18:40]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/14 15:18:40]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/14 15:18:40]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:18:40]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/14 15:18:40]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/14 15:18:40]  Took 4506.848379 secs.
