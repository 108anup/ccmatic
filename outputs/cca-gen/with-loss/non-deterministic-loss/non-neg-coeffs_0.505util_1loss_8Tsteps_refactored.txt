[07/18 16:29:26]  --------------------------------------------------------------------------------
[07/18 16:29:26]  Iteration: 1 (0 solution, 0 counterexamples)
[07/18 16:29:26]  Generator returned sat in 0.004249 secs.
[07/18 16:29:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:26]  Improved gap from 1/10 to 100
[07/18 16:29:27]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:29:27]  Verifer returned sat in 0.165988 secs.
[07/18 16:29:27]  Counter example: 
[93m   arrival_0,t  cwnd_0,t  service_0,t  wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0       -100.0       0.1       -200.0     200.0        0.0                0.0    100.0           100.0
1       -100.0       0.1       -200.0     200.0        0.0                0.0    100.0             0.0
2          0.0     200.0       -100.0     200.0        0.0                0.0    100.0             0.0
3          0.1     100.1          0.0     200.0        0.0                0.0      0.1           -99.9
4        602.2     602.2        100.0     200.0      302.2                0.0    200.0           100.0
5       2208.6    1806.4        202.0     200.0     1808.6              302.2    198.0           100.0
6       6229.4    4218.8        365.0     200.0     5729.4             1808.6    135.0           100.0
7      15264.0    9169.6        400.0     200.0    14564.0             5729.4    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:27]  --------------------------------------------------------------------------------
[07/18 16:29:27]  Iteration: 2 (0 solution, 1 counterexamples)
[07/18 16:29:27]  Generator returned sat in 0.015372 secs.
[07/18 16:29:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:29:27]  Improved gap from 1/400 to 0
[07/18 16:29:27]  Improved number of small numbers from 82 to 90 out of a max of 90
[07/18 16:29:27]  Verifer returned sat in 0.170196 secs.
[07/18 16:29:27]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5729.371094    0.099854  5629.371250 -5729.370361        0.0                0.0   99.999844        0.001221
1  5729.371094    0.001465  5729.370117 -5729.370361        0.0                0.0    0.000977      -99.998779
2  5829.371338  100.001221  5829.369873 -5729.370361        0.0                0.0    0.001465      -99.998535
3  6229.362305  399.992432  6029.369873 -5729.370361        0.0                0.0  199.992432      199.992432
4  6229.362305    0.010000  6129.369873 -5729.370361        0.0                0.0   99.992432       99.992432
5  6229.362305    0.010000  6229.361250 -5729.370361        0.0                0.0    0.001055       -0.007568
6  6229.371250    0.010000  6229.370000 -5629.380371        0.0                0.0    0.001250       -0.008633
7  6229.380000    0.010000  6229.380000 -5629.380127        0.0                0.0    0.000000      -99.999639
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:29:27]  --------------------------------------------------------------------------------
[07/18 16:29:27]  Iteration: 3 (0 solution, 2 counterexamples)
[07/18 16:29:27]  Generator returned sat in 0.014091 secs.
[07/18 16:29:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:29:27]  Improved gap from 409/8192 to 0
[07/18 16:29:27]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/18 16:29:27]  Verifer returned sat in 0.198130 secs.
[07/18 16:29:27]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5828.344727    0.099609  5828.320068 -5828.370361        0.0                0.0    0.024658       -0.024902
1  5828.369873    0.049805  5828.369629 -5828.370361        0.0                0.0    0.000244      -99.999756
2  6028.369629  200.000000  6028.344971 -5828.370361        0.0                0.0    0.024658        0.000000
3  6229.394775  201.049805  6128.369629 -5828.370361        0.0                0.0  101.025146      101.025146
4  6229.394775    1.000000  6228.369629 -5828.370361        0.0                0.0    1.025146        1.025146
5  6229.394775    1.000000  6228.369873 -5729.395508        0.0                0.0    1.024902        0.000000
6  6229.394775    1.000000  6229.394775 -5630.395264        0.0                0.0    0.000000       -0.999756
7  6230.394775    1.000000  6230.394775 -5630.395264        0.0                0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:29:28]  --------------------------------------------------------------------------------
[07/18 16:29:28]  Iteration: 4 (0 solution, 3 counterexamples)
[07/18 16:29:28]  Generator returned sat in 0.006991 secs.
[07/18 16:29:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:28]  Improved gap from 203/8192 to 1.5625
[07/18 16:29:28]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:29:28]  Verifer returned sat in 0.210968 secs.
[07/18 16:29:28]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5932.270020    0.099609   5732.27002 -5830.658447        0.0                0.0  200.000000      200.000000
1  5932.270020    0.049805   5732.27002 -5830.658447        0.0                0.0  200.000000      100.000000
2  5932.270020    0.049805   5930.70752 -5830.658447        0.0                0.0    1.562500        0.000000
3  6032.319824  101.612305   6032.27002 -5830.658447        0.0                0.0    0.049805        0.049805
4  6034.270020    2.000000   6032.70752 -5732.658447        0.0                0.0    1.562500        0.000000
5  6034.707520    2.000000   6034.27002 -5634.220947        0.0                0.0    0.437500       -1.125000
6  6036.270020    2.000000   6035.83252 -5535.783447        0.0                0.0    0.437500       -1.125000
7  6037.832520    2.000000   6037.39502 -5535.783447        0.0                0.0    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:29:28]  --------------------------------------------------------------------------------
[07/18 16:29:28]  Iteration: 5 (0 solution, 4 counterexamples)
[07/18 16:29:28]  Generator returned sat in 0.005958 secs.
[07/18 16:29:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:29:28]  Improved gap from 17/16 to 0
[07/18 16:29:29]  Improved number of small numbers from 59 to 90 out of a max of 90
[07/18 16:29:29]  Verifer returned sat in 0.261661 secs.
[07/18 16:29:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t   queue_t  bottle_queue_t
0  5633.269775    0.099121  5633.245117 -5831.333252        0.0                0.0  0.024658       -0.000244
1  5633.294678    0.049561  5633.270020 -5831.333252        0.0                0.0  0.024658      -99.975342
2  5833.269775  199.999756  5833.245117 -5831.333252        0.0                0.0  0.024658       -0.000244
3  5934.769775  101.524658  5933.270020 -5831.333252        0.0                0.0  1.499756        1.499756
4  5934.770020    1.500000  5934.745117 -5734.283691        0.0                0.0  0.024902       -1.450439
5  5936.245117    1.500000  5936.220459 -5634.308594        0.0                0.0  0.024658       -0.000244
6  5937.720459    1.500000  5936.245361 -5535.783691        0.0                0.0  1.475098        0.000000
7  5937.745361    1.500000  5937.720459 -5535.783691        0.0                0.0  0.024902      -99.975098
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:29:29]  --------------------------------------------------------------------------------
[07/18 16:29:29]  Iteration: 6 (0 solution, 5 counterexamples)
[07/18 16:29:29]  Generator returned sat in 0.019580 secs.
[07/18 16:29:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:29:29]  Improved gap from 1/400 to 0
[07/18 16:29:29]  Improved number of small numbers from 65 to 78 out of a max of 90
[07/18 16:29:29]  Verifer returned sat in 0.480508 secs.
[07/18 16:29:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5633.269531    0.099121  5633.267334 -5831.830811     0.0000             0.0000    0.002197       -0.498047
1  5633.770020    0.502686  5633.767578 -5831.830811     0.0000             0.0000    0.002441      -99.997559
2  5833.770020  200.002441  5833.767520 -5831.830811     0.0000             0.0000    0.002500        0.002441
3  5933.270020   99.502500  5933.267520 -5831.333252     0.0000             0.0000    0.002500        0.000000
4  6133.272520  200.005000  6033.270020 -5831.333252     0.0025             0.0000  100.000000      100.000000
5  6133.272520    0.010000  6133.247520 -5831.333252     0.0025             0.0025    0.022500        0.000000
6  6134.270020    1.020000  6133.270020 -5732.330811     0.0025             0.0025    0.997500       -0.000059
7  6136.312520    3.040000  6134.267578 -5732.330566     0.0025             0.0025    2.042441      -97.957314
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:29:30]  --------------------------------------------------------------------------------
[07/18 16:29:30]  Iteration: 7 (0 solution, 6 counterexamples)
[07/18 16:29:30]  Generator returned sat in 0.031594 secs.
[07/18 16:29:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:29:30]  Improved number of small numbers from 56 to 74 out of a max of 89
[07/18 16:29:30]  Verifer returned sat in 0.464640 secs.
[07/18 16:29:30]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5533.242432    0.098877  5533.242432 -5831.333252   0.000000             0.0000    0.000000       -0.000088
1  5833.242432  300.000000  5533.242520 -5831.333252   0.000000             0.0000  299.999912      199.999912
2  5833.242432    0.002686  5633.242676 -5831.333252   0.000000             0.0000  199.999756       99.999912
3  5933.245117  300.002441  5733.242520 -5831.333252   0.002500             0.0000  200.000098      100.000098
4  5933.245117    0.010000  5933.242520 -5831.333252   0.002500             0.0025    0.000098        0.000098
5  6134.265020  201.020000  6033.242432 -5831.333252   1.022500             0.0025  100.000088      100.000000
6  6134.265020    0.010000  6132.564186 -5831.333252   1.022500             1.0225    0.678333        0.000000
7  6334.267520  200.680833  6133.242676 -5831.333252   1.024902             1.0225  199.999941      100.000098
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:29:30]  --------------------------------------------------------------------------------
[07/18 16:29:30]  Iteration: 8 (0 solution, 7 counterexamples)
[07/18 16:29:31]  Generator returned sat in 0.083614 secs.
[07/18 16:29:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:29:31]  Improved gap from 405/8192 to 18.75
[07/18 16:29:31]  Improved number of small numbers from 65 to 73 out of a max of 90
[07/18 16:29:31]  Verifer returned sat in 0.469717 secs.
[07/18 16:29:31]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5758.242432    0.098877  5745.742432 -5831.333252        0.0                0.0   12.500000       12.500000
1  5845.742188   99.999756  5845.738281 -5831.333252        0.0                0.0    0.003906       -0.000244
2  5845.742432    0.004150  5845.742432 -5831.333252        0.0                0.0    0.000000     -100.000000
3  6145.806432  300.064000  6007.262432 -5831.333252        0.0                0.0  138.544000      100.064000
4  6157.294432  150.032000  6082.274658 -5831.333252        0.0                0.0   75.019773       11.552000
5  6157.294432   75.016000  6145.762432 -5750.103271        0.0                0.0   11.532000       -7.218020
6  6183.270432   37.508000  6164.512451 -5668.861252        0.0                0.0   18.757980        0.000000
7  6183.270432   18.754000  6183.270432 -5668.861084        0.0                0.0    0.000000      -99.999832
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:29:31]  --------------------------------------------------------------------------------
[07/18 16:29:31]  Iteration: 9 (0 solution, 8 counterexamples)
[07/18 16:29:31]  Generator returned sat in 0.050579 secs.
[07/18 16:29:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:29:32]  Improved gap from 0 to 100
[07/18 16:29:32]  Improved number of small numbers from 49 to 59 out of a max of 90
[07/18 16:29:32]  Verifer returned sat in 0.618420 secs.
[07/18 16:29:32]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5757.294434    0.098633  5757.291932 -5831.333271    0.000000           0.000000    0.002502        0.002502
1  5757.294434    0.001250  5757.291932 -5831.333271    0.000000           0.000000    0.002502      -99.997498
2  5957.293182  200.001250  5957.291748 -5831.333271    0.000000           0.000000    0.001434        0.001250
3  5957.293182    0.001250  5957.291932 -5831.333271    0.000000           0.000000    0.001250      -99.998750
4  6257.792557  300.500625  6157.291932 -5831.333271    0.000000           0.000000  100.500625      100.500625
5  6908.042244  750.750312  6257.291748 -5831.333271  550.750312           0.000000  100.000184      100.000000
6  6908.042244    0.010000  6357.291932 -5831.333271  550.750312         550.750312    0.000000        0.000000
7  7508.547244  600.505000  6357.291992 -5831.333271  951.255312         550.750312  199.999939      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:29:32]  --------------------------------------------------------------------------------
[07/18 16:29:32]  Iteration: 10 (0 solution, 9 counterexamples)
[07/18 16:29:33]  Generator returned sat in 0.176887 secs.
[07/18 16:29:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:33]  Improved gap from 1/800 to 100
[07/18 16:29:33]  Improved number of small numbers from 59 to 77 out of a max of 90
[07/18 16:29:33]  Verifer returned sat in 0.402504 secs.
[07/18 16:29:33]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  6208.272461    0.098633  6008.272461 -6082.313965    0.00000            0.00000  200.000000      199.999836
1  6208.272461    0.001465  6008.272625 -6082.313965    0.00000            0.00000  199.999836       99.999836
2  6208.272461  199.998750  6108.272705 -6082.313965    0.00000            0.00000   99.999756       -0.000164
3  6408.273926  300.001221  6208.273875 -6082.313965    0.00125            0.00000  199.998801      100.000051
4  6408.273926    0.010000  6357.268250 -6082.313965    0.00125            0.00125   51.004426        0.000051
5  6708.275125  351.005625  6508.272461 -6082.313965    0.00250            0.00125  200.000164      200.000000
6  6708.275125    0.010000  6508.272625 -6082.313965    0.00250            0.00250  200.000000      100.000000
7  6810.283875  302.008750  6608.272705 -6082.313965    2.01123            0.00250  199.999939      100.000020
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:29:33]  --------------------------------------------------------------------------------
[07/18 16:29:33]  Iteration: 11 (0 solution, 10 counterexamples)
[07/18 16:29:33]  Generator returned sat in 0.058774 secs.
[07/18 16:29:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:34]  Improved number of small numbers from 76 to 89 out of a max of 89
[07/18 16:29:34]  Verifer returned sat in 0.122389 secs.
[07/18 16:29:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  6208.272461    0.098633  6008.272217 -6082.313965   0.000000           0.000000  200.000244      200.000000
1  6208.272461    0.001221  6008.272705 -6082.313965   0.000000           0.000000  199.999756      100.000000
2  6208.272461  199.998779  6108.272705 -6082.313965   0.000000           0.000000   99.999756        0.000000
3  6408.273926  300.001221  6208.273682 -6082.313965   0.001221           0.000000  199.999023      100.000244
4  6408.273926    0.010000  6357.268311 -6082.313965   0.001221           0.001221   51.004395        0.000244
5  6708.265137  350.995605  6508.272217 -6082.313965   0.002686           0.001221  199.990234      199.989990
6  6708.265137    0.010000  6508.272461 -6082.313965   0.002686           0.002686  199.989990       99.989990
7  6810.273926  301.998779  6608.272461 -6082.313965   2.001221           0.002686  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:29:34]  --------------------------------------------------------------------------------
[07/18 16:29:34]  Iteration: 12 (0 solution, 11 counterexamples)
[07/18 16:29:34]  Generator returned sat in 0.057013 secs.
[07/18 16:29:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:34]  Improved number of small numbers from 81 to 81 out of a max of 89
[07/18 16:29:34]  Verifer returned sat in 0.225849 secs.
[07/18 16:29:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  6208.272461    0.098633  6008.272217 -6082.313965   0.000000           0.000000  200.000244      200.000000
1  6208.272461    0.001221  6008.272705 -6082.313965   0.000000           0.000000  199.999756      100.000000
2  6208.272461  199.998779  6108.272705 -6082.313965   0.000000           0.000000   99.999756        0.000000
3  6408.273926  300.001221  6208.273682 -6082.313965   0.001221           0.000000  199.999023      100.000244
4  6408.273926    0.010000  6357.258311 -6082.313965   0.001221           0.001221   51.014395        0.000244
5  6708.265137  351.005605  6508.272217 -6082.313965   0.002686           0.001221  199.990234      199.989990
6  6708.265137    0.010000  6508.272461 -6082.313965   0.002686           0.002686  199.989990       99.989990
7  6810.293926  302.018779  6608.272461 -6082.313965   2.001221           0.002686  200.020244      100.020244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:29:34]  --------------------------------------------------------------------------------
[07/18 16:29:34]  Iteration: 13 (0 solution, 12 counterexamples)
[07/18 16:29:35]  Generator returned sat in 0.044796 secs.
[07/18 16:29:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:35]  Improved gap from 1/2048 to 100
[07/18 16:29:35]  Improved number of small numbers from 53 to 71 out of a max of 90
[07/18 16:29:35]  Verifer returned sat in 0.599547 secs.
[07/18 16:29:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5906.283936    0.098389  5706.283987 -6082.313965    0.000000           0.000000  199.999949      199.999949
1  5906.283936    0.000732  5706.283987 -6082.313965    0.000000           0.000000  199.999949       99.999949
2  5906.283936  199.999756  5906.283936 -6082.313965    0.000000           0.000000    0.000000       -0.000051
3  5906.284180    0.000244  5906.283987 -6082.313965    0.000000           0.000000    0.000193      -99.999807
4  6208.284231  302.000244  6106.283987 -6082.313965    0.000000           0.000000  102.000244      102.000244
5  7010.284231  904.000244  6106.284180 -6082.313965  704.000244           0.000000  199.999807      100.000000
6  7010.284231    0.010000  6206.283987 -6082.313965  704.000244         704.000244  100.000000        0.000000
7  7362.294231  452.010000  6306.284180 -6082.313965  856.010010         704.000244  200.000042      100.000234
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:29:36]  --------------------------------------------------------------------------------
[07/18 16:29:36]  Iteration: 14 (0 solution, 13 counterexamples)
[07/18 16:29:36]  Generator returned sat in 0.094079 secs.
[07/18 16:29:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:36]  Improved gap from 0 to 100
[07/18 16:29:36]  Improved number of small numbers from 69 to 76 out of a max of 90
[07/18 16:29:36]  Verifer returned sat in 0.384668 secs.
[07/18 16:29:36]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  5606.284180     0.098389  5606.284180 -6082.313965     0.000000           0.000000    0.000000        0.000000
1  5706.284180   100.000000  5706.234985 -6082.313965     0.000000           0.000000    0.049194        0.000000
2  5706.284180     0.024658  5706.284180 -6082.313965     0.000000           0.000000    0.000000     -100.000000
3  5906.283936   199.999756  5806.284180 -6082.313965     0.000000           0.000000   99.999756       -0.000244
4  6108.284180   302.000000  5906.284180 -6082.313965     0.024658           0.000000  201.975342      101.975342
5  6458.907227   552.598389  6106.284180 -6082.313965   252.622986           0.024658  100.000061      100.000061
6  7436.706360  1077.799194  6206.284180 -6082.313965  1130.422180         252.622986  100.000000      100.000000
7  8677.105957  1340.399597  6206.284180 -6082.313965  2270.821533        1130.422180  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:36]  --------------------------------------------------------------------------------
[07/18 16:29:36]  Iteration: 15 (0 solution, 14 counterexamples)
[07/18 16:29:37]  Generator returned sat in 0.081359 secs.
[07/18 16:29:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:37]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:29:37]  Verifer returned sat in 0.141634 secs.
[07/18 16:29:37]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   5606.284180     0.098389  5606.284180 -6082.314209     0.000000           0.000000    0.000000        0.000000
1   5806.283936   199.999756  5706.284180 -6082.314209     0.000000           0.000000   99.999756       99.999756
2   5806.283936     0.024658  5806.283936 -6082.314209     0.000000           0.000000    0.000000       -0.000244
3   5806.308594     0.024658  5806.284180 -6082.314209     0.000000           0.000000    0.024414      -99.975586
4   6108.284180   302.000000  5969.284180 -6082.314209     1.999756           0.000000  137.000244      100.000244
5   6820.783936   849.500000  6106.283936 -6082.314209   514.500000           1.999756  200.000000      199.999756
6   8347.033936  1726.250000  6206.284180 -6082.314209  2040.749756         514.500000  100.000000      100.000000
7  11438.408936  3191.375000  6206.284180 -6082.314209  4932.125000        2040.749756  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:37]  --------------------------------------------------------------------------------
[07/18 16:29:37]  Iteration: 16 (0 solution, 15 counterexamples)
[07/18 16:29:37]  Generator returned sat in 0.026632 secs.
[07/18 16:29:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:37]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:29:37]  Verifer returned sat in 0.124985 secs.
[07/18 16:29:37]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   5606.283936     0.098389  5606.283936 -6082.314209     0.000000           0.000000    0.000000        0.000000
1   5806.283691   199.999756  5706.283936 -6082.314209     0.000000           0.000000   99.999756       99.999756
2   5806.283691     0.049072  5806.283691 -6082.314209     0.000000           0.000000    0.000000       -0.000244
3   5806.333252     0.049561  5806.283936 -6082.314209     0.000000           0.000000    0.049316      -99.950684
4   6108.283936   302.000000  5969.283936 -6082.314209     2.000000           0.000000  137.000000      100.000000
5   6820.283936   849.000000  6106.283691 -6082.314209   514.500000           2.000000  199.500244      199.500000
6   8345.783691  1725.000000  6206.283936 -6082.314209  2039.499756         514.500000  100.000000      100.000000
7  11434.783691  3189.000000  6206.283936 -6082.314209  4932.124756        2039.499756  296.375000      196.375000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:38]  --------------------------------------------------------------------------------
[07/18 16:29:38]  Iteration: 17 (0 solution, 16 counterexamples)
[07/18 16:29:38]  Generator returned sat in 0.042721 secs.
[07/18 16:29:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:38]  Improved number of small numbers from 81 to 85 out of a max of 89
[07/18 16:29:38]  Verifer returned sat in 0.216626 secs.
[07/18 16:29:38]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   5606.283936     0.098389  5606.283936 -6082.314453     0.000000           0.000000    0.000000        0.000000
1   5804.617432   198.333496  5705.283691 -6082.314453     0.000000           0.000000   99.333740       98.333496
2   5804.617432     0.049072  5804.617269 -6082.314453     0.000000           0.000000    0.000163       -1.666504
3   5806.333008     1.715739  5806.283936 -6082.314453     0.000000           0.000000    0.049072      -99.950928
4   6108.283936   302.000000  5969.283691 -6082.314453     1.499756           0.000000  137.500488      100.500244
5   6819.783447   849.000000  6106.283936 -6082.314453   513.499512           1.499756  200.000000      200.000000
6   8345.783447  1726.000000  6206.283936 -6082.314453  2039.499512         513.499512  100.000000      100.000000
7  11434.783447  3189.000000  6206.283936 -6082.314453  4932.124756        2039.499512  296.374756      196.374756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:38]  --------------------------------------------------------------------------------
[07/18 16:29:38]  Iteration: 18 (0 solution, 17 counterexamples)
[07/18 16:29:39]  Generator returned sat in 0.029515 secs.
[07/18 16:29:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:39]  Improved gap from 401/16384 to 100
[07/18 16:29:39]  Improved number of small numbers from 54 to 58 out of a max of 90
[07/18 16:29:39]  Verifer returned sat in 0.503920 secs.
[07/18 16:29:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   5804.617188     0.098389  5704.617432 -6082.314209     0.000000           0.000000   99.999756       99.999756
1   5804.617188     0.048828  5704.617432 -6082.314209     0.000000           0.000000   99.999756       -0.000244
2   6104.617188   399.999756  5868.617432 -6082.314209     0.000000           0.000000  235.999756      199.999756
3   6104.666382   236.048950  5904.617432 -6082.314209     0.048950           0.000000  200.000000      100.000000
4   6559.239807   654.573425  6004.617432 -6082.314209   254.622375           0.048950  300.000000      200.000000
5   7691.599945  1432.360138  6104.617432 -6082.314209  1386.982513         254.622375  200.000000      100.000000
6   9994.640152  2503.040207  6304.617432 -6082.314209  3590.022720        1386.982513  100.000000      100.000000
7  14249.700462  4355.060310  6304.617432 -6082.314209  7645.083252        3590.022720  299.999779      199.999779
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:39]  --------------------------------------------------------------------------------
[07/18 16:29:39]  Iteration: 19 (0 solution, 18 counterexamples)
[07/18 16:29:40]  Generator returned sat in 0.035562 secs.
[07/18 16:29:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:40]  Improved gap from 401/16384 to 100
[07/18 16:29:40]  Improved number of small numbers from 46 to 90 out of a max of 90
[07/18 16:29:40]  Verifer returned sat in 0.213481 secs.
[07/18 16:29:40]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   5503.909912     0.098145  5403.910156 -5781.607178     0.000000           0.000000   99.999756       99.999756
1   5503.909912     0.049072  5403.910156 -5781.607178     0.000000           0.000000   99.999756       -0.000244
2   5603.909912   199.999756  5503.910156 -5781.607178     0.000000           0.000000   99.999756       -0.000244
3   5603.934570   100.024414  5603.910156 -5781.607178     0.000000           0.000000    0.024414      -99.975586
4   5905.910156   302.000000  5703.910156 -5781.607178     1.999756           0.000000  200.000244      100.000244
5   6609.909912   904.000000  5903.910156 -5781.607178   505.999756           1.999756  200.000000      200.000000
6   8366.909912  1957.000000  5971.910156 -5781.607178  2262.999756         505.999756  132.000000      100.000000
7  11723.409912  3488.500000  6003.910156 -5781.607178  5519.499756        2262.999756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:40]  --------------------------------------------------------------------------------
[07/18 16:29:40]  Iteration: 20 (0 solution, 19 counterexamples)
[07/18 16:29:40]  Generator returned sat in 0.057594 secs.
[07/18 16:29:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:40]  Improved gap from 3228257/32768 to 100
[07/18 16:29:41]  Improved number of small numbers from 75 to 77 out of a max of 90
[07/18 16:29:41]  Verifer returned sat in 0.403588 secs.
[07/18 16:29:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   5603.910156     0.097900  5403.910156 -5781.607178     0.000000           0.000000  200.000000      200.000000
1   5603.910156     0.049072  5477.922546 -5781.607178     0.000000           0.000000  125.987610      100.000000
2   5603.910156   125.987549  5505.391571 -5781.607178     0.000000           0.000000   98.518585        0.000000
3   5603.934692    98.543121  5603.910156 -5781.607178     0.000000           0.000000    0.024536      -99.975464
4   5905.910156   302.000000  5703.910156 -5781.607178     0.024536           0.000000  201.975464      101.975464
5   6609.909912   905.975220  5803.910156 -5781.607178   505.999756           0.024536  300.000000      200.000000
6   8266.909912  1957.000000  5971.910156 -5781.607178  2162.999512         505.999756  132.000244      100.000244
7  11807.409668  3672.500000  6003.910156 -5781.607178  5503.499756        2162.999512  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:41]  --------------------------------------------------------------------------------
[07/18 16:29:41]  Iteration: 21 (0 solution, 20 counterexamples)
[07/18 16:29:41]  Generator returned sat in 0.050366 secs.
[07/18 16:29:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:41]  Improved gap from 25/1024 to 100
[07/18 16:29:42]  Improved number of small numbers from 41 to 47 out of a max of 90
[07/18 16:29:42]  Verifer returned sat in 0.842943 secs.
[07/18 16:29:42]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -229.054199     0.097656  -229.054373 -148.642893     0.000000           0.000000    0.000173        0.000173
1    70.945627   300.000000  -129.054373 -148.642893     0.000000           0.000000  200.000000      200.000000
2    70.945627     0.024414  -127.054373 -148.642893     0.000000           0.000000  198.000000      100.000000
3    70.945627     0.024414   -29.054373 -148.642893     0.000000           0.000000  100.000000        0.000000
4   272.982249   302.036621   170.945627 -148.642893     2.036621           0.000000  100.000000      100.000000
5  1227.037180  1054.054932   170.945627 -148.642893   856.091553           2.036621  200.000000      100.000000
6  3205.119578  2178.082397   316.945627 -148.642893  2734.173950         856.091553  154.000000      100.000000
7  7011.243174  3960.123596   370.945801 -148.642893  6440.297363        2734.173950  200.000010      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:42]  --------------------------------------------------------------------------------
[07/18 16:29:42]  Iteration: 22 (0 solution, 21 counterexamples)
[07/18 16:29:43]  Generator returned sat in 0.162406 secs.
[07/18 16:29:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:43]  Improved gap from 399/16384 to 100
[07/18 16:29:44]  Improved number of small numbers from 27 to 37 out of a max of 90
[07/18 16:29:44]  Verifer returned sat in 0.874052 secs.
[07/18 16:29:44]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -329.662354     0.097412  -429.662591  51.965326     0.000000           0.000000  100.000238      100.000238
1  -329.662354     0.048584  -429.662591  51.965326     0.000000           0.000000  100.000238        0.000238
2  -229.662591   200.000000  -329.662591  51.965326     0.000000           0.000000  100.000000        0.000000
3  -229.613885   100.048706  -229.662591  51.965326     0.000000           0.000000    0.048706      -99.951294
4   172.386115   402.048706  -129.662591  51.965326   102.048706           0.000000  200.000000      100.000000
5  1176.459174  1204.073059    -1.662591  51.965326  1006.121765         102.048706  172.000000      100.000000
6  3467.568763  2463.109589   142.337409  51.965326  3097.231354        1006.121765  228.000000      200.000000
7  7679.233146  4439.664383   170.337646  51.965326  7308.895508        3097.231354  199.999991      100.000229
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:44]  --------------------------------------------------------------------------------
[07/18 16:29:44]  Iteration: 23 (0 solution, 22 counterexamples)
[07/18 16:29:44]  Generator returned sat in 0.070462 secs.
[07/18 16:29:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:44]  Improved gap from 0 to 100
[07/18 16:29:45]  Improved number of small numbers from 30 to 40 out of a max of 90
[07/18 16:29:45]  Verifer returned sat in 0.823982 secs.
[07/18 16:29:45]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5930.282471     0.097168 -6030.282703  51.965326     0.000000           0.000000  100.000233      100.000233
1 -5930.282471     0.048340 -5930.331287  51.965326     0.000000           0.000000    0.048817        0.000233
2 -5930.282471     0.048584 -5930.282703  51.965326     0.000000           0.000000    0.000233      -99.999767
3 -5830.234119   100.048584 -5830.282703  51.965326     0.000000           0.000000    0.048584      -99.951416
4 -5478.258411   352.024292 -5730.282703  51.965326    52.024292           0.000000  200.000000      100.000000
5 -4749.124805   929.133606 -5630.282703  51.965326   581.157898          52.024292  300.000000      200.000000
6 -3054.424396  1994.700409 -5445.282703  51.965326  2175.858307         581.157898  215.000000      200.000000
7   493.626217  3763.050613 -5430.282471  51.965326  5723.908691        2175.858307  199.999996      100.000229
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:45]  --------------------------------------------------------------------------------
[07/18 16:29:45]  Iteration: 24 (0 solution, 23 counterexamples)
[07/18 16:29:46]  Generator returned sat in 0.115491 secs.
[07/18 16:29:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:46]  Improved number of small numbers from 33 to 89 out of a max of 89
[07/18 16:29:46]  Verifer returned sat in 0.312056 secs.
[07/18 16:29:46]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5830.282715     0.096924 -6030.282715  51.965088      0.000000           0.000000  200.000000      199.999756
1 -5830.282715     0.048584 -5930.282471  51.965088      0.000000           0.000000   99.999756       99.999756
2 -5830.282715    99.951660 -5830.331055  51.965332      0.000000           0.000000    0.048340        0.000000
3 -5730.234375   100.096680 -5730.282715  51.965332      0.000000           0.000000    0.048340        0.048340
4 -5228.234375   502.048340 -5730.233887  51.965332    302.048340           0.000000  199.951172      100.000000
5 -4022.991699  1405.193848 -5630.282471  51.965332   1307.291016         302.048340  299.999756      200.000000
6 -1111.506592  3211.484863 -5445.282471  51.965332   4118.776123        1307.291016  214.999756      200.000000
7  5667.463867  6993.970215 -5430.282471  51.965332  10897.746338        4118.776123  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:46]  --------------------------------------------------------------------------------
[07/18 16:29:46]  Iteration: 25 (0 solution, 24 counterexamples)
[07/18 16:29:47]  Generator returned sat in 0.059513 secs.
[07/18 16:29:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:47]  Improved gap from 99/2048 to 100
[07/18 16:29:47]  Improved number of small numbers from 43 to 71 out of a max of 90
[07/18 16:29:47]  Verifer returned sat in 0.697963 secs.
[07/18 16:29:47]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5613.770020     0.096924 -5813.769938 -164.547445      0.000000           0.000000  199.999919      199.999919
1 -5613.770020     0.011963 -5713.769938 -164.547445      0.000000           0.000000   99.999919       99.999919
2 -5613.770020    99.951660 -5713.769775 -164.547445      0.000000           0.000000   99.999756       -0.000081
3 -5580.343506   133.426270 -5580.355713 -164.547445      0.000000           0.000000    0.012207      -66.573568
4 -5228.234375   352.121338 -5413.769938 -164.547445     85.535563           0.000000  100.000000      100.000000
5 -4022.991699  1305.242676 -5347.769775 -164.547445   1190.778076          85.535563  134.000000      100.000163
6  -813.506348  3343.485352 -5313.769938 -164.547445   4200.263672        1190.778076  299.999919      199.999919
7  6107.635986  7221.142253 -5213.769775 -164.547445  11121.405762        4200.263672  200.000000      100.000163
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:48]  --------------------------------------------------------------------------------
[07/18 16:29:48]  Iteration: 26 (0 solution, 25 counterexamples)
[07/18 16:29:48]  Generator returned sat in 0.044196 secs.
[07/18 16:29:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:48]  Improved gap from 99/4096 to 100
[07/18 16:29:48]  Improved number of small numbers from 88 to 88 out of a max of 90
[07/18 16:29:48]  Verifer returned sat in 0.185807 secs.
[07/18 16:29:48]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -5713.818115     0.096924 -5880.500895 -164.499268      0.000000           0.000000  166.68278           100.0
1 -5713.818115     0.048340 -5813.818115 -164.499268      0.000000           0.000000  100.00000             0.0
2 -5513.818115   300.000000 -5613.818115 -164.499268      0.000000           0.000000  100.00000           100.0
3 -5513.818115   100.000000 -5613.818115 -164.499268      0.000000           0.000000  100.00000             0.0
4 -5111.793945   502.024170 -5413.818115 -164.499268    202.024170           0.000000  100.00000           100.0
5 -3406.745605  1805.048340 -5413.818115 -164.499268   1707.072510         202.024170  300.00000           200.0
6   304.351074  4011.096680 -5313.818115 -164.499268   5318.169189        1707.072510  300.00000           200.0
7  8627.544434  8623.193359 -5213.818115 -164.499268  13541.362549        5318.169189  300.00000           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:48]  --------------------------------------------------------------------------------
[07/18 16:29:48]  Iteration: 27 (0 solution, 26 counterexamples)
[07/18 16:29:49]  Generator returned sat in 0.048567 secs.
[07/18 16:29:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:49]  Improved gap from 99/8192 to 100
[07/18 16:29:49]  Improved number of small numbers from 61 to 84 out of a max of 90
[07/18 16:29:49]  Verifer returned sat in 0.403162 secs.
[07/18 16:29:49]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7496.883545     0.096680 -7796.883301 -164.499512      0.000000           0.000000  299.999756      199.999756
1 -7496.883545     0.048340 -7596.883301 -164.499512      0.000000           0.000000   99.999756       99.999756
2 -7494.877197   102.006104 -7510.883301 -164.499512      0.000000           0.000000   16.006104        2.006104
3 -7494.877197    16.006042 -7496.883301 -164.499512      0.000000           0.000000    2.006104      -97.993896
4 -7012.871216   484.012085 -7396.883301 -164.499512    184.011963           0.000000  200.000122      100.000122
5 -5843.847168  1369.024170 -7296.883301 -164.499512   1153.036377         184.011963  299.999756      199.999756
6 -2976.798584  3167.048340 -7096.883301 -164.499512   3920.084717        1153.036377  200.000000      200.000000
7  3958.298096  7135.096680 -7096.883301 -164.499512  10755.181396        3920.084717  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:49]  --------------------------------------------------------------------------------
[07/18 16:29:49]  Iteration: 28 (0 solution, 27 counterexamples)
[07/18 16:29:50]  Generator returned sat in 0.189756 secs.
[07/18 16:29:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:50]  Improved number of small numbers from 63 to 65 out of a max of 89
[07/18 16:29:50]  Verifer returned sat in 0.391080 secs.
[07/18 16:29:50]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7496.883789     0.096436 -7796.883301 -164.499512     0.000000           0.000000  299.999512      199.999512
1 -7496.883789     0.048340 -7596.883301 -164.499512     0.000000           0.000000   99.999512       99.999512
2 -7494.877441   102.005859 -7588.883301 -164.499512     0.000000           0.000000   94.005859        2.005859
3 -7494.877441    21.341390 -7496.883301 -164.499512     0.000000           0.000000    2.005859      -97.994141
4 -7012.871216   484.012085 -7296.883301 -164.499512   184.011963           0.000000  100.000122      100.000122
5 -6269.865295   843.006042 -7296.883301 -164.499512   727.018250         184.011963  299.999756      199.999756
6 -5563.362030  1006.503021 -7096.883301 -164.499512  1333.521271         727.018250  200.000000      200.000000
7 -4459.110519  1304.251511 -7096.883301 -164.499512  2437.772705        1333.521271  200.000076      100.000076
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:50]  --------------------------------------------------------------------------------
[07/18 16:29:50]  Iteration: 29 (0 solution, 28 counterexamples)
[07/18 16:29:51]  Generator returned sat in 0.076755 secs.
[07/18 16:29:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:51]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:29:51]  Verifer returned sat in 0.125872 secs.
[07/18 16:29:51]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7496.883789    0.096191 -7796.883301 -164.499756     0.000000           0.000000  299.999512      199.999512
1 -7496.883789    0.048096 -7596.883301 -164.499756     0.000000           0.000000   99.999512       99.999512
2 -7494.877686  102.005615 -7537.883301 -164.499756     0.000000           0.000000   43.005615        2.005615
3 -7494.877686   21.341309 -7496.883301 -164.499756     0.000000           0.000000    2.005615      -97.994385
4 -7012.871338  484.011963 -7296.883301 -164.499756   184.011719           0.000000  100.000244      100.000244
5 -6511.871582  601.000000 -7296.883301 -164.499756   485.012207         184.011719  299.999512      199.999512
6 -6328.871094  483.000000 -7096.883301 -164.499756   568.012207         485.012207  200.000000      200.000000
7 -5727.871094  801.000000 -7096.883301 -164.499756  1169.011963         568.012207  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:51]  --------------------------------------------------------------------------------
[07/18 16:29:51]  Iteration: 30 (0 solution, 29 counterexamples)
[07/18 16:29:52]  Generator returned sat in 0.054379 secs.
[07/18 16:29:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:52]  Improved number of small numbers from 58 to 69 out of a max of 89
[07/18 16:29:52]  Verifer returned sat in 0.408355 secs.
[07/18 16:29:52]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7596.871338     0.095947 -7696.883301    -164.5     0.000000           0.000000  100.011963      100.011963
1 -7596.871338     0.048096 -7596.883301    -164.5     0.000000           0.000000    0.011963        0.011963
2 -7296.883301   300.000000 -7582.883301    -164.5     0.000000           0.000000  286.000000      200.000000
3 -7296.883301     0.012024 -7496.883301    -164.5     0.000000           0.000000  200.000000      100.000000
4 -7194.865265   302.018036 -7296.883301    -164.5     2.018036           0.000000  100.000000      100.000000
5 -6089.829193  1205.036072 -7296.883301    -164.5   907.054108           2.018036  300.000000      200.000000
6 -3406.757050  2983.072144 -7096.883301    -164.5  3490.126465         907.054108  199.999786      199.999786
7  3160.387451  6767.144287 -7096.883301    -164.5  9957.270752        3490.126465  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:52]  --------------------------------------------------------------------------------
[07/18 16:29:52]  Iteration: 31 (0 solution, 30 counterexamples)
[07/18 16:29:53]  Generator returned sat in 0.086748 secs.
[07/18 16:29:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:53]  Improved number of small numbers from 66 to 85 out of a max of 89
[07/18 16:29:53]  Verifer returned sat in 0.327209 secs.
[07/18 16:29:53]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7596.883545     0.095947 -7896.883301    -164.5      0.000000           0.000000  299.999756      199.999756
1 -7596.883545     0.048096 -7796.883301    -164.5      0.000000           0.000000  199.999756       99.999756
2 -7396.883545   399.999756 -7696.883301    -164.5      0.000000           0.000000  299.999756      199.999756
3 -7300.787354   396.095947 -7496.883301    -164.5      0.000000           0.000000  196.095947      196.095947
4 -7296.835327   200.047974 -7396.883301    -164.5      0.047852           0.000000  100.000122      100.000122
5 -6195.739502  1201.095947 -7348.883301    -164.5    901.144043           0.047852  251.999756      199.999756
6 -3348.547363  3099.191895 -7196.883301    -164.5   3648.335938         901.144043  200.000000      200.000000
7  3250.836426  6799.383789 -7096.883545    -164.5  10147.719727        3648.335938  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:53]  --------------------------------------------------------------------------------
[07/18 16:29:53]  Iteration: 32 (0 solution, 31 counterexamples)
[07/18 16:29:55]  Generator returned sat in 0.848689 secs.
[07/18 16:29:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:29:55]  Improved number of small numbers from 73 to 89 out of a max of 89
[07/18 16:29:55]  Verifer returned sat in 0.206407 secs.
[07/18 16:29:55]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7641.631348     0.095947 -7741.679199    -164.5     0.000000           0.000000  100.047852      100.047852
1 -7641.631348     0.047852 -7641.679199    -164.5     0.000000           0.000000    0.047852        0.047852
2 -7496.835693   144.843506 -7641.679199    -164.5     0.000000           0.000000  144.843506       44.843506
3 -7496.835693   144.843506 -7496.883301    -164.5     0.000000           0.000000    0.047607      -55.156494
4 -6716.104492   780.778809 -7341.679199    -164.5   525.574463           0.000000  100.000244      100.000244
5 -5433.325928  1382.778809 -7241.679199    -164.5  1708.352783         525.574463  100.000488      100.000488
6 -3348.547607  2184.778809 -7141.679199    -164.5  3593.131836        1708.352783  199.999756      199.999756
7  -651.360352  2897.187012 -7141.679199    -164.5  6190.318848        3593.131836  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:55]  --------------------------------------------------------------------------------
[07/18 16:29:55]  Iteration: 33 (0 solution, 32 counterexamples)
[07/18 16:29:55]  Generator returned sat in 0.079036 secs.
[07/18 16:29:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:56]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:29:56]  Verifer returned sat in 0.118417 secs.
[07/18 16:29:56]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7641.631348     0.095947 -7741.679199    -164.5     0.000000           0.000000  100.047852      100.047852
1 -7641.631348     0.047852 -7641.679199    -164.5     0.000000           0.000000    0.047852        0.047852
2 -7496.835693   144.843506 -7641.679199    -164.5     0.000000           0.000000  144.843506       44.843506
3 -7496.835693   144.843506 -7496.883301    -164.5     0.000000           0.000000    0.047607      -55.156494
4 -6715.604492   781.278809 -7341.679199    -164.5   525.074463           0.000000  101.000244      101.000244
5 -5433.325928  1383.278809 -7241.679199    -164.5  1707.852783         525.074463  100.500488      100.500488
6 -3348.547607  2185.278809 -7141.679199    -164.5  3593.131836        1707.852783  199.999756      199.999756
7  -650.860352  2897.687012 -7141.679199    -164.5  6190.818848        3593.131836  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:56]  --------------------------------------------------------------------------------
[07/18 16:29:56]  Iteration: 34 (0 solution, 33 counterexamples)
[07/18 16:29:56]  Generator returned sat in 0.176076 secs.
[07/18 16:29:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:57]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:29:57]  Verifer returned sat in 0.120550 secs.
[07/18 16:29:57]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8359.326172     0.095703 -8659.325928 -164.500244        0.0                0.0  299.999756      199.999756
1 -8359.326172     0.047852 -8559.325928 -164.500244        0.0                0.0  199.999756       99.999756
2 -8159.326172   399.999756 -8439.326172 -164.500244        0.0                0.0  280.000000      199.999756
3 -8059.326172   380.000000 -8259.325928 -164.500244        0.0                0.0  199.999756      199.999756
4 -6697.325928  1562.000000 -8259.325928 -164.500244     1262.0                0.0  300.000000      200.000000
5 -5433.325928  1564.000000 -8059.325928 -164.500244     2426.0             1262.0  200.000000      200.000000
6 -4067.325928  1566.000000 -7959.326172 -164.500244     3692.0             2426.0  200.000244      200.000000
7 -2699.326172  1568.000000 -7959.325928 -164.500244     4960.0             3692.0  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:57]  --------------------------------------------------------------------------------
[07/18 16:29:57]  Iteration: 35 (0 solution, 34 counterexamples)
[07/18 16:29:57]  Generator returned sat in 0.078379 secs.
[07/18 16:29:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:57]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:29:57]  Verifer returned sat in 0.131867 secs.
[07/18 16:29:57]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -8559.278320      0.095459 -8659.326172 -164.500244      0.000000           0.000000  100.047852        0.047852
1  -8559.278320      0.047852 -8559.325928 -164.500244      0.000000           0.000000    0.047607      -99.952148
2  -8159.326172    399.999756 -8409.326172 -164.500244      0.000000           0.000000  250.000000      200.000000
3  -8059.326172    350.000000 -8259.326172 -164.500244      0.000000           0.000000  200.000000      200.000000
4  -6757.326172   1502.000000 -8259.325928 -164.500244   1302.000000           0.000000  199.999756      100.000000
5  -3951.325928   3006.000000 -8059.326172 -164.500244   4008.000000        1302.000000  100.000244      100.000244
6   1962.673828   6014.000000 -8059.325928 -164.500244   9821.999756        4008.000000  200.000000      100.000244
7  13792.673828  12030.000000 -7959.326172 -164.500244  21452.000000        9821.999756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:58]  --------------------------------------------------------------------------------
[07/18 16:29:58]  Iteration: 36 (0 solution, 35 counterexamples)
[07/18 16:29:58]  Generator returned sat in 0.080369 secs.
[07/18 16:29:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:29:59]  Improved number of small numbers from 41 to 55 out of a max of 89
[07/18 16:29:59]  Verifer returned sat in 0.574699 secs.
[07/18 16:29:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8559.278564     0.095459 -8559.326050 -164.500244     0.000000           0.000000    0.047485        0.047485
1 -8559.278564     0.023682 -8559.325928 -164.500244     0.000000           0.000000    0.047363      -99.952515
2 -8259.326172   299.999756 -8359.326172 -164.500244     0.000000           0.000000  100.000000       99.999878
3 -8259.326172   100.000000 -8259.349915 -164.500244     0.000000           0.000000    0.023743       -0.000122
4 -7457.397644   801.952271 -8159.326050 -164.500244   601.928406           0.000000  100.000000      100.000000
5 -6352.469238  1204.928406 -8059.326050 -164.500244  1606.856812         601.928406  100.000000      100.000000
6 -4643.076630  1809.392609 -7959.326050 -164.500244  3216.249420        1606.856812  100.000000      100.000000
7 -2026.987717  2716.088913 -7959.325928 -164.500244  5732.338135        3216.249420  200.000076      100.000198
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:29:59]  --------------------------------------------------------------------------------
[07/18 16:29:59]  Iteration: 37 (0 solution, 36 counterexamples)
[07/18 16:30:00]  Generator returned sat in 0.178792 secs.
[07/18 16:30:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:00]  Improved gap from 97 to 100
[07/18 16:30:00]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/18 16:30:00]  Verifer returned sat in 0.193959 secs.
[07/18 16:30:00]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8459.325928    0.095215 -8659.326172 -164.500244    0.000000           0.000000  200.000244      100.000244
1 -8459.325928  199.976074 -8559.326172 -164.500244    0.000000           0.000000  100.000244        0.000244
2 -8359.326172  200.000000 -8459.325928 -164.500244    0.000000           0.000000   99.999756        0.000000
3 -8159.302002  300.023926 -8259.326172 -164.500244    0.023926           0.000000  100.000244      100.000244
4 -8159.302002    2.000000 -8159.326172 -164.500244    0.023926           0.023926    0.000244        0.000244
5 -7353.302246  806.000000 -8159.326172 -164.500244  606.023926           0.023926  200.000000      100.000000
6 -7353.302246    2.000000 -8059.326172 -164.500244  606.023926         606.023926  100.000000        0.000000
7 -7047.302246  406.000000 -7959.325928 -164.500244  712.023926         606.023926  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:00]  --------------------------------------------------------------------------------
[07/18 16:30:00]  Iteration: 38 (0 solution, 37 counterexamples)
[07/18 16:30:01]  Generator returned sat in 0.125632 secs.
[07/18 16:30:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:01]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:30:01]  Verifer returned sat in 0.103850 secs.
[07/18 16:30:01]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8459.325928    0.095215 -8659.326172 -164.500244    0.000000           0.000000  200.000244      100.000244
1 -8459.325928  199.976074 -8559.326172 -164.500244    0.000000           0.000000  100.000244        0.000244
2 -8359.326172  200.000000 -8459.325928 -164.500244    0.000000           0.000000   99.999756        0.000000
3 -8159.302002  300.023926 -8259.326172 -164.500244    0.023926           0.000000  100.000244      100.000244
4 -8159.302002    2.000000 -8159.326172 -164.500244    0.023926           0.023926    0.000244        0.000244
5 -7357.302246  802.000000 -8159.326172 -164.500244  602.023926           0.023926  200.000000      100.000000
6 -7357.302246    2.000000 -8059.326172 -164.500244  602.023926         602.023926  100.000000        0.000000
7 -7055.302246  402.000000 -7959.325928 -164.500244  704.023926         602.023926  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:01]  --------------------------------------------------------------------------------
[07/18 16:30:01]  Iteration: 39 (0 solution, 38 counterexamples)
[07/18 16:30:02]  Generator returned sat in 0.178222 secs.
[07/18 16:30:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:02]  Improved number of small numbers from 52 to 63 out of a max of 89
[07/18 16:30:02]  Verifer returned sat in 0.448320 secs.
[07/18 16:30:02]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7959.302246    0.094727 -8059.326172 -164.500244    0.000000           0.000000  100.023926      100.023743
1 -7959.302246   99.999756 -7959.325989 -164.500244    0.000000           0.000000    0.023743        0.023743
2 -7859.302246  100.023743 -7859.325989 -164.500244    0.000000           0.000000    0.023743        0.023743
3 -7659.302246  200.023743 -7761.361603 -164.500244    0.023743           0.000000  102.035614      100.000000
4 -7459.302246  302.035614 -7759.325989 -164.500244    0.023743           0.023743  300.000000      200.000000
5 -7357.302246  402.000000 -7659.325928 -164.500244  102.023682           0.023743  200.000000      100.000061
6 -6952.302246  605.000000 -7559.325989 -164.500244  307.023743         102.023682  300.000000      200.000000
7 -6342.802246  909.500000 -7459.325928 -164.500244  916.523682         307.023743  200.000000      100.000061
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:02]  --------------------------------------------------------------------------------
[07/18 16:30:02]  Iteration: 40 (0 solution, 39 counterexamples)
[07/18 16:30:03]  Generator returned sat in 0.124627 secs.
[07/18 16:30:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:03]  Improved number of small numbers from 44 to 46 out of a max of 89
[07/18 16:30:03]  Verifer returned sat in 0.530496 secs.
[07/18 16:30:03]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7959.302246     0.094482 -8059.326416 -164.500244     0.000000           0.000000  100.024170      100.023743
1 -7959.302246    99.999512 -7959.325989 -164.500244     0.000000           0.000000    0.023743        0.023743
2 -7859.302246   100.023743 -7859.325989 -164.500244     0.000000           0.000000    0.023743        0.023743
3 -7659.302246   200.023743 -7761.361603 -164.500244     0.023743           0.000000  102.035614      100.000000
4 -7459.302246   302.035614 -7759.325989 -164.500244     0.023743           0.023743  300.000000      200.000000
5 -7055.266632   704.035614 -7659.325989 -164.500244   304.059357           0.023743  300.000000      200.000000
6 -6297.213211  1058.053421 -7559.325989 -164.500244   962.112778         304.059357  300.000000      200.000000
7 -5008.133080  1589.080132 -7459.325928 -164.500244  2251.192871         962.112778  199.999977      100.000038
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:04]  --------------------------------------------------------------------------------
[07/18 16:30:04]  Iteration: 41 (0 solution, 40 counterexamples)
[07/18 16:30:04]  Generator returned sat in 0.106421 secs.
[07/18 16:30:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:05]  Improved number of small numbers from 28 to 40 out of a max of 89
[07/18 16:30:05]  Verifer returned sat in 0.738670 secs.
[07/18 16:30:05]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8110.319824     0.094482 -8310.343262 -164.500244     0.000000           0.000000  200.023438      100.023575
1 -8110.319824     0.023682 -8110.343399 -164.500244     0.000000           0.000000    0.023575        0.023575
2 -8010.319778   100.023621 -8010.343399 -164.500244     0.000000           0.000000    0.023621        0.023621
3 -7810.319778   200.023621 -7912.378830 -164.500244     0.023621           0.000000  102.035431      100.000000
4 -7610.319778   302.035431 -7910.343399 -164.500244     0.023621           0.023621  300.000000      200.000000
5 -7055.266632   855.053146 -7810.343399 -164.500244   555.076767           0.023621  200.000000      100.000000
6 -5970.686913  1284.579720 -7710.343399 -164.500244  1539.656487         555.076767  200.000000      100.000000
7 -4241.817333  1928.869579 -7610.343262 -164.500244  3168.525879        1539.656487  200.000050      100.000187
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:05]  --------------------------------------------------------------------------------
[07/18 16:30:05]  Iteration: 42 (0 solution, 41 counterexamples)
[07/18 16:30:06]  Generator returned sat in 0.123866 secs.
[07/18 16:30:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:06]  Improved gap from 193/8192 to 100
[07/18 16:30:06]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/18 16:30:06]  Verifer returned sat in 0.234968 secs.
[07/18 16:30:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8110.343262     0.094238 -8310.343506 -164.500244      0.000000           0.000000  200.000244      100.000244
1 -8110.343262     0.046875 -8210.343262 -164.500244      0.000000           0.000000  100.000000        0.000244
2 -8110.296387   100.046875 -8110.343506 -164.500244      0.000000           0.000000    0.047119      -99.952881
3 -7712.857666   397.485840 -7996.343506 -164.500244     97.485596           0.000000  186.000244      100.000244
4 -6829.629150  1069.228760 -7867.343506 -164.500244    780.714355          97.485596  257.000000      200.000000
5 -4966.286377  2120.342773 -7799.343506 -164.500244   2544.057129         780.714355  289.000000      200.000000
6 -1606.272217  3649.014160 -7710.343506 -164.500244   5804.071289        2544.057129  300.000000      200.000000
7  3998.249023  5904.521240 -7610.343506 -164.500244  11308.592529        5804.071289  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:06]  --------------------------------------------------------------------------------
[07/18 16:30:06]  Iteration: 43 (0 solution, 42 counterexamples)
[07/18 16:30:07]  Generator returned sat in 0.229579 secs.
[07/18 16:30:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:07]  Improved number of small numbers from 62 to 74 out of a max of 89
[07/18 16:30:07]  Verifer returned sat in 0.449527 secs.
[07/18 16:30:08]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8010.343750     0.094238 -8310.343506 -164.500244     0.000000           0.000000  299.999756      199.999756
1 -8010.343750   299.953125 -8210.343262 -164.500244     0.000000           0.000000  199.999512       99.999756
2 -7810.343750   399.999512 -8110.343506 -164.500244     0.000000           0.000000  299.999756      199.999756
3 -7503.524333   606.819173 -7996.343506 -164.500244   206.819336           0.000000  285.999837      199.999837
4 -6720.295410  1069.228760 -7867.343506 -164.500244   990.048096         206.819336  157.000000      100.000000
5 -5099.952393  1777.343018 -7799.343506 -164.500244  2510.390951         990.048096  189.000163      100.000163
6 -2465.438029  2823.514526 -7710.343506 -164.500244  5044.905477        2510.390951  200.000000      100.000000
7  1714.833761  4380.271790 -7610.343506 -164.500244  9025.177490        5044.905477  299.999776      199.999776
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:08]  --------------------------------------------------------------------------------
[07/18 16:30:08]  Iteration: 44 (0 solution, 43 counterexamples)
[07/18 16:30:08]  Generator returned sat in 0.244999 secs.
[07/18 16:30:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:09]  Improved gap from 0 to 100
[07/18 16:30:09]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:30:09]  Verifer returned sat in 0.229125 secs.
[07/18 16:30:09]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8195.732422     0.094238 -8295.732422 -164.500244     0.000000           0.000000  100.000000      100.000000
1 -8195.732422     0.023438 -8295.732422 -164.500244     0.000000           0.000000  100.000000        0.000000
2 -7895.732422   400.000000 -8095.732422 -164.500244     0.000000           0.000000  200.000000      200.000000
3 -7891.638672   204.093750 -8095.732422 -164.500244     0.023438           0.000000  204.070312      104.070312
4 -7891.638672   204.046875 -7995.732422 -164.500244     0.023438           0.023438  104.070312        4.070312
5 -6985.615234  1010.093750 -7852.732422 -164.500244   710.117188           0.023438  157.000000      100.000000
6 -6514.068359   628.546875 -7795.732422 -164.500244   981.664062         710.117188  300.000000      200.000000
7 -6347.794922   466.273438 -7695.732422 -164.500244  1147.937500         981.664062  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:09]  --------------------------------------------------------------------------------
[07/18 16:30:09]  Iteration: 45 (0 solution, 44 counterexamples)
[07/18 16:30:10]  Generator returned sat in 0.112489 secs.
[07/18 16:30:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:10]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:30:10]  Verifer returned sat in 0.105583 secs.
[07/18 16:30:10]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8195.732422    0.094238 -8395.732422 -164.500488    0.000000           0.000000  200.000000      100.000000
1 -8195.732422    0.023438 -8295.732422 -164.500488    0.000000           0.000000  100.000000        0.000000
2 -7895.732422  400.000000 -8191.755859 -164.500488    0.000000           0.000000  296.023438      200.000000
3 -7891.638672  300.117188 -8095.732422 -164.500488    0.023438           0.000000  204.070312      104.070312
4 -7891.638672  152.000000 -7995.732422 -164.500488    0.023438           0.023438  104.070312        4.070312
5 -7089.708984  906.000000 -7795.732422 -164.500488  506.023438           0.023438  200.000000      200.000000
6 -7089.697266  200.011719 -7697.057943 -164.500488  506.035156         506.023438  101.325521      100.000000
7 -6989.685547  201.337240 -7695.732422 -164.500488  506.046875         506.035156  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:10]  --------------------------------------------------------------------------------
[07/18 16:30:10]  Iteration: 46 (0 solution, 45 counterexamples)
[07/18 16:30:11]  Generator returned sat in 0.428374 secs.
[07/18 16:30:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:12]  Improved number of small numbers from 48 to 80 out of a max of 89
[07/18 16:30:12]  Verifer returned sat in 0.581816 secs.
[07/18 16:30:12]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14362.872803     0.093994 -14562.872559 -164.500977     0.000000           0.000000  199.999756      199.999756
1 -14362.872803     0.046875 -14462.872803 -164.500977     0.000000           0.000000  100.000000       99.999756
2 -14362.825928   100.046875 -14362.872681 -164.500977     0.000000           0.000000    0.046753        0.046631
3 -14162.825928   200.046753 -14362.872559 -164.500977     0.046631           0.000000  200.000000      100.000000
4 -13860.732422   502.093506 -14162.872803 -164.500977   102.140137           0.046631  200.000244      200.000000
5 -12904.545654  1156.187012 -14123.872681 -164.500977   958.327271         102.140137  260.999756      199.999634
6 -10731.671387  2433.874023 -13993.872559 -164.500977  3131.201172         958.327271  131.000000      100.000000
7  -5808.423340  5054.248047 -13962.872559 -164.500977  7954.449219        3131.201172  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:12]  --------------------------------------------------------------------------------
[07/18 16:30:12]  Iteration: 47 (0 solution, 46 counterexamples)
[07/18 16:30:12]  Generator returned sat in 0.190514 secs.
[07/18 16:30:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:13]  Improved gap from 191/8192 to 100
[07/18 16:30:13]  Improved number of small numbers from 42 to 90 out of a max of 90
[07/18 16:30:13]  Verifer returned sat in 0.437114 secs.
[07/18 16:30:13]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12292.389893    0.093994 -12392.389893 -164.500732    0.000000           0.000000  100.000000      100.000000
1 -12292.389893    0.046631 -12392.389893 -164.500732    0.000000           0.000000  100.000000        0.000000
2 -12192.389893  200.000000 -12292.389648 -164.500732    0.000000           0.000000   99.999756        0.000000
3 -11992.343262  300.046387 -12140.847900 -164.500732    0.046387           0.000000  148.458252      100.000244
4 -11863.007324  277.794189 -11997.585938 -164.500732   29.382568           0.046387  105.196045      100.000000
5 -11629.904297  338.299072 -11939.791748 -164.500732  162.485352          29.382568  147.402100      100.000244
6 -11429.857910  347.448486 -11892.389648 -164.500732  162.531982         162.485352  299.999756      200.000000
7 -11429.857910  299.953369 -11792.389648 -164.500732  162.531982         162.531982  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:13]  --------------------------------------------------------------------------------
[07/18 16:30:13]  Iteration: 48 (0 solution, 47 counterexamples)
[07/18 16:30:14]  Generator returned sat in 0.214808 secs.
[07/18 16:30:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:15]  Improved number of small numbers from 41 to 81 out of a max of 89
[07/18 16:30:15]  Verifer returned sat in 0.547758 secs.
[07/18 16:30:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12314.089111    0.093750 -12514.089111 -164.500977   0.000000           0.000000  200.000000      100.000000
1 -12314.089111    0.023193 -12414.089111 -164.500977   0.000000           0.000000  100.000000        0.000000
2 -12114.089111  300.000000 -12214.089150 -164.500977   0.000000           0.000000  100.000039      100.000000
3 -11914.065835  300.023315 -12114.089111 -164.500977   0.023438           0.000000  199.999839      199.999839
4 -11912.065674  202.000000 -12015.406982 -164.500977   0.046631           0.023438  103.294678      101.976807
5 -11814.019287  201.341064 -11948.755817 -164.500977   0.069824           0.046631  134.666706      100.000000
6 -11814.019287  134.666667 -11814.112549 -164.500977   0.069824           0.069824    0.023438        0.000000
7 -11610.042725  204.000000 -11814.089111 -164.500977   4.046387           0.069824  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:15]  --------------------------------------------------------------------------------
[07/18 16:30:15]  Iteration: 49 (0 solution, 48 counterexamples)
[07/18 16:30:15]  Generator returned sat in 0.165190 secs.
[07/18 16:30:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:16]  Improved gap from 191/32768 to 100
[07/18 16:30:16]  Improved number of small numbers from 38 to 90 out of a max of 90
[07/18 16:30:16]  Verifer returned sat in 0.259123 secs.
[07/18 16:30:16]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12314.089111    0.093750 -12410.106689 -164.500732   0.000000           0.000000   96.017578        0.006104
1 -12314.089111    0.023193 -12314.095215 -164.500732   0.000000           0.000000    0.006104      -99.993896
2 -12214.089355  100.005859 -12214.095215 -164.500732   0.000000           0.000000    0.005859      -99.994141
3 -12015.089355  199.005859 -12015.094971 -164.500732   0.000000           0.000000    0.005615       -0.994141
4 -11814.089111  201.005859 -11922.095215 -164.500732   0.005859           0.000000  108.000244      100.000244
5 -11724.089355  198.000000 -11914.095215 -164.500732   0.005859           0.005859  190.000000       90.000000
6 -11714.089355  200.000000 -11716.089355 -164.500732   0.005859           0.005859    1.994141        0.000000
7 -11514.083496  202.000000 -11714.095215 -164.500732   0.011475           0.005859  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:16]  --------------------------------------------------------------------------------
[07/18 16:30:16]  Iteration: 50 (0 solution, 49 counterexamples)
[07/18 16:30:17]  Generator returned sat in 0.885303 secs.
[07/18 16:30:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:30:18]  Improved number of small numbers from 77 to 81 out of a max of 89
[07/18 16:30:18]  Verifer returned sat in 0.271808 secs.
[07/18 16:30:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12314.089355    0.093750 -12414.089111 -64.506836     0.000000            0.00000   99.999756       99.999756
1 -12314.089355    0.001221 -12414.089111 -64.506836     0.000000            0.00000   99.999756       -0.000244
2 -12114.089355  299.999756 -12214.089111 -64.506836     0.000000            0.00000   99.999756       99.999756
3 -12014.087646  200.001465 -12114.089111 -64.506836     0.001250            0.00000  100.000215      100.000215
4 -12014.087646    0.010000 -12014.090361 -64.506836     0.001250            0.00125    0.001465        0.000215
5 -11213.571611  800.517500 -12014.089111 -64.506836   600.516250            0.00125  200.001250      100.001250
6 -11213.571611    0.010000 -11814.089111 -64.506836   600.516250          600.51625    0.001250        0.001250
7 -10613.052861  600.520000 -11814.089111 -64.506836  1001.036133          600.51625  200.000117      100.000117
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:18]  --------------------------------------------------------------------------------
[07/18 16:30:18]  Iteration: 51 (0 solution, 50 counterexamples)
[07/18 16:30:19]  Generator returned sat in 0.346945 secs.
[07/18 16:30:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:30:19]  Improved gap from 1/1600 to 100
[07/18 16:30:19]  Improved number of small numbers from 61 to 80 out of a max of 90
[07/18 16:30:19]  Verifer returned sat in 0.446826 secs.
[07/18 16:30:19]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12314.090088    0.093750 -12414.090332 -64.506836    0.000000           0.000000  100.000244      100.000244
1 -12314.090088    0.002686 -12414.090088 -64.506836    0.000000           0.000000  100.000000        0.000244
2 -12214.090088  200.000000 -12314.090332 -64.506836    0.000000           0.000000  100.000244        0.000244
3 -12014.087891  300.002441 -12169.090146 -64.506836    0.002441           0.000000  154.999814      100.000000
4 -12014.087891    0.010000 -12114.090088 -64.506836    0.002441           0.002441   99.999756        0.000000
5 -11513.572646  600.515000 -11914.090332 -64.506836  300.517500           0.002441  100.000186      100.000186
6 -11513.572646    0.010000 -11914.090146 -64.506836  300.517500         300.517500  100.000000        0.000186
7 -11103.057646  510.515000 -11814.090332 -64.506836  511.032500         300.517500  200.000186      100.000186
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:20]  --------------------------------------------------------------------------------
[07/18 16:30:20]  Iteration: 52 (0 solution, 51 counterexamples)
[07/18 16:30:23]  Generator returned sat in 2.880828 secs.
[07/18 16:30:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:30:23]  Improved number of small numbers from 81 to 87 out of a max of 89
[07/18 16:30:23]  Verifer returned sat in 0.185010 secs.
[07/18 16:30:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12546.284424    0.093750 -12646.330566  135.492676    0.000000           0.000000  100.046143       67.805664
1 -12546.284424    0.046387 -12546.330648  135.492676    0.000000           0.000000    0.046224      -32.194336
2 -12214.090088  332.240560 -12414.090088  135.492676    0.000000           0.000000  200.000000      200.000000
3 -12213.997314  200.092773 -12414.090088  135.492676    0.046387           0.000000  200.046387      100.046387
4 -12213.997314  100.046387 -12214.090088  135.492676    0.046387           0.046387    0.046387        0.046387
5 -11614.136475  599.907227 -12214.090088  135.492676  299.953613           0.046387  300.000000      200.000000
6 -11614.136475  299.953613 -12114.090088  135.492676  299.953613         299.953613  200.000000      100.000000
7 -11062.682861  751.453613 -12014.090088  135.492676  751.406982         299.953613  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:24]  --------------------------------------------------------------------------------
[07/18 16:30:24]  Iteration: 53 (0 solution, 52 counterexamples)
[07/18 16:30:24]  Generator returned sat in 0.183732 secs.
[07/18 16:30:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:25]  Improved number of small numbers from 77 to 83 out of a max of 89
[07/18 16:30:25]  Verifer returned sat in 0.274331 secs.
[07/18 16:30:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12414.090332    0.093750 -12646.330811  135.492432    0.000000           0.000000  232.240479      199.999756
1 -12414.090332    0.046387 -12546.330811  135.492432    0.000000           0.000000  132.240479       99.999756
2 -12414.090332    0.023193 -12514.090088  135.492432    0.000000           0.000000   99.999756       -0.000244
3 -11713.997314  800.092773 -12414.090088  135.492432  500.092773           0.000000  200.000000      100.000000
4 -11513.950928  400.046387 -12214.090088  135.492432  600.139160         500.092773  100.000000      100.000000
5 -11413.927734  200.023193 -12214.090088  135.492432  600.162354         600.139160  200.000000      100.000000
6 -11413.927734  100.011597 -12114.090088  135.492432  600.162354         600.162354  100.000000        0.000000
7 -10961.916138  552.011597 -12014.090088  135.492432  752.174072         600.162354  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:25]  --------------------------------------------------------------------------------
[07/18 16:30:25]  Iteration: 54 (0 solution, 53 counterexamples)
[07/18 16:30:26]  Generator returned sat in 0.268444 secs.
[07/18 16:30:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:26]  Improved number of small numbers from 40 to 55 out of a max of 89
[07/18 16:30:26]  Verifer returned sat in 0.592072 secs.
[07/18 16:30:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12303.196289    0.093750 -12403.196533  156.32959    0.000000           0.000000  100.000244      100.000016
1 -12303.150391  100.046143 -12303.196305  156.32959    0.000000           0.000000    0.045914        0.045914
2 -12003.196305  300.000000 -12203.196305  156.32959    0.000000           0.000000  200.000000      200.000000
3 -12003.150162  200.046143 -12103.196305  156.32959    0.046143           0.000000  100.000000      100.000000
4 -12002.627091  100.523071 -12103.196305  156.32959    0.046143           0.046143  100.523071        0.523071
5 -11700.627091  402.523071 -11903.196305  156.32959  102.569214           0.046143  100.000000      100.000000
6 -11598.865555  201.761536 -11903.196289  156.32959  104.330566         102.569214  200.000167      100.000183
7 -11598.865555  101.380768 -11803.196289  156.32959  104.330566         104.330566  100.000167        0.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:27]  --------------------------------------------------------------------------------
[07/18 16:30:27]  Iteration: 55 (0 solution, 54 counterexamples)
[07/18 16:30:28]  Generator returned sat in 0.766014 secs.
[07/18 16:30:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:30:28]  Improved gap from 377/32768 to 100
[07/18 16:30:29]  Improved number of small numbers from 42 to 88 out of a max of 90
[07/18 16:30:29]  Verifer returned sat in 0.496900 secs.
[07/18 16:30:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12609.009033    0.093506 -12709.009277  156.32959    0.000000           0.000000  100.000244      100.000000
1 -12609.009033  100.000000 -12709.009033  156.32959    0.000000           0.000000  100.000000        0.000000
2 -12609.009033   99.954102 -12609.009033  156.32959    0.000000           0.000000    0.000000     -100.000000
3 -12022.377197  586.631836 -12502.778809  156.32959  286.631592           0.000000  193.770020      100.000244
4 -11922.331299  293.815918 -12356.463135  156.32959  286.677734         286.631592  147.454102      100.000000
5 -11922.331299  147.407959 -12309.009033  156.32959  286.677734         286.677734  100.000000        0.000000
6 -11423.423340  598.907959 -12209.009033  156.32959  485.585938         286.677734  299.999756      199.999756
7 -11423.423340  299.953979 -12109.009033  156.32959  485.585938         485.585938  199.999756       99.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:29]  --------------------------------------------------------------------------------
[07/18 16:30:29]  Iteration: 56 (0 solution, 55 counterexamples)
[07/18 16:30:31]  Generator returned sat in 1.495650 secs.
[07/18 16:30:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:30:31]  Improved gap from 1/800 to 50.0
[07/18 16:30:31]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/18 16:30:31]  Verifer returned sat in 0.306991 secs.
[07/18 16:30:31]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12759.009033    0.093262 -12759.009277  206.329590        0.0                0.0    0.000244        0.000244
1 -12709.009277   50.000000 -12759.009033  256.329346        0.0                0.0   49.999756       -0.000244
2 -12409.009277  349.999756 -12609.009033  256.329346        0.0                0.0  199.999756      199.999756
3 -12409.009277   50.045898 -12509.009277  256.329346        0.0                0.0  100.000000       99.999756
4 -12409.009277   50.045898 -12409.962891  256.329346        0.0                0.0    0.953613       -0.000244
5 -12359.916992   50.045898 -12409.009033  306.329346        0.0                0.0   49.092041       -0.907959
6 -12358.963135   50.045898 -12359.009033  356.329346        0.0                0.0    0.045898      -49.954102
7 -12308.963135   50.045898 -12309.009033  356.329590        0.0                0.0    0.045898      -99.953857
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:30:32]  --------------------------------------------------------------------------------
[07/18 16:30:32]  Iteration: 57 (0 solution, 56 counterexamples)
[07/18 16:30:32]  Generator returned sat in 0.274467 secs.
[07/18 16:30:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:30:33]  Improved gap from 1/400 to 100
[07/18 16:30:33]  Improved number of small numbers from 50 to 64 out of a max of 90
[07/18 16:30:33]  Verifer returned sat in 0.527624 secs.
[07/18 16:30:33]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12759.005127    0.093262 -12958.005283  306.325596    0.000000            0.00000  199.000156      100.000156
1 -12759.005127  199.000000 -12859.005127  306.325596    0.000000            0.00000  100.000000        0.000156
2 -12659.005127  200.000000 -12759.005283  306.325596    0.000000            0.00000  100.000156        0.000156
3 -12659.005127    0.001250 -12659.005283  306.325596    0.000000            0.00000    0.000156      -99.999844
4 -12359.004033  300.001250 -12459.005371  306.325596    0.001250            0.00000  100.000088      100.000000
5 -12359.004033    0.010000 -12409.510283  306.325596    0.001250            0.00125   50.505000        0.000000
6 -12059.004033  350.505000 -12359.005283  306.325596    0.001250            0.00125  300.000000      200.000000
7 -11707.499033  651.505000 -12259.005127  306.325596  351.506104            0.00125  199.999990      100.000146
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:33]  --------------------------------------------------------------------------------
[07/18 16:30:33]  Iteration: 58 (0 solution, 57 counterexamples)
[07/18 16:30:34]  Generator returned sat in 0.142307 secs.
[07/18 16:30:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:30:35]  Improved number of small numbers from 59 to 61 out of a max of 89
[07/18 16:30:35]  Verifer returned sat in 0.458000 secs.
[07/18 16:30:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12759.005127    0.093018 -12957.506494  306.325596    0.000000            0.00000  198.501367      100.000156
1 -12759.005127  198.501221 -12859.005127  306.325596    0.000000            0.00000  100.000000        0.000156
2 -12659.005127  200.000000 -12759.005283  306.325596    0.000000            0.00000  100.000156        0.000156
3 -12659.005127    0.000039 -12659.005283  306.325596    0.000000            0.00000    0.000156      -99.999844
4 -12359.004033  300.001250 -12459.005371  306.325596    0.001250            0.00000  100.000088      100.000000
5 -12359.004033    0.010000 -12409.760283  306.325596    0.001250            0.00125   50.755000        0.000000
6 -12059.004033  350.755000 -12359.005283  306.325596    0.001250            0.00125  300.000000      200.000000
7 -11706.749033  652.255000 -12259.005127  306.325596  352.256104            0.00125  199.999990      100.000146
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:35]  --------------------------------------------------------------------------------
[07/18 16:30:35]  Iteration: 59 (0 solution, 58 counterexamples)
[07/18 16:30:36]  Generator returned sat in 0.641114 secs.
[07/18 16:30:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:36]  Improved gap from 0 to 100
[07/18 16:30:36]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/18 16:30:36]  Verifer returned sat in 0.241649 secs.
[07/18 16:30:36]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14168.574219     0.093018 -14168.620117  306.325439     0.000000           0.000000    0.045898        0.045654
1 -14168.574219     0.022705 -14168.619873  306.325439     0.000000           0.000000    0.045654      -99.954346
2 -14068.619873   100.000000 -14068.619873  306.325439     0.000000           0.000000    0.000000     -100.000000
3 -13868.596924   200.022949 -13868.620117  306.325439     0.000000           0.000000    0.023193        0.022949
4 -13366.597168   502.022949 -13868.619873  306.325439   302.022705           0.000000  200.000000      100.000000
5 -12561.051270  1005.545898 -13768.619873  306.325439   907.568604         302.022705  300.000000      200.000000
6 -10848.459473  2012.591797 -13668.619873  306.325439  2520.160400         907.568604  300.000000      200.000000
7  -7121.775879  4026.683594 -13568.619873  306.325439  6246.843994        2520.160400  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:37]  --------------------------------------------------------------------------------
[07/18 16:30:37]  Iteration: 60 (0 solution, 59 counterexamples)
[07/18 16:30:37]  Generator returned sat in 0.155958 secs.
[07/18 16:30:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:38]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:30:38]  Verifer returned sat in 0.149433 secs.
[07/18 16:30:38]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14167.949219     0.093018 -14167.995117  306.325439     0.000000           0.000000    0.045898        0.045898
1 -14167.949219     0.022949 -14167.995117  306.325439     0.000000           0.000000    0.045898      -99.954102
2 -14067.620117   100.375000 -14067.620117  306.325439     0.000000           0.000000    0.000000      -99.625000
3 -13867.972168   199.647949 -13867.995117  306.325439     0.000000           0.000000    0.022949        0.022949
4 -13366.347168   501.647949 -13867.995117  306.325439   301.647949           0.000000  200.000000      100.000000
5 -12561.051270  1005.295898 -13767.995117  306.325439   906.943848         301.647949  300.000000      200.000000
6 -10848.459473  2012.591797 -13667.995117  306.325439  2519.535645         906.943848  300.000000      200.000000
7  -7121.275879  4027.183594 -13567.995117  306.325439  6246.719238        2519.535645  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:38]  --------------------------------------------------------------------------------
[07/18 16:30:38]  Iteration: 61 (0 solution, 60 counterexamples)
[07/18 16:30:39]  Generator returned sat in 0.247174 secs.
[07/18 16:30:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:39]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:30:39]  Verifer returned sat in 0.108794 secs.
[07/18 16:30:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14167.949463     0.093018 -14167.995117  306.325195     0.000000           0.000000    0.045654        0.045654
1 -14167.949463     0.022705 -14167.995117  306.325195     0.000000           0.000000    0.045654      -99.954346
2 -14067.620117   100.375000 -14067.620117  306.325195     0.000000           0.000000    0.000000      -99.625000
3 -13867.972168   199.647949 -13867.995117  306.325195     0.000000           0.000000    0.022949        0.022949
4 -13366.347168   501.647949 -13866.495117  306.325195   301.647949           0.000000  198.500000      100.000000
5 -12561.051270  1003.795898 -13763.495117  306.325195   906.943848         301.647949  295.500000      200.000000
6 -10848.459473  2008.091797 -13667.995117  306.325195  2519.535645         906.943848  300.000000      200.000000
7  -7131.775879  4016.683594 -13567.995117  306.325195  6236.219238        2519.535645  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:39]  --------------------------------------------------------------------------------
[07/18 16:30:39]  Iteration: 62 (0 solution, 61 counterexamples)
[07/18 16:30:40]  Generator returned sat in 0.187157 secs.
[07/18 16:30:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:40]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:30:40]  Verifer returned sat in 0.109414 secs.
[07/18 16:30:40]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14167.949707     0.093018 -14167.995117  306.324951     0.000000           0.000000    0.045410        0.045410
1 -14167.949707     0.022461 -14167.995117  306.324951     0.000000           0.000000    0.045410      -99.954590
2 -14067.620117   100.375000 -14067.620117  306.324951     0.000000           0.000000    0.000000      -99.625000
3 -13867.972168   199.647949 -13867.995117  306.324951     0.000000           0.000000    0.022949        0.022949
4 -13366.347168   501.647949 -13866.995117  306.324951   301.647949           0.000000  199.000000      100.000000
5 -12561.051270  1004.295898 -13763.495117  306.324951   906.943848         301.647949  295.500000      200.000000
6 -10846.959473  2009.591797 -13667.995117  306.324951  2521.035645         906.943848  300.000000      200.000000
7  -7126.775879  4020.183594 -13567.995117  306.324951  6236.218994        2521.035645  205.000244      105.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:41]  --------------------------------------------------------------------------------
[07/18 16:30:41]  Iteration: 63 (0 solution, 62 counterexamples)
[07/18 16:30:42]  Generator returned sat in 0.338463 secs.
[07/18 16:30:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:42]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:30:42]  Verifer returned sat in 0.119373 secs.
[07/18 16:30:42]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14167.983887     0.092773 -14167.995117  306.324463     0.000000           0.000000    0.011230        0.011230
1 -14167.983887     0.005615 -14167.995117  306.324463     0.000000           0.000000    0.011230      -99.988770
2 -14001.070801   166.924316 -14001.070801  306.324463     0.000000           0.000000    0.000000      -33.075684
3 -13867.972168   133.098633 -13867.995117  306.324463     0.000000           0.000000    0.022949        0.022949
4 -13366.347168   501.647949 -13866.995605  306.324463   301.647949           0.000000  199.000488      100.000000
5 -12561.551758  1003.795898 -13763.495605  306.324463   906.443848         301.647949  295.500000      199.999512
6 -10848.959961  2008.091797 -13667.995117  306.324463  2521.035400         906.443848  297.999756      197.999756
7  -7130.276123  4016.683594 -13567.995117  306.324463  6236.218750        2521.035400  201.500244      101.500244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:42]  --------------------------------------------------------------------------------
[07/18 16:30:42]  Iteration: 64 (0 solution, 63 counterexamples)
[07/18 16:30:43]  Generator returned sat in 0.192481 secs.
[07/18 16:30:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:43]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:30:43]  Verifer returned sat in 0.128185 secs.
[07/18 16:30:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14167.983887    0.092773 -14267.995117  306.324463     0.000000           0.000000  100.011230        0.011230
1 -14167.983887    0.005615 -14167.995117  306.324463     0.000000           0.000000    0.011230      -99.988770
2 -13968.642904  199.352214 -13968.642904  306.324463     0.000000           0.000000    0.000000       -0.647786
3 -13667.995117  300.647786 -13967.995117  306.324463     0.000000           0.000000  300.000000      200.000000
4 -13215.023438  752.971680 -13767.995117  306.324463   452.971680           0.000000  100.000000      100.000000
5 -12561.551758  753.471680 -13767.995117  306.324463   906.443848         452.971680  299.999512      199.999512
6 -12107.579590  753.971680 -13667.995117  306.324463  1360.415527         906.443848  200.000000      100.000000
7 -11553.107910  754.471680 -13567.995117  306.324463  1814.887207        1360.415527  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:43]  --------------------------------------------------------------------------------
[07/18 16:30:43]  Iteration: 65 (0 solution, 64 counterexamples)
[07/18 16:30:44]  Generator returned sat in 0.263672 secs.
[07/18 16:30:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:45]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/18 16:30:45]  Verifer returned sat in 0.238012 secs.
[07/18 16:30:45]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14167.984131     0.092529 -14267.995117  306.323975     0.000000           0.000000  100.010986        0.010986
1 -14167.984131     0.005371 -14167.995117  306.323975     0.000000           0.000000    0.010986      -99.989014
2 -13968.642822   199.352295 -13968.642904  306.323975     0.000000           0.000000    0.000081       -0.647705
3 -13667.995117   300.647786 -13967.995117  306.323975     0.000000           0.000000  300.000000      200.000000
4 -13215.023438   752.971680 -13767.995117  306.323975   452.971680           0.000000  100.000000      100.000000
5 -12185.065918  1129.957520 -13767.995117  306.323975  1282.929688         452.971680  299.999512      199.999512
6 -10789.629150  1695.436279 -13667.995117  306.323975  2678.365967        1282.929688  200.000000      100.000000
7  -8445.974731  2543.654419 -13567.995117  306.323975  4922.020264        2678.365967  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:30:45]  --------------------------------------------------------------------------------
[07/18 16:30:45]  Iteration: 66 (0 solution, 65 counterexamples)
[07/18 16:30:46]  Generator returned sat in 0.634904 secs.
[07/18 16:30:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:46]  Improved gap from 2222089/32768 to 100
[07/18 16:30:47]  Improved number of small numbers from 55 to 68 out of a max of 90
[07/18 16:30:47]  Verifer returned sat in 0.421395 secs.
[07/18 16:30:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13629.904053    0.092529 -13629.949463  306.323975    0.000000           0.000000    0.045410        0.045410
1 -13629.904053    0.022949 -13629.949463  306.323975    0.000000           0.000000    0.045410      -99.954590
2 -13529.926758  100.022705 -13529.949463  306.323975    0.000000           0.000000    0.022705      -99.977295
3 -13106.903809  423.045654 -13329.949463  306.323975  123.045654           0.000000  100.000000      100.000000
4 -12994.880981  212.022827 -13236.483887  306.323975  135.068481         123.045654  106.534424      100.000000
5 -12994.880981  106.511414 -13162.159515  306.323975  135.068481         135.068481   32.210052        0.000000
6 -12604.045380  423.045654 -13129.949463  306.323975  225.904297         135.068481  299.999786      199.999786
7 -12604.045380  212.022827 -13029.949463  306.323975  225.904297         225.904297  199.999786       99.999786
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:47]  --------------------------------------------------------------------------------
[07/18 16:30:47]  Iteration: 67 (0 solution, 66 counterexamples)
[07/18 16:30:48]  Generator returned sat in 0.204283 secs.
[07/18 16:30:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:48]  Improved number of small numbers from 53 to 89 out of a max of 89
[07/18 16:30:48]  Verifer returned sat in 0.216002 secs.
[07/18 16:30:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13629.938232    0.092529 -13731.619873  306.323486    0.000000           0.000000  101.681641       99.999512
1 -13629.938232    0.022949 -13629.949463  306.323486    0.000000           0.000000    0.011230       -0.000488
2 -13529.937988  100.011475 -13529.949463  306.323486    0.000000           0.000000    0.011475       -0.000244
3 -13429.938232  100.011230 -13429.949463  306.323730    0.000000           0.000000    0.011230       -0.000244
4 -13026.267822  403.681641 -13332.267822  306.323730  103.670654           0.000000  202.329346      199.999512
5 -13026.256348  202.340820 -13329.937988  306.323730  103.681641         103.670654  200.000000      100.000000
6 -13026.256348  101.670410 -13129.937988  306.323730  103.681641         103.681641    0.000000        0.000000
7 -12622.574463  403.681885 -13129.937988  306.323730  207.363770         103.681641  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:48]  --------------------------------------------------------------------------------
[07/18 16:30:48]  Iteration: 68 (0 solution, 67 counterexamples)
[07/18 16:30:50]  Generator returned sat in 0.499988 secs.
[07/18 16:30:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:50]  Improved number of small numbers from 75 to 89 out of a max of 89
[07/18 16:30:50]  Verifer returned sat in 0.139666 secs.
[07/18 16:30:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13526.222168    0.092285 -13526.267822  102.65332    0.000000           0.000000    0.045654        0.045654
1 -13526.222168    0.022705 -13526.267822  102.65332    0.000000           0.000000    0.045654      -99.954346
2 -13424.222168  102.045654 -13424.244873  102.65332    0.000000           0.000000    0.022705      -97.954346
3 -13326.245117   97.999756 -13326.267822  102.65332    0.000000           0.000000    0.022705      -99.977295
4 -13026.268066  299.999756 -13126.267822  102.65332    0.000000           0.000000   99.999756       99.999756
5 -12424.268066  701.999756 -13126.267822  102.65332  501.999756           0.000000  200.000000      100.000000
6 -12424.268066    0.500000 -12926.267822  102.65332  501.999756         501.999756    0.000000        0.000000
7 -12021.768066  402.500000 -12926.267822  102.65332  604.500000         501.999756  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:50]  --------------------------------------------------------------------------------
[07/18 16:30:50]  Iteration: 69 (0 solution, 68 counterexamples)
[07/18 16:30:51]  Generator returned sat in 0.287567 secs.
[07/18 16:30:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:51]  Improved gap from 93/4096 to 100
[07/18 16:30:51]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:30:51]  Verifer returned sat in 0.159190 secs.
[07/18 16:30:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13567.449707    0.092285 -13615.222412  102.65332    0.00000            0.00000   47.772705       47.772705
1 -13567.449707    0.045410 -13615.222412  102.65332    0.00000            0.00000   47.772705      -52.227295
2 -13415.222412  200.000000 -13515.222412  102.65332    0.00000            0.00000  100.000000        0.000000
3 -13415.177002  100.045410 -13415.222412  102.65332    0.00000            0.00000    0.045410      -99.954590
4 -13113.177002  302.045410 -13315.222412  102.65332    2.04541            0.00000  200.000000      100.000000
5 -13010.631592  302.545410 -13118.267822  102.65332    2.09082            2.04541  105.545410      102.500000
6 -12813.131592  303.045410 -13015.222412  102.65332    2.09082            2.09082  200.000000      200.000000
7 -12308.086182  705.045410 -13015.222412  102.65332  507.13623            2.09082  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:52]  --------------------------------------------------------------------------------
[07/18 16:30:52]  Iteration: 70 (0 solution, 69 counterexamples)
[07/18 16:30:53]  Generator returned sat in 0.367413 secs.
[07/18 16:30:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:53]  Improved number of small numbers from 40 to 89 out of a max of 89
[07/18 16:30:53]  Verifer returned sat in 0.223531 secs.
[07/18 16:30:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13817.835205    0.091797 -13817.835205 -97.392334    0.000000           0.000000    0.000000     -100.000000
1 -13417.835449  399.999756 -13717.835205 -97.392334    0.000000           0.000000  299.999756      199.999756
2 -13317.835449  399.999756 -13517.835449 -97.392334    0.000000           0.000000  200.000000      199.999756
3 -13317.835449  196.090576 -13515.971191 -97.392334    0.000000           0.000000  198.135742       99.999756
4 -13317.835449  198.090576 -13317.880615 -97.392090    0.000000           0.000000    0.045166        0.000000
5 -13117.790039  200.090576 -13317.835449 -97.392090    0.045410           0.000000  200.000000      100.000000
6 -13017.199463  300.590576 -13117.835449 -97.392090    0.635742           0.045410  100.000244      100.000244
7 -12617.041260  500.158447 -13117.835205 -97.392090  300.794189           0.635742  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:30:53]  --------------------------------------------------------------------------------
[07/18 16:30:53]  Iteration: 71 (0 solution, 70 counterexamples)
[07/18 16:30:54]  Generator returned sat in 0.290863 secs.
[07/18 16:30:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:54]  Improved gap from 3911/4096 to 0
[07/18 16:30:55]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:30:55]  Verifer returned sat in 0.148355 secs.
[07/18 16:30:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13817.835205    0.091797 -13817.835205 -97.392334    0.000000           0.000000    0.000000     -100.000000
1 -13417.835205  400.000000 -13717.835205 -97.392334    0.000000           0.000000  300.000000      200.000000
2 -13226.835449  490.999756 -13617.835205 -97.392334  190.999756           0.000000  200.000000      100.000000
3 -13226.835449  199.954834 -13419.744873 -97.392334  190.999756         190.999756    1.909668        0.000000
4 -13026.790283  201.954834 -13317.835205 -97.392334  191.044922         190.999756  100.000000      100.000000
5 -13026.790283    0.500000 -13219.380371 -97.392334  191.044922         191.044922    1.545166        0.000000
6 -13025.835449    2.500000 -13217.835205   1.652832  191.044922         191.044922    0.954834        0.000000
7 -13022.290283    4.500000 -13216.880371   1.652832  191.044922         191.044922    3.545166      -96.454834
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:30:55]  --------------------------------------------------------------------------------
[07/18 16:30:55]  Iteration: 72 (0 solution, 71 counterexamples)
[07/18 16:30:56]  Generator returned sat in 0.283441 secs.
[07/18 16:30:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:56]  Improved gap from 16199/16384 to 0
[07/18 16:30:56]  Improved number of small numbers from 58 to 90 out of a max of 90
[07/18 16:30:56]  Verifer returned sat in 0.297625 secs.
[07/18 16:30:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12800.067871    0.091553 -12800.067871 -1115.159912   0.000000           0.000000    0.000000      -99.999756
1 -12400.068115  399.999756 -12700.067871 -1115.159912   0.000000           0.000000  299.999756      200.000000
2 -12400.068115  299.999756 -12600.067871 -1115.159912   0.000000           0.000000  199.999756      100.000000
3 -12400.068115  198.726888 -12500.068115 -1115.159912   0.000000           0.000000  100.000000        0.000000
4 -12199.977783  300.090332 -12300.068115 -1115.159912   0.045166           0.000000  100.045166      100.045166
5 -12199.977783    0.500000 -12300.068115 -1115.159912   0.045166           0.045166  100.045166        0.045166
6 -12199.977783    2.750000 -12200.068115 -1016.114502   0.045166           0.045166    0.045166       -0.909424
7 -12193.897949    6.125000 -12199.113037 -1016.114502   0.045166           0.045166    5.169922      -94.829590
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:30:56]  --------------------------------------------------------------------------------
[07/18 16:30:56]  Iteration: 73 (0 solution, 72 counterexamples)
[07/18 16:30:58]  Generator returned sat in 0.269694 secs.
[07/18 16:30:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:58]  Improved number of small numbers from 74 to 74 out of a max of 89
[07/18 16:30:58]  Verifer returned sat in 0.206854 secs.
[07/18 16:30:58]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12800.067871    0.091553 -12800.067871 -1115.159912   0.000000           0.000000    0.000000        0.000000
1 -12500.067871  300.000000 -12700.067871 -1115.159912   0.000000           0.000000  200.000000      200.000000
2 -12400.068115  299.999756 -12600.067871 -1115.159912   0.000000           0.000000  199.999756      199.999756
3 -12400.068115   86.686686 -12500.067871 -1115.159912   0.000000           0.000000   99.999756       99.999756
4 -12368.037842  132.030029 -12400.067871 -1115.159912   0.000000           0.000000   32.030029       32.030029
5 -12200.022827  200.045044 -12300.067871 -1115.159912   0.045044           0.000000  100.000000      100.000000
6 -12099.477783  200.545044 -12300.067871 -1115.159912   0.590088           0.045044  200.000000      100.000000
7 -12098.432739  201.045044 -12200.067871 -1115.159912   0.590088           0.590088  101.045044        1.045044
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:30:58]  --------------------------------------------------------------------------------
[07/18 16:30:58]  Iteration: 74 (0 solution, 73 counterexamples)
[07/18 16:30:59]  Generator returned sat in 0.365856 secs.
[07/18 16:30:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:30:59]  Improved gap from 0 to 100
[07/18 16:31:00]  Improved number of small numbers from 37 to 90 out of a max of 90
[07/18 16:31:00]  Verifer returned sat in 0.321739 secs.
[07/18 16:31:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12798.955566    0.091309 -12799.000488 -1115.160156    0.000000           0.000000    0.044922        0.044922
1 -12599.000488  200.000000 -12699.000488 -1115.160156    0.000000           0.000000  100.000000      100.000000
2 -12567.873047  131.127441 -12699.000488 -1115.160156    0.000000           0.000000  131.127441       31.127441
3 -12567.873047  131.116211 -12599.000488 -1115.160156    0.000000           0.000000   31.127441      -68.872559
4 -12400.326172  198.674316 -12499.000488 -1115.160156    0.000000           0.000000   98.674316       -1.325684
5 -12198.989014  300.011475 -12399.000488 -1115.160156    0.011230           0.000000  200.000244      100.000244
6 -11948.477783  450.511475 -12283.000488 -1115.160156  150.522461           0.011230  184.000244      100.000244
7 -11523.466553  609.011475 -12199.000244 -1115.160156  475.533691         150.522461  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:31:00]  --------------------------------------------------------------------------------
[07/18 16:31:00]  Iteration: 75 (0 solution, 74 counterexamples)
[07/18 16:31:01]  Generator returned sat in 0.330403 secs.
[07/18 16:31:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:01]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:31:01]  Verifer returned sat in 0.127503 secs.
[07/18 16:31:01]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12798.955566    0.091309 -12799.000488 -1115.160156    0.000000           0.000000    0.044922        0.044922
1 -12599.000488  200.000000 -12699.000488 -1115.160156    0.000000           0.000000  100.000000      100.000000
2 -12567.873047  131.127441 -12699.000488 -1115.160156    0.000000           0.000000  131.127441       31.127441
3 -12567.873047   98.337158 -12599.000488 -1115.160156    0.000000           0.000000   31.127441      -68.872559
4 -12400.326172  198.674316 -12499.000488 -1115.160156    0.000000           0.000000   98.674316       -1.325684
5 -12099.651855  399.348633 -12399.000488 -1115.160156    0.011230           0.000000  299.337402      199.337402
6 -11849.140625  549.848633 -12283.000488 -1115.160156  150.522461           0.011230  283.337402      199.337402
7 -11424.129395  708.348633 -12199.000244 -1115.160156  475.533691         150.522461  299.337158      199.337402
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:31:02]  --------------------------------------------------------------------------------
[07/18 16:31:02]  Iteration: 76 (0 solution, 75 counterexamples)
[07/18 16:31:03]  Generator returned sat in 0.447442 secs.
[07/18 16:31:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:03]  Improved number of small numbers from 63 to 65 out of a max of 89
[07/18 16:31:03]  Verifer returned sat in 0.357912 secs.
[07/18 16:31:03]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12798.955811     0.091064 -12799.000488 -1115.160645     0.000000           0.000000    0.044678        0.044678
1 -12599.000732   199.999756 -12699.000732 -1115.160645     0.000000           0.000000  100.000000       99.999756
2 -12399.000732   300.000000 -12599.000488 -1115.160645     0.000000           0.000000  199.999756      199.999756
3 -12399.000732    99.005585 -12599.000488 -1115.160645     0.000000           0.000000  199.999756       99.999756
4 -12398.989319   200.011169 -12399.000488 -1115.160645     0.000000           0.000000    0.011169        0.011169
5 -11996.978149   402.022339 -12399.000488 -1115.160645   102.022339           0.000000  300.000000      200.000000
6 -11593.444641   703.533508 -12283.000488 -1115.160645   405.555847         102.022339  284.000000      200.000000
7 -10663.644379  1213.800262 -12199.000488 -1115.160645  1235.356201         405.555847  299.999908      199.999908
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:31:03]  --------------------------------------------------------------------------------
[07/18 16:31:03]  Iteration: 77 (0 solution, 76 counterexamples)
[07/18 16:31:05]  Generator returned sat in 0.479724 secs.
[07/18 16:31:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:05]  Improved number of small numbers from 67 to 79 out of a max of 89
[07/18 16:31:05]  Verifer returned sat in 0.364033 secs.
[07/18 16:31:05]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12798.955811     0.090820 -12799.000732 -1115.160889     0.000000           0.000000    0.044922        0.044678
1 -12599.000977   199.999756 -12699.000732 -1115.160889     0.000000           0.000000   99.999756       99.999512
2 -12399.000977   299.999756 -12599.000488 -1115.160889     0.000000           0.000000  199.999512      199.999512
3 -12399.000977    99.005585 -12599.000488 -1115.160889     0.000000           0.000000  199.999512       99.999512
4 -12398.989319   200.011169 -12399.000488 -1115.160889     0.000000           0.000000    0.011169        0.011169
5 -11996.978149   402.022339 -12399.000488 -1115.160889   102.022461           0.000000  299.999878      199.999878
6 -11392.433350   904.544678 -12283.000488 -1115.160889   606.567139         102.022461  284.000000      200.000000
7  -9708.843994  1967.589355 -12199.000488 -1115.160889  2190.156494         606.567139  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:31:05]  --------------------------------------------------------------------------------
[07/18 16:31:05]  Iteration: 78 (0 solution, 77 counterexamples)
[07/18 16:31:07]  Generator returned sat in 0.477238 secs.
[07/18 16:31:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:07]  Improved number of small numbers from 42 to 89 out of a max of 89
[07/18 16:31:07]  Verifer returned sat in 0.243383 secs.
[07/18 16:31:07]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12798.956055    0.090576 -12799.000488 -1115.160889   0.000000           0.000000    0.044434        0.044434
1 -12698.090332  100.910156 -12799.000488 -1115.160889   0.000000           0.000000  100.910156        0.910156
2 -12698.090332  100.910156 -12699.000488 -1114.250244   0.000000           0.000000    0.910156      -98.179199
3 -12399.866211  299.134277 -12533.304199 -1114.250244   0.044922           0.000000  133.393066      100.000000
4 -12399.866211  133.348145 -12399.955811 -1114.250244   0.044922           0.044922    0.044678        0.000000
5 -12131.214600  268.696289 -12299.911133 -1114.250244  68.696533           0.044922  100.000000      100.000000
6 -12031.169922  200.044678 -12244.738770 -1114.250244  68.741211          68.696533  144.827637      100.000000
7 -12031.169922  144.782715 -12199.911133 -1114.250244  68.741211          68.741211  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:31:07]  --------------------------------------------------------------------------------
[07/18 16:31:07]  Iteration: 79 (0 solution, 78 counterexamples)
[07/18 16:31:09]  Generator returned sat in 0.693445 secs.
[07/18 16:31:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:09]  Improved number of small numbers from 47 to 89 out of a max of 89
[07/18 16:31:09]  Verifer returned sat in 0.272737 secs.
[07/18 16:31:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12997.579102    0.090576 -13096.612549 -1115.160889   0.000000           0.000000   99.033447        0.010986
1 -12997.578857   99.033691 -12997.590088 -1115.160889   0.000000           0.000000    0.011230      -99.988770
2 -12597.590088  400.000000 -12897.590088 -1115.160889   0.000000           0.000000  300.000000      200.000000
3 -12597.578857  300.011230 -12697.590088 -1115.160889   0.010986           0.000000  100.000244      100.000244
4 -12497.567871  200.011230 -12597.590088 -1115.160889   0.022217           0.010986  100.000000      100.000000
5 -12397.067871  200.500000 -12502.567627 -1115.160889   0.033691           0.022217  105.466064      100.488525
6 -12304.522705  198.011230 -12397.590332 -1115.160889   0.033691           0.033691   93.033936       93.033691
7 -12197.545410  200.011230 -12397.590088 -1115.160889   0.044678           0.033691  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:31:10]  --------------------------------------------------------------------------------
[07/18 16:31:10]  Iteration: 80 (0 solution, 79 counterexamples)
[07/18 16:31:11]  Generator returned sat in 0.279558 secs.
[07/18 16:31:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:11]  Improved gap from 367/8192 to 100
[07/18 16:31:11]  Improved number of small numbers from 37 to 51 out of a max of 90
[07/18 16:31:11]  Verifer returned sat in 0.711927 secs.
[07/18 16:31:12]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12948.343750     0.090576 -13048.388489 -1115.160889      0.000000           0.000000  100.044739      100.044739
1 -12948.343750   100.044678 -12948.388489 -1115.160889      0.000000           0.000000    0.044739        0.044739
2 -12948.343750     0.044678 -12948.388489 -1115.160889      0.000000           0.000000    0.044739      -99.955261
3 -12648.343689   300.044800 -12848.388489 -1115.160889      0.044800           0.000000  200.000000      100.000000
4 -12147.754089   700.589600 -12657.388489 -1115.160889    300.634399           0.044800  209.000000      200.000000
5 -10809.574890  1547.179199 -12548.388489 -1115.160889   1638.813599         300.634399  100.000000      100.000000
6  -7614.716492  3294.858398 -12548.388489 -1115.160889   4733.671997        1638.813599  200.000000      100.000000
7  -1074.499695  6740.216797 -12448.388428 -1115.160889  11173.888672        4733.671997  200.000061      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:12]  --------------------------------------------------------------------------------
[07/18 16:31:12]  Iteration: 81 (0 solution, 80 counterexamples)
[07/18 16:31:13]  Generator returned sat in 0.263245 secs.
[07/18 16:31:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:13]  Improved number of small numbers from 62 to 70 out of a max of 89
[07/18 16:31:13]  Verifer returned sat in 0.507740 secs.
[07/18 16:31:13]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12948.343750     0.090576 -13148.388489 -1115.160889      0.000000           0.000000  200.044739      100.044739
1 -12948.343750   100.044434 -13048.388428 -1115.160889      0.000000           0.000000  100.044678        0.044739
2 -12948.343750     0.044678 -12948.388489 -1115.160889      0.000000           0.000000    0.044739      -99.955261
3 -12225.578593   722.809896 -12748.388489 -1115.160889    322.809896           0.000000  200.000000      200.000000
4 -11140.863749  1284.714844 -12748.388428 -1115.160889   1407.524658         322.809896  200.000020      100.000081
5  -9263.291504  2077.572266 -12592.388489 -1115.160889   3085.097005        1407.524658  243.999980      199.999980
6  -6212.433085  3294.858398 -12548.388489 -1115.160889   6135.955404        3085.097005  200.000000      100.000000
7  -1369.645487  5042.787598 -12448.388428 -1115.160889  10878.742920        6135.955404  200.000020      100.000081
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:14]  --------------------------------------------------------------------------------
[07/18 16:31:14]  Iteration: 82 (0 solution, 81 counterexamples)
[07/18 16:31:15]  Generator returned sat in 0.596881 secs.
[07/18 16:31:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:31:15]  Improved gap from 365/16384 to 100
[07/18 16:31:16]  Improved number of small numbers from 29 to 90 out of a max of 90
[07/18 16:31:16]  Verifer returned sat in 0.216650 secs.
[07/18 16:31:16]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12426.609863    0.090332 -12526.609863 -1636.939697    0.000000           0.000000  100.000000      100.000000
1 -12426.609863    0.022217 -12526.609863 -1636.939697    0.000000           0.000000  100.000000        0.000000
2 -12326.609863  200.000000 -12426.609619 -1636.939697    0.000000           0.000000   99.999756        0.000000
3 -12126.587402  300.022217 -12326.609863 -1636.939697    0.022461           0.000000  200.000000      100.000000
4 -12126.587402  100.500000 -12226.609863 -1636.939697    0.022461           0.022461  100.000000        0.000000
5 -11723.587402  503.000000 -12026.632080 -1636.939697  103.022461           0.022461  200.022217      200.000000
6 -11723.120850  200.488770 -11926.609863 -1636.939697  103.488770         103.022461  100.000244      100.000244
7 -11622.621094  200.500000 -11926.609619 -1636.939697  103.988770         103.488770  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:31:16]  --------------------------------------------------------------------------------
[07/18 16:31:16]  Iteration: 83 (0 solution, 82 counterexamples)
[07/18 16:31:19]  Generator returned sat in 2.737108 secs.
[07/18 16:31:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:20]  Improved gap from 1/400 to 100
[07/18 16:31:20]  Improved number of small numbers from 52 to 66 out of a max of 90
[07/18 16:31:20]  Verifer returned sat in 0.521804 secs.
[07/18 16:31:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12626.608398    0.090332 -12626.611113 -1536.938447    0.000000           0.000000    0.002715        0.002715
1 -12626.608398    0.001221 -12626.609863 -1536.938447    0.000000           0.000000    0.001465      -99.997285
2 -12226.611328  399.998535 -12426.611328 -1536.938447    0.000000           0.000000  200.000000      199.999785
3 -12226.611328    0.001250 -12426.611113 -1536.938447    0.000000           0.000000  199.999785       99.999785
4 -12226.609238  200.001875 -12326.611113 -1536.938447    0.000000           0.000000  100.001875        0.001875
5 -11726.609551  600.001562 -12126.611328 -1536.938447  300.001562           0.000000  100.000215      100.000000
6 -11726.609551    0.010000 -12126.611113 -1536.938447  300.001562         300.001562  100.000000        0.000000
7 -11526.594551  300.015000 -12026.574951 -1536.938447  300.016357         300.001562  199.964043      100.000205
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:31:20]  --------------------------------------------------------------------------------
[07/18 16:31:20]  Iteration: 84 (0 solution, 83 counterexamples)
[07/18 16:31:21]  Generator returned sat in 0.267732 secs.
[07/18 16:31:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:22]  Improved gap from 0 to 100
[07/18 16:31:22]  Improved number of small numbers from 50 to 66 out of a max of 90
[07/18 16:31:22]  Verifer returned sat in 0.619259 secs.
[07/18 16:31:22]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12526.620605    0.090332 -12526.623291 -1636.92876    0.000000            0.00000    0.002686        0.000195
1 -12526.620605    0.001465 -12526.620801 -1636.92876    0.000000            0.00000    0.000195      -99.999805
2 -12426.619551  100.001250 -12426.620605 -1636.92876    0.000000            0.00000    0.001055      -99.998750
3 -12126.619385  300.001221 -12326.612051 -1636.92876    0.001250            0.00000  199.991416      100.000166
4 -12126.619385    0.010000 -12126.620801 -1636.92876    0.001250            0.00125    0.000166        0.000166
5 -11726.609551  400.010000 -12026.620850 -1636.92876  200.011250            0.00125  100.000049      100.000000
6 -11726.609551    0.010000 -12026.620801 -1636.92876  200.011250          200.01125  100.000000        0.000000
7 -11526.608301  300.001250 -11926.620605 -1636.92876  200.012451          200.01125  199.999854      100.000049
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:31:22]  --------------------------------------------------------------------------------
[07/18 16:31:22]  Iteration: 85 (0 solution, 84 counterexamples)
[07/18 16:31:24]  Generator returned sat in 0.325782 secs.
[07/18 16:31:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:24]  Improved gap from 1/1600 to 100
[07/18 16:31:24]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/18 16:31:24]  Verifer returned sat in 0.222038 secs.
[07/18 16:31:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12526.607178    0.090088 -12681.606934 -1536.942383    0.000000           0.000000  154.999756      100.000000
1 -12526.607178    0.002441 -12626.606934 -1536.942383    0.000000           0.000000   99.999756        0.000000
2 -12426.606934  200.000000 -12426.607178 -1536.942383    0.000000           0.000000    0.000244        0.000244
3 -12354.105957   72.501221 -12354.108398 -1536.942383    0.000000           0.000000    0.002441      -27.498779
4 -12026.609863  327.498535 -12226.607178 -1536.942383   99.997314           0.000000  100.000000      100.000000
5 -12026.609863    0.010000 -12226.607178 -1536.942383   99.997314          99.997314  100.000000        0.000000
6 -11926.609863  200.000000 -12026.609619 -1536.942383   99.997314          99.997314    0.002441        0.000000
7 -11599.113525  327.498779 -12026.607178 -1536.942383  227.493652          99.997314  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:31:24]  --------------------------------------------------------------------------------
[07/18 16:31:24]  Iteration: 86 (0 solution, 85 counterexamples)
[07/18 16:31:25]  Generator returned sat in 0.274644 secs.
[07/18 16:31:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:26]  Improved number of small numbers from 79 to 83 out of a max of 89
[07/18 16:31:26]  Verifer returned sat in 0.232119 secs.
[07/18 16:31:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12526.607422    0.090088 -12645.356201 -1536.942627    0.000000           0.000000  118.748779       99.999756
1 -12526.607422    0.002441 -12626.606934 -1536.942627    0.000000           0.000000   99.999512       -0.000244
2 -12426.606201  200.000732 -12426.607178 -1536.942627    0.000000           0.000000    0.000977        0.000977
3 -12354.106201   72.500977 -12354.108398 -1536.942383    0.000000           0.000000    0.002197      -27.498779
4 -12026.610107  327.498291 -12226.607422 -1536.942383   99.997314           0.000000  100.000000      100.000000
5 -12026.610107    0.010000 -12226.607178 -1536.942383   99.997314          99.997314   99.999756        0.000000
6 -11926.604863  200.005000 -12026.609619 -1536.942383   99.997314          99.997314    0.007441        0.005244
7 -11499.111025  427.501279 -12026.607422 -1536.942383  327.496094          99.997314  200.000303      100.000303
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:31:26]  --------------------------------------------------------------------------------
[07/18 16:31:26]  Iteration: 87 (0 solution, 86 counterexamples)
[07/18 16:31:28]  Generator returned sat in 1.101427 secs.
[07/18 16:31:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:28]  Improved gap from 363/8192 to 100
[07/18 16:31:29]  Improved number of small numbers from 29 to 43 out of a max of 90
[07/18 16:31:29]  Verifer returned sat in 0.650316 secs.
[07/18 16:31:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11662.053711    0.089844 -11862.053660 -1536.942383    0.000000           0.000000  199.999949      199.999949
1 -11662.053711    0.044434 -11862.053660 -1536.942383    0.000000           0.000000  199.999949       99.999949
2 -11662.053711    0.044189 -11762.053660 -1536.942383    0.000000           0.000000   99.999949       -0.000051
3 -11362.009349  400.044312 -11662.053660 -1536.942383    0.044312           0.000000  300.000000      200.000000
4 -11260.987193  401.022156 -11562.053660 -1536.942383    1.066467           0.044312  300.000000      200.000000
5 -11059.476115  501.511078 -11439.053660 -1536.942383  102.577545           1.066467  277.000000      200.000000
6 -10761.720576  574.755539 -11328.053660 -1536.942383  400.333084         102.577545  166.000000      100.000000
7 -10305.342806  622.377769 -11262.053467 -1536.942383  756.710693         400.333084  199.999967      100.000160
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:29]  --------------------------------------------------------------------------------
[07/18 16:31:29]  Iteration: 88 (0 solution, 87 counterexamples)
[07/18 16:31:30]  Generator returned sat in 0.440918 secs.
[07/18 16:31:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:31]  Improved number of small numbers from 42 to 42 out of a max of 89
[07/18 16:31:31]  Verifer returned sat in 0.726531 secs.
[07/18 16:31:31]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11662.053711    0.089844 -11862.053660 -1536.942383    0.000000           0.000000  199.999949      199.999949
1 -11662.053711    0.044434 -11862.053660 -1536.942383    0.000000           0.000000  199.999949       99.999949
2 -11662.053711    0.044189 -11761.053660 -1536.942383    0.000000           0.000000   98.999949       -0.000051
3 -11362.009349  399.044312 -11662.053660 -1536.942383    0.044312           0.000000  300.000000      200.000000
4 -11260.987193  401.022156 -11562.053660 -1536.942383    1.066467           0.044312  300.000000      200.000000
5 -11058.976115  502.011078 -11439.178660 -1536.942383  103.077545           1.066467  277.125000      200.000000
6 -10761.720576  574.380539 -11328.053660 -1536.942383  400.333084         103.077545  166.000000      100.000000
7 -10305.030306  622.690269 -11262.053467 -1536.942383  756.710693         400.333084  200.312467      100.312660
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:31]  --------------------------------------------------------------------------------
[07/18 16:31:31]  Iteration: 89 (0 solution, 88 counterexamples)
[07/18 16:31:33]  Generator returned sat in 0.819087 secs.
[07/18 16:31:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:33]  Improved gap from 181/8192 to 100
[07/18 16:31:34]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/18 16:31:34]  Verifer returned sat in 0.207109 secs.
[07/18 16:31:34]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11424.886719     0.089600 -11524.931152 -1536.942383     0.000000           0.000000  100.044434      100.044434
1 -11424.886719     0.043945 -11524.931152 -1536.942383     0.000000           0.000000  100.044434        0.044434
2 -11424.886719   100.000000 -11424.931152 -1536.942383     0.000000           0.000000    0.044434      -99.955566
3 -11124.886963   300.044189 -11324.931152 -1536.942383     0.044189           0.000000  200.000000      100.000000
4 -10823.342773   501.544189 -11224.931152 -1536.942383   101.588379           0.044189  300.000000      200.000000
5 -10320.298584   803.044189 -11086.931152 -1536.942383   504.632568         101.588379  262.000000      200.000000
6  -9439.754395  1142.544189 -10942.931152 -1536.942383  1385.176758         504.632568  118.000000      100.000000
7  -8031.710205  1526.044189 -10924.930908 -1536.942383  2693.220703        1385.176758  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:34]  --------------------------------------------------------------------------------
[07/18 16:31:34]  Iteration: 90 (0 solution, 89 counterexamples)
[07/18 16:31:35]  Generator returned sat in 0.317934 secs.
[07/18 16:31:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:35]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:31:35]  Verifer returned sat in 0.134708 secs.
[07/18 16:31:35]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11424.886719     0.089600 -11524.931152 -1536.942383     0.000000           0.000000  100.044434      100.044434
1 -11424.886719     0.043945 -11524.931152 -1536.942383     0.000000           0.000000  100.044434        0.044434
2 -11424.886719   100.000000 -11424.931152 -1536.942383     0.000000           0.000000    0.044434      -99.955566
3 -11124.909180   300.021973 -11324.931152 -1536.942383     0.021973           0.000000  200.000000      100.000000
4 -10824.387207   500.521973 -11224.931152 -1536.942383   100.543945           0.021973  300.000000      200.000000
5 -10323.365234   801.021973 -11082.908936 -1536.942383   501.565918         100.543945  257.977783      200.000000
6  -9437.798828  1143.544189 -10942.931152 -1536.942383  1387.132324         501.565918  118.000000      100.000000
7  -8029.754639  1526.044189 -10924.930908 -1536.942383  2693.220703        1387.132324  201.955566      101.955811
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:36]  --------------------------------------------------------------------------------
[07/18 16:31:36]  Iteration: 91 (0 solution, 90 counterexamples)
[07/18 16:31:37]  Generator returned sat in 0.366159 secs.
[07/18 16:31:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:37]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:31:37]  Verifer returned sat in 0.135069 secs.
[07/18 16:31:37]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11423.386963     0.089355 -11524.931152 -1536.942383     0.000000           0.000000  101.544189      101.544189
1 -11423.386963     0.044189 -11524.931152 -1536.942383     0.000000           0.000000  101.544189        1.544189
2 -11423.386963   101.500000 -11423.431152 -1536.942383     0.000000           0.000000    0.044189      -98.455811
3 -11124.409180   299.021973 -11324.931152 -1536.942383     0.521729           0.000000  200.000244      100.000244
4 -10824.387451   500.021973 -11224.931152 -1536.942383   100.543701           0.521729  300.000000      200.000000
5 -10323.365479   801.021973 -11082.408936 -1536.942383   501.565674         100.543701  257.477783      200.000000
6  -9437.799072  1143.044189 -10942.931152 -1536.942383  1387.132080         501.565674  118.000000      100.000000
7  -8029.754883  1526.044189 -10924.930908 -1536.942383  2693.220459        1387.132080  201.955566      101.955811
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:37]  --------------------------------------------------------------------------------
[07/18 16:31:37]  Iteration: 92 (0 solution, 91 counterexamples)
[07/18 16:31:39]  Generator returned sat in 0.445055 secs.
[07/18 16:31:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:39]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:31:39]  Verifer returned sat in 0.161038 secs.
[07/18 16:31:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11423.387207     0.089111 -11526.680908 -1536.942383     0.000000           0.000000  103.293701      101.543945
1 -11423.387207     0.043945 -11524.931152 -1536.942383     0.000000           0.000000  101.543945        1.543945
2 -11423.387207   101.500000 -11423.431152 -1536.942383     0.000000           0.000000    0.043945      -98.456055
3 -11124.409180   299.021973 -11324.931152 -1536.942383     0.021973           0.000000  200.500000      100.500000
4 -10824.137451   500.771729 -11224.931152 -1536.942383   100.793701           0.021973  300.000000      200.000000
5 -10323.365723   800.771729 -11082.408936 -1536.942383   501.565430         100.793701  257.477783      200.000000
6  -9439.049561  1141.793945 -10942.931152 -1536.942383  1385.881592         501.565430  118.000000      100.000000
7  -8033.255615  1523.793945 -10924.930908 -1536.942383  2689.719971        1385.881592  201.955322      101.955566
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:39]  --------------------------------------------------------------------------------
[07/18 16:31:39]  Iteration: 93 (0 solution, 92 counterexamples)
[07/18 16:31:41]  Generator returned sat in 0.296756 secs.
[07/18 16:31:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:41]  Improved gap from 403455/4096 to 100
[07/18 16:31:41]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/18 16:31:41]  Verifer returned sat in 0.214180 secs.
[07/18 16:31:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11423.409180     0.089111 -11524.931641 -1536.942383     0.000000           0.000000  101.522461      101.522461
1 -11423.409180     0.043701 -11521.930664 -1536.942383     0.000000           0.000000   98.521484        1.522461
2 -11423.409180    98.499268 -11424.931641 -1536.942383     0.000000           0.000000    1.522461      -98.477539
3 -11124.909668   300.021973 -11324.931641 -1536.942383     0.021729           0.000000  200.000244      100.000244
4 -10822.887939   502.021973 -11224.931641 -1536.942383   102.043701           0.021729  300.000000      200.000000
5 -10321.866943   801.020996 -11082.409180 -1536.942383   503.064697         102.043701  257.477539      200.000000
6  -9433.801025  1145.543457 -10942.931396 -1536.942383  1391.130371         503.064697  118.000000      100.000244
7  -8022.257324  1529.543701 -10924.931396 -1536.942383  2689.719727        1391.130371  212.954346      112.954590
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:41]  --------------------------------------------------------------------------------
[07/18 16:31:41]  Iteration: 94 (0 solution, 93 counterexamples)
[07/18 16:31:43]  Generator returned sat in 0.418904 secs.
[07/18 16:31:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:43]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 16:31:43]  Verifer returned sat in 0.119685 secs.
[07/18 16:31:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11423.409180    0.089111 -11624.931641 -1536.942383    0.000000           0.000000  201.522461      101.522705
1 -11423.409180    0.043457 -11521.930664 -1536.942383    0.000000           0.000000   98.521484        1.522705
2 -11423.409180   98.499268 -11424.931885 -1536.942383    0.000000           0.000000    1.522705      -98.477295
3 -10621.911621  803.020264 -11324.931641 -1536.942383  503.020264           0.000000  199.999756      100.000000
4 -10520.411377  301.500000 -11174.170166 -1536.942383  503.042480         503.020264  150.716309      101.478027
5 -10321.867188  349.260498 -11082.409424 -1536.942383  503.064697         503.042480  257.477539      200.000000
6 -10235.322266  344.022461 -10942.931396 -1536.942383  589.609131         503.064697  118.000000      100.000488
7  -9969.822021  383.500244 -10924.931641 -1536.942383  755.109619         589.609131  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:43]  --------------------------------------------------------------------------------
[07/18 16:31:43]  Iteration: 95 (0 solution, 94 counterexamples)
[07/18 16:31:45]  Generator returned sat in 0.449959 secs.
[07/18 16:31:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:45]  Improved number of small numbers from 76 to 78 out of a max of 89
[07/18 16:31:45]  Verifer returned sat in 0.281913 secs.
[07/18 16:31:45]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11324.931885     0.088867 -11524.931885 -1536.942627     0.000000           0.000000  200.000000      200.000000
1 -11324.931885     0.043701 -11424.931885 -1536.942627     0.000000           0.000000  100.000000      100.000000
2 -11324.931885    99.956055 -11424.931885 -1536.942627     0.000000           0.000000  100.000000        0.000000
3 -11124.887939   300.043945 -11324.931885 -1536.942627     0.043945           0.000000  200.000000      100.000000
4 -10673.322021   651.565918 -11175.931885 -1536.942627   351.609863           0.043945  151.000000      100.000000
5  -9596.473145  1227.848877 -11124.931885 -1536.942627  1328.458740         351.609863  200.000000      100.000000
6  -7653.199829  2143.273315 -11003.931885 -1536.942627  3071.732056        1328.458740  279.000000      200.000000
7  -4394.789856  3537.409973 -10824.931885 -1536.942627  6230.142090        3071.732056  199.999939      199.999939
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:45]  --------------------------------------------------------------------------------
[07/18 16:31:45]  Iteration: 96 (0 solution, 95 counterexamples)
[07/18 16:31:47]  Generator returned sat in 0.332349 secs.
[07/18 16:31:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:47]  Improved number of small numbers from 59 to 89 out of a max of 89
[07/18 16:31:47]  Verifer returned sat in 0.212646 secs.
[07/18 16:31:47]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.027832     0.088867 -12542.027832 -1536.942627      0.000000           0.000000  200.000000      199.999756
1 -12342.027832     0.043701 -12442.027588 -1536.942627      0.000000           0.000000   99.999756       99.999756
2 -12342.027832     0.010742 -12342.038574 -1536.942627      0.000000           0.000000    0.010742       -0.000244
3 -12142.016846   200.021729 -12342.027588 -1536.942627      0.010742           0.000000  200.000000      100.000000
4 -11740.473145   601.543701 -12174.027588 -1536.942627    201.554688           0.010742  231.999756      199.999756
5 -10499.885498  1472.587402 -12142.027588 -1536.942627   1342.142090         201.554688  300.000000      200.000000
6  -7653.199707  3146.685791 -11942.027832 -1536.942627   4088.827881        1342.142090  200.000244      200.000000
7  -1158.328613  6694.871338 -11842.027832 -1536.942627  10483.699219        4088.827881  200.000000      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:47]  --------------------------------------------------------------------------------
[07/18 16:31:47]  Iteration: 97 (0 solution, 96 counterexamples)
[07/18 16:31:49]  Generator returned sat in 0.334945 secs.
[07/18 16:31:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:49]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 16:31:49]  Verifer returned sat in 0.163991 secs.
[07/18 16:31:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.027832    0.088623 -12642.027588 -1536.942627    0.000000           0.000000  299.999756      199.999756
1 -12342.027832    0.043457 -12504.038330 -1536.942627    0.000000           0.000000  162.010498       99.999756
2 -12342.027832    0.010498 -12342.038818 -1536.942627    0.000000           0.000000    0.010986       -0.000244
3 -11842.473389  499.565430 -12342.027588 -1536.942627  299.554199           0.000000  200.000000      100.000000
4 -11740.473389  302.000000 -12174.027588 -1536.942627  299.564941         299.554199  133.989258      101.989258
5 -11542.451904  332.010742 -12093.027832 -1536.942627  299.575928         299.564941  251.000000      199.999756
6 -11542.440918  251.010986 -11942.027832 -1536.942627  299.586670         299.575928  100.000244      100.000000
7 -11240.441406  401.999756 -11842.028076 -1536.942627  501.585938         299.586670  100.000732      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:49]  --------------------------------------------------------------------------------
[07/18 16:31:49]  Iteration: 98 (0 solution, 97 counterexamples)
[07/18 16:31:51]  Generator returned sat in 0.498850 secs.
[07/18 16:31:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:51]  Improved number of small numbers from 65 to 67 out of a max of 89
[07/18 16:31:51]  Verifer returned sat in 0.439920 secs.
[07/18 16:31:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.027832    0.088379 -12542.027588 -1536.942627     0.000000           0.000000  199.999756      199.999756
1 -12342.027832    0.043213 -12442.027832 -1536.942627     0.000000           0.000000  100.000000       99.999756
2 -12342.027832    0.010254 -12442.027588 -1536.942627     0.000000           0.000000   99.999756       -0.000244
3 -11942.270054  499.757533 -12342.027588 -1536.942627   199.757533           0.000000  200.000000      100.000000
4 -11690.391288  451.878767 -12232.027832 -1536.942627   251.636300         199.757533  290.000244      200.000000
5 -11542.452148  437.939383 -12093.027832 -1536.942627   299.575928         251.636300  250.999756      199.999512
6 -11223.482457  569.969448 -11942.027832 -1536.942627   618.545131         299.575928  100.000244      100.000000
7 -10636.498221  686.984480 -11842.028076 -1536.942627  1005.529541         618.545131  200.000314      199.999826
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:52]  --------------------------------------------------------------------------------
[07/18 16:31:52]  Iteration: 99 (0 solution, 98 counterexamples)
[07/18 16:31:53]  Generator returned sat in 0.456757 secs.
[07/18 16:31:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:54]  Improved number of small numbers from 60 to 62 out of a max of 89
[07/18 16:31:54]  Verifer returned sat in 0.524084 secs.
[07/18 16:31:54]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.027832     0.088379 -12542.027588 -1536.942627     0.000000           0.000000  199.999756      199.999756
1 -12342.027832     0.042969 -12442.027588 -1536.942627     0.000000           0.000000   99.999756       99.999756
2 -12342.027832     0.010254 -12442.027588 -1536.942627     0.000000           0.000000   99.999756       -0.000244
3 -11942.270054   499.757533 -12342.027588 -1536.942627   199.757533           0.000000  200.000000      100.000000
4 -11190.633754   951.636300 -12142.027588 -1536.942627   751.393834         199.757533  200.000000      200.000000
5  -9661.179304  1729.454450 -12126.027588 -1536.942627  2280.848284         751.393834  184.000000      100.000000
6  -6932.997628  2912.181676 -11942.027832 -1536.942627  4909.029960        2280.848284  100.000244      100.000000
7  -2262.725603  4770.272269 -11842.028076 -1536.942627  9479.301758        4909.029960  100.000715      100.000227
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:54]  --------------------------------------------------------------------------------
[07/18 16:31:54]  Iteration: 100 (0 solution, 99 counterexamples)
[07/18 16:31:56]  Generator returned sat in 0.456390 secs.
[07/18 16:31:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:56]  Improved gap from 11/2048 to 100
[07/18 16:31:56]  Improved number of small numbers from 84 to 90 out of a max of 90
[07/18 16:31:56]  Verifer returned sat in 0.226439 secs.
[07/18 16:31:56]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.028076     0.088379 -12347.115967 -1736.942383     0.000000           0.000000    5.087891        0.000000
1 -12342.028076     0.043701 -12342.028076 -1736.942383     0.000000           0.000000    0.000000     -100.000000
2 -12142.028320   199.999756 -12242.028076 -1736.942383     0.000000           0.000000   99.999756       -0.000244
3 -12141.984375   100.043701 -12142.028076 -1736.942383     0.000000           0.000000    0.043701      -99.956299
4 -11736.852783   405.175293 -12042.028076 -1736.942383   105.175293           0.000000  200.000000      100.000000
5 -10824.502197  1112.350586 -11842.028076 -1736.942383   917.525879         105.175293  100.000000      100.000000
6  -8297.801025  2626.701172 -11832.028076 -1736.942383  3244.227051         917.525879  290.000000      200.000000
7  -3022.398682  5565.402344 -11642.028320 -1736.942383  8419.629395        3244.227051  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:56]  --------------------------------------------------------------------------------
[07/18 16:31:56]  Iteration: 101 (0 solution, 100 counterexamples)
[07/18 16:31:58]  Generator returned sat in 0.852551 secs.
[07/18 16:31:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:31:58]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:31:58]  Verifer returned sat in 0.132268 secs.
[07/18 16:31:58]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.028076     0.088135 -12347.115967 -1736.942627     0.000000           0.000000    5.087891        0.000000
1 -12342.028076     0.043945 -12342.028076 -1736.942383     0.000000           0.000000    0.000000      -99.999756
2 -12142.028564   199.999512 -12242.028320 -1736.942383     0.000000           0.000000   99.999756       -0.000244
3 -12042.028320   200.000000 -12142.028076 -1736.942383     0.000000           0.000000   99.999756        0.000000
4 -11736.940186   405.087891 -12042.028076 -1736.942383   105.087646           0.000000  200.000244      100.000488
5 -10824.764648  1112.175781 -11842.028320 -1736.942383   917.263672         105.087646  100.000000      100.000000
6  -8298.413086  2626.351562 -11832.028076 -1736.942383  3244.227051         917.263672  289.387939      199.388184
7  -3023.097900  5564.703125 -11642.028320 -1736.942383  8419.629395        3244.227051  199.301025      199.301025
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:31:59]  --------------------------------------------------------------------------------
[07/18 16:31:59]  Iteration: 102 (0 solution, 101 counterexamples)
[07/18 16:32:00]  Generator returned sat in 0.502187 secs.
[07/18 16:32:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:32:00]  Improved gap from 409599/4096 to 100
[07/18 16:32:00]  Improved number of small numbers from 88 to 90 out of a max of 90
[07/18 16:32:00]  Verifer returned sat in 0.144454 secs.
[07/18 16:32:00]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12342.028320     0.088135 -12342.028564 -1736.942383      0.000000           0.000000    0.000244        0.000000
1 -12342.028320     0.000244 -12342.028320 -1736.942383      0.000000           0.000000    0.000000     -100.000000
2 -12142.028809   199.999512 -12242.028320 -1736.942383      0.000000           0.000000   99.999512       -0.000488
3 -12042.028320   200.000000 -12142.028320 -1736.942383      0.000000           0.000000  100.000000        0.000000
4 -11642.028076   500.000244 -11992.028320 -1736.942383    105.087646           0.000000  244.912598      194.912598
5 -10534.940186  1352.000488 -11842.028320 -1736.942383   1107.088135         105.087646  200.000000      200.000000
6  -7628.939209  3106.000977 -11832.028320 -1736.942383   3913.089355        1107.088135  289.999756      199.999756
7  -1394.937012  6524.001953 -11642.028320 -1736.942383  10147.091309        3913.089355  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:01]  --------------------------------------------------------------------------------
[07/18 16:32:01]  Iteration: 103 (0 solution, 102 counterexamples)
[07/18 16:32:03]  Generator returned sat in 0.742932 secs.
[07/18 16:32:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:32:03]  Improved number of small numbers from 73 to 81 out of a max of 89
[07/18 16:32:03]  Verifer returned sat in 0.355200 secs.
[07/18 16:32:03]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12441.984863     0.087891 -12442.028320 -1736.942627     0.000000           0.000000    0.043457      -99.956543
1 -12342.028320   100.000000 -12342.028320 -1736.942627     0.000000           0.000000    0.000000     -100.000000
2 -12141.984863   200.043457 -12142.028320 -1736.942627     0.000000           0.000000    0.043457        0.043457
3 -12042.028320   100.000000 -12042.071899 -1736.942627     0.000000           0.000000    0.043579        0.000000
4 -11642.115479   399.956421 -11942.028320 -1736.942627   199.912842           0.000000  100.000000      100.000000
5 -10540.202637  1201.912842 -11842.028320 -1736.942627  1107.088135         199.912842  194.737549      194.737549
6  -8029.114502  2705.825684 -11832.028320 -1736.942627  3512.914062        1107.088135  289.999756      199.999756
7  -2695.419312  5623.694946 -11642.028320 -1736.942627  8846.608887        3512.914062  100.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:03]  --------------------------------------------------------------------------------
[07/18 16:32:03]  Iteration: 104 (0 solution, 103 counterexamples)
[07/18 16:32:05]  Generator returned sat in 0.384306 secs.
[07/18 16:32:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:32:05]  Improved gap from 89/4096 to 100
[07/18 16:32:05]  Improved number of small numbers from 49 to 90 out of a max of 90
[07/18 16:32:05]  Verifer returned sat in 0.288177 secs.
[07/18 16:32:05]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.557373     0.087891 -12903.600830 -1187.353516     0.000000           0.000000  212.043457      200.000000
1 -12591.557373   312.043457 -12791.557373 -1187.353516     0.000000           0.000000  200.000000      200.000000
2 -12591.557373   199.999756 -12767.557129 -1187.353516     0.000000           0.000000  175.999756      100.000000
3 -12591.557129   176.000000 -12691.557373 -1187.353516     0.000000           0.000000  100.000244        0.000244
4 -12391.513916   300.043457 -12591.557373 -1187.353516     0.043457           0.000000  200.000000      100.000000
5 -11789.427002   802.086914 -12491.557129 -1187.353516   502.130127           0.043457  200.000000      100.000244
6 -10107.253174  1882.173828 -12391.557373 -1187.353516  2084.304199         502.130127  200.000000      100.000000
7  -6240.905518  4066.347656 -12291.557129 -1187.353516  5850.651611        2084.304199  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:05]  --------------------------------------------------------------------------------
[07/18 16:32:05]  Iteration: 105 (0 solution, 104 counterexamples)
[07/18 16:32:07]  Generator returned sat in 0.687646 secs.
[07/18 16:32:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:32:08]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:32:08]  Verifer returned sat in 0.120444 secs.
[07/18 16:32:08]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.557373     0.087891 -12989.600830 -1187.353516     0.000000           0.000000  298.043457      200.000000
1 -12591.557373   398.043457 -12791.557373 -1187.353516     0.000000           0.000000  200.000000      200.000000
2 -12591.557373   199.999756 -12767.557129 -1187.353516     0.000000           0.000000  175.999756      100.000000
3 -12591.557129   176.000000 -12691.557373 -1187.353516     0.000000           0.000000  100.000244        0.000244
4 -12391.513916   300.043457 -12591.557373 -1187.353516     0.043457           0.000000  200.000000      100.000000
5 -11789.427002   802.086914 -12491.557129 -1187.353516   502.130127           0.043457  200.000000      100.000244
6 -10107.253174  1882.173828 -12391.557373 -1187.353516  2084.304199         502.130127  200.000000      100.000000
7  -6240.905518  4066.347656 -12291.557129 -1187.353516  5850.651611        2084.304199  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:08]  --------------------------------------------------------------------------------
[07/18 16:32:08]  Iteration: 106 (0 solution, 105 counterexamples)
[07/18 16:32:09]  Generator returned sat in 0.462297 secs.
[07/18 16:32:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:32:10]  Improved number of small numbers from 74 to 89 out of a max of 89
[07/18 16:32:10]  Verifer returned sat in 0.202230 secs.
[07/18 16:32:10]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.557617     0.087891 -12989.601074 -1187.354004     0.000000           0.000000  298.043457      199.999756
1 -12591.557861   398.043213 -12791.557373 -1187.354004     0.000000           0.000000  199.999512      199.999512
2 -12591.557861   199.999268 -12769.230469 -1187.354004     0.000000           0.000000  177.672607       99.999512
3 -12591.557617   177.672852 -12691.329102 -1187.353760     0.000000           0.000000   99.771484        0.000000
4 -12391.557129   299.771973 -12591.557617 -1187.353760     0.000244           0.000000  200.000244      100.000244
5 -11790.013672   801.543701 -12491.557617 -1187.353760   501.543701           0.000244  200.000244      100.000244
6 -10107.253662  1882.760254 -12391.557373 -1187.353760  2084.303711         501.543701  200.000000      100.000244
7  -6239.961426  4067.292236 -12291.557617 -1187.353760  5850.651123        2084.303711  200.945068      100.945068
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:10]  --------------------------------------------------------------------------------
[07/18 16:32:10]  Iteration: 107 (0 solution, 106 counterexamples)
[07/18 16:32:12]  Generator returned sat in 0.440503 secs.
[07/18 16:32:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:32:12]  Improved gap from 51083/512 to 100
[07/18 16:32:12]  Improved number of small numbers from 85 to 90 out of a max of 90
[07/18 16:32:12]  Verifer returned sat in 0.148001 secs.
[07/18 16:32:12]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.557617     0.087646 -12990.558105 -1187.35376     0.000000           0.000000  299.000488      200.000000
1 -12591.557861   399.000244 -12791.557617 -1187.35376     0.000000           0.000000  199.999756      199.999756
2 -12591.557861   199.999268 -12769.230469 -1187.35376     0.000000           0.000000  177.672607       99.999756
3 -12591.557861   177.672607 -12691.557617 -1187.35376     0.000000           0.000000   99.999756       -0.000244
4 -12391.557129   300.000488 -12591.557617 -1187.35376     0.000244           0.000000  200.000244      100.000244
5 -11789.556396   802.000977 -12491.557617 -1187.35376   500.629150           0.000244  201.372070      101.372070
6 -10107.253662  1883.674805 -12391.557373 -1187.35376  2084.303711         500.629150  200.000000      100.000244
7  -6237.903809  4069.349854 -12291.557617 -1187.35376  5850.651123        2084.303711  203.002686      103.002686
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:12]  --------------------------------------------------------------------------------
[07/18 16:32:12]  Iteration: 108 (0 solution, 107 counterexamples)
[07/18 16:32:14]  Generator returned sat in 0.453719 secs.
[07/18 16:32:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:32:14]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:32:14]  Verifer returned sat in 0.129457 secs.
[07/18 16:32:14]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.557617     0.087646 -12991.058105 -1187.35376     0.000000           0.000000  299.500488      200.000000
1 -12591.557861   399.500244 -12791.557617 -1187.35376     0.000000           0.000000  199.999756      199.999756
2 -12591.557861   199.999268 -12769.230469 -1187.35376     0.000000           0.000000  177.672607       99.999756
3 -12591.557861   177.672607 -12691.557617 -1187.35376     0.000000           0.000000   99.999756       -0.000244
4 -12391.557129   300.000488 -12591.557617 -1187.35376     0.000244           0.000000  200.000244      100.000244
5 -11789.556396   802.000977 -12491.557617 -1187.35376   500.629150           0.000244  201.372070      101.372070
6 -10107.253662  1883.674805 -12391.557373 -1187.35376  2084.303711         500.629150  200.000000      100.000244
7  -6237.903809  4069.349854 -12291.557617 -1187.35376  5850.651123        2084.303711  203.002686      103.002686
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:14]  --------------------------------------------------------------------------------
[07/18 16:32:14]  Iteration: 109 (0 solution, 108 counterexamples)
[07/18 16:32:16]  Generator returned sat in 0.527822 secs.
[07/18 16:32:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:32:16]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/18 16:32:16]  Verifer returned sat in 0.162841 secs.
[07/18 16:32:16]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.557861     0.087646 -12991.058105 -1187.354004     0.000000           0.000000  299.500244      200.000000
1 -12591.558350   399.499756 -12791.557861 -1187.354004     0.000000           0.000000  199.999512      199.999512
2 -12591.558350   199.998779 -12763.230469 -1187.354004     0.000000           0.000000  171.672119       99.999512
3 -12591.558350     0.000244 -12691.557617 -1187.353760     0.000000           0.000000   99.999268       -0.000244
4 -12390.056885   301.500732 -12591.558105 -1187.353760     0.000244           0.000000  201.500977      101.500977
5 -11786.556641   805.001221 -12491.558105 -1187.353760   500.629150           0.000244  204.372314      104.372314
6 -10107.254150  1883.674805 -12391.557373 -1187.353760  2084.303223         500.629150  200.000000      100.000732
7  -6237.904297  4069.349854 -12291.557617 -1187.353760  5850.650635        2084.303223  203.002686      103.003174
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:16]  --------------------------------------------------------------------------------
[07/18 16:32:16]  Iteration: 110 (0 solution, 109 counterexamples)
[07/18 16:32:18]  Generator returned sat in 0.586441 secs.
[07/18 16:32:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:32:18]  Improved gap from 204799/2048 to 100
[07/18 16:32:19]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:32:19]  Verifer returned sat in 0.123345 secs.
[07/18 16:32:19]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.558105     0.087646 -12991.058105 -1187.35376     0.000000           0.000000  299.500000      200.000000
1 -12591.558350   399.499756 -12791.558105 -1187.35376     0.000000           0.000000  199.999756      199.999756
2 -12591.558350   199.998779 -12763.230469 -1187.35376     0.000000           0.000000  171.672119       99.999756
3 -12591.558350     0.501221 -12691.558105 -1187.35376     0.000000           0.000000   99.999756       -0.000244
4 -12390.056885   301.501221 -12591.558105 -1187.35376     0.000488           0.000000  201.500732      101.500732
5 -11786.555176   805.002441 -12491.558105 -1187.35376   500.629150           0.000488  204.373779      104.373779
6 -10107.251709  1883.677246 -12391.557373 -1187.35376  2084.304199         500.629150  200.001465      100.002197
7  -6237.897949  4069.355225 -12291.557617 -1187.35376  5850.650635        2084.304199  203.009033      103.009521
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:19]  --------------------------------------------------------------------------------
[07/18 16:32:19]  Iteration: 111 (0 solution, 110 counterexamples)
[07/18 16:32:21]  Generator returned sat in 0.525319 secs.
[07/18 16:32:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:32:21]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:32:21]  Verifer returned sat in 0.132539 secs.
[07/18 16:32:21]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.558350     0.087402 -12991.058105 -1187.354004     0.000000           0.000000  299.499756      199.999756
1 -12591.558594   399.499512 -12791.558105 -1187.354004     0.000000           0.000000  199.999512      199.999512
2 -12591.558594   199.998779 -12763.230469 -1187.354004     0.000000           0.000000  171.671875       99.999512
3 -12591.558594     1.501221 -12691.558105 -1187.354004     0.000000           0.000000   99.999512       -0.000488
4 -12390.056885   301.501221 -12591.558105 -1187.354004     0.000244           0.000000  201.500977      101.500977
5 -11786.555420   805.002441 -12491.558105 -1187.354004   500.629150           0.000244  204.373535      104.373535
6 -10107.251709  1883.677246 -12391.557373 -1187.354004  2084.303955         500.629150  200.001709      100.002441
7  -6237.898193  4069.355225 -12291.557617 -1187.354004  5850.650391        2084.303955  203.009033      103.009521
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:21]  --------------------------------------------------------------------------------
[07/18 16:32:21]  Iteration: 112 (0 solution, 111 counterexamples)
[07/18 16:32:24]  Generator returned sat in 1.311692 secs.
[07/18 16:32:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:32:24]  Improved number of small numbers from 68 to 85 out of a max of 89
[07/18 16:32:24]  Verifer returned sat in 0.336405 secs.
[07/18 16:32:24]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12691.558350     0.086914 -12991.058350 -1187.354004     0.000000           0.000000  299.500000      200.000000
1 -12591.558838   399.499512 -12791.558350 -1187.354004     0.000000           0.000000  199.999512      199.999512
2 -12591.558838   199.998779 -12763.230469 -1187.354004     0.000000           0.000000  171.671631       99.999512
3 -12591.558838     1.501221 -12691.558350 -1187.354004     0.000000           0.000000   99.999512       -0.000488
4 -12240.056519   451.501831 -12591.558350 -1187.354004    51.501953           0.000000  299.999878      199.999878
5 -11435.052734  1105.003662 -12491.558350 -1187.354004   756.505615          51.501953  300.000000      200.000000
6  -9251.373291  2483.679443 -12391.557617 -1187.354004  2940.184814         756.505615  199.999512      100.000244
7  -4182.013184  5269.359619 -12291.557861 -1187.354004  7909.545166        2940.184814  199.999512      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:24]  --------------------------------------------------------------------------------
[07/18 16:32:24]  Iteration: 113 (0 solution, 112 counterexamples)
[07/18 16:32:26]  Generator returned sat in 0.588068 secs.
[07/18 16:32:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:32:26]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/18 16:32:26]  Verifer returned sat in 0.175740 secs.
[07/18 16:32:26]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11600.437500     0.086670 -11800.437256 -2278.475098      0.000000           0.000000  199.999756      199.999756
1 -11600.437500   199.999756 -11709.437256 -2278.475098      0.000000           0.000000  108.999756       99.999756
2 -11600.437500     0.042725 -11600.480225 -2278.475098      0.000000           0.000000    0.042725       -0.000244
3 -11400.394287   200.085938 -11600.437256 -2278.475098      0.042725           0.000000  200.000244      100.000244
4 -10998.222656   602.171875 -11500.437256 -2278.475098    202.214844           0.042725  299.999756      199.999756
5  -9882.878662  1415.343750 -11400.437256 -2278.475098   1317.558350         202.214844  200.000244      100.000244
6  -7050.148438  3032.730469 -11200.437256 -2278.475098   3950.289062        1317.558350  199.999756      199.999756
7   -782.687256  6467.460938 -11100.437500 -2278.475098  10117.750000        3950.289062  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:27]  --------------------------------------------------------------------------------
[07/18 16:32:27]  Iteration: 114 (0 solution, 113 counterexamples)
[07/18 16:32:29]  Generator returned sat in 1.299080 secs.
[07/18 16:32:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:32:29]  Improved gap from 11/256 to 100
[07/18 16:32:30]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:32:30]  Verifer returned sat in 0.147067 secs.
[07/18 16:32:30]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11709.394287     0.086670 -11800.437256 -2278.475098     0.000000           0.000000   91.042969       91.042969
1 -11691.437256   109.000000 -11800.437256 -2278.475098     0.000000           0.000000  109.000000        9.000000
2 -11691.437256     0.042969 -11691.480225 -2278.475098     0.000000           0.000000    0.042969      -91.000000
3 -11291.136475   400.343750 -11600.437256 -2278.475098   109.300537           0.000000  200.000244      100.000244
4 -10888.964844   602.171875 -11500.437256 -2278.475098   411.472412         109.300537  200.000000      100.000000
5 -10185.878906   903.085938 -11400.437256 -2278.475098  1014.558350         411.472412  200.000000      100.000000
6  -9350.250000  1035.628906 -11200.437256 -2278.475098  1750.187256        1014.558350  100.000000      100.000000
7  -8130.435547  1319.814453 -11100.437500 -2278.475098  2770.001709        1750.187256  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:30]  --------------------------------------------------------------------------------
[07/18 16:32:30]  Iteration: 115 (0 solution, 114 counterexamples)
[07/18 16:32:32]  Generator returned sat in 0.640663 secs.
[07/18 16:32:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:32:32]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:32:32]  Verifer returned sat in 0.160494 secs.
[07/18 16:32:32]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11709.394531    0.086426 -11900.437500 -2278.475098     0.000000           0.000000  191.042969       91.042969
1 -11691.437500  209.000000 -11800.437256 -2278.475098     0.000000           0.000000  108.999756        9.000000
2 -11691.437500    0.042969 -11691.480225 -2278.475098     0.000000           0.000000    0.042725      -91.000000
3 -11163.879150  527.601074 -11600.437500 -2278.475098   236.558350           0.000000  200.000000      100.000000
4 -10761.879150  602.000000 -11442.437256 -2278.475098   538.558350         236.558350  141.999756      100.000000
5 -10185.878906  718.000000 -11400.437256 -2278.475098  1014.558350         538.558350  200.000000      100.000244
6  -9801.792969  584.085938 -11200.437500 -2278.475098  1298.644287        1014.558350  100.000244      100.000244
7  -9099.793213  802.000000 -11100.437744 -2278.475098  1900.644287        1298.644287  100.000244      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:32]  --------------------------------------------------------------------------------
[07/18 16:32:32]  Iteration: 116 (0 solution, 115 counterexamples)
[07/18 16:32:41]  Generator returned sat in 7.256653 secs.
[07/18 16:32:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:32:41]  Improved number of small numbers from 61 to 85 out of a max of 89
[07/18 16:32:41]  Verifer returned sat in 0.371781 secs.
[07/18 16:32:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11709.394775     0.086182 -11800.437500 -2278.475342     0.000000           0.000000   91.042725       91.042725
1 -11500.437744   299.999756 -11800.437256 -2278.475342     0.000000           0.000000  299.999512      199.999756
2 -11500.437744     0.042725 -11600.437500 -2278.475342     0.000000           0.000000   99.999756       99.999756
3 -11400.394653   200.042847 -11600.437500 -2278.475342     0.042725           0.000000  200.000122      100.000122
4 -11099.309082   501.085693 -11442.437256 -2278.475342   201.128418           0.042725  141.999756      100.000000
5 -10059.137451  1182.171387 -11330.437500 -2278.475342  1041.300293         201.128418  229.999756      199.999756
6  -7788.794434  2500.342773 -11300.437500 -2278.475342  3211.643066        1041.300293  300.000000      200.000000
7  -2937.108887  5151.685547 -11100.437744 -2278.475342  7963.328613        3211.643066  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:42]  --------------------------------------------------------------------------------
[07/18 16:32:42]  Iteration: 117 (0 solution, 116 counterexamples)
[07/18 16:32:44]  Generator returned sat in 0.693200 secs.
[07/18 16:32:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:32:44]  Improved number of small numbers from 61 to 85 out of a max of 89
[07/18 16:32:44]  Verifer returned sat in 0.415288 secs.
[07/18 16:32:44]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11600.437744     0.085938 -11800.437744 -2278.475586     0.000000           0.000000  200.000000      200.000000
1 -11500.437988   299.999756 -11700.437744 -2278.475586     0.000000           0.000000  199.999756      199.999756
2 -11500.437988     0.042969 -11600.437744 -2278.475586     0.000000           0.000000   99.999756       99.999756
3 -11400.394897   200.042847 -11600.437744 -2278.475586     0.042725           0.000000  200.000122      100.000122
4 -11098.809326   501.585693 -11400.437744 -2278.475586   201.628418           0.042725  100.000000      100.000000
5 -10044.137939  1154.671387 -11300.437744 -2278.475586  1156.299805         201.628418  100.000000      100.000000
6  -7683.295166  2460.842773 -11300.437744 -2278.475586  3417.142578        1156.299805  200.000000      100.000000
7  -2810.109619  5073.185547 -11200.437744 -2278.475586  8090.328125        3417.142578  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:44]  --------------------------------------------------------------------------------
[07/18 16:32:44]  Iteration: 118 (0 solution, 117 counterexamples)
[07/18 16:32:48]  Generator returned sat in 2.816231 secs.
[07/18 16:32:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:32:49]  Improved number of small numbers from 54 to 89 out of a max of 89
[07/18 16:32:49]  Verifer returned sat in 0.163147 secs.
[07/18 16:32:49]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11597.794922     0.085938 -11797.795166 -2278.475586     0.000000           0.000000  200.000244      200.000000
1 -11497.795166   300.000000 -11697.794922 -2278.475586     0.000000           0.000000  199.999756      199.999756
2 -11397.794922   300.000000 -11597.794922 -2278.475586     0.000000           0.000000  200.000000      200.000000
3 -11397.794922     0.021484 -11497.795166 -2278.475586     0.000000           0.000000  100.000244      100.000000
4 -10896.295166   601.500000 -11497.794922 -2278.475586   401.499756           0.000000  200.000000      100.000000
5  -9892.295166  1204.000000 -11397.794922 -2278.475586  1305.499756         401.499756  200.000000      100.000000
6  -7683.295166  2409.000000 -11197.794922 -2278.475586  3414.499756        1305.499756  100.000000      100.000000
7  -2964.295166  4819.000000 -11197.794922 -2278.475586  8033.499756        3414.499756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:49]  --------------------------------------------------------------------------------
[07/18 16:32:49]  Iteration: 119 (0 solution, 118 counterexamples)
[07/18 16:32:52]  Generator returned sat in 1.412494 secs.
[07/18 16:32:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:32:52]  Improved number of small numbers from 77 to 85 out of a max of 89
[07/18 16:32:52]  Verifer returned sat in 0.321993 secs.
[07/18 16:32:52]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11597.794922     0.085693 -11797.794922 -2278.47583      0.000000           0.000000  200.000000      200.000000
1 -11497.795166   299.999756 -11697.794922 -2278.47583      0.000000           0.000000  199.999756      199.999756
2 -11397.794922   300.000000 -11639.794922 -2278.47583      0.000000           0.000000  242.000000      200.000000
3 -11397.794922     0.000244 -11497.795166 -2278.47583      0.000000           0.000000  100.000244      100.000000
4 -10896.295166   601.500000 -11497.794922 -2278.47583    401.499512           0.000000  200.000244      100.000244
5  -9592.295410  1504.000000 -11397.794922 -2278.47583   1605.499512         401.499512  200.000000      100.000000
6  -6420.295410  3372.000000 -11197.794922 -2278.47583   4577.499756        1605.499512  199.999756      199.999756
7    574.705200  7195.000366 -11197.794922 -2278.47583  11572.500000        4577.499756  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:52]  --------------------------------------------------------------------------------
[07/18 16:32:52]  Iteration: 120 (0 solution, 119 counterexamples)
[07/18 16:32:54]  Generator returned sat in 0.717271 secs.
[07/18 16:32:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:32:55]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:32:55]  Verifer returned sat in 0.127821 secs.
[07/18 16:32:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -11797.773682    0.085693 -11894.023682 -2278.47583        0.0                0.0   96.25000         0.02124
1 -11797.773682   96.250000 -11797.794922 -2278.47583        0.0                0.0    0.02124       -99.97876
2 -11397.794922  400.000000 -11611.794922 -2278.47583        0.0                0.0  214.00000       200.00000
3 -11397.794922    0.021240 -11595.794922 -2278.47583        0.0                0.0  198.00000       100.00000
4 -10997.794922  598.000000 -11397.794922 -2278.47583      300.0                0.0  100.00000       100.00000
5 -10496.794922  601.000000 -11297.794922 -2278.47583      701.0              300.0  100.00000       100.00000
6 -10124.794922  472.000000 -11197.794922 -2278.47583      973.0              701.0  100.00000       100.00000
7  -9626.794922  598.000000 -11197.794922 -2278.47583     1371.0              973.0  200.00000       100.00000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:55]  --------------------------------------------------------------------------------
[07/18 16:32:55]  Iteration: 121 (0 solution, 120 counterexamples)
[07/18 16:32:57]  Generator returned sat in 0.912439 secs.
[07/18 16:32:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:32:57]  Improved gap from 757673/16384 to 100
[07/18 16:32:58]  Improved number of small numbers from 40 to 59 out of a max of 90
[07/18 16:32:58]  Verifer returned sat in 0.791842 secs.
[07/18 16:32:58]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12158.480957     0.085693 -12158.502228 -2278.476074     0.000000           0.000000    0.021271        0.021271
1 -12058.502228   100.000000 -12058.523438 -2278.476074     0.000000           0.000000    0.021210        0.000000
2 -11758.502441   300.020996 -12004.725677 -2278.476074     0.000000           0.000000  246.223236      199.999786
3 -11758.502441     0.021240 -11956.502228 -2278.476074     0.000000           0.000000  197.999786       99.999786
4 -11550.970367   405.531860 -11858.502197 -2278.476074   107.531738           0.000000  200.000092      100.000122
5 -11044.406738   706.563721 -11658.502228 -2278.476074   414.095581         107.531738  199.999908      199.999908
6 -10017.507751  1226.898895 -11558.502228 -2278.476074  1440.994476         414.095581  100.000000      100.000000
7  -8292.608856  1824.898895 -11458.502441 -2278.476074  3065.893311        1440.994476  100.000275      100.000061
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:32:58]  --------------------------------------------------------------------------------
[07/18 16:32:58]  Iteration: 122 (0 solution, 121 counterexamples)
[07/18 16:33:00]  Generator returned sat in 0.570145 secs.
[07/18 16:33:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:00]  Improved gap from 0 to 100
[07/18 16:33:01]  Improved number of small numbers from 27 to 90 out of a max of 90
[07/18 16:33:01]  Verifer returned sat in 0.278062 secs.
[07/18 16:33:01]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11874.999268     0.085693 -11974.999023 -2177.694824     0.000000           0.000000   99.999756       99.999756
1 -11874.999268     0.042236 -11974.999023 -2177.694824     0.000000           0.000000   99.999756       -0.000244
2 -11774.956543   200.042480 -11774.999268 -2177.694824     0.000000           0.000000    0.042725        0.042480
3 -11574.956787   200.042480 -11774.999023 -2177.694824     0.042236           0.000000  200.000000      100.000000
4 -11273.914307   501.042480 -11674.999023 -2177.694824   101.084717           0.042236  300.000000      200.000000
5 -10621.871826   952.042480 -11512.999268 -2177.694824   653.127197         101.084717  238.000244      200.000000
6  -9513.829590  1346.042480 -11473.999023 -2177.694824  1761.169189         653.127197  199.000244      100.000244
7  -7914.287354  1798.542480 -11374.999023 -2177.694824  3260.711670        1761.169189  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:33:01]  --------------------------------------------------------------------------------
[07/18 16:33:01]  Iteration: 123 (0 solution, 122 counterexamples)
[07/18 16:33:03]  Generator returned sat in 0.574343 secs.
[07/18 16:33:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:03]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/18 16:33:03]  Verifer returned sat in 0.228371 secs.
[07/18 16:33:03]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11874.999512     0.085449 -11974.999023 -2177.695068     0.000000           0.000000   99.999512       99.999512
1 -11874.999512     0.041992 -11974.999023 -2177.695068     0.000000           0.000000   99.999512       -0.000488
2 -11774.956787   200.042236 -11774.999268 -2177.695068     0.000000           0.000000    0.042480        0.042236
3 -10372.829346  1402.169922 -11774.999023 -2177.695068  1202.169678           0.000000  200.000000      100.000000
4  -9570.744385  1002.084961 -11674.999023 -2177.695068  1804.254639        1202.169678  300.000000      200.000000
5  -8918.701904   952.042480 -11512.999268 -2177.695068  2456.297119        1804.254639  138.000244      100.000000
6  -8186.680908   870.021240 -11397.616130 -2177.695068  3088.318115        2456.297119  122.617106      100.000000
7  -7307.213053  1002.084961 -11374.999023 -2177.695068  3867.785889        3088.318115  200.000081      100.000081
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:33:03]  --------------------------------------------------------------------------------
[07/18 16:33:03]  Iteration: 124 (0 solution, 123 counterexamples)
[07/18 16:33:06]  Generator returned sat in 1.027813 secs.
[07/18 16:33:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:06]  Improved number of small numbers from 74 to 76 out of a max of 89
[07/18 16:33:06]  Verifer returned sat in 0.312804 secs.
[07/18 16:33:06]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11874.999756     0.085205 -11974.999023 -2177.695068     0.000000           0.000000   99.999268       99.999268
1 -11874.999756     0.041748 -11974.999023 -2177.695068     0.000000           0.000000   99.999268       -0.000732
2 -11574.999023   400.000000 -11774.999268 -2177.695068     0.000000           0.000000  200.000244      200.000000
3  -9519.744141  2255.255127 -11774.999023 -2177.695068  2055.254883           0.000000  200.000000      100.000000
4  -9418.744141   301.000000 -11574.999023 -2177.695068  2055.297119        2055.254883  100.957764      100.957764
5  -8918.701904   601.000000 -11574.999023 -2177.695068  2456.297119        2055.297119  200.000000      100.000000
6  -8817.701538   301.000366 -11397.616130 -2177.695068  2457.297485        2456.297119  122.617106      100.000000
7  -8373.244303   567.074341 -11374.999023 -2177.695068  2801.754639        2457.297485  200.000081      100.000081
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:33:07]  --------------------------------------------------------------------------------
[07/18 16:33:07]  Iteration: 125 (0 solution, 124 counterexamples)
[07/18 16:33:09]  Generator returned sat in 0.961005 secs.
[07/18 16:33:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:09]  Improved gap from 173/8192 to 100
[07/18 16:33:10]  Improved number of small numbers from 61 to 63 out of a max of 90
[07/18 16:33:10]  Verifer returned sat in 0.390509 secs.
[07/18 16:33:10]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11874.999023     0.085205 -11874.999023 -2277.695557     0.000000           0.000000    0.000000        0.000000
1 -11774.999023   100.000000 -11874.999023 -2277.695557     0.000000           0.000000  100.000000        0.000000
2 -11574.999268   299.999756 -11674.999268 -2277.695557     0.000000           0.000000  100.000000       99.999756
3 -11574.999268     0.021118 -11674.999023 -2277.695557     0.000000           0.000000   99.999756       -0.000244
4 -11273.467346   401.531677 -11574.999023 -2277.695557   101.531677           0.000000  200.000000      100.000000
5 -10870.169830   603.297516 -11474.999023 -2277.695557   404.829193         101.531677  200.000000      100.000000
6 -10164.223557   905.946274 -11274.999023 -2277.695557  1010.775467         404.829193  100.000000      100.000000
7  -8904.304146  1359.919411 -11274.999023 -2277.695557  2070.695068        1010.775467  299.999809      199.999809
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:33:10]  --------------------------------------------------------------------------------
[07/18 16:33:10]  Iteration: 126 (0 solution, 125 counterexamples)
[07/18 16:33:12]  Generator returned sat in 0.915099 secs.
[07/18 16:33:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:12]  Improved gap from 345/32768 to 100
[07/18 16:33:12]  Improved number of small numbers from 43 to 90 out of a max of 90
[07/18 16:33:12]  Verifer returned sat in 0.277542 secs.
[07/18 16:33:12]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.179688     0.084961 -12010.179688 -2477.611328     0.000000           0.000000    0.000000       -0.000244
1 -11910.179688   100.000000 -12010.179443 -2477.611328     0.000000           0.000000   99.999756       -0.000244
2 -11876.095215   134.084229 -11876.137207 -2477.611328     0.000000           0.000000    0.041992      -65.915771
3 -11610.137207   266.000000 -11810.179443 -2477.611328     0.042236           0.000000  200.000000      100.000000
4 -11410.137207   400.000000 -11710.179443 -2477.611328     0.042236           0.042236  300.000000      200.000000
5 -10708.637207  1001.500000 -11610.179443 -2477.611328   701.541992           0.042236  200.000244      100.000244
6  -9405.387451  1503.250000 -11510.179443 -2477.611328  1804.791992         701.541992  300.000000      200.000000
7  -7449.512451  2255.875000 -11410.179443 -2477.611328  3660.667236        1804.791992  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:13]  --------------------------------------------------------------------------------
[07/18 16:33:13]  Iteration: 127 (0 solution, 126 counterexamples)
[07/18 16:33:15]  Generator returned sat in 1.073145 secs.
[07/18 16:33:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:16]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/18 16:33:16]  Verifer returned sat in 0.200452 secs.
[07/18 16:33:16]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.179688     0.084717 -12010.179932 -2477.611328     0.000000           0.000000    0.000244       -0.000244
1 -11910.179932   100.000000 -12010.179443 -2477.611328     0.000000           0.000000   99.999512       -0.000488
2 -11876.032715   134.146729 -11876.053711 -2477.611328     0.000000           0.000000    0.020996      -65.853271
3 -11610.137207   265.916504 -11810.179443 -2477.611328     0.042236           0.000000  200.000000      100.000000
4 -11543.220703   266.916504 -11610.179443 -2477.611328     0.042236           0.042236   66.916504       66.916504
5 -10408.262451  1201.874756 -11610.179443 -2477.611328   901.917236           0.042236  299.999756      199.999756
6  -9505.387451  1202.874756 -11510.179443 -2477.611328  1804.791992         901.917236  200.000000      100.000000
7  -8501.512695  1203.874756 -11410.179443 -2477.611328  2708.666748        1804.791992  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:16]  --------------------------------------------------------------------------------
[07/18 16:33:16]  Iteration: 128 (0 solution, 127 counterexamples)
[07/18 16:33:18]  Generator returned sat in 1.197733 secs.
[07/18 16:33:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:19]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/18 16:33:19]  Verifer returned sat in 0.155330 secs.
[07/18 16:33:19]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.137451     0.084717 -12110.179443 -2477.611572     0.000000           0.000000  100.041992        0.041992
1 -12010.137207   100.042236 -12010.179443 -2477.611572     0.000000           0.000000    0.042236      -99.957764
2 -11910.137451   100.041992 -11910.179443 -2477.611572     0.000000           0.000000    0.041992      -99.958008
3 -10106.012939  1804.166504 -11761.179443 -2477.611572  1504.166504           0.000000  151.000000      100.000000
4  -9907.012939   350.000000 -11610.179443 -2477.611572  1504.166504        1504.166504  199.000000      199.000000
5  -8954.512939  1151.500000 -11510.179443 -2477.611572  2455.666504        1504.166504  100.000000      100.000000
6  -8653.512939   401.000000 -11410.179443 -2477.611572  2556.666748        2455.666504  199.999756      199.999756
7  -8501.512695   352.000000 -11410.179443 -2477.611572  2708.666748        2556.666748  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:19]  --------------------------------------------------------------------------------
[07/18 16:33:19]  Iteration: 129 (0 solution, 128 counterexamples)
[07/18 16:33:28]  Generator returned sat in 7.095286 secs.
[07/18 16:33:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:28]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:33:28]  Verifer returned sat in 0.118616 secs.
[07/18 16:33:28]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.158447     0.084717 -12010.179443 -2477.611572     0.000000           0.000000    0.020996        0.020996
1 -12010.158447     0.020996 -12010.179443 -2477.611572     0.000000           0.000000    0.020996      -99.979004
2 -11910.137451   100.041992 -11910.179443 -2477.611572     0.000000           0.000000    0.041992      -99.958008
3 -10296.012939  1614.166504 -11770.179443 -2477.611572  1314.166504           0.000000  160.000000      100.000000
4 -10096.012939   360.000000 -11610.179443 -2477.611572  1314.166504        1314.166504  200.000000      200.000000
5  -8954.512939  1341.500000 -11510.179443 -2477.611572  2455.666504        1314.166504  100.000000      100.000000
6  -8454.512939   600.000000 -11498.179443 -2477.611572  2755.666504        2455.666504  288.000000      200.000000
7  -8334.512939   408.000000 -11410.179443 -2477.611572  2775.666504        2755.666504  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:28]  --------------------------------------------------------------------------------
[07/18 16:33:28]  Iteration: 130 (0 solution, 129 counterexamples)
[07/18 16:33:30]  Generator returned sat in 0.853602 secs.
[07/18 16:33:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:31]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 16:33:31]  Verifer returned sat in 0.131440 secs.
[07/18 16:33:31]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.158936     0.084717 -12010.179932 -2477.611572     0.000000           0.000000    0.020996        0.020996
1 -12010.158936     0.020752 -12010.179932 -2477.611572     0.000000           0.000000    0.020996      -99.979004
2 -11810.179688   200.000244 -11810.179932 -2477.611572     0.000000           0.000000    0.000244        0.000244
3 -10296.013428  1514.166504 -11770.179932 -2477.611572  1314.166504           0.000000  160.000000      100.000000
4 -10096.013428   360.000000 -11610.179932 -2477.611572  1314.166504        1314.166504  200.000000      200.000000
5  -8774.513428  1521.500000 -11522.179932 -2477.611572  2635.666504        1314.166504  112.000000      100.000000
6  -8454.513428   432.000000 -11498.179932 -2477.611572  2755.666504        2635.666504  288.000000      200.000000
7  -8334.513428   408.000000 -11410.179688 -2477.611572  2775.666504        2755.666504  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:31]  --------------------------------------------------------------------------------
[07/18 16:33:31]  Iteration: 131 (0 solution, 130 counterexamples)
[07/18 16:33:33]  Generator returned sat in 1.048290 secs.
[07/18 16:33:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:34]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:33:34]  Verifer returned sat in 0.123703 secs.
[07/18 16:33:34]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.158936     0.084717 -12010.179932 -2477.611572     0.000000           0.000000    0.020996        0.020996
1 -12010.158936     0.020752 -12010.179932 -2477.611572     0.000000           0.000000    0.020996      -99.979004
2 -11810.179688   200.000244 -11810.179932 -2477.611572     0.000000           0.000000    0.000244        0.000244
3  -9756.013428  2054.166504 -11770.179932 -2477.611572  1854.166504           0.000000  160.000000      100.000000
4  -9556.013428   360.000000 -11610.179932 -2477.611572  1854.166504        1854.166504  200.000000      200.000000
5  -8774.513428   981.500000 -11522.179932 -2477.611572  2635.666504        1854.166504  112.000000      100.000000
6  -8454.513428   432.000000 -11498.179932 -2477.611572  2755.666504        2635.666504  288.000000      200.000000
7  -8334.513428   408.000000 -11410.179688 -2477.611572  2775.666504        2755.666504  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:34]  --------------------------------------------------------------------------------
[07/18 16:33:34]  Iteration: 132 (0 solution, 131 counterexamples)
[07/18 16:33:36]  Generator returned sat in 0.717898 secs.
[07/18 16:33:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:36]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:33:36]  Verifer returned sat in 0.113540 secs.
[07/18 16:33:36]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.159180     0.084473 -12010.179932 -2477.611572     0.000000           0.000000    0.020752        0.020752
1 -12010.159180     0.020508 -12010.179932 -2477.611572     0.000000           0.000000    0.020752      -99.979248
2 -11810.179688   200.000244 -11910.179932 -2477.611572     0.000000           0.000000  100.000244        0.000244
3  -9756.013672  2154.166260 -11770.179932 -2477.611572  1854.166260           0.000000  160.000000      100.000000
4  -9556.013672   360.000000 -11610.179932 -2477.611572  1854.166260        1854.166260  200.000000      200.000000
5  -8954.513672   801.500000 -11510.179932 -2477.611572  2455.666260        1854.166260  100.000000      100.000000
6  -8454.513672   600.000000 -11498.179932 -2477.611572  2755.666504        2455.666260  287.999756      199.999756
7  -8334.513428   408.000000 -11410.179688 -2477.611572  2775.666504        2755.666504  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:36]  --------------------------------------------------------------------------------
[07/18 16:33:36]  Iteration: 133 (0 solution, 132 counterexamples)
[07/18 16:33:40]  Generator returned sat in 2.417790 secs.
[07/18 16:33:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:41]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:33:41]  Verifer returned sat in 0.178311 secs.
[07/18 16:33:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.159180     0.084473 -12010.180176 -2477.611572     0.000000           0.000000    0.020996        0.020996
1 -12010.159180     0.020508 -12010.180176 -2477.611572     0.000000           0.000000    0.020996      -99.979004
2 -11810.179932   200.000244 -11910.180176 -2477.611572     0.000000           0.000000  100.000244        0.000244
3  -9756.013916  2154.166260 -11770.180176 -2477.611572  1854.166260           0.000000  160.000000      100.000000
4  -9556.013916   360.000000 -11610.180176 -2477.611572  1854.166260        1854.166260  200.000000      200.000000
5  -9554.513916   201.500000 -11510.180176 -2477.611572  1855.666260        1854.166260  100.000000      100.000000
6  -9054.513916   600.000000 -11498.180176 -2477.611572  2155.666504        1855.666260  287.999756      199.999756
7  -8934.513672   408.000000 -11410.179932 -2477.611572  2175.666504        2155.666504  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:41]  --------------------------------------------------------------------------------
[07/18 16:33:41]  Iteration: 134 (0 solution, 133 counterexamples)
[07/18 16:33:44]  Generator returned sat in 1.593378 secs.
[07/18 16:33:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:44]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:33:44]  Verifer returned sat in 0.132406 secs.
[07/18 16:33:44]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.138916     0.084229 -12010.180420 -2477.611816     0.000000           0.000000    0.041504        0.041504
1 -12010.138916     0.020752 -12010.180420 -2477.611816     0.000000           0.000000    0.041504      -99.958496
2 -11910.159424   100.020996 -11910.180420 -2477.611816     0.000000           0.000000    0.020996      -99.979004
3 -10226.014404  1684.166016 -11770.180420 -2477.611816  1384.166016           0.000000  160.000000      100.000000
4 -10026.014404   360.000000 -11710.180420 -2477.611816  1384.166016        1384.166016  300.000000      200.000000
5  -9454.514404   871.500000 -11510.180420 -2477.611816  1855.666016        1384.166016  200.000000      200.000000
6  -9054.514404   600.000000 -11510.180420 -2477.611816  2155.666504        1855.666016  299.999512      199.999512
7  -8964.513916   390.000000 -11410.180176 -2477.611816  2175.666260        2155.666504  270.000000      170.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:45]  --------------------------------------------------------------------------------
[07/18 16:33:45]  Iteration: 135 (0 solution, 134 counterexamples)
[07/18 16:33:51]  Generator returned sat in 4.788486 secs.
[07/18 16:33:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:51]  Improved number of small numbers from 51 to 64 out of a max of 89
[07/18 16:33:51]  Verifer returned sat in 0.486245 secs.
[07/18 16:33:51]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12010.138672      0.083984 -12010.180420 -2477.612061      0.000000           0.000000    0.041748        0.041748
1 -12010.138672      0.020752 -12010.180420 -2477.612061      0.000000           0.000000    0.041748      -99.958252
2 -11910.159668    100.020752 -11910.180420 -2477.612061      0.000000           0.000000    0.020752      -99.979248
3 -11610.159546    300.020874 -11810.180420 -2477.612061      0.020874           0.000000  200.000000      100.000000
4 -10908.617798    901.541748 -11610.201294 -2477.612061    601.562622           0.020874  100.020874      100.000000
5  -8604.086487   2404.552185 -11510.180420 -2477.612061   2706.093933         601.562622  200.000000      200.000000
6  -3393.482117   5410.604370 -11510.180420 -2477.612061   7916.698242        2706.093933  200.000061      100.000061
7   7679.226562  11272.708740 -11410.180420 -2477.612061  18889.406982        7916.698242  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:33:52]  --------------------------------------------------------------------------------
[07/18 16:33:52]  Iteration: 136 (0 solution, 135 counterexamples)
[07/18 16:33:54]  Generator returned sat in 0.690377 secs.
[07/18 16:33:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:54]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:33:54]  Verifer returned sat in 0.131531 secs.
[07/18 16:33:54]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11907.347656     0.083984 -11910.180664 -2477.612061     0.000000           0.000000    2.833008        2.833008
1 -11907.347656     0.041748 -11907.389404 -2477.612061     0.000000           0.000000    0.041748      -97.166992
2 -11710.138916   197.250488 -11710.180664 -2477.612061     0.000000           0.000000    0.041748        0.041748
3 -11510.180664   200.000000 -11710.180664 -2477.612061     0.000000           0.000000  200.000000      100.000000
4 -11510.180664   101.500000 -11510.222412 -2477.612061     0.000000           0.000000    0.041748        0.000000
5 -11310.138916   200.083496 -11510.180664 -2477.612061     0.041748           0.000000  200.000000      100.000000
6 -10807.971924   702.166992 -11410.180664 -2477.612061   302.208740           0.041748  300.000000      200.000000
7  -9251.637939  1856.333984 -11310.180664 -2477.612061  1858.542725         302.208740  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:54]  --------------------------------------------------------------------------------
[07/18 16:33:54]  Iteration: 137 (0 solution, 136 counterexamples)
[07/18 16:33:58]  Generator returned sat in 1.749751 secs.
[07/18 16:33:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:33:58]  Improved gap from 398167/4096 to 100
[07/18 16:33:58]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:33:58]  Verifer returned sat in 0.159803 secs.
[07/18 16:33:58]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11907.347656     0.083740 -11910.180664 -2477.612061     0.000000           0.000000    2.833008        2.833008
1 -11907.347656     0.041748 -11907.389404 -2477.612061     0.000000           0.000000    0.041748      -97.166992
2 -11710.139160   197.250244 -11710.180664 -2477.612061     0.000000           0.000000    0.041504        0.041504
3 -11510.180908   199.999756 -11710.180664 -2477.612061     0.000000           0.000000  199.999756       99.999756
4 -11510.180908   101.500000 -11510.222412 -2477.612061     0.000000           0.000000    0.041504       -0.000244
5 -11310.138916   200.083496 -11510.180664 -2477.612061     0.041748           0.000000  200.000000      100.000000
6 -10809.971924   700.166992 -11410.180664 -2477.612061   302.208740           0.041748  298.000000      198.000000
7  -9257.637939  1850.333984 -11310.180664 -2477.612061  1852.542480         302.208740  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:33:58]  --------------------------------------------------------------------------------
[07/18 16:33:58]  Iteration: 138 (0 solution, 137 counterexamples)
[07/18 16:34:01]  Generator returned sat in 1.514710 secs.
[07/18 16:34:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:02]  Improved gap from 372821/4096 to 100
[07/18 16:34:02]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:34:02]  Verifer returned sat in 0.158456 secs.
[07/18 16:34:02]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11710.159912      0.083740 -11810.180664 -2577.612061      0.000000           0.000000  100.020752      100.020752
1 -11710.159912      0.041504 -11710.180664 -2577.612061      0.000000           0.000000    0.020752        0.020752
2 -11710.159912      0.020752 -11710.180664 -2577.612061      0.000000           0.000000    0.020752      -99.979248
3 -11410.159912    300.020752 -11610.180664 -2577.612061      0.020752           0.000000  200.000000      100.000000
4 -10710.118408    900.041504 -11478.180664 -2577.612061    500.062256           0.020752  268.000000      200.000000
5  -8830.035400   2148.083008 -11410.180664 -2577.612061   2280.145264         500.062256  300.000000      200.000000
6  -4383.869385   4746.166016 -11229.180664 -2577.612061   6626.311279        2280.145264  219.000000      200.000000
7   5460.962646  10063.832031 -11210.180664 -2577.612061  16471.143311        6626.311279  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:02]  --------------------------------------------------------------------------------
[07/18 16:34:02]  Iteration: 139 (0 solution, 138 counterexamples)
[07/18 16:34:05]  Generator returned sat in 1.033401 secs.
[07/18 16:34:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:05]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:34:05]  Verifer returned sat in 0.149252 secs.
[07/18 16:34:05]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11710.160400      0.083252 -11810.180664 -2577.612305      0.000000           0.000000  100.020264      100.020264
1 -11710.160400      0.041016 -11710.180664 -2577.612305      0.000000           0.000000    0.020264        0.020264
2 -11710.160156      0.020508 -11710.180664 -2577.612305      0.000000           0.000000    0.020508      -99.979492
3 -11410.159912    300.020752 -11610.180664 -2577.612305      0.010010           0.000000  200.010742      100.010742
4 -10709.629150    900.541504 -11478.180664 -2577.612305    500.551514           0.010010  268.000000      200.000000
5  -8828.046143   2149.583008 -11410.180664 -2577.612305   2282.134521         500.551514  300.000000      200.000000
6  -4378.380127   4749.666016 -11234.376465 -2577.612305   6631.800537        2282.134521  224.195801      200.000000
7   5460.962402  10063.538330 -11210.180664 -2577.612305  16471.143066        6631.800537  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:05]  --------------------------------------------------------------------------------
[07/18 16:34:05]  Iteration: 140 (0 solution, 139 counterexamples)
[07/18 16:34:08]  Generator returned sat in 0.958014 secs.
[07/18 16:34:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:08]  Improved number of small numbers from 86 to 86 out of a max of 89
[07/18 16:34:08]  Verifer returned sat in 0.187303 secs.
[07/18 16:34:08]  Counter example: 
[93m    arrival_0,t      cwnd_0,t   service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11710.160400      0.083252 -11810.180664 -2577.612305      0.000000           0.000000  100.020264      100.020264
1 -11710.160400      0.041016 -11710.180664 -2577.612305      0.000000           0.000000    0.020264        0.020264
2 -11710.160156      0.020508 -11710.180664 -2577.612305      0.000000           0.000000    0.020508      -99.979492
3 -11410.159912    300.020752 -11610.180664 -2577.612305      0.010010           0.000000  200.010742      100.010742
4 -10709.129150    901.041504 -11479.347331 -2577.612305    501.968180           0.010010  268.250000      199.083333
5  -8828.046143   2149.333008 -11410.180664 -2577.612305   2282.134521         501.968180  300.000000      200.000000
6  -4378.380127   4749.666016 -11234.376465 -2577.612305   6631.800537        2282.134521  224.195801      200.000000
7   5461.462402  10064.038330 -11210.180664 -2577.612305  16471.643066        6631.800537  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:08]  --------------------------------------------------------------------------------
[07/18 16:34:08]  Iteration: 141 (0 solution, 140 counterexamples)
[07/18 16:34:12]  Generator returned sat in 2.685769 secs.
[07/18 16:34:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:13]  Improved gap from 339/16384 to 100
[07/18 16:34:13]  Improved number of small numbers from 31 to 41 out of a max of 90
[07/18 16:34:13]  Verifer returned sat in 0.813617 secs.
[07/18 16:34:13]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  3854.137451    0.083008  3754.137310 -2577.612305     0.000000           0.000000  100.000142      100.000142
1  3854.137451    0.041504  3754.137310 -2577.612305     0.000000           0.000000  100.000142        0.000142
2  4054.137310  300.000000  3954.137310 -2577.612305     0.000000           0.000000  100.000000      100.000000
3  4154.178691  200.041382  3954.137310 -2577.612305     0.041382           0.000000  200.000000      100.000000
4  4355.699382  401.520691  4054.137310 -2577.612305   101.562073           0.041382  200.000000      100.000000
5  4807.959728  652.260345  4202.137310 -2577.612305   353.822418         101.562073  252.000000      200.000000
6  5255.589901  699.630173  4343.137310 -2577.612305   801.452591         353.822418  111.000000      100.000000
7  6079.404987  934.815086  4354.137451 -2577.612305  1525.267578         801.452591  199.999958      100.000099
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:14]  --------------------------------------------------------------------------------
[07/18 16:34:14]  Iteration: 142 (0 solution, 141 counterexamples)
[07/18 16:34:17]  Generator returned sat in 1.367213 secs.
[07/18 16:34:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:17]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/18 16:34:17]  Verifer returned sat in 0.204835 secs.
[07/18 16:34:17]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  3854.137207     0.083008  3754.137207 -2577.612305     0.000000           0.000000  100.000000      100.000000
1  3854.137207     0.041260  3754.137451 -2577.612305     0.000000           0.000000   99.999756        0.000000
2  4054.137451   300.000000  3954.137207 -2577.612305     0.000000           0.000000  100.000244      100.000244
3  4154.157959   200.020752  3954.137207 -2577.612305     0.020752           0.000000  200.000000      100.000000
4  4455.678711   501.520752  4054.137451 -2577.612305   201.541260           0.020752  200.000000      100.000244
5  5208.699463   953.020752  4161.137207 -2577.612305   754.562256         201.541260  293.000000      200.000000
6  6180.720215  1265.020752  4353.137207 -2577.612305  1626.583008         754.562256  201.000000      200.000000
7  7844.740967  1865.020752  4354.137451 -2577.612305  3290.603516        1626.583008  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:17]  --------------------------------------------------------------------------------
[07/18 16:34:17]  Iteration: 143 (0 solution, 142 counterexamples)
[07/18 16:34:20]  Generator returned sat in 0.839051 secs.
[07/18 16:34:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:20]  Improved number of small numbers from 67 to 89 out of a max of 89
[07/18 16:34:20]  Verifer returned sat in 0.210827 secs.
[07/18 16:34:20]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  3854.136963     0.083008  3709.456543 -2577.612549     0.000000           0.000000  144.680420       99.999756
1  3854.136963     0.041260  3754.137207 -2577.612549     0.000000           0.000000   99.999756       -0.000244
2  4054.137451   300.000244  3889.137207 -2577.612549     0.000000           0.000000  165.000244      100.000244
3  4154.157715   265.020508  3954.137207 -2577.612549     0.010254           0.000000  200.010254      100.010254
4  4455.678711   501.531250  4154.137207 -2577.612549   201.541260           0.010254  100.000244      100.000244
5  5208.444092   852.765625  4254.137207 -2577.612549   854.306885         201.541260  100.000000      100.000000
6  6084.326904   975.882812  4353.137207 -2577.612549  1626.583008         854.306885  104.606689      103.606689
7  7068.161621  1088.441406  4354.137451 -2577.612549  2514.024170        1626.583008  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:20]  --------------------------------------------------------------------------------
[07/18 16:34:20]  Iteration: 144 (0 solution, 143 counterexamples)
[07/18 16:34:23]  Generator returned sat in 0.784602 secs.
[07/18 16:34:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:23]  Improved number of small numbers from 55 to 78 out of a max of 89
[07/18 16:34:23]  Verifer returned sat in 0.436854 secs.
[07/18 16:34:23]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   3791.157959      0.082764  3754.137207 -2577.612793      0.000000           0.000000   37.020752       37.020752
1   3791.157959      0.020752  3791.136963 -2577.612793      0.000000           0.000000    0.020996      -62.979248
2   4154.136963    363.000000  3954.137207 -2577.612793      0.000000           0.000000  199.999756      199.999756
3   4154.157898    200.020691  4054.137207 -2577.612793      0.020691           0.000000  100.000000      100.000000
4   4906.199280    852.041382  4154.136963 -2577.612793    552.062256           0.020691  200.000061      199.999817
5   6956.781982   2250.582764  4154.137207 -2577.612793   2502.645020         552.062256  299.999756      199.999756
6  11459.947754   4803.165527  4353.137207 -2577.612793   6905.810547        2502.645020  201.000000      200.000000
7  21315.778809  10056.831055  4354.137451 -2577.612793  16761.641357        6905.810547  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:23]  --------------------------------------------------------------------------------
[07/18 16:34:23]  Iteration: 145 (0 solution, 144 counterexamples)
[07/18 16:34:26]  Generator returned sat in 0.746336 secs.
[07/18 16:34:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:26]  Improved gap from 0 to 100
[07/18 16:34:26]  Improved number of small numbers from 37 to 90 out of a max of 90
[07/18 16:34:26]  Verifer returned sat in 0.324908 secs.
[07/18 16:34:26]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1642.736084     0.082764  1542.736084 -2577.612793     0.000000           0.000000  100.000000      100.000000
1  1642.736084     0.041260  1542.736084 -2577.612793     0.000000           0.000000  100.000000        0.000000
2  1703.736084   161.000000  1703.736084 -2577.612793     0.000000           0.000000    0.000000      -39.000000
3  1942.777588   239.041504  1742.736084 -2577.612793     0.041260           0.000000  200.000244      100.000244
4  2283.818848   541.041504  1842.736084 -2577.612793   141.082764           0.041260  300.000000      200.000000
5  2976.860352   993.041504  2042.736084 -2577.612793   734.124268         141.082764  200.000000      200.000000
6  4280.401855  1503.541504  2134.736084 -2577.612793  2037.665527         734.124268  108.000244      100.000244
7  6265.943115  2093.541504  2142.736084 -2577.612793  3923.206787        2037.665527  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:27]  --------------------------------------------------------------------------------
[07/18 16:34:27]  Iteration: 146 (0 solution, 145 counterexamples)
[07/18 16:34:29]  Generator returned sat in 0.932607 secs.
[07/18 16:34:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:29]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:34:29]  Verifer returned sat in 0.120271 secs.
[07/18 16:34:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1642.736084    0.082764  1542.736084 -2577.612793    0.00000            0.00000  100.000000      100.000000
1  1642.736084    0.041260  1562.736084 -2577.612793    0.00000            0.00000   80.000000        0.000000
2  1642.736084   80.000000  1642.736084 -2577.612793    0.00000            0.00000    0.000000     -100.000000
3  1942.777588  300.041504  1801.736084 -2577.612793    0.04126            0.00000  141.000244      100.000244
4  2190.277344  388.500000  1842.736084 -2577.612793   47.54126            0.04126  300.000000      200.000000
5  2310.277344  420.000000  2042.736084 -2577.612793   67.54126           47.54126  200.000000      200.000000
6  2710.277344  600.000000  2060.736084 -2577.612793  467.54126           67.54126  182.000000      100.000000
7  2916.777344  388.500000  2142.736084 -2577.612793  574.04126          467.54126  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:30]  --------------------------------------------------------------------------------
[07/18 16:34:30]  Iteration: 147 (0 solution, 146 counterexamples)
[07/18 16:34:33]  Generator returned sat in 1.348720 secs.
[07/18 16:34:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:34:33]  Improved gap from 80 to 100
[07/18 16:34:33]  Improved number of small numbers from 69 to 79 out of a max of 90
[07/18 16:34:33]  Verifer returned sat in 0.384866 secs.
[07/18 16:34:33]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1642.735840    0.082275  1542.735840 -2577.613037    0.000000           0.000000  100.000000      100.000000
1  1642.735840    0.041016  1542.735840 -2577.613037    0.000000           0.000000  100.000000        0.000000
2  1642.735840   79.999756  1642.735840 -2577.613037    0.000000           0.000000    0.000000     -100.000000
3  1942.777344  300.041504  1832.736084 -2577.613037    0.041016           0.000000  110.000244      100.000488
4  2268.277466  435.500366  1842.735840 -2577.613037  125.541748           0.041016  299.999878      199.999878
5  2418.777588  450.500000  2042.535840 -2577.613037  176.041748         125.541748  200.200000      200.000000
6  2818.777588  600.200000  2122.736328 -2577.613037  576.041626         176.041748  119.999634      100.000122
7  3134.278320  435.500366  2142.736084 -2577.613037  791.541992         576.041626  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:34:33]  --------------------------------------------------------------------------------
[07/18 16:34:33]  Iteration: 148 (0 solution, 147 counterexamples)
[07/18 16:34:42]  Generator returned sat in 6.692382 secs.
[07/18 16:34:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:34:42]  Improved gap from 0 to 100
[07/18 16:34:43]  Improved number of small numbers from 49 to 82 out of a max of 90
[07/18 16:34:43]  Verifer returned sat in 0.642350 secs.
[07/18 16:34:43]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1165.182617     0.082275  1065.182617 -2577.612793     0.000000           0.000000  100.000000      100.000000
1  1165.182617     0.041016  1065.224121 -2577.612793     0.000000           0.000000   99.958496        0.000000
2  1165.182617    99.917725  1165.182617 -2577.612793     0.000000           0.000000    0.000000     -100.000000
3  1877.018066   711.835449  1265.182861 -2577.612793   411.835205           0.000000  200.000000      100.000244
4  2032.935791   355.917725  1387.182617 -2577.612793   467.753174         411.835205  178.000000      100.000000
5  2032.935791   177.958862  1565.182617 -2577.612793   467.753174         467.753174    0.000000        0.000000
6  3188.853516  1155.917725  1565.182786 -2577.612793  1323.670898         467.753174  299.999832      200.000000
7  3466.812546   577.958862  1665.182861 -2577.612793  1601.629639        1323.670898  200.000046      100.000291
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:34:43]  --------------------------------------------------------------------------------
[07/18 16:34:43]  Iteration: 149 (0 solution, 148 counterexamples)
[07/18 16:34:47]  Generator returned sat in 2.162700 secs.
[07/18 16:34:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:34:47]  Improved gap from 0 to 100
[07/18 16:34:47]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/18 16:34:47]  Verifer returned sat in 0.240750 secs.
[07/18 16:34:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1065.224121    0.082031  1065.182861 -2577.612793    0.000000           0.000000    0.041260        0.041260
1  1065.224121    0.020752  1065.203369 -2577.612793    0.000000           0.000000    0.020752      -99.958740
2  1265.182861  199.979492  1165.182861 -2577.612793    0.000000           0.000000  100.000000        0.000000
3  1265.182861    0.020752  1265.182861 -2577.612793    0.000000           0.000000    0.000000     -100.000000
4  1665.182861  400.000000  1365.182861 -2577.612793   99.999756           0.000000  200.000244      100.000244
5  1665.182861  200.000000  1565.182861 -2577.612793   99.999756          99.999756    0.000244        0.000244
6  2465.182617  800.000000  1565.182861 -2577.612793  599.999756          99.999756  300.000000      200.000000
7  2565.182617  400.000000  1665.182861 -2577.612793  600.000000         599.999756  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:34:47]  --------------------------------------------------------------------------------
[07/18 16:34:47]  Iteration: 150 (0 solution, 149 counterexamples)
[07/18 16:35:02]  Generator returned sat in 12.755372 secs.
[07/18 16:35:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:02]  Improved gap from 0 to 100
[07/18 16:35:02]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:35:02]  Verifer returned sat in 0.165488 secs.
[07/18 16:35:02]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1165.244385    0.082031   965.223877 -2577.612793    0.000000           0.000000  200.020508      100.020508
1  1165.244385    0.020508  1165.223877 -2577.612793    0.000000           0.000000    0.020508        0.020508
2  1465.223877  300.000000  1165.223877 -2577.612793    0.000000           0.000000  300.000000      200.000000
3  1565.244385  400.020508  1265.234131 -2577.612793    0.020508           0.000000  299.989746      200.000000
4  1565.264893  300.010254  1365.223877 -2577.612793    0.041016           0.020508  200.000000      100.000000
5  1565.264893  200.000000  1465.223877 -2577.612793    0.041016           0.041016  100.000000        0.000000
6  2165.264893  700.000000  1665.223877 -2577.612793  400.041016           0.041016  100.000000      100.000000
7  2465.254639  399.989746  1665.223877 -2577.612793  500.030762         400.041016  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:35:02]  --------------------------------------------------------------------------------
[07/18 16:35:02]  Iteration: 151 (0 solution, 150 counterexamples)
[07/18 16:35:05]  Generator returned sat in 1.474507 secs.
[07/18 16:35:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:06]  Improved gap from 83/16384 to 100
[07/18 16:35:06]  Improved number of small numbers from 63 to 90 out of a max of 90
[07/18 16:35:06]  Verifer returned sat in 0.229869 secs.
[07/18 16:35:06]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1265.183105    0.081543  1065.218750 -2577.613037    0.000000           0.000000  199.964355      199.959229
1  1265.183105    0.020020  1165.223877 -2577.613037    0.000000           0.000000   99.959229       99.959229
2  1267.200439  101.976562  1265.220459 -2577.613037    0.000000           0.000000    1.979980        1.976562
3  1267.200439    1.979492  1265.223877 -2577.613037    0.000000           0.000000    1.976562      -98.023438
4  1666.223877  401.000000  1365.223877 -2577.613037   99.989746           0.000000  201.010254      101.010254
5  1666.223877  201.000000  1565.223877 -2577.613037   99.989746          99.989746    1.010254        1.010254
6  2365.720459  700.506836  1665.223877 -2577.613037  500.496582          99.989746  200.000000      200.000000
7  2566.720459  401.000000  1665.223877 -2577.613037  701.496582         500.496582  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:35:06]  --------------------------------------------------------------------------------
[07/18 16:35:06]  Iteration: 152 (0 solution, 151 counterexamples)
[07/18 16:35:09]  Generator returned sat in 1.210372 secs.
[07/18 16:35:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:09]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:35:09]  Verifer returned sat in 0.125905 secs.
[07/18 16:35:09]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1265.182861    0.081299  1065.218750 -2577.613037    0.000000           0.000000  199.964111      199.958984
1  1265.182861    0.019775  1165.223877 -2577.613037    0.000000           0.000000   99.958984       99.958984
2  1267.200195  101.976318  1265.095703 -2577.613037    0.000000           0.000000    2.104492        1.976318
3  1267.200195    0.979492  1265.223877 -2577.613037    0.000000           0.000000    1.976318      -98.023682
4  1665.723877  400.500000  1365.223877 -2577.613037   99.989990           0.000000  200.510010      100.510010
5  1665.723877  200.500000  1565.223877 -2577.613037   99.989990          99.989990    0.510010        0.510010
6  2365.720215  700.506348  1665.223877 -2577.613037  500.496582          99.989990  199.999756      199.999756
7  2566.220459  400.500000  1665.223877 -2577.613037  700.996338         500.496582  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:35:10]  --------------------------------------------------------------------------------
[07/18 16:35:10]  Iteration: 153 (0 solution, 152 counterexamples)
[07/18 16:35:18]  Generator returned sat in 6.837644 secs.
[07/18 16:35:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:18]  Improved gap from 333/16384 to 100
[07/18 16:35:18]  Improved number of small numbers from 38 to 90 out of a max of 90
[07/18 16:35:18]  Verifer returned sat in 0.240807 secs.
[07/18 16:35:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   665.402832    0.081299   565.402832 -2577.613037    0.000000           0.000000  100.000000      100.000000
1   665.402832    0.040771   565.402832 -2577.613037    0.000000           0.000000  100.000000        0.000000
2   965.402832  400.000000   665.403076 -2577.613037    0.000000           0.000000  299.999756      200.000000
3  1065.443604  400.040527   827.402832 -2577.613037    0.040771           0.000000  238.000000      200.000000
4  1065.443604    0.500000   865.402832 -2577.613037    0.040771           0.040771  200.000000      100.000000
5  1465.693604  600.250000  1065.402832 -2577.613037  300.290527           0.040771  100.000244      100.000244
6  1465.693604    0.500000  1065.402832 -2577.613037  300.290527         300.290527  100.000244        0.000244
7  1841.943359  476.250000  1165.403076 -2577.613037  476.540283         300.290527  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:35:19]  --------------------------------------------------------------------------------
[07/18 16:35:19]  Iteration: 154 (0 solution, 153 counterexamples)
[07/18 16:35:22]  Generator returned sat in 1.158606 secs.
[07/18 16:35:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:22]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:35:22]  Verifer returned sat in 0.137747 secs.
[07/18 16:35:22]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   665.402588    0.081299   565.402832 -2577.613281    0.000000           0.000000   99.999756       99.999756
1   665.402588    0.040771   565.402832 -2577.613281    0.000000           0.000000   99.999756       -0.000244
2   965.402588  399.999756   665.403076 -2577.613281    0.000000           0.000000  299.999512      199.999756
3  1065.443359  400.040283   827.153076 -2577.613281    0.040771           0.000000  238.249512      199.999756
4  1065.443359    0.500000   865.402832 -2577.613281    0.040771           0.040771  199.999756       99.999756
5  1465.443604  600.000000  1065.402832 -2577.613281  300.040771           0.040771  100.000000      100.000000
6  1465.443604    0.500000  1065.402832 -2577.613281  300.040771         300.040771  100.000000        0.000000
7  1841.943115  476.499512  1165.403076 -2577.613281  476.540283         300.040771  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:35:22]  --------------------------------------------------------------------------------
[07/18 16:35:22]  Iteration: 155 (0 solution, 154 counterexamples)
[07/18 16:35:27]  Generator returned sat in 2.938201 secs.
[07/18 16:35:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:27]  Improved gap from 333/32768 to 100
[07/18 16:35:28]  Improved number of small numbers from 23 to 39 out of a max of 90
[07/18 16:35:28]  Verifer returned sat in 0.686805 secs.
[07/18 16:35:28]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   210.885010     0.081299   110.843994 -2777.603403     0.000000           0.000000  100.041016      100.040823
1   210.885010     0.040771   210.843994 -2777.603403     0.000000           0.000000    0.041016        0.040823
2   310.843994   100.000000   210.844187 -2777.603403     0.000000           0.000000   99.999807       -0.000193
3   510.884836   300.040649   410.844187 -2777.603403     0.040649           0.000000  100.000000      100.000000
4   861.445811   450.560974   410.844187 -2777.603403   150.601624           0.040649  300.000000      200.000000
5  1237.787272   676.341461   510.844187 -2777.603403   426.943085         150.601624  300.000000      200.000000
6  1952.799464  1015.012192   610.844187 -2777.603403  1041.955276         426.943085  300.000000      200.000000
7  3175.817751  1523.018288   710.844238 -2777.603403  2264.973389        1041.955276  200.000124      100.000175
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:28]  --------------------------------------------------------------------------------
[07/18 16:35:28]  Iteration: 156 (0 solution, 155 counterexamples)
[07/18 16:35:31]  Generator returned sat in 1.144057 secs.
[07/18 16:35:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:31]  Improved number of small numbers from 22 to 89 out of a max of 89
[07/18 16:35:31]  Verifer returned sat in 0.210263 secs.
[07/18 16:35:31]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1204.249268     0.081055 -1404.249512 -2777.603271     0.000000           0.000000  200.000244      200.000000
1 -1204.249268     0.040527 -1404.249268 -2777.603271     0.000000           0.000000  200.000000      100.000000
2 -1004.249512   399.999756 -1304.249268 -2777.603271     0.000000           0.000000  299.999756      199.999756
3  -290.737061  1013.512207 -1104.249268 -2777.603271   613.512207           0.000000  200.000000      200.000000
4   523.275146  1014.012207 -1104.249268 -2777.603271  1327.524414         613.512207  300.000000      200.000000
5  1237.787354  1014.512207  -904.249268 -2777.603271  2042.036621        1327.524414  100.000000      100.000000
6  2152.799561  1015.012207  -804.249512 -2777.603271  2857.048828        2042.036621  100.000244      100.000000
7  3068.311523  1015.512207  -704.249512 -2777.603271  3572.561035        2857.048828  200.000000      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:31]  --------------------------------------------------------------------------------
[07/18 16:35:31]  Iteration: 157 (0 solution, 156 counterexamples)
[07/18 16:35:36]  Generator returned sat in 3.181174 secs.
[07/18 16:35:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:37]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:35:37]  Verifer returned sat in 0.118773 secs.
[07/18 16:35:37]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1204.249268     0.081055 -1404.249512 -2777.603271     0.000000           0.000000  200.000244      200.000000
1 -1204.249268     0.040527 -1404.249268 -2777.603271     0.000000           0.000000  200.000000      100.000000
2 -1004.249512   399.999756 -1304.249268 -2777.603271     0.000000           0.000000  299.999756      199.999756
3  -291.737061  1012.512207 -1105.249268 -2777.603271   613.512207           0.000000  200.000000      199.000000
4   522.275146  1014.012207 -1104.249268 -2777.603271  1326.524414         613.512207  300.000000      200.000000
5  1237.787354  1015.512207  -904.249268 -2777.603271  2042.036621        1326.524414  100.000000      100.000000
6  2154.799561  1017.012207  -804.249512 -2777.603271  2856.048828        2042.036621  103.000244      103.000000
7  3070.311523  1018.512207  -704.249512 -2777.603271  3574.560791        2856.048828  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:37]  --------------------------------------------------------------------------------
[07/18 16:35:37]  Iteration: 158 (0 solution, 157 counterexamples)
[07/18 16:35:40]  Generator returned sat in 1.231916 secs.
[07/18 16:35:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:35:40]  Improved number of small numbers from 65 to 89 out of a max of 89
[07/18 16:35:40]  Verifer returned sat in 0.204776 secs.
[07/18 16:35:40]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1204.249512     0.080566 -1404.249756 -2777.603271     0.000000           0.000000  200.000244      200.000000
1 -1204.249512     0.040039 -1404.249268 -2777.603271     0.000000           0.000000  199.999756      100.000000
2 -1004.250000   399.999268 -1304.249512 -2777.603271     0.000000           0.000000  299.999512      199.999512
3  -290.487305  1013.762207 -1106.249512 -2777.603271   613.762207           0.000000  202.000000      200.000000
4   522.274902  1014.762207 -1104.249512 -2777.603271  1326.524414         613.762207  300.000000      200.000000
5  1238.037109  1015.762207  -904.249512 -2777.603271  2042.286621        1326.524414  100.000000      100.000000
6  2154.799316  1016.762207  -804.249512 -2777.603271  2856.048340        2042.286621  103.000488      103.000488
7  3069.561035  1017.762207  -704.250000 -2777.603271  3573.810547        2856.048340  200.000488      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:41]  --------------------------------------------------------------------------------
[07/18 16:35:41]  Iteration: 159 (0 solution, 158 counterexamples)
[07/18 16:35:44]  Generator returned sat in 1.564215 secs.
[07/18 16:35:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:35:44]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:35:44]  Verifer returned sat in 0.120993 secs.
[07/18 16:35:44]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1204.249512     0.080566 -1404.249512 -2777.603271     0.000000           0.000000  200.000000      200.000000
1 -1204.249512     0.040039 -1404.249512 -2777.603271     0.000000           0.000000  200.000000      100.000000
2 -1004.250000   399.999512 -1304.249512 -2777.603271     0.000000           0.000000  299.999512      199.999512
3  -290.487305  1013.762207 -1109.249512 -2777.603271   613.762207           0.000000  205.000000      200.000000
4   520.274902  1015.762207 -1104.249512 -2777.603271  1324.524414         613.762207  300.000000      200.000000
5  1238.037109  1017.762207  -904.249512 -2777.603271  2042.286621        1324.524414  100.000000      100.000000
6  2157.799316  1019.762207  -804.249512 -2777.603271  2859.048340        2042.286621  103.000488      103.000488
7  3076.561035  1021.762207  -704.250000 -2777.603271  3580.810547        2859.048340  200.000488      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:44]  --------------------------------------------------------------------------------
[07/18 16:35:44]  Iteration: 160 (0 solution, 159 counterexamples)
[07/18 16:35:49]  Generator returned sat in 2.703845 secs.
[07/18 16:35:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:35:49]  Improved number of small numbers from 78 to 85 out of a max of 89
[07/18 16:35:49]  Verifer returned sat in 0.316305 secs.
[07/18 16:35:50]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1204.249756     0.080566 -1404.249512 -2777.603516     0.000000           0.000000  199.999756      199.999756
1 -1204.249756   199.959473 -1404.249512 -2777.603516     0.000000           0.000000  199.999756       99.999756
2 -1004.249756   399.999756 -1204.249512 -2777.603516     0.000000           0.000000  199.999756      199.999756
3  -488.987305   715.262207 -1204.249512 -2777.603516   515.262207           0.000000  200.000000      100.000000
4   326.774902  1015.762207 -1104.249512 -2777.603516  1231.024414         515.262207  200.000000      100.000000
5  1593.037109  1466.262207  -904.249756 -2777.603516  2397.286621        1231.024414  100.000244      100.000000
6  3409.798706  1916.761841  -804.249756 -2777.603516  4014.048340        2397.286621  200.000122      199.999878
7  5727.060059  2517.261475  -704.250488 -2777.603516  6231.309570        4014.048340  200.000977      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:50]  --------------------------------------------------------------------------------
[07/18 16:35:50]  Iteration: 161 (0 solution, 160 counterexamples)
[07/18 16:35:53]  Generator returned sat in 1.653265 secs.
[07/18 16:35:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:35:53]  Improved gap from 165/16384 to 100
[07/18 16:35:54]  Improved number of small numbers from 38 to 46 out of a max of 90
[07/18 16:35:54]  Verifer returned sat in 0.893945 secs.
[07/18 16:35:54]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1404.208984     0.080322 -1404.249430 -2777.603516     0.000000           0.000000    0.040446        0.040446
1 -1404.208984     0.020264 -1404.249430 -2777.603516     0.000000           0.000000    0.040446      -99.959554
2 -1204.249430   200.000000 -1304.249430 -2777.603516     0.000000           0.000000  100.000000        0.000000
3 -1204.229289   100.020142 -1204.249430 -2777.603516     0.000000           0.000000    0.020142      -99.979858
4  -652.219218   552.030212 -1104.249430 -2777.603516   252.030212           0.000000  200.000000      100.000000
5   149.810994  1002.030212  -950.249430 -2777.603516   954.060425         252.030212  146.000000      100.000000
6  1536.841207  1533.030212  -868.249430 -2777.603516  2241.090637         954.060425  164.000000      100.000000
7  3409.871419  2037.030212  -804.249268 -2777.603516  4014.120605        2241.090637  200.000081      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:55]  --------------------------------------------------------------------------------
[07/18 16:35:55]  Iteration: 162 (0 solution, 161 counterexamples)
[07/18 16:35:58]  Generator returned sat in 1.486753 secs.
[07/18 16:35:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:35:58]  Improved gap from 329/32768 to 100
[07/18 16:35:59]  Improved number of small numbers from 32 to 42 out of a max of 90
[07/18 16:35:59]  Verifer returned sat in 0.829703 secs.
[07/18 16:35:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1368.249512     0.080322 -1468.249430 -2777.603516     0.000000           0.000000   99.999919       99.999919
1 -1368.249512    99.199951 -1468.249430 -2777.603516     0.000000           0.000000   99.999919       -0.000081
2 -1368.229350   100.020081 -1368.249430 -2777.603516     0.000000           0.000000    0.020081      -99.979919
3 -1268.229350   100.020081 -1268.249430 -2777.603516     0.000000           0.000000    0.020081      -99.979919
4  -716.719309   551.530121 -1068.249430 -2777.603516   251.530121           0.000000  100.000000      100.000000
5   334.810811  1151.530121 -1012.249430 -2777.603516  1203.060242         251.530121  144.000000      100.000000
6  1876.340932  1685.530121  -868.249430 -2777.603516  2644.590363        1203.060242  100.000000      100.000000
7  4061.871053  2285.530121  -868.249268 -2777.603516  4730.120361        2644.590363  199.999959      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:35:59]  --------------------------------------------------------------------------------
[07/18 16:35:59]  Iteration: 163 (0 solution, 162 counterexamples)
[07/18 16:36:02]  Generator returned sat in 1.322897 secs.
[07/18 16:36:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:03]  Improved number of small numbers from 39 to 41 out of a max of 89
[07/18 16:36:03]  Verifer returned sat in 0.657947 secs.
[07/18 16:36:03]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1368.249512     0.080322 -1468.249430 -2777.603516     0.000000           0.000000   99.999919       99.999919
1 -1368.249512    99.995117 -1468.249430 -2777.603516     0.000000           0.000000   99.999919       -0.000081
2 -1368.244410   100.005020 -1368.249430 -2777.603516     0.000000           0.000000    0.005020      -99.994980
3 -1268.229350   100.020081 -1268.249430 -2777.603516     0.000000           0.000000    0.020081      -99.979919
4  -717.719309   550.530121 -1068.249430 -2777.603516   250.530121           0.000000  100.000000      100.000000
5   332.810811  1150.530121 -1011.049430 -2777.603516  1201.060242         250.530121  142.800000      100.000000
6  1876.340932  1686.330121  -868.249430 -2777.603516  2644.590363        1201.060242  100.000000      100.000000
7  4062.671053  2286.330121  -868.249268 -2777.603516  4730.120117        2644.590363  200.800203      100.800366
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:36:03]  --------------------------------------------------------------------------------
[07/18 16:36:03]  Iteration: 164 (0 solution, 163 counterexamples)
[07/18 16:36:07]  Generator returned sat in 1.357622 secs.
[07/18 16:36:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:36:08]  Improved number of small numbers from 41 to 41 out of a max of 89
[07/18 16:36:08]  Verifer returned sat in 0.759135 secs.
[07/18 16:36:08]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1368.249512     0.080322 -1468.499430 -2777.603516     0.000000           0.000000  100.249919       99.999919
1 -1368.249512    99.995117 -1468.249430 -2777.603516     0.000000           0.000000   99.999919       -0.000081
2 -1368.244410   100.005020 -1368.249430 -2777.603516     0.000000           0.000000    0.005020      -99.994980
3 -1268.229350   100.020081 -1268.249430 -2777.603516     0.000000           0.000000    0.020081      -99.979919
4  -717.719309   550.530121 -1068.249430 -2777.603516   250.530121           0.000000  100.000000      100.000000
5   332.810811  1150.530121 -1011.049430 -2777.603516  1201.060242         250.530121  142.800000      100.000000
6  1876.340932  1686.330121  -868.249430 -2777.603516  2644.590363        1201.060242  100.000000      100.000000
7  4062.671053  2286.330121  -868.249268 -2777.603516  4730.120117        2644.590363  200.800203      100.800366
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:36:08]  --------------------------------------------------------------------------------
[07/18 16:36:08]  Iteration: 165 (0 solution, 164 counterexamples)
[07/18 16:36:12]  Generator returned sat in 1.882320 secs.
[07/18 16:36:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:36:12]  Improved gap from 329/32768 to 100
[07/18 16:36:12]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/18 16:36:12]  Verifer returned sat in 0.215200 secs.
[07/18 16:36:12]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1768.390137    0.080078 -1768.390137 -2477.463135    0.000000           0.000000    0.000000        0.000000
1 -1668.390137  100.000000 -1768.390137 -2477.463135    0.000000           0.000000  100.000000        0.000000
2 -1668.349854  100.040283 -1668.390137 -2477.463135    0.000000           0.000000    0.040283      -99.959717
3 -1368.349854  300.040283 -1468.390137 -2477.463135    0.040283           0.000000  100.000000      100.000000
4 -1168.309570  300.040283 -1368.390137 -2477.463135  100.080322           0.040283  100.000244      100.000244
5  -968.269531  300.040283 -1268.390137 -2477.463135  200.080322         100.080322  100.040283      100.040283
6  -768.269531  300.040283 -1168.430176 -2477.463135  300.080078         200.080322  100.080566      100.040527
7  -568.309814  300.040283 -1168.390137 -2477.463135  400.080322         300.080078  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:36:12]  --------------------------------------------------------------------------------
[07/18 16:36:12]  Iteration: 166 (0 solution, 165 counterexamples)
[07/18 16:36:15]  Generator returned sat in 1.335042 secs.
[07/18 16:36:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:36:16]  Improved number of small numbers from 64 to 66 out of a max of 89
[07/18 16:36:16]  Verifer returned sat in 0.336762 secs.
[07/18 16:36:16]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1768.390137     0.080078 -1768.390381 -2477.463379     0.000000           0.000000    0.000244        0.000000
1 -1668.350098   100.040283 -1768.390137 -2477.463379     0.000000           0.000000  100.040039        0.040039
2 -1668.349854   100.040283 -1668.390137 -2477.463379     0.000000           0.000000    0.040283      -99.959717
3 -1368.349854   300.040283 -1568.390137 -2477.463379     0.020142           0.000000  200.020142      100.020142
4 -1118.309570   450.060425 -1368.390137 -2477.463379   100.080322           0.020142  150.000244      150.000244
5  -593.219177   675.090637 -1368.390137 -2477.463379   525.130676         100.080322  250.040283      150.040283
6   169.376495  1012.635956 -1268.390137 -2477.463379  1137.766632         525.130676  300.000000      200.000000
7  1388.330429  1518.953934 -1168.390137 -2477.463379  2356.720459        1137.766632  200.000107      100.000107
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:36:16]  --------------------------------------------------------------------------------
[07/18 16:36:16]  Iteration: 167 (0 solution, 166 counterexamples)
[07/18 16:36:25]  Generator returned sat in 7.258078 secs.
[07/18 16:36:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:26]  Improved number of small numbers from 56 to 89 out of a max of 89
[07/18 16:36:26]  Verifer returned sat in 0.202554 secs.
[07/18 16:36:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1293.689209    0.079834 -1293.709229 -2477.463379   0.000000           0.000000    0.020020      -99.979980
1 -1193.689209  100.020020 -1193.709229 -2477.463379   0.000000           0.000000    0.020020      -99.979980
2 -1093.689209  100.020020 -1093.708984 -2477.463379   0.000000           0.000000    0.019775      -99.979980
3  -793.689209  300.019775  -992.749268 -2477.463379   0.020020           0.000000  199.040039      100.000000
4  -793.689209    0.500000  -793.729248 -2477.463379   0.020020           0.020020    0.020020        0.000000
5  -593.219238  200.489990  -793.709229 -2477.463379   0.040039           0.020020  200.449951      100.449951
6  -593.219238    0.500000  -593.709229 -2477.463379   0.040039           0.040039    0.449951        0.449951
7  -393.649170  200.020020  -593.708984 -2477.463379   0.059814           0.040039  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:36:26]  --------------------------------------------------------------------------------
[07/18 16:36:26]  Iteration: 168 (0 solution, 167 counterexamples)
[07/18 16:36:33]  Generator returned sat in 5.399650 secs.
[07/18 16:36:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:33]  Improved gap from 327/16384 to 100
[07/18 16:36:34]  Improved number of small numbers from 45 to 70 out of a max of 90
[07/18 16:36:34]  Verifer returned sat in 0.599090 secs.
[07/18 16:36:34]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2194.489502     0.079834 -2360.862894 -2477.463379     0.000000           0.000000  166.373392      100.040059
1 -2194.489502     0.040039 -2194.529561 -2477.463379     0.000000           0.000000    0.040059        0.040059
2 -2194.489502     0.039795 -2194.529541 -2477.463379     0.000000           0.000000    0.040039      -99.959941
3 -1994.529785   199.999756 -2094.529561 -2477.463379     0.000000           0.000000   99.999775       -0.000225
4 -1694.529561   400.000000 -1994.529561 -2477.463379     0.000000           0.000000  300.000000      200.000000
5 -1694.029561   300.500000 -1894.529541 -2477.463379     0.039795           0.000000  200.460186      100.460205
6 -1143.989746   750.500000 -1754.529561 -2477.463379   350.539917           0.039795  259.999897      199.999897
7  -143.489644  1260.500000 -1694.529541 -2477.463379  1351.039795         350.539917  200.000103      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:36:34]  --------------------------------------------------------------------------------
[07/18 16:36:34]  Iteration: 169 (0 solution, 168 counterexamples)
[07/18 16:36:38]  Generator returned sat in 1.414699 secs.
[07/18 16:36:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:38]  Improved gap from 0 to 100
[07/18 16:36:38]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/18 16:36:38]  Verifer returned sat in 0.253326 secs.
[07/18 16:36:38]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2110.559570     0.07959 -2310.559570 -2477.463379     0.000000           0.000000  200.000000      200.000000
1 -2110.559570     0.02002 -2210.559570 -2477.463379     0.000000           0.000000  100.000000      100.000000
2 -2110.559570     0.02002 -2210.559570 -2477.463379     0.000000           0.000000  100.000000        0.000000
3 -2110.559570     0.02002 -2110.559570 -2477.463379     0.000000           0.000000    0.000000     -100.000000
4 -1810.039551   300.52002 -2004.559570 -2477.463379     0.000000           0.000000  194.520020      100.520020
5 -1394.539551   610.02002 -1910.559570 -2477.463379   316.019775           0.000000  200.000244      100.000244
6  -534.519775  1060.02002 -1810.559570 -2477.463379  1076.039795         316.019775  200.000000      100.000000
7   775.500244  1510.02002 -1710.559326 -2477.463379  2286.059814        1076.039795  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:36:38]  --------------------------------------------------------------------------------
[07/18 16:36:38]  Iteration: 170 (0 solution, 169 counterexamples)
[07/18 16:36:41]  Generator returned sat in 1.110609 secs.
[07/18 16:36:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:42]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/18 16:36:42]  Verifer returned sat in 0.249947 secs.
[07/18 16:36:42]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2110.559570     0.079590 -2310.569580 -2477.463379     0.000000           0.000000  200.010010      200.000000
1 -2110.559570     0.020020 -2210.559814 -2477.463379     0.000000           0.000000  100.000244      100.000000
2 -2110.559570     0.019775 -2110.566243 -2477.463379     0.000000           0.000000    0.006673        0.000000
3 -2110.559570     0.003174 -2110.559570 -2477.463379     0.000000           0.000000    0.000000     -100.000000
4 -1810.039795   300.519775 -2010.559570 -2477.463379     0.000000           0.000000  200.519775      100.519775
5 -1259.279541   751.280029 -1910.559570 -2477.463379   351.280029           0.000000  300.000000      200.000000
6  -507.989502  1051.290039 -1804.739583 -2477.463379  1102.570068         351.280029  194.180013      100.000000
7   807.850505  1510.020020 -1710.559570 -2477.463379  2286.059814        1102.570068  232.350260      132.350260
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:36:42]  --------------------------------------------------------------------------------
[07/18 16:36:42]  Iteration: 171 (0 solution, 170 counterexamples)
[07/18 16:36:46]  Generator returned sat in 1.880954 secs.
[07/18 16:36:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:46]  Improved number of small numbers from 66 to 72 out of a max of 89
[07/18 16:36:46]  Verifer returned sat in 0.382040 secs.
[07/18 16:36:46]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2110.559570     0.079346 -2310.571045 -2477.463379     0.000000           0.000000  200.011475      200.000000
1 -2110.559570     0.019775 -2310.559570 -2477.463379     0.000000           0.000000  200.000000      100.000000
2 -2110.559570     0.019531 -2110.569458 -2477.463379     0.000000           0.000000    0.009888        0.000000
3 -2110.559570     0.005127 -2110.559570 -2477.463379     0.000000           0.000000    0.000000     -100.000000
4 -1810.039795   300.519775 -1910.559570 -2477.463379     0.000000           0.000000  100.519775      100.519775
5 -1159.799683   750.759888 -1910.559570 -2477.463379   450.759888           0.000000  300.000000      200.000000
6  -409.024963  1050.774719 -1760.559570 -2477.463379  1102.570068         450.759888  248.964539      198.964539
7   917.785217  1575.774719 -1710.559570 -2477.463379  2428.344727        1102.570068  200.000061      100.000061
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:36:47]  --------------------------------------------------------------------------------
[07/18 16:36:47]  Iteration: 172 (0 solution, 171 counterexamples)
[07/18 16:36:50]  Generator returned sat in 1.129911 secs.
[07/18 16:36:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:50]  Improved number of small numbers from 72 to 87 out of a max of 89
[07/18 16:36:50]  Verifer returned sat in 0.332195 secs.
[07/18 16:36:50]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2110.559570     0.079346 -2310.566162 -2477.463623     0.000000           0.000000  200.006592      200.000000
1 -2110.559570     0.019775 -2210.559814 -2477.463623     0.000000           0.000000  100.000244      100.000000
2 -2110.559570     0.019531 -2110.569336 -2477.463623     0.000000           0.000000    0.009766        0.000000
3 -2110.559570     0.004944 -2110.559570 -2477.463379     0.000000           0.000000    0.000000      -99.999756
4 -1810.039795   300.519775 -2010.559814 -2477.463379     0.000000           0.000000  200.520020      100.520020
5 -1109.020264   901.539551 -1910.559570 -2477.463379   501.539551           0.000000  299.999756      200.000000
6  -207.465820  1201.554199 -1810.559570 -2477.463379  1403.093994         501.539551  199.999756      100.000000
7  1244.088623  1651.554199 -1710.559570 -2477.463379  2654.648438        1403.093994  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:36:50]  --------------------------------------------------------------------------------
[07/18 16:36:50]  Iteration: 173 (0 solution, 172 counterexamples)
[07/18 16:36:54]  Generator returned sat in 1.499927 secs.
[07/18 16:36:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:54]  Improved gap from 1356379/73728 to 100
[07/18 16:36:54]  Improved number of small numbers from 67 to 90 out of a max of 90
[07/18 16:36:54]  Verifer returned sat in 0.224195 secs.
[07/18 16:36:54]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2150.559570     0.079346  -2350.55957 -2437.463623     0.000000           0.000000  200.000000      200.000000
1 -2150.559570     0.020020  -2250.55957 -2437.463623     0.000000           0.000000  100.000000      100.000000
2 -2150.559570     0.019775  -2250.55957 -2437.463623     0.000000           0.000000  100.000000        0.000000
3 -2150.559570     0.019775  -2150.55957 -2437.463623     0.000000           0.000000    0.000000     -100.000000
4 -1850.020020   300.539551  -1950.55957 -2437.463623     0.000000           0.000000  100.539551      100.539551
5  -898.980469  1051.579102  -1910.55957 -2437.463623   751.579346           0.000000  259.999756      199.999756
6  -123.190674  1035.789551  -1810.55957 -2437.463623  1527.368896         751.579346  160.000000      100.000000
7   744.704102  1027.894775  -1750.55957 -2437.463623  2295.263672        1527.368896  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:36:55]  --------------------------------------------------------------------------------
[07/18 16:36:55]  Iteration: 174 (0 solution, 173 counterexamples)
[07/18 16:36:58]  Generator returned sat in 1.772063 secs.
[07/18 16:36:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:36:59]  Improved gap from 0 to 100
[07/18 16:36:59]  Improved number of small numbers from 33 to 39 out of a max of 90
[07/18 16:36:59]  Verifer returned sat in 0.704751 secs.
[07/18 16:36:59]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1273.225342    0.079346 -1273.265060 -2437.463623    0.000000           0.000000    0.039719        0.039719
1 -1173.225388  100.039673 -1173.265060 -2437.463623    0.000000           0.000000    0.039673        0.039673
2  -873.265060  300.000000 -1073.265060 -2437.463623    0.000000           0.000000  200.000000      200.000000
3  -873.225388  200.039673 -1073.265060 -2437.463623    0.039673           0.000000  200.000000      100.000000
4  -673.205551  400.019836  -973.265060 -2437.463623  100.059509           0.039673  200.000000      100.000000
5  -373.195633  500.009918  -873.265060 -2437.463623  200.069427         100.059509  300.000000      200.000000
6  -123.190674  550.004959  -773.265060 -2437.463623  450.074387         200.069427  200.000000      100.000000
7   401.811806  725.002480  -673.264893 -2437.463623  875.076660         450.074387  200.000038      100.000206
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:36:59]  --------------------------------------------------------------------------------
[07/18 16:36:59]  Iteration: 175 (0 solution, 174 counterexamples)
[07/18 16:37:05]  Generator returned sat in 3.224539 secs.
[07/18 16:37:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:37:05]  Improved number of small numbers from 41 to 55 out of a max of 89
[07/18 16:37:05]  Verifer returned sat in 0.559111 secs.
[07/18 16:37:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1273.225342    0.079346 -1273.265137 -2437.463623    0.000000           0.000000    0.039795        0.039719
1 -1173.225342  100.039795 -1173.265137 -2437.463623    0.000000           0.000000    0.039795        0.039719
2  -873.265137  300.000000 -1073.265060 -2437.463623    0.000000           0.000000  199.999924      199.999924
3  -673.185715  400.079346  -973.265060 -2437.463623  100.079346           0.000000  200.000000      200.000000
4  -673.146042  200.039673  -873.284912 -2437.463623  100.119019         100.079346  100.019852      100.000000
5  -673.146042  100.019836  -793.545497 -2437.463623  100.119019         100.119019   20.280436        0.000000
6  -273.347132  420.079346  -673.265060 -2437.463623  299.917928         100.119019  100.000000      100.000000
7  -163.307460  210.039673  -673.264893 -2437.463623  299.957764         299.917928  209.999669      109.999837
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:37:06]  --------------------------------------------------------------------------------
[07/18 16:37:06]  Iteration: 176 (0 solution, 175 counterexamples)
[07/18 16:37:11]  Generator returned sat in 3.248853 secs.
[07/18 16:37:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:37:12]  Improved number of small numbers from 40 to 61 out of a max of 89
[07/18 16:37:12]  Verifer returned sat in 0.541289 secs.
[07/18 16:37:12]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1473.225586     0.079102 -1473.264893 -2337.463623     0.000000           0.000000    0.039307      -99.960526
1 -1073.265137   399.999756 -1273.265137 -2337.463623     0.000000           0.000000  200.000000      199.999924
2  -973.265137   300.000000 -1173.265060 -2337.463623     0.000000           0.000000  199.999924      199.999924
3  -973.225388   200.039673 -1073.265060 -2337.463623     0.039673           0.000000  100.000000      100.000000
4  -673.146042   400.079346 -1073.265060 -2337.463623   200.119019           0.039673  200.000000      100.000000
5   -72.987350   800.158691  -973.265060 -2337.463623   600.277710         200.119019  300.000000      200.000000
6  1227.330032  1600.317383  -773.265137 -2337.463623  1800.595215         600.277710  199.999954      199.999878
7  4227.964844  3200.634766  -673.265137 -2337.463623  4701.229980        1800.595215  200.000000      199.999924
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:37:12]  --------------------------------------------------------------------------------
[07/18 16:37:12]  Iteration: 177 (0 solution, 176 counterexamples)
[07/18 16:37:21]  Generator returned sat in 6.713253 secs.
[07/18 16:37:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:37:21]  Improved gap from 81/4096 to 100
[07/18 16:37:22]  Improved number of small numbers from 43 to 51 out of a max of 90
[07/18 16:37:22]  Verifer returned sat in 0.740287 secs.
[07/18 16:37:22]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1801.794434     0.078857 -2001.794357 -2337.463623     0.000000           0.000000  199.999924      199.999924
1 -1801.794434     0.039551 -1901.794357 -2337.463623     0.000000           0.000000   99.999924       99.999924
2 -1601.794357   300.000000 -1801.794357 -2337.463623     0.000000           0.000000  200.000000      200.000000
3 -1601.754807   200.039551 -1701.794357 -2337.463623     0.039551           0.000000  100.000000      100.000000
4 -1250.695480   451.059326 -1701.794357 -2337.463623   251.098877           0.039551  200.000000      100.000000
5  -673.106491   777.588989 -1571.794357 -2337.463623   728.687866         251.098877  170.000000      100.000000
6   439.276993  1282.383484 -1457.794357 -2337.463623  1741.071350         728.687866  156.000000      100.000000
7  2329.852219  2046.575226 -1401.794189 -2337.463623  3431.646729        1741.071350  299.999680      199.999847
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:37:22]  --------------------------------------------------------------------------------
[07/18 16:37:22]  Iteration: 178 (0 solution, 177 counterexamples)
[07/18 16:37:25]  Generator returned sat in 1.504989 secs.
[07/18 16:37:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:37:26]  Improved number of small numbers from 43 to 45 out of a max of 89
[07/18 16:37:26]  Verifer returned sat in 0.633914 secs.
[07/18 16:37:26]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1801.794678     0.078857 -2001.794357 -2337.463623     0.000000           0.000000  199.999680      199.999680
1 -1801.794678     0.039307 -1901.794357 -2337.463623     0.000000           0.000000   99.999680       99.999680
2 -1601.794357   300.000000 -1801.794357 -2337.463623     0.000000           0.000000  200.000000      200.000000
3 -1601.754929   200.039429 -1702.793991 -2337.463623     0.039429           0.000000  100.999634      100.000000
4 -1251.695236   451.059326 -1701.794357 -2337.463623   249.599121           0.039429  200.500000      100.500000
5  -674.106247   778.088989 -1571.794357 -2337.463623   727.437866         249.599121  170.250244      100.250244
6   439.276993  1283.633484 -1457.794357 -2337.463623  1738.196686         727.437866  158.874664      102.874664
7  2329.852371  2049.450043 -1401.794189 -2337.463623  3431.646729        1738.196686  299.999832      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:37:26]  --------------------------------------------------------------------------------
[07/18 16:37:26]  Iteration: 179 (0 solution, 178 counterexamples)
[07/18 16:37:34]  Generator returned sat in 6.017825 secs.
[07/18 16:37:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:37:35]  Improved number of small numbers from 40 to 89 out of a max of 89
[07/18 16:37:35]  Verifer returned sat in 0.237676 secs.
[07/18 16:37:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1802.314209    0.078857 -2002.314209 -2337.463623     0.000000           0.000000  200.000000      200.000000
1 -1802.314209    0.019775 -1902.314209 -2337.463623     0.000000           0.000000  100.000000      100.000000
2 -1602.314209  300.000000 -1902.314209 -2337.463623     0.000000           0.000000  300.000000      200.000000
3 -1601.755127  300.559082 -1703.313721 -2337.463623     0.039307           0.000000  101.519287      100.519775
4 -1252.215088  451.059326 -1702.314209 -2337.463623   250.099121           0.039307  200.000000      100.000000
5  -900.155762  552.059326 -1571.794189 -2337.463623   502.158203         250.099121  169.480225      100.000244
6  -351.316650  718.319336 -1402.314209 -2337.463623   850.997559         502.158203  200.000000      200.000000
7   318.502441  869.819092 -1402.314209 -2337.463623  1520.816162         850.997559  200.000488      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:37:35]  --------------------------------------------------------------------------------
[07/18 16:37:35]  Iteration: 180 (0 solution, 179 counterexamples)
[07/18 16:37:39]  Generator returned sat in 1.990492 secs.
[07/18 16:37:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:37:40]  Improved number of small numbers from 46 to 89 out of a max of 89
[07/18 16:37:40]  Verifer returned sat in 0.283084 secs.
[07/18 16:37:40]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -852.326660     0.078613 -1152.326416 -2337.463623    0.000000           0.000000  299.999756      200.000000
1  -852.326660     0.019775 -1052.326660 -2337.463623    0.000000           0.000000  200.000000      100.000000
2  -752.326660   300.000000  -950.326660 -2337.463623    0.000000           0.000000  198.000000      100.000000
3  -652.321533   298.005127  -752.989990 -2337.463623    0.005127           0.000000  100.663330      100.000000
4  -552.316650   200.668213  -652.326660 -2337.463623    0.010010           0.005127  100.000000      100.000000
5  -451.316650   201.000000  -552.326660 -2337.463623    1.010010           0.010010  100.000000      100.000000
6  -351.316650   200.000000  -452.326660 -2337.463623    1.010010           1.010010  100.000000      100.000000
7   551.510010  1002.826660  -452.326660 -2337.463623  803.836426           1.010010  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:37:40]  --------------------------------------------------------------------------------
[07/18 16:37:40]  Iteration: 181 (0 solution, 180 counterexamples)
[07/18 16:37:43]  Generator returned sat in 1.312757 secs.
[07/18 16:37:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:37:44]  Improved gap from 401569/4096 to 100
[07/18 16:37:44]  Improved number of small numbers from 46 to 90 out of a max of 90
[07/18 16:37:44]  Verifer returned sat in 0.224309 secs.
[07/18 16:37:44]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1402.272461    0.078613 -1402.311768 -1987.478516    0.000000           0.000000    0.039307        0.039307
1 -1402.272461    0.019775 -1402.311768 -1987.478516    0.000000           0.000000    0.039307      -99.960693
2 -1002.312012  399.999756 -1202.311768 -1987.478516    0.000000           0.000000  199.999756      199.999756
3 -1002.312012    0.019531 -1102.311768 -1987.478516    0.000000           0.000000   99.999756       99.999756
4  -501.272705  601.039062 -1002.311768 -1987.478516  301.039062           0.000000  200.000000      200.000000
5  -500.272705  201.000000 -1002.311768 -1987.478516  302.039062         301.039062  200.000000      100.000000
6  -500.272705  101.000000  -802.311768 -1987.478516  302.039062         302.039062    0.000000        0.000000
7   302.727295  803.000000  -802.311768 -1987.478516  805.039307         302.039062  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:37:44]  --------------------------------------------------------------------------------
[07/18 16:37:44]  Iteration: 182 (0 solution, 181 counterexamples)
[07/18 16:37:57]  Generator returned sat in 11.351227 secs.
[07/18 16:37:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:37:58]  Improved gap from 81/16384 to 100
[07/18 16:37:58]  Improved number of small numbers from 66 to 73 out of a max of 90
[07/18 16:37:58]  Verifer returned sat in 0.368217 secs.
[07/18 16:37:58]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1302.312012     0.078613 -1402.312012 -1987.47876     0.000000           0.000000  100.000000       99.999756
1 -1302.312012     0.019531 -1402.311768 -1987.47876     0.000000           0.000000   99.999756       -0.000244
2 -1102.311768   300.000000 -1202.311768 -1987.47876     0.000000           0.000000  100.000000      100.000000
3 -1102.311768    75.002472 -1202.311768 -1987.47876     0.000000           0.000000  100.000000        0.000000
4 -1052.306824   150.004944 -1102.311768 -1987.47876     0.000000           0.000000   50.004944      -49.995056
5  -802.301880   300.009888 -1002.306824 -1987.47876     0.009888           0.000000  199.995056      100.000000
6  -300.777161   701.519775  -802.311768 -1987.47876   301.534668           0.009888  199.999939      199.999939
7  1002.242676  1503.019775  -802.311768 -1987.47876  1504.554443         301.534668  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:37:58]  --------------------------------------------------------------------------------
[07/18 16:37:58]  Iteration: 183 (0 solution, 182 counterexamples)
[07/18 16:38:02]  Generator returned sat in 1.391922 secs.
[07/18 16:38:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:38:02]  Improved gap from 161/8192 to 100
[07/18 16:38:02]  Improved number of small numbers from 78 to 84 out of a max of 90
[07/18 16:38:02]  Verifer returned sat in 0.309563 secs.
[07/18 16:38:02]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1302.312256     0.078613 -1402.312012 -1987.47876     0.000000           0.000000   99.999756       99.999756
1 -1302.312256     0.019775 -1302.331787 -1987.47876     0.000000           0.000000    0.019531       -0.000244
2 -1002.312256   300.019531 -1302.312012 -1987.47876     0.000000           0.000000  299.999756      199.999756
3 -1002.312256    50.009827 -1102.312012 -1987.47876     0.000000           0.000000   99.999756       99.999756
4 -1002.292358   100.019653 -1002.312256 -1987.47876     0.000000           0.000000    0.019897        0.019653
5  -802.272949   200.039307  -904.272705 -1987.47876     0.039062           0.000000  101.960693      100.000000
6    93.884277   998.117920  -802.312012 -1987.47876   696.196533           0.039062  199.999756      199.999756
7  1494.002441  1600.117920  -802.312012 -1987.47876  1996.314453         696.196533  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:38:02]  --------------------------------------------------------------------------------
[07/18 16:38:02]  Iteration: 184 (0 solution, 183 counterexamples)
[07/18 16:38:06]  Generator returned sat in 1.374542 secs.
[07/18 16:38:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:38:06]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:38:06]  Verifer returned sat in 0.134404 secs.
[07/18 16:38:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2512.312256     0.078613 -2512.312256 -1987.47876     0.000000           0.000000    0.000000             0.0
1 -2212.312256   300.000000 -2512.312256 -1987.47876     0.000000           0.000000  300.000000           200.0
2 -2212.312256     0.039307 -2412.312256 -1987.47876     0.000000           0.000000  200.000000           100.0
3 -2212.312256   133.385742 -2212.351562 -1987.47876     0.000000           0.000000    0.039307             0.0
4 -2012.272949   200.078613 -2212.312256 -1987.47876     0.039307           0.000000  200.000000           100.0
5 -1410.194336   802.078613 -2012.312256 -1987.47876   502.117920           0.039307  100.000000           100.0
6    93.884277  1604.078613 -1912.312256 -1987.47876  1806.196533         502.117920  200.000000           200.0
7  2100.041504  2206.157227 -1912.312256 -1987.47876  3812.353760        1806.196533  200.000000           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:06]  --------------------------------------------------------------------------------
[07/18 16:38:06]  Iteration: 185 (0 solution, 184 counterexamples)
[07/18 16:38:13]  Generator returned sat in 4.588555 secs.
[07/18 16:38:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:38:13]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 16:38:13]  Verifer returned sat in 0.161734 secs.
[07/18 16:38:13]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -2512.312256     0.078369 -2512.312500 -1987.47876      0.000000           0.000000    0.000244        0.000000
1  -2212.312500   300.000000 -2412.312256 -1987.47876      0.000000           0.000000  199.999756      199.999756
2  -2212.312500     0.019531 -2345.717529 -1987.47876      0.000000           0.000000  133.405029       99.999756
3  -2212.312500   133.385742 -2212.351807 -1987.47876      0.000000           0.000000    0.039307       -0.000244
4  -1712.312500   500.039307 -2212.312256 -1987.47876    200.000000           0.000000  299.999756      199.999756
5   -610.233643  1402.078613 -2012.312256 -1987.47876   1302.078613         200.000000  100.000000      100.000000
6   2762.734131  3472.967773 -1912.312256 -1987.47876   4575.046387        1302.078613  100.000000      100.000000
7  10210.748779  7548.014648 -1912.312256 -1987.47876  11823.061279        4575.046387  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:14]  --------------------------------------------------------------------------------
[07/18 16:38:14]  Iteration: 186 (0 solution, 185 counterexamples)
[07/18 16:38:17]  Generator returned sat in 1.499038 secs.
[07/18 16:38:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:38:18]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:38:18]  Verifer returned sat in 0.133052 secs.
[07/18 16:38:18]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -2512.312256     0.078369 -2512.312500 -1987.47876      0.000000           0.000000    0.000244        0.000000
1  -2212.312500   300.000000 -2412.312256 -1987.47876      0.000000           0.000000  199.999756      199.999756
2  -2212.312500     0.019531 -2345.717529 -1987.47876      0.000000           0.000000  133.405029       99.999756
3  -2212.312500   132.052409 -2212.351807 -1987.47876      0.000000           0.000000    0.039307       -0.000244
4  -1712.312500   500.039307 -2212.312256 -1987.47876    200.000000           0.000000  299.999756      199.999756
5   -610.233643  1402.078613 -2012.312256 -1987.47876   1302.078613         200.000000  100.000000      100.000000
6   2762.734131  3472.967773 -1912.312256 -1987.47876   4575.046387        1302.078613  100.000000      100.000000
7  10210.748779  7548.014648 -1912.312256 -1987.47876  11823.061279        4575.046387  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:18]  --------------------------------------------------------------------------------
[07/18 16:38:18]  Iteration: 187 (0 solution, 186 counterexamples)
[07/18 16:38:22]  Generator returned sat in 1.543047 secs.
[07/18 16:38:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:38:22]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:38:22]  Verifer returned sat in 0.111461 secs.
[07/18 16:38:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -2512.312500     0.078125 -2512.312500 -1987.47876      0.000000           0.000000    0.000000       -0.000244
1  -2212.312744   299.999756 -2412.312500 -1987.47876      0.000000           0.000000  199.999756      199.999512
2  -2212.312744     0.019287 -2345.717773 -1987.47876      0.000000           0.000000  133.405029       99.999512
3  -2212.312744   133.052246 -2212.351807 -1987.47876      0.000000           0.000000    0.039062       -0.000488
4  -1712.312744   500.039062 -2212.312256 -1987.47876    200.000000           0.000000  299.999512      199.999512
5   -610.233643  1402.078613 -2012.312500 -1987.47876   1302.078613         200.000000  100.000244      100.000000
6   2762.733887  3472.967773 -1912.312256 -1987.47876   4575.046143        1302.078613  100.000000      100.000000
7  10210.748535  7548.014648 -1912.312256 -1987.47876  11823.061279        4575.046143  299.999512      199.999512
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:22]  --------------------------------------------------------------------------------
[07/18 16:38:22]  Iteration: 188 (0 solution, 187 counterexamples)
[07/18 16:38:26]  Generator returned sat in 1.594412 secs.
[07/18 16:38:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:38:26]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:38:26]  Verifer returned sat in 0.135047 secs.
[07/18 16:38:26]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -2512.312744     0.077881 -2512.312744 -1987.47876      0.000000           0.000000    0.000000       -0.000488
1  -2212.312988   299.999756 -2412.312500 -1987.47876      0.000000           0.000000  199.999512      199.999268
2  -2212.312988     0.019043 -2345.717773 -1987.47876      0.000000           0.000000  133.404785       99.999268
3  -2212.312988   133.052246 -2212.352051 -1987.47876      0.000000           0.000000    0.039062       -0.000732
4  -1711.812988   500.539062 -2212.312256 -1987.47876    200.499268           0.000000  300.000000      200.000000
5   -608.734375  1403.078613 -2012.312500 -1987.47876   1300.078613         200.499268  103.499512      103.499268
6   2762.733887  3474.967773 -1912.312500 -1987.47876   4575.046143        1300.078613  100.000244      100.000000
7  10214.748291  7552.014648 -1912.312256 -1987.47876  11827.060547        4575.046143  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:27]  --------------------------------------------------------------------------------
[07/18 16:38:27]  Iteration: 189 (0 solution, 188 counterexamples)
[07/18 16:38:30]  Generator returned sat in 1.583309 secs.
[07/18 16:38:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:38:31]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:38:31]  Verifer returned sat in 0.161672 secs.
[07/18 16:38:31]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -2512.312988     0.077881 -2512.312988 -1987.47876      0.000000           0.000000    0.000000       -0.000488
1  -2212.313232   299.999756 -2412.312500 -1987.47876      0.000000           0.000000  199.999268      199.999268
2  -2212.313232     0.018799 -2345.718018 -1987.47876      0.000000           0.000000  133.404785       99.999268
3  -2212.313232   133.052246 -2212.352295 -1987.47876      0.000000           0.000000    0.039062       -0.000732
4  -1711.313232   501.039062 -2212.312256 -1987.47876    200.999268           0.000000  299.999756      200.000000
5   -607.234375  1404.078613 -2012.312744 -1987.47876   1298.078613         200.999268  106.999756      106.999512
6   2762.733643  3476.967773 -1912.312744 -1987.47876   4575.046143        1298.078613  100.000244      100.000000
7  10218.748047  7556.014648 -1912.312256 -1987.47876  11831.060547        4575.046143  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:31]  --------------------------------------------------------------------------------
[07/18 16:38:31]  Iteration: 190 (0 solution, 189 counterexamples)
[07/18 16:38:42]  Generator returned sat in 9.017847 secs.
[07/18 16:38:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:38:43]  Improved number of small numbers from 66 to 83 out of a max of 89
[07/18 16:38:43]  Verifer returned sat in 0.309192 secs.
[07/18 16:38:43]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2312.312988     0.077637 -2612.312744 -1987.479004     0.000000           0.000000  299.999756      199.999756
1 -2212.312988   399.999756 -2512.312744 -1987.479004     0.000000           0.000000  299.999756      199.999756
2 -2212.312988     0.018799 -2412.312744 -1987.479004     0.000000           0.000000  199.999756       99.999756
3 -2212.312988   199.990601 -2212.636678 -1987.479004     0.000000           0.000000    0.323690       -0.000244
4 -1912.303345   300.333333 -2212.312744 -1987.479004     0.009521           0.000000  299.999878      199.999878
5 -1760.303223   452.000000 -2012.312744 -1987.479004    52.009521           0.009521  200.000000      200.000000
6 -1280.803223   679.500000 -1912.312988 -1987.479004   431.509521          52.009521  200.000244      200.000000
7  -460.053467  1020.750000 -1912.312500 -1987.479004  1152.259277         431.509521  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:43]  --------------------------------------------------------------------------------
[07/18 16:38:43]  Iteration: 191 (0 solution, 190 counterexamples)
[07/18 16:38:47]  Generator returned sat in 2.217889 secs.
[07/18 16:38:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:38:48]  Improved number of small numbers from 40 to 54 out of a max of 89
[07/18 16:38:48]  Verifer returned sat in 0.531250 secs.
[07/18 16:38:48]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2329.839844     0.077393 -2529.839844 -1987.479004     0.000000           0.000000  200.000000      100.000049
1 -2329.839844     0.019287 -2329.840088 -1987.479004     0.000000           0.000000    0.000244        0.000049
2 -2229.820801   100.019287 -2229.839893 -1987.479004     0.000000           0.000000    0.019092        0.019092
3 -2029.820605   200.019287 -2229.839893 -1987.479004     0.019287           0.000000  200.000000      100.000000
4 -1928.291675   301.528931 -2129.839893 -1987.479004     0.038574           0.019287  201.509644      101.509644
5 -1676.007922   453.793396 -2029.839893 -1987.479004    53.831970           0.038574  300.000000      200.000000
6 -1293.817828   682.190094 -1829.839893 -1987.479004   436.022064          53.831970  100.000000      100.000000
7  -369.032687  1024.785141 -1829.839844 -1987.479004  1160.807373         436.022064  299.999783      199.999832
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:38:48]  --------------------------------------------------------------------------------
[07/18 16:38:48]  Iteration: 192 (0 solution, 191 counterexamples)
[07/18 16:39:00]  Generator returned sat in 9.689492 secs.
[07/18 16:39:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:39:00]  Improved gap from 79/2048 to 100
[07/18 16:39:01]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/18 16:39:01]  Verifer returned sat in 0.208331 secs.
[07/18 16:39:01]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -2530.892822      0.077148 -2630.931152 -1987.479248      0.000000           0.000000  100.038330      100.038330
1  -2530.892822      0.038574 -2530.931152 -1987.479248      0.000000           0.000000    0.038330        0.038330
2  -2530.892578      0.038574 -2530.931152 -1987.479248      0.000000           0.000000    0.038574      -99.961426
3  -2230.892578    300.038574 -2430.931152 -1987.479248      0.038574           0.000000  200.000000      100.000000
4  -1428.815430   1002.077148 -2243.931152 -1987.479248    602.115723           0.038574  213.000000      200.000000
5    938.338867   2580.154297 -2230.931152 -1987.479248   2969.269775         602.115723  200.000244      100.000244
6   6500.647217   5762.308594 -2032.931152 -1987.479248   8331.578369        2969.269775  202.000000      200.000000
7  18621.264404  12322.617188 -2030.931152 -1987.479248  20352.195801        8331.578369  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:01]  --------------------------------------------------------------------------------
[07/18 16:39:01]  Iteration: 193 (0 solution, 192 counterexamples)
[07/18 16:39:05]  Generator returned sat in 1.623238 secs.
[07/18 16:39:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:39:05]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:39:05]  Verifer returned sat in 0.131112 secs.
[07/18 16:39:05]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2530.892822     0.077148 -2730.931152 -1987.479248     0.000000           0.000000  200.038330      100.038330
1 -2530.892822     0.038574 -2630.931152 -1987.479248     0.000000           0.000000  100.038330        0.038330
2 -2530.892578   100.038574 -2530.931152 -1987.479248     0.000000           0.000000    0.038574      -99.961426
3 -2230.892578   300.038574 -2430.931152 -1987.479248     0.038574           0.000000  200.000000      100.000000
4 -1528.854004   902.038574 -2243.931152 -1987.479248   502.077148           0.038574  213.000000      200.000000
5   -63.815430  1678.038574 -2194.931152 -1987.479248  1967.115479         502.077148  164.000244      100.000244
6  2124.222900  2352.038574 -2032.931152 -1987.479248  3955.154053        1967.115479  202.000000      200.000000
7  5072.261475  3150.038574 -2030.931152 -1987.479248  6903.192627        3955.154053  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:05]  --------------------------------------------------------------------------------
[07/18 16:39:05]  Iteration: 194 (0 solution, 193 counterexamples)
[07/18 16:39:09]  Generator returned sat in 1.508747 secs.
[07/18 16:39:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:39:10]  Improved number of small numbers from 62 to 64 out of a max of 89
[07/18 16:39:10]  Verifer returned sat in 0.498197 secs.
[07/18 16:39:10]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2530.931152     0.077148 -2730.931396 -1987.479248     0.000000           0.000000  200.000244      200.000000
1 -2530.931152     0.038330 -2630.931152 -1987.479248     0.000000           0.000000  100.000000      100.000000
2 -2330.931152   300.000000 -2530.931152 -1987.479248     0.000000           0.000000  200.000000      200.000000
3 -2330.892822   200.038330 -2530.931152 -1987.479248     0.038330           0.000000  200.000000      100.000000
4 -1828.834839   702.057983 -2430.931152 -1987.479248   402.096313           0.038330  200.000000      100.000000
5  -573.747864  1455.086975 -2251.931152 -1987.479248  1557.183289         402.096313  121.000000      100.000000
6  2047.882599  2742.630463 -2230.931152 -1987.479248  4078.813751        1557.183289  200.000000      100.000000
7  6563.828293  4715.945694 -2030.931396 -1987.479248  8394.759521        4078.813751  200.000168      199.999924
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:10]  --------------------------------------------------------------------------------
[07/18 16:39:10]  Iteration: 195 (0 solution, 194 counterexamples)
[07/18 16:39:28]  Generator returned sat in 15.986118 secs.
[07/18 16:39:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:39:28]  Improved gap from 0 to 100
[07/18 16:39:29]  Improved number of small numbers from 64 to 90 out of a max of 90
[07/18 16:39:29]  Verifer returned sat in 0.296240 secs.
[07/18 16:39:29]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3030.892822     0.077148 -3030.931152 -1687.517822     0.000000           0.000000    0.038330        0.000000
1 -3030.892822     0.019287 -3030.892822 -1687.517822     0.000000           0.000000    0.000000     -100.000000
2 -2630.893066   399.999756 -2830.893066 -1687.517822     0.000000           0.000000  200.000000      199.999756
3 -2630.873779   200.019287 -2730.892822 -1687.517822     0.019043           0.000000  100.000000      100.000000
4 -1929.277832   801.595947 -2730.892822 -1687.517822   601.614746           0.019043  200.000244      100.000244
5  -726.182129  1403.095947 -2630.854736 -1687.517822  1704.710693         601.614746  199.961914      100.000000
6   878.528564  1804.672607 -2530.892822 -1687.517822  3109.421631        1704.710693  299.999756      199.999756
7  2784.701416  2206.172607 -2430.892822 -1687.517822  5015.593994        3109.421631  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:29]  --------------------------------------------------------------------------------
[07/18 16:39:29]  Iteration: 196 (0 solution, 195 counterexamples)
[07/18 16:39:33]  Generator returned sat in 1.861848 secs.
[07/18 16:39:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:39:33]  Improved gap from 79/32768 to 100
[07/18 16:39:34]  Improved number of small numbers from 38 to 49 out of a max of 90
[07/18 16:39:34]  Verifer returned sat in 0.870311 secs.
[07/18 16:39:34]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3330.868896     0.077148 -3530.868713 -1687.517822     0.000000           0.000000  199.999817      199.999817
1 -3330.868896     0.019043 -3430.868713 -1687.517822     0.000000           0.000000   99.999817       99.999817
2 -3330.863892   100.004822 -3330.873535 -1687.517822     0.000000           0.000000    0.009644        0.004822
3 -3330.863892     0.004822 -3330.868713 -1687.517822     0.000000           0.000000    0.004822      -99.995178
4 -3029.363892   301.504822 -3230.868713 -1687.517822     1.504822           0.000000  200.000000      100.000000
5 -2526.859070   702.504822 -3130.868713 -1687.517822   404.009521           1.504822  200.000122      100.000122
6 -1623.344727  1103.514465 -3030.868713 -1687.517822  1107.524109         404.009521  299.999878      199.999878
7  -218.830139  1704.514465 -2930.868652 -1687.517822  2412.038574        1107.524109  299.999939      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:34]  --------------------------------------------------------------------------------
[07/18 16:39:34]  Iteration: 197 (0 solution, 196 counterexamples)
[07/18 16:39:39]  Generator returned sat in 2.659005 secs.
[07/18 16:39:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:39:39]  Improved gap from 0 to 100
[07/18 16:39:40]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:39:40]  Verifer returned sat in 0.193922 secs.
[07/18 16:39:40]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -3430.868652     0.077148 -3530.868652 -1687.517822     0.00000            0.00000  100.00000       100.00000
1 -3430.868652     0.038330 -3530.868652 -1687.517822     0.00000            0.00000  100.00000         0.00000
2 -3430.868652    99.961670 -3430.868652 -1687.517822     0.00000            0.00000    0.00000      -100.00000
3 -3330.830322   100.038330 -3330.868652 -1687.517822     0.00000            0.00000    0.03833       -99.96167
4 -2930.330322   400.538330 -3230.868652 -1687.517822   100.53833            0.00000  200.00000       100.00000
5 -2129.291992  1001.038330 -3030.868652 -1687.517822   701.57666          100.53833  200.00000       200.00000
6  -527.753662  1801.538330 -2940.868652 -1687.517822  2303.11499          701.57666  110.00000       100.00000
7  1944.284668  2582.038330 -2930.868652 -1687.517822  4675.15332         2303.11499  200.00000       100.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:40]  --------------------------------------------------------------------------------
[07/18 16:39:40]  Iteration: 198 (0 solution, 197 counterexamples)
[07/18 16:39:56]  Generator returned sat in 13.959195 secs.
[07/18 16:39:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:39:56]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:39:56]  Verifer returned sat in 0.160414 secs.
[07/18 16:39:56]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3530.868652     0.076904 -3630.868652 -1587.518066     0.000000           0.000000  100.000000       99.999756
1 -3530.868652     0.038086 -3556.003174 -1587.517822     0.000000           0.000000   25.134521        0.000000
2 -3530.868652    25.096191 -3530.868652 -1587.517822     0.000000           0.000000    0.000000     -100.000000
3 -3330.830566   200.038086 -3430.868652 -1587.517822     0.000000           0.000000  100.038086        0.038086
4 -2930.330566   500.538086 -3230.868652 -1587.517822   200.538086           0.000000  100.000000      100.000000
5 -2129.292480   901.038086 -3130.868652 -1587.517822   801.576416         200.538086  199.999756      199.999756
6 -1078.273193  1251.019043 -3061.868652 -1587.517822  1852.595459         801.576416  131.000000      100.000000
7   154.736328  1364.009521 -3030.868652 -1587.517822  2985.604736        1852.595459  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:39:57]  --------------------------------------------------------------------------------
[07/18 16:39:57]  Iteration: 199 (0 solution, 198 counterexamples)
[07/18 16:40:01]  Generator returned sat in 1.769970 secs.
[07/18 16:40:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:40:01]  Improved gap from 102951/4096 to 100
[07/18 16:40:01]  Improved number of small numbers from 82 to 84 out of a max of 90
[07/18 16:40:01]  Verifer returned sat in 0.262301 secs.
[07/18 16:40:01]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3530.868652     0.076904 -3630.868652 -1587.518066     0.000000           0.000000  100.000000      100.000000
1 -3530.868652     0.037842 -3630.868652 -1587.518066     0.000000           0.000000  100.000000        0.000000
2 -3530.868652    99.980957 -3530.868652 -1587.518066     0.000000           0.000000    0.000000     -100.000000
3 -3330.830566   200.038086 -3430.868652 -1587.518066     0.000000           0.000000  100.038086        0.038086
4 -2930.330566   500.538086 -3230.868652 -1587.518066   200.537842           0.000000  100.000244      100.000244
5 -1979.061768  1051.269043 -3206.150716 -1587.518066   951.807129         200.537842  275.281820      199.999756
6 -1078.273193  1176.070394 -3061.868652 -1587.518066  1852.595459         951.807129  131.000000      100.000000
7   117.762004  1327.035197 -3030.868652 -1587.518066  2948.630615        1852.595459  200.000041      100.000041
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:40:01]  --------------------------------------------------------------------------------
[07/18 16:40:01]  Iteration: 200 (0 solution, 199 counterexamples)
[07/18 16:40:06]  Generator returned sat in 1.803221 secs.
[07/18 16:40:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:40:06]  Improved gap from 0 to 100
[07/18 16:40:06]  Improved number of small numbers from 51 to 57 out of a max of 90
[07/18 16:40:06]  Verifer returned sat in 0.590410 secs.
[07/18 16:40:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3630.737793     0.076660 -3630.868896 -1587.518066     0.000000           0.000000    0.131104        0.131104
1 -3630.737793     0.037842 -3630.747050 -1587.518066     0.000000           0.000000    0.009257      -99.868896
2 -3430.868896   199.878153 -3430.868896 -1587.518066     0.000000           0.000000    0.000000        0.000000
3 -3430.859436     0.009460 -3430.868896 -1587.518066     0.000000           0.000000    0.009460      -99.990540
4 -3130.359436   300.509460 -3330.868896 -1587.518066     0.009460           0.000000  200.500000      100.500000
5 -2579.348399   751.511037 -3130.868896 -1587.518066   351.520498           0.009460  200.000000      200.000000
6 -1802.092880   977.255519 -3030.868896 -1587.518066  1128.776016         351.520498  100.000000      100.000000
7  -611.965121  1290.127759 -3030.868896 -1587.518066  2218.903564        1128.776016  200.000211      100.000211
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:40:07]  --------------------------------------------------------------------------------
[07/18 16:40:07]  Iteration: 201 (0 solution, 200 counterexamples)
[07/18 16:40:11]  Generator returned sat in 2.290467 secs.
[07/18 16:40:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:40:11]  Improved gap from 0 to 100
[07/18 16:40:12]  Improved number of small numbers from 46 to 60 out of a max of 90
[07/18 16:40:12]  Verifer returned sat in 0.676550 secs.
[07/18 16:40:12]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3530.859619     0.076416 -3630.859436 -1587.527527     0.000000           0.000000   99.999817       99.999817
1 -3530.859619     0.019043 -3630.859436 -1587.527527     0.000000           0.000000   99.999817       -0.000183
2 -3430.859436   200.000000 -3530.859375 -1587.527527     0.000000           0.000000   99.999939        0.000000
3 -3430.859436     0.019043 -3430.859436 -1587.527527     0.000000           0.000000    0.000000     -100.000000
4 -3130.340393   300.519043 -3230.859436 -1587.527527     0.000000           0.000000  100.519043      100.519043
5 -2329.840393   901.019043 -3230.859375 -1587.527527   701.019043           0.000000  199.999939      100.000000
6  -576.811768  1953.028564 -3030.859436 -1587.527527  2354.047607         701.019043  100.000061      100.000061
7  3054.231018  3731.042847 -3030.859375 -1587.527527  5785.090576        2354.047607  299.999817      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:40:12]  --------------------------------------------------------------------------------
[07/18 16:40:12]  Iteration: 202 (0 solution, 201 counterexamples)
[07/18 16:40:32]  Generator returned sat in 17.502270 secs.
[07/18 16:40:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:40:32]  Improved gap from 411687/8192 to 100
[07/18 16:40:33]  Improved number of small numbers from 27 to 90 out of a max of 90
[07/18 16:40:33]  Verifer returned sat in 0.272806 secs.
[07/18 16:40:33]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3629.349609     0.076172 -3629.387695 -1587.527344     0.000000           0.000000    0.038086        0.038086
1 -3629.349609     0.018799 -3629.387695 -1587.527344     0.000000           0.000000    0.038086      -99.961914
2 -3529.368896   100.018799 -3529.387695 -1587.527344     0.000000           0.000000    0.018799      -99.981201
3 -3229.368896   300.018799 -3429.387695 -1587.527344     0.018799           0.000000  200.000000      100.000000
4 -3029.368896   400.000000 -3329.378174 -1587.527344     0.018799           0.018799  299.990479      200.000000
5 -1929.340332  1400.019043 -3229.387695 -1587.527344  1100.047363           0.018799  200.000000      100.000000
6 -1529.340332   600.000000 -3029.397217 -1587.527344  1400.047363        1100.047363  100.009521      100.000000
7  -829.368896   799.980957 -3029.387695 -1587.527344  2000.018799        1400.047363  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:40:33]  --------------------------------------------------------------------------------
[07/18 16:40:33]  Iteration: 203 (0 solution, 202 counterexamples)
[07/18 16:40:38]  Generator returned sat in 2.590343 secs.
[07/18 16:40:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:40:38]  Improved number of small numbers from 33 to 89 out of a max of 89
[07/18 16:40:38]  Verifer returned sat in 0.234925 secs.
[07/18 16:40:38]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3129.318115     0.075928 -3279.317871 -1787.508545     0.000000           0.000000  149.999756      100.018799
1 -3129.318115     0.009277 -3129.336914 -1787.508545     0.000000           0.000000    0.018799        0.018799
2 -3129.317871     0.019043 -3129.336914 -1687.527588     0.000000           0.000000    0.019043        0.000000
3 -3129.317871     0.009277 -3129.317871 -1587.527588     0.000000           0.000000    0.000000        0.000000
4 -2829.308594   300.009277 -3129.317871 -1587.527588     0.009521           0.000000  299.999756      199.999756
5 -2529.251709   600.056641 -2929.317871 -1587.527588   300.066162           0.009521  100.000000      100.000000
6 -1029.100342  1600.151367 -2829.317871 -1587.527588  1700.217529         300.066162  100.000000      100.000000
7  2671.202393  3800.302734 -2829.317871 -1587.527588  5300.520264        1700.217529  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:40:39]  --------------------------------------------------------------------------------
[07/18 16:40:39]  Iteration: 204 (0 solution, 203 counterexamples)
[07/18 16:40:45]  Generator returned sat in 4.500120 secs.
[07/18 16:40:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:40:46]  Improved gap from 309/8192 to 100
[07/18 16:40:46]  Improved number of small numbers from 48 to 90 out of a max of 90
[07/18 16:40:46]  Verifer returned sat in 0.265349 secs.
[07/18 16:40:46]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   721.108154    0.075684   571.107910 -1787.508545     0.000000           0.000000  150.000244      150.000244
1   721.108154    0.018799   671.107910 -1787.508545     0.000000           0.000000   50.000244       50.000244
2   771.107910  100.000000   671.107910 -1787.508545     0.000000           0.000000  100.000000        0.000000
3   771.107910    0.019043   771.107910 -1787.508545     0.000000           0.000000    0.000000     -100.000000
4  1171.126953  400.019043   971.107910 -1787.508545   100.019043           0.000000  100.000000      100.000000
5  1671.126953  600.000000  1071.107910 -1787.508545   400.019043         100.019043  200.000000      200.000000
6  2271.126953  800.000000  1171.107910 -1787.508545   900.019043         400.019043  200.000000      200.000000
7  2871.126953  800.000000  1171.108154 -1787.508545  1500.018799         900.019043  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:40:46]  --------------------------------------------------------------------------------
[07/18 16:40:46]  Iteration: 205 (0 solution, 204 counterexamples)
[07/18 16:40:51]  Generator returned sat in 2.431319 secs.
[07/18 16:40:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:40:51]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:40:51]  Verifer returned sat in 0.111658 secs.
[07/18 16:40:51]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   721.108154    0.075684   571.098389 -1787.508545     0.000000           0.000000  150.009766      150.000244
1   721.108154    0.018799   671.107910 -1787.508545     0.000000           0.000000   50.000244       50.000244
2   771.107910  100.000000   671.107910 -1787.508545     0.000000           0.000000  100.000000        0.000000
3   771.107910    0.019043   771.107910 -1787.508545     0.000000           0.000000    0.000000     -100.000000
4  1171.126953  400.019043   971.107910 -1787.508545   100.019043           0.000000  100.000000      100.000000
5  1671.126953  600.000000  1071.107910 -1787.508545   400.019043         100.019043  200.000000      200.000000
6  2271.126953  800.000000  1171.107910 -1787.508545   900.019043         400.019043  200.000000      200.000000
7  2871.126953  800.000000  1171.108154 -1787.508545  1500.018799         900.019043  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:40:51]  --------------------------------------------------------------------------------
[07/18 16:40:51]  Iteration: 206 (0 solution, 205 counterexamples)
[07/18 16:40:58]  Generator returned sat in 4.470527 secs.
[07/18 16:40:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:40:59]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:40:59]  Verifer returned sat in 0.138255 secs.
[07/18 16:40:59]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   721.107910    0.075684   571.098389 -1787.508545     0.000000           0.000000  150.009521      150.000000
1   721.107910    0.018799   671.107910 -1787.508545     0.000000           0.000000   50.000000       50.000000
2   771.107910  100.000000   671.107910 -1787.508545     0.000000           0.000000  100.000000        0.000000
3   771.107910   98.990479   771.107910 -1787.508545     0.000000           0.000000    0.000000     -100.000000
4  1221.607910  450.500000   971.107910 -1787.508545   102.018799           0.000000  148.481201      148.481201
5  1674.126709  601.000000  1068.107910 -1787.508545   403.018799         102.018799  203.000000      200.000000
6  2271.126709  800.000000  1168.107910 -1787.508545   900.018799         403.018799  203.000000      200.000000
7  3067.126709  999.000000  1171.108154 -1787.508545  1696.018799         900.018799  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:40:59]  --------------------------------------------------------------------------------
[07/18 16:40:59]  Iteration: 207 (0 solution, 206 counterexamples)
[07/18 16:41:03]  Generator returned sat in 1.593469 secs.
[07/18 16:41:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:03]  Improved number of small numbers from 75 to 77 out of a max of 89
[07/18 16:41:03]  Verifer returned sat in 0.428351 secs.
[07/18 16:41:03]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   671.116943     0.075439   471.107910 -1787.508545     0.000000           0.000000  200.009033      100.009033
1   671.116943     0.018311   671.107910 -1787.508545     0.000000           0.000000    0.009033        0.009033
2   771.107910   100.000000   671.107910 -1787.508545     0.000000           0.000000  100.000000        0.000000
3   771.107910    99.990723   771.107910 -1787.508545     0.000000           0.000000    0.000000     -100.000000
4  1121.103271   349.995361   912.319043 -1787.508545    49.995361           0.000000  158.788867      100.000000
5  1674.126465   711.812061  1068.107910 -1787.508545   403.018799          49.995361  202.999756      199.999756
6  2778.438770  1307.312061  1120.107910 -1787.508545  1407.330859         403.018799  251.000000      200.000000
7  4358.250830  1830.812061  1171.108154 -1787.508545  2887.143066        1407.330859  299.999609      199.999854
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:41:04]  --------------------------------------------------------------------------------
[07/18 16:41:04]  Iteration: 208 (0 solution, 207 counterexamples)
[07/18 16:41:11]  Generator returned sat in 5.219086 secs.
[07/18 16:41:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:41:12]  Improved gap from 0 to 100
[07/18 16:41:12]  Improved number of small numbers from 59 to 61 out of a max of 90
[07/18 16:41:12]  Verifer returned sat in 0.474871 secs.
[07/18 16:41:12]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   771.107666     0.075439    571.10791 -1787.508545     0.000000           0.000000  199.999756      199.999756
1   771.107666     0.018311    671.10791 -1787.508545     0.000000           0.000000   99.999756       99.999756
2   771.107910   100.000000    771.10791 -1787.508545     0.000000           0.000000    0.000000        0.000000
3   771.112488     0.004578    771.10791 -1787.508545     0.000000           0.000000    0.004578      -99.995422
4  1072.610199   301.502289    871.10791 -1787.508545     1.502289           0.000000  200.000000      100.000000
5  1525.363632   652.753433   1069.10791 -1787.508545   254.255722           1.502289  202.000000      200.000000
6  2600.993782  1277.630150   1148.10791 -1787.508545  1329.885872         254.255722  123.000000      100.000000
7  4771.939007  2293.945225   1171.10791 -1787.508545  3400.831055        1329.885872  200.000042      100.000042
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:41:12]  --------------------------------------------------------------------------------
[07/18 16:41:12]  Iteration: 209 (0 solution, 208 counterexamples)
[07/18 16:41:20]  Generator returned sat in 4.847930 secs.
[07/18 16:41:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:20]  Improved gap from 0 to 100
[07/18 16:41:20]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/18 16:41:20]  Verifer returned sat in 0.230115 secs.
[07/18 16:41:20]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   925.344727    0.075195   825.344971 -1787.508545    0.000000           0.000000   99.999756       99.999756
1   925.344727    0.018799   825.344971 -1787.508545    0.000000           0.000000   99.999756       -0.000244
2  1025.344971  200.000000  1025.344971 -1787.508545    0.000000           0.000000    0.000000        0.000000
3  1325.363525  300.018555  1025.344971 -1787.508545    0.018555           0.000000  300.000000      200.000000
4  1425.363525  400.000000  1125.344971 -1787.508545    0.037354           0.018555  299.981201      199.981201
5  1725.382324  600.000000  1296.344971 -1787.508545  200.037598           0.037354  228.999756      199.999756
6  2038.382568  542.000000  1335.344971 -1787.508545  513.037598         200.037598  190.000000      100.000000
7  2468.382568  620.000000  1425.344971 -1787.508545  843.037598         513.037598  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:41:20]  --------------------------------------------------------------------------------
[07/18 16:41:20]  Iteration: 210 (0 solution, 209 counterexamples)
[07/18 16:41:24]  Generator returned sat in 1.799310 secs.
[07/18 16:41:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:25]  Improved gap from 19/4096 to 100
[07/18 16:41:25]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:41:25]  Verifer returned sat in 0.175662 secs.
[07/18 16:41:25]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   925.344971     0.075195   825.344971 -1787.508545     0.000000           0.000000  100.000000      100.000000
1   925.344971     0.037598   925.307373 -1787.508545     0.000000           0.000000    0.037598        0.000000
2   980.344971    55.037598   980.344971 -1787.508545     0.000000           0.000000    0.000000      -45.000000
3  1325.382568   345.037598  1025.344971 -1787.508545     0.037598           0.000000  300.000000      200.000000
4  1770.420166   745.037598  1125.344971 -1787.508545   445.075195           0.037598  200.000000      100.000000
5  2715.532959  1145.112793  1225.344971 -1787.508545  1190.188232         445.075195  299.999756      199.999756
6  4050.645996  1635.112793  1335.344971 -1787.508545  2525.301025        1190.188232  190.000000      100.000000
7  6115.758789  2255.112793  1425.344971 -1787.508545  4490.413818        2525.301025  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:41:25]  --------------------------------------------------------------------------------
[07/18 16:41:25]  Iteration: 211 (0 solution, 210 counterexamples)
[07/18 16:41:29]  Generator returned sat in 1.872355 secs.
[07/18 16:41:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:30]  Improved number of small numbers from 62 to 64 out of a max of 89
[07/18 16:41:30]  Verifer returned sat in 0.474937 secs.
[07/18 16:41:30]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0    925.363281     0.075195   825.344727 -1787.508789     0.000000           0.000000  100.018555      100.018311
1    925.363281     0.037598   925.344727 -1787.508789     0.000000           0.000000    0.018555        0.018311
2   1025.344727   100.000000  1025.344727 -1787.508545     0.000000           0.000000    0.000000        0.000000
3   1225.363525   200.018799  1125.344727 -1787.508545     0.018799           0.000000  100.000000      100.000000
4   2025.391724   900.028198  1125.344727 -1787.508545   600.046997           0.018799  300.000000      200.000000
5   3475.434021  1750.042297  1248.344727 -1787.508545  1950.089294         600.046997  277.000000      200.000000
6   6269.497467  3071.063446  1335.344727 -1787.508545  4644.152740        1950.089294  290.000000      200.000000
7  11006.092636  5026.595169  1425.344971 -1787.508545  9280.748047        4644.152740  299.999619      199.999863
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:41:30]  --------------------------------------------------------------------------------
[07/18 16:41:30]  Iteration: 212 (0 solution, 211 counterexamples)
[07/18 16:41:36]  Generator returned sat in 3.430793 secs.
[07/18 16:41:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:37]  Improved gap from 77/16384 to 100
[07/18 16:41:37]  Improved number of small numbers from 70 to 72 out of a max of 90
[07/18 16:41:37]  Verifer returned sat in 0.408111 secs.
[07/18 16:41:37]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   925.307373     0.075195    725.38208 -1787.508789     0.000000           0.000000  199.925293       99.925293
1   925.307373     0.037109    925.27002 -1787.508789     0.000000           0.000000    0.037354       -0.074707
2  1025.382080   100.112061    925.38208 -1787.508789     0.000000           0.000000  100.000000        0.000000
3  1075.419434   150.037354   1025.38208 -1787.508789     0.000000           0.000000   50.037354      -49.962646
4  1325.419434   300.037354   1225.38208 -1787.508789     0.037354           0.000000  100.000000      100.000000
5  1975.662231   750.242798   1225.38208 -1787.508789   550.280151           0.037354  200.000000      100.000000
6  2750.783630   975.121399   1378.38208 -1787.508789  1225.401550         550.280151  147.000000      100.000000
7  3797.344330  1193.560699   1425.38208 -1787.508789  2171.962158        1225.401550  200.000092      100.000092
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:41:37]  --------------------------------------------------------------------------------
[07/18 16:41:37]  Iteration: 213 (0 solution, 212 counterexamples)
[07/18 16:41:42]  Generator returned sat in 1.963929 secs.
[07/18 16:41:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:42]  Improved gap from 153/4096 to 100
[07/18 16:41:42]  Improved number of small numbers from 37 to 90 out of a max of 90
[07/18 16:41:42]  Verifer returned sat in 0.337638 secs.
[07/18 16:41:42]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   975.414795     0.074951   875.414795 -1787.508789     0.000000           0.000000  100.000000           100.0
1   975.414795     0.018799   875.414795 -1787.508789     0.000000           0.000000  100.000000             0.0
2  1275.414795   400.000000  1075.414795 -1787.508789     0.000000           0.000000  200.000000           200.0
3  1275.414795     0.018555  1075.414795 -1787.508789     0.000000           0.000000  200.000000           100.0
4  1275.414795   100.018555  1208.748291 -1787.508789     0.000000           0.000000   66.666504             0.0
5  1475.433594   266.685303  1275.414795 -1787.508789     0.018799           0.000000  200.000000           100.0
6  2208.804199   933.370605  1375.414795 -1787.508789   533.389404           0.018799  300.000000           200.0
7  4375.545410  2466.741211  1475.415039 -1787.508789  2700.130615         533.389404  199.999756           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:41:42]  --------------------------------------------------------------------------------
[07/18 16:41:42]  Iteration: 214 (0 solution, 213 counterexamples)
[07/18 16:41:48]  Generator returned sat in 2.947615 secs.
[07/18 16:41:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:48]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:41:48]  Verifer returned sat in 0.109175 secs.
[07/18 16:41:48]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   975.414795     0.074951   875.414795 -1787.508789     0.000000           0.000000  100.000000           100.0
1   975.414795     0.018799   875.414795 -1787.508789     0.000000           0.000000  100.000000             0.0
2  1275.414795   400.000000  1075.414795 -1787.508789     0.000000           0.000000  200.000000           200.0
3  1275.414795     0.009277  1075.414795 -1787.508789     0.000000           0.000000  200.000000           100.0
4  1275.414795   100.018555  1208.748291 -1787.508789     0.000000           0.000000   66.666504             0.0
5  1575.452148   366.703857  1275.414795 -1787.508789   100.037354           0.000000  200.000000           100.0
6  2508.859863  1133.407715  1375.414795 -1787.508789   833.445068         100.037354  300.000000           200.0
7  5075.675293  2866.815430  1475.415039 -1787.508789  3300.260498         833.445068  299.999756           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:41:48]  --------------------------------------------------------------------------------
[07/18 16:41:48]  Iteration: 215 (0 solution, 214 counterexamples)
[07/18 16:41:53]  Generator returned sat in 2.004338 secs.
[07/18 16:41:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:41:53]  Improved number of small numbers from 69 to 71 out of a max of 89
[07/18 16:41:53]  Verifer returned sat in 0.349352 secs.
[07/18 16:41:53]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   975.418945    0.074951   875.414551 -1787.508789    0.000000           0.000000  100.004395      100.004395
1   975.418945    0.018555   975.414551 -1787.508789    0.000000           0.000000    0.004395        0.004395
2  1275.414307  299.999756  1075.414551 -1787.508789    0.000000           0.000000  199.999756      199.999756
3  1275.414307    0.004639  1075.414551 -1787.508789    0.000000           0.000000  199.999756       99.999756
4  1275.414307  100.009277  1275.409912 -1787.508789    0.000000           0.000000    0.004395       -0.000244
5  1625.426147  350.016235  1275.414551 -1787.508789  150.011597           0.000000  200.000000      100.000000
6  2000.434265  575.008118  1375.414551 -1787.508789  325.019714         150.011597  300.000000      200.000000
7  2587.938324  887.504059  1475.414551 -1787.508789  812.523926         325.019714  299.999847      199.999847
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:41:54]  --------------------------------------------------------------------------------
[07/18 16:41:54]  Iteration: 216 (0 solution, 215 counterexamples)
[07/18 16:42:01]  Generator returned sat in 4.850085 secs.
[07/18 16:42:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:01]  Improved gap from 459/16384 to 100
[07/18 16:42:02]  Improved number of small numbers from 31 to 90 out of a max of 90
[07/18 16:42:02]  Verifer returned sat in 0.316115 secs.
[07/18 16:42:02]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   455.666748    0.074707   455.629150 -2684.772705     0.000000           0.000000    0.037598        0.000244
1   455.666748    0.018799   455.666748 -2684.772705     0.000000           0.000000    0.000000      -99.999756
2   755.666504  299.999756   555.666504 -2684.772705     0.000000           0.000000  200.000000      100.000000
3   855.685303  300.018799   693.666504 -2684.772705     0.018799           0.000000  162.000000      100.000000
4  1171.260010  477.574707   789.000000 -2684.772705   115.593506           0.018799  266.666504      200.000000
5  1572.760010  668.166504   955.666504 -2684.772705   517.093506         115.593506  100.000000      100.000000
6  2274.260010  801.500000  1055.666504 -2684.772705  1118.593506         517.093506  100.000000      100.000000
7  2899.760010  725.500000  1055.666504 -2684.772705  1544.093506        1118.593506  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:02]  --------------------------------------------------------------------------------
[07/18 16:42:02]  Iteration: 217 (0 solution, 216 counterexamples)
[07/18 16:42:07]  Generator returned sat in 2.187869 secs.
[07/18 16:42:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:07]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:42:07]  Verifer returned sat in 0.150945 secs.
[07/18 16:42:07]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   455.666748    0.074463   455.629150 -2684.772949     0.000000           0.000000    0.037598        0.000244
1   455.666748    0.018799   455.666748 -2684.772949     0.000000           0.000000    0.000000      -99.999756
2   755.666260  299.999512   555.666504 -2684.772949     0.000000           0.000000  199.999756       99.999756
3   856.185059  300.518555   693.666504 -2684.772949     0.518555           0.000000  162.000000      100.000000
4  1171.259766  477.074707   789.333252 -2684.772949   115.593506           0.518555  266.333008      199.999756
5  1573.259766  668.333008   955.666504 -2684.772949   517.593262         115.593506  100.000000      100.000000
6  2274.259766  801.000000  1055.666504 -2684.772949  1118.593262         517.593262  100.000000      100.000000
7  2899.259766  725.000000  1055.666504 -2684.772949  1543.593506        1118.593262  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:07]  --------------------------------------------------------------------------------
[07/18 16:42:07]  Iteration: 218 (0 solution, 217 counterexamples)
[07/18 16:42:12]  Generator returned sat in 2.550766 secs.
[07/18 16:42:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:13]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 16:42:13]  Verifer returned sat in 0.138780 secs.
[07/18 16:42:13]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   455.666504    0.074463   455.379150 -2684.773193     0.000000           0.000000    0.287354        0.000000
1   455.666504    0.018555   455.666504 -2684.773193     0.000000           0.000000    0.000000     -100.000000
2   755.666260  299.999756   555.666504 -2684.773193     0.000000           0.000000  199.999756       99.999756
3   856.185059  300.518555   693.666504 -2684.773193     0.518555           0.000000  162.000000      100.000000
4  1171.259766  477.074707   789.666504 -2684.773193   115.593262           0.518555  266.000000      200.000000
5  1573.759766  668.500000   955.666504 -2684.773193   518.093018         115.593262  100.000244      100.000244
6  2274.259521  800.500000  1055.666504 -2684.773193  1118.593018         518.093018  100.000000      100.000000
7  2898.759521  724.500000  1055.666504 -2684.773193  1543.593506        1118.593018  299.499512      199.499512
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:13]  --------------------------------------------------------------------------------
[07/18 16:42:13]  Iteration: 219 (0 solution, 218 counterexamples)
[07/18 16:42:19]  Generator returned sat in 3.768753 secs.
[07/18 16:42:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:19]  Improved gap from 0 to 100
[07/18 16:42:20]  Improved number of small numbers from 54 to 58 out of a max of 90
[07/18 16:42:20]  Verifer returned sat in 0.668624 secs.
[07/18 16:42:20]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   555.666504    0.074463   455.666504 -2684.773193     0.000000           0.000000  100.000000      100.000000
1   555.666504    0.037109   555.666504 -2684.773193     0.000000           0.000000    0.000000        0.000000
2   855.666260  299.999756   655.666504 -2684.773193     0.000000           0.000000  199.999756      199.999756
3   855.703735  200.037231   755.666504 -2684.773193     0.037231           0.000000  100.000000      100.000000
4  1456.222351  700.518616   855.666504 -2684.773193   400.555847           0.037231  200.000000      200.000000
5  2206.981659  950.759308   855.666504 -2684.773193  1051.315155         400.555847  300.000000      200.000000
6  2782.861313  875.879654   977.666504 -2684.773193  1527.194809        1051.315155  278.000000      200.000000
7  3387.301140  882.439827  1055.666504 -2684.773193  2131.634521        1527.194809  200.000114      100.000114
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:20]  --------------------------------------------------------------------------------
[07/18 16:42:20]  Iteration: 220 (0 solution, 219 counterexamples)
[07/18 16:42:25]  Generator returned sat in 2.382299 secs.
[07/18 16:42:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:26]  Improved gap from 0 to 100
[07/18 16:42:26]  Improved number of small numbers from 33 to 39 out of a max of 90
[07/18 16:42:26]  Verifer returned sat in 0.747259 secs.
[07/18 16:42:26]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   1256.240723     0.074219  1256.203735 -2684.773193      0.000000           0.000000    0.036987        0.036987
1   1256.240723     0.018799  1256.203735 -2684.773193      0.000000           0.000000    0.036987      -99.963013
2   1456.222351   200.018616  1456.203735 -2684.773193      0.000000           0.000000    0.018616        0.018616
3   1656.222351   200.018616  1461.203735 -2684.773193      0.018616           0.000000  195.000000      100.000000
4   2171.750275   710.527924  1656.203735 -2684.773193    415.546539           0.018616  100.000000      100.000000
5   3938.042160  1866.291885  1756.203735 -2684.773193   2081.838425         415.546539  100.000000      100.000000
6   7237.979988  3399.937828  1856.203735 -2684.773193   5181.776253        2081.838425  200.000000      200.000000
7  12928.386730  5890.406742  1856.203857 -2684.773193  10872.182861        5181.776253  200.000011      100.000134
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:27]  --------------------------------------------------------------------------------
[07/18 16:42:27]  Iteration: 221 (0 solution, 220 counterexamples)
[07/18 16:42:33]  Generator returned sat in 3.815104 secs.
[07/18 16:42:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:34]  Improved number of small numbers from 47 to 89 out of a max of 89
[07/18 16:42:34]  Verifer returned sat in 0.271147 secs.
[07/18 16:42:34]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   1256.240967      0.073975  1256.203857 -2684.773193      0.000000           0.000000    0.037109        0.037109
1   1256.240967      0.018555  1256.203857 -2684.773193      0.000000           0.000000    0.037109      -99.962891
2   1456.222412    200.018555  1456.203613 -2684.773193      0.000000           0.000000    0.018799        0.018555
3   1656.222168    200.018555  1457.203857 -2684.773193      0.018311           0.000000  199.000000      100.000000
4   2259.759277    802.537109  1652.203857 -2684.773193    415.546631           0.018311  192.008789      188.008789
5   4465.324707   2397.574219  1756.203613 -2684.773193   2609.120850         415.546631  100.000244      100.000000
6   9760.972900   5395.648438  1756.203857 -2684.773193   7704.769043        2609.120850  300.000000      200.000000
7  20850.769775  11389.796875  1856.203857 -2684.773193  18694.566162        7704.769043  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:34]  --------------------------------------------------------------------------------
[07/18 16:42:34]  Iteration: 222 (0 solution, 221 counterexamples)
[07/18 16:42:39]  Generator returned sat in 2.318013 secs.
[07/18 16:42:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:39]  Improved number of small numbers from 50 to 89 out of a max of 89
[07/18 16:42:39]  Verifer returned sat in 0.237767 secs.
[07/18 16:42:39]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1256.240723     0.073730  1256.203857 -2684.773438     0.000000           0.000000    0.036865        0.036865
1  1256.240723     0.018555  1256.203857 -2684.773438     0.000000           0.000000    0.036865      -99.963135
2  1456.222168   200.018311  1456.203857 -2684.773438     0.000000           0.000000    0.018311        0.018311
3  1656.222412   200.018555  1556.203857 -2684.773438     0.018311           0.000000  100.000244      100.000244
4  2356.740723   800.518555  1656.203857 -2684.773438   500.536865           0.018311  200.000000      200.000000
5  3757.759277  1601.018555  1656.203857 -2684.773438  1801.555420         500.536865  300.000000      200.000000
6  5459.277832  2001.518555  1795.203857 -2684.773438  3403.073975        1801.555420  261.000000      200.000000
7  7678.296387  2480.018555  1856.203857 -2684.773438  5622.092285        3403.073975  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:42:40]  --------------------------------------------------------------------------------
[07/18 16:42:40]  Iteration: 223 (0 solution, 222 counterexamples)
[07/18 16:42:48]  Generator returned sat in 5.522451 secs.
[07/18 16:42:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:48]  Improved gap from 0 to 32.8125
[07/18 16:42:48]  Improved number of small numbers from 82 to 86 out of a max of 90
[07/18 16:42:48]  Verifer returned sat in 0.330866 secs.
[07/18 16:42:48]  Counter example: 
[93m   arrival_0,t   cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1587.637939   0.073486  1480.157471 -2684.773438        0.0                0.0  107.480469      100.036865
1  1587.637939   0.036621  1587.601074 -2684.773438        0.0                0.0    0.036865        0.036865
2  1620.413574  32.812500  1587.601074 -2617.585938        0.0                0.0   32.812500        0.000000
3  1620.450439  32.849365  1620.413818 -2550.398682        0.0                0.0    0.036621      -32.775879
4  1690.541992  70.128174  1656.203613 -2487.714355        0.0                0.0   34.338379        0.000000
5  1690.541992  34.301270  1690.541992 -2420.526855        0.0                0.0    0.000000      -32.812500
6  1742.012451  51.470459  1723.354492 -2354.339111        0.0                0.0   18.657959      -15.154297
7  1774.824829  51.470337  1757.166748 -2354.339111        0.0                0.0   17.658081      -82.341919
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:42:49]  --------------------------------------------------------------------------------
[07/18 16:42:49]  Iteration: 224 (0 solution, 223 counterexamples)
[07/18 16:42:55]  Generator returned sat in 3.490538 secs.
[07/18 16:42:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:42:55]  Improved gap from 301/16384 to 100
[07/18 16:42:56]  Improved number of small numbers from 43 to 88 out of a max of 90
[07/18 16:42:56]  Verifer returned sat in 0.674117 secs.
[07/18 16:42:56]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1417.153564     0.073242  1317.153320 -2684.773438     0.000000           0.000000  100.000244      100.000244
1  1417.153564     0.018311  1417.153320 -2684.773438     0.000000           0.000000    0.000244        0.000244
2  1717.153320   300.000000  1517.153320 -2684.773438     0.000000           0.000000  200.000000      200.000000
3  1717.153320     0.018311  1517.153564 -2684.773438     0.000000           0.000000  199.999756      100.000000
4  1717.153320   100.036743  1656.153320 -2684.773438     0.000000           0.000000   61.000000        0.000000
5  1975.726807   319.573486  1717.153564 -2684.773438     0.018555           0.000000  258.554688      158.554932
6  2356.819092   639.646973  1917.153320 -2684.773438   339.665527           0.018555  100.000244      100.000244
7  3536.612793  1279.793945  1917.153320 -2684.773438  1419.459229         339.665527  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:42:56]  --------------------------------------------------------------------------------
[07/18 16:42:56]  Iteration: 225 (0 solution, 224 counterexamples)
[07/18 16:43:06]  Generator returned sat in 6.703457 secs.
[07/18 16:43:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:43:06]  Improved number of small numbers from 70 to 76 out of a max of 89
[07/18 16:43:06]  Verifer returned sat in 0.349626 secs.
[07/18 16:43:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1417.157959     0.072998  1317.153320 -2684.773682     0.000000           0.000000  100.004639      100.004395
1  1417.157959     0.018311  1417.153076 -2684.773682     0.000000           0.000000    0.004883        0.004395
2  1717.153076   300.000000  1517.153320 -2684.773682     0.000000           0.000000  199.999756      199.999512
3  1717.153076     0.004578  1517.153564 -2684.773682     0.000000           0.000000  199.999512       99.999512
4  1717.153076   100.009277  1656.189697 -2684.773438     0.000000           0.000000   60.963379       -0.000244
5  1975.726562   319.536865  1717.153320 -2684.773438     0.004578           0.000000  258.568665      158.568665
6  2396.963196   679.805298  1917.153320 -2684.773438   339.665527           0.004578  140.144348      140.144348
7  3677.026550  1420.207703  1917.153320 -2684.773438  1559.872803         339.665527  200.000427      100.000427
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:43:07]  --------------------------------------------------------------------------------
[07/18 16:43:07]  Iteration: 226 (0 solution, 225 counterexamples)
[07/18 16:43:25]  Generator returned sat in 15.481797 secs.
[07/18 16:43:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:43:25]  Improved gap from 75/8192 to 100
[07/18 16:43:26]  Improved number of small numbers from 32 to 38 out of a max of 90
[07/18 16:43:26]  Verifer returned sat in 0.729130 secs.
[07/18 16:43:26]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1675.711426     0.072754  1525.701263 -3184.758015     0.000000           0.000000  150.010163      100.006730
1  1675.711426     0.018311  1675.704696 -3184.758015     0.000000           0.000000    0.006730        0.006730
2  1675.711426     0.002441  1675.709274 -3184.758015     0.000000           0.000000    0.002152      -99.993270
3  1775.706985    99.997711  1775.704696 -3184.758015     0.000000           0.000000    0.002289      -99.997711
4  2075.706985   300.002289  1875.704696 -3184.758015     0.002289           0.000000  200.000000      100.000000
5  2525.710418   650.003433  2075.704696 -3184.758015   250.005722           0.002289  200.000000      200.000000
6  3700.710990  1375.000572  2075.704696 -3184.758015  1325.006294         250.005722  300.000000      200.000000
7  5763.211849  2362.500858  2175.704834 -3184.758015  3387.507080        1325.006294  199.999935      100.000072
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:43:26]  --------------------------------------------------------------------------------
[07/18 16:43:26]  Iteration: 227 (0 solution, 226 counterexamples)
[07/18 16:43:32]  Generator returned sat in 3.714266 secs.
[07/18 16:43:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:43:33]  Improved number of small numbers from 37 to 39 out of a max of 89
[07/18 16:43:33]  Verifer returned sat in 0.668272 secs.
[07/18 16:43:33]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1675.711426     0.072510  1526.201263 -3184.758057     0.000000           0.000000  149.510163      100.006688
1  1675.711426     0.018311  1675.704696 -3184.758057     0.000000           0.000000    0.006730        0.006688
2  1675.711426     0.002197  1675.709274 -3184.758015     0.000000           0.000000    0.002152      -99.993270
3  1775.706985    99.997711  1775.704696 -3184.758015     0.000000           0.000000    0.002289      -99.997711
4  2075.706985   300.002289  1875.704696 -3184.758015     0.002289           0.000000  200.000000      100.000000
5  2525.710418   650.003433  2075.704696 -3184.758015   250.005722           0.002289  200.000000      200.000000
6  3700.710990  1375.000572  2075.704696 -3184.758015  1325.006294         250.005722  300.000000      200.000000
7  5763.211849  2362.500858  2175.704834 -3184.758015  3387.506836        1325.006294  200.000179      100.000317
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:43:33]  --------------------------------------------------------------------------------
[07/18 16:43:33]  Iteration: 228 (0 solution, 227 counterexamples)
[07/18 16:43:39]  Generator returned sat in 3.359000 secs.
[07/18 16:43:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:43:40]  Improved gap from 75/131072 to 100
[07/18 16:43:41]  Improved number of small numbers from 28 to 38 out of a max of 90
[07/18 16:43:41]  Verifer returned sat in 0.948863 secs.
[07/18 16:43:41]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1709.042969     0.072510  1509.043179 -3184.758015     0.000000           0.000000  199.999790      199.999790
1  1709.042969     0.018066  1609.043179 -3184.758015     0.000000           0.000000   99.999790       99.999790
2  1709.042969     0.000732  1609.043179 -3184.758015     0.000000           0.000000   99.999790       -0.000210
3  1798.043751   189.000572  1798.043179 -3184.758015     0.000000           0.000000    0.000572      -10.999428
4  2326.543465   528.500286  1809.043179 -3184.758015   317.498569           0.000000  200.001717      100.001717
5  3119.292178   992.750429  2009.043179 -3184.758015   910.248999         317.498569  200.000000      200.000000
6  4808.417822  1889.125644  2009.043179 -3184.758015  2499.374642         910.248999  300.000000      200.000000
7  7553.106287  3044.688466  2175.704834 -3184.758015  5144.063232        2499.374642  233.338221      199.999876
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:43:41]  --------------------------------------------------------------------------------
[07/18 16:43:41]  Iteration: 229 (0 solution, 228 counterexamples)
[07/18 16:43:46]  Generator returned sat in 2.566598 secs.
[07/18 16:43:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:43:47]  Improved gap from 297/16384 to 100
[07/18 16:43:47]  Improved number of small numbers from 26 to 36 out of a max of 90
[07/18 16:43:47]  Verifer returned sat in 0.983964 secs.
[07/18 16:43:47]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2054.014648     0.072510  1954.014841 -3629.729677     0.000000           0.000000   99.999807       99.999807
1  2054.014648     0.018311  1954.014841 -3629.729677     0.000000           0.000000   99.999807       -0.000193
2  2154.014841   200.000000  2054.014841 -3629.729677     0.000000           0.000000  100.000000        0.000000
3  2154.014841     0.018127  2154.014841 -3629.729677     0.000000           0.000000    0.000000     -100.000000
4  2455.523905   301.509064  2309.014841 -3629.729677     1.509064           0.000000  145.000000      100.000000
5  3117.787501   807.263596  2428.014841 -3629.729677   563.772659           1.509064  126.000000      100.000000
6  4576.682894  1584.895393  2490.014841 -3629.729677  1822.668053         563.772659  264.000000      200.000000
7  7026.025984  2713.343090  2554.014893 -3629.729677  4272.010986        1822.668053  200.000105      100.000156
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:43:48]  --------------------------------------------------------------------------------
[07/18 16:43:48]  Iteration: 230 (0 solution, 229 counterexamples)
[07/18 16:43:53]  Generator returned sat in 2.384590 secs.
[07/18 16:43:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:43:53]  Improved gap from 0 to 100
[07/18 16:43:54]  Improved number of small numbers from 26 to 40 out of a max of 90
[07/18 16:43:54]  Verifer returned sat in 0.791399 secs.
[07/18 16:43:54]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1315.469482     0.072510 -1515.451492 -260.245216     0.000000           0.000000  199.982010      100.000137
1 -1315.469482     0.018311 -1315.505875 -260.245216     0.000000           0.000000    0.036392        0.000137
2 -1315.469482     0.018066 -1315.469620 -260.245216     0.000000           0.000000    0.000137      -99.999863
3 -1115.469620   200.000000 -1215.469620 -260.245216     0.000000           0.000000  100.000000        0.000000
4  -664.496811   550.972809 -1115.469620 -260.245216   250.972809           0.000000  200.000000      100.000000
5   161.998657  1026.495468  -915.469620 -260.245216   877.468277         250.972809  200.000000      200.000000
6  1901.741859  1939.743202  -915.469620 -260.245216  2517.211479         877.468277  300.000000      200.000000
7  4811.356663  3209.614803  -815.469482 -260.245216  5426.826172        2517.211479  199.999973      100.000111
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:43:54]  --------------------------------------------------------------------------------
[07/18 16:43:54]  Iteration: 231 (0 solution, 230 counterexamples)
[07/18 16:43:59]  Generator returned sat in 2.406773 secs.
[07/18 16:44:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:44:00]  Improved gap from 0 to 100
[07/18 16:44:00]  Improved number of small numbers from 26 to 90 out of a max of 90
[07/18 16:44:00]  Verifer returned sat in 0.368701 secs.
[07/18 16:44:00]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1166.469482     0.072266 -1166.469727 -260.281494     0.000000           0.000000    0.000244       -0.017822
1 -1166.451416     0.018311 -1166.451416 -260.281494     0.000000           0.000000    0.000000      -99.999756
2  -866.451416   300.000000  -966.451660 -260.281494     0.000000           0.000000  100.000244      100.000244
3  -866.451416     0.018311  -966.451660 -260.281494     0.000000           0.000000  100.000244        0.000244
4  -665.406250   301.045410  -866.451660 -260.281494     1.045410           0.000000  200.000000      100.000000
5  -113.838379   751.567871  -766.451416 -260.281494   352.613281           1.045410  299.999756      200.000000
6   913.513916  1327.352051  -578.451660 -260.281494  1379.965332         352.613281  112.000244      100.000244
7  3180.541748  2379.028076  -566.451660 -260.281494  3546.993164        1379.965332  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:44:00]  --------------------------------------------------------------------------------
[07/18 16:44:00]  Iteration: 232 (0 solution, 231 counterexamples)
[07/18 16:44:07]  Generator returned sat in 3.851575 secs.
[07/18 16:44:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:44:07]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:44:07]  Verifer returned sat in 0.143949 secs.
[07/18 16:44:07]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1166.469482     0.072266 -1166.469727 -260.281494     0.000000           0.000000    0.000244       -0.017822
1 -1166.451416     0.018311 -1166.451416 -260.281494     0.000000           0.000000    0.000000      -99.999756
2  -866.451416   300.000000  -966.451660 -260.281494     0.000000           0.000000  100.000244      100.000244
3  -866.451416     0.012207  -966.451660 -260.281494     0.000000           0.000000  100.000244        0.000244
4  -665.406250   301.045410  -866.451660 -260.281494     1.045410           0.000000  200.000000      100.000000
5  -113.838379   751.567871  -766.451416 -260.281494   352.613281           1.045410  299.999756      200.000000
6   913.513916  1327.352051  -578.451660 -260.281494  1379.965332         352.613281  112.000244      100.000244
7  3180.541748  2379.028076  -566.451660 -260.281494  3546.993164        1379.965332  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:44:08]  --------------------------------------------------------------------------------
[07/18 16:44:08]  Iteration: 233 (0 solution, 232 counterexamples)
[07/18 16:44:13]  Generator returned sat in 2.764881 secs.
[07/18 16:44:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:44:14]  Improved number of small numbers from 72 to 74 out of a max of 89
[07/18 16:44:14]  Verifer returned sat in 0.529532 secs.
[07/18 16:44:14]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1166.469482     0.072021 -1166.469727 -260.281494     0.000000           0.000000    0.000244       -0.017578
1 -1166.451660     0.018066 -1166.451660 -260.281494     0.000000           0.000000    0.000000      -99.999756
2  -866.433350   300.018311  -966.451904 -260.281494     0.018066           0.000000  100.000488      100.000488
3  -866.433350     0.011963  -966.451660 -260.281494     0.018066           0.018066  100.000244        0.000488
4  -665.406494   301.027100  -866.438171 -260.281494     1.045410           0.018066  199.986267      100.000000
5  -113.838623   751.554138  -766.451660 -260.281494   352.613281           1.045410  299.999756      200.000000
6   913.493073  1327.331451  -578.451660 -260.281494  1379.944733         352.613281  112.000000      100.000244
7  3180.490250  2378.997177  -566.451904 -260.281494  3546.942139        1379.944733  200.000015      100.000015
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:44:14]  --------------------------------------------------------------------------------
[07/18 16:44:14]  Iteration: 234 (0 solution, 233 counterexamples)
[07/18 16:44:21]  Generator returned sat in 3.670304 secs.
[07/18 16:44:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:44:21]  Improved gap from 295/16384 to 100
[07/18 16:44:22]  Improved number of small numbers from 29 to 43 out of a max of 90
[07/18 16:44:22]  Verifer returned sat in 0.800624 secs.
[07/18 16:44:22]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1444.174805     0.072021 -1544.192945 -260.281738     0.000000           0.000000  100.018140      100.018140
1 -1444.174805   100.018066 -1444.210950 -260.281738     0.000000           0.000000    0.036145        0.018140
2 -1444.174805     0.017822 -1444.192945 -260.281738     0.000000           0.000000    0.018140      -99.981860
3 -1144.174939   300.018005 -1344.192945 -260.281738     0.018005           0.000000  200.000000      100.000000
4  -694.147931   650.027008 -1244.192945 -260.281738   350.045013           0.018005  200.000000      100.000000
5   280.910586  1175.058517 -1044.192945 -260.281738  1225.103531         350.045013  100.000000      100.000000
6  2343.498363  2162.587776 -1044.192945 -260.281738  3187.691307        1225.103531  200.000000      100.000000
7  5687.380027  3543.881664  -944.192871 -260.281738  6331.572998        3187.691307  299.999900      199.999973
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:44:22]  --------------------------------------------------------------------------------
[07/18 16:44:22]  Iteration: 235 (0 solution, 234 counterexamples)
[07/18 16:44:34]  Generator returned sat in 9.347873 secs.
[07/18 16:44:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:44:35]  Improved number of small numbers from 44 to 89 out of a max of 89
[07/18 16:44:35]  Verifer returned sat in 0.182232 secs.
[07/18 16:44:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1444.174805    0.072021 -1644.183838 -260.281982    0.000000           0.000000  200.009033      100.026855
1 -1444.174805  100.017822 -1544.201660 -260.281982    0.000000           0.000000  100.026855        0.026855
2 -1444.174805    0.017822 -1444.193115 -260.281738    0.000000           0.000000    0.018311      -99.972900
3 -1144.175049  300.018066 -1344.183838 -260.281738    0.017822           0.000000  199.990967      100.009033
4 -1044.166016  300.000000 -1244.192871 -260.281738    0.035889           0.017822  199.990967      100.000000
5  -944.148193  300.008789 -1044.201904 -260.281738    0.053467           0.035889  100.000244      100.000244
6  -644.157227  399.991211 -1044.183838 -260.281738  200.044678           0.053467  199.981934      100.000000
7  -544.139160  300.000000  -944.193115 -260.281738  200.062500         200.044678  199.991455      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:44:35]  --------------------------------------------------------------------------------
[07/18 16:44:35]  Iteration: 236 (0 solution, 235 counterexamples)
[07/18 16:44:58]  Generator returned sat in 19.789935 secs.
[07/18 16:44:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:44:58]  Improved gap from 0 to 0
[07/18 16:44:58]  Improved number of small numbers from 72 to 80 out of a max of 90
[07/18 16:44:58]  Verifer returned sat in 0.331997 secs.
[07/18 16:44:58]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1444.175049    0.071777 -1644.184082 -260.281982   0.000000           0.000000  200.009033      100.026855
1 -1444.175049  100.017822 -1544.201660 -260.281982   0.000000           0.000000  100.026611        0.026855
2 -1444.175049    0.017578 -1444.175430 -160.309082   0.000000           0.000000    0.000381       -0.000244
3 -1310.841680  133.333750 -1344.174805 -160.309082   0.000000           0.000000   33.333125       33.333125
4 -1144.174180  200.000625 -1244.175049 -160.309082   0.000625           0.000000  100.000244      100.000000
5 -1144.174180    0.010000 -1144.176025 -160.309082   0.000625           0.000625    0.001221        0.000000
6 -1144.160400    0.015000 -1144.174805  -60.331543   0.000625           0.000625    0.013779       -0.008682
7 -1144.151680    0.022500 -1144.152344  -60.331299   0.000625           0.000625    0.000039      -99.999717
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:44:58]  --------------------------------------------------------------------------------
[07/18 16:44:58]  Iteration: 237 (0 solution, 236 counterexamples)
[07/18 16:45:12]  Generator returned sat in 10.299963 secs.
[07/18 16:45:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:45:12]  Improved gap from 147/8192 to 100
[07/18 16:45:12]  Improved number of small numbers from 77 to 79 out of a max of 90
[07/18 16:45:12]  Verifer returned sat in 0.245206 secs.
[07/18 16:45:12]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1444.175293    0.071533 -1744.175049 -60.331543    0.000000           0.000000  299.999756      199.999756
1 -1444.175293  100.017578 -1544.175049 -60.331543    0.000000           0.000000   99.999756       99.999756
2 -1444.175293    0.035645 -1444.211182 -60.331543    0.000000           0.000000    0.035889       -0.000244
3 -1244.139404  200.071777 -1444.175049 -60.331543    0.035645           0.000000  200.000000      100.000000
4 -1143.031738  301.107666 -1344.175049 -60.331543    0.035645           0.035645  201.107666      101.107666
5  -942.531738  401.607666 -1244.175049 -60.331543    1.643555           0.035645  299.999756      199.999756
6  -639.119995  603.411499 -1144.175049 -60.331543  305.055054           1.643555  200.000000      100.000000
7    66.997253  906.117249 -1044.175049 -60.331543  911.172119         305.055054  200.000183      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:45:12]  --------------------------------------------------------------------------------
[07/18 16:45:12]  Iteration: 238 (0 solution, 237 counterexamples)
[07/18 16:45:18]  Generator returned sat in 2.473187 secs.
[07/18 16:45:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:45:18]  Improved number of small numbers from 62 to 68 out of a max of 89
[07/18 16:45:18]  Verifer returned sat in 0.374019 secs.
[07/18 16:45:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1444.175293    0.071533 -1744.175049 -60.331787    0.000000           0.000000  299.999756      199.999756
1 -1444.175293  100.017334 -1544.175049 -60.331787    0.000000           0.000000   99.999756       99.999756
2 -1444.175293    0.035889 -1444.210693 -60.331787    0.000000           0.000000    0.035400       -0.000244
3 -1244.139160  200.071533 -1444.175049 -60.331787    0.035767           0.000000  200.000122      100.000122
4 -1142.031982  302.107300 -1344.175049 -60.331787    0.035767           0.035767  202.107300      102.107300
5  -941.531982  402.607300 -1244.175049 -60.331787    2.643066           0.035767  300.000000      200.000000
6  -635.621033  605.910950 -1144.175049 -60.331787  308.554016           2.643066  200.000000      100.000000
7    75.245392  910.866425 -1044.175049 -60.331787  911.171875         308.554016  208.248566      108.248566
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:45:19]  --------------------------------------------------------------------------------
[07/18 16:45:19]  Iteration: 239 (0 solution, 238 counterexamples)
[07/18 16:45:28]  Generator returned sat in 6.680532 secs.
[07/18 16:45:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:45:28]  Improved gap from 293/16384 to 100
[07/18 16:45:28]  Improved number of small numbers from 82 to 90 out of a max of 90
[07/18 16:45:28]  Verifer returned sat in 0.155905 secs.
[07/18 16:45:28]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1543.139160     0.071533 -1644.175049 -60.332031        0.0                0.0  101.035889      101.035889
1 -1543.139160   100.017090 -1544.175049 -60.332031        0.0                0.0    1.035889        1.035889
2 -1543.139160     0.035645 -1543.175049 -60.332031        0.0                0.0    0.035889      -98.964111
3 -1244.175049   299.000000 -1444.175049 -60.332031        0.0                0.0  200.000000      100.000000
4 -1044.175049   400.000000 -1269.175049 -60.332031        0.0                0.0  225.000000      200.000000
5  -730.675049   538.500000 -1244.175049 -60.332031      213.5                0.0  300.000000      200.000000
6    47.824951  1078.500000 -1144.175049 -60.332031      892.0              213.5  300.000000      200.000000
7  1906.324951  2158.500000 -1044.175049 -60.332031     2650.5              892.0  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:45:29]  --------------------------------------------------------------------------------
[07/18 16:45:29]  Iteration: 240 (0 solution, 239 counterexamples)
[07/18 16:45:34]  Generator returned sat in 2.458493 secs.
[07/18 16:45:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:45:34]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/18 16:45:34]  Verifer returned sat in 0.132345 secs.
[07/18 16:45:34]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1542.139160     0.071533 -1644.175049 -60.332275        0.0                0.0  102.035889      102.035645
1 -1542.139160   100.017090 -1544.175049 -60.332275        0.0                0.0    2.035889        2.035645
2 -1542.139160     0.035889 -1542.175049 -60.332031        0.0                0.0    0.035889      -97.964111
3 -1244.175049   298.000000 -1444.175049 -60.332031        0.0                0.0  200.000000      100.000000
4 -1044.675049   399.500000 -1269.175049 -60.332031        0.0                0.0  224.500000      199.500000
5  -730.675049   538.500000 -1244.175049 -60.332031      213.5                0.0  300.000000      200.000000
6    47.824951  1078.500000 -1144.175049 -60.332031      892.0              213.5  300.000000      200.000000
7  1906.324951  2158.500000 -1044.175049 -60.332031     2650.5              892.0  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:45:34]  --------------------------------------------------------------------------------
[07/18 16:45:34]  Iteration: 241 (0 solution, 240 counterexamples)
[07/18 16:45:40]  Generator returned sat in 2.415791 secs.
[07/18 16:45:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:45:40]  Improved gap from 2407937/24576 to 100
[07/18 16:45:40]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/18 16:45:40]  Verifer returned sat in 0.207422 secs.
[07/18 16:45:40]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1444.175293     0.071289 -1644.175293 -60.332031     0.000000           0.000000  200.000000      199.999756
1 -1444.175293   100.016846 -1544.175293 -60.332031     0.000000           0.000000  100.000000       99.999756
2 -1444.175293     0.035889 -1444.210693 -60.332031     0.000000           0.000000    0.035400       -0.000244
3 -1244.139160   200.071533 -1444.175049 -60.332031     0.035889           0.000000  200.000000      100.000000
4 -1042.496094   401.643066 -1244.175293 -60.332031     1.678955           0.035889  200.000244      200.000000
5  -437.710205   804.786133 -1244.175049 -60.332031   606.464844           1.678955  200.000000      100.000000
6   973.362061  1611.072266 -1144.175049 -60.332031  1817.537109         606.464844  300.000000      200.000000
7  3897.006592  3223.644531 -1044.175049 -60.332031  4641.181641        1817.537109  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:45:40]  --------------------------------------------------------------------------------
[07/18 16:45:40]  Iteration: 242 (0 solution, 241 counterexamples)
[07/18 16:46:09]  Generator returned sat in 25.433402 secs.
[07/18 16:46:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:46:09]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:46:09]  Verifer returned sat in 0.120221 secs.
[07/18 16:46:09]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1544.139404     0.071289 -1644.175049 -60.332031     0.000000           0.000000  100.035645      100.035645
1 -1544.139404   100.000000 -1643.246338 -60.332031     0.000000           0.000000   99.106934        0.035645
2 -1544.139404     0.035645 -1544.175049 -60.332031     0.000000           0.000000    0.035645      -99.964355
3 -1144.175049   400.000000 -1443.925049 -60.332031     0.000000           0.000000  299.750000      200.000000
4  -241.425049  1202.500000 -1244.175049 -60.332031   902.750000           0.000000  100.000000      100.000000
5  -141.389404   200.035645 -1144.175049 -60.332031   902.785645         902.750000  100.000000      100.000000
6   -40.889404   200.500000 -1044.175049 -60.332031   902.785645         902.785645  100.500000      100.500000
7  1061.110596  1202.500000 -1044.175049 -60.332031  1905.285645         902.785645  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:46:09]  --------------------------------------------------------------------------------
[07/18 16:46:09]  Iteration: 243 (0 solution, 242 counterexamples)
[07/18 16:46:15]  Generator returned sat in 2.768840 secs.
[07/18 16:46:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:46:16]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/18 16:46:16]  Verifer returned sat in 0.174004 secs.
[07/18 16:46:16]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1539.354004     0.070801 -1639.389648 -60.332031        0.0                0.0  100.035645      100.035645
1 -1539.354004    99.999756 -1639.389648 -60.332031        0.0                0.0  100.035645        0.035645
2 -1539.354004     0.035400 -1539.389648 -60.332031        0.0                0.0    0.035645      -99.964355
3 -1139.389648   400.000000 -1439.389648 -60.332031        0.0                0.0  300.000000      200.000000
4  -239.389648  1200.000000 -1239.389648 -60.332031      900.0                0.0  100.000000      100.000000
5  -138.889648   200.500000 -1140.389648 -60.332031      900.5              900.0  101.000000      100.000000
6   -39.889648   200.000000 -1039.389648 -60.332031      900.5              900.5   99.000000       99.000000
7  1061.110352  1200.000000 -1039.389404 -60.332031     1900.5              900.5  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:46:16]  --------------------------------------------------------------------------------
[07/18 16:46:16]  Iteration: 244 (0 solution, 243 counterexamples)
[07/18 16:46:27]  Generator returned sat in 8.645442 secs.
[07/18 16:46:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:46:28]  Improved gap from 145/8192 to 100
[07/18 16:46:28]  Improved number of small numbers from 53 to 90 out of a max of 90
[07/18 16:46:28]  Verifer returned sat in 0.225033 secs.
[07/18 16:46:28]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1190.648682    0.070801 -1290.666016 -60.332275     0.000000           0.000000  100.017334      100.017334
1 -1190.648438  100.017578 -1190.666016 -60.332275     0.000000           0.000000    0.017578        0.017578
2  -990.666016  200.000000 -1190.666016 -60.332275     0.000000           0.000000  200.000000      100.000000
3  -990.666016    0.017822 -1090.666016 -60.332275     0.000000           0.000000  100.000000        0.000000
4  -689.666016  401.000000  -990.666016 -60.332275   100.999756           0.000000  200.000244      100.000244
5  -388.166260  501.500000  -890.666016 -60.332275   302.499756         100.999756  200.000000      100.000000
6    63.833740  652.000000  -690.666016 -60.332275   554.499756         302.499756  200.000000      200.000000
7   716.333740  852.500000  -690.666016 -60.332275  1106.999756         554.499756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:46:28]  --------------------------------------------------------------------------------
[07/18 16:46:28]  Iteration: 245 (0 solution, 244 counterexamples)
[07/18 16:46:33]  Generator returned sat in 2.622038 secs.
[07/18 16:46:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:46:34]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:46:34]  Verifer returned sat in 0.143593 secs.
[07/18 16:46:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1190.648682    0.070801 -1290.666016 -60.332275     0.000000           0.000000  100.017334      100.017334
1 -1190.648682  100.017334 -1190.666016 -60.332275     0.000000           0.000000    0.017334        0.017334
2  -990.666016  200.000000 -1189.666016 -60.332275     0.000000           0.000000  199.000000      100.000000
3  -990.666016    0.017822 -1090.666016 -60.332275     0.000000           0.000000  100.000000        0.000000
4  -689.166016  401.500000  -990.666016 -60.332275   100.499756           0.000000  201.000244      101.000244
5  -388.166260  502.000000  -890.666016 -60.332275   302.499756         100.499756  200.000000      100.000000
6    63.833740  652.000000  -690.666016 -60.332275   554.499756         302.499756  200.000000      200.000000
7   716.333740  852.500000  -690.666016 -60.332275  1106.999756         554.499756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:46:34]  --------------------------------------------------------------------------------
[07/18 16:46:34]  Iteration: 246 (0 solution, 245 counterexamples)
[07/18 16:46:39]  Generator returned sat in 2.524311 secs.
[07/18 16:46:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:46:40]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:46:40]  Verifer returned sat in 0.131121 secs.
[07/18 16:46:40]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1190.648682    0.070557 -1290.666260 -60.332275     0.000000           0.000000  100.017578      100.017578
1 -1190.648682  100.017334 -1190.666260 -60.332275     0.000000           0.000000    0.017578        0.017578
2  -990.666260  200.000000 -1189.666016 -60.332275     0.000000           0.000000  198.999756      100.000000
3  -990.666260    0.017822 -1090.666260 -60.332275     0.000000           0.000000  100.000000        0.000000
4  -688.666260  402.000000  -990.666260 -60.332275   100.499756           0.000000  201.500244      101.500244
5  -387.666504  502.500000  -890.666016 -60.332275   302.499512         100.499756  200.500000      100.500244
6    64.333496  652.500000  -690.666260 -60.332275   554.999756         302.499512  200.000000      200.000000
7   717.333496  853.000000  -690.666016 -60.332275  1107.999756         554.999756  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:46:40]  --------------------------------------------------------------------------------
[07/18 16:46:40]  Iteration: 247 (0 solution, 246 counterexamples)
[07/18 16:47:03]  Generator returned sat in 20.116497 secs.
[07/18 16:47:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:47:04]  Improved number of small numbers from 63 to 69 out of a max of 89
[07/18 16:47:04]  Verifer returned sat in 0.433030 secs.
[07/18 16:47:04]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1190.664307     0.070068 -1290.666504 -60.33252     0.000000           0.000000  100.002197      100.002197
1 -1190.664307   100.000000 -1190.666504 -60.33252     0.000000           0.000000    0.002197        0.002197
2  -990.666748   199.999756 -1090.666748 -60.33252     0.000000           0.000000  100.000000       99.999756
3  -990.666748     0.017822 -1090.666504 -60.33252     0.000000           0.000000   99.999756       -0.000244
4  -790.657593   300.008911  -990.666504 -60.33252     0.002228           0.000000  200.006683      100.006683
5  -139.650909   851.013367  -791.666748 -60.33252   451.015594           0.002228  201.000244      200.000000
6  1534.868896  1875.520050  -690.666504 -60.33252  2025.535645         451.015594  199.999756      199.999756
7  4949.149216  3614.280075  -690.666504 -60.33252  5339.815918        2025.535645  299.999802      199.999802
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:47:04]  --------------------------------------------------------------------------------
[07/18 16:47:04]  Iteration: 248 (0 solution, 247 counterexamples)
[07/18 16:47:10]  Generator returned sat in 3.417104 secs.
[07/18 16:47:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:47:11]  Improved gap from 287/8192 to 100
[07/18 16:47:11]  Improved number of small numbers from 29 to 43 out of a max of 90
[07/18 16:47:11]  Verifer returned sat in 0.709994 secs.
[07/18 16:47:11]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3194.974609     0.069824 -3295.009652 -60.33252      0.000000           0.000000  100.035043      100.035043
1 -3194.974609     0.035156 -3195.009652 -60.33252      0.000000           0.000000    0.035043        0.035043
2 -3194.974609     0.034912 -3195.009652 -60.33252      0.000000           0.000000    0.035043      -99.964957
3 -2894.974618   300.035034 -3095.009652 -60.33252      0.035034           0.000000  200.000000      100.000000
4 -2243.922067   851.052551 -2895.009652 -60.33252    451.087585           0.035034  200.000000      200.000000
5  -566.343240  1877.578827 -2851.009652 -60.33252   2128.666412         451.087585  156.000000      100.000000
6  2783.025001  3505.368240 -2695.009652 -60.33252   5378.034653        2128.666412  100.000000      100.000000
7  8742.077361  6059.052361 -2695.009521 -60.33252  11137.087158        5378.034653  299.999724      199.999855
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:47:12]  --------------------------------------------------------------------------------
[07/18 16:47:12]  Iteration: 249 (0 solution, 248 counterexamples)
[07/18 16:47:22]  Generator returned sat in 7.193471 secs.
[07/18 16:47:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:47:23]  Improved number of small numbers from 32 to 42 out of a max of 89
[07/18 16:47:23]  Verifer returned sat in 0.815182 secs.
[07/18 16:47:23]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3194.992188     0.069580 -3295.009652 -60.33252      0.000000           0.000000  100.017465      100.017465
1 -3194.992188     0.035156 -3195.009652 -60.33252      0.000000           0.000000    0.017465        0.017465
2 -3194.992188     0.008789 -3195.009652 -60.33252      0.000000           0.000000    0.017465      -99.982535
3 -2894.974618   300.035034 -3095.009652 -60.33252      0.035034           0.000000  200.000000      100.000000
4 -2243.422067   851.552551 -2895.634652 -60.33252    451.712585           0.035034  200.500000      199.875000
5  -566.343240  1877.578827 -2851.009652 -60.33252   2128.666412         451.712585  156.000000      100.000000
6  2783.525001  3505.868240 -2695.009652 -60.33252   5378.034653        2128.666412  100.500000      100.500000
7  8743.327361  6060.302361 -2695.009521 -60.33252  11138.337158        5378.034653  299.999724      199.999855
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:47:23]  --------------------------------------------------------------------------------
[07/18 16:47:23]  Iteration: 250 (0 solution, 249 counterexamples)
[07/18 16:48:08]  Generator returned sat in 41.714517 secs.
[07/18 16:48:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:48:09]  Improved number of small numbers from 30 to 42 out of a max of 89
[07/18 16:48:09]  Verifer returned sat in 0.898262 secs.
[07/18 16:48:09]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3095.009766     0.069336 -3295.009652 -60.33252      0.000000           0.000000  199.999886      199.999886
1 -3095.009766     0.034912 -3195.009652 -60.33252      0.000000           0.000000   99.999886       99.999886
2 -3095.009766     0.034912 -3195.009652 -60.33252      0.000000           0.000000   99.999886       -0.000114
3 -2865.697997   329.311655 -3095.009652 -60.33252     29.311655           0.000000  200.000000      100.000000
4 -2307.074687   758.623310 -2895.634652 -60.33252    487.934965          29.311655  100.625000      100.000000
5  -740.765567  1666.934120 -2851.009652 -60.33252   1954.244085         487.934965  156.000000      100.000000
6  2609.102674  3505.868240 -2695.009652 -60.33252   5203.612326        1954.244085  100.500000      100.500000
7  9720.339154  7211.736481 -2695.009521 -60.33252  12115.348877        5203.612326  299.999799      199.999929
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:48:09]  --------------------------------------------------------------------------------
[07/18 16:48:09]  Iteration: 251 (0 solution, 250 counterexamples)
[07/18 16:48:22]  Generator returned sat in 9.636754 secs.
[07/18 16:48:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:48:22]  Improved number of small numbers from 38 to 89 out of a max of 89
[07/18 16:48:22]  Verifer returned sat in 0.273655 secs.
[07/18 16:48:22]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t  wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3095.009766     0.069092 -3395.009521 -60.33252     0.000000           0.000000  299.999756      200.000000
1 -3095.009766     0.034912 -3295.009766 -60.33252     0.000000           0.000000  200.000000      100.000000
2 -3095.009766     0.034912 -3195.009521 -60.33252     0.000000           0.000000   99.999756        0.000000
3 -2739.042236   455.967285 -3043.009521 -60.33252   103.967529           0.000000  199.999756      152.000000
4 -2307.074707   631.967285 -2895.009766 -60.33252   387.935059         103.967529  200.000000      200.000000
5 -1675.107422   831.967285 -2804.009521 -60.33252  1019.902344         387.935059  108.999756      100.000000
6  -756.639893  1027.467285 -2795.009521 -60.33252  1838.369873        1019.902344  199.999756      100.000000
7   194.827637  1151.467285 -2695.009521 -60.33252  2589.837646        1838.369873  299.999512      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:48:23]  --------------------------------------------------------------------------------
[07/18 16:48:23]  Iteration: 252 (0 solution, 251 counterexamples)
[07/18 16:48:34]  Generator returned sat in 8.010221 secs.
[07/18 16:48:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:48:34]  Improved number of small numbers from 49 to 57 out of a max of 89
[07/18 16:48:34]  Verifer returned sat in 0.667243 secs.
[07/18 16:48:35]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3195.009277     0.068848 -3295.009766 -60.332764     0.000000           0.000000  100.000488      100.000488
1 -3195.009277   100.000000 -3195.009766 -60.332764     0.000000           0.000000    0.000488        0.000488
2 -3195.009277     0.000244 -3195.009521 -60.332764     0.000000           0.000000    0.000244      -99.999512
3 -2895.009644   299.999878 -3095.009766 -60.332764     0.000122           0.000000  200.000000      100.000000
4 -2545.009827   549.999817 -2895.009766 -60.332764   249.999939           0.000122  100.000000      100.000000
5 -1670.010101   974.999725 -2804.009521 -60.332764   924.999664         249.999939  208.999756      200.000000
6  -221.010269  1657.999588 -2795.009521 -60.332764  2373.999496         924.999664  199.999756      100.000000
7  2215.989479  2636.999504 -2695.009766 -60.332764  4610.999268        2373.999496  299.999977      199.999977
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:48:35]  --------------------------------------------------------------------------------
[07/18 16:48:35]  Iteration: 253 (0 solution, 252 counterexamples)
[07/18 16:48:51]  Generator returned sat in 12.898857 secs.
[07/18 16:48:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:48:51]  Improved gap from 283/8192 to 100
[07/18 16:48:52]  Improved number of small numbers from 31 to 41 out of a max of 90
[07/18 16:48:52]  Verifer returned sat in 0.819579 secs.
[07/18 16:48:52]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1022.906738    0.069092 -1022.941177 -60.332764    0.000000           0.000000    0.034439        0.034439
1 -1022.906738    0.017334 -1022.941177 -60.332764    0.000000           0.000000    0.034439      -99.965561
2  -722.941177  300.000000  -922.889359 -60.332764    0.000000           0.000000  199.948181      100.000000
3  -522.923904  399.965454  -822.941177 -60.332764    0.017273           0.000000  300.000000      200.000000
4  -522.923904  299.982727  -722.941177 -60.332764    0.017273           0.017273  200.000000      100.000000
5   179.041550  901.965454  -622.941177 -60.332764  501.982727           0.017273  300.000000      200.000000
6   479.998367  600.956818  -522.941177 -60.332764  702.939545         501.982727  300.000000      200.000000
7   630.476776  450.478409  -422.941162 -60.332764  753.417969         702.939545  299.999969      199.999985
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:48:52]  --------------------------------------------------------------------------------
[07/18 16:48:52]  Iteration: 254 (0 solution, 253 counterexamples)
[07/18 16:49:01]  Generator returned sat in 6.095460 secs.
[07/18 16:49:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:49:01]  Improved gap from 1/400 to 0
[07/18 16:49:02]  Improved number of small numbers from 72 to 84 out of a max of 90
[07/18 16:49:02]  Verifer returned sat in 0.366860 secs.
[07/18 16:49:02]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1322.906738    0.068848 -1322.906982 -60.332764     0.0000             0.0000    0.000244        0.000000
1 -1022.906982  300.000000 -1322.906738 -60.332764     0.0000             0.0000  299.999756      199.999756
2 -1022.906982  199.997314 -1222.906738 -60.332764     0.0000             0.0000  199.999756       99.999756
3 -1022.906982  199.997314 -1022.909180 -60.332764     0.0000             0.0000    0.002197       -0.000244
4  -822.411865  200.497314  -923.409424 -60.332764     0.0025             0.0000  100.995059      100.492373
5  -822.411865    0.010000  -822.921738 -60.332764     0.0025             0.0025    0.507373        0.492373
6  -822.409238    0.510000  -822.906738  39.172119     0.0025             0.0025    0.495000       -0.000117
7  -821.894238    1.010000  -822.411621  39.172119     0.0025             0.0025    0.514883      -99.485117
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:49:02]  --------------------------------------------------------------------------------
[07/18 16:49:02]  Iteration: 255 (0 solution, 254 counterexamples)
[07/18 16:49:19]  Generator returned sat in 13.908357 secs.
[07/18 16:49:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:49:19]  Improved gap from 141/8192 to 100
[07/18 16:49:19]  Improved number of small numbers from 82 to 90 out of a max of 90
[07/18 16:49:19]  Verifer returned sat in 0.264958 secs.
[07/18 16:49:19]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1621.941162    0.068604 -1621.941162  238.701416    0.000000                0.0    0.000000        0.000000
1 -1588.573486   33.367676 -1588.607666  238.701416    0.000000                0.0    0.034180      -66.632324
2 -1521.906738   66.700928 -1521.941162  238.701416    0.000000                0.0    0.034424      -99.965576
3 -1421.906738  100.034424 -1421.941162  238.701416    0.000000                0.0    0.034424      -99.965576
4 -1121.941162  300.000000 -1321.941162  238.701416    0.000000                0.0  200.000000      100.000000
5  -921.941406  399.999756 -1221.941162  238.701416    0.000000                0.0  299.999756      199.999756
6  -771.941162  450.000000 -1121.941162  238.701416  150.000000                0.0  200.000000      100.000000
7   -70.941162  901.000000 -1021.941162  238.701416  750.999756              150.0  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:49:20]  --------------------------------------------------------------------------------
[07/18 16:49:20]  Iteration: 256 (0 solution, 255 counterexamples)
[07/18 16:49:25]  Generator returned sat in 2.896754 secs.
[07/18 16:49:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:49:26]  Improved number of small numbers from 81 to 85 out of a max of 89
[07/18 16:49:26]  Verifer returned sat in 0.217364 secs.
[07/18 16:49:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1621.941162    0.068359 -1621.941162  238.701172    0.000000                0.0    0.000000        0.000000
1 -1588.257080   33.684082 -1588.274495  238.701172    0.000000                0.0    0.017415      -66.315918
2 -1521.906738   66.367757 -1521.941162  238.701172    0.000000                0.0    0.034424      -99.965576
3 -1421.906738  100.034424 -1421.941162  238.701172    0.000000                0.0    0.034424      -99.965576
4 -1121.441162  300.500000 -1321.941162  238.701172    0.000000                0.0  200.500000      100.500000
5  -921.941162  400.000000 -1221.941162  238.701172    0.000000                0.0  300.000000      200.000000
6  -771.441162  450.500000 -1121.941162  238.701172  150.500000                0.0  200.000000      100.000000
7   -69.441162  902.000000 -1021.941162  238.701172  752.499512              150.5  200.000488      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:49:26]  --------------------------------------------------------------------------------
[07/18 16:49:26]  Iteration: 257 (0 solution, 256 counterexamples)
[07/18 16:49:33]  Generator returned sat in 3.944703 secs.
[07/18 16:49:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:49:33]  Improved gap from 33439/1024 to 100
[07/18 16:49:34]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/18 16:49:34]  Verifer returned sat in 0.195551 secs.
[07/18 16:49:34]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1554.808350     0.068115 -1754.808350  238.701172     0.000000           0.000000  200.000000      200.000000
1 -1554.808350   199.999756 -1654.808350  238.701172     0.000000           0.000000  100.000000      100.000000
2 -1554.808350     0.033936 -1654.808350  238.701172     0.000000           0.000000  100.000000        0.000000
3 -1354.774170   300.034180 -1454.808350  238.701172     0.034180           0.000000  100.000000      100.000000
4  -853.705811   601.068359 -1454.808105  238.701172   301.102539           0.034180  299.999756      200.000000
5    49.431152  1203.136719 -1354.808105  238.701172  1204.239014         301.102539  200.000244      100.000488
6  2256.704346  2407.273438 -1154.808350  238.701172  3311.512695        1204.239014  100.000000      100.000000
7  6972.251221  4815.546875 -1154.808350  238.701172  7927.059570        3311.512695  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:49:34]  --------------------------------------------------------------------------------
[07/18 16:49:34]  Iteration: 258 (0 solution, 257 counterexamples)
[07/18 16:49:40]  Generator returned sat in 3.370646 secs.
[07/18 16:49:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:49:41]  Improved number of small numbers from 78 to 89 out of a max of 89
[07/18 16:49:41]  Verifer returned sat in 0.127550 secs.
[07/18 16:49:41]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1554.808350     0.067871 -1754.808594  238.700928     0.000000           0.000000  200.000244      200.000000
1 -1554.808350   199.999512 -1654.808350  238.700928     0.000000           0.000000  100.000000      100.000000
2 -1554.808350     0.000244 -1653.904785  238.700928     0.000000           0.000000   99.096436        0.000000
3 -1354.808105   299.096680 -1454.808594  238.700928     0.000244           0.000000  100.000244      100.000000
4  -854.614990   600.193359 -1454.808350  238.700928   301.852539           0.000244  298.340820      198.340820
5    49.430908  1202.386719 -1354.308105  238.700928  1204.239014         301.852539  199.500000      100.000244
6  2256.704346  2406.773438 -1154.808594  238.700928  3311.512695        1204.239014  100.000244      100.000000
7  6972.250977  4815.546875 -1154.808350  238.700928  7927.059326        3311.512695  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:49:41]  --------------------------------------------------------------------------------
[07/18 16:49:41]  Iteration: 259 (0 solution, 258 counterexamples)
[07/18 16:49:55]  Generator returned sat in 10.638999 secs.
[07/18 16:49:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:49:55]  Improved number of small numbers from 74 to 76 out of a max of 89
[07/18 16:49:55]  Verifer returned sat in 0.372335 secs.
[07/18 16:49:55]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1554.808594     0.067871 -1754.808350  238.700928     0.000000           0.000000  199.999756      199.999756
1 -1554.808594     0.033936 -1754.808350  238.700928     0.000000           0.000000  199.999756       99.999756
2 -1554.808594   199.965820 -1554.842285  238.700928     0.000000           0.000000    0.033691       -0.000244
3  -648.119385   906.722900 -1454.808594  238.700928   706.688965           0.000000  100.000244      100.000000
4   608.602905  1356.722534 -1354.808350  238.700928  1863.411255         706.688965  100.000000      100.000000
5  2465.325439  1956.722534 -1254.808350  238.700928  3620.133789        1863.411255  100.000000      100.000000
6  4772.098877  2406.773438 -1254.808350  238.700928  5826.907227        3620.133789  200.000000      100.000000
7  7278.872681  2706.773804 -1154.808350  238.700928  8233.680908        5826.907227  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:49:56]  --------------------------------------------------------------------------------
[07/18 16:49:56]  Iteration: 260 (0 solution, 259 counterexamples)
[07/18 16:50:23]  Generator returned sat in 23.869957 secs.
[07/18 16:50:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:50:23]  Improved gap from 139/8192 to 100
[07/18 16:50:23]  Improved number of small numbers from 60 to 90 out of a max of 90
[07/18 16:50:23]  Verifer returned sat in 0.370508 secs.
[07/18 16:50:23]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1553.685547     0.067871 -1553.719482  238.700928     0.000000           0.000000    0.033936        0.033936
1 -1553.685547     0.033691 -1553.719238  238.700928     0.000000           0.000000    0.033691      -99.966064
2 -1353.719482   199.999756 -1453.719238  238.700928     0.000000           0.000000   99.999756        0.000000
3 -1153.685303   300.033936 -1253.719482  238.700928     0.033936           0.000000  100.000244      100.000244
4  -352.651611   901.033936 -1177.719238  238.700928   601.067871           0.033936  223.999756      200.000000
5  1077.382568  1654.033936 -1108.719238  238.700928  2031.101562         601.067871  155.000244      100.000488
6  3267.416260  2345.033936 -1053.719482  238.700928  4021.135742        2031.101562  300.000000      200.000000
7  5713.450195  2746.033936  -953.719238  238.700928  6467.169434        4021.135742  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:50:23]  --------------------------------------------------------------------------------
[07/18 16:50:23]  Iteration: 261 (0 solution, 260 counterexamples)
[07/18 16:50:36]  Generator returned sat in 9.271231 secs.
[07/18 16:50:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:50:37]  Improved number of small numbers from 68 to 85 out of a max of 89
[07/18 16:50:37]  Verifer returned sat in 0.399657 secs.
[07/18 16:50:37]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -1453.685791      0.067871 -1553.719482  238.700928      0.000000           0.000000  100.033691      100.033691
1  -1453.685791      0.033936 -1453.719482  238.700928      0.000000           0.000000    0.033691        0.033691
2  -1353.685791    100.033691 -1353.719482  238.700928      0.000000           0.000000    0.033691        0.033691
3  -1153.685547    200.033936 -1303.236450  238.700928      0.033936           0.000000  149.516968      100.000000
4   -402.168579    901.033936 -1177.719238  238.700928    551.551025           0.033936  223.999634      199.999878
5   1727.900146   2354.068359 -1053.719482  238.700928   2681.619385         551.551025  100.000244      100.000244
6   6936.036621   5308.136719 -1053.719482  238.700928   7789.756104        2681.619385  200.000000      100.000000
7  17851.343994  11115.307373  -953.719482  238.700928  18505.063721        7789.756104  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:50:37]  --------------------------------------------------------------------------------
[07/18 16:50:37]  Iteration: 262 (0 solution, 261 counterexamples)
[07/18 16:50:48]  Generator returned sat in 8.168083 secs.
[07/18 16:50:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:50:49]  Improved gap from 139/16384 to 100
[07/18 16:50:49]  Improved number of small numbers from 40 to 57 out of a max of 90
[07/18 16:50:49]  Verifer returned sat in 0.791721 secs.
[07/18 16:50:49]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1492.685547     0.067627 -1553.719360  238.700928     0.000000           0.000000   61.033813       61.033813
1 -1492.685547     0.033936 -1492.719238  238.700928     0.000000           0.000000    0.033691      -38.966187
2 -1153.719482   338.999756 -1353.719360  238.700928     0.000000           0.000000  199.999878      199.999878
3 -1153.685425   200.033936 -1311.719360  238.700928     0.033691           0.000000  158.000244      100.000244
4  -727.668701   584.016968 -1253.719238  238.700928   226.050781           0.033691  299.999756      199.999878
5  -257.659973   770.008484 -1053.719360  238.700928   596.059387         226.050781  200.000000      200.000000
6   527.344269   985.004242 -1053.719360  238.700928  1281.063629         596.059387  300.000000      200.000000
7  1235.846390  1008.502121  -953.719238  238.700928  1889.565918        1281.063629  299.999710      199.999832
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:50:50]  --------------------------------------------------------------------------------
[07/18 16:50:50]  Iteration: 263 (0 solution, 262 counterexamples)
[07/18 16:50:59]  Generator returned sat in 6.572782 secs.
[07/18 16:51:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:00]  Improved gap from 139/32768 to 100
[07/18 16:51:00]  Improved number of small numbers from 34 to 42 out of a max of 90
[07/18 16:51:00]  Verifer returned sat in 0.809651 secs.
[07/18 16:51:00]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1453.718994     0.067627 -1553.719116  238.700684     0.000000           0.000000  100.000122      100.000122
1 -1453.718994     0.033691 -1553.719116  238.700684     0.000000           0.000000  100.000122        0.000122
2 -1453.710632   100.008484 -1453.719116  238.700684     0.000000           0.000000    0.008484      -99.991516
3 -1353.710632   100.008484 -1353.719116  238.700684     0.000000           0.000000    0.008484      -99.991516
4  -803.206390   550.512726 -1253.719116  238.700684   250.512726           0.000000  200.000000      100.000000
5  -126.950027   876.256363 -1135.719116  238.700684   826.769089         250.512726  182.000000      100.000000
6   766.178154  1075.128181 -1016.719116  238.700684  1519.897270         826.769089  263.000000      200.000000
7  1715.742245  1212.564091  -953.718994  238.700684  2469.461182        1519.897270  200.000057      100.000179
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:01]  --------------------------------------------------------------------------------
[07/18 16:51:01]  Iteration: 264 (0 solution, 263 counterexamples)
[07/18 16:51:08]  Generator returned sat in 4.249255 secs.
[07/18 16:51:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:09]  Improved number of small numbers from 48 to 83 out of a max of 89
[07/18 16:51:09]  Verifer returned sat in 0.521728 secs.
[07/18 16:51:09]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1453.719238     0.067627 -1553.719238  238.700439     0.000000           0.000000  100.000000       99.999756
1 -1453.719238     0.033691 -1553.718994  238.700684     0.000000           0.000000   99.999756        0.000000
2 -1453.718994   100.000000 -1453.719116  238.700684     0.000000           0.000000    0.000122      -99.999756
3 -1353.719055   100.000061 -1353.719238  238.700684     0.000000           0.000000    0.000183      -99.999817
4  -953.219238   400.500000 -1249.588379  238.700684   100.499756           0.000000  195.869385      100.000244
5  -339.577393   809.511230 -1053.719238  238.700684   614.141846         100.499756  100.000000      100.000000
6   766.177979  1205.755371 -1016.719238  238.700684  1519.897461         614.141846  262.999756      199.999756
7  1781.055908  1277.877686  -953.718994  238.700684  2469.461182        1519.897461  265.313721      165.313965
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:09]  --------------------------------------------------------------------------------
[07/18 16:51:09]  Iteration: 265 (0 solution, 264 counterexamples)
[07/18 16:51:15]  Generator returned sat in 2.985001 secs.
[07/18 16:51:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:16]  Improved gap from 277/16384 to 100
[07/18 16:51:17]  Improved number of small numbers from 27 to 49 out of a max of 90
[07/18 16:51:17]  Verifer returned sat in 0.950925 secs.
[07/18 16:51:17]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -1553.719238     0.067627 -1653.719116  338.700562      0.000000           0.000000   99.999878       99.999878
1  -1553.719238     0.016846 -1653.719116  338.700562      0.000000           0.000000   99.999878       -0.000122
2  -1453.702209   200.016907 -1453.719116  338.700562      0.000000           0.000000    0.016907        0.016907
3  -1453.702209     0.016907 -1453.719116  338.700562      0.000000           0.000000    0.016907      -99.983093
4  -1053.193756   400.525360 -1353.719116  338.700562    100.525360           0.000000  200.000000      100.000000
5    148.856964  1402.050720 -1195.719116  338.700562   1202.575928         100.525360  142.000153      100.000153
6   3327.958252  3321.101440 -1053.719238  338.700562   4181.677734        1202.575928  199.999756      199.999634
7  10571.161133  7443.202637  -953.719238  338.700562  11324.880615        4181.677734  199.999756      199.999634
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:17]  --------------------------------------------------------------------------------
[07/18 16:51:17]  Iteration: 266 (0 solution, 265 counterexamples)
[07/18 16:51:23]  Generator returned sat in 2.827761 secs.
[07/18 16:51:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:23]  Improved gap from 277/16384 to 100
[07/18 16:51:24]  Improved number of small numbers from 31 to 51 out of a max of 90
[07/18 16:51:24]  Verifer returned sat in 0.972745 secs.
[07/18 16:51:24]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -1653.423340     0.067627 -1653.457148  338.438594      0.000000           0.000000    0.033809        0.033809
1  -1653.423340     0.017090 -1653.457031  338.438594      0.000000           0.000000    0.033691      -99.966191
2  -1300.322021   353.135010 -1453.457148  338.438594     53.135071           0.000000  100.000056      100.000056
3  -1300.322021     0.016907 -1453.457148  338.438594     53.135071          53.135071  100.000056        0.000056
4   -999.805171   400.516907 -1353.457031  338.438594    153.651978          53.135071  199.999883      100.000000
5    202.228760  1402.033813 -1178.457148  338.438594   1255.685791         153.651978  125.000117      100.000117
6   3432.296270  3355.067627 -1053.457148  338.438594   4385.753418        1255.685791  100.000000      100.000000
7  10843.431523  7511.135254 -1053.457031  338.438594  11696.888672        4385.753418  199.999883      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:24]  --------------------------------------------------------------------------------
[07/18 16:51:24]  Iteration: 267 (0 solution, 266 counterexamples)
[07/18 16:51:30]  Generator returned sat in 2.881139 secs.
[07/18 16:51:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:31]  Improved gap from 0 to 100
[07/18 16:51:32]  Improved number of small numbers from 24 to 41 out of a max of 90
[07/18 16:51:32]  Verifer returned sat in 1.018693 secs.
[07/18 16:51:32]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1604.282959     0.067383 -1704.283112  389.264557     0.000000           0.000000  100.000153      100.000153
1 -1604.282959     0.033936 -1704.283112  389.264557     0.000000           0.000000  100.000153        0.000153
2 -1604.282959   100.000000 -1604.283112  389.264557     0.000000           0.000000    0.000153      -99.999847
3 -1304.249298   300.033813 -1407.283112  389.264557     0.033813           0.000000  103.000000      100.000000
4  -662.232391   745.016907 -1404.283112  389.264557   542.050537           0.033813  200.000183      100.000183
5   111.275879   973.508453 -1226.283112  389.264557  1115.559174         542.050537  221.999817      199.999817
6  1133.030289  1243.754227 -1104.283112  389.264557  2037.313400        1115.559174  200.000000      200.000000
7  2161.907402  1228.877113 -1104.282959  389.264557  2966.190674        2037.313400  299.999687      199.999840
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:32]  --------------------------------------------------------------------------------
[07/18 16:51:32]  Iteration: 268 (0 solution, 267 counterexamples)
[07/18 16:51:40]  Generator returned sat in 5.381923 secs.
[07/18 16:51:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:41]  Improved number of small numbers from 49 to 89 out of a max of 89
[07/18 16:51:41]  Verifer returned sat in 0.256976 secs.
[07/18 16:51:41]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -1504.283203      0.067139 -1704.283203  389.264404      0.000000           0.000000  200.000000      200.000000
1  -1504.283203      0.033691 -1704.282959  389.264404      0.000000           0.000000  199.999756      100.000000
2  -1504.283203      0.033447 -1504.316650  389.264404      0.000000           0.000000    0.033447        0.000000
3  -1304.249268    200.067383 -1504.283203  389.264404      0.033691           0.000000  200.000244      100.000244
4   -703.114746    801.134766 -1404.282959  389.264404    401.168457           0.033691  299.999756      200.000000
5   1200.155029   2203.269531 -1304.282959  389.264404   2304.437744         401.168457  200.000244      100.000488
6   5807.761230   4807.606445 -1104.283203  389.264404   6712.044434        2304.437744  200.000000      200.000000
7  16023.974121  10416.212891 -1004.283203  389.264404  16928.257324        6712.044434  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:41]  --------------------------------------------------------------------------------
[07/18 16:51:41]  Iteration: 269 (0 solution, 268 counterexamples)
[07/18 16:51:50]  Generator returned sat in 5.278980 secs.
[07/18 16:51:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:50]  Improved gap from 0 to 100
[07/18 16:51:50]  Improved number of small numbers from 28 to 90 out of a max of 90
[07/18 16:51:50]  Verifer returned sat in 0.233542 secs.
[07/18 16:51:50]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t     wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   2373.734375      0.066895  2373.700684 -3688.719727      0.000000           0.000000    0.033691        0.033691
1   2373.734375      0.016602  2373.734375 -3688.719727      0.000000           0.000000    0.000000      -99.966309
2   2673.700684    299.966309  2485.700684 -3688.719727      0.000000           0.000000  188.000000      100.000000
3   2773.717529    288.016846  2573.700684 -3688.719727      0.016846           0.000000  200.000000      100.000000
4   3551.251221    977.533691  2673.700684 -3688.719727    577.550537           0.016846  300.000000      200.000000
5   5807.751221   2556.500000  2773.700684 -3688.719727   2734.050537         577.550537  300.000000      200.000000
6  11198.251221   5690.500000  2973.700684 -3688.719727   8024.550537        2734.050537  200.000000      200.000000
7  23180.751221  12182.500000  3073.700684 -3688.719727  19907.050537        8024.550537  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:51]  --------------------------------------------------------------------------------
[07/18 16:51:51]  Iteration: 270 (0 solution, 269 counterexamples)
[07/18 16:51:59]  Generator returned sat in 4.780077 secs.
[07/18 16:51:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:51:59]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 16:51:59]  Verifer returned sat in 0.263948 secs.
[07/18 16:51:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2373.700684     0.066895  2373.667236 -3688.719971     0.000000           0.000000    0.033447        0.000000
1  2373.700684     0.016602  2373.700684 -3688.719971     0.000000           0.000000    0.000000     -100.000000
2  2673.700439   299.999756  2562.700684 -3688.719971     0.000000           0.000000  110.999756       99.999756
3  3873.566895  1310.866211  2650.700684 -3688.719971  1099.866211           0.000000  123.000000      100.000000
4  4961.566895  1211.000000  2773.700684 -3688.719971  1987.866211        1099.866211  200.000000      200.000000
5  6168.566895  1407.000000  2773.700684 -3688.719971  3094.866211        1987.866211  300.000000      200.000000
6  6995.566895  1127.000000  2973.700684 -3688.719971  3821.866211        3094.866211  200.000000      200.000000
7  8006.566895  1211.000000  3073.700684 -3688.719971  4732.866211        3821.866211  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:51:59]  --------------------------------------------------------------------------------
[07/18 16:51:59]  Iteration: 271 (0 solution, 270 counterexamples)
[07/18 16:52:34]  Generator returned sat in 31.262971 secs.
[07/18 16:52:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:52:34]  Improved gap from 88 to 100
[07/18 16:52:35]  Improved number of small numbers from 74 to 74 out of a max of 90
[07/18 16:52:35]  Verifer returned sat in 0.385335 secs.
[07/18 16:52:35]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2373.700684     0.066895  2344.037040 -3688.719971     0.000000           0.000000   29.663644        0.000000
1  2373.700684     0.016602  2373.700684 -3688.719971     0.000000           0.000000    0.000000     -100.000000
2  2673.700439   299.999756  2473.700684 -3688.719971     0.000000           0.000000  199.999756       99.999756
3  4032.281180  1558.580497  2575.700684 -3688.719971  1158.580497           0.000000  298.000000      200.000000
4  4861.566895  1127.285714  2773.700684 -3688.719971  1987.866211        1158.580497  100.000000      100.000000
5  5925.709752  1164.142857  2867.700684 -3688.719971  2948.294782        1987.866211  109.714286      103.714286
6  6989.566895  1173.571429  2973.700684 -3688.719971  3815.866211        2948.294782  200.000000      200.000000
7  7973.852609  1184.285714  2973.700684 -3688.719971  4732.866211        3815.866211  267.285714      167.285714
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:52:35]  --------------------------------------------------------------------------------
[07/18 16:52:35]  Iteration: 272 (0 solution, 271 counterexamples)
[07/18 16:52:42]  Generator returned sat in 4.430064 secs.
[07/18 16:52:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:52:43]  Improved gap from 0 to 100
[07/18 16:52:43]  Improved number of small numbers from 42 to 90 out of a max of 90
[07/18 16:52:43]  Verifer returned sat in 0.298343 secs.
[07/18 16:52:43]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2624.175049    0.066406  2324.175293 -3688.720215   0.000000           0.000000  299.999756      200.000000
1  2624.175049    0.033203  2426.191650 -3688.720215   0.000000           0.000000  197.983398      100.000000
2  2673.700195  247.508545  2524.175293 -3688.720215   0.000000           0.000000  149.524902       49.525146
3  2673.700195  149.491699  2673.700195 -3688.720215   0.000000           0.000000    0.000000      -50.474854
4  2924.208496  250.508301  2724.175049 -3688.720215   0.033447           0.000000  200.000000      100.000000
5  3124.208496  400.000000  2856.841797 -3688.720215   0.033447           0.033447  267.333252      200.000000
6  3224.208496  367.333252  2924.175049 -3688.720215   0.033447           0.033447  300.000000      200.000000
7  3234.112549  309.904053  3024.175293 -3688.720215   9.937256           0.033447  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:52:43]  --------------------------------------------------------------------------------
[07/18 16:52:43]  Iteration: 273 (0 solution, 272 counterexamples)
[07/18 16:52:50]  Generator returned sat in 3.599099 secs.
[07/18 16:52:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:52:51]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/18 16:52:51]  Verifer returned sat in 0.265020 secs.
[07/18 16:52:51]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2624.174805    0.066406  2324.175049 -3688.720459   0.000000           0.000000  299.999756      199.999756
1  2624.174805    0.032959  2426.191650 -3688.720459   0.000000           0.000000  197.983154       99.999756
2  2674.691650  248.500000  2524.175049 -3688.720459   0.000000           0.000000  150.516602       50.516602
3  2674.691650  150.500000  2674.691650 -3688.720459   0.000000           0.000000    0.000000      -49.483398
4  2925.199951  250.508301  2724.175049 -3688.720459   0.033447           0.000000  200.991455      100.991455
5  3124.208496  400.000000  2857.508382 -3688.720459   0.033447           0.033447  266.666667      200.000000
6  3224.208496  366.666667  2924.175049 -3688.720459   0.033447           0.033447  300.000000      200.000000
7  3232.283529  308.075033  3024.175049 -3688.720459   8.108398           0.033447  200.000081      100.000081
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:52:51]  --------------------------------------------------------------------------------
[07/18 16:52:51]  Iteration: 274 (0 solution, 273 counterexamples)
[07/18 16:52:57]  Generator returned sat in 3.084697 secs.
[07/18 16:52:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:52:58]  Improved number of small numbers from 68 to 70 out of a max of 89
[07/18 16:52:58]  Verifer returned sat in 0.408293 secs.
[07/18 16:52:58]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2624.174561    0.066162  2324.175049 -3688.720459   0.000000           0.000000  299.999512      199.999512
1  2624.174561    0.032959  2429.191650 -3688.720459   0.000000           0.000000  194.982910       99.999512
2  2674.691650  245.500000  2524.175049 -3688.720459   0.000000           0.000000  150.516602       50.516602
3  2674.691650  149.500000  2674.691650 -3688.720459   0.000000           0.000000    0.000000      -49.483398
4  2925.199951  250.508301  2725.175049 -3688.720459   0.016479           0.000000  200.008423      101.008423
5  3124.191528  399.000000  2857.508382 -3688.720459   0.016479           0.016479  266.666667      200.000000
6  3224.191528  366.666667  2924.175049 -3688.720459   0.016479           0.016479  300.000000      200.000000
7  3232.766561  308.575033  3024.175049 -3688.720459   8.591309           0.016479  200.000203      100.000203
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:52:58]  --------------------------------------------------------------------------------
[07/18 16:52:58]  Iteration: 275 (0 solution, 274 counterexamples)
[07/18 16:53:06]  Generator returned sat in 4.642218 secs.
[07/18 16:53:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:53:06]  Improved number of small numbers from 66 to 89 out of a max of 89
[07/18 16:53:06]  Verifer returned sat in 0.163728 secs.
[07/18 16:53:06]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2624.174561    0.065918  2324.175049 -3688.720459   0.000000           0.000000  299.999512      199.999512
1  2624.174561    0.032959  2424.175049 -3688.720459   0.000000           0.000000  199.999512       99.999512
2  2724.174805  299.999756  2524.175049 -3688.720459   0.000000           0.000000  199.999756       99.999756
3  2724.174805  199.991943  2724.174805 -3688.720459   0.000000           0.000000    0.000000       -0.000244
4  2925.166748  200.991943  2752.524658 -3688.720459   0.016602           0.000000  172.625488      100.975098
5  3118.208008  365.666748  2857.508301 -3688.720459   0.016602           0.016602  260.683105      194.016357
6  3224.191650  366.666748  2924.175049 -3688.720459   0.016602           0.016602  300.000000      200.000000
7  3291.858398  367.666748  3024.175049 -3688.720459   8.591309           0.016602  259.092041      159.092041
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:53:07]  --------------------------------------------------------------------------------
[07/18 16:53:07]  Iteration: 276 (0 solution, 275 counterexamples)
[07/18 16:53:15]  Generator returned sat in 4.550914 secs.
[07/18 16:53:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:53:15]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:53:15]  Verifer returned sat in 0.130037 secs.
[07/18 16:53:15]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2624.174561    0.065918  2324.175049 -3688.720459   0.000000           0.000000  299.999512      199.999512
1  2624.174561    0.032959  2424.175049 -3688.720459   0.000000           0.000000  199.999512       99.999512
2  2724.174805  299.999756  2524.175049 -3688.720459   0.000000           0.000000  199.999756       99.999756
3  2724.174805  199.016846  2724.174805 -3688.720459   0.000000           0.000000    0.000000       -0.000244
4  2924.191650  200.016846  2824.175049 -3688.720459   0.016602           0.000000  100.000000      100.000000
5  3024.691650  200.500000  2924.175049 -3688.720459   0.016602           0.016602  100.500000      100.500000
6  3125.691650  201.500000  3021.683350 -3688.720459   0.016602           0.016602  103.991699      101.500000
7  3224.199951  202.500000  3024.175049 -3688.720459   0.024902           0.016602  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:53:15]  --------------------------------------------------------------------------------
[07/18 16:53:15]  Iteration: 277 (0 solution, 276 counterexamples)
[07/18 16:53:27]  Generator returned sat in 8.687958 secs.
[07/18 16:53:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:53:28]  Improved gap from 135/8192 to 0
[07/18 16:53:28]  Improved number of small numbers from 47 to 90 out of a max of 90
[07/18 16:53:28]  Verifer returned sat in 0.239477 secs.
[07/18 16:53:28]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2424.158691    0.065430  2424.158447 -3788.703857   0.000000           0.000000    0.000244      -99.999756
1  2624.174805  200.016357  2624.142334 -3788.703857   0.000000           0.000000    0.032471        0.016357
2  2624.174805    0.016357  2624.158691 -3688.720459   0.000000           0.000000    0.016113       -0.000244
3  2924.191650  300.032959  2724.175049 -3688.720459   0.016602           0.000000  200.000000      200.000000
4  2924.191650  150.008301  2824.175049 -3688.720459   0.016602           0.016602  100.000000      100.000000
5  2924.191650    0.500000  2924.158447 -3688.720459   0.016602           0.016602    0.016602        0.000000
6  2924.675049    0.500000  2924.175049 -3589.220459   0.016602           0.016602    0.483398       -0.016602
7  2924.691650    0.500000  2924.675049 -3589.220459   0.016602           0.016602    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:53:28]  --------------------------------------------------------------------------------
[07/18 16:53:28]  Iteration: 278 (0 solution, 277 counterexamples)
[07/18 16:53:48]  Generator returned sat in 16.341071 secs.
[07/18 16:53:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:53:49]  Improved number of small numbers from 52 to 79 out of a max of 89
[07/18 16:53:49]  Verifer returned sat in 0.551442 secs.
[07/18 16:53:49]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   706.161377     0.065186   506.161377 -3589.220703     0.000000           0.000000  200.000000      199.999756
1   806.161377   300.000000   606.161377 -3589.220703     0.000000           0.000000  200.000000      199.999756
2   806.161377     0.032715   672.751953 -3589.220703     0.000000           0.000000  133.409424       99.999756
3   806.161377   133.376953   806.128677 -3589.220459     0.000000           0.000000    0.032700        0.000000
4  1006.194106   200.065430   806.161377 -3589.220459     0.032715           0.000000  200.000015      100.000015
5  1307.292236   501.098145   906.161621 -3589.220459   201.130615           0.032715  200.000000      100.000244
6  2093.349121   986.056885  1006.161392 -3589.220459   787.187744         201.130615  299.999985      200.000000
7  3473.467178  1680.118042  1106.161621 -3589.220459  2167.305664         787.187744  199.999893      100.000137
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:53:49]  --------------------------------------------------------------------------------
[07/18 16:53:49]  Iteration: 279 (0 solution, 278 counterexamples)
[07/18 16:53:59]  Generator returned sat in 6.954379 secs.
[07/18 16:54:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:54:00]  Improved gap from 67/8192 to 100
[07/18 16:54:00]  Improved number of small numbers from 58 to 86 out of a max of 90
[07/18 16:54:00]  Verifer returned sat in 0.557230 secs.
[07/18 16:54:00]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   706.161377    0.064941   503.128906 -3589.220703     0.000000           0.000000  203.032471      200.000000
1   806.161377  303.032471   606.161377 -3589.220703     0.000000           0.000000  200.000000      200.000000
2   806.161377    0.032715   616.161133 -3589.220703     0.000000           0.000000  190.000244      100.000000
3   806.161377  189.967529   706.161377 -3589.220703     0.000000           0.000000  100.000000        0.000000
4  1106.193848  400.032471   806.161377 -3589.220703     0.032715           0.000000  299.999756      199.999756
5  1307.726562  501.532471   906.161377 -3589.220703   201.565186           0.032715  200.000000      100.000000
6  1755.759155  648.032593  1006.161621 -3589.220703   549.597656         201.565186  199.999878      100.000122
7  2355.291992  799.532715  1106.161621 -3589.220703  1049.130127         549.597656  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:54:00]  --------------------------------------------------------------------------------
[07/18 16:54:00]  Iteration: 280 (0 solution, 279 counterexamples)
[07/18 16:54:17]  Generator returned sat in 12.478124 secs.
[07/18 16:54:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:54:17]  Improved gap from 0 to 100
[07/18 16:54:18]  Improved number of small numbers from 54 to 58 out of a max of 90
[07/18 16:54:18]  Verifer returned sat in 0.494951 secs.
[07/18 16:54:18]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   806.161377     0.064697   806.128906 -3889.220703     0.000000           0.000000    0.032471        0.000000
1   806.161377     0.016357   806.161377 -3889.220703     0.000000           0.000000    0.000000     -100.000000
2  1106.161133   299.999756  1006.161377 -3889.220703     0.000000           0.000000   99.999756       99.999756
3  1206.177612   200.016235  1106.161377 -3889.220703     0.016235           0.000000  100.000000      100.000000
4  1706.734436   600.556824  1106.161377 -3889.220703   400.573059           0.016235  200.000000      100.000000
5  2708.069672  1201.335236  1238.161377 -3889.220703  1301.908295         400.573059  168.000000      100.000000
6  4574.572525  2034.502853  1306.161377 -3889.220703  3068.411148        1301.908295  200.000000      100.000000
7  7626.826805  3252.254280  1406.161377 -3889.220703  5920.665527        3068.411148  299.999901      199.999901
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:54:18]  --------------------------------------------------------------------------------
[07/18 16:54:18]  Iteration: 281 (0 solution, 280 counterexamples)
[07/18 16:54:28]  Generator returned sat in 6.511486 secs.
[07/18 16:54:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:54:28]  Improved gap from 265/8192 to 100
[07/18 16:54:29]  Improved number of small numbers from 54 to 58 out of a max of 90
[07/18 16:54:29]  Verifer returned sat in 0.560886 secs.
[07/18 16:54:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.161133    0.064453   806.161133 -3889.220703    0.000000           0.000000  100.000000      100.000000
1   906.161133    0.032227   806.161133 -3889.220703    0.000000           0.000000  100.000000        0.000000
2  1206.160889  399.999756  1006.161133 -3889.220703    0.000000           0.000000  199.999756      199.999756
3  1206.193481  200.032349  1074.161133 -3889.220703    0.032349           0.000000  132.000000      100.000000
4  1442.709656  368.516174  1138.161133 -3889.220703  136.548523           0.032349  168.000000      100.000000
5  1791.467743  516.758087  1206.161133 -3889.220703  285.306610         136.548523  300.000000      200.000000
6  1950.346786  458.879044  1306.161133 -3889.220703  344.185654         285.306610  300.000000      200.000000
7  2112.286308  461.939522  1406.161133 -3889.220703  406.125244         344.185654  299.999931      199.999931
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:54:29]  --------------------------------------------------------------------------------
[07/18 16:54:29]  Iteration: 282 (0 solution, 281 counterexamples)
[07/18 16:54:38]  Generator returned sat in 5.760488 secs.
[07/18 16:54:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:54:39]  Improved number of small numbers from 30 to 63 out of a max of 89
[07/18 16:54:39]  Verifer returned sat in 0.677476 secs.
[07/18 16:54:39]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   806.169434    0.064453   606.169434 -3689.220947   0.000000           0.000000  200.000000      100.000214
1   806.169434    0.032471   806.161133 -3689.220947   0.000000           0.000000    0.008301        0.000214
2   906.177246  100.016113   906.169189 -3689.220947   0.000000           0.000000    0.008057        0.008026
3  1206.177246  300.008057  1005.841309 -3689.220947   0.008301           0.000000  200.327637      199.999725
4  1206.185547  200.335938  1006.169220 -3689.220947   0.016174           0.008301  200.000153      100.000153
5  1206.185547  100.504044  1206.169220 -3689.220947   0.016174           0.016174    0.000153        0.000153
6  1407.693481  201.508087  1206.169220 -3689.220947   0.016174           0.016174  201.508087      101.508087
7  1609.701569  403.516174  1306.169434 -3689.220947   3.532471           0.016174  299.999664      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:54:39]  --------------------------------------------------------------------------------
[07/18 16:54:39]  Iteration: 283 (0 solution, 282 counterexamples)
[07/18 16:54:47]  Generator returned sat in 4.309365 secs.
[07/18 16:54:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:54:47]  Improved gap from 33/2048 to 100
[07/18 16:54:47]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/18 16:54:47]  Verifer returned sat in 0.236498 secs.
[07/18 16:54:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   606.169434    0.064209   606.169434 -3689.220947     0.000000            0.00000    0.000000      -99.999756
1   906.169189  299.999756   806.169189 -3689.220947     0.000000            0.00000  100.000000      100.000000
2   906.169189    0.032227   806.169189 -3689.220947     0.000000            0.00000  100.000000        0.000000
3   987.201416  181.032227   987.169189 -3689.220947     0.000000            0.00000    0.032227      -18.967773
4  1259.217529  272.048340  1106.169189 -3689.220947    53.048340            0.00000  100.000000      100.000000
5  1581.765869  422.548340  1206.169189 -3689.220947   275.596680           53.04834  100.000000      100.000000
6  2104.814209  623.048340  1306.169189 -3689.220947   598.645020          275.59668  200.000000      200.000000
7  2687.862549  783.048340  1306.169189 -3689.220947  1181.693115          598.64502  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:54:48]  --------------------------------------------------------------------------------
[07/18 16:54:48]  Iteration: 284 (0 solution, 283 counterexamples)
[07/18 16:55:08]  Generator returned sat in 16.548671 secs.
[07/18 16:55:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:55:08]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:55:08]  Verifer returned sat in 0.109777 secs.
[07/18 16:55:08]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   606.169434     0.064209   606.169434 -3689.220947     0.000000           0.000000    0.000000      -99.999756
1   906.169189   299.999756   806.169189 -3689.220947     0.000000           0.000000  100.000000      100.000000
2   906.169189     0.032227   806.169189 -3689.220947     0.000000           0.000000  100.000000        0.000000
3   987.201416   181.032227   987.169189 -3689.220947     0.000000           0.000000    0.032227      -18.967773
4  1259.217529   272.048340  1006.169189 -3689.220947    31.000000           0.000000  222.048340      122.048340
5  1581.765869   544.596680  1106.169189 -3689.220947   275.596680          31.000000  200.000000      100.000000
6  2471.459229  1089.693359  1306.169189 -3689.220947   965.290039         275.596680  200.000000      200.000000
7  4451.345947  2179.886719  1306.169189 -3689.220947  2945.176514         965.290039  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:55:08]  --------------------------------------------------------------------------------
[07/18 16:55:08]  Iteration: 285 (0 solution, 284 counterexamples)
[07/18 16:55:15]  Generator returned sat in 3.693242 secs.
[07/18 16:55:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:55:16]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 16:55:16]  Verifer returned sat in 0.113859 secs.
[07/18 16:55:16]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   607.185303     0.064209   607.185303 -3689.221191     0.000000           0.000000    0.000000      -98.983887
1   906.169189   298.983887   806.169189 -3689.221191     0.000000           0.000000  100.000000      100.000000
2   906.169189     0.032227   806.169189 -3689.221191     0.000000           0.000000  100.000000        0.000000
3   906.185303   100.016113   906.169189 -3689.221191     0.000000           0.000000    0.016113      -99.983887
4  1206.185303   300.016113  1006.169189 -3689.221191     0.016113           0.000000  200.000000      100.000000
5  1606.717529   600.532227  1106.169189 -3689.221191   300.548096           0.016113  200.000244      100.000244
6  2608.281738  1201.564453  1306.168945 -3689.221191  1102.112549         300.548096  200.000244      200.000000
7  4811.910400  2403.628906  1306.169189 -3689.221191  3305.741211        1102.112549  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:55:16]  --------------------------------------------------------------------------------
[07/18 16:55:16]  Iteration: 286 (0 solution, 285 counterexamples)
[07/18 16:55:24]  Generator returned sat in 4.900824 secs.
[07/18 16:55:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:55:25]  Improved number of small numbers from 64 to 85 out of a max of 89
[07/18 16:55:25]  Verifer returned sat in 0.329683 secs.
[07/18 16:55:25]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   706.168945     0.063965   706.168945 -3689.221436     0.000000           0.000000    0.000000        0.000000
1   906.168701   199.999756   806.168701 -3689.221436     0.000000           0.000000  100.000000       99.999756
2   906.168701     0.032227   906.164795 -3689.221436     0.000000           0.000000    0.003906       -0.000244
3   906.172852     0.008057   906.168945 -3689.221436     0.000000           0.000000    0.003906      -99.996094
4  1306.681030   400.512085  1006.168945 -3689.221436     0.512207           0.000000  299.999878      199.999878
5  1808.205322   801.524170  1106.168945 -3689.221436   402.036377           0.512207  300.000000      200.000000
6  3111.753662  1603.548340  1306.168701 -3689.221436  1605.584717         402.036377  200.000244      200.000000
7  6119.350098  3207.596680  1306.169189 -3689.221436  4613.180664        1605.584717  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:55:25]  --------------------------------------------------------------------------------
[07/18 16:55:25]  Iteration: 287 (0 solution, 286 counterexamples)
[07/18 16:55:32]  Generator returned sat in 3.550292 secs.
[07/18 16:55:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:55:32]  Improved number of small numbers from 81 to 81 out of a max of 89
[07/18 16:55:32]  Verifer returned sat in 0.191110 secs.
[07/18 16:55:32]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   706.168945     0.063965   706.168945 -3689.221436     0.000000           0.000000    0.000000        0.000000
1   906.168701   199.999756   806.168701 -3689.221436     0.000000           0.000000  100.000000       99.999756
2   906.168701     0.032227   806.168945 -3689.221436     0.000000           0.000000   99.999756       -0.000244
3   939.510335   133.341390   906.168945 -3689.221436     0.000000           0.000000   33.341390      -66.658610
4  1306.681030   400.512085  1006.168945 -3689.221436     0.512207           0.000000  299.999878      199.999878
5  1808.205322   801.524170  1106.168945 -3689.221436   402.036377           0.512207  300.000000      200.000000
6  3111.753662  1603.548340  1306.168701 -3689.221436  1605.584717         402.036377  200.000244      200.000000
7  6119.350098  3207.596680  1306.169189 -3689.221436  4613.180664        1605.584717  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:55:33]  --------------------------------------------------------------------------------
[07/18 16:55:33]  Iteration: 288 (0 solution, 287 counterexamples)
[07/18 16:56:05]  Generator returned sat in 28.921976 secs.
[07/18 16:56:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:56:05]  Improved gap from 131/8192 to 100
[07/18 16:56:06]  Improved number of small numbers from 37 to 90 out of a max of 90
[07/18 16:56:06]  Verifer returned sat in 0.260363 secs.
[07/18 16:56:06]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.164551    0.063721   806.164551 -3789.217041   0.000000           0.000000  100.000000      100.000000
1   906.164551    0.015869   806.164795 -3789.217041   0.000000           0.000000   99.999756        0.000000
2  1106.164551  299.999756   906.164551 -3789.217041   0.000000           0.000000  200.000000      100.000000
3  1106.164551    0.016113  1006.164551 -3789.217041   0.000000           0.000000  100.000000        0.000000
4  1206.164551  200.000000  1106.164795 -3789.217041   0.000000           0.000000   99.999756        0.000000
5  1406.164795  300.000000  1206.172607 -3789.217041   0.000000           0.000000  199.992188      100.000244
6  1506.180664  300.008057  1306.164551 -3789.217041   0.015869           0.000000  200.000244      100.000244
7  1756.688477  450.508057  1506.164551 -3789.217041  50.524170           0.015869  199.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:56:06]  --------------------------------------------------------------------------------
[07/18 16:56:06]  Iteration: 289 (0 solution, 288 counterexamples)
[07/18 16:56:13]  Generator returned sat in 4.129403 secs.
[07/18 16:56:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:56:14]  Improved number of small numbers from 57 to 89 out of a max of 89
[07/18 16:56:14]  Verifer returned sat in 0.220486 secs.
[07/18 16:56:14]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.196533     0.063721   806.164551 -3789.217041     0.000000           0.000000  100.031982      100.031982
1   906.196533     0.031982   906.164307 -3789.217041     0.000000           0.000000    0.032227        0.031982
2  1106.164307   200.000000  1006.164551 -3789.217041     0.000000           0.000000   99.999756       99.999756
3  1206.196289   200.031738  1022.164551 -3789.217041     0.031738           0.000000  184.000000      100.000000
4  1330.728027   308.531738  1106.164551 -3789.217041     0.031738           0.031738  224.531738      124.531738
5  1923.260010   817.063721  1269.164551 -3789.217041   517.095459           0.031738  137.000000      100.000000
6  2735.323730   949.063721  1406.164551 -3789.217041  1129.159424         517.095459  199.999756      199.999756
7  3676.887695  1141.563721  1406.164551 -3789.217041  2070.723145        1129.159424  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:56:14]  --------------------------------------------------------------------------------
[07/18 16:56:14]  Iteration: 290 (0 solution, 289 counterexamples)
[07/18 16:56:21]  Generator returned sat in 3.653009 secs.
[07/18 16:56:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:56:21]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/18 16:56:21]  Verifer returned sat in 0.143633 secs.
[07/18 16:56:22]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.196533     0.063721   780.568359 -3789.217041     0.000000           0.000000  125.628174      100.031982
1   906.196533     0.031738   806.164551 -3789.217041     0.000000           0.000000  100.031982        0.031982
2  1106.164062   299.999512  1006.164551 -3789.217041     0.000000           0.000000   99.999512       99.999512
3  1206.196289   200.031738  1013.632324 -3789.217041     0.031738           0.000000  192.532227      100.000000
4  1330.727783   317.063721  1206.164551 -3789.217041     0.031738           0.031738  124.531494      124.531494
5  1923.260010   717.063721  1269.164551 -3789.217041   517.095459           0.031738  137.000000      100.000000
6  2635.323730   849.063721  1406.164551 -3789.217041  1129.159180         517.095459  100.000000      100.000000
7  3581.153564  1045.829834  1406.164551 -3789.217041  1974.989014        1129.159180  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:56:22]  --------------------------------------------------------------------------------
[07/18 16:56:22]  Iteration: 291 (0 solution, 290 counterexamples)
[07/18 16:56:30]  Generator returned sat in 5.293550 secs.
[07/18 16:56:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:56:31]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 16:56:31]  Verifer returned sat in 0.199687 secs.
[07/18 16:56:31]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.196533     0.063721   706.164551 -3789.217041     0.000000            0.00000  200.031982      100.031982
1   906.196533     0.031738   806.164551 -3789.217041     0.000000            0.00000  100.031982        0.031982
2  1106.163818   299.999268   906.164551 -3789.217041     0.000000            0.00000  199.999268       99.999268
3  1934.823730  1028.659180  1106.164551 -3789.217041   728.659180            0.00000  100.000000      100.000000
4  2035.323730   200.500000  1206.164551 -3789.217041   728.659180          728.65918  100.500000      100.500000
5  2535.323730   600.500000  1305.831055 -3789.217041  1129.159180          728.65918  100.333496      100.000000
6  2635.323486   200.333252  1406.164551 -3789.217041  1129.159180         1129.15918   99.999756       99.999756
7  3035.656982   500.333252  1406.164551 -3789.217041  1429.492432         1129.15918  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:56:31]  --------------------------------------------------------------------------------
[07/18 16:56:31]  Iteration: 292 (0 solution, 291 counterexamples)
[07/18 16:56:40]  Generator returned sat in 5.142931 secs.
[07/18 16:56:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:56:40]  Improved number of small numbers from 60 to 64 out of a max of 89
[07/18 16:56:40]  Verifer returned sat in 0.446521 secs.
[07/18 16:56:40]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1106.164551    0.063477   906.164551 -3789.217285    0.000000           0.000000  200.000000      200.000000
1  1106.164551    0.031982  1006.164551 -3789.217285    0.000000           0.000000  100.000000      100.000000
2  1306.164551  300.000000  1106.164551 -3789.217285    0.000000           0.000000  200.000000      200.000000
3  1306.196411  200.031860  1106.164551 -3789.217285    0.031860           0.000000  200.000000      100.000000
4  1406.728271  300.531860  1206.164551 -3789.217285    0.031860           0.031860  200.531860      100.531860
5  1656.994202  450.797791  1306.164551 -3789.217285   50.829651           0.031860  300.000000      200.000000
6  1908.291992  551.297791  1406.164551 -3789.217285  202.127441          50.829651  300.000000      200.000000
7  2310.089783  701.797791  1506.164551 -3789.217285  603.925049         202.127441  200.000183      100.000183
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 16:56:41]  --------------------------------------------------------------------------------
[07/18 16:56:41]  Iteration: 293 (0 solution, 292 counterexamples)
[07/18 16:56:58]  Generator returned sat in 13.587426 secs.
[07/18 16:56:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:56:58]  Improved gap from 1/1100 to 100
[07/18 16:56:58]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 16:56:58]  Verifer returned sat in 0.152339 secs.
[07/18 16:56:58]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.164307     0.063477   906.132568 -3789.201172     0.000000           0.000000    0.031738        0.015869
1   906.164307     0.031738   906.148438 -3789.201172     0.000000           0.000000    0.015869      -99.984131
2  1306.148438   400.000000  1106.148438 -3789.201172     0.000000           0.000000  200.000000      200.000000
3  1306.164307   200.015869  1106.148438 -3789.201172     0.015869           0.000000  200.000000      100.000000
4  1506.696045   400.531738  1206.154785 -3789.201172     0.547607           0.015869  299.993652      200.000000
5  2008.265869   801.563477  1306.148438 -3789.201172   502.117432           0.547607  200.000000      100.000000
6  3411.892822  1603.626953  1406.148438 -3789.201172  1805.744385         502.117432  200.000000      100.000000
7  6419.646729  3207.753906  1506.148438 -3789.201172  4613.498291        1805.744385  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:56:59]  --------------------------------------------------------------------------------
[07/18 16:56:59]  Iteration: 294 (0 solution, 293 counterexamples)
[07/18 16:57:18]  Generator returned sat in 15.940690 secs.
[07/18 16:57:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:57:18]  Improved number of small numbers from 74 to 89 out of a max of 89
[07/18 16:57:18]  Verifer returned sat in 0.158308 secs.
[07/18 16:57:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   906.164307    0.062988   906.132568 -3789.201172     0.000000           0.000000    0.031738        0.016357
1   906.164307    0.031738   906.147949 -3789.201172     0.000000           0.000000    0.016357      -99.983643
2  1306.147949  400.000000  1106.147949 -3789.201172     0.000000           0.000000  200.000000      200.000000
3  1404.671875  298.523926  1106.148193 -3789.201172    98.523926           0.000000  199.999756      100.000000
4  1605.203857  400.531738  1306.147949 -3789.201172    99.585693          98.523926  199.470215      199.470215
5  2008.265381  602.531738  1306.147949 -3789.201172   502.117432          99.585693  200.000000      100.000000
6  2512.797119  704.531738  1406.148193 -3789.201172   906.648926         502.117432  200.000000      100.000244
7  3169.328857  856.531738  1506.148193 -3789.201172  1463.180664         906.648926  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:57:19]  --------------------------------------------------------------------------------
[07/18 16:57:19]  Iteration: 295 (0 solution, 294 counterexamples)
[07/18 16:57:29]  Generator returned sat in 6.980910 secs.
[07/18 16:57:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:57:30]  Improved number of small numbers from 36 to 49 out of a max of 89
[07/18 16:57:30]  Verifer returned sat in 0.893699 secs.
[07/18 16:57:30]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   904.156494     0.062988   904.125122 -3787.178345     0.000000           0.000000    0.031372        0.031372
1  1004.156616   100.031494  1004.125000 -3787.178345     0.000000           0.000000    0.031616        0.031494
2  1304.125000   300.000000  1104.125122 -3787.178345     0.000000           0.000000  199.999878      199.999878
3  1304.156616   200.031494  1104.125122 -3787.178345     0.031250           0.000000  200.000244      100.000244
4  1605.203613   501.047241  1209.125000 -3787.178345   101.078857           0.031250  294.999756      199.999634
5  2267.774719   957.570862  1306.147949 -3787.178345   663.649597         101.078857  297.977173      200.000000
6  3609.176666  1639.379120  1404.125366 -3787.178345  2005.051544         663.649597  199.999756      100.000000
7  6169.245834  2760.068924  1506.147949 -3787.178345  4465.120605        2005.051544  197.977280      100.000107
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:57:31]  --------------------------------------------------------------------------------
[07/18 16:57:31]  Iteration: 296 (0 solution, 295 counterexamples)
[07/18 16:57:38]  Generator returned sat in 4.080082 secs.
[07/18 16:57:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:57:38]  Improved gap from 129/16384 to 100
[07/18 16:57:39]  Improved number of small numbers from 28 to 46 out of a max of 90
[07/18 16:57:39]  Verifer returned sat in 0.624869 secs.
[07/18 16:57:39]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   403.019287     0.062988   402.987651 -3787.178345     0.000000           0.000000    0.031636        0.000142
1   403.019287     0.015869   403.019287 -3787.178345     0.000000           0.000000    0.000000      -99.999858
2   603.019043   199.999756   503.019287 -3787.178345     0.000000           0.000000   99.999756       -0.000103
3   702.987793   199.968506   603.019146 -3787.178345     0.000000           0.000000   99.968647       -0.031353
4   903.034893   300.015747   803.019146 -3787.178345     0.015747           0.000000  100.000000      100.000000
5  1254.058513   451.023621   903.019146 -3787.178345   151.039368           0.015747  200.000000      200.000000
6  1731.593944   677.535431   903.019146 -3787.178345   528.574799         151.039368  300.000000      200.000000
7  2448.897090  1017.303146  1003.019287 -3787.178345  1145.878174         528.574799  299.999630      199.999771
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:57:39]  --------------------------------------------------------------------------------
[07/18 16:57:39]  Iteration: 297 (0 solution, 296 counterexamples)
[07/18 16:57:49]  Generator returned sat in 6.528720 secs.
[07/18 16:57:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:57:50]  Improved number of small numbers from 31 to 43 out of a max of 89
[07/18 16:57:50]  Verifer returned sat in 0.724020 secs.
[07/18 16:57:50]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   403.027100     0.062988   403.019146 -3787.178467     0.000000           0.000000    0.007954        0.007832
1   403.027100     0.004150   403.026855 -3787.178467     0.000000           0.000000    0.000244      -99.992168
2   603.018799   199.991943   602.972046 -3787.178345     0.000000           0.000000    0.046753       -0.000347
3   702.987793   100.015747   603.019146 -3787.178345     0.000000           0.000000   99.968647       -0.031353
4   903.034893   300.015747   803.019146 -3787.178345     0.015747           0.000000  100.000000      100.000000
5  1254.058513   451.023621   903.019146 -3787.178345   151.039368           0.015747  200.000000      200.000000
6  1731.593944   677.535431   903.019146 -3787.178345   528.574799         151.039368  300.000000      200.000000
7  2448.897090  1017.303146  1003.019287 -3787.178345  1145.878174         528.574799  299.999630      199.999771
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:57:51]  --------------------------------------------------------------------------------
[07/18 16:57:51]  Iteration: 298 (0 solution, 297 counterexamples)
[07/18 16:57:58]  Generator returned sat in 4.220517 secs.
[07/18 16:57:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:57:59]  Improved gap from 129/8192 to 100
[07/18 16:57:59]  Improved number of small numbers from 21 to 39 out of a max of 90
[07/18 16:57:59]  Verifer returned sat in 0.860243 secs.
[07/18 16:57:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   225.483887     0.062744   225.452148 -3787.178345     0.000000           0.000000    0.031738        0.000172
1   225.483887     0.015869   225.483887 -3787.178345     0.000000           0.000000    0.000000      -99.999828
2   325.499512   100.015625   325.483715 -3787.178345     0.000000           0.000000    0.015797      -99.984203
3   625.499462   300.015747   425.483715 -3787.178345     0.015747           0.000000  200.000000      100.000000
4   876.523082   451.023621   525.483715 -3787.178345    51.039368           0.015747  300.000000      200.000000
5  1254.058513   677.535431   625.483715 -3787.178345   428.574799          51.039368  200.000000      100.000000
6  2071.361660  1017.303146   725.483715 -3787.178345  1045.877945         428.574799  300.000000      200.000000
7  3298.316379  1526.954720   825.483887 -3787.178345  2172.832764        1045.877945  299.999729      199.999901
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:58:00]  --------------------------------------------------------------------------------
[07/18 16:58:00]  Iteration: 299 (0 solution, 298 counterexamples)
[07/18 16:58:17]  Generator returned sat in 13.671734 secs.
[07/18 16:58:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:58:17]  Improved gap from 257/8192 to 0
[07/18 16:58:18]  Improved number of small numbers from 58 to 90 out of a max of 90
[07/18 16:58:18]  Verifer returned sat in 0.318674 secs.
[07/18 16:58:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   325.483398    0.062744   125.483398 -3787.178223   0.000000           0.000000  200.000000      100.000000
1   325.483398    0.031250   225.483398 -3787.178223   0.000000           0.000000  100.000000        0.000000
2   325.483398   99.968506   325.483398 -3721.146973   0.000000           0.000000    0.000000      -33.968750
3   459.483398  134.000000   459.452148 -3721.146973   0.000000           0.000000    0.031250        0.031250
4   660.452148  201.000000   559.451904 -3721.146973   0.031494           0.000000  100.968750      100.968506
5   660.452148    1.000000   658.920654 -3721.146973   0.031494           0.031494    1.500000        0.968506
6   660.452148    1.500000   660.389160 -3622.115479   0.031494           0.031494    0.031494        0.000000
7   662.670654    2.250000   660.420654 -3622.115479   0.031494           0.031494    2.218506      -97.781494
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:58:18]  --------------------------------------------------------------------------------
[07/18 16:58:18]  Iteration: 300 (0 solution, 299 counterexamples)
[07/18 16:58:34]  Generator returned sat in 12.406083 secs.
[07/18 16:58:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:58:34]  Improved gap from 0 to 100
[07/18 16:58:35]  Improved number of small numbers from 36 to 54 out of a max of 90
[07/18 16:58:35]  Verifer returned sat in 0.643623 secs.
[07/18 16:58:35]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -226.585938     0.062500  -326.648462 -3787.178223     0.000000           0.000000  100.062524       99.999780
1  -226.585938     0.031250  -326.585693 -3787.178223     0.000000           0.000000   99.999756       -0.000220
2  -126.585693   200.000000  -226.585693 -3787.178223     0.000000           0.000000  100.000000        0.000024
3   -26.585693   200.000000  -126.585718 -3787.178223     0.000000           0.000000  100.000024        0.000024
4   173.445654   300.031372    73.414282 -3787.178223     0.031372           0.000000  100.000000      100.000000
5   525.492712   452.047058    73.414282 -3787.178223   152.078430           0.031372  300.000000      200.000000
6   905.563300   680.070587   173.414282 -3787.178223   532.149017         152.078430  200.000000      100.000000
7  1727.669180  1022.105881   273.414307 -3787.178223  1254.254883         532.149017  199.999991      100.000015
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:58:35]  --------------------------------------------------------------------------------
[07/18 16:58:35]  Iteration: 301 (0 solution, 300 counterexamples)
[07/18 16:58:43]  Generator returned sat in 4.188041 secs.
[07/18 16:58:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:58:43]  Improved number of small numbers from 49 to 49 out of a max of 89
[07/18 16:58:43]  Verifer returned sat in 0.516310 secs.
[07/18 16:58:43]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -226.585938     0.062500  -326.617065 -3787.178223     0.000000           0.000000  100.031128       99.999780
1  -226.585938     0.031250  -326.585693 -3787.178223     0.000000           0.000000   99.999756       -0.000220
2  -126.585693   200.000000  -126.585718 -3787.178223     0.000000           0.000000    0.000024        0.000024
3   -26.585693   100.000024  -126.585718 -3787.178223     0.000000           0.000000  100.000024        0.000024
4   173.445654   300.031372    73.414282 -3787.178223     0.031372           0.000000  100.000000      100.000000
5   525.492712   452.047058    73.414282 -3787.178223   152.078430           0.031372  300.000000      200.000000
6   905.563300   680.070587   173.414282 -3787.178223   532.149017         152.078430  200.000000      100.000000
7  1727.669180  1022.105881   273.414307 -3787.178223  1254.254883         532.149017  199.999991      100.000015
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:58:44]  --------------------------------------------------------------------------------
[07/18 16:58:44]  Iteration: 302 (0 solution, 301 counterexamples)
[07/18 16:58:51]  Generator returned sat in 3.977229 secs.
[07/18 16:58:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:58:52]  Improved number of small numbers from 27 to 49 out of a max of 89
[07/18 16:58:52]  Verifer returned sat in 0.746441 secs.
[07/18 16:58:52]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1605.931152     0.062012 -1805.931152 -2307.833008     0.000000           0.000000  200.000000      199.999780
1 -1605.931152     0.031006 -1705.931152 -2307.833008     0.000000           0.000000  100.000000       99.999780
2 -1605.931152    99.999756 -1605.961914 -2307.832926     0.000000           0.000000    0.030762       -0.000138
3 -1405.899658   200.062256 -1505.931015 -2307.832926     0.031128           0.000000  100.000228      100.000228
4 -1203.806503   302.093384 -1405.931015 -2307.832926   102.124512           0.031128  100.000000      100.000000
5  -848.666427   455.140076 -1405.931015 -2307.832926   357.264587         102.124512  200.000000      100.000000
6  -363.956314   684.710114 -1305.931015 -2307.832926   641.974701         357.264587  300.000000      200.000000
7   365.108857  1029.065170 -1205.930908 -2307.832926  1271.040039         641.974701  299.999726      199.999832
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:58:53]  --------------------------------------------------------------------------------
[07/18 16:58:53]  Iteration: 303 (0 solution, 302 counterexamples)
[07/18 16:59:14]  Generator returned sat in 18.312971 secs.
[07/18 16:59:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:59:15]  Improved gap from 127/8192 to 100
[07/18 16:59:15]  Improved number of small numbers from 28 to 90 out of a max of 90
[07/18 16:59:15]  Verifer returned sat in 0.297364 secs.
[07/18 16:59:15]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1505.931152    0.061768 -1705.931152 -2307.833008     0.000000           0.000000  200.000000      200.000000
1 -1505.931152    0.031006 -1605.931152 -2307.833008     0.000000           0.000000  100.000000      100.000000
2 -1505.931152    0.015625 -1605.931152 -2307.833008     0.000000           0.000000  100.000000        0.000000
3 -1305.899658  300.031494 -1504.889648 -2307.833008     0.031006           0.000000  198.958984      100.000488
4 -1103.806396  401.052246 -1405.931152 -2307.833008   102.124268           0.031006  200.000488      100.000488
5  -802.254639  501.552246 -1205.931152 -2307.833008   203.676514         102.124268  200.000000      200.000000
6  -300.202393  702.052246 -1205.931152 -2307.833008   705.728760         203.676514  200.000000      100.000000
7   351.829102  852.031494 -1105.931152 -2307.833008  1257.759766         705.728760  200.000488      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:59:15]  --------------------------------------------------------------------------------
[07/18 16:59:15]  Iteration: 304 (0 solution, 303 counterexamples)
[07/18 16:59:31]  Generator returned sat in 12.080622 secs.
[07/18 16:59:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:59:31]  Improved number of small numbers from 53 to 89 out of a max of 89
[07/18 16:59:31]  Verifer returned sat in 0.212406 secs.
[07/18 16:59:31]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1505.931152    0.061768 -1755.923340 -2307.833008     0.000000           0.000000  249.992188      200.000000
1 -1505.931152    0.008057 -1705.931152 -2307.833008     0.000000           0.000000  200.000000      100.000000
2 -1505.931152    0.007812 -1605.931152 -2307.833008     0.000000           0.000000  100.000000        0.000000
3 -1305.899902  300.031250 -1505.931152 -2307.833008     0.007812           0.000000  200.023438      100.023438
4 -1105.915527  400.007812 -1405.931152 -2307.833008     0.015869           0.007812  299.999756      199.999756
5  -905.911377  500.003906 -1205.931152 -2307.833008   100.019775           0.015869  200.000000      200.000000
6  -455.909424  650.001953 -1129.931152 -2307.833008   550.021729         100.019775  124.000000      100.000000
7   121.091553  701.000977 -1105.931152 -2307.833008  1027.022461         550.021729  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 16:59:32]  --------------------------------------------------------------------------------
[07/18 16:59:32]  Iteration: 305 (0 solution, 304 counterexamples)
[07/18 16:59:58]  Generator returned sat in 23.118183 secs.
[07/18 16:59:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:59:59]  Improved gap from 0 to 100
[07/18 16:59:59]  Improved number of small numbers from 33 to 90 out of a max of 90
[07/18 16:59:59]  Verifer returned sat in 0.250841 secs.
[07/18 16:59:59]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2455.895752    0.061523 -2455.926758 -2307.833252    0.000000           0.000000    0.031006        0.030762
1 -2455.895752    0.015381 -2455.895752 -2307.833252    0.000000           0.000000    0.000000      -99.969238
2 -2055.926514  399.969238 -2255.926758 -2307.833252    0.000000           0.000000  200.000244      200.000000
3 -2055.864990  200.061768 -2255.926514 -2307.833252    0.015381           0.000000  200.046143      100.046143
4 -2055.864990  200.031006 -2155.926514 -2307.833252    0.015381           0.015381  100.046143        0.046143
5 -1704.457275  451.453857 -2055.895752 -2307.833252   51.469238           0.015381  299.969238      200.000000
6 -1678.684082  325.742432 -1955.926514 -2307.833252   51.469238          51.469238  225.773193      125.773193
7 -1452.957275  451.500000 -1855.926514 -2307.833252  202.968994          51.469238  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:59:59]  --------------------------------------------------------------------------------
[07/18 16:59:59]  Iteration: 306 (0 solution, 305 counterexamples)
[07/18 17:00:23]  Generator returned sat in 19.621701 secs.
[07/18 17:00:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:00:23]  Improved number of small numbers from 77 to 89 out of a max of 89
[07/18 17:00:23]  Verifer returned sat in 0.173559 secs.
[07/18 17:00:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2380.903320    0.061279 -2455.926758 -2307.833252    0.000000           0.000000   75.023438       75.023193
1 -2380.903320    0.015381 -2380.903320 -2307.833252    0.000000           0.000000    0.000000      -24.976807
2 -2055.926514  324.976807 -2355.926514 -2307.833252    0.000000           0.000000  300.000000      200.000000
3 -2055.864990  300.061523 -2255.926514 -2307.833252    0.015381           0.000000  200.046143      100.046143
4 -2055.864990  150.530762 -2155.926514 -2307.833252    0.015381           0.015381  100.046143        0.046143
5 -1704.457520  451.453613 -1956.380371 -2307.833252   51.469238           0.015381  200.453613      199.999756
6 -1678.684326  226.226807 -1955.926514 -2307.833252   51.469238          51.469238  225.772949      125.772949
7 -1302.957275  601.500000 -1855.926514 -2307.833252  352.968994          51.469238  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:00:23]  --------------------------------------------------------------------------------
[07/18 17:00:23]  Iteration: 307 (0 solution, 306 counterexamples)
[07/18 17:00:33]  Generator returned sat in 5.632740 secs.
[07/18 17:00:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:00:33]  Improved gap from 8129/8192 to 0
[07/18 17:00:33]  Improved number of small numbers from 56 to 90 out of a max of 90
[07/18 17:00:33]  Verifer returned sat in 0.237527 secs.
[07/18 17:00:33]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2380.903320    0.061035 -2480.903564 -2382.856445   0.000000           0.000000  100.000244        0.000244
1 -2380.903320    0.015137 -2380.903320 -2382.856445   0.000000           0.000000    0.000000      -99.999756
2 -1982.395752  398.507568 -2180.903564 -2382.856445   0.000000           0.000000  198.507812      198.507812
3 -1982.395752  198.507812 -2080.903564 -2382.856445   0.000000           0.000000   98.507812       98.507812
4 -1880.895752  200.007812 -1980.903564 -2382.856445   0.007568           0.000000  100.000244      100.000244
5 -1880.895752    0.500000 -1881.911133 -2382.856445   0.007568           0.007568    1.007812        0.000244
6 -1879.903564    2.000000 -1880.903320 -2283.848877   0.007568           0.007568    0.992188        0.000000
7 -1877.395752    3.500000 -1879.911133 -2283.848877   0.007568           0.007568    2.507812      -97.492188
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:00:33]  --------------------------------------------------------------------------------
[07/18 17:00:33]  Iteration: 308 (0 solution, 307 counterexamples)
[07/18 17:00:46]  Generator returned sat in 8.654523 secs.
[07/18 17:00:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:00:46]  Improved gap from 127/128 to 0
[07/18 17:00:46]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/18 17:00:46]  Verifer returned sat in 0.300137 secs.
[07/18 17:00:46]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2730.931396    0.060791 -2930.931396 -2382.856689    0.000000           0.000000  200.000000      100.000000
1 -2730.931396    0.014893 -2730.931396 -2382.856689    0.000000           0.000000    0.000000        0.000000
2 -2430.931641  299.999756 -2730.931396 -2382.856689    0.000000           0.000000  299.999756      199.999756
3 -2430.931396  300.000000 -2630.931396 -2382.856689    0.000000           0.000000  200.000000      100.000000
4 -2029.431396  601.500000 -2430.931641 -2382.856689  301.492432           0.000000  100.007812      100.007568
5 -2029.431396    0.500000 -2333.431641 -2382.856689  301.492432         301.492432    2.507812        0.007568
6 -2029.431396    2.500000 -2330.931396 -2283.849121  301.492432         301.492432    0.007568       -0.984863
7 -2022.938965    6.500000 -2329.938965 -2283.849121  301.492432         301.492432    5.507568      -94.492432
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:00:46]  --------------------------------------------------------------------------------
[07/18 17:00:46]  Iteration: 309 (0 solution, 308 counterexamples)
[07/18 17:01:26]  Generator returned sat in 35.724973 secs.
[07/18 17:01:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:01:27]  Improved gap from 0 to 100
[07/18 17:01:27]  Improved number of small numbers from 35 to 90 out of a max of 90
[07/18 17:01:27]  Verifer returned sat in 0.539588 secs.
[07/18 17:01:27]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2881.442627    0.060791 -2881.473145 -2581.940186    0.000000           0.000000    0.030518        0.015381
1 -2881.442627    0.015381 -2881.457764 -2581.940186    0.000000           0.000000    0.015137      -99.984619
2 -2481.458008  399.999756 -2681.458008 -2581.940186    0.000000           0.000000  200.000000      200.000000
3 -2481.458008  198.954346 -2681.457764 -2581.940186    0.000000           0.000000  199.999756      100.000000
4 -2481.458008  199.984863 -2548.442627 -2581.940186    0.000000           0.000000   66.984619        0.000000
5 -2281.442627  267.000000 -2481.458008 -2581.940186    0.015137           0.000000  200.000244      100.000244
6 -2112.942871  368.500000 -2381.457764 -2581.940186   68.515137           0.015137  199.999756      100.000000
7 -1792.942627  520.000000 -2281.457764 -2581.940186  188.515381          68.515137  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:01:27]  --------------------------------------------------------------------------------
[07/18 17:01:27]  Iteration: 310 (0 solution, 309 counterexamples)
[07/18 17:01:35]  Generator returned sat in 4.121260 secs.
[07/18 17:01:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:01:35]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:01:35]  Verifer returned sat in 0.130125 secs.
[07/18 17:01:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2881.442627    0.060791 -2881.473145 -2581.940186    0.000000           0.000000    0.030518        0.015381
1 -2881.442627    0.015381 -2881.457764 -2581.940186    0.000000           0.000000    0.015137      -99.984619
2 -2481.458008  399.999756 -2681.458008 -2581.940186    0.000000           0.000000  200.000000      200.000000
3 -2481.458008  197.954346 -2681.457764 -2581.940186    0.000000           0.000000  199.999756      100.000000
4 -2481.458008  199.984863 -2548.442627 -2581.940186    0.000000           0.000000   66.984619        0.000000
5 -2280.942627  267.500000 -2481.458008 -2581.940186    0.015137           0.000000  200.500244      100.500244
6 -2112.442871  369.000000 -2381.457764 -2581.940186   68.515137           0.015137  200.499756      100.500000
7 -1792.442627  520.500000 -2281.457764 -2581.940186  189.015381          68.515137  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:01:36]  --------------------------------------------------------------------------------
[07/18 17:01:36]  Iteration: 311 (0 solution, 310 counterexamples)
[07/18 17:01:44]  Generator returned sat in 5.187972 secs.
[07/18 17:01:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:01:45]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:01:45]  Verifer returned sat in 0.114343 secs.
[07/18 17:01:45]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2881.442871    0.060791 -2881.473389 -2581.940186    0.000000           0.000000    0.030518        0.015381
1 -2881.442871    0.015137 -2881.458008 -2581.940186    0.000000           0.000000    0.015137      -99.984619
2 -2481.458252  399.999756 -2681.458252 -2581.940186    0.000000           0.000000  200.000000      200.000000
3 -2481.458252  195.954346 -2681.458008 -2581.940186    0.000000           0.000000  199.999756      100.000000
4 -2481.458252  199.984863 -2548.442871 -2581.940186    0.000000           0.000000   66.984619        0.000000
5 -2279.942871  268.500000 -2481.458252 -2581.940186    0.015137           0.000000  201.500244      101.500244
6 -2111.443115  370.000000 -2381.458008 -2581.940186   68.515137           0.015137  201.499756      101.500000
7 -1791.442871  521.500000 -2281.458008 -2581.940186  190.015381          68.515137  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:01:45]  --------------------------------------------------------------------------------
[07/18 17:01:45]  Iteration: 312 (0 solution, 311 counterexamples)
[07/18 17:01:54]  Generator returned sat in 4.775990 secs.
[07/18 17:01:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:01:54]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:01:54]  Verifer returned sat in 0.144431 secs.
[07/18 17:01:54]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2881.450928    0.060547 -2981.458496 -2581.940186    0.000000           0.000000  100.007568        0.007568
1 -2881.450928    0.007568 -2881.458496 -2581.940186    0.000000           0.000000    0.007568      -99.992432
2 -2481.458496  400.000000 -2681.458496 -2581.940186    0.000000           0.000000  200.000000      200.000000
3 -2481.458496   31.989909 -2681.458496 -2581.940186    0.000000           0.000000  200.000000      100.000000
4 -2481.458496  199.984863 -2490.458496 -2581.940186    0.000000           0.000000    9.000000        0.000000
5 -1992.981201  497.477295 -2481.458496 -2581.940186  188.477295           0.000000  300.000000      200.000000
6 -1694.003906  598.977295 -2381.458008 -2581.940186  487.454590         188.477295  199.999512      100.000000
7 -1143.525879  750.477539 -2281.458008 -2581.940186  837.932617         487.454590  299.999512      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:01:54]  --------------------------------------------------------------------------------
[07/18 17:01:54]  Iteration: 313 (0 solution, 312 counterexamples)
[07/18 17:02:07]  Generator returned sat in 9.327495 secs.
[07/18 17:02:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:02:08]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:02:08]  Verifer returned sat in 0.144441 secs.
[07/18 17:02:08]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2726.458496     0.060547 -2926.458496 -2581.940186     0.000000           0.000000  200.000000      200.000000
1 -2726.458496     0.015137 -2826.458496 -2581.940186     0.000000           0.000000  100.000000      100.000000
2 -2726.443359   100.015137 -2726.458496 -2581.940186     0.000000           0.000000    0.015137        0.015137
3 -2427.958496   298.500000 -2726.458496 -2581.940186     0.015137           0.000000  298.484863      198.484863
4 -2326.443359   400.000000 -2626.458496 -2581.940186     0.015137           0.015137  300.000000      200.000000
5 -1626.443359  1000.000000 -2481.458496 -2581.940186   600.015137           0.015137  255.000000      200.000000
6  -757.443359  1124.000000 -2426.458008 -2581.940186  1469.015137         600.015137  199.999512      100.000000
7   318.057373  1275.500244 -2281.458008 -2581.940186  2344.515869        1469.015137  254.999512      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:02:08]  --------------------------------------------------------------------------------
[07/18 17:02:08]  Iteration: 314 (0 solution, 313 counterexamples)
[07/18 17:02:16]  Generator returned sat in 4.594725 secs.
[07/18 17:02:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:02:17]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 17:02:17]  Verifer returned sat in 0.135163 secs.
[07/18 17:02:17]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2726.458984     0.060059 -2926.458740 -2581.94043     0.000000           0.000000  199.999756      199.999756
1 -2726.458984     0.014893 -2826.458740 -2581.94043     0.000000           0.000000   99.999756       99.999756
2 -2726.454834   100.003906 -2726.458740 -2581.94043     0.000000           0.000000    0.003906        0.003906
3 -2428.458740   298.000000 -2726.458740 -2581.94043     0.014893           0.000000  297.985107      197.985107
4 -2326.943848   399.500000 -2626.458740 -2581.94043     0.014893           0.014893  299.500000      199.500000
5 -1626.443848  1000.000000 -2481.458740 -2581.94043   600.014893           0.014893  255.000000      200.000000
6  -757.443848  1124.000000 -2426.458252 -2581.94043  1469.014893         600.014893  199.999512      100.000000
7   318.056885  1275.500244 -2281.458496 -2581.94043  2344.515625        1469.014893  254.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:02:17]  --------------------------------------------------------------------------------
[07/18 17:02:17]  Iteration: 315 (0 solution, 314 counterexamples)
[07/18 17:02:26]  Generator returned sat in 4.915176 secs.
[07/18 17:02:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:02:26]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:02:26]  Verifer returned sat in 0.149994 secs.
[07/18 17:02:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2726.458984    0.060059 -2926.458740 -2581.94043     0.000000                0.0  199.999756      199.999756
1 -2726.458984    0.014893 -2826.458740 -2581.94043     0.000000                0.0   99.999756       99.999756
2 -2726.454834  100.003906 -2726.458740 -2581.94043     0.000000                0.0    0.003906        0.003906
3 -2428.458740  298.000000 -2726.458740 -2581.94043    98.000000                0.0  200.000000      100.000000
4 -2228.958740  399.500000 -2626.458740 -2581.94043    98.000000               98.0  299.500000      199.500000
5 -1828.958740  699.500000 -2481.458740 -2581.94043   497.500000               98.0  155.000000      100.000000
6 -1160.458740  823.500000 -2426.458252 -2581.94043  1066.000000              497.5  199.999512      100.000000
7  -385.458008  975.000244 -2281.458496 -2581.94043  1741.000732             1066.0  154.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:02:26]  --------------------------------------------------------------------------------
[07/18 17:02:26]  Iteration: 316 (0 solution, 315 counterexamples)
[07/18 17:02:36]  Generator returned sat in 5.480620 secs.
[07/18 17:02:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:02:36]  Improved gap from 61/8192 to 0
[07/18 17:02:36]  Improved number of small numbers from 71 to 90 out of a max of 90
[07/18 17:02:36]  Verifer returned sat in 0.178827 secs.
[07/18 17:02:36]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2726.458984    0.059814 -2926.458984 -2581.940430        0.0                0.0  200.000000      199.999756
1 -2726.458984    0.014648 -2826.458740 -2581.940430        0.0                0.0   99.999756       99.999756
2 -2526.458740  300.000000 -2726.458740 -2581.940430        0.0                0.0  200.000000      200.000000
3 -2525.951416  200.507324 -2626.458984 -2581.940430        0.0                0.0  100.507568      100.507324
4 -2525.951416    0.500000 -2526.458984 -2581.940430        0.0                0.0    0.507568        0.507324
5 -2525.951416    0.500000 -2526.458740 -2482.447754        0.0                0.0    0.507324        0.000000
6 -2525.951416    0.500000 -2525.951416 -2382.947754        0.0                0.0    0.000000       -0.500000
7 -2525.451416    0.500000 -2525.451416 -2382.947754        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 17:02:36]  --------------------------------------------------------------------------------
[07/18 17:02:36]  Iteration: 317 (0 solution, 316 counterexamples)
[07/18 17:02:47]  Generator returned sat in 6.955026 secs.
[07/18 17:02:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:02:48]  Improved gap from 399/400 to 0
[07/18 17:02:48]  Improved number of small numbers from 50 to 72 out of a max of 90
[07/18 17:02:48]  Verifer returned sat in 0.596737 secs.
[07/18 17:02:48]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2424.961914    0.059570 -2624.961914 -2883.437305     0.0000             0.0000  200.000000      199.999951
1 -2424.961914    0.014648 -2524.961914 -2883.437305     0.0000             0.0000  100.000000       99.999951
2 -2224.961914  300.000000 -2524.961670 -2883.437305     0.0000             0.0000  299.999756      199.999951
3 -2224.961914  132.336667 -2324.961865 -2883.437305     0.0000             0.0000   99.999951       99.999951
4 -2124.956865  200.005000 -2224.961914 -2883.437305     0.0025             0.0000  100.002549      100.002500
5 -2124.956865    0.010000 -2223.964355 -2883.437305     0.0025             0.0025   99.004990        0.002500
6 -2124.956865    1.515000 -2124.961865 -2783.439941     0.0025             0.0025    0.002500       -0.000137
7 -2121.186865    3.772500 -2124.959229 -2783.439697     0.0025             0.0025    3.769863      -96.229893
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:02:48]  --------------------------------------------------------------------------------
[07/18 17:02:48]  Iteration: 318 (0 solution, 317 counterexamples)
[07/18 17:02:57]  Generator returned sat in 5.231324 secs.
[07/18 17:02:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:02:58]  Improved gap from 0 to 21.875
[07/18 17:02:58]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/18 17:02:58]  Verifer returned sat in 0.307145 secs.
[07/18 17:02:58]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2624.932129    0.059570 -2646.807129 -2861.592041        0.0                0.0   21.875000       21.875000
1 -2624.932129   21.844971 -2646.807129 -2783.467041        0.0                0.0   21.875000        0.000000
2 -2624.932129    0.029541 -2624.932129 -2734.467285        0.0                0.0    0.000000      -51.000244
3 -2319.932129  305.000000 -2473.932129 -2734.467285        0.0                0.0  154.000000      153.999756
4 -2319.932129  154.000000 -2398.431885 -2734.467285        0.0                0.0   78.499756       53.999756
5 -2319.931885   78.500000 -2360.652344 -2688.467285        0.0                0.0   40.720459        0.000000
6 -2319.902344   40.750000 -2319.931885 -2610.342285        0.0                0.0    0.029541      -21.845459
7 -2298.056885   21.875000 -2298.056885 -2610.342041        0.0                0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 17:02:58]  --------------------------------------------------------------------------------
[07/18 17:02:58]  Iteration: 319 (0 solution, 318 counterexamples)
[07/18 17:03:19]  Generator returned sat in 17.136028 secs.
[07/18 17:03:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:03:20]  Improved number of small numbers from 51 to 67 out of a max of 89
[07/18 17:03:20]  Verifer returned sat in 0.580870 secs.
[07/18 17:03:20]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4367.064941    0.059326 -4467.064941 -2510.282715    0.000000           0.000000  100.000000       99.999877
1 -4367.064941    0.029541 -4367.064941 -2510.282715    0.000000           0.000000    0.000000       -0.000123
2 -4067.064941  300.000000 -4367.064819 -2510.282715    0.000000           0.000000  299.999877      199.999877
3 -4020.456312  346.608507 -4241.869141 -2510.282715   46.608507           0.000000  174.804322      100.000000
4 -4020.456312  174.804253 -4130.771199 -2510.282715   46.608507          46.608507   63.706380        0.000000
5 -3820.456312  263.706380 -3967.064819 -2510.282715   46.608507          46.608507  100.000000      100.000000
6 -3523.396742  397.059570 -3867.064819 -2510.282715  243.668077          46.608507  100.000000      100.000000
7 -3423.366956  200.029785 -3867.064697 -2510.282715  243.697754         243.668077  199.999987      100.000109
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:03:20]  --------------------------------------------------------------------------------
[07/18 17:03:20]  Iteration: 320 (0 solution, 319 counterexamples)
[07/18 17:03:45]  Generator returned sat in 20.566889 secs.
[07/18 17:03:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:03:45]  Improved number of small numbers from 42 to 89 out of a max of 89
[07/18 17:03:45]  Verifer returned sat in 0.212442 secs.
[07/18 17:03:45]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4367.064941    0.059082 -4467.065186 -2510.282959    0.000000           0.000000  100.000244       99.999756
1 -4367.064941    0.029541 -4367.064941 -2510.282959    0.000000           0.000000    0.000000       -0.000244
2 -4067.064941  300.000000 -4367.064697 -2510.282959    0.000000           0.000000  299.999756      199.999756
3 -3967.049805  400.014893 -4266.064941 -2510.282959    0.014893           0.000000  299.000244      200.000000
4 -3967.049805    1.500000 -4067.064941 -2510.282959    0.014893           0.014893  100.000244      100.000000
5 -3613.300049  453.750000 -3967.064697 -2510.282959  153.764893           0.014893  199.999756      199.999756
6 -3613.300049    1.500000 -3867.064941 -2510.282959  153.764893         153.764893  100.000000       99.999756
7 -3111.050049  602.250000 -3867.064697 -2510.282959  556.014648         153.764893  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:03:46]  --------------------------------------------------------------------------------
[07/18 17:03:46]  Iteration: 321 (0 solution, 320 counterexamples)
[07/18 17:03:59]  Generator returned sat in 9.246478 secs.
[07/18 17:03:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:03:59]  Improved gap from 0 to 100
[07/18 17:03:59]  Improved number of small numbers from 72 to 86 out of a max of 90
[07/18 17:03:59]  Verifer returned sat in 0.368482 secs.
[07/18 17:03:59]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4317.830078    0.058838 -4417.833740 -2559.517822    0.000000           0.000000  100.003662      100.000000
1 -4317.830078    0.001953 -4317.830078 -2559.517822    0.000000           0.000000    0.000000        0.000000
2 -4117.830078  200.000000 -4217.830078 -2559.517822    0.000000           0.000000  100.000000      100.000000
3 -4017.815186  200.014893 -4217.829834 -2559.517822    0.014893           0.000000  199.999756      100.000000
4 -4017.815186  101.507446 -4117.830078 -2559.517822    0.014893           0.014893  100.000000        0.000000
5 -3613.300293  504.514893 -4017.829834 -2559.517822  150.770508           0.014893  253.759033      153.759277
6 -3613.300293  253.757446 -3917.829834 -2559.517822  150.770508         150.770508  153.759033       53.759277
7 -2808.044434  959.014893 -3817.829834 -2559.517822  809.785156         150.770508  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:04:00]  --------------------------------------------------------------------------------
[07/18 17:04:00]  Iteration: 322 (0 solution, 321 counterexamples)
[07/18 17:04:24]  Generator returned sat in 20.338668 secs.
[07/18 17:04:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:04:24]  Improved gap from 0 to 100
[07/18 17:04:24]  Improved number of small numbers from 43 to 90 out of a max of 90
[07/18 17:04:24]  Verifer returned sat in 0.288057 secs.
[07/18 17:04:24]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4367.814941    0.058838 -4467.814941 -2559.518311    0.000000           0.000000  100.000000      100.000000
1 -4367.814941    0.014893 -4367.814941 -2559.518311    0.000000           0.000000    0.000000        0.000000
2 -4067.815186  299.999756 -4270.814941 -2559.518311    0.000000           0.000000  202.999756      199.999756
3 -4067.815186    0.014648 -4267.814941 -2559.518311    0.000000           0.000000  199.999756       99.999756
4 -4067.815186  102.029297 -4167.814941 -2559.518311    0.000000           0.000000   99.999756       -0.000244
5 -3861.756348  306.058594 -4067.814941 -2559.518311    0.014893           0.000000  206.043701      106.043701
6 -3658.741455  409.058594 -3967.814941 -2559.518311    9.073730           0.014893  299.999756      199.999756
7 -3398.182617  560.558594 -3867.814941 -2559.518311  269.632324           9.073730  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:04:24]  --------------------------------------------------------------------------------
[07/18 17:04:24]  Iteration: 323 (0 solution, 322 counterexamples)
[07/18 17:04:33]  Generator returned sat in 4.766047 secs.
[07/18 17:04:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:04:34]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:04:34]  Verifer returned sat in 0.124163 secs.
[07/18 17:04:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4367.814941    0.058838 -4467.814941 -2559.518311    0.000000           0.000000  100.000000      100.000000
1 -4367.814941    0.014893 -4367.814941 -2559.518311    0.000000           0.000000    0.000000        0.000000
2 -4067.815186  299.999756 -4270.814941 -2559.518311    0.000000           0.000000  202.999756      199.999756
3 -4067.815186    0.389648 -4267.814941 -2559.518311    0.000000           0.000000  199.999756       99.999756
4 -4067.815186  102.279297 -4167.814941 -2559.518311    0.000000           0.000000   99.999756       -0.000244
5 -3861.756348  306.058594 -4067.814941 -2559.518311    0.014893           0.000000  206.043701      106.043701
6 -3658.741455  409.058594 -3967.814941 -2559.518311    9.073730           0.014893  299.999756      199.999756
7 -3398.182617  560.558594 -3867.814941 -2559.518311  269.632324           9.073730  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:04:34]  --------------------------------------------------------------------------------
[07/18 17:04:34]  Iteration: 324 (0 solution, 323 counterexamples)
[07/18 17:04:46]  Generator returned sat in 8.636468 secs.
[07/18 17:04:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:04:47]  Improved gap from 0 to 100
[07/18 17:04:47]  Improved number of small numbers from 64 to 88 out of a max of 90
[07/18 17:04:47]  Verifer returned sat in 0.348719 secs.
[07/18 17:04:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4467.815186    0.058838 -4467.844727 -2559.518311    0.000000           0.000000    0.029541        0.000244
1 -4467.815186    0.014893 -4467.815430 -2559.518311    0.000000           0.000000    0.000244      -99.999756
2 -4067.815674  399.999756 -4267.815430 -2559.518311    0.000000           0.000000  199.999756      199.999756
3 -4067.815674    0.014709 -4267.815186 -2559.518311    0.000000           0.000000  199.999512       99.999756
4 -4067.815674  100.544189 -4167.815430 -2559.518311    0.000000           0.000000   99.999756       -0.000244
5 -3816.227051  351.588379 -4067.815430 -2559.518311    0.014648           0.000000  251.573730      151.573730
6 -3614.712402  453.088379 -3967.815186 -2559.518311   53.103027           0.014648  299.999756      200.000000
7 -3310.123779  604.588379 -3867.815430 -2559.518311  357.691406          53.103027  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:04:47]  --------------------------------------------------------------------------------
[07/18 17:04:47]  Iteration: 325 (0 solution, 324 counterexamples)
[07/18 17:04:56]  Generator returned sat in 4.505129 secs.
[07/18 17:04:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:04:56]  Improved gap from 241/8192 to 100
[07/18 17:04:56]  Improved number of small numbers from 32 to 90 out of a max of 90
[07/18 17:04:56]  Verifer returned sat in 0.298609 secs.
[07/18 17:04:56]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6587.907227    0.058594 -6687.907227 -2559.518555     0.000000           0.000000  100.000000      100.000000
1 -6587.907227    0.014893 -6687.907227 -2559.518555     0.000000           0.000000  100.000000        0.000000
2 -6587.907227   99.985352 -6587.907227 -2559.518555     0.000000           0.000000    0.000000     -100.000000
3 -6287.892578  300.014648 -6387.907227 -2559.518555     0.014648           0.000000  100.000000      100.000000
4 -5936.377930  451.514648 -6305.907227 -2559.518555   251.529297           0.014648  118.000000      100.000000
5 -5410.363281  644.014648 -6262.907227 -2559.518555   677.543945         251.529297  175.000000      100.000000
6 -4777.348633  808.014648 -6187.907227 -2559.518555  1110.558838         677.543945  299.999756      199.999756
7 -4167.833740  909.514648 -6087.907227 -2559.518555  1620.073730        1110.558838  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 17:04:56]  --------------------------------------------------------------------------------
[07/18 17:04:56]  Iteration: 326 (0 solution, 325 counterexamples)
[07/18 17:05:11]  Generator returned sat in 10.782181 secs.
[07/18 17:05:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:05:12]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:05:12]  Verifer returned sat in 0.156913 secs.
[07/18 17:05:12]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6587.907227    0.058594 -6687.907227 -2559.518555    0.000000           0.000000  100.000000           100.0
1 -6587.907227    0.014648 -6687.907227 -2559.518555    0.000000           0.000000  100.000000             0.0
2 -6587.907227   99.985352 -6587.907227 -2559.518555    0.000000           0.000000    0.000000          -100.0
3 -6137.936523  449.970703 -6437.936523 -2559.518555  149.970703           0.000000  150.029297           100.0
4 -5937.995117  349.970703 -6288.112305 -2559.518555  249.912109         149.970703  100.205078           100.0
5 -5663.317383  374.882812 -6262.907227 -2559.518555  424.589844         249.912109  175.000000           100.0
6 -5488.375977  349.941406 -6087.907227 -2559.518555  499.531250         424.589844  100.000000           100.0
7 -5238.390625  349.985352 -6087.907227 -2559.518555  649.516602         499.531250  200.000000           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 17:05:12]  --------------------------------------------------------------------------------
[07/18 17:05:12]  Iteration: 327 (0 solution, 326 counterexamples)
[07/18 17:05:27]  Generator returned sat in 11.472943 secs.
[07/18 17:05:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:05:28]  Improved number of small numbers from 77 to 89 out of a max of 89
[07/18 17:05:28]  Verifer returned sat in 0.140518 secs.
[07/18 17:05:28]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6887.903809    0.058105 -7087.907227 -2259.518799    0.000000                0.0  200.003418      100.003418
1 -6887.903809    0.014160 -6987.907227 -2259.518799    0.000000                0.0  100.003418        0.003418
2 -6887.903809   99.984863 -6887.907227 -2259.518799    0.000000                0.0    0.003418      -99.996582
3 -6687.907227  200.000000 -6787.907227 -2259.518799    0.000000                0.0  100.000000        0.000000
4 -6387.907227  400.000000 -6587.907227 -2259.518799    0.000000                0.0  200.000000      200.000000
5 -5787.907227  800.000000 -6487.907227 -2259.518799  600.000000                0.0  100.000000      100.000000
6 -5687.907227  200.000000 -6487.903809 -2259.518799  600.000000              600.0  199.996582      100.000000
7 -5487.903809  400.000000 -6387.907227 -2259.518799  600.003418              600.0  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:05:28]  --------------------------------------------------------------------------------
[07/18 17:05:28]  Iteration: 328 (0 solution, 327 counterexamples)
[07/18 17:05:40]  Generator returned sat in 8.159914 secs.
[07/18 17:05:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:05:41]  Improved gap from 1/25 to 0
[07/18 17:05:41]  Improved number of small numbers from 49 to 67 out of a max of 90
[07/18 17:05:41]  Verifer returned sat in 0.633808 secs.
[07/18 17:05:41]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6887.890381    0.058105 -7187.890137 -2393.870605     0.0000             0.0000  299.999756      199.999831
1 -6887.890381    0.000625 -7087.890137 -2393.870605     0.0000             0.0000  199.999756       99.999831
2 -6887.890381    0.000732 -6887.890977 -2393.870465     0.0000             0.0000    0.000596       -0.000029
3 -6787.889727  100.001250 -6787.890352 -2393.870465     0.0000             0.0000    0.000625        0.000625
4 -6587.887852  200.002500 -6687.890381 -2393.870465     0.0025             0.0000  100.000029      100.000000
5 -6587.887852    0.010000 -6587.909727 -2393.870465     0.0025             0.0025    0.019375        0.000000
6 -6587.887227    0.020000 -6587.890352 -2293.871094     0.0025             0.0025    0.000625       -0.000003
7 -6587.847852    0.040000 -6587.850586 -2293.871094     0.0025             0.0025    0.000234      -99.960628
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:05:41]  --------------------------------------------------------------------------------
[07/18 17:05:41]  Iteration: 329 (0 solution, 328 counterexamples)
[07/18 17:06:05]  Generator returned sat in 19.890193 secs.
[07/18 17:06:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:06:06]  Improved gap from 1/3200 to 0
[07/18 17:06:06]  Improved number of small numbers from 49 to 84 out of a max of 90
[07/18 17:06:06]  Verifer returned sat in 0.660270 secs.
[07/18 17:06:06]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6591.785400    0.057861 -6791.785400 -2459.537109   0.000000           0.000000  200.000000      100.000244
1 -6591.785400    0.000625 -6691.785400 -2459.537109   0.000000           0.000000  100.000000        0.000244
2 -6458.451416  233.333984 -6591.785645 -2459.537109   0.000000           0.000000  133.334229       33.334229
3 -6458.451416  133.333750 -6458.451671 -2392.871338   0.000000           0.000000    0.000255        0.000000
4 -6258.451046  200.000625 -6358.451416 -2392.871338   0.000244           0.000000  100.000126      100.000126
5 -6258.451046    2.000000 -6260.451660 -2392.871338   0.000244           0.000244    2.000370        0.000126
6 -6257.451416    3.000000 -6257.452148 -2293.871094   0.000244           0.000244    0.000488        0.000000
7 -6252.951904    4.500000 -6257.451660 -2293.870850   0.000244           0.000244    4.499512      -95.500244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:06:06]  --------------------------------------------------------------------------------
[07/18 17:06:06]  Iteration: 330 (0 solution, 329 counterexamples)
[07/18 17:06:33]  Generator returned sat in 22.963966 secs.
[07/18 17:06:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:06:34]  Improved gap from 237/16384 to 100
[07/18 17:06:34]  Improved number of small numbers from 27 to 90 out of a max of 90
[07/18 17:06:34]  Verifer returned sat in 0.313761 secs.
[07/18 17:06:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7707.820312    0.057617 -7807.878174 -2293.588135    0.000000           0.000000  100.057861      100.000244
1 -7707.820312    0.028809 -7807.820557 -2293.588135    0.000000           0.000000  100.000244        0.000244
2 -7407.820557  400.000000 -7607.820557 -2293.588135    0.000000           0.000000  200.000000      200.000000
3 -7407.791504  200.029053 -7507.820557 -2293.588135    0.029053           0.000000  100.000000      100.000000
4 -7357.762695  150.028809 -7407.820557 -2293.588135    0.029053           0.029053   50.028809       50.028809
5 -6582.248291  825.543213 -7407.820557 -2293.588135  625.572266           0.029053  200.000000      100.000000
6 -6582.248291  100.000000 -7307.820557 -2293.588135  625.572266         625.572266  100.000000        0.000000
7 -6231.748291  450.500000 -7207.820557 -2293.588135  775.557129         625.572266  200.515137      100.515137
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:06:34]  --------------------------------------------------------------------------------
[07/18 17:06:34]  Iteration: 331 (0 solution, 330 counterexamples)
[07/18 17:06:43]  Generator returned sat in 4.879251 secs.
[07/18 17:06:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:06:43]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/18 17:06:43]  Verifer returned sat in 0.155102 secs.
[07/18 17:06:43]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7707.820312    0.057617 -7807.820557 -2293.588379    0.000000           0.000000  100.000244      100.000244
1 -7707.820312   99.985596 -7807.820557 -2293.588379    0.000000           0.000000  100.000244        0.000244
2 -7407.820557  400.000000 -7607.820557 -2293.588379    0.000000           0.000000  200.000000      200.000000
3 -7407.791748  200.028809 -7507.820557 -2293.588379    0.028809           0.000000  100.000000      100.000000
4 -7357.791748  150.000000 -7407.820557 -2293.588379    0.028809           0.028809   50.000000       50.000000
5 -6807.291748  600.500000 -7407.820557 -2293.588379  300.529053           0.028809  299.999756      199.999756
6 -6807.291748  100.000000 -7307.820557 -2293.588379  300.529053         300.529053  199.999756       99.999756
7 -6706.791504  300.500000 -7207.820557 -2293.588379  301.028809         300.529053  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:06:44]  --------------------------------------------------------------------------------
[07/18 17:06:44]  Iteration: 332 (0 solution, 331 counterexamples)
[07/18 17:07:02]  Generator returned sat in 14.506897 secs.
[07/18 17:07:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:07:02]  Improved gap from 1/800 to 100
[07/18 17:07:03]  Improved number of small numbers from 57 to 73 out of a max of 90
[07/18 17:07:03]  Verifer returned sat in 0.548792 secs.
[07/18 17:07:03]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7662.919922    0.057617 -7662.919922 -2293.588379    0.00000             0.0000    0.000000       -0.002421
1 -7562.917480  100.002441 -7662.917501 -2293.588379    0.00000             0.0000  100.000021        0.000021
2 -7262.917501  400.000000 -7562.917480 -2293.588379    0.00000             0.0000  299.999979      200.000000
3 -7262.914795  300.002686 -7462.917501 -2293.588379    0.00250             0.0000  200.000206      100.000206
4 -7262.914795    0.010000 -7262.917501 -2293.588379    0.00250             0.0025    0.000206        0.000206
5 -6662.395001  600.520000 -7162.917725 -2293.588379  300.52250             0.0025  200.000224      200.000000
6 -6662.395001    0.010000 -7062.917501 -2293.588379  300.52250           300.5225  100.000000      100.000000
7 -6161.875001  600.520000 -7062.917480 -2293.588379  701.04248           300.5225  199.999999      100.000020
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:07:03]  --------------------------------------------------------------------------------
[07/18 17:07:03]  Iteration: 333 (0 solution, 332 counterexamples)
[07/18 17:07:17]  Generator returned sat in 9.534369 secs.
[07/18 17:07:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:07:17]  Improved gap from 0 to 100
[07/18 17:07:18]  Improved number of small numbers from 53 to 63 out of a max of 90
[07/18 17:07:18]  Verifer returned sat in 0.642211 secs.
[07/18 17:07:18]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7212.995605     0.057373 -7212.995831 -2293.588379    0.000000            0.00000    0.000226      -99.999774
1 -6912.967023   300.028809 -7112.995605 -2293.588379    0.000000            0.00000  200.028583      100.028809
2 -6912.967023   200.014404 -6912.995831 -2293.588379    0.000000            0.00000    0.028809        0.028809
3 -6912.967023     0.014404 -6912.967023 -2293.588379    0.000000            0.00000    0.000000      -99.971191
4 -6462.395001   450.572021 -6812.995605 -2293.588379  150.600830            0.00000  199.999774      100.000000
5 -6462.395001     2.000000 -6674.795831 -2293.588379  150.600830          150.60083   61.800000        0.000000
6 -6162.395001   361.800000 -6612.995831 -2293.588379  150.600830          150.60083  300.000000      200.000000
7 -5288.338214  1174.056787 -6512.995605 -2293.588379  924.657715          150.60083  299.999677      199.999902
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:07:18]  --------------------------------------------------------------------------------
[07/18 17:07:18]  Iteration: 334 (0 solution, 333 counterexamples)
[07/18 17:07:30]  Generator returned sat in 7.755370 secs.
[07/18 17:07:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:07:30]  Improved gap from 235/16384 to 100
[07/18 17:07:31]  Improved number of small numbers from 32 to 52 out of a max of 90
[07/18 17:07:31]  Verifer returned sat in 0.728629 secs.
[07/18 17:07:31]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6816.412598    0.057373 -6816.441162 -2293.588379    0.000000           0.000000    0.028564        0.014412
1 -6816.412598    0.014160 -6816.427002 -2293.588379    0.000000           0.000000    0.014404      -99.985588
2 -6716.412842  100.014160 -6716.427010 -2293.588379    0.000000           0.000000    0.014168      -99.985832
3 -6319.398323  397.028687 -6516.427010 -2293.588379   97.028687           0.000000  100.000000      100.000000
4 -6219.383980  200.014343 -6516.427002 -2293.588379   97.043030          97.028687  199.999992      100.000000
5 -6219.383980  101.507172 -6416.427010 -2293.588379   97.043030          97.043030  100.000000        0.000000
6 -5665.869637  653.514343 -6316.427010 -2293.588379  450.557373          97.043030  200.000000      100.000000
7 -5537.612465  328.257172 -6216.427002 -2293.588379  478.814453         450.557373  200.000084      100.000092
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:07:31]  --------------------------------------------------------------------------------
[07/18 17:07:31]  Iteration: 335 (0 solution, 334 counterexamples)
[07/18 17:07:51]  Generator returned sat in 16.151746 secs.
[07/18 17:07:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:07:52]  Improved number of small numbers from 41 to 89 out of a max of 89
[07/18 17:07:52]  Verifer returned sat in 0.238564 secs.
[07/18 17:07:52]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5962.947266    0.057129 -6159.004639 -2293.588379   0.000000           0.000000  196.057373       99.999756
1 -5962.947266    0.028809 -6062.947021 -2293.588379   0.000000           0.000000   99.999756       -0.000244
2 -5565.947266  496.999756 -5962.947021 -2293.588379  96.999756           0.000000  300.000000      200.000000
3 -5465.918701  400.028564 -5762.947021 -2293.588379  97.028564          96.999756  199.999756      199.999756
4 -5465.918701  199.528809 -5662.947021 -2293.588379  97.028564          97.028564   99.999756       99.999756
5 -5365.889648  200.028809 -5562.947021 -2293.588379  97.057373          97.028564  100.000000      100.000000
6 -5264.389648  201.500000 -5464.918457 -2293.588379  97.057373          97.057373  103.471436      101.500000
7 -5165.861084  202.000000 -5462.947021 -2293.588379  97.085938          97.057373  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:07:52]  --------------------------------------------------------------------------------
[07/18 17:07:52]  Iteration: 336 (0 solution, 335 counterexamples)
[07/18 17:08:19]  Generator returned sat in 23.309357 secs.
[07/18 17:08:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:08:20]  Improved gap from 1/800 to 100
[07/18 17:08:20]  Improved number of small numbers from 78 to 90 out of a max of 90
[07/18 17:08:20]  Verifer returned sat in 0.194947 secs.
[07/18 17:08:20]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5565.947266    0.057129 -5765.947510 -2293.588379    0.000000           0.000000  200.000244           200.0
1 -5565.947266    0.001221 -5665.948242 -2293.588379    0.000000           0.000000  100.000977           100.0
2 -5565.947266  100.000732 -5665.947266 -2293.588379    0.000000           0.000000  100.000000             0.0
3 -5265.946045  400.001221 -5565.947266 -2293.588379    0.001221           0.000000  300.000000           200.0
4 -5265.946045    0.010000 -5465.947266 -2293.588379    0.001221           0.001221  200.000000           100.0
5 -5165.944580  300.001465 -5365.947266 -2293.588379    0.002686           0.001221  200.000000           100.0
6 -5165.944580    0.010000 -5265.947266 -2293.588379    0.002686           0.002686  100.000000             0.0
7 -4815.944580  450.000000 -5165.947266 -2293.588379  150.002686           0.002686  200.000000           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:08:20]  --------------------------------------------------------------------------------
[07/18 17:08:20]  Iteration: 337 (0 solution, 336 counterexamples)
[07/18 17:08:34]  Generator returned sat in 9.939495 secs.
[07/18 17:08:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:08:34]  Improved gap from 8187/8192 to 0
[07/18 17:08:35]  Improved number of small numbers from 46 to 90 out of a max of 90
[07/18 17:08:35]  Verifer returned sat in 0.274163 secs.
[07/18 17:08:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5366.445557    0.056885 -5666.445312 -2392.589111   0.000000           0.000000  299.999756      199.999756
1 -5366.445557    0.001221 -5566.445312 -2392.589111   0.000000           0.000000  199.999756       99.999756
2 -5366.445557    0.000732 -5366.446045 -2392.589111   0.000000           0.000000    0.000488       -0.000244
3 -5265.946045  100.500000 -5266.445557 -2392.589111   0.000000           0.000000    0.499512        0.499268
4 -5065.445557  201.000000 -5166.445557 -2392.589111   0.000488           0.000000  100.999512      100.999268
5 -5065.445557    2.000000 -5069.446777 -2392.589111   0.000488           0.000488    4.000732        0.999268
6 -5065.445557    4.000000 -5066.445312 -2293.588379   0.000488           0.000488    0.999268        0.000000
7 -5058.444824    8.000000 -5065.446045 -2293.588379   0.000488           0.000488    7.000732      -92.999268
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:08:35]  --------------------------------------------------------------------------------
[07/18 17:08:35]  Iteration: 338 (0 solution, 337 counterexamples)
[07/18 17:08:46]  Generator returned sat in 7.245672 secs.
[07/18 17:08:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:08:46]  Improved gap from 7959/8192 to 0
[07/18 17:08:47]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/18 17:08:47]  Verifer returned sat in 0.205285 secs.
[07/18 17:08:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5365.502686    0.056641 -5665.502441 -2393.531982    0.00000            0.00000  299.999756      199.999756
1 -5365.502686    0.028564 -5565.502441 -2393.531982    0.00000            0.00000  199.999756       99.999756
2 -5365.502686    0.028564 -5398.845215 -2393.531982    0.00000            0.00000   33.342529       -0.000244
3 -5265.474121  133.371094 -5265.502441 -2393.531982    0.00000            0.00000    0.028320        0.028320
4 -5065.445801  200.056641 -5165.502686 -2393.531982    0.02832            0.00000  100.028564      100.028320
5 -5065.445801    1.500000 -5067.752441 -2393.531982    0.02832            0.02832    2.278320        0.028320
6 -5065.445801    2.250000 -5065.502441 -2294.503662    0.02832            0.02832    0.028320       -0.943359
7 -5062.099121    3.375000 -5064.530762 -2294.503418    0.02832            0.02832    2.403320      -97.596436
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:08:47]  --------------------------------------------------------------------------------
[07/18 17:08:47]  Iteration: 339 (0 solution, 338 counterexamples)
[07/18 17:09:02]  Generator returned sat in 11.114676 secs.
[07/18 17:09:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:09:02]  Improved gap from 117/8192 to 100
[07/18 17:09:03]  Improved number of small numbers from 57 to 59 out of a max of 90
[07/18 17:09:03]  Verifer returned sat in 0.458805 secs.
[07/18 17:09:03]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5365.502686    0.056396 -5565.502686 -2393.532227    0.000000           0.000000  200.000000      200.000000
1 -5365.502686    0.028320 -5565.502686 -2393.532227    0.000000           0.000000  200.000000      100.000000
2 -5365.502686    0.028564 -5365.516968 -2393.532227    0.000000           0.000000    0.014282        0.000000
3 -5327.088403   38.428564 -5327.102686 -2393.532227    0.000000           0.000000    0.014282      -61.585718
4 -4931.074121  396.028564 -5165.502686 -2393.532227  134.428564           0.000000  100.000000      100.000000
5 -4831.059839  200.014282 -5165.502686 -2393.532227  134.442847         134.428564  200.000000      100.000000
6 -4831.059839  102.007141 -5065.502686 -2393.532227  134.442847         134.442847  100.000000        0.000000
7 -4436.652698  494.407141 -4965.502686 -2393.532227  228.850098         134.442847  299.999890      199.999890
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:09:03]  --------------------------------------------------------------------------------
[07/18 17:09:03]  Iteration: 340 (0 solution, 339 counterexamples)
[07/18 17:09:46]  Generator returned sat in 39.167717 secs.
[07/18 17:09:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:09:47]  Improved gap from 799/800 to 0
[07/18 17:09:47]  Improved number of small numbers from 58 to 84 out of a max of 90
[07/18 17:09:47]  Verifer returned sat in 0.461098 secs.
[07/18 17:09:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5565.250000    0.056152 -5565.250244 -2393.784912     0.0000             0.0000    0.000244        0.000000
1 -5265.250244  300.000000 -5465.250244 -2393.784912     0.0000             0.0000  200.000000      199.999756
2 -5265.250244  199.997559 -5365.250244 -2393.784912     0.0000             0.0000  100.000000       99.999756
3 -5265.250244  100.000000 -5265.252686 -2393.784668     0.0000             0.0000    0.002441        0.000000
4 -5064.752686  200.500000 -5165.250244 -2393.784668     0.4975             0.0000  100.000059      100.000059
5 -5064.752686    0.010000 -5065.252686 -2393.784668     0.4975             0.4975    0.002500        0.000059
6 -5064.235186    0.520000 -5064.735186 -2294.302246     0.4975             0.4975    0.002500       -0.000020
7 -5062.697686    1.540000 -5064.732666 -2294.302002     0.4975             0.4975    1.537480      -98.462275
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:09:47]  --------------------------------------------------------------------------------
[07/18 17:09:47]  Iteration: 341 (0 solution, 340 counterexamples)
[07/18 17:09:57]  Generator returned sat in 5.905036 secs.
[07/18 17:09:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:09:58]  Improved gap from 115/4096 to 0
[07/18 17:09:58]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/18 17:09:58]  Verifer returned sat in 0.168231 secs.
[07/18 17:09:58]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5564.696533    0.056152 -5564.724609 -2394.310303    0.000000           0.000000    0.028076        0.028076
1 -5364.724609  200.000000 -5464.724609 -2394.310303    0.000000           0.000000  100.000000      100.000000
2 -5364.724609  100.000000 -5364.724609 -2394.310303    0.000000           0.000000    0.000000        0.000000
3 -5064.724609  300.000000 -5264.724609 -2394.310303    0.000000           0.000000  200.000000      200.000000
4 -4664.224609  600.500000 -5164.724609 -2394.310303  400.471924           0.000000  100.028076      100.028076
5 -4664.224609    0.500000 -5164.724609 -2394.310303  400.471924         400.471924  100.028076        0.028076
6 -4664.224609    1.500000 -5064.724609 -2295.282227  400.471924         400.471924    0.028076       -0.943848
7 -4660.752686    3.500000 -5063.752686 -2295.282227  400.471924         400.471924    2.528076      -97.471924
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:09:58]  --------------------------------------------------------------------------------
[07/18 17:09:58]  Iteration: 342 (0 solution, 341 counterexamples)
[07/18 17:10:11]  Generator returned sat in 8.561082 secs.
[07/18 17:10:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:10:11]  Improved gap from 229/8192 to 100
[07/18 17:10:11]  Improved number of small numbers from 86 to 90 out of a max of 90
[07/18 17:10:11]  Verifer returned sat in 0.166177 secs.
[07/18 17:10:11]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5464.725098    0.055664 -5664.724854 -2394.310547    0.000000                0.0  199.999756      199.999756
1 -5464.724854  200.000000 -5564.724854 -2394.310547    0.000000                0.0  100.000000      100.000000
2 -5464.724854  100.000000 -5464.724854 -2394.310547    0.000000                0.0    0.000000        0.000000
3 -5390.162354   74.562500 -5464.322021 -2394.310547    0.000000                0.0   74.159668      -25.437500
4 -5314.697021  149.625000 -5364.724854 -2394.310547    0.000000                0.0   50.027832      -49.972168
5 -5064.974854  299.750000 -5164.724854 -2394.310547    0.000000                0.0   99.750000       99.750000
6 -4564.724854  600.000000 -5064.725098 -2394.310547  400.000000                0.0  100.000244      100.000000
7 -4364.725098  300.000000 -5064.724854 -2394.310547  499.999756              400.0  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:10:11]  --------------------------------------------------------------------------------
[07/18 17:10:11]  Iteration: 343 (0 solution, 342 counterexamples)
[07/18 17:10:25]  Generator returned sat in 9.322858 secs.
[07/18 17:10:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:10:25]  Improved gap from 1/400 to 20.3125
[07/18 17:10:25]  Improved number of small numbers from 86 to 86 out of a max of 90
[07/18 17:10:25]  Verifer returned sat in 0.212792 secs.
[07/18 17:10:25]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5464.725098    0.055664 -5764.724854 -2394.310547        0.0                0.0  299.999756      199.999756
1 -5464.724854  300.000000 -5664.724854 -2394.310547        0.0                0.0  200.000000      100.000000
2 -5464.724854  200.000000 -5564.724854 -2394.310547        0.0                0.0  100.000000        0.000000
3 -5245.086182  319.638672 -5405.433350 -2394.310547        0.0                0.0  160.347168      119.638672
4 -5245.086182  160.319336 -5304.582520 -2394.310547        0.0                0.0   59.496338       19.638672
5 -5223.922852   80.659668 -5264.724854 -2335.112549        0.0                0.0   40.802002        0.000000
6 -5223.895020   40.829834 -5223.922852 -2255.425049        0.0                0.0    0.027832      -20.284668
7 -5203.007935   20.914917 -5203.610352 -2255.425049        0.0                0.0    0.602417      -99.397583
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 17:10:26]  --------------------------------------------------------------------------------
[07/18 17:10:26]  Iteration: 344 (0 solution, 343 counterexamples)
[07/18 17:10:35]  Generator returned sat in 5.158126 secs.
[07/18 17:10:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:10:35]  Improved gap from 57/4096 to 100
[07/18 17:10:35]  Improved number of small numbers from 59 to 90 out of a max of 90
[07/18 17:10:35]  Verifer returned sat in 0.207092 secs.
[07/18 17:10:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6024.890869    0.055664 -6024.890869 -2394.338379   0.000000           0.000000    0.000000     -100.000000
1 -5624.891113  399.999756 -5824.890869 -2394.338379   0.000000           0.000000  199.999756      199.999756
2 -5524.891113  299.999756 -5823.918701 -2394.338379   0.000000           0.000000  299.027588      199.999756
3 -5524.891113  199.027832 -5724.890869 -2394.338379   0.000000           0.000000  199.999756       99.999756
4 -5524.891113  199.527832 -5524.904785 -2394.338379   0.000000           0.000000    0.013672       -0.000244
5 -5324.876953  200.027832 -5424.890869 -2394.338379   0.013916           0.000000  100.000000      100.000000
6 -5225.363037  199.513916 -5324.890869 -2394.338379   0.013916           0.013916   99.513916       99.513916
7 -5124.863037  200.013916 -5324.890869 -2394.338379   0.027588           0.013916  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:10:36]  --------------------------------------------------------------------------------
[07/18 17:10:36]  Iteration: 345 (0 solution, 344 counterexamples)
[07/18 17:10:45]  Generator returned sat in 5.809922 secs.
[07/18 17:10:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:10:46]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/18 17:10:46]  Verifer returned sat in 0.149758 secs.
[07/18 17:10:46]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6024.890869    0.055664 -6024.890869 -2394.338379   0.000000            0.00000    0.000000      -99.999756
1 -5624.891113  399.999756 -5824.891113 -2394.338379   0.000000            0.00000  200.000000      200.000000
2 -5524.898193  299.992920 -5823.932617 -2394.338379   0.000000            0.00000  299.034424      199.992920
3 -5524.898193   74.626709 -5724.890869 -2394.338379   0.000000            0.00000  199.992676       99.992920
4 -5524.898193  149.753418 -5624.890869 -2394.338379   0.000000            0.00000   99.992676       -0.007080
5 -5324.884033  300.006836 -5424.891113 -2394.338379   0.007080            0.00000  100.000000      100.000000
6 -5225.363281  199.520752 -5324.891113 -2394.338379   0.007080            0.00708   99.520752       99.520752
7 -4925.342529  399.541504 -5324.890869 -2394.338379  99.548584            0.00708  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:10:46]  --------------------------------------------------------------------------------
[07/18 17:10:46]  Iteration: 346 (0 solution, 345 counterexamples)
[07/18 17:11:00]  Generator returned sat in 9.970197 secs.
[07/18 17:11:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:11:01]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:11:01]  Verifer returned sat in 0.132275 secs.
[07/18 17:11:01]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6024.891113     0.055664 -6024.891113 -2394.338379     0.000000           0.000000    0.000000          -100.0
1 -5624.891113   400.000000 -5824.891113 -2394.338379     0.000000           0.000000  200.000000           200.0
2 -5424.835449   400.055664 -5824.891113 -2394.338379   100.055664           0.000000  300.000000           200.0
3 -5324.779785   400.055664 -5724.891113 -2394.338379   100.111328         100.055664  300.000000           200.0
4 -5324.779785   150.000000 -5624.891113 -2394.338379   100.111328         100.111328  200.000000           100.0
5 -4899.279785   625.500000 -5424.891113 -2394.338379   325.611328         100.111328  200.000000           200.0
6 -4899.279785   200.000000 -5324.891113 -2394.338379   325.611328         325.611328  100.000000           100.0
7 -3898.779785  1100.500000 -5324.890869 -2394.338379  1126.111328         325.611328  299.999756           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:11:01]  --------------------------------------------------------------------------------
[07/18 17:11:01]  Iteration: 347 (0 solution, 346 counterexamples)
[07/18 17:11:14]  Generator returned sat in 8.556117 secs.
[07/18 17:11:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:11:14]  Improved gap from 227/8192 to 0
[07/18 17:11:15]  Improved number of small numbers from 39 to 80 out of a max of 90
[07/18 17:11:15]  Verifer returned sat in 0.693684 secs.
[07/18 17:11:15]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5926.669434    0.055420 -5926.696777 -2394.338379    0.000000           0.000000    0.027344      -99.972412
1 -5626.697021  299.999756 -5726.697021 -2394.338379    0.000000           0.000000  100.000000      100.000000
2 -5626.697021   99.972168 -5726.696777 -2394.338379    0.000000           0.000000   99.999756        0.000000
3 -5324.807617  401.889160 -5526.697021 -2394.338379  101.889160           0.000000  100.000244      100.000244
4 -5223.863281  200.944580 -5426.697021 -2394.338379  102.361328         101.889160  100.472412      100.472412
5 -5223.863281  100.472290 -5426.696899 -2394.338379  102.361328         102.361328  100.472290        0.472412
6 -5223.363281  100.972290 -5325.752197 -2295.310791  102.361328         102.361328    0.027588        0.000000
7 -5121.918579  101.472290 -5325.724609 -2295.310791  102.361328         102.361328  101.444702        1.444702
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:11:15]  --------------------------------------------------------------------------------
[07/18 17:11:15]  Iteration: 348 (0 solution, 347 counterexamples)
[07/18 17:11:25]  Generator returned sat in 6.099131 secs.
[07/18 17:11:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:11:26]  Improved number of small numbers from 63 to 89 out of a max of 89
[07/18 17:11:26]  Verifer returned sat in 0.188462 secs.
[07/18 17:11:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5824.308105    0.055420 -5824.335693 -2295.310547    0.000000           0.000000    0.027588      -99.972412
1 -5524.335938  299.999756 -5624.335938 -2295.310547    0.000000           0.000000  100.000000       99.999756
2 -5524.335938  100.000000 -5524.363525 -2295.310547    0.000000           0.000000    0.027588       -0.000244
3 -5124.363525  400.000000 -5524.335693 -2295.310547  199.972168           0.000000  200.000000      100.000000
4 -5124.363525  200.000000 -5324.363281 -2295.310547  199.972168         199.972168    0.027588        0.000000
5 -4823.891113  300.500000 -5324.335693 -2295.310547  300.416748         199.972168  200.027832      100.027832
6 -4823.891113  150.250000 -5124.335693 -2295.310547  300.416748         300.416748    0.027832        0.027832
7 -4598.043945  225.875000 -5124.335693 -2295.310547  326.291748         300.416748  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:11:26]  --------------------------------------------------------------------------------
[07/18 17:11:26]  Iteration: 349 (0 solution, 348 counterexamples)
[07/18 17:11:46]  Generator returned sat in 15.264877 secs.
[07/18 17:11:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:11:46]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/18 17:11:46]  Verifer returned sat in 0.194899 secs.
[07/18 17:11:46]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5824.308105    0.055176 -5824.335693 -2295.310547     0.000000           0.000000    0.027588      -99.972412
1 -5524.335693  300.000000 -5624.335938 -2295.310547     0.000000           0.000000  100.000244      100.000000
2 -5524.335693  100.000000 -5524.363525 -2295.310547     0.000000           0.000000    0.027832        0.000000
3 -5124.363770  399.999756 -5424.335693 -2295.310547   199.971924           0.000000  100.000000      100.000000
4 -5024.363770  200.000000 -5324.363281 -2295.310547   199.971924         199.971924  100.027588      100.000000
5 -4374.432373  749.958984 -5324.335693 -2295.310547   749.875732         199.971924  200.027588      100.027588
6 -4374.432373  100.013916 -5124.335693 -2295.310547   749.875732         749.875732    0.027588        0.027588
7 -3774.439087  600.020874 -5124.335693 -2295.310547  1149.896484         749.875732  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:11:46]  --------------------------------------------------------------------------------
[07/18 17:11:46]  Iteration: 350 (0 solution, 349 counterexamples)
[07/18 17:12:03]  Generator returned sat in 12.497564 secs.
[07/18 17:12:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:12:04]  Improved number of small numbers from 77 to 89 out of a max of 89
[07/18 17:12:04]  Verifer returned sat in 0.148937 secs.
[07/18 17:12:04]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5824.308105    0.055176 -5824.335938 -2295.310547    0.000000           0.000000    0.027832      -99.972168
1 -5524.335938  300.000000 -5624.335938 -2295.310547    0.000000           0.000000  100.000000      100.000000
2 -5524.335938   99.986084 -5624.335693 -2295.310547    0.000000           0.000000   99.999756        0.000000
3 -5124.364014  499.971680 -5424.335938 -2295.310547  199.971924           0.000000  100.000000      100.000000
4 -5024.364014  200.000000 -5324.363525 -2295.310547  199.971924         199.971924  100.027588      100.000000
5 -4624.419189  499.972412 -5324.335693 -2295.310547  499.903076         199.971924  200.013428      100.013672
6 -4624.419189  150.000000 -5124.335938 -2295.310547  499.903076         499.903076    0.013672        0.013672
7 -4174.432861  450.000000 -5124.335693 -2295.310547  749.902832         499.903076  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:12:04]  --------------------------------------------------------------------------------
[07/18 17:12:04]  Iteration: 351 (0 solution, 350 counterexamples)
[07/18 17:12:20]  Generator returned sat in 11.717042 secs.
[07/18 17:12:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:12:21]  Improved number of small numbers from 59 to 65 out of a max of 89
[07/18 17:12:21]  Verifer returned sat in 0.413851 secs.
[07/18 17:12:21]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5924.330937    0.054932 -6024.334961 -1995.311547   0.000000              0.000  100.004023      100.004000
1 -5924.330937  100.004000 -6024.302937 -1995.311547   0.000000              0.000   99.972000        0.004000
2 -5924.330937    0.004000 -5924.334937 -1995.311547   0.000000              0.000    0.004000      -99.996000
3 -5524.330937  400.004000 -5824.334937 -1995.311547   0.004000              0.000  300.000000      200.000000
4 -5524.330937    0.010000 -5624.334937 -1995.311547   0.004000              0.004  100.000000      100.000000
5 -5424.326937  200.004000 -5624.334717 -1995.311547   0.008000              0.004  199.999779      100.000000
6 -5424.326937    0.010000 -5424.345604 -1995.311547   0.008000              0.008    0.010667        0.000000
7 -5224.322938  200.014667 -5424.334717 -1995.311547   0.011963              0.008  199.999816      100.000037
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:12:21]  --------------------------------------------------------------------------------
[07/18 17:12:21]  Iteration: 352 (0 solution, 351 counterexamples)
[07/18 17:12:32]  Generator returned sat in 6.808201 secs.
[07/18 17:12:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:12:33]  Improved number of small numbers from 31 to 89 out of a max of 89
[07/18 17:12:33]  Verifer returned sat in 0.330776 secs.
[07/18 17:12:33]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6024.432373    0.054688 -6224.432617 -1795.214111    0.000000           0.000000  200.000244      200.000000
1 -5924.432617  300.000000 -6124.432373 -1795.214111    0.000000           0.000000  199.999756      199.999756
2 -5824.432617  299.999756 -6024.432373 -1795.214111    0.000000           0.000000  199.999756      199.999756
3 -5824.432617    0.013672 -5957.784180 -1795.214111    0.000000           0.000000  133.351562       99.999756
4 -5824.432617  133.351562 -5924.432373 -1795.213867    0.000000           0.000000   99.999756        0.000000
5 -5557.729248  366.703125 -5824.432373 -1795.213867   66.703369           0.000000  199.999756      100.000000
6 -5557.729248  183.351562 -5624.446289 -1795.213867   66.703369          66.703369    0.013672        0.000000
7 -5024.370850  533.372070 -5624.432373 -1795.213867  400.061768          66.703369  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:12:33]  --------------------------------------------------------------------------------
[07/18 17:12:33]  Iteration: 353 (0 solution, 352 counterexamples)
[07/18 17:12:46]  Generator returned sat in 8.399204 secs.
[07/18 17:12:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:12:47]  Improved number of small numbers from 53 to 67 out of a max of 89
[07/18 17:12:47]  Verifer returned sat in 0.545515 secs.
[07/18 17:12:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6124.435059    0.054688 -6324.435059 -1795.211367   0.000000            0.00000  200.000000      100.000059
1 -6124.435059    0.001221 -6224.435117 -1795.211367   0.000000            0.00000  100.000059        0.000059
2 -6124.435059    0.001465 -6124.435059 -1795.211367   0.000000            0.00000    0.000000      -99.999941
3 -5824.432617  300.002441 -6024.417617 -1795.211367   0.001250            0.00000  199.983750      100.001250
4 -5824.432617    0.010000 -5824.435117 -1795.211367   0.001250            0.00125    0.001250        0.001250
5 -5624.423867  200.010000 -5724.435303 -1795.211367   0.002500            0.00125  100.008936      100.008750
6 -5624.423867    0.010000 -5624.435117 -1795.211367   0.002500            0.00250    0.008750        0.008750
7 -5424.431367  200.001250 -5624.435059 -1795.211367   0.003662            0.00250  200.000029      100.000088
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:12:47]  --------------------------------------------------------------------------------
[07/18 17:12:47]  Iteration: 354 (0 solution, 353 counterexamples)
[07/18 17:13:00]  Generator returned sat in 8.647135 secs.
[07/18 17:13:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:13:01]  Improved number of small numbers from 57 to 59 out of a max of 89
[07/18 17:13:01]  Verifer returned sat in 0.473533 secs.
[07/18 17:13:01]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6124.435059    0.054688 -6324.435059 -1795.211367    0.00000            0.00000  200.000000      100.000059
1 -6124.435059    0.001221 -6224.435117 -1795.211367    0.00000            0.00000  100.000059        0.000059
2 -6124.435059    0.001221 -6124.435059 -1795.211367    0.00000            0.00000    0.000000      -99.999941
3 -5824.432861  300.002197 -6024.426338 -1795.211367    0.00189            0.00000  199.991587      100.000366
4 -5824.432861    0.010000 -5824.435117 -1795.211367    0.00189            0.00189    0.000366        0.000366
5 -5624.428228  200.005000 -5724.435547 -1795.211367    0.00250            0.00189  100.004819      100.004390
6 -5624.428228    0.010000 -5624.435117 -1795.211367    0.00250            0.00250    0.004390        0.004390
7 -5424.432007  200.000610 -5624.435059 -1795.211367    0.00293            0.00250  200.000122      100.000181
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:13:01]  --------------------------------------------------------------------------------
[07/18 17:13:01]  Iteration: 355 (0 solution, 354 counterexamples)
[07/18 17:13:17]  Generator returned sat in 11.419065 secs.
[07/18 17:13:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:13:17]  Improved gap from 7/256 to 100
[07/18 17:13:18]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/18 17:13:18]  Verifer returned sat in 0.362309 secs.
[07/18 17:13:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5529.097900    0.054443   -5629.0979 -2390.548584   0.000000           0.000000  100.000000      100.000000
1 -5529.097900    0.027100   -5629.0979 -2390.548584   0.000000           0.000000  100.000000        0.000000
2 -5229.098145  399.999756   -5529.0979 -2390.548584   0.000000           0.000000  299.999756      199.999756
3 -5229.098145    8.483941   -5421.0979 -2390.548584   0.000000           0.000000  191.999756       99.999756
4 -5229.098145  116.725911   -5329.0979 -2390.548584   0.000000           0.000000   99.999756       -0.000244
5 -5004.009033  325.088867   -5221.0979 -2390.548584  25.088867           0.000000  192.000000      100.000000
6 -5004.009033  154.000000   -5129.0979 -2390.548584  25.088867          25.088867  100.000000        0.000000
7 -4727.009033  377.000000   -5029.0979 -2390.548584  25.116211          25.088867  276.972656      176.972656
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:13:18]  --------------------------------------------------------------------------------
[07/18 17:13:18]  Iteration: 356 (0 solution, 355 counterexamples)
[07/18 17:14:03]  Generator returned sat in 40.843351 secs.
[07/18 17:14:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:14:04]  Improved number of small numbers from 37 to 89 out of a max of 89
[07/18 17:14:04]  Verifer returned sat in 0.221654 secs.
[07/18 17:14:04]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5905.475342     0.054199  -6005.48877 -2014.157959     0.000000           0.000000  100.013428      100.013428
1 -5905.475342     0.026855  -5905.48877 -2014.157959     0.000000           0.000000    0.013428        0.013428
2 -5605.488770   300.000000  -5903.48877 -2014.157959     0.000000           0.000000  298.000000      200.000000
3 -5605.475342   298.013428  -5805.48877 -2014.157959     0.013428           0.000000  200.000000      100.000000
4 -5605.475342   101.000000  -5656.00000 -2014.157959     0.013428           0.013428   50.511230        0.000000
5 -5004.009033   651.977539  -5597.48877 -2014.157959   401.466064           0.013428  192.013672      100.013672
6 -5004.009033   154.000000  -5405.48877 -2014.157959   401.466064         401.466064    0.013672        0.013672
7 -3971.522705  1032.500000  -5305.48877 -2014.157959  1233.966064         401.466064  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:14:04]  --------------------------------------------------------------------------------
[07/18 17:14:04]  Iteration: 357 (0 solution, 356 counterexamples)
[07/18 17:14:23]  Generator returned sat in 14.562858 secs.
[07/18 17:14:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:14:23]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/18 17:14:23]  Verifer returned sat in 0.176802 secs.
[07/18 17:14:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5905.475586    0.053955  -6105.48877 -2014.157959    0.000000           0.000000  200.013184      100.013184
1 -5905.475586    0.026855  -5905.48877 -2014.157959    0.000000           0.000000    0.013184        0.013184
2 -5605.488770  300.000000  -5905.48877 -2014.157959    0.000000           0.000000  300.000000      200.000000
3 -5605.475586  300.013184  -5805.48877 -2014.157959    0.013184           0.000000  200.000000      100.000000
4 -5605.475586  151.000000  -5705.48877 -2014.157959    0.013184           0.013184  100.000000        0.000000
5 -5403.475586  302.000000  -5600.48877 -2014.157959    0.020264           0.013184  196.992920      101.992920
6 -5403.475586  153.500000  -5405.48877 -2014.157959    0.020264           0.020264    1.992920        1.992920
7 -5098.468506  307.000000  -5305.48877 -2014.157959  107.020020           0.020264  100.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:14:24]  --------------------------------------------------------------------------------
[07/18 17:14:24]  Iteration: 358 (0 solution, 357 counterexamples)
[07/18 17:14:46]  Generator returned sat in 17.682327 secs.
[07/18 17:14:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:14:46]  Improved gap from 221/8192 to 20.3125
[07/18 17:14:46]  Improved number of small numbers from 55 to 90 out of a max of 90
[07/18 17:14:46]  Verifer returned sat in 0.293940 secs.
[07/18 17:14:46]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5606.542969    0.053711 -5706.569824 -2013.086914        0.0                0.0  100.026855        0.027100
1 -5606.542969    0.027100 -5606.569824 -2013.086914        0.0                0.0    0.026855      -99.972900
2 -5206.570068  399.999756 -5486.641113 -2013.086914        0.0                0.0  280.071045      200.000000
3 -5191.641113  295.000000 -5406.569824 -2013.086914        0.0                0.0  214.928711      114.928955
4 -5191.641113  148.500000 -5266.917969 -2013.086914        0.0                0.0   75.276855       14.928955
5 -5191.641113   75.250000 -5206.569824 -1933.399658        0.0                0.0   14.928711       -5.383789
6 -5167.944824   38.625000 -5186.257324 -1853.712158        0.0                0.0   18.312500       -2.000000
7 -5165.944824   20.312500 -5165.944824 -1853.711914        0.0                0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 17:14:46]  --------------------------------------------------------------------------------
[07/18 17:14:46]  Iteration: 359 (0 solution, 358 counterexamples)
[07/18 17:15:59]  Generator returned sat in 68.466857 secs.
[07/18 17:16:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:16:00]  Improved gap from 55/4096 to 100
[07/18 17:16:00]  Improved number of small numbers from 45 to 90 out of a max of 90
[07/18 17:16:00]  Verifer returned sat in 0.282398 secs.
[07/18 17:16:00]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6206.513184    0.053467 -6206.540039 -1853.712158    0.000000           0.000000    0.026855        0.013184
1 -6206.513184    0.013428 -6206.526367 -1853.712158    0.000000           0.000000    0.013184      -99.986816
2 -6106.513184  100.013184 -6106.526367 -1853.712158    0.000000           0.000000    0.013184      -99.986816
3 -5806.512939  300.013428 -6006.526367 -1853.712158    0.013184           0.000000  200.000244      100.000244
4 -5806.512939  100.506836 -5806.539795 -1853.712158    0.013184           0.013184    0.013672        0.000244
5 -4855.793213  950.733398 -5706.526367 -1853.712158  750.733154           0.013184  100.000000      100.000000
6 -4755.293213  200.500000 -5706.526367 -1853.712158  751.233154         750.733154  200.000000      100.000000
7 -4755.293213  150.500000 -5606.526367 -1853.712158  751.233154         751.233154  100.000000        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:16:00]  --------------------------------------------------------------------------------
[07/18 17:16:00]  Iteration: 360 (0 solution, 359 counterexamples)
[07/18 17:16:14]  Generator returned sat in 9.012713 secs.
[07/18 17:16:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:16:15]  Improved number of small numbers from 51 to 68 out of a max of 89
[07/18 17:16:15]  Verifer returned sat in 0.603024 secs.
[07/18 17:16:15]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6206.519775    0.053467 -6406.519531 -1853.712158   0.000000           0.000000  199.999756       99.999878
1 -6206.519775    0.013428 -6206.526367 -1853.712158   0.000000           0.000000    0.006592       -0.000122
2 -6106.512939  100.013428 -6106.519653 -1853.712158   0.000000           0.000000    0.006714        0.006714
3 -5906.012939  200.506714 -6007.279541 -1853.712158   0.506714           0.000000  100.759888      100.000000
4 -5906.012939  100.753357 -6006.519653 -1853.712158   0.506714           0.506714  100.000000        0.000000
5 -5605.999512  400.013428 -5806.519653 -1853.712158   0.520264           0.506714  199.999878      199.999878
6 -5605.492676  200.506714 -5706.779541 -1853.712158   0.526611           0.520264  100.760254      100.500366
7 -5605.492676  100.753357 -5606.526611 -1853.712158   0.526611           0.526611    0.507324        0.500366
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:16:15]  --------------------------------------------------------------------------------
[07/18 17:16:15]  Iteration: 361 (0 solution, 360 counterexamples)
[07/18 17:16:26]  Generator returned sat in 6.682607 secs.
[07/18 17:16:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:16:27]  Improved gap from 219/16384 to 100
[07/18 17:16:27]  Improved number of small numbers from 53 to 73 out of a max of 90
[07/18 17:16:27]  Verifer returned sat in 0.718641 secs.
[07/18 17:16:27]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6006.477783     0.053223 -6254.997798 -1853.712158        0.0                0.0  248.520015      199.999965
1 -6006.477783     0.026855 -6206.477539 -1853.712158        0.0                0.0  199.999756       99.999965
2 -5906.477539   300.000000 -6106.477539 -1853.712158        0.0                0.0  200.000000      100.000209
3 -5906.477539   199.973267 -6006.477748 -1853.712158        0.0                0.0  100.000209        0.000209
4 -5209.477748   797.000000 -5806.477748 -1853.712158      397.0                0.0  200.000000      200.000000
5 -5010.477748   399.000000 -5706.477783 -1853.712158      596.0              397.0  100.000035      100.000000
6 -4910.477783   200.000000 -5606.477748 -1853.712158      596.0              596.0   99.999965       99.999965
7 -3910.477748  1100.000000 -5606.477539 -1853.712158     1396.0              596.0  299.999791      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:16:28]  --------------------------------------------------------------------------------
[07/18 17:16:28]  Iteration: 362 (0 solution, 361 counterexamples)
[07/18 17:16:38]  Generator returned sat in 6.167771 secs.
[07/18 17:16:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:16:39]  Improved number of small numbers from 43 to 89 out of a max of 89
[07/18 17:16:39]  Verifer returned sat in 0.265641 secs.
[07/18 17:16:39]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6006.478027     0.052979 -6254.997803 -1853.712158     0.000000           0.000000  248.519775      199.999756
1 -6006.478027     0.026855 -6206.477539 -1853.712158     0.000000           0.000000  199.999512       99.999756
2 -5906.477783   299.999756 -6106.477539 -1853.712158     0.000000           0.000000  199.999756      100.000000
3 -5906.477783   149.979980 -6006.477783 -1853.712158     0.000000           0.000000  100.000000        0.000000
4 -5209.477783   797.000000 -5806.477783 -1853.712158   397.000000           0.000000  200.000000      200.000000
5 -5010.477783   399.000000 -5706.477783 -1853.712158   595.999756         397.000000  100.000244      100.000244
6 -4910.478027   200.000000 -5606.477783 -1853.712158   595.999756         595.999756  100.000000      100.000000
7 -3810.478027  1200.000000 -5606.477783 -1853.712158  1495.999756         595.999756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:16:39]  --------------------------------------------------------------------------------
[07/18 17:16:39]  Iteration: 363 (0 solution, 362 counterexamples)
[07/18 17:17:28]  Generator returned sat in 44.601588 secs.
[07/18 17:17:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:17:29]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:17:29]  Verifer returned sat in 0.135854 secs.
[07/18 17:17:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6006.478027    0.052979 -6206.477783 -1853.712158     0.000000           0.000000  199.999756      199.999756
1 -6006.478027    0.026855 -6206.477783 -1853.712158     0.000000           0.000000  199.999756       99.999756
2 -5804.424072  402.053711 -6102.477783 -1853.712158   102.053711           0.000000  196.000000      100.000000
3 -5804.424072  195.986572 -5906.491211 -1853.712158   102.053711         102.053711    0.013428        0.000000
4 -5112.477783  691.959717 -5806.477783 -1853.712158   594.000000         102.053711  100.000000      100.000000
5 -5010.477783  202.000000 -5706.477783 -1853.712158   595.999756         594.000000  100.000244      100.000244
6 -4910.478027  200.000000 -5606.477783 -1853.712158   595.999756         595.999756  100.000000      100.000000
7 -4310.464600  700.013428 -5606.477783 -1853.712158  1096.013184         595.999756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:17:29]  --------------------------------------------------------------------------------
[07/18 17:17:29]  Iteration: 364 (0 solution, 363 counterexamples)
[07/18 17:17:45]  Generator returned sat in 12.030235 secs.
[07/18 17:17:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:17:46]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:17:46]  Verifer returned sat in 0.147763 secs.
[07/18 17:17:46]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6006.478027     0.052979 -6206.477783 -1853.712158     0.000000           0.000000  199.999756      199.999756
1 -6006.478027     0.026855 -6206.477783 -1853.712158     0.000000           0.000000  199.999756       99.999756
2 -5804.424316   402.053467 -6102.478027 -1853.712158   102.053467           0.000000  196.000244      100.000000
3 -5804.424316   184.053711 -5996.531494 -1853.712158   102.053467         102.053467   90.053711        0.000000
4 -5106.478027   788.000000 -5906.477783 -1853.712158   499.999756         102.053467  300.000000      200.000000
5 -5010.478027   396.000000 -5706.478027 -1853.712158   595.999756         499.999756  100.000244      100.000000
6 -4910.478271   200.000000 -5606.477783 -1853.712158   595.999756         595.999756   99.999756       99.999756
7 -3830.370605  1180.107422 -5606.477783 -1853.712158  1476.107178         595.999756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:17:46]  --------------------------------------------------------------------------------
[07/18 17:17:46]  Iteration: 365 (0 solution, 364 counterexamples)
[07/18 17:18:04]  Generator returned sat in 13.370580 secs.
[07/18 17:18:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:18:05]  Improved number of small numbers from 81 to 83 out of a max of 89
[07/18 17:18:05]  Verifer returned sat in 0.276814 secs.
[07/18 17:18:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6006.478271    0.052979 -6266.548340 -1853.712646     0.000000           0.000000  260.070068      199.999512
1 -6006.478271    0.026367 -6206.477783 -1853.712646     0.000000           0.000000  199.999512       99.999512
2 -5804.424561  402.053223 -6102.478516 -1853.712646   102.053223           0.000000  196.000732      100.000000
3 -5804.424561  195.987183 -6000.531250 -1853.712646   102.053223         102.053223   94.053467        0.000000
4 -5107.478027  791.000000 -5906.477783 -1853.712646   498.999756         102.053223  300.000000      200.000000
5 -5010.478027  397.000000 -5706.478271 -1853.712646   595.999512         498.999756  100.000732      100.000244
6 -4910.478760  200.000000 -5606.477783 -1853.712646   595.999512         595.999512   99.999512       99.999512
7 -4019.398071  991.080200 -5606.477783 -1853.712646  1387.079590         595.999512  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:18:05]  --------------------------------------------------------------------------------
[07/18 17:18:05]  Iteration: 366 (0 solution, 365 counterexamples)
[07/18 17:18:22]  Generator returned sat in 12.913327 secs.
[07/18 17:18:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:18:23]  Improved gap from 385105/4096 to 100
[07/18 17:18:23]  Improved number of small numbers from 84 to 86 out of a max of 90
[07/18 17:18:23]  Verifer returned sat in 0.276248 secs.
[07/18 17:18:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6106.477783    0.052979 -6206.478027 -1853.712646    0.000000           0.000000  100.000244      100.000000
1 -6106.477783    0.026367 -6206.477783 -1853.712646    0.000000           0.000000  100.000000        0.000000
2 -5806.478027  399.999756 -6006.478027 -1853.712646    0.000000           0.000000  200.000000      199.999756
3 -5806.464844  200.013184 -6006.477783 -1853.712646    0.012939           0.000000  200.000000      100.000000
4 -5806.464844  101.506592 -5906.477783 -1853.712646    0.012939           0.012939  100.000000        0.000000
5 -5103.451660  803.013184 -5706.477783 -1853.712646  403.026367           0.012939  199.999756      199.999756
6 -4900.444824  403.006592 -5606.477783 -1853.712646  606.032959         403.026367  100.000000      100.000000
7 -4797.441528  203.003296 -5606.477783 -1853.712646  609.036133         606.032959  200.000122      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:18:23]  --------------------------------------------------------------------------------
[07/18 17:18:23]  Iteration: 367 (0 solution, 366 counterexamples)
[07/18 17:18:59]  Generator returned sat in 31.363149 secs.
[07/18 17:19:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:19:00]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:19:00]  Verifer returned sat in 0.123009 secs.
[07/18 17:19:00]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6106.477783    0.052734 -6206.477783 -1853.712646    0.000000           0.000000  100.000000           100.0
1 -6106.477783    0.026367 -6204.556885 -1853.712646    0.000000           0.000000   98.079102             0.0
2 -5804.556885  400.000000 -6006.477783 -1853.712646    1.920898           0.000000  200.000000           200.0
3 -5804.530518  200.026367 -5906.490967 -1853.712646    1.947266           1.920898  100.013184           100.0
4 -5804.530518  100.013184 -5806.504150 -1853.712646    1.947266           1.947266    0.026367             0.0
5 -5404.504150  400.052734 -5706.477783 -1853.712646  201.973633           1.947266  100.000000           100.0
6 -5304.477783  200.026367 -5606.517334 -1853.712646  202.000000         201.973633  100.039551           100.0
7 -5304.477783  100.013184 -5606.477783 -1853.712646  202.000000         202.000000  100.000000             0.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:19:00]  --------------------------------------------------------------------------------
[07/18 17:19:00]  Iteration: 368 (0 solution, 367 counterexamples)
[07/18 17:19:18]  Generator returned sat in 13.103768 secs.
[07/18 17:19:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:19:18]  Improved number of small numbers from 79 to 89 out of a max of 89
[07/18 17:19:18]  Verifer returned sat in 0.154899 secs.
[07/18 17:19:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6106.478027    0.052734 -6206.504395 -1853.712646    0.000000           0.000000  100.026367      100.000000
1 -6106.478027    0.026123 -6204.556885 -1853.712646    0.000000           0.000000   98.078857        0.000000
2 -5906.978027  297.578857 -6006.478027 -1853.712646    0.000000           0.000000   99.500000       99.500000
3 -5906.978027   99.500000 -6006.478027 -1853.712646    0.000000           0.000000   99.500000       -0.500000
4 -5806.478027  200.000000 -5906.478027 -1853.712646    0.000000           0.000000  100.000000        0.000000
5 -5505.478027  401.000000 -5806.478027 -1853.712646  100.987061           0.000000  200.012939      100.012939
6 -5505.478027  100.000000 -5606.478027 -1853.712646  100.987061         100.987061    0.012939        0.012939
7 -5304.490967  201.000000 -5606.478027 -1853.712646  101.986816         100.987061  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:19:18]  --------------------------------------------------------------------------------
[07/18 17:19:18]  Iteration: 369 (0 solution, 368 counterexamples)
[07/18 17:19:34]  Generator returned sat in 11.577906 secs.
[07/18 17:19:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:19:35]  Improved gap from 399/400 to 0
[07/18 17:19:35]  Improved number of small numbers from 72 to 88 out of a max of 90
[07/18 17:19:35]  Verifer returned sat in 0.291035 secs.
[07/18 17:19:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6106.478271    0.052734 -6306.504639 -1853.712646     0.0000             0.0000  200.026367      199.999756
1 -6106.478271    0.025879 -6206.478271 -1853.712646     0.0000             0.0000  100.000000       99.999756
2 -6006.475586  200.002686 -6205.480469 -1853.712646     0.0000             0.0000  199.004883      100.002441
3 -6006.475586  199.004883 -6006.478027 -1853.712646     0.0000             0.0000    0.002441        0.002441
4 -5806.473145  200.004883 -5906.478271 -1853.712646     0.0025             0.0000  100.002627      100.002383
5 -5806.473145    0.010000 -5906.478027 -1853.712646     0.0025             0.0025  100.002383        0.002383
6 -5806.473145    1.010000 -5806.478027 -1754.710205     0.0025             0.0025    0.002383       -0.995176
7 -5804.465527    2.010000 -5805.480469 -1754.709961     0.0025             0.0025    1.012441      -98.987314
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:19:35]  --------------------------------------------------------------------------------
[07/18 17:19:35]  Iteration: 370 (0 solution, 369 counterexamples)
[07/18 17:19:49]  Generator returned sat in 8.870091 secs.
[07/18 17:19:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:19:49]  Verifer returned unsat in 0.033047 secs.
[07/18 17:19:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:19:49]  --------------------------------------------------------------------------------
[07/18 17:19:49]  Iteration: 371 (1 solution, 369 counterexamples)
[07/18 17:20:05]  Generator returned sat in 10.996647 secs.
[07/18 17:20:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:20:05]  Improved gap from 399/400 to 0
[07/18 17:20:05]  Improved number of small numbers from 74 to 84 out of a max of 90
[07/18 17:20:05]  Verifer returned sat in 0.381959 secs.
[07/18 17:20:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6106.478271    0.052246 -6406.478027 -1853.712646     0.0000             0.0000  299.999756      199.999756
1 -6106.478271    0.025879 -6206.478271 -1853.712646     0.0000             0.0000  100.000000       99.999756
2 -6106.478027  100.000244 -6106.478027 -1853.712646     0.0000             0.0000    0.000000        0.000000
3 -5973.809570  132.668457 -6006.478027 -1853.712646     0.0000             0.0000   32.668457       32.668457
4 -5806.475342  200.002686 -5906.478271 -1853.712646     0.0025             0.0000  100.000430      100.000186
5 -5806.475342    0.010000 -5807.490527 -1853.712646     0.0025             0.0025    1.012686        0.000186
6 -5806.473027    1.015000 -5806.478027 -1754.710205     0.0025             0.0025    0.002500       -0.995059
7 -5803.953027    2.522500 -5805.480469 -1754.709961     0.0025             0.0025    1.524941      -98.474814
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:20:06]  --------------------------------------------------------------------------------
[07/18 17:20:06]  Iteration: 372 (1 solution, 370 counterexamples)
[07/18 17:20:30]  Generator returned sat in 19.331819 secs.
[07/18 17:20:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:20:30]  Verifer returned unsat in 0.044074 secs.
[07/18 17:20:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:20:30]  --------------------------------------------------------------------------------
[07/18 17:20:30]  Iteration: 373 (2 solution, 370 counterexamples)
[07/18 17:21:03]  Generator returned sat in 28.277143 secs.
[07/18 17:21:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:21:04]  Improved number of small numbers from 34 to 56 out of a max of 89
[07/18 17:21:04]  Verifer returned sat in 0.759135 secs.
[07/18 17:21:04]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6846.995850    0.052002 -6946.995850 -1854.703613     0.000000           0.000000  100.000000       99.999984
1 -6846.995850    0.025879 -6847.002441 -1854.703613     0.000000           0.000000    0.006592       -0.000016
2 -6846.989502    0.012939 -6846.995605 -1754.710146     0.000000           0.000000    0.006104       -0.000201
3 -6052.969727  794.025879 -6746.989301 -1754.710146   594.019409           0.000000  100.000165      100.000165
4 -5754.956952  398.012939 -6646.989301 -1754.710146   792.032349         594.019409  100.000000      100.000000
5 -5654.950482  200.006470 -6547.992676 -1754.710146   792.038818         792.032349  101.003375      100.000000
6 -5654.950482  101.003235 -6546.989301 -1754.710146   792.038818         792.038818  100.000000        0.000000
7 -5152.944013  602.006470 -6446.989258 -1754.710146  1094.045166         792.038818  200.000079      100.000122
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:21:05]  --------------------------------------------------------------------------------
[07/18 17:21:05]  Iteration: 374 (2 solution, 371 counterexamples)
[07/18 17:21:19]  Generator returned sat in 10.072963 secs.
[07/18 17:21:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 17:21:20]  Improved gap from 213/16384 to 100
[07/18 17:21:20]  Improved number of small numbers from 31 to 51 out of a max of 90
[07/18 17:21:20]  Verifer returned sat in 0.730741 secs.
[07/18 17:21:20]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6678.653564    0.052002 -6778.679688 -2032.148193    0.000000           0.000000  100.026123      100.026070
1 -6678.653564    0.026123 -6678.679688 -2032.148193    0.000000           0.000000    0.026123        0.026070
2 -6678.653564    0.026123 -6678.679634 -2032.148193    0.000000           0.000000    0.026070      -99.973930
3 -5884.575630  794.104004 -6478.679634 -2032.148193  394.104004           0.000000  200.000000      200.000000
4 -5686.523628  398.052002 -6378.679634 -2032.148193  592.156006         394.104004  100.000000      100.000000
5 -5586.497627  200.026001 -6378.679443 -2032.148193  592.182007         592.156006  199.999809      100.000000
6 -5586.497627  101.013000 -6278.679634 -2032.148193  592.182007         592.182007  100.000000        0.000000
7 -5134.978127  551.519501 -6178.679443 -2032.148193  743.701660         592.182007  299.999657      199.999847
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:21:21]  --------------------------------------------------------------------------------
[07/18 17:21:21]  Iteration: 375 (2 solution, 372 counterexamples)
[07/18 17:21:59]  Generator returned sat in 33.789249 secs.
[07/18 17:21:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:21:59]  Verifer returned unsat in 0.035650 secs.
[07/18 17:21:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:21:59]  --------------------------------------------------------------------------------
[07/18 17:21:59]  Iteration: 376 (3 solution, 372 counterexamples)
[07/18 17:22:11]  Generator returned sat in 7.178970 secs.
[07/18 17:22:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:22:11]  Improved gap from 7979/8192 to 0
[07/18 17:22:12]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/18 17:22:12]  Verifer returned sat in 0.238911 secs.
[07/18 17:22:12]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6578.679688    0.051758 -6778.679932 -2032.148193   0.000000           0.000000  200.000244      200.000000
1 -6578.679688    0.026123 -6678.679932 -2032.148193   0.000000           0.000000  100.000244      100.000000
2 -6478.653809  200.026123 -6578.679688 -2032.148193   0.000000           0.000000  100.025879      100.025879
3 -6478.653809   99.275879 -6478.679688 -2032.148193   0.000000           0.000000    0.025879        0.025879
4 -6278.627930  200.051758 -6378.679932 -2032.148193   0.026123           0.000000  100.025879      100.025635
5 -6278.627930    2.000000 -6378.679688 -2032.148193   0.026123           0.026123  100.025635        0.025635
6 -6278.627930    5.500000 -6278.679688 -1933.122314   0.026123           0.026123    0.025635       -0.948486
7 -6266.153564   12.500000 -6277.705566 -1933.122314   0.026123           0.026123   11.525879      -88.474121
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:22:12]  --------------------------------------------------------------------------------
[07/18 17:22:12]  Iteration: 377 (3 solution, 373 counterexamples)
[07/18 17:22:26]  Generator returned sat in 9.468482 secs.
[07/18 17:22:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:22:26]  Improved gap from 1995/2048 to 0
[07/18 17:22:26]  Improved number of small numbers from 82 to 90 out of a max of 90
[07/18 17:22:26]  Verifer returned sat in 0.269323 secs.
[07/18 17:22:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6113.290527    0.051514 -6213.303467 -2197.169678   0.000000           0.000000  100.012939      100.012939
1 -6113.290527    0.012695 -6113.316162 -2197.169678   0.000000           0.000000    0.025635        0.012939
2 -6113.290527    0.012695 -6113.303467 -2097.182617   0.000000           0.000000    0.012939        0.000000
3 -5980.628174  132.675293 -6013.290527 -2097.182617   0.000000           0.000000   32.662354       32.662354
4 -5813.277588  200.012939 -5913.290527 -2097.182617   0.012939           0.000000  100.000000      100.000000
5 -5813.277588    2.000000 -5816.303467 -2097.182617   0.012939           0.012939    3.012939        0.000000
6 -5812.290527    4.000000 -5813.290283 -1998.169922   0.012939           0.012939    0.986816       -0.000244
7 -5806.277344    7.000000 -5812.303223 -1998.169922   0.012939           0.012939    6.012939      -93.987061
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:22:27]  --------------------------------------------------------------------------------
[07/18 17:22:27]  Iteration: 378 (3 solution, 374 counterexamples)
[07/18 17:22:39]  Generator returned sat in 7.883736 secs.
[07/18 17:22:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:22:40]  Verifer returned unsat in 0.028098 secs.
[07/18 17:22:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:22:40]  --------------------------------------------------------------------------------
[07/18 17:22:40]  Iteration: 379 (4 solution, 374 counterexamples)
[07/18 17:22:51]  Generator returned sat in 7.172219 secs.
[07/18 17:22:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:22:52]  Improved gap from 1/8192 to 0
[07/18 17:22:52]  Improved number of small numbers from 41 to 90 out of a max of 90
[07/18 17:22:52]  Verifer returned sat in 0.265144 secs.
[07/18 17:22:52]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5818.776855    0.051514 -5918.789795 -2097.182861   0.000000           0.000000  100.012939      100.012939
1 -5818.776855    0.000244 -5818.790039 -2097.182861   0.000000           0.000000    0.013184        0.012939
2 -5818.776855    0.012695 -5818.789795 -2097.182861   0.000000           0.000000    0.012939      -99.987061
3 -5619.289551  199.500244 -5619.289551 -2096.683105   0.000000           0.000000    0.000000        0.000000
4 -5419.289307  200.000244 -5519.289551 -2096.683105   0.000244           0.000000  100.000000      100.000000
5 -5419.289307    2.000000 -5420.789795 -2096.683105   0.000244           0.000244    1.500244        0.000000
6 -5418.289551    2.500000 -5419.289551 -1997.682861   0.000244           0.000244    0.999756        0.000000
7 -5416.289307    3.000000 -5418.289795 -1997.682617   0.000244           0.000244    2.000244      -97.999512
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:22:52]  --------------------------------------------------------------------------------
[07/18 17:22:52]  Iteration: 380 (4 solution, 375 counterexamples)
[07/18 17:23:49]  Generator returned sat in 51.958978 secs.
[07/18 17:23:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:23:49]  Improved gap from 4095/4096 to 0
[07/18 17:23:50]  Improved number of small numbers from 37 to 82 out of a max of 90
[07/18 17:23:50]  Verifer returned sat in 0.663617 secs.
[07/18 17:23:50]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5331.071533    0.051514 -5531.071533 -2096.683350   0.000000           0.000000  200.000000      200.000000
1 -5331.071533    0.025879 -5431.071777 -2096.683350   0.000000           0.000000  100.000244      100.000000
2 -5331.071533    0.025879 -5431.071533 -2096.683350   0.000000           0.000000  100.000000        0.000000
3 -5271.261230  159.810303 -5271.261444 -2096.683105   0.000000           0.000000    0.000214      -40.189453
4 -5031.045990  240.215454 -5131.071777 -2096.683105   0.025635           0.000000  100.000153      100.000153
5 -5031.045990    2.000000 -5033.597412 -2096.683105   0.025635           0.025635    2.525787        0.000153
6 -5030.071777    3.500000 -5031.071777 -1997.657471   0.025635           0.025635    0.974365        0.000000
7 -5025.296143    5.750000 -5030.097412 -1997.657471   0.025635           0.025635    4.775635      -95.224365
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:23:50]  --------------------------------------------------------------------------------
[07/18 17:23:50]  Iteration: 381 (4 solution, 376 counterexamples)
[07/18 17:24:29]  Generator returned sat in 35.044687 secs.
[07/18 17:24:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:24:30]  Improved number of small numbers from 76 to 89 out of a max of 89
[07/18 17:24:30]  Verifer returned sat in 0.156127 secs.
[07/18 17:24:30]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5535.947021    0.051270 -5735.946777 -1200.170166       0.00               0.00  199.999756      199.999756
1 -5435.947021  299.999756 -5635.947021 -1200.170166       0.00               0.00  200.000000      199.999756
2 -5435.947021    0.012939 -5635.946777 -1200.170166       0.00               0.00  199.999756       99.999756
3 -5435.947021    0.012695 -5535.946777 -1200.170166       0.00               0.00   99.999756       -0.000244
4 -5135.446777  400.500000 -5335.946777 -1200.170166     100.50               0.00  100.000000      100.000000
5 -5033.196777  202.250000 -5235.947021 -1200.170166     102.75             100.50  100.000244      100.000000
6 -5030.072021  103.125000 -5235.946777 -1200.170166     102.75             102.75  103.124756        3.124756
7 -4532.696777  600.500000 -5135.946777 -1200.170166     303.25             102.75  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:24:30]  --------------------------------------------------------------------------------
[07/18 17:24:30]  Iteration: 382 (4 solution, 377 counterexamples)
[07/18 17:24:45]  Generator returned sat in 9.911881 secs.
[07/18 17:24:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:24:46]  Improved number of small numbers from 35 to 47 out of a max of 89
[07/18 17:24:46]  Verifer returned sat in 0.628275 secs.
[07/18 17:24:46]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5590.670410    0.051025 -5790.670326 -1200.170166    0.000000           0.000000  199.999916      199.999916
1 -5490.670326  300.000000 -5690.670410 -1200.170166    0.000000           0.000000  200.000084      200.000000
2 -5490.670326    0.012939 -5590.670410 -1200.170166    0.000000           0.000000  100.000084      100.000000
3 -5490.670326    0.012817 -5590.670326 -1200.170166    0.000000           0.000000  100.000000        0.000000
4 -5190.151100  400.519226 -5390.670326 -1200.170166    0.519226           0.000000  200.000000      200.000000
5 -5187.891487  202.259613 -5290.670326 -1200.170166    2.778839           0.519226  100.000000      100.000000
6 -5184.761681  103.129807 -5290.670326 -1200.170166    2.778839           2.778839  103.129807        3.129807
7 -4532.696777  755.194710 -5190.670166 -1200.170166  357.973633           2.778839  299.999756      199.999916
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:24:46]  --------------------------------------------------------------------------------
[07/18 17:24:46]  Iteration: 383 (4 solution, 378 counterexamples)
[07/18 17:25:28]  Generator returned sat in 36.904634 secs.
[07/18 17:25:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:25:28]  Verifer returned unsat in 0.043208 secs.
[07/18 17:25:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:25:28]  --------------------------------------------------------------------------------
[07/18 17:25:28]  Iteration: 384 (5 solution, 378 counterexamples)
[07/18 17:26:09]  Generator returned sat in 36.125415 secs.
[07/18 17:26:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:26:10]  Improved number of small numbers from 32 to 89 out of a max of 89
[07/18 17:26:10]  Verifer returned sat in 0.294797 secs.
[07/18 17:26:10]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5490.670166    0.051025 -5590.696045 -1102.215576    0.000000           0.000000  100.025879        0.025879
1 -5490.670166    0.025635 -5490.695801 -1102.215576    0.000000           0.000000    0.025635      -99.974121
2 -4790.670410  700.025391 -5290.696045 -1102.215576  300.025635           0.000000  200.000000      200.000000
3 -4690.645020  300.025391 -5191.345459 -1102.215576  400.050781         300.025635  100.649658      100.000244
4 -4590.619385  200.675293 -5091.345703 -1102.215576  400.076660         400.050781  100.649658      100.000000
5 -4490.593994  200.675049 -5090.696045 -1102.215576  400.101807         400.076660  200.000244      100.000244
6 -4490.593994  101.000000 -4990.695801 -1102.215576  400.101807         400.101807  100.000000        0.000244
7 -4185.944336  404.649658 -4890.695801 -1102.215576  504.751709         400.101807  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:26:10]  --------------------------------------------------------------------------------
[07/18 17:26:10]  Iteration: 385 (5 solution, 379 counterexamples)
[07/18 17:26:21]  Generator returned sat in 6.663792 secs.
[07/18 17:26:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:26:22]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:26:22]  Verifer returned sat in 0.134570 secs.
[07/18 17:26:22]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5490.670166    0.051025 -5590.696045 -1102.215576    0.000000           0.000000  100.025879        0.025879
1 -5490.670166    0.025635 -5490.695801 -1102.215576    0.000000           0.000000    0.025635      -99.974121
2 -4790.670410  700.025391 -5290.696045 -1102.215576  300.025635           0.000000  200.000000      200.000000
3 -4690.645020  300.025391 -5191.345459 -1102.215576  400.050781         300.025635  100.649658      100.000244
4 -4590.619385  200.675293 -5091.345703 -1102.215576  400.076660         400.050781  100.649658      100.000000
5 -4490.593994  200.675049 -5090.196045 -1102.215576  400.101807         400.076660  199.500244      100.000244
6 -4490.593994  101.250000 -4990.695801 -1102.215576  400.101807         400.101807  100.000000        0.000244
7 -4185.944336  404.649658 -4890.695801 -1102.215576  504.751709         400.101807  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:26:22]  --------------------------------------------------------------------------------
[07/18 17:26:22]  Iteration: 386 (5 solution, 380 counterexamples)
[07/18 17:26:44]  Generator returned sat in 17.466635 secs.
[07/18 17:26:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:26:45]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:26:45]  Verifer returned sat in 0.126406 secs.
[07/18 17:26:45]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5490.670410    0.051025 -5684.746826 -1102.215576    0.000000           0.000000  194.076416      194.076416
1 -5490.670410    0.025391 -5584.746826 -1102.215576    0.000000           0.000000   94.076416       94.076416
2 -5284.746826  300.000000 -5484.746826 -1102.215576    0.000000           0.000000  200.000000      200.000000
3 -4690.645264  794.101562 -5484.746826 -1102.215576  496.076660           0.000000  298.024902      198.024902
4 -4590.619385  398.050781 -5284.746826 -1102.215576  594.127441         496.076660  100.000000      100.000000
5 -4490.593994  200.025391 -5284.746826 -1102.215576  594.152832         594.127441  200.000000      100.000000
6 -4490.593994  101.012695 -5184.746582 -1102.215576  594.152832         594.152832   99.999756        0.000000
7 -3989.593262  601.000488 -4984.746826 -1102.215576  795.153564         594.152832  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:26:45]  --------------------------------------------------------------------------------
[07/18 17:26:45]  Iteration: 387 (5 solution, 381 counterexamples)
[07/18 17:27:01]  Generator returned sat in 11.874321 secs.
[07/18 17:27:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:27:02]  Verifer returned unsat in 0.032589 secs.
[07/18 17:27:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:27:02]  --------------------------------------------------------------------------------
[07/18 17:27:02]  Iteration: 388 (6 solution, 381 counterexamples)
[07/18 17:27:15]  Generator returned sat in 8.792325 secs.
[07/18 17:27:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:27:16]  Improved gap from 209/16384 to 100
[07/18 17:27:17]  Improved number of small numbers from 37 to 61 out of a max of 90
[07/18 17:27:17]  Verifer returned sat in 0.619587 secs.
[07/18 17:27:17]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6675.558594     0.051025 -6875.558350 -11.404165     0.000000           0.000000  199.999756       99.999888
1 -6675.558594     0.025635 -6775.558350 -11.404165     0.000000           0.000000   99.999756       -0.000112
2 -6375.558594   399.999756 -6675.558481 -11.404165     0.000000           0.000000  299.999888      199.999888
3 -5881.660532   793.897949 -6575.558350 -11.404165   393.897949           0.000000  299.999868      200.000000
4 -5783.711426   397.948975 -6475.558350 -11.404165   491.846924         393.897949  200.000000      100.000132
5 -5783.711426   199.974487 -6275.558481 -11.404165   491.846924         491.846924    0.000132        0.000132
6 -4682.749827  1100.961731 -6275.558481 -11.404165  1292.808655         491.846924  300.000000      200.000000
7 -4431.268961   551.480865 -6175.558350 -11.404165  1544.289307        1292.808655  200.000082      100.000214
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:27:17]  --------------------------------------------------------------------------------
[07/18 17:27:17]  Iteration: 389 (6 solution, 382 counterexamples)
[07/18 17:27:59]  Generator returned sat in 37.571028 secs.
[07/18 17:28:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:28:00]  Improved number of small numbers from 41 to 44 out of a max of 89
[07/18 17:28:00]  Verifer returned sat in 0.779845 secs.
[07/18 17:28:00]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6675.558838     0.050781 -6875.558350 -11.404297     0.000000           0.000000  199.999512       99.999512
1 -6675.558838     0.025391 -6775.558350 -11.404165     0.000000           0.000000   99.999512       -0.000356
2 -6375.558838   399.999512 -6675.558481 -11.404165     0.000000           0.000000  299.999644      199.999644
3 -5877.319664   798.238818 -6575.558350 -11.404165   398.238818           0.000000  299.999868      200.000000
4 -5776.200123   401.119409 -6475.558350 -11.404165   496.785837         398.238818  202.572390      102.572522
5 -5776.200123   202.559704 -6278.497394 -11.404165   496.785837         496.785837    5.511435        2.572522
6 -4682.749827  1098.961731 -6275.558481 -11.404165  1292.808655         496.785837  300.000000      200.000000
7 -4431.268961   551.480865 -6175.558350 -11.404165  1544.289062        1292.808655  200.000326      100.000458
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:28:01]  --------------------------------------------------------------------------------
[07/18 17:28:01]  Iteration: 390 (6 solution, 383 counterexamples)
[07/18 17:29:08]  Generator returned sat in 62.151427 secs.
[07/18 17:29:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:29:08]  Improved gap from 209/8192 to 100
[07/18 17:29:08]  Improved number of small numbers from 34 to 90 out of a max of 90
[07/18 17:29:08]  Verifer returned sat in 0.242217 secs.
[07/18 17:29:08]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5876.315186    0.050781 -5976.340332 -11.404297    0.000000           0.000000  100.025146        0.025391
1 -5876.315186  100.000000 -5876.340576 -11.404297    0.000000           0.000000    0.025391      -99.974609
2 -5576.314941  300.025635 -5676.340576 -11.404297    0.000000           0.000000  100.025635      100.025635
3 -5376.315186  300.025391 -5676.340332 -11.404297    0.025635           0.000000  299.999512      199.999756
4 -5376.315186  150.012695 -5576.340576 -11.404297    0.025635           0.025635  199.999756       99.999756
5 -4974.314941  602.000000 -5476.340576 -11.404297  298.127686           0.025635  203.897949      103.897949
6 -4877.212891  301.000000 -5376.340332 -11.404297  298.152832         298.127686  200.974609      100.974854
7 -4877.212891  150.500000 -5276.340332 -11.404297  298.152832         298.152832  100.974609        0.974854
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:29:09]  --------------------------------------------------------------------------------
[07/18 17:29:09]  Iteration: 391 (6 solution, 384 counterexamples)
[07/18 17:29:24]  Generator returned sat in 11.038523 secs.
[07/18 17:29:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:29:25]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/18 17:29:25]  Verifer returned sat in 0.145885 secs.
[07/18 17:29:25]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5801.305664    0.050781 -5976.340332 -11.404297    0.000000           0.000000  175.034668       75.034912
1 -5801.305664  100.000000 -5801.331055 -11.404297    0.000000           0.000000    0.025391      -24.965088
2 -5676.315186  125.015869 -5676.340576 -11.404297    0.000000           0.000000    0.025391        0.025391
3 -5476.315186  200.025391 -5576.378662 -11.404297    0.025391           0.000000  100.038086      100.000000
4 -5476.315186  100.012695 -5576.340576 -11.404297    0.025391           0.025391  100.000000        0.000000
5 -4974.315186  602.000000 -5476.340576 -11.404297  298.127441           0.025391  203.897949      103.897949
6 -4877.213135  301.000000 -5376.340332 -11.404297  299.127441         298.127441  199.999756      100.000000
7 -4877.213135  150.500000 -5276.340332 -11.404297  299.127441         299.127441   99.999756        0.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:29:25]  --------------------------------------------------------------------------------
[07/18 17:29:25]  Iteration: 392 (6 solution, 385 counterexamples)
[07/18 17:29:44]  Generator returned sat in 14.191144 secs.
[07/18 17:29:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:29:44]  Verifer returned unsat in 0.045226 secs.
[07/18 17:29:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:29:44]  --------------------------------------------------------------------------------
[07/18 17:29:44]  Iteration: 393 (7 solution, 385 counterexamples)
[07/18 17:29:56]  Generator returned sat in 7.131431 secs.
[07/18 17:29:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:29:57]  Improved number of small numbers from 37 to 89 out of a max of 89
[07/18 17:29:57]  Verifer returned sat in 0.230446 secs.
[07/18 17:29:57]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5801.305908    0.050537 -5901.318604 -11.404297   0.000000           0.000000  100.012695        0.012695
1 -5801.305908    0.012695 -5801.318359 -11.404297   0.000000           0.000000    0.012451      -99.987305
2 -5626.068359  175.250000 -5626.081299 -11.404297   0.000000           0.000000    0.012939      -24.749756
3 -5501.318604  124.762695 -5601.318604 -11.404297   0.000000           0.000000  100.000000        0.000000
4 -5201.293213  400.025391 -5401.318604 -11.404297   0.025391           0.000000  200.000000      200.000000
5 -5201.280518  200.012695 -5401.318359 -11.404297   0.037842           0.025391  200.000000      100.000244
6 -5201.280518  100.006348 -5202.293213 -11.404297   0.037842           0.037842    0.974854        0.000244
7 -4802.229980  400.025391 -5201.318359 -11.404297  99.582275           0.037842  299.506104      199.506348
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:29:57]  --------------------------------------------------------------------------------
[07/18 17:29:57]  Iteration: 394 (7 solution, 386 counterexamples)
[07/18 17:30:32]  Generator returned sat in 29.795436 secs.
[07/18 17:30:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:30:32]  Improved gap from 207/32768 to 100
[07/18 17:30:32]  Improved number of small numbers from 39 to 90 out of a max of 90
[07/18 17:30:32]  Verifer returned sat in 0.274384 secs.
[07/18 17:30:32]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6928.253174    0.050293 -7128.253174 -11.404297    0.000000           0.000000  200.000000      200.000000
1 -6928.253174    0.025146 -7071.252930 -11.404297    0.000000           0.000000  142.999756      100.000000
2 -6728.253174  342.999756 -7028.253174 -11.404297    0.000000           0.000000  300.000000      200.000000
3 -6728.228027  300.025146 -6928.253174 -11.404297    0.025146           0.000000  200.000000      100.000000
4 -6728.228027  100.000000 -6828.252930 -11.404297    0.025146           0.025146   99.999756        0.000000
5 -6190.227783  638.000000 -6724.253174 -11.404297  338.025146           0.025146  196.000244      100.000244
6 -6190.227783  152.000000 -6628.253174 -11.404297  338.025146         338.025146  100.000244        0.000244
7 -5460.228027  830.000000 -6428.253174 -11.404297  768.025391         338.025146  199.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:30:33]  --------------------------------------------------------------------------------
[07/18 17:30:33]  Iteration: 395 (7 solution, 387 counterexamples)
[07/18 17:30:48]  Generator returned sat in 10.854696 secs.
[07/18 17:30:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:30:49]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/18 17:30:49]  Verifer returned sat in 0.168624 secs.
[07/18 17:30:49]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6928.253174    0.050293 -7128.253174 -11.404297    0.000000           0.000000  200.000000      200.000000
1 -6928.253174    0.025146 -7071.252930 -11.404297    0.000000           0.000000  142.999756      100.000000
2 -6728.253174  342.999756 -7028.253174 -11.404297    0.000000           0.000000  300.000000      200.000000
3 -6728.228027  300.025146 -6928.253174 -11.404297    0.025146           0.000000  200.000000      100.000000
4 -6728.228027  100.000000 -6828.252930 -11.404297    0.025146           0.025146   99.999756        0.000000
5 -6191.227783  637.000000 -6725.585856 -11.404297  337.025391           0.025146  197.332682      100.000000
6 -6191.227783  151.333659 -6627.253418 -11.404297  337.025391         337.025391   99.000244        0.000000
7 -5460.228027  830.000000 -6428.253174 -11.404297  768.025391         337.025391  199.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:30:49]  --------------------------------------------------------------------------------
[07/18 17:30:49]  Iteration: 396 (7 solution, 388 counterexamples)
[07/18 17:31:03]  Generator returned sat in 10.010791 secs.
[07/18 17:31:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:31:04]  Improved gap from 0 to 100
[07/18 17:31:05]  Improved number of small numbers from 30 to 46 out of a max of 90
[07/18 17:31:05]  Verifer returned sat in 0.777840 secs.
[07/18 17:31:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6978.680664    0.050049 -6978.705811 -211.90744    0.000000           0.000000    0.025146        0.024963
1 -6978.680664    0.012451 -6978.705566 -211.90744    0.000000           0.000000    0.024902      -99.975037
2 -6578.705811  399.999756 -6878.705627 -211.90744    0.000000           0.000000  299.999817      199.999817
3 -6478.680481  400.025146 -6678.705627 -211.90744  100.025146           0.000000  100.000000      100.000000
4 -6378.667908  200.012573 -6578.712158 -211.90744  100.037720         100.025146  100.006531      100.000000
5 -6378.667908  100.006287 -6578.705627 -211.90744  100.037720         100.037720  100.000000        0.000000
6 -5727.658478  751.009430 -6478.705627 -211.90744  451.047150         100.037720  300.000000      200.000000
7 -5652.153763  375.504715 -6378.705566 -211.90744  451.047363         451.047150  275.504440      175.504501
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:31:05]  --------------------------------------------------------------------------------
[07/18 17:31:05]  Iteration: 397 (7 solution, 389 counterexamples)
[07/18 17:31:31]  Generator returned sat in 20.885362 secs.
[07/18 17:31:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:31:31]  Verifer returned unsat in 0.057094 secs.
[07/18 17:31:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:31:31]  --------------------------------------------------------------------------------
[07/18 17:31:31]  Iteration: 398 (8 solution, 389 counterexamples)
[07/18 17:31:54]  Generator returned sat in 18.593860 secs.
[07/18 17:31:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:31:55]  Verifer returned unsat in 0.028780 secs.
[07/18 17:31:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:31:55]  --------------------------------------------------------------------------------
[07/18 17:31:55]  Iteration: 399 (9 solution, 389 counterexamples)
[07/18 17:32:13]  Generator returned sat in 13.046550 secs.
[07/18 17:32:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:32:13]  Verifer returned unsat in 0.022883 secs.
[07/18 17:32:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:32:13]  --------------------------------------------------------------------------------
[07/18 17:32:13]  Iteration: 400 (10 solution, 389 counterexamples)
[07/18 17:32:24]  Generator returned sat in 6.674984 secs.
[07/18 17:32:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:32:25]  Verifer returned unsat in 0.018579 secs.
[07/18 17:32:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:32:25]  --------------------------------------------------------------------------------
[07/18 17:32:25]  Iteration: 401 (11 solution, 389 counterexamples)
[07/18 17:32:51]  Generator returned sat in 21.009845 secs.
[07/18 17:32:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:32:51]  Improved gap from 1/1600 to 100
[07/18 17:32:52]  Improved number of small numbers from 23 to 33 out of a max of 90
[07/18 17:32:52]  Verifer returned sat in 0.987160 secs.
[07/18 17:32:52]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6327.262207    0.049805 -6527.262074 -964.853505    0.000000           0.000000  199.999867      199.999867
1 -6327.262207    0.025146 -6427.262074 -964.853505    0.000000           0.000000   99.999867       99.999867
2 -6327.237050  100.025024 -6327.262074 -964.853505    0.000000           0.000000    0.025024        0.025024
3 -6127.237050  200.025024 -6260.612091 -964.853505    0.025024           0.000000  133.350016      100.000000
4 -6127.237050  133.324992 -6227.262074 -964.853505    0.025024           0.025024  100.000000        0.000000
5 -5625.749562  601.487488 -6107.262074 -964.853505  301.512512           0.025024  180.000000      100.000000
6 -5625.749562  110.000000 -6027.262074 -964.853505  301.512512         301.512512  100.000000        0.000000
7 -5092.549530  633.200033 -5927.261963 -964.853505  634.712402         301.512512  200.000031      100.000142
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 17:32:52]  --------------------------------------------------------------------------------
[07/18 17:32:52]  Iteration: 402 (11 solution, 390 counterexamples)
[07/18 17:33:30]  Generator returned sat in 33.047117 secs.
[07/18 17:33:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:33:31]  Verifer returned unsat in 0.041977 secs.
[07/18 17:33:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:33:31]  --------------------------------------------------------------------------------
[07/18 17:33:31]  Iteration: 403 (12 solution, 390 counterexamples)
[07/18 17:33:47]  Generator returned sat in 12.157560 secs.
[07/18 17:33:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:33:48]  Improved gap from 51/2048 to 100
[07/18 17:33:49]  Improved number of small numbers from 36 to 50 out of a max of 90
[07/18 17:33:49]  Verifer returned sat in 0.732641 secs.
[07/18 17:33:49]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7329.007080     0.049561 -7529.006970 -363.188352     0.000000           0.000000  199.999890      199.999890
1 -7329.007080   199.999756 -7429.007080 -363.188352     0.000000           0.000000  100.000000       99.999890
2 -7329.007080    99.999756 -7429.006970 -363.188352     0.000000           0.000000   99.999890       -0.000110
3 -7315.149827   113.857143 -7315.174729 -363.188352     0.000000           0.000000    0.024902      -86.142857
4 -6715.224534   599.950195 -7229.006836 -363.188352   213.782436           0.000000  299.999866      200.000000
5 -6715.224534   299.975098 -7029.006970 -363.188352   213.782436         213.782436  100.000000      100.000000
6 -5563.761888  1251.462646 -6929.006970 -363.188352  1265.245082         213.782436  100.000000      100.000000
7 -5038.030564   625.731323 -6929.006836 -363.188352  1690.976318        1265.245082  199.999953      100.000087
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=3.[0m
[07/18 17:33:49]  --------------------------------------------------------------------------------
[07/18 17:33:49]  Iteration: 404 (12 solution, 391 counterexamples)
[07/18 17:34:21]  Generator returned sat in 27.450280 secs.
[07/18 17:34:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:34:22]  Verifer returned unsat in 0.041412 secs.
[07/18 17:34:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:34:22]  --------------------------------------------------------------------------------
[07/18 17:34:22]  Iteration: 405 (13 solution, 391 counterexamples)
[07/18 17:34:33]  Generator returned sat in 6.918641 secs.
[07/18 17:34:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:34:34]  Verifer returned unsat in 0.022074 secs.
[07/18 17:34:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:34:34]  --------------------------------------------------------------------------------
[07/18 17:34:34]  Iteration: 406 (14 solution, 391 counterexamples)
[07/18 17:34:47]  Generator returned sat in 8.682359 secs.
[07/18 17:34:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:34:48]  Verifer returned unsat in 0.041164 secs.
[07/18 17:34:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:34:48]  --------------------------------------------------------------------------------
[07/18 17:34:48]  Iteration: 407 (15 solution, 391 counterexamples)
[07/18 17:35:06]  Generator returned sat in 13.838039 secs.
[07/18 17:35:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:07]  Improved gap from 0 to 0
[07/18 17:35:07]  Improved number of small numbers from 59 to 90 out of a max of 90
[07/18 17:35:07]  Verifer returned sat in 0.291176 secs.
[07/18 17:35:07]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5947.759277    0.049316 -6247.759277 -1744.436279   0.000000           0.000000  300.000000      200.000000
1 -5947.759277  199.999512 -6147.759277 -1744.436279   0.000000           0.000000  200.000000      100.000000
2 -5947.759277    0.024658 -5947.784180 -1744.436279   0.000000           0.000000    0.024902        0.000000
3 -5748.784180  199.000000 -5847.759521 -1744.436279   0.000000           0.000000   98.975342       98.975098
4 -5646.759521  201.000000 -5747.759521 -1744.436279   0.024658           0.000000  100.975342      100.975098
5 -5646.759521    2.000000 -5650.809082 -1744.436279   0.024658           0.024658    4.024902        0.975098
6 -5646.759521    4.000000 -5647.759277 -1645.411377   0.024658           0.024658    0.975098        0.000000
7 -5641.734619    6.000000 -5646.783936 -1645.411133   0.024658           0.024658    5.024658      -94.974854
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 17:35:07]  --------------------------------------------------------------------------------
[07/18 17:35:07]  Iteration: 408 (15 solution, 392 counterexamples)
[07/18 17:35:22]  Generator returned sat in 10.190309 secs.
[07/18 17:35:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:23]  Verifer returned unsat in 0.024796 secs.
[07/18 17:35:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:23]  --------------------------------------------------------------------------------
[07/18 17:35:23]  Iteration: 409 (16 solution, 392 counterexamples)
[07/18 17:35:44]  Generator returned sat in 16.372668 secs.
[07/18 17:35:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:44]  Verifer returned unsat in 0.026662 secs.
[07/18 17:35:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:44]  --------------------------------------------------------------------------------
[07/18 17:35:44]  Iteration: 410 (17 solution, 392 counterexamples)
[07/18 17:35:56]  Generator returned sat in 7.176140 secs.
[07/18 17:35:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:57]  Verifer returned unsat in 0.028356 secs.
[07/18 17:35:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:35:57]  --------------------------------------------------------------------------------
[07/18 17:35:57]  Iteration: 411 (18 solution, 392 counterexamples)
[07/18 17:36:08]  Generator returned sat in 7.105840 secs.
[07/18 17:36:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:09]  Verifer returned unsat in 0.033776 secs.
[07/18 17:36:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:09]  --------------------------------------------------------------------------------
[07/18 17:36:09]  Iteration: 412 (19 solution, 392 counterexamples)
[07/18 17:36:26]  Generator returned unsat in 12.274900 secs.
[07/18 17:36:26]  [96mNo more solutions found[0m
[07/18 17:36:26]  Final solutions:
[07/18 17:36:26]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:26]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:26]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:36:26]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:36:26]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:36:26]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:26]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:36:26]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:36:26]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:36:26]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:26]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:36:26]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:36:26]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:36:26]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:36:26]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 17:36:26]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:36:26]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 17:36:26]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 17:36:26]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 17:36:26]  Took 4019.836065 secs.
