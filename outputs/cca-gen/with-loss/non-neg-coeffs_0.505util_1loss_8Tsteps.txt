[07/13 21:44:53]  --------------------------------------------------------------------------------
[07/13 21:44:53]  Iteration: 1
[07/13 21:44:53]  Generator returned sat in 0.004249 secs.
[07/13 21:44:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:44:53]  Improved gap from 0 to 100
[07/13 21:44:53]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:44:53]  Verifer returned sat in 0.252216 secs.
[07/13 21:44:53]  Counter example: 
[93m   arrival_0,t  cwnd_0,t  service_0,t  wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0     -1665.98       0.1     -1765.98   1765.98        0.0                0.0    100.0           100.0
1     -1665.98     100.0     -1765.98   1765.98        0.0                0.0    100.0             0.0
2     -1365.98     300.0     -1631.98   1765.98      100.0              100.0    166.0           100.0
3     -1365.98     166.0     -1565.98   1765.98      100.0              100.0    100.0             0.0
4      -631.98     734.0     -1465.98   1765.98      534.0              534.0    300.0           200.0
5      1438.02    2070.0     -1365.98   1765.98     2504.0             2504.0    300.0           200.0
6      6112.02    4674.0     -1265.98   1765.98     7078.0             7078.0    300.0           200.0
7     16062.02    9950.0     -1165.98   1765.98    16928.0            16928.0    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:54]  --------------------------------------------------------------------------------
[07/13 21:44:54]  Iteration: 2
[07/13 21:44:54]  Generator returned sat in 0.005683 secs.
[07/13 21:44:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:54]  Improved number of small numbers from 47 to 89 out of a max of 89
[07/13 21:44:54]  Verifer returned sat in 0.241227 secs.
[07/13 21:44:54]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980225     0.099854  -1865.97998  1765.97998     0.000000           0.000000  299.999756      199.999756
1 -1565.980225     0.024902  -1765.97998  1765.97998     0.000000           0.000000  199.999756       99.999756
2 -1166.004883   400.000000  -1603.98000  1765.97998   199.975098         199.975098  238.000020      200.000000
3 -1166.004883   237.975098  -1465.97998  1765.97998   199.975098         199.975098  100.000000      100.000000
4  -647.017334   518.987549  -1365.97998  1765.97998   518.962891         518.962891  199.999756      199.999756
5   472.970215  1119.987549  -1265.98000  1765.97998  1538.950195        1538.950195  200.000020      200.000000
6  2100.957764  1627.987549  -1265.97998  1765.97998  3166.937500        3166.937500  200.000244      100.000244
7  4029.945312  1928.987549  -1165.97998  1765.97998  4995.925049        4995.925049  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:54]  --------------------------------------------------------------------------------
[07/13 21:44:54]  Iteration: 3
[07/13 21:44:54]  Generator returned sat in 0.004961 secs.
[07/13 21:44:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:54]  Improved number of small numbers from 64 to 89 out of a max of 89
[07/13 21:44:54]  Verifer returned sat in 0.178228 secs.
[07/13 21:44:54]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980225     0.099854 -1865.980225  1765.97998     0.000000           0.000000  300.000000      200.000000
1 -1565.980225     0.024658 -1765.980225  1765.97998     0.000000           0.000000  200.000000      100.000000
2 -1166.005127   400.000000 -1665.979980  1765.97998   199.975098         199.975098  299.999756      200.000000
3 -1166.005127   299.987793 -1481.980225  1765.97998   199.975098         199.975098  116.000000      100.000000
4  -824.011230   341.993896 -1365.980225  1765.97998   441.968750         441.968750  100.000244      100.000244
5   118.982666   942.993896 -1365.979980  1765.97998  1284.962646        1284.962646  200.000000      100.000244
6  1512.976562  1393.993896 -1165.980225  1765.97998  2478.956787        2478.956787  200.000000      200.000000
7  3381.970459  1868.993896 -1165.979980  1765.97998  4347.950195        4347.950195  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:55]  --------------------------------------------------------------------------------
[07/13 21:44:55]  Iteration: 4
[07/13 21:44:55]  Generator returned sat in 0.027106 secs.
[07/13 21:44:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:55]  Improved number of small numbers from 82 to 89 out of a max of 89
[07/13 21:44:55]  Verifer returned sat in 0.142051 secs.
[07/13 21:44:55]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980469    0.099609 -1865.980225  1765.97998     0.000000           0.000000  299.999756      199.999756
1 -1565.980469    0.049805 -1765.980225  1765.97998     0.000000           0.000000  199.999756       99.999756
2 -1166.030273  400.000000 -1650.980225  1765.97998   199.949951         199.949951  285.000000      200.000000
3 -1165.980469  285.000000 -1481.980225  1765.97998   199.999756         199.999756  116.000000      100.000000
4  -687.980469  478.000000 -1365.980225  1765.97998   477.999756         477.999756  200.000000      200.000000
5    -8.980469  679.000000 -1265.980225  1765.97998  1057.000000        1057.000000  199.999756      199.999756
6   863.519531  872.500000 -1265.980225  1765.97998  1829.499756        1829.499756  300.000000      200.000000
7  1845.019531  981.500000 -1165.980225  1765.97998  2810.999756        2810.999756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:55]  --------------------------------------------------------------------------------
[07/13 21:44:55]  Iteration: 5
[07/13 21:44:55]  Generator returned sat in 0.006977 secs.
[07/13 21:44:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:55]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:44:55]  Verifer returned sat in 0.123545 secs.
[07/13 21:44:55]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980469    0.099609 -1865.980225  1765.97998     0.000000           0.000000  299.999756      199.999756
1 -1565.980469    0.049805 -1765.980225  1765.97998     0.000000           0.000000  199.999756       99.999756
2 -1166.030273  400.000000 -1650.980225  1765.97998   199.949951         199.949951  285.000000      200.000000
3 -1166.005371  285.000000 -1481.980225  1765.97998   199.974854         199.974854  116.000000      100.000000
4  -689.005371  477.000000 -1365.980225  1765.97998   476.974854         476.974854  200.000000      200.000000
5   -12.005371  677.000000 -1265.980225  1765.97998  1053.975098        1053.975098  199.999756      199.999756
6   857.494629  869.500000 -1265.980225  1765.97998  1823.474854        1823.474854  300.000000      200.000000
7  1834.994629  977.500000 -1165.980225  1765.97998  2800.974854        2800.974854  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:55]  --------------------------------------------------------------------------------
[07/13 21:44:55]  Iteration: 6
[07/13 21:44:56]  Generator returned sat in 0.011679 secs.
[07/13 21:44:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:56]  Improved number of small numbers from 74 to 89 out of a max of 89
[07/13 21:44:56]  Verifer returned sat in 0.155178 secs.
[07/13 21:44:56]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980713    0.099365 -1864.018066  1765.97998     0.000000           0.000000  298.037354      199.999756
1 -1565.980713    0.012451 -1765.943115  1765.97998     0.000000           0.000000  199.962402       99.999756
2 -1166.030762  399.962402 -1650.980469  1765.97998   199.949951         199.949951  284.999756      199.999756
3 -1165.524414  285.000000 -1481.980469  1765.97998   200.456055         200.456055  116.000000      100.000000
4  -689.005615  476.518799 -1365.980713  1765.97998   476.974854         476.974854  200.000244      200.000000
5   -12.005615  677.000000 -1266.980469  1765.97998  1053.974854        1053.974854  201.000000      200.000000
6   857.494385  869.500000 -1265.980469  1765.97998  1823.474854        1823.474854  300.000000      200.000000
7  1835.494385  978.000000 -1165.980469  1765.97998  2800.974365        2800.974365  200.500488      100.500488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:56]  --------------------------------------------------------------------------------
[07/13 21:44:56]  Iteration: 7
[07/13 21:44:56]  Generator returned sat in 0.021356 secs.
[07/13 21:44:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:56]  Improved number of small numbers from 82 to 89 out of a max of 89
[07/13 21:44:56]  Verifer returned sat in 0.179897 secs.
[07/13 21:44:56]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980469    0.099365 -1864.018066  1765.979736     0.000000           0.000000  298.037598      200.000000
1 -1565.980469    0.049805 -1761.943359  1765.979736     0.000000           0.000000  195.962891      100.000000
2 -1170.067627  395.962646 -1650.980469  1765.979736   195.913086         195.913086  284.999756      199.999756
3 -1166.524658  285.000000 -1481.980469  1765.979736   199.455811         199.455811  116.000000      100.000000
4  -689.005859  477.518799 -1365.980957  1765.979736   476.974609         476.974609  200.000488      200.000000
5   -12.005859  677.000000 -1266.980469  1765.979736  1053.974609        1053.974609  201.000000      200.000000
6   858.494141  870.500000 -1265.980469  1765.979736  1824.474854        1824.474854  299.999756      199.999756
7  1838.494141  980.000000 -1165.980469  1765.979736  2800.974365        2800.974365  203.500244      103.500244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:56]  --------------------------------------------------------------------------------
[07/13 21:44:56]  Iteration: 8
[07/13 21:44:57]  Generator returned sat in 0.021811 secs.
[07/13 21:44:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:57]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:44:57]  Verifer returned sat in 0.104776 secs.
[07/13 21:44:57]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980469    0.099365 -1864.018066  1765.979736     0.000000           0.000000  298.037598           200.0
1 -1565.980469    0.049805 -1765.980469  1765.979736     0.000000           0.000000  200.000000           100.0
2 -1190.555664  400.000000 -1665.980469  1765.979736   175.424805         175.424805  300.000000           200.0
3 -1090.505859  400.000000 -1481.980469  1765.979736   175.474609         175.474609  216.000000           200.0
4  -689.005859  401.500000 -1365.980957  1765.979736   576.974609         576.974609  100.000488           100.0
5  -286.005859  403.000000 -1266.980469  1765.979736   879.974609         879.974609  101.000000           100.0
6   118.494141  404.500000 -1265.980469  1765.979736  1184.474609        1184.474609  200.000000           100.0
7   524.494141  406.000000 -1165.980469  1765.979736  1490.474609        1490.474609  200.000000           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:57]  --------------------------------------------------------------------------------
[07/13 21:44:57]  Iteration: 9
[07/13 21:44:57]  Generator returned sat in 0.015754 secs.
[07/13 21:44:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:57]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:44:57]  Verifer returned sat in 0.103345 secs.
[07/13 21:44:57]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980713    0.099365 -1864.018066  1765.979492     0.000000           0.000000  298.037354      199.999756
1 -1565.980713    0.049805 -1765.980469  1765.979492     0.000000           0.000000  199.999756       99.999756
2 -1190.055908  400.000000 -1665.980469  1765.979492   175.924561         175.924561  300.000000      200.000000
3 -1090.006104  400.000000 -1481.980713  1765.979492   175.974365         175.974365  216.000244      200.000000
4  -689.006104  401.000000 -1365.980957  1765.979492   576.974365         576.974365  100.000488      100.000000
5  -287.006104  402.000000 -1266.980713  1765.979492   878.974365         878.974365  101.000244      100.000000
6   115.993896  403.000000 -1265.980469  1765.979492  1181.974365        1181.974365  200.000000      100.000000
7   519.993896  404.000000 -1165.980469  1765.979492  1485.974365        1485.974365  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:57]  --------------------------------------------------------------------------------
[07/13 21:44:57]  Iteration: 10
[07/13 21:44:58]  Generator returned sat in 0.015470 secs.
[07/13 21:44:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:58]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:44:58]  Verifer returned sat in 0.119015 secs.
[07/13 21:44:58]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980957    0.099365 -1864.018311  1765.979492     0.000000           0.000000  298.037354      199.999756
1 -1565.980957    0.049561 -1765.980469  1765.979492     0.000000           0.000000  199.999512       99.999756
2 -1188.555908  399.999756 -1665.980713  1765.979492   177.424805         177.424805  300.000000      200.000000
3 -1088.506348  400.000000 -1481.980957  1765.979492   177.474365         177.474365  216.000244      200.000000
4  -688.006348  400.500000 -1365.980957  1765.979492   577.974365         577.974365  100.000244      100.000000
5  -287.006348  401.000000 -1266.980957  1765.979492   878.974365         878.974365  101.000244      100.000000
6   114.493652  401.500000 -1265.980469  1765.979492  1180.474365        1180.474365  199.999756      100.000000
7   516.493652  402.000000 -1165.980469  1765.979492  1482.474365        1482.474365  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:58]  --------------------------------------------------------------------------------
[07/13 21:44:58]  Iteration: 11
[07/13 21:44:58]  Generator returned sat in 0.028083 secs.
[07/13 21:44:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:58]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:44:58]  Verifer returned sat in 0.118096 secs.
[07/13 21:44:58]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980957     0.099121 -1864.018555  1765.979492     0.000000           0.000000  298.037598      199.999756
1 -1565.980957     0.049316 -1765.980713  1765.979492     0.000000           0.000000  199.999756       99.999756
2 -1188.556152   399.999756 -1665.980713  1765.979492   177.424805         177.424805  299.999756      199.999756
3 -1088.506348   400.000000 -1481.980957  1765.979492   177.474365         177.474365  216.000244      200.000000
4  -495.487549   593.018799 -1365.981201  1765.979492   670.493164         670.493164  200.000488      200.000000
5   299.531006   795.018555 -1365.980713  1765.979492  1365.511719        1365.511719  300.000000      200.000000
6  1246.549561   947.018555 -1265.980469  1765.979492  2312.530273        2312.530273  199.999756      100.000000
7  2303.568359  1057.018799 -1165.980469  1765.979492  3169.549072        3169.549072  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:58]  --------------------------------------------------------------------------------
[07/13 21:44:58]  Iteration: 12
[07/13 21:44:59]  Generator returned sat in 0.026881 secs.
[07/13 21:44:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:59]  Improved number of small numbers from 82 to 89 out of a max of 89
[07/13 21:44:59]  Verifer returned sat in 0.135114 secs.
[07/13 21:44:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980957     0.098633 -1765.980713  1765.979004     0.000000           0.000000  199.999756      199.999756
1 -1565.980957     0.049561 -1665.980713  1765.979004     0.000000           0.000000   99.999756       99.999756
2 -1266.030029   300.000000 -1665.980713  1765.979004    99.950684          99.950684  300.000000      200.000000
3 -1002.506348   305.018555 -1565.980713  1765.979004   358.455811         358.455811  205.018555      105.018555
4  -495.487793   507.018555 -1454.980713  1765.979004   670.493164         670.493164  288.999756      199.999756
5   224.530762   720.018555 -1365.980713  1765.979004  1290.511475        1290.511475  300.000000      200.000000
6  1246.549316  1022.018555 -1169.980713  1765.979004  2312.529785        2312.529785  104.000244      100.000244
7  2666.567871  1420.018555 -1165.980713  1765.979004  3532.548584        3532.548584  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:44:59]  --------------------------------------------------------------------------------
[07/13 21:44:59]  Iteration: 13
[07/13 21:44:59]  Generator returned sat in 0.024202 secs.
[07/13 21:44:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:44:59]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:44:59]  Verifer returned sat in 0.123861 secs.
[07/13 21:44:59]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.980957     0.098633 -1767.980713  1765.979004     0.000000           0.000000  201.999756      199.999756
1 -1565.980957     0.049561 -1665.980713  1765.979004     0.000000           0.000000   99.999756       99.999756
2 -1266.030029   300.000000 -1665.980713  1765.979004    99.950684          99.950684  300.000000      200.000000
3 -1003.506348   305.018555 -1565.980713  1765.979004   357.455811         357.455811  205.018555      105.018555
4  -495.487793   508.018555 -1454.980713  1765.979004   670.493164         670.493164  288.999756      199.999756
5   224.530762   720.018555 -1365.980713  1765.979004  1290.511475        1290.511475  300.000000      200.000000
6  1245.549316  1021.018555 -1169.980713  1765.979004  2311.530029        2311.530029  104.000000      100.000000
7  2663.567871  1418.018555 -1165.980713  1765.979004  3529.548584        3529.548584  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:00]  --------------------------------------------------------------------------------
[07/13 21:45:00]  Iteration: 14
[07/13 21:45:00]  Generator returned sat in 0.021757 secs.
[07/13 21:45:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:00]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:00]  Verifer returned sat in 0.121235 secs.
[07/13 21:45:00]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.981201     0.098633 -1767.980957  1765.979004     0.000000           0.000000  201.999756      199.999756
1 -1565.981201     0.049561 -1665.980957  1765.979004     0.000000           0.000000   99.999756       99.999756
2 -1266.030273   300.000000 -1665.980957  1765.979004    99.950684          99.950684  300.000000      200.000000
3 -1004.006592   304.518555 -1565.980957  1765.979004   357.455811         357.455811  204.518555      104.518555
4  -495.988037   508.018555 -1454.980957  1765.979004   670.493164         670.493164  288.499756      199.499756
5   224.530518   720.518555 -1365.980957  1765.979004  1290.511475        1290.511475  300.000000      200.000000
6  1246.549072  1022.018555 -1169.980957  1765.979004  2311.530029        2311.530029  105.000000      101.000000
7  2666.067627  1419.518555 -1165.980957  1765.979004  3532.048584        3532.048584  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:00]  --------------------------------------------------------------------------------
[07/13 21:45:00]  Iteration: 15
[07/13 21:45:00]  Generator returned sat in 0.060828 secs.
[07/13 21:45:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:00]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:00]  Verifer returned sat in 0.105364 secs.
[07/13 21:45:00]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.981445     0.098633 -1767.981201  1765.979004     0.000000           0.000000  201.999756      199.999756
1 -1565.981445     0.049316 -1667.481201  1765.979004     0.000000           0.000000  101.499756       99.999756
2 -1266.030518   301.500000 -1665.981201  1765.979004    99.950684          99.950684  300.000000      200.000000
3 -1004.006836   306.018555 -1565.981201  1765.979004   355.955811         355.955811  206.018555      106.018555
4  -495.988281   508.018555 -1454.981201  1765.979004   670.493164         670.493164  288.499756      199.499756
5   224.530273   720.518555 -1364.481201  1765.979004  1290.511475        1290.511475  298.500000      200.000000
6  1246.548828  1022.018555 -1169.981201  1765.979004  2311.530029        2311.530029  105.000000      101.000000
7  2664.567383  1418.018555 -1165.980957  1765.979004  3533.548584        3533.548584  296.999756      197.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:01]  --------------------------------------------------------------------------------
[07/13 21:45:01]  Iteration: 16
[07/13 21:45:01]  Generator returned sat in 0.030609 secs.
[07/13 21:45:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:01]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:01]  Verifer returned sat in 0.115654 secs.
[07/13 21:45:01]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.981689    0.098633 -1865.981445  1765.979004     0.000000           0.000000  299.999756      199.999756
1 -1565.981689    0.049072 -1765.981445  1765.979004     0.000000           0.000000  199.999756       99.999756
2 -1266.030762  400.000000 -1665.981445  1765.979004    99.950684          99.950684  300.000000      200.000000
3 -1004.007080  306.018555 -1515.981445  1765.979004   355.955811         355.955811  156.018555      106.018555
4  -653.507080  350.500000 -1365.981445  1765.979004   512.474365         512.474365  200.000000      200.000000
5  -253.007080  400.500000 -1302.981445  1765.979004   812.974365         812.974365  237.000000      200.000000
6   110.492920  363.500000 -1165.981445  1765.979004  1076.474365        1076.474365  200.000000      200.000000
7   460.992920  350.500000 -1165.981445  1765.979004  1426.974365        1426.974365  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:01]  --------------------------------------------------------------------------------
[07/13 21:45:01]  Iteration: 17
[07/13 21:45:01]  Generator returned sat in 0.020627 secs.
[07/13 21:45:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:02]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:02]  Verifer returned sat in 0.148800 secs.
[07/13 21:45:02]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.981934    0.098633 -1865.981689  1765.979004     0.000000           0.000000  299.999756      199.999756
1 -1565.981934    0.049072 -1765.981689  1765.979004     0.000000           0.000000  199.999756       99.999756
2 -1266.031006  400.000000 -1665.981445  1765.979004    99.950684          99.950684  299.999756      200.000000
3 -1004.007324  306.018311 -1515.981689  1765.979004   355.955811         355.955811  156.018555      106.018555
4  -654.007324  350.000000 -1365.981689  1765.979004   511.974365         511.974365  200.000000      200.000000
5  -254.007324  400.000000 -1300.981445  1765.979004   812.974365         812.974365  233.999756      199.000000
6   110.992676  365.000000 -1165.981689  1765.979004  1076.974365        1076.974365  200.000000      200.000000
7   460.992676  350.000000 -1165.981689  1765.979004  1426.974365        1426.974365  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:02]  --------------------------------------------------------------------------------
[07/13 21:45:02]  Iteration: 18
[07/13 21:45:02]  Generator returned sat in 0.034137 secs.
[07/13 21:45:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:02]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:02]  Verifer returned sat in 0.125893 secs.
[07/13 21:45:02]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.982178    0.098389 -1864.481689  1765.979004     0.000000           0.000000  298.499512      199.999512
1 -1565.982178    0.048828 -1765.981689  1765.979004     0.000000           0.000000  199.999512       99.999512
2 -1266.031006  400.000000 -1665.981445  1765.979004    99.950684          99.950684  299.999756      200.000000
3 -1004.007324  306.018311 -1515.981689  1765.979004   355.955811         355.955811  156.018555      106.018555
4  -654.007324  350.000000 -1367.481689  1765.979004   511.974365         511.974365  201.500000      200.000000
5  -254.007324  400.000000 -1300.981445  1765.979004   812.974365         812.974365  233.999756      199.000000
6   112.492676  366.500000 -1165.981689  1765.979004  1078.474365        1078.474365  200.000000      200.000000
7   463.992676  351.500000 -1165.981689  1765.979004  1426.974121        1426.974121  203.000244      103.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:03]  --------------------------------------------------------------------------------
[07/13 21:45:03]  Iteration: 19
[07/13 21:45:03]  Generator returned sat in 0.059383 secs.
[07/13 21:45:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:03]  Improved number of small numbers from 63 to 89 out of a max of 89
[07/13 21:45:03]  Verifer returned sat in 0.221222 secs.
[07/13 21:45:03]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.981934    0.098389 -1864.481934  1765.97876     0.000000           0.000000  298.500000      200.000000
1 -1565.981934    0.048340 -1665.982178  1765.97876     0.000000           0.000000  100.000244      100.000000
2 -1465.982178  200.000000 -1665.981445  1765.97876     0.000000           0.000000  199.999268       99.999756
3 -1166.006592  299.999512 -1515.982178  1765.97876   199.975342         199.975342  150.000244      100.000000
4  -666.007080  499.999512 -1465.981934  1765.97876   499.974854         499.974854  300.000000      200.000000
5  -214.507080  451.500000 -1300.981445  1765.97876   851.474854         851.474854  234.999512      200.000000
6   377.742920  592.250000 -1165.982178  1765.97876  1343.724854        1343.724854  200.000244      200.000000
7  1025.367920  647.625000 -1165.981934  1765.97876  1891.349854        1891.349854  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:03]  --------------------------------------------------------------------------------
[07/13 21:45:03]  Iteration: 20
[07/13 21:45:04]  Generator returned sat in 0.029478 secs.
[07/13 21:45:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:04]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:04]  Verifer returned sat in 0.138134 secs.
[07/13 21:45:04]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1565.981934    0.098389 -1862.482422  1765.97876     0.000000           0.000000  296.500488      200.000000
1 -1565.981934    0.048340 -1665.981934  1765.97876     0.000000           0.000000  100.000000      100.000000
2 -1465.982422  199.999512 -1665.981934  1765.97876     0.000000           0.000000  199.999512       99.999512
3 -1165.007080  300.999512 -1515.982178  1765.97876   199.975342         199.975342  150.999756      100.999512
4  -666.007080  499.000000 -1465.981934  1765.97876   499.974854         499.974854  300.000000      200.000000
5  -214.507080  451.500000 -1301.481934  1765.97876   851.474854         851.474854  235.500000      200.000000
6   377.742920  592.250000 -1165.982178  1765.97876  1343.724854        1343.724854  200.000244      200.000000
7  1025.867920  648.125000 -1165.981934  1765.97876  1891.849854        1891.849854  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:04]  --------------------------------------------------------------------------------
[07/13 21:45:04]  Iteration: 21
[07/13 21:45:04]  Generator returned sat in 0.070950 secs.
[07/13 21:45:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:04]  Improved gap from 1/800 to 0
[07/13 21:45:05]  Improved number of small numbers from 54 to 76 out of a max of 90
[07/13 21:45:05]  Verifer returned sat in 0.444458 secs.
[07/13 21:45:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   226.862549    0.098145   -73.137207  1765.978516        0.0                0.0  299.999756      199.999873
1   226.862549    0.002686   126.862549  1765.978516        0.0                0.0  100.000000       99.999873
2   426.862549  300.000000   226.862549  1765.978516        0.0                0.0  200.000000      199.999873
3   426.862549  199.999756   226.862793  1765.978516        0.0                0.0  199.999756       99.999873
4   426.862549    0.010000   426.860176  1765.978516        0.0                0.0    0.002373       -0.000127
5   426.870176    0.010000   426.862676  1865.971016        0.0                0.0    0.007500        0.000000
6   426.872676    0.010000   426.870176  1965.961182        0.0                0.0    0.002500       -0.007334
7   426.880176    0.010000   426.880127  1965.961182        0.0                0.0    0.000049      -99.999834
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:45:05]  --------------------------------------------------------------------------------
[07/13 21:45:05]  Iteration: 22
[07/13 21:45:05]  Generator returned sat in 0.084789 secs.
[07/13 21:45:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:05]  Improved gap from 47385/512 to 100
[07/13 21:45:05]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/13 21:45:05]  Verifer returned sat in 0.193051 secs.
[07/13 21:45:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   233.862549    0.097900    33.862549  1765.978271    0.000000           0.000000  200.000000      199.999756
1   233.862549    0.024170    40.862793  1765.978271    0.000000           0.000000  192.999756       99.999756
2   234.313721  193.450928   133.862793  1765.978271    0.000000           0.000000  100.450928        0.450928
3   234.313721    0.024414   234.313721  1765.978271    0.000000           0.000000    0.000000      -99.549072
4   435.813721  201.500000   433.862793  1765.978271    0.000000           0.000000    1.950928        1.950928
5  1232.813721  797.000000   433.862793  1765.978271  498.950928         498.950928  300.000000      200.000000
6  1332.838135  400.000000   533.862793  1765.978271  498.975342         498.975342  300.000000      200.000000
7  1332.838135  201.500000   633.862793  1765.978271  498.975342         498.975342  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:45:06]  --------------------------------------------------------------------------------
[07/13 21:45:06]  Iteration: 23
[07/13 21:45:06]  Generator returned sat in 0.191398 secs.
[07/13 21:45:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:06]  Improved gap from 0 to 100
[07/13 21:45:06]  Improved number of small numbers from 63 to 90 out of a max of 90
[07/13 21:45:06]  Verifer returned sat in 0.282619 secs.
[07/13 21:45:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   533.375244     0.097656   433.375488  1765.978027     0.000000           0.000000   99.999756       99.999756
1   533.375244     0.048584   433.375488  1765.978027     0.000000           0.000000   99.999756       -0.000244
2   833.375244   399.999756   633.375488  1765.978027     0.000000           0.000000  199.999756      199.999756
3   833.424316   200.000000   633.375488  1765.978027     0.048828           0.048828  200.000000      100.000000
4  1333.424316   500.000000   809.375488  1765.978027   300.048828         300.048828  224.000000      200.000000
5  2459.424316  1126.000000   885.375488  1765.978027  1326.048828        1326.048828  248.000000      200.000000
6  4400.424316  1941.000000   976.375244  1765.978027  3167.048828        3167.048828  257.000244      200.000000
7  7654.924072  3254.499756  1033.375488  1765.978027  6321.548828        6321.548828  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:07]  --------------------------------------------------------------------------------
[07/13 21:45:07]  Iteration: 24
[07/13 21:45:07]  Generator returned sat in 0.053080 secs.
[07/13 21:45:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:07]  Improved number of small numbers from 71 to 89 out of a max of 89
[07/13 21:45:07]  Verifer returned sat in 0.138186 secs.
[07/13 21:45:07]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   533.375244     0.097412   433.375488  1765.977783     0.000000           0.000000   99.999756       99.999756
1   533.375244     0.048584   433.375488  1765.977783     0.000000           0.000000   99.999756       -0.000244
2   833.375244   399.999756   633.375488  1765.977783     0.000000           0.000000  199.999756      199.999756
3   833.399902   200.000000   633.375488  1765.977783     0.024414           0.024414  200.000000      100.000000
4  1333.899902   500.500000   807.983398  1765.977783   300.524414         300.524414  225.392090      200.000000
5  2459.757812  1125.857910   884.755127  1765.977783  1326.382324        1326.382324  248.620361      200.000000
6  4400.424316  1940.666504   976.375244  1765.977783  3167.048828        3167.048828  257.000244      200.000000
7  7654.923828  3254.499512  1033.375488  1765.977783  6321.548828        6321.548828  299.999512      199.999512
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:07]  --------------------------------------------------------------------------------
[07/13 21:45:07]  Iteration: 25
[07/13 21:45:08]  Generator returned sat in 0.119685 secs.
[07/13 21:45:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:08]  Improved number of small numbers from 71 to 89 out of a max of 89
[07/13 21:45:08]  Verifer returned sat in 0.148949 secs.
[07/13 21:45:08]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   533.375000     0.097168   433.375488  1765.977539     0.000000           0.000000   99.999512       99.999512
1   533.375000     0.048340   436.875244  1765.977539     0.000000           0.000000   96.499756       -0.000488
2   833.375488   396.500244   633.375488  1765.977539     0.000000           0.000000  200.000000      200.000000
3   833.399902   200.000000   633.375488  1765.977539     0.024414           0.024414  200.000000      100.000000
4  1334.899902   501.500000   807.983154  1765.977539   301.524414         301.524414  225.392334      200.000000
5  2459.757812  1124.857910   885.255127  1765.977539  1326.382324        1326.382324  248.120361      200.000000
6  4400.424316  1940.666504   976.375000  1765.977539  3167.048828        3167.048828  257.000488      200.000000
7  7655.923584  3255.499268  1033.375488  1765.977539  6322.548340        6322.548340  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:08]  --------------------------------------------------------------------------------
[07/13 21:45:08]  Iteration: 26
[07/13 21:45:09]  Generator returned sat in 0.059919 secs.
[07/13 21:45:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:09]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/13 21:45:09]  Verifer returned sat in 0.151761 secs.
[07/13 21:45:09]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   533.375000     0.097168   433.375488  1765.977539     0.000000           0.000000   99.999512       99.999512
1   533.375000     0.048340   438.625000  1765.977539     0.000000           0.000000   94.750000       -0.000488
2   833.375488   394.750488   633.375488  1765.977539     0.000000           0.000000  200.000000      200.000000
3   833.399658   200.000000   633.375488  1765.977539     0.024170           0.024170  200.000000      100.000000
4  1335.399658   502.000000   807.983154  1765.977539   302.024170         302.024170  225.392334      200.000000
5  2459.757812  1124.358154   885.504761  1765.977539  1326.382324        1326.382324  247.870728      200.000000
6  4400.424316  1940.666504   976.375000  1765.977539  3167.048828        3167.048828  257.000488      200.000000
7  7656.423584  3255.999268  1033.375488  1765.977539  6323.048096        6323.048096  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:09]  --------------------------------------------------------------------------------
[07/13 21:45:09]  Iteration: 27
[07/13 21:45:09]  Generator returned sat in 0.104863 secs.
[07/13 21:45:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:10]  Improved gap from 197/16384 to 100
[07/13 21:45:10]  Improved number of small numbers from 37 to 90 out of a max of 90
[07/13 21:45:10]  Verifer returned sat in 0.296067 secs.
[07/13 21:45:10]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0    -1.679199    0.096680   -69.552490  1765.977295    0.000000           0.000000   67.873291       67.873291
1    -1.679199    0.048096    -1.691162  1765.977295    0.000000           0.000000    0.011963      -32.126709
2   330.447266  332.138428   130.447510  1765.977295    0.000000           0.000000  199.999756      199.999756
3   330.447266    0.011963   196.760742  1765.977295    0.000000           0.000000  133.686523       99.999756
4   464.609863  267.837158   230.447510  1765.977295    0.011963           0.011963  234.150391      134.150391
5   464.609863  234.138672   330.447510  1765.977295    0.011963           0.011963  134.150391       34.150391
6  1134.387207  669.777344   462.598145  1765.977295  403.939941         403.939941  267.849121      199.999756
7  1134.387207  267.837402   530.447510  1765.977295  403.939941         403.939941  199.999756       99.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:45:10]  --------------------------------------------------------------------------------
[07/13 21:45:10]  Iteration: 28
[07/13 21:45:11]  Generator returned sat in 0.265977 secs.
[07/13 21:45:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:11]  Improved gap from 0 to 100
[07/13 21:45:11]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/13 21:45:11]  Verifer returned sat in 0.278146 secs.
[07/13 21:45:11]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -375.774414     0.096436   -475.77417  1765.977051     0.000000           0.000000   99.999756       99.999756
1  -375.774414     0.048340   -475.77417  1765.977051     0.000000           0.000000   99.999756       -0.000244
2  -375.774170   100.000000   -375.77417  1765.977051     0.000000           0.000000    0.000000     -100.000000
3   -73.726074   302.048096   -275.77417  1765.977051     0.000000           0.000000  202.048096      102.048096
4   -73.726074   202.000000   -175.77417  1765.977051     0.000000           0.000000  102.048096        2.048096
5   126.273926   302.000000    -75.77417  1765.977051     0.048096           0.048096  202.000000      102.000000
6  1179.773926  1053.500000     83.22583  1765.977051   955.548096         955.548096  141.000000      100.000000
7  3478.523926  2298.750000    124.22583  1765.977051  3054.298340        3054.298340  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:11]  --------------------------------------------------------------------------------
[07/13 21:45:11]  Iteration: 29
[07/13 21:45:12]  Generator returned sat in 0.231107 secs.
[07/13 21:45:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:12]  Improved gap from 395/8192 to 100
[07/13 21:45:12]  Improved number of small numbers from 33 to 90 out of a max of 90
[07/13 21:45:12]  Verifer returned sat in 0.264462 secs.
[07/13 21:45:12]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -866.951660     0.096191  -867.000244  2157.203125     0.000000           0.000000    0.048584        0.048584
1  -866.951660     0.023926  -867.000000  2157.203125     0.000000           0.000000    0.048340      -99.951416
2  -467.000244   399.999756  -667.000244  2157.203125     0.000000           0.000000  200.000000      200.000000
3  -466.976074   200.000000  -667.000244  2157.203125     0.024170           0.024170  200.000000      100.000000
4    33.523926   500.500000  -567.000000  2157.203125   300.524170         300.524170  299.999756      200.000000
5  1185.023926  1151.500000  -398.000244  2157.203125  1352.024170        1352.024170  231.000000      200.000000
6  3623.023926  2438.000000  -267.000244  2157.203125  3790.023926        3790.023926  100.000244      100.000244
7  8699.523926  5076.500000  -267.000000  2157.203125  8666.524170        8666.524170  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:12]  --------------------------------------------------------------------------------
[07/13 21:45:12]  Iteration: 30
[07/13 21:45:13]  Generator returned sat in 0.073276 secs.
[07/13 21:45:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:13]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:13]  Verifer returned sat in 0.121248 secs.
[07/13 21:45:13]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -859.951904     0.096191  -867.000244  2157.203125     0.000000           0.000000    7.048340         7.04834
1  -859.951904     0.048096  -860.000000  2157.203125     0.000000           0.000000    0.048096       -92.95166
2  -467.000244   392.999756  -667.000244  2157.203125     0.000000           0.000000  200.000000       200.00000
3  -466.952148   200.000000  -667.000244  2157.203125     0.048096           0.048096  200.000000       100.00000
4    34.547852   501.500000  -567.000000  2157.203125   301.548096         301.548096  299.999756       200.00000
5  1185.547852  1151.000000  -398.000244  2157.203125  1352.548096        1352.548096  231.000000       200.00000
6  3623.547852  2438.000000  -267.000244  2157.203125  3790.023926        3790.023926  100.524170       100.52417
7  8701.047852  5077.500000  -267.000000  2157.203125  8668.048096        8668.048096  299.999756       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:13]  --------------------------------------------------------------------------------
[07/13 21:45:13]  Iteration: 31
[07/13 21:45:13]  Generator returned sat in 0.064907 secs.
[07/13 21:45:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:14]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:14]  Verifer returned sat in 0.124398 secs.
[07/13 21:45:14]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -859.951904     0.096191  -867.000488  2157.203125     0.000000           0.000000    7.048584        7.048584
1  -859.951904     0.047852  -863.000000  2157.203125     0.000000           0.000000    3.048096      -92.951416
2  -467.000488   395.999512  -667.000488  2157.203125     0.000000           0.000000  200.000000      200.000000
3  -466.952393   200.000000  -667.000488  2157.203125     0.048096           0.048096  200.000000      100.000000
4    34.047607   501.000000  -567.000000  2157.203125   301.548096         301.548096  299.499512      199.500000
5  1185.047607  1151.000000  -396.000488  2157.203125  1352.548096        1352.548096  228.500000      199.500000
6  3623.547607  2438.500000  -267.000488  2157.203125  3790.023682        3790.023682  100.524414      100.524414
7  8701.547607  5078.000000  -267.000000  2157.203125  8668.548096        8668.548096  299.999512      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:14]  --------------------------------------------------------------------------------
[07/13 21:45:14]  Iteration: 32
[07/13 21:45:14]  Generator returned sat in 0.058068 secs.
[07/13 21:45:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:14]  Improved number of small numbers from 63 to 89 out of a max of 89
[07/13 21:45:14]  Verifer returned sat in 0.143257 secs.
[07/13 21:45:14]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -856.476318     0.095703  -867.000977  2157.203125     0.000000           0.000000   10.524658       10.524658
1  -856.476318     0.047607  -856.500488  2157.203125     0.000000           0.000000    0.024170      -89.475342
2  -467.000977   389.499512  -667.000977  2157.203125     0.000000           0.000000  200.000000      200.000000
3  -466.977051   200.000000  -667.000977  2157.203125     0.023926           0.023926  200.000000      100.000000
4    35.022949   502.000000  -566.500488  2157.203125   302.023926         302.023926  299.499512      200.000000
5  1186.022949  1151.000000  -395.500977  2157.203125  1353.023926        1353.023926  228.500000      200.000000
6  3625.772949  2439.750000  -267.000977  2157.203125  3790.023193        3790.023193  102.750732      102.750732
7  8707.272949  5081.500000  -267.000000  2157.203125  8674.273926        8674.273926  299.999023      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:15]  --------------------------------------------------------------------------------
[07/13 21:45:15]  Iteration: 33
[07/13 21:45:15]  Generator returned sat in 0.117026 secs.
[07/13 21:45:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:15]  Improved gap from 0 to 18.75
[07/13 21:45:16]  Improved number of small numbers from 58 to 90 out of a max of 90
[07/13 21:45:16]  Verifer returned sat in 0.456436 secs.
[07/13 21:45:16]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1266.519531    0.095703  1066.519531  614.740234   0.000000           0.000000  200.000000      100.000000
1  1266.519531    0.047607  1166.519531  614.740234   0.000000           0.000000  100.000000        0.000000
2  1314.567383  148.047852  1295.817627  666.692139   0.000000           0.000000   18.749756       -0.000244
3  1514.615479  218.750000  1364.519531  666.692139   0.047852           0.047852  150.048096      100.000000
4  1514.615479  150.000000  1495.817383  666.692139   0.047852           0.047852   18.750244        0.000000
5  1570.865234   75.000000  1533.269531  710.442383   0.047852           0.047852   37.547852        0.000000
6  1570.865234   37.500000  1570.817383  791.692383   0.047852           0.047852    0.000000      -18.750000
7  1589.615234   18.750000  1589.567383  791.692383   0.047852           0.047852    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:45:16]  --------------------------------------------------------------------------------
[07/13 21:45:16]  Iteration: 34
[07/13 21:45:16]  Generator returned sat in 0.123294 secs.
[07/13 21:45:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:16]  Improved gap from 0 to 100
[07/13 21:45:17]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/13 21:45:17]  Verifer returned sat in 0.255826 secs.
[07/13 21:45:17]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1063.613281     0.095703   1063.56543  717.694092     0.000000           0.000000    0.047852        0.047852
1  1063.613281     0.023926   1063.56543  717.694092     0.000000           0.000000    0.047852      -99.952148
2  1463.565430   400.000000   1263.56543  717.694092     0.000000           0.000000  200.000000      200.000000
3  1463.589355   200.000000   1272.56543  717.694092     0.023926           0.023926  191.000000      100.000000
4  1869.089355   405.500000   1463.56543  717.694092   305.523682         305.523682  100.000244      100.000244
5  2678.339355   809.250000   1463.56543  717.694092   914.773926         914.773926  300.000000      200.000000
6  3993.214355  1314.875000   1663.56543  717.694092  2129.648926        2129.648926  200.000000      200.000000
7  6162.026855  2168.812500   1663.56543  717.694092  4198.461426        4198.461426  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:17]  --------------------------------------------------------------------------------
[07/13 21:45:17]  Iteration: 35
[07/13 21:45:17]  Generator returned sat in 0.082009 secs.
[07/13 21:45:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:18]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:18]  Verifer returned sat in 0.140383 secs.
[07/13 21:45:18]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1063.613281     0.095703  1063.565430  717.694092     0.000000           0.000000    0.047852        0.047852
1  1063.613281     0.023926  1063.565430  717.694092     0.000000           0.000000    0.047852      -99.952148
2  1463.565430   400.000000  1193.898763  717.694092     0.000000           0.000000  269.666667      200.000000
3  1463.589355   269.666667  1272.565430  717.694092     0.023926           0.023926  191.000000      100.000000
4  1869.089355   405.500000  1463.565430  717.694092   205.523926         205.523926  200.000000      200.000000
5  2478.339355   609.250000  1463.565430  717.694092   714.773926         714.773926  300.000000      200.000000
6  3393.214355   914.875000  1663.565430  717.694092  1629.648926        1629.648926  100.000000      100.000000
7  4766.526855  1373.312500  1663.565430  717.694092  2902.961426        2902.961426  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:18]  --------------------------------------------------------------------------------
[07/13 21:45:18]  Iteration: 36
[07/13 21:45:18]  Generator returned sat in 0.091293 secs.
[07/13 21:45:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:18]  Improved gap from 1999/4096 to 18.75
[07/13 21:45:19]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:45:19]  Verifer returned sat in 0.233643 secs.
[07/13 21:45:19]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1063.613037    0.095703   763.613037  717.693848        0.0                0.0  300.000000      200.000000
1  1063.613037    0.047607   863.613037  717.693848        0.0                0.0  200.000000      100.000000
2  1163.613037  300.000000  1038.089355  717.693848        0.0                0.0  125.523682      100.000000
3  1338.851074  300.761719  1063.613037  717.693848        0.0                0.0  275.238037      175.238037
4  1338.851074  150.380859  1263.613037  717.693848        0.0                0.0   75.238037       75.238037
5  1338.851074   75.190430  1326.970215  735.586670        0.0                0.0   11.880859       -6.869141
6  1364.565430   37.595215  1345.720215  816.741455        0.0                0.0   18.845215        0.000000
7  1364.565430   18.797607  1364.565430  816.741455        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:45:19]  --------------------------------------------------------------------------------
[07/13 21:45:19]  Iteration: 37
[07/13 21:45:20]  Generator returned sat in 0.518688 secs.
[07/13 21:45:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:20]  Improved gap from 389/65536 to 100
[07/13 21:45:20]  Improved number of small numbers from 33 to 90 out of a max of 90
[07/13 21:45:20]  Verifer returned sat in 0.285399 secs.
[07/13 21:45:20]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   2346.120605      0.095703  2346.072998 -764.766602      0.000000           0.000000    0.047607        0.047607
1   2346.120605      0.023682  2346.072998 -764.766602      0.000000           0.000000    0.047607      -99.952393
2   2746.072998    400.000000  2546.072998 -764.766602      0.000000           0.000000  200.000000      200.000000
3   2746.096924    200.000000  2546.072998 -764.766602      0.023926           0.023926  200.000000      100.000000
4   3547.096924    801.000000  2646.072998 -764.766602    601.023926         601.023926  300.000000      200.000000
5   5750.096924   2203.000000  2781.072998 -764.766602   2704.023926        2704.023926  265.000000      200.000000
6  10627.096924   4877.000000  2909.072998 -764.766602   7481.023926        7481.023926  237.000000      200.000000
7  21108.096924  10481.000000  2946.072998 -764.766602  17862.023926       17862.023926  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:20]  --------------------------------------------------------------------------------
[07/13 21:45:20]  Iteration: 38
[07/13 21:45:21]  Generator returned sat in 0.081172 secs.
[07/13 21:45:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:21]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:21]  Verifer returned sat in 0.116837 secs.
[07/13 21:45:21]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   2846.084961     0.095703  2746.072998 -764.766602      0.000000           0.000000  100.011963        0.011963
1   2846.084961     0.011963  2846.072998 -764.766602      0.000000           0.000000    0.011963      -99.988037
2   2946.108887   100.035889  2946.072998 -764.766602      0.000000           0.000000    0.035889      -99.964111
3   3346.096924   400.000000  3046.072998 -764.766602      0.023926           0.023926  300.000000      200.000000
4   4147.096924   801.000000  3146.072998 -764.766602    701.023926         701.023926  300.000000      200.000000
5   5750.096924  1603.000000  3246.072998 -764.766602   2304.023926        2304.023926  200.000000      100.000000
6   8957.096924  3207.000000  3346.072998 -764.766602   5411.023926        5411.023926  200.000000      100.000000
7  15372.096924  6415.000000  3446.072998 -764.766602  11726.023926       11726.023926  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:21]  --------------------------------------------------------------------------------
[07/13 21:45:21]  Iteration: 39
[07/13 21:45:22]  Generator returned sat in 0.076339 secs.
[07/13 21:45:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:22]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:22]  Verifer returned sat in 0.121679 secs.
[07/13 21:45:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   3008.093994     0.095703  2808.093994 -764.766846      0.00000            0.00000  200.000000      200.000000
1   3008.093994     0.011719  2816.093994 -764.766846      0.00000            0.00000  192.000000      100.000000
2   3008.099854   192.005859  3008.093994 -764.766846      0.00000            0.00000    0.005859        0.005859
3   3208.096924   200.000000  3008.093994 -764.766846      0.00293            0.00293  200.000000      100.000000
4   3909.096924   701.000000  3108.093994 -764.766846    501.00293          501.00293  300.000000      200.000000
5   5750.096924  1841.000000  3257.093994 -764.766846   2242.00293         2242.00293  251.000000      200.000000
6   9806.596924  4056.500000  3308.093994 -764.766846   6298.50293         6298.50293  200.000000      100.000000
7  18370.596924  8564.000000  3408.093994 -764.766846  14662.50293        14662.50293  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:22]  --------------------------------------------------------------------------------
[07/13 21:45:22]  Iteration: 40
[07/13 21:45:23]  Generator returned sat in 0.101068 secs.
[07/13 21:45:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:23]  Improved gap from 195/8 to 100
[07/13 21:45:23]  Improved number of small numbers from 55 to 90 out of a max of 90
[07/13 21:45:23]  Verifer returned sat in 0.203650 secs.
[07/13 21:45:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2983.718750    0.095459  2883.671875 -764.767334    0.000000           0.000000  100.046875        0.046875
1  2983.718750    0.047119  2983.671875 -764.767334    0.000000           0.000000    0.046875      -99.953125
2  3083.718994  100.047119  3083.671875 -764.767334    0.000000           0.000000    0.047119      -99.952881
3  3281.671875  198.000000  3183.671875 -764.767334    0.000000           0.000000   98.000000       -2.000000
4  3681.624512  400.000000  3383.671875 -764.767334   97.952637          97.952637  200.000000      200.000000
5  3681.624512    1.000000  3383.671875 -764.767334   97.952637          97.952637  200.000000      100.000000
6  3783.124512  301.500000  3524.671875 -764.767334   97.952637          97.952637  160.500000      101.500000
7  4275.874512  492.750000  3583.671875 -764.767334  392.202881         392.202881  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:45:23]  --------------------------------------------------------------------------------
[07/13 21:45:23]  Iteration: 41
[07/13 21:45:24]  Generator returned sat in 0.109515 secs.
[07/13 21:45:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:24]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:24]  Verifer returned sat in 0.126642 secs.
[07/13 21:45:24]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2983.718750    0.095459  2884.171875 -764.767334    0.000000           0.000000   99.546875        0.046875
1  2983.718750    0.047119  2983.671875 -764.767334    0.000000           0.000000    0.046875      -99.953125
2  3083.718994  100.047119  3083.671875 -764.767334    0.000000           0.000000    0.047119      -99.952881
3  3281.671875  198.000000  3183.671875 -764.767334    0.000000           0.000000   98.000000       -2.000000
4  3681.624512  400.000000  3383.671875 -764.767334   97.952637          97.952637  200.000000      200.000000
5  3681.624512    1.000000  3383.671875 -764.767334   97.952637          97.952637  200.000000      100.000000
6  3783.624512  302.000000  3524.671875 -764.767334   97.952637          97.952637  161.000000      102.000000
7  4277.124512  493.500000  3583.671875 -764.767334  393.452637         393.452637  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:45:24]  --------------------------------------------------------------------------------
[07/13 21:45:24]  Iteration: 42
[07/13 21:45:25]  Generator returned sat in 0.116125 secs.
[07/13 21:45:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:25]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:25]  Verifer returned sat in 0.109804 secs.
[07/13 21:45:25]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  2983.718750    0.095215  2884.671875 -764.767578    0.000000           0.000000   99.046875        0.046875
1  2983.718750    0.046875  2983.671875 -764.767578    0.000000           0.000000    0.046875      -99.953125
2  3083.718750  100.046875  3083.671875 -764.767578    0.000000           0.000000    0.046875      -99.953125
3  3281.671875  198.000000  3183.671875 -764.767578    0.000000           0.000000   98.000000       -2.000000
4  3681.624512  400.000000  3383.671631 -764.767578   97.952637          97.952637  200.000244      200.000000
5  3681.624512    1.000000  3383.671875 -764.767578   97.952637          97.952637  200.000000      100.000000
6  3784.124512  302.500000  3524.671631 -764.767578   97.952637          97.952637  161.500244      102.500000
7  4278.374268  494.249756  3583.671875 -764.767578  394.702393         394.702393  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:45:25]  --------------------------------------------------------------------------------
[07/13 21:45:25]  Iteration: 43
[07/13 21:45:26]  Generator returned sat in 0.545145 secs.
[07/13 21:45:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:26]  Improved gap from 3/256 to 100
[07/13 21:45:26]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:45:26]  Verifer returned sat in 0.136760 secs.
[07/13 21:45:26]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  3084.358073     0.094971  2917.671875 -764.767822     0.000000           0.000000  166.686198      100.686198
1  3084.358073     0.046875  3083.671875 -764.767822     0.000000           0.000000    0.686198        0.686198
2  3183.671875   100.000000  3083.671875 -764.767822     0.000000           0.000000  100.000000        0.000000
3  3383.683594   300.000000  3183.671875 -764.767822     0.011719           0.011719  200.000000      100.000000
4  3783.671875   400.000000  3283.671875 -764.767822   200.000000         200.000000  300.000000      200.000000
5  3784.671875   301.000000  3386.671875 -764.767822   200.000000         200.000000  198.000000      101.000000
6  4994.171875  1209.500000  3483.671875 -764.767822  1210.500000        1210.500000  300.000000      200.000000
7  5445.171875   451.000000  3683.671875 -764.767822  1561.500000        1561.500000  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:26]  --------------------------------------------------------------------------------
[07/13 21:45:26]  Iteration: 44
[07/13 21:45:27]  Generator returned sat in 0.070980 secs.
[07/13 21:45:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:27]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:27]  Verifer returned sat in 0.162249 secs.
[07/13 21:45:27]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  3084.357910     0.094727  2917.671875 -764.767822     0.000000           0.000000  166.686035      100.686035
1  3084.357910     0.046875  3083.671875 -764.767822     0.000000           0.000000    0.686035        0.686035
2  3183.671631    99.999756  3083.671875 -764.767822     0.000000           0.000000   99.999756       -0.000244
3  3383.683594   300.000000  3183.671875 -764.767822     0.011719           0.011719  200.000000      100.000000
4  3783.671631   400.000000  3283.671875 -764.767822   199.999756         199.999756  300.000000      200.000000
5  3784.671631   301.000000  3386.421875 -764.767822   199.999756         199.999756  198.250000      101.000000
6  4994.171631  1209.500000  3483.671875 -764.767822  1210.500000        1210.500000  299.999756      199.999756
7  5445.171631   451.000000  3683.671875 -764.767822  1561.499756        1561.499756  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:27]  --------------------------------------------------------------------------------
[07/13 21:45:27]  Iteration: 45
[07/13 21:45:28]  Generator returned sat in 0.230474 secs.
[07/13 21:45:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:28]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/13 21:45:28]  Verifer returned sat in 0.164515 secs.
[07/13 21:45:28]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  3084.357666    0.094727  2917.671875 -764.767822     0.000000           0.000000  166.685791      100.685791
1  3084.357666    0.046875  3056.005208 -764.767822     0.000000           0.000000   28.352458        0.685791
2  3183.671387  127.666178  3083.671875 -764.767822     0.000000           0.000000   99.999512       -0.000488
3  3383.683594  300.000000  3183.671875 -764.767822     0.011719           0.011719  200.000000      100.000000
4  3583.695312  400.000000  3306.671875 -764.767822     0.023438           0.023438  277.000000      200.000000
5  3683.695312  377.000000  3483.671875 -764.767822     0.023438           0.023438  200.000000      200.000000
6  4674.195312  990.500000  3583.671875 -764.767822   990.523438         990.523438  100.000000      100.000000
7  5275.195312  601.000000  3583.671875 -764.767822  1391.523438        1391.523438  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:29]  --------------------------------------------------------------------------------
[07/13 21:45:29]  Iteration: 46
[07/13 21:45:29]  Generator returned sat in 0.091161 secs.
[07/13 21:45:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:29]  Improved gap from 0 to 100
[07/13 21:45:29]  Improved number of small numbers from 89 to 90 out of a max of 90
[07/13 21:45:29]  Verifer returned sat in 0.183517 secs.
[07/13 21:45:29]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   970.746582     0.094482   870.746582 -764.768066     0.000000           0.000000  100.000000      100.000000
1   970.746582     0.046631   870.746582 -764.768066     0.000000           0.000000  100.000000        0.000000
2  1270.746582   400.000000  1070.746582 -764.768066     0.000000           0.000000  200.000000      200.000000
3  1270.770020   200.000000  1070.746582 -764.768066     0.023438           0.023438  200.000000      100.000000
4  1771.770020   501.000000  1170.746582 -764.768066   401.023193         401.023193  200.000244      100.000244
5  2723.770020   952.000000  1270.746582 -764.768066  1253.023193        1253.023193  200.000244      100.000244
6  3976.770020  1253.000000  1470.746582 -764.768066  2306.023438        2306.023438  200.000000      200.000000
7  5830.770020  1854.000000  1470.746826 -764.768066  4060.023438        4060.023438  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:30]  --------------------------------------------------------------------------------
[07/13 21:45:30]  Iteration: 47
[07/13 21:45:30]  Generator returned sat in 0.090034 secs.
[07/13 21:45:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:31]  Improved number of small numbers from 60 to 89 out of a max of 89
[07/13 21:45:31]  Verifer returned sat in 0.223348 secs.
[07/13 21:45:31]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   970.770020     0.094482   870.746338 -764.768066     0.000000           0.000000  100.023682      100.023682
1   970.770020     0.046631   970.746338 -764.768066     0.000000           0.000000    0.023682        0.023682
2  1270.746338   300.000000  1056.746338 -764.768066     0.000000           0.000000  214.000000      200.000000
3  1270.769775   214.000000  1070.746338 -764.768066     0.023438           0.023438  200.000000      100.000000
4  1885.769775   615.000000  1254.746338 -764.768066   515.023193         515.023193  116.000244      100.000244
5  3069.769775  1184.000000  1270.746338 -764.768066  1499.023438        1499.023438  300.000000      200.000000
6  4682.769775  1613.000000  1470.746338 -764.768066  3012.023438        3012.023438  200.000000      200.000000
7  7096.769775  2414.000000  1470.746826 -764.768066  5326.023438        5326.023438  299.999512      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:31]  --------------------------------------------------------------------------------
[07/13 21:45:31]  Iteration: 48
[07/13 21:45:31]  Generator returned sat in 0.103989 secs.
[07/13 21:45:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:32]  Improved number of small numbers from 60 to 89 out of a max of 89
[07/13 21:45:32]  Verifer returned sat in 0.192685 secs.
[07/13 21:45:32]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0    961.769775     0.094238   870.746338 -764.768311     0.000000           0.000000   91.023438       91.023438
1    961.769775     0.046631   961.746338 -764.768311     0.000000           0.000000    0.023438       -8.976562
2   1270.746338   309.000000  1030.746338 -764.768311     0.000000           0.000000  240.000000      200.000000
3   1270.769775   240.000000  1070.746338 -764.768311     0.023438           0.023438  200.000000      100.000000
4   2031.769775   761.000000  1170.746338 -764.768311   661.022949         661.022949  200.000488      100.000488
5   3592.269775  1560.500000  1270.746338 -764.768311  2021.523438        2021.523438  300.000000      200.000000
6   6414.019775  2821.750000  1470.746338 -764.768311  4743.273438        4743.273438  200.000000      200.000000
7  11447.644775  5033.625000  1470.746582 -764.768311  9676.898438        9676.898438  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:32]  --------------------------------------------------------------------------------
[07/13 21:45:32]  Iteration: 49
[07/13 21:45:33]  Generator returned sat in 0.115211 secs.
[07/13 21:45:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:33]  Improved number of small numbers from 38 to 89 out of a max of 89
[07/13 21:45:33]  Verifer returned sat in 0.190214 secs.
[07/13 21:45:33]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   961.769531     0.093994   750.746582 -744.768555     0.000000           0.000000  211.022949      111.023193
1   961.769531     0.046387   850.746338 -744.768555     0.000000           0.000000  111.023193       11.023193
2   961.769531   111.023193   961.746338 -744.768555     0.000000           0.000000    0.023193      -88.976807
3  1250.758057   289.000000  1128.746582 -744.768555     0.011719           0.011719  121.999756      100.000000
4  2152.258057   901.500000  1250.746338 -744.768555   801.511475         801.511475  100.000244      100.000244
5  3404.008057  1251.750000  1250.746338 -744.768555  1953.261475        1953.261475  200.000244      100.000244
6  4608.883057  1204.875000  1350.746582 -744.768555  3058.136475        3058.136475  200.000000      100.000244
7  5656.320557  1047.437500  1450.746582 -744.768555  4005.574219        4005.574219  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:33]  --------------------------------------------------------------------------------
[07/13 21:45:33]  Iteration: 50
[07/13 21:45:34]  Generator returned sat in 0.107563 secs.
[07/13 21:45:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:34]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/13 21:45:34]  Verifer returned sat in 0.150692 secs.
[07/13 21:45:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1050.746094    0.093994   820.746094 -744.768555     0.000000           0.000000  230.000000      200.000000
1  1050.746094    0.046631   950.746094 -744.768555     0.000000           0.000000  100.000000      100.000000
2  1061.769287  111.023193   961.746094 -744.768555     0.000000           0.000000  100.023193       11.023193
3  1450.722900  389.000000  1135.746094 -744.768555    99.976807          99.976807  215.000000      200.000000
4  2081.722900  631.000000  1186.746094 -744.768555   730.976807         730.976807  164.000000      100.000000
5  2554.722900  473.000000  1250.746094 -744.768555  1103.976807        1103.976807  200.000000      100.000000
6  3133.722900  579.000000  1450.746094 -744.768555  1482.976807        1482.976807  200.000000      200.000000
7  3764.722900  631.000000  1450.746338 -744.768555  2113.976807        2113.976807  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:34]  --------------------------------------------------------------------------------
[07/13 21:45:34]  Iteration: 51
[07/13 21:45:35]  Generator returned sat in 0.530541 secs.
[07/13 21:45:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:35]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/13 21:45:35]  Verifer returned sat in 0.167136 secs.
[07/13 21:45:35]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  1050.745850     0.093750   831.079427 -744.768555     0.000000           0.000000  219.666423      199.999756
1  1050.745850     0.046631   950.746094 -744.768555     0.000000           0.000000   99.999756       99.999756
2  1150.746338   200.000244  1050.745850 -744.768555     0.000000           0.000000  100.000488      100.000244
3  1450.722656   300.000000  1050.746094 -744.768555    99.976807          99.976807  299.999756      199.999756
4  2081.722656   631.000000  1150.746094 -744.768555   730.976562         730.976562  200.000000      100.000000
5  3014.222656   932.500000  1268.745850 -744.768555  1463.476807        1463.476807  282.000000      199.999756
6  4275.222656  1261.000000  1450.746094 -744.768555  2624.476562        2624.476562  200.000000      200.000000
7  6137.722656  1862.500000  1450.746094 -744.768555  4386.976807        4386.976807  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:36]  --------------------------------------------------------------------------------
[07/13 21:45:36]  Iteration: 52
[07/13 21:45:36]  Generator returned sat in 0.130816 secs.
[07/13 21:45:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:37]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:37]  Verifer returned sat in 0.124633 secs.
[07/13 21:45:37]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0   849.769043     0.093750   649.769043 -744.768555     0.000000           0.000000    200.0           200.0
1   849.769043     0.046387   669.769043 -744.768555     0.000000           0.000000    180.0           100.0
2  1049.769043   380.000000   849.769043 -744.768555     0.000000           0.000000    200.0           200.0
3  1249.722656   200.000000   849.769043 -744.768555   199.953613         199.953613    200.0           100.0
4  1851.222656   601.500000   949.769043 -744.768555   701.453613         701.453613    200.0           100.0
5  3014.222656  1163.000000  1090.769043 -744.768555  1664.453613        1664.453613    259.0           200.0
6  4660.722656  1646.500000  1249.769043 -744.768555  3210.953613        3210.953613    200.0           200.0
7  7108.722656  2448.000000  1349.769043 -744.768555  5558.953613        5558.953613    200.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:37]  --------------------------------------------------------------------------------
[07/13 21:45:37]  Iteration: 53
[07/13 21:45:38]  Generator returned sat in 0.193385 secs.
[07/13 21:45:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:38]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:38]  Verifer returned sat in 0.130543 secs.
[07/13 21:45:38]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0   849.269043     0.093750   649.269043 -744.768799     0.000000           0.000000  200.000000      200.000000
1   849.269043     0.023193   670.269043 -744.768799     0.000000           0.000000  179.000000      100.000000
2  1049.269043   379.000000   849.269043 -744.768799     0.000000           0.000000  200.000000      200.000000
3  1249.222656   200.000000   849.269043 -744.768799   199.953613         199.953613  200.000000      100.000000
4  1851.222656   602.000000   949.769043 -744.768799   701.453369         701.453369  200.000244      100.500244
5  3014.222656  1163.000000  1090.769043 -744.768799  1664.953613        1664.953613  258.500000      200.000000
6  4662.222656  1648.000000  1249.269043 -744.768799  3212.953613        3212.953613  200.000000      200.000000
7  7112.222656  2450.000000  1349.269043 -744.768799  5562.953613        5562.953613  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:38]  --------------------------------------------------------------------------------
[07/13 21:45:38]  Iteration: 54
[07/13 21:45:39]  Generator returned sat in 0.127905 secs.
[07/13 21:45:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:45:39]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:39]  Verifer returned sat in 0.123512 secs.
[07/13 21:45:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0    849.269043     0.093750   649.269043 -744.769043      0.000000           0.000000    200.0           200.0
1    849.269043     0.046143   749.269043 -744.769043      0.000000           0.000000    100.0           100.0
2   1049.269043   300.000000   849.269043 -744.769043      0.000000           0.000000    200.0           200.0
3   1049.315186   200.000000   849.269043 -744.769043      0.046143           0.046143    200.0           100.0
4   1650.815186   601.500000  1009.269043 -744.769043    401.546143         401.546143    240.0           200.0
5   3115.315186  1464.500000  1144.269043 -744.769043   1766.046143        1766.046143    205.0           200.0
6   6340.815186  3225.500000  1157.269043 -744.769043   4891.546143        4891.546143    292.0           200.0
7  13101.315186  6760.500000  1349.269043 -744.769043  11552.046143       11552.046143    200.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:39]  --------------------------------------------------------------------------------
[07/13 21:45:39]  Iteration: 55
[07/13 21:45:41]  Generator returned sat in 1.406723 secs.
[07/13 21:45:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:41]  Improved number of small numbers from 75 to 89 out of a max of 89
[07/13 21:45:41]  Verifer returned sat in 0.167929 secs.
[07/13 21:45:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0    849.268555     0.093750   649.268799 -744.769287      0.000000           0.000000  199.999756      199.999756
1    849.268555     0.046143   749.268799 -744.769287      0.000000           0.000000   99.999756       99.999756
2   1049.268555   299.999756   849.268799 -744.769287      0.000000           0.000000  199.999756      199.999756
3   1049.291748   200.000000   849.268799 -744.769287      0.022949           0.022949  200.000000      100.000000
4   1651.291748   602.000000  1007.291992 -744.769287    402.023193         402.023193  241.976562      199.999756
5   3115.314941  1464.023193  1144.722412 -744.769287   1766.046143        1766.046143  204.546387      200.000000
6   6340.814941  3225.500000  1157.268799 -744.769287   4891.546143        4891.546143  292.000000      200.000000
7  13101.814941  6761.000000  1349.268555 -744.769287  11552.546143       11552.546143  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:42]  --------------------------------------------------------------------------------
[07/13 21:45:42]  Iteration: 56
[07/13 21:45:43]  Generator returned sat in 0.665173 secs.
[07/13 21:45:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:45:43]  Improved number of small numbers from 60 to 89 out of a max of 89
[07/13 21:45:43]  Verifer returned sat in 0.199107 secs.
[07/13 21:45:43]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0    729.291748     0.093506   649.268799 -744.769287      0.000000           0.000000   80.022949       80.022949
1    729.291748     0.046143   729.268799 -744.769287      0.000000           0.000000    0.022949      -19.977051
2   1049.268799   320.000000   849.268799 -744.769287      0.000000           0.000000  200.000000      200.000000
3   1049.291748   200.000000   849.268799 -744.769287      0.022949           0.022949  200.000000      100.000000
4   1751.291748   702.000000   949.268799 -744.769287    502.023193         502.023193  299.999756      199.999756
5   3487.291748  1736.000000  1077.268799 -744.769287   2138.023193        2138.023193  271.999756      199.999756
6   7303.291748  3816.000000  1157.268799 -744.769287   5854.023193        5854.023193  291.999756      199.999756
7  15399.291748  8096.000000  1349.268311 -744.769287  13850.023193       13850.023193  200.000244      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:43]  --------------------------------------------------------------------------------
[07/13 21:45:43]  Iteration: 57
[07/13 21:45:45]  Generator returned sat in 0.430429 secs.
[07/13 21:45:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:45:45]  Improved gap from 377/16384 to 100
[07/13 21:45:45]  Improved number of small numbers from 44 to 90 out of a max of 90
[07/13 21:45:45]  Verifer returned sat in 0.268140 secs.
[07/13 21:45:45]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -5492.982666      0.093262 -5493.028564 -744.769287      0.000000           0.000000    0.045898        0.045898
1  -5492.982666      0.023193 -5493.028564 -744.769287      0.000000           0.000000    0.045898      -99.954102
2  -5093.028564    400.000000 -5293.028564 -744.769287      0.000000           0.000000  200.000000      200.000000
3  -5093.005615    200.000000 -5224.028564 -744.769287      0.022949           0.022949  131.000000      100.000000
4  -4153.005615    940.000000 -5193.028564 -744.769287    840.022949         840.022949  200.000000      100.000000
5  -1671.005615   2482.000000 -5011.028564 -744.769287   3222.022949        3222.022949  118.000000      100.000000
6   3858.994385   5530.000000 -4993.028564 -744.769287   8552.022949        8552.022949  300.000000      200.000000
7  15382.994385  11524.000000 -4893.028320 -744.769287  19976.022949       19976.022949  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:45]  --------------------------------------------------------------------------------
[07/13 21:45:45]  Iteration: 58
[07/13 21:45:46]  Generator returned sat in 0.178728 secs.
[07/13 21:45:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:45:46]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:46]  Verifer returned sat in 0.120800 secs.
[07/13 21:45:46]  Counter example: 
[93m    arrival_0,t      cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  -5492.982666      0.093262 -5493.278564 -744.769287      0.000000           0.000000    0.295898        0.045898
1  -5492.982666      0.023193 -5493.028564 -744.769287      0.000000           0.000000    0.045898      -99.954102
2  -5093.028564    400.000000 -5293.028564 -744.769287      0.000000           0.000000  200.000000      200.000000
3  -5093.005615    200.000000 -5224.028564 -744.769287      0.022949           0.022949  131.000000      100.000000
4  -4153.005615    940.000000 -5192.778564 -744.769287    840.022949         840.022949  199.750000      100.000000
5  -1671.005615   2482.000000 -5011.028564 -744.769287   3222.022949        3222.022949  118.000000      100.000000
6   3858.494385   5529.500000 -4993.028564 -744.769287   8551.522949        8551.522949  300.000000      200.000000
7  15380.994385  11522.500000 -4893.028320 -744.769287  19976.022949       19976.022949  297.999756      198.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:46]  --------------------------------------------------------------------------------
[07/13 21:45:46]  Iteration: 59
[07/13 21:45:47]  Generator returned sat in 0.444259 secs.
[07/13 21:45:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:45:48]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/13 21:45:48]  Verifer returned sat in 0.193672 secs.
[07/13 21:45:48]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5392.779053     0.093018 -5692.779053 -645.019287     0.000000           0.000000  300.000000      200.000000
1 -5392.779053     0.045654 -5493.029053 -645.019287     0.000000           0.000000  100.250000      100.000000
2 -5192.779053   300.250000 -5415.779053 -645.019287     0.000000           0.000000  223.000000      200.000000
3 -4869.824707   323.000000 -5292.779053 -645.019287   222.954346         222.954346  200.000000      200.000000
4 -4146.324707   723.500000 -5192.779053 -645.019287   846.454346         846.454346  200.000000      200.000000
5 -3122.074707  1024.250000 -5092.779053 -645.019287  1870.704102        1870.704102  100.000244      100.000244
6 -1774.324707  1347.750000 -4992.779053 -645.019287  3018.454346        3018.454346  200.000000      200.000000
7  -126.074707  1648.250000 -4992.778809 -645.019287  4666.704102        4666.704102  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:48]  --------------------------------------------------------------------------------
[07/13 21:45:48]  Iteration: 60
[07/13 21:45:49]  Generator returned sat in 0.243875 secs.
[07/13 21:45:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:49]  Improved gap from 187/16384 to 100
[07/13 21:45:49]  Improved number of small numbers from 46 to 90 out of a max of 90
[07/13 21:45:49]  Verifer returned sat in 0.272124 secs.
[07/13 21:45:49]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5159.655029    0.092773 -5359.655029 -645.019531    0.000000           0.000000  200.000000      199.999756
1 -5159.655029   99.022705 -5259.654785 -645.019531    0.000000           0.000000   99.999756       99.999756
2 -5159.609131  100.045654 -5234.109131 -645.019531    0.000000           0.000000   74.500000        0.045654
3 -5159.609131   74.499756 -5159.654785 -645.019531    0.000000           0.000000    0.045654      -99.954346
4 -4808.632080  350.999756 -5050.654785 -645.019531    0.022949           0.022949  241.999756      150.999756
5 -4808.632080  211.000000 -4959.654785 -645.019531    0.022949           0.022949  150.999756       50.999756
6 -4110.177734  698.454346 -4810.654785 -645.019531  549.477051         549.477051  151.000000      100.000000
7 -3910.154785  351.000000 -4759.654785 -645.019531  549.500000         549.500000  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:49]  --------------------------------------------------------------------------------
[07/13 21:45:49]  Iteration: 61
[07/13 21:45:50]  Generator returned sat in 0.179241 secs.
[07/13 21:45:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:45:50]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/13 21:45:50]  Verifer returned sat in 0.145085 secs.
[07/13 21:45:51]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5159.655273    0.092529 -5387.283203 -645.019531    0.000000           0.000000  227.627930      199.999512
1 -5159.655273   99.022461 -5259.654785 -645.019531    0.000000           0.000000   99.999512       99.999512
2 -5159.626221  100.028564 -5159.654785 -645.019531    0.000000           0.000000    0.028564        0.028564
3 -5159.626221    0.005615 -5159.654785 -645.019531    0.000000           0.000000    0.028564      -99.971436
4 -4816.177979  343.453857 -5059.654785 -645.019531    0.022949           0.022949  243.453857      143.453857
5 -4816.177979  202.000000 -4959.654785 -645.019531    0.022949           0.022949  143.453857       43.453857
6 -4110.177979  706.000000 -4810.654785 -645.019531  549.476807         549.476807  151.000000      100.000000
7 -3910.155029  351.000000 -4759.654785 -645.019531  549.499756         549.499756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:51]  --------------------------------------------------------------------------------
[07/13 21:45:51]  Iteration: 62
[07/13 21:45:52]  Generator returned sat in 0.151335 secs.
[07/13 21:45:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:52]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:52]  Verifer returned sat in 0.118412 secs.
[07/13 21:45:52]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5159.655273    0.092529 -5387.616536 -645.019531    0.000000           0.000000  227.961263      199.999512
1 -5159.655273   99.022461 -5259.904785 -645.019531    0.000000           0.000000  100.249512       99.999512
2 -5159.626221  100.278564 -5159.654785 -645.019531    0.000000           0.000000    0.028564        0.028564
3 -5159.626221    0.005615 -5159.654785 -645.019531    0.000000           0.000000    0.028564      -99.971436
4 -4816.177979  343.453857 -5059.654785 -645.019531    0.022949           0.022949  243.453857      143.453857
5 -4816.177979  202.250000 -4959.654785 -645.019531    0.022949           0.022949  143.453857       43.453857
6 -4110.177979  706.000000 -4810.654785 -645.019531  549.476807         549.476807  151.000000      100.000000
7 -3910.155029  351.000000 -4759.654785 -645.019531  549.499756         549.499756  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:52]  --------------------------------------------------------------------------------
[07/13 21:45:52]  Iteration: 63
[07/13 21:45:53]  Generator returned sat in 0.170414 secs.
[07/13 21:45:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:45:53]  Improved number of small numbers from 77 to 89 out of a max of 89
[07/13 21:45:53]  Verifer returned sat in 0.189697 secs.
[07/13 21:45:53]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5159.655273    0.092041 -5388.263184 -645.02002    0.000000           0.000000  228.607910      199.999512
1 -5159.655273   99.022217 -5259.904785 -645.02002    0.000000           0.000000  100.249512       99.999512
2 -5159.626221  100.278564 -5159.654785 -645.02002    0.000000           0.000000    0.028564        0.028564
3 -5159.626221    0.021240 -5159.654785 -645.02002    0.000000           0.000000    0.028564      -99.971436
4 -4815.678467  343.955078 -5059.654785 -645.02002    0.021240           0.021240  243.955078      143.955078
5 -4815.678467  202.250000 -4959.654785 -645.02002    0.021240           0.021240  143.955078       43.955078
6 -4110.178467  705.500000 -4810.654785 -645.02002  549.476318         549.476318  151.000000      100.000000
7 -3910.155273  351.000000 -4759.654785 -645.02002  549.499512         549.499512  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:53]  --------------------------------------------------------------------------------
[07/13 21:45:53]  Iteration: 64
[07/13 21:45:54]  Generator returned sat in 0.161344 secs.
[07/13 21:45:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:45:54]  Improved gap from 0 to 100
[07/13 21:45:55]  Improved number of small numbers from 42 to 90 out of a max of 90
[07/13 21:45:55]  Verifer returned sat in 0.228403 secs.
[07/13 21:45:55]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5510.282715    0.091797 -5710.282471 -294.392334   0.000000           0.000000  199.999756      199.999756
1 -5510.259766  200.022705 -5610.282471 -294.392334   0.000000           0.000000  100.022705      100.022705
2 -5510.259766    0.011475 -5610.282471 -294.392334   0.000000           0.000000  100.022705        0.022705
3 -5510.259766   25.250000 -5510.282471 -294.392334   0.000000           0.000000    0.022705      -99.977295
4 -5159.271240  351.000000 -5361.282471 -294.392334   0.011230           0.011230  202.000000      151.000000
5 -5110.260010  251.000000 -5278.282715 -294.392334   0.022461           0.022461  168.000244      100.000000
6 -4944.248779  333.999756 -5161.282471 -294.392334   0.034180           0.034180  216.999512      165.999512
7 -4810.237305  351.000000 -5110.282471 -294.392334   0.045166           0.045166  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:55]  --------------------------------------------------------------------------------
[07/13 21:45:55]  Iteration: 65
[07/13 21:45:56]  Generator returned sat in 0.455265 secs.
[07/13 21:45:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:56]  Improved gap from 371/16384 to 100
[07/13 21:45:56]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/13 21:45:56]  Verifer returned sat in 0.315982 secs.
[07/13 21:45:56]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7343.532959     0.091797 -7443.533203 -294.392334     0.000000           0.000000  100.000244      100.000244
1 -7343.532959    99.999756 -7443.532959 -294.392334     0.000000           0.000000  100.000000        0.000244
2 -7243.487549   200.045410 -7243.533203 -294.392334     0.000000           0.000000    0.045654        0.045654
3 -7043.510498   200.000000 -7243.533203 -294.392334     0.022705           0.022705  200.000000      100.000000
4 -6541.510498   502.000000 -7143.532959 -294.392334   302.022705         302.022705  299.999756      200.000000
5 -5587.510498   954.000000 -7010.533203 -294.392334  1156.022705        1156.022705  267.000000      200.000000
6 -4282.010498  1305.500000 -6926.533203 -294.392334  2361.522705        2361.522705  283.000000      200.000000
7 -2499.010498  1783.000000 -6843.532959 -294.392334  4044.522705        4044.522705  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:57]  --------------------------------------------------------------------------------
[07/13 21:45:57]  Iteration: 66
[07/13 21:45:58]  Generator returned sat in 0.260593 secs.
[07/13 21:45:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:58]  Improved gap from 185/4096 to 100
[07/13 21:45:58]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:45:58]  Verifer returned sat in 0.172343 secs.
[07/13 21:45:58]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t     losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -7995.533203     0.091797 -8095.533203 -294.392334      0.000000           0.000000    100.0           100.0
1 -7995.533203     0.045166 -8095.533203 -294.392334      0.000000           0.000000    100.0             0.0
2 -7895.533203   200.000000 -7995.533203 -294.392334      0.000000           0.000000    100.0             0.0
3 -7695.488037   300.000000 -7895.533203 -294.392334      0.045166           0.045166    200.0           100.0
4 -6843.488037   852.000000 -7795.533203 -294.392334    652.045166         652.045166    300.0           200.0
5 -4963.488037  1880.000000 -7695.533203 -294.392334   2532.045166        2532.045166    200.0           100.0
6 -1541.488037  3422.000000 -7514.533203 -294.392334   5754.045166        5754.045166    219.0           200.0
7  4355.511963  5897.000000 -7495.533203 -294.392334  11551.045166       11551.045166    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:45:58]  --------------------------------------------------------------------------------
[07/13 21:45:58]  Iteration: 67
[07/13 21:45:59]  Generator returned sat in 0.243850 secs.
[07/13 21:45:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:45:59]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:45:59]  Verifer returned sat in 0.119220 secs.
[07/13 21:45:59]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7995.533203    0.091797 -8195.533447 -294.392334     0.000000           0.000000  200.000244      100.000244
1 -7995.533203    0.044922 -8095.533447 -294.392334     0.000000           0.000000  100.000244        0.000244
2 -7757.465820  338.067627 -7907.533447 -294.392334     0.000000           0.000000  150.067627      138.067627
3 -7445.488281  312.000000 -7895.533447 -294.392334   150.045166         150.045166  300.000000      200.000000
4 -6843.488281  602.000000 -7695.533447 -294.392334   652.045166         652.045166  200.000000      200.000000
5 -6041.488281  802.000000 -7695.533447 -294.392334  1454.044922        1454.044922  200.000244      100.000244
6 -5615.488281  426.000000 -7495.533447 -294.392334  1680.045166        1680.045166  200.000000      200.000000
7 -4813.488281  802.000000 -7495.533447 -294.392334  2482.045166        2482.045166  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:00]  --------------------------------------------------------------------------------
[07/13 21:46:00]  Iteration: 68
[07/13 21:46:01]  Generator returned sat in 0.252524 secs.
[07/13 21:46:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:01]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/13 21:46:01]  Verifer returned sat in 0.162359 secs.
[07/13 21:46:01]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -7995.533447    0.091553 -8195.533447 -294.392578    0.000000           0.000000  200.000000      100.000000
1 -7995.533447    0.044922 -7995.555908 -294.392578    0.000000           0.000000    0.022461        0.000000
2 -7757.466064  238.089844 -7995.533447 -294.392578    0.000000           0.000000  238.067383      138.067383
3 -7357.488525  400.000000 -7795.533447 -294.392578  238.044922         238.044922  200.000000      200.000000
4 -7357.488525    2.000000 -7757.346924 -294.392578  238.044922         238.044922  161.813477      100.000000
5 -7157.466064  361.813477 -7695.533447 -294.392578  238.067383         238.067383  300.000000      200.000000
6 -7157.466064    2.000000 -7557.333447 -294.392578  238.067383         238.067383  161.800000      100.000000
7 -6957.443604  361.800000 -7495.533447 -294.392578  238.089844         238.089844  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:01]  --------------------------------------------------------------------------------
[07/13 21:46:01]  Iteration: 69
[07/13 21:46:02]  Generator returned sat in 0.413864 secs.
[07/13 21:46:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:02]  Improved gap from 23/1024 to 21.875
[07/13 21:46:03]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:46:03]  Verifer returned sat in 0.261021 secs.
[07/13 21:46:03]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8182.308838    0.091309 -8282.353760 -294.392822        0.0                0.0  100.044922        0.044922
1 -8182.308838    0.044922 -8182.353760 -294.392822        0.0                0.0    0.044922      -99.955078
2 -7782.353760  400.000000 -8082.353760 -294.392822        0.0                0.0  300.000000      200.000000
3 -7777.353760  305.000000 -7882.353760 -294.392822        0.0                0.0  105.000000      105.000000
4 -7728.353760  154.000000 -7806.898682 -294.392822        0.0                0.0   78.544922       54.000000
5 -7728.353760   78.500000 -7769.148682 -248.392822        0.0                0.0   40.794922        0.000000
6 -7728.353760   40.750000 -7728.353760 -170.267822        0.0                0.0    0.000000      -21.875000
7 -7706.478760   21.875000 -7706.478760 -170.267822        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:46:03]  --------------------------------------------------------------------------------
[07/13 21:46:03]  Iteration: 70
[07/13 21:46:04]  Generator returned sat in 0.235169 secs.
[07/13 21:46:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:04]  Improved number of small numbers from 34 to 89 out of a max of 89
[07/13 21:46:04]  Verifer returned sat in 0.318562 secs.
[07/13 21:46:04]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8232.803223    0.090820 -8429.803223 -143.932617   0.000000           0.000000  197.000000      100.010986
1 -8232.803223    0.044434 -8329.881592 -143.932617   0.000000           0.000000   97.078369        0.010986
2 -8232.803223    0.011230 -8232.814209 -143.932617   0.000000           0.000000    0.010986      -99.989014
3 -8132.803223  100.010986 -8132.814209 -143.932617   0.000000           0.000000    0.010986      -99.989014
4 -7932.814209  200.000000 -7932.836670 -143.932617   0.000000           0.000000    0.022461        0.000000
5 -7632.803223  300.022461 -7832.814453 -143.932617   0.010986           0.010986  200.000244      200.000000
6 -7632.803223    2.000000 -7732.814209 -143.932617   0.010986           0.010986  100.000000      100.000000
7 -7530.291992  202.500000 -7732.814209 -143.932617   0.022217           0.022217  202.500000      102.500000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:05]  --------------------------------------------------------------------------------
[07/13 21:46:05]  Iteration: 71
[07/13 21:46:06]  Generator returned sat in 0.372187 secs.
[07/13 21:46:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:06]  Improved gap from 183/8192 to 100
[07/13 21:46:06]  Improved number of small numbers from 52 to 90 out of a max of 90
[07/13 21:46:06]  Verifer returned sat in 0.270041 secs.
[07/13 21:46:06]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8619.434570     0.090576 -8619.479248 -143.932617     0.000000           0.000000    0.044678        0.044678
1 -8619.434570     0.022217 -8619.479248 -143.932617     0.000000           0.000000    0.044678      -99.955322
2 -8244.479248   375.000000 -8419.479248 -143.932617     0.000000           0.000000  175.000000      175.000000
3 -8244.479248   175.000000 -8419.479248 -143.932617     0.000000           0.000000  175.000000       75.000000
4 -8230.479248   189.000000 -8283.479248 -143.932617     0.000000           0.000000   53.000000      -11.000000
5 -8019.457031   264.000000 -8119.479248 -143.932617     0.022217           0.022217  100.000000      100.000000
6 -7171.457031   848.000000 -8036.479248 -143.932617   648.022461         648.022461  216.999756      199.999756
7 -5322.957031  1848.500000 -8019.479248 -143.932617  2396.522217        2396.522217  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:06]  --------------------------------------------------------------------------------
[07/13 21:46:06]  Iteration: 72
[07/13 21:46:08]  Generator returned sat in 0.531800 secs.
[07/13 21:46:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:08]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:46:08]  Verifer returned sat in 0.151043 secs.
[07/13 21:46:08]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8619.434570    0.090576 -8619.479248 -143.932617    0.000000           0.000000    0.044678        0.044678
1 -8619.434570    0.022217 -8619.479248 -143.932617    0.000000           0.000000    0.044678      -99.955322
2 -8244.479248  375.000000 -8419.479248 -143.932617    0.000000           0.000000  175.000000      175.000000
3 -8244.479248  175.000000 -8419.479248 -143.932617    0.000000           0.000000  175.000000       75.000000
4 -8230.479248  189.000000 -8283.479248 -143.932617    0.000000           0.000000   53.000000      -11.000000
5 -8019.457031  264.000000 -8119.479248 -143.932617    0.022217           0.022217  100.000000      100.000000
6 -7567.457031  452.000000 -8036.479248 -143.932617  352.022217         352.022217  117.000000      100.000000
7 -6990.957031  576.500000 -8019.479248 -143.932617  828.522217         828.522217  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:08]  --------------------------------------------------------------------------------
[07/13 21:46:08]  Iteration: 73
[07/13 21:46:09]  Generator returned sat in 0.265344 secs.
[07/13 21:46:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:10]  Improved number of small numbers from 64 to 85 out of a max of 89
[07/13 21:46:10]  Verifer returned sat in 0.368933 secs.
[07/13 21:46:10]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -8519.474121    0.090576 -8619.479492 -143.932861    0.000000           0.000000  100.005371      100.005371
1 -8519.474121    0.021973 -8519.479492 -143.932861    0.000000           0.000000    0.005371        0.005371
2 -8317.968262  201.511230 -8419.479736 -143.932861    0.000000           0.000000  101.511475      101.511230
3 -8317.968262    0.005554 -8419.479492 -143.932861    0.000000           0.000000  101.511230        1.511230
4 -8317.968262  101.511108 -8318.479492 -143.932617    0.000000           0.000000    0.511230      -98.488525
5 -8013.451904  305.022217 -8123.483154 -143.932617    0.005371           0.005371  110.025879      106.022461
6 -7567.457031  445.994873 -8036.479492 -143.932617  352.021729         352.021729  117.000732      100.000977
7 -6990.957031  576.500000 -8019.479492 -143.932617  828.521973         828.521973  200.000488      100.000732
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:10]  --------------------------------------------------------------------------------
[07/13 21:46:10]  Iteration: 74
[07/13 21:46:13]  Generator returned sat in 1.599918 secs.
[07/13 21:46:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:13]  Improved gap from 16021/16384 to 100
[07/13 21:46:13]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/13 21:46:13]  Verifer returned sat in 0.298539 secs.
[07/13 21:46:13]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t   wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9263.496338     0.090332 -9363.496338 -83.271729     0.000000           0.000000  100.000000      100.000000
1 -9263.496338     0.022217 -9363.496094 -83.271729     0.000000           0.000000   99.999756        0.000000
2 -9163.451904   200.044189 -9163.496338 -83.271729     0.000000           0.000000    0.044434        0.044434
3 -8963.474121   200.000000 -9163.496338 -83.271729     0.022217           0.022217  200.000000      100.000000
4 -8763.452148   400.000000 -9063.496094 -83.271729     0.044189           0.044189  299.999756      200.000000
5 -8013.452148   750.000000 -8895.496338 -83.271729   650.044434         650.044434  231.999756      199.999756
6 -6754.452148  1259.000000 -8763.496338 -83.271729  1809.044189        1809.044189  200.000000      200.000000
7 -4665.952148  2088.500000 -8763.496338 -83.271729  3797.544434        3797.544434  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:13]  --------------------------------------------------------------------------------
[07/13 21:46:13]  Iteration: 75
[07/13 21:46:16]  Generator returned sat in 1.528050 secs.
[07/13 21:46:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:46:16]  Improved gap from 363/8192 to 100
[07/13 21:46:16]  Improved number of small numbers from 68 to 90 out of a max of 90
[07/13 21:46:16]  Verifer returned sat in 0.180104 secs.
[07/13 21:46:16]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9461.496338    0.090088 -9561.496582  114.728271    0.000000           0.000000  100.000244      100.000244
1 -9461.496338    0.044189 -9561.496582  114.728271    0.000000           0.000000  100.000244        0.000244
2 -9161.496582  400.000000 -9373.496582  114.728271    0.000000           0.000000  212.000000      200.000000
3 -9161.496582   65.333333 -9361.496582  114.728271    0.000000           0.000000  200.000000      100.000000
4 -8961.452148  400.000000 -9161.496582  114.728271    0.044434           0.044434  200.000000      200.000000
5 -8961.452148    2.000000 -9161.496582  114.728271    0.044434           0.044434  200.000000      100.000000
6 -8838.452148  323.000000 -9061.496582  114.728271    0.044434           0.044434  223.000000      123.000000
7 -7901.952148  936.500000 -8961.496582  114.728271  759.544434         759.544434  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:16]  --------------------------------------------------------------------------------
[07/13 21:46:16]  Iteration: 76
[07/13 21:46:17]  Generator returned sat in 0.529401 secs.
[07/13 21:46:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:46:18]  Improved gap from 181/8192 to 100
[07/13 21:46:18]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/13 21:46:18]  Verifer returned sat in 0.263664 secs.
[07/13 21:46:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9565.570312    0.089844 -9765.570312  114.728027    0.000000           0.000000  200.000000      100.000000
1 -9565.570312    0.044189 -9665.570312  114.728027    0.000000           0.000000  100.000000        0.000000
2 -9365.570557  299.999756 -9565.570312  114.728027    0.000000           0.000000  199.999756       99.999756
3 -9065.614502  300.000000 -9433.570312  114.728027  199.955811         199.955811  168.000000      100.000000
4 -9065.614502  168.000000 -9365.570312  114.728027  199.955811         199.955811  100.000000        0.000000
5 -8361.614502  704.000000 -9165.570312  114.728027  603.955811         603.955811  200.000000      200.000000
6 -8159.614502  202.000000 -9065.570312  114.728027  805.955566         805.955566  100.000244      100.000244
7 -8073.614746  186.000000 -9065.570312  114.728027  805.955566         805.955566  186.000000       86.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:18]  --------------------------------------------------------------------------------
[07/13 21:46:18]  Iteration: 77
[07/13 21:46:20]  Generator returned sat in 0.760922 secs.
[07/13 21:46:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:46:20]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:46:20]  Verifer returned sat in 0.122894 secs.
[07/13 21:46:20]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9565.570312    0.089844 -9765.570312  114.728027    0.000000           0.000000  200.000000      100.000000
1 -9565.570312    0.044189 -9665.570312  114.728027    0.000000           0.000000  100.000000        0.000000
2 -9365.570557  299.999756 -9565.570312  114.728027    0.000000           0.000000  199.999756       99.999756
3 -9065.614502  300.000000 -9433.570312  114.728027  199.955811         199.955811  168.000000      100.000000
4 -9065.614502  168.000000 -9365.570312  114.728027  199.955811         199.955811  100.000000        0.000000
5 -8362.614502  703.000000 -9165.570312  114.728027  602.955811         602.955811  200.000000      200.000000
6 -8160.614502  202.000000 -9065.570312  114.728027  804.955811         804.955811  100.000000      100.000000
7 -8074.614502  186.000000 -9065.570312  114.728027  804.955811         804.955811  186.000000       86.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:20]  --------------------------------------------------------------------------------
[07/13 21:46:20]  Iteration: 78
[07/13 21:46:21]  Generator returned sat in 0.263751 secs.
[07/13 21:46:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:21]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:46:21]  Verifer returned sat in 0.119590 secs.
[07/13 21:46:21]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9565.570557    0.089600 -9765.570557  114.728027    0.000000           0.000000  200.000000      100.000000
1 -9565.570557    0.043945 -9665.570312  114.728027    0.000000           0.000000   99.999756        0.000000
2 -9365.570801  299.999512 -9565.570557  114.728027    0.000000           0.000000  199.999756       99.999756
3 -9065.614746  300.000000 -9433.570557  114.728027  199.955811         199.955811  168.000000      100.000000
4 -9065.614746  168.000000 -9365.236979  114.728027  199.955811         199.955811   99.666423        0.000000
5 -8362.614746  703.000000 -9165.570557  114.728027  602.955811         602.955811  200.000000      200.000000
6 -8160.614746  202.000000 -9065.570557  114.728027  804.955811         804.955811  100.000000      100.000000
7 -8074.614746  186.000000 -9065.570312  114.728027  804.955811         804.955811  185.999756       86.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:22]  --------------------------------------------------------------------------------
[07/13 21:46:22]  Iteration: 79
[07/13 21:46:23]  Generator returned sat in 0.561349 secs.
[07/13 21:46:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:46:23]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/13 21:46:23]  Verifer returned sat in 0.161549 secs.
[07/13 21:46:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9565.571045    0.089355 -9765.570801  114.728027    0.000000           0.000000  199.999756       99.999756
1 -9565.571045    0.043945 -9665.570312  114.728027    0.000000           0.000000   99.999268       -0.000244
2 -9365.571045  299.999268 -9565.570801  114.728027    0.000000           0.000000  199.999756       99.999756
3 -9065.614990  301.000000 -9432.904297  114.728027  198.955811         198.955811  168.333496      101.000000
4 -9065.614990  168.333252 -9365.237061  114.728027  198.955811         198.955811  100.666260        1.000000
5 -8362.615234  702.999756 -9165.570801  114.728027  602.955811         602.955811  199.999756      199.999756
6 -8160.615234  202.000000 -9065.570801  114.728027  804.955566         804.955566  100.000000      100.000000
7 -8074.948486  185.666748 -9065.570801  114.728027  804.955566         804.955566  185.666748       85.666748
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:24]  --------------------------------------------------------------------------------
[07/13 21:46:24]  Iteration: 80
[07/13 21:46:25]  Generator returned sat in 0.993551 secs.
[07/13 21:46:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:26]  Improved gap from 45/2048 to 100
[07/13 21:46:26]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:46:26]  Verifer returned sat in 0.142102 secs.
[07/13 21:46:26]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9565.570801    0.089355 -9665.570801  114.728027     0.000000           0.000000  100.000000      100.000000
1 -9565.570801    0.043945 -9665.570801  114.728027     0.000000           0.000000  100.000000        0.000000
2 -9365.571045  299.999756 -9565.570801  114.728027     0.000000           0.000000  199.999756       99.999756
3 -8966.614990  400.000000 -9416.592773  114.728027   198.955811         198.955811  251.021973      200.000000
4 -8966.614990  250.978027 -9365.570801  114.728027   198.955811         198.955811  200.000000      100.000000
5 -8240.625977  725.989014 -9165.570801  114.728027   724.944824         724.944824  200.000000      200.000000
6 -7838.625977  402.000000 -9117.059814  114.728027  1026.944824        1026.944824  251.489014      200.000000
7 -7788.582031  301.532959 -9065.570801  114.728027  1026.944824        1026.944824  250.043945      150.043945
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:26]  --------------------------------------------------------------------------------
[07/13 21:46:26]  Iteration: 81
[07/13 21:46:27]  Generator returned sat in 0.292622 secs.
[07/13 21:46:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:27]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:46:27]  Verifer returned sat in 0.114409 secs.
[07/13 21:46:27]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9565.571045    0.089355 -9665.615234  114.727783    0.000000           0.000000  100.044189       99.999756
1 -9565.571045    0.043701 -9665.570801  114.727783    0.000000           0.000000   99.999756       -0.000244
2 -9365.571289  299.999512 -9565.570801  114.727783    0.000000           0.000000  199.999512       99.999512
3 -8966.614990  400.000000 -9416.593018  114.727783  198.955811         198.955811  251.022217      200.000000
4 -8966.571289  251.022217 -9265.570801  114.727783  198.999512         198.999512  100.000000      100.000000
5 -8564.571289  402.000000 -9165.570801  114.727783  400.999512         400.999512  200.000000      200.000000
6 -8162.571289  402.000000 -9165.570801  114.727783  802.999512         802.999512  200.000000      100.000000
7 -8109.549072  253.022217 -9065.570801  114.727783  802.999512         802.999512  153.022217       53.022217
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:28]  --------------------------------------------------------------------------------
[07/13 21:46:28]  Iteration: 82
[07/13 21:46:29]  Generator returned sat in 0.443692 secs.
[07/13 21:46:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:29]  Improved gap from 0 to 0
[07/13 21:46:29]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:46:29]  Verifer returned sat in 0.198627 secs.
[07/13 21:46:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9167.314209    0.089355 -9467.314209  114.727783        0.0                0.0  300.000000      200.000000
1 -9167.314209    0.043945 -9267.314209  114.727783        0.0                0.0  100.000000      100.000000
2 -9066.814209  200.500000 -9167.314209  114.727783        0.0                0.0  100.500000      100.500000
3 -9066.814209  100.500000 -9067.314209  114.727783        0.0                0.0    0.500000        0.500000
4 -9066.814209    0.500000 -9067.270264  214.227783        0.0                0.0    0.456055        0.000000
5 -9066.770264    0.500000 -9066.814209  314.183838        0.0                0.0    0.043945        0.000000
6 -9066.314209    0.500000 -9066.358154  413.727783        0.0                0.0    0.043945        0.000000
7 -9065.858154    0.500000 -9065.858154  413.727783        0.0                0.0    0.000000      -99.543945
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:29]  --------------------------------------------------------------------------------
[07/13 21:46:29]  Iteration: 83
[07/13 21:46:31]  Generator returned sat in 0.263998 secs.
[07/13 21:46:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:31]  Improved gap from 179/8192 to 20.3125
[07/13 21:46:31]  Improved number of small numbers from 55 to 90 out of a max of 90
[07/13 21:46:31]  Verifer returned sat in 0.321678 secs.
[07/13 21:46:31]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9364.936035    0.088867 -9664.935791  114.727783        0.0                0.0  299.999756      199.999756
1 -9364.936035  180.861084 -9464.935791  114.727783        0.0                0.0   99.999756       99.999756
2 -9364.935791  100.000000 -9419.435791  114.727783        0.0                0.0   54.500000        0.000000
3 -9109.435791  310.000000 -9264.936035  114.727783        0.0                0.0  155.500244      155.500000
4 -9109.435791  155.500000 -9190.079346  114.727783        0.0                0.0   80.643555       55.500000
5 -9109.435791   78.250000 -9149.104736  159.227783        0.0                0.0   39.668945        0.000000
6 -9109.435791   39.625000 -9109.435791  238.915283        0.0                0.0    0.000000      -20.312500
7 -9089.123291   20.312500 -9089.123291  238.915283        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:46:31]  --------------------------------------------------------------------------------
[07/13 21:46:31]  Iteration: 84
[07/13 21:46:33]  Generator returned sat in 0.287451 secs.
[07/13 21:46:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:33]  Improved gap from 16025/16384 to 0
[07/13 21:46:33]  Improved number of small numbers from 48 to 90 out of a max of 90
[07/13 21:46:33]  Verifer returned sat in 0.206707 secs.
[07/13 21:46:33]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9364.936035    0.088867 -9664.935791  139.893311   0.000000           0.000000  299.999756      199.999756
1 -9364.936035  180.860840 -9464.936035  139.893311   0.000000           0.000000  100.000000       99.999756
2 -9364.914062  100.021973 -9364.935791  139.893311   0.000000           0.000000    0.021729        0.021729
3 -9265.087891   99.847900 -9265.131592  139.893311   0.000000           0.000000    0.043701       -0.152100
4 -9064.913818  200.195801 -9164.935791  139.893311   0.021973           0.021973  100.000000      100.000000
5 -9064.913818    2.000000 -9068.457764  139.893311   0.021973           0.021973    3.521973        0.000000
6 -9063.935791    4.500000 -9064.935791  238.915039   0.021973           0.021973    0.978027       -0.000244
7 -9055.413818    9.500000 -9063.957520  238.915039   0.021973           0.021973    8.521729      -91.478271
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:46:33]  --------------------------------------------------------------------------------
[07/13 21:46:33]  Iteration: 85
[07/13 21:46:34]  Generator returned sat in 0.314744 secs.
[07/13 21:46:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:35]  Improved number of small numbers from 49 to 74 out of a max of 89
[07/13 21:46:35]  Verifer returned sat in 0.531131 secs.
[07/13 21:46:35]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9263.245117    0.088867 -9563.244873  139.893066    0.000000           0.000000  299.999756      199.999756
1 -9263.245117  180.860840 -9363.245117  139.893066    0.000000           0.000000  100.000000       99.999756
2 -9263.223145  100.021973 -9263.244995  139.893066    0.000000           0.000000    0.021851        0.021729
3 -9197.286662   65.958333 -9197.308573  139.893066    0.000000           0.000000    0.021912      -34.041789
4 -9064.891907  132.416667 -9128.578328  139.893311    0.000000           0.000000   63.686422       -1.646790
5 -8863.223083  265.333333 -9063.245117  139.893311    0.021912           0.021912  200.000122      100.000122
6 -8663.201172  400.000000 -8863.245117  139.893311    0.043945           0.043945  200.000000      200.000000
7 -8061.201172  602.000000 -8863.245117  139.893311  602.043701         602.043701  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:35]  --------------------------------------------------------------------------------
[07/13 21:46:35]  Iteration: 86
[07/13 21:46:37]  Generator returned sat in 0.517871 secs.
[07/13 21:46:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:37]  Improved number of small numbers from 55 to 89 out of a max of 89
[07/13 21:46:37]  Verifer returned sat in 0.205702 secs.
[07/13 21:46:37]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9263.245117    0.088867 -9563.244873  139.893066    0.000000           0.000000  299.999756      199.999756
1 -9263.245117  180.860840 -9363.245117  139.893066    0.000000           0.000000  100.000000       99.999756
2 -9063.245117  300.000000 -9359.245117  139.893066    0.000000           0.000000  296.000000      199.999756
3 -8963.223145  396.000000 -9163.244873  139.893066    0.021973           0.021973  199.999756      199.999756
4 -8963.201172  200.000000 -9065.266846  139.893066    0.043701           0.043701  102.021973      100.000000
5 -8963.201172  102.000000 -8963.266846  139.893066    0.043701           0.043701    0.021973        0.000000
6 -8758.723145  204.500000 -8963.244873  139.893066    0.043701           0.043701  204.478027      104.478027
7 -8349.223145  409.500000 -8863.244873  139.893066  214.021729         214.021729  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:37]  --------------------------------------------------------------------------------
[07/13 21:46:37]  Iteration: 87
[07/13 21:46:39]  Generator returned sat in 0.817024 secs.
[07/13 21:46:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:39]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/13 21:46:39]  Verifer returned sat in 0.148224 secs.
[07/13 21:46:39]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9059.092041    0.088623 -9159.135986  239.80542    0.000000           0.000000  100.043945      100.043701
1 -9059.092041    0.043457 -9059.135986  239.80542    0.000000           0.000000    0.043945        0.043701
2 -8859.135986  200.000000 -8959.135986  239.80542    0.000000           0.000000  100.000000       99.999756
3 -8859.135986  100.000000 -8859.135986  239.80542    0.000000           0.000000    0.000000       -0.000244
4 -8658.635986  200.500000 -8793.940186  239.80542    0.499756           0.499756  134.804443      100.000000
5 -8423.788086  234.847900 -8685.270508  239.80542  135.347656         135.347656  126.134766      100.000000
6 -8293.522217  256.356689 -8659.135742  239.80542  135.391602         135.391602  230.221924      130.221924
7 -8293.522217  230.178467 -8559.135742  239.80542  135.391602         135.391602  130.221924       30.221924
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:39]  --------------------------------------------------------------------------------
[07/13 21:46:39]  Iteration: 88
[07/13 21:46:41]  Generator returned sat in 0.291330 secs.
[07/13 21:46:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:41]  Improved number of small numbers from 75 to 89 out of a max of 89
[07/13 21:46:41]  Verifer returned sat in 0.169471 secs.
[07/13 21:46:41]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9060.067139    0.088379 -9159.135986  239.805176    0.000000           0.000000   99.068848       99.068604
1 -9060.067139    0.043457 -9060.110840  239.805176    0.000000           0.000000    0.043701       -0.931396
2 -8959.092285  101.018555 -8959.135742  239.805176    0.000000           0.000000    0.043457        0.043457
3 -8902.116943   57.018799 -8902.160889  239.805176    0.000000           0.000000    0.043945      -42.981201
4 -8659.092285  243.025146 -8759.135986  239.805176    0.043457           0.043457  100.000244      100.000000
5 -8385.092285  274.000000 -8659.135742  239.805176  174.043457         174.043457  100.000000      100.000000
6 -8196.048340  289.000000 -8659.048584  239.805176  174.087402         174.087402  288.912842      189.000000
7 -8196.048340  268.056152 -8559.135742  239.805176  174.087402         174.087402  189.000000       89.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:41]  --------------------------------------------------------------------------------
[07/13 21:46:41]  Iteration: 89
[07/13 21:46:43]  Generator returned sat in 0.625615 secs.
[07/13 21:46:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:43]  Improved number of small numbers from 44 to 71 out of a max of 89
[07/13 21:46:43]  Verifer returned sat in 0.591612 secs.
[07/13 21:46:43]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9073.372314    0.088135 -9273.372070  239.805176    0.000000           0.000000  199.999756       99.999756
1 -9073.372314    0.043457 -9073.393799  239.805176    0.000000           0.000000    0.021484       -0.000244
2 -8773.372314  300.021484 -8973.372162  239.805176    0.000000           0.000000  199.999847      199.999756
3 -8673.350433  300.000000 -8873.372070  239.805176    0.021729           0.021729  199.999908      199.999908
4 -8673.350433  152.000000 -8873.372070  239.805176    0.021729           0.021729  199.999908       99.999908
5 -8268.839569  404.510864 -8677.649170  239.805176  204.532715         204.532715  204.276886      199.999786
6 -8268.839569  204.255432 -8673.372070  239.805176  204.532715         204.532715  199.999786       99.999786
7 -7759.828705  509.010864 -8573.372070  239.805176  513.543457         513.543457  299.999908      199.999908
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:46:44]  --------------------------------------------------------------------------------
[07/13 21:46:44]  Iteration: 90
[07/13 21:46:46]  Generator returned sat in 1.413404 secs.
[07/13 21:46:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:46]  Improved gap from 1/2 to 100
[07/13 21:46:47]  Improved number of small numbers from 74 to 80 out of a max of 90
[07/13 21:46:47]  Verifer returned sat in 0.291880 secs.
[07/13 21:46:47]  Counter example: 
[93m   arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -9979.937256    0.087891 -10246.270589  239.804932    0.000000           0.000000  266.333333      200.000000
1 -9979.937256    0.021729 -10079.937256  239.804932    0.000000           0.000000  100.000000      100.000000
2 -9979.937256   99.999756  -9979.958984  239.804932    0.000000           0.000000    0.021729        0.000000
3 -9979.937256    0.021484  -9979.937256  239.804932    0.000000           0.000000    0.000000     -100.000000
4 -9579.937256  400.000000  -9879.937256  239.804932    0.000000           0.000000  300.000000      200.000000
5 -9579.415527  300.500000  -9779.937256  239.804932    0.021729           0.021729  200.500000      100.500000
6 -9127.132935  452.282593  -9679.937256  239.804932  252.804443         252.804443  299.999878      199.999878
7 -8448.991638  678.141296  -9579.937256  239.804932  930.945557         930.945557  200.000061      100.000061
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:47]  --------------------------------------------------------------------------------
[07/13 21:46:47]  Iteration: 91
[07/13 21:46:48]  Generator returned sat in 0.373951 secs.
[07/13 21:46:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:48]  Improved gap from 0 to 100
[07/13 21:46:48]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/13 21:46:48]  Verifer returned sat in 0.242391 secs.
[07/13 21:46:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11619.259277    0.087646 -11719.259277  239.804688     0.000000           0.000000  100.000000      100.000000
1 -11619.259277    0.043213 -11719.259277  239.804688     0.000000           0.000000  100.000000        0.000000
2 -11619.259277    0.043457 -11619.259277  239.804688     0.000000           0.000000    0.000000     -100.000000
3 -11319.259521  299.999756 -11519.259277  239.804688     0.000000           0.000000  199.999756       99.999756
4 -10918.759521  400.500000 -11419.259277  239.804688   200.500000         200.500000  299.999756      199.999756
5 -10266.509521  652.250000 -11276.259277  239.804688   752.750000         752.750000  256.999756      199.999756
6  -9423.884521  842.625000 -11148.259277  239.804688  1595.374756        1595.374756  129.000000      100.000000
7  -8444.072021  979.812500 -11119.259277  239.804688  2375.187256        2375.187256  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:49]  --------------------------------------------------------------------------------
[07/13 21:46:49]  Iteration: 92
[07/13 21:46:50]  Generator returned sat in 0.309336 secs.
[07/13 21:46:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:46:50]  Improved gap from 355/8192 to 100
[07/13 21:46:50]  Improved number of small numbers from 86 to 90 out of a max of 90
[07/13 21:46:50]  Verifer returned sat in 0.157853 secs.
[07/13 21:46:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11619.259277    0.087646 -11719.259277  239.804443     0.000000           0.000000  100.000000      100.000000
1 -11619.259277    0.043213 -11719.259277  239.804443     0.000000           0.000000  100.000000        0.000000
2 -11619.259277    0.043213 -11619.259277  239.804443     0.000000           0.000000    0.000000     -100.000000
3 -11519.259277  100.000000 -11519.259277  239.804443     0.000000           0.000000    0.000000     -100.000000
4 -11018.759277  500.500000 -11419.259277  239.804443   200.500000         200.500000  200.000000      100.000000
5 -10316.509277  702.250000 -11274.259277  239.804443   702.750000         702.750000  255.000000      200.000000
6  -9445.884277  870.625000 -11148.259277  239.804443  1573.374756        1573.374756  129.000244      100.000244
7  -8452.071777  993.812500 -11119.259277  239.804443  2467.187256        2467.187256  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:51]  --------------------------------------------------------------------------------
[07/13 21:46:51]  Iteration: 93
[07/13 21:46:53]  Generator returned sat in 1.137700 secs.
[07/13 21:46:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:46:53]  Improved gap from 0 to 100
[07/13 21:46:53]  Improved number of small numbers from 61 to 75 out of a max of 90
[07/13 21:46:53]  Verifer returned sat in 0.440161 secs.
[07/13 21:46:53]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11719.259277     0.087646 -11917.759277  239.804199     0.000000           0.000000  198.500000      100.000000
1 -11719.259277     0.021484 -11719.302612  239.804199     0.000000           0.000000    0.043335        0.000000
2 -11719.259277     0.021729 -11719.259277  239.804199     0.000000           0.000000    0.000000     -100.000000
3 -11619.237549   100.021729 -11619.259277  239.804199     0.000000           0.000000    0.021729      -99.978271
4 -11319.237610   300.000000 -11519.259277  239.804199     0.021667           0.021667  200.000000      100.000000
5 -10468.650940   850.586670 -11419.259277  239.804199   650.608398         650.608398  299.999939      199.999939
6  -8592.270935  1876.380005 -11271.259277  239.804199  2526.988281        2526.988281  152.000061      100.000061
7  -5081.200928  3511.070007 -11119.259277  239.804199  5838.058350        5838.058350  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:53]  --------------------------------------------------------------------------------
[07/13 21:46:53]  Iteration: 94
[07/13 21:46:57]  Generator returned sat in 1.984955 secs.
[07/13 21:46:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:46:57]  Improved gap from 355/16384 to 100
[07/13 21:46:57]  Improved number of small numbers from 34 to 90 out of a max of 90
[07/13 21:46:57]  Verifer returned sat in 0.262889 secs.
[07/13 21:46:57]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12976.489014     0.087646 -13076.439941  239.804443     0.000000           0.000000   99.950928       99.950928
1 -12976.489014     0.010986 -12976.499756  239.804443     0.000000           0.000000    0.010742       -0.049072
2 -12676.440186   300.059570 -12976.439941  239.804443     0.000000           0.000000  299.999756      199.999756
3 -12676.440186     0.010742 -12876.439941  239.804443     0.000000           0.000000  199.999756       99.999756
4 -12676.440186   100.005371 -12676.461670  239.804443     0.000000           0.000000    0.021484       -0.000244
5 -12476.429199   200.021729 -12676.439941  239.804443     0.010742           0.010742  200.000000      100.000000
6 -11675.907471   800.521729 -12498.439941  239.804443   700.532471         700.532471  122.000000      100.000000
7 -10118.885742  1557.021729 -12476.439941  239.804443  2057.554199        2057.554199  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:57]  --------------------------------------------------------------------------------
[07/13 21:46:57]  Iteration: 95
[07/13 21:46:59]  Generator returned sat in 0.450781 secs.
[07/13 21:46:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:46:59]  Improved number of small numbers from 60 to 89 out of a max of 89
[07/13 21:46:59]  Verifer returned sat in 0.153643 secs.
[07/13 21:46:59]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12976.489258     0.087646 -13076.449707  239.804443     0.000000           0.000000   99.960449       99.960449
1 -12976.489258     0.010742 -12977.490234  239.804443     0.000000           0.000000    1.000977       -0.039551
2 -12676.449707   301.040527 -12976.449707  239.804443     0.000000           0.000000  300.000000      200.000000
3 -12676.449707     0.010742 -12876.449707  239.804443     0.000000           0.000000  200.000000      100.000000
4 -12676.449707   100.005371 -12676.452148  239.804443     0.000000           0.000000    0.002441        0.000000
5 -12475.929199   200.521729 -12676.449707  239.804443     0.001221           0.001221  200.519287      100.519287
6 -11675.407471   800.521729 -12498.449707  239.804443   700.532227         700.532227  122.510010      100.510010
7 -10118.885742  1556.521729 -12476.449707  239.804443  2057.563965        2057.563965  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:46:59]  --------------------------------------------------------------------------------
[07/13 21:46:59]  Iteration: 96
[07/13 21:47:02]  Generator returned sat in 1.636019 secs.
[07/13 21:47:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:47:02]  Improved number of small numbers from 79 to 79 out of a max of 89
[07/13 21:47:02]  Verifer returned sat in 0.291313 secs.
[07/13 21:47:02]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12976.489258     0.087646 -13076.449707  239.804443     0.000000           0.000000   99.960449       99.960449
1 -12976.489258     0.010742 -12977.490234  239.804443     0.000000           0.000000    1.000977       -0.039551
2 -12676.449707   301.040527 -12975.200577  239.804443     0.000000           0.000000  298.750870      200.000000
3 -12676.449707     0.000305 -12876.449707  239.804443     0.000000           0.000000  200.000000      100.000000
4 -12676.449707   102.000153 -12678.450409  239.804443     0.000000           0.000000    2.000702        0.000000
5 -12475.929199   202.519989 -12676.449707  239.804443     0.001221           0.001221  200.519287      100.519287
6 -11675.407471   800.521729 -12498.449707  239.804443   700.532227         700.532227  122.510010      100.510010
7 -10118.385742  1557.021729 -12476.449707  239.804443  2058.063965        2058.063965  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:02]  --------------------------------------------------------------------------------
[07/13 21:47:02]  Iteration: 97
[07/13 21:47:04]  Generator returned sat in 0.696522 secs.
[07/13 21:47:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:47:05]  Improved gap from 177/8192 to 100
[07/13 21:47:05]  Improved number of small numbers from 50 to 90 out of a max of 90
[07/13 21:47:05]  Verifer returned sat in 0.363177 secs.
[07/13 21:47:05]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12208.188477     0.087158 -12305.274902 -628.413818        0.0                0.0   97.086426        0.043213
1 -12208.188477    97.086182 -12208.231689 -628.413818        0.0                0.0    0.043213      -99.956787
2 -12008.231689   200.000000 -12108.231689 -628.413818        0.0                0.0  100.000000        0.000000
3 -12008.231689    99.956787 -12008.231689 -628.413818        0.0                0.0    0.000000     -100.000000
4 -11808.231689   200.000000 -11808.231689 -628.413818        0.0                0.0    0.000000        0.000000
5 -11506.731689   301.500000 -11708.231689 -628.413818      101.5              101.5  100.000000      100.000000
6 -10404.731689  1102.000000 -11708.231689 -628.413818     1103.5             1103.5  200.000000      100.000000
7  -8702.231689  1702.500000 -11608.231445 -628.413818     2706.0             2706.0  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:05]  --------------------------------------------------------------------------------
[07/13 21:47:05]  Iteration: 98
[07/13 21:47:06]  Generator returned sat in 0.410571 secs.
[07/13 21:47:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/13 21:47:07]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:07]  Verifer returned sat in 0.135982 secs.
[07/13 21:47:07]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12207.688477     0.087158 -12305.774902 -628.413818        0.0                0.0   98.086426        0.043213
1 -12207.688477    98.043213 -12207.731689 -628.413818        0.0                0.0    0.043213      -99.956787
2 -12007.731689   200.000000 -12107.731689 -628.413818        0.0                0.0  100.000000        0.000000
3 -12007.731689    99.956787 -12007.731689 -628.413818        0.0                0.0    0.000000     -100.000000
4 -11807.731689   200.000000 -11807.731689 -628.413818        0.0                0.0    0.000000        0.000000
5 -11506.731689   301.000000 -11707.731689 -628.413818      101.0              101.0  100.000000      100.000000
6 -10405.231689  1101.500000 -11707.731689 -628.413818     1102.5             1102.5  200.000000      100.000000
7  -8703.231689  1702.000000 -11607.731689 -628.413818     2704.5             2704.5  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:07]  --------------------------------------------------------------------------------
[07/13 21:47:07]  Iteration: 99
[07/13 21:47:09]  Generator returned sat in 0.455504 secs.
[07/13 21:47:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:09]  Improved number of small numbers from 79 to 79 out of a max of 89
[07/13 21:47:09]  Verifer returned sat in 0.329327 secs.
[07/13 21:47:09]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12207.688721     0.087158 -12307.420207 -628.413818     0.000000           0.000000   99.731486        0.043213
1 -12207.688721    98.042969 -12207.731934 -628.413818     0.000000           0.000000    0.043213      -99.956787
2 -12007.731934   200.000000 -12107.731934 -628.413818     0.000000           0.000000  100.000000        0.000000
3 -12007.731934    99.978394 -12007.731934 -628.413818     0.000000           0.000000    0.000000     -100.000000
4 -11807.398600   200.333333 -11807.731934 -628.413818     0.000000           0.000000    0.333333        0.333333
5 -11506.731934   300.666667 -11707.731934 -628.413818   100.999756         100.999756  100.000244      100.000244
6 -10405.565267  1101.166667 -11707.731934 -628.413818  1102.166667        1102.166667  200.000000      100.000000
7  -8703.898600  1701.666667 -11607.731689 -628.413818  2703.833333        2703.833333  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:09]  --------------------------------------------------------------------------------
[07/13 21:47:09]  Iteration: 100
[07/13 21:47:11]  Generator returned sat in 0.664497 secs.
[07/13 21:47:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:11]  Improved gap from 177/8192 to 100
[07/13 21:47:11]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/13 21:47:11]  Verifer returned sat in 0.263557 secs.
[07/13 21:47:11]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12505.114014    0.086914 -12605.157227 -628.414062    0.000000           0.000000  100.043213      100.042969
1 -12505.114014    0.042969 -12505.156982 -628.414062    0.000000           0.000000    0.042969        0.042969
2 -12275.114014  230.042969 -12405.157227 -628.414062    0.000000           0.000000  130.043213      130.042969
3 -12275.114014   58.999756 -12405.156982 -628.414062    0.000000           0.000000  130.042969       30.042969
4 -12275.114014  130.000000 -12282.156982 -628.414062    0.000000           0.000000    7.042969      -69.957031
5 -12105.156982  177.000000 -12105.157227 -628.414062    0.000000           0.000000    0.000244        0.000000
6 -11866.156982  239.000000 -12105.156982 -628.414062   38.999756          38.999756  200.000244      100.000244
7 -11265.656982  600.500000 -12005.156982 -628.414062  439.500000         439.500000  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:12]  --------------------------------------------------------------------------------
[07/13 21:47:12]  Iteration: 101
[07/13 21:47:13]  Generator returned sat in 0.366873 secs.
[07/13 21:47:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:13]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:13]  Verifer returned sat in 0.119015 secs.
[07/13 21:47:13]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12505.114014    0.086914 -12605.157227 -628.414062    0.000000           0.000000  100.043213      100.042969
1 -12505.114014    0.042969 -12505.156982 -628.414062    0.000000           0.000000    0.042969        0.042969
2 -12275.114014  230.042969 -12405.157227 -628.414062    0.000000           0.000000  130.043213      130.042969
3 -12275.114014   58.999756 -12405.156982 -628.414062    0.000000           0.000000  130.042969       30.042969
4 -12275.114014  130.000000 -12282.156982 -628.414062    0.000000           0.000000    7.042969      -69.957031
5 -12105.156982  177.000000 -12105.157227 -628.414062    0.000000           0.000000    0.000244        0.000000
6 -11866.156982  239.000000 -12105.156982 -628.414062   38.999756          38.999756  200.000244      100.000244
7 -10907.156982  959.000000 -12005.156982 -628.414062  798.000000         798.000000  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:13]  --------------------------------------------------------------------------------
[07/13 21:47:13]  Iteration: 102
[07/13 21:47:15]  Generator returned sat in 0.489055 secs.
[07/13 21:47:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:15]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:15]  Verifer returned sat in 0.113768 secs.
[07/13 21:47:15]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12505.114014    0.086914 -12605.157471 -628.414062    0.000000           0.000000  100.043457      100.043213
1 -12505.114014    0.042969 -12505.157227 -628.414062    0.000000           0.000000    0.043213        0.043213
2 -12275.114258  230.042969 -12405.157471 -628.414062    0.000000           0.000000  130.043213      130.042969
3 -12275.114258   58.999756 -12405.157227 -628.414062    0.000000           0.000000  130.042969       30.042969
4 -12275.114258  130.000000 -12282.157227 -628.414062    0.000000           0.000000    7.042969      -69.957031
5 -12105.157227  177.000000 -12105.157471 -628.414062    0.000000           0.000000    0.000244        0.000000
6 -11866.157227  239.000000 -12105.157227 -628.414062   38.999756          38.999756  200.000244      100.000244
7 -11146.157227  720.000000 -12005.157227 -628.414062  659.000000         659.000000  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:16]  --------------------------------------------------------------------------------
[07/13 21:47:16]  Iteration: 103
[07/13 21:47:18]  Generator returned sat in 0.986065 secs.
[07/13 21:47:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:18]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:18]  Verifer returned sat in 0.112767 secs.
[07/13 21:47:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.809814    0.086670 -12669.750977 -628.414307    0.000000           0.000000   64.941162        0.347412
1 -12604.809814    0.042969 -12605.157227 -628.414307    0.000000           0.000000    0.347412      -99.652588
2 -12272.012939  332.839844 -12505.157227 -628.414307    0.304443           0.304443  232.839844      132.839844
3 -12272.012939   58.999756 -12405.157227 -628.414307    0.304443           0.304443  132.839844       32.839844
4 -12272.012939  132.796875 -12272.360352 -628.414307    0.304443           0.304443    0.042969      -67.160156
5 -12105.157471  166.898438 -12105.461914 -628.414307    0.304443           0.304443    0.000000       -0.304688
6 -11904.809814  200.347656 -12105.157227 -628.414307    0.347412           0.347412  200.000000      100.000000
7 -11304.309814  600.500000 -12005.157227 -628.414307  500.847412         500.847412  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:18]  --------------------------------------------------------------------------------
[07/13 21:47:18]  Iteration: 104
[07/13 21:47:20]  Generator returned sat in 0.699597 secs.
[07/13 21:47:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:20]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:20]  Verifer returned sat in 0.103980 secs.
[07/13 21:47:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.809814    0.086426 -12669.750977 -628.414551    0.000000           0.000000   64.941162        0.347412
1 -12604.809814    0.042725 -12605.157227 -628.414551    0.000000           0.000000    0.347412      -99.652588
2 -12272.012939  332.839844 -12505.157227 -628.414551    0.304443           0.304443  232.839844      132.839844
3 -12272.012939   58.999756 -12405.157227 -628.414551    0.304443           0.304443  132.839844       32.839844
4 -12272.012939  132.796875 -12272.360352 -628.414551    0.304443           0.304443    0.042969      -67.160156
5 -12105.157471  166.898438 -12105.461914 -628.414551    0.304443           0.304443    0.000000       -0.304688
6 -11904.809814  200.347656 -12105.157227 -628.414551    0.347412           0.347412  200.000000      100.000000
7 -11204.135986  700.673828 -12005.157227 -628.414551  501.021240         501.021240  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:21]  --------------------------------------------------------------------------------
[07/13 21:47:21]  Iteration: 105
[07/13 21:47:23]  Generator returned sat in 0.889608 secs.
[07/13 21:47:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:23]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:23]  Verifer returned sat in 0.105349 secs.
[07/13 21:47:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.810059    0.086426 -12669.750977 -628.414551    0.000000           0.000000   64.940918        0.347168
1 -12604.810059    0.042480 -12605.157227 -628.414551    0.000000           0.000000    0.347168      -99.652832
2 -12272.013184  332.839844 -12505.157227 -628.414551    0.304199           0.304199  232.839844      132.839844
3 -12272.013184   58.999512 -12405.157227 -628.414551    0.304199           0.304199  132.839844       32.839844
4 -12272.013184  132.796875 -12272.360352 -628.414551    0.304199           0.304199    0.042969      -67.160156
5 -12105.157715  166.898438 -12105.461914 -628.414551    0.304199           0.304199    0.000000       -0.304688
6 -11904.810059  200.347656 -12105.157227 -628.414551    0.347168           0.347168  200.000000      100.000000
7 -11003.788574  901.021484 -12005.157227 -628.414551  701.368652         701.368652  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:23]  --------------------------------------------------------------------------------
[07/13 21:47:23]  Iteration: 106
[07/13 21:47:27]  Generator returned sat in 2.461799 secs.
[07/13 21:47:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:27]  Improved number of small numbers from 72 to 89 out of a max of 89
[07/13 21:47:27]  Verifer returned sat in 0.174161 secs.
[07/13 21:47:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.810059    0.085938 -12669.750977 -628.414551    0.000000           0.000000   64.940918        0.347168
1 -12604.810059    0.042236 -12605.135254 -628.414551    0.000000           0.000000    0.325195      -99.652832
2 -12204.853271  399.978027 -12505.157227 -628.414551    0.303955           0.303955  300.000000      200.000000
3 -12204.853271  198.500000 -12405.157227 -628.414551    0.303955           0.303955  200.000000      100.000000
4 -12204.853271  199.000000 -12304.635986 -628.414551    0.303955           0.303955   99.478760        0.000000
5 -12104.832031  199.500000 -12105.157227 -628.414551    0.303955           0.303955    0.021240        0.021240
6 -11904.832031  200.000000 -12104.885498 -628.414551    0.325195           0.325195  199.728271      100.000000
7 -11003.788574  901.043457 -12005.157227 -628.414551  701.368652         701.368652  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:27]  --------------------------------------------------------------------------------
[07/13 21:47:27]  Iteration: 107
[07/13 21:47:29]  Generator returned sat in 0.462557 secs.
[07/13 21:47:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:29]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:29]  Verifer returned sat in 0.121321 secs.
[07/13 21:47:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.810059    0.085938 -12669.750977 -628.414551    0.000000           0.000000   64.940918        0.347168
1 -12604.810059    0.042236 -12605.135254 -628.414551    0.000000           0.000000    0.325195      -99.652832
2 -12204.853271  399.978027 -12505.157227 -628.414551    0.303955           0.303955  300.000000      200.000000
3 -12204.853271  198.500000 -12405.157227 -628.414551    0.303955           0.303955  200.000000      100.000000
4 -12204.853271  199.000000 -12304.635986 -628.414551    0.303955           0.303955   99.478760        0.000000
5 -12104.832031  199.500000 -12105.157227 -628.414551    0.303955           0.303955    0.021240        0.021240
6 -11904.832031  200.000000 -12104.885498 -628.414551    0.325195           0.325195  199.728271      100.000000
7 -11002.788574  902.043457 -12005.157227 -628.414551  702.368652         702.368652  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:29]  --------------------------------------------------------------------------------
[07/13 21:47:29]  Iteration: 108
[07/13 21:47:32]  Generator returned sat in 0.997438 secs.
[07/13 21:47:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:32]  Improved gap from 204755/2048 to 100
[07/13 21:47:32]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:47:32]  Verifer returned sat in 0.120317 secs.
[07/13 21:47:32]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.810303    0.085938 -12669.750977 -628.414551    0.000000           0.000000   64.940674        0.346924
1 -12604.810303    0.041992 -12605.135254 -628.414551    0.000000           0.000000    0.324951      -99.653076
2 -12204.853271  399.978027 -12505.157227 -628.414551    0.303955           0.303955  300.000000      200.000000
3 -12204.853271  198.500000 -12405.157227 -628.414551    0.303955           0.303955  200.000000      100.000000
4 -12204.853271  199.000000 -12304.635986 -628.414551    0.303955           0.303955   99.478760        0.000000
5 -12104.832031  199.500000 -12105.157227 -628.414551    0.303955           0.303955    0.021240        0.021240
6 -11904.832031  200.000000 -12104.885498 -628.414551    0.325195           0.325195  199.728271      100.000000
7 -11604.332031  300.500000 -12005.157227 -628.414551  200.053467         200.053467  200.771729      100.771729
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:32]  --------------------------------------------------------------------------------
[07/13 21:47:32]  Iteration: 109
[07/13 21:47:34]  Generator returned sat in 0.555037 secs.
[07/13 21:47:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:34]  Improved gap from 43/2048 to 0
[07/13 21:47:34]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:47:34]  Verifer returned sat in 0.182780 secs.
[07/13 21:47:34]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12604.810303    0.085938 -12669.751221 -628.414551   0.000000           0.000000   64.940918        0.347168
1 -12604.810303    0.041992 -12605.135254 -628.414551   0.000000           0.000000    0.324951      -99.652832
2 -12205.157471  399.977783 -12505.157471 -628.414551   0.000000           0.000000  300.000000      200.000000
3 -12205.157471  200.479004 -12305.157471 -628.414551   0.000000           0.000000  100.000000      100.000000
4 -12104.157471  200.979004 -12205.157471 -628.414551   0.020996           0.020996  100.979004      100.979004
5 -12104.157471    0.500000 -12105.178467 -628.414551   0.020996           0.020996    1.000000        0.979004
6 -12104.157471    1.000000 -12105.157471 -529.393555   0.020996           0.020996    0.979004        0.000000
7 -12103.636475    1.500000 -12104.178467 -529.393555   0.020996           0.020996    0.520996      -99.479004
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:47:34]  --------------------------------------------------------------------------------
[07/13 21:47:34]  Iteration: 110
[07/13 21:47:37]  Generator returned sat in 0.852991 secs.
[07/13 21:47:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:37]  Improved gap from 0 to 100
[07/13 21:47:37]  Improved number of small numbers from 57 to 90 out of a max of 90
[07/13 21:47:37]  Verifer returned sat in 0.231210 secs.
[07/13 21:47:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12505.236084    0.085449 -12705.236084 -628.414795     0.000000           0.000000  200.000000      200.000000
1 -12505.236084    0.042480 -12605.236084 -628.414795     0.000000           0.000000  100.000000      100.000000
2 -12405.236084  200.000000 -12505.236084 -628.414795     0.000000           0.000000  100.000000      100.000000
3 -12205.193359  200.042725 -12442.236084 -628.414795   100.042725         100.042725  137.000000      100.000000
4 -11678.693359  526.500000 -12405.236084 -628.414795   426.542725         426.542725  300.000000      200.000000
5 -11278.193359  400.500000 -12288.236084 -628.414795   727.042725         727.042725  283.000000      200.000000
6 -10843.693359  434.500000 -12179.236084 -628.414795  1161.542480        1161.542480  174.000244      100.000244
7 -10317.193359  526.500000 -12105.235840 -628.414795  1488.042725        1488.042725  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:37]  --------------------------------------------------------------------------------
[07/13 21:47:37]  Iteration: 111
[07/13 21:47:39]  Generator returned sat in 0.433236 secs.
[07/13 21:47:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:39]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:39]  Verifer returned sat in 0.121950 secs.
[07/13 21:47:39]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12505.236084     0.085449 -12705.236084 -628.414795     0.000000           0.000000  200.000000      200.000000
1 -12505.236084     0.042480 -12605.236084 -628.414795     0.000000           0.000000  100.000000      100.000000
2 -12405.193359   200.042725 -12505.236084 -628.414795     0.000000           0.000000  100.042725      100.042725
3 -12205.193359   200.000000 -12492.236084 -628.414795   100.042725         100.042725  187.000000      100.000000
4 -11678.693359   526.500000 -12405.236084 -628.414795   426.542725         426.542725  300.000000      200.000000
5 -11014.943359   663.750000 -12205.236084 -628.414795   990.292725         990.292725  200.000000      200.000000
6 -10082.568359   932.375000 -12205.236084 -628.414795  1922.667725        1922.667725  200.000000      100.000000
7  -9041.880859  1040.687500 -12105.235840 -628.414795  2763.355225        2763.355225  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:39]  --------------------------------------------------------------------------------
[07/13 21:47:39]  Iteration: 112
[07/13 21:47:41]  Generator returned sat in 0.444895 secs.
[07/13 21:47:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:41]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:41]  Verifer returned sat in 0.111514 secs.
[07/13 21:47:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12505.236328     0.085449 -12705.236328 -628.414795        0.0                0.0  200.000000           200.0
1 -12505.236328     0.042480 -12691.236328 -628.414795        0.0                0.0  186.000000           100.0
2 -12405.236328   286.000000 -12516.236328 -628.414795        0.0                0.0  111.000000           100.0
3 -12194.236328   211.000000 -12505.236328 -628.414795      111.0              111.0  200.000000           100.0
4 -11582.736328   611.500000 -12405.236328 -628.414795      622.5              622.5  200.000000           100.0
5 -10398.736328  1184.000000 -12305.236328 -628.414795     1606.5             1606.5  300.000000           200.0
6  -8792.236328  1606.500000 -12205.236328 -628.414795     3113.0             3113.0  300.000000           200.0
7  -6585.236328  2207.000000 -12105.236084 -628.414795     5320.0             5320.0  199.999756           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:41]  --------------------------------------------------------------------------------
[07/13 21:47:41]  Iteration: 113
[07/13 21:47:44]  Generator returned sat in 0.872146 secs.
[07/13 21:47:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:44]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:47:44]  Verifer returned sat in 0.143991 secs.
[07/13 21:47:44]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -12816.529053     0.085205 -13016.529053 -628.414795     0.00000            0.00000  200.00000       200.00000
1 -12816.529053     0.042480 -12949.529053 -628.414795     0.00000            0.00000  133.00000       100.00000
2 -12816.486572   133.042480 -12816.529053 -628.414795     0.00000            0.00000    0.04248         0.04248
3 -12616.486572   200.000000 -12816.529053 -628.414795     0.04248            0.04248  200.00000       100.00000
4 -11915.986572   700.500000 -12716.529053 -628.414795   600.54248          600.54248  200.00000       100.00000
5 -10398.736572  1517.250000 -12545.529053 -628.414795  1917.79248         1917.79248  229.00000       200.00000
6  -7580.361572  2818.375000 -12516.529053 -628.414795  4736.16748         4736.16748  200.00000       100.00000
7  -2752.299072  4828.062500 -12316.529053 -628.414795  9364.22998         9364.22998  200.00000       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:44]  --------------------------------------------------------------------------------
[07/13 21:47:44]  Iteration: 114
[07/13 21:47:46]  Generator returned sat in 0.916323 secs.
[07/13 21:47:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:47]  Improved number of small numbers from 78 to 78 out of a max of 89
[07/13 21:47:47]  Verifer returned sat in 0.261215 secs.
[07/13 21:47:47]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12816.529297     0.085205 -13083.217163 -628.414795     0.000000           0.000000  266.687866      200.000000
1 -12816.529297     0.042236 -13016.529297 -628.414795     0.000000           0.000000  200.000000      100.000000
2 -12816.486572   200.042725 -12816.529297 -628.414795     0.000000           0.000000    0.042725        0.042725
3 -12616.518616   200.000000 -12816.529297 -628.414795     0.010681           0.010681  200.000000      100.000000
4 -11915.986816   700.531799 -12705.894430 -628.414795   600.542236         600.542236  189.365377      100.000244
5 -10398.736816  1517.250000 -12545.529297 -628.414795  1917.792480        1917.792480  229.000000      200.000000
6  -7715.861816  2682.875000 -12516.529297 -628.414795  4600.667480        4600.667480  200.000000      100.000000
7  -3241.049316  4474.812500 -12316.529297 -628.414795  8975.479980        8975.479980  100.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:47]  --------------------------------------------------------------------------------
[07/13 21:47:47]  Iteration: 115
[07/13 21:47:49]  Generator returned sat in 0.568474 secs.
[07/13 21:47:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:49]  Improved gap from 0 to 100
[07/13 21:47:49]  Improved number of small numbers from 68 to 90 out of a max of 90
[07/13 21:47:49]  Verifer returned sat in 0.174511 secs.
[07/13 21:47:49]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13016.529541     0.084717 -13216.529541 -628.415039     0.000000           0.000000  200.000000      200.000000
1 -13016.529541     0.041992 -13193.751709 -628.415039     0.000000           0.000000  177.222168      100.000000
2 -13016.529297   177.222412 -13116.529297 -628.415039     0.000000           0.000000  100.000000        0.000244
3 -12916.529297   200.000000 -13016.529541 -628.415039     0.000000           0.000000  100.000244        0.000244
4 -12716.008301   300.500000 -12916.529541 -628.415039     0.021240           0.021240  200.500000      100.500000
5 -12264.758301   451.250000 -12816.529297 -628.415039   251.771240         251.771240  299.999756      200.000000
6 -11587.383301   677.375000 -12716.529541 -628.415039   929.146240         929.146240  200.000000      100.000000
7 -10570.820801  1016.562500 -12616.529541 -628.415039  1845.708496        1845.708496  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:49]  --------------------------------------------------------------------------------
[07/13 21:47:49]  Iteration: 116
[07/13 21:47:51]  Generator returned sat in 0.759528 secs.
[07/13 21:47:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:52]  Improved number of small numbers from 61 to 70 out of a max of 89
[07/13 21:47:52]  Verifer returned sat in 0.430522 secs.
[07/13 21:47:52]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13016.529785     0.084473 -13216.529541 -628.415283     0.000000           0.000000  199.999756      199.999756
1 -13016.529785     0.041992 -13193.751709 -628.415283     0.000000           0.000000  177.221924       99.999756
2 -13016.529297   177.222412 -13016.529785 -628.415283     0.000000           0.000000    0.000488        0.000244
3 -12916.529541   100.000244 -13016.529541 -628.415283     0.000000           0.000000  100.000000        0.000000
4 -12666.029358   350.500122 -12916.529541 -628.415283     0.000061           0.000061  250.500122      150.500122
5 -12139.779175   526.250183 -12816.529541 -628.415283   376.750488         376.750488  299.999878      199.999878
6 -11349.903900   789.875275 -12716.529541 -628.415283  1066.625732        1066.625732  299.999908      199.999908
7 -10164.590988  1185.312912 -12616.529541 -628.415283  2151.938721        2151.938721  299.999832      199.999832
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:47:52]  --------------------------------------------------------------------------------
[07/13 21:47:52]  Iteration: 117
[07/13 21:47:54]  Generator returned sat in 0.872308 secs.
[07/13 21:47:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:47:55]  Improved number of small numbers from 41 to 81 out of a max of 89
[07/13 21:47:55]  Verifer returned sat in 0.612947 secs.
[07/13 21:47:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t   wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10382.334717    0.084229 -10551.167725 -3293.7771    0.000000           0.000000  168.833008      168.833008
1 -10382.334717    0.041992 -10551.167725 -3293.7771    0.000000           0.000000  168.833008       68.833008
2 -10382.334473  168.833252 -10382.334531 -3293.7771    0.000000           0.000000    0.000058      -31.166748
3  -9983.334473  399.000000 -10251.167725 -3293.7771  167.833252         167.833252  100.000000      100.000000
4  -9883.292236  200.000000 -10251.167725 -3293.7771  167.875488         167.875488  200.000000      100.000000
5  -9883.292236  100.500000 -10150.167864 -3293.7771  167.875488         167.875488   99.000139        0.000000
6  -9484.334531  399.000000 -10051.167725 -3293.7771  266.833333         266.833333  299.999861      199.999861
7  -9484.334531  200.000000  -9951.167725 -3293.7771  266.833333         266.833333  199.999861       99.999861
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:47:55]  --------------------------------------------------------------------------------
[07/13 21:47:55]  Iteration: 118
[07/13 21:48:01]  Generator returned sat in 4.664848 secs.
[07/13 21:48:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:02]  Improved gap from 819071/8192 to 100
[07/13 21:48:02]  Improved number of small numbers from 49 to 90 out of a max of 90
[07/13 21:48:02]  Verifer returned sat in 0.310392 secs.
[07/13 21:48:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10653.833740    0.084229 -10653.875732 -3343.824219    0.000000           0.000000    0.041992        0.041992
1 -10653.833740    0.020752 -10653.854736 -3343.824219    0.000000           0.000000    0.020996      -99.958008
2 -10453.875732  199.979004 -10553.875488 -3343.824219    0.000000           0.000000   99.999756        0.000000
3 -10453.875732    0.020996 -10453.875732 -3343.824219    0.000000           0.000000    0.000000     -100.000000
4 -10053.844238  400.031494 -10253.875732 -3343.824219    0.031494           0.031494  200.000000      200.000000
5  -9851.854736  201.989502 -10253.875488 -3343.824219  202.020752         202.020752  200.000000      100.000244
6  -9851.854736  152.000000 -10153.875732 -3343.824219  202.020752         202.020752  100.000244        0.000244
7  -9023.854736  828.000000 -10053.875488 -3343.824219  730.020996         730.020996  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:02]  --------------------------------------------------------------------------------
[07/13 21:48:02]  Iteration: 119
[07/13 21:48:04]  Generator returned sat in 0.869265 secs.
[07/13 21:48:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:05]  Improved number of small numbers from 87 to 89 out of a max of 89
[07/13 21:48:05]  Verifer returned sat in 0.142945 secs.
[07/13 21:48:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10653.833984    0.084229 -10653.875732 -3343.824219    0.000000           0.000000    0.041748        0.041748
1 -10653.833984    0.020508 -10653.875732 -3343.824219    0.000000           0.000000    0.041748      -99.958252
2 -10453.875732  200.000000 -10553.875488 -3343.824219    0.000000           0.000000   99.999756        0.000000
3 -10453.875732    0.020996 -10453.875732 -3343.824219    0.000000           0.000000    0.000000     -100.000000
4 -10053.844238  400.031494 -10253.875732 -3343.824219    0.031494           0.031494  200.000000      200.000000
5  -9853.844238  200.000000 -10253.875488 -3343.824219  200.031494         200.031494  199.999756      100.000000
6  -9853.844238  150.000000 -10151.381104 -3343.824219  200.031494         200.031494   97.505371        0.000000
7  -9023.854980  829.989258 -10053.875732 -3343.824219  730.020996         730.020996  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:05]  --------------------------------------------------------------------------------
[07/13 21:48:05]  Iteration: 120
[07/13 21:48:07]  Generator returned sat in 0.924825 secs.
[07/13 21:48:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:08]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:08]  Verifer returned sat in 0.131801 secs.
[07/13 21:48:08]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10653.833984    0.084229 -10653.875732 -3343.824219    0.000000           0.000000    0.041748        0.041748
1 -10653.833984    0.020508 -10653.875732 -3343.824219    0.000000           0.000000    0.041748      -99.958252
2 -10453.875732  200.000000 -10553.875488 -3343.824219    0.000000           0.000000   99.999756        0.000000
3 -10453.875732    0.020996 -10453.875732 -3343.824219    0.000000           0.000000    0.000000     -100.000000
4 -10053.844238  400.031494 -10253.875732 -3343.824219    0.031494           0.031494  200.000000      200.000000
5  -9852.844238  201.000000 -10253.875488 -3343.824219  200.031494         200.031494  200.999756      101.000000
6  -9852.844238  151.000000 -10151.381104 -3343.824219  200.031494         200.031494   98.505371        1.000000
7  -9021.354980  831.489258 -10053.875732 -3343.824219  732.520752         732.520752  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:08]  --------------------------------------------------------------------------------
[07/13 21:48:08]  Iteration: 121
[07/13 21:48:10]  Generator returned sat in 0.635257 secs.
[07/13 21:48:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:10]  Improved gap from 99 to 100
[07/13 21:48:10]  Improved number of small numbers from 75 to 90 out of a max of 90
[07/13 21:48:10]  Verifer returned sat in 0.145498 secs.
[07/13 21:48:10]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10652.870361    0.083740 -10653.875732 -3343.824707    0.00000            0.00000    1.005371        1.005371
1 -10652.870361    0.005208 -10653.875732 -3343.824707    0.00000            0.00000    1.005371      -98.994629
2 -10453.875732  200.000000 -10553.875732 -3343.824707    0.00000            0.00000  100.000000        0.000000
3 -10453.875732    0.020833 -10453.875732 -3343.824707    0.00000            0.00000    0.000000     -100.000000
4 -10053.844482  400.031250 -10253.875732 -3343.824707    0.03125            0.03125  200.000000      200.000000
5  -9852.344482  201.500000 -10253.875732 -3343.824707  200.03125          200.03125  201.500000      101.500000
6  -9852.344482  151.500000 -10151.381348 -3343.824707  200.03125          200.03125   99.005615        1.500000
7  -9020.105713  832.238770 -10053.875732 -3343.824707  733.77002          733.77002  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:10]  --------------------------------------------------------------------------------
[07/13 21:48:10]  Iteration: 122
[07/13 21:48:13]  Generator returned sat in 0.874835 secs.
[07/13 21:48:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:13]  Improved gap from 3014143/49152 to 100
[07/13 21:48:13]  Improved number of small numbers from 35 to 59 out of a max of 90
[07/13 21:48:13]  Verifer returned sat in 0.716491 secs.
[07/13 21:48:13]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10492.552979     0.083496 -10692.552836 -3343.824707     0.000000           0.000000  199.999858      199.999858
1 -10492.552979     0.020996 -10592.552836 -3343.824707     0.000000           0.000000   99.999858       99.999858
2 -10492.552836   100.000000 -10492.594482 -3343.824707     0.000000           0.000000    0.041646        0.000000
3 -10492.552836     0.020874 -10492.552836 -3343.824707     0.000000           0.000000    0.000000     -100.000000
4 -10092.521525   400.031311 -10292.552836 -3343.824707   100.031250         100.031250  100.000061      100.000061
5  -9741.005870   351.515656 -10292.552734 -3343.824707   251.547119         251.547119  299.999746      199.999847
6  -9741.005870   277.278702 -10151.381348 -3343.824707   251.547119         251.547119  158.828359       99.999847
7  -8642.744840  1098.261030 -10092.552734 -3343.824707  1149.808105        1149.808105  299.999789      199.999891
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:14]  --------------------------------------------------------------------------------
[07/13 21:48:14]  Iteration: 123
[07/13 21:48:16]  Generator returned sat in 1.291124 secs.
[07/13 21:48:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:17]  Improved gap from 3/4 to 100
[07/13 21:48:17]  Improved number of small numbers from 32 to 90 out of a max of 90
[07/13 21:48:17]  Verifer returned sat in 0.380871 secs.
[07/13 21:48:17]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10470.818115    0.083252 -10470.818115 -3343.824707    0.000000           0.000000    0.000000        0.000000
1 -10370.818115  100.000000 -10470.818115 -3343.824707    0.000000           0.000000  100.000000        0.000000
2 -10370.818115   99.999756 -10370.818115 -3343.824707    0.000000           0.000000    0.000000     -100.000000
3 -10014.310791  356.507324 -10231.408447 -3343.824707    0.041748           0.041748  217.055908      156.465576
4  -9714.394043  299.958496 -10170.818115 -3343.824707  217.055908         217.055908  239.368164      139.368164
5  -9651.741455  301.979248 -10006.144531 -3343.824707  217.097412         217.097412  137.305664      101.979248
6  -9316.415039  335.326416  -9970.817871 -3343.824707  354.403076         354.403076  299.999756      200.000000
7  -9316.415039  299.958496  -9870.818115 -3343.824707  354.403076         354.403076  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:17]  --------------------------------------------------------------------------------
[07/13 21:48:17]  Iteration: 124
[07/13 21:48:20]  Generator returned sat in 0.886479 secs.
[07/13 21:48:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:20]  Improved gap from 0 to 100
[07/13 21:48:20]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:48:20]  Verifer returned sat in 0.167125 secs.
[07/13 21:48:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10470.818115    0.083252 -10470.818115 -3343.824707    0.000000           0.000000    0.000000        0.000000
1 -10370.818115  100.000000 -10370.818115 -3343.824707    0.000000           0.000000    0.000000        0.000000
2 -10370.797363    0.020752 -10370.818115 -3343.824707    0.000000           0.000000    0.020752      -99.979248
3  -9970.797363  400.000000 -10268.826416 -3343.824707    0.020752           0.020752  298.008301      200.000000
4  -9970.797363  102.995850 -10170.818115 -3343.824707    0.020752           0.020752  200.000000      100.000000
5  -9770.776611  400.000000  -9970.818115 -3343.824707    0.041504           0.041504  200.000000      200.000000
6  -9568.797363  202.000000  -9936.834717 -3343.824707  200.020752         200.020752  168.016602      102.000000
7  -9568.797363  167.995850  -9870.818115 -3343.824707  200.020752         200.020752  102.000000        2.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:48:20]  --------------------------------------------------------------------------------
[07/13 21:48:20]  Iteration: 125
[07/13 21:48:22]  Generator returned sat in 0.775534 secs.
[07/13 21:48:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:22]  Improved gap from 196/9 to 100
[07/13 21:48:23]  Improved number of small numbers from 44 to 90 out of a max of 90
[07/13 21:48:23]  Verifer returned sat in 0.269666 secs.
[07/13 21:48:23]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.632080     0.082764 -11466.673096 -3443.89209     0.000000           0.000000    0.041016        0.041016
1 -11466.631836     0.041260 -11466.673096 -3443.89209     0.000000           0.000000    0.041260      -99.958740
2 -11166.631836   300.000000 -11266.673096 -3443.89209     0.041260           0.041260  100.000000      100.000000
3 -10966.673340   200.000000 -11166.673096 -3443.89209    99.999756          99.999756  100.000000      100.000000
4 -10514.673340   452.000000 -11066.673096 -3443.89209   352.000000         352.000000  199.999756      199.999756
5  -9634.673340   880.000000 -11066.673096 -3443.89209  1131.999756        1131.999756  300.000000      200.000000
6  -8212.673340  1422.000000 -10954.673096 -3443.89209  2553.999756        2553.999756  188.000000      100.000000
7  -5971.673340  2241.000000 -10866.673096 -3443.89209  4694.999756        4694.999756  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:23]  --------------------------------------------------------------------------------
[07/13 21:48:23]  Iteration: 126
[07/13 21:48:26]  Generator returned sat in 1.216924 secs.
[07/13 21:48:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:26]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/13 21:48:26]  Verifer returned sat in 0.177821 secs.
[07/13 21:48:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.632324    0.082520 -11562.673340 -3443.89209    0.000000           0.000000   96.041016        0.041016
1 -11466.632080   96.041260 -11466.673340 -3443.89209    0.000000           0.000000    0.041260      -99.958740
2 -11066.632080  400.000000 -11366.673340 -3443.89209    0.041260           0.041260  300.000000      200.000000
3 -11066.549316  300.000000 -11166.673340 -3443.89209    0.124023           0.124023  100.000000      100.000000
4 -10866.549316  200.000000 -11068.006348 -3443.89209  100.124023         100.124023  101.333008      100.000000
5 -10665.215820  201.333496 -10966.673340 -3443.89209  201.457520         201.457520  100.000000      100.000000
6 -10563.215820  202.000000 -10966.673340 -3443.89209  201.457520         201.457520  202.000000      102.000000
7  -9759.215820  804.000000 -10866.673340 -3443.89209  907.457275         907.457275  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:26]  --------------------------------------------------------------------------------
[07/13 21:48:26]  Iteration: 127
[07/13 21:48:28]  Generator returned sat in 0.700069 secs.
[07/13 21:48:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:28]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:28]  Verifer returned sat in 0.114115 secs.
[07/13 21:48:28]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.632324    0.082520 -11562.673340 -3443.89209    0.000000           0.000000   96.041016        0.041016
1 -11466.632080   96.041260 -11466.673340 -3443.89209    0.000000           0.000000    0.041260      -99.958740
2 -11066.632080  400.000000 -11366.673340 -3443.89209    0.041260           0.041260  300.000000      200.000000
3 -11066.549316  300.000000 -11166.673340 -3443.89209    0.124023           0.124023  100.000000      100.000000
4 -10866.549316  200.000000 -11068.006348 -3443.89209  100.124023         100.124023  101.333008      100.000000
5 -10665.215820  201.333496 -10966.673340 -3443.89209  201.457520         201.457520  100.000000      100.000000
6 -10563.215820  202.000000 -10966.673340 -3443.89209  201.457520         201.457520  202.000000      102.000000
7 -10062.215820  501.000000 -10866.673340 -3443.89209  604.457520         604.457520  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:29]  --------------------------------------------------------------------------------
[07/13 21:48:29]  Iteration: 128
[07/13 21:48:31]  Generator returned sat in 1.068359 secs.
[07/13 21:48:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:31]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:31]  Verifer returned sat in 0.123206 secs.
[07/13 21:48:32]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.632568    0.082520 -11562.673340 -3443.892334    0.000000           0.000000   96.040771        0.040771
1 -11466.632080   96.041260 -11466.673340 -3443.892334    0.000000           0.000000    0.041260      -99.958740
2 -11066.632324  399.999756 -11366.673340 -3443.892334    0.041260           0.041260  299.999756      199.999756
3 -11066.549561  300.000000 -11166.673340 -3443.892334    0.123779           0.123779  100.000000      100.000000
4 -10866.549561  200.000000 -11068.006348 -3443.892334  100.123779         100.123779  101.333008      100.000000
5 -10665.216064  201.333496 -10966.673340 -3443.892334  201.457275         201.457275  100.000000      100.000000
6 -10563.216064  202.000000 -10966.673340 -3443.892334  201.457275         201.457275  202.000000      102.000000
7 -10159.216064  404.000000 -10866.673340 -3443.892334  507.457275         507.457275  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:32]  --------------------------------------------------------------------------------
[07/13 21:48:32]  Iteration: 129
[07/13 21:48:34]  Generator returned sat in 0.634165 secs.
[07/13 21:48:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:34]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:34]  Verifer returned sat in 0.121215 secs.
[07/13 21:48:34]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.632812    0.082275 -11562.673340 -3443.892578    0.000000           0.000000   96.040527        0.040527
1 -11466.632324   96.041016 -11466.672852 -3443.892578    0.000000           0.000000    0.040527      -99.958984
2 -11066.632568  399.999756 -11366.673340 -3443.892578    0.041016           0.041016  299.999756      199.999756
3 -11066.549561  300.000000 -11166.673340 -3443.892578    0.123779           0.123779  100.000000      100.000000
4 -10866.549561  200.000000 -11068.006348 -3443.892578  100.123779         100.123779  101.333008      100.000000
5 -10665.216309  201.333252 -10966.673340 -3443.892578  201.457031         201.457031  100.000000      100.000000
6 -10563.216309  202.000000 -10868.673340 -3443.892578  201.457031         201.457031  104.000000      102.000000
7 -10361.216309  202.000000 -10866.673340 -3443.892578  305.457031         305.457031  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:34]  --------------------------------------------------------------------------------
[07/13 21:48:34]  Iteration: 130
[07/13 21:48:37]  Generator returned sat in 1.437449 secs.
[07/13 21:48:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:38]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:38]  Verifer returned sat in 0.143515 secs.
[07/13 21:48:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.632812    0.082031 -11562.673340 -3443.892822    0.000000           0.000000   96.040527        0.040527
1 -11466.632568   96.040771 -11466.672852 -3443.892822    0.000000           0.000000    0.040283      -99.959229
2 -11066.632812  399.999756 -11366.673340 -3443.892822    0.041016           0.041016  299.999512      199.999512
3 -11066.549561  300.000000 -11166.673340 -3443.892822    0.123779           0.123779  100.000000      100.000000
4 -10866.549561  200.000000 -11068.006348 -3443.892822  100.123779         100.123779  101.333008      100.000000
5 -10665.216309  201.333252 -10966.673340 -3443.892822  201.456787         201.456787  100.000244      100.000244
6 -10563.216553  202.000000 -10868.673340 -3443.892822  201.456787         201.456787  104.000000      102.000000
7  -9712.216553  851.000000 -10866.673340 -3443.892822  954.456787         954.456787  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:38]  --------------------------------------------------------------------------------
[07/13 21:48:38]  Iteration: 131
[07/13 21:48:40]  Generator returned sat in 0.646370 secs.
[07/13 21:48:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:40]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:40]  Verifer returned sat in 0.136310 secs.
[07/13 21:48:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11466.633057    0.082031 -11562.673340 -3443.893066    0.000000           0.000000   96.040283        0.040283
1 -11466.632568   96.040771 -11466.673096 -3443.893066    0.000000           0.000000    0.040527      -99.959229
2 -11066.633057  399.999512 -11366.673340 -3443.893066    0.040771           0.040771  299.999512      199.999512
3 -11066.549561  300.000000 -11166.673340 -3443.893066    0.123779           0.123779  100.000000      100.000000
4 -10866.549561  200.000000 -11068.006592 -3443.893066  100.123779         100.123779  101.333252      100.000000
5 -10665.216553  201.333252 -10966.673340 -3443.893066  201.456787         201.456787  100.000000      100.000000
6 -10563.216553  202.000000 -10868.673340 -3443.893066  201.456787         201.456787  104.000000      102.000000
7 -10015.216553  548.000000 -10866.673340 -3443.893066  651.456787         651.456787  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:40]  --------------------------------------------------------------------------------
[07/13 21:48:40]  Iteration: 132
[07/13 21:48:43]  Generator returned sat in 0.947130 secs.
[07/13 21:48:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:43]  Improved gap from 0 to 100
[07/13 21:48:43]  Improved number of small numbers from 38 to 90 out of a max of 90
[07/13 21:48:43]  Verifer returned sat in 0.275337 secs.
[07/13 21:48:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10864.195801    0.081787 -10864.216309 -3443.893311   0.000000           0.000000    0.020508        0.000000
1 -10864.195801    0.020264 -10864.195801 -3443.893311   0.000000           0.000000    0.000000     -100.000000
2 -10764.175293  100.020508 -10764.195801 -3443.893311   0.000000           0.000000    0.020508      -99.979492
3 -10464.154785  300.041016 -10664.195801 -3443.893311   0.000000           0.000000  200.041016      100.041016
4 -10464.154785  100.010254 -10464.195801 -3443.893311   0.000000           0.000000    0.041016        0.041016
5 -10264.175537  200.000000 -10432.182129 -3443.893311   0.020264           0.020264  167.986328      100.000000
6 -10264.155029  168.006836 -10264.195801 -3443.893311   0.020264           0.020264    0.020508        0.020508
7 -10064.155029  200.000000 -10264.195801 -3443.893311   0.040771           0.040771  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:48:44]  --------------------------------------------------------------------------------
[07/13 21:48:44]  Iteration: 133
[07/13 21:48:46]  Generator returned sat in 0.984882 secs.
[07/13 21:48:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:46]  Improved number of small numbers from 75 to 89 out of a max of 89
[07/13 21:48:46]  Verifer returned sat in 0.193672 secs.
[07/13 21:48:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -10764.195801    0.081787 -10864.196045 -3443.893311    0.000000           0.000000  100.000244      100.000244
1 -10764.195801    0.005127 -10764.196045 -3443.893311    0.000000           0.000000    0.000244        0.000244
2 -10464.196045  300.000000 -10764.196045 -3443.893311    0.000000           0.000000  300.000000      200.000000
3 -10464.180664  300.000000 -10664.196045 -3443.893311    0.015381           0.015381  200.000000      100.000000
4 -10464.180664  102.000000 -10532.862549 -3443.893311    0.015381           0.015381   68.666504        0.000000
5 -10264.175537  268.666748 -10432.182373 -3443.893311    0.020264           0.020264  167.986572      100.000244
6 -10264.155273  168.006836 -10264.196045 -3443.893311    0.020264           0.020264    0.020508        0.020508
7  -9812.145020  452.010254 -10264.196045 -3443.893311  252.050781         252.050781  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:48:47]  --------------------------------------------------------------------------------
[07/13 21:48:47]  Iteration: 134
[07/13 21:48:50]  Generator returned sat in 1.717895 secs.
[07/13 21:48:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:50]  Improved gap from 0 to 100
[07/13 21:48:50]  Improved number of small numbers from 32 to 90 out of a max of 90
[07/13 21:48:50]  Verifer returned sat in 0.348381 secs.
[07/13 21:48:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11261.755615    0.081543 -11361.776367 -3443.893311    0.000000           0.000000  100.020752      100.020752
1 -11261.755615    0.020508 -11261.776367 -3443.893311    0.000000           0.000000    0.020752        0.020752
2 -11261.735352    0.041016 -11261.776123 -3443.893311    0.000000           0.000000    0.040771      -99.958984
3 -10961.714844  300.020508 -11158.776367 -3443.893311    0.061523           0.061523  197.000000      100.000000
4 -10961.714844  103.500000 -11061.776367 -3443.893311    0.061523           0.061523  100.000000        0.000000
5 -10554.714844  407.000000 -10863.095947 -3443.893311  207.061279         207.061279  101.319824      100.000244
6 -10353.374756  201.340088 -10762.095703 -3443.893311  308.401367         308.401367  100.319580      100.000244
7 -10153.034424  200.340332 -10761.776123 -3443.893311  408.741455         408.741455  200.000244      100.000488
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:50]  --------------------------------------------------------------------------------
[07/13 21:48:50]  Iteration: 135
[07/13 21:48:53]  Generator returned sat in 0.727410 secs.
[07/13 21:48:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:53]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:48:53]  Verifer returned sat in 0.134627 secs.
[07/13 21:48:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -11261.755615    0.081543 -11361.776367 -3443.893311    0.000000           0.000000  100.020752      100.020752
1 -11261.755615    0.020508 -11261.776367 -3443.893311    0.000000           0.000000    0.020752        0.020752
2 -11261.735352    0.041016 -11261.776367 -3443.893311    0.000000           0.000000    0.041016      -99.958984
3 -10961.714844  300.020508 -11161.776367 -3443.893311    0.061523           0.061523  200.000000      100.000000
4 -10961.714844  102.000000 -11061.776367 -3443.893311    0.061523           0.061523  100.000000        0.000000
5 -10659.714844  302.000000 -10861.776367 -3443.893311  102.061523         102.061523  100.000000      100.000000
6 -10457.714844  202.000000 -10763.109701 -3443.893311  204.061523         204.061523  101.333333      100.000000
7 -10256.381510  201.333333 -10761.776367 -3443.893311  305.394857         305.394857  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:53]  --------------------------------------------------------------------------------
[07/13 21:48:53]  Iteration: 136
[07/13 21:48:56]  Generator returned sat in 1.126677 secs.
[07/13 21:48:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:56]  Improved gap from 508237/6144 to 100
[07/13 21:48:57]  Improved number of small numbers from 39 to 69 out of a max of 90
[07/13 21:48:57]  Verifer returned sat in 0.670452 secs.
[07/13 21:48:57]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12032.503662     0.081299 -12232.503418 -3443.893555     0.000000           0.000000  199.999756       99.999878
1 -12032.503662   100.040771 -12032.544189 -3443.893555     0.000000           0.000000    0.040527       -0.000122
2 -12032.503418     0.040771 -12032.503540 -3443.893555     0.000000           0.000000    0.000122      -99.999878
3 -11832.503540   200.000000 -11932.503418 -3443.893555     0.000000           0.000000   99.999878        0.000000
4 -11558.462891   300.000000 -11832.503540 -3443.893555    74.040527          74.040527  200.000122      100.000122
5 -10806.401917   752.060974 -11632.503540 -3443.893555   726.101562         726.101562  100.000061      100.000061
6  -9076.310455  1730.091461 -11564.503418 -3443.893555  2356.192871        2356.192871  132.000092      100.000214
7  -5927.173264  3149.137192 -11532.503418 -3443.893555  5305.330322        5305.330322  299.999832      199.999954
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:48:57]  --------------------------------------------------------------------------------
[07/13 21:48:57]  Iteration: 137
[07/13 21:48:59]  Generator returned sat in 0.712786 secs.
[07/13 21:48:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:48:59]  Improved gap from 333/16384 to 100
[07/13 21:49:00]  Improved number of small numbers from 32 to 90 out of a max of 90
[07/13 21:49:00]  Verifer returned sat in 0.430095 secs.
[07/13 21:49:00]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -12929.886719     0.081299 -13092.927490 -3143.281494     0.000000           0.000000  163.040771      100.040771
1 -12929.886719     0.040527 -12929.927734 -3143.281494     0.000000           0.000000    0.041016        0.040771
2 -12629.927734   300.000000 -12887.927490 -3143.281494     0.000000           0.000000  257.999756      199.999756
3 -12629.886719   258.000000 -12829.927490 -3143.281494     0.040771           0.040771  200.000000      100.000000
4 -11846.386719   783.500000 -12684.927734 -3143.281494   683.540527         683.540527  155.000488      100.000244
5 -10301.636719  1544.750000 -12629.927490 -3143.281494  2028.290771        2028.290771  300.000000      200.000000
6  -7595.511719  2706.125000 -12529.927490 -3143.281494  4634.415771        4634.415771  300.000000      200.000000
7  -3084.324219  4511.187500 -12429.927490 -3143.281494  9045.603271        9045.603271  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:00]  --------------------------------------------------------------------------------
[07/13 21:49:00]  Iteration: 138
[07/13 21:49:02]  Generator returned sat in 0.816002 secs.
[07/13 21:49:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:03]  Improved number of small numbers from 54 to 89 out of a max of 89
[07/13 21:49:03]  Verifer returned sat in 0.199635 secs.
[07/13 21:49:03]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13029.906982    0.081299 -13129.927734 -3143.281494     0.000000           0.000000  100.020752        0.020752
1 -13029.906982    0.020508 -13029.927734 -3143.281494     0.000000           0.000000    0.020752      -99.979248
2 -12929.886963  100.040771 -12929.927734 -3143.281494     0.000000           0.000000    0.040771      -99.959229
3 -12629.907227  300.000000 -12729.927734 -3143.281494     0.020508           0.020508  100.000000      100.000000
4 -11877.907227  752.000000 -12664.927734 -3143.281494   652.020264         652.020264  135.000244      100.000244
5 -10952.407227  925.500000 -12629.927734 -3143.281494  1477.520508        1477.520508  200.000000      100.000000
6 -10037.657227  914.750000 -12529.927734 -3143.281494  2192.270508        2192.270508  300.000000      200.000000
7  -9278.282227  759.375000 -12429.927490 -3143.281494  2851.645508        2851.645508  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:03]  --------------------------------------------------------------------------------
[07/13 21:49:03]  Iteration: 139
[07/13 21:49:05]  Generator returned sat in 0.815407 secs.
[07/13 21:49:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:06]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:49:06]  Verifer returned sat in 0.121235 secs.
[07/13 21:49:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13029.906982    0.081299 -13033.927734 -3143.281494     0.000000           0.000000    4.020752        0.020752
1 -13029.906982    0.020508 -13029.927734 -3143.281494     0.000000           0.000000    0.020752      -99.979248
2 -12929.886963  100.040771 -12929.927734 -3143.281494     0.000000           0.000000    0.040771      -99.959229
3 -12629.907227  300.000000 -12731.927734 -3143.281494     0.020508           0.020508  102.000000      100.000000
4 -12174.907227  455.000000 -12629.927734 -3143.281494   355.020508         355.020508  100.000000      100.000000
5 -11572.907227  602.000000 -12600.927734 -3143.281494   857.020508         857.020508  171.000000      100.000000
6 -11077.407227  495.500000 -12429.927734 -3143.281494  1252.520508        1252.520508  100.000000      100.000000
7 -10622.407227  455.000000 -12429.927734 -3143.281494  1607.520508        1607.520508  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:06]  --------------------------------------------------------------------------------
[07/13 21:49:06]  Iteration: 140
[07/13 21:49:09]  Generator returned sat in 1.703222 secs.
[07/13 21:49:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:09]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/13 21:49:09]  Verifer returned sat in 0.132173 secs.
[07/13 21:49:09]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13029.907227     0.081055 -13033.928223 -3143.281738     0.000000           0.000000    4.020996        0.020508
1 -13029.907227     0.020264 -13029.927734 -3143.281738     0.000000           0.000000    0.020508      -99.979492
2 -12840.230469   189.697266 -12840.261068 -3143.281738     0.000000           0.000000    0.030599      -10.302734
3 -12574.907471   265.333333 -12731.928223 -3143.281738     0.020264           0.020264  157.000488      155.000000
4 -12174.907471   400.000000 -12629.927979 -3143.281738   355.020264         355.020264  100.000244      100.000000
5 -11572.907471   602.000000 -12600.927979 -3143.281738   857.020264         857.020264  171.000244      100.000000
6 -10667.907471   905.000000 -12429.927979 -3143.281738  1562.020264        1562.020264  200.000244      200.000000
7  -9308.407471  1359.500000 -12429.927734 -3143.281738  2821.520264        2821.520264  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:10]  --------------------------------------------------------------------------------
[07/13 21:49:10]  Iteration: 141
[07/13 21:49:13]  Generator returned sat in 1.920479 secs.
[07/13 21:49:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:14]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/13 21:49:14]  Verifer returned sat in 0.185534 secs.
[07/13 21:49:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13029.907227    0.081055 -13229.907227 -2943.302490   0.000000           0.000000  200.000000      200.000000
1 -13029.907227    0.020020 -13229.907227 -2943.302490   0.000000           0.000000  200.000000      100.000000
2 -12929.907471  299.999756 -13129.907227 -2943.302490   0.000000           0.000000  199.999756       99.999756
3 -12929.907471  102.081055 -12929.947754 -2943.302490   0.000000           0.000000    0.040283       -0.000244
4 -12677.866699  252.060791 -12929.907227 -2943.302490   0.020264           0.020264  252.020264      152.020264
5 -12677.866699    2.000000 -12829.907227 -2943.302490   0.020264           0.020264  152.020264       52.020264
6 -12677.866699  152.000000 -12697.920898 -2943.302246   0.020264           0.020264   20.033936      -47.979492
7 -12409.853271  268.013428 -12629.907227 -2943.302246  20.054199          20.054199  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:49:14]  --------------------------------------------------------------------------------
[07/13 21:49:14]  Iteration: 142
[07/13 21:49:18]  Generator returned sat in 2.116538 secs.
[07/13 21:49:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:18]  Improved number of small numbers from 40 to 89 out of a max of 89
[07/13 21:49:18]  Verifer returned sat in 0.244299 secs.
[07/13 21:49:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13077.886963    0.080811 -13277.886963 -2895.322998     0.000000           0.000000  200.000000      200.000000
1 -13077.886963    0.020264 -13277.886963 -2895.322998     0.000000           0.000000  200.000000      100.000000
2 -13077.886963  199.999756 -13077.886963 -2895.322998     0.000000           0.000000    0.000000        0.000000
3 -12877.846680  200.040283 -13011.206787 -2895.322998     0.000000           0.000000  133.360107      100.040283
4 -12877.846680  133.340088 -12877.886963 -2895.322998     0.000000           0.000000    0.040283        0.040283
5 -12677.866699  200.000000 -12877.886719 -2895.322998     0.020264           0.020264  199.999756      100.000000
6 -12275.866699  402.000000 -12677.886963 -2895.322998   202.020264         202.020264  200.000000      200.000000
7 -11469.866699  806.000000 -12677.886719 -2895.322998  1008.020020        1008.020020  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:18]  --------------------------------------------------------------------------------
[07/13 21:49:18]  Iteration: 143
[07/13 21:49:21]  Generator returned sat in 0.958508 secs.
[07/13 21:49:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:21]  Improved number of small numbers from 56 to 77 out of a max of 89
[07/13 21:49:21]  Verifer returned sat in 0.444880 secs.
[07/13 21:49:21]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13077.886963     0.080566 -13277.886963 -2895.323242     0.000000           0.000000  200.000000      200.000000
1 -13077.886963     0.040527 -13177.887207 -2895.323242     0.000000           0.000000  100.000244      100.000000
2 -13077.886963     0.040527 -13077.887207 -2895.323242     0.000000           0.000000    0.000244        0.000000
3 -12877.846558   200.040405 -13077.886963 -2895.323242     0.040283           0.040283  200.000122      100.000122
4 -12475.765747   402.080811 -12977.886963 -2895.323242   202.121338         202.121338  299.999878      199.999878
5 -11669.604126   806.161621 -12779.866943 -2895.323242   908.282959         908.282959  201.979858      199.999878
6 -10055.280884  1614.323242 -12677.887207 -2895.323242  2422.606201        2422.606201  200.000122      199.999878
7  -6824.634399  3230.646484 -12677.886963 -2895.323242  5553.252686        5553.252686  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:22]  --------------------------------------------------------------------------------
[07/13 21:49:22]  Iteration: 144
[07/13 21:49:36]  Generator returned sat in 12.561747 secs.
[07/13 21:49:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:37]  Improved number of small numbers from 55 to 69 out of a max of 89
[07/13 21:49:37]  Verifer returned sat in 0.501314 secs.
[07/13 21:49:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13825.506592    0.080322 -13825.506632 -2895.323242    0.000000           0.000000    0.000041      -59.640015
1 -13565.846680  259.659953 -13665.866943 -2895.323242    0.000000           0.000000  100.020264      100.019897
2 -13565.846680    0.020264 -13565.866699 -2895.323242    0.000000           0.000000    0.020020        0.019897
3 -13562.826416    3.040283 -13562.866821 -2895.322998    0.000000           0.000000    0.040405      -96.959595
4 -13165.846680  397.000000 -13365.866821 -2895.322998    0.020142           0.020142  200.000000      200.000000
5 -12965.866821  200.000000 -13267.366943 -2895.322998  200.000000         200.000000  101.500122      100.000000
6 -12965.866821  101.500000 -13265.866821 -2895.322998  200.000000         200.000000  100.000000        0.000000
7 -12418.866821  547.000000 -13165.866699 -2895.322998  447.000000         447.000000  299.999878      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:49:37]  --------------------------------------------------------------------------------
[07/13 21:49:37]  Iteration: 145
[07/13 21:49:40]  Generator returned sat in 1.520086 secs.
[07/13 21:49:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:40]  Improved gap from 895889/32768 to 100
[07/13 21:49:40]  Improved number of small numbers from 43 to 90 out of a max of 90
[07/13 21:49:40]  Verifer returned sat in 0.247405 secs.
[07/13 21:49:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14066.636963    0.080078 -14166.636963 -2895.323242    0.000000           0.000000  100.000000       99.999756
1 -14066.636963    0.040039 -14165.136719 -2895.323242    0.000000           0.000000   98.499756       -0.000244
2 -13766.636719  398.500000 -13966.636719 -2895.323242    0.000000           0.000000  200.000000      200.000000
3 -13766.596680  200.000000 -13966.636719 -2895.323242    0.040039           0.040039  200.000000      100.000000
4 -13766.596680  101.500000 -13866.636719 -2895.323242    0.040039           0.040039  100.000000        0.000000
5 -13466.596680  400.000000 -13766.636719 -2895.323242    0.040039           0.040039  300.000000      200.000000
6 -12866.596680  600.000000 -13568.136719 -2895.323242  500.040039         500.040039  201.500000      200.000000
7 -12766.556641  301.500000 -13466.636963 -2895.323242  500.080078         500.080078  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:49:41]  --------------------------------------------------------------------------------
[07/13 21:49:41]  Iteration: 146
[07/13 21:49:43]  Generator returned sat in 0.947299 secs.
[07/13 21:49:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:44]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:49:44]  Verifer returned sat in 0.108898 secs.
[07/13 21:49:44]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14066.636963    0.080078 -14166.636719 -2895.323242    0.000000           0.000000   99.999756       99.999756
1 -14066.636963    0.040039 -14166.636719 -2895.323242    0.000000           0.000000   99.999756       -0.000244
2 -13766.636719  400.000000 -14063.636719 -2895.323242    0.000000           0.000000  297.000000      200.000000
3 -13766.596680  297.000000 -13966.636719 -2895.323242    0.040039           0.040039  200.000000      100.000000
4 -13766.596680  150.000000 -13816.636719 -2895.323242    0.040039           0.040039   50.000000        0.000000
5 -13466.596680  350.000000 -13666.636719 -2895.323242    0.040039           0.040039  200.000000      200.000000
6 -13069.596680  397.000000 -13566.636719 -2895.323242  397.040039         397.040039  100.000000      100.000000
7 -12869.616699  200.000000 -13466.636963 -2895.323242  497.020020         497.020020  100.000244      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:49:44]  --------------------------------------------------------------------------------
[07/13 21:49:44]  Iteration: 147
[07/13 21:49:50]  Generator returned sat in 4.524129 secs.
[07/13 21:49:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:50]  Improved gap from 41/2048 to 100
[07/13 21:49:50]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:49:50]  Verifer returned sat in 0.151855 secs.
[07/13 21:49:50]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13571.177002    0.080078 -13671.177002 -2895.323242    0.000000           0.000000  100.000000      100.000000
1 -13571.177002    0.040039 -13571.217041 -2895.323242    0.000000           0.000000    0.040039        0.000000
2 -13371.177002  200.040039 -13471.177002 -2895.323242    0.000000           0.000000  100.000000      100.000000
3 -13171.136963  300.000000 -13371.177002 -2895.323242    0.040039           0.040039  200.000000      200.000000
4 -13171.136963    1.500000 -13371.177002 -2895.323242    0.040039           0.040039  200.000000      100.000000
5 -12771.056885  400.080078 -13271.177002 -2895.323242  300.120117         300.120117  200.000000      100.000000
6 -12771.056885    1.500000 -13171.177002 -2895.323242  300.120117         300.120117  100.000000        0.000000
7 -12371.056885  400.000000 -13071.177002 -2895.323242  400.160156         400.160156  299.959961      199.959961
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:49:51]  --------------------------------------------------------------------------------
[07/13 21:49:51]  Iteration: 148
[07/13 21:49:54]  Generator returned sat in 1.164760 secs.
[07/13 21:49:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:54]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/13 21:49:54]  Verifer returned sat in 0.142385 secs.
[07/13 21:49:54]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13571.177002    0.079834 -13671.177490 -2895.32373    0.000000           0.000000  100.000488      100.000000
1 -13571.177002    0.039551 -13571.196777 -2895.32373    0.000000           0.000000    0.019775        0.000000
2 -13371.177002  200.019775 -13471.177002 -2895.32373    0.000000           0.000000  100.000000      100.000000
3 -13171.137207  300.000000 -13371.177002 -2895.32373    0.039795           0.039795  200.000000      200.000000
4 -13171.137207    1.500000 -13371.177002 -2895.32373    0.039795           0.039795  200.000000      100.000000
5 -12770.347656  400.789551 -13271.177002 -2895.32373  300.119629         300.119629  200.709717      100.709717
6 -12770.347656    1.500000 -13171.177002 -2895.32373  300.119629         300.119629  100.709717        0.709717
7 -12369.597656  400.750000 -13071.177002 -2895.32373  401.619873         401.619873  299.959473      199.959473
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:49:54]  --------------------------------------------------------------------------------
[07/13 21:49:54]  Iteration: 149
[07/13 21:49:57]  Generator returned sat in 1.036152 secs.
[07/13 21:49:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:49:57]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:49:57]  Verifer returned sat in 0.105899 secs.
[07/13 21:49:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t    wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13571.157227    0.079834 -13671.177490 -2895.32373    0.000000           0.000000  100.020264      100.019775
1 -13571.157227    0.039551 -13571.177002 -2895.32373    0.000000           0.000000    0.019775        0.019775
2 -13371.177002  200.000000 -13471.177002 -2895.32373    0.000000           0.000000  100.000000      100.000000
3 -13172.597656  298.539551 -13371.177002 -2895.32373    0.039795           0.039795  198.539551      198.539551
4 -13172.597656    1.500000 -13371.177002 -2895.32373    0.039795           0.039795  198.539551       98.539551
5 -12770.347656  402.250000 -13271.177002 -2895.32373  300.119629         300.119629  200.709717      100.709717
6 -12770.347656    1.500000 -13158.177002 -2895.32373  300.119629         300.119629   87.709717        0.709717
7 -12342.097656  428.250000 -13071.177002 -2895.32373  429.119873         429.119873  299.959473      199.959473
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:49:57]  --------------------------------------------------------------------------------
[07/13 21:49:57]  Iteration: 150
[07/13 21:50:01]  Generator returned sat in 2.411909 secs.
[07/13 21:50:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:02]  Improved number of small numbers from 70 to 89 out of a max of 89
[07/13 21:50:02]  Verifer returned sat in 0.152821 secs.
[07/13 21:50:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13571.157227    0.079834 -13671.177734 -2895.324219    0.000000           0.000000  100.020508      100.019775
1 -13571.157227    0.039307 -13571.177002 -2895.324219    0.000000           0.000000    0.019775        0.019775
2 -13371.177002  200.000000 -13471.177002 -2895.324219    0.000000           0.000000  100.000000      100.000000
3 -13271.166992  200.000000 -13471.177002 -2895.324219    0.010010           0.010010  200.000000      100.000000
4 -13271.166992  101.500000 -13371.177002 -2895.324219    0.010010           0.010010  100.000000        0.000000
5 -12820.416992  450.750000 -13271.177002 -2895.324219  223.875000         223.875000  226.885010      126.885010
6 -12820.416992  226.875000 -13158.177246 -2895.324219  223.875000         223.875000  113.885254       26.885010
7 -12080.979980  739.437012 -13071.177002 -2895.324219  690.197021         690.197021  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:50:02]  --------------------------------------------------------------------------------
[07/13 21:50:02]  Iteration: 151
[07/13 21:50:05]  Generator returned sat in 1.206399 secs.
[07/13 21:50:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:06]  Improved number of small numbers from 42 to 55 out of a max of 89
[07/13 21:50:06]  Verifer returned sat in 0.801158 secs.
[07/13 21:50:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -13802.014648    0.079590 -13802.054480 -2764.446777    0.000000           0.000000    0.039832        0.039795
1 -13789.458430   12.596050 -13789.498347 -2677.042791    0.000000           0.000000    0.039917        0.000000
2 -13772.836670   16.661677 -13789.458430 -2593.664551    0.000000           0.000000   16.621760        0.000000
3 -13772.836670   16.581843 -13772.836670 -2493.664551    0.000000           0.000000    0.000000        0.000000
4 -13706.110128   66.726542 -13772.836670 -2460.391093    0.000000           0.000000   66.726542        0.000000
5 -13706.110128   66.686625 -13706.110128 -2360.391113    0.000000           0.000000    0.000000       -0.000020
6 -13506.070211  200.039917 -13706.110107 -2360.391113    0.039795           0.039795  200.000102      100.000102
7 -13204.510335  301.559875 -13606.110107 -2360.391113  200.079834         200.079834  201.519938      101.519938
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:50:06]  --------------------------------------------------------------------------------
[07/13 21:50:06]  Iteration: 152
[07/13 21:50:10]  Generator returned sat in 1.428064 secs.
[07/13 21:50:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:10]  Improved gap from 163/8192 to 100
[07/13 21:50:10]  Improved number of small numbers from 36 to 90 out of a max of 90
[07/13 21:50:10]  Verifer returned sat in 0.299274 secs.
[07/13 21:50:10]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14305.904297    0.079590 -14405.924316 -2560.361328     0.000000           0.000000  100.020020      100.020020
1 -14305.904297    0.020020 -14305.924316 -2560.361328     0.000000           0.000000    0.020020        0.020020
2 -14205.924316  100.000000 -14305.924316 -2560.361328     0.000000           0.000000  100.000000        0.000000
3 -14205.924316    0.019775 -14205.924316 -2560.361328     0.000000           0.000000    0.000000     -100.000000
4 -13805.924316  400.000000 -14105.924316 -2560.361328     0.000000           0.000000  300.000000      200.000000
5 -13705.904297  400.000000 -14005.924316 -2560.361328     0.020020           0.020020  300.000000      200.000000
6 -13104.404297  601.500000 -13905.924316 -2560.361328   501.520020         501.520020  300.000000      200.000000
7 -12200.654297  903.750000 -13805.924316 -2560.361328  1405.269775        1405.269775  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:10]  --------------------------------------------------------------------------------
[07/13 21:50:10]  Iteration: 153
[07/13 21:50:14]  Generator returned sat in 1.210630 secs.
[07/13 21:50:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:15]  Improved gap from 163/8192 to 100
[07/13 21:50:15]  Improved number of small numbers from 58 to 90 out of a max of 90
[07/13 21:50:15]  Verifer returned sat in 0.287229 secs.
[07/13 21:50:15]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15454.415771     0.079346 -15554.415771 -2560.361572     0.000000           0.000000  100.000000       99.999756
1 -15454.415771     0.039551 -15554.415527 -2560.361572     0.000000           0.000000   99.999756       -0.000244
2 -15154.415771   399.999756 -15354.415527 -2560.361572     0.000000           0.000000  199.999756      199.999756
3 -15154.375977   200.000000 -15354.415527 -2560.361572     0.039551           0.039551  200.000000      100.000000
4 -15052.875977   301.500000 -15254.415527 -2560.361572     0.039551           0.039551  201.500000      101.500000
5 -14151.375977   901.500000 -15154.415527 -2560.361572   703.039795         703.039795  299.999756      199.999756
6 -12797.625977  1353.750000 -15054.415527 -2560.361572  2056.789551        2056.789551  200.000000      100.000000
7 -10765.500977  2032.125000 -14954.415527 -2560.361572  3888.914551        3888.914551  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:15]  --------------------------------------------------------------------------------
[07/13 21:50:15]  Iteration: 154
[07/13 21:50:18]  Generator returned sat in 1.124856 secs.
[07/13 21:50:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:19]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:50:19]  Verifer returned sat in 0.127041 secs.
[07/13 21:50:19]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15454.415771     0.079346 -15554.415771 -2560.361572     0.000000           0.000000  100.000000       99.999756
1 -15454.415771     0.039551 -15479.040527 -2560.361572     0.000000           0.000000   24.624756       -0.000244
2 -15154.415771   324.624756 -15354.415527 -2560.361572     0.000000           0.000000  199.999756      199.999756
3 -15154.375977   200.000000 -15354.415527 -2560.361572     0.039551           0.039551  200.000000      100.000000
4 -15052.875977   301.500000 -15254.415527 -2560.361572     0.039551           0.039551  201.500000      101.500000
5 -14151.375977   901.500000 -15154.415527 -2560.361572   703.039795         703.039795  299.999756      199.999756
6 -12797.625977  1353.750000 -15054.415527 -2560.361572  2056.789551        2056.789551  200.000000      100.000000
7 -10765.500977  2032.125000 -14954.415527 -2560.361572  3888.914551        3888.914551  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:19]  --------------------------------------------------------------------------------
[07/13 21:50:19]  Iteration: 155
[07/13 21:50:22]  Generator returned sat in 1.392150 secs.
[07/13 21:50:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:23]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:50:23]  Verifer returned sat in 0.135803 secs.
[07/13 21:50:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15454.415771    0.079102 -15554.415527 -2560.361816     0.000000           0.000000   99.999756       99.999756
1 -15454.415771    0.039551 -15554.415527 -2560.361816     0.000000           0.000000   99.999756       -0.000244
2 -15154.416016  399.999512 -15454.415527 -2560.361816     0.000000           0.000000  299.999512      199.999512
3 -15105.875977  300.000000 -15254.415527 -2560.361816    48.539551          48.539551  100.000000      100.000000
4 -15054.375977  151.500000 -15254.415527 -2560.361816    48.539551          48.539551  151.500000       51.500000
5 -14151.375977  903.000000 -15154.415527 -2560.361816   703.039551         703.039551  300.000000      200.000000
6 -13698.375977  453.000000 -14982.415527 -2560.361816  1156.039551        1156.039551  128.000000      100.000000
7 -13470.375977  228.000000 -14954.415527 -2560.361816  1284.039551        1284.039551  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:23]  --------------------------------------------------------------------------------
[07/13 21:50:23]  Iteration: 156
[07/13 21:50:26]  Generator returned sat in 1.357256 secs.
[07/13 21:50:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:27]  Improved gap from 794463/16384 to 100
[07/13 21:50:27]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/13 21:50:27]  Verifer returned sat in 0.265661 secs.
[07/13 21:50:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15507.435059    0.079102 -15607.435303 -2560.362061    0.000000           0.000000  100.000244      100.000000
1 -15507.435059    0.039062 -15507.444824 -2560.362061    0.000000           0.000000    0.009766        0.000000
2 -15507.415527    0.029297 -15507.435059 -2560.362061    0.000000           0.000000    0.019531      -99.980469
3 -15207.425293  300.000000 -15307.435059 -2560.362061    0.009766           0.009766  100.000000      100.000000
4 -15207.425293    1.500000 -15307.435059 -2560.362061    0.009766           0.009766  100.000000        0.000000
5 -14804.405762  403.019531 -15207.435059 -2560.362061  103.029541         103.029541  299.999756      199.999756
6 -14804.405762    1.500000 -15107.435059 -2560.362061  103.029541         103.029541  199.999756       99.999756
7 -14401.405762  403.000000 -15007.435059 -2560.362061  406.029297         406.029297  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:50:27]  --------------------------------------------------------------------------------
[07/13 21:50:27]  Iteration: 157
[07/13 21:50:32]  Generator returned sat in 2.393648 secs.
[07/13 21:50:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:33]  Improved number of small numbers from 41 to 73 out of a max of 89
[07/13 21:50:33]  Verifer returned sat in 0.691817 secs.
[07/13 21:50:33]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15208.925781     0.078857 -15408.905762 -2560.362305     0.000000           0.000000  199.979980      199.979736
1 -15208.925781     0.019775 -15308.905762 -2560.362305     0.000000           0.000000   99.979980       99.979736
2 -15208.905762   100.000000 -15208.905762 -2560.362061     0.000000           0.000000    0.000000        0.000000
3 -15008.885986   200.019775 -15110.435620 -2560.362061     0.019531           0.019531  101.530103      100.000244
4 -14808.866406   301.529663 -15108.905762 -2560.362061     0.039551           0.039551  299.999805      199.999805
5 -14355.071912   453.794495 -15008.905762 -2560.362061   353.834229         353.834229  299.999622      199.999622
6 -13672.880170   682.191742 -14908.905762 -2560.362061   936.025635         936.025635  299.999957      199.999957
7 -12648.092557  1024.787613 -14808.905762 -2560.362061  1860.813477        1860.813477  299.999728      199.999728
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:33]  --------------------------------------------------------------------------------
[07/13 21:50:33]  Iteration: 158
[07/13 21:50:37]  Generator returned sat in 1.966717 secs.
[07/13 21:50:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:37]  Improved gap from 323/8192 to 100
[07/13 21:50:37]  Improved number of small numbers from 59 to 90 out of a max of 90
[07/13 21:50:37]  Verifer returned sat in 0.338388 secs.
[07/13 21:50:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15308.866211    0.078857 -15408.906006 -2560.362305    0.000000           0.000000  100.039795      100.039551
1 -15308.866211    0.039551 -15308.905762 -2560.362305    0.000000           0.000000    0.039551        0.039551
2 -15208.905762  100.000000 -15308.905762 -2560.362305    0.000000           0.000000  100.000000        0.000000
3 -15008.866211  300.000000 -15108.905762 -2560.362305    0.039551           0.039551  100.000000      100.000000
4 -15008.866211    1.500000 -15108.905762 -2560.362305    0.039551           0.039551  100.000000        0.000000
5 -14607.366211  401.500000 -15008.905762 -2560.362305  201.539551         201.539551  200.000000      100.000000
6 -14607.366211    1.500000 -14908.905762 -2560.362305  201.539551         201.539551  100.000000        0.000000
7 -14205.866211  401.500000 -14808.905762 -2560.362305  303.039551         303.039551  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:50:38]  --------------------------------------------------------------------------------
[07/13 21:50:38]  Iteration: 159
[07/13 21:50:41]  Generator returned sat in 1.600791 secs.
[07/13 21:50:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:50:41]  Improved gap from 323/8192 to 100
[07/13 21:50:42]  Improved number of small numbers from 66 to 86 out of a max of 90
[07/13 21:50:42]  Verifer returned sat in 0.339321 secs.
[07/13 21:50:42]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15308.885986    0.078613 -15475.219381 -2560.362549    0.000000           0.000000  166.333394      100.019775
1 -15308.885986    0.019775 -15308.905762 -2560.362549    0.000000           0.000000    0.019775        0.019775
2 -15208.866455  100.039307 -15208.905762 -2560.362549    0.000000           0.000000    0.039307        0.039307
3 -15208.866455    0.019714 -15208.905762 -2560.362549    0.000000           0.000000    0.039307      -99.960693
4 -14808.885986  400.000000 -15010.905762 -2560.362549    0.019775           0.019775  202.000000      200.000000
5 -14612.906006  202.000000 -15008.905762 -2560.362549  195.999756         195.999756  200.000000      100.000000
6 -14612.906006  103.000000 -14908.905762 -2560.362549  195.999756         195.999756  100.000000        0.000000
7 -14007.906006  605.000000 -14808.905762 -2560.362549  592.925781         592.925781  208.073975      108.073975
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:42]  --------------------------------------------------------------------------------
[07/13 21:50:42]  Iteration: 160
[07/13 21:50:45]  Generator returned sat in 1.392268 secs.
[07/13 21:50:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:50:45]  Improved gap from 161/16384 to 100
[07/13 21:50:46]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:50:46]  Verifer returned sat in 0.185070 secs.
[07/13 21:50:46]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -16058.577148     0.078613 -16158.577148 -2560.362549     0.000000           0.000000    100.0           100.0
1 -16058.577148     0.039307 -16158.577148 -2560.362549     0.000000           0.000000    100.0             0.0
2 -15758.577148   400.000000 -15958.577148 -2560.362549     0.000000           0.000000    200.0           200.0
3 -15558.616455   200.000000 -15958.577148 -2560.362549   199.960693         199.960693    200.0           100.0
4 -14958.616455   600.000000 -15758.577148 -2560.362549   599.960693         599.960693    200.0           200.0
5 -13558.616455  1400.000000 -15721.577148 -2560.362549  1999.960693        1999.960693    163.0           100.0
6 -11684.616455  1874.000000 -15658.577148 -2560.362549  3673.960693        3673.960693    300.0           200.0
7  -9210.616455  2474.000000 -15558.577148 -2560.362549  6147.960693        6147.960693    200.0           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:46]  --------------------------------------------------------------------------------
[07/13 21:50:46]  Iteration: 161
[07/13 21:50:51]  Generator returned sat in 3.137723 secs.
[07/13 21:50:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:50:51]  Improved number of small numbers from 67 to 89 out of a max of 89
[07/13 21:50:51]  Verifer returned sat in 0.212390 secs.
[07/13 21:50:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16058.577637    0.078369 -16258.577393 -2560.362549     0.000000           0.000000  199.999756       99.999756
1 -16058.577637    0.039062 -16158.577393 -2560.362549     0.000000           0.000000   99.999756       -0.000244
2 -15758.577393  400.000000 -15958.577393 -2560.362549     0.000000           0.000000  200.000000      200.000000
3 -15558.597168  200.000000 -15935.577393 -2560.362549   199.980225         199.980225  177.000000      100.000000
4 -14972.597168  586.000000 -15758.577393 -2560.362549   599.960449         599.960449  186.019775      186.019775
5 -14078.097168  894.500000 -15721.577393 -2560.362549  1380.480225        1380.480225  263.000000      200.000000
6 -13273.847168  804.250000 -15558.577393 -2560.362549  2084.730225        2084.730225  200.000000      200.000000
7 -12304.722168  969.125000 -15558.577393 -2560.362549  2953.855469        2953.855469  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:52]  --------------------------------------------------------------------------------
[07/13 21:50:52]  Iteration: 162
[07/13 21:50:55]  Generator returned sat in 1.527272 secs.
[07/13 21:50:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:50:55]  Improved number of small numbers from 62 to 89 out of a max of 89
[07/13 21:50:55]  Verifer returned sat in 0.160433 secs.
[07/13 21:50:55]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15958.577637     0.078125 -16158.577393 -2560.362793     0.000000           0.000000  199.999756      199.999756
1 -15958.577637     0.039062 -16058.577637 -2560.362793     0.000000           0.000000  100.000000       99.999756
2 -15758.577637   300.000000 -15958.577393 -2560.362793     0.000000           0.000000  199.999756      199.999756
3 -15558.616699   200.000000 -15958.577393 -2560.362793   199.960693         199.960693  200.000000      100.000000
4 -15058.616699   500.000000 -15782.577637 -2560.362793   499.960693         499.960693  224.000244      200.000000
5 -13920.616699  1138.000000 -15715.577393 -2560.362793  1537.960693        1537.960693  257.000000      200.000000
6 -11523.116699  2397.500000 -15558.577393 -2560.362793  3835.460938        3835.460938  199.999756      199.999756
7  -6528.116699  4995.000000 -15558.577393 -2560.362793  8730.460938        8730.460938  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:50:56]  --------------------------------------------------------------------------------
[07/13 21:50:56]  Iteration: 163
[07/13 21:51:00]  Generator returned sat in 2.469849 secs.
[07/13 21:51:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:00]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:51:00]  Verifer returned sat in 0.124658 secs.
[07/13 21:51:00]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16058.558105     0.078125 -16158.577393 -2560.362793     0.000000           0.000000  100.019287      100.019287
1 -16058.558105     0.019531 -16058.577637 -2560.362793     0.000000           0.000000    0.019531        0.019287
2 -15958.538330   100.039307 -15958.577393 -2560.362793     0.000000           0.000000    0.039062        0.039062
3 -15758.557861   200.000000 -15958.577393 -2560.362793     0.019531           0.019531  200.000000      100.000000
4 -15057.057861   701.500000 -15782.577637 -2560.362793   601.519531         601.519531  124.000244      100.000000
5 -13451.307861  1605.750000 -15706.577393 -2560.362793  2007.269531        2007.269531  248.000000      200.000000
6 -10537.182861  2914.125000 -15558.577393 -2560.362793  4821.394531        4821.394531  200.000000      200.000000
7  -5364.495361  5172.687500 -15558.577393 -2560.362793  9994.082031        9994.082031  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:51:01]  --------------------------------------------------------------------------------
[07/13 21:51:01]  Iteration: 164
[07/13 21:51:05]  Generator returned sat in 2.672567 secs.
[07/13 21:51:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:05]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:51:05]  Verifer returned sat in 0.128154 secs.
[07/13 21:51:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16006.577637    0.078125 -16206.577637 -2512.362793     0.000000           0.000000  200.000000           200.0
1 -16006.577637    0.039062 -16206.577637 -2512.362793     0.000000           0.000000  200.000000           100.0
2 -15806.577637  400.000000 -16046.577637 -2512.362793     0.000000           0.000000  240.000000           200.0
3 -15566.616699  240.000000 -15999.577637 -2512.362793   239.960938         239.960938  193.000000           100.0
4 -15151.116699  415.500000 -15806.577637 -2512.362793   455.460938         455.460938  200.000000           200.0
5 -14349.616699  801.500000 -15706.577637 -2512.362793  1256.960938        1256.960938  100.000000           100.0
6 -13668.116699  681.500000 -15606.577637 -2512.362793  1838.460938        1838.460938  100.000000           100.0
7 -12880.616699  787.500000 -15558.577393 -2512.362793  2525.960938        2525.960938  151.999756           100.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:51:06]  --------------------------------------------------------------------------------
[07/13 21:51:06]  Iteration: 165
[07/13 21:51:10]  Generator returned sat in 2.000525 secs.
[07/13 21:51:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:10]  Improved gap from 319/16384 to 100
[07/13 21:51:10]  Improved number of small numbers from 52 to 90 out of a max of 90
[07/13 21:51:10]  Verifer returned sat in 0.262438 secs.
[07/13 21:51:10]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16584.116699    0.077881 -16884.116455 -2512.362793   0.000000           0.000000  299.999756      200.000000
1 -16584.116699    0.038818 -16684.116699 -2512.362793   0.000000           0.000000  100.000000      100.000000
2 -16584.077637  100.039062 -16584.116699 -2512.362793   0.000000           0.000000    0.039062        0.039062
3 -16528.616699   55.500000 -16558.116455 -2512.362793   0.000000           0.000000   29.499756      -44.500000
4 -16254.655518  274.000000 -16384.116699 -2512.362793  29.460938          29.460938  100.000244      100.000244
5 -16254.655518    2.000000 -16384.116699 -2512.362793  29.460938          29.460938  100.000244        0.000244
6 -16250.655762  104.000000 -16284.116455 -2512.362793  29.460938          29.460938    3.999756      -96.000000
7 -15909.616699  345.000000 -16184.116455 -2512.362793  29.499756          29.499756  245.000000      145.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:51:10]  --------------------------------------------------------------------------------
[07/13 21:51:10]  Iteration: 166
[07/13 21:51:14]  Generator returned sat in 1.621178 secs.
[07/13 21:51:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:14]  Improved gap from 319/8192 to 0
[07/13 21:51:14]  Improved number of small numbers from 40 to 90 out of a max of 90
[07/13 21:51:14]  Verifer returned sat in 0.348433 secs.
[07/13 21:51:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16914.345703    0.077637 -16914.345703 -2512.362793   0.000000           0.000000    0.000000        0.000000
1 -16614.345703  300.000000 -16814.345703 -2512.362793   0.000000           0.000000  200.000000      200.000000
2 -16614.345703    0.038818 -16814.345703 -2512.362793   0.000000           0.000000  200.000000      100.000000
3 -16614.345703  100.500000 -16615.306885 -2512.362793   0.000000           0.000000    0.961182        0.000000
4 -16414.268066  201.000000 -16514.345947 -2512.362793   0.038818           0.038818  100.039062      100.038818
5 -16414.268066    2.000000 -16513.423584 -2512.362793   0.038818           0.038818   99.116699        0.038818
6 -16414.268066    4.000000 -16414.345703 -2413.323730   0.038818           0.038818    0.038818       -0.922119
7 -16406.306885    8.000000 -16413.384766 -2413.323730   0.038818           0.038818    7.039062      -92.960938
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:51:15]  --------------------------------------------------------------------------------
[07/13 21:51:15]  Iteration: 167
[07/13 21:51:19]  Generator returned sat in 2.410732 secs.
[07/13 21:51:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:19]  Improved gap from 159/8192 to 0
[07/13 21:51:20]  Improved number of small numbers from 49 to 88 out of a max of 90
[07/13 21:51:20]  Verifer returned sat in 0.590946 secs.
[07/13 21:51:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16714.364990    0.077393 -16914.364990 -2512.362793   0.000000           0.000000  200.000000      100.000000
1 -16714.364990    0.019531 -16714.364990 -2512.362793   0.000000           0.000000    0.000000        0.000000
2 -16514.364990  200.000000 -16714.364990 -2512.362793   0.000000           0.000000  200.000000      100.000000
3 -16514.364990  133.359212 -16514.403809 -2512.362793   0.000000           0.000000    0.038818        0.000000
4 -16314.345703  200.038818 -16414.365234 -2512.362793   0.019287           0.019287  100.000244      100.000000
5 -16314.345703    2.000000 -16414.364990 -2512.362793   0.019287           0.019287  100.000000        0.000000
6 -16314.345703    3.000000 -16314.364990 -2413.343262   0.019287           0.019287    0.000000       -0.980469
7 -16309.845703    4.500000 -16313.384521 -2413.343262   0.019287           0.019287    3.519531      -96.480469
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:51:20]  --------------------------------------------------------------------------------
[07/13 21:51:20]  Iteration: 168
[07/13 21:51:23]  Generator returned sat in 1.261636 secs.
[07/13 21:51:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:23]  Improved gap from 0 to 100
[07/13 21:51:24]  Improved number of small numbers from 62 to 90 out of a max of 90
[07/13 21:51:24]  Verifer returned sat in 0.217884 secs.
[07/13 21:51:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16814.365234    0.077393 -16854.365234 -2512.362793   0.000000           0.000000   40.000000        0.000000
1 -16814.365234    0.038818 -16814.365234 -2512.362793   0.000000           0.000000    0.000000     -100.000000
2 -16514.365234  300.000000 -16634.403809 -2512.362793   0.000000           0.000000  120.038574      100.000000
3 -16514.365234  120.000000 -16614.365234 -2512.362793   0.000000           0.000000  100.000000        0.000000
4 -16314.326416  300.000000 -16414.365234 -2512.362793   0.038818           0.038818  100.000000      100.000000
5 -16314.326416    2.000000 -16414.365234 -2512.362793   0.038818           0.038818  100.000000        0.000000
6 -16301.307129  113.019287 -16314.364990 -2512.362793   0.038818           0.038818   13.019043      -86.980713
7 -15981.778076  319.529053 -16214.364990 -2512.362793  32.587158          32.587158  199.999756      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:51:24]  --------------------------------------------------------------------------------
[07/13 21:51:24]  Iteration: 169
[07/13 21:51:27]  Generator returned sat in 1.300315 secs.
[07/13 21:51:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:28]  Improved gap from 0 to 32.8125
[07/13 21:51:28]  Improved number of small numbers from 41 to 90 out of a max of 90
[07/13 21:51:28]  Verifer returned sat in 0.518788 secs.
[07/13 21:51:28]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t    queue_t  bottle_queue_t
0 -17179.267334    0.077148 -17179.267334 -2499.854736        0.0                0.0   0.000000        0.000000
1 -17079.228760  100.038574 -17079.267334 -2499.854736        0.0                0.0   0.038574        0.038574
2 -17079.228760    0.019531 -17079.267334 -2432.667236        0.0                0.0   0.038574      -32.773926
3 -17046.435547   32.831787 -17046.454834 -2365.479736        0.0                0.0   0.019287      -32.793213
4 -16980.048584   66.406250 -17013.642334 -2299.073486        0.0                0.0  33.593750        0.000000
5 -16980.048584   32.812500 -16980.048584 -2233.647705        0.0                0.0   0.000000      -34.574219
6 -16930.439209   49.609375 -16945.474365 -2166.460205        0.0                0.0  15.035156      -17.777344
7 -16894.984131   50.490234 -16912.661621 -2166.460205        0.0                0.0  17.677490      -82.322266
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/13 21:51:28]  --------------------------------------------------------------------------------
[07/13 21:51:28]  Iteration: 170
[07/13 21:51:33]  Generator returned sat in 2.618212 secs.
[07/13 21:51:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:33]  Improved number of small numbers from 48 to 89 out of a max of 89
[07/13 21:51:33]  Verifer returned sat in 0.214662 secs.
[07/13 21:51:33]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -17080.083984     0.076904 -17080.084229 -2099.083008        0.0                0.0    0.000244      -99.999756
1 -16680.084229   400.000000 -16980.083984 -2099.083008        0.0                0.0  299.999756      200.000000
2 -16680.084229     0.038574 -16780.084229 -2099.083008        0.0                0.0  100.000000      100.000000
3 -15460.084229  1220.000000 -16680.084229 -2099.083008     1020.0             1020.0  200.000000      200.000000
4 -14848.084229   612.000000 -16580.084229 -2099.083008     1532.0             1532.0  200.000000      200.000000
5 -14540.084229   308.000000 -16580.084229 -2099.083008     1740.0             1740.0  300.000000      200.000000
6 -14540.084229   156.000000 -16480.084229 -2099.083008     1740.0             1740.0  200.000000      100.000000
7 -13928.084229   612.000000 -16380.083984 -2099.083008     2152.0             2152.0  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:51:33]  --------------------------------------------------------------------------------
[07/13 21:51:33]  Iteration: 171
[07/13 21:51:36]  Generator returned sat in 1.296130 secs.
[07/13 21:51:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:37]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:51:37]  Verifer returned sat in 0.104050 secs.
[07/13 21:51:37]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -17080.083984     0.076904 -17080.084229 -2099.083008        0.0                0.0    0.000244      -99.999756
1 -16680.084229   400.000000 -16980.083984 -2099.083008        0.0                0.0  299.999756      200.000000
2 -16680.084229     0.038574 -16780.084229 -2099.083008        0.0                0.0  100.000000      100.000000
3 -15460.084229  1220.000000 -16684.084229 -2099.083008     1020.0             1020.0  204.000000      200.000000
4 -14848.084229   612.000000 -16580.084229 -2099.083008     1532.0             1532.0  200.000000      200.000000
5 -14540.084229   308.000000 -16580.084229 -2099.083008     1740.0             1740.0  300.000000      200.000000
6 -14540.084229   156.000000 -16380.084229 -2099.083008     1740.0             1740.0  100.000000      100.000000
7 -13928.084229   612.000000 -16380.084229 -2099.083008     2152.0             2152.0  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:51:37]  --------------------------------------------------------------------------------
[07/13 21:51:37]  Iteration: 172
[07/13 21:51:41]  Generator returned sat in 2.295173 secs.
[07/13 21:51:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:41]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:51:41]  Verifer returned sat in 0.118744 secs.
[07/13 21:51:41]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -17080.083984     0.076660 -17080.084229 -2099.083252     0.000000           0.000000    0.000244      -99.999756
1 -16680.084473   399.999756 -16980.083984 -2099.083252     0.000000           0.000000  299.999512      199.999756
2 -16680.084473     0.038330 -16780.084473 -2099.083252     0.000000           0.000000  100.000000       99.999756
3 -15460.084473  1220.000000 -16684.084473 -2099.083252  1020.000000        1020.000000  204.000000      199.999756
4 -14848.084473   612.000000 -16580.084473 -2099.083252  1531.999756        1531.999756  200.000244      200.000000
5 -14540.084473   308.000000 -16580.084229 -2099.083252  1740.000000        1740.000000  299.999756      199.999756
6 -14540.084473   156.000000 -16432.084473 -2099.083252  1740.000000        1740.000000  152.000000       99.999756
7 -13928.084473   612.000000 -16380.084229 -2099.083252  2152.000000        2152.000000  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:51:42]  --------------------------------------------------------------------------------
[07/13 21:51:42]  Iteration: 173
[07/13 21:51:46]  Generator returned sat in 2.416502 secs.
[07/13 21:51:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:47]  Improved number of small numbers from 56 to 89 out of a max of 89
[07/13 21:51:47]  Verifer returned sat in 0.248044 secs.
[07/13 21:51:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16383.131348    0.076660 -16583.131348 -2099.083496    0.000000           0.000000  200.000000      200.000000
1 -16283.131348  300.000000 -16483.131348 -2099.083496    0.000000           0.000000  200.000000      200.000000
2 -16283.131348    0.038086 -16483.131104 -2099.083496    0.000000           0.000000  199.999756      100.000000
3 -16183.093018  300.000000 -16283.131348 -2099.083496    0.038086           0.038086  100.000244      100.000244
4 -16183.093018    2.000000 -16283.131348 -2099.083496    0.038086           0.038086  100.000244        0.000244
5 -15782.093018  401.000000 -16083.131348 -2099.083496  201.038086         201.038086  100.000244      100.000244
6 -15782.093018    2.000000 -16083.131348 -2099.083496  201.038086         201.038086  100.000244        0.000244
7 -15381.093018  401.000000 -15983.131104 -2099.083496  302.038330         302.038330  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:51:47]  --------------------------------------------------------------------------------
[07/13 21:51:47]  Iteration: 174
[07/13 21:51:51]  Generator returned sat in 1.973145 secs.
[07/13 21:51:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:51]  Improved number of small numbers from 39 to 89 out of a max of 89
[07/13 21:51:51]  Verifer returned sat in 0.206032 secs.
[07/13 21:51:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15581.160400    0.076416 -15681.160645 -2099.083496    0.000000           0.000000  100.000244      100.000000
1 -15581.160400    0.019287 -15581.160400 -2099.083496    0.000000           0.000000    0.000000        0.000000
2 -15381.160400  200.000000 -15481.160400 -2099.083496    0.000000           0.000000  100.000000      100.000000
3 -15281.141357  200.000000 -15381.160400 -2099.083496    0.019043           0.019043  100.000000      100.000000
4 -15281.141357    2.000000 -15381.160400 -2099.083496    0.019043           0.019043  100.000000        0.000000
5 -14877.141357  404.000000 -15281.160400 -2099.083496  104.019043         104.019043  300.000000      200.000000
6 -14877.141357    2.000000 -15094.160400 -2099.083496  104.019043         104.019043  113.000000      100.000000
7 -14299.141357  578.000000 -15081.160400 -2099.083496  482.019287         482.019287  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:51:51]  --------------------------------------------------------------------------------
[07/13 21:51:51]  Iteration: 175
[07/13 21:51:55]  Generator returned sat in 1.779681 secs.
[07/13 21:51:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:51:55]  Improved gap from 1/400 to 50.0
[07/13 21:51:56]  Improved number of small numbers from 65 to 90 out of a max of 90
[07/13 21:51:56]  Verifer returned sat in 0.225995 secs.
[07/13 21:51:56]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15326.146484    0.076172 -15526.146484 -2099.083496    0.000000           0.000000  200.000000      200.000000
1 -15326.146484    0.007324 -15526.146484 -2099.083496    0.000000           0.000000  200.000000      100.000000
2 -14927.141602  399.005127 -15426.146240 -2099.083496  199.999756         199.999756  299.004883      199.005127
3 -14927.141602   50.002686 -15326.146484 -2099.083496  199.999756         199.999756  199.005127       99.005127
4 -14927.141602   50.002686 -15127.144043 -2099.083496  199.999756         199.999756    0.002686       -0.994873
5 -14877.141602   50.002686 -15126.146240 -2049.083740  199.999756         199.999756   49.004883       -0.995117
6 -14876.143799   50.002686 -15076.146240 -1999.083740  199.999756         199.999756    0.002686      -49.997314
7 -14826.143799   50.002686 -15026.146240 -1999.083496  199.999756         199.999756    0.002686      -99.997070
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:51:56]  --------------------------------------------------------------------------------
[07/13 21:51:56]  Iteration: 176
[07/13 21:52:00]  Generator returned sat in 2.015898 secs.
[07/13 21:52:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:52:00]  Improved gap from 39/2048 to 100
[07/13 21:52:00]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:52:00]  Verifer returned sat in 0.224021 secs.
[07/13 21:52:00]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15426.146484    0.076172 -15526.146484 -2099.083496     0.000000           0.000000  100.000000      100.000000
1 -15426.146484    0.019043 -15526.146484 -2099.083496     0.000000           0.000000  100.000000        0.000000
2 -15326.108398  200.038086 -15326.146484 -2099.083496     0.000000           0.000000    0.038086        0.038086
3 -15326.108398    0.019043 -15326.146484 -2099.083496     0.000000           0.000000    0.038086      -99.961914
4 -14926.070312  400.038086 -15226.146484 -2099.083496    98.038086          98.038086  202.038086      102.038086
5 -14926.070312  202.019043 -15063.146484 -2099.083496    98.038086          98.038086   39.038086        2.038086
6 -13996.032227  930.038086 -15026.146484 -2099.083496   730.114258         730.114258  300.000000      200.000000
7 -13529.013184  467.019043 -14926.146484 -2099.083496  1097.133301        1097.133301  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:52:01]  --------------------------------------------------------------------------------
[07/13 21:52:01]  Iteration: 177
[07/13 21:52:04]  Generator returned sat in 1.733745 secs.
[07/13 21:52:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:52:05]  Improved number of small numbers from 85 to 89 out of a max of 89
[07/13 21:52:05]  Verifer returned sat in 0.142270 secs.
[07/13 21:52:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15326.146729    0.075928 -15556.145508 -2099.083496        0.0                0.0  229.998779           200.0
1 -15326.146729    0.018799 -15526.146484 -2099.083496        0.0                0.0  199.999756           100.0
2 -15326.146729  199.999756 -15426.146729 -2099.083496        0.0                0.0  100.000000             0.0
3 -15326.146729    0.004883 -15326.146729 -2099.083496        0.0                0.0    0.000000          -100.0
4 -14866.146729  460.000000 -15226.146729 -2099.083496       60.0               60.0  300.000000           200.0
5 -14866.146729  232.000000 -15026.146729 -2099.083496       60.0               60.0  100.000000           100.0
6 -13950.146729  916.000000 -15026.146729 -2099.083496      776.0              776.0  300.000000           200.0
7 -13490.146729  460.000000 -14926.146484 -2099.083496     1136.0             1136.0  299.999756           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:52:05]  --------------------------------------------------------------------------------
[07/13 21:52:05]  Iteration: 178
[07/13 21:52:08]  Generator returned sat in 1.398911 secs.
[07/13 21:52:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:52:09]  Improved number of small numbers from 69 to 89 out of a max of 89
[07/13 21:52:09]  Verifer returned sat in 0.164345 secs.
[07/13 21:52:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15326.146729    0.075928 -15526.146729 -2099.083496     0.00000            0.00000  200.000000      200.000000
1 -15326.146729    0.018555 -15526.146484 -2099.083496     0.00000            0.00000  199.999756      100.000000
2 -15266.151611  259.994873 -15383.145508 -2099.083496     0.00000            0.00000  116.993896       59.995117
3 -15266.151611    0.004883 -15326.146729 -2099.083496     0.00000            0.00000   59.995117      -40.004883
4 -14866.146729  400.004883 -15226.146729 -2099.083496   157.99292          157.99292  202.007080      102.007080
5 -14866.146729  202.002441 -15026.146729 -2099.083496   157.99292          157.99292    2.007080        2.007080
6 -13950.146729  916.000000 -15026.146729 -2099.083496   776.00000          776.00000  300.000000      200.000000
7 -13490.146729  460.000000 -14926.146484 -2099.083496  1136.00000         1136.00000  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:52:09]  --------------------------------------------------------------------------------
[07/13 21:52:09]  Iteration: 179
[07/13 21:52:17]  Generator returned sat in 6.125201 secs.
[07/13 21:52:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:52:17]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:52:17]  Verifer returned sat in 0.121640 secs.
[07/13 21:52:17]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15326.146729    0.075928 -15526.146729 -2099.083496    0.000000           0.000000  200.000000      200.000000
1 -15326.146729    0.018555 -15526.146484 -2099.083496    0.000000           0.000000  199.999756      100.000000
2 -15126.146729  399.999756 -15383.145508 -2099.083496    0.000000           0.000000  256.998779      200.000000
3 -15126.146729  133.333333 -15226.146729 -2099.083496    0.000000           0.000000  100.000000      100.000000
4 -14926.146729  200.000000 -15128.156006 -2099.083496  100.000000         100.000000  102.009277      100.000000
5 -14926.146729  102.000000 -15079.137451 -2099.083496  100.000000         100.000000   52.990723        0.000000
6 -14826.137451  153.000000 -14926.146729 -2099.083496  100.000000         100.000000    0.009277        0.009277
7 -14596.637451  229.500000 -14926.146729 -2099.083496  100.009277         100.009277  229.500000      129.500000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:52:18]  --------------------------------------------------------------------------------
[07/13 21:52:18]  Iteration: 180
[07/13 21:52:26]  Generator returned sat in 5.845411 secs.
[07/13 21:52:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:52:26]  Improved number of small numbers from 42 to 89 out of a max of 89
[07/13 21:52:26]  Verifer returned sat in 0.260286 secs.
[07/13 21:52:26]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14576.322998     0.075928 -14876.322754 -2099.083496     0.000000           0.000000  299.999756      199.999756
1 -14576.322998     0.038086 -14676.322754 -2099.083496     0.000000           0.000000   99.999756       99.999756
2 -14376.322998   299.999756 -14656.322754 -2099.083496     0.000000           0.000000  279.999756      199.999756
3 -14376.322998   100.000000 -14476.322754 -2099.083496     0.000000           0.000000   99.999756       99.999756
4 -14276.284668   200.000000 -14476.322754 -2099.083496     0.038086           0.038086  200.000000      100.000000
5 -13576.284668   700.000000 -14376.322754 -2099.083496   500.038086         500.038086  300.000000      200.000000
6 -11966.284668  1610.000000 -14205.322754 -2099.083496  2010.038086        2010.038086  229.000000      200.000000
7  -9009.284668  2957.000000 -14176.322754 -2099.083496  4867.038086        4867.038086  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:52:26]  --------------------------------------------------------------------------------
[07/13 21:52:26]  Iteration: 181
[07/13 21:52:48]  Generator returned sat in 19.987952 secs.
[07/13 21:52:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:52:49]  Improved number of small numbers from 85 to 85 out of a max of 89
[07/13 21:52:49]  Verifer returned sat in 0.190321 secs.
[07/13 21:52:49]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -14576.322998     0.075928 -14776.322754 -2099.083496     0.000000           0.000000  199.999756      199.999756
1 -14576.322998     0.038086 -14676.322754 -2099.083496     0.000000           0.000000   99.999756       99.999756
2 -14376.322998   299.999756 -14656.322754 -2099.083496     0.000000           0.000000  279.999756      199.999756
3 -14376.322998   198.833333 -14575.989421 -2099.083496     0.000000           0.000000  199.666423       99.999756
4 -14176.284668   399.666667 -14476.322754 -2099.083496     0.038086           0.038086  300.000000      200.000000
5 -13476.284668   700.000000 -14376.322754 -2099.083496   600.038086         600.038086  300.000000      200.000000
6 -12285.784668  1190.500000 -14176.322754 -2099.083496  1690.538086        1690.538086  200.000000      200.000000
7 -10299.701335  1986.083333 -14176.322754 -2099.083496  3576.621419        3576.621419  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:52:49]  --------------------------------------------------------------------------------
[07/13 21:52:49]  Iteration: 182
[07/13 21:52:53]  Generator returned sat in 1.700958 secs.
[07/13 21:52:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:52:53]  Improved gap from 0 to 100
[07/13 21:52:53]  Improved number of small numbers from 54 to 90 out of a max of 90
[07/13 21:52:53]  Verifer returned sat in 0.315663 secs.
[07/13 21:52:53]  Counter example: 
[93m    arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15324.260254     0.075928 -15424.26001 -2099.08374     0.000000           0.000000   99.999756       99.999756
1 -15324.260254     0.037598 -15424.26001 -2099.08374     0.000000           0.000000   99.999756       -0.000244
2 -15224.260254   199.999756 -15311.26001 -2099.08374     0.000000           0.000000   86.999756       -0.000244
3 -15024.222412   287.000000 -15216.26001 -2099.08374     0.037598           0.037598  192.000000      100.000000
4 -14488.222412   536.000000 -15124.26001 -2099.08374   436.037598         436.037598  200.000000      100.000000
5 -13532.722412   955.500000 -14924.26001 -2099.08374  1191.537842        1191.537842  199.999756      199.999756
6 -11904.472412  1628.250000 -14924.26001 -2099.08374  2719.787598        2719.787598  300.000000      200.000000
7  -9314.597412  2589.875000 -14824.26001 -2099.08374  5306.980957        5306.980957  202.681641      102.681641
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:52:54]  --------------------------------------------------------------------------------
[07/13 21:52:54]  Iteration: 183
[07/13 21:53:01]  Generator returned sat in 5.657351 secs.
[07/13 21:53:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:02]  Improved gap from 77/8192 to 100
[07/13 21:53:02]  Improved number of small numbers from 81 to 90 out of a max of 90
[07/13 21:53:02]  Verifer returned sat in 0.173236 secs.
[07/13 21:53:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.222656    0.075684 -15374.222412 -1863.500244    0.000000           0.000000  149.999756       99.999756
1 -15224.222656    0.037598 -15324.222412 -1863.500244    0.000000           0.000000   99.999756       -0.000244
2 -15024.222656  299.999756 -15124.222412 -1863.500244    0.000000           0.000000   99.999756       99.999756
3 -15024.222412  100.000000 -15124.222412 -1863.500244    0.000000           0.000000  100.000000        0.000000
4 -14724.203857  400.000000 -14924.222656 -1863.500244    0.018555           0.018555  200.000244      200.000000
5 -14724.203857    1.500000 -14825.347412 -1863.500244    0.018555           0.018555  101.125000      100.000000
6 -14524.203857  301.125000 -14824.222412 -1863.500244    0.018555           0.018555  300.000000      200.000000
7 -13772.516357  751.687500 -14724.222412 -1863.500244  651.706055         651.706055  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:53:02]  --------------------------------------------------------------------------------
[07/13 21:53:02]  Iteration: 184
[07/13 21:53:06]  Generator returned sat in 1.779088 secs.
[07/13 21:53:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:06]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:53:06]  Verifer returned sat in 0.124165 secs.
[07/13 21:53:06]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.222656    0.075684 -15423.472412 -1863.500244    0.000000           0.000000  199.249756       99.999756
1 -15224.222656    0.037598 -15324.222412 -1863.500244    0.000000           0.000000   99.999756       -0.000244
2 -15024.222656  299.999756 -15124.972412 -1863.500244    0.000000           0.000000  100.749756       99.999756
3 -15024.222412  100.750000 -15124.222412 -1863.500244    0.000000           0.000000  100.000000        0.000000
4 -14724.203857  400.000000 -14924.222656 -1863.500244    0.018555           0.018555  200.000244      200.000000
5 -14724.203857    1.500000 -14825.347412 -1863.500244    0.018555           0.018555  101.125000      100.000000
6 -14524.203857  301.125000 -14824.222412 -1863.500244    0.018555           0.018555  300.000000      200.000000
7 -13923.078857  601.125000 -14724.222412 -1863.500244  601.143555         601.143555  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:53:06]  --------------------------------------------------------------------------------
[07/13 21:53:06]  Iteration: 185
[07/13 21:53:14]  Generator returned sat in 5.040340 secs.
[07/13 21:53:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:14]  Improved number of small numbers from 83 to 85 out of a max of 89
[07/13 21:53:14]  Verifer returned sat in 0.265688 secs.
[07/13 21:53:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.222900    0.075684 -15423.472656 -1863.500732    0.000000           0.000000  199.249756       99.999512
1 -15224.222900    0.037354 -15324.222412 -1863.500732    0.000000           0.000000   99.999512       -0.000488
2 -15024.222900  299.999512 -15124.222412 -1863.500732    0.000000           0.000000   99.999512       99.999512
3 -15024.222900   50.374756 -15124.222412 -1863.500488    0.000000           0.000000   99.999512       -0.000244
4 -14724.204102  399.999756 -14924.223145 -1863.500488    0.018555           0.018555  200.000488      200.000000
5 -14724.204102    1.500000 -14825.722534 -1863.500488    0.018555           0.018555  101.499878      100.000000
6 -14524.204102  301.499878 -14824.222656 -1863.500488    0.018555           0.018555  300.000000      200.000000
7 -13621.204590  902.999512 -14724.222412 -1863.500488  803.018066         803.018066  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:53:14]  --------------------------------------------------------------------------------
[07/13 21:53:14]  Iteration: 186
[07/13 21:53:19]  Generator returned sat in 3.017215 secs.
[07/13 21:53:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:20]  Improved number of small numbers from 81 to 89 out of a max of 89
[07/13 21:53:20]  Verifer returned sat in 0.125230 secs.
[07/13 21:53:20]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.222900    0.075684 -15423.473145 -1863.500977    0.000000           0.000000  199.250244       99.999512
1 -15224.222900    0.037109 -15324.222412 -1863.500977    0.000000           0.000000   99.999512       -0.000488
2 -14957.546631  366.675781 -15224.222412 -1863.500977    0.000000           0.000000  266.675781      166.675781
3 -14957.546631  266.666667 -15124.222412 -1863.500977    0.000000           0.000000  166.675781       66.675781
4 -14724.204346  400.000000 -14925.731445 -1863.500977    0.018066           0.018066  201.509033      200.000000
5 -14724.204346  201.500000 -14826.472656 -1863.500977    0.018066           0.018066  102.250244      100.000000
6 -14524.204590  302.250000 -14824.222412 -1863.500977    0.018066           0.018066  299.999756      199.999756
7 -14070.829590  453.375000 -14724.222412 -1863.500977  453.392822         453.392822  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:53:20]  --------------------------------------------------------------------------------
[07/13 21:53:20]  Iteration: 187
[07/13 21:53:24]  Generator returned sat in 1.757271 secs.
[07/13 21:53:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:24]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:53:24]  Verifer returned sat in 0.108612 secs.
[07/13 21:53:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.222900    0.075684 -15423.473145 -1863.500977    0.000000           0.000000  199.250244       99.999512
1 -15224.222900    0.037109 -15324.222412 -1863.500977    0.000000           0.000000   99.999512       -0.000488
2 -14957.546631  366.675781 -15224.222412 -1863.500977    0.000000           0.000000  266.675781      166.675781
3 -14957.546631  149.625000 -15024.222412 -1863.500977    0.000000           0.000000   66.675781       66.675781
4 -14724.954346  299.250000 -14925.731445 -1863.500977    0.018066           0.018066  200.759033      199.250000
5 -14724.954346  151.125000 -14826.472656 -1863.500977    0.018066           0.018066  101.500244       99.250000
6 -14524.204590  302.250000 -14824.222412 -1863.500977    0.018066           0.018066  299.999756      199.999756
7 -13919.704590  604.500000 -14724.222412 -1863.500977  604.517822         604.517822  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:53:24]  --------------------------------------------------------------------------------
[07/13 21:53:24]  Iteration: 188
[07/13 21:53:30]  Generator returned sat in 3.484369 secs.
[07/13 21:53:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:30]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:53:30]  Verifer returned sat in 0.106504 secs.
[07/13 21:53:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.223145    0.075439 -15423.473145 -1863.500977    0.000000           0.000000  199.250000       99.999512
1 -15224.223145    0.036865 -15324.222412 -1863.500977    0.000000           0.000000   99.999268       -0.000488
2 -14957.546631  366.675781 -15224.222656 -1863.500977    0.000000           0.000000  266.676025      166.676025
3 -14957.546631  149.625000 -15024.222656 -1863.500977    0.000000           0.000000   66.676025       66.676025
4 -14724.954590  299.250000 -14927.222412 -1863.500977    0.018066           0.018066  202.249756      199.250000
5 -14724.954590  200.000000 -14924.222656 -1863.500977    0.018066           0.018066  199.250000       99.250000
6 -14524.204590  400.000000 -14824.222412 -1863.500977    0.018066           0.018066  299.999756      200.000000
7 -13724.204590  800.000000 -14724.222412 -1863.500977  700.018066         700.018066  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=0.[0m
[07/13 21:53:31]  --------------------------------------------------------------------------------
[07/13 21:53:31]  Iteration: 189
[07/13 21:53:35]  Generator returned sat in 2.268253 secs.
[07/13 21:53:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:35]  Improved number of small numbers from 87 to 87 out of a max of 89
[07/13 21:53:35]  Verifer returned sat in 0.127880 secs.
[07/13 21:53:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.222900    0.075195 -15424.222900 -1863.501221    0.000000           0.000000  200.000000       100.00000
1 -15224.222900    0.036865 -15224.231934 -1863.501221    0.000000           0.000000    0.009033         0.00000
2 -14957.546631  266.685303 -15224.222900 -1863.501221    0.000000           0.000000  266.676270       166.67627
3 -14957.546631  199.500000 -15024.222900 -1863.501221    0.000000           0.000000   66.676270        66.67627
4 -14724.954834  299.250000 -14993.148600 -1863.501221    0.018066           0.018066  268.175700       199.25000
5 -14724.954834  266.666667 -14924.222900 -1863.501221    0.018066           0.018066  199.250000        99.25000
6 -14524.195801  400.000000 -14724.222900 -1863.501221    0.027100           0.027100  200.000000       200.00000
7 -14172.695801  351.500000 -14724.222900 -1863.501221  251.527100         251.527100  300.000000       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:53:36]  --------------------------------------------------------------------------------
[07/13 21:53:36]  Iteration: 190
[07/13 21:53:40]  Generator returned sat in 1.668950 secs.
[07/13 21:53:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:40]  Improved number of small numbers from 54 to 89 out of a max of 89
[07/13 21:53:40]  Verifer returned sat in 0.238513 secs.
[07/13 21:53:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15224.213867    0.074951 -15379.198242 -1863.501465    0.000000           0.000000  154.984375       54.984375
1 -15224.213867    0.036621 -15224.231934 -1863.501465    0.000000           0.000000    0.018066      -45.015625
2 -14903.178711  321.053223 -15079.198242 -1863.501465    0.000000           0.000000  176.019531      176.019531
3 -14903.178711  176.001465 -15079.198242 -1863.501465    0.000000           0.000000  176.019531       76.019531
4 -14727.177002  352.002930 -14979.198242 -1863.501465    0.018311           0.018311  252.002930      152.002930
5 -14427.158691  300.018311 -14780.204346 -1863.501465  252.039551         252.039551  101.006104      100.000000
6 -14227.140381  301.006104 -14679.198486 -1863.501465  252.057861         252.057861  200.000244      200.000000
7 -13875.137451  352.002930 -14679.198242 -1863.501465  604.060791         604.060791  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:53:40]  --------------------------------------------------------------------------------
[07/13 21:53:40]  Iteration: 191
[07/13 21:53:45]  Generator returned sat in 2.235765 secs.
[07/13 21:53:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:45]  Improved gap from 97/3 to 100
[07/13 21:53:45]  Improved number of small numbers from 50 to 67 out of a max of 90
[07/13 21:53:45]  Verifer returned sat in 0.584796 secs.
[07/13 21:53:45]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15442.853027    0.074951 -15577.204468 -1863.501465    0.000000           0.000000  134.351440      134.351440
1 -15442.853027    0.036377 -15477.204590 -1863.501465    0.000000           0.000000   34.351562       34.351440
2 -15442.853027    0.009277 -15442.871134 -1863.501465    0.000000           0.000000    0.018107      -65.648560
3 -15077.195312  365.666667 -15337.804468 -1863.501465    0.009155           0.009155  260.600000      200.000000
4 -14977.186157  360.600000 -15177.204590 -1863.501465    0.018311           0.018311  200.000122      200.000000
5 -14525.686157  451.500000 -15177.204468 -1863.501465  451.518066         451.518066  200.000244      100.000244
6 -14325.677002  400.000000 -15077.204468 -1863.501465  451.527466         451.527466  300.000000      200.000000
7 -13933.277002  392.400000 -14977.204346 -1863.501465  751.527588         751.527588  292.399756      192.399878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:53:46]  --------------------------------------------------------------------------------
[07/13 21:53:46]  Iteration: 192
[07/13 21:53:50]  Generator returned sat in 1.796649 secs.
[07/13 21:53:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:50]  Improved number of small numbers from 39 to 62 out of a max of 89
[07/13 21:53:50]  Verifer returned sat in 0.622284 secs.
[07/13 21:53:50]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15377.204590     0.074707 -15677.204346 -1863.501465     0.000000           0.000000  299.999756      199.999878
1 -15377.204590     0.036377 -15477.204590 -1863.501465     0.000000           0.000000  100.000000       99.999878
2 -15377.204590     0.018311 -15391.222656 -1863.501465     0.000000           0.000000   14.018066       -0.000122
3 -15177.192342   214.030314 -15298.249939 -1863.501465     0.000000           0.000000  121.057597      100.012126
4 -14977.204468   321.045471 -15177.204590 -1863.501465     0.000000           0.000000  200.000122      200.000000
5 -14495.636261   481.568207 -15177.204468 -1863.501465   481.568115         481.568115  200.000092      100.000092
6 -13450.756668  1044.879593 -15077.204468 -1863.501465  1326.447998        1326.447998  299.999802      199.999802
7 -11550.369072  1900.387596 -14977.204346 -1863.501465  3226.835205        3226.835205  200.000069      100.000191
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:53:51]  --------------------------------------------------------------------------------
[07/13 21:53:51]  Iteration: 193
[07/13 21:53:55]  Generator returned sat in 1.812994 secs.
[07/13 21:53:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:53:55]  Improved number of small numbers from 48 to 89 out of a max of 89
[07/13 21:53:55]  Verifer returned sat in 0.205044 secs.
[07/13 21:53:55]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16378.718262     0.074463 -16378.736572 -1161.969482     0.000000           0.000000    0.018311      -99.981689
1 -15978.736572   400.000000 -16178.736572 -1161.969482     0.000000           0.000000  200.000000      200.000000
2 -15678.755371   300.000000 -16078.736572 -1161.969482   199.981201         199.981201  200.000000      200.000000
3 -15678.755371    50.009277 -16078.736572 -1161.969482   199.981201         199.981201  200.000000      100.000000
4 -15678.755371   100.018555 -15878.773682 -1161.969482   199.981201         199.981201    0.037109        0.000000
5 -15478.736572   200.037109 -15878.736572 -1161.969482   200.000000         200.000000  200.000000      100.000000
6 -14877.180908   601.555664 -15678.773682 -1161.969482   601.555664         601.555664  200.037109      200.000000
7 -13373.403076  1503.777832 -15678.736572 -1161.969482  2005.333496        2005.333496  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:53:55]  --------------------------------------------------------------------------------
[07/13 21:53:55]  Iteration: 194
[07/13 21:54:00]  Generator returned sat in 2.074776 secs.
[07/13 21:54:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:54:00]  Improved gap from 19/1024 to 100
[07/13 21:54:00]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:54:00]  Verifer returned sat in 0.163136 secs.
[07/13 21:54:00]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16429.643799     0.074463 -16529.680908 -1161.969482        0.0                0.0  100.037109      100.037109
1 -16429.643799   100.037109 -16429.680908 -1161.969482        0.0                0.0    0.037109        0.037109
2 -16229.680908   200.000000 -16329.680908 -1161.969482        0.0                0.0  100.000000      100.000000
3 -16229.680908   100.000000 -16329.680908 -1161.969482        0.0                0.0  100.000000        0.000000
4 -16029.680908   300.000000 -16178.680908 -1161.969482        0.0                0.0  149.000000      100.000000
5 -15478.680908   551.000000 -16129.680908 -1161.969482      351.0              351.0  300.000000      200.000000
6 -14350.680908  1128.000000 -16023.680908 -1161.969482     1379.0             1379.0  294.000000      200.000000
7 -12198.180908  2152.500000 -15829.680908 -1161.969482     3431.5             3431.5  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:00]  --------------------------------------------------------------------------------
[07/13 21:54:00]  Iteration: 195
[07/13 21:54:06]  Generator returned sat in 3.802059 secs.
[07/13 21:54:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/13 21:54:07]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:54:07]  Verifer returned sat in 0.183105 secs.
[07/13 21:54:07]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16429.644043     0.074219 -16529.680908 -1161.969482       0.00               0.00  100.036865      100.036865
1 -16429.643799   100.037109 -16529.680908 -1161.969482       0.00               0.00  100.037109        0.037109
2 -16229.681152   299.999756 -16329.680908 -1161.969482       0.00               0.00   99.999756       99.999756
3 -16229.681152    99.999756 -16329.680908 -1161.969482       0.00               0.00   99.999756       -0.000244
4 -16129.680908   200.000000 -16129.680908 -1161.969482       0.00               0.00    0.000000        0.000000
5 -15729.680908   400.000000 -16129.680908 -1161.969482     200.00             200.00  200.000000      100.000000
6 -14828.180908   901.500000 -16023.680908 -1161.969482     901.50             901.50  294.000000      200.000000
7 -13015.430908  1812.750000 -15829.680908 -1161.969482    2614.25            2614.25  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:07]  --------------------------------------------------------------------------------
[07/13 21:54:07]  Iteration: 196
[07/13 21:54:24]  Generator returned sat in 15.124079 secs.
[07/13 21:54:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:25]  Improved gap from 6536307/65536 to 100
[07/13 21:54:25]  Improved number of small numbers from 34 to 90 out of a max of 90
[07/13 21:54:25]  Verifer returned sat in 0.265203 secs.
[07/13 21:54:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16078.254883    0.073730 -16078.273438 -1613.377441     0.000000           0.000000    0.018555        0.018555
1 -16078.254883    0.018311 -16078.273438 -1613.377441     0.000000           0.000000    0.018555      -99.981445
2 -15878.273438  200.000000 -15878.291992 -1613.377441     0.000000           0.000000    0.018555        0.000000
3 -15878.273438    0.018555 -15878.273438 -1613.377441     0.000000           0.000000    0.000000     -100.000000
4 -15477.745605  400.527832 -15678.273438 -1613.377441     0.527832           0.527832  200.000000      200.000000
5 -14677.745605  800.000000 -15578.273438 -1613.377441   800.527588         800.527588  100.000244      100.000244
6 -14077.708496  600.037109 -15478.273438 -1613.377441  1200.564941        1200.564941  200.000000      200.000000
7 -13277.708496  800.000000 -15478.273438 -1613.377441  2000.564697        2000.564697  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:25]  --------------------------------------------------------------------------------
[07/13 21:54:25]  Iteration: 197
[07/13 21:54:30]  Generator returned sat in 2.594621 secs.
[07/13 21:54:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:30]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:54:30]  Verifer returned sat in 0.106106 secs.
[07/13 21:54:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16078.254883    0.073730 -16078.287354 -1613.377441     0.000000           0.000000    0.032471        0.018555
1 -16078.254883    0.018311 -16078.273438 -1613.377441     0.000000           0.000000    0.018555      -99.981445
2 -15878.273438  200.000000 -15878.291992 -1613.377441     0.000000           0.000000    0.018555        0.000000
3 -15878.273438    0.018555 -15878.273438 -1613.377441     0.000000           0.000000    0.000000     -100.000000
4 -15477.745605  400.527832 -15678.273438 -1613.377441     0.527832           0.527832  200.000000      200.000000
5 -14677.745605  800.000000 -15578.273438 -1613.377441   800.527588         800.527588  100.000244      100.000244
6 -14077.708496  600.037109 -15478.273438 -1613.377441  1200.564941        1200.564941  200.000000      200.000000
7 -13277.708496  800.000000 -15478.273438 -1613.377441  2000.564697        2000.564697  200.000244      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:31]  --------------------------------------------------------------------------------
[07/13 21:54:31]  Iteration: 198
[07/13 21:54:35]  Generator returned sat in 1.841335 secs.
[07/13 21:54:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:35]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:54:35]  Verifer returned sat in 0.142622 secs.
[07/13 21:54:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16078.255127    0.073730 -16078.287598 -1613.377441     0.000000           0.000000    0.032471        0.018555
1 -16078.255127    0.018066 -16078.273682 -1613.377441     0.000000           0.000000    0.018555      -99.981445
2 -15878.273682  200.000000 -15878.292236 -1613.377441     0.000000           0.000000    0.018555        0.000000
3 -15878.273682    0.018555 -15878.273682 -1613.377441     0.000000           0.000000    0.000000     -100.000000
4 -15477.736572  400.537109 -15678.278320 -1613.377441     0.537109           0.537109  200.004639      200.000000
5 -14677.745850  799.990723 -15578.273682 -1613.377441   800.527588         800.527588  100.000244      100.000244
6 -14077.708740  600.037109 -15478.273682 -1613.377441  1200.564941        1200.564941  200.000000      200.000000
7 -13277.708740  800.000000 -15478.273438 -1613.377441  2000.564697        2000.564697  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:35]  --------------------------------------------------------------------------------
[07/13 21:54:35]  Iteration: 199
[07/13 21:54:41]  Generator returned sat in 3.614945 secs.
[07/13 21:54:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:42]  Improved number of small numbers from 76 to 85 out of a max of 89
[07/13 21:54:42]  Verifer returned sat in 0.263543 secs.
[07/13 21:54:42]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15978.273438     0.073486 -16144.952881 -1613.37793     0.000000           0.000000  166.679443      100.000244
1 -15978.273438   166.678955 -15978.273682 -1613.37793     0.000000           0.000000    0.000244        0.000244
2 -15878.273682   100.000000 -15878.292725 -1613.37793     0.000000           0.000000    0.019043        0.000000
3 -15878.273682     0.018311 -15878.273682 -1613.37793     0.000000           0.000000    0.000000     -100.000000
4 -15477.736572   400.537109 -15678.412598 -1613.37793     0.537109           0.537109  200.138916      200.000000
5 -14677.745850   799.990723 -15578.274170 -1613.37793   800.527100         800.527100  100.001221      100.000732
6 -13677.713379  1000.032471 -15478.273682 -1613.37793  1600.560303        1600.560303  200.000000      200.000000
7 -12377.697144  1300.016235 -15478.273682 -1613.37793  2800.576660        2800.576660  299.999878      199.999878
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:42]  --------------------------------------------------------------------------------
[07/13 21:54:42]  Iteration: 200
[07/13 21:54:47]  Generator returned sat in 2.394528 secs.
[07/13 21:54:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:47]  Improved number of small numbers from 65 to 89 out of a max of 89
[07/13 21:54:47]  Verifer returned sat in 0.151772 secs.
[07/13 21:54:47]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15978.273438    0.073242 -16178.273682 -1613.378174     0.000000           0.000000  200.000244      100.000244
1 -15978.273438  166.678955 -15978.273926 -1613.378174     0.000000           0.000000    0.000488        0.000244
2 -15878.273926  100.000000 -15878.292725 -1613.378174     0.000000           0.000000    0.018799       -0.000244
3 -15878.273682    0.019043 -15878.273682 -1613.378174     0.000000           0.000000    0.000000     -100.000000
4 -15427.754639  450.519043 -15678.412842 -1613.378174    50.519043          50.519043  200.139160      200.000000
5 -14828.032471  599.722168 -15578.274170 -1613.378174   650.241211         650.241211  100.000488      100.000000
6 -14227.995361  600.037109 -15478.273682 -1613.378174  1050.278320        1050.278320  200.000000      200.000000
7 -13427.995361  800.000000 -15478.273682 -1613.378174  1850.278320        1850.278320  200.000000      100.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:47]  --------------------------------------------------------------------------------
[07/13 21:54:47]  Iteration: 201
[07/13 21:54:52]  Generator returned sat in 2.416868 secs.
[07/13 21:54:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:52]  Improved number of small numbers from 76 to 79 out of a max of 89
[07/13 21:54:52]  Verifer returned sat in 0.290712 secs.
[07/13 21:54:52]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15978.273682    0.073242 -16178.273682 -1613.378418     0.000000           0.000000  200.000000      100.000000
1 -15978.273682  166.678711 -15978.273926 -1613.378418     0.000000           0.000000    0.000244        0.000000
2 -15878.274170   99.999756 -15878.292725 -1613.378418     0.000000           0.000000    0.018555       -0.000488
3 -15878.266064    0.026660 -15878.266064 -1613.378418     0.000000           0.000000    0.000000      -99.992383
4 -15427.754639  450.511426 -15678.412842 -1613.378418    50.519043          50.519043  200.139160      200.000000
5 -14828.032471  599.722168 -15578.274170 -1613.378418   650.240967         650.240967  100.000732      100.000244
6 -14227.995361  600.037109 -15478.273682 -1613.378418  1050.278320        1050.278320  200.000000      200.000000
7 -13428.010596  799.984766 -15478.273682 -1613.378418  1850.262939        1850.262939  200.000146      100.000146
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:53]  --------------------------------------------------------------------------------
[07/13 21:54:53]  Iteration: 202
[07/13 21:54:57]  Generator returned sat in 1.818752 secs.
[07/13 21:54:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:54:57]  Improved gap from 0 to 100
[07/13 21:54:57]  Improved number of small numbers from 90 to 90 out of a max of 90
[07/13 21:54:57]  Verifer returned sat in 0.151490 secs.
[07/13 21:54:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15978.237549    0.073242 -16078.274170 -1613.378418     0.000000           0.000000  100.036621      100.036621
1 -15978.237549    0.036621 -15978.274170 -1613.378418     0.000000           0.000000    0.036621        0.036621
2 -15977.347412    0.926758 -15977.347412 -1613.378418     0.000000           0.000000    0.000000      -99.073242
3 -15778.274170  199.073242 -15878.274170 -1613.378418     0.000000           0.000000  100.000000        0.000000
4 -15378.237549  400.036621 -15778.274170 -1613.378418   100.036621         100.036621  300.000000      200.000000
5 -15278.200928  400.000000 -15578.274170 -1613.378418   100.073242         100.073242  200.000000      200.000000
6 -14480.054443  798.146484 -15478.274170 -1613.378418   898.219727         898.219727  100.000000      100.000000
7 -13680.054443  800.000000 -15478.274170 -1613.378418  1498.219727        1498.219727  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:54:57]  --------------------------------------------------------------------------------
[07/13 21:54:57]  Iteration: 203
[07/13 21:55:02]  Generator returned sat in 2.731225 secs.
[07/13 21:55:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:55:03]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:55:03]  Verifer returned sat in 0.105642 secs.
[07/13 21:55:03]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -15978.256104    0.073242 -16078.274414 -1613.378418     0.000000           0.000000  100.018311      100.018311
1 -15978.256104    0.036621 -15978.274414 -1613.378418     0.000000           0.000000    0.018311        0.018311
2 -15977.347656    0.926758 -15977.347656 -1613.378418     0.000000           0.000000    0.000000      -99.073242
3 -15778.274414  199.073242 -15878.274414 -1613.378418     0.000000           0.000000  100.000000        0.000000
4 -15079.627930  698.646484 -15778.274414 -1613.378418   398.646484         398.646484  300.000000      200.000000
5 -14979.609619  400.000000 -15678.274414 -1613.378418   398.664795         398.664795  300.000000      200.000000
6 -14381.463135  598.146484 -15478.274414 -1613.378418   898.219482         898.219482  198.591797      198.591797
7 -13581.463135  800.000000 -15478.274170 -1613.378418  1596.811279        1596.811279  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:03]  --------------------------------------------------------------------------------
[07/13 21:55:03]  Iteration: 204
[07/13 21:55:08]  Generator returned sat in 2.892889 secs.
[07/13 21:55:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:55:09]  Improved gap from 16831/32768 to 100
[07/13 21:55:09]  Improved number of small numbers from 30 to 45 out of a max of 90
[07/13 21:55:09]  Verifer returned sat in 0.828276 secs.
[07/13 21:55:09]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -16273.366798     0.072998 -16473.366798 -1218.286034     0.000000           0.000000  200.000000      200.000000
1 -16273.366798     0.036377 -16373.366943 -1218.286034     0.000000           0.000000  100.000145      100.000000
2 -16273.366798    99.999756 -16273.366798 -1218.286034     0.000000           0.000000    0.000000        0.000000
3 -16273.357704     0.009094 -16273.366798 -1218.286034     0.000000           0.000000    0.009094      -99.990906
4 -15972.848610   300.513641 -16073.366943 -1218.286034     0.004547           0.004547  100.513786      100.513641
5 -15222.591789   750.256821 -16040.366798 -1218.286034   550.775146         550.775146  266.999863      199.999863
6 -14381.463379   841.128410 -15915.115662 -1218.286034  1291.903564        1291.903564  241.748718      199.999855
7 -13244.396900  1137.066479 -15873.366699 -1218.286034  2328.969971        2328.969971  299.999828      199.999928
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:10]  --------------------------------------------------------------------------------
[07/13 21:55:10]  Iteration: 205
[07/13 21:55:14]  Generator returned sat in 2.157368 secs.
[07/13 21:55:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:55:14]  Improved gap from 0 to 100
[07/13 21:55:15]  Improved number of small numbers from 32 to 90 out of a max of 90
[07/13 21:55:15]  Verifer returned sat in 0.293284 secs.
[07/13 21:55:15]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19023.883789     0.072754 -19123.920166 -1218.285889     0.000000           0.000000  100.036377      100.036377
1 -19023.883789     0.036621 -19023.920166 -1218.285889     0.000000           0.000000    0.036377        0.036377
2 -18723.920166   300.000000 -18923.920166 -1218.285889     0.000000           0.000000  200.000000      200.000000
3 -18723.883545   200.000000 -18923.920166 -1218.285889     0.036621           0.036621  200.000000      100.000000
4 -18023.883545   700.000000 -18771.920166 -1218.285889   500.036621         500.036621  248.000000      200.000000
5 -16469.883545  1554.000000 -18714.920166 -1218.285889  1954.036621        1954.036621  291.000000      200.000000
6 -13720.883545  2749.000000 -18623.920166 -1218.285889  4603.036621        4603.036621  300.000000      200.000000
7  -8997.383545  4723.500000 -18523.919922 -1218.285889  9226.536621        9226.536621  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:15]  --------------------------------------------------------------------------------
[07/13 21:55:15]  Iteration: 206
[07/13 21:55:22]  Generator returned sat in 4.662294 secs.
[07/13 21:55:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/13 21:55:22]  Improved number of small numbers from 89 to 89 out of a max of 89
[07/13 21:55:22]  Verifer returned sat in 0.196025 secs.
[07/13 21:55:22]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -19023.919922     0.072754 -19323.919922 -1118.286133     0.000000           0.000000    300.0           200.0
1 -19023.919922     0.036377 -19160.919922 -1118.286133     0.000000           0.000000    137.0           100.0
2 -18823.919922   337.000000 -19119.919922 -1118.286133     0.000000           0.000000    296.0           200.0
3 -18723.883545   396.000000 -18923.919922 -1118.286133     0.036377           0.036377    200.0           200.0
4 -17725.883545   998.000000 -18823.919922 -1118.286133   898.036377         898.036377    200.0           200.0
5 -16552.883545  1173.000000 -18723.919922 -1118.286133  1971.036377        1971.036377    200.0           200.0
6 -15174.383545  1378.500000 -18623.919922 -1118.286133  3249.536377        3249.536377    200.0           200.0
7 -13885.133545  1289.250000 -18623.919922 -1118.286133  4438.786377        4438.786377    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:23]  --------------------------------------------------------------------------------
[07/13 21:55:23]  Iteration: 207
[07/13 21:55:28]  Generator returned sat in 3.115778 secs.
[07/13 21:55:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/13 21:55:29]  Improved number of small numbers from 83 to 89 out of a max of 89
[07/13 21:55:29]  Verifer returned sat in 0.148852 secs.
[07/13 21:55:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -19023.920410    0.072754 -19322.920166 -1118.286133     0.000000           0.000000  298.999756      199.999756
1 -19023.920410    0.036377 -19160.920166 -1118.286133     0.000000           0.000000  136.999756       99.999756
2 -18823.920166  337.000000 -19122.992920 -1118.286133     0.000000           0.000000  299.072754      200.000000
3 -18424.883789  399.072754 -18973.420166 -1118.286133   299.036377         299.036377  249.500000      200.000000
4 -17725.883789  699.000000 -18823.920166 -1118.286133   998.036377         998.036377  100.000000      100.000000
5 -17051.883789  674.000000 -18723.920410 -1118.286133  1472.036377        1472.036377  200.000244      200.000000
6 -16253.738770  798.145020 -18623.920166 -1118.286133  2170.181641        2170.181641  199.999756      199.999756
7 -15554.738770  699.000000 -18623.920166 -1118.286133  2769.181641        2769.181641  299.999756      199.999756
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:29]  --------------------------------------------------------------------------------
[07/13 21:55:29]  Iteration: 208
[07/13 21:55:37]  Generator returned sat in 5.660408 secs.
[07/13 21:55:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:55:37]  Improved number of small numbers from 42 to 89 out of a max of 89
[07/13 21:55:37]  Verifer returned sat in 0.247860 secs.
[07/13 21:55:37]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18806.347656    0.072754 -19046.347656 -1335.858643     0.000000           0.000000  240.000000           200.0
1 -18806.347656    0.036377 -19006.347656 -1335.858643     0.000000           0.000000  200.000000           100.0
2 -18606.347656  400.000000 -18906.347412 -1335.858643     0.000000           0.000000  299.999756           200.0
3 -18206.384033  399.999756 -18726.347656 -1335.858643   299.963623         299.963623  220.000000           200.0
4 -17725.884033  480.500000 -18606.347656 -1335.858643   780.463623         780.463623  100.000000           100.0
5 -17125.384033  600.500000 -18541.347412 -1335.858643  1180.963623        1180.963623  234.999756           200.0
6 -16577.384033  548.000000 -18406.347656 -1335.858643  1728.963623        1728.963623  100.000000           100.0
7 -16096.884033  480.500000 -18406.347412 -1335.858643  2109.463623        2109.463623  199.999756           100.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:38]  --------------------------------------------------------------------------------
[07/13 21:55:38]  Iteration: 209
[07/13 21:55:42]  Generator returned sat in 2.107815 secs.
[07/13 21:55:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t-c.R] > Ld_f[0][t-c.R-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/13 21:55:43]  Improved number of small numbers from 65 to 89 out of a max of 89
[07/13 21:55:43]  Verifer returned sat in 0.219620 secs.
[07/13 21:55:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -18806.347900    0.072510 -19046.347900 -1335.858887     0.000000           0.000000  240.000000      199.999756
1 -18806.347900    0.036377 -19006.347656 -1335.858887     0.000000           0.000000  199.999756       99.999756
2 -18606.347656  400.000000 -18906.347412 -1335.858887     0.000000           0.000000  299.999756      200.000000
3 -18206.384033  399.999756 -18726.347900 -1335.858887   299.963623         299.963623  220.000244      200.000000
4 -17726.384033  480.000000 -18606.347656 -1335.858887   779.963379         779.963379  100.000244      100.000244
5 -17126.384033  600.000000 -18541.347412 -1335.858887  1180.963379        1180.963379  234.000000      199.000244
6 -16578.884033  547.500000 -18406.347900 -1335.858887  1727.463623        1727.463623  100.000244      100.000000
7 -16098.884033  480.000000 -18406.347412 -1335.858887  2107.463379        2107.463379  200.000000      100.000244
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=1.[0m
[07/13 21:55:43]  --------------------------------------------------------------------------------
[07/13 21:55:43]  Iteration: 210
