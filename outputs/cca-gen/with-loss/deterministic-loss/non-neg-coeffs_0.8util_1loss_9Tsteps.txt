[07/18 15:40:23]  --------------------------------------------------------------------------------
[07/18 15:40:23]  Iteration: 1 (0 solution, 0 counterexamples)
[07/18 15:40:23]  Generator returned sat in 0.004342 secs.
[07/18 15:40:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:40:24]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/18 15:40:24]  Verifer returned sat in 0.321033 secs.
[07/18 15:40:24]  Counter example: 
[93m   arrival_0,t  cwnd_0,t  service_0,t  wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0    -20304.75       0.1    -20304.85  20304.85        0.0                0.0      0.1             0.1
1    -20004.75     300.1    -20204.85  20304.85        0.1                0.0    200.0           200.0
2    -19904.65     300.1    -20104.85  20304.85        0.2                0.1    200.0           200.0
3    -19804.55     300.1    -20104.85  20304.85        0.3                0.2    300.0           200.0
4    -19102.35    1002.2    -19922.85  20304.85      602.5                0.3    218.0           200.0
5    -16749.95    2570.4    -19838.85  20304.85     2854.9              602.5    234.0           200.0
6    -11309.15    5674.8    -19804.85  20304.85     8195.7             2854.9    300.0           200.0
7       342.45   11951.6    -19704.85  20304.85    19747.3             8195.7    300.0           200.0
8     24383.65   24341.2    -19604.85  20304.85    43688.5            19747.3    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=5.[0m
[07/18 15:40:24]  --------------------------------------------------------------------------------
[07/18 15:40:24]  Iteration: 2 (0 solution, 1 counterexamples)
[07/18 15:40:24]  Generator returned sat in 0.025714 secs.
[07/18 15:40:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:40:24]  Improved gap from 0 to 0
[07/18 15:40:24]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:40:24]  Verifer returned sat in 0.212391 secs.
[07/18 15:40:24]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  24386.695000    0.099854  24386.693333 -24486.693333   0.000000           0.000000    0.001667      -99.998333
1  24786.695000  400.001667  24586.693333 -24486.693333   0.001667           0.000000  200.000000      200.000000
2  24886.688333  299.993333  24686.693333 -24486.693333   0.001667           0.001667  199.993333      199.993333
3  24886.688333  199.993333  24786.693333 -24486.693333   0.001667           0.001667   99.993333       99.993333
4  24886.688333    0.010000  24886.685000 -24486.693333   0.001667           0.001667    0.001667       -0.006667
5  24886.696667    0.010000  24886.693333 -24386.701667   0.001667           0.001667    0.001667       -0.006667
6  24886.705000    0.010000  24886.701667 -24286.703333   0.001667           0.001667    0.001667        0.000000
7  24886.713333    0.010000  24886.710000 -24186.720000   0.001667           0.001667    0.001667       -0.008333
8  24886.721667    0.010000  24886.720000 -24186.720000   0.001667           0.001667    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 15:40:24]  --------------------------------------------------------------------------------
[07/18 15:40:24]  Iteration: 3 (0 solution, 2 counterexamples)
[07/18 15:40:24]  Generator returned sat in 0.021110 secs.
[07/18 15:40:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:40:25]  Improved gap from 0 to 12.5
[07/18 15:40:25]  Improved number of small numbers from 81 to 100 out of a max of 100
[07/18 15:40:25]  Verifer returned sat in 0.859903 secs.
[07/18 15:40:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  24462.143437    0.099609  24262.093750 -24349.170166        0.0                0.0  200.049688      100.049932
1  24462.143555  200.049805  24362.093750 -24349.170166        0.0                0.0  100.049805        0.050049
2  24462.143555  100.049805  24462.093506 -24349.170166        0.0                0.0    0.050049      -99.949951
3  24862.093506  400.000000  24662.043701 -24349.170166        0.0                0.0  200.049805      200.000000
4  24862.093506  200.000000  24762.093506 -24349.170166        0.0                0.0  100.000000      100.000000
5  24862.093506  100.000000  24837.143311 -24349.170166        0.0                0.0   24.950195        0.000000
6  24887.143311   50.000000  24862.093750 -24274.219971        0.0                0.0   25.049561        0.000000
7  24887.143311   25.000000  24887.143311 -24186.719971        0.0                0.0    0.000000      -12.500000
8  24899.643311   12.500000  24899.643311 -24186.719971        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:40:26]  --------------------------------------------------------------------------------
[07/18 15:40:26]  Iteration: 4 (0 solution, 3 counterexamples)
[07/18 15:40:26]  Generator returned sat in 0.064834 secs.
[07/18 15:40:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:26]  Improved gap from 1 to 100
[07/18 15:40:26]  Improved number of small numbers from 57 to 100 out of a max of 100
[07/18 15:40:26]  Verifer returned sat in 0.286896 secs.
[07/18 15:40:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  24462.143311    0.099609  24262.093750 -24349.17041    0.000000           0.000000  200.049561      100.049805
1  24462.143311  200.049561  24362.093506 -24349.17041    0.000000           0.000000  100.049805        0.049805
2  24462.143311  100.049561  24462.130859 -24349.17041    0.000000           0.000000    0.012451      -99.950195
3  24862.105957  399.975098  24662.093506 -24349.17041    0.012451           0.000000  200.000000      200.000000
4  25063.081055  400.975098  24762.093262 -24349.17041  100.987549           0.012451  200.000244      200.000000
5  25265.055908  401.975098  24862.093262 -24349.17041  202.962402         100.987549  200.000244      200.000000
6  25468.030762  402.975098  24962.093506 -24349.17041  305.937256         202.962402  200.000000      200.000000
7  25672.005859  403.975098  24962.093506 -24349.17041  409.912354         305.937256  300.000000      200.000000
8  25776.980957  404.975098  25062.093506 -24349.17041  414.887451         409.912354  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=5.[0m
[07/18 15:40:26]  --------------------------------------------------------------------------------
[07/18 15:40:26]  Iteration: 5 (0 solution, 4 counterexamples)
[07/18 15:40:26]  Generator returned sat in 0.049458 secs.
[07/18 15:40:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:40:27]  Improved gap from 51/1024 to 0
[07/18 15:40:27]  Improved number of small numbers from 90 to 100 out of a max of 100
[07/18 15:40:27]  Verifer returned sat in 0.276037 secs.
[07/18 15:40:27]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  24561.643066    0.099609  24461.643066 -24347.829834   0.000000           0.000000  100.000000       99.999756
1  24561.643066   99.999756  24561.643066 -24347.829834   0.000000           0.000000    0.000000       -0.000244
2  24861.667969  300.024902  24561.643311 -24347.829834   0.024658           0.000000  300.000000      200.000000
3  24961.692871  400.024902  24761.643066 -24347.829834   0.049561           0.024658  200.000244      200.000000
4  24961.692871    2.000000  24861.643066 -24347.829834   0.049561           0.049561  100.000244      100.000000
5  24961.692871    0.500000  24961.618408 -24347.829834   0.049561           0.049561    0.024902        0.000000
6  24962.167969    0.500000  24962.093506 -24248.304932   0.049561           0.049561    0.024902        0.000000
7  24962.643066    0.500000  24962.568604 -24149.254883   0.049561           0.049561    0.024902       -0.474854
8  24963.118164    0.500000  24963.068604 -24149.254883   0.049561           0.049561    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:40:27]  --------------------------------------------------------------------------------
[07/18 15:40:27]  Iteration: 6 (0 solution, 5 counterexamples)
[07/18 15:40:27]  Generator returned sat in 0.273033 secs.
[07/18 15:40:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:28]  Improved gap from 0 to 18.75
[07/18 15:40:28]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:40:28]  Verifer returned sat in 0.397085 secs.
[07/18 15:40:28]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0  24855.542969    0.099609  24655.542969 -24362.229980   0.000000           0.000000   200.00      100.000000
1  24855.542969   99.999756  24755.542969 -24362.229980   0.000000           0.000000   100.00        0.000000
2  24855.542969    0.049805  24855.542969 -24311.754883   0.000000           0.000000     0.00      -49.524902
3  25005.067871  149.524902  25005.067871 -24311.754883   0.000000           0.000000     0.00        0.000000
4  25305.117676  300.049805  25105.067871 -24311.754883   0.049805           0.000000   200.00      200.000000
5  25305.117676    1.500000  25205.067871 -24311.754883   0.049805           0.049805   100.00      100.000000
6  25305.117676    4.000000  25286.317871 -24311.754883   0.049805           0.049805    18.75        0.000000
7  25305.117676    9.000000  25305.067871 -24230.504883   0.049805           0.049805     0.00      -18.750000
8  25324.117676   19.000000  25323.817871 -24149.254883   0.049805           0.049805     0.25      -18.500000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:40:28]  --------------------------------------------------------------------------------
[07/18 15:40:28]  Iteration: 7 (0 solution, 6 counterexamples)
[07/18 15:40:29]  Generator returned sat in 0.446822 secs.
[07/18 15:40:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:29]  Improved number of small numbers from 68 to 99 out of a max of 99
[07/18 15:40:29]  Verifer returned sat in 0.385469 secs.
[07/18 15:40:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  24585.737061    0.099365  24440.637451 -24311.755127   0.000000           0.000000  145.099609       99.999756
1  24585.737061    0.024902  24585.712402 -24311.755127   0.000000           0.000000    0.024658       -0.000244
2  24885.762207  300.049805  24685.737305 -24311.755127   0.024902           0.000000  200.000000      200.000000
3  24885.762207    0.024902  24736.687256 -24311.755127   0.024902           0.024902  149.050049      100.000000
4  24885.762207  149.049805  24885.712402 -24311.755127   0.024902           0.024902    0.024902        0.000000
5  25185.787109  300.049805  24885.737305 -24311.755127   0.049805           0.024902  300.000000      200.000000
6  25185.787109    1.500000  25029.712158 -24311.755127   0.049805           0.049805  156.025146      100.000000
7  25185.787109  149.012451  25185.737305 -24311.755127   0.049805           0.049805    0.000000        0.000000
8  25485.812012  300.024902  25285.737305 -24311.755127   0.074707           0.049805  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:40:29]  --------------------------------------------------------------------------------
[07/18 15:40:29]  Iteration: 8 (0 solution, 7 counterexamples)
[07/18 15:40:30]  Generator returned sat in 0.570673 secs.
[07/18 15:40:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:40:31]  Improved number of small numbers from 58 to 68 out of a max of 99
[07/18 15:40:31]  Verifer returned sat in 0.673427 secs.
[07/18 15:40:31]  Counter example: 
[93m    arrival_0,t     cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23385.747070     0.099365  23285.747109 -24311.755127    0.000000            0.00000   99.999961       99.999961
1  23385.747070     0.001465  23285.747109 -24311.755127    0.000000            0.00000   99.999961       -0.000039
2  24485.783359  1200.036250  23385.747314 -24311.755127  800.036250            0.00000  299.999795      200.000000
3  24485.783359     0.001250  23485.747109 -24311.755127  800.036250          800.03625  200.000000      100.000000
4  24485.783359   100.001250  23685.747109 -24311.755127  800.036250          800.03625    0.000000        0.000000
5  24785.784609   300.001250  23685.747314 -24311.755127  800.037500          800.03625  299.999795      200.000000
6  24785.784609     0.010000  23819.073776 -24311.755127  800.037500          800.03750  166.673333      100.000000
7  24785.784609   166.673333  23985.745859 -24311.755127  800.037500          800.03750    0.001250        0.000000
8  25102.456068   316.672708  23985.747314 -24311.755127  816.708958          800.03750  299.999795      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:40:31]  --------------------------------------------------------------------------------
[07/18 15:40:31]  Iteration: 9 (0 solution, 8 counterexamples)
[07/18 15:40:32]  Generator returned sat in 0.346743 secs.
[07/18 15:40:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:40:32]  Improved gap from 203/8192 to 100
[07/18 15:40:32]  Improved number of small numbers from 54 to 68 out of a max of 100
[07/18 15:40:32]  Verifer returned sat in 0.781153 secs.
[07/18 15:40:32]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23614.909180    0.099121  23529.811768 -24555.819948   0.000000           0.000000   85.097412       85.097249
1  23614.909180    0.049561  23614.859538 -24555.819948   0.000000           0.000000    0.049642      -14.902751
2  23929.762370  314.902832  23663.511719 -24555.819948   0.000000           0.000000  266.250651      199.950439
3  24029.762451  366.250732  23829.811930 -24555.819948   0.000000           0.000000  199.950521      199.950521
4  24197.562663  367.750732  23860.660319 -24555.819948  67.750732           0.000000  269.151611      200.000000
5  24297.612223  369.201172  23929.812012 -24555.819948  67.800293          67.750732  299.999919      200.000000
6  24397.562744  399.950439  24029.811930 -24555.819948  67.800293          67.800293  299.950521      199.950521
7  24499.062663  401.450439  24129.811930 -24555.819948  69.250732          67.800293  300.000000      200.000000
8  24603.290080  404.227417  24229.812012 -24555.819948  73.478149          69.250732  299.999919      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=4.[0m
[07/18 15:40:33]  --------------------------------------------------------------------------------
[07/18 15:40:33]  Iteration: 10 (0 solution, 9 counterexamples)
[07/18 15:40:33]  Generator returned sat in 0.124142 secs.
[07/18 15:40:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:40:33]  Improved gap from 0 to 3.125
[07/18 15:40:34]  Improved number of small numbers from 54 to 71 out of a max of 100
[07/18 15:40:34]  Verifer returned sat in 0.874283 secs.
[07/18 15:40:34]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23405.247559    0.098877  23402.122559 -24428.130615     0.0000             0.0000    3.125000        3.124961
1  23405.247559    0.002686  23402.122663 -24331.255680     0.0000             0.0000    3.124896       -0.000104
2  23705.245163  303.122500  23405.247803 -24331.255680     0.0000             0.0000  299.997360      199.997500
3  23705.245163  298.502500  23605.247663 -24331.255680     0.0000             0.0000   99.997500       99.997500
4  23905.250163  300.002500  23705.247559 -24331.255680     0.0025             0.0000  200.000104      200.000000
5  23905.250163    0.010000  23705.247803 -24331.255680     0.0025             0.0025  199.999860      100.000000
6  23905.250163    1.510000  23905.245163 -24331.255680     0.0025             0.0025    0.002500        0.000000
7  23908.257663    3.010000  23908.252663 -24237.385742     0.0025             0.0025    0.002500       -3.122562
8  23912.765163    4.510000  23912.762451 -24237.385498     0.0025             0.0025    0.000212      -98.614818
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:40:34]  --------------------------------------------------------------------------------
[07/18 15:40:34]  Iteration: 11 (0 solution, 10 counterexamples)
[07/18 15:40:34]  Generator returned sat in 0.065485 secs.
[07/18 15:40:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:40:35]  Improved number of small numbers from 53 to 99 out of a max of 99
[07/18 15:40:35]  Verifer returned sat in 0.221193 secs.
[07/18 15:40:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22955.270264    0.098877  22955.220703 -24331.280518    0.000000           0.000000    0.049561        0.024658
1  22955.270264    0.024658  22955.245605 -24331.280518    0.000000           0.000000    0.024658      -99.975342
2  23355.270264  400.024658  23058.220947 -24331.280518    0.024658           0.000000  297.024658      200.000000
3  23455.294922  397.049316  23255.245361 -24331.280518    0.049316           0.024658  200.000244      200.000000
4  23555.319336  300.024658  23355.220947 -24331.280518    0.073730           0.049316  200.024658      200.000000
5  23755.270020  399.975342  23356.745605 -24331.280518  100.024414           0.073730  298.500000      200.000000
6  23755.294678  298.524658  23555.245605 -24331.280518  100.024414         100.024414  100.024658      100.024658
7  23955.294678  300.024658  23655.245605 -24331.280518  100.049072         100.024414  200.000000      200.000000
8  24055.319336  300.024658  23655.245605 -24331.280518  100.073730         100.049072  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=4.[0m
[07/18 15:40:35]  --------------------------------------------------------------------------------
[07/18 15:40:35]  Iteration: 12 (0 solution, 11 counterexamples)
[07/18 15:40:35]  Generator returned sat in 0.129087 secs.
[07/18 15:40:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:40:35]  Improved number of small numbers from 56 to 99 out of a max of 99
[07/18 15:40:35]  Verifer returned sat in 0.318979 secs.
[07/18 15:40:36]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23106.257812    0.098633  23038.208496 -24331.280762   0.000000           0.000000   68.049316        0.012207
1  23106.257812    0.012207  23106.245605 -24331.280762   0.000000           0.000000    0.012207      -99.987793
2  23506.294678  400.049072  23306.233398 -24331.280762   0.049072           0.000000  200.012207      200.000000
3  23606.307129  300.024658  23372.233154 -24331.280762   0.061523           0.049072  234.012451      200.000000
4  23706.319336  334.024658  23472.220947 -24331.280762   0.073730           0.061523  234.024658      200.000000
5  23838.270020  365.975342  23606.245605 -24331.280762  32.024414           0.073730  200.000000      200.000000
6  23938.282227  300.012207  23689.245605 -24331.280762  32.036621          32.024414  217.000000      200.000000
7  24038.294678  317.012451  23806.245605 -24331.280762  32.049072          32.036621  200.000000      200.000000
8  24172.319336  334.024658  23806.245605 -24331.280762  66.073730          32.049072  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=5.[0m
[07/18 15:40:36]  --------------------------------------------------------------------------------
[07/18 15:40:36]  Iteration: 13 (0 solution, 12 counterexamples)
[07/18 15:40:38]  Generator returned sat in 1.551538 secs.
[07/18 15:40:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:40:38]  Improved gap from 201/8192 to 0
[07/18 15:40:38]  Improved number of small numbers from 83 to 100 out of a max of 100
[07/18 15:40:38]  Verifer returned sat in 0.287486 secs.
[07/18 15:40:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23206.319092    0.098389  23206.270264 -24530.329834        0.0                0.0    0.048828        0.024414
1  23206.319092    0.024658  23206.294678 -24530.329834        0.0                0.0    0.024414      -99.975586
2  23506.294678  300.000000  23306.294678 -24530.329834        0.0                0.0  200.000000      100.000000
3  23506.294678  200.000000  23506.270020 -24530.329834        0.0                0.0    0.024658        0.000000
4  23506.770020    0.500000  23506.745605 -24430.805420        0.0                0.0    0.024414       -0.000244
5  23507.245605    0.500000  23507.245361 -24331.281006        0.0                0.0    0.000244       -0.000244
6  23507.745361    0.500000  23507.721191 -24231.780762        0.0                0.0    0.024170       -0.000244
7  23508.221191    0.500000  23508.196533 -24132.731689        0.0                0.0    0.024658       -0.475342
8  23508.696533    0.500000  23508.696533 -24032.731934        0.0                0.0    0.000000       -0.000244
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 15:40:38]  --------------------------------------------------------------------------------
[07/18 15:40:38]  Iteration: 14 (0 solution, 13 counterexamples)
[07/18 15:40:39]  Generator returned sat in 0.161693 secs.
[07/18 15:40:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:40:39]  Improved gap from 11887/8192 to 0
[07/18 15:40:39]  Improved number of small numbers from 76 to 100 out of a max of 100
[07/18 15:40:39]  Verifer returned sat in 0.265671 secs.
[07/18 15:40:39]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22906.319092    0.098145  22906.319092 -24330.354492        0.0                0.0    0.000000     -100.000000
1  23206.319092  300.000000  23106.318848 -24330.354492        0.0                0.0  100.000244      100.000000
2  23206.319092    0.048828  23106.319092 -24330.354492        0.0                0.0  100.000000        0.000000
3  23406.367920  300.048828  23306.319092 -24330.354492        0.0                0.0  100.048828      100.048828
4  23406.367920    1.500000  23404.819092 -24330.354492        0.0                0.0    1.548828        0.048828
5  23406.367920    1.500000  23406.319092 -24231.805176        0.0                0.0    0.048828       -1.401855
6  23407.819092    1.500000  23407.770264 -24131.854492        0.0                0.0    0.048828        0.000000
7  23409.270264    1.500000  23409.270020 -24034.805420        0.0                0.0    0.000244       -1.499756
8  23410.770020    1.500000  23410.770020 -24034.805176        0.0                0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 15:40:39]  --------------------------------------------------------------------------------
[07/18 15:40:39]  Iteration: 15 (0 solution, 14 counterexamples)
[07/18 15:40:40]  Generator returned sat in 0.298483 secs.
[07/18 15:40:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:40]  Improved gap from 25/1024 to 0
[07/18 15:40:40]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:40:40]  Verifer returned sat in 0.290190 secs.
[07/18 15:40:40]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22906.319092    0.098145  22906.319092 -24330.354492        0.0                0.0    0.000000     -100.000000
1  23206.319092  300.000000  23106.318848 -24330.354492        0.0                0.0  100.000244      100.000000
2  23206.319092    0.048828  23106.319092 -24330.354492        0.0                0.0  100.000000        0.000000
3  23407.294678  300.975586  23306.319092 -24330.354492        0.0                0.0  100.975586      100.975586
4  23407.294678    1.000000  23406.319092 -24330.354492        0.0                0.0    0.975586        0.975586
5  23407.319092    1.000000  23407.294678 -24231.354492        0.0                0.0    0.024414        0.000000
6  23408.294678    1.000000  23407.319092 -24132.330078        0.0                0.0    0.975586        0.000000
7  23408.319092    1.000000  23408.294678 -24032.354492        0.0                0.0    0.024414        0.000000
8  23409.294678    1.000000  23408.319092 -24032.354492        0.0                0.0    0.975586      -99.024414
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 15:40:40]  --------------------------------------------------------------------------------
[07/18 15:40:40]  Iteration: 16 (0 solution, 15 counterexamples)
[07/18 15:40:41]  Generator returned sat in 0.285289 secs.
[07/18 15:40:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:40:41]  Improved gap from 1/800 to 0
[07/18 15:40:42]  Improved number of small numbers from 58 to 72 out of a max of 100
[07/18 15:40:42]  Verifer returned sat in 0.760584 secs.
[07/18 15:40:42]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23106.807617    0.097656  22906.807617 -24131.345986    0.00000            0.00000  200.000000       100.00002
1  23106.807617    0.001250  23106.807598 -24131.345986    0.00000            0.00000    0.000020         0.00002
2  23406.808848  300.001250  23106.807617 -24131.345986    0.00125            0.00000  299.999980       200.00000
3  23406.808848  299.998750  23306.310098 -24131.345986    0.00125            0.00125  100.497500       100.00000
4  23606.810098  300.498750  23406.807373 -24131.345986    0.00250            0.00125  200.000225       200.00000
5  23606.810098    0.010000  23506.807373 -24131.345986    0.00250            0.00250  100.000225       100.00000
6  23606.810098    0.510000  23606.806348 -24131.345986    0.00250            0.00250    0.001250         0.00000
7  23607.818848    1.010000  23607.815098 -24032.354736    0.00250            0.00250    0.001250         0.00000
8  23609.327598    1.510000  23607.816406 -24032.354736    0.00250            0.00250    1.508691       -98.49125
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:40:42]  --------------------------------------------------------------------------------
[07/18 15:40:42]  Iteration: 17 (0 solution, 16 counterexamples)
[07/18 15:40:42]  Generator returned sat in 0.192587 secs.
[07/18 15:40:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:42]  Improved gap from 1/1600 to 1.5625
[07/18 15:40:43]  Improved number of small numbers from 54 to 70 out of a max of 100
[07/18 15:40:43]  Verifer returned sat in 0.798384 secs.
[07/18 15:40:43]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22865.710205    0.097656  22565.710449 -23790.248799   0.000000           0.000000  299.999756      199.999795
1  22865.710205    0.001250  22665.710410 -23790.248799   0.000000           0.000000  199.999795       99.999795
2  23065.710723  400.000313  22765.710449 -23790.248799   0.000313           0.000000  299.999961      200.000000
3  23065.710723  299.999687  22964.711035 -23790.248799   0.000313           0.000313  100.999375      100.000000
4  23265.711035  300.999687  23065.710205 -23790.248799   0.000625           0.000313  200.000205      200.000000
5  23265.711035    0.010000  23165.710205 -23790.248799   0.000625           0.000625  100.000205      100.000000
6  23265.711035    1.010000  23165.710449 -23790.248799   0.000625           0.000625   99.999961        0.000000
7  23265.711035    2.010000  23265.710410 -23693.258789   0.000625           0.000625    0.000000       -3.009990
8  23268.721035    3.010000  23268.720410 -23693.258789   0.000625           0.000625    0.000000      -99.999990
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:40:43]  --------------------------------------------------------------------------------
[07/18 15:40:43]  Iteration: 18 (0 solution, 17 counterexamples)
[07/18 15:40:45]  Generator returned sat in 1.586484 secs.
[07/18 15:40:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:40:45]  Improved gap from 220/3 to 100
[07/18 15:40:46]  Improved number of small numbers from 32 to 50 out of a max of 100
[07/18 15:40:46]  Verifer returned sat in 1.098783 secs.
[07/18 15:40:46]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22913.771973    0.097656  22913.723145 -23919.931058   0.000000           0.000000    0.048828        0.024408
1  22913.771973    0.024414  22913.747803 -23919.931058   0.000000           0.000000    0.024170      -99.975592
2  23113.747803  200.000000  23013.747803 -23919.931058   0.000000           0.000000  100.000000        0.000238
3  23113.747803   99.975647  23113.747565 -23919.931058   0.000000           0.000000    0.000238      -99.999762
4  23265.711035  151.963470  23213.747565 -23919.931058   0.000000           0.000000   51.963470      -48.036530
5  23443.692770  229.945206  23366.854109 -23919.931058   0.000000           0.000000   76.838661       29.945206
6  23713.771918  346.917809  23511.113369 -23919.931058   0.024353           0.000000  202.634196      200.000000
7  23713.771918  198.682902  23613.747565 -23919.931058   0.024353           0.024353  100.000000      100.000000
8  23913.796271  300.024353  23613.747803 -23919.931058   0.048706           0.024353  299.999762      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:40:47]  --------------------------------------------------------------------------------
[07/18 15:40:47]  Iteration: 19 (0 solution, 18 counterexamples)
[07/18 15:40:49]  Generator returned sat in 1.772702 secs.
[07/18 15:40:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:49]  Improved gap from 399/16384 to 68.75
[07/18 15:40:49]  Improved number of small numbers from 51 to 100 out of a max of 100
[07/18 15:40:49]  Verifer returned sat in 0.613164 secs.
[07/18 15:40:49]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22377.138916    0.097656  22077.138916 -23920.486084        0.0                0.0  300.000000      200.000000
1  22377.138916    0.048828  22277.138916 -23920.486084        0.0                0.0  100.000000      100.000000
2  22377.138916    0.048828  22284.590088 -23920.486084        0.0                0.0   92.548828        0.000000
3  22476.583740  191.993652  22407.833740 -23919.930908        0.0                0.0   68.750000        0.000000
4  22574.181152  166.347412  22574.132568 -23919.930908        0.0                0.0    0.048584       -2.402588
5  22723.629395  149.496826  22576.583740 -23919.930908        0.0                0.0  147.045654       47.045654
6  22723.629395  146.996826  22676.583740 -23888.680908        0.0                0.0   47.045654      -21.704346
7  22811.958740  135.375000  22745.333740 -23857.430908        0.0                0.0   66.625000       -2.125000
8  22831.934326   86.600586  22814.083984 -23857.430908        0.0                0.0   17.850342      -82.149414
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:40:50]  --------------------------------------------------------------------------------
[07/18 15:40:50]  Iteration: 20 (0 solution, 19 counterexamples)
[07/18 15:40:50]  Generator returned sat in 0.275017 secs.
[07/18 15:40:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:51]  Improved gap from 2911/30 to 100
[07/18 15:40:51]  Improved number of small numbers from 29 to 100 out of a max of 100
[07/18 15:40:51]  Verifer returned sat in 0.893815 secs.
[07/18 15:40:51]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22013.087402    0.097656  21863.014404 -23919.930908   0.000000           0.000000  150.072998       99.999756
1  22013.087402    0.024414  21913.087646 -23919.930908   0.000000           0.000000   99.999756       -0.000244
2  22313.112061  400.024414  22065.136475 -23919.930908   0.024414           0.000000  247.951172      200.000000
3  22313.136475  247.975586  22213.087646 -23919.930908   0.024414           0.024414  100.024414      100.024414
4  22513.136475  300.024414  22213.087646 -23919.930908   0.048828           0.024414  300.000000      200.000000
5  22513.136475  150.000000  22313.087646 -23919.930908   0.048828           0.048828  200.000000      100.000000
6  22513.136475  199.975586  22460.989990 -23919.930908   0.048828           0.048828   52.097656        0.000000
7  22685.977783  224.938965  22613.087646 -23919.930908   0.048828           0.048828   72.841309       72.841309
8  22926.605957  313.469482  22613.087646 -23919.930908  13.518311           0.048828  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:40:51]  --------------------------------------------------------------------------------
[07/18 15:40:51]  Iteration: 21 (0 solution, 20 counterexamples)
[07/18 15:40:52]  Generator returned sat in 0.221621 secs.
[07/18 15:40:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:40:52]  Improved number of small numbers from 75 to 79 out of a max of 99
[07/18 15:40:52]  Verifer returned sat in 0.436457 secs.
[07/18 15:40:52]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22013.087402    0.097412  21813.087402 -23919.930908    0.00000            0.00000  200.000000      100.000000
1  22013.087402    0.001221  22013.086182 -23919.930908    0.00000            0.00000    0.001221        0.000000
2  22015.082520    1.996338  22015.081152 -23919.930908    0.00000            0.00000    0.001367      -98.004883
3  22213.087402  198.006250  22213.086152 -23919.930908    0.00000            0.00000    0.001250        0.000000
4  22513.088652  300.002500  22215.081152 -23919.930908    0.00125            0.00000  298.006250      200.000000
5  22513.088652    0.010000  22409.068652 -23919.930908    0.00125            0.00125  104.018750      100.000000
6  22607.068652  197.998750  22413.087402 -23919.930908    0.00125            0.00125  193.980000       93.980000
7  22613.088652  200.000000  22613.086152 -23919.930908    0.00125            0.00125    0.001250        0.000000
8  22913.089902  300.002500  22613.087402 -23919.930908    0.00250            0.00125  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:40:53]  --------------------------------------------------------------------------------
[07/18 15:40:53]  Iteration: 22 (0 solution, 21 counterexamples)
[07/18 15:40:54]  Generator returned sat in 0.796546 secs.
[07/18 15:40:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:40:54]  Improved gap from 1/400 to 0
[07/18 15:40:55]  Improved number of small numbers from 61 to 76 out of a max of 100
[07/18 15:40:55]  Verifer returned sat in 0.951380 secs.
[07/18 15:40:55]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22073.091309    0.097412  22073.091064 -23919.930908    0.00000            0.00000    0.000244        0.000127
1  22373.091064  300.000000  22073.091182 -23919.930908    0.00000            0.00000  299.999883      199.999883
2  22473.092432  400.001250  22273.091064 -23919.930908    0.00125            0.00000  200.000117      200.000000
3  22473.092432  200.000000  22273.092432 -23919.930908    0.00125            0.00125  199.998750      100.000000
4  22673.093682  400.000000  22473.091064 -23919.930908    0.00250            0.00125  200.000117      200.000000
5  22673.093682    0.010000  22573.091064 -23919.930908    0.00250            0.00250  100.000117      100.000000
6  22673.093682    0.020000  22673.052432 -23919.930908    0.00250            0.00250    0.038750        0.000000
7  22673.094932    0.040000  22673.091182 -23819.932158    0.00250            0.00250    0.001250        0.000000
8  22673.173682    0.080000  22673.092529 -23819.932129    0.00250            0.00250    0.078652      -99.921221
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:40:55]  --------------------------------------------------------------------------------
[07/18 15:40:55]  Iteration: 23 (0 solution, 22 counterexamples)
[07/18 15:40:58]  Generator returned sat in 2.086480 secs.
[07/18 15:40:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:40:58]  Improved gap from 1/800 to 0
[07/18 15:40:59]  Improved number of small numbers from 56 to 66 out of a max of 100
[07/18 15:40:59]  Verifer returned sat in 0.923027 secs.
[07/18 15:40:59]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22425.815430    0.097412  22425.814307 -23919.910879    0.00000            0.00000    0.001123      -99.998877
1  22825.815557  400.001250  22625.814307 -23919.910879    0.00125            0.00000  200.000000      200.000000
2  22925.816807  300.001250  22625.814453 -23919.910879    0.00250            0.00125  299.999854      200.000000
3  22925.816807  266.667500  22725.814307 -23919.910879    0.00250            0.00250  200.000000      100.000000
4  23125.818057  400.001250  22885.849365 -23919.910879    0.00375            0.00250  239.964941      200.000000
5  23125.818057    0.010000  23025.814209 -23919.910879    0.00375            0.00375  100.000098      100.000000
6  23125.818057    0.015000  23125.793057 -23919.910879    0.00375            0.00375    0.021250        0.000000
7  23125.819307    0.022500  23125.814307 -23819.944580    0.00375            0.00375    0.001250       -0.032451
8  23125.851807    0.033750  23125.848057 -23819.944580    0.00375            0.00375    0.000000      -99.999951
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:40:59]  --------------------------------------------------------------------------------
[07/18 15:40:59]  Iteration: 24 (0 solution, 23 counterexamples)
[07/18 15:41:02]  Generator returned sat in 2.881845 secs.
[07/18 15:41:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:02]  Improved gap from 3451/102400 to 1.5625
[07/18 15:41:03]  Improved number of small numbers from 54 to 68 out of a max of 100
[07/18 15:41:03]  Verifer returned sat in 1.153007 secs.
[07/18 15:41:03]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22782.277100    0.097412  22782.275904 -24276.372476    0.00000            0.00000    0.001196      -99.998804
1  23182.277154  400.001250  22882.276123 -24276.372476    0.00125            0.00000  299.999781      200.000000
2  23182.277154  299.999756  22982.276123 -24276.372476    0.00125            0.00125  199.999781      100.000000
3  23182.277154  199.667500  23182.275904 -24276.372476    0.00125            0.00125    0.000000        0.000000
4  23482.278404  300.001250  23282.275879 -24276.372476    0.00250            0.00125  200.000025      200.000000
5  23482.278404    0.010000  23380.713379 -24276.372476    0.00250            0.00250  101.562525      100.000000
6  23482.278404    0.515000  23482.274654 -24276.372476    0.00250            0.00250    0.001250        0.000000
7  23483.549654    1.272500  23482.275904 -24177.935059    0.00250            0.00250    1.271250       -0.291332
8  23484.687154    2.408750  23483.838623 -24177.934814    0.00250            0.00250    0.846031      -99.153588
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:04]  --------------------------------------------------------------------------------
[07/18 15:41:04]  Iteration: 25 (0 solution, 24 counterexamples)
[07/18 15:41:05]  Generator returned sat in 0.820263 secs.
[07/18 15:41:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:05]  Improved gap from 8391/8192 to 68.75
[07/18 15:41:05]  Improved number of small numbers from 94 to 100 out of a max of 100
[07/18 15:41:05]  Verifer returned sat in 0.303252 secs.
[07/18 15:41:05]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23512.382568    0.097412  23243.632812 -24276.372803    0.000000           0.000000  268.749756      168.749756
1  23512.382812  268.750000  23443.632812 -24276.372803    0.000000           0.000000   68.750000       68.750000
2  23512.382812    0.048584  23443.632812 -24245.122803    0.000000           0.000000   68.750000        0.000000
3  23913.479980  469.847168  23612.382812 -24245.122803  101.097168           0.000000  200.000000      200.000000
4  23948.403564  234.923584  23709.931152 -24245.122803  101.097168         101.097168  137.375244      134.923584
5  23948.403564  133.649170  23712.382812 -24245.122803  101.097168         101.097168  134.923584       34.923584
6  23948.403564  134.875000  23812.382812 -24213.872803  101.097168         101.097168   34.923584      -33.826416
7  24013.979980  100.500000  23881.132812 -24182.622803  101.097168         101.097168   31.750000      -37.000000
8  24068.330811   86.100830  23949.882812 -24182.622803  101.097168         101.097168   17.350830      -82.649170
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:41:05]  --------------------------------------------------------------------------------
[07/18 15:41:05]  Iteration: 26 (0 solution, 25 counterexamples)
[07/18 15:41:06]  Generator returned sat in 0.204742 secs.
[07/18 15:41:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:06]  Improved gap from 99/2048 to 100
[07/18 15:41:07]  Improved number of small numbers from 55 to 55 out of a max of 100
[07/18 15:41:07]  Verifer returned sat in 0.850147 secs.
[07/18 15:41:07]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22868.927979    0.097412  22668.927979 -24245.122803    0.000000           0.000000  200.000000           200.0
1  22868.927979  200.000000  22668.927979 -24245.122803    0.000000           0.000000  200.000000           100.0
2  22868.927979    0.048584  22768.927979 -24245.122803    0.000000           0.000000  100.000000             0.0
3  23168.952271  400.024292  22959.224700 -24245.122803    0.024292           0.000000  209.703279           200.0
4  23304.409499  345.160507  23020.557338 -24245.122803   35.481520           0.024292  248.370641           200.0
5  23404.433791  348.394933  23168.927979 -24245.122803   35.505812          35.481520  200.000000           200.0
6  23578.631257  374.197466  23268.927979 -24245.122803  109.703279          35.505812  200.000000           200.0
7  23720.581630  341.950373  23368.927979 -24245.122803  151.653651         109.703279  200.000000           200.0
8  23865.742136  345.160507  23368.927979 -24245.122803  196.814158         151.653651  300.000000           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=5.[0m
[07/18 15:41:07]  --------------------------------------------------------------------------------
[07/18 15:41:07]  Iteration: 27 (0 solution, 26 counterexamples)
[07/18 15:41:08]  Generator returned sat in 0.766283 secs.
[07/18 15:41:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:41:09]  Improved gap from 397/8192 to 39.0625
[07/18 15:41:09]  Improved number of small numbers from 34 to 100 out of a max of 100
[07/18 15:41:09]  Verifer returned sat in 0.547891 secs.
[07/18 15:41:09]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23188.171631    0.097168  22988.171875 -24333.268555    0.00000            0.00000  199.999756       99.999756
1  23188.171875  200.000000  23188.171875 -24333.268555    0.00000            0.00000    0.000000        0.000000
2  23260.074951   71.903076  23188.171875 -24305.171631    0.00000            0.00000   71.903076        0.000000
3  23560.074951  371.903076  23286.220215 -24305.171631    0.00000            0.00000  273.854736      200.000000
4  23660.123291  373.903076  23460.074707 -24305.171631    0.04834            0.00000  200.000244      200.000000
5  23660.123291  135.951416  23560.074951 -24305.171631    0.04834            0.04834  100.000000      100.000000
6  23698.074707  137.951416  23560.074951 -24305.171631    0.04834            0.04834  137.951416       37.951416
7  23700.074707  139.951416  23660.074951 -24245.123047    0.04834            0.04834   39.951416        0.000000
8  23802.074707  141.951416  23700.026367 -24245.123047    0.04834            0.04834  102.000000        2.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:09]  --------------------------------------------------------------------------------
[07/18 15:41:09]  Iteration: 28 (0 solution, 27 counterexamples)
[07/18 15:41:10]  Generator returned sat in 0.489906 secs.
[07/18 15:41:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:41:10]  Verifer returned unsat in 0.100307 secs.
[07/18 15:41:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:41:10]  --------------------------------------------------------------------------------
[07/18 15:41:10]  Iteration: 29 (1 solution, 27 counterexamples)
[07/18 15:41:14]  Generator returned sat in 2.876633 secs.
[07/18 15:41:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:41:14]  Improved gap from 4509/4096 to 1.5625
[07/18 15:41:14]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:41:14]  Verifer returned sat in 0.240585 secs.
[07/18 15:41:14]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t   queue_t  bottle_queue_t
0  22956.002441    0.097168  22756.002441 -24001.099121    0.00000            0.00000  200.0000        200.0000
1  23056.026611  300.024170  22856.002441 -24001.099121    0.02417            0.00000  200.0000        200.0000
2  23156.050781  300.024170  22856.002441 -24001.099121    0.04834            0.02417  300.0000        200.0000
3  23156.050781  200.016113  23056.002441 -24001.099121    0.04834            0.04834  100.0000        100.0000
4  23356.074951  300.024170  23156.002441 -24001.099121    0.07251            0.04834  200.0000        200.0000
5  23356.074951    0.500000  23156.002441 -24001.099121    0.07251            0.07251  200.0000        100.0000
6  23356.074951    0.750000  23354.439941 -24001.099121    0.07251            0.07251    1.5625          0.0000
7  23356.074951    1.125000  23356.002441 -23902.786621    0.07251            0.07251    0.0000         -1.6875
8  23357.762451    1.687500  23357.689941 -23902.786621    0.07251            0.07251    0.0000       -100.0000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:14]  --------------------------------------------------------------------------------
[07/18 15:41:14]  Iteration: 30 (1 solution, 28 counterexamples)
[07/18 15:41:15]  Generator returned sat in 0.824643 secs.
[07/18 15:41:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:41:16]  Improved gap from 654965/49152 to 68.75
[07/18 15:41:16]  Improved number of small numbers from 53 to 100 out of a max of 100
[07/18 15:41:16]  Verifer returned sat in 0.565776 secs.
[07/18 15:41:16]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22855.954346    0.096680  22655.809326 -23901.099365        0.0                0.0  200.145020      100.145020
1  22855.954346  200.144775  22855.809326 -23901.099365        0.0                0.0    0.145020        0.145020
2  22855.954346    0.144775  22855.906006 -23901.099365        0.0                0.0    0.048340      -99.854980
3  23155.857910  299.951904  22987.059326 -23901.099365        0.0                0.0  168.798584      100.048584
4  23155.857910  165.625000  23155.809326 -23901.099365        0.0                0.0    0.048584        0.048584
5  23305.809326  150.000000  23155.809326 -23901.099365        0.0                0.0  150.000000       50.000000
6  23305.809326  149.951660  23255.809326 -23869.849365        0.0                0.0   50.000000      -18.750000
7  23390.184326  134.375000  23324.559326 -23841.051025        0.0                0.0   65.625000       -5.576660
8  23408.934326   84.375000  23395.761475 -23841.051025        0.0                0.0   13.172852      -86.826660
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:41:16]  --------------------------------------------------------------------------------
[07/18 15:41:16]  Iteration: 31 (1 solution, 29 counterexamples)
[07/18 15:41:18]  Generator returned sat in 0.852819 secs.
[07/18 15:41:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:41:18]  Improved number of small numbers from 62 to 99 out of a max of 99
[07/18 15:41:18]  Verifer returned sat in 0.452747 secs.
[07/18 15:41:18]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22815.786377    0.096680  22515.833984 -23901.099365   0.000000           0.000000  299.952393      200.000000
1  22815.786377    0.023926  22715.786377 -23901.099365   0.000000           0.000000  100.000000      100.000000
2  23015.810303  300.023926  22815.667480 -23901.099365   0.023926           0.000000  200.118896      200.000000
3  23015.810303  200.095459  22915.786377 -23901.099365   0.023926           0.023926  100.000000      100.000000
4  23215.834229  300.023926  22915.786621 -23901.099365   0.047852           0.023926  299.999756      200.000000
5  23215.834229    1.000000  23015.786621 -23901.099365   0.047852           0.047852  199.999756      100.000000
6  23215.834229  100.559570  23215.512451 -23901.099365   0.047852           0.047852    0.273926        0.000000
7  23415.703125  200.142822  23315.786377 -23901.099365   0.047852           0.047852   99.868896       99.868896
8  23615.905518  300.071289  23315.786377 -23901.099365   0.119141           0.047852  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:41:18]  --------------------------------------------------------------------------------
[07/18 15:41:18]  Iteration: 32 (1 solution, 30 counterexamples)
[07/18 15:41:20]  Generator returned sat in 1.065843 secs.
[07/18 15:41:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:41:20]  Improved gap from 1/700 to 100
[07/18 15:41:21]  Improved number of small numbers from 62 to 64 out of a max of 100
[07/18 15:41:21]  Verifer returned sat in 0.712672 secs.
[07/18 15:41:21]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22715.786377    0.096680  22615.786377 -23901.099365   0.000000           0.000000  100.000000      100.000000
1  22715.786377    0.000732  22615.786377 -23901.099365   0.000000           0.000000  100.000000        0.000000
2  22715.786865  100.000488  22715.786377 -23901.099365   0.000000           0.000000    0.000488      -99.999512
3  23015.789472  300.003095  22915.786377 -23901.099365   0.000000           0.000000  100.003095      100.003095
4  23215.787925  300.001548  22915.786377 -23901.099365   0.001548           0.000000  300.000000      200.000000
5  23215.787925    0.010000  23115.786377 -23901.099365   0.001548           0.001548  100.000000      100.000000
6  23315.792925  200.005000  23115.787567 -23901.099365   0.001548           0.001548  200.003810      100.005000
7  23315.792925  200.003095  23315.786377 -23901.099365   0.001548           0.001548    0.005000        0.005000
8  23615.789472  300.001548  23315.786377 -23901.099365   0.003095           0.001548  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 15:41:21]  --------------------------------------------------------------------------------
[07/18 15:41:21]  Iteration: 33 (1 solution, 31 counterexamples)
[07/18 15:41:23]  Generator returned sat in 1.163622 secs.
[07/18 15:41:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 15:41:23]  Improved gap from 49/1024 to 79.6875
[07/18 15:41:23]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:41:23]  Verifer returned sat in 0.213045 secs.
[07/18 15:41:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22934.325928    0.096680  22834.325928 -23901.099365   0.000000           0.000000  100.000000      100.000000
1  22934.325928   99.952148  22834.325928 -23901.099365   0.000000           0.000000  100.000000        0.000000
2  23234.373779  400.047852  23034.325928 -23901.099365   0.047852           0.000000  200.000000      200.000000
3  23234.373779   80.577148  23134.325928 -23901.099365   0.047852           0.047852  100.000000      100.000000
4  23234.373779   80.577148  23234.278076 -23901.099365   0.047852           0.047852    0.047852        0.000000
5  23314.903076   80.577148  23235.167725 -23881.628662   0.047852           0.047852   79.687500        0.000000
6  23315.792725   80.577148  23314.855225 -23861.316162   0.047852           0.047852    0.889648      -78.797852
7  23395.480225   80.577148  23394.542725 -23841.003662   0.047852           0.047852    0.889648      -78.797852
8  23475.167725   80.577148  23474.230225 -23841.003662   0.047852           0.047852    0.889648      -99.110352
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 15:41:23]  --------------------------------------------------------------------------------
[07/18 15:41:23]  Iteration: 34 (1 solution, 32 counterexamples)
[07/18 15:41:26]  Generator returned sat in 1.964020 secs.
[07/18 15:41:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:41:26]  Improved gap from 1137/1024 to 1.5625
[07/18 15:41:26]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/18 15:41:26]  Verifer returned sat in 0.425831 secs.
[07/18 15:41:26]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23916.169434    0.096436  23816.169434 -24882.943115        0.0                0.0  100.000000      100.000000
1  23916.169434    0.047852  23914.606934 -24882.943115        0.0                0.0    1.562500        0.000000
2  24014.606934  100.000000  24014.606934 -24882.943115        0.0                0.0    0.000000       -1.562500
3  24316.121338  301.514404  24116.169434 -24882.943115        0.0                0.0  199.951904      199.951904
4  24316.121338    2.000000  24216.169189 -24882.943115        0.0                0.0   99.952148       99.951904
5  24316.121338    2.000000  24315.731689 -24882.943115        0.0                0.0    0.389648       -0.048096
6  24317.731689    2.000000  24316.169434 -24784.505615        0.0                0.0    1.562256       -0.000244
7  24318.169434    2.000000  24317.731934 -24686.068115        0.0                0.0    0.437500       -1.125000
8  24319.731934    2.000000  24319.294434 -24686.067871        0.0                0.0    0.437500      -99.562256
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 15:41:26]  --------------------------------------------------------------------------------
[07/18 15:41:26]  Iteration: 35 (1 solution, 33 counterexamples)
[07/18 15:41:30]  Generator returned sat in 3.158262 secs.
[07/18 15:41:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:30]  Improved gap from 391/16384 to 1.5625
[07/18 15:41:30]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:41:30]  Verifer returned sat in 0.394537 secs.
[07/18 15:41:30]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23291.575684    0.096436  23291.575684 -24358.349365   0.000000           0.000000    0.000000        0.000000
1  23591.591309  300.015625  23391.575684 -24358.349365   0.015625           0.000000  200.000000      200.000000
2  23691.575684  299.984375  23391.575684 -24358.349365   0.015625           0.015625  299.984375      199.984375
3  23691.575684  299.968750  23591.122559 -24358.349365   0.015625           0.015625  100.437500       99.984375
4  23891.606934  300.468750  23691.575684 -24358.349365   0.031250           0.015625  200.000000      200.000000
5  23891.606934    0.500000  23791.575684 -24358.349365   0.031250           0.031250  100.000000      100.000000
6  23891.606934    1.000000  23890.013184 -24358.349365   0.031250           0.031250    1.562500        0.000000
7  23891.606934    1.500000  23891.575684 -24259.911865   0.031250           0.031250    0.000000       -1.562500
8  23893.606934    2.000000  23893.138184 -24259.911865   0.031250           0.031250    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:31]  --------------------------------------------------------------------------------
[07/18 15:41:31]  Iteration: 36 (1 solution, 34 counterexamples)
[07/18 15:41:33]  Generator returned sat in 2.131028 secs.
[07/18 15:41:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:34]  Verifer returned unsat in 0.059629 secs.
[07/18 15:41:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:34]  --------------------------------------------------------------------------------
[07/18 15:41:34]  Iteration: 37 (2 solution, 34 counterexamples)
[07/18 15:41:34]  Generator returned sat in 0.146854 secs.
[07/18 15:41:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:35]  Improved gap from 391/16384 to 39.0625
[07/18 15:41:35]  Improved number of small numbers from 48 to 100 out of a max of 100
[07/18 15:41:35]  Verifer returned sat in 0.529318 secs.
[07/18 15:41:35]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  23834.475586    0.096191  23673.270020 -23786.009033   0.000000           0.000000  161.205566       61.205811
1  23834.475830  161.205811  23834.427979 -23786.009033   0.000000           0.000000    0.047852      -38.793945
2  23912.332275   77.904297  23873.269775 -23725.071533   0.000000           0.000000   39.062500        0.000000
3  24212.284668  339.014893  24012.332275 -23725.071533   0.000000           0.000000  199.952393      199.952393
4  24351.847168  339.514893  24112.332275 -23725.071533  39.514893           0.000000  200.000000      200.000000
5  24351.847168  138.952148  24172.832275 -23725.071533  39.514893          39.514893  139.500000      100.000000
6  24351.847168  139.452148  24212.332275 -23725.071533  39.514893          39.514893  100.000000        0.000000
7  24391.799316  139.952148  24312.332275 -23665.023926  39.514893          39.514893   39.952148       -0.000244
8  24492.299316  140.452148  24352.284912 -23665.023926  39.514893          39.514893  100.499512        0.499756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:35]  --------------------------------------------------------------------------------
[07/18 15:41:35]  Iteration: 38 (2 solution, 35 counterexamples)
[07/18 15:41:37]  Generator returned sat in 1.061749 secs.
[07/18 15:41:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:37]  Improved gap from 0 to 12.5
[07/18 15:41:38]  Improved number of small numbers from 40 to 69 out of a max of 100
[07/18 15:41:38]  Verifer returned sat in 1.048932 secs.
[07/18 15:41:38]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  20414.388672    0.095947  20314.341064 -23845.758789        0.0                0.0  100.047607        0.047839
1  20414.388672  100.047607  20414.341064 -23845.758789        0.0                0.0    0.047607      -99.952161
2  20814.293213  399.952148  20515.388783 -23845.758789        0.0                0.0  298.904429      199.952380
3  20914.293324  398.904541  20714.340820 -23845.758789        0.0                0.0  199.952504      199.952492
4  20914.293324  199.952271  20714.341064 -23845.758789        0.0                0.0  199.952260       99.952492
5  20914.293324  100.476135  20814.341064 -23845.711281        0.0                0.0   99.952260        0.000000
6  20914.293324   50.738068  20914.293324 -23758.211426        0.0                0.0    0.000000      -12.500145
7  20940.162358   25.869034  20940.114629 -23684.032585        0.0                0.0    0.047729      -12.452271
8  20953.549146   13.434517  20952.614746 -23684.032471        0.0                0.0    0.934400      -99.065369
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:41:38]  --------------------------------------------------------------------------------
[07/18 15:41:38]  Iteration: 39 (2 solution, 36 counterexamples)
[07/18 15:41:40]  Generator returned sat in 1.471945 secs.
[07/18 15:41:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:40]  Verifer returned unsat in 0.074786 secs.
[07/18 15:41:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:40]  --------------------------------------------------------------------------------
[07/18 15:41:40]  Iteration: 40 (3 solution, 36 counterexamples)
[07/18 15:41:41]  Generator returned sat in 0.211269 secs.
[07/18 15:41:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:41]  Verifer returned unsat in 0.048970 secs.
[07/18 15:41:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:41]  --------------------------------------------------------------------------------
[07/18 15:41:41]  Iteration: 41 (4 solution, 36 counterexamples)
[07/18 15:41:42]  Generator returned sat in 0.204575 secs.
[07/18 15:41:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:42]  Verifer returned unsat in 0.058888 secs.
[07/18 15:41:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:42]  --------------------------------------------------------------------------------
[07/18 15:41:42]  Iteration: 42 (5 solution, 36 counterexamples)
[07/18 15:41:43]  Generator returned sat in 0.150846 secs.
[07/18 15:41:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:43]  Verifer returned unsat in 0.058909 secs.
[07/18 15:41:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:43]  --------------------------------------------------------------------------------
[07/18 15:41:43]  Iteration: 43 (6 solution, 36 counterexamples)
[07/18 15:41:44]  Generator returned sat in 0.366112 secs.
[07/18 15:41:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:44]  Improved gap from 391/8192 to 39.0625
[07/18 15:41:44]  Improved number of small numbers from 34 to 100 out of a max of 100
[07/18 15:41:44]  Verifer returned sat in 0.472408 secs.
[07/18 15:41:44]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  20048.157471    0.095947  19848.157471 -23379.575439   0.000000           0.000000  200.000000      100.000000
1  20048.157471  200.000000  20013.094971 -23379.575439   0.000000           0.000000   35.062500        0.000000
2  20048.205322   35.110352  20048.157471 -23318.637939   0.000000           0.000000    0.047852      -39.014648
3  20387.172119  339.014648  20147.752930 -23318.637939   0.000000           0.000000  239.419189      199.952148
4  20487.267578  339.514648  20287.219971 -23318.637939   0.047607           0.000000  200.000000      200.000000
5  20487.267578  138.062500  20348.609863 -23318.637939   0.047607           0.047607  138.610107      100.000000
6  20487.267578  138.562500  20387.220215 -23318.637939   0.047607           0.047607   99.999756        0.000000
7  20526.330322  139.062500  20487.219971 -23257.700684   0.047607           0.047607   39.062744        0.000000
8  20626.830078  139.562500  20526.282715 -23257.700684   0.047607           0.047607  100.499756        0.499756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:44]  --------------------------------------------------------------------------------
[07/18 15:41:44]  Iteration: 44 (6 solution, 37 counterexamples)
[07/18 15:41:47]  Generator returned sat in 2.220948 secs.
[07/18 15:41:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:41:48]  Improved gap from 625/16 to 39.0625
[07/18 15:41:48]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/18 15:41:48]  Verifer returned sat in 0.586781 secs.
[07/18 15:41:48]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  19584.881592    0.095947  19584.881592 -23635.608154   0.000000           0.000000    0.000000        0.000000
1  19684.929199  100.047607  19650.929199 -23635.608154   0.000000           0.000000   34.000000        0.047607
2  19684.929199   33.952393  19684.881836 -23574.670898   0.000000           0.000000    0.047363      -39.015137
3  20023.896729  339.014893  19823.944336 -23574.670898   0.000000           0.000000  199.952393      199.952393
4  20163.459229  339.514893  19923.054199 -23574.670898  39.514893           0.000000  200.890137      200.000000
5  20163.459229  138.062500  19923.944336 -23574.670898  39.514893          39.514893  200.000000      100.000000
6  20163.459229  138.562500  20023.944336 -23574.670898  39.514893          39.514893  100.000000        0.000000
7  20202.521729  139.062500  20123.944336 -23513.733398  39.514893          39.514893   39.062500        0.000000
8  20303.021729  139.562500  20163.006836 -23513.733398  39.514893          39.514893  100.500000        0.500000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:48]  --------------------------------------------------------------------------------
[07/18 15:41:48]  Iteration: 45 (6 solution, 38 counterexamples)
[07/18 15:41:53]  Generator returned sat in 3.754137 secs.
[07/18 15:41:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:41:53]  Improved gap from 2933125/131072 to 39.0625
[07/18 15:41:53]  Improved number of small numbers from 90 to 100 out of a max of 100
[07/18 15:41:53]  Verifer returned sat in 0.628700 secs.
[07/18 15:41:53]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  19465.269043    0.095947  19465.269043 -23635.608398      0.000              0.000    0.000000       -0.000244
1  19565.316650  100.047607  19465.269287 -23635.608398      0.000              0.000  100.047363        0.047363
2  19565.316650    0.047607  19565.269287 -23635.608398      0.000              0.000    0.047363      -99.952637
3  20515.519287  950.250000  19665.269287 -23635.608398    550.250              0.000  300.000000      200.000000
4  20691.644287  476.125000  19865.269287 -23635.608398    626.375            550.250  200.000000      200.000000
5  20730.706787  239.062500  19965.269043 -23635.608398    626.375            626.375  139.062744      139.062500
6  20730.706787  121.531250  20041.518555 -23635.608398    626.375            626.375   62.813232       39.062500
7  20730.706787   62.765625  20065.269287 -23574.670898    626.375            626.375   39.062500        0.000000
8  20730.706787   33.382812  20104.331787 -23574.670654    626.375            626.375    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:41:53]  --------------------------------------------------------------------------------
[07/18 15:41:53]  Iteration: 46 (6 solution, 39 counterexamples)
[07/18 15:41:56]  Generator returned sat in 2.194634 secs.
[07/18 15:41:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:41:57]  Improved gap from 0 to 14.0625
[07/18 15:41:57]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/18 15:41:57]  Verifer returned sat in 0.893558 secs.
[07/18 15:41:57]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  18976.744385    0.095947  18976.744141 -23147.083496   0.000000           0.000000    0.000244        0.000000
1  18976.791504    0.047363  18976.744385 -23147.083252   0.000000           0.000000    0.047119      -99.952637
2  19376.791504  400.047119  19083.744385 -23147.083252   0.047363           0.000000  292.999756      200.000000
3  19471.791748  388.000000  19276.744141 -23147.083252   0.047363           0.047363  195.000244      195.000244
4  19471.791748  195.000000  19373.197021 -23147.083252   0.047363           0.047363   98.547363       95.000244
5  19471.791748   98.500000  19452.666504 -23147.083252   0.047363           0.047363   19.077881       -4.999756
6  19502.963867   50.250000  19476.744141 -23073.255615   0.047363           0.047363   26.172363        0.000000
7  19502.963867   26.125000  19502.916504 -22987.318115   0.047363           0.047363    0.000000      -14.062500
8  19517.026367   14.062500  19516.979004 -22901.380859   0.047363           0.047363    0.000000      -14.062744
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:41:58]  --------------------------------------------------------------------------------
[07/18 15:41:58]  Iteration: 47 (6 solution, 40 counterexamples)
[07/18 15:42:01]  Generator returned sat in 3.038306 secs.
[07/18 15:42:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:02]  Improved gap from 102277/8192 to 14.0625
[07/18 15:42:02]  Improved number of small numbers from 77 to 81 out of a max of 100
[07/18 15:42:02]  Verifer returned sat in 1.235941 secs.
[07/18 15:42:02]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  21215.969727    0.095703  21115.969727 -25386.308838        0.0                0.0  100.000000        0.000000
1  21215.969727    0.047119  21215.969727 -25386.308838        0.0                0.0    0.000000     -100.000000
2  21615.922119  399.952393  21315.969727 -25386.308838        0.0                0.0  299.952393      199.952393
3  21715.922363  399.952637  21415.969727 -25386.308838        0.0                0.0  299.952637      199.952637
4  21715.922363  201.476318  21613.731567 -25386.308838        0.0                0.0  102.190796       99.952637
5  21715.969727  102.238159  21701.907227 -25386.308838        0.0                0.0   14.062500        0.000000
6  21754.526306   52.619080  21715.969727 -25324.865417        0.0                0.0   38.556580        0.000000
7  21754.526306   27.809540  21754.526306 -25238.927979        0.0                0.0    0.000000      -14.062561
8  21769.931076   15.404770  21768.588867 -25238.927734        0.0                0.0    1.342209      -98.657547
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:42:03]  --------------------------------------------------------------------------------
[07/18 15:42:03]  Iteration: 48 (6 solution, 41 counterexamples)
[07/18 15:42:06]  Generator returned sat in 2.903157 secs.
[07/18 15:42:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:07]  Improved gap from 0 to 15.625
[07/18 15:42:08]  Improved number of small numbers from 50 to 100 out of a max of 100
[07/18 15:42:08]  Verifer returned sat in 1.152931 secs.
[07/18 15:42:08]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  20989.619629    0.095459  20989.572510 -26593.068848        0.0                0.0    0.047119        0.047119
1  20989.619873    0.047363  20989.572510 -26593.068848        0.0                0.0    0.047363      -99.952637
2  21089.619629  100.047119  21089.572754 -26593.068848        0.0                0.0    0.046875      -99.952881
3  21465.572754  376.000000  21189.572754 -26593.068848        0.0                0.0  276.000000      176.000244
4  21465.572754  190.000000  21368.619629 -26593.068848        0.0                0.0   96.953125       76.000244
5  21465.619629   97.000000  21449.994873 -26569.116211        0.0                0.0   15.624756       -0.000244
6  21500.494873   50.500000  21465.619873 -26503.991211        0.0                0.0   34.875000        0.000000
7  21500.494873   27.250000  21500.494873 -26419.616211        0.0                0.0    0.000000      -15.625000
8  21516.119873   15.625000  21516.119873 -26419.616211        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 15:42:08]  --------------------------------------------------------------------------------
[07/18 15:42:08]  Iteration: 49 (6 solution, 42 counterexamples)
[07/18 15:42:13]  Generator returned sat in 4.073190 secs.
[07/18 15:42:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:13]  Verifer returned unsat in 0.080548 secs.
[07/18 15:42:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:13]  --------------------------------------------------------------------------------
[07/18 15:42:13]  Iteration: 50 (7 solution, 42 counterexamples)
[07/18 15:42:14]  Generator returned sat in 0.369161 secs.
[07/18 15:42:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:14]  Verifer returned unsat in 0.065907 secs.
[07/18 15:42:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:14]  --------------------------------------------------------------------------------
[07/18 15:42:14]  Iteration: 51 (8 solution, 42 counterexamples)
[07/18 15:42:15]  Generator returned sat in 0.469372 secs.
[07/18 15:42:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:15]  Verifer returned unsat in 0.062160 secs.
[07/18 15:42:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:15]  --------------------------------------------------------------------------------
[07/18 15:42:15]  Iteration: 52 (9 solution, 42 counterexamples)
[07/18 15:42:16]  Generator returned sat in 0.277875 secs.
[07/18 15:42:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:16]  Improved gap from 193/4096 to 39.0625
[07/18 15:42:16]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/18 15:42:16]  Verifer returned sat in 0.455932 secs.
[07/18 15:42:16]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  21345.030762    0.095459  21144.983887 -26537.085693   0.000000           0.000000  200.046875      100.046875
1  21345.030762    0.046875  21344.983887 -26537.085693   0.000000           0.000000    0.046875        0.046875
2  21411.889648   66.905762  21344.983887 -26503.991455   0.000000           0.000000   66.905762        0.000000
3  21643.030762  298.046875  21511.889648 -26503.991455   0.000000           0.000000  131.141113      131.141113
4  21811.936523  300.046875  21611.889648 -26503.991455   0.046875           0.000000  200.000000      200.000000
5  21811.936523  133.952881  21611.889648 -26503.991455   0.046875           0.046875  200.000000      100.000000
6  21811.936523  135.952881  21713.889648 -26503.991455   0.046875           0.046875   98.000000        0.000000
7  21851.889404  137.952881  21811.889648 -26443.944336   0.046875           0.046875   39.952881        0.000000
8  21951.889404  139.952881  21851.842529 -26443.944336   0.046875           0.046875  100.000000        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:42:17]  --------------------------------------------------------------------------------
[07/18 15:42:17]  Iteration: 53 (9 solution, 43 counterexamples)
[07/18 15:42:20]  Generator returned sat in 2.382317 secs.
[07/18 15:42:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:20]  Improved gap from 157503/4096 to 39.0625
[07/18 15:42:21]  Improved number of small numbers from 36 to 100 out of a max of 100
[07/18 15:42:21]  Verifer returned sat in 0.648716 secs.
[07/18 15:42:21]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  21010.302490    0.095215  21010.302490 -26402.404297   0.000000           0.000000    0.000000     -100.000000
1  21210.302490  200.000000  21210.255859 -26402.404297   0.000000           0.000000    0.046631        0.000000
2  21280.161621   69.905762  21241.099121 -26372.263428   0.000000           0.000000   39.062500        0.000000
3  21539.646240  298.547119  21380.161621 -26372.263428   0.000000           0.000000  159.484619      159.484619
4  21680.208740  300.047119  21480.161621 -26372.263428   0.047119           0.000000  200.000000      200.000000
5  21680.208740  135.452881  21543.161621 -26372.263428   0.047119           0.047119  137.000000      100.000000
6  21680.208740  136.952881  21581.661865 -26372.263428   0.047119           0.047119   98.499756        0.000000
7  21720.161865  138.452881  21680.161621 -26312.216553   0.047119           0.047119   39.953125        0.000000
8  21820.161621  139.952881  21720.114746 -26312.216309   0.047119           0.047119   99.999756        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:42:21]  --------------------------------------------------------------------------------
[07/18 15:42:21]  Iteration: 54 (9 solution, 44 counterexamples)
[07/18 15:42:22]  Generator returned sat in 0.588119 secs.
[07/18 15:42:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:23]  Improved gap from 625/16 to 39.0625
[07/18 15:42:23]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 15:42:23]  Verifer returned sat in 0.504848 secs.
[07/18 15:42:23]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22482.193115    0.095215  22482.193115 -26822.357422   0.000000           0.000000    0.000000          0.0000
1  22582.193115  100.000000  22582.146240 -26822.357422   0.000000           0.000000    0.046875          0.0000
2  22651.052490   68.906250  22582.193115 -26791.216797   0.000000           0.000000   68.859375          0.0000
3  22880.739990  298.546875  22751.052490 -26791.216797   0.000000           0.000000  129.687500        129.6875
4  23051.099365  300.046875  22851.052490 -26791.216797   0.046875           0.000000  200.000000        200.0000
5  23051.099365  135.453125  22851.052490 -26791.216797   0.046875           0.046875  200.000000        100.0000
6  23051.099365  136.953125  22952.552490 -26791.216797   0.046875           0.046875   98.500000          0.0000
7  23091.052490  138.453125  23051.052490 -26731.169922   0.046875           0.046875   39.953125          0.0000
8  23191.052490  139.953125  23091.005615 -26731.169922   0.046875           0.046875  100.000000          0.0000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:42:23]  --------------------------------------------------------------------------------
[07/18 15:42:23]  Iteration: 55 (9 solution, 45 counterexamples)
[07/18 15:42:24]  Generator returned sat in 0.680488 secs.
[07/18 15:42:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:25]  Improved gap from 327487/8192 to 39.0625
[07/18 15:42:25]  Improved number of small numbers from 99 to 100 out of a max of 100
[07/18 15:42:25]  Verifer returned sat in 0.567583 secs.
[07/18 15:42:25]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22227.972168    0.094727  21961.065918 -26731.357666   0.000000           0.000000  266.906250      166.906250
1  22227.972168    0.046875  22161.065674 -26731.357666   0.000000           0.000000   66.906494       66.906250
2  22227.972168    0.046875  22161.065918 -26698.263916   0.000000           0.000000   66.906250        0.000000
3  22459.612793  298.546875  22327.972168 -26698.263916   0.000000           0.000000  131.640625      131.640625
4  22628.019043  300.046875  22427.971924 -26698.263916   0.046875           0.000000  200.000244      200.000000
5  22628.019043  135.453125  22491.065755 -26698.263916   0.046875           0.046875  136.906413      100.000000
6  22628.065755  136.953125  22529.471924 -26698.263916   0.046875           0.046875   98.546956        0.046712
7  22667.971924  138.453125  22627.972168 -26638.217041   0.046875           0.046875   39.952881       -0.000244
8  22767.972168  139.953125  22667.925293 -26638.217041   0.046875           0.046875  100.000000        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:42:25]  --------------------------------------------------------------------------------
[07/18 15:42:25]  Iteration: 56 (9 solution, 46 counterexamples)
[07/18 15:42:29]  Generator returned sat in 2.578401 secs.
[07/18 15:42:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:29]  Improved gap from 2525/64 to 39.0625
[07/18 15:42:29]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/18 15:42:29]  Verifer returned sat in 0.562721 secs.
[07/18 15:42:29]  Counter example: 
[93m    arrival_0,t    cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0  22313.606934    0.094727  22213.583252 -26759.201416   0.000000           0.000000  100.023682      100.023682
1  22313.606934    0.046875  22313.583252 -26759.201416   0.000000           0.000000    0.023682        0.023682
2  22313.606934    0.011719  22313.583252 -26698.263916   0.000000           0.000000    0.023682      -39.038818
3  22651.657471  338.074219  22413.583252 -26698.263916   0.000000           0.000000  238.074219      199.011719
4  22752.657471  339.074219  22551.719971 -26698.263916   0.011719           0.000000  200.925781      200.000000
5  22752.657471  120.568359  22552.645996 -26698.263916   0.011719           0.011719  199.999756      100.000000
6  22752.657471  121.568359  22652.645996 -26698.263916   0.011719           0.011719   99.999756        0.000000
7  22775.226074  122.568359  22752.645752 -26637.326660   0.011719           0.011719   22.568604      -16.494141
8  22876.225830  123.568359  22791.708496 -26637.326416   0.011719           0.011719   84.505615      -15.494141
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 15:42:29]  --------------------------------------------------------------------------------
[07/18 15:42:29]  Iteration: 57 (9 solution, 47 counterexamples)
[07/18 15:42:33]  Generator returned sat in 2.958925 secs.
[07/18 15:42:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:33]  Verifer returned unsat in 0.059356 secs.
[07/18 15:42:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:33]  --------------------------------------------------------------------------------
[07/18 15:42:33]  Iteration: 58 (10 solution, 47 counterexamples)
[07/18 15:42:34]  Generator returned sat in 0.353050 secs.
[07/18 15:42:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:34]  Verifer returned unsat in 0.052937 secs.
[07/18 15:42:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:34]  --------------------------------------------------------------------------------
[07/18 15:42:34]  Iteration: 59 (11 solution, 47 counterexamples)
[07/18 15:42:36]  Generator returned sat in 0.536398 secs.
[07/18 15:42:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:36]  Verifer returned unsat in 0.054855 secs.
[07/18 15:42:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:36]  --------------------------------------------------------------------------------
[07/18 15:42:36]  Iteration: 60 (12 solution, 47 counterexamples)
[07/18 15:42:37]  Generator returned sat in 0.290373 secs.
[07/18 15:42:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:37]  Verifer returned unsat in 0.049765 secs.
[07/18 15:42:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:37]  --------------------------------------------------------------------------------
[07/18 15:42:37]  Iteration: 61 (13 solution, 47 counterexamples)
[07/18 15:42:38]  Generator returned sat in 0.332120 secs.
[07/18 15:42:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:38]  Verifer returned unsat in 0.062530 secs.
[07/18 15:42:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:38]  --------------------------------------------------------------------------------
[07/18 15:42:38]  Iteration: 62 (14 solution, 47 counterexamples)
[07/18 15:42:39]  Generator returned sat in 0.271642 secs.
[07/18 15:42:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:39]  Verifer returned unsat in 0.056241 secs.
[07/18 15:42:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:39]  --------------------------------------------------------------------------------
[07/18 15:42:39]  Iteration: 63 (15 solution, 47 counterexamples)
[07/18 15:42:40]  Generator returned sat in 0.483856 secs.
[07/18 15:42:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:41]  Verifer returned unsat in 0.045602 secs.
[07/18 15:42:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:41]  --------------------------------------------------------------------------------
[07/18 15:42:41]  Iteration: 64 (16 solution, 47 counterexamples)
[07/18 15:42:42]  Generator returned sat in 0.317054 secs.
[07/18 15:42:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:42]  Verifer returned unsat in 0.057433 secs.
[07/18 15:42:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:42]  --------------------------------------------------------------------------------
[07/18 15:42:42]  Iteration: 65 (17 solution, 47 counterexamples)
[07/18 15:42:43]  Generator returned sat in 0.327341 secs.
[07/18 15:42:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:43]  Verifer returned unsat in 0.053503 secs.
[07/18 15:42:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:43]  --------------------------------------------------------------------------------
[07/18 15:42:43]  Iteration: 66 (18 solution, 47 counterexamples)
[07/18 15:42:44]  Generator returned sat in 0.563597 secs.
[07/18 15:42:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:44]  Verifer returned unsat in 0.052744 secs.
[07/18 15:42:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:44]  --------------------------------------------------------------------------------
[07/18 15:42:44]  Iteration: 67 (19 solution, 47 counterexamples)
[07/18 15:42:45]  Generator returned sat in 0.215811 secs.
[07/18 15:42:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:45]  Verifer returned unsat in 0.062285 secs.
[07/18 15:42:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:45]  --------------------------------------------------------------------------------
[07/18 15:42:45]  Iteration: 68 (20 solution, 47 counterexamples)
[07/18 15:42:46]  Generator returned unsat in 0.000270 secs.
[07/18 15:42:46]  [96mNo more solutions found[0m
[07/18 15:42:46]  Final solutions:
[07/18 15:42:46]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:46]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:46]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:46]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:42:46]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:46]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:42:46]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:46]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:42:46]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:46]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:46]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:42:46]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:46]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:46]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:46]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 15:42:46]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:46]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 15:42:46]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:46]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 15:42:46]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 15:42:46]  Took 143.099443 secs.
