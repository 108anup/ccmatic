[08/03 15:04:58]  --------------------------------------------------------------------------------
[08/03 15:04:58]  Iteration: 1 (0 solution, 0 counterexamples)
[08/03 15:04:58]  Generator returned sat in 0.004302 secs.
[08/03 15:04:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:04:58]  Improved gap from 1/10 to 100
[08/03 15:04:58]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:04:58]  Verifer returned sat in 0.254403 secs.
[08/03 15:04:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0       1009.435       1009.435 -1009.435     1009.435       0.1     1009.435        0.0      0.0             0.0
1       1109.435       1109.335 -1009.435     1109.435     100.0     1109.335        0.0      0.1             0.0
2       1209.435       1209.435 -1009.435     1209.435     100.1     1209.435        0.0      0.0             0.0
3       1309.735       1251.435 -1009.435     1309.735     100.3     1251.435        0.1     58.2             0.2
4       1938.135       1409.435 -1009.435     1938.135     686.6     1409.435      528.5      0.2             0.2
5       3913.335       1409.435 -1009.435     3913.335    1975.4     1409.435     2403.7    100.2             0.2
6       8165.935       1509.435 -1009.435     8165.935    4352.8     1509.435     6556.3    100.2             0.2
7      17289.335       1682.435 -1009.435    17289.335    9223.6     1682.435    15579.7     27.2             0.2
8      36257.335       1709.435 -1009.435    36257.335   18995.2     1709.435    34447.7    100.2             0.2
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=1/5.[0m
[08/03 15:04:58]  --------------------------------------------------------------------------------
[08/03 15:04:58]  Iteration: 2 (0 solution, 1 counterexamples)
[08/03 15:04:58]  Generator returned sat in 0.040411 secs.
[08/03 15:04:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:04:59]  Improved number of small numbers from 64 to 76 out of a max of 100
[08/03 15:04:59]  Verifer returned sat in 0.469842 secs.
[08/03 15:04:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    1309.432373    1176.104225 -1009.435303  1309.432373    0.100098  1176.104225     0.000000  133.328148      133.327904
1    1309.432373    1276.104248 -1009.435303  1309.432373  133.328125  1276.104248     0.000000   33.328125       33.327904
2    1309.432373    1309.430059 -1009.435059  1309.432373    0.002686  1309.430059     0.000000    0.002314      -66.671852
3    1576.106725    1376.104225 -1009.435059  1576.106725  266.676667  1376.104225     0.000000  200.002500      100.002500
4    2176.119225    1476.104225 -1009.435059  2176.119225  800.015000  1476.104225   500.012500  200.002500      100.002500
5    2176.119225    1576.104225 -1009.435059  2176.119225    0.010000  1576.104225   500.012500  100.002500        0.002500
6    2609.480059    1676.104248 -1009.435059  2609.480059  533.363333  1676.104248   733.373333  200.002477      100.002500
7    2609.480059    1876.104225 -1009.435059  2609.480059    0.010000  1876.104225   733.373333    0.002500        0.002500
8    3409.492559    1876.104248 -1009.435059  3409.492559  800.015000  1876.104248  1333.385833  200.002477      100.002500
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=40001/400.[0m
[08/03 15:04:59]  --------------------------------------------------------------------------------
[08/03 15:04:59]  Iteration: 3 (0 solution, 2 counterexamples)
[08/03 15:04:59]  Generator returned sat in 0.028377 secs.
[08/03 15:04:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:04:59]  Improved gap from 1/10 to 100
[08/03 15:05:00]  Improved number of small numbers from 65 to 77 out of a max of 101
[08/03 15:05:00]  Verifer returned sat in 0.570815 secs.
[08/03 15:05:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1176.104248    1076.104004 -909.435059  1176.104248    0.100098  1076.104004    0.00000  100.000244      100.000023
1    1176.104248    1076.104248 -909.435059  1176.104248    0.100098  1076.104248    0.00000  100.000000        0.000023
2    1276.204346    1276.104225 -909.435059  1276.204346  200.100098  1276.104225    0.00000    0.100120        0.100120
3    1476.704225    1376.104225 -909.435059  1476.704225  200.600000  1376.104225  100.40000    0.200000        0.200000
4    1576.804225    1476.104225 -909.435059  1576.804225  100.300000  1476.104225  100.50000    0.200000        0.200000
5    1626.754225    1476.104225 -909.435059  1626.754225   50.150000  1476.104225  100.50000   50.150000      -49.850000
6    2003.679225    1676.104225 -909.435059  2003.679225  427.075000  1676.104225  327.37500    0.200000        0.200000
7    2217.016725    1776.104225 -909.435059  2217.016725  213.537500  1776.104225  440.71250    0.200000        0.200000
8    2323.585475    1776.104248 -909.435059  2323.585475  106.768750  1776.104248  447.28125  100.199977        0.200000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, buffer=1/5.[0m
[08/03 15:05:00]  --------------------------------------------------------------------------------
[08/03 15:05:00]  Iteration: 4 (0 solution, 3 counterexamples)
[08/03 15:05:00]  Generator returned sat in 0.355247 secs.
[08/03 15:05:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:01]  Improved gap from 0 to 0
[08/03 15:05:01]  Improved number of small numbers from 58 to 63 out of a max of 101
[08/03 15:05:01]  Verifer returned sat in 0.861181 secs.
[08/03 15:05:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1719.975586    1719.975475 -1109.416309  1719.975586    0.100098  1719.975475    0.00000    0.000111        0.000111
1    1819.979225    1819.974225 -1109.416309  1819.979225  100.003750  1819.974225    0.00125    0.003750        0.002500
2    1919.977975    1819.975475 -1109.416309  1919.977975  100.002500  1819.975475    0.00125  100.001250        0.001250
3    2210.981725    2019.975475 -1109.416309  2210.981725  391.005000  2019.975475  191.00375    0.002500        0.002500
4    2407.981725    2119.975475 -1109.416309  2407.981725  197.002500  2119.975475  288.00375    0.002500        0.002500
5    2507.980475    2219.965576 -1109.416309  2507.980475  100.001250  2219.965576  288.00375    0.011149        0.001250
6    2507.980475    2219.975475 -1009.425049  2507.980475    0.010000  2219.975475  288.00375    0.001250       -0.007490
7    2507.989225    2219.984225  -909.435059  2507.989225    0.010000  2219.984225  288.00375    0.001250       -0.008750
8    2507.997975    2219.994225  -909.435059  2507.997975    0.010000  2219.994225  288.00375    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=1/400.[0m
[08/03 15:05:01]  --------------------------------------------------------------------------------
[08/03 15:05:01]  Iteration: 5 (0 solution, 4 counterexamples)
[08/03 15:05:02]  Generator returned sat in 0.018035 secs.
[08/03 15:05:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:02]  Improved gap from 0 to 0
[08/03 15:05:02]  Improved number of small numbers from 55 to 80 out of a max of 101
[08/03 15:05:02]  Verifer returned sat in 0.703441 secs.
[08/03 15:05:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1857.980469    1857.980469 -1109.416309  1857.980469    0.099854  1857.980469    0.00000    0.000000      -99.999971
1    2257.972900    1957.980469 -1109.416309  2257.972900  399.992432  1957.980469    0.00000  299.992432      199.992461
2    2357.975342    2157.980439 -1109.416309  2357.975342  399.994873  2157.980439    0.00125  199.993652      199.993652
3    2457.974365    2257.980225 -1109.416309  2457.974365  299.992676  2257.980225    0.00125  199.992891      199.992676
4    2457.974365    2357.980225 -1109.416309  2457.974365    0.010000  2357.980225    0.00125   99.992891       99.992676
5    2457.974365    2457.971689 -1109.416260  2457.974365    0.010000  2457.971689    0.00125    0.001426       -0.007275
6    2457.982939    2457.980439 -1009.425049  2457.982939    0.010000  2457.980439    0.00125    0.001250       -0.007490
7    2457.991689    2457.989189  -909.426309  2457.991689    0.010000  2457.989189    0.00125    0.001250        0.000000
8    2458.000439    2457.990479  -909.426270  2458.000439    0.010000  2457.990479    0.00125    0.008711      -99.991211
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=409587/2048.[0m
[08/03 15:05:03]  --------------------------------------------------------------------------------
[08/03 15:05:03]  Iteration: 6 (0 solution, 5 counterexamples)
[08/03 15:05:03]  Generator returned sat in 0.267868 secs.
[08/03 15:05:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:03]  Improved gap from 409/16384 to 48.4375
[08/03 15:05:03]  Improved number of small numbers from 33 to 101 out of a max of 101
[08/03 15:05:03]  Verifer returned sat in 0.341907 secs.
[08/03 15:05:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    2057.900391    2057.900391 -1309.336426  2057.900391    0.099609  2057.900391   0.000000   0.000000     -100.000000
1    2157.925537    2157.900391 -1309.336426  2157.925537  100.025146  2157.900391   0.000000   0.025146      -99.974854
2    2357.975098    2357.900391 -1309.336426  2357.975098  200.074707  2357.900391   0.024902   0.049805        0.049805
3    2457.950195    2457.900391 -1309.336426  2457.950195  100.024902  2457.900391   0.024902   0.024902        0.024902
4    2559.450195    2555.575439 -1309.336426  2559.450195  101.524902  2555.575439   1.500000   2.374756        0.049805
5    2607.837891    2557.900391 -1257.773926  2607.837891   50.762451  2557.900391   1.500000  48.437500        0.000000
6    2611.662842    2606.337891 -1206.211426  2611.662842   52.262451  2606.337891   1.500000   3.824951      -44.612549
7    2661.600342    2654.775391 -1154.648926  2661.600342   53.762451  2654.775391   1.500000   5.324951      -43.112549
8    2711.537842    2703.212891 -1103.086426  2711.537842   55.262451  2703.212891   1.500000   6.824951      -41.612549
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=51/1024.[0m
[08/03 15:05:04]  --------------------------------------------------------------------------------
[08/03 15:05:04]  Iteration: 7 (0 solution, 6 counterexamples)
[08/03 15:05:04]  Generator returned sat in 0.371470 secs.
[08/03 15:05:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:04]  Improved gap from 51/2048 to 100
[08/03 15:05:04]  Improved number of small numbers from 99 to 101 out of a max of 101
[08/03 15:05:04]  Verifer returned sat in 0.240950 secs.
[08/03 15:05:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1876.667480    1876.667480 -1154.648926  1876.667480    0.099609  1876.667480    0.000000    0.000000      -99.999756
1    2076.667236    1976.667236 -1154.648926  2076.667236  199.999756  1976.667236    0.000000  100.000000        0.000000
2    2094.199707    2094.150146 -1154.648926  2094.199707  117.532471  2094.150146    0.000000    0.049561      -82.467529
3    2226.816650    2226.767090 -1154.648926  2226.816650  132.666504  2226.767090    0.000000    0.049561      -49.850586
4    2426.766846    2276.667236 -1154.648926  2426.766846  199.999756  2276.667236    0.049805  150.049805       50.049805
5    2426.766846    2376.667236 -1154.648926  2426.766846  150.000000  2376.667236    0.049805   50.049805      -49.950195
6    2602.717041    2576.667236 -1154.648926  2602.717041  226.000000  2576.667236    0.049805   26.000000       26.000000
7    2916.717041    2676.667236 -1154.648926  2916.717041  340.000000  2676.667236  190.000000   50.049805       50.049805
8    3066.667236    2676.667318 -1154.648926  3066.667236  200.000000  2676.667318  239.950195  150.049723       50.049805
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=51251/1024.[0m
[08/03 15:05:05]  --------------------------------------------------------------------------------
[08/03 15:05:05]  Iteration: 8 (0 solution, 7 counterexamples)
[08/03 15:05:05]  Generator returned sat in 0.139458 secs.
[08/03 15:05:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:05:05]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/03 15:05:05]  Verifer returned sat in 0.171397 secs.
[08/03 15:05:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1876.667480    1876.667480 -1154.648926  1876.667480    0.099609  1876.667480    0.000000    0.000000      -99.999756
1    2076.667236    1976.667236 -1154.648926  2076.667236  199.999756  1976.667236    0.000000  100.000000        0.000000
2    2095.066650    2095.041748 -1154.648926  2095.066650  118.399414  2095.041748    0.000000    0.024902      -81.600586
3    2228.041748    2228.016846 -1154.648926  2228.041748  133.000000  2228.016846    0.000000    0.024902      -48.625488
4    2428.016846    2276.667236 -1154.648926  2428.016846  200.000000  2276.667236    1.299805  150.049805       50.049805
5    2428.016846    2376.667236 -1154.648926  2428.016846  150.000000  2376.667236    1.299805   50.049805      -49.950195
6    2603.467041    2576.667236 -1154.648926  2603.467041  225.500000  2576.667236    1.299805   25.500000       25.500000
7    2916.717041    2676.667236 -1154.648926  2916.717041  338.750000  2676.667236  190.000000   50.049805       50.049805
8    3066.667236    2676.667318 -1154.648926  3066.667236  200.000000  2676.667318  239.950195  150.049723       50.049805
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=51251/1024.[0m
[08/03 15:05:05]  --------------------------------------------------------------------------------
[08/03 15:05:05]  Iteration: 9 (0 solution, 8 counterexamples)
[08/03 15:05:06]  Generator returned sat in 0.150145 secs.
[08/03 15:05:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:05:06]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/03 15:05:06]  Verifer returned sat in 0.264510 secs.
[08/03 15:05:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1879.204834    1879.204590 -1154.64917  1879.204834    0.099365  1879.204590   0.000000    0.000244        0.000244
1    2028.491943    1880.630371 -1154.64917  2028.491943  149.287354  1880.630371   0.000000  147.861572       49.287354
2    2128.491943    2079.204590 -1154.64917  2128.491943  247.861572  2079.204590   0.000000   49.287354       49.287354
3    2228.041748    2179.204590 -1154.64917  2228.041748  148.837158  2179.204590   0.000000   48.837158       48.837158
4    2328.541748    2179.204590 -1154.64917  2328.541748  149.337158  2179.204590   0.024902  149.312256       49.312256
5    2328.541748    2328.492188 -1154.64917  2328.541748  149.287109  2328.492188   0.024902    0.024658      -50.687744
6    2478.304199    2478.254639 -1154.64917  2478.304199  149.787109  2478.254639   0.024902    0.024658       -0.925293
7    2628.566650    2545.429199 -1154.64917  2628.566650  150.287109  2545.429199   0.049805   83.087646       49.312256
8    2728.591309    2679.204590 -1154.64917  2728.591309  183.112305  2679.204590   0.074463   49.312256       49.312256
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=201983/4096.[0m
[08/03 15:05:06]  --------------------------------------------------------------------------------
[08/03 15:05:06]  Iteration: 10 (0 solution, 9 counterexamples)
[08/03 15:05:06]  Generator returned sat in 0.159357 secs.
[08/03 15:05:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:07]  Improved gap from 407/8192 to 1.5625
[08/03 15:05:07]  Improved number of small numbers from 56 to 101 out of a max of 101
[08/03 15:05:07]  Verifer returned sat in 0.329716 secs.
[08/03 15:05:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2226.004150    2126.004150 -1154.649170  2226.004150    0.099365  2126.004150        0.0  100.000000        0.000244
1    2226.004150    2226.003906 -1154.649170  2226.004150    0.024902  2226.003906        0.0    0.000244      -99.999756
2    2624.053467    2426.003906 -1154.649170  2624.053467  398.049561  2426.003906        0.0  198.049561      198.049561
3    2624.053467    2526.003906 -1154.649170  2624.053467    0.024658  2526.003906        0.0   98.049561       98.049561
4    2624.053467    2624.028809 -1154.649170  2624.053467    2.000000  2624.028809        0.0    0.024658       -1.950439
5    2626.028809    2626.004150 -1056.624268  2626.028809    2.000000  2626.004150        0.0    0.024658       -1.950195
6    2628.004150    2627.979004  -958.186768  2628.004150    2.000000  2627.979004        0.0    0.025146       -1.537354
7    2629.979004    2629.954102  -860.162109  2629.979004    2.000000  2629.954102        0.0    0.024902       -1.537842
8    2631.954102    2631.516846  -860.161865  2631.954102    2.000000  2631.516846        0.0    0.437256      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=405657/2048.[0m
[08/03 15:05:07]  --------------------------------------------------------------------------------
[08/03 15:05:07]  Iteration: 11 (0 solution, 10 counterexamples)
[08/03 15:05:08]  Generator returned sat in 0.354301 secs.
[08/03 15:05:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:08]  Improved gap from 1/800 to 100
[08/03 15:05:08]  Improved number of small numbers from 83 to 87 out of a max of 101
[08/03 15:05:08]  Verifer returned sat in 0.434662 secs.
[08/03 15:05:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2226.003906    2126.004150 -1154.64917  2226.003906    0.099121  2126.004150      0.000   99.999756       99.999756
1    2226.003906    2126.004150 -1154.64917  2226.003906    0.001221  2126.004150      0.000   99.999756       -0.000244
2    2325.992920    2325.991650 -1154.64917  2325.992920  199.988770  2325.991650      0.000    0.001270       -0.011230
3    2326.005400    2326.004150 -1154.64917  2326.005400    0.013750  2326.004150      0.000    0.001250      -99.998750
4    2526.031650    2525.996650 -1154.64917  2526.031650  200.027500  2525.996650      0.025    0.010000        0.002500
5    2526.031650    2526.006650 -1154.64917  2526.031650    0.010000  2526.006650      0.025    0.000000      -99.997500
6    2726.066650    2725.995605 -1154.64917  2726.066650  200.035000  2725.995605      0.060    0.011045        0.002500
7    2726.066650    2726.004150 -1154.64917  2726.066650    0.010000  2726.004150      0.060    0.002500      -99.997500
8    2926.091650    2826.004150 -1154.64917  2926.091650  200.027500  2826.004150      0.085  100.002500        0.002500
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=1/400.[0m
[08/03 15:05:08]  --------------------------------------------------------------------------------
[08/03 15:05:08]  Iteration: 12 (0 solution, 11 counterexamples)
[08/03 15:05:09]  Generator returned sat in 0.370182 secs.
[08/03 15:05:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:05:09]  Improved gap from 203/8192 to 100
[08/03 15:05:10]  Improved number of small numbers from 67 to 78 out of a max of 101
[08/03 15:05:10]  Verifer returned sat in 0.606384 secs.
[08/03 15:05:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    2226.004150    2225.954590 -1154.64917  2226.004150    0.098877  2225.954590    0.000000    0.049561        0.024780
1    2226.004150    2225.979370 -1154.64917  2226.004150    0.024902  2225.979370    0.000000    0.024780      -99.975220
2    2426.004150    2325.979492 -1154.64917  2426.004150  200.024780  2325.979492    0.000000  100.024658        0.024780
3    2426.004150    2425.979370 -1154.64917  2426.004150   11.118805  2425.979370    0.000000    0.024780      -99.975220
4    2548.729370    2525.979370 -1154.64917  2548.729370  122.750000  2525.979370    0.000000   22.750000      -77.250000
5    2921.979370    2625.979492 -1154.64917  2921.979370  396.000000  2625.979492  195.950439  100.049438        0.049561
6    3021.929932    2725.979370 -1154.64917  3021.929932  200.000000  2725.979370  195.950439  100.000122        0.000122
7    3472.429810    2825.979370 -1154.64917  3472.429810  550.500000  2825.979370  546.400879  100.049561        0.049561
8    3649.630249    2970.979492 -1154.64917  3649.630249  277.250000  2970.979492  623.601318   55.049438        0.049561
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=203/4096.[0m
[08/03 15:05:10]  --------------------------------------------------------------------------------
[08/03 15:05:10]  Iteration: 13 (0 solution, 12 counterexamples)
[08/03 15:05:10]  Generator returned sat in 0.220651 secs.
[08/03 15:05:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:05:10]  Improved gap from 405/16384 to 100
[08/03 15:05:11]  Improved number of small numbers from 40 to 101 out of a max of 101
[08/03 15:05:11]  Verifer returned sat in 0.419622 secs.
[08/03 15:05:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3072.821045    2872.821045 -1154.649414  3072.821045    0.098633  2872.821045   0.000000  200.000000      100.000000
1    3072.821045    2972.821045 -1154.649414  3072.821045    0.024902  2972.821045   0.000000  100.000000        0.000000
2    3270.395020    3077.721924 -1154.649414  3270.395020  297.573975  3077.721924   0.000000  192.673096       97.573975
3    3270.395020    3270.370361 -1154.649414  3270.395020    3.225342  3270.370361   0.000000    0.024658       -2.426025
4    3472.870361    3272.821045 -1154.649414  3472.870361  202.500000  3272.821045   0.024658  200.024658      100.024658
5    3472.870361    3472.821045 -1154.649414  3472.870361    2.000000  3472.821045   0.024658    0.024658        0.024658
6    3672.895264    3572.821045 -1154.649414  3672.895264  200.049561  3572.821045   0.049561  100.024658      100.024658
7    3672.895264    3672.821045 -1154.649414  3672.895264    2.000000  3672.821045   0.049561    0.024658        0.024658
8    3875.370605    3672.821045 -1154.649414  3875.370605  202.500000  3672.821045   2.524902  200.024658      100.024658
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=409701/4096.[0m
[08/03 15:05:11]  --------------------------------------------------------------------------------
[08/03 15:05:11]  Iteration: 14 (0 solution, 13 counterexamples)
[08/03 15:05:11]  Generator returned sat in 0.125604 secs.
[08/03 15:05:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:05:11]  Improved number of small numbers from 94 to 100 out of a max of 100
[08/03 15:05:11]  Verifer returned sat in 0.138826 secs.
[08/03 15:05:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3072.820801    2872.821045 -1154.649414  3072.820801    0.098389  2872.821045   0.000000  199.999756      100.000000
1    3072.820801    2972.821045 -1154.649414  3072.820801    0.024902  2972.821045   0.000000   99.999756        0.000000
2    3270.395020    3077.721924 -1154.649414  3270.395020  297.573975  3077.721924   0.000000  192.673096       97.574219
3    3270.395020    3270.370361 -1154.649414  3270.395020    1.612549  3270.370361   0.000000    0.024658       -2.425781
4    3472.870117    3272.820801 -1154.649414  3472.870117  202.499756  3272.820801   0.024658  200.024658      100.024658
5    3472.870117    3471.487549 -1154.649414  3472.870117    2.000000  3471.487549   0.024658    1.357910        0.024658
6    3672.895020    3572.820801 -1154.649414  3672.895020  201.382812  3572.820801   0.049561  100.024658      100.024658
7    3672.895020    3672.820801 -1154.649414  3672.895020    2.000000  3672.820801   0.049561    0.024658        0.024658
8    3877.370361    3672.820801 -1154.649414  3877.370361  204.500000  3672.820801   4.524902  200.024658      100.024658
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=409701/4096.[0m
[08/03 15:05:12]  --------------------------------------------------------------------------------
[08/03 15:05:12]  Iteration: 15 (0 solution, 14 counterexamples)
[08/03 15:05:12]  Generator returned sat in 0.391825 secs.
[08/03 15:05:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:13]  Improved number of small numbers from 70 to 92 out of a max of 100
[08/03 15:05:13]  Verifer returned sat in 0.483657 secs.
[08/03 15:05:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3072.820557    2872.821045 -1154.649658  3072.820557    0.098389  2872.821045   0.014893  199.984619       99.984863
1    3072.820557    2972.820801 -1154.649658  3072.820557    0.024902  2972.820801   0.014893   99.984863       -0.015137
2    3270.889648    3072.820801 -1154.649658  3270.889648  298.053955  3072.820801   0.014893  198.053955       98.053955
3    3270.889648    3270.850342 -1154.649658  3270.889648    1.980469  3270.850342   0.014893    0.024414       -1.946045
4    3472.870117    3272.820801 -1154.649658  3472.870117  202.004883  3272.820801   0.024658  200.024658      100.024658
5    3472.870117    3471.517174 -1154.649658  3472.870117    0.010000  3471.517174   0.024658    1.328285        0.024658
6    3672.895020    3572.820557 -1154.649658  3672.895020  201.353187  3572.820557   0.049561  100.024902      100.024658
7    3672.895020    3672.820801 -1154.649658  3672.895020    0.010000  3672.820801   0.049561    0.024658        0.024658
8    3874.875361    3672.820801 -1154.649658  3874.875361  202.005000  3672.820801   2.029902  200.024658      100.024658
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=409701/4096.[0m
[08/03 15:05:13]  --------------------------------------------------------------------------------
[08/03 15:05:13]  Iteration: 16 (0 solution, 15 counterexamples)
[08/03 15:05:14]  Generator returned sat in 0.501945 secs.
[08/03 15:05:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:05:14]  Improved gap from 1/1600 to 100
[08/03 15:05:14]  Improved number of small numbers from 64 to 72 out of a max of 101
[08/03 15:05:14]  Verifer returned sat in 0.608513 secs.
[08/03 15:05:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3139.887939    2840.895645 -1154.649658  3139.887939    0.098389  2840.895645   0.000000  298.992295      198.992295
1    3139.887939    2940.895645 -1154.649658  3139.887939    0.024658  2940.895645   0.000000  198.992295       98.992295
2    3239.889395    3040.895645 -1154.649658  3239.889395  298.993750  3040.895645   0.000625  198.993125       98.993125
3    3239.889395    3239.888145 -1154.649658  3239.889395    0.010000  3239.888145   0.000625    0.000625       -1.006875
4    3439.890020    3240.895645 -1154.649658  3439.890020  200.001250  3240.895645   0.001250  198.993125       98.993125
5    3439.890020    3439.888145 -1154.649658  3439.890020    0.010000  3439.888145   0.001250    0.000625       -1.006875
6    3639.890645    3540.895508 -1154.649658  3639.890645  200.001250  3540.895508   0.001875   98.993262       98.993125
7    3639.890645    3639.888145 -1154.649658  3639.890645    0.010000  3639.888145   0.001875    0.000625       -1.006875
8    3839.891270    3640.895752 -1154.649658  3839.891270  200.001250  3640.895752   0.002500  198.993018       98.993125
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=158389/1600.[0m
[08/03 15:05:15]  --------------------------------------------------------------------------------
[08/03 15:05:15]  Iteration: 17 (0 solution, 16 counterexamples)
[08/03 15:05:15]  Generator returned sat in 0.137944 secs.
[08/03 15:05:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:15]  Improved gap from 403/16384 to 100
[08/03 15:05:16]  Improved number of small numbers from 40 to 55 out of a max of 101
[08/03 15:05:16]  Verifer returned sat in 1.049293 secs.
[08/03 15:05:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3139.538574    3019.158936 -1154.649902  3139.538574    0.098389  3019.158936    0.000000  120.379639      120.379423
1    3139.538574    3019.159151 -1154.649902  3139.538574    0.024658  3019.159151    0.000000  120.379423       20.379423
2    3239.587722    3219.159151 -1154.649902  3239.587722  220.428571  3219.159151    0.024597   20.403974       20.403974
3    3339.612320    3219.159180 -1154.649902  3339.612320  120.428571  3219.159180    0.049194  120.403945       20.403974
4    3339.612320    3319.159151 -1154.649902  3339.612320   60.714286  3319.159151    0.049194   20.403974      -79.596026
5    3829.922631    3519.159151 -1154.649902  3829.922631  510.714286  3519.159151  290.359506   20.403974       20.403974
6    4065.375800    3611.159151 -1154.649902  4065.375800  255.857143  3611.159151  425.812674   28.403974       20.403974
7    4165.400397    3674.824463 -1154.649902  4165.400397  128.428571  3674.824463  425.837272   64.738662       20.403974
8    4165.400397    3719.159180 -1154.649902  4165.400397   64.714286  3719.159180  425.837272   20.403945      -79.596026
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=2340091/114688.[0m
[08/03 15:05:16]  --------------------------------------------------------------------------------
[08/03 15:05:16]  Iteration: 18 (0 solution, 17 counterexamples)
[08/03 15:05:18]  Generator returned sat in 0.887252 secs.
[08/03 15:05:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:18]  Improved gap from 403/8192 to 100
[08/03 15:05:18]  Improved number of small numbers from 29 to 101 out of a max of 101
[08/03 15:05:18]  Verifer returned sat in 0.397279 secs.
[08/03 15:05:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    3239.563232    3139.562988 -1275.053711  3239.563232    0.098389  3139.562988     0.000000  100.000244      100.000244
1    3239.563232    3139.562988 -1275.053711  3239.563232    0.024658  3139.562988     0.000000  100.000244        0.000244
2    3239.587646    3239.563232 -1275.053711  3239.587646  100.024658  3239.563232     0.000000    0.024414      -99.975342
3    3589.636963    3439.550781 -1275.053711  3589.636963  350.073730  3439.550781   150.024658    0.061523        0.049316
4    3889.563232    3539.562988 -1275.053711  3889.563232  299.987793  3539.562988   349.950928    0.049316        0.049316
5    4289.513916    3539.563232 -1275.053711  4289.513916  400.000000  3539.563232   649.901611  100.049072        0.049316
6    4489.464844    3739.562988 -1275.053711  4489.464844  300.000000  3739.562988   749.852539    0.049316        0.049316
7    4789.427734    3839.550781 -1275.053711  4789.427734  300.012207  3839.550781   949.815430    0.061523        0.049316
8    5089.354004    3839.563232 -1275.053711  5089.354004  299.987793  3839.563232  1149.741699  100.049072        0.049316
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, buffer=101/2048.[0m
[08/03 15:05:18]  --------------------------------------------------------------------------------
[08/03 15:05:18]  Iteration: 19 (0 solution, 18 counterexamples)
[08/03 15:05:19]  Generator returned sat in 0.158364 secs.
[08/03 15:05:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:19]  Improved gap from 403/16384 to 0
[08/03 15:05:19]  Improved number of small numbers from 51 to 101 out of a max of 101
[08/03 15:05:19]  Verifer returned sat in 0.277516 secs.
[08/03 15:05:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3488.210693    3488.161377 -1623.676758  3488.210693    0.098145  3488.161377        0.0    0.049316        0.024658
1    3488.210693    3488.186035 -1523.701660  3488.210693    0.024658  3488.186035        0.0    0.024658       -0.000244
2    3786.759766    3488.210938 -1523.701660  3786.759766  298.573730  3488.210938        0.0  298.548828      198.548828
3    3886.760010    3688.210938 -1523.701660  3886.760010  398.549072  3688.210938        0.0  198.549072      198.549072
4    3886.760010    3788.210693 -1523.701660  3886.760010    1.500000  3788.210693        0.0   98.549316       98.549072
5    3886.760010    3886.735352 -1523.701416  3886.760010    1.500000  3886.735352        0.0    0.024658       -1.450684
6    3888.235352    3888.210693 -1425.176758  3888.235352    1.500000  3888.210693        0.0    0.024658       -1.450684
7    3889.710693    3889.686279 -1326.676758  3889.710693    1.500000  3889.686279        0.0    0.024414       -1.475342
8    3891.186279    3891.186035 -1326.676758  3891.186279    1.500000  3891.186035        0.0    0.000244      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=813359/4096.[0m
[08/03 15:05:19]  --------------------------------------------------------------------------------
[08/03 15:05:19]  Iteration: 20 (0 solution, 19 counterexamples)
[08/03 15:05:20]  Generator returned sat in 0.229126 secs.
[08/03 15:05:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:20]  Improved gap from 1/400 to 6.25
[08/03 15:05:20]  Improved number of small numbers from 81 to 85 out of a max of 101
[08/03 15:05:20]  Verifer returned sat in 0.617133 secs.
[08/03 15:05:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3488.162598    3488.161377 -1623.677002  3488.162598    0.09790  3488.161377    0.00000    0.001221        0.001221
1    3694.412627    3581.911377 -1623.677002  3694.412627  206.25125  3581.911377    0.00125  112.500000      106.250000
2    3788.162627    3647.492676 -1623.677002  3788.162627  206.25000  3647.492676    0.00125  140.668701      100.000000
3    3788.162627    3781.911377 -1623.677002  3788.162627  140.66750  3781.911377    0.00125    6.250000        0.000000
4    3994.413877    3888.161377 -1623.677002  3994.413877  212.50125  3888.161377    0.00250  106.250000      106.250000
5    3994.413877    3981.911377 -1623.677002  3994.413877    0.01000  3981.911377    0.00250   12.500000        6.250000
6    3994.413877    3988.161377 -1529.927002  3994.413877    1.51500  3988.161377    0.00250    6.250000        0.000000
7    3994.413877    3994.411377 -1436.177002  3994.413877    3.77250  3994.411377    0.00250    0.000000       -6.250000
8    4001.572627    4000.661377 -1342.427002  4001.572627    7.15875  4000.661377    0.00250    0.908750       -5.341250
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=425/4.[0m
[08/03 15:05:21]  --------------------------------------------------------------------------------
[08/03 15:05:21]  Iteration: 21 (0 solution, 20 counterexamples)
[08/03 15:05:24]  Generator returned sat in 2.665228 secs.
[08/03 15:05:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:24]  Verifer returned unsat in 0.127213 secs.
[08/03 15:05:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:24]  --------------------------------------------------------------------------------
[08/03 15:05:24]  Iteration: 22 (1 solution, 20 counterexamples)
[08/03 15:05:24]  Generator returned sat in 0.109816 secs.
[08/03 15:05:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:24]  Verifer returned unsat in 0.067517 secs.
[08/03 15:05:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:24]  --------------------------------------------------------------------------------
[08/03 15:05:24]  Iteration: 23 (2 solution, 20 counterexamples)
[08/03 15:05:25]  Generator returned sat in 0.110718 secs.
[08/03 15:05:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:25]  Verifer returned unsat in 0.080215 secs.
[08/03 15:05:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:25]  --------------------------------------------------------------------------------
[08/03 15:05:25]  Iteration: 24 (3 solution, 20 counterexamples)
[08/03 15:05:25]  Generator returned sat in 0.128733 secs.
[08/03 15:05:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:25]  Verifer returned unsat in 0.078335 secs.
[08/03 15:05:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:25]  --------------------------------------------------------------------------------
[08/03 15:05:25]  Iteration: 25 (4 solution, 20 counterexamples)
[08/03 15:05:26]  Generator returned sat in 0.103649 secs.
[08/03 15:05:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:26]  Verifer returned unsat in 0.053665 secs.
[08/03 15:05:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:26]  --------------------------------------------------------------------------------
[08/03 15:05:26]  Iteration: 26 (5 solution, 20 counterexamples)
[08/03 15:05:26]  Generator returned sat in 0.106354 secs.
[08/03 15:05:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:26]  Verifer returned unsat in 0.093615 secs.
[08/03 15:05:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:26]  --------------------------------------------------------------------------------
[08/03 15:05:26]  Iteration: 27 (6 solution, 20 counterexamples)
[08/03 15:05:27]  Generator returned sat in 0.102772 secs.
[08/03 15:05:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:27]  Verifer returned unsat in 0.059608 secs.
[08/03 15:05:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:05:27]  --------------------------------------------------------------------------------
[08/03 15:05:27]  Iteration: 28 (7 solution, 20 counterexamples)
[08/03 15:05:27]  Generator returned sat in 0.112382 secs.
[08/03 15:05:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:27]  Verifer returned unsat in 0.068818 secs.
[08/03 15:05:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:27]  --------------------------------------------------------------------------------
[08/03 15:05:27]  Iteration: 29 (8 solution, 20 counterexamples)
[08/03 15:05:28]  Generator returned sat in 0.121424 secs.
[08/03 15:05:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:28]  Verifer returned unsat in 0.052234 secs.
[08/03 15:05:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:28]  --------------------------------------------------------------------------------
[08/03 15:05:28]  Iteration: 30 (9 solution, 20 counterexamples)
[08/03 15:05:28]  Generator returned sat in 0.118274 secs.
[08/03 15:05:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:28]  Verifer returned unsat in 0.041258 secs.
[08/03 15:05:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:28]  --------------------------------------------------------------------------------
[08/03 15:05:28]  Iteration: 31 (10 solution, 20 counterexamples)
[08/03 15:05:29]  Generator returned sat in 0.082751 secs.
[08/03 15:05:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:29]  Verifer returned unsat in 0.058545 secs.
[08/03 15:05:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:29]  --------------------------------------------------------------------------------
[08/03 15:05:29]  Iteration: 32 (11 solution, 20 counterexamples)
[08/03 15:05:29]  Generator returned sat in 0.071677 secs.
[08/03 15:05:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:29]  Verifer returned unsat in 0.070958 secs.
[08/03 15:05:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:29]  --------------------------------------------------------------------------------
[08/03 15:05:29]  Iteration: 33 (12 solution, 20 counterexamples)
[08/03 15:05:31]  Generator returned sat in 1.434562 secs.
[08/03 15:05:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:31]  Improved gap from 1/400 to 4.6875
[08/03 15:05:32]  Improved number of small numbers from 64 to 80 out of a max of 101
[08/03 15:05:32]  Verifer returned sat in 0.643188 secs.
[08/03 15:05:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3881.076172    3881.073730 -1718.989502  3881.076172    0.097900  3881.073730    0.00000    0.002441        0.000085
1    3881.076172    3881.076087 -1623.677002  3881.076172    0.001221  3881.076087    0.00000    0.000085       -4.687415
2    4090.452337    3985.763428 -1623.677002  4090.452337  209.376250  3985.763428    0.00125  104.687659      104.687500
3    4190.450928    4085.763587 -1623.677002  4190.450928  204.686250  4085.763587    0.00125  104.686091      104.686091
4    4292.451087    4185.763428 -1623.677002  4292.451087  206.686250  4185.763428    2.00000  104.687659      104.687500
5    4292.451087    4281.076172 -1623.677002  4292.451087    0.010000  4281.076172    2.00000    9.374915        4.687500
6    4292.451087    4285.763587 -1528.364502  4292.451087    2.010000  4285.763587    2.00000    4.687500        0.000000
7    4292.451087    4290.451087 -1433.052002  4292.451087    4.010000  4290.451087    2.00000    0.000000       -4.687500
8    4298.461087    4295.138672 -1433.052002  4298.461087    6.010000  4295.138672    2.00000    1.322415      -98.677500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=1675/16.[0m
[08/03 15:05:32]  --------------------------------------------------------------------------------
[08/03 15:05:32]  Iteration: 34 (12 solution, 21 counterexamples)
[08/03 15:05:34]  Generator returned sat in 1.424195 secs.
[08/03 15:05:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:05:34]  Improved gap from 401/16384 to 15.625
[08/03 15:05:34]  Improved number of small numbers from 43 to 101 out of a max of 101
[08/03 15:05:34]  Verifer returned sat in 0.451114 secs.
[08/03 15:05:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3785.763428    3785.714844 -1623.677246  3785.763428    0.097900  3785.714844   0.000000    0.048584       -0.000244
1    3785.763672    3785.763672 -1623.677246  3785.763672    0.048828  3785.763672   0.000000    0.000000     -100.000000
2    3985.763428    3970.138428 -1623.677246  3985.763428  199.999756  3970.138428   0.000000   15.625000       -0.000244
3    4112.587646    4085.763672 -1623.677246  4112.587646  142.449219  4085.763672   0.000000   26.823975       26.823975
4    4301.437500    4185.763428 -1623.677246  4301.437500  215.673828  4185.763428   0.048828  115.625244      115.625000
5    4301.437500    4270.138428 -1623.677246  4301.437500    2.000000  4270.138428   0.048828   31.250244       15.625000
6    4301.437500    4285.763672 -1539.302246  4301.437500    5.000000  4285.763672   0.048828   15.625000        0.000000
7    4301.437500    4301.388672 -1454.927246  4301.437500    9.500000  4301.388672   0.048828    0.000000      -15.625000
8    4317.687500    4317.013672 -1370.552246  4317.687500   16.250000  4317.013672   0.048828    0.625000      -15.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=925/8.[0m
[08/03 15:05:34]  --------------------------------------------------------------------------------
[08/03 15:05:34]  Iteration: 35 (12 solution, 22 counterexamples)
[08/03 15:05:39]  Generator returned sat in 4.209458 secs.
[08/03 15:05:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:05:39]  Improved gap from 0 to 3.125
[08/03 15:05:39]  Improved number of small numbers from 58 to 101 out of a max of 101
[08/03 15:05:39]  Verifer returned sat in 0.459926 secs.
[08/03 15:05:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0      3720.0625    3720.013428 -1720.552246    3720.0625    0.097900  3720.013428   0.000000    0.049072        0.049072
1      3720.0625    3720.013428 -1623.677246    3720.0625    0.048828  3720.013428   0.000000    0.049072       -3.075928
2      3925.3125    3723.138428 -1623.677246    3925.3125  205.299072  3723.138428   0.000000  202.174072      102.174072
3      3925.3125    3923.138428 -1623.677246    3925.3125  202.174072  3923.138428   0.000000    2.174072        2.174072
4      4126.3125    3979.437744 -1623.677246    4126.3125  203.174072  3979.437744   0.049072  146.825684      103.125000
5      4126.3125    4023.138428 -1623.677246    4126.3125    1.000000  4023.138428   0.049072  103.125000        3.125000
6      4126.3125    4123.138428 -1526.802246    4126.3125    2.000000  4123.138428   0.049072    3.125000        0.000000
7      4126.3125    4126.263428 -1429.927246    4126.3125    3.000000  4126.263428   0.049072    0.000000       -3.125000
8      4130.3125    4129.388428 -1429.927246    4130.3125    4.000000  4129.388428   0.049072    0.875000      -99.125000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=825/8.[0m
[08/03 15:05:40]  --------------------------------------------------------------------------------
[08/03 15:05:40]  Iteration: 36 (12 solution, 23 counterexamples)
[08/03 15:05:45]  Generator returned sat in 4.473195 secs.
[08/03 15:05:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:45]  Improved gap from 1/800 to 0
[08/03 15:05:45]  Improved number of small numbers from 67 to 78 out of a max of 101
[08/03 15:05:45]  Verifer returned sat in 0.741450 secs.
[08/03 15:05:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3926.308594    3926.257324 -1826.795898  3926.308594    0.097656  3926.257324    0.049072    0.002197        0.001191
1    3926.308594    3926.258428 -1726.797246  3926.308594    0.001465  3926.258428    0.049072    0.001094       -0.000156
2    4026.312500    3926.259766 -1726.797246  4026.312500  100.005000  3926.259766    0.050322  100.002412        0.002500
3    4026.312500    4026.260928 -1626.799805  4026.312500   50.000625  4026.260928    0.050322    0.001250       -0.000059
4    4126.312500    4126.260928 -1626.799746  4126.312500  100.001250  4126.260928    0.050322    0.001250        0.000000
5    4326.313750    4226.253418 -1626.799746  4326.313750  200.002500  4226.253418  100.049072    0.011260        0.002500
6    4326.313750    4226.263428 -1526.802246  4326.313750    0.010000  4226.263428  100.049072    0.001250        0.000000
7    4326.332500    4226.264678 -1426.820996  4326.332500    0.020000  4226.264678  100.049072    0.018750        0.000000
8    4326.353750    4226.283447 -1426.820801  4326.353750    0.040000  4226.283447  100.049072    0.021230      -99.978555
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=1/400.[0m
[08/03 15:05:46]  --------------------------------------------------------------------------------
[08/03 15:05:46]  Iteration: 37 (12 solution, 24 counterexamples)
[08/03 15:05:46]  Generator returned sat in 0.193681 secs.
[08/03 15:05:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:46]  Improved gap from 0 to 100
[08/03 15:05:47]  Improved number of small numbers from 91 to 91 out of a max of 101
[08/03 15:05:47]  Verifer returned sat in 0.456637 secs.
[08/03 15:05:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3751.342083    3651.342083 -1926.742246  3751.342083    0.097656  3651.342083   0.000000  100.000000      100.000000
1    3751.342083    3651.342083 -1926.742246  3751.342083    0.000833  3651.342083   0.000000  100.000000        0.000000
2    3951.306250    3751.342917 -1926.742246  3951.306250  299.964167  3751.342917   0.000000  199.963333       99.964167
3    3951.306250    3951.305417 -1926.742246  3951.306250   25.010417  3951.305417   0.000000    0.000833       -0.035833
4    4151.307917    3951.342083 -1926.742246  4151.307917  200.002500  3951.342083   0.000833  199.965000       99.965000
5    4151.307917    4151.306250 -1926.742246  4151.307917    0.010000  4151.306250   0.000833    0.000833       -0.035000
6    4351.308750    4251.342083 -1926.742246  4351.308750  200.001667  4251.342083   0.001667   99.965000       99.965000
7    4351.308750    4351.307083 -1926.742246  4351.308750    0.010000  4351.307083   0.001667    0.000000       -0.035000
8    4551.311250    4351.342083 -1926.742246  4551.311250  200.002500  4351.342083   0.004167  199.965000       99.965000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=19993/200.[0m
[08/03 15:05:47]  --------------------------------------------------------------------------------
[08/03 15:05:47]  Iteration: 38 (12 solution, 25 counterexamples)
[08/03 15:05:49]  Generator returned sat in 1.494158 secs.
[08/03 15:05:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:49]  Improved gap from 3/32768 to 100
[08/03 15:05:50]  Improved number of small numbers from 34 to 43 out of a max of 101
[08/03 15:05:50]  Verifer returned sat in 0.993384 secs.
[08/03 15:05:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3676.331299    3576.331214 -1926.742432  3676.331299    0.097168  3576.331214   0.000000  100.000085      100.000085
1    3676.331299    3576.331214 -1926.742432  3676.331299    0.000732  3576.331214   0.000000  100.000085        0.000085
2    3876.321763    3676.331214 -1926.742432  3876.321763  299.990549  3676.331214   0.000092  199.990458       99.990458
3    3876.321763    3876.321580 -1926.742432  3876.321763  100.010000  3876.321580   0.000092    0.000092       -0.009542
4    4076.321854    3876.331214 -1926.742432  4076.321854  200.000183  3876.331214   0.000183  199.990458       99.990458
5    4076.321854    4076.321580 -1926.742432  4076.321854    0.010000  4076.321580   0.000183    0.000092       -0.009542
6    4276.321946    4176.331055 -1926.742432  4276.321946  200.000183  4176.331055   0.000275   99.990617       99.990458
7    4276.321946    4276.321580 -1926.742432  4276.321946    0.010000  4276.321580   0.000275    0.000092       -0.009542
8    4476.322038    4276.331299 -1926.742432  4476.322038  200.000183  4276.331299   0.000366  199.990373       99.990458
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=81912183/819200.[0m
[08/03 15:05:50]  --------------------------------------------------------------------------------
[08/03 15:05:50]  Iteration: 39 (12 solution, 26 counterexamples)
[08/03 15:05:58]  Generator returned sat in 7.244569 secs.
[08/03 15:05:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:05:58]  Improved gap from 0 to 12.5
[08/03 15:05:58]  Improved number of small numbers from 55 to 101 out of a max of 101
[08/03 15:05:58]  Verifer returned sat in 0.548654 secs.
[08/03 15:05:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4017.885254    3392.836670 -1843.247803  4017.885254    0.097168  3392.836670        0.0  625.048584      525.048584
1    4017.885254    3492.836670 -1843.247803  4017.885254    0.048584  3492.836670        0.0  525.048584      425.048584
2    4017.885254    3592.836670 -1843.247803  4017.885254    0.048584  3592.836670        0.0  425.048584      325.048584
3    4017.885254    3692.836670 -1843.247803  4017.885254  400.000000  3692.836670        0.0  325.048584      225.048584
4    4017.885254    3880.433594 -1843.247803  4017.885254  200.000000  3880.433594        0.0  137.451660      125.048584
5    4017.885254    3967.836670 -1843.247803  4017.885254  100.000000  3967.836670        0.0   50.048584       25.048584
6    4017.885254    3992.836670 -1768.296387  4017.885254   50.000000  3992.836670        0.0   25.048584        0.000000
7    4017.885254    4017.885254 -1680.796387  4017.885254   25.000000  4017.885254        0.0    0.000000      -12.500000
8    4030.385254    4030.385254 -1680.796387  4030.385254   12.500000  4030.385254        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=1741197/4096.[0m
[08/03 15:05:59]  --------------------------------------------------------------------------------
[08/03 15:05:59]  Iteration: 40 (12 solution, 27 counterexamples)
[08/03 15:06:00]  Generator returned sat in 1.116132 secs.
[08/03 15:06:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:00]  Improved gap from 0 to 0
[08/03 15:06:01]  Improved number of small numbers from 67 to 89 out of a max of 101
[08/03 15:06:01]  Verifer returned sat in 0.862811 secs.
[08/03 15:06:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3489.757324    3289.757080 -1740.168213  3489.757324    0.096924  3289.757080   0.000000  200.000244      100.000244
1    3489.757324    3489.757080 -1740.168213  3489.757324    0.000488  3489.757080   0.000000    0.000244        0.000244
2    3689.742920    3556.417236 -1740.168213  3689.742920  199.985840  3556.417236   0.000000  133.325684       99.985840
3    3689.742920    3689.742295 -1740.154053  3689.742920  133.325000  3689.742295   0.000000    0.000625        0.000000
4    3889.729795    3789.742920 -1740.154053  3889.729795  199.987500  3789.742920   0.000625   99.986250       99.986250
5    3889.729795    3889.728760 -1740.154053  3889.729795    0.010000  3889.728760   0.000625    0.000410       -0.013750
6    3889.744385    3889.742920 -1640.175781  3889.744385    0.015000  3889.742920   0.000625    0.000840       -0.020889
7    3889.766045    3889.764795 -1540.176758  3889.766045    0.022500  3889.764795   0.000625    0.000625       -0.000205
8    3889.799170    3889.765625 -1540.176758  3889.799170    0.033750  3889.765625   0.000625    0.032920      -99.967080
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=79989/800.[0m
[08/03 15:06:01]  --------------------------------------------------------------------------------
[08/03 15:06:01]  Iteration: 41 (12 solution, 28 counterexamples)
[08/03 15:06:04]  Generator returned sat in 1.818099 secs.
[08/03 15:06:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:04]  Improved gap from 397/16384 to 0
[08/03 15:06:04]  Improved number of small numbers from 71 to 101 out of a max of 101
[08/03 15:06:04]  Verifer returned sat in 0.241614 secs.
[08/03 15:06:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3690.208496    3389.756836 -1740.168213  3690.208496    0.096924  3389.756836    0.00000  300.451660      300.451660
1    3690.256836    3389.757080 -1740.168213  3690.256836  300.500000  3389.757080    0.00000  300.499756      200.500000
2    3690.256836    3489.757080 -1740.168213  3690.256836    0.048340  3489.757080    0.00000  200.499756      100.500000
3    3890.353760    3689.756836 -1740.168213  3890.353760  400.596680  3689.756836    0.04834  200.548584      200.548584
4    3890.353760    3789.756836 -1740.168213  3890.353760    2.000000  3789.756836    0.04834  100.548584      100.548584
5    3890.353760    3889.756836 -1740.168213  3890.353760    0.500000  3889.756836    0.04834    0.548584        0.548584
6    3890.353760    3889.756836 -1640.716797  3890.353760    0.500000  3889.756836    0.04834    0.548584        0.000000
7    3890.353760    3890.305420 -1540.716797  3890.353760    0.500000  3890.305420    0.04834    0.000000        0.000000
8    3890.853760    3890.305420 -1540.716797  3890.853760    0.500000  3890.305420    0.04834    0.500000      -99.500000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=821447/4096.[0m
[08/03 15:06:04]  --------------------------------------------------------------------------------
[08/03 15:06:04]  Iteration: 42 (12 solution, 29 counterexamples)
[08/03 15:06:06]  Generator returned sat in 1.430192 secs.
[08/03 15:06:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:06]  Improved gap from 0 to 3.125
[08/03 15:06:07]  Improved number of small numbers from 41 to 101 out of a max of 101
[08/03 15:06:07]  Verifer returned sat in 0.533235 secs.
[08/03 15:06:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3837.349854    3634.273193 -1738.640137  3837.349854    0.096680  3634.273193    0.00000  203.076660       203.07666
1    3837.349854    3734.272949 -1738.640137  3837.349854  203.076416  3734.272949    0.00000  103.076904       103.07666
2    3837.349854    3834.273193 -1738.640137  3837.349854    0.048584  3834.273193    0.00000    3.076660         3.07666
3    4036.946533    3934.273193 -1738.640137  4036.946533  202.673340  3934.273193    0.00000  102.673340       102.67334
4    4137.446533    4034.272949 -1738.640137  4137.446533  203.173340  4034.272949    0.04834  103.125244       103.12500
5    4137.446533    4134.273193 -1738.640137  4137.446533    2.000000  4134.273193    0.04834    3.125000         3.12500
6    4137.446533    4134.273193 -1641.765137  4137.446533    2.500000  4134.273193    0.04834    3.125000         0.00000
7    4137.446533    4137.398193 -1544.890137  4137.446533    3.000000  4137.398193    0.04834    0.000000        -3.12500
8    4140.946533    4140.523193 -1448.015137  4140.946533    3.500000  4140.523193    0.04834    0.375000        -2.75000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=825/8.[0m
[08/03 15:06:07]  --------------------------------------------------------------------------------
[08/03 15:06:07]  Iteration: 43 (12 solution, 30 counterexamples)
[08/03 15:06:08]  Generator returned sat in 0.334676 secs.
[08/03 15:06:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:08]  Improved gap from 99/4096 to 1.5625
[08/03 15:06:08]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:06:08]  Verifer returned sat in 0.254926 secs.
[08/03 15:06:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    3532.908203    3532.884033 -1839.265137  3532.908203    0.09668  3532.884033    0.00000    0.02417       -99.97583
1    3732.956543    3632.884033 -1839.265137  3732.956543  200.07251  3632.884033    0.02417  100.04834         0.04834
2    3732.956543    3732.908203 -1839.265137  3732.956543  100.02417  3732.908203    0.02417    0.02417       -99.95166
3    3932.932373    3932.884033 -1839.265137  3932.932373  200.00000  3932.884033    0.02417    0.02417         0.02417
4    4133.408203    3932.884033 -1839.265137  4133.408203  200.50000  3932.884033  100.47583  100.04834         0.04834
5    4133.408203    4032.908203 -1740.851807  4133.408203    1.50000  4032.908203  100.47583    0.02417        -1.53833
6    4135.384033    4034.470703 -1642.414307  4135.384033    2.00000  4034.470703  100.47583    0.43750        -1.12500
7    4137.446533    4036.946533 -1544.890137  4137.446533    2.50000  4036.946533  100.47583    0.02417        -1.53833
8    4140.422363    4038.509033 -1544.890137  4140.422363    3.00000  4038.509033  100.47583    1.43750       -98.56250
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=99/2048.[0m
[08/03 15:06:08]  --------------------------------------------------------------------------------
[08/03 15:06:08]  Iteration: 44 (12 solution, 31 counterexamples)
[08/03 15:06:09]  Generator returned sat in 0.322100 secs.
[08/03 15:06:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:09]  Improved gap from 99/8192 to 1.5625
[08/03 15:06:09]  Improved number of small numbers from 85 to 101 out of a max of 101
[08/03 15:06:09]  Verifer returned sat in 0.462768 secs.
[08/03 15:06:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3433.822510    3433.806885 -1839.265137  3433.822510    0.096436  3433.806885   0.000000    0.015625        0.015625
1    3733.828369    3533.806885 -1839.265137  3733.828369  300.021484  3533.806885  98.458984  101.562500      101.562500
2    3833.812744    3633.806885 -1839.265137  3833.812744  201.546875  3633.806885  98.458984  101.546875      101.546875
3    3933.828369    3733.322510 -1839.265137  3933.828369  201.562500  3733.322510  98.458984  102.046875      101.562500
4    4033.843994    3833.806885 -1839.265137  4033.843994  202.062500  3833.806885  98.474609  101.562500      101.562500
5    4033.843994    3933.806885 -1839.265137  4033.843994    0.500000  3933.806885  98.474609    1.562500        1.562500
6    4033.843994    3933.806885 -1740.827637  4033.843994    1.000000  3933.806885  98.474609    1.562500        0.000000
7    4033.843994    3935.369385 -1642.390381  4033.843994    1.500000  3935.369385  98.474609    0.000000       -1.562744
8    4035.843994    3936.932129 -1543.952881  4035.843994    2.000000  3936.932129  98.474609    0.437256       -1.125244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=1625/16.[0m
[08/03 15:06:10]  --------------------------------------------------------------------------------
[08/03 15:06:10]  Iteration: 45 (12 solution, 32 counterexamples)
[08/03 15:06:13]  Generator returned sat in 3.013297 secs.
[08/03 15:06:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:13]  Improved gap from 0 to 100
[08/03 15:06:14]  Improved number of small numbers from 45 to 48 out of a max of 101
[08/03 15:06:14]  Verifer returned sat in 0.897602 secs.
[08/03 15:06:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3467.019531    3466.995565 -1740.827881  3467.019531    0.096191  3466.995565    0.000000    0.023966      -66.787354
1    3733.828369    3533.806885 -1740.827881  3733.828369  266.832804  3533.806885   99.973267  100.048218        0.048218
2    3833.804260    3633.806885 -1740.827881  3833.804260  200.024109  3633.806885   99.973267  100.024109        0.024109
3    3933.828369    3733.806885 -1740.827881  3933.828369  200.048218  3733.806885   99.973267  100.048218        0.048218
4    3967.185811    3867.188436 -1740.827881  3967.185811  133.405660  3867.188436   99.973267    0.024109      -66.594340
5    4133.852478    4001.188436 -1740.827881  4133.852478  166.690776  4001.188436   99.997375   32.666667        0.048218
6    4284.876587    4133.806885 -1740.827881  4284.876587  183.690776  4133.806885  151.021484    0.048218        0.048218
7    4484.828369    4178.315620 -1740.827881  4484.828369  200.000000  4178.315620  250.973267   55.539483        0.048218
8    4584.852478    4233.806885 -1740.827881  4584.852478  155.563592  4233.806885  250.997375  100.048218        0.048218
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, buffer=395/8192.[0m
[08/03 15:06:14]  --------------------------------------------------------------------------------
[08/03 15:06:14]  Iteration: 46 (12 solution, 33 counterexamples)
[08/03 15:06:16]  Generator returned sat in 1.283360 secs.
[08/03 15:06:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:16]  Improved gap from 1/400 to 48.4375
[08/03 15:06:17]  Improved number of small numbers from 55 to 68 out of a max of 101
[08/03 15:06:17]  Verifer returned sat in 1.069961 secs.
[08/03 15:06:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3343.082275    3143.080936 -1603.217881  3343.082275    0.096191  3143.080936   0.000000  200.001340      100.001340
1    3343.082275    3343.080811 -1603.217881  3343.082275  200.001250  3343.080811   0.000000    0.001465        0.001340
2    3443.082275    3443.080936 -1603.217881  3443.082275  100.001465  3443.080936   0.000000    0.001340        0.001340
3    3530.612811    3530.611561 -1603.217881  3530.612811   87.531875  3530.611561   0.000000    0.001250      -12.468125
4    3724.376873    3643.073436 -1603.217881  3724.376873  193.765312  3643.073436  81.293437    0.010000        0.002500
5    3724.376873    3643.082186 -1551.656738  3724.376873    0.010000  3643.082186  81.293437    0.001250      -48.436357
6    3824.376248    3694.645311 -1503.219756  3824.376248  100.000625  3694.645311  81.293437   48.437500        0.000000
7    3857.955623    3743.082811 -1453.208984  3857.955623   82.016875  3743.082811  81.293437   33.579375      -16.409854
8    3874.380936    3793.072266 -1453.208984  3874.380936   50.004688  3793.072266  81.293437    0.015233      -99.984541
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=1/400.[0m
[08/03 15:06:18]  --------------------------------------------------------------------------------
[08/03 15:06:18]  Iteration: 47 (12 solution, 34 counterexamples)
[08/03 15:06:19]  Generator returned sat in 0.566534 secs.
[08/03 15:06:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:19]  Improved gap from 1/1600 to 100
[08/03 15:06:19]  Improved number of small numbers from 55 to 61 out of a max of 101
[08/03 15:06:19]  Verifer returned sat in 0.790876 secs.
[08/03 15:06:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3343.054932    3043.069144 -1603.217881  3343.054932    0.095947  3043.069144   0.000000  299.985788      199.985788
1    3343.055811    3243.069144 -1603.217881  3343.055811  299.986667  3243.069144   0.000833   99.985833       99.985833
2    3443.056644    3243.070811 -1603.217881  3443.056644  199.986667  3243.070811   0.001667  199.984167       99.985833
3    3443.056644    3443.054144 -1603.217881  3443.056644    0.009167  3443.054144   0.001667    0.000833       -0.014167
4    3643.057477    3443.070811 -1603.217881  3643.057477  200.001667  3443.070811   0.002500  199.984167       99.985833
5    3643.057477    3643.054144 -1603.217881  3643.057477    0.010000  3643.054144   0.002500    0.000833       -0.014167
6    3843.058311    3643.069336 -1603.217881  3843.058311  200.001667  3643.069336   0.003333  199.985641       99.985833
7    3843.058311    3843.054144 -1603.217881  3843.058311    0.010000  3843.054144   0.003333    0.000833       -0.014167
8    4043.059144    3843.069336 -1603.217881  4043.059144  200.001667  3843.069336   0.004167  199.985641       99.985833
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=119983/1200.[0m
[08/03 15:06:20]  --------------------------------------------------------------------------------
[08/03 15:06:20]  Iteration: 48 (12 solution, 35 counterexamples)
[08/03 15:06:22]  Generator returned sat in 1.744390 secs.
[08/03 15:06:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:22]  Improved gap from 0 to 48.4375
[08/03 15:06:22]  Improved number of small numbers from 39 to 101 out of a max of 101
[08/03 15:06:22]  Verifer returned sat in 0.307639 secs.
[08/03 15:06:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3043.104492    2943.056885 -1503.205322  3043.104492    0.095947  2943.056885        0.0  100.047607        0.047852
1    3043.104736    3043.056641 -1503.205322  3043.104736  100.047852  3043.056641        0.0    0.048096      -99.951904
2    3443.056641    3243.056641 -1503.205322  3443.056641  400.000000  3243.056641        0.0  200.000000      200.000000
3    3443.056641    3343.056641 -1503.205322  3443.056641   48.485352  3343.056641        0.0  100.000000      100.000000
4    3443.056641    3443.008789 -1503.205322  3443.056641   48.485352  3443.008789        0.0    0.047852        0.000000
5    3491.494141    3443.056885 -1451.643066  3491.494141   48.485352  3443.056885        0.0   48.437256       -0.000244
6    3491.542236    3491.494385 -1400.080566  3491.542236   48.485352  3491.494385        0.0    0.047852      -48.389648
7    3539.979736    3539.931885 -1348.565674  3539.979736   48.485352  3539.931885        0.0    0.047852      -48.437256
8    3588.417236    3588.416992 -1348.565674  3588.417236   48.485352  3588.416992        0.0    0.000244      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=819397/4096.[0m
[08/03 15:06:23]  --------------------------------------------------------------------------------
[08/03 15:06:23]  Iteration: 49 (12 solution, 36 counterexamples)
[08/03 15:06:24]  Generator returned sat in 1.117351 secs.
[08/03 15:06:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:24]  Verifer returned unsat in 0.122326 secs.
[08/03 15:06:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:24]  --------------------------------------------------------------------------------
[08/03 15:06:24]  Iteration: 50 (13 solution, 36 counterexamples)
[08/03 15:06:25]  Generator returned sat in 0.339531 secs.
[08/03 15:06:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:25]  Verifer returned unsat in 0.103469 secs.
[08/03 15:06:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:25]  --------------------------------------------------------------------------------
[08/03 15:06:25]  Iteration: 51 (14 solution, 36 counterexamples)
[08/03 15:06:26]  Generator returned sat in 0.208119 secs.
[08/03 15:06:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:26]  Verifer returned unsat in 0.073915 secs.
[08/03 15:06:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:26]  --------------------------------------------------------------------------------
[08/03 15:06:26]  Iteration: 52 (15 solution, 36 counterexamples)
[08/03 15:06:27]  Generator returned sat in 0.166847 secs.
[08/03 15:06:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:27]  Verifer returned unsat in 0.057824 secs.
[08/03 15:06:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:27]  --------------------------------------------------------------------------------
[08/03 15:06:27]  Iteration: 53 (16 solution, 36 counterexamples)
[08/03 15:06:33]  Generator returned sat in 5.964895 secs.
[08/03 15:06:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:34]  Verifer returned unsat in 0.058661 secs.
[08/03 15:06:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:34]  --------------------------------------------------------------------------------
[08/03 15:06:34]  Iteration: 54 (17 solution, 36 counterexamples)
[08/03 15:06:35]  Generator returned sat in 0.862021 secs.
[08/03 15:06:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:35]  Verifer returned unsat in 0.098426 secs.
[08/03 15:06:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:35]  --------------------------------------------------------------------------------
[08/03 15:06:35]  Iteration: 55 (18 solution, 36 counterexamples)
[08/03 15:06:36]  Generator returned sat in 0.238647 secs.
[08/03 15:06:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:36]  Verifer returned unsat in 0.076364 secs.
[08/03 15:06:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:36]  --------------------------------------------------------------------------------
[08/03 15:06:36]  Iteration: 56 (19 solution, 36 counterexamples)
[08/03 15:06:37]  Generator returned sat in 0.194756 secs.
[08/03 15:06:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:37]  Verifer returned unsat in 0.053258 secs.
[08/03 15:06:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:37]  --------------------------------------------------------------------------------
[08/03 15:06:37]  Iteration: 57 (20 solution, 36 counterexamples)
[08/03 15:06:37]  Generator returned sat in 0.168312 secs.
[08/03 15:06:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:38]  Verifer returned unsat in 0.094990 secs.
[08/03 15:06:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:38]  --------------------------------------------------------------------------------
[08/03 15:06:38]  Iteration: 58 (21 solution, 36 counterexamples)
[08/03 15:06:38]  Generator returned sat in 0.339981 secs.
[08/03 15:06:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:06:39]  Verifer returned unsat in 0.082831 secs.
[08/03 15:06:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:06:39]  --------------------------------------------------------------------------------
[08/03 15:06:39]  Iteration: 59 (22 solution, 36 counterexamples)
[08/03 15:06:40]  Generator returned sat in 0.462101 secs.
[08/03 15:06:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:06:40]  Verifer returned unsat in 0.061193 secs.
[08/03 15:06:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:06:40]  --------------------------------------------------------------------------------
[08/03 15:06:40]  Iteration: 60 (23 solution, 36 counterexamples)
[08/03 15:06:40]  Generator returned sat in 0.215073 secs.
[08/03 15:06:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:06:41]  Verifer returned unsat in 0.061254 secs.
[08/03 15:06:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:06:41]  --------------------------------------------------------------------------------
[08/03 15:06:41]  Iteration: 61 (24 solution, 36 counterexamples)
[08/03 15:06:41]  Generator returned sat in 0.170801 secs.
[08/03 15:06:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:41]  Verifer returned unsat in 0.047745 secs.
[08/03 15:06:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:06:41]  --------------------------------------------------------------------------------
[08/03 15:06:41]  Iteration: 62 (25 solution, 36 counterexamples)
[08/03 15:06:43]  Generator returned sat in 1.055887 secs.
[08/03 15:06:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:06:43]  Improved gap from 393/16384 to 0
[08/03 15:06:44]  Improved number of small numbers from 26 to 46 out of a max of 101
[08/03 15:06:44]  Verifer returned sat in 1.017882 secs.
[08/03 15:06:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1810.661621    1710.637695 -1353.119497  1810.661621    0.095703  1710.637695    0.000000  100.023926        0.024010
1    1810.661621    1810.637695 -1353.119497  1810.661621    0.024170  1810.637695    0.000000    0.023926      -99.975990
2    2010.661621    1910.637611 -1353.119497  2010.661621  200.023926  1910.637611    0.000000  100.024010        0.024010
3    2310.925453    2110.637611 -1353.119497  2310.925453  400.287842  2110.637611  200.239868    0.047974        0.047974
4    2511.021400    2210.637611 -1353.119497  2511.021400  200.143921  2210.637611  300.335815    0.047974        0.047974
5    2611.045387    2310.577644 -1353.119497  2611.045387  100.071960  2310.577644  300.359802    0.107941        0.047974
6    2660.973427    2359.589600 -1303.095510  2660.973427   50.035980  2359.589600  300.359802    1.024025        0.000000
7    2660.973427    2360.613625 -1203.095510  2660.973427    1.000000  2360.613625  300.359802    0.000000        0.000000
8    2661.973427    2360.613770 -1203.095459  2661.973427    1.000000  2360.613770  300.359802    0.999855      -98.999949
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, buffer=393/8192.[0m
[08/03 15:06:44]  --------------------------------------------------------------------------------
[08/03 15:06:44]  Iteration: 63 (25 solution, 37 counterexamples)
[08/03 15:06:45]  Generator returned sat in 0.258645 secs.
[08/03 15:06:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:06:45]  Improved gap from 0 to 0
[08/03 15:06:45]  Improved number of small numbers from 55 to 101 out of a max of 101
[08/03 15:06:45]  Verifer returned sat in 0.302666 secs.
[08/03 15:06:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1909.897461    1909.849854 -1403.047607  1909.897461    0.095703  1909.849854   0.000000    0.047607      -99.952393
1    2309.993408    2009.849854 -1403.047607  2309.993408  400.143555  2009.849854   0.047852  300.095703      200.095703
2    2309.993408    2109.849854 -1403.047607  2309.993408  300.047852  2109.849854   0.047852  200.095703      100.095703
3    2509.945557    2309.849854 -1403.047607  2509.945557  400.047852  2309.849854   0.047852  200.047852      200.047852
4    2509.945557    2409.849609 -1403.047607  2509.945557    1.000000  2409.849609   0.047852  100.048096      100.047852
5    2509.945557    2508.849609 -1403.047607  2509.945557    1.000000  2508.849609   0.047852    1.048096        0.047852
6    2509.945557    2509.849854 -1303.095459  2509.945557    1.000000  2509.849854   0.047852    0.047852        0.000000
7    2510.897705    2509.897705 -1204.047607  2510.897705    1.000000  2509.897705   0.047852    0.952148        0.000000
8    2510.945557    2510.849854 -1204.047607  2510.945557    1.000000  2510.849854   0.047852    0.047852      -99.952148
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=102449/512.[0m
[08/03 15:06:46]  --------------------------------------------------------------------------------
[08/03 15:06:46]  Iteration: 64 (25 solution, 38 counterexamples)
[08/03 15:06:49]  Generator returned sat in 2.439170 secs.
[08/03 15:06:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:06:49]  Improved gap from 195/16384 to 15.625
[08/03 15:06:49]  Improved number of small numbers from 54 to 101 out of a max of 101
[08/03 15:06:49]  Verifer returned sat in 0.778844 secs.
[08/03 15:06:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3819.250977    3312.202881 -1653.453125  3819.250977    0.095703  3312.202881        0.0  507.048096      507.048096
1    3819.250977    3312.203125 -1653.453125  3819.250977    0.047607  3312.203125        0.0  507.047852      407.048096
2    3819.250977    3412.203125 -1653.453125  3819.250977    0.047607  3412.203125        0.0  407.047852      307.048096
3    3819.250977    3512.202881 -1653.453125  3819.250977  407.000000  3512.202881        0.0  307.048096      207.048096
4    3819.250977    3693.500732 -1653.453125  3819.250977  205.000000  3693.500732        0.0  125.750244      107.048096
5    3819.250977    3712.203125 -1653.453125  3819.250977  104.000000  3712.203125        0.0  107.047852        7.048096
6    3819.250977    3812.202881 -1569.078125  3819.250977   53.500000  3812.202881        0.0    7.048096       -8.576904
7    3840.452881    3827.827881 -1484.703125  3840.452881   28.250000  3827.827881        0.0   12.625000       -3.000000
8    3843.452881    3843.452881 -1484.703125  3843.452881   15.625000  3843.452881        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=1667463/4096.[0m
[08/03 15:06:50]  --------------------------------------------------------------------------------
[08/03 15:06:50]  Iteration: 65 (25 solution, 39 counterexamples)
[08/03 15:06:54]  Generator returned sat in 4.039025 secs.
[08/03 15:06:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:55]  Improved gap from 0 to 100
[08/03 15:06:55]  Improved number of small numbers from 76 to 76 out of a max of 101
[08/03 15:06:55]  Verifer returned sat in 0.559503 secs.
[08/03 15:06:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3806.261198    3606.261198 -1653.453125  3806.261198    0.095703  3606.261198   0.000000  200.000000      100.000000
1    3806.261198    3706.261198 -1653.453125  3806.261198    0.023926  3706.261198   0.000000  100.000000        0.000000
2    3906.261198    3806.261198 -1653.453125  3906.261198  200.000000  3806.261198   0.000000  100.000000        0.000000
3    4098.394531    3959.266309 -1653.453125  4098.394531  292.133333  3959.266309  92.085482   47.042741        0.047852
4    4198.418457    4065.132975 -1653.453125  4198.418457  147.066667  4065.132975  92.109408   41.176074        0.047852
5    4231.775716    4139.642383 -1653.453125  4231.775716   74.533333  4139.642383  92.109408    0.023926      -66.594889
6    4398.442383    4306.261198 -1653.453125  4398.442383  166.690592  4306.261198  92.133333    0.047852        0.047852
7    4482.739827    4359.266309 -1653.453125  4482.739827   84.345296  4359.266309  92.133333   31.340186      -15.654704
8    4598.466309    4406.261198 -1653.453125  4598.466309  147.066667  4406.261198  92.157259  100.047852        0.047852
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=49/1024.[0m
[08/03 15:06:55]  --------------------------------------------------------------------------------
[08/03 15:06:55]  Iteration: 66 (25 solution, 40 counterexamples)
[08/03 15:06:56]  Generator returned sat in 0.329914 secs.
[08/03 15:06:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:56]  Improved gap from 0 to 100
[08/03 15:06:57]  Improved number of small numbers from 42 to 101 out of a max of 101
[08/03 15:06:57]  Verifer returned sat in 0.379067 secs.
[08/03 15:06:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2888.185791    2888.137939 -1653.453125  2888.185791    0.095703  2888.137939   0.000000    0.047852        0.023926
1    2888.185791    2888.161865 -1653.453125  2888.185791    0.023682  2888.161865   0.000000    0.023926      -99.976074
2    3088.161865    2988.161865 -1653.453125  3088.161865  200.000000  2988.161865   0.000000  100.000000        0.000000
3    3276.685303    3188.161865 -1653.453125  3276.685303  288.523438  3188.161865  54.261963   34.261475       34.261475
4    3387.185547    3288.161865 -1653.453125  3387.185547  144.761719  3288.161865  64.762207   34.261475       34.261475
5    3425.804932    3344.352295 -1653.453125  3425.804932   72.880859  3344.352295  64.762207   16.690430      -27.119141
6    3587.209717    3488.161621 -1653.453125  3587.209717  178.095215  3488.161621  64.786377   34.261719       34.261475
7    3642.495605    3577.685303 -1653.453125  3642.495605   89.547607  3577.685303  64.786377    0.023926      -10.452637
8    3787.233398    3588.161865 -1653.453125  3787.233398  144.761719  3588.161865  64.810059  134.261475       34.261475
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=140335/4096.[0m
[08/03 15:06:57]  --------------------------------------------------------------------------------
[08/03 15:06:57]  Iteration: 67 (25 solution, 41 counterexamples)
[08/03 15:06:58]  Generator returned sat in 0.354475 secs.
[08/03 15:06:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:06:58]  Improved number of small numbers from 69 to 100 out of a max of 100
[08/03 15:06:58]  Verifer returned sat in 0.258911 secs.
[08/03 15:06:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2891.158691    2888.137695 -1653.453369  2891.158691    0.095703  2888.137695   0.000000    3.020996        0.011475
1    2891.158691    2891.147217 -1653.453369  2891.158691    0.023682  2891.147217   0.000000    0.011475      -99.988525
2    3088.161865    2991.147217 -1653.453369  3088.161865  197.014648  2991.147217   0.000000   97.014648       -2.985352
3    3282.670654    3181.176514 -1653.453369  3282.670654  291.523438  3181.176514  60.247314   41.246826       31.276123
4    3387.185547    3288.161621 -1653.453369  3387.185547  145.761719  3288.161621  64.762207   34.261719       31.276123
5    3425.804688    3345.347412 -1653.453369  3425.804688   72.880859  3345.347412  64.762207   15.695068      -30.104736
6    3587.209717    3491.147217 -1653.453369  3587.209717  177.100098  3491.147217  64.786377   31.276123       31.276123
7    3644.483643    3579.685059 -1653.453125  3644.483643   88.550049  3579.685059  64.786377    0.012207      -11.449707
8    3790.233154    3591.147217 -1653.453125  3790.233154  145.761719  3591.147217  67.810059  131.275879       31.276123
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=128107/4096.[0m
[08/03 15:06:58]  --------------------------------------------------------------------------------
[08/03 15:06:58]  Iteration: 68 (25 solution, 42 counterexamples)
[08/03 15:07:00]  Generator returned sat in 1.051371 secs.
[08/03 15:07:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:07:00]  Improved gap from 13785/1024 to 100
[08/03 15:07:01]  Improved number of small numbers from 69 to 69 out of a max of 101
[08/03 15:07:01]  Verifer returned sat in 0.712809 secs.
[08/03 15:07:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    2991.171143    2791.147217 -1653.453125  2991.171143    0.095703  2791.147217    0.000000  200.023926      100.023926
1    2991.171143    2991.147217 -1653.453125  2991.171143    0.023926  2991.147217    0.000000    0.023926        0.023926
2    2991.171143    2991.147217 -1653.453125  2991.171143    0.023926  2991.147217    0.000000    0.023926      -99.976074
3    3325.702230    3121.941488 -1653.453125  3325.702230  334.555013  3121.941488  134.507161   69.253581        0.047852
4    3425.726156    3237.913574 -1653.453125  3425.726156  169.277507  3237.913574  134.531087   53.281494        0.047852
5    3459.083415    3324.528402 -1653.453125  3459.083415   86.638753  3324.528402  134.531087    0.023926      -66.594889
6    3625.750081    3491.147217 -1653.453125  3625.750081  166.690592  3491.147217  134.555013    0.047852        0.047852
7    3711.047526    3576.468587 -1653.453125  3711.047526   85.345296  3576.468587  134.555013    0.023926      -14.654704
8    3880.301107    3591.147217 -1653.453125  3880.301107  169.277507  3591.147217  189.106038  100.047852        0.047852
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=49/1024.[0m
[08/03 15:07:01]  --------------------------------------------------------------------------------
[08/03 15:07:01]  Iteration: 69 (25 solution, 43 counterexamples)
[08/03 15:07:04]  Generator returned sat in 2.795168 secs.
[08/03 15:07:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:05]  Improved gap from 1/800 to 100
[08/03 15:07:05]  Improved number of small numbers from 100 to 101 out of a max of 101
[08/03 15:07:05]  Verifer returned sat in 0.231438 secs.
[08/03 15:07:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3026.742676    2826.741211 -1653.453369  3026.742676    0.095459  2826.741211   0.000000  200.001465      100.001465
1    3026.742676    2926.741455 -1653.453369  3026.742676    0.023682  2926.741455   0.000000  100.001221        0.001465
2    3026.742676    3026.741455 -1653.453369  3026.742676    0.001465  3026.741455   0.000000    0.001221      -99.998535
3    3225.747559    3225.746094 -1653.453369  3225.747559  199.006104  3225.746094   0.000000    0.001465       -0.993652
4    3425.748535    3226.741211 -1653.453369  3425.748535  200.002441  3226.741211   0.001221  199.006104       99.006104
5    3425.748535    3425.746338 -1653.453369  3425.748535    0.010000  3425.746338   0.001221    0.000977       -0.993896
6    3625.750000    3526.741211 -1653.453369  3625.750000  200.002441  3526.741211   0.002686   99.006104       99.006104
7    3625.750000    3625.746094 -1653.453369  3625.750000    0.010000  3625.746094   0.002686    0.001221       -0.993896
8    3825.751221    3626.741250 -1653.453369  3825.751221  200.002441  3626.741250   0.003906  199.006064       99.006104
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=405529/4096.[0m
[08/03 15:07:05]  --------------------------------------------------------------------------------
[08/03 15:07:05]  Iteration: 70 (25 solution, 44 counterexamples)
[08/03 15:07:09]  Generator returned sat in 3.121838 secs.
[08/03 15:07:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:07:09]  Improved gap from 0 to 48.4375
[08/03 15:07:09]  Improved number of small numbers from 36 to 101 out of a max of 101
[08/03 15:07:09]  Verifer returned sat in 0.372692 secs.
[08/03 15:07:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3901.675293    3701.675293 -1808.140869  3901.675293    0.095215  3701.675293   0.000000  200.000000      100.000000
1    3901.675293    3901.675293 -1808.140869  3901.675293    0.023682  3901.675293   0.000000    0.000000        0.000000
2    4001.448975    4001.443115 -1808.140869  4001.448975   99.773682  4001.443115   0.000000    0.005859       -0.226318
3    4101.681396    4099.454834 -1808.140869  4101.681396  100.238281  4099.454834   0.000000    2.226562        0.006104
4    4201.693115    4196.993652 -1808.140869  4201.693115  102.238281  4196.993652   0.005859    4.693604        0.011963
5    4250.118652    4201.675537 -1756.578613  4250.118652   53.119141  4201.675537   0.005859   48.437256       -0.000244
6    4256.800537    4250.113037 -1705.016113  4256.800537   55.119141  4250.113037   0.005859    6.681641      -41.755859
7    4307.238037    4298.550537 -1653.453613  4307.238037   57.119141  4298.550537   0.005859    8.681641      -39.755859
8    4357.675537    4346.988037 -1653.453613  4357.675537   59.119141  4346.988037   0.005859   10.681641      -89.318359
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=49/4096.[0m
[08/03 15:07:10]  --------------------------------------------------------------------------------
[08/03 15:07:10]  Iteration: 71 (25 solution, 45 counterexamples)
[08/03 15:07:15]  Generator returned sat in 4.542232 secs.
[08/03 15:07:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:07:15]  Improved gap from 751/16 to 48.4375
[08/03 15:07:15]  Improved number of small numbers from 56 to 101 out of a max of 101
[08/03 15:07:15]  Verifer returned sat in 0.432919 secs.
[08/03 15:07:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3901.675293    3701.675293 -1808.140869  3901.675293    0.094971  3701.675293   0.000000  200.000000      100.000000
1    3901.675293    3901.675293 -1808.140869  3901.675293    0.023682  3901.675293   0.000000    0.000000        0.000000
2    4002.592285    4001.675293 -1808.140869  4002.592285  100.916992  4001.675293   0.000000    0.916992        0.916992
3    4101.401367    4101.389893 -1808.140869  4101.401367   99.726074  4101.389893   0.000000    0.011475       -0.273926
4    4202.615967    4201.675049 -1808.140869  4202.615967  101.226074  4201.675049   0.011963    0.928955        0.928711
5    4253.300049    4201.675293 -1761.253906  4253.300049   51.613037  4201.675293   0.011963   51.612793       -1.500244
6    4254.800293    4254.788330 -1709.691650  4254.800293   53.113037  4254.788330   0.011963    0.000000      -48.437744
7    4309.413330    4303.226074 -1658.129150  4309.413330   54.613037  4303.226074   0.011963    6.175293      -42.262207
8    4359.351074    4351.663574 -1658.129150  4359.351074   56.113037  4351.663574   0.011963    7.675537      -92.324463
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=951/1024.[0m
[08/03 15:07:15]  --------------------------------------------------------------------------------
[08/03 15:07:15]  Iteration: 72 (25 solution, 46 counterexamples)
[08/03 15:07:18]  Generator returned sat in 1.667006 secs.
[08/03 15:07:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:07:18]  Improved gap from 775/16 to 48.4375
[08/03 15:07:18]  Improved number of small numbers from 47 to 101 out of a max of 101
[08/03 15:07:18]  Verifer returned sat in 0.567750 secs.
[08/03 15:07:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3901.675293    3701.675293 -1808.140869  3901.675293    0.094971  3701.675293   0.000000  200.000000      100.000000
1    3901.675293    3901.675049 -1808.140869  3901.675293    0.023682  3901.675049   0.000000    0.000244        0.000000
2    4001.692871    3997.937012 -1808.140869  4001.692871  100.017822  3997.937012   0.005859    3.750000        0.011719
3    4101.681152    4096.454834 -1808.140869  4101.681152  103.738281  4096.454834   0.005859    5.220459        0.000000
4    4201.698975    4196.993652 -1808.140869  4201.698975  105.238281  4196.993652   0.011963    4.693359        0.011719
5    4250.124756    4201.675293 -1756.578369  4250.124756   53.119141  4201.675293   0.011963   48.437500        0.000000
6    4256.306396    4250.112793 -1705.015869  4256.306396   54.619141  4250.112793   0.011963    6.181641      -42.255859
7    4306.243896    4298.550293 -1653.453369  4306.243896   56.119141  4298.550293   0.011963    7.681641      -40.755859
8    4356.181396    4346.987793 -1653.453369  4356.181396   57.619141  4346.987793   0.011963    9.181641      -90.818359
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=3/256.[0m
[08/03 15:07:19]  --------------------------------------------------------------------------------
[08/03 15:07:19]  Iteration: 73 (25 solution, 47 counterexamples)
[08/03 15:07:21]  Generator returned sat in 2.124046 secs.
[08/03 15:07:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:07:22]  Improved gap from 97/16384 to 100
[08/03 15:07:23]  Improved number of small numbers from 38 to 49 out of a max of 101
[08/03 15:07:23]  Verifer returned sat in 0.998178 secs.
[08/03 15:07:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3736.312744    3736.265381 -1808.140869  3736.312744    0.094727  3736.265381    0.000000    0.047363        0.023814
1    3736.312744    3736.288930 -1808.140869  3736.312744    0.023682  3736.288930    0.000000    0.023814      -99.976186
2    3936.288930    3836.288930 -1808.140869  3936.288930  200.000000  3836.288930    0.000000  100.000000        0.000000
3    4037.312673    4036.288930 -1808.140869  4037.312673  201.023743  4036.288930    0.000000    1.023743        1.023743
4    4137.800802    4070.336416 -1808.140869  4137.800802  101.511871  4070.336416    0.464386   67.000000        1.047485
5    4237.824544    4170.336416 -1808.140869  4237.824544  167.023743  4170.336416    0.488129   67.000000        1.047485
6    4337.848287    4336.288930 -1808.140869  4337.848287  167.023743  4336.288930    0.511871    1.047485        1.047485
7    4486.800802    4436.288930 -1808.140869  4486.800802  150.000000  4436.288930   49.464386    1.047485        1.047485
8    4668.729574    4436.289062 -1808.140869  4668.729574  182.976257  4436.289062  131.393158  101.047353        1.047485
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=8581/8192.[0m
[08/03 15:07:23]  --------------------------------------------------------------------------------
[08/03 15:07:23]  Iteration: 74 (25 solution, 48 counterexamples)
[08/03 15:07:25]  Generator returned sat in 1.370242 secs.
[08/03 15:07:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:25]  Improved number of small numbers from 32 to 100 out of a max of 100
[08/03 15:07:25]  Verifer returned sat in 0.289281 secs.
[08/03 15:07:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3736.753418    3736.265381 -1808.141113  3736.753418    0.094727  3736.265381    0.369629    0.118408        0.011719
1    3736.753418    3736.372070 -1808.140869  3736.753418    0.023682  3736.372070    0.369629    0.011719      -99.988037
2    3936.289062    3836.372070 -1808.140869  3936.289062  199.547363  3836.372070    0.369629   99.547363       -0.452393
3    4037.694336    4036.371826 -1808.140869  4037.694336  200.952637  4036.371826    0.369629    0.952881        0.952881
4    4137.717773    4070.419434 -1808.140869  4137.717773  100.976318  4070.419434    0.381348   66.916992        0.964600
5    4237.824463    4170.364258 -1808.140869  4237.824463  167.023682  4170.364258    0.488037   66.972168        0.964600
6    4337.848389    4336.371826 -1808.140869  4337.848389  166.996094  4336.371826    0.511963    0.964600        0.964600
7    4486.883789    4436.289062 -1808.140869  4486.883789  150.000000  4436.289062   49.547363    1.047363        0.964600
8    4668.771240    4436.372070 -1808.140869  4668.771240  182.934814  4436.372070  131.434814  100.964355        0.964600
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=3951/4096.[0m
[08/03 15:07:26]  --------------------------------------------------------------------------------
[08/03 15:07:26]  Iteration: 75 (25 solution, 49 counterexamples)
[08/03 15:07:28]  Generator returned sat in 2.013033 secs.
[08/03 15:07:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:29]  Improved gap from 1/64 to 14.0625
[08/03 15:07:29]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:07:29]  Verifer returned sat in 0.337799 secs.
[08/03 15:07:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3582.770508    3582.353516 -1808.140869  3582.770508    0.094727  3582.353516   0.369629    0.047363      -99.952637
1    4109.990234    3682.353516 -1808.140869  4109.990234  527.267090  3682.353516   0.416992  427.219727      327.219727
2    4209.942871    3782.353516 -1808.140869  4209.942871  527.172363  3782.353516   0.416992  427.172363      327.172363
3    4209.942871    3982.353516 -1808.140869  4209.942871  419.000000  3982.353516   0.416992  227.172363      227.172363
4    4209.942871    4082.353516 -1808.140869  4209.942871  210.000000  4082.353516   0.416992  127.172363      127.172363
5    4209.942871    4156.228516 -1808.140869  4209.942871  105.500000  4156.228516   0.416992   53.297363       27.172363
6    4209.942871    4182.353516 -1735.313232  4209.942871   53.250000  4182.353516   0.416992   27.172363        0.000000
7    4209.942871    4209.525879 -1649.375732  4209.942871   27.125000  4209.525879   0.416992    0.000000      -14.062500
8    4224.005371    4223.588379 -1649.375732  4224.005371   14.062500  4223.588379   0.416992    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=335073/1024.[0m
[08/03 15:07:29]  --------------------------------------------------------------------------------
[08/03 15:07:29]  Iteration: 76 (25 solution, 50 counterexamples)
[08/03 15:07:34]  Generator returned sat in 4.183899 secs.
[08/03 15:07:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:07:34]  Improved gap from 225/16 to 14.0625
[08/03 15:07:35]  Improved number of small numbers from 37 to 101 out of a max of 101
[08/03 15:07:35]  Verifer returned sat in 0.688759 secs.
[08/03 15:07:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4109.942627    3683.353516 -1809.141357  4109.942627    0.094482  3683.353516   0.369629  426.219482      426.219482
1    4109.989990    3683.353760 -1809.141357  4109.989990  426.266846  3683.353760   0.416992  426.219238      326.219482
2    4209.942871    3783.353760 -1809.141357  4209.942871  526.172119  3783.353760   0.416992  426.172119      326.172363
3    4209.942871    3983.353516 -1809.141357  4209.942871  388.000000  3983.353516   0.416992  226.172363      226.172363
4    4209.942871    4073.635742 -1809.141357  4209.942871  195.000000  4073.635742   0.416992  135.890137      126.172363
5    4209.942871    4083.353760 -1809.141357  4209.942871   98.500000  4083.353760   0.416992  126.172119       26.172363
6    4209.942871    4183.353516 -1735.313721  4209.942871   50.250000  4183.353516   0.416992   26.172363        0.000000
7    4209.942871    4209.525879 -1649.376221  4209.942871   26.125000  4209.525879   0.416992    0.000000      -14.062500
8    4224.005371    4223.588379 -1563.438721  4224.005371   14.062500  4223.588379   0.416992    0.000000      -14.062500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=1336195/4096.[0m
[08/03 15:07:35]  --------------------------------------------------------------------------------
[08/03 15:07:35]  Iteration: 77 (25 solution, 51 counterexamples)
[08/03 15:07:37]  Generator returned sat in 1.112782 secs.
[08/03 15:07:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:37]  Improved gap from 1/2 to 0
[08/03 15:07:37]  Improved number of small numbers from 29 to 101 out of a max of 101
[08/03 15:07:37]  Verifer returned sat in 0.564432 secs.
[08/03 15:07:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3809.872070    3609.478760 -1835.266602  3809.872070    0.094238  3609.478760    0.369629  200.023682      100.023682
1    3809.872070    3709.478760 -1835.266602  3809.872070  200.023438  3709.478760    0.369629  100.023682        0.023682
2    3909.872070    3809.478760 -1835.266602  3909.872070  200.023682  3809.478760    0.369629  100.023682        0.023682
3    4198.131592    4009.478760 -1835.266602  4198.131592  388.283203  4009.478760  188.605713    0.047119        0.047119
4    4394.226074    4109.478760 -1835.266602  4394.226074  196.141602  4109.478760  284.700195    0.047119        0.047119
5    4494.249756    4109.478760 -1835.266602  4494.249756  100.070801  4109.478760  284.723877  100.047119        0.047119
6    4494.249756    4209.502197 -1735.313721  4494.249756   52.035400  4209.502197  284.723877    0.023682        0.000000
7    4494.726074    4209.525879 -1635.790283  4494.726074    0.500000  4209.525879  284.723877    0.476318       -0.000244
8    4494.749756    4210.002441 -1635.790039  4494.749756    0.500000  4210.002441  284.723877    0.023438      -99.976318
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, buffer=193/4096.[0m
[08/03 15:07:38]  --------------------------------------------------------------------------------
[08/03 15:07:38]  Iteration: 78 (25 solution, 52 counterexamples)
[08/03 15:07:41]  Generator returned sat in 2.720843 secs.
[08/03 15:07:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:07:41]  Improved gap from 193/8192 to 48.4375
[08/03 15:07:42]  Improved number of small numbers from 42 to 101 out of a max of 101
[08/03 15:07:42]  Verifer returned sat in 0.434352 secs.
[08/03 15:07:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4060.799316    3828.580811 -1795.188477  4060.799316    0.093994  3828.580811  32.195068  200.023438      100.023438
1    4060.799316    4028.580811 -1795.188477  4060.799316  200.000000  4028.580811  32.195068    0.023438        0.023438
2    4160.846680    4126.425049 -1795.188477  4160.846680  100.070801  4126.425049  32.218750    2.202881        0.047119
3    4260.846436    4225.448730 -1795.188477  4260.846436  102.202637  4225.448730  32.218750    3.178955        0.046875
4    4360.870117    4328.580811 -1795.188477  4360.870117  103.202637  4328.580811  32.242188    0.047119        0.047119
5    4413.924316    4328.580811 -1748.290039  4413.924316   53.101318  4328.580811  32.242188   53.101318       -0.000244
6    4414.924316    4381.682373 -1696.727539  4414.924316   54.101318  4381.682373  32.242188    0.999756      -47.437744
7    4469.025879    4430.119873 -1645.165039  4469.025879   55.101318  4430.119873  32.242188    6.663818      -41.773682
8    4518.463379    4478.557373 -1635.790039  4518.463379   56.101318  4478.557373  32.242188    7.663818      -82.961182
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=193/4096.[0m
[08/03 15:07:42]  --------------------------------------------------------------------------------
[08/03 15:07:42]  Iteration: 79 (25 solution, 53 counterexamples)
[08/03 15:07:45]  Generator returned sat in 2.395344 secs.
[08/03 15:07:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:07:45]  Improved gap from 775/16 to 48.4375
[08/03 15:07:46]  Improved number of small numbers from 31 to 101 out of a max of 101
[08/03 15:07:46]  Verifer returned sat in 0.485486 secs.
[08/03 15:07:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    4083.371094    4051.129150 -1795.188477  4083.371094    0.093994  4051.129150  32.195068   0.046875        0.023193
1    4083.371094    4051.152832 -1795.188477  4083.371094    0.023682  4051.152832  32.195068   0.023193      -99.976807
2    4283.418457    4249.020020 -1795.188477  4283.418457  200.070557  4249.020020  32.218506   2.179932        0.047119
3    4382.441650    4349.020264 -1795.188477  4382.441650  101.203125  4349.020264  32.218506   1.202881       -0.929688
4    4483.441895    4451.152832 -1795.188477  4483.441895  102.203125  4451.152832  32.241943   0.047119        0.047119
5    4536.496338    4455.816650 -1748.290039  4536.496338   53.101562  4455.816650  32.241943  48.437744        0.000000
6    4542.160156    4504.254395 -1696.727539  4542.160156   54.101562  4504.254395  32.241943   5.663818      -42.773682
7    4591.597900    4552.691895 -1645.165039  4591.597900   55.101562  4552.691895  32.241943   6.664062      -41.773438
8    4641.035400    4601.129395 -1645.165039  4641.035400   56.101562  4601.129395  32.241943   7.664062      -92.335938
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=193/4096.[0m
[08/03 15:07:46]  --------------------------------------------------------------------------------
[08/03 15:07:46]  Iteration: 80 (25 solution, 54 counterexamples)
[08/03 15:07:47]  Generator returned sat in 0.473358 secs.
[08/03 15:07:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:07:47]  Improved gap from 3/256 to 100
[08/03 15:07:49]  Improved number of small numbers from 25 to 40 out of a max of 101
[08/03 15:07:49]  Verifer returned sat in 1.443203 secs.
[08/03 15:07:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5147.251465    5147.228027 -3207.88101  5147.251465    0.093750  5147.228027    0.000000    0.023438      -99.976418
1    5347.251465    5247.228027 -3207.88101  5347.251465  200.023438  5247.228027    0.000000  100.023438        0.023582
2    5347.251465    5347.227883 -3207.88101  5347.251465   99.999756  5347.227883    0.000000    0.023582      -99.976418
3    5681.482888    5478.670876 -3207.88101  5681.482888  334.255005  5478.670876  134.208008   68.604004        0.046997
4    5781.506386    5594.817961 -3207.88101  5781.506386  168.627502  5594.817961  134.231506   52.456919        0.046997
5    5814.863218    5680.608213 -3207.88101  5814.863218   85.813751  5680.608213  134.231506    0.023499      -66.596171
6    5981.529885    5847.227883 -3207.88101  5981.529885  166.690165  5847.227883  134.255005    0.046997        0.046997
7    6066.327970    5932.072965 -3207.88101  6066.327970   84.845083  5932.072965  134.255005    0.000000      -15.154917
8    6234.955473    5947.228027 -3207.88101  6234.955473  168.627502  5947.228027  187.680593  100.046853        0.046997
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=385/8192.[0m
[08/03 15:07:49]  --------------------------------------------------------------------------------
[08/03 15:07:49]  Iteration: 81 (25 solution, 55 counterexamples)
[08/03 15:07:53]  Generator returned sat in 2.881216 secs.
[08/03 15:07:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:53]  Improved gap from 3/64 to 48.4375
[08/03 15:07:53]  Improved number of small numbers from 91 to 101 out of a max of 101
[08/03 15:07:53]  Verifer returned sat in 0.261640 secs.
[08/03 15:07:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5295.665283    5095.665527 -3156.318848  5295.665283    0.093750  5095.665527   0.000000  199.999756       99.999756
1    5295.665527    5195.665527 -3156.318848  5295.665527  200.000000  5195.665527   0.000000  100.000000        0.000000
2    5395.665283    5347.228027 -3156.318848  5395.665283  199.999756  5347.228027   0.000000   48.437256       -0.000244
3    5545.368652    5495.665527 -3156.318848  5545.368652  198.140625  5495.665527  49.656250    0.046875        0.046875
4    5645.392090    5595.665283 -3156.318848  5645.392090  100.070312  5595.665283  49.679688    0.047119        0.046875
5    5696.380127    5595.665527 -3107.354004  5696.380127   51.035156  5595.665527  49.679688   51.034912       -0.000244
6    5696.880371    5647.177246 -3056.268066  5696.880371   51.535156  5647.177246  49.679688    0.023438      -48.414062
7    5748.892090    5697.204346 -3006.295166  5748.892090   52.035156  5697.204346  49.679688    2.008057      -46.429443
8    5799.419189    5745.641846 -3006.295166  5799.419189   52.535156  5745.641846  49.679688    4.097656      -95.902344
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=3/64.[0m
[08/03 15:07:53]  --------------------------------------------------------------------------------
[08/03 15:07:53]  Iteration: 82 (25 solution, 56 counterexamples)
[08/03 15:07:55]  Generator returned sat in 1.523730 secs.
[08/03 15:07:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:56]  Improved gap from 95/8192 to 0
[08/03 15:07:56]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:07:56]  Verifer returned sat in 0.395830 secs.
[08/03 15:07:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5242.134277    5242.134277 -3156.318848  5242.134277    0.093750  5242.134277     0.0000    0.000000     -100.000000
1    5442.134277    5342.134277 -3156.318848  5442.134277  200.000000  5342.134277     0.0000  100.000000        0.000000
2    5642.587402    5442.134277 -3156.318848  5642.587402  300.453125  5442.134277     0.0000  200.453125      100.453125
3    6035.759277    5642.134277 -3156.318848  6035.759277  593.625000  5642.134277   293.1250  100.500000      100.500000
4    6233.071777    5692.728027 -3156.318848  6233.071777  297.812500  5692.728027   390.4375  149.906250      100.500000
5    6233.071777    5842.134277 -3156.318848  6233.071777  149.906250  5842.134277   390.4375    0.500000        0.500000
6    6233.071777    5842.181152 -3056.818848  6233.071777    0.500000  5842.181152   390.4375    0.453125        0.000000
7    6233.118652    5842.634277 -2956.865723  6233.118652    0.500000  5842.634277   390.4375    0.046875        0.000000
8    6233.571777    5842.681152 -2857.318848  6233.571777    0.500000  5842.681152   390.4375    0.453125        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=201/2.[0m
[08/03 15:07:56]  --------------------------------------------------------------------------------
[08/03 15:07:56]  Iteration: 83 (25 solution, 57 counterexamples)
[08/03 15:07:58]  Generator returned sat in 1.213737 secs.
[08/03 15:07:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:07:58]  Improved gap from 0 to 48.4375
[08/03 15:07:59]  Improved number of small numbers from 78 to 85 out of a max of 101
[08/03 15:07:59]  Verifer returned sat in 0.518028 secs.
[08/03 15:07:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5242.134277    5242.134277 -3116.599854  5242.134277    0.093506  5242.134277   0.000000    0.000000     -100.000000
1    5442.134277    5342.134277 -3116.599854  5442.134277  200.000000  5342.134277   0.000000  100.000000        0.000000
2    5544.197021    5542.134033 -3116.599854  5544.197021  202.062744  5542.134033   0.000000    2.062988        2.062744
3    5742.447021    5642.134277 -3116.599854  5742.447021  200.312988  5642.134277  98.203125    2.109619        2.109619
4    5842.493896    5737.493530 -3116.599854  5842.493896  102.156494  5737.493530  98.250000    6.750366        2.109619
5    5888.821777    5742.134277 -3065.037354  5888.821777   53.078247  5742.134277  98.250000   48.437500        0.000000
6    5893.962524    5790.571777 -3013.474854  5893.962524   53.578247  5790.571777  98.250000    5.140747      -43.296753
7    5942.900024    5839.009277 -2961.912354  5942.900024   54.078247  5839.009277  98.250000    5.640747      -42.796753
8    5991.837524    5887.446777 -2961.912354  5991.837524   54.578247  5887.446777  98.250000    6.140747      -93.859253
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=8641/4096.[0m
[08/03 15:07:59]  --------------------------------------------------------------------------------
[08/03 15:07:59]  Iteration: 84 (25 solution, 58 counterexamples)
[08/03 15:08:03]  Generator returned sat in 2.961085 secs.
[08/03 15:08:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:03]  Improved gap from 0 to 0
[08/03 15:08:03]  Improved number of small numbers from 71 to 101 out of a max of 101
[08/03 15:08:03]  Verifer returned sat in 0.276803 secs.
[08/03 15:08:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5242.134277    5242.134277 -3116.600098  5242.134277    0.093262  5242.134277        0.0    0.000000     -100.000000
1    5841.680908    5342.134277 -3116.600098  5841.680908  599.546631  5342.134277        0.0  499.546631      399.546631
2    5841.680908    5442.134277 -3116.600098  5841.680908  399.570312  5442.134277        0.0  399.546631      299.546631
3    5841.680908    5642.134033 -3116.600098  5841.680908    0.023438  5642.134033        0.0  199.546875      199.546631
4    5841.680908    5692.657471 -3116.600098  5841.680908    0.500000  5692.657471        0.0  149.023438       99.546631
5    5841.680908    5841.657471 -3116.600098  5841.680908    0.500000  5841.657471        0.0    0.023438       -0.453369
6    5842.157471    5842.134277 -3017.076416  5842.157471    0.500000  5842.134277        0.0    0.023193       -0.453125
7    5842.634277    5842.610840 -2917.100098  5842.634277    0.500000  5842.610840        0.0    0.023438        0.000000
8    5843.110840    5842.634277 -2917.100098  5843.110840    0.500000  5842.634277        0.0    0.476562      -99.523438
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=51145/128.[0m
[08/03 15:08:04]  --------------------------------------------------------------------------------
[08/03 15:08:04]  Iteration: 85 (25 solution, 59 counterexamples)
[08/03 15:08:05]  Generator returned sat in 0.927327 secs.
[08/03 15:08:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:06]  Improved gap from 1/800 to 0
[08/03 15:08:06]  Improved number of small numbers from 55 to 69 out of a max of 101
[08/03 15:08:06]  Verifer returned sat in 0.938574 secs.
[08/03 15:08:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5687.639893    5687.639648 -3214.076348  5687.639893    0.093018  5687.639648    0.00000    0.000244        0.000234
1    5787.640869    5687.639658 -3214.076348  5787.640869  100.001221  5687.639658    0.00000  100.001211        0.001211
2    5887.643408    5887.639658 -3214.076348  5887.643408  200.003750  5887.639658    0.00125    0.002500        0.002500
3    5986.645908    5888.135908 -3214.076172  5986.645908   99.005000  5888.135908    0.00125   98.508750       -0.994824
4    5987.642158    5987.639658 -3114.077598  5987.642158   99.505000  5987.639658    0.00125    0.001250        0.000000
5    6087.645908    6087.632324 -3114.077598  6087.645908  100.005000  6087.632324    0.00250    0.011084        0.002500
6    6087.645908    6087.642158 -3014.587402  6087.645908    0.010000  6087.642158    0.00250    0.001250       -0.507305
7    6088.154658    6088.150908 -2915.597412  6088.154658    0.510000  6088.150908    0.00250    0.001250       -1.008564
8    6089.163408    6089.160889 -2915.597412  6089.163408    1.010000  6089.160889    0.00250    0.000020      -99.999814
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=1/400.[0m
[08/03 15:08:07]  --------------------------------------------------------------------------------
[08/03 15:08:07]  Iteration: 86 (25 solution, 60 counterexamples)
[08/03 15:08:08]  Generator returned sat in 0.504652 secs.
[08/03 15:08:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:08]  Improved gap from 381/16384 to 48.4375
[08/03 15:08:09]  Improved number of small numbers from 28 to 41 out of a max of 101
[08/03 15:08:09]  Verifer returned sat in 1.127677 secs.
[08/03 15:08:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5691.315918    5591.269636 -3070.284912  5691.315918    0.093018  5591.269636   0.000000  100.046282      100.046282
1    5691.339399    5591.269775 -3070.284912  5691.339399  100.069763  5591.269775   0.023254  100.046370        0.046509
2    5691.339399    5691.292891 -3070.284912  5691.339399    0.023438  5691.292891   0.023254    0.023254      -99.953491
3    5894.723127    5888.135908 -3070.284912  5894.723127  203.406982  5888.135908   3.406982    3.180237        0.046509
4    5994.746382    5986.605225 -3070.284912  5994.746382  103.203491  5986.605225   3.430237    4.710920        0.046509
5    6043.137207    5991.269636 -3018.722412  6043.137207   53.101746  5991.269636   3.430237   48.437334       -0.000166
6    6048.301619    6039.707136 -2967.159912  6048.301619   53.601746  6039.707136   3.430237    5.164246      -43.273254
7    6097.239119    6088.144636 -2915.597412  6097.239119   54.101746  6088.144636   3.430237    5.664246      -42.773254
8    6146.176619    6136.582275 -2915.597412  6146.176619   54.601746  6136.582275   3.430237    6.164106      -93.835754
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=381/8192.[0m
[08/03 15:08:09]  --------------------------------------------------------------------------------
[08/03 15:08:09]  Iteration: 87 (25 solution, 61 counterexamples)
[08/03 15:08:12]  Generator returned unsat in 1.835751 secs.
[08/03 15:08:12]  [96mNo more solutions found[0m
[08/03 15:08:12]  Final solutions:
[08/03 15:08:12]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:08:12]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:08:12]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:08:12]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:08:12]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:08:12]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:12]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:08:12]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:08:12]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:12]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:08:12]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:12]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:08:12]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:08:12]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:08:12]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:08:12]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:08:12]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:08:12]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:08:12]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:12]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:08:12]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:08:12]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:08:12]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:08:12]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:08:12]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:08:12]  Took 194.873829 secs.
