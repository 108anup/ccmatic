[08/03 15:01:45]  --------------------------------------------------------------------------------
[08/03 15:01:45]  Iteration: 1 (0 solution, 0 counterexamples)
[08/03 15:01:45]  Generator returned sat in 0.004508 secs.
[08/03 15:01:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:01:45]  Improved gap from 0 to 100
[08/03 15:01:45]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:01:45]  Verifer returned sat in 0.218244 secs.
[08/03 15:01:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0           0.00           0.00     300.1         0.00      0.05         0.00       0.00     0.00           -0.05
1           0.05           0.05     300.1         0.05      0.05         0.05       0.00     0.00         -100.00
2         200.10         200.05     300.1       200.10    200.05       200.05       0.00     0.05            0.05
3         500.10         200.05     300.1       500.10    300.05       200.05       0.05   300.00          200.00
4        1202.30         383.05     300.1      1202.30   1002.20       383.05     602.25   217.00          200.00
5        3757.70         400.05     300.1      3757.70   2772.40       400.05    3057.65   300.00          200.00
6        9404.50         600.05     300.1      9404.50   5946.80       600.05    8604.45   200.00          200.00
7       21900.10         600.05     300.1     21900.10  12695.60       600.05   21000.05   300.00          200.00
8       47427.30         700.05     300.1     47427.30  25827.20       700.05   46427.25   300.00          200.00
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=200.[0m
[08/03 15:01:45]  --------------------------------------------------------------------------------
[08/03 15:01:45]  Iteration: 2 (0 solution, 1 counterexamples)
[08/03 15:01:45]  Generator returned sat in 0.031067 secs.
[08/03 15:01:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:01:46]  Improved gap from 1/400 to 40.625
[08/03 15:01:46]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:01:46]  Verifer returned sat in 0.363941 secs.
[08/03 15:01:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0       200.1000        80.1025  157.7400     200.1000    0.050049      80.1025     0.0000  119.9975        119.9975
1       200.1000       180.1025  157.7400     200.1000    0.002500     180.1025     0.0000   19.9975         19.9975
2       200.1000       200.0975  157.7400     200.1000    0.002500     200.0975     0.0000    0.0025        -80.0025
3       356.7250       280.1025  159.7450     356.7250  156.627500     280.1025     0.0000   76.6225        -21.3725
4       437.7300       437.7275  159.7450     437.7300  157.627500     437.7275     0.0000    0.0025        -40.3675
5       596.3550       478.0975  159.7450     596.3550  158.627500     478.0975     0.0000  118.2575         18.2575
6       637.7250       597.1000  200.1175     637.7250  159.627500     597.1000     0.0000   40.6250          0.0000
7       757.7275       637.7250  200.1175     757.7275  160.627500     637.7250     0.0025  120.0000         20.0000
8       757.7275       737.7250  200.1175     757.7275    0.010000     737.7250     0.0025   20.0000        -80.0000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:01:46]  --------------------------------------------------------------------------------
[08/03 15:01:46]  Iteration: 3 (0 solution, 2 counterexamples)
[08/03 15:01:46]  Generator returned sat in 0.059561 secs.
[08/03 15:01:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:01:47]  Improved gap from 1/400 to 59.375
[08/03 15:01:47]  Improved number of small numbers from 83 to 87 out of a max of 101
[08/03 15:01:47]  Verifer returned sat in 1.290239 secs.
[08/03 15:01:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     232.774658      32.774568  117.993426   232.774658    0.049805    32.774568      0.000  200.000090      100.000090
1     232.774658     232.774568  117.993426   232.774658    0.004883   232.774568      0.000    0.000090        0.000090
2     352.779568     332.774568  117.993426   352.779568  120.005000   332.774568      0.005   20.000000       20.000000
3     371.629938     371.624938  118.867676   371.629938   38.850370   371.624938      0.005    0.000000      -60.275380
4     431.905494     431.900494  159.492500   431.905494   60.275556   431.900494      0.005    0.000000      -59.375000
5     524.318827     491.275494  200.117500   524.318827   92.413333   491.275494      0.005   33.038333      -26.336667
6     631.900494     572.520494  218.872500   631.900494  140.620000   572.520494      0.005   59.375000        0.000000
7     785.455494     731.895264  218.872500   785.455494  212.930000   731.895264     33.560   20.000230       20.000000
8     785.455494     731.895508  218.872559   785.455494    0.010000   731.895508     33.560   19.999986      -79.999941
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:01:48]  --------------------------------------------------------------------------------
[08/03 15:01:48]  Iteration: 4 (0 solution, 3 counterexamples)
[08/03 15:01:48]  Generator returned sat in 0.096796 secs.
[08/03 15:01:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:01:48]  Improved gap from 5/4096 to 100
[08/03 15:01:48]  Improved number of small numbers from 55 to 101 out of a max of 101
[08/03 15:01:48]  Verifer returned sat in 0.371932 secs.
[08/03 15:01:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     152.779785      52.779541  117.993408   152.779785    0.049805    52.779541   0.000000  100.000244      100.000244
1     152.779785      52.779785  117.993408   152.779785    0.004883    52.779785   0.000000  100.000000        0.000244
2     252.779541     237.777100  117.993408   252.779541  199.999756   237.777100   0.000000   15.002441        0.000000
3     252.781982     252.779541  117.993408   252.781982   15.004883   252.779541   0.000000    0.002441      -99.997559
4     477.286865     433.272217  117.993408   477.286865  224.507324   433.272217   4.507324   39.507324       20.000000
5     477.286865     452.779541  117.993408   477.286865    2.000000   452.779541   4.507324   20.000000      -80.000000
6     677.289307     552.779785  117.993408   677.289307  220.002441   552.779785   4.509766  119.999756       20.000000
7     677.289307     652.779541  117.993408   677.289307    2.000000   652.779541   4.509766   20.000000      -80.000000
8     881.796631     752.779541  117.993408   881.796631  224.507324   752.779541   9.017090  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=20.[0m
[08/03 15:01:49]  --------------------------------------------------------------------------------
[08/03 15:01:49]  Iteration: 5 (0 solution, 4 counterexamples)
[08/03 15:01:49]  Generator returned sat in 0.036578 secs.
[08/03 15:01:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:01:49]  Improved number of small numbers from 88 to 100 out of a max of 100
[08/03 15:01:49]  Verifer returned sat in 0.183792 secs.
[08/03 15:01:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     152.779541      52.779297  117.993408   152.779541    0.049561    52.779297   0.000000  100.000244      100.000244
1     152.779541      52.779541  117.993408   152.779541    0.004883    52.779541   0.000000  100.000000        0.000244
2     252.780762     241.526855  117.993408   252.780762  200.001221   241.526855   0.000000   11.253906        0.001465
3     252.780762     252.779297  117.993408   252.780762   11.253662   252.779297   0.000000    0.001465      -99.998535
4     477.286621     434.271973  117.993408   477.286621  224.507324   434.271973   4.507324   38.507324       20.000000
5     477.286621     454.154297  117.993408   477.286621    2.000000   454.154297   4.507324   18.625000      -80.000000
6     677.289062     552.779785  117.993408   677.289062  218.627441   552.779785   4.509766  119.999512       20.000000
7     677.289062     652.779297  117.993408   677.289062    2.000000   652.779297   4.509766   20.000000      -80.000000
8     881.796387     752.779541  117.993408   881.796387  224.507324   752.779541   9.017090  119.999756       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, buffer=20.[0m
[08/03 15:01:49]  --------------------------------------------------------------------------------
[08/03 15:01:49]  Iteration: 6 (0 solution, 5 counterexamples)
[08/03 15:01:49]  Generator returned sat in 0.197918 secs.
[08/03 15:01:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:50]  Improved number of small numbers from 59 to 100 out of a max of 100
[08/03 15:01:50]  Verifer returned sat in 0.240613 secs.
[08/03 15:01:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0     172.778564      52.779541  117.99292   172.778564    0.049561    52.779541    0.000000  119.999023      119.999023
1     172.778564     152.779541  117.99292   172.778564    0.001221   152.779541    0.000000   19.999023       19.999023
2     272.778564     252.779541  117.99292   272.778564  119.999023   252.779541    0.000000   19.999023       19.999023
3     372.780762     252.779541  117.99292   372.780762  120.001221   252.779541    0.001221  120.000000       20.000000
4     552.780762     452.779541  117.99292   552.780762  300.000000   452.779541   80.001221   20.000000       20.000000
5     982.780762     452.779541  117.99292   982.780762  450.000000   452.779541  410.001221  120.000000       20.000000
6    1162.780762     552.779541  117.99292  1162.780762  300.000000   552.779541  490.001221  120.000000       20.000000
7    1492.780762     652.779541  117.99292  1492.780762  450.000000   652.779541  720.001221  120.000000       20.000000
8    1672.780762     752.779541  117.99292  1672.780762  300.000000   752.779541  800.001221  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, buffer=20.[0m
[08/03 15:01:50]  --------------------------------------------------------------------------------
[08/03 15:01:50]  Iteration: 7 (0 solution, 6 counterexamples)
[08/03 15:01:50]  Generator returned sat in 0.025535 secs.
[08/03 15:01:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:51]  Improved gap from 0 to 12.5
[08/03 15:01:51]  Improved number of small numbers from 52 to 101 out of a max of 101
[08/03 15:01:51]  Verifer returned sat in 0.740955 secs.
[08/03 15:01:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1422.794922    1222.794189 -381.923584  1422.794922    0.049561  1222.794189        0.0  200.000732      100.000732
1    1422.794922    1322.794434 -381.923584  1422.794922    0.000977  1322.794434        0.0  100.000488        0.000732
2    1422.794922    1422.794189 -381.923584  1422.794922    0.000732  1422.794189        0.0    0.000732      -99.999268
3    1822.794189    1522.794434 -381.923584  1822.794189  400.000000  1522.794434        0.0  299.999756      200.000000
4    1822.794189    1722.793945 -381.923584  1822.794189  200.000000  1722.793945        0.0  100.000244      100.000000
5    1822.794189    1810.294189 -381.923584  1822.794189  100.000000  1810.294189        0.0   12.500000        0.000000
6    1860.294189    1835.293701 -319.423584  1860.294189   50.000000  1835.293701        0.0   25.000488        0.000000
7    1860.294189    1860.294189 -231.923584  1860.294189   25.000000  1860.294189        0.0    0.000000      -12.500000
8    1872.794189    1872.794189 -144.423828  1872.794189   12.500000  1872.794189        0.0    0.000000      -12.500244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=200.[0m
[08/03 15:01:51]  --------------------------------------------------------------------------------
[08/03 15:01:51]  Iteration: 8 (0 solution, 7 counterexamples)
[08/03 15:01:51]  Generator returned sat in 0.048143 secs.
[08/03 15:01:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:51]  Improved gap from 0 to 0
[08/03 15:01:52]  Improved number of small numbers from 62 to 68 out of a max of 101
[08/03 15:01:52]  Verifer returned sat in 0.497811 secs.
[08/03 15:01:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1422.794678    1222.794189 -381.923828  1422.794678    0.049561  1222.794189   0.000000  200.000488      100.000488
1    1422.794678    1322.794434 -381.923828  1422.794678    0.000732  1322.794434   0.000000  100.000244        0.000488
2    1422.794678    1422.794189 -381.923828  1422.794678    0.000732  1422.794189   0.000000    0.000488      -99.999512
3    1822.794556    1622.793945 -381.923828  1822.794556  400.000366  1622.793945   0.000366  200.000244      200.000000
4    1822.794556    1722.793945 -381.923828  1822.794556    2.000000  1722.793945   0.000366  100.000244      100.000000
5    1822.794556    1822.784556 -381.923828  1822.794556    0.010000  1822.784556   0.000366    0.009634        0.000000
6    1822.794922    1822.794189 -281.933594  1822.794922    0.010000  1822.794189   0.000366    0.000366       -0.009399
7    1822.804556    1822.804189 -181.943604  1822.804556    0.010000  1822.804189   0.000366    0.000000       -0.009775
8    1822.814556    1822.813965 -181.943359  1822.814556    0.010000  1822.813965   0.000366    0.000225      -99.999531
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=200.[0m
[08/03 15:01:52]  --------------------------------------------------------------------------------
[08/03 15:01:52]  Iteration: 9 (0 solution, 8 counterexamples)
[08/03 15:01:52]  Generator returned sat in 0.021907 secs.
[08/03 15:01:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:52]  Improved gap from 0 to 100
[08/03 15:01:53]  Improved number of small numbers from 30 to 101 out of a max of 101
[08/03 15:01:53]  Verifer returned sat in 0.273459 secs.
[08/03 15:01:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1310.819580    1192.819580 -269.961426  1310.819580    0.049561  1192.819580    0.000000  118.000000       99.987793
1    1310.819580    1310.819580 -269.961426  1310.819580    0.012207  1310.819580    0.000000    0.000000       -0.012207
2    1310.831787    1310.831787 -269.961426  1310.831787    0.012207  1310.831787    0.000000    0.000000     -100.000000
3    1530.843994    1410.832031 -269.961426  1530.843994  220.012207  1410.832031    0.012207  119.999756       20.000000
4    1630.856689    1594.831787 -269.961426  1630.856689  220.012451  1594.831787    0.024902   36.000000       20.000000
5    1880.868896    1710.831787 -269.961426  1880.868896  286.012207  1710.831787  150.037109   20.000000       20.000000
6    2262.868896    1710.832031 -269.961426  2262.868896  402.000000  1710.832031  432.037109  119.999756       20.000000
7    2444.869141    1910.831787 -269.961426  2444.869141  302.000000  1910.831787  514.037354   20.000000       20.000000
8    2742.869141    1910.832031 -269.961426  2742.869141  318.000000  1910.832031  712.037354  119.999756       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=20.[0m
[08/03 15:01:53]  --------------------------------------------------------------------------------
[08/03 15:01:53]  Iteration: 10 (0 solution, 9 counterexamples)
[08/03 15:01:53]  Generator returned sat in 0.328854 secs.
[08/03 15:01:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:54]  Improved number of small numbers from 98 to 100 out of a max of 100
[08/03 15:01:54]  Verifer returned sat in 0.194917 secs.
[08/03 15:01:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1243.819824    1191.819336 -269.961670  1243.819824    0.049316  1191.819336    0.000000   52.000488       32.987793
1    1243.819824    1243.819824 -269.961426  1243.819824   51.994141  1243.819824    0.000000    0.000000      -67.011963
2    1310.831787    1310.831787 -269.961426  1310.831787   67.011963  1310.831787    0.000000    0.000000     -100.000000
3    1530.843994    1410.832031 -269.961426  1530.843994  220.012207  1410.832031    0.012207  119.999756       20.000000
4    1630.856689    1594.831787 -269.961426  1630.856689  220.012451  1594.831787    0.024902   36.000000       20.000000
5    1880.868896    1710.831787 -269.961426  1880.868896  286.012207  1710.831787  150.037109   20.000000       20.000000
6    2204.375000    1736.325928 -269.961426  2204.375000  343.506104  1736.325928  373.543213   94.505859       20.000000
7    2444.869141    1905.498291 -269.961426  2444.869141  335.000000  1905.498291  514.037354   25.333496       20.000000
8    2742.868896    1910.832031 -269.961426  2742.868896  323.333252  1910.832031  712.037109  119.999756       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=20.[0m
[08/03 15:01:54]  --------------------------------------------------------------------------------
[08/03 15:01:54]  Iteration: 11 (0 solution, 10 counterexamples)
[08/03 15:01:54]  Generator returned sat in 0.030186 secs.
[08/03 15:01:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:54]  Improved gap from 3097/2048 to 100
[08/03 15:01:54]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:01:54]  Verifer returned sat in 0.180508 secs.
[08/03 15:01:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1210.831787    1191.319580 -269.961426  1210.831787    0.049316  1191.319580    0.000000   19.512207        0.000000
1    1210.831787    1210.831787 -269.961426  1210.831787   19.506104  1210.831787    0.000000    0.000000     -100.000000
2    1409.319580    1409.319580 -269.961426  1409.319580  198.487793  1409.319580    0.000000    0.000000       -1.512207
3    1530.843994    1410.832031 -269.961426  1530.843994  121.524414  1410.832031    0.012207  119.999756       20.000000
4    1630.856689    1594.831787 -269.961426  1630.856689  220.012451  1594.831787    0.024902   36.000000       20.000000
5    1979.356689    1710.831787 -269.961426  1979.356689  384.500000  1710.831787  248.524902   20.000000       20.000000
6    2261.368896    1736.325928 -269.961426  2261.368896  302.012207  1736.325928  430.537109   94.505859       20.000000
7    2492.856934    1905.498291 -269.961426  2492.856934  325.993896  1905.498291  562.025146   25.333496       20.000000
8    2778.689941    1910.832031 -269.961426  2778.689941  311.166504  1910.832031  747.858154  119.999756       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, buffer=20.[0m
[08/03 15:01:55]  --------------------------------------------------------------------------------
[08/03 15:01:55]  Iteration: 12 (0 solution, 11 counterexamples)
[08/03 15:01:55]  Generator returned sat in 0.393769 secs.
[08/03 15:01:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:55]  Improved gap from 1/100 to 98.4375
[08/03 15:01:55]  Improved number of small numbers from 100 to 101 out of a max of 101
[08/03 15:01:55]  Verifer returned sat in 0.235782 secs.
[08/03 15:01:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    1210.831787    1191.319336 -269.961426  1210.831787     0.048828  1191.319336      0.000  19.512451        0.000244
1    1210.831787    1210.831787 -269.961426  1210.831787    19.505859  1210.831787      0.000   0.000000      -99.999756
2    1310.831787    1310.831543 -269.961426  1310.831787   100.000000  1310.831543      0.000   0.000244      -99.999756
3    2870.831543    1510.831543 -269.961426  2870.831543  1560.000000  1510.831543   1340.000  20.000000       20.000000
4    3631.331543    1610.831543 -269.961426  3631.331543   780.500000  1610.831543   2000.500  20.000000       20.000000
5    4002.081543    1710.831543 -269.961426  4002.081543   390.750000  1710.831543   2271.250  20.000000       20.000000
6    4177.956543    1810.831543 -269.961426  4177.956543   195.875000  1810.831543   2347.125  20.000000       20.000000
7    4256.394043    1810.831543 -268.398926  4256.394043    98.437500  1810.831543   2347.125  98.437500        0.000000
8    4256.394043    1909.269043 -268.398926  4256.394043     0.010000  1909.269043   2347.125   0.000000     -100.000000
high_util=False, low_loss=False, ramp_up=False, ramp_down=True, total_losses=3, buffer=20.[0m
[08/03 15:01:56]  --------------------------------------------------------------------------------
[08/03 15:01:56]  Iteration: 13 (0 solution, 12 counterexamples)
[08/03 15:01:56]  Generator returned sat in 0.116334 secs.
[08/03 15:01:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:01:56]  Improved gap from 1/400 to 100
[08/03 15:01:57]  Improved number of small numbers from 23 to 30 out of a max of 101
[08/03 15:01:57]  Verifer returned sat in 1.235766 secs.
[08/03 15:01:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    3292.088623    1079.265905 -218.30627  3292.088623    0.048584  1079.265905  2092.846914  119.975804      119.975804
1    3292.088623    1179.265905 -218.30627  3292.088623    0.024414  1179.265905  2092.846914   19.975804       19.975804
2    3392.088405    1279.265905 -218.30627  3392.088405  119.975586  1279.265905  2092.846914   19.975586       19.975586
3    3492.137233    1379.265905 -218.30627  3492.137233  120.024414  1379.265905  2092.871328   20.000000       20.000000
4    3682.149440    1452.912256 -218.30627  3682.149440  210.012207  1452.912256  2182.883535   46.353649       20.000000
5    3877.625070    1479.265905 -218.30627  3877.625070  241.829279  1479.265905  2278.359165  120.000000       20.000000
6    3978.539710    1585.643968 -218.30627  3978.539710  220.914640  1585.643968  2279.273805  113.621937       20.000000
7    4078.564124    1679.265905 -218.30627  4078.564124  213.646351  1679.265905  2279.298219  120.000000       20.000000
8    4178.564124    1779.266113 -218.30627  4178.564124  220.000000  1779.266113  2279.298219  119.999792       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, buffer=20.[0m
[08/03 15:01:57]  --------------------------------------------------------------------------------
[08/03 15:01:57]  Iteration: 14 (0 solution, 13 counterexamples)
[08/03 15:01:58]  Generator returned sat in 0.214903 secs.
[08/03 15:01:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:01:58]  Improved gap from 0 to 100
[08/03 15:02:00]  Improved number of small numbers from 15 to 20 out of a max of 101
[08/03 15:02:00]  Verifer returned sat in 1.605781 secs.
[08/03 15:02:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    2840.160645     747.313534  13.646101  2840.160645    0.048340   747.313534  2092.846914    0.000196      -99.999804
1    3060.184740     850.313534  13.646101  3060.184740  220.024292   850.313534  2092.871206  117.000000       20.000000
2    3160.160448    1047.313534  13.646101  3160.160448  216.975708  1047.313534  2092.871206   19.975708       19.975708
3    3260.209032    1095.329729  13.646101  3260.209032  120.024292  1095.329729  2092.895498   71.983805       20.000000
4    3362.233324    1194.996395  13.646101  3362.233324  174.008097  1194.996395  2094.919790   72.317139       20.000000
5    3462.257616    1347.313534  13.646101  3462.257616  172.341431  1347.313534  2094.944082   20.000000       20.000000
6    3592.257616    1410.001794  13.646101  3592.257616  150.000000  1410.001794  2124.944082   57.311740       20.000000
7    3692.281908    1543.012590  13.646101  3692.281908  157.336032  1543.012590  2124.968374   24.300944       20.000000
8    3841.989061    1547.313721  13.646101  3841.989061  174.008097  1547.313721  2174.675527  119.999813       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, buffer=20.[0m
[08/03 15:02:00]  --------------------------------------------------------------------------------
[08/03 15:02:00]  Iteration: 15 (0 solution, 14 counterexamples)
[08/03 15:02:00]  Generator returned sat in 0.418650 secs.
[08/03 15:02:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:00]  Improved gap from 1/400 to 100
[08/03 15:02:02]  Improved number of small numbers from 29 to 37 out of a max of 101
[08/03 15:02:02]  Verifer returned sat in 1.065645 secs.
[08/03 15:02:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    2880.129883     787.261034  13.646101  2880.129883    0.048096   787.261034  2092.868706    0.000143        0.000143
1    3000.132240     887.260986  13.646101  3000.132240  120.002500   887.260986  2092.871206   20.000048       20.000000
2    3000.132240     907.258534  13.646101  3000.132240    0.002500   907.258534  2092.871206    0.002500      -80.000000
3    3080.134740     987.261034  13.646101  3080.134740   80.005000   987.261034  2092.871206    0.002500      -99.997500
4    3360.137240    1087.261034  13.646101  3360.137240  280.005000  1087.261034  2152.876206  120.000000       20.000000
5    3360.137240    1187.261034  13.646101  3360.137240    0.010000  1187.261034  2152.876206   20.000000      -80.000000
6    3620.149740    1387.260986  13.646101  3620.149740  280.012500  1387.260986  2212.888706   20.000048       20.000000
7    3620.149740    1387.261034  13.646101  3620.149740    0.010000  1387.261034  2212.888706   20.000000      -80.000000
8    3900.159740    1487.261230  13.646101  3900.159740  300.010000  1487.261230  2292.898706  119.999804       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=20.[0m
[08/03 15:02:02]  --------------------------------------------------------------------------------
[08/03 15:02:02]  Iteration: 16 (0 solution, 15 counterexamples)
[08/03 15:02:02]  Generator returned sat in 0.285296 secs.
[08/03 15:02:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:03]  Improved gap from 0 to 98.4375
[08/03 15:02:03]  Improved number of small numbers from 27 to 38 out of a max of 101
[08/03 15:02:04]  Verifer returned sat in 1.170923 secs.
[08/03 15:02:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    2715.483887     767.660239 -66.753104  2715.483887    0.048096   767.660239  1747.828706  199.994941       99.994941
1    2715.488945     867.660239 -66.753104  2715.488945  200.000000   867.660239  1747.828706  100.000000        0.000000
2    3015.493945     967.660400 -66.753104  3015.493945  400.005000   967.660400  1747.833706  299.999839      200.000000
3    3015.493945    1167.660156 -66.753104  3015.493945   24.902656  1167.660156  1747.833706  100.000083      100.000000
4    3015.493945    1266.886489 -66.753104  3015.493945   49.805312  1266.886489  1747.833706    0.773750        0.000000
5    3114.330820    1267.660239 -66.752930  3114.330820   99.610625  1267.660239  1747.833706   98.836875       -1.162951
6    3214.715195    1368.443989 -65.974354  3214.715195  199.221250  1368.443989  1747.833706   98.437500        0.000000
7    3514.720195    1466.881592 -65.974354  3514.720195  398.442500  1466.881592  1747.838706  299.999897      200.000000
8    3514.720195    1566.881592 -65.974354  3514.720195    0.010000  1566.881592  1747.838706  199.999897      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=200.[0m
[08/03 15:02:04]  --------------------------------------------------------------------------------
[08/03 15:02:04]  Iteration: 17 (0 solution, 16 counterexamples)
[08/03 15:02:04]  Generator returned sat in 0.147409 secs.
[08/03 15:02:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:04]  Improved gap from 0 to 98.4375
[08/03 15:02:05]  Improved number of small numbers from 37 to 101 out of a max of 101
[08/03 15:02:05]  Verifer returned sat in 0.377544 secs.
[08/03 15:02:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    2715.483887     825.312744 -315.965576  2715.483887    0.047852   825.312744  1670.173584  219.997559      119.997559
1    2715.483887     925.312744 -315.965576  2715.483887    0.002500   925.312744  1670.173584  119.997559       19.997559
2    2715.483887    1045.310303 -315.965576  2715.483887    0.002500  1045.310303  1670.173584    0.000000      -80.002441
3    2915.483887    1157.607666 -315.965576  2915.483887  200.000000  1157.607666  1670.173584   87.702637       19.997559
4    2993.928711    1323.752686 -315.965576  2993.928711  166.147461  1323.752686  1670.173584    0.002441       -1.557617
5    3193.146240    1325.312744 -315.965576  3193.146240  199.219971  1325.312744  1747.833496  120.000000       20.000000
6    3193.146240    1425.312744 -314.403320  3193.146240    0.010000  1425.312744  1747.833496   20.000000      -78.437744
7    3306.998779    1525.312744 -314.403076  3306.998779  133.852539  1525.312744  1747.833496   33.852539      -64.584961
8    3373.926270    1623.750244 -314.403076  3373.926270  100.780029  1623.750244  1747.833496    2.342529      -97.657471
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:02:05]  --------------------------------------------------------------------------------
[08/03 15:02:05]  Iteration: 18 (0 solution, 17 counterexamples)
[08/03 15:02:06]  Generator returned sat in 1.330695 secs.
[08/03 15:02:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:07]  Improved gap from 51/20480 to 98.4375
[08/03 15:02:07]  Improved number of small numbers from 39 to 52 out of a max of 101
[08/03 15:02:07]  Verifer returned sat in 0.838668 secs.
[08/03 15:02:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    3006.979004    1558.100342 -314.403320  3006.979004     0.047607  1558.100342  1248.878496  200.000166      100.000225
1    3006.979004    1658.100342 -314.403320  3006.979004     0.002686  1658.100342  1248.878496  100.000166        0.000225
2    3006.979004    1758.100283 -314.403320  3006.979004     0.001465  1758.100283  1248.878496    0.000225      -99.999775
3    4745.988779    1858.100283 -314.403320  4745.988779  1739.010000  1858.100283  2767.888496  120.000000       20.000000
4    5496.993779    2058.100283 -314.403320  5496.993779   871.005000  2058.100283  3418.893496   20.000000       20.000000
5    5913.996279    2058.100283 -314.403320  5913.996279   437.002500  2058.100283  3735.895996  120.000000       20.000000
6    6013.997529    2246.598408 -314.403320  6013.997529   220.001250  2246.598408  3735.897246   31.501875       20.000000
7    6093.996279    2258.100342 -314.402070  6093.996279   111.500625  2258.100342  3735.897246   99.998691        0.000000
8    6093.996279    2358.099033 -314.401855  6093.996279     0.010000  2358.099033  3735.897246    0.000000      -99.999785
high_util=False, low_loss=False, ramp_up=False, ramp_down=True, total_losses=3, buffer=20.[0m
[08/03 15:02:08]  --------------------------------------------------------------------------------
[08/03 15:02:08]  Iteration: 19 (0 solution, 18 counterexamples)
[08/03 15:02:08]  Generator returned sat in 0.065278 secs.
[08/03 15:02:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:08]  Improved gap from 5119933/51200 to 98.4375
[08/03 15:02:08]  Improved number of small numbers from 64 to 101 out of a max of 101
[08/03 15:02:08]  Verifer returned sat in 0.305864 secs.
[08/03 15:02:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    2196.692627    2196.692627 -314.403564  2196.692627     0.047363  2196.692627     0.000000    0.00000          -100.0
1    2416.695068    2296.692627 -314.403564  2416.695068   220.002441  2296.692627     0.002441  120.00000            20.0
2    2516.697754    2396.692627 -314.403564  2516.697754   220.002686  2396.692627     0.005127  120.00000            20.0
3    3941.697754    2584.702637 -314.403564  3941.697754  1545.000000  2584.702637  1325.005127   31.98999            20.0
4    4683.207764    2696.692627 -314.403564  4683.207764   773.500000  2696.692627  1966.515137   20.00000            20.0
5    5050.957764    2763.880127 -314.403564  5050.957764   387.750000  2763.880127  2234.265137   52.81250            20.0
6    5193.020264    2896.692627 -314.403564  5193.020264   194.875000  2896.692627  2276.327637   20.00000            20.0
7    5271.457764    2896.692627 -312.841064  5271.457764    98.437500  2896.692627  2276.327637   98.43750             0.0
8    5271.457764    2995.130127 -312.841064  5271.457764     0.010000  2995.130127  2276.327637    0.00000          -100.0
high_util=False, low_loss=False, ramp_up=False, ramp_down=True, total_losses=3, buffer=20.[0m
[08/03 15:02:09]  --------------------------------------------------------------------------------
[08/03 15:02:09]  Iteration: 20 (0 solution, 19 counterexamples)
[08/03 15:02:10]  Generator returned sat in 0.898489 secs.
[08/03 15:02:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:10]  Improved gap from 1575/16 to 98.4375
[08/03 15:02:10]  Improved number of small numbers from 64 to 68 out of a max of 101
[08/03 15:02:10]  Verifer returned sat in 0.663525 secs.
[08/03 15:02:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t   queue_t  bottle_queue_t
0    2196.692627    2196.692627 -314.403809  2196.692627     0.047363  2196.692627     0.000000    0.0000     -100.000000
1    2416.697754    2296.692627 -314.403809  2416.697754   220.005127  2296.692627     0.005127  120.0000       20.000000
2    2566.697754    2396.692627 -314.403809  2566.697754   270.000000  2396.692627    50.005127  120.0000       20.000000
3    4353.737754    2596.692627 -314.403809  4353.737754  1907.040000  2596.692627  1737.045127   20.0000       20.000000
4    5289.257754    2695.135127 -314.403809  5289.257754   955.520000  2695.135127  2572.565127   21.5575       20.000000
5    5747.460254    2796.692627 -314.403809  5747.460254   479.760000  2796.692627  2930.767627   20.0000       20.000000
6    5969.340254    2872.190127 -314.403809  5969.340254   241.880000  2872.190127  3052.647627   44.5025       20.000000
7    6047.777754    2896.692627 -312.841309  6047.777754   122.940000  2896.692627  3052.647627   98.4375        0.000000
8    6047.777754    2995.130127 -312.841064  6047.777754     0.010000  2995.130127  3052.647627    0.0000      -99.999756
high_util=False, low_loss=False, ramp_up=False, ramp_down=True, total_losses=3, buffer=20.[0m
[08/03 15:02:11]  --------------------------------------------------------------------------------
[08/03 15:02:11]  Iteration: 21 (0 solution, 20 counterexamples)
[08/03 15:02:12]  Generator returned sat in 1.458145 secs.
[08/03 15:02:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:02:13]  Improved gap from 97/8192 to 98.4375
[08/03 15:02:13]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:02:13]  Verifer returned sat in 0.216712 secs.
[08/03 15:02:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    2978.792480     2978.79248 -1096.503662  2978.792480     0.047363   2978.79248     0.000000    0.000000     -100.000000
1    3198.816162     3078.79248 -1096.503662  3198.816162   220.023682   3078.79248     0.023682  120.000000       20.000000
2    3298.792480     3178.79248 -1096.503662  3298.792480   219.976318   3178.79248     0.023682  119.976318       19.976318
3    4753.816162     3278.79248 -1096.503662  4753.816162  1575.000000   3278.79248  1355.023682  120.000000       20.000000
4    5421.316162     3478.79248 -1096.503662  5421.316162   787.500000   3478.79248  1922.523682   20.000000       20.000000
5    5795.066162     3578.79248 -1096.503662  5795.066162   393.750000   3578.79248  2196.273682   20.000000       20.000000
6    5971.941162     3678.79248 -1096.503662  5971.941162   196.875000   3678.79248  2273.148682   20.000000       20.000000
7    6050.378662     3678.79248 -1094.941162  6050.378662    98.437500   3678.79248  2273.148682   98.437500        0.000000
8    6050.378662     3777.22998 -1094.941162  6050.378662     1.000000   3777.22998  2273.148682    0.000000     -100.000000
high_util=False, low_loss=False, ramp_up=False, ramp_down=True, total_losses=3, buffer=20.[0m
[08/03 15:02:13]  --------------------------------------------------------------------------------
[08/03 15:02:13]  Iteration: 22 (0 solution, 21 counterexamples)
[08/03 15:02:13]  Generator returned sat in 0.183185 secs.
[08/03 15:02:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:02:14]  Improved gap from 97/16384 to 0
[08/03 15:02:14]  Improved number of small numbers from 65 to 101 out of a max of 101
[08/03 15:02:14]  Verifer returned sat in 0.300102 secs.
[08/03 15:02:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4895.065674    4895.065674 -3012.777100  4895.065674    0.046875  4895.065674        0.0    0.000000     -100.000000
1    5115.053955    4995.065918 -3012.777100  5115.053955  219.988281  4995.065918        0.0  119.988037       19.988281
2    5215.053955    5095.065674 -3012.777100  5215.053955  219.988037  5095.065674        0.0  119.988281       19.988281
3    5215.053955    5215.042236 -2932.765381  5215.053955    0.011963  5215.042236        0.0    0.011719        0.000000
4    5216.042236    5216.030518 -2833.753662  5216.042236    1.000000  5216.030518        0.0    0.011719        0.000000
5    5217.030518    5216.042236 -2734.741943  5217.030518    1.000000  5216.042236        0.0    0.988281        0.000000
6    5217.042236    5217.030518 -2634.753662  5217.042236    1.000000  5217.030518        0.0    0.011719        0.000000
7    5218.030518    5218.018799 -2535.741943  5218.030518    1.000000  5218.018799        0.0    0.011719        0.000000
8    5219.018799    5219.018799 -2436.741943  5219.018799    1.000000  5219.018799        0.0    0.000000       -0.011719
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=20.[0m
[08/03 15:02:14]  --------------------------------------------------------------------------------
[08/03 15:02:14]  Iteration: 23 (0 solution, 22 counterexamples)
[08/03 15:02:16]  Generator returned sat in 1.114712 secs.
[08/03 15:02:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:16]  Improved gap from 3/256 to 100
[08/03 15:02:16]  Improved number of small numbers from 91 to 101 out of a max of 101
[08/03 15:02:16]  Verifer returned sat in 0.235821 secs.
[08/03 15:02:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4624.030518    4624.030273 -2732.761719  4624.030518    0.046631  4624.030273    0.000000    0.000244      -19.988037
1    4764.006836    4744.018555 -2732.761719  4764.006836  139.976562  4744.018555    0.000000   19.988281       19.988281
2    4844.041992    4844.018555 -2732.761719  4844.041992  100.023438  4844.018555    0.000000    0.023438        0.023438
3    4844.041992    4844.018799 -2732.761719  4844.041992    0.011475  4844.018799    0.000000    0.023193      -99.976562
4    5064.030273    4944.018555 -2732.761719  5064.030273  220.011475  4944.018555    0.011719  120.000000       20.000000
5    5064.030273    5061.006836 -2732.761719  5064.030273    2.000000  5061.006836    0.011719    3.011719      -80.000000
6    5282.006836    5144.018555 -2732.761719  5282.006836  220.988281  5144.018555   17.988281  120.000000       20.000000
7    5282.006836    5264.006836 -2732.761719  5282.006836    2.000000  5264.006836   17.988281    0.011719      -80.000000
8    5605.983398    5344.018555 -2732.761719  5605.983398  323.988281  5344.018555  141.964844  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, buffer=20.[0m
[08/03 15:02:16]  --------------------------------------------------------------------------------
[08/03 15:02:16]  Iteration: 24 (0 solution, 23 counterexamples)
[08/03 15:02:19]  Generator returned sat in 2.784975 secs.
[08/03 15:02:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:02:20]  Improved gap from 0 to 12.5
[08/03 15:02:20]  Improved number of small numbers from 49 to 101 out of a max of 101
[08/03 15:02:20]  Verifer returned sat in 0.835030 secs.
[08/03 15:02:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4862.006592    4562.030029 -2650.773438  4862.006592    0.046387  4562.030029        0.0  299.976562      299.976562
1    4862.006592    4562.030029 -2650.773438  4862.006592    0.023193  4562.030029        0.0  299.976562      199.976562
2    4962.006592    4662.030273 -2650.773438  4962.006592  399.976562  4662.030273        0.0  299.976318      199.976562
3    5061.983398    4861.530273 -2650.773438  5061.983398  399.953125  4861.530273        0.0  200.453125      199.953369
4    5062.006836    4961.291748 -2650.773438  5062.006836  200.476562  4961.291748        0.0  100.715088       99.976807
5    5062.030029    5049.530029 -2650.773438  5062.030029  100.738281  5049.530029        0.0   12.500000        0.000000
6    5100.399170    5074.441406 -2589.142578  5100.399170   50.869141  5074.441406        0.0   25.957764        0.000000
7    5100.399170    5100.399170 -2501.642578  5100.399170   25.934570  5100.399170        0.0    0.000000      -12.500000
8    5113.866455    5113.866455 -2415.109863  5113.866455   13.467285  5113.866455        0.0    0.000000      -12.500000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=200.[0m
[08/03 15:02:20]  --------------------------------------------------------------------------------
[08/03 15:02:20]  Iteration: 25 (0 solution, 24 counterexamples)
[08/03 15:02:26]  Generator returned sat in 4.832531 secs.
[08/03 15:02:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:02:26]  Improved gap from 3/256 to 1.5625
[08/03 15:02:26]  Improved number of small numbers from 101 to 101 out of a max of 101
[08/03 15:02:26]  Verifer returned sat in 0.191688 secs.
[08/03 15:02:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4876.416748    4776.416748 -2650.773438  4876.416748    0.046387  4776.416748        0.0  100.000000      100.000000
1    4876.416748    4776.416748 -2650.773438  4876.416748    0.005859  4776.416748        0.0  100.000000        0.000000
2    4876.416748    4876.416748 -2650.773438  4876.416748   99.994141  4876.416748        0.0    0.000000     -100.000000
3    5096.410889    5076.416748 -2650.773438  5096.410889  219.994141  5076.416748        0.0   19.994141       19.994141
4    5096.410889    5096.405029 -2572.324219  5096.410889    2.000000  5096.405029        0.0    0.005859       -1.556641
5    5098.405029    5098.399170 -2474.318359  5098.405029    2.000000  5098.399170        0.0    0.005859       -1.556641
6    5100.399170    5100.393311 -2376.312500  5100.399170    2.000000  5100.393311        0.0    0.005859       -1.556641
7    5102.393311    5101.955811 -2277.875000  5102.393311    2.000000  5101.955811        0.0    0.437500       -1.125000
8    5103.955811    5103.518311 -2179.437500  5103.955811    2.000000  5103.518311        0.0    0.437500       -1.125000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=20.[0m
[08/03 15:02:26]  --------------------------------------------------------------------------------
[08/03 15:02:26]  Iteration: 26 (0 solution, 25 counterexamples)
[08/03 15:02:27]  Generator returned sat in 0.683895 secs.
[08/03 15:02:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:02:27]  Improved gap from 23/8192 to 0
[08/03 15:02:28]  Improved number of small numbers from 70 to 101 out of a max of 101
[08/03 15:02:28]  Verifer returned sat in 0.421678 secs.
[08/03 15:02:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4880.571045    4780.571289 -2655.405273  4880.571045    0.046143  4780.571289        0.0   99.999756       99.999756
1    4880.571289    4780.571289 -2655.405273  4880.571289  100.000000  4780.571289        0.0  100.000000        0.000000
2    4880.571289    4880.571289 -2655.405273  4880.571289   99.977051  4880.571289        0.0    0.000000     -100.000000
3    5100.548096    5080.571045 -2655.405273  5100.548096  219.976807  5080.571045        0.0   19.977051       19.976807
4    5100.548096    5100.524902 -2575.382080  5100.548096    0.500000  5100.524902        0.0    0.023193        0.000000
5    5101.024902    5101.001709 -2475.858887  5101.024902    0.500000  5101.001709        0.0    0.023193        0.000000
6    5101.501709    5101.478760 -2376.335938  5101.501709    0.500000  5101.478760        0.0    0.022949       -0.000244
7    5101.978760    5101.955811 -2276.812988  5101.978760    0.500000  5101.955811        0.0    0.022949       -0.000244
8    5102.455811    5102.455566 -2177.289795  5102.455811    0.500000  5102.455566        0.0    0.000244        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=20.[0m
[08/03 15:02:28]  --------------------------------------------------------------------------------
[08/03 15:02:28]  Iteration: 27 (0 solution, 26 counterexamples)
[08/03 15:02:29]  Generator returned sat in 0.939306 secs.
[08/03 15:02:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:02:30]  Improved gap from 0 to 62.5
[08/03 15:02:31]  Improved number of small numbers from 49 to 64 out of a max of 101
[08/03 15:02:31]  Verifer returned sat in 1.748582 secs.
[08/03 15:02:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4788.978760    4708.955811 -2596.113525  4788.978760    0.045898  4708.955811   80.000000    0.022949        0.000081
1    4788.979004    4708.978760 -2558.613729  4788.979004    0.023193  4708.978760   80.000000    0.000244      -62.499878
2    4971.455811    4871.478882 -2558.613729  4971.455811  182.477051  4871.478882   80.000000   19.976929       19.976929
3    4991.297339    4911.274268 -2558.613729  4991.297339   39.818457  4911.274268   80.000000    0.023071      -60.181543
4    5051.501953    4971.478882 -2521.828125  5051.501953   60.227686  4971.478882   80.000000    0.023071      -63.191325
5    5142.320410    5034.693518 -2484.328369  5142.320410   90.841528  5034.693518   80.000000   27.626892      -34.873112
6    5251.455811    5108.955811 -2458.590658  5251.455811  136.762292  5108.955811   80.000000   62.500000        0.000000
7    5394.599249    5171.455811 -2458.590658  5394.599249  205.643439  5171.455811  103.143439  120.000000       20.000000
8    5394.599249    5271.455811 -2458.590576  5394.599249    2.000000  5271.455811  103.143439   20.000000      -79.999919
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:02:31]  --------------------------------------------------------------------------------
[08/03 15:02:31]  Iteration: 28 (0 solution, 27 counterexamples)
[08/03 15:02:32]  Generator returned sat in 0.385956 secs.
[08/03 15:02:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:02:32]  Improved gap from 1/8192 to 40.625
[08/03 15:02:33]  Improved number of small numbers from 54 to 101 out of a max of 101
[08/03 15:02:33]  Verifer returned sat in 0.594021 secs.
[08/03 15:02:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4992.145508    4812.145264 -2516.386230  4992.145508    0.045898  4812.145264  80.000000  100.000244      100.000244
1    4992.145508    4812.145508 -2516.386230  4992.145508  100.000000  4812.145508  80.000000  100.000000        0.000244
2    5112.099609    4973.428711 -2516.386230  5112.099609  219.954102  4973.428711  80.000000   58.670898       19.954346
3    5212.099365    5072.974609 -2516.386230  5212.099365  158.670654  5072.974609  80.000000   59.124756       19.954102
4    5312.145264    5172.362305 -2516.386230  5312.145264  159.170654  5172.362305  80.000000   59.782959       20.000000
5    5412.032959    5212.145508 -2516.386230  5412.032959  159.670654  5212.145508  80.000000  119.887451       19.887695
6    5452.316162    5331.691406 -2476.557373  5452.316162  160.170654  5331.691406  80.000000   40.624756       -0.000244
7    5572.362061    5472.316162 -2476.557373  5572.362061  160.670654  5472.316162  80.045654   20.000244       20.000000
8    5572.362061    5472.316406 -2476.557129  5572.362061    2.000000  5472.316406  80.045654   20.000000      -79.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:02:33]  --------------------------------------------------------------------------------
[08/03 15:02:33]  Iteration: 29 (0 solution, 28 counterexamples)
[08/03 15:02:35]  Generator returned sat in 1.608925 secs.
[08/03 15:02:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/03 15:02:35]  Improved gap from 47/2048 to 98.4375
[08/03 15:02:36]  Improved number of small numbers from 61 to 99 out of a max of 101
[08/03 15:02:36]  Verifer returned sat in 0.562128 secs.
[08/03 15:02:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4910.088867    4810.066162 -2478.119873  4910.088867    0.045654  4810.066162   0.000000  100.022705        0.022705
1    4910.088867    4910.066162 -2478.119629  4910.088867   99.999756  4910.066162   0.000000    0.022705      -99.977051
2    5310.042969    5110.065918 -2478.119629  5310.042969  399.976807  5110.065918   0.000000  199.977051      199.977051
3    5310.042969    5210.065918 -2478.119629  5310.042969   24.619263  5210.065918   0.000000   99.977051       99.977051
4    5310.042969    5308.526611 -2478.119629  5310.042969   49.738525  5308.526611   0.000000    1.516357       -0.022949
5    5408.503662    5310.065918 -2476.557373  5408.503662   99.977051  5310.065918   0.000000   98.437744        0.000000
6    5510.520020    5485.065918 -2476.557373  5510.520020  200.454102  5485.065918   0.000000   25.454102        2.016357
7    5886.474121    5608.503418 -2476.557373  5886.474121  401.408203  5608.503418  77.970459  200.000244      200.000000
8    5886.474121    5608.503662 -2476.557373  5886.474121    2.000000  5608.503662  77.970459  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=200.[0m
[08/03 15:02:36]  --------------------------------------------------------------------------------
[08/03 15:02:36]  Iteration: 30 (0 solution, 29 counterexamples)
[08/03 15:02:40]  Generator returned sat in 4.174359 secs.
[08/03 15:02:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:02:41]  Improved gap from 403199/4096 to 98.4375
[08/03 15:02:41]  Improved number of small numbers from 49 to 91 out of a max of 101
[08/03 15:02:41]  Verifer returned sat in 0.810691 secs.
[08/03 15:02:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5343.192627    5243.169922 -2911.223145  5343.192627    0.045410  5243.169922    0.000000  100.022705        0.022949
1    5343.192627    5343.169922 -2911.223145  5343.192627  100.000000  5343.169922    0.000000    0.022705      -99.977051
2    5741.652832    5543.169678 -2911.223145  5741.652832  398.482910  5543.169678    0.000000  198.483154      198.483154
3    5741.652832    5643.169678 -2911.223145  5741.652832   23.494293  5643.169678    0.000000   98.483154       98.483154
4    5741.652832    5741.630228 -2911.223145  5741.652832   48.988586  5741.630228    0.000000    0.022604       -1.516846
5    5841.607401    5743.169678 -2909.660889  5841.607401   99.977173  5743.169678    0.000000   98.437723       -0.000021
6    5945.124023    5941.607178 -2909.660889  5945.124023  201.954346  5941.607178    0.000000    3.516846        3.516602
7    6347.515869    6041.607178 -2909.660889  6347.515869  405.908691  6041.607178  105.908447  200.000244      200.000000
8    6347.515869    6041.607422 -2909.660889  6347.515869    2.000000  6041.607422  105.908447  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=200.[0m
[08/03 15:02:42]  --------------------------------------------------------------------------------
[08/03 15:02:42]  Iteration: 31 (0 solution, 30 counterexamples)
[08/03 15:02:44]  Generator returned sat in 1.938208 secs.
[08/03 15:02:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:02:45]  Improved gap from 0 to 15.625
[08/03 15:02:45]  Improved number of small numbers from 74 to 83 out of a max of 101
[08/03 15:02:45]  Verifer returned sat in 1.079349 secs.
[08/03 15:02:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6015.492920    5815.492920 -2911.223145  6015.492920    0.045410  5815.492920        0.0  200.000000      100.000244
1    6015.492920    5915.492920 -2911.223145  6015.492920    0.022461  5915.492920        0.0  100.000000        0.000244
2    6315.469971    6015.492676 -2911.223145  6315.469971  399.977051  6015.492676        0.0  299.977295      199.977295
3    6415.469971    6213.458740 -2911.223145  6415.469971  399.977295  6213.458740        0.0  202.011230      199.977295
4    6415.469971    6312.498596 -2911.223145  6415.469971  201.988647  6312.498596        0.0  102.971375       99.977295
5    6415.492920    6361.973145 -2911.223145  6415.492920  102.994324  6361.973145        0.0   53.519775        0.000244
6    6415.492920    6415.492920 -2839.948975  6415.492920   53.497162  6415.492920        0.0    0.000000      -28.725586
7    6444.241501    6444.218796 -2756.323486  6444.241501   28.748581  6444.218796        0.0    0.022705      -16.351517
8    6460.593086    6460.593018 -2756.323486  6460.593086   16.374290  6460.593018        0.0    0.000069      -99.999931
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=200.[0m
[08/03 15:02:45]  --------------------------------------------------------------------------------
[08/03 15:02:45]  Iteration: 32 (0 solution, 31 counterexamples)
[08/03 15:02:47]  Generator returned sat in 0.993372 secs.
[08/03 15:02:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/03 15:02:47]  Improved gap from 1/400 to 42.1875
[08/03 15:02:47]  Improved number of small numbers from 70 to 101 out of a max of 101
[08/03 15:02:47]  Verifer returned sat in 0.432422 secs.
[08/03 15:02:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6035.489990    5815.492920 -2911.223145  6035.489990    0.045410  5815.492920   0.000000  219.997070      119.997314
1    6035.489990    5915.492676 -2911.223145  6035.489990    0.022217  5915.492676   0.000000  119.997314       19.997314
2    6135.495117    6081.300293 -2911.223145  6135.495117  220.002441  6081.300293   0.002441   54.192383       20.000000
3    6235.492676    6179.300293 -2911.223145  6235.492676  154.189941  6179.300293   0.002441   56.189941       19.997559
4    6335.492676    6277.300049 -2911.223145  6335.492676  156.189941  6277.300049   0.002441   58.190186       19.997559
5    6435.492432    6317.107666 -2911.223145  6435.492432  158.189941  6317.107666   0.002441  118.382324       19.997314
6    6477.300049    6435.110352 -2873.028320  6477.300049  160.189941  6435.110352   0.002441   42.187256       -0.000244
7    6597.302734    6477.297852 -2873.028320  6597.302734  162.189941  6477.297852   0.004883  120.000000       20.000000
8    6597.302734    6577.297852 -2873.028320  6597.302734    0.010000  6577.297852   0.004883   20.000000      -80.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:02:48]  --------------------------------------------------------------------------------
[08/03 15:02:48]  Iteration: 33 (0 solution, 32 counterexamples)
[08/03 15:02:50]  Generator returned sat in 1.519283 secs.
[08/03 15:02:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:50]  Improved gap from 7/2560 to 98.4375
[08/03 15:02:50]  Improved number of small numbers from 65 to 71 out of a max of 101
[08/03 15:02:50]  Verifer returned sat in 0.810487 secs.
[08/03 15:02:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6205.968018    6005.966960 -2911.223145  6205.968018    0.045166  6005.966960    0.00000  200.001058      100.001058
1    6205.968018    6205.966960 -2911.223145  6205.968018    0.001221  6205.966960    0.00000    0.001058        0.001058
2    6505.968210    6205.966960 -2911.223145  6505.968210  300.001250  6205.966960    0.00125  300.000000      200.000000
3    6505.968210    6391.384043 -2911.223145  6505.968210  243.751250  6391.384043    0.00125  114.582917      100.000000
4    6705.969460    6504.405710 -2911.223145  6705.969460  314.584167  6504.405710    0.00250  201.561250      200.000000
5    6705.969460    6539.296126 -2911.223145  6705.969460    0.010000  6539.296126    0.00250  166.670833      100.000000
6    6705.969460    6605.966960 -2911.223145  6705.969460  166.669583  6605.966960    0.00250  100.000000        0.000000
7    6796.595710    6705.966960 -2909.660645  6796.595710  190.626250  6705.966960    0.00250   90.626250       -7.811250
8    6902.063210    6804.404541 -2909.660645  6902.063210  196.093750  6804.404541    0.00250   97.656169       -2.343750
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=200.[0m
[08/03 15:02:51]  --------------------------------------------------------------------------------
[08/03 15:02:51]  Iteration: 34 (0 solution, 33 counterexamples)
[08/03 15:02:56]  Generator returned sat in 4.978575 secs.
[08/03 15:02:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/03 15:02:57]  Improved gap from 27/800 to 64.0625
[08/03 15:02:58]  Improved number of small numbers from 22 to 34 out of a max of 101
[08/03 15:02:58]  Verifer returned sat in 1.976247 secs.
[08/03 15:02:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6890.023193    6670.024170 -3108.102272  6890.023193    0.045166  6670.024170   0.000000  219.999023      119.999267
1    6890.023193    6770.023926 -3108.102272  6890.023193    0.001221  6770.023926   0.000000  119.999267       19.999267
2    6990.024537    6969.330544 -3108.102272  6990.024537  220.000610  6969.330544   0.000610   20.693382       20.000000
3    7009.608752    7009.608141 -3108.102272  7009.608752   40.277597  7009.608141   0.000610    0.000000      -60.415785
4    7070.025147    7070.023926 -3072.164772  7070.025147   60.416395  7070.023926   0.000610    0.000610      -64.061890
5    7160.649130    7134.086426 -3036.227272  7160.649130   90.624593  7134.086426   0.000610   26.562093      -37.500407
6    7270.023926    7198.148926 -3008.101662  7270.023926  135.936890  7198.148926   0.000610   71.874390        0.000000
7    7402.054871    7370.023193 -3008.101662  7402.054871  203.905334  7370.023193  12.031555   20.000123       20.000000
8    7402.054871    7370.023438 -3008.101562  7402.054871    0.010000  7370.023438  12.031555   19.999878      -79.999901
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:02:58]  --------------------------------------------------------------------------------
[08/03 15:02:58]  Iteration: 35 (0 solution, 34 counterexamples)
[08/03 15:03:01]  Generator returned sat in 2.211848 secs.
[08/03 15:03:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:03:02]  Improved gap from 5/32768 to 60.9375
[08/03 15:03:03]  Improved number of small numbers from 16 to 28 out of a max of 101
[08/03 15:03:03]  Verifer returned sat in 1.634080 secs.
[08/03 15:03:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6890.024170    6670.023682 -3108.101967  6890.024170    0.045166  6670.023682   0.000610  219.999878      119.999938
1    6890.024170    6770.023621 -3108.101967  6890.024170    0.000977  6770.023621   0.000610  119.999938       19.999938
2    6990.024537    6970.023621 -3108.101967  6990.024537  220.000305  6970.023621   0.000916   20.000000       20.000000
3    7009.624781    7009.623560 -3108.101967  7009.624781   39.600244  7009.623560   0.000916    0.000305      -60.399756
4    7070.024842    7070.023621 -3069.039467  7070.024842   60.400366  7070.023621   0.000916    0.000305      -60.937195
5    7161.625086    7130.961121 -3029.976967  7161.625086   91.600549  7130.961121   0.000916   30.663049      -30.274451
6    7269.362861    7191.898621 -3007.440291  7269.362861  138.400824  7191.898621   0.000916   77.463324        0.000000
7    7400.500773    7369.361816 -3007.440291  7400.500773  208.601236  7369.361816  11.138828   20.000129       20.000000
8    7400.500773    7370.023193 -2969.039062  7400.500773    0.010000  7370.023193  11.138828   19.338752      -41.598772
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:03:03]  --------------------------------------------------------------------------------
[08/03 15:03:03]  Iteration: 36 (0 solution, 35 counterexamples)
[08/03 15:03:06]  Generator returned sat in 2.483901 secs.
[08/03 15:03:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:03:06]  Improved gap from 0 to 98.4375
[08/03 15:03:07]  Improved number of small numbers from 55 to 65 out of a max of 101
[08/03 15:03:07]  Verifer returned sat in 0.835721 secs.
[08/03 15:03:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6759.230225    6359.230361 -3069.039467  6759.230225    0.044922  6359.230361     0.0000  399.999864      299.999864
1    6759.232861    6459.230361 -3069.039467  6759.232861  400.002500  6459.230361     0.0025  300.000000      200.000000
2    6859.235361    6659.230225 -3069.039467  6859.235361  400.002500  6659.230225     0.0050  200.000136      200.000000
3    6859.235361    6759.230225 -3069.039467  6859.235361   19.916667  6759.230225     0.0050  100.000136      100.000000
4    6859.235361    6859.227861 -3069.039467  6859.235361   40.833333  6859.227861     0.0050    0.002500        0.000000
5    6941.899527    6859.230361 -3069.034467  6941.899527   82.666667  6859.230361     0.0050   82.664167      -17.330833
6    7025.568694    7025.561194 -3069.034467  7025.568694  166.333333  7025.561194     0.0050    0.002500      -33.661667
7    7359.232861    7059.225586 -3069.034467  7359.232861  333.666667  7059.225586     0.0075  299.999775      200.000000
8    7359.232861    7159.225586 -3069.034467  7359.232861    0.010000  7159.225586     0.0075  199.999775      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=200.[0m
[08/03 15:03:07]  --------------------------------------------------------------------------------
[08/03 15:03:07]  Iteration: 37 (0 solution, 36 counterexamples)
[08/03 15:03:13]  Generator returned sat in 4.872961 secs.
[08/03 15:03:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:03:13]  Improved gap from 0 to 0
[08/03 15:03:13]  Improved number of small numbers from 63 to 101 out of a max of 101
[08/03 15:03:13]  Verifer returned sat in 0.331611 secs.
[08/03 15:03:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6557.745361    6457.723145 -3069.039307  6557.745361    0.044678  6457.723145        0.0  100.022217        0.022461
1    6557.745361    6557.722900 -3069.039307  6557.745361  100.000000  6557.722900        0.0    0.022461      -99.977539
2    6657.722900    6657.722900 -2969.061768  6657.722900  100.000000  6657.722900        0.0    0.000000       -0.022461
3    6759.245361    6757.745361 -2969.061768  6759.245361  101.522461  6757.745361        0.0    1.500000        1.500000
4    6759.245361    6757.767822 -2870.561768  6759.245361    1.500000  6757.767822        0.0    1.477539        0.000000
5    6759.267822    6759.245361 -2770.584229  6759.267822    1.500000  6759.245361        0.0    0.022461        0.000000
6    6760.745361    6759.268066 -2672.062012  6760.745361    1.500000  6759.268066        0.0    1.477295       -0.000244
7    6760.768066    6760.745605 -2572.084473  6760.768066    1.500000  6760.745605        0.0    0.022461        0.000000
8    6762.245605    6760.768066 -2572.084229  6762.245605    1.500000  6760.768066        0.0    1.477539      -98.522217
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, buffer=200.[0m
[08/03 15:03:13]  --------------------------------------------------------------------------------
[08/03 15:03:13]  Iteration: 38 (0 solution, 37 counterexamples)
[08/03 15:03:17]  Generator returned sat in 2.870175 secs.
[08/03 15:03:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:03:18]  Improved gap from 0 to 59.375
[08/03 15:03:19]  Improved number of small numbers from 56 to 80 out of a max of 101
[08/03 15:03:19]  Verifer returned sat in 1.868237 secs.
[08/03 15:03:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6523.761475    6403.763672 -2915.080078  6523.761475    0.044678  6403.763672   0.000000  119.997803      119.997803
1    6523.761475    6503.763672 -2915.080078  6523.761475    0.002686  6503.763672   0.000000   19.997803       19.997803
2    6623.761230    6585.173584 -2915.080078  6623.761230  119.997559  6585.173584   0.000000   38.587646       19.997559
3    6623.761230    6603.763785 -2874.455191  6623.761230   38.585000  6603.763785   0.000000   19.997445      -39.377555
4    6663.141285    6663.138785 -2833.830322  6663.141285   59.377500  6663.138785   0.000000    0.002500      -59.372631
5    6753.705035    6725.786910 -2815.077637  6753.705035   90.566250  6725.786910   0.000000   27.918125      -50.056195
6    6863.136285    6803.761285 -2774.452691  6863.136285  137.349375  6803.761285   0.000000   59.375000        0.000000
7    7011.285348    6863.136475 -2774.452691  7011.285348  207.524063  6863.136475  28.149062  119.999811       20.000000
8    7011.285348    6963.136475 -2774.452637  7011.285348    0.010000  6963.136475  28.149062   19.999811      -79.999945
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:03:19]  --------------------------------------------------------------------------------
[08/03 15:03:19]  Iteration: 39 (0 solution, 38 counterexamples)
[08/03 15:03:23]  Generator returned sat in 3.991268 secs.
[08/03 15:03:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:03:24]  Improved gap from 183/8192 to 14.0625
[08/03 15:03:25]  Improved number of small numbers from 42 to 71 out of a max of 101
[08/03 15:03:25]  Verifer returned sat in 1.542629 secs.
[08/03 15:03:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6623.879883    6623.879639 -2860.390191  6623.879883    0.044434  6623.879639        0.0    0.000244        0.000132
1    6923.857422    6723.879639 -2860.390191  6923.857422  299.977783  6723.879639        0.0  199.977783      199.977671
2    7023.857422    6723.879883 -2860.390191  7023.857422  299.977783  6723.879883        0.0  299.977539      199.977671
3    7114.969238    6917.901855 -2860.390191  7114.969238  391.089355  6917.901855        0.0  197.067383      191.089487
4    7114.969238    7023.879751 -2860.390191  7114.969238  197.044678  7023.879751        0.0   91.089487       91.089487
5    7123.902090    7072.368652 -2860.390191  7123.902090  100.022339  7072.368652        0.0   51.533438        0.022339
6    7123.902090    7123.879751 -2774.452881  7123.902090   51.511169  7123.879751        0.0    0.022339      -14.040351
7    7151.135336    7151.112997 -2701.685937  7151.135336   27.255585  7151.112997        0.0    0.022339      -14.040161
8    7166.240789    7165.175537 -2701.685791  7166.240789   15.127792  7165.175537        0.0    1.065252      -98.934561
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=200.[0m
[08/03 15:03:25]  --------------------------------------------------------------------------------
[08/03 15:03:25]  Iteration: 40 (0 solution, 39 counterexamples)
[08/03 15:03:28]  Generator returned sat in 1.747406 secs.
[08/03 15:03:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/03 15:03:29]  Improved gap from 97201309/6912000 to 14.0625
[08/03 15:03:29]  Improved number of small numbers from 91 to 101 out of a max of 101
[08/03 15:03:29]  Verifer returned sat in 0.950343 secs.
[08/03 15:03:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6424.012939    6423.990723 -2860.390381  6424.012939    0.044189  6423.990723        0.0    0.022217        0.022217
1    6424.012939    6423.990723 -2860.390381  6424.012939    0.022217  6423.990723        0.0    0.022217      -99.977783
2    6535.990723    6535.968506 -2860.390381  6535.990723  112.000000  6535.968506        0.0    0.022217      -88.000000
3    6923.968506    6723.990479 -2860.390381  6923.968506  388.000000  6723.990479        0.0  199.978027      199.977783
4    6923.968506    6823.990479 -2860.390381  6923.968506  195.000000  6823.990479        0.0   99.978027       99.977783
5    6923.968506    6899.865479 -2860.368164  6923.968506   98.500000  6899.865479        0.0   24.103027        0.000000
6    6950.115479    6923.968506 -2786.515137  6950.115479   50.250000  6923.968506        0.0   26.146973        0.000000
7    6950.115479    6950.115479 -2700.577637  6950.115479   26.125000  6950.115479        0.0    0.000000      -14.062500
8    6964.177979    6964.177979 -2700.577637  6964.177979   14.062500  6964.177979        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, buffer=200.[0m
[08/03 15:03:29]  --------------------------------------------------------------------------------
[08/03 15:03:29]  Iteration: 41 (0 solution, 40 counterexamples)
[08/03 15:03:32]  Generator returned sat in 2.412799 secs.
[08/03 15:03:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/03 15:03:32]  Improved gap from 0 to 42.1875
[08/03 15:03:32]  Improved number of small numbers from 76 to 101 out of a max of 101
[08/03 15:03:32]  Verifer returned sat in 0.313460 secs.
[08/03 15:03:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6523.990479    6423.990723 -2860.390381  6523.990479    0.043945  6423.990723   0.000000   99.999756       99.999756
1    6523.990479    6423.990723 -2860.390381  6523.990479    0.021973  6423.990723   0.000000   99.999756       -0.000244
2    6623.990479    6581.802979 -2860.390381  6623.990479  199.999756  6581.802979   0.000000   42.187500       -0.000244
3    6737.995605    6627.000488 -2860.390381  6737.995605  156.192627  6627.000488   0.000000  110.995117       14.004883
4    6784.693115    6784.687988 -2860.390381  6784.693115  157.692627  6784.687988   0.000000    0.005127      -39.297607
5    6943.880615    6823.990723 -2860.390381  6943.880615  159.192627  6823.990723   0.000000  119.889893       19.889893
6    6984.683350    6942.495605 -2821.083008  6984.683350  160.692627  6942.495605   0.000000   42.187744        0.000000
7    7104.688232    7084.683105 -2821.083008  7104.688232  162.192627  7084.683105   0.004883   20.000244       20.000000
8    7104.688232    7084.683350 -2821.083008  7104.688232    0.010000  7084.683350   0.004883   20.000000      -80.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, buffer=20.[0m
[08/03 15:03:33]  --------------------------------------------------------------------------------
[08/03 15:03:33]  Iteration: 42 (0 solution, 41 counterexamples)
[08/03 15:03:34]  Generator returned unsat in 0.317355 secs.
[08/03 15:03:34]  [96mNo more solutions found[0m
[08/03 15:03:34]  Final solutions:
[08/03 15:03:34]  Took 108.959918 secs.
