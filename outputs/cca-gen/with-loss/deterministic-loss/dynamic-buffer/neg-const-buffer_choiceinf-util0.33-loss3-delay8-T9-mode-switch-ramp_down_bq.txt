[08/15 18:35:41]  --------------------------------------------------------------------------------
[08/15 18:35:41]  Iteration: 1 (0 solution, 0 counterexamples)
[08/15 18:35:41]  Generator returned sat in 0.004233 secs.
[08/15 18:35:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:41]  Improved gap from 0.025 to 100
[08/15 18:35:42]  Improved number of small numbers from 114 to 114 out of a max of 114
[08/15 18:35:42]  Verifer returned sat in 0.754220 secs.
[08/15 18:35:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -195.378409    -195.428409  195.328409   -195.378409      0.05  -195.428409       0.00     0.05           -0.05     9.0      -195.428409            -1             -1     -1
1    -195.328409    -195.328409  195.328409   -195.328409      0.10  -195.328409       0.00     0.00         -100.00     1.0      -195.428409         False           True  False
2       4.671591     -95.328409  195.328409      4.671591    200.00   -95.328409       0.00   100.00            0.00     1.0      -195.428409         False          False  False
3       4.721591       4.671591  195.328409      4.721591    100.05     4.671591       0.00     0.05          -99.95     2.0         4.721591         False          False  False
4     605.971591     204.671591  195.328409    605.971591    601.30   204.671591     379.35    21.95           21.95     1.0         4.721591         False          False  False
5    2587.621591     226.671591  195.328409   2587.621591   2003.60   226.671591    2261.00    99.95           21.95     1.0         4.721591         False          False   True
6    7139.871591     326.671591  195.328409   7139.871591   4652.20   326.671591    6713.25    99.95           21.95     1.0         4.721591         False          False   True
7   16989.321591     504.671591  195.328409  16989.321591   9949.40   504.671591   16462.70    21.95           21.95     1.0         4.721591         False          False   True
8   37467.171591     526.671591  195.328409  37467.171591  20499.80   526.671591   36840.55    99.95           21.95     1.0         4.721591         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=439/20.[0m
[08/15 18:35:42]  --------------------------------------------------------------------------------
[08/15 18:35:42]  Iteration: 2 (0 solution, 1 counterexamples)
[08/15 18:35:42]  Generator returned sat in 0.070921 secs.
[08/15 18:35:42]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:44]  Improved number of small numbers from 89 to 91 out of a max of 113
[08/15 18:35:44]  Verifer returned sat in 1.027481 secs.
[08/15 18:35:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    8306.501709    7889.121591 -7889.121591   8306.501709   417.429932  7889.121591       0.00   417.380118      417.380118     6.0      7889.121591            -1             -1   False
1    8306.551591    7889.221591 -7889.121591   8306.551591   417.430000  7889.221591       0.00   417.330000      317.430000     6.0      7889.121591         False          False   False
2    9706.601591    7989.121591 -7889.121591   9706.601591  1817.380000  7989.121591       0.05  1717.430000     1617.430000     7.0      7889.121591         False          False   False
3    9806.551591    8089.121591 -7889.121591   9806.551591  1817.380000  8089.121591       0.05  1717.380000     1617.380000     8.0      7889.121591         False          False    True
4   11015.241591    8189.121591 -7889.121591  11015.241591  2926.070000  8189.121591    1108.69  1717.430000     1617.430000     9.0      7889.121591         False          False    True
5   11015.241591    8306.501591 -7889.121591  11015.241591     1.000000  8306.501591    1108.69  1600.050000     1517.430000     7.0      9906.551591          True           True    True
6   11015.241591    8489.121591 -7889.121591  11015.241591   318.880000  8489.121591    1108.69  1417.430000     1417.430000     5.0      9906.551591         False          False    True
7   11015.241591    8589.121591 -7889.121591  11015.241591   878.320000  8589.121591    1108.69  1317.430000     1317.430000     6.0      9906.551591         False          False    True
8   11415.291591    8589.121591 -7889.121591  11415.291591  1717.480000  8589.121591    1108.74  1717.430000     1617.430000     6.0      9906.551591         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=161743/100.[0m
[08/15 18:35:44]  --------------------------------------------------------------------------------
[08/15 18:35:44]  Iteration: 3 (0 solution, 2 counterexamples)
[08/15 18:35:44]  Generator returned sat in 0.121832 secs.
[08/15 18:35:44]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:45]  Improved number of small numbers from 68 to 113 out of a max of 113
[08/15 18:35:45]  Verifer returned sat in 0.420063 secs.
[08/15 18:35:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    7706.341797    7306.491699 -7889.121826  7706.341797     0.050000  7306.491699        0.0   399.850098      299.850098     5.0      7306.491699            -1             -1    True
1    7906.491699    7406.491699 -7889.121826  7906.491699   600.000000  7406.491699        0.0   500.000000      400.000000     5.0      7306.491699         False          False    True
2    9306.541504    7506.491699 -7889.121826  9306.541504  1900.049805  7506.491699        0.0  1800.049805     1700.049805     3.0      7306.491699         False          False    True
3    9306.541504    7706.391602 -7889.121826  9306.541504  1600.100098  7706.391602        0.0  1600.149902     1600.049805     3.0      9306.541504         False          False    True
4    9306.541504    7706.491699 -7889.121826  9306.541504  1600.100098  7706.491699        0.0  1600.049805     1500.049805     4.0      9306.541504         False          False    True
5    9306.591797    7906.491699 -7889.121826  9306.591797  1600.100098  7906.491699        0.0  1400.100098     1400.100098     5.0      9306.541504         False          False    True
6    9506.591797    7906.491699 -7889.121826  9506.591797  1600.100098  7906.491699        0.0  1600.100098     1500.100098     5.0      9306.541504         False          False    True
7    9506.591797    8106.491699 -7889.121826  9506.591797  1600.100098  8106.491699        0.0  1400.100098     1400.100098     6.0      9306.541504         False          False    True
8    9706.591797    8106.491699 -7889.121826  9706.591797  1600.100098  8106.491699        0.0  1600.100098     1500.100098     6.0      9306.541504         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=17001/10.[0m
[08/15 18:35:45]  --------------------------------------------------------------------------------
[08/15 18:35:45]  Iteration: 4 (0 solution, 3 counterexamples)
[08/15 18:35:46]  Generator returned sat in 0.071216 secs.
[08/15 18:35:46]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:46]  Improved gap from 0.0 to 31.25
[08/15 18:35:47]  Improved number of small numbers from 113 to 114 out of a max of 114
[08/15 18:35:47]  Verifer returned sat in 1.050377 secs.
[08/15 18:35:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   10175.591553   10075.491455 -7889.121826  10175.591553    0.049805  10075.491455   0.050049  100.050049      100.000000     3.0     10075.491455            -1             -1     -1
1   10175.591553   10075.541504 -7889.121826  10175.591553    0.049805  10075.541504   0.050049  100.000000        0.000000     3.0     10075.491455         False          False   True
2   10504.741455   10175.541504 -7889.121826  10504.741455  429.149902  10175.541504   0.099854  329.100098      229.100098     4.0     10075.491455         False          False   True
3   10504.741455   10375.541406 -7889.121826  10504.741455   36.250000  10375.541406   0.099854  129.100195      129.100098     2.0     10504.641602         False          False   True
4   10504.741455   10470.341406 -7889.121826  10504.741455   35.250000  10470.341406   0.099854   34.300195       29.100098     3.0     10504.641602         False          False   True
5   10504.741455   10475.541504 -7820.371826  10504.741455   34.250000  10475.541504   0.099854   29.100098       -2.149902     4.0     10504.641602         False          False   True
6   10508.891357   10506.791504 -7751.621826  10508.891357   33.250000  10506.791504   0.099854    2.000000      -29.250000     1.0     10504.641602         False          False   True
7   10539.141357   10538.041504 -7682.871826  10539.141357   32.250000  10538.041504   0.099854    1.000000      -30.250000     1.0     10504.641602         False          False   True
8   10569.391357   10569.291504 -7682.871826  10569.391357   31.250000  10569.291504   0.099854    0.000000     -100.000000     1.0     10504.641602         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=469197/2048.[0m
[08/15 18:35:47]  --------------------------------------------------------------------------------
[08/15 18:35:47]  Iteration: 5 (0 solution, 4 counterexamples)
[08/15 18:35:47]  Generator returned sat in 0.047826 secs.
[08/15 18:35:47]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:48]  Improved gap from 0.0 to 100
[08/15 18:35:48]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 18:35:48]  Verifer returned sat in 0.438349 secs.
[08/15 18:35:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7571.570312    7420.563965 -7889.121826  7571.570312     0.001221  7420.563965   0.001221   151.005127      100.002686     2.0      7420.563965            -1             -1     -1
1    7571.570312    7571.566406 -7889.121826  7571.570312     0.002500  7571.566406   0.001221     0.002686        0.002686     2.0      7420.563965         False          False   True
2    7571.570312    7571.566406 -7889.121826  7571.570312     0.001221  7571.566406   0.001221     0.002686      -99.997314     2.0      7571.569092         False          False   True
3    8071.565186    7771.566406 -7889.121826  8071.565186   499.997559  7771.566406   0.001221   299.997559      299.997559     1.0      7571.569092         False          False   True
4    8972.570068    7871.566406 -7889.121826  8972.570068  1201.002441  7871.566406   0.001221  1101.002441     1101.002441     2.0      7571.569092         False          False   True
5    9671.570068    7871.566406 -7889.121826  9671.570068  1800.002441  7871.566406   0.002441  1800.001221     1700.001221     2.0      7571.569092         False          False   True
6    9671.570068    8071.565430 -7889.121826  9671.570068   900.001221  8071.565430   0.002441  1600.002197     1600.001221     3.0      7571.569092         False          False   True
7    9671.570068    8071.566406 -7889.121826  9671.570068     0.010000  8071.566406   0.002441  1600.001221     1500.001221     4.0      9671.567627          True           True  False
8    9671.570068    8271.566406 -7889.121826  9671.570068     0.010000  8271.566406   0.002441  1400.001221     1400.001221     5.0      9671.567627         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=6963205/4096.[0m
[08/15 18:35:49]  --------------------------------------------------------------------------------
[08/15 18:35:49]  Iteration: 6 (0 solution, 5 counterexamples)
[08/15 18:35:49]  Generator returned sat in 0.177587 secs.
[08/15 18:35:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:49]  Improved gap from 0.05 to 100
[08/15 18:35:49]  Improved number of small numbers from 89 to 89 out of a max of 114
[08/15 18:35:49]  Verifer returned sat in 0.499687 secs.
[08/15 18:35:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t  cwnd_0,t  service_0,t     losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7671.567627    7471.566406 -7889.121826   7671.567627      0.05  7471.566406      0.001221   200.00          200.00     3.0      7471.566406            -1             -1     -1
1    7671.567627    7571.566406 -7889.121826   7671.567627      0.10  7571.566406      0.001221   100.00          100.00     2.0      7471.566406         False           True  False
2    7671.567627    7571.566406 -7889.121826   7671.567627      0.05  7571.566406      0.001221   100.00            0.00     2.0      7671.566406         False          False  False
3    7871.667627    7771.566406 -7889.121826   7871.667627    300.10  7771.566406      0.051221   100.05          100.05     1.0      7671.566406         False          False  False
4    8371.817627    7871.566406 -7889.121826   8371.817627    600.20  7871.566406    400.201221   100.05          100.05     2.0      7671.566406         False          False   True
5    9472.167627    7871.566406 -7889.121826   9472.167627   1200.40  7871.566406   1400.551221   200.05          100.05     2.0      7671.566406         False          False   True
6   11672.917627    8071.566406 -7889.121826  11672.917627   2400.80  8071.566406   3501.301221   100.05          100.05     2.0      7671.566406         False          False   True
7   16374.467627    8171.566406 -7889.121826  16374.467627   4801.60  8171.566406   8102.851221   100.05          100.05     2.0      7671.566406         False          False   True
8   25877.617627    8171.616406 -7889.121826  25877.617627   9603.20  8171.616406  17506.001221   200.00          100.05     3.0      7671.566406         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=2001/20.[0m
[08/15 18:35:50]  --------------------------------------------------------------------------------
[08/15 18:35:50]  Iteration: 7 (0 solution, 6 counterexamples)
[08/15 18:35:50]  Generator returned sat in 0.137055 secs.
[08/15 18:35:50]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:51]  Improved number of small numbers from 80 to 97 out of a max of 113
[08/15 18:35:51]  Verifer returned sat in 1.008549 secs.
[08/15 18:35:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t      cwnd_0,t   service_0,t     losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -76938.932373  -77338.932129 -7889.12207 -76938.932373    399.900146 -77338.932129      0.099854   399.899902      299.899902     3.0    -77338.932129            -1             -1     -1
1  -76938.932373  -77238.932129 -7889.12207 -76938.932373    399.799805 -77238.932129      0.099854   299.899902      199.899902     4.0    -76939.032227         False           True   True
2  -76938.732422  -77138.932129 -7889.12207 -76938.732422    300.099854 -77138.932129      0.099854   200.099854      100.099854     4.0    -76938.832275         False           True  False
3  -25932.432275  -76938.932275 -7889.12207 -25932.432275  51206.400000 -76938.932275  49506.400000  1500.100000     1500.099854     2.0    -76938.832275         False           True  False
4   -1829.332275  -76838.932275 -7889.12207  -1829.332275  25603.200000 -76838.932275  73509.500000  1500.100000     1500.099854     2.0    -76938.832275         False           True   True
5    9472.167725  -76738.932275 -7889.12207   9472.167725  12801.600000 -76738.932275  84711.000000  1500.100000     1500.099854     3.0    -76938.832275         False           True   True
6   14372.867725  -76638.932275 -7889.12207  14372.867725   6400.800000 -76638.932275  89511.700000  1500.100000     1500.099854     4.0    -75138.832275          True           True   True
7   16073.167725  -76538.932275 -7889.12207  16073.167725   3200.400000 -76538.932275  91112.000000  1500.100000     1500.099854     5.0    -75138.832275         False           True   True
8   16173.267725  -76538.932129 -7889.12207  16173.267725   1600.200000 -76538.932129  91112.100000  1600.099854     1500.099854     6.0    -75138.832275         False           True   True
high_util=True, low_loss=False, low_delay=False, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=6144409/4096.[0m
[08/15 18:35:52]  --------------------------------------------------------------------------------
[08/15 18:35:52]  Iteration: 8 (0 solution, 7 counterexamples)
[08/15 18:35:52]  Generator returned sat in 0.030372 secs.
[08/15 18:35:52]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:53]  Improved number of small numbers from 80 to 87 out of a max of 113
[08/15 18:35:53]  Verifer returned sat in 1.034361 secs.
[08/15 18:35:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t      cwnd_0,t   service_0,t     losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -77024.907275  -77338.882080 -7889.12207 -77024.907275    399.899902 -77338.882080      0.025000   313.949805          213.95     6.0    -77338.882080            -1             -1     -1
1  -77024.907275  -77238.882080 -7889.12207 -77024.907275    313.925000 -77238.882080      0.025000   213.949805          113.95     3.0    -77024.932275         False           True   True
2  -76938.807275  -77138.882275 -7889.12207 -76938.807275    300.049805 -77138.882275      0.025000   200.050000          100.05     4.0    -76938.832275         False           True  False
3  -25874.457275  -77024.907275 -7889.12207 -25874.457275  51264.400000 -77024.907275  49564.375000  1586.075000         1500.05     2.0    -76938.832275         False           True  False
4   -1829.332275  -76851.932275 -7889.12207  -1829.332275  25631.200000 -76851.932275  73509.500000  1513.100000         1500.05     2.0    -76938.832275         False           True   True
5    9472.167725  -76738.882422 -7889.12207   9472.167725  12814.600000 -76738.882422  84711.000000  1500.050146         1500.05     3.0    -76938.832275         False           True   True
6   14378.417578  -76638.932275 -7889.12207  14378.417578   6406.300000 -76638.932275  89517.249854  1500.100000         1500.05     4.0    -75138.832275          True           True   True
7   16080.467578  -76538.882275 -7889.12207  16080.467578   3202.150000 -76538.882275  91119.299854  1500.050000         1500.05     5.0    -75138.832275         False           True   True
8   16180.492578  -76538.857178 -7889.12207  16180.492578   1600.075000 -76538.857178  91119.324854  1600.024902         1500.05     6.0    -75138.832275         False           True   True
high_util=True, low_loss=False, low_delay=False, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=30001/20.[0m
[08/15 18:35:54]  --------------------------------------------------------------------------------
[08/15 18:35:54]  Iteration: 9 (0 solution, 8 counterexamples)
[08/15 18:35:54]  Generator returned sat in 0.050435 secs.
[08/15 18:35:54]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:55]  Improved gap from 0.0008333333333333334 to 23.4375
[08/15 18:35:55]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 18:35:55]  Verifer returned sat in 0.826260 secs.
[08/15 18:35:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -76828.141113  -76828.142578 -8086.637695 -76828.141113    0.001465 -76828.142578   0.001465   0.000000      -99.999756     3.0    -76828.142578            -1             -1     -1
1  -76628.141357  -76651.579834 -8086.637695 -76628.141357  199.999756 -76651.579834   0.001465  23.437012        0.000000     1.0    -76828.142578         False           True   True
2  -76600.456055  -76608.927490 -8029.290527 -76600.456055   51.122314 -76608.927490   0.001465   8.469971      -14.967529     1.0    -76600.457520         False          False   True
3  -76557.803711  -76581.242676 -7956.975586 -76557.803711   51.122314 -76581.242676   0.001465  23.437500       -0.000244     1.0    -76600.457520         False          False   True
4  -76457.791260  -76457.804932 -7956.975586 -76457.791260  123.449951 -76457.804932   0.002441   0.011230        0.011230     1.0    -76600.457520         False          False   True
5  -76457.791260  -76457.804932 -7880.413086 -76457.791260    0.010000 -76457.804932   0.002441   0.011230      -23.426270     1.0    -76600.457520         False          False   True
6  -76382.241211  -76432.951660 -7832.536865 -76382.241211   75.561279 -76432.951660   0.002441  50.708008        0.000000     1.0    -76600.457520         False          False   True
7  -76358.803711  -76382.243652 -7755.974365 -76358.803711   74.145508 -76382.243652   0.002441  23.437500        0.000000     2.0    -76600.457520         False          False   True
8  -76358.803711  -76358.806152 -7679.411865 -76358.803711    0.010000 -76358.806152   0.002441   0.000000      -23.437500     2.0    -76358.806152          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=23/2048.[0m
[08/15 18:35:56]  --------------------------------------------------------------------------------
[08/15 18:35:56]  Iteration: 10 (0 solution, 9 counterexamples)
[08/15 18:35:56]  Generator returned sat in 0.031703 secs.
[08/15 18:35:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:35:56]  Improved gap from 23.4375 to 23.4375
[08/15 18:35:58]  Improved number of small numbers from 32 to 100 out of a max of 114
[08/15 18:35:58]  Verifer returned sat in 2.247019 secs.
[08/15 18:35:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -76802.809570  -76824.684570 -8038.971924 -76802.809570    0.001465 -76824.684570   0.000000   21.875000      -27.000977     1.0     -76824.68457            -1             -1   False
1  -76675.808105  -76775.808594 -8038.971924 -76675.808105  148.876465 -76775.808594   0.000244  100.000244        0.000244     1.0     -76824.68457         False          False   False
2  -76575.807861  -76575.808594 -8038.971924 -76575.807861  200.000488 -76575.808594   0.000488    0.000244        0.000244     1.0     -76824.68457         False          False    True
3  -76575.807861  -76575.808594 -7962.409424 -76575.807861    0.000244 -76575.808594   0.000488    0.000244      -23.437256     1.0     -76575.80835         False          False    True
4  -76452.370117  -76452.371115 -7962.409424 -76452.370117  123.437988 -76452.371115   0.000732    0.000265        0.000244     1.0     -76575.80835         False          False    True
5  -76452.360382  -76452.370605 -7885.847412 -76452.360382    0.010000 -76452.370605   0.000732    0.009491      -23.428009     1.0     -76575.80835         False          False    True
6  -76391.650879  -76428.933105 -7837.971680 -76391.650879   60.718994 -76428.933105   0.000732   37.281494      -14.842773     1.0     -76575.80835         False          False    True
7  -76356.494629  -76376.808798 -7761.409220 -76356.494629   72.437744 -76376.808798   0.000732   20.313436       -3.124064     1.0     -76575.80835         False          False    True
8  -76340.026907  -76353.371298 -7761.409180 -76340.026907   36.781158 -76353.371298   0.000732   13.343658      -86.656301     1.0     -76575.80835         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/4096.[0m
[08/15 18:35:59]  --------------------------------------------------------------------------------
[08/15 18:35:59]  Iteration: 11 (0 solution, 10 counterexamples)
[08/15 18:36:00]  Generator returned sat in 0.483031 secs.
[08/15 18:36:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 18:36:01]  Improved number of small numbers from 58 to 64 out of a max of 113
[08/15 18:36:01]  Verifer returned sat in 1.238838 secs.
[08/15 18:36:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -76675.807861  -76875.907699 -7761.40922 -76675.807861    0.100098 -76875.907699        0.1  199.999838       99.999838     7.0    -76875.907699            -1             -1     -1
1  -76575.807699  -76775.907471 -7761.40922 -76575.807699  300.000000 -76775.907471        0.1  199.999772      100.000000     8.0    -76875.907699         False          False   True
2  -76575.807699  -76675.907699 -7761.40922 -76575.807699  149.549805 -76675.907699        0.1  100.000000        0.000000     2.0    -76575.907699          True           True  False
3  -76526.257699  -76575.907699 -7761.40922 -76526.257699  149.550000 -76575.907699        0.1   49.550000      -50.450000     3.0    -76575.907699         False          False  False
4  -76275.707699  -76474.307699 -7761.40922 -76275.707699  300.100000 -76474.307699        0.1  198.500000      100.100000     1.0    -76575.907699         False          False  False
5  -75873.007699  -76275.907699 -7761.40922 -75873.007699  601.200000 -76275.907699      302.8  100.100000      100.100000     2.0    -76575.907699         False          False  False
6  -75772.107699  -76175.907699 -7761.40922 -75772.107699  201.000000 -76175.907699      303.7  100.100000      100.100000     2.0    -76575.907699         False          False   True
7  -75671.207699  -76075.907699 -7761.40922 -75671.207699  201.000000 -76075.907699      304.6  100.100000      100.100000     2.0    -76575.907699         False          False   True
8  -75571.107699  -75975.907715 -7761.40922 -75571.107699  200.200000 -75975.907715      304.7  100.100016      100.100000     2.0    -76575.907699         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=1001/10.[0m
