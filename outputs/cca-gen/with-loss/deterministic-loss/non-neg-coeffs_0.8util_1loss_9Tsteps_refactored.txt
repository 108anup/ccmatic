[07/18 16:11:02]  --------------------------------------------------------------------------------
[07/18 16:11:02]  Iteration: 1 (0 solution, 0 counterexamples)
[07/18 16:11:02]  Generator returned sat in 0.004354 secs.
[07/18 16:11:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:11:02]  Improved gap from 1/5 to 100
[07/18 16:11:02]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 16:11:02]  Verifer returned sat in 0.223397 secs.
[07/18 16:11:02]  Counter example: 
[93m    arrival_0,t  cwnd_0,t   service_0,t      wasted_t  losts_0,t  loss_detected_0,t  queue_t  bottle_queue_t
0 -10610.638333       0.1 -10710.638333  10710.638333        0.0                0.0    100.0           100.0
1 -10610.638333       0.1 -10710.638333  10710.638333        0.0                0.0    100.0             0.0
2 -10610.638333       0.1 -10610.638333  10710.638333        0.0                0.0      0.0          -100.0
3 -10510.538333     100.1 -10510.638333  10710.638333        0.0                0.0      0.1           -99.9
4  -9908.438333     602.2 -10410.638333  10710.638333      202.2                0.0    300.0           200.0
5  -8402.038333    1806.4 -10284.638333  10710.638333     1608.6              202.2    274.0           200.0
6  -4409.238333    4266.8 -10190.638333  10710.638333     5501.4             1608.6    280.0           200.0
7   4486.361667    9175.6 -10106.638333  10710.638333    14297.0             5501.4    296.0           200.0
8  23151.561667   18961.2 -10010.638333  10710.638333    32862.2            14297.0    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=5.[0m
[07/18 16:11:02]  --------------------------------------------------------------------------------
[07/18 16:11:02]  Iteration: 2 (0 solution, 1 counterexamples)
[07/18 16:11:02]  Generator returned sat in 0.016548 secs.
[07/18 16:11:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:11:02]  Improved gap from 409/8192 to 100
[07/18 16:11:03]  Improved number of small numbers from 32 to 44 out of a max of 100
[07/18 16:11:03]  Verifer returned sat in 0.939631 secs.
[07/18 16:11:03]  Counter example: 
[93m   arrival_0,t     cwnd_0,t  service_0,t    wasted_t    losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6091.437988     0.099609 -6191.438040  6191.43804     0.000000           0.000000  100.000052      100.000052
1 -6091.437988     0.050049 -6191.438040  6191.43804     0.000000           0.000000  100.000052        0.000052
2 -6091.437988     0.049805 -6091.438040  6191.43804     0.000000           0.000000    0.000052      -99.999948
3 -5691.388114   400.049927 -5917.438040  6191.43804     0.049927           0.000000  226.000000      200.000000
4 -5379.838187   537.549927 -5869.438040  6191.43804   211.599854           0.049927  278.000000      200.000000
5 -4958.788260   699.049927 -5791.438040  6191.43804   532.649780         211.599854  300.000000      200.000000
6 -4409.238333   849.549927 -5591.438040  6191.43804   982.199707         532.649780  200.000000      200.000000
7 -3596.188407  1013.049927 -5591.438040  6191.43804  1695.249634         982.199707  300.000000      200.000000
8 -2743.638480  1152.549927 -5491.437988  6191.43804  2447.799561        1695.249634  299.999948      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=5.[0m
[07/18 16:11:03]  --------------------------------------------------------------------------------
[07/18 16:11:03]  Iteration: 3 (0 solution, 2 counterexamples)
[07/18 16:11:04]  Generator returned sat in 0.504182 secs.
[07/18 16:11:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:04]  Improved gap from 1/400 to 0
[07/18 16:11:05]  Improved number of small numbers from 54 to 92 out of a max of 100
[07/18 16:11:05]  Verifer returned sat in 0.744578 secs.
[07/18 16:11:05]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5597.148926    0.099365 -5897.148682  6191.437988        0.0                0.0  299.999756      199.999756
1 -5597.148926    0.002686 -5797.148682  6191.437988        0.0                0.0  199.999756       99.999756
2 -5597.148926    0.002686 -5597.151123  6191.438232        0.0                0.0    0.002197        0.000000
3 -5297.151123  300.000000 -5497.148926  6191.438232        0.0                0.0  199.997803      199.997803
4 -4897.148926  600.000000 -5397.148926  6191.438232      300.0                0.0  200.000000      200.000000
5 -4897.148926    0.010000 -5297.148926  6191.438232      300.0              300.0  100.000000      100.000000
6 -4897.148926    0.020000 -5197.151312  6191.438232      300.0              300.0    0.002386        0.000000
7 -4897.111312    0.040000 -5197.148812  6291.400391      300.0              300.0    0.037500       -0.000228
8 -4897.068812    0.080000 -5197.068848  6391.357910      300.0              300.0    0.000036       -0.000208
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:05]  --------------------------------------------------------------------------------
[07/18 16:11:05]  Iteration: 4 (0 solution, 3 counterexamples)
[07/18 16:11:05]  Generator returned sat in 0.102831 secs.
[07/18 16:11:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:05]  Improved gap from 11/8192 to 3.125
[07/18 16:11:06]  Improved number of small numbers from 35 to 100 out of a max of 100
[07/18 16:11:06]  Verifer returned sat in 0.472944 secs.
[07/18 16:11:06]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5652.662598    0.099365 -5852.711914  6147.001221   0.000000           0.000000  200.049316      100.049561
1 -5652.662598  200.000000 -5752.711914  6147.001221   0.000000           0.000000  100.049316        0.049561
2 -5652.662598    0.049805 -5652.712158  6147.001465   0.000000           0.000000    0.049561      -99.950195
3 -5501.124756  151.587402 -5501.174561  6192.338623   0.000000           0.000000    0.049805       -3.075195
4 -5197.999756  303.174805 -5398.049561  6192.338623   0.049805           0.000000  200.000000      200.000000
5 -5197.999756    0.500000 -5298.049561  6192.338623   0.049805           0.049805  100.000000      100.000000
6 -5197.999756    1.000000 -5201.174561  6192.338623   0.049805           0.049805    3.125000        0.000000
7 -5197.999756    2.000000 -5198.049561  6289.213623   0.049805           0.049805    0.000000       -3.125000
8 -5193.999756    4.000000 -5194.924561  6386.088623   0.049805           0.049805    0.875000       -2.250000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:06]  --------------------------------------------------------------------------------
[07/18 16:11:06]  Iteration: 5 (0 solution, 4 counterexamples)
[07/18 16:11:06]  Generator returned sat in 0.039320 secs.
[07/18 16:11:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:06]  Improved gap from 25/8 to 15.625
[07/18 16:11:07]  Improved number of small numbers from 37 to 100 out of a max of 100
[07/18 16:11:07]  Verifer returned sat in 0.646734 secs.
[07/18 16:11:07]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6271.664062    0.099365 -6271.664307  6665.953125   0.000000           0.000000    0.000244        0.000000
1 -6171.664307  100.000000 -6271.664062  6665.953125   0.000000           0.000000   99.999756       -0.000244
2 -5871.664307  399.999756 -6071.738770  6665.953125   0.000000           0.000000  200.074463      199.999756
3 -5871.664307  200.024902 -6071.664062  6665.953125   0.000000           0.000000  199.999756       99.999756
4 -5671.614258  400.049805 -5871.664062  6665.953125   0.049805           0.000000  200.000000      200.000000
5 -5671.614258    2.000000 -5771.664307  6665.953125   0.049805           0.049805  100.000244      100.000000
6 -5671.614258    4.000000 -5771.664062  6665.953125   0.049805           0.049805  100.000000        0.000000
7 -5671.614258    8.000000 -5671.664062  6750.328125   0.049805           0.049805    0.000000      -15.625000
8 -5655.614258   16.000000 -5656.039062  6750.328369   0.049805           0.049805    0.375000      -99.624756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:07]  --------------------------------------------------------------------------------
[07/18 16:11:07]  Iteration: 6 (0 solution, 5 counterexamples)
[07/18 16:11:07]  Generator returned sat in 0.157490 secs.
[07/18 16:11:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:11:08]  Improved gap from 11 to 10.9375
[07/18 16:11:08]  Improved number of small numbers from 41 to 100 out of a max of 100
[07/18 16:11:08]  Verifer returned sat in 0.473416 secs.
[07/18 16:11:08]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6044.923828    0.099365 -6244.923584  6665.952881   0.000000           0.000000  199.999756       99.999756
1 -6044.923828    0.049561 -6055.861084  6665.952881   0.000000           0.000000   10.937256       -0.000244
2 -5744.973389  310.887695 -6044.923584  6665.952881   0.000000           0.000000  299.950195      199.950195
3 -5744.973389  149.524902 -5844.923828  6665.952881   0.000000           0.000000   99.950439       99.950195
4 -5544.874023  300.049805 -5744.923584  6665.952881   0.049561           0.000000  200.000000      200.000000
5 -5544.874023    0.500000 -5744.923584  6665.952881   0.049561           0.049561  200.000000      100.000000
6 -5544.874023    2.000000 -5549.874023  6665.952881   0.049561           0.049561    4.950439        0.000000
7 -5544.824463    5.000000 -5544.923584  6755.015381   0.049561           0.049561    0.049561      -10.887939
8 -5533.874023   11.000000 -5533.986084  6755.015625   0.049561           0.049561    0.062500      -99.937256
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:08]  --------------------------------------------------------------------------------
[07/18 16:11:08]  Iteration: 7 (0 solution, 6 counterexamples)
[07/18 16:11:09]  Generator returned sat in 0.438386 secs.
[07/18 16:11:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:09]  Improved gap from 1/400 to 0
[07/18 16:11:09]  Improved number of small numbers from 69 to 78 out of a max of 100
[07/18 16:11:09]  Verifer returned sat in 0.393993 secs.
[07/18 16:11:09]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -6044.923828    0.099121 -6244.923584  6465.968018        0.0                0.0  199.999756       99.999893
1 -6044.923828    0.049561 -6055.861084  6465.968018        0.0                0.0   10.937256       -0.000107
2 -5844.923584  210.937500 -6044.923584  6465.968018        0.0                0.0  200.000000      100.000137
3 -5844.923584  149.524658 -5844.926084  6465.968018        0.0                0.0    0.002500        0.000137
4 -5844.916084    0.010000 -5844.918584  6565.960205        0.0                0.0    0.002500       -0.000176
5 -5844.908584    0.010000 -5844.911084  6665.952881        0.0                0.0    0.002500        0.000000
6 -5844.901084    0.010000 -5844.908584  6765.945381        0.0                0.0    0.007500        0.000000
7 -5844.898584    0.010000 -5844.901084  6865.942871        0.0                0.0    0.002500       -0.000010
8 -5844.891084    0.010000 -5844.898438  6865.942871        0.0                0.0    0.007354      -99.992510
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:11:09]  --------------------------------------------------------------------------------
[07/18 16:11:09]  Iteration: 8 (0 solution, 7 counterexamples)
[07/18 16:11:09]  Generator returned sat in 0.049798 secs.
[07/18 16:11:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:10]  Improved gap from 1/400 to 39.0625
[07/18 16:11:10]  Improved number of small numbers from 48 to 67 out of a max of 100
[07/18 16:11:10]  Verifer returned sat in 0.997380 secs.
[07/18 16:11:10]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4772.104248    0.098877 -4872.104492  6765.945381    0.000000           0.000000  100.000244      100.000205
1 -4772.104248    0.049316 -4772.154053  6765.945381    0.000000           0.000000    0.049805        0.000205
2 -4772.104248    0.049316 -4772.104453  6765.945381    0.000000           0.000000    0.000205      -99.999795
3 -4146.313437  625.791016 -4572.104453  6765.945381  225.791016           0.000000  200.000000      200.000000
4 -4033.417930  312.895508 -4472.992432  6765.945381  238.686523         225.791016  200.887979      200.000000
5 -4033.417930  156.447754 -4472.104248  6765.945381  238.686523         238.686523  199.999795      100.000000
6 -4033.417930   78.223877 -4272.153892  6765.945381  238.686523         238.686523    0.049438        0.000000
7 -3994.355430   39.111938 -4272.104453  6826.882881  238.686523         238.686523   39.062500        0.000000
8 -3994.355430   19.555969 -4233.041953  6826.883057  238.686523         238.686523    0.000000      -99.999824
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:11]  --------------------------------------------------------------------------------
[07/18 16:11:11]  Iteration: 9 (0 solution, 8 counterexamples)
[07/18 16:11:11]  Generator returned sat in 0.036117 secs.
[07/18 16:11:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:12]  Improved gap from 0 to 12.5
[07/18 16:11:12]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/18 16:11:12]  Verifer returned sat in 1.111578 secs.
[07/18 16:11:12]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4179.680664    0.098633 -4279.680420  6339.314453   0.000000           0.000000   99.999756             0.0
1 -4179.680664    0.049316 -4179.680664  6426.814453   0.000000           0.000000    0.000000           -12.5
2 -3867.131348  312.549316 -4167.180664  6426.814453   0.049316           0.000000  300.000000           200.0
3 -3767.131348  400.000000 -4067.180420  6426.814453   0.049316           0.049316  299.999756           200.0
4 -3767.131348  200.000000 -3867.229736  6426.814453   0.049316           0.049316  100.049072           100.0
5 -3767.131348  100.000000 -3779.680664  6426.814453   0.049316           0.049316   12.500000             0.0
6 -3729.631348   50.000000 -3754.729736  6489.314453   0.049316           0.049316   25.049072             0.0
7 -3729.631348   25.000000 -3729.680664  6576.814453   0.049316           0.049316    0.000000           -12.5
8 -3717.131348   12.500000 -3717.180664  6576.814453   0.049316           0.049316    0.000000          -100.0
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:11:12]  --------------------------------------------------------------------------------
[07/18 16:11:12]  Iteration: 10 (0 solution, 9 counterexamples)
[07/18 16:11:13]  Generator returned sat in 0.446835 secs.
[07/18 16:11:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:13]  Improved gap from 721299/16384 to 100
[07/18 16:11:14]  Improved number of small numbers from 56 to 56 out of a max of 100
[07/18 16:11:14]  Verifer returned sat in 0.807674 secs.
[07/18 16:11:14]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4179.680664    0.098633 -4179.680664  6426.814453    0.000000           0.000000    0.000000             0.0
1 -4079.680664  100.000000 -4102.120585  6426.814453    0.000000           0.000000   22.439921             0.0
2 -3979.680664  122.439921 -4079.680664  6426.814453    0.000000           0.000000  100.000000             0.0
3 -3679.656067  400.024597 -3913.339132  6426.814453    0.024597           0.000000  233.658468           200.0
4 -3579.631470  333.683065 -3798.705261  6426.814453    0.049194           0.024597  219.024597           200.0
5 -3479.606873  319.049194 -3679.680664  6426.814453    0.073792           0.049194  200.000000           200.0
6 -3319.582275  360.024597 -3579.680664  6426.814453   60.098389           0.073792  200.000000           200.0
7 -3172.240743  347.341532 -3479.680664  6426.814453  107.439921          60.098389  200.000000           200.0
8 -3038.557678  333.683065 -3479.680664  6426.814453  141.122986         107.439921  300.000000           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=5.[0m
[07/18 16:11:14]  --------------------------------------------------------------------------------
[07/18 16:11:14]  Iteration: 11 (0 solution, 10 counterexamples)
[07/18 16:11:14]  Generator returned sat in 0.048006 secs.
[07/18 16:11:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:14]  Improved gap from 403/16384 to 100
[07/18 16:11:15]  Improved number of small numbers from 55 to 55 out of a max of 100
[07/18 16:11:15]  Verifer returned sat in 0.719372 secs.
[07/18 16:11:15]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4079.680908    0.098633 -4079.680908  6426.814209    0.000000           0.000000    0.000000             0.0
1 -3979.680908  100.000000 -4079.680908  6426.814209    0.000000           0.000000  100.000000             0.0
2 -3879.680908  200.000000 -3979.680908  6426.814209    0.000000           0.000000  100.000000             0.0
3 -3579.631714  400.049194 -3789.410696  6426.814209    0.049194           0.000000  209.729788           200.0
4 -3444.201798  345.159703 -3728.034680  6426.814209   35.479110           0.049194  248.353772           200.0
5 -3344.152604  348.402966 -3579.680908  6426.814209   35.528305          35.479110  200.000000           200.0
6 -3169.951121  374.201483 -3479.680908  6426.814209  109.729788          35.528305  200.000000           200.0
7 -3027.985485  341.965635 -3379.680908  6426.814209  151.695423         109.729788  200.000000           200.0
8 -2882.825782  345.159703 -3379.680908  6426.814209  196.855126         151.695423  300.000000           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=5.[0m
[07/18 16:11:15]  --------------------------------------------------------------------------------
[07/18 16:11:15]  Iteration: 12 (0 solution, 11 counterexamples)
[07/18 16:11:16]  Generator returned sat in 0.831285 secs.
[07/18 16:11:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:16]  Improved gap from 1/2 to 39.0625
[07/18 16:11:16]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 16:11:16]  Verifer returned sat in 0.213821 secs.
[07/18 16:11:16]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4632.833008    0.098633 -4632.833008  6426.813965      0.000              0.000    0.000000        0.000000
1 -4532.833008  100.000000 -4632.833008  6426.813965      0.000              0.000  100.000000        0.000000
2 -4232.931152  399.901855 -4532.833008  6426.813965      0.000              0.000  299.901855      199.901855
3 -3579.583008  953.250000 -4332.833008  6426.813965    553.250              0.000  200.000000      200.000000
4 -3302.458008  477.125000 -4232.833008  6426.813965    730.375            553.250  200.000000      200.000000
5 -3263.395508  239.062500 -4132.833008  6426.813965    730.375            730.375  139.062500      139.062500
6 -3263.395508    0.500000 -4132.833008  6426.813965    730.375            730.375  139.062500       39.062500
7 -3263.395508    0.500000 -4032.833008  6487.751465    730.375            730.375   39.062500        0.000000
8 -3263.395508    0.500000 -3993.770508  6548.688965    730.375            730.375    0.000000      -39.062500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:17]  --------------------------------------------------------------------------------
[07/18 16:11:17]  Iteration: 13 (0 solution, 12 counterexamples)
[07/18 16:11:18]  Generator returned sat in 0.738681 secs.
[07/18 16:11:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:18]  Improved number of small numbers from 60 to 68 out of a max of 99
[07/18 16:11:18]  Verifer returned sat in 0.677714 secs.
[07/18 16:11:18]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3902.460693    0.098145 -3902.460752  5696.441709    0.00000             0.0000    0.000059        0.000059
1 -3602.463252  299.997500 -3802.460938  5696.441709    0.00000             0.0000  199.997686      199.997500
2 -3502.463379  299.997559 -3702.460752  5696.441709    0.00000             0.0000  199.997373      199.997373
3 -3502.459085  200.001667 -3702.460752  5696.441709    0.00000             0.0000  200.001667      100.001667
4 -3302.458252  400.002500 -3602.460752  5696.441709    0.00250             0.0000  300.000000      200.000000
5 -3302.458252    0.010000 -3436.460752  5696.441709    0.00250             0.0025  134.000000      100.000000
6 -3302.458252  133.015000 -3402.460752  5696.441709    0.00250             0.0025  100.000000        0.000000
7 -3052.935752  349.522500 -3258.460752  5696.441709    0.00250             0.0025  205.522500      149.522500
8 -2562.174502  696.283750 -3202.460693  5696.441709  340.28625             0.0025  299.999941      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:11:19]  --------------------------------------------------------------------------------
[07/18 16:11:19]  Iteration: 14 (0 solution, 13 counterexamples)
[07/18 16:11:20]  Generator returned sat in 1.413571 secs.
[07/18 16:11:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:20]  Improved gap from 25/512 to 0
[07/18 16:11:21]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 16:11:21]  Verifer returned sat in 0.229135 secs.
[07/18 16:11:21]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3502.958252    0.098145 -3702.958252  5397.341553        0.0                0.0  200.000000      200.000000
1 -3403.007080  299.951172 -3602.958252  5397.341553        0.0                0.0  199.951172      199.951172
2 -3403.007080  199.951172 -3602.958252  5397.341553        0.0                0.0  199.951172       99.951172
3 -3302.458252  300.500000 -3402.958252  5397.341553        0.0                0.0  100.500000      100.500000
4 -3302.458252    0.500000 -3302.958252  5397.341553        0.0                0.0    0.500000        0.500000
5 -3302.458252    0.500000 -3302.507080  5496.841553        0.0                0.0    0.048828        0.000000
6 -3302.007080    0.500000 -3302.055908  5596.390381        0.0                0.0    0.048828        0.000000
7 -3301.555908    0.500000 -3301.604736  5695.488037        0.0                0.0    0.048828       -0.451172
8 -3301.104736    0.500000 -3301.104736  5695.488037        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:11:21]  --------------------------------------------------------------------------------
[07/18 16:11:21]  Iteration: 15 (0 solution, 14 counterexamples)
[07/18 16:11:21]  Generator returned sat in 0.150112 secs.
[07/18 16:11:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:22]  Improved gap from 399/8192 to 12.5
[07/18 16:11:23]  Improved number of small numbers from 31 to 100 out of a max of 100
[07/18 16:11:23]  Verifer returned sat in 1.492995 secs.
[07/18 16:11:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3365.064453    0.097900 -3534.113037  5664.487061   0.000000           0.000000  169.048584      100.048584
1 -3365.064453  169.048584 -3365.113037  5664.487061   0.000000           0.000000    0.048584        0.048584
2 -3365.064209    0.048828 -3365.112793  5664.487061   0.000000           0.000000    0.048584      -99.951172
3 -2965.064209  400.048584 -3165.113037  5664.487061   0.048828           0.000000  200.000000      200.000000
4 -2965.064209  185.000000 -3065.113037  5664.487061   0.048828           0.048828  100.000000      100.000000
5 -2965.064209   93.000000 -2977.613037  5664.487061   0.048828           0.048828   12.500000        0.000000
6 -2930.564209   47.000000 -2965.112793  5729.987061   0.048828           0.048828   34.499756        0.000000
7 -2930.564209   24.000000 -2930.613037  5817.487061   0.048828           0.048828    0.000000      -12.500000
8 -2918.064209   12.500000 -2918.113037  5817.487305   0.048828           0.048828    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:11:23]  --------------------------------------------------------------------------------
[07/18 16:11:23]  Iteration: 16 (0 solution, 15 counterexamples)
[07/18 16:11:24]  Generator returned sat in 0.372052 secs.
[07/18 16:11:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:24]  Improved gap from 0 to 10.9375
[07/18 16:11:24]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/18 16:11:24]  Verifer returned sat in 0.266387 secs.
[07/18 16:11:24]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3065.088623    0.097900 -3265.088623  5728.424805   0.000000           0.000000  200.000000      200.000000
1 -3065.088623    0.048584 -3165.088623  5728.424805   0.000000           0.000000  100.000000      100.000000
2 -3065.088623    0.048584 -3165.088379  5728.424805   0.000000           0.000000   99.999756        0.000000
3 -2965.064209  200.024170 -3065.088379  5728.424805   0.000000           0.000000  100.024170        0.024414
4 -2665.040039  400.048340 -2865.088623  5728.424805   0.048584           0.000000  200.000000      200.000000
5 -2665.040039    1.500000 -2865.088379  5728.424805   0.048584           0.048584  199.999756      100.000000
6 -2665.040039    3.000000 -2671.136963  5728.424805   0.048584           0.048584    6.048340        0.000000
7 -2665.040039    6.000000 -2665.088623  5817.487061   0.048584           0.048584    0.000000      -10.937744
8 -2653.040039   12.000000 -2654.150879  5817.487305   0.048584           0.048584    1.062256      -98.937500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:24]  --------------------------------------------------------------------------------
[07/18 16:11:24]  Iteration: 17 (0 solution, 16 counterexamples)
[07/18 16:11:25]  Generator returned sat in 0.223348 secs.
[07/18 16:11:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:25]  Improved gap from 8 to 7.8125
[07/18 16:11:25]  Improved number of small numbers from 52 to 100 out of a max of 100
[07/18 16:11:25]  Verifer returned sat in 0.576608 secs.
[07/18 16:11:25]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3083.065430    0.097656 -3283.065674  5433.275391    0.000000           0.000000  200.000244      100.000244
1 -3083.065430    0.048340 -3090.877930  5433.275391    0.000000           0.000000    7.812500        0.000244
2 -3075.252930   15.625000 -3083.065430  5525.462646    0.000000           0.000000    7.812500        0.000000
3 -2775.277344  307.788086 -2975.252930  5525.462646    0.000000           0.000000  199.975586      199.975586
4 -2359.676758  615.576172 -2875.253174  5525.462646  315.576172           0.000000  200.000244      200.000000
5 -2359.676758    1.000000 -2775.253174  5525.462646  315.576172         315.576172  100.000244      100.000000
6 -2359.676758    2.000000 -2683.065674  5525.462646  315.576172         315.576172    7.812744        0.000000
7 -2359.676758    4.000000 -2675.252930  5617.650146  315.576172         315.576172    0.000000       -7.812500
8 -2351.676758    8.000000 -2667.440430  5617.650391  315.576172         315.576172    0.187500      -99.812256
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:26]  --------------------------------------------------------------------------------
[07/18 16:11:26]  Iteration: 18 (0 solution, 17 counterexamples)
[07/18 16:11:27]  Generator returned sat in 0.884281 secs.
[07/18 16:11:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:27]  Improved number of small numbers from 40 to 99 out of a max of 99
[07/18 16:11:27]  Verifer returned sat in 0.244246 secs.
[07/18 16:11:27]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2459.701172    0.097412 -2601.761475  4809.922607   0.000000           0.000000  142.060303      100.011719
1 -2459.701172    0.048096 -2559.712891  4809.922607   0.000000           0.000000  100.011719        0.011719
2 -2459.700928  100.011963 -2459.712891  4809.922607   0.000000           0.000000    0.011963      -99.988037
3 -2059.700928  400.011963 -2287.749268  4809.922607   0.011963           0.000000  228.036377      200.000000
4 -1973.725098  314.012207 -2173.713135  4809.922607   0.011963           0.011963  199.976074      185.975830
5 -1859.688965  314.012207 -2109.706787  4809.922607   0.023926           0.011963  249.993896      200.000000
6 -1759.676758  350.006104 -1973.737061  4809.922607   0.036133           0.023926  214.024170      200.000000
7 -1659.688721  314.012207 -1873.737061  4809.922607   0.036133           0.036133  214.012207      199.988037
8 -1559.688721  314.012207 -1859.712891  4809.922607   0.036133           0.036133  299.988037      199.988037
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:11:27]  --------------------------------------------------------------------------------
[07/18 16:11:27]  Iteration: 19 (0 solution, 18 counterexamples)
[07/18 16:11:28]  Generator returned sat in 0.081269 secs.
[07/18 16:11:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:28]  Improved number of small numbers from 67 to 99 out of a max of 99
[07/18 16:11:28]  Verifer returned sat in 0.178724 secs.
[07/18 16:11:28]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2459.701416    0.097412 -2601.267578  4809.922363   0.000000           0.000000  141.566162      100.011475
1 -2459.701416    0.047852 -2559.712891  4809.922363   0.000000           0.000000  100.011475        0.011475
2 -2459.218994  100.493896 -2459.224609  4809.922363   0.000000           0.000000    0.005615      -99.506104
3 -2059.706787  399.517822 -2287.749512  4809.922363   0.006104           0.000000  228.036621      200.000000
4 -1973.725342  314.018066 -2173.725098  4809.922363   0.006104           0.006104  199.993652      185.981445
5 -1859.700928  314.018066 -2109.706787  4809.922363   0.011963           0.006104  249.993896      200.000000
6 -1759.677002  350.017822 -1973.984131  4809.922363   0.035889           0.011963  214.271240      200.000000
7 -1659.682861  314.265381 -1873.984131  4809.922363   0.035889           0.035889  214.265381      199.994141
8 -1559.682861  314.265381 -1859.712891  4809.922363   0.035889           0.035889  299.994141      199.994141
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:11:28]  --------------------------------------------------------------------------------
[07/18 16:11:28]  Iteration: 20 (0 solution, 19 counterexamples)
[07/18 16:11:29]  Generator returned sat in 0.271842 secs.
[07/18 16:11:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:29]  Improved gap from 0 to 79.6875
[07/18 16:11:29]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/18 16:11:29]  Verifer returned sat in 0.296371 secs.
[07/18 16:11:29]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2477.794434    0.097412 -2477.794434  4628.004150        0.0                0.0    0.000000      -99.999756
1 -2377.794434  100.000000 -2377.794678  4628.004150        0.0                0.0    0.000244      -99.999756
2 -1977.843262  399.951416 -2277.794434  4628.004150        0.0                0.0  299.951172      199.951416
3 -1977.843262   79.735840 -2077.794678  4628.004150        0.0                0.0   99.951416       99.951416
4 -1977.843262   79.735840 -1978.683350  4628.004150        0.0                0.0    0.840088       -0.048584
5 -1898.947510   79.735840 -1977.794434  4648.316406        0.0                0.0   78.846924       -0.840576
6 -1898.058594   79.735840 -1898.106934  4668.628906        0.0                0.0    0.048340      -79.639160
7 -1818.371094   79.735840 -1818.419434  4688.941406        0.0                0.0    0.048340      -79.639160
8 -1738.683594   79.735840 -1738.731934  4688.941650        0.0                0.0    0.048340      -99.951416
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:11:29]  --------------------------------------------------------------------------------
[07/18 16:11:29]  Iteration: 21 (0 solution, 20 counterexamples)
[07/18 16:11:30]  Generator returned sat in 0.398238 secs.
[07/18 16:11:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:30]  Improved gap from 1/8192 to 4.6875
[07/18 16:11:30]  Improved number of small numbers from 64 to 72 out of a max of 100
[07/18 16:11:30]  Verifer returned sat in 0.534332 secs.
[07/18 16:11:30]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2477.794434    0.097168 -2477.794678  4628.003906   0.000000           0.000000    0.000244      -99.999756
1 -2377.794678  100.000000 -2377.794678  4628.003906   0.000000           0.000000    0.000000     -100.000000
2 -2077.794434  300.000244 -2277.794678  4628.003906   0.000000           0.000000  200.000244      100.000244
3 -2077.794434  200.000081 -2077.794678  4628.003906   0.000000           0.000000    0.000244        0.000244
4 -1777.794556  300.000122 -1977.794922  4628.003906   0.000122           0.000000  200.000244      200.000000
5 -1777.794556    1.500000 -1977.794678  4628.003906   0.000122           0.000122  200.000000      100.000000
6 -1777.794556    2.250000 -1782.482178  4628.003906   0.000122           0.000122    4.687500        0.000000
7 -1777.794556    3.375000 -1777.794678  4722.941650   0.000122           0.000122    0.000000       -5.062256
8 -1772.732056    5.062500 -1772.732422  4722.941650   0.000122           0.000122    0.000244      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:31]  --------------------------------------------------------------------------------
[07/18 16:11:31]  Iteration: 22 (0 solution, 21 counterexamples)
[07/18 16:11:31]  Generator returned sat in 0.212333 secs.
[07/18 16:11:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:32]  Improved gap from 27/8 to 3.125
[07/18 16:11:32]  Improved number of small numbers from 59 to 100 out of a max of 100
[07/18 16:11:32]  Verifer returned sat in 0.554444 secs.
[07/18 16:11:32]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2577.697754    0.097168 -2577.745850  4417.804932    0.00000            0.00000    0.048096      -99.951660
1 -2477.746094   99.999756 -2477.746094  4417.804932    0.00000            0.00000    0.000000     -100.000000
2 -2077.794678  399.951416 -2377.745850  4417.804932    0.00000            0.00000  299.951172      199.951416
3 -2077.794678  200.032227 -2177.746094  4417.804932    0.00000            0.00000   99.951416       99.951416
4 -1877.697754  300.048340 -2077.746094  4417.804932    0.04834            0.00000  200.000000      200.000000
5 -1877.697754    1.000000 -1977.746094  4417.804932    0.04834            0.04834  100.000000      100.000000
6 -1877.697754    1.500000 -1880.871094  4417.804932    0.04834            0.04834    3.125000        0.000000
7 -1877.697754    2.250000 -1877.746094  4514.679932    0.04834            0.04834    0.000000       -3.125000
8 -1874.322754    3.375000 -1874.621094  4514.679932    0.04834            0.04834    0.250000      -99.750000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:32]  --------------------------------------------------------------------------------
[07/18 16:11:32]  Iteration: 23 (0 solution, 22 counterexamples)
[07/18 16:11:33]  Generator returned sat in 0.268495 secs.
[07/18 16:11:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:33]  Improved gap from 0 to 0
[07/18 16:11:34]  Improved number of small numbers from 67 to 84 out of a max of 100
[07/18 16:11:34]  Verifer returned sat in 0.743716 secs.
[07/18 16:11:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2577.792236    0.096924 -2577.793213  4417.804932    0.00000            0.00000    0.000977      -99.998809
1 -2477.793213  100.000000 -2477.793213  4417.804932    0.00000            0.00000    0.000000      -99.999785
2 -2077.794678  399.998535 -2344.463623  4417.804932    0.00000            0.00000  266.668945      199.998750
3 -2077.794678  266.667500 -2277.793428  4417.804932    0.00000            0.00000  199.998750       99.998750
4 -1877.792178  400.001250 -2117.770752  4417.804932    0.00125            0.00000  239.977324      200.000000
5 -1877.792178    0.010000 -1977.793457  4417.804932    0.00125            0.00125  100.000029      100.000000
6 -1877.792178    0.015000 -1877.794678  4417.804932    0.00125            0.00125    0.001250        0.000000
7 -1877.770928    0.022500 -1877.793428  4517.783682    0.00125            0.00125    0.021250        0.000000
8 -1877.758428    0.033750 -1877.771973  4517.783691    0.00125            0.00125    0.012295      -99.987490
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:34]  --------------------------------------------------------------------------------
[07/18 16:11:34]  Iteration: 24 (0 solution, 23 counterexamples)
[07/18 16:11:35]  Generator returned sat in 1.217665 secs.
[07/18 16:11:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:37]  Improved number of small numbers from 64 to 74 out of a max of 99
[07/18 16:11:37]  Verifer returned sat in 1.737971 secs.
[07/18 16:11:37]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2277.798584    0.096924 -2477.798428  4417.804932    0.00000            0.00000  199.999844       99.999844
1 -2277.798584    0.001465 -2277.799678  4417.804932    0.00000            0.00000    0.001094       -0.000156
2 -1977.797178  300.002500 -2277.798340  4417.804932    0.00125            0.00000  299.999912      200.000000
3 -1977.797178  200.002500 -2077.798428  4417.804932    0.00125            0.00125  100.000000      100.000000
4 -1777.795928  300.001250 -2068.798428  4417.804932    0.00250            0.00125  291.000000      200.000000
5 -1777.795928    0.010000 -1977.798340  4417.804932    0.00250            0.00250  199.999912      100.000000
6 -1777.795928  150.005000 -1809.798428  4417.804932    0.00250            0.00250   32.000000        0.000000
7 -1600.793428  209.002500 -1677.798428  4417.804932    0.00250            0.00250   77.002500       77.002500
8 -1377.794678  300.001250 -1677.798340  4417.804932    0.00375            0.00250  299.999912      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=2.[0m
[07/18 16:11:37]  --------------------------------------------------------------------------------
[07/18 16:11:37]  Iteration: 25 (0 solution, 24 counterexamples)
[07/18 16:11:40]  Generator returned sat in 2.173355 secs.
[07/18 16:11:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:11:40]  Improved gap from 3/8192 to 100
[07/18 16:11:40]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/18 16:11:40]  Verifer returned sat in 0.328017 secs.
[07/18 16:11:40]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t   losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2177.748779    0.096680 -2177.797119  4518.280518    0.000000           0.000000    0.048340         0.04834
1 -2177.748779    0.023926 -2177.797119  4518.280518    0.000000           0.000000    0.048340       -99.95166
2 -1977.797119  200.000000 -2077.797119  4518.280518    0.000000           0.000000  100.000000         0.00000
3 -1677.772949  400.024170 -1877.797119  4518.280518    0.024170           0.000000  200.000000       200.00000
4 -1577.272949  300.500000 -1777.797119  4518.280518    0.524170           0.024170  200.000000       200.00000
5 -1376.772949  400.500000 -1728.035156  4518.280518  101.024170           0.524170  250.238037       200.00000
6 -1276.749023  350.261963 -1577.797119  4518.280518  101.048096         101.024170  200.000000       200.00000
7 -1176.249023  300.500000 -1477.797119  4518.280518  101.548096         101.048096  200.000000       200.00000
8 -1075.749023  300.500000 -1477.797119  4518.280518  102.048096         101.548096  300.000000       200.00000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, measured_loss_rate=5.[0m
[07/18 16:11:41]  --------------------------------------------------------------------------------
[07/18 16:11:41]  Iteration: 26 (0 solution, 25 counterexamples)
[07/18 16:11:42]  Generator returned sat in 0.707758 secs.
[07/18 16:11:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:11:42]  Improved gap from 0 to 14.0625
[07/18 16:11:42]  Improved number of small numbers from 77 to 100 out of a max of 100
[07/18 16:11:42]  Verifer returned sat in 0.703252 secs.
[07/18 16:11:42]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2177.796875    0.096680 -2177.797119  4475.328613        0.0                0.0    0.000244        0.000244
1 -2177.749023    0.048096 -2177.797119  4475.328613        0.0                0.0    0.048096      -99.951904
2 -1977.797119  200.000000 -2077.796875  4475.328613        0.0                0.0   99.999756        0.000000
3 -1720.796875  357.000000 -1900.845215  4475.328613        0.0                0.0  180.048340      157.000244
4 -1720.796875  180.000000 -1812.248779  4475.328613        0.0                0.0   91.451904       57.000244
5 -1720.748779   91.500000 -1734.811523  4518.280273        0.0                0.0   14.062744        0.000000
6 -1687.561523   47.250000 -1712.734375  4585.093018        0.0                0.0   25.172852        0.000000
7 -1687.561523   25.125000 -1687.561523  4671.030518        0.0                0.0    0.000000      -14.062500
8 -1673.499023   14.062500 -1673.499023  4671.030518        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:11:43]  --------------------------------------------------------------------------------
[07/18 16:11:43]  Iteration: 27 (0 solution, 26 counterexamples)
[07/18 16:11:43]  Generator returned sat in 0.179610 secs.
[07/18 16:11:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:11:44]  Improved gap from 225/16 to 15.625
[07/18 16:11:44]  Improved number of small numbers from 50 to 100 out of a max of 100
[07/18 16:11:44]  Verifer returned sat in 1.087887 secs.
[07/18 16:11:44]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2222.699707    0.096436 -2522.699463  4516.732178        0.0                0.0  299.999756      199.999756
1 -2122.747803  399.951660 -2422.699463  4516.732178        0.0                0.0  299.951660      199.951660
2 -2022.747559  399.951904 -2310.747803  4516.732178        0.0                0.0  288.000244      199.951904
3 -1922.747803  388.000000 -2122.699707  4516.732178        0.0                0.0  199.951904      199.951660
4 -1922.747803  196.000000 -2022.699707  4516.732178        0.0                0.0   99.951904       99.951660
5 -1922.699707  100.000000 -1938.324463  4516.732178        0.0                0.0   15.624756       -0.000244
6 -1886.324463   52.000000 -1914.372803  4580.357178        0.0                0.0   28.048340        0.000000
7 -1886.324463   28.000000 -1886.324463  4664.732178        0.0                0.0    0.000000      -15.625000
8 -1870.324463   16.000000 -1870.324707  4748.732178        0.0                0.0    0.000244      -15.625000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:11:45]  --------------------------------------------------------------------------------
[07/18 16:11:45]  Iteration: 28 (0 solution, 27 counterexamples)
[07/18 16:11:47]  Generator returned sat in 2.108358 secs.
[07/18 16:11:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/18 16:11:48]  Improved gap from 0 to 1.5625
[07/18 16:11:48]  Improved number of small numbers from 62 to 100 out of a max of 100
[07/18 16:11:48]  Verifer returned sat in 0.507406 secs.
[07/18 16:11:48]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2422.699463    0.096436 -2422.747559  4516.731934    0.00000            0.00000    0.048096        0.000000
1 -2322.699463  100.048096 -2422.699463  4516.731934    0.00000            0.00000  100.000000        0.000000
2 -2022.747803  399.951660 -2322.699463  4516.731934    0.00000            0.00000  299.951660      199.951660
3 -2022.747803  200.032227 -2122.699463  4516.731934    0.00000            0.00000   99.951660       99.951660
4 -1822.651123  300.048340 -2022.699707  4516.731934    0.04834            0.00000  200.000244      200.000000
5 -1822.651123    0.500000 -1924.261963  4516.731934    0.04834            0.04834  101.562500      100.000000
6 -1822.651123    0.750000 -1824.262207  4516.731934    0.04834            0.04834    1.562744        0.000000
7 -1822.651123    1.125000 -1822.699463  4615.044678    0.04834            0.04834    0.000000       -1.687256
8 -1820.963623    1.687500 -1821.012207  4713.482178    0.04834            0.04834    0.000244       -1.562256
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:48]  --------------------------------------------------------------------------------
[07/18 16:11:48]  Iteration: 29 (0 solution, 28 counterexamples)
[07/18 16:11:50]  Generator returned sat in 1.503645 secs.
[07/18 16:11:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:11:50]  Improved gap from 395/16384 to 68.75
[07/18 16:11:51]  Improved number of small numbers from 84 to 100 out of a max of 100
[07/18 16:11:51]  Verifer returned sat in 0.552958 secs.
[07/18 16:11:51]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2259.319336    0.096436 -2342.915771  4436.947998        0.0                0.0   83.596436       83.596436
1 -2259.319336   83.548340 -2259.367432  4436.947998        0.0                0.0    0.048096      -16.403564
2 -2174.165771   85.201660 -2242.915771  4468.197998        0.0                0.0   68.750000        0.000000
3 -1937.791016  305.124756 -2074.165771  4468.197998        0.0                0.0  136.374756      136.374756
4 -1937.790771  136.375000 -1976.617432  4468.197998        0.0                0.0   38.826660       36.375000
5 -1833.242432  143.375000 -1971.165771  4468.197998        0.0                0.0  137.923340       40.923340
6 -1833.242432  137.875000 -1874.165771  4499.447998        0.0                0.0   40.923340      -27.826660
7 -1772.165771  102.000000 -1805.415771  4530.697998        0.0                0.0   33.250000      -35.500000
8 -1717.814941   87.600830 -1736.665771  4530.698242        0.0                0.0   18.850830      -81.148926
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:11:51]  --------------------------------------------------------------------------------
[07/18 16:11:51]  Iteration: 30 (0 solution, 29 counterexamples)
[07/18 16:11:53]  Generator returned sat in 1.971895 secs.
[07/18 16:11:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:54]  Improved gap from 7797/16384 to 12.5
[07/18 16:11:55]  Improved number of small numbers from 56 to 74 out of a max of 100
[07/18 16:11:55]  Verifer returned sat in 1.428954 secs.
[07/18 16:11:55]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4420.158203    0.096191 -4420.190430  4307.475586        0.0                0.0    0.032227        0.016178
1 -4420.158203    0.016113 -4420.174316  4394.975460        0.0                0.0    0.016113      -12.483948
2 -4107.690430  312.483887 -4407.674255  4394.975460        0.0                0.0  299.983826      199.983826
3 -4007.690384  399.983871 -4307.674072  4394.975460        0.0                0.0  299.983688      199.983871
4 -4007.690384  200.491935 -4108.452393  4394.975460        0.0                0.0  100.762008       99.983871
5 -4007.690384  100.745968 -4020.190384  4394.991455        0.0                0.0   12.500000       -0.000134
6 -3969.317400   50.872984 -3969.333529  4444.134734        0.0                0.0    0.016129      -12.483871
7 -3943.397038   25.936492 -3956.833529  4530.698242        0.0                0.0   13.436492        0.000000
8 -3943.365284   13.468246 -3943.396973  4530.698242        0.0                0.0    0.031689      -99.968246
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:11:55]  --------------------------------------------------------------------------------
[07/18 16:11:55]  Iteration: 31 (0 solution, 30 counterexamples)
[07/18 16:11:58]  Generator returned sat in 2.950798 secs.
[07/18 16:11:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:11:59]  Improved gap from 0 to 0
[07/18 16:11:59]  Improved number of small numbers from 63 to 79 out of a max of 100
[07/18 16:11:59]  Verifer returned sat in 0.676601 secs.
[07/18 16:11:59]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4420.158447    0.096191 -4420.190430  4307.475586     0.0000             0.0000    0.031982        0.015934
1 -4420.158447    0.002500 -4420.174316  4394.975586     0.0000             0.0000    0.015869      -12.484066
2 -4107.676758  312.497559 -4407.176881  4394.975586     0.0000             0.0000  299.500123      199.997623
3 -4107.674381  299.502500 -4207.674381  4394.975586     0.0000             0.0000  100.000000      100.000000
4 -3907.671881  300.002500 -4107.674561  4394.975586     0.0025             0.0000  200.000179      200.000000
5 -3907.671881    0.010000 -4107.674316  4394.975586     0.0025             0.0025  199.999935      100.000000
6 -3907.671881    0.510000 -3907.676881  4394.975586     0.0025             0.0025    0.002500        0.000000
7 -3906.664381    1.010000 -3906.669381  4493.968018     0.0025             0.0025    0.002500       -0.000068
8 -3905.156881    1.510000 -3906.666748  4493.968018     0.0025             0.0025    1.507367      -98.492568
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:11:59]  --------------------------------------------------------------------------------
[07/18 16:11:59]  Iteration: 32 (0 solution, 31 counterexamples)
[07/18 16:12:04]  Generator returned sat in 4.117546 secs.
[07/18 16:12:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:04]  Improved gap from 1851/4096 to 39.0625
[07/18 16:12:04]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/18 16:12:04]  Verifer returned sat in 0.418517 secs.
[07/18 16:12:04]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5047.217285    0.095947 -5282.106445  4407.823975   0.000000           0.000000  234.889160      134.889160
1 -5047.217285    0.047852 -5082.106689  4407.823975   0.000000           0.000000   34.889404       34.889160
2 -5047.217285    0.047852 -5047.265137  4433.920166   0.000000           0.000000    0.047852      -39.014648
3 -4708.250732  339.014404 -4947.669189  4433.920166   0.000000           0.000000  239.418457      199.951904
4 -4608.154785  339.514404 -4808.202881  4433.920166   0.047852           0.000000  200.000244      200.000000
5 -4608.154785  138.451904 -4708.202637  4433.920166   0.047852           0.047852  100.000000      100.000000
6 -4569.202881  138.951904 -4707.702637  4433.920166   0.047852           0.047852  138.451904       38.951904
7 -4568.202881  139.451904 -4608.202637  4493.968262   0.047852           0.047852   39.951904        0.000000
8 -4468.202881  139.951904 -4568.250732  4493.968262   0.047852           0.047852  100.000000        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:05]  --------------------------------------------------------------------------------
[07/18 16:12:05]  Iteration: 33 (0 solution, 32 counterexamples)
[07/18 16:12:06]  Generator returned sat in 0.956956 secs.
[07/18 16:12:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:06]  Improved gap from 393/16384 to 3.125
[07/18 16:12:07]  Improved number of small numbers from 45 to 100 out of a max of 100
[07/18 16:12:07]  Verifer returned sat in 0.383525 secs.
[07/18 16:12:07]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4848.750732    0.095947 -5051.875488  4177.593018   0.000000           0.000000  203.124756      103.125000
1 -4848.750732    0.048096 -4851.875732  4177.593018   0.000000           0.000000    3.125000        3.125000
2 -4848.750732    0.048096 -4851.875732  4274.468018   0.000000           0.000000    3.125000        0.000000
3 -4548.798584  303.077148 -4752.279785  4274.468018   0.000000           0.000000  203.481201      199.952148
4 -4448.702637  303.577148 -4648.750732  4274.468018   0.048096           0.000000  200.000000      200.000000
5 -4448.702637    2.000000 -4648.750732  4274.468018   0.048096           0.048096  200.000000      100.000000
6 -4448.702637    2.500000 -4448.798828  4274.468018   0.048096           0.048096    0.048096        0.000000
7 -4445.750732    3.000000 -4445.846680  4368.063965   0.048096           0.048096    0.047852       -3.452148
8 -4442.298584    3.500000 -4442.346680  4368.064209   0.048096           0.048096    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:07]  --------------------------------------------------------------------------------
[07/18 16:12:07]  Iteration: 34 (0 solution, 33 counterexamples)
[07/18 16:12:08]  Generator returned sat in 0.329489 secs.
[07/18 16:12:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:08]  Improved gap from 3 to 1.5625
[07/18 16:12:08]  Improved number of small numbers from 66 to 100 out of a max of 100
[07/18 16:12:08]  Verifer returned sat in 0.445831 secs.
[07/18 16:12:08]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -5048.750732    0.095947 -5148.750732  4274.468018    0.00000            0.00000  100.000000        0.000000
1 -5048.750732    0.048096 -5048.750732  4274.468018    0.00000            0.00000    0.000000     -100.000000
2 -4848.750977  199.999756 -4848.750977  4274.468018    0.00000            0.00000    0.000000       -0.000244
3 -4549.226807  299.524170 -4748.750732  4274.468018    0.00000            0.00000  199.523926      199.523926
4 -4448.726562  300.024170 -4648.750977  4274.468018    0.02417            0.00000  200.000244      200.000000
5 -4448.726562    1.500000 -4548.750977  4274.468018    0.02417            0.02417  100.000244      100.000000
6 -4448.726562    2.000000 -4448.774902  4274.468018    0.02417            0.02417    0.024170        0.000000
7 -4446.250732    2.500000 -4448.750732  4371.991943    0.02417            0.02417    2.475830       -0.000244
8 -4445.726562    3.000000 -4446.274658  4371.991943    0.02417            0.02417    0.523926      -99.476074
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:08]  --------------------------------------------------------------------------------
[07/18 16:12:08]  Iteration: 35 (0 solution, 34 counterexamples)
[07/18 16:12:09]  Generator returned sat in 0.599296 secs.
[07/18 16:12:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:10]  Improved gap from 2 to 1.5625
[07/18 16:12:10]  Improved number of small numbers from 45 to 100 out of a max of 100
[07/18 16:12:10]  Verifer returned sat in 0.464357 secs.
[07/18 16:12:10]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4984.539307    0.095947 -5184.539307  4175.554199   0.000000           0.000000  200.000000      100.000000
1 -4984.539307    0.047852 -4984.539307  4175.554199   0.000000           0.000000    0.000000        0.000000
2 -4884.539307  100.000000 -4884.539307  4175.554199   0.000000           0.000000    0.000000        0.000000
3 -4585.015381  299.523926 -4784.539307  4175.554199   0.000000           0.000000  199.523926      199.523926
4 -4484.515381  300.023926 -4684.539307  4175.554199   0.023926           0.000000  200.000000      200.000000
5 -4484.515381    0.500000 -4584.539551  4175.554199   0.023926           0.023926  100.000244      100.000000
6 -4484.515381    1.000000 -4486.101807  4175.554199   0.023926           0.023926    1.562500        0.000000
7 -4484.515381    1.500000 -4484.539307  4273.554443   0.023926           0.023926    0.000000       -1.999756
8 -4482.515381    2.000000 -4482.539551  4371.991699   0.023926           0.023926    0.000244       -1.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:10]  --------------------------------------------------------------------------------
[07/18 16:12:10]  Iteration: 36 (0 solution, 35 counterexamples)
[07/18 16:12:11]  Generator returned sat in 0.658908 secs.
[07/18 16:12:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:12]  Verifer returned unsat in 0.077210 secs.
[07/18 16:12:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:12]  --------------------------------------------------------------------------------
[07/18 16:12:12]  Iteration: 37 (1 solution, 35 counterexamples)
[07/18 16:12:12]  Generator returned sat in 0.240489 secs.
[07/18 16:12:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:13]  Improved gap from 0 to 39.0625
[07/18 16:12:13]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 16:12:13]  Verifer returned sat in 0.294815 secs.
[07/18 16:12:13]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -4884.563232    0.095947 -5158.467529  4149.482422   0.000000           0.000000  273.904297      173.904297
1 -4884.563232    0.047852 -4958.467529  4149.482422   0.000000           0.000000   73.904297       73.904297
2 -4884.563232   73.856445 -4923.625732  4175.578125   0.000000           0.000000   39.062500        0.000000
3 -4584.611084  339.014648 -4824.030029  4175.578125   0.000000           0.000000  239.418945      199.952148
4 -4484.515381  339.514648 -4684.563232  4175.578125   0.047852           0.000000  200.000000      200.000000
5 -4484.515381  138.952148 -4624.063232  4175.578125   0.047852           0.047852  139.500000      100.000000
6 -4484.515381  139.452148 -4584.563232  4175.578125   0.047852           0.047852  100.000000        0.000000
7 -4444.563232  139.952148 -4484.563232  4235.625977   0.047852           0.047852   39.952148        0.000000
8 -4344.063232  140.452148 -4444.611084  4235.625977   0.047852           0.047852  100.500000        0.500000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:13]  --------------------------------------------------------------------------------
[07/18 16:12:13]  Iteration: 38 (1 solution, 36 counterexamples)
[07/18 16:12:15]  Generator returned sat in 1.415362 secs.
[07/18 16:12:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:15]  Verifer returned unsat in 0.057559 secs.
[07/18 16:12:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:15]  --------------------------------------------------------------------------------
[07/18 16:12:15]  Iteration: 39 (2 solution, 36 counterexamples)
[07/18 16:12:16]  Generator returned sat in 0.197333 secs.
[07/18 16:12:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:16]  Verifer returned unsat in 0.066638 secs.
[07/18 16:12:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:16]  --------------------------------------------------------------------------------
[07/18 16:12:16]  Iteration: 40 (3 solution, 36 counterexamples)
[07/18 16:12:17]  Generator returned sat in 0.164857 secs.
[07/18 16:12:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:17]  Verifer returned unsat in 0.062044 secs.
[07/18 16:12:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:17]  --------------------------------------------------------------------------------
[07/18 16:12:17]  Iteration: 41 (4 solution, 36 counterexamples)
[07/18 16:12:18]  Generator returned sat in 0.463363 secs.
[07/18 16:12:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:18]  Verifer returned unsat in 0.058475 secs.
[07/18 16:12:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:12:18]  --------------------------------------------------------------------------------
[07/18 16:12:18]  Iteration: 42 (5 solution, 36 counterexamples)
[07/18 16:12:23]  Generator returned sat in 4.742619 secs.
[07/18 16:12:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:12:23]  Improved gap from 49/1024 to 100
[07/18 16:12:23]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/18 16:12:23]  Verifer returned sat in 0.306623 secs.
[07/18 16:12:23]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3029.133301    0.095703 -3229.169189  4078.566162   0.000000           0.000000  200.035889           200.0
1 -3029.133301    0.011963 -3155.193115  4078.566162   0.000000           0.000000  126.059814           100.0
2 -3029.133301    0.011963 -3129.133057  4078.566162   0.000000           0.000000   99.999756             0.0
3 -2729.121338  400.011719 -2929.145264  4078.566162   0.011963           0.000000  200.011963           200.0
4 -2629.109375  300.023926 -2842.157227  4078.566162   0.023926           0.011963  213.023926           200.0
5 -2529.097412  313.035889 -2779.127197  4078.566162   0.035889           0.023926  249.993896           200.0
6 -2429.085449  350.005859 -2629.133301  4078.566162   0.047852           0.035889  200.000000           200.0
7 -2329.073486  300.011963 -2529.133301  4078.566162   0.059814           0.047852  200.000000           200.0
8 -2216.049561  313.023926 -2529.133057  4078.566162  13.083740           0.059814  299.999756           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, measured_loss_rate=5.[0m
[07/18 16:12:24]  --------------------------------------------------------------------------------
[07/18 16:12:24]  Iteration: 43 (5 solution, 37 counterexamples)
[07/18 16:12:25]  Generator returned sat in 0.407606 secs.
[07/18 16:12:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:12:25]  Improved gap from 49/1024 to 0
[07/18 16:12:25]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 16:12:25]  Verifer returned sat in 0.232708 secs.
[07/18 16:12:25]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3332.162598    0.095703 -3332.210449  4181.595459        0.0                0.0    0.047852        0.000000
1 -3232.162598  100.047852 -3332.162598  4181.595459        0.0                0.0  100.000000        0.000000
2 -3232.162598   99.952148 -3232.162598  4181.595459        0.0                0.0    0.000000     -100.000000
3 -2832.210449  399.952148 -3032.162598  4181.595459        0.0                0.0  199.952148      199.952148
4 -2832.210449    1.500000 -2932.162598  4181.595459        0.0                0.0   99.952148       99.952148
5 -2832.210449    1.500000 -2832.258301  4181.595459        0.0                0.0    0.047852       -0.047852
6 -2830.758301    1.500000 -2830.806152  4278.786865        0.0                0.0    0.047852       -1.404297
7 -2829.306152    1.500000 -2829.354004  4378.739014        0.0                0.0    0.047852        0.000000
8 -2827.854004    1.500000 -2829.306152  4378.739014        0.0                0.0    1.452148      -98.547852
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:12:25]  --------------------------------------------------------------------------------
[07/18 16:12:25]  Iteration: 44 (5 solution, 38 counterexamples)
[07/18 16:12:28]  Generator returned sat in 1.875693 secs.
[07/18 16:12:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:28]  Verifer returned unsat in 0.071711 secs.
[07/18 16:12:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:28]  --------------------------------------------------------------------------------
[07/18 16:12:28]  Iteration: 45 (6 solution, 38 counterexamples)
[07/18 16:12:29]  Generator returned sat in 0.286899 secs.
[07/18 16:12:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:29]  Verifer returned unsat in 0.054545 secs.
[07/18 16:12:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:29]  --------------------------------------------------------------------------------
[07/18 16:12:29]  Iteration: 46 (7 solution, 38 counterexamples)
[07/18 16:12:29]  Generator returned sat in 0.276463 secs.
[07/18 16:12:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:30]  Verifer returned unsat in 0.063221 secs.
[07/18 16:12:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:30]  --------------------------------------------------------------------------------
[07/18 16:12:30]  Iteration: 47 (8 solution, 38 counterexamples)
[07/18 16:12:30]  Generator returned sat in 0.207664 secs.
[07/18 16:12:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:30]  Verifer returned unsat in 0.046433 secs.
[07/18 16:12:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:30]  --------------------------------------------------------------------------------
[07/18 16:12:30]  Iteration: 48 (9 solution, 38 counterexamples)
[07/18 16:12:31]  Generator returned sat in 0.305986 secs.
[07/18 16:12:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:32]  Improved gap from 391/8192 to 39.0625
[07/18 16:12:32]  Improved number of small numbers from 24 to 100 out of a max of 100
[07/18 16:12:32]  Verifer returned sat in 0.584431 secs.
[07/18 16:12:32]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3226.079346    0.095459 -3226.103027  4457.575439   0.000000           0.000000    0.023682      -99.976318
1 -3026.055420  200.047607 -3026.103027  4457.575439   0.000000           0.000000    0.047607        0.047607
2 -3026.055420    0.023926 -3026.103027  4492.623291   0.000000           0.000000    0.047607      -64.904541
3 -2689.016846  337.086182 -2900.213379  4492.623291   0.000000           0.000000  211.196533      172.134033
4 -2561.127197  339.086182 -2761.150879  4492.623291   0.023682           0.000000  200.000000      200.000000
5 -2561.127197  133.976074 -2661.150879  4492.623291   0.023682           0.023682  100.000000      100.000000
6 -2525.151123  135.976074 -2661.150879  4492.623291   0.023682           0.023682  135.976074       35.976074
7 -2523.151123  137.976074 -2561.150879  4552.646973   0.023682           0.023682   37.976074       -2.000244
8 -2421.151123  139.976074 -2521.174561  4552.647217   0.023682           0.023682   99.999756        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:32]  --------------------------------------------------------------------------------
[07/18 16:12:32]  Iteration: 49 (9 solution, 39 counterexamples)
[07/18 16:12:33]  Generator returned sat in 0.436087 secs.
[07/18 16:12:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:34]  Improved gap from 163743/4096 to 39.0625
[07/18 16:12:34]  Improved number of small numbers from 57 to 100 out of a max of 100
[07/18 16:12:34]  Verifer returned sat in 0.564186 secs.
[07/18 16:12:34]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -2831.616943    0.095215 -2999.521729  4376.589600   0.000000           0.000000  167.904785      167.904785
1 -2831.616943  167.904541 -2899.521729  4376.589600   0.000000           0.000000   67.904785       67.904785
2 -2831.616943    0.047607 -2899.521729  4408.684570   0.000000           0.000000   67.904785       -0.000244
3 -2531.664551  367.857178 -2731.616699  4408.684570   0.000000           0.000000  199.952148      199.952148
4 -2361.759521  369.857178 -2631.616943  4408.684570  69.857178           0.000000  200.000244      200.000000
5 -2361.759521  135.952393 -2569.616943  4408.684570  69.857178          69.857178  138.000244      100.000000
6 -2361.759521  137.952393 -2531.616699  4408.684570  69.857178          69.857178  100.000000        0.000000
7 -2321.807129  139.952393 -2430.726807  4468.732178  69.857178          69.857178   39.062500        0.000000
8 -2218.917236  141.952393 -2391.664307  4468.732178  69.857178          69.857178  102.889893        2.889893
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=1.[0m
[07/18 16:12:34]  --------------------------------------------------------------------------------
[07/18 16:12:34]  Iteration: 50 (9 solution, 40 counterexamples)
[07/18 16:12:37]  Generator returned sat in 1.825814 secs.
[07/18 16:12:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:37]  Improved gap from 195/8192 to 1.5625
[07/18 16:12:37]  Improved number of small numbers from 36 to 100 out of a max of 100
[07/18 16:12:37]  Verifer returned sat in 0.395454 secs.
[07/18 16:12:37]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3116.127930    0.094971 -3116.175537  4310.294434   0.000000           0.000000    0.047607        0.047607
1 -3116.127930    0.023926 -3116.127930  4408.684326   0.000000           0.000000    0.000000       -1.562500
2 -3114.541748    1.586182 -3114.565430  4408.684570   0.000000           0.000000    0.023682      -99.976074
3 -2714.541748  400.023682 -3014.565674  4408.684570   0.023926           0.000000  300.000000      200.000000
4 -2714.541748   50.804932 -2814.565674  4408.684570   0.023926           0.023926  100.000000      100.000000
5 -2714.541748    2.000000 -2716.589111  4408.684570   0.023926           0.023926    2.023438        0.000000
6 -2714.541748    2.000000 -2714.565674  4507.121826   0.023926           0.023926    0.000000       -1.562744
7 -2712.541748    2.000000 -2712.589355  4604.708252   0.023926           0.023926    0.023682       -1.976318
8 -2710.565430    2.000000 -2710.589355  4604.708496   0.023926           0.023926    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:12:37]  --------------------------------------------------------------------------------
[07/18 16:12:37]  Iteration: 51 (9 solution, 41 counterexamples)
[07/18 16:12:39]  Generator returned sat in 0.961077 secs.
[07/18 16:12:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:39]  Improved gap from 0 to 0
[07/18 16:12:39]  Improved number of small numbers from 65 to 100 out of a max of 100
[07/18 16:12:39]  Verifer returned sat in 0.364716 secs.
[07/18 16:12:39]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -3214.565674    0.094971 -3214.613281  4408.684570        0.0                0.0    0.047607        0.000000
1 -3214.565674    0.023682 -3214.565674  4408.684570        0.0                0.0    0.000000     -100.000000
2 -3114.541748  100.023926 -3114.565674  4408.684570        0.0                0.0    0.023926      -99.976074
3 -2714.589355  399.976318 -3014.565674  4408.684570        0.0                0.0  299.976318      199.976318
4 -2714.589355    1.000000 -2814.565674  4408.684570        0.0                0.0   99.976318       99.976318
5 -2714.589355    1.000000 -2714.613037  4408.708252        0.0                0.0    0.023682        0.000000
6 -2713.613037    1.000000 -2714.589355  4507.731934        0.0                0.0    0.976318        0.000000
7 -2713.589355    1.000000 -2713.613037  4607.708252        0.0                0.0    0.023682        0.000000
8 -2712.613037    1.000000 -2712.613281  4607.708496        0.0                0.0    0.000244      -99.023438
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:12:40]  --------------------------------------------------------------------------------
[07/18 16:12:40]  Iteration: 52 (9 solution, 42 counterexamples)
[07/18 16:12:41]  Generator returned sat in 1.006490 secs.
[07/18 16:12:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:41]  Verifer returned unsat in 0.060754 secs.
[07/18 16:12:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:41]  --------------------------------------------------------------------------------
[07/18 16:12:41]  Iteration: 53 (10 solution, 42 counterexamples)
[07/18 16:12:44]  Generator returned sat in 2.417142 secs.
[07/18 16:12:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:44]  Verifer returned unsat in 0.056970 secs.
[07/18 16:12:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:44]  --------------------------------------------------------------------------------
[07/18 16:12:44]  Iteration: 54 (11 solution, 42 counterexamples)
[07/18 16:12:46]  Generator returned sat in 0.729761 secs.
[07/18 16:12:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:46]  Verifer returned unsat in 0.048743 secs.
[07/18 16:12:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:12:46]  --------------------------------------------------------------------------------
[07/18 16:12:46]  Iteration: 55 (12 solution, 42 counterexamples)
[07/18 16:12:47]  Generator returned sat in 0.397008 secs.
[07/18 16:12:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:47]  Verifer returned unsat in 0.044250 secs.
[07/18 16:12:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:47]  --------------------------------------------------------------------------------
[07/18 16:12:47]  Iteration: 56 (13 solution, 42 counterexamples)
[07/18 16:12:51]  Generator returned sat in 3.486058 secs.
[07/18 16:12:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:52]  Improved gap from 0 to 14.0625
[07/18 16:12:52]  Improved number of small numbers from 45 to 65 out of a max of 100
[07/18 16:12:52]  Verifer returned sat in 1.201452 secs.
[07/18 16:12:52]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1282.975586    0.094971 -1382.975586  4408.684570        0.0                0.0  100.000000        0.000103
1 -1282.975586    0.023682 -1282.975586  4408.684570        0.0                0.0    0.000000      -99.999897
2  -882.987549  399.988037 -1182.975689  4408.684570        0.0                0.0  299.988140      199.988140
3  -782.987530  399.988159  -983.981689  4408.684570        0.0                0.0  200.994160      199.988159
4  -782.987530  200.994080  -884.496338  4408.684570        0.0                0.0  101.508808       99.988159
5  -782.987530  101.497040  -797.050030  4408.696289        0.0                0.0   14.062500       -0.000122
6  -745.301510   51.748520  -772.187744  4471.010391        0.0                0.0   26.886234        0.000000
7  -745.301510   26.874260  -745.301510  4556.947891        0.0                0.0    0.000000      -14.062500
8  -730.864380   14.437130  -731.239010  4642.885254        0.0                0.0    0.374630      -13.688007
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, measured_loss_rate=0.[0m
[07/18 16:12:53]  --------------------------------------------------------------------------------
[07/18 16:12:53]  Iteration: 57 (13 solution, 43 counterexamples)
[07/18 16:12:57]  Generator returned sat in 3.385743 secs.
[07/18 16:12:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:57]  Verifer returned unsat in 0.071541 secs.
[07/18 16:12:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:57]  --------------------------------------------------------------------------------
[07/18 16:12:57]  Iteration: 58 (14 solution, 43 counterexamples)
[07/18 16:12:58]  Generator returned sat in 0.255860 secs.
[07/18 16:12:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:58]  Verifer returned unsat in 0.057347 secs.
[07/18 16:12:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:12:58]  --------------------------------------------------------------------------------
[07/18 16:12:58]  Iteration: 59 (15 solution, 43 counterexamples)
[07/18 16:12:59]  Generator returned sat in 0.978945 secs.
[07/18 16:12:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:13:00]  Improved gap from 0 to 1.5625
[07/18 16:13:00]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/18 16:13:00]  Verifer returned sat in 0.204362 secs.
[07/18 16:13:00]  Counter example: 
[93m   arrival_0,t    cwnd_0,t  service_0,t     wasted_t  losts_0,t  loss_detected_0,t     queue_t  bottle_queue_t
0 -1282.975586    0.094971 -1383.022949  4408.684570        0.0                0.0  100.047363        0.047363
1 -1282.975586    0.047363 -1283.022949  4408.684570        0.0                0.0    0.047363      -99.952637
2 -1183.022949  100.000000 -1183.022949  4408.684570        0.0                0.0    0.000000     -100.000000
3  -883.022949  300.000000  -983.022949  4408.684570        0.0                0.0  100.000000      100.000000
4  -883.022949    2.000000  -884.585449  4408.684570        0.0                0.0    1.562500        0.000000
5  -882.585449    2.000000  -883.022949  4507.122070        0.0                0.0    0.437500       -1.125000
6  -881.022949    2.000000  -881.460449  4605.559570        0.0                0.0    0.437500       -1.125000
7  -879.460449    2.000000  -879.507812  4703.169434        0.0                0.0    0.047363       -1.952637
8  -877.507812    2.000000  -877.507812  4703.169434        0.0                0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, measured_loss_rate=0.[0m
[07/18 16:13:00]  --------------------------------------------------------------------------------
[07/18 16:13:00]  Iteration: 60 (15 solution, 44 counterexamples)
[07/18 16:13:02]  Generator returned sat in 1.904139 secs.
[07/18 16:13:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:03]  Verifer returned unsat in 0.076557 secs.
[07/18 16:13:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:03]  --------------------------------------------------------------------------------
[07/18 16:13:03]  Iteration: 61 (16 solution, 44 counterexamples)
[07/18 16:13:04]  Generator returned sat in 0.317214 secs.
[07/18 16:13:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:04]  Verifer returned unsat in 0.061010 secs.
[07/18 16:13:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:04]  --------------------------------------------------------------------------------
[07/18 16:13:04]  Iteration: 62 (17 solution, 44 counterexamples)
[07/18 16:13:05]  Generator returned sat in 0.302822 secs.
[07/18 16:13:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:05]  Verifer returned unsat in 0.068541 secs.
[07/18 16:13:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:05]  --------------------------------------------------------------------------------
[07/18 16:13:05]  Iteration: 63 (18 solution, 44 counterexamples)
[07/18 16:13:06]  Generator returned sat in 0.268659 secs.
[07/18 16:13:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:06]  Verifer returned unsat in 0.060181 secs.
[07/18 16:13:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:06]  --------------------------------------------------------------------------------
[07/18 16:13:06]  Iteration: 64 (19 solution, 44 counterexamples)
[07/18 16:13:07]  Generator returned sat in 0.882340 secs.
[07/18 16:13:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:07]  Verifer returned unsat in 0.044522 secs.
[07/18 16:13:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:07]  --------------------------------------------------------------------------------
[07/18 16:13:07]  Iteration: 65 (20 solution, 44 counterexamples)
[07/18 16:13:08]  Generator returned unsat in 0.000268 secs.
[07/18 16:13:08]  [96mNo more solutions found[0m
[07/18 16:13:08]  Final solutions:
[07/18 16:13:08]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:13:08]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:13:08]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:13:08]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:13:08]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:13:08]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:13:08]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:08]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:13:08]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:13:08]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:13:08]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/18 16:13:08]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:13:08]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:08]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:08]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:08]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:13:08]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:13:08]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/18 16:13:08]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/18 16:13:08]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/18 16:13:08]  Took 126.734943 secs.
