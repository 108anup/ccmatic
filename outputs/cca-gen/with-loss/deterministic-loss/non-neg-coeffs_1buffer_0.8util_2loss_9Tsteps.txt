[07/26 14:51:47]  --------------------------------------------------------------------------------
[07/26 14:51:47]  Iteration: 1 (0 solution, 0 counterexamples)
[07/26 14:51:47]  Generator returned sat in 0.005819 secs.
[07/26 14:51:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:51:48]  Improved gap from 0 to 100
[07/26 14:51:48]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 14:51:48]  Verifer returned sat in 0.284726 secs.
[07/26 14:51:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0        -1081.1        -1262.0    1262.0      -1081.1       0.1      -1262.0        0.0    180.9           180.9
1        -1081.0        -1162.0    1262.0      -1081.0     181.0      -1162.0        0.0     81.0            81.0
2        -1081.0        -1081.0    1262.0      -1081.0       0.1      -1081.0        0.0      0.0           -19.0
3         -761.9        -1062.0    1262.0       -761.9     319.1      -1062.0        0.1    300.0           200.0
4          -21.7         -904.0    1262.0        -21.7    1040.2       -904.0      640.3    242.0           200.0
5         2334.7         -862.0    1262.0       2334.7    2598.4       -862.0     2896.7    300.0           200.0
6         7671.5         -762.0    1262.0       7671.5    5636.8       -762.0     8133.5    300.0           200.0
7        19247.1         -662.0    1262.0      19247.1   11875.6       -662.0    19609.1    300.0           200.0
8        43184.3         -562.0    1262.0      43184.3   24237.2       -562.0    43446.3    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:51:48]  --------------------------------------------------------------------------------
[07/26 14:51:48]  Iteration: 2 (0 solution, 1 counterexamples)
[07/26 14:51:48]  Generator returned sat in 0.037918 secs.
[07/26 14:51:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:48]  Improved number of small numbers from 98 to 98 out of a max of 99
[07/26 14:51:48]  Verifer returned sat in 0.189436 secs.
[07/26 14:51:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0     41884.2675      33750.790  1261.999756   41884.2675    0.100098    33750.790  7933.4875  199.990          199.99
1     41884.2675      33850.790  1261.999756   41884.2675  199.990000    33850.790  7933.4875   99.990           99.99
2     41884.2675      33950.780  1261.999756   41884.2675   99.987500    33950.780  7933.4875    0.000           -0.01
3     42184.2775      33950.790  1261.999756   42184.2775  300.010000    33950.790  7933.4875  300.000          200.00
4     42484.2875      34050.790  1261.999756   42484.2875  600.010000    34050.790  8133.4975  300.000          200.00
5     42484.2875      34190.781  1261.999756   42484.2875    0.010000    34190.781  8133.4975  160.009          100.00
6     42684.2900      34350.790  1261.999756   42684.2900  360.011500    34350.790  8133.5000  200.000          200.00
7     42684.2900      34450.790  1261.999756   42684.2900    0.010000    34450.790  8133.5000  100.000          100.00
8     43184.3000      34450.790  1261.999756   43184.3000  600.010000    34450.790  8433.5100  300.000          200.00
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:51:49]  --------------------------------------------------------------------------------
[07/26 14:51:49]  Iteration: 3 (0 solution, 2 counterexamples)
[07/26 14:51:49]  Generator returned sat in 0.037152 secs.
[07/26 14:51:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:49]  Improved gap from 0 to 100
[07/26 14:51:50]  Improved number of small numbers from 56 to 58 out of a max of 100
[07/26 14:51:50]  Verifer returned sat in 0.823392 secs.
[07/26 14:51:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41417.570801   33717.453128  1261.999756  41417.570801    0.099854  33717.453128  7700.117549    0.000124      -33.336543
1   41550.907344   33750.789795  1261.999756  41550.907344  133.336667  33750.789795  7700.117549  100.000000        0.000000
2   41750.902344   33950.789795  1261.999756  41750.902344  299.995000  33950.789795  7700.117549   99.995000       99.995000
3   41750.907344   33950.789795  1261.999756  41750.907344  100.000000  33950.789795  7700.117549  100.000000        0.000000
4   42050.912344   34050.789795  1261.999756  42050.912344  400.005000  34050.789795  7700.122549  300.000000      200.000000
5   42050.912344   34190.789795  1261.999756  42050.912344    0.010000  34190.789795  7700.122549  160.000000      100.000000
6   42250.917344   34250.789795  1261.999756  42250.917344  360.005000  34250.789795  7700.127549  300.000000      200.000000
7   42250.917344   34350.789795  1261.999756  42250.917344    0.010000  34350.789795  7700.127549  200.000000      100.000000
8   42500.922344   34450.789795  1261.999756  42500.922344  450.005000  34450.789795  7750.132549  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:51:50]  --------------------------------------------------------------------------------
[07/26 14:51:50]  Iteration: 4 (0 solution, 3 counterexamples)
[07/26 14:51:50]  Generator returned sat in 0.077089 secs.
[07/26 14:51:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:50]  Improved gap from 407/8192 to 100
[07/26 14:51:50]  Improved number of small numbers from 27 to 100 out of a max of 100
[07/26 14:51:50]  Verifer returned sat in 0.391043 secs.
[07/26 14:51:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41350.857422   33550.739990  1261.999756  41350.857422    0.099609  33550.739990  7700.117676   99.999756       99.999512
1   41350.857666   33650.690186  1261.999756  41350.857666  100.000000  33650.690186  7700.117676    0.049805       -0.000244
2   41650.807861   33750.739990  1261.999756  41650.807861  300.000000  33750.739990  7700.117676  199.950195      199.949951
3   41750.907471   33850.239990  1261.999756  41750.907471  300.049805  33850.239990  7700.167236  200.500244      200.000000
4   41850.957031   33949.739990  1261.999756  41850.957031  300.549805  33949.739990  7700.216797  201.000244      200.000000
5   41951.006592   34050.740234  1261.999756  41951.006592  301.049805  34050.740234  7700.266357  200.000000      200.000000
6   42052.556396   34150.740234  1261.999756  42052.556396  301.549805  34150.740234  7701.816162  200.000000      200.000000
7   42154.606201   34248.239990  1261.999756  42154.606201  302.049805  34248.239990  7703.865967  202.500244      200.000000
8   42254.655762   34250.740234  1261.999756  42254.655762  302.549805  34250.740234  7703.915527  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:51:51]  --------------------------------------------------------------------------------
[07/26 14:51:51]  Iteration: 5 (0 solution, 4 counterexamples)
[07/26 14:51:51]  Generator returned sat in 0.012748 secs.
[07/26 14:51:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:51]  Improved number of small numbers from 93 to 99 out of a max of 99
[07/26 14:51:51]  Verifer returned sat in 0.165497 secs.
[07/26 14:51:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41350.857178   33550.739990  1261.999512  41350.857178    0.099365  33550.739990  7700.117676   99.999512       99.999268
1   41350.857666   33650.690186  1261.999512  41350.857666  100.000000  33650.690186  7700.117676    0.049805       -0.000244
2   41650.807617   33749.739990  1261.999512  41650.807617  299.999756  33749.739990  7700.117676  200.949951      199.949707
3   41750.907471   33850.239990  1261.999512  41750.907471  301.049805  33850.239990  7700.167236  200.500244      200.000000
4   41851.457031   33949.739990  1261.999512  41851.457031  301.049805  33949.739990  7700.716797  201.000244      200.000000
5   41951.506592   34050.740234  1261.999512  41951.506592  301.049805  34050.740234  7700.766357  200.000000      200.000000
6   42052.556396   34150.739990  1261.999512  42052.556396  301.049805  34150.739990  7701.816162  200.000244      200.000000
7   42153.605957   34249.715332  1261.999512  42153.605957  301.049805  34249.715332  7702.865723  201.024902      200.000000
8   42253.630859   34250.740234  1261.999512  42253.630859  301.049805  34250.740234  7702.890625  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:51:51]  --------------------------------------------------------------------------------
[07/26 14:51:51]  Iteration: 6 (0 solution, 5 counterexamples)
[07/26 14:51:52]  Generator returned sat in 0.430099 secs.
[07/26 14:51:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:51:52]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:51:52]  Verifer returned sat in 0.187227 secs.
[07/26 14:51:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t  queue_t  bottle_queue_t
0   41350.857666   33527.541504  1243.198242  41350.857666    0.099365  33527.541504  7481.316162    342.0           300.0
1   41350.857666   33669.541504  1243.198242  41350.857666  342.000000  33669.541504  7481.316162    200.0           200.0
2   41350.857666   33769.541504  1243.198242  41350.857666  200.000000  33769.541504  7481.316162    100.0           100.0
3   41350.857666   33769.541504  1243.198242  41350.857666    1.500000  33769.541504  7481.316162    100.0             0.0
4   41738.607666   33927.541504  1243.198242  41738.607666  487.750000  33927.541504  7569.066162    242.0           200.0
5   41738.607666   34012.541504  1243.198242  41738.607666    1.500000  34012.541504  7569.066162    157.0           100.0
6   42071.357666   34069.541504  1243.198242  42071.357666  489.750000  34069.541504  7701.816162    300.0           200.0
7   42071.357666   34169.541504  1243.198242  42071.357666    1.500000  34169.541504  7701.816162    200.0           100.0
8   42359.107666   34269.541504  1243.198242  42359.107666  487.750000  34269.541504  7789.566162    300.0           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:51:52]  --------------------------------------------------------------------------------
[07/26 14:51:52]  Iteration: 7 (0 solution, 6 counterexamples)
[07/26 14:51:52]  Generator returned sat in 0.201596 secs.
[07/26 14:51:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:53]  Improved gap from 1/400 to 100
[07/26 14:51:53]  Improved number of small numbers from 78 to 100 out of a max of 100
[07/26 14:51:53]  Verifer returned sat in 0.274767 secs.
[07/26 14:51:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41758.613037   33877.395752  1243.197754  41758.613037    0.099121  33877.395752  7481.316162  399.901123      299.901123
1   41758.613037   33980.197754  1243.197754  41758.613037  399.900879  33980.197754  7481.316162  297.099121      199.901123
2   41858.612793   34077.395752  1243.197754  41858.612793  397.098877  34077.395752  7481.316162  299.900879      199.900879
3   41958.810547   34226.695312  1243.197754  41958.810547  400.098633  34226.695312  7481.414795  250.700439      200.000000
4   42058.909668   34328.096191  1243.197754  42058.909668  350.799561  34328.096191  7481.513916  249.299561      200.000000
5   42159.008545   34426.695068  1243.197754  42159.008545  349.398438  34426.695068  7481.612793  250.700684      200.000000
6   42259.107178   34551.344971  1243.197754  42259.107178  350.799316  34551.344971  7481.711426  226.050781      200.000000
7   42359.206055   34677.395752  1243.197754  42359.206055  326.149658  34677.395752  7481.810303  200.000000      200.000000
8   42510.005615   34677.395752  1243.197754  42510.005615  350.799561  34677.395752  7532.609863  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:51:53]  --------------------------------------------------------------------------------
[07/26 14:51:53]  Iteration: 8 (0 solution, 7 counterexamples)
[07/26 14:51:53]  Generator returned sat in 0.035276 secs.
[07/26 14:51:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:53]  Improved gap from 1/400 to 0
[07/26 14:51:54]  Improved number of small numbers from 73 to 75 out of a max of 100
[07/26 14:51:54]  Verifer returned sat in 0.428358 secs.
[07/26 14:51:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41758.613037   34077.295654  1243.197754  41758.613037    0.099121  34077.295654  7481.315918  200.001465      100.001494
1   41758.613037   34277.294434  1243.197754  41758.613037  200.000000  34277.294434  7481.315918    0.002686        0.001494
2   41758.613037   34277.295654  1243.197754  41758.613037    0.001465  34277.295654  7481.315918    0.001465      -99.998506
3   42158.613037   34477.295410  1243.197754  42158.613037  400.001465  34477.295410  7481.317412  200.000215      200.000000
4   42158.613037   34577.295410  1243.197754  42158.613037    2.000000  34577.295410  7481.317412  100.000215      100.000000
5   42158.613037   34677.294375  1243.197754  42158.613037    0.010000  34677.294375  7481.317412    0.001250        0.000000
6   42158.621787   34677.303125  1343.189004  42158.621787    0.010000  34677.303125  7481.317412    0.001250        0.000000
7   42158.630537   34677.304375  1443.180176  42158.630537    0.010000  34677.304375  7481.317412    0.008750       -0.000078
8   42158.631787   34677.313232  1443.180420  42158.631787    0.010000  34677.313232  7481.317412    0.001143      -99.998584
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:51:54]  --------------------------------------------------------------------------------
[07/26 14:51:54]  Iteration: 9 (0 solution, 8 counterexamples)
[07/26 14:51:54]  Generator returned sat in 0.030192 secs.
[07/26 14:51:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:54]  Improved gap from 1/800 to 0
[07/26 14:51:55]  Improved number of small numbers from 54 to 59 out of a max of 100
[07/26 14:51:55]  Verifer returned sat in 0.604303 secs.
[07/26 14:51:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41758.613037   34077.295654  1243.197754  41758.613037    0.099121  34077.295654  7281.318662  399.998721      299.998750
1   41758.613037   34277.295410  1243.197754  41758.613037  399.998535  34277.295410  7281.318662  199.998965      199.998750
2   41758.615537   34377.295625  1243.197754  41758.615537  200.001465  34377.295625  7281.318662  100.001250      100.001250
3   41758.615537   34477.285645  1243.197754  41758.615537    0.001250  34477.285645  7281.318662    0.011230        0.001250
4   41758.615537   34477.295625  1343.196289  41758.615537    0.010000  34477.295625  7281.318662    0.001250       -0.000215
5   41758.624287   34477.304375  1443.187744  41758.624287    0.010000  34477.304375  7281.318662    0.001250       -0.000010
6   41758.633037   34477.313125  1543.178955  41758.633037    0.010000  34477.313125  7281.318662    0.001250       -0.000049
7   41758.641787   34477.321875  1643.161621  41758.641787    0.010000  34477.321875  7281.318662    0.001250       -0.008633
8   41758.650537   34477.331875  1643.161621  41758.650537    0.010000  34477.331875  7281.318662    0.000000      -99.999883
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:51:55]  --------------------------------------------------------------------------------
[07/26 14:51:55]  Iteration: 10 (0 solution, 9 counterexamples)
[07/26 14:51:56]  Generator returned sat in 0.694040 secs.
[07/26 14:51:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:56]  Improved number of small numbers from 57 to 59 out of a max of 99
[07/26 14:51:56]  Verifer returned sat in 0.656550 secs.
[07/26 14:51:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41048.882324   33767.565000  1243.197754  41048.882324    0.098877  33767.565000  7281.316162    0.001162        0.001162
1   41348.882412   33767.565000  1243.197754  41348.882412  300.001250  33767.565000  7281.317412  300.000000      200.000000
2   41448.883662   33880.565000  1243.197754  41448.883662  400.001250  33880.565000  7281.318662  287.000000      200.000000
3   41448.883662   33967.565000  1243.197754  41448.883662    0.001250  33967.565000  7281.318662  200.000000      100.000000
4   41648.886162   34143.565000  1243.197754  41648.886162  400.002500  34143.565000  7281.321162  224.000000      200.000000
5   41648.886162   34167.565000  1243.197754  41648.886162    0.010000  34167.565000  7281.321162  200.000000      100.000000
6   42022.906162   34367.564941  1243.197754  42022.906162  574.020000  34367.564941  7455.341162  200.000059      200.000000
7   42022.906162   34367.565000  1243.197754  42022.906162    0.010000  34367.565000  7455.341162  200.000000      100.000000
8   42270.926162   34467.565000  1243.197754  42270.926162  448.020000  34467.565000  7503.361162  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:51:57]  --------------------------------------------------------------------------------
[07/26 14:51:57]  Iteration: 11 (0 solution, 10 counterexamples)
[07/26 14:51:57]  Generator returned sat in 0.121516 secs.
[07/26 14:51:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:51:57]  Improved gap from 3/80 to 0
[07/26 14:51:58]  Improved number of small numbers from 66 to 73 out of a max of 100
[07/26 14:51:58]  Verifer returned sat in 0.523119 secs.
[07/26 14:51:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41582.911377   34301.592529  1243.197754  41582.911377    0.098633  34301.592529  7281.316162    0.002686      -99.997285
1   41882.906006   34401.592529  1243.197754  41882.906006  299.997314  34401.592529  7281.316162  199.997314       99.997344
2   41882.908691   34601.590000  1243.197754  41882.908691  200.000000  34601.590000  7281.316162    0.002529        0.000029
3   42182.908662   34701.592500  1243.197754  42182.908662  300.002500  34701.592500  7281.316162  200.000000      200.000000
4   42582.913662   34801.592285  1243.197754  42582.913662  600.005000  34801.592285  7581.321162  200.000215      200.000000
5   42582.913662   34901.592285  1243.197754  42582.913662    0.010000  34901.592285  7581.321162  100.000215      100.000000
6   42582.913662   35001.590000  1243.197754  42582.913662    0.020000  35001.590000  7581.321162    0.002500        0.000000
7   42582.951162   35001.592500  1343.117920  42582.951162    0.040000  35001.592500  7581.321162    0.037500       -0.042334
8   42582.993662   35001.672363  1343.197510  42582.993662    0.080000  35001.672363  7581.321162    0.000137      -99.920244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:51:58]  --------------------------------------------------------------------------------
[07/26 14:51:58]  Iteration: 12 (0 solution, 11 counterexamples)
[07/26 14:51:58]  Generator returned sat in 0.186383 secs.
[07/26 14:51:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:51:58]  Improved gap from 403/8192 to 0
[07/26 14:51:59]  Improved number of small numbers from 27 to 100 out of a max of 100
[07/26 14:51:59]  Verifer returned sat in 0.427920 secs.
[07/26 14:51:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42179.614258   34694.230225   947.519287  42179.614258    0.098633  34694.230225  7485.334961    0.049072      -99.950928
1   42579.614502   34794.230225   947.519287  42579.614502  400.049316  34794.230225  7485.384277  300.000000      200.000000
2   42679.663574   34994.230225   947.519287  42679.663574  400.049072  34994.230225  7485.433350  200.000000      200.000000
3   42679.712891   35094.230225   947.519287  42679.712891  200.049316  35094.230225  7485.433350  100.049316      100.049316
4   42679.712891   35094.230225   947.519287  42679.712891    1.500000  35094.230225  7485.433350  100.049316        0.049316
5   42679.712891   35194.230225  1047.469971  42679.712891    1.500000  35194.230225  7485.433350    0.049316        0.000000
6   42681.163574   35195.680908  1144.617920  42681.163574    1.500000  35195.680908  7485.433350    0.049316       -1.401367
7   42682.614258   35197.131836  1244.568604  42682.614258    1.500000  35197.131836  7485.433350    0.049072        0.000000
8   42684.065186   35197.181152  1343.117676  42684.065186    1.500000  35197.181152  7485.433350    1.450684        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:51:59]  --------------------------------------------------------------------------------
[07/26 14:51:59]  Iteration: 13 (0 solution, 12 counterexamples)
[07/26 14:51:59]  Generator returned sat in 0.128381 secs.
[07/26 14:51:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:51:59]  Improved gap from 403/24576 to 0
[07/26 14:52:00]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 14:52:00]  Verifer returned sat in 0.463737 secs.
[07/26 14:52:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43042.055664   35356.720703  584.930664  43042.055664    0.098389  35356.720703  7485.334961  200.000000      100.000244
1   43042.055664   35556.720459  584.930664  43042.055664  199.950684  35556.720459  7485.334961    0.000244        0.000244
2   43242.055420   35556.720703  584.930664  43242.055420  200.000000  35556.720703  7485.334961  199.999756      100.000000
3   43242.055420   35755.671631  584.930664  43242.055420  199.999756  35755.671631  7485.334961    1.048828        0.000000
4   43242.055420   35756.720459  684.930664  43242.055420    1.000000  35756.720459  7485.334961    0.000000        0.000000
5   43243.055420   35756.769531  783.930664  43243.055420    1.000000  35756.769531  7485.334961    0.950928        0.000000
6   43243.104492   35757.720459  883.881592  43243.104492    1.000000  35757.720459  7485.334961    0.049072        0.000000
7   43244.055420   35758.671387  982.930664  43244.055420    1.000000  35758.671387  7485.334961    0.049072        0.000000
8   43245.006348   35758.720703  982.930908  43245.006348    1.000000  35758.720703  7485.334961    0.950684      -99.048828
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:52:00]  --------------------------------------------------------------------------------
[07/26 14:52:00]  Iteration: 14 (0 solution, 13 counterexamples)
[07/26 14:52:00]  Generator returned sat in 0.320016 secs.
[07/26 14:52:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:01]  Improved number of small numbers from 65 to 99 out of a max of 99
[07/26 14:52:01]  Verifer returned sat in 0.243641 secs.
[07/26 14:52:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43242.006592   35456.720459  584.93042  43242.006592    0.098389  35456.720459  7485.334961  299.951172      299.951172
1   43242.006592   35456.720459  584.93042  43242.006592  199.950684  35456.720459  7485.334961  299.951172      199.951172
2   43242.055176   35571.622314  584.93042  43242.055176  299.999756  35571.622314  7485.334961  185.097900       99.999756
3   43242.055176   35685.671631  584.93042  43242.055176  185.048828  35685.671631  7485.334961   71.048584       -0.000244
4   43542.104248   35856.720459  584.93042  43542.104248  371.097656  35856.720459  7485.383789  200.000000      200.000000
5   43542.104248   35856.720459  584.93042  43542.104248  200.000000  35856.720459  7485.383789  200.000000      100.000000
6   43743.104248   36055.769287  584.93042  43743.104248  401.000000  36055.769287  7486.383789  200.951172      200.000000
7   43743.104248   36085.671631  584.93042  43743.104248  185.048828  36085.671631  7486.383789  171.048828      100.000000
8   43943.153076   36156.720459  584.93042  43943.153076  371.097656  36156.720459  7486.432617  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:01]  --------------------------------------------------------------------------------
[07/26 14:52:01]  Iteration: 15 (0 solution, 14 counterexamples)
[07/26 14:52:02]  Generator returned sat in 0.780161 secs.
[07/26 14:52:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:03]  Improved number of small numbers from 59 to 61 out of a max of 99
[07/26 14:52:03]  Verifer returned sat in 0.601357 secs.
[07/26 14:52:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42943.092529   35456.720459  584.930176  42943.092529    0.098145  35456.720459  7486.370872    0.001198        0.001198
1   43183.096748   35556.720215  584.930176  43183.096748  240.005417  35556.720215  7486.370872  140.005661      140.005417
2   43183.096748   35590.066292  584.930176  43183.096748  140.005371  35590.066292  7486.370872  106.659583       40.005417
3   43183.096748   35696.724626  584.930176  43183.096748    0.001250  35696.724626  7486.370872    0.001250      -59.994583
4   43543.104248   35856.720459  584.930176  43543.104248  360.008750  35856.720459  7486.383789  200.000000      200.000000
5   43543.104248   35856.720459  584.930176  43543.104248    0.010000  35856.720459  7486.383789  200.000000      100.000000
6   43743.105498   35956.720459  584.930176  43743.105498  400.001250  35956.720459  7486.385039  300.000000      200.000000
7   43743.105498   36096.712959  584.930176  43743.105498    0.010000  36096.712959  7486.385039  160.007500      100.000000
8   43943.106748   36156.720459  584.930176  43943.106748  360.008750  36156.720459  7486.386289  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:03]  --------------------------------------------------------------------------------
[07/26 14:52:03]  Iteration: 16 (0 solution, 15 counterexamples)
[07/26 14:52:04]  Generator returned sat in 1.143630 secs.
[07/26 14:52:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:04]  Improved gap from 0 to 100
[07/26 14:52:05]  Improved number of small numbers from 45 to 100 out of a max of 100
[07/26 14:52:05]  Verifer returned sat in 0.325953 secs.
[07/26 14:52:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43083.096680   35456.720459  584.93042  43083.096680    0.098145  35456.720459  7459.708984  166.667236       99.999756
1   43083.096924   35523.387939  584.93042  43083.096924  166.667480  35523.387939  7459.708984  100.000000        0.000000
2   43183.098389   35723.387939  584.93042  43183.098389  200.001465  35723.387939  7459.708984    0.001465        0.001465
3   43183.098389   35723.387939  584.93042  43183.098389    0.001221  35723.387939  7459.708984    0.001465      -99.998535
4   43583.098145   35856.720459  584.93042  43583.098145  400.001221  35856.720459  7459.710205  266.667480      200.000000
5   43583.098145   36023.387939  584.93042  43583.098145    0.010000  36023.387939  7459.710205  100.000000      100.000000
6   43933.098145   36023.388184  584.93042  43933.098145  450.000000  36023.388184  7609.710205  299.999756      200.000000
7   43933.098145   36123.387939  584.93042  43933.098145    0.010000  36123.387939  7609.710205  200.000000      100.000000
8   44133.099365   36223.388184  584.93042  44133.099365  400.001221  36223.388184  7609.711426  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:05]  --------------------------------------------------------------------------------
[07/26 14:52:05]  Iteration: 17 (0 solution, 16 counterexamples)
[07/26 14:52:05]  Generator returned sat in 0.187857 secs.
[07/26 14:52:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:06]  Improved number of small numbers from 81 to 87 out of a max of 99
[07/26 14:52:06]  Verifer returned sat in 0.385113 secs.
[07/26 14:52:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43083.096680   35423.387939  584.93042  43083.096680    0.098145  35423.387939  7459.708984  199.999756       99.999756
1   43083.096924   35523.387939  584.93042  43083.096924  200.000000  35523.387939  7459.708984  100.000000        0.000000
2   43183.098389   35623.387939  584.93042  43183.098389  200.001465  35623.387939  7459.708984  100.001465        0.001465
3   43183.098389   35723.387939  584.93042  43183.098389  100.001221  35723.387939  7459.708984    0.001465      -99.998535
4   43583.098145   35823.387939  584.93042  43583.098145  400.001221  35823.387939  7459.710205  300.000000      200.000000
5   43583.098145   36023.387939  584.93042  43583.098145    0.010000  36023.387939  7459.710205  100.000000      100.000000
6   43883.108145   36023.387939  584.93042  43883.108145  400.010000  36023.387939  7559.720205  300.000000      200.000000
7   43883.108145   36223.379160  584.93042  43883.108145    0.010000  36223.379160  7559.720205  100.008779      100.000000
8   44183.100586   36223.388184  584.93042  44183.100586  400.001221  36223.388184  7659.712646  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:06]  --------------------------------------------------------------------------------
[07/26 14:52:06]  Iteration: 18 (0 solution, 17 counterexamples)
[07/26 14:52:06]  Generator returned sat in 0.231058 secs.
[07/26 14:52:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:07]  Improved number of small numbers from 79 to 79 out of a max of 99
[07/26 14:52:07]  Verifer returned sat in 0.387343 secs.
[07/26 14:52:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43083.096680   35423.387939  584.93042  43083.096680    0.098145  35423.387939  7459.708984  199.999756       99.999756
1   43083.096924   35523.387939  584.93042  43083.096924  200.000000  35523.387939  7459.708984  100.000000        0.000000
2   43183.098389   35623.392939  584.93042  43183.098389  200.001465  35623.392939  7459.708984   99.996465        0.001465
3   43183.098389   35723.387939  584.93042  43183.098389   66.667480  35723.387939  7459.708984    0.001465      -99.998535
4   43583.098145   35823.387939  584.93042  43583.098145  400.001221  35823.387939  7459.710205  300.000000      200.000000
5   43583.098145   36023.387939  584.93042  43583.098145    0.010000  36023.387939  7459.710205  100.000000      100.000000
6   43883.108145   36023.387939  584.93042  43883.108145  400.010000  36023.387939  7559.720205  300.000000      200.000000
7   43883.108145   36223.379160  584.93042  43883.108145    0.010000  36223.379160  7559.720205  100.008779      100.000000
8   44183.105586   36223.388184  584.93042  44183.105586  400.006221  36223.388184  7659.717646  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:07]  --------------------------------------------------------------------------------
[07/26 14:52:07]  Iteration: 19 (0 solution, 18 counterexamples)
[07/26 14:52:08]  Generator returned sat in 0.902451 secs.
[07/26 14:52:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:08]  Improved gap from 0 to 100
[07/26 14:52:09]  Improved number of small numbers from 57 to 100 out of a max of 100
[07/26 14:52:09]  Verifer returned sat in 0.237223 secs.
[07/26 14:52:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42883.000488   35523.387939  584.929932  42883.000488    0.097656  35523.387939  7359.563965    0.048584        0.048584
1   42883.000732   35523.387939  584.929932  42883.000732    0.048828  35523.387939  7359.563965    0.048828      -99.951172
2   43082.951904   35623.387939  584.929932  43082.951904  200.000000  35623.387939  7359.563965  100.000000        0.000000
3   43383.000488   35822.912354  584.929932  43383.000488  400.048584  35822.912354  7359.612549  200.475586      200.000000
4   43483.049316   35872.912354  584.929932  43483.049316  300.524414  35872.912354  7359.661377  250.475586      200.000000
5   43583.098145   36023.387939  584.929932  43583.098145  350.524414  36023.387939  7359.710205  200.000000      200.000000
6   43784.098145   36123.387939  584.929932  43784.098145  401.000000  36123.387939  7460.710205  200.000000      200.000000
7   43885.573730   36191.436768  584.929932  43885.573730  301.475586  36191.436768  7462.185791  231.951172      200.000000
8   43973.146973   36223.387939  584.929932  43973.146973  319.524414  36223.387939  7462.185791  287.573242      187.573242
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/26 14:52:09]  --------------------------------------------------------------------------------
[07/26 14:52:09]  Iteration: 20 (0 solution, 19 counterexamples)
[07/26 14:52:09]  Generator returned sat in 0.138592 secs.
[07/26 14:52:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:09]  Improved gap from 16783/8192 to 39.0625
[07/26 14:52:10]  Improved number of small numbers from 90 to 100 out of a max of 100
[07/26 14:52:10]  Verifer returned sat in 0.291487 secs.
[07/26 14:52:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42883.000488   35423.387939  584.929688  42883.000488    0.097412  35423.387939  7059.661377  399.951172      299.951172
1   42883.000488   35523.387939  584.929688  42883.000488    0.048584  35523.387939  7059.661377  299.951172      199.951172
2   42983.097900   35623.387939  584.929688  42983.097900  400.048584  35623.387939  7059.709961  300.000000      200.000000
3   43639.347900   35823.387939  584.929688  43639.347900  956.250000  35823.387939  7615.959961  200.000000      200.000000
4   43917.472900   35923.387939  584.929688  43917.472900  478.125000  35923.387939  7794.084961  200.000000      200.000000
5   43956.535400   36023.387695  584.929688  43956.535400  239.062500  36023.387695  7794.084961  139.062744      139.062500
6   43956.535400   36123.387939  584.929688  43956.535400    2.000000  36123.387939  7794.084961   39.062500       39.062500
7   43956.535400   36123.387939  645.867188  43956.535400    2.000000  36123.387939  7794.084961   39.062500        0.000000
8   43956.535400   36162.450439  645.867188  43956.535400    2.000000  36162.450439  7794.084961    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:52:10]  --------------------------------------------------------------------------------
[07/26 14:52:10]  Iteration: 21 (0 solution, 20 counterexamples)
[07/26 14:52:12]  Generator returned sat in 2.038121 secs.
[07/26 14:52:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:12]  Improved gap from 199/8192 to 100
[07/26 14:52:13]  Improved number of small numbers from 92 to 100 out of a max of 100
[07/26 14:52:13]  Verifer returned sat in 0.301976 secs.
[07/26 14:52:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43617.521240   36358.005615  584.929688  43617.521240    0.097168  36358.005615  7059.661377  199.854248       99.999756
1   43617.521240   36457.860107  584.929688  43617.521240  199.854248  36457.860107  7059.661377   99.999756       -0.000244
2   43917.570068   36657.860107  584.929688  43917.570068  400.048584  36657.860107  7059.709961  200.000000      200.000000
3   44017.618408   36657.860107  584.929688  44017.618408  300.048340  36657.860107  7059.758301  300.000000      200.000000
4   44017.618408   36856.262939  584.929688  44017.618408  299.951416  36856.262939  7059.758301  101.597168      100.000000
5   44315.924072   36857.860107  584.929688  44315.924072  399.902832  36857.860107  7158.063965  300.000000      200.000000
6   44315.924072   37007.134521  584.929688  44315.924072  299.951416  37007.134521  7158.063965  150.725586      100.000000
7   44515.972900   37140.435303  584.929688  44515.972900  350.774414  37140.435303  7158.112793  217.424805      200.000000
8   44616.021484   37157.860107  584.929688  44616.021484  317.473389  37157.860107  7158.161377  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:13]  --------------------------------------------------------------------------------
[07/26 14:52:13]  Iteration: 22 (0 solution, 21 counterexamples)
[07/26 14:52:14]  Generator returned sat in 1.121439 secs.
[07/26 14:52:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:14]  Improved gap from 199/8192 to 100
[07/26 14:52:15]  Improved number of small numbers from 67 to 71 out of a max of 100
[07/26 14:52:15]  Verifer returned sat in 0.830977 secs.
[07/26 14:52:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43486.255127   36424.177246  584.929443  43486.255127    0.096924  36424.177246  6962.077706  100.000174      100.000174
1   43486.255127   36424.177246  584.929443  43486.255127   99.999756  36424.177246  6962.077706  100.000174        0.000174
2   43586.254953   36524.177246  584.929443  43586.254953  200.000000  36524.177246  6962.077706  100.000000        0.000000
3   43886.352121   36690.542969  584.929443  43886.352121  400.097168  36690.542969  6962.174874  233.634277      200.000000
4   43986.449289   36816.115165  584.929443  43986.449289  333.731445  36816.115165  6962.272042  208.062081      200.000000
5   44141.721889   36924.177246  584.929443  44141.721889  363.334682  36924.177246  7017.544643  200.000000      200.000000
6   44323.889230   37024.177246  584.929443  44323.889230  382.167341  37024.177246  7099.711984  200.000000      200.000000
7   44482.290039   37124.177246  584.929443  44482.290039  358.400809  37124.177246  7158.112793  200.000000      200.000000
8   44616.021484   37124.177246  584.929443  44616.021484  333.731445  37124.177246  7191.844238  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:52:15]  --------------------------------------------------------------------------------
[07/26 14:52:15]  Iteration: 23 (0 solution, 22 counterexamples)
[07/26 14:52:16]  Generator returned sat in 0.235487 secs.
[07/26 14:52:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:16]  Improved gap from 32371/16384 to 100
[07/26 14:52:16]  Improved number of small numbers from 37 to 100 out of a max of 100
[07/26 14:52:16]  Verifer returned sat in 0.305482 secs.
[07/26 14:52:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t   cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43989.278076   37074.829834  584.929443  43989.278076    0.09668  37074.829834  6814.447998  100.000244      100.000244
1   43989.278076   37074.830078  584.929443  43989.278076  100.00000  37074.830078  6814.447998  100.000000        0.000244
2   44089.278076   37174.829834  584.929443  44089.278076  200.00000  37174.829834  6814.447998  100.000244        0.000244
3   44592.277832   37372.926758  584.929443  44592.277832  603.00000  37372.926758  7017.447998  201.903076      200.000000
4   44692.374756   37474.829834  584.929443  44692.374756  302.00000  37474.829834  7017.544922  200.000000      200.000000
5   44692.374756   37574.829834  584.929443  44692.374756  151.50000  37574.829834  7017.544922  100.000000      100.000000
6   44994.374756   37574.830078  584.929443  44994.374756  402.00000  37574.830078  7119.544922  299.999756      200.000000
7   44994.374756   37774.829834  584.929443  44994.374756  201.50000  37774.829834  7119.544922  100.000000      100.000000
8   45196.374756   37774.830078  584.929443  45196.374756  302.00000  37774.830078  7121.544922  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:17]  --------------------------------------------------------------------------------
[07/26 14:52:17]  Iteration: 24 (0 solution, 23 counterexamples)
[07/26 14:52:19]  Generator returned sat in 2.011545 secs.
[07/26 14:52:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:19]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:52:19]  Verifer returned sat in 0.214178 secs.
[07/26 14:52:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44292.229492   37072.684814  584.929443  44292.229492    0.096680  37072.684814  7017.399658  202.145020           200.0
1   44292.229492   37172.588135  584.929443  44292.229492  100.000000  37172.588135  7017.399658  102.241699           100.0
2   44292.229492   37274.781494  584.929443  44292.229492  102.241699  37274.781494  7017.399658    0.048340             0.0
3   44592.277832   37373.781494  584.929443  44592.277832  300.096680  37373.781494  7017.447998  201.048340           200.0
4   44692.326172   37473.733154  584.929443  44692.326172  301.096680  37473.733154  7017.496338  201.096680           200.0
5   44792.374512   37574.829834  584.929443  44792.374512  301.145020  37574.829834  7017.544678  200.000000           200.0
6   44892.422852   37674.829834  584.929443  44892.422852  300.048340  37674.829834  7017.593018  200.000000           200.0
7   44993.471191   37774.829834  584.929443  44993.471191  301.048340  37774.829834  7018.641357  200.000000           200.0
8   45094.567871   37774.829834  584.929443  45094.567871  301.096680  37774.829834  7019.738037  300.000000           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:52:19]  --------------------------------------------------------------------------------
[07/26 14:52:19]  Iteration: 25 (0 solution, 24 counterexamples)
[07/26 14:52:20]  Generator returned sat in 0.400720 secs.
[07/26 14:52:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:20]  Improved gap from 395/32768 to 100
[07/26 14:52:21]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 14:52:21]  Verifer returned sat in 0.340116 secs.
[07/26 14:52:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43495.277832   36277.781738  584.929443  43495.277832    0.096191  36277.781738  7017.447998  200.048096       100.04834
1   43495.277832   36477.781494  584.929443  43495.277832    0.048340  36477.781494  7017.447998    0.048340         0.04834
2   43495.277832   36477.781494  584.929443  43495.277832    0.048340  36477.781494  7017.447998    0.048340       -99.95166
3   43695.229492   36627.805664  584.929443  43695.229492  200.000000  36627.805664  7017.447998   49.975830         0.00000
4   43995.277588   36677.781494  584.929443  43995.277588  350.023926  36677.781494  7017.496094  300.000000       200.00000
5   43995.277588   36877.781494  584.929443  43995.277588  175.511963  36877.781494  7017.496094  100.000000       100.00000
6   44295.277588   36977.329834  584.929443  44295.277588  400.000000  36977.329834  7117.496094  200.451660       200.00000
7   44295.325928   37072.805664  584.929443  44295.325928  200.500000  37072.805664  7117.496094  105.024170       100.04834
8   44585.325928   37077.781738  584.929443  44585.325928  395.024170  37077.781738  7207.544434  299.999756       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:21]  --------------------------------------------------------------------------------
[07/26 14:52:21]  Iteration: 26 (0 solution, 25 counterexamples)
[07/26 14:52:22]  Generator returned sat in 0.669091 secs.
[07/26 14:52:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:22]  Improved number of small numbers from 91 to 99 out of a max of 99
[07/26 14:52:22]  Verifer returned sat in 0.217436 secs.
[07/26 14:52:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43495.277832   36377.781494  584.929443  43495.277832    0.095947  36377.781494  7015.496094  102.000244      102.000244
1   43495.277832   36477.781250  584.929443  43495.277832    0.047852  36477.781250  7015.496094    2.000488        2.000244
2   43495.277832   36477.781494  584.929443  43495.277832    2.000000  36477.781494  7015.496094    2.000244      -97.999756
3   43695.277588   36627.305420  584.929443  43695.277588  202.000000  36627.305420  7015.496094   52.476074        2.000000
4   43993.325439   36677.781494  584.929443  43993.325439  350.523926  36677.781494  7015.543945  300.000000      200.000000
5   43993.325439   36877.781494  584.929443  43993.325439    2.000000  36877.781494  7015.543945  100.000000      100.000000
6   44294.325439   36877.781494  584.929443  44294.325439  401.000000  36877.781494  7116.543945  300.000000      200.000000
7   44294.325439   37027.305664  584.929443  44294.325439    2.000000  37027.305664  7116.543945  150.475830      100.000000
8   44494.373779   37077.781494  584.929443  44494.373779  350.524170  37077.781494  7116.592285  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:22]  --------------------------------------------------------------------------------
[07/26 14:52:22]  Iteration: 27 (0 solution, 26 counterexamples)
[07/26 14:52:25]  Generator returned sat in 2.574850 secs.
[07/26 14:52:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:26]  Verifer returned unsat in 0.192707 secs.
[07/26 14:52:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:26]  --------------------------------------------------------------------------------
[07/26 14:52:26]  Iteration: 28 (1 solution, 26 counterexamples)
[07/26 14:52:28]  Generator returned sat in 2.192698 secs.
[07/26 14:52:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:28]  Verifer returned unsat in 0.108391 secs.
[07/26 14:52:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:28]  --------------------------------------------------------------------------------
[07/26 14:52:28]  Iteration: 29 (2 solution, 26 counterexamples)
[07/26 14:52:29]  Generator returned sat in 0.076674 secs.
[07/26 14:52:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:29]  Verifer returned unsat in 0.129038 secs.
[07/26 14:52:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:29]  --------------------------------------------------------------------------------
[07/26 14:52:29]  Iteration: 30 (3 solution, 26 counterexamples)
[07/26 14:52:29]  Generator returned sat in 0.121610 secs.
[07/26 14:52:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:30]  Verifer returned unsat in 0.104029 secs.
[07/26 14:52:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:30]  --------------------------------------------------------------------------------
[07/26 14:52:30]  Iteration: 31 (4 solution, 26 counterexamples)
[07/26 14:52:30]  Generator returned sat in 0.071525 secs.
[07/26 14:52:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:30]  Verifer returned unsat in 0.102715 secs.
[07/26 14:52:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:30]  --------------------------------------------------------------------------------
[07/26 14:52:30]  Iteration: 32 (5 solution, 26 counterexamples)
[07/26 14:52:31]  Generator returned sat in 0.137560 secs.
[07/26 14:52:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:31]  Verifer returned unsat in 0.114743 secs.
[07/26 14:52:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:31]  --------------------------------------------------------------------------------
[07/26 14:52:31]  Iteration: 33 (6 solution, 26 counterexamples)
[07/26 14:52:31]  Generator returned sat in 0.091486 secs.
[07/26 14:52:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:31]  Verifer returned unsat in 0.141635 secs.
[07/26 14:52:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:31]  --------------------------------------------------------------------------------
[07/26 14:52:31]  Iteration: 34 (7 solution, 26 counterexamples)
[07/26 14:52:32]  Generator returned sat in 0.100560 secs.
[07/26 14:52:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:32]  Verifer returned unsat in 0.254213 secs.
[07/26 14:52:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:32]  --------------------------------------------------------------------------------
[07/26 14:52:32]  Iteration: 35 (8 solution, 26 counterexamples)
[07/26 14:52:33]  Generator returned sat in 0.092189 secs.
[07/26 14:52:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:33]  Verifer returned unsat in 0.090464 secs.
[07/26 14:52:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:33]  --------------------------------------------------------------------------------
[07/26 14:52:33]  Iteration: 36 (9 solution, 26 counterexamples)
[07/26 14:52:33]  Generator returned sat in 0.113212 secs.
[07/26 14:52:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:33]  Verifer returned unsat in 0.105445 secs.
[07/26 14:52:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:33]  --------------------------------------------------------------------------------
[07/26 14:52:33]  Iteration: 37 (10 solution, 26 counterexamples)
[07/26 14:52:34]  Generator returned sat in 0.112793 secs.
[07/26 14:52:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:34]  Verifer returned unsat in 0.099136 secs.
[07/26 14:52:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:34]  --------------------------------------------------------------------------------
[07/26 14:52:34]  Iteration: 38 (11 solution, 26 counterexamples)
[07/26 14:52:34]  Generator returned sat in 0.104448 secs.
[07/26 14:52:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:35]  Verifer returned unsat in 0.063407 secs.
[07/26 14:52:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:35]  --------------------------------------------------------------------------------
[07/26 14:52:35]  Iteration: 39 (12 solution, 26 counterexamples)
[07/26 14:52:35]  Generator returned sat in 0.083777 secs.
[07/26 14:52:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:35]  Verifer returned unsat in 0.098780 secs.
[07/26 14:52:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:35]  --------------------------------------------------------------------------------
[07/26 14:52:35]  Iteration: 40 (13 solution, 26 counterexamples)
[07/26 14:52:36]  Generator returned sat in 0.083406 secs.
[07/26 14:52:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:36]  Verifer returned unsat in 0.091233 secs.
[07/26 14:52:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:52:36]  --------------------------------------------------------------------------------
[07/26 14:52:36]  Iteration: 41 (14 solution, 26 counterexamples)
[07/26 14:52:36]  Generator returned sat in 0.080280 secs.
[07/26 14:52:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:36]  Verifer returned unsat in 0.077085 secs.
[07/26 14:52:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:52:36]  --------------------------------------------------------------------------------
[07/26 14:52:36]  Iteration: 42 (15 solution, 26 counterexamples)
[07/26 14:52:37]  Generator returned sat in 0.085562 secs.
[07/26 14:52:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:37]  Verifer returned unsat in 0.076006 secs.
[07/26 14:52:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:52:37]  --------------------------------------------------------------------------------
[07/26 14:52:37]  Iteration: 43 (16 solution, 26 counterexamples)
[07/26 14:52:37]  Generator returned sat in 0.110305 secs.
[07/26 14:52:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:37]  Verifer returned unsat in 0.100399 secs.
[07/26 14:52:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:37]  --------------------------------------------------------------------------------
[07/26 14:52:37]  Iteration: 44 (17 solution, 26 counterexamples)
[07/26 14:52:38]  Generator returned sat in 0.084845 secs.
[07/26 14:52:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:38]  Verifer returned unsat in 0.113517 secs.
[07/26 14:52:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:38]  --------------------------------------------------------------------------------
[07/26 14:52:38]  Iteration: 45 (18 solution, 26 counterexamples)
[07/26 14:52:38]  Generator returned sat in 0.085037 secs.
[07/26 14:52:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:39]  Verifer returned unsat in 0.077812 secs.
[07/26 14:52:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:39]  --------------------------------------------------------------------------------
[07/26 14:52:39]  Iteration: 46 (19 solution, 26 counterexamples)
[07/26 14:52:39]  Generator returned sat in 0.095330 secs.
[07/26 14:52:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:39]  Verifer returned unsat in 0.064617 secs.
[07/26 14:52:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:39]  --------------------------------------------------------------------------------
[07/26 14:52:39]  Iteration: 47 (20 solution, 26 counterexamples)
[07/26 14:52:40]  Generator returned sat in 0.077373 secs.
[07/26 14:52:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:40]  Verifer returned unsat in 0.074995 secs.
[07/26 14:52:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:40]  --------------------------------------------------------------------------------
[07/26 14:52:40]  Iteration: 48 (21 solution, 26 counterexamples)
[07/26 14:52:40]  Generator returned sat in 0.088600 secs.
[07/26 14:52:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:40]  Verifer returned unsat in 0.087539 secs.
[07/26 14:52:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:40]  --------------------------------------------------------------------------------
[07/26 14:52:40]  Iteration: 49 (22 solution, 26 counterexamples)
[07/26 14:52:41]  Generator returned sat in 0.078646 secs.
[07/26 14:52:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:41]  Verifer returned unsat in 0.125753 secs.
[07/26 14:52:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:41]  --------------------------------------------------------------------------------
[07/26 14:52:41]  Iteration: 50 (23 solution, 26 counterexamples)
[07/26 14:52:41]  Generator returned sat in 0.086799 secs.
[07/26 14:52:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:41]  Verifer returned unsat in 0.101702 secs.
[07/26 14:52:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:41]  --------------------------------------------------------------------------------
[07/26 14:52:41]  Iteration: 51 (24 solution, 26 counterexamples)
[07/26 14:52:42]  Generator returned sat in 0.079360 secs.
[07/26 14:52:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:42]  Verifer returned unsat in 0.100240 secs.
[07/26 14:52:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:42]  --------------------------------------------------------------------------------
[07/26 14:52:42]  Iteration: 52 (25 solution, 26 counterexamples)
[07/26 14:52:43]  Generator returned sat in 0.352276 secs.
[07/26 14:52:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:43]  Improved number of small numbers from 53 to 99 out of a max of 99
[07/26 14:52:43]  Verifer returned sat in 0.274448 secs.
[07/26 14:52:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44616.642334   37401.146240  427.573486  44616.642334    0.095703  37401.146240  7015.496094  200.000000      100.000000
1   44616.642334   37601.146240  427.573486  44616.642334  200.000000  37601.146240  7015.496094    0.000000        0.000000
2   44916.546387   37605.570557  427.573486  44916.546387  299.904053  37605.570557  7015.496094  295.479736      199.904053
3   44916.546387   37701.954346  427.573486  44916.546387  248.383789  37701.954346  7015.496094  199.095947       99.904053
4   45116.738281   37803.762451  427.573486  45116.738281  399.287842  37803.762451  7015.592041  297.383789      200.000000
5   45116.738281   38001.146240  427.573486  45116.738281  101.808105  38001.146240  7015.592041  100.000000      100.000000
6   45316.834229   38101.146240  427.573486  45316.834229  300.095947  38101.146240  7015.687988  200.000000      200.000000
7   45316.930176   38201.146240  427.573486  45316.930176  200.095947  38201.146240  7015.687988  100.095947      100.095947
8   45616.122070   38201.146484  427.573486  45616.122070  399.287842  38201.146484  7114.975830  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:43]  --------------------------------------------------------------------------------
[07/26 14:52:43]  Iteration: 53 (25 solution, 27 counterexamples)
[07/26 14:52:47]  Generator returned sat in 3.171723 secs.
[07/26 14:52:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:52:47]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:52:47]  Verifer returned sat in 0.136567 secs.
[07/26 14:52:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44616.642578   37401.146240  427.573486  44616.642578    0.095703  37401.146240  7015.496338  200.000000      100.000000
1   44616.642578   37601.146240  427.573486  44616.642578  200.000000  37601.146240  7015.496338    0.000000        0.000000
2   44916.546875   37701.146240  427.573486  44916.546875  299.904297  37701.146240  7015.496338  199.904297      199.904297
3   44916.546875   37701.954346  427.573486  44916.546875   48.989746  37701.954346  7015.496338  199.096191       99.904297
4   45116.738281   37803.358643  427.573486  45116.738281  399.287598  37803.358643  7015.592041  297.787598      200.000000
5   45116.738281   38000.444092  427.573486  45116.738281    0.500000  38000.444092  7015.592041  100.702148      100.000000
6   45316.833984   38101.146240  427.573486  45316.833984  300.797852  38101.146240  7015.687744  200.000000      200.000000
7   45316.833984   38201.146240  427.573486  45316.833984    0.500000  38201.146240  7015.687744  100.000000      100.000000
8   45616.121582   38201.146240  427.573486  45616.121582  399.287598  38201.146240  7114.975342  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:52:47]  --------------------------------------------------------------------------------
[07/26 14:52:47]  Iteration: 54 (25 solution, 28 counterexamples)
[07/26 14:52:50]  Generator returned sat in 2.413839 secs.
[07/26 14:52:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:50]  Improved gap from 0 to 68.75
[07/26 14:52:51]  Improved number of small numbers from 98 to 100 out of a max of 100
[07/26 14:52:51]  Verifer returned sat in 0.377262 secs.
[07/26 14:52:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   44064.143555   36948.456299  396.323486  44064.143555    0.095703  36948.456299  7015.6875   99.999756       99.999756
1   44064.143555   37048.408447  396.323486  44064.143555   99.999756  37048.408447  7015.6875    0.047607       -0.000244
2   44064.143799   37048.456299  427.573486  44064.143799    0.047852  37048.456299  7015.6875    0.000000      -68.750000
3   44330.489258   37142.206299  427.573486  44330.489258  266.345459  37142.206299  7015.6875  172.595459       97.595459
4   44330.489258   37314.754150  427.573486  44330.489258   96.875000  37314.754150  7015.6875    0.047607       -2.404541
5   44463.614502   37340.122803  427.573486  44463.614502  133.172852  37340.122803  7015.6875  107.804199       30.720703
6   44501.643555   37417.206299  458.823486  44501.643555  145.833252  37417.206299  7015.6875   68.749756       -0.000244
7   44570.393799   37485.956299  490.073486  44570.393799  137.500000  37485.956299  7015.6875   68.750000        0.000000
8   44587.244873   37554.706299  490.073486  44587.244873   85.601074  37554.706299  7015.6875   16.851074      -83.148926
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:52:51]  --------------------------------------------------------------------------------
[07/26 14:52:51]  Iteration: 55 (25 solution, 29 counterexamples)
[07/26 14:52:52]  Generator returned sat in 0.593257 secs.
[07/26 14:52:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:53]  Verifer returned unsat in 1.357493 secs.
[07/26 14:52:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:53]  --------------------------------------------------------------------------------
[07/26 14:52:53]  Iteration: 56 (26 solution, 29 counterexamples)
[07/26 14:52:54]  Generator returned sat in 0.126120 secs.
[07/26 14:52:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:55]  Verifer returned unsat in 0.699376 secs.
[07/26 14:52:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:55]  --------------------------------------------------------------------------------
[07/26 14:52:55]  Iteration: 57 (27 solution, 29 counterexamples)
[07/26 14:52:55]  Generator returned sat in 0.117092 secs.
[07/26 14:52:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:56]  Verifer returned unsat in 1.004712 secs.
[07/26 14:52:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:56]  --------------------------------------------------------------------------------
[07/26 14:52:56]  Iteration: 58 (28 solution, 29 counterexamples)
[07/26 14:52:57]  Generator returned sat in 0.101109 secs.
[07/26 14:52:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:58]  Verifer returned unsat in 1.256177 secs.
[07/26 14:52:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:58]  --------------------------------------------------------------------------------
[07/26 14:52:58]  Iteration: 59 (29 solution, 29 counterexamples)
[07/26 14:52:59]  Generator returned sat in 0.243455 secs.
[07/26 14:52:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:52:59]  Improved gap from 27/16 to 1.5625
[07/26 14:52:59]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/26 14:52:59]  Verifer returned sat in 0.340899 secs.
[07/26 14:52:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43620.906494   36269.378418  411.865234  43620.906494    0.095459  36269.378418  7051.575928  299.952148      299.952148
1   43620.906494   36369.378418  411.865234  43620.906494    0.047852  36369.378418  7051.575928  199.952148      199.952148
2   43720.906250   36469.378418  411.865234  43720.906250  299.951904  36469.378418  7051.575928  199.951904      199.951904
3   43720.986084   36569.378418  411.865234  43720.986084  200.031738  36569.378418  7051.575928  100.031738      100.031738
4   43921.001953   36669.378174  411.865234  43921.001953  300.047607  36669.378174  7051.623535  200.000244      200.000000
5   43921.001953   36769.378174  411.865234  43921.001953    0.500000  36769.378174  7051.623535  100.000244      100.000000
6   43921.001953   36868.205566  411.865234  43921.001953    0.750000  36868.205566  7051.623535    1.172852        0.000000
7   43921.001953   36869.378418  510.302734  43921.001953    1.125000  36869.378418  7051.623535    0.000000       -1.562500
8   43922.689453   36870.940918  510.302979  43922.689453    1.687500  36870.940918  7051.623535    0.125000      -99.874756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:52:59]  --------------------------------------------------------------------------------
[07/26 14:52:59]  Iteration: 60 (29 solution, 30 counterexamples)
[07/26 14:53:03]  Generator returned sat in 3.590110 secs.
[07/26 14:53:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:53:03]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:53:03]  Verifer returned sat in 0.185243 secs.
[07/26 14:53:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43520.978271   36269.378418  411.865234  43520.978271    0.095459  36269.378418  7051.575928  200.023926      200.023926
1   43520.978271   36369.378418  411.865234  43520.978271    0.047852  36369.378418  7051.575928  100.023926      100.023926
2   43520.978271   36469.378418  411.865234  43520.978271  100.023926  36469.378418  7051.575928    0.023926        0.023926
3   43820.930420   36519.640381  411.865234  43820.930420  299.976074  36519.640381  7051.575928  249.714111      199.976074
4   43973.466309   36569.378418  411.865234  43973.466309  402.250000  36569.378418  7104.087891  300.000000      200.000000
5   43973.466309   36768.265381  411.865234  43973.466309    0.500000  36768.265381  7104.087891  101.113037      100.000000
6   44173.490234   36869.378418  411.865234  44173.490234  301.136963  36869.378418  7104.111816  200.000000      200.000000
7   44173.490234   36969.378418  411.865234  44173.490234    0.500000  36969.378418  7104.111816  100.000000      100.000000
8   44475.740234   36969.378418  411.865234  44475.740234  402.250000  36969.378418  7206.361816  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:04]  --------------------------------------------------------------------------------
[07/26 14:53:04]  Iteration: 61 (29 solution, 31 counterexamples)
[07/26 14:53:07]  Generator returned sat in 2.675117 secs.
[07/26 14:53:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:53:07]  Improved gap from 1/100 to 9.375
[07/26 14:53:07]  Improved number of small numbers from 68 to 76 out of a max of 100
[07/26 14:53:07]  Verifer returned sat in 0.533244 secs.
[07/26 14:53:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43420.954346   36269.378174  411.864746  43420.954346    0.095215  36269.378174  7051.575928  100.000244      100.000000
1   43420.954346   36360.003418  411.864746  43420.954346    0.047852  36360.003418  7051.575928    9.375000        0.000000
2   43720.949219   36369.378418  411.864746  43720.949219  309.369873  36369.378418  7051.575928  299.994873      199.994873
3   43720.949219   36569.378418  411.864746  43720.949219  198.670000  36569.378418  7051.575928   99.994873       99.994873
4   43920.959346   36669.378174  411.864746  43920.959346  300.005000  36669.378174  7051.580928  200.000244      200.000000
5   43920.959346   36769.378174  411.864746  43920.959346    0.010000  36769.378174  7051.580928  100.000244      100.000000
6   43920.959346   36769.378418  411.864746  43920.959346    2.015000  36769.378418  7051.580928  100.000000        0.000000
7   43920.959346   36869.378418  502.331299  43920.959346    5.022500  36869.378418  7051.580928    0.000000       -9.533447
8   43930.493096   36878.912109  502.331299  43930.493096    9.533750  36878.912109  7051.580928    0.000059      -99.999697
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:53:08]  --------------------------------------------------------------------------------
[07/26 14:53:08]  Iteration: 62 (29 solution, 32 counterexamples)
[07/26 14:53:09]  Generator returned sat in 1.240737 secs.
[07/26 14:53:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:53:10]  Improved gap from 195/4096 to 100
[07/26 14:53:10]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 14:53:10]  Verifer returned sat in 0.290243 secs.
[07/26 14:53:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43720.996826   36469.421143  111.822021  43720.996826    0.094971  36469.421143  7051.575928  199.999756       99.999756
1   43720.996826   36569.421143  111.822021  43720.996826    0.047607  36569.421143  7051.575928   99.999756       -0.000244
2   43721.044434   36669.421143  111.822021  43721.044434  100.047363  36669.421143  7051.575928    0.047363      -99.952637
3   43921.997070   36769.421143  111.822021  43921.997070  201.000000  36769.421143  7051.575928  101.000000        1.000000
4   44222.997070   36869.421143  111.822021  44222.997070  402.000000  36869.421143  7053.575928  300.000000      200.000000
5   44222.997070   37067.468506  111.822021  44222.997070  151.000000  37067.468506  7053.575928  101.952637      100.000000
6   44423.044434   37169.421143  111.822021  44423.044434  302.000000  37169.421143  7053.623291  200.000000      200.000000
7   44424.044434   37269.421143  111.822021  44424.044434  201.000000  37269.421143  7053.623291  101.000000      101.000000
8   44725.044434   37269.421143  111.822021  44725.044434  402.000000  37269.421143  7155.623291  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:10]  --------------------------------------------------------------------------------
[07/26 14:53:10]  Iteration: 63 (29 solution, 33 counterexamples)
[07/26 14:53:12]  Generator returned sat in 1.229014 secs.
[07/26 14:53:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:53:12]  Improved gap from 1/800 to 14.0625
[07/26 14:53:13]  Improved number of small numbers from 71 to 78 out of a max of 100
[07/26 14:53:13]  Verifer returned sat in 1.155344 secs.
[07/26 14:53:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43720.994141   36652.666523   28.576416  43720.994141    0.094971  36652.666523  7053.575928   14.751689       14.751465
1   43720.996826   36653.358398  113.822266  43720.996826   14.754375  36653.358398  7053.575928   14.062500        0.000000
2   43735.059326   36667.420898  199.759766  43735.059326   28.125000  36667.420898  7053.575928   14.062500        0.000000
3   43735.059326   36681.483398  285.697266  43735.059326    0.002500  36681.483398  7053.575928    0.000000      -14.062500
4   43749.972764   36695.545898  370.634766  43749.972764   14.913438  36695.545898  7053.575928    0.850938      -14.211562
5   43800.542451   36710.608398  370.634766  43800.542451   51.420625  36710.608398  7053.575928   36.358125      -63.641875
6   43889.119326   36821.480898  445.699766  43889.119326  124.935000  36821.480898  7053.575928   14.062500        0.000000
7   44195.425576   36835.543457  445.699766  44195.425576  320.368750  36835.543457  7059.882178  299.999941      200.000000
8   44195.425576   36935.543457  445.699766  44195.425576    0.010000  36935.543457  7059.882178  199.999941      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:53:13]  --------------------------------------------------------------------------------
[07/26 14:53:13]  Iteration: 64 (29 solution, 34 counterexamples)
[07/26 14:53:14]  Generator returned sat in 0.316736 secs.
[07/26 14:53:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:53:15]  Improved gap from 1/800 to 12.5
[07/26 14:53:16]  Improved number of small numbers from 50 to 61 out of a max of 100
[07/26 14:53:16]  Verifer returned sat in 1.801891 secs.
[07/26 14:53:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44156.564209   37084.124648 -402.881836  44156.564209    0.094971  37084.124648  7053.575928   18.863633       18.863525
1   44156.564209   37090.488398 -321.745479  44156.564209    0.002441  37090.488398  7053.575928   12.499883       -0.000117
2   44169.064326   37102.988398 -234.245479  44169.064326   25.000000  37102.988398  7053.575928   12.500000        0.000000
3   44169.064326   37115.488398 -146.745605  44169.064326    0.002500  37115.488398  7053.575928    0.000000      -12.500127
4   44185.751201   37128.988398  -60.245479  44185.751201   16.686875  37128.988398  7053.575928    3.186875       -9.313125
5   44236.188076   37141.488398   -1.369385  44236.188076   53.623750  37141.488398  7053.575928   41.123750       -0.000156
6   44322.561826   37247.158398   12.257021  44322.561826  127.497500  37247.158398  7053.575928   21.827500        0.000000
7   44622.564326   37268.986084   12.257021  44622.564326  321.830000  37268.986084  7053.578428  299.999814      200.000000
8   44622.564326   37368.986084   12.257021  44622.564326    0.010000  37368.986084  7053.578428  199.999814      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:53:16]  --------------------------------------------------------------------------------
[07/26 14:53:16]  Iteration: 65 (29 solution, 35 counterexamples)
[07/26 14:53:19]  Generator returned sat in 2.647212 secs.
[07/26 14:53:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:53:21]  Improved number of small numbers from 34 to 48 out of a max of 99
[07/26 14:53:21]  Verifer returned sat in 1.303359 secs.
[07/26 14:53:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44548.266602   37194.693469 -513.450549  44548.266602    0.094727  37194.693469  7053.573242  299.999891      299.999891
1   44548.266602   37294.693469 -513.450549  44548.266602    0.002686  37294.693469  7053.573242  199.999891      199.999891
2   44648.269152   37294.693469 -513.450549  44648.269152  300.002441  37294.693469  7053.575684  300.000000      200.000000
3   44648.271652   37444.697219 -513.450549  44648.271652  300.002500  37444.697219  7053.575684  149.998750      100.002500
4   44900.277902   37494.693469 -513.450549  44900.277902  402.005000  37494.693469  7105.584434  300.000000      200.000000
5   44900.277902   37643.692219 -513.450549  44900.277902    0.010000  37643.692219  7105.584434  151.001250      100.000000
6   45100.280402   37694.693604 -513.450549  45100.280402  351.003750  37694.693604  7105.586934  299.999865      200.000000
7   45100.280402   37894.693469 -513.450549  45100.280402    0.010000  37894.693469  7105.586934  100.000000      100.000000
8   45402.285402   37894.693604 -513.450549  45402.285402  402.005000  37894.693604  7207.591934  299.999865      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:21]  --------------------------------------------------------------------------------
[07/26 14:53:21]  Iteration: 66 (29 solution, 36 counterexamples)
[07/26 14:53:22]  Generator returned sat in 0.353000 secs.
[07/26 14:53:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:53:22]  Improved number of small numbers from 63 to 83 out of a max of 99
[07/26 14:53:22]  Verifer returned sat in 0.619570 secs.
[07/26 14:53:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44248.266846   37194.693604 -513.450928  44248.266846    0.094482  37194.693604  7053.573242    0.000000       -0.000244
1   44348.266846   37294.693604 -513.450684  44348.266846  100.000000  37294.693604  7053.573242    0.000000        0.000000
2   44448.266846   37294.693604 -513.450684  44448.266846  100.000000  37294.693604  7053.573242  100.000000        0.000000
3   44448.268066   37394.693604 -513.450684  44448.268066  100.001221  37394.693604  7053.573242    0.001221      -99.998779
4   44850.269287   37494.711104 -513.450684  44850.269287  402.002441  37494.711104  7055.575684  299.982500      200.000000
5   44850.269287   37694.693604 -513.450684  44850.269287    0.010000  37694.693604  7055.575684  100.000000      100.000000
6   45152.289287   37794.693604 -513.450684  45152.289287  402.020000  37794.693604  7157.595684  200.000000      200.000000
7   45152.289287   37894.693604 -513.450684  45152.289287    0.010000  37894.693604  7157.595684  100.000000      100.000000
8   45454.291787   37894.693604 -513.450684  45454.291787  402.002500  37894.693604  7259.598184  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:23]  --------------------------------------------------------------------------------
[07/26 14:53:23]  Iteration: 67 (29 solution, 37 counterexamples)
[07/26 14:53:27]  Generator returned sat in 3.764230 secs.
[07/26 14:53:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:53:27]  Improved gap from 405891/4096 to 100
[07/26 14:53:27]  Improved number of small numbers from 34 to 100 out of a max of 100
[07/26 14:53:27]  Verifer returned sat in 0.339402 secs.
[07/26 14:53:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44089.485596   37035.912354 -515.405762  44089.485596    0.094482  37035.912354  7053.573242    0.000000     -100.000000
1   44389.485596   37137.007080 -515.405762  44389.485596  300.000000  37137.007080  7053.573242  198.905273      100.000000
2   44389.485596   37235.912354 -515.405762  44389.485596    0.047363  37235.912354  7053.573242  100.000000        0.000000
3   44489.485596   37335.912354 -515.405762  44489.485596  200.000000  37335.912354  7053.573242  100.000000        0.000000
4   44789.985596   37535.912354 -515.405762  44789.985596  400.500000  37535.912354  7054.073242  200.000000      200.000000
5   44789.985596   37635.912354 -515.405762  44789.985596  199.952637  37635.912354  7054.073242  100.000000      100.000000
6   45090.390869   37735.610596 -515.405762  45090.390869  400.405273  37735.610596  7154.478516  200.301758      200.000000
7   45090.438232   37835.912354 -515.405762  45090.438232  200.349121  37835.912354  7154.478516  100.047363      100.047363
8   45391.589111   37835.912598 -515.405762  45391.589111  401.198242  37835.912598  7255.676758  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:28]  --------------------------------------------------------------------------------
[07/26 14:53:28]  Iteration: 68 (29 solution, 38 counterexamples)
[07/26 14:53:32]  Generator returned sat in 3.612956 secs.
[07/26 14:53:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:53:32]  Verifer returned unsat in 0.077179 secs.
[07/26 14:53:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:53:32]  --------------------------------------------------------------------------------
[07/26 14:53:32]  Iteration: 69 (30 solution, 38 counterexamples)
[07/26 14:53:35]  Generator returned sat in 2.707809 secs.
[07/26 14:53:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:53:35]  Improved gap from 0 to 4.6875
[07/26 14:53:36]  Improved number of small numbers from 41 to 100 out of a max of 100
[07/26 14:53:36]  Verifer returned sat in 0.426610 secs.
[07/26 14:53:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44834.181396   37679.750244 -1159.243652  44834.181396    0.094482  37679.750244  7154.431152    0.000000     -100.000000
1   45134.228516   37779.750244 -1159.243652  45134.228516  300.047119  37779.750244  7154.431152  200.047119      100.047119
2   45134.228516   37979.750244 -1159.243652  45134.228516    0.047363  37979.750244  7154.431152    0.047119        0.047119
3   45333.879639   38079.750000 -1159.243652  45333.879639  199.698242  38079.750000  7154.431152   99.698486       99.698242
4   45534.228516   38179.750000 -1159.243652  45534.228516  300.047363  38179.750000  7154.478271  200.000244      200.000000
5   45534.228516   38279.750000 -1159.243652  45534.228516    1.000000  38279.750000  7154.478271  100.000244      100.000000
6   45534.228516   38376.202881 -1159.243652  45534.228516    2.000000  38376.202881  7154.478271    3.547363        0.000000
7   45534.228516   38379.750244 -1064.946289  45534.228516    3.500000  38379.750244  7154.478271    0.000000       -5.702637
8   45539.978516   38385.452881 -1064.946045  45539.978516    5.750000  38385.452881  7154.478271    0.047363      -99.952393
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:53:36]  --------------------------------------------------------------------------------
[07/26 14:53:36]  Iteration: 70 (30 solution, 39 counterexamples)
[07/26 14:53:43]  Generator returned sat in 6.064822 secs.
[07/26 14:53:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:53:43]  Improved gap from 387/8192 to 100
[07/26 14:53:43]  Improved number of small numbers from 49 to 100 out of a max of 100
[07/26 14:53:43]  Verifer returned sat in 0.278970 secs.
[07/26 14:53:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   45034.228271   37679.750244 -1159.243896  45034.228271    0.094482  37679.750244  7154.430908  200.047119      100.047119
1   45034.228271   37879.750244 -1159.243896  45034.228271    0.047363  37879.750244  7154.430908    0.047119        0.047119
2   45234.251953   37879.750244 -1159.243896  45234.251953  200.070801  37879.750244  7154.430908  200.070801      100.070801
3   45234.251953   37979.750244 -1159.243896  45234.251953  200.023682  37979.750244  7154.430908  100.070801        0.070801
4   45534.228516   38179.750244 -1159.243896  45534.228516  400.047363  38179.750244  7154.478271  200.000000      200.000000
5   45534.228516   38279.750244 -1159.243896  45534.228516  150.500000  38279.750244  7154.478271  100.000000      100.000000
6   45735.228516   38379.385498 -1159.243896  45735.228516  301.000000  38379.385498  7155.478271  200.364746      200.000000
7   45735.228516   38379.750244 -1159.243896  45735.228516  200.317627  38379.750244  7155.478271  200.000000      100.000000
8   45935.863770   38479.750244 -1159.243896  45935.863770  400.635254  38479.750244  7156.113525  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:43]  --------------------------------------------------------------------------------
[07/26 14:53:43]  Iteration: 71 (30 solution, 40 counterexamples)
[07/26 14:53:48]  Generator returned sat in 4.093970 secs.
[07/26 14:53:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:53:49]  Improved number of small numbers from 65 to 85 out of a max of 99
[07/26 14:53:49]  Verifer returned sat in 0.701828 secs.
[07/26 14:53:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   45034.228516   37679.750244 -1159.244141  45034.228516    0.094238  37679.750244  7154.466553  200.011719      100.011719
1   45034.228516   37879.750000 -1159.244141  45034.228516    0.047363  37879.750000  7154.466553    0.011963        0.011719
2   45234.251709   37879.750244 -1159.244141  45234.251709  200.035156  37879.750244  7154.466553  200.034912      100.034912
3   45234.251709   38079.750244 -1159.244141  45234.251709  100.011719  38079.750244  7154.466553    0.034912        0.034912
4   45534.228516   38100.750000 -1159.244141  45534.228516  300.011719  38100.750000  7154.478271  279.000244      200.000000
5   45534.228516   38272.832520 -1159.244141  45534.228516  112.000000  38272.832520  7154.478271  106.917725      100.000000
6   45735.851929   38297.773682 -1159.244141  45735.851929  308.541138  38297.773682  7156.101685  281.976562      200.000000
7   45735.851929   38479.750244 -1159.244141  45735.851929  110.511719  38479.750244  7156.101685  100.000000      100.000000
8   45935.863770   38479.750244 -1159.244141  45935.863770  300.011841  38479.750244  7156.113525  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:53:49]  --------------------------------------------------------------------------------
[07/26 14:53:49]  Iteration: 72 (30 solution, 41 counterexamples)
[07/26 14:53:52]  Generator returned sat in 2.006851 secs.
[07/26 14:53:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:53:53]  Verifer returned unsat in 1.178798 secs.
[07/26 14:53:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:53:53]  --------------------------------------------------------------------------------
[07/26 14:53:53]  Iteration: 73 (31 solution, 41 counterexamples)
[07/26 14:53:57]  Generator returned sat in 3.800234 secs.
[07/26 14:53:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:53:57]  Verifer returned unsat in 0.066530 secs.
[07/26 14:53:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:53:57]  --------------------------------------------------------------------------------
[07/26 14:53:57]  Iteration: 74 (32 solution, 41 counterexamples)
[07/26 14:53:59]  Generator returned sat in 1.326681 secs.
[07/26 14:53:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:53:59]  Verifer returned unsat in 0.080006 secs.
[07/26 14:53:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:53:59]  --------------------------------------------------------------------------------
[07/26 14:53:59]  Iteration: 75 (33 solution, 41 counterexamples)
[07/26 14:54:01]  Generator returned sat in 0.799023 secs.
[07/26 14:54:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:54:01]  Improved gap from 0 to 39.0625
[07/26 14:54:01]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 14:54:01]  Verifer returned sat in 0.354289 secs.
[07/26 14:54:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44995.088867   37673.906738 -1188.338379  44995.088867    0.094238  37673.906738  7121.134766  200.047363      100.047363
1   44995.088867   37873.906494 -1188.338379  44995.088867    0.047119  37873.906494  7121.134766    0.047607        0.047363
2   44995.088867   37873.906738 -1159.244141  44995.088867    0.047119  37873.906738  7121.134766    0.047363      -70.858398
3   45365.947266   38005.750000 -1159.244141  45365.947266  370.905762  38005.750000  7121.134766  239.062500      200.000000
4   45499.290527   38144.812256 -1159.244141  45499.290527  372.405762  38144.812256  7154.478027  200.000244      200.000000
5   45499.290527   38244.812500 -1159.244141  45499.290527  135.452881  38244.812500  7154.478027  100.000000      100.000000
6   45536.243408   38246.312500 -1159.244141  45536.243408  136.952881  38246.312500  7154.478027  135.452881       36.952881
7   45539.243408   38344.812500 -1099.197021  45539.243408  138.452881  38344.812500  7154.478027   39.952881        0.000000
8   45639.243408   38384.765381 -1099.197021  45639.243408  139.952881  38384.765381  7154.478027  100.000000        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:54:01]  --------------------------------------------------------------------------------
[07/26 14:54:01]  Iteration: 76 (33 solution, 42 counterexamples)
[07/26 14:54:03]  Generator returned sat in 0.766822 secs.
[07/26 14:54:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:54:03]  Improved gap from 0 to 3.125
[07/26 14:54:03]  Improved number of small numbers from 48 to 60 out of a max of 100
[07/26 14:54:03]  Verifer returned sat in 0.603082 secs.
[07/26 14:54:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44995.088867   37673.951660 -1291.562012  44995.088867    0.093994  37673.951660  7121.134766  200.002441       100.00251
1   44995.088867   37773.951660 -1291.562012  44995.088867    0.047119  37773.951660  7121.134766  100.002441         0.00251
2   44995.088867   37873.951602 -1194.687021  44995.088867    0.047119  37873.951602  7121.134766    0.002500        -3.12250
3   45298.208867   37977.076602 -1194.687021  45298.208867  303.122500  37977.076602  7121.134766  199.997500       199.99750
4   45402.833867   38077.076416 -1194.687021  45402.833867  304.622500  38077.076416  7125.757266  200.000186       200.00000
5   45402.833867   38173.951660 -1194.687021  45402.833867    0.010000  38173.951660  7125.757266  103.124941       100.00000
6   45402.833867   38273.951660 -1194.687021  45402.833867    1.510000  38273.951660  7125.757266    3.124941         0.00000
7   45402.833867   38277.076602 -1099.197021  45402.833867    3.010000  38277.076602  7125.757266    0.000000        -4.51000
8   45407.343867   38281.586602 -1099.197021  45407.343867    4.510000  38281.586602  7125.757266    0.000000      -100.00000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:54:04]  --------------------------------------------------------------------------------
[07/26 14:54:04]  Iteration: 77 (33 solution, 43 counterexamples)
[07/26 14:54:05]  Generator returned sat in 0.309706 secs.
[07/26 14:54:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:54:05]  Verifer returned unsat in 0.068919 secs.
[07/26 14:54:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:54:05]  --------------------------------------------------------------------------------
[07/26 14:54:05]  Iteration: 78 (34 solution, 43 counterexamples)
[07/26 14:54:13]  Generator returned sat in 7.228611 secs.
[07/26 14:54:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:13]  Improved gap from 245375/24576 to 68.75
[07/26 14:54:13]  Improved number of small numbers from 31 to 100 out of a max of 100
[07/26 14:54:13]  Verifer returned sat in 0.422274 secs.
[07/26 14:54:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44717.499756   37391.742676 -909.353271  44717.499756    0.093994  37391.742676  7125.757324  199.999756      199.999756
1   44717.499756   37491.742676 -909.353271  44717.499756  199.999756  37491.742676  7125.757324   99.999756       99.999756
2   44717.546875   37591.742676 -909.353271  44717.546875  100.046875  37591.742676  7125.757324    0.046875        0.046875
3   44915.093750   37617.742676 -909.353271  44915.093750  197.593750  37617.742676  7125.757324  171.593750       97.593750
4   44915.093750   37789.289551 -909.353271  44915.093750  113.500000  37789.289551  7125.757324    0.046875       -2.406250
5   45064.320312   37791.742676 -909.353271  45064.320312  149.273438  37791.742676  7125.757324  146.820312       46.820312
6   45064.320312   37891.742676 -878.103271  45064.320312  100.500000  37891.742676  7125.757324   46.820312      -21.929688
7   45155.000000   37960.492676 -846.853271  45155.000000  137.500000  37960.492676  7125.757324   68.750000        0.000000
8   45172.351562   38029.242676 -846.853271  45172.351562   86.101562  38029.242676  7125.757324   17.351562      -82.648438
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:54:13]  --------------------------------------------------------------------------------
[07/26 14:54:13]  Iteration: 79 (34 solution, 44 counterexamples)
[07/26 14:54:15]  Generator returned sat in 1.329817 secs.
[07/26 14:54:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:15]  Verifer returned unsat in 0.060345 secs.
[07/26 14:54:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:15]  --------------------------------------------------------------------------------
[07/26 14:54:15]  Iteration: 80 (35 solution, 44 counterexamples)
[07/26 14:54:17]  Generator returned sat in 1.184956 secs.
[07/26 14:54:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:17]  Improved gap from 0 to 100
[07/26 14:54:18]  Improved number of small numbers from 47 to 100 out of a max of 100
[07/26 14:54:18]  Verifer returned sat in 0.309519 secs.
[07/26 14:54:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44093.072754   36967.315430 -909.353516  44093.072754    0.093750  36967.315430  7125.757080    0.000244      -84.380127
1   44277.500000   37051.695801 -909.353516  44277.500000  184.427490  37051.695801  7125.757080  100.047119        0.047119
2   44277.500000   37151.695801 -909.353516  44277.500000    0.047119  37151.695801  7125.757080    0.047119      -99.952881
3   44677.500000   37290.251221 -909.353516  44677.500000  400.047119  37290.251221  7125.804199  261.444580      200.000000
4   44777.546875   37397.896729 -909.353516  44777.546875  361.491455  37397.896729  7125.851074  253.799072      200.000000
5   44877.593994   37551.695801 -909.353516  44877.593994  353.846191  37551.695801  7125.898193  200.000000      200.000000
6   45054.517090   37651.695801 -909.353516  45054.517090  376.923096  37651.695801  7202.821289  200.000000      200.000000
7   45223.700928   37751.695801 -909.353516  45223.700928  369.183838  37751.695801  7272.005127  200.000000      200.000000
8   45385.192383   37751.695801 -909.353516  45385.192383  361.491455  37751.695801  7333.496582  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:54:18]  --------------------------------------------------------------------------------
[07/26 14:54:18]  Iteration: 81 (35 solution, 45 counterexamples)
[07/26 14:54:19]  Generator returned sat in 0.422237 secs.
[07/26 14:54:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:19]  Improved gap from 1/8192 to 0
[07/26 14:54:19]  Improved number of small numbers from 80 to 100 out of a max of 100
[07/26 14:54:19]  Verifer returned sat in 0.254367 secs.
[07/26 14:54:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   44093.072510   36967.315186 -1108.353516  44093.072510    0.093506  36967.315186  7125.75708    0.000244      -84.380371
1   44277.499756   37051.695801 -1108.353516  44277.499756  184.427490  37051.695801  7125.75708  100.046875        0.046875
2   44277.499756   37151.695801 -1108.353516  44277.499756    0.047119  37151.695801  7125.75708    0.046875      -99.953125
3   44477.452881   37351.695801 -1108.353516  44477.452881  200.000000  37351.695801  7125.75708    0.000000        0.000000
4   44477.952881   37352.195557 -1008.853516  44477.952881    0.500000  37352.195557  7125.75708    0.000244        0.000000
5   44478.452637   37352.695312  -909.353271  44478.452637    0.500000  37352.695312  7125.75708    0.000244        0.000000
6   44478.952393   37352.695557  -809.853271  44478.952393    0.500000  37352.695557  7125.75708    0.499756       -0.000244
7   44478.952637   37353.195557  -710.353271  44478.952637    0.500000  37353.195557  7125.75708    0.000000       -0.500000
8   44479.452637   37353.695557  -610.353516  44479.452637    0.500000  37353.695557  7125.75708    0.000000       -0.000244
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:54:19]  --------------------------------------------------------------------------------
[07/26 14:54:19]  Iteration: 82 (35 solution, 46 counterexamples)
[07/26 14:54:21]  Generator returned sat in 1.239279 secs.
[07/26 14:54:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:22]  Improved gap from 0 to 12.5
[07/26 14:54:22]  Improved number of small numbers from 44 to 100 out of a max of 100
[07/26 14:54:22]  Verifer returned sat in 0.834236 secs.
[07/26 14:54:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   44243.832520   36718.122070 -895.045654  44243.832520    0.093506  36718.122070  7125.710449  400.000000      300.000000
1   44243.832520   36818.122070 -895.045654  44243.832520    0.046875  36818.122070  7125.710449  300.000000      200.000000
2   44343.879150   36942.075195 -895.045654  44343.879150  400.046631  36942.075195  7125.757080  276.046875      200.000000
3   44436.832275   37118.121826 -895.045654  44436.832275  369.000000  37118.121826  7125.757080  192.953369      192.953125
4   44436.832275   37218.121826 -895.045654  44436.832275  185.000000  37218.121826  7125.757080   92.953369       92.953125
5   44436.878906   37305.622070 -895.045654  44436.878906   93.000000  37305.622070  7125.757080    5.499756       -7.000244
6   44478.379150   37318.122070 -829.545654  44478.379150   47.000000  37318.122070  7125.757080   34.500000        0.000000
7   44478.379150   37352.622070 -742.045654  44478.379150   24.000000  37352.622070  7125.757080    0.000000      -12.500000
8   44490.879150   37365.122070 -742.045654  44490.879150   12.500000  37365.122070  7125.757080    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:54:23]  --------------------------------------------------------------------------------
[07/26 14:54:23]  Iteration: 83 (35 solution, 47 counterexamples)
[07/26 14:54:29]  Generator returned sat in 5.644973 secs.
[07/26 14:54:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:54:29]  Improved gap from 0 to 1.5625
[07/26 14:54:29]  Improved number of small numbers from 71 to 100 out of a max of 100
[07/26 14:54:29]  Verifer returned sat in 0.277338 secs.
[07/26 14:54:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   43843.832275   36718.075439 -895.045898  43843.832275    0.093262  36718.075439  7125.710449    0.046387      -99.953613
1   44143.785645   36818.075439 -895.045898  44143.785645  299.999756  36818.075439  7125.710449  199.999756       99.999756
2   44143.785889   36918.075439 -895.045898  44143.785889  200.000000  36918.075439  7125.710449  100.000000        0.000000
3   44343.785889   37118.075195 -895.045898  44343.785889  300.000000  37118.075195  7125.710449  100.000244      100.000000
4   44343.785889   37216.512939 -895.045898  44343.785889    2.000000  37216.512939  7125.710449    1.562500        0.000000
5   44344.223389   37218.465820 -796.998779  44344.223389    2.000000  37218.465820  7125.710449    0.047119       -1.515381
6   44346.176270   37220.419189 -699.343018  44346.176270    2.000000  37220.419189  7125.710449    0.046631       -1.906738
7   44348.129639   37222.372559 -601.342773  44348.129639    2.000000  37222.372559  7125.710449    0.046631       -1.953125
8   44350.083008   37224.372559 -601.342773  44350.083008    2.000000  37224.372559  7125.710449    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:54:29]  --------------------------------------------------------------------------------
[07/26 14:54:29]  Iteration: 84 (35 solution, 48 counterexamples)
[07/26 14:54:33]  Generator returned sat in 2.956220 secs.
[07/26 14:54:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:54:33]  Improved gap from 49247/16384 to 68.75
[07/26 14:54:34]  Improved number of small numbers from 61 to 75 out of a max of 100
[07/26 14:54:34]  Verifer returned sat in 1.034282 secs.
[07/26 14:54:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42400.779053   34975.021901  316.577148  42400.779053    0.093018  34975.021901  7125.710449  300.046702      200.046702
1   42400.779053   35175.021901  316.577148  42400.779053  300.046387  35175.021901  7125.710449  100.046702      100.046702
2   42400.779053   35275.021729  316.577148  42400.779053  100.046631  35275.021729  7125.710449    0.046875        0.046702
3   42498.168701   35303.708424  319.140625  42498.168701   97.436523  35303.708424  7125.710449   68.749827       -0.000173
4   42595.762135   35470.005055  319.140625  42595.762135  166.343262  35470.005055  7125.710449    0.046631       -2.406738
5   42745.207082   35517.812744  319.140625  42745.207082  149.491577  35517.812744  7125.710449  101.683888       47.038208
6   42766.918701   35572.458424  350.390625  42766.918701  123.395508  35572.458424  7125.710449   68.749827       -0.000173
7   42834.543874   35641.208424  381.640625  42834.543874  136.375000  35641.208424  7125.710449   67.625000       -1.125000
8   42854.520558   35709.958496  412.890381  42854.520558   87.601685  35709.958496  7125.710449   18.851613      -49.898560
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:54:34]  --------------------------------------------------------------------------------
[07/26 14:54:34]  Iteration: 85 (35 solution, 49 counterexamples)
[07/26 14:54:38]  Generator returned sat in 2.629580 secs.
[07/26 14:54:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:54:38]  Improved gap from 381/16384 to 12.5
[07/26 14:54:40]  Improved number of small numbers from 18 to 30 out of a max of 100
[07/26 14:54:40]  Verifer returned sat in 1.845980 secs.
[07/26 14:54:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42001.983398   36248.172513 -856.573463  42001.983398    0.092773  36248.172513  5741.310923   12.499963       12.499963
1   42001.983398   36248.172513 -769.073463  42001.983398    0.023438  36248.172513  5741.310923   12.499963       -0.000037
2   42014.483436   36260.672513 -681.573463  42014.483436   25.000000  36260.672513  5741.310923   12.500000        0.000000
3   42014.483436   36273.172513 -594.073463  42014.483436    0.023254  36273.172513  5741.310923    0.000000      -12.500000
4   42029.029944   36285.672513 -506.573486  42029.029944   14.546509  36285.672513  5741.310923    2.046509      -10.453514
5   42076.826453   36299.991465 -506.573242  42076.826453   49.843018  36299.991465  5741.310923   35.524065      -62.656761
6   42162.647899   36408.836976 -429.737927  42162.647899  121.345511  36408.836976  5741.310923   12.500000        0.000000
7   42462.671154   36421.337158 -429.737927  42462.671154  312.523254  36421.337158  5741.334177  299.999818      200.000000
8   42462.671154   36521.337158 -429.737927  42462.671154    0.500000  36521.337158  5741.334177  199.999818      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:54:40]  --------------------------------------------------------------------------------
[07/26 14:54:40]  Iteration: 86 (35 solution, 50 counterexamples)
[07/26 14:54:42]  Generator returned sat in 1.616067 secs.
[07/26 14:54:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:54:44]  Improved gap from 0 to 0
[07/26 14:54:45]  Improved number of small numbers from 28 to 40 out of a max of 100
[07/26 14:54:45]  Verifer returned sat in 3.018041 secs.
[07/26 14:54:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42109.213379   36963.514720 -1571.915771  42109.213379    0.092529  36963.514720  5100.978000   44.720659       44.720558
1   42109.213379   37008.220214 -1516.636549  42109.213379    0.015625  37008.220214  5100.978000    0.015165       -0.000220
2   42109.228983   37008.235599 -1422.651855  42109.228983    0.030769  37008.235599  5100.978000    0.015385       -5.999922
3   42115.244368   37014.250983 -1322.667480  42115.244368    6.030769  37014.250983  5100.978000    0.015385       -0.000162
4   42151.643269   37050.649885 -1259.066220  42151.643269   36.414286  37050.649885  5100.978000    0.015385        0.000000
5   42229.464148   37050.665269 -1259.066162  42229.464148   77.836264  37050.665269  5100.978000   77.820879      -22.179063
6   42291.612500   37190.547687 -1199.035450  42291.612500  139.969231  37190.547687  5100.978000    0.086813        0.000000
7   42591.627884   37190.634521 -1199.035450  42591.627884  300.102198  37190.634521  5100.993384  299.999978      200.000000
8   42591.627884   37290.634521 -1199.035450  42591.627884    0.500000  37290.634521  5100.993384  199.999978      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:54:46]  --------------------------------------------------------------------------------
[07/26 14:54:46]  Iteration: 87 (35 solution, 51 counterexamples)
[07/26 14:54:56]  Generator returned sat in 10.032979 secs.
[07/26 14:54:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:54:57]  Improved number of small numbers from 39 to 51 out of a max of 99
[07/26 14:54:57]  Verifer returned sat in 0.868514 secs.
[07/26 14:54:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   42009.221680   36908.217471 -1316.625732  42009.221680    0.092285  36908.217471  5101.004013    0.000196       -0.002304
1   42309.226483   37008.219971 -1316.625732  42309.226483  300.005000  37008.219971  5101.006513  200.000000      200.000000
2   42309.226483   37108.219971 -1316.625732  42309.226483    0.002686  37108.219971  5101.006513  100.000000      100.000000
3   42509.223983   37158.223721 -1316.625732  42509.223983  299.997500  37158.223721  5101.006513  249.993750      199.997500
4   42659.735233   37208.219971 -1316.625732  42659.735233  400.505000  37208.219971  5151.515263  300.000000      200.000000
5   42659.735233   37407.968721 -1316.625732  42659.735233    0.010000  37407.968721  5151.515263  100.251250      100.000000
6   42859.737733   37408.219971 -1316.625732  42859.737733  300.253750  37408.219971  5151.517763  300.000000      200.000000
7   42859.737733   37608.219971 -1316.625732  42859.737733    0.010000  37608.219971  5151.517763  100.000000      100.000000
8   43160.242733   37608.219971 -1316.625732  43160.242733  400.505000  37608.219971  5252.022763  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:54:58]  --------------------------------------------------------------------------------
[07/26 14:54:58]  Iteration: 88 (35 solution, 52 counterexamples)
[07/26 14:55:05]  Generator returned sat in 7.086699 secs.
[07/26 14:55:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:06]  Verifer returned unsat in 0.070999 secs.
[07/26 14:55:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:06]  --------------------------------------------------------------------------------
[07/26 14:55:06]  Iteration: 89 (36 solution, 52 counterexamples)
[07/26 14:55:07]  Generator returned sat in 0.401371 secs.
[07/26 14:55:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:07]  Verifer returned unsat in 0.140817 secs.
[07/26 14:55:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:07]  --------------------------------------------------------------------------------
[07/26 14:55:07]  Iteration: 90 (37 solution, 52 counterexamples)
[07/26 14:55:12]  Generator returned sat in 4.321279 secs.
[07/26 14:55:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:13]  Improved number of small numbers from 26 to 95 out of a max of 99
[07/26 14:55:13]  Verifer returned sat in 0.855793 secs.
[07/26 14:55:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   41691.956055   36340.486816 -848.892578  41691.956055    0.092041  36340.486816  5151.469238  200.000000      100.000000
1   41691.956055   36540.486572 -848.892578  41691.956055    0.045898  36540.486572  5151.469238    0.000244        0.000000
2   41991.909668   36540.486816 -848.892578  41991.909668  299.953857  36540.486816  5151.469238  299.953613      199.953613
3   41991.909668   36740.486816 -848.892578  41991.909668  149.772949  36740.486816  5151.469238   99.953613       99.953613
4   42192.001953   36840.032715 -848.892578  42192.001953  300.045898  36840.032715  5151.515137  200.454102      200.000000
5   42192.001953   36940.486816 -848.892578  42192.001953  149.773071  36940.486816  5151.515137  100.000000      100.000000
6   42392.048096   37040.032959 -848.892578  42392.048096  300.046143  37040.032959  5151.561279  200.453857      200.000000
7   42392.048096   37140.486816 -848.892578  42392.048096  149.773071  37140.486816  5151.561279  100.000000      100.000000
8   42592.094238   37140.486816 -848.892578  42592.094238  300.046143  37140.486816  5151.607422  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:55:13]  --------------------------------------------------------------------------------
[07/26 14:55:13]  Iteration: 91 (37 solution, 53 counterexamples)
[07/26 14:55:19]  Generator returned sat in 5.307751 secs.
[07/26 14:55:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:20]  Verifer returned unsat in 0.803571 secs.
[07/26 14:55:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:20]  --------------------------------------------------------------------------------
[07/26 14:55:20]  Iteration: 92 (38 solution, 53 counterexamples)
[07/26 14:55:21]  Generator returned sat in 0.368711 secs.
[07/26 14:55:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:23]  Verifer returned unsat in 2.074229 secs.
[07/26 14:55:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:23]  --------------------------------------------------------------------------------
[07/26 14:55:23]  Iteration: 93 (39 solution, 53 counterexamples)
[07/26 14:55:24]  Generator returned sat in 0.342006 secs.
[07/26 14:55:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:26]  Verifer returned unsat in 1.479488 secs.
[07/26 14:55:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:26]  --------------------------------------------------------------------------------
[07/26 14:55:26]  Iteration: 94 (40 solution, 53 counterexamples)
[07/26 14:55:27]  Generator returned sat in 0.333175 secs.
[07/26 14:55:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:28]  Verifer returned unsat in 1.244425 secs.
[07/26 14:55:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:28]  --------------------------------------------------------------------------------
[07/26 14:55:28]  Iteration: 95 (41 solution, 53 counterexamples)
[07/26 14:55:29]  Generator returned sat in 0.332564 secs.
[07/26 14:55:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:30]  Verifer returned unsat in 0.798164 secs.
[07/26 14:55:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:30]  --------------------------------------------------------------------------------
[07/26 14:55:30]  Iteration: 96 (42 solution, 53 counterexamples)
[07/26 14:55:31]  Generator returned sat in 0.304727 secs.
[07/26 14:55:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:32]  Verifer returned unsat in 1.011418 secs.
[07/26 14:55:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:32]  --------------------------------------------------------------------------------
[07/26 14:55:32]  Iteration: 97 (43 solution, 53 counterexamples)
[07/26 14:55:34]  Generator returned sat in 0.547203 secs.
[07/26 14:55:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:36]  Verifer returned unsat in 2.011538 secs.
[07/26 14:55:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:36]  --------------------------------------------------------------------------------
[07/26 14:55:36]  Iteration: 98 (44 solution, 53 counterexamples)
[07/26 14:55:37]  Generator returned sat in 0.330362 secs.
[07/26 14:55:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:38]  Verifer returned unsat in 1.084965 secs.
[07/26 14:55:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:38]  --------------------------------------------------------------------------------
[07/26 14:55:38]  Iteration: 99 (45 solution, 53 counterexamples)
[07/26 14:55:39]  Generator returned sat in 0.304076 secs.
[07/26 14:55:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:40]  Verifer returned unsat in 0.697210 secs.
[07/26 14:55:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:40]  --------------------------------------------------------------------------------
[07/26 14:55:40]  Iteration: 100 (46 solution, 53 counterexamples)
[07/26 14:55:41]  Generator returned sat in 0.407186 secs.
[07/26 14:55:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:42]  Verifer returned unsat in 0.758799 secs.
[07/26 14:55:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:42]  --------------------------------------------------------------------------------
[07/26 14:55:42]  Iteration: 101 (47 solution, 53 counterexamples)
[07/26 14:55:43]  Generator returned sat in 0.308067 secs.
[07/26 14:55:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:44]  Verifer returned unsat in 1.067222 secs.
[07/26 14:55:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:44]  --------------------------------------------------------------------------------
[07/26 14:55:44]  Iteration: 102 (48 solution, 53 counterexamples)
[07/26 14:55:45]  Generator returned sat in 0.285557 secs.
[07/26 14:55:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:47]  Verifer returned unsat in 1.605770 secs.
[07/26 14:55:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:47]  --------------------------------------------------------------------------------
[07/26 14:55:47]  Iteration: 103 (49 solution, 53 counterexamples)
[07/26 14:55:48]  Generator returned sat in 0.294787 secs.
[07/26 14:55:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:50]  Verifer returned unsat in 1.898692 secs.
[07/26 14:55:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:50]  --------------------------------------------------------------------------------
[07/26 14:55:50]  Iteration: 104 (50 solution, 53 counterexamples)
[07/26 14:55:51]  Generator returned sat in 0.577589 secs.
[07/26 14:55:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:53]  Verifer returned unsat in 2.170663 secs.
[07/26 14:55:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:53]  --------------------------------------------------------------------------------
[07/26 14:55:53]  Iteration: 105 (51 solution, 53 counterexamples)
[07/26 14:55:54]  Generator returned sat in 0.316322 secs.
[07/26 14:55:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:55]  Verifer returned unsat in 0.725249 secs.
[07/26 14:55:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:55]  --------------------------------------------------------------------------------
[07/26 14:55:55]  Iteration: 106 (52 solution, 53 counterexamples)
[07/26 14:55:59]  Generator returned sat in 3.187095 secs.
[07/26 14:55:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:59]  Verifer returned unsat in 0.053892 secs.
[07/26 14:55:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:55:59]  --------------------------------------------------------------------------------
[07/26 14:55:59]  Iteration: 107 (53 solution, 53 counterexamples)
[07/26 14:56:00]  Generator returned sat in 0.323752 secs.
[07/26 14:56:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:00]  Verifer returned unsat in 0.063967 secs.
[07/26 14:56:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:00]  --------------------------------------------------------------------------------
[07/26 14:56:00]  Iteration: 108 (54 solution, 53 counterexamples)
[07/26 14:56:01]  Generator returned sat in 0.315196 secs.
[07/26 14:56:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:02]  Verifer returned unsat in 0.046131 secs.
[07/26 14:56:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:02]  --------------------------------------------------------------------------------
[07/26 14:56:02]  Iteration: 109 (55 solution, 53 counterexamples)
[07/26 14:56:03]  Generator returned sat in 0.292482 secs.
[07/26 14:56:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:03]  Verifer returned unsat in 0.049999 secs.
[07/26 14:56:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:03]  --------------------------------------------------------------------------------
[07/26 14:56:03]  Iteration: 110 (56 solution, 53 counterexamples)
[07/26 14:56:04]  Generator returned sat in 0.359646 secs.
[07/26 14:56:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:04]  Improved gap from 0 to 1.5625
[07/26 14:56:04]  Improved number of small numbers from 20 to 100 out of a max of 100
[07/26 14:56:04]  Verifer returned sat in 0.483177 secs.
[07/26 14:56:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36008.418945   31056.352783  4486.536133  36008.418945    0.091797  31056.352783  4752.020264  200.045898      200.045654
1   36008.418945   31056.353027  4486.536133  36008.418945    0.046143  31056.353027  4752.020264  200.045654      100.045654
2   36008.419189   31256.353027  4486.536133  36008.419189  200.045898  31256.353027  4752.020264    0.045898        0.045898
3   36307.919189   31356.353027  4486.536133  36307.919189  299.545898  31356.353027  4752.020264  199.545898      199.545898
4   36408.419189   31456.352783  4486.536133  36408.419189  300.045898  31456.352783  4752.066162  200.000244      200.000000
5   36408.419189   31456.353027  4486.536133  36408.419189    1.000000  31456.353027  4752.066162  200.000000      100.000000
6   36408.419189   31654.398682  4486.536133  36408.419189    1.500000  31654.398682  4752.066162    1.954346        0.000000
7   36408.464844   31656.353027  4584.973633  36408.464844    2.000000  31656.353027  4752.066162    0.045654       -1.516846
8   36410.919189   31657.915527  4584.973877  36410.919189    2.500000  31657.915527  4752.066162    0.937500      -99.062256
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:05]  --------------------------------------------------------------------------------
[07/26 14:56:05]  Iteration: 111 (56 solution, 54 counterexamples)
[07/26 14:56:06]  Generator returned sat in 0.874733 secs.
[07/26 14:56:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:07]  Improved gap from 1/400 to 0
[07/26 14:56:07]  Improved number of small numbers from 52 to 71 out of a max of 100
[07/26 14:56:07]  Verifer returned sat in 0.702619 secs.
[07/26 14:56:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36008.418701   30956.401123  4486.536133  36008.418701    0.091797  30956.401123  4752.020264  299.997314      299.997256
1   36008.418701   31056.401123  4486.536133  36008.418701    0.045898  31056.401123  4752.020264  199.997314      199.997256
2   36107.926514   31056.401367  4486.536133  36107.926514  299.505127  31056.401367  4752.020264  299.504883      199.505068
3   36107.926514   31256.401182  4486.536133  36107.926514  299.502500  31256.401182  4752.020264   99.505068       99.505068
4   36308.423945   31356.401123  4486.536133  36308.423945  300.002500  31356.401123  4752.022764  200.000059      200.000000
5   36308.423945   31456.401123  4486.536133  36308.423945    0.010000  31456.401123  4752.022764  100.000059      100.000000
6   36308.423945   31555.388916  4486.536133  36308.423945    0.510000  31555.388916  4752.022764    1.012266        0.000000
7   36308.423945   31556.401182  4586.535889  36308.423945    1.010000  31556.401182  4752.022764    0.000000       -0.000244
8   36309.933945   31557.911133  4685.026123  36309.933945    1.510000  31557.911133  4752.022764    0.000049       -0.000010
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:07]  --------------------------------------------------------------------------------
[07/26 14:56:07]  Iteration: 112 (56 solution, 55 counterexamples)
[07/26 14:56:15]  Generator returned sat in 6.824699 secs.
[07/26 14:56:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:15]  Improved gap from 47/4096 to 14.0625
[07/26 14:56:16]  Improved number of small numbers from 27 to 35 out of a max of 100
[07/26 14:56:16]  Verifer returned sat in 1.151901 secs.
[07/26 14:56:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   35880.162109   31114.076857  4228.858983  35880.162109    0.091797  31114.076857  4752.022764   14.062488       14.062488
1   35880.162109   31114.076857  4314.796483  35880.162109    0.045898  31114.076857  4752.022764   14.062488       -0.000012
2   35894.359971   31128.139357  4400.598633  35894.359971   28.260350  31128.139357  4752.022764   14.197850        0.000000
3   35894.359971   31142.337207  4486.536133  35894.359971    0.011475  31142.337207  4752.022764    0.000000      -14.062500
4   35908.513095   31156.399707  4572.473633  35908.513095   14.153124  31156.399707  4752.022764    0.090624      -13.971876
5   35957.890144   31174.348376  4572.473633  35957.890144   49.467673  31174.348376  4752.022764   31.519004      -64.594827
6   36048.410996   31282.325732  4646.547607  36048.410996  122.039856  31282.325732  4752.022764   14.062500        0.000000
7   36348.422471   31296.388428  4646.547607  36348.422471  314.073975  31296.388428  4752.034238  299.999805      200.000000
8   36348.422471   31396.388428  4646.547607  36348.422471    0.500000  31396.388428  4752.034238  199.999805      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:16]  --------------------------------------------------------------------------------
[07/26 14:56:16]  Iteration: 113 (56 solution, 56 counterexamples)
[07/26 14:56:21]  Generator returned sat in 3.976843 secs.
[07/26 14:56:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:22]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:56:22]  Verifer returned sat in 0.462277 secs.
[07/26 14:56:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36008.665771   30956.643066  4386.292725  36008.665771    0.091797  30956.643066  4752.022705  300.000000           300.0
1   36008.665771   31056.643066  4386.292725  36008.665771    0.045898  31056.643066  4752.022705  200.000000           200.0
2   36008.665771   31156.643066  4386.292725  36008.665771    0.022949  31156.643066  4752.022705  100.000000           100.0
3   36008.665771   31256.620117  4386.292725  36008.665771    0.137695  31256.620117  4752.022705    0.022949             0.0
4   36308.688721   31353.643066  4386.292725  36308.688721  300.045898  31353.643066  4752.045654  203.000000           200.0
5   36308.688721   31456.529541  4386.292725  36308.688721    0.500000  31456.529541  4752.045654  100.113525           100.0
6   36508.711670   31456.643066  4386.292725  36508.711670  300.136475  31456.643066  4752.068604  300.000000           200.0
7   36508.711670   31655.029541  4386.292725  36508.711670    0.500000  31655.029541  4752.068604  101.613525           100.0
8   36708.734619   31656.643066  4386.292725  36708.734619  301.636475  31656.643066  4752.091553  300.000000           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:22]  --------------------------------------------------------------------------------
[07/26 14:56:22]  Iteration: 114 (56 solution, 57 counterexamples)
[07/26 14:56:24]  Generator returned sat in 0.722642 secs.
[07/26 14:56:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:24]  Improved number of small numbers from 89 to 89 out of a max of 99
[07/26 14:56:24]  Verifer returned sat in 0.314421 secs.
[07/26 14:56:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36008.665527   30956.643066  4386.292725  36008.665527    0.091553  30956.643066  4752.022705  299.999756      299.999756
1   36008.665527   31056.642822  4386.292725  36008.665527    0.045654  31056.642822  4752.022705  200.000000      199.999756
2   36008.665527   31156.398066  4386.292725  36008.665527    0.022705  31156.398066  4752.022705  100.244756       99.999756
3   36008.665527   31256.620117  4386.292725  36008.665527    0.137695  31256.620117  4752.022705    0.022705       -0.000244
4   36308.688721   31353.642822  4386.292725  36308.688721  300.045898  31353.642822  4752.045654  203.000244      200.000000
5   36308.688721   31456.529541  4386.292725  36308.688721    0.010000  31456.529541  4752.045654  100.113525      100.000000
6   36508.711670   31456.643066  4386.292725  36508.711670  300.136475  31456.643066  4752.068604  300.000000      200.000000
7   36508.711670   31655.145444  4386.292725  36508.711670    0.010000  31655.145444  4752.068604  101.497622      100.000000
8   36708.721670   31656.643066  4386.292725  36708.721670  301.507622  31656.643066  4752.078604  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:24]  --------------------------------------------------------------------------------
[07/26 14:56:24]  Iteration: 115 (56 solution, 58 counterexamples)
[07/26 14:56:37]  Generator returned sat in 12.091906 secs.
[07/26 14:56:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:37]  Verifer returned unsat in 0.069856 secs.
[07/26 14:56:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:37]  --------------------------------------------------------------------------------
[07/26 14:56:37]  Iteration: 116 (57 solution, 58 counterexamples)
[07/26 14:56:39]  Generator returned sat in 0.527312 secs.
[07/26 14:56:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:39]  Verifer returned unsat in 0.063962 secs.
[07/26 14:56:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:39]  --------------------------------------------------------------------------------
[07/26 14:56:39]  Iteration: 117 (58 solution, 58 counterexamples)
[07/26 14:56:40]  Generator returned sat in 0.450940 secs.
[07/26 14:56:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:40]  Verifer returned unsat in 0.058173 secs.
[07/26 14:56:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:40]  --------------------------------------------------------------------------------
[07/26 14:56:40]  Iteration: 118 (59 solution, 58 counterexamples)
[07/26 14:56:45]  Generator returned sat in 3.812818 secs.
[07/26 14:56:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:46]  Verifer returned unsat in 1.243704 secs.
[07/26 14:56:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:46]  --------------------------------------------------------------------------------
[07/26 14:56:46]  Iteration: 119 (60 solution, 58 counterexamples)
[07/26 14:56:47]  Generator returned sat in 0.391911 secs.
[07/26 14:56:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:48]  Verifer returned unsat in 0.918324 secs.
[07/26 14:56:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:48]  --------------------------------------------------------------------------------
[07/26 14:56:48]  Iteration: 120 (61 solution, 58 counterexamples)
[07/26 14:56:50]  Generator returned sat in 0.366820 secs.
[07/26 14:56:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:50]  Verifer returned unsat in 0.650924 secs.
[07/26 14:56:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:50]  --------------------------------------------------------------------------------
[07/26 14:56:50]  Iteration: 121 (62 solution, 58 counterexamples)
[07/26 14:56:51]  Generator returned sat in 0.391234 secs.
[07/26 14:56:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:53]  Verifer returned unsat in 1.338809 secs.
[07/26 14:56:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:53]  --------------------------------------------------------------------------------
[07/26 14:56:53]  Iteration: 122 (63 solution, 58 counterexamples)
[07/26 14:56:55]  Generator returned sat in 1.075863 secs.
[07/26 14:56:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:55]  Verifer returned unsat in 0.264578 secs.
[07/26 14:56:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:55]  --------------------------------------------------------------------------------
[07/26 14:56:55]  Iteration: 123 (64 solution, 58 counterexamples)
[07/26 14:56:58]  Generator returned sat in 2.044659 secs.
[07/26 14:56:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:58]  Verifer returned unsat in 0.112842 secs.
[07/26 14:56:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:58]  --------------------------------------------------------------------------------
[07/26 14:56:58]  Iteration: 124 (65 solution, 58 counterexamples)
[07/26 14:57:01]  Generator returned sat in 1.562113 secs.
[07/26 14:57:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:01]  Improved gap from 351881/24576 to 68.75
[07/26 14:57:01]  Improved number of small numbers from 37 to 100 out of a max of 100
[07/26 14:57:01]  Verifer returned sat in 0.484996 secs.
[07/26 14:57:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36349.444336   31466.125977  3745.748535  36349.444336    0.091309  31466.125977  4752.022705  131.295654      100.045654
1   36349.444580   31531.625977  3745.748535  36349.444580  131.295898  31531.625977  4752.022705   65.795898        0.045898
2   36349.444580   31597.375977  3776.998535  36349.444580   65.795654  31597.375977  4752.022705    0.045898      -68.704102
3   36718.194336   31766.125977  3776.998535  36718.194336  368.795654  31766.125977  4752.068359  200.000000      200.000000
4   36718.194336   31866.125977  3776.998535  36718.194336  152.000000  31866.125977  4752.068359  100.000000      100.000000
5   36786.944336   31888.012207  3776.998535  36786.944336  168.750000  31888.012207  4752.068359  146.863770       68.750000
6   36786.944336   31966.125977  3808.248535  36786.944336  146.818115  31966.125977  4752.068359   68.750000        0.000000
7   36819.694336   32034.875977  3839.498535  36819.694336  101.500000  32034.875977  4752.068359   32.750000      -36.000000
8   36872.819336   32103.626221  3839.498779  36872.819336   85.875000  32103.626221  4752.068359   17.124756      -82.874756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:57:01]  --------------------------------------------------------------------------------
[07/26 14:57:01]  Iteration: 125 (65 solution, 59 counterexamples)
[07/26 14:57:03]  Generator returned sat in 0.882644 secs.
[07/26 14:57:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:57:04]  Improved gap from 163653/4096 to 68.75
[07/26 14:57:04]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 14:57:04]  Verifer returned sat in 0.511838 secs.
[07/26 14:57:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36414.939697   31462.825684  3628.952881  36414.939697    0.091309  31462.825684  4752.068359  200.045654      100.045654
1   36414.939697   31620.813965  3628.952881  36414.939697  200.045410  31620.813965  4752.068359   42.057373        0.045654
2   36414.939941   31662.825928  3628.952881  36414.939941   42.057617  31662.825928  4752.068359    0.045654      -99.954102
3   36614.894287   31794.075684  3628.952881  36614.894287  200.000000  31794.075684  4752.068359   68.750244        0.000244
4   36712.769043   31960.655273  3628.952881  36712.769043  166.625000  31960.655273  4752.068359    0.045410       -2.125000
5   36883.644287   31962.825928  3628.952881  36883.644287  170.920654  31962.825928  4752.068359  168.750000       68.750244
6   36883.644287   32062.825684  3660.202637  36883.644287  151.000000  32062.825684  4752.068359   68.750244        0.000000
7   36950.269043   32131.859375  3691.169189  36950.269043  135.375000  32131.859375  4752.068359   66.341309       -2.408691
8   36970.529785   32200.609375  3691.169189  36970.529785   86.602051  32200.609375  4752.068359   17.852051      -82.147949
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:57:04]  --------------------------------------------------------------------------------
[07/26 14:57:04]  Iteration: 126 (65 solution, 60 counterexamples)
[07/26 14:57:10]  Generator returned sat in 4.876447 secs.
[07/26 14:57:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:10]  Improved gap from 280713/4096 to 68.75
[07/26 14:57:11]  Improved number of small numbers from 90 to 96 out of a max of 100
[07/26 14:57:11]  Verifer returned sat in 0.674634 secs.
[07/26 14:57:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36371.904053   31619.835449  3627.385254  36371.904053    0.091309  31619.835449  4752.068359    0.000244      -99.999756
1   36571.949463   31819.835449  3627.385254  36571.949463  200.045654  31819.835449  4752.068359    0.045654        0.045654
2   36603.199463   31851.085693  3627.385254  36603.199463   31.295654  31851.085693  4752.068359    0.045410      -68.704346
3   36770.336426   31949.518066  3628.952637  36770.336426  167.182373  31949.518066  4752.068359   68.750000        0.000000
4   36867.927734   32115.813965  3628.952637  36867.927734  166.341309  32115.813965  4752.068359    0.045410       -2.408691
5   37017.371582   32118.268311  3628.952637  37017.371582  149.489258  32118.268311  4752.068359  147.034912       47.035156
6   37017.371582   32218.268066  3660.202637  37017.371582  135.091309  32218.268066  4752.068359   47.035156      -21.714844
7   37106.211426   32287.018311  3691.452393  37106.211426  135.875000  32287.018311  4752.068359   67.124756       -1.625244
8   37126.188843   32355.768311  3691.452393  37126.188843   87.102173  32355.768311  4752.068359   18.352173      -81.647827
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:57:11]  --------------------------------------------------------------------------------
[07/26 14:57:11]  Iteration: 127 (65 solution, 61 counterexamples)
[07/26 14:57:15]  Generator returned sat in 3.373935 secs.
[07/26 14:57:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:16]  Improved gap from 187/16384 to 0
[07/26 14:57:17]  Improved number of small numbers from 52 to 74 out of a max of 100
[07/26 14:57:17]  Verifer returned sat in 1.349014 secs.
[07/26 14:57:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   36826.089111   32073.975513  3273.245190  36826.089111    0.091064  32073.975513  4752.068115    0.045483        0.045483
1   36826.089111   32073.975513  3373.199707  36826.089111    0.022949  32073.975513  4752.068115    0.045483        0.000000
2   36826.112109   32074.021167  3473.176514  36826.112109    0.068481  32074.021167  4752.068115    0.022827       -0.000195
3   36848.432275   32078.540039  3531.406738  36848.432275   22.342993  32078.540039  4752.068115   17.824121      -19.449805
4   36867.904907   32115.813965  3631.383911  36867.904907   37.296753  32115.813965  4752.068115    0.022827        0.000000
5   36946.246436   32115.836792  3631.384033  36946.246436   78.364355  32115.836792  4752.068115   78.341528      -21.658350
6   37007.859253   32255.768311  3691.429443  37007.859253  139.954346  32255.768311  4752.068115    0.022827       -0.000122
7   37307.882080   32255.791260  3691.429443  37307.882080  300.045654  32255.791260  4752.090820  300.000000      200.000000
8   37307.882080   32355.791260  3691.429443  37307.882080    2.000000  32355.791260  4752.090820  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:17]  --------------------------------------------------------------------------------
[07/26 14:57:17]  Iteration: 128 (65 solution, 62 counterexamples)
[07/26 14:57:27]  Generator returned sat in 8.966609 secs.
[07/26 14:57:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:27]  Verifer returned unsat in 0.076891 secs.
[07/26 14:57:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:27]  --------------------------------------------------------------------------------
[07/26 14:57:27]  Iteration: 129 (66 solution, 62 counterexamples)
[07/26 14:57:28]  Generator returned sat in 0.473210 secs.
[07/26 14:57:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:28]  Verifer returned unsat in 0.059903 secs.
[07/26 14:57:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:28]  --------------------------------------------------------------------------------
[07/26 14:57:28]  Iteration: 130 (67 solution, 62 counterexamples)
[07/26 14:57:30]  Generator returned sat in 0.460419 secs.
[07/26 14:57:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:30]  Verifer returned unsat in 0.052775 secs.
[07/26 14:57:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:30]  --------------------------------------------------------------------------------
[07/26 14:57:30]  Iteration: 131 (68 solution, 62 counterexamples)
[07/26 14:57:34]  Generator returned sat in 3.315378 secs.
[07/26 14:57:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:34]  Improved gap from 0 to 39.0625
[07/26 14:57:35]  Improved number of small numbers from 35 to 47 out of a max of 100
[07/26 14:57:35]  Verifer returned sat in 1.046741 secs.
[07/26 14:57:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   34325.698730   29772.676270  3530.491943  34325.698730    0.090820  29772.676270  4453.022461  100.000000        0.000214
1   34325.698730   29872.676056  3591.429443  34325.698730    0.022949  29872.676056  4453.022461    0.000214      -39.062286
2   34664.738190   30011.738556  3591.429443  34664.738190  339.039673  30011.738556  4453.022461  199.977173      199.977173
3   35063.806671   30111.738556  3591.429443  35063.806671  599.045654  30111.738556  4752.068115  200.000000      200.000000
4   35163.829498   30210.823730  3591.429443  35163.829498  300.022827  30210.823730  4752.090942  200.914825      200.000000
5   35163.829498   30311.738525  3591.429443  35163.829498  150.511414  30311.738525  4752.090942  100.000031      100.000000
6   35163.829498   30410.923203  3591.429443  35163.829498   76.755707  30410.923203  4752.090942    0.815353        0.000000
7   35202.891998   30411.738556  3652.366943  35202.891998   39.877853  30411.738556  4752.090942   39.062500        0.000000
8   35202.891998   30450.801056  3652.366943  35202.891998   21.438927  30450.801056  4752.090942    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:35]  --------------------------------------------------------------------------------
[07/26 14:57:35]  Iteration: 132 (68 solution, 63 counterexamples)
[07/26 14:57:50]  Generator returned sat in 13.891349 secs.
[07/26 14:57:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:51]  Improved gap from 0 to 39.0625
[07/26 14:57:51]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 14:57:51]  Verifer returned sat in 0.328363 secs.
[07/26 14:57:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   35063.806641   30040.829346  3563.230713  35063.806641    0.090576  30040.829346  4752.068115  270.909180       170.90918
1   35063.806641   30240.829346  3563.230713  35063.806641  270.908936  30240.829346  4752.068115   70.909180        70.90918
2   35063.806641   30240.829590  3592.321533  35063.806641    0.045166  30240.829590  4752.068115   70.908936         0.00000
3   35363.761230   30339.420410  3592.321533  35363.761230  370.863525  30339.420410  4752.068115  272.272705       199.95459
4   35463.852051   30511.738525  3592.321533  35463.852051  372.363525  30511.738525  4752.113525  200.000000       200.00000
5   35463.852051   30573.238770  3592.321533  35463.852051  136.954590  30573.238770  4752.113525  138.499756       100.00000
6   35463.852051   30611.738525  3592.321533  35463.852051  138.454590  30611.738525  4752.113525  100.000000         0.00000
7   35503.806641   30711.738525  3652.366943  35503.806641  139.954590  30711.738525  4752.113525   39.954590         0.00000
8   35605.306641   30751.693359  3652.366943  35605.306641  141.454590  30751.693359  4752.113525  101.499756         1.50000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:51]  --------------------------------------------------------------------------------
[07/26 14:57:51]  Iteration: 133 (68 solution, 64 counterexamples)
[07/26 14:57:56]  Generator returned sat in 4.080189 secs.
[07/26 14:57:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:56]  Verifer returned unsat in 0.070025 secs.
[07/26 14:57:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:56]  --------------------------------------------------------------------------------
[07/26 14:57:56]  Iteration: 134 (69 solution, 64 counterexamples)
[07/26 14:57:58]  Generator returned sat in 0.627199 secs.
[07/26 14:57:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:58]  Verifer returned unsat in 0.132423 secs.
[07/26 14:57:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:58]  --------------------------------------------------------------------------------
[07/26 14:57:58]  Iteration: 135 (70 solution, 64 counterexamples)
[07/26 14:58:00]  Generator returned sat in 1.239274 secs.
[07/26 14:58:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:01]  Verifer returned unsat in 0.683143 secs.
[07/26 14:58:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:01]  --------------------------------------------------------------------------------
[07/26 14:58:01]  Iteration: 136 (71 solution, 64 counterexamples)
[07/26 14:58:04]  Generator returned sat in 2.241759 secs.
[07/26 14:58:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:04]  Verifer returned unsat in 0.063269 secs.
[07/26 14:58:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:04]  --------------------------------------------------------------------------------
[07/26 14:58:04]  Iteration: 137 (72 solution, 64 counterexamples)
[07/26 14:58:06]  Generator returned sat in 1.056145 secs.
[07/26 14:58:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:07]  Improved gap from 0 to 14.0625
[07/26 14:58:08]  Improved number of small numbers from 16 to 25 out of a max of 100
[07/26 14:58:08]  Verifer returned sat in 1.574745 secs.
[07/26 14:58:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   35808.428955   31141.676564  3019.035363  35808.428955    0.090332  31141.676564  4666.752192    0.000199        0.000199
1   36108.474044   31141.676758  3019.035363  36108.474044  300.045288  31141.676758  4666.797480  299.999806      200.000000
2   36108.474044   31241.676564  3019.035363  36108.474044  299.999756  31241.676564  4666.797480  200.000000      100.000000
3   36308.383468   31440.176564  3019.035363  36308.383468  399.909424  31440.176564  4666.797480  201.409424      199.909424
4   36308.428756   31539.449208  3019.035363  36308.428756  201.454712  31539.449208  4666.797480  102.182068       99.954712
5   36308.474044   31627.614064  3019.035363  36308.474044  102.227356  31627.614064  4666.797480   14.062500        0.000000
6   36347.025222   31652.375732  3080.484185  36347.025222   52.613678  31652.375732  4666.797480   27.852010        0.000000
7   36347.025222   31680.227742  3166.421685  36347.025222   27.806839  31680.227742  4666.797480    0.000000      -14.062500
8   36362.428642   31694.290283  3252.359131  36362.428642   15.403419  31694.290283  4666.797480    1.340878      -12.721635
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:58:08]  --------------------------------------------------------------------------------
[07/26 14:58:08]  Iteration: 138 (72 solution, 65 counterexamples)
[07/26 14:58:19]  Generator returned sat in 9.701894 secs.
[07/26 14:58:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:19]  Verifer returned unsat in 0.104052 secs.
[07/26 14:58:19]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:19]  --------------------------------------------------------------------------------
[07/26 14:58:19]  Iteration: 139 (73 solution, 65 counterexamples)
[07/26 14:58:21]  Generator returned sat in 0.682004 secs.
[07/26 14:58:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:21]  Verifer returned unsat in 0.100649 secs.
[07/26 14:58:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:21]  --------------------------------------------------------------------------------
[07/26 14:58:21]  Iteration: 140 (74 solution, 65 counterexamples)
[07/26 14:58:23]  Generator returned sat in 1.443142 secs.
[07/26 14:58:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:24]  Verifer returned unsat in 0.692279 secs.
[07/26 14:58:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:24]  --------------------------------------------------------------------------------
[07/26 14:58:24]  Iteration: 141 (75 solution, 65 counterexamples)
[07/26 14:58:25]  Generator returned sat in 0.546134 secs.
[07/26 14:58:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:26]  Verifer returned unsat in 1.038269 secs.
[07/26 14:58:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:26]  --------------------------------------------------------------------------------
[07/26 14:58:26]  Iteration: 142 (76 solution, 65 counterexamples)
[07/26 14:58:28]  Generator returned sat in 0.563921 secs.
[07/26 14:58:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:29]  Verifer returned unsat in 1.121928 secs.
[07/26 14:58:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:29]  --------------------------------------------------------------------------------
[07/26 14:58:29]  Iteration: 143 (77 solution, 65 counterexamples)
[07/26 14:58:31]  Generator returned sat in 0.506993 secs.
[07/26 14:58:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:32]  Verifer returned unsat in 0.861616 secs.
[07/26 14:58:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:32]  --------------------------------------------------------------------------------
[07/26 14:58:32]  Iteration: 144 (78 solution, 65 counterexamples)
[07/26 14:58:34]  Generator returned sat in 1.480084 secs.
[07/26 14:58:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:34]  Verifer returned unsat in 0.293738 secs.
[07/26 14:58:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:34]  --------------------------------------------------------------------------------
[07/26 14:58:34]  Iteration: 145 (79 solution, 65 counterexamples)
[07/26 14:58:36]  Generator returned sat in 1.091153 secs.
[07/26 14:58:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:38]  Improved number of small numbers from 25 to 33 out of a max of 99
[07/26 14:58:38]  Verifer returned sat in 1.275639 secs.
[07/26 14:58:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   35997.036377   35697.036514  3819.15957  35997.036377    0.090088  35697.036514   0.000000  299.999863      299.999863
1   35997.036377   35699.059097  3819.15957  35997.036377    0.011475  35699.059097   0.000000  297.977280      199.999863
2   35997.036514   35797.036514  3819.15957  35997.036514  297.977417  35797.036514   0.000000  200.000000      100.000000
3   35997.036514   35997.025222  3819.15957  35997.036514  150.028229  35997.025222   0.000000    0.011292        0.000000
4   36297.047805   36097.036514  3819.15957  36297.047805  300.022583  36097.036514   0.011292  200.000000      200.000000
5   36297.047805   36130.384903  3819.15957  36297.047805  199.988708  36130.384903   0.011292  166.651611      100.000000
6   36497.059097   36295.070388  3819.15957  36497.059097  366.662903  36295.070388   0.022583  201.966125      200.000000
7   36497.059097   36397.036514  3819.15957  36497.059097  150.022583  36397.036514   0.022583  100.000000      100.000000
8   36697.081680   36397.036621  3819.15957  36697.081680  300.022583  36397.036621   0.045166  299.999893      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:58:38]  --------------------------------------------------------------------------------
[07/26 14:58:38]  Iteration: 146 (79 solution, 66 counterexamples)
[07/26 14:58:52]  Generator returned sat in 12.880117 secs.
[07/26 14:58:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:52]  Verifer returned unsat in 0.119505 secs.
[07/26 14:58:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:52]  --------------------------------------------------------------------------------
[07/26 14:58:52]  Iteration: 147 (80 solution, 66 counterexamples)
[07/26 14:58:54]  Generator returned sat in 1.016536 secs.
[07/26 14:58:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:54]  Verifer returned unsat in 0.290777 secs.
[07/26 14:58:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:54]  --------------------------------------------------------------------------------
[07/26 14:58:54]  Iteration: 148 (81 solution, 66 counterexamples)
[07/26 14:58:59]  Generator returned sat in 3.417198 secs.
[07/26 14:58:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:00]  Improved gap from 369/8192 to 14.0625
[07/26 14:59:00]  Improved number of small numbers from 30 to 100 out of a max of 100
[07/26 14:59:00]  Verifer returned sat in 1.225168 secs.
[07/26 14:59:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32870.897705   32870.852295  3835.495605  32870.897705    0.090088  32870.852295   0.000000    0.045410        0.022461
1   32870.897705   32870.875244  3835.495605  32870.897705    0.022461  32870.875244   0.000000    0.022461      -99.977539
2   33270.897705   32970.875244  3835.495605  33270.897705  400.022461  32970.875244   0.022461  300.000000      200.000000
3   33358.897705   33070.875244  3835.495605  33358.897705  388.000000  33070.875244   0.022461  288.000000      188.000000
4   33358.897705   33260.397461  3835.495605  33358.897705  195.000000  33260.397461   0.022461   98.477783       88.000000
5   33358.919922   33344.835205  3847.473145  33358.919922   98.500000  33344.835205   0.022461   14.062256       -0.000244
6   33395.107666   33358.897705  3911.285645  33395.107666   50.250000  33358.897705   0.022461   36.187500        0.000000
7   33395.107666   33395.085205  3997.223145  33395.107666   26.125000  33395.085205   0.022461    0.000000      -14.062500
8   33409.170166   33409.147705  3997.223145  33409.170166   14.062500  33409.147705   0.022461    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:59:00]  --------------------------------------------------------------------------------
[07/26 14:59:00]  Iteration: 149 (81 solution, 67 counterexamples)
[07/26 14:59:04]  Generator returned sat in 2.466333 secs.
[07/26 14:59:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:04]  Verifer returned unsat in 0.069562 secs.
[07/26 14:59:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:04]  --------------------------------------------------------------------------------
[07/26 14:59:04]  Iteration: 150 (82 solution, 67 counterexamples)
[07/26 14:59:06]  Generator returned sat in 0.742556 secs.
[07/26 14:59:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:06]  Verifer returned unsat in 0.057887 secs.
[07/26 14:59:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:06]  --------------------------------------------------------------------------------
[07/26 14:59:06]  Iteration: 151 (83 solution, 67 counterexamples)
[07/26 14:59:08]  Generator returned sat in 1.753899 secs.
[07/26 14:59:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:09]  Improved gap from 9/200 to 0
[07/26 14:59:10]  Improved number of small numbers from 67 to 75 out of a max of 100
[07/26 14:59:10]  Verifer returned sat in 1.235667 secs.
[07/26 14:59:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30879.869873   30807.924922  3578.853271  30879.869873    0.090088  30807.924922      0.000   71.944951        0.045078
1   30879.869873   30879.824922  3678.808105  30879.869873    0.044922  30879.824922      0.000    0.044951       -0.000088
2   30882.959922   30882.869922  3775.718145  30882.959922    3.135000  30882.869922      0.000    0.090000        0.000000
3   30882.959922   30882.959922  3837.178223  30882.959922    0.045000  30882.959922      0.000    0.000000      -38.539922
4   30921.544922   30921.499922  3937.133145  30921.544922   38.585000  30921.499922      0.000    0.045000        0.000000
5   31001.214922   30921.544922  3937.133301  31001.214922   79.715000  30921.544922      0.000   79.670000      -20.329844
6   31061.454922   31061.409922  3997.223145  31061.454922  139.910000  31061.409922      0.000    0.045000        0.000000
7   31361.499922   31061.455078  3997.223145  31361.499922  300.090000  31061.455078      0.045  299.999844      200.000000
8   31361.499922   31161.455078  3997.223145  31361.499922    2.000000  31161.455078      0.045  199.999844      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:10]  --------------------------------------------------------------------------------
[07/26 14:59:10]  Iteration: 152 (83 solution, 68 counterexamples)
[07/26 14:59:13]  Generator returned sat in 2.203270 secs.
[07/26 14:59:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:14]  Verifer returned unsat in 0.966804 secs.
[07/26 14:59:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:14]  --------------------------------------------------------------------------------
[07/26 14:59:14]  Iteration: 153 (84 solution, 68 counterexamples)
[07/26 14:59:16]  Generator returned sat in 0.643103 secs.
[07/26 14:59:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:17]  Verifer returned unsat in 1.073283 secs.
[07/26 14:59:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:17]  --------------------------------------------------------------------------------
[07/26 14:59:17]  Iteration: 154 (85 solution, 68 counterexamples)
[07/26 14:59:19]  Generator returned sat in 1.224355 secs.
[07/26 14:59:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:20]  Verifer returned unsat in 0.971932 secs.
[07/26 14:59:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:20]  --------------------------------------------------------------------------------
[07/26 14:59:20]  Iteration: 155 (86 solution, 68 counterexamples)
[07/26 14:59:22]  Generator returned sat in 0.843774 secs.
[07/26 14:59:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:22]  Improved gap from 369/8192 to 39.0625
[07/26 14:59:23]  Improved number of small numbers from 26 to 100 out of a max of 100
[07/26 14:59:23]  Verifer returned sat in 0.521942 secs.
[07/26 14:59:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30932.145264   30662.235352  3907.042969  30932.145264    0.090088  30662.235352   0.000000  269.909912      169.909912
1   30932.145264   30862.235107  3907.042969  30932.145264    0.045166  30862.235107   0.000000   69.910156       69.909912
2   30932.145264   30862.235352  3937.133057  30932.145264   69.909912  30862.235352   0.000000   69.909912        0.000000
3   31161.280518   31032.145020  3937.133057  31161.280518  299.045166  31032.145020   0.000000  129.135498      129.135254
4   31332.190186   31132.145264  3937.133057  31332.190186  300.045166  31132.145264   0.044922  200.000000      200.000000
5   31332.190186   31232.145020  3937.133057  31332.190186  136.955078  31232.145020   0.044922  100.000244      100.000000
6   31370.145020   31232.145264  3937.133057  31370.145020  137.955078  31232.145264   0.044922  137.954834       37.954834
7   31371.145264   31332.145264  3997.178223  31371.145264  138.955078  31332.145264   0.044922   38.955078       -0.999756
8   31472.145264   31372.100342  3997.178223  31472.145264  139.955078  31372.100342   0.044922  100.000000        0.000244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:23]  --------------------------------------------------------------------------------
[07/26 14:59:23]  Iteration: 156 (86 solution, 69 counterexamples)
[07/26 14:59:25]  Generator returned sat in 1.287882 secs.
[07/26 14:59:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:25]  Verifer returned unsat in 0.093672 secs.
[07/26 14:59:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:25]  --------------------------------------------------------------------------------
[07/26 14:59:25]  Iteration: 157 (87 solution, 69 counterexamples)
[07/26 14:59:27]  Generator returned sat in 0.681744 secs.
[07/26 14:59:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:59:27]  Verifer returned unsat in 0.127839 secs.
[07/26 14:59:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:59:27]  --------------------------------------------------------------------------------
[07/26 14:59:27]  Iteration: 158 (88 solution, 69 counterexamples)
[07/26 14:59:38]  Generator returned sat in 9.547039 secs.
[07/26 14:59:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:59:38]  Verifer returned unsat in 0.057797 secs.
[07/26 14:59:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:59:38]  --------------------------------------------------------------------------------
[07/26 14:59:38]  Iteration: 159 (89 solution, 69 counterexamples)
[07/26 14:59:40]  Generator returned sat in 1.071231 secs.
[07/26 14:59:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:40]  Verifer returned unsat in 0.052843 secs.
[07/26 14:59:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:40]  --------------------------------------------------------------------------------
[07/26 14:59:40]  Iteration: 160 (90 solution, 69 counterexamples)
[07/26 14:59:42]  Generator returned sat in 0.944731 secs.
[07/26 14:59:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:42]  Verifer returned unsat in 0.054291 secs.
[07/26 14:59:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:42]  --------------------------------------------------------------------------------
[07/26 14:59:42]  Iteration: 161 (91 solution, 69 counterexamples)
[07/26 14:59:44]  Generator returned sat in 0.866155 secs.
[07/26 14:59:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:44]  Verifer returned unsat in 0.065560 secs.
[07/26 14:59:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:44]  --------------------------------------------------------------------------------
[07/26 14:59:44]  Iteration: 162 (92 solution, 69 counterexamples)
[07/26 14:59:46]  Generator returned sat in 0.999899 secs.
[07/26 14:59:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:46]  Verifer returned unsat in 0.044991 secs.
[07/26 14:59:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:46]  --------------------------------------------------------------------------------
[07/26 14:59:46]  Iteration: 163 (93 solution, 69 counterexamples)
[07/26 14:59:48]  Generator returned sat in 0.896472 secs.
[07/26 14:59:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:48]  Verifer returned unsat in 0.040757 secs.
[07/26 14:59:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:48]  --------------------------------------------------------------------------------
[07/26 14:59:48]  Iteration: 164 (94 solution, 69 counterexamples)
[07/26 14:59:50]  Generator returned sat in 0.924455 secs.
[07/26 14:59:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:50]  Verifer returned unsat in 0.045276 secs.
[07/26 14:59:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:50]  --------------------------------------------------------------------------------
[07/26 14:59:50]  Iteration: 165 (95 solution, 69 counterexamples)
[07/26 14:59:52]  Generator returned sat in 0.833012 secs.
[07/26 14:59:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:52]  Verifer returned unsat in 0.032019 secs.
[07/26 14:59:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:52]  --------------------------------------------------------------------------------
[07/26 14:59:52]  Iteration: 166 (96 solution, 69 counterexamples)
[07/26 14:59:54]  Generator returned sat in 0.877296 secs.
[07/26 14:59:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:54]  Verifer returned unsat in 0.053151 secs.
[07/26 14:59:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:54]  --------------------------------------------------------------------------------
[07/26 14:59:54]  Iteration: 167 (97 solution, 69 counterexamples)
[07/26 14:59:56]  Generator returned sat in 0.861334 secs.
[07/26 14:59:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:56]  Verifer returned unsat in 0.039998 secs.
[07/26 14:59:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:56]  --------------------------------------------------------------------------------
[07/26 14:59:56]  Iteration: 168 (98 solution, 69 counterexamples)
[07/26 15:00:02]  Generator returned sat in 4.647211 secs.
[07/26 15:00:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:02]  Verifer returned unsat in 0.049966 secs.
[07/26 15:00:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:02]  --------------------------------------------------------------------------------
[07/26 15:00:02]  Iteration: 169 (99 solution, 69 counterexamples)
[07/26 15:00:04]  Generator returned sat in 0.915278 secs.
[07/26 15:00:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:04]  Verifer returned unsat in 0.057179 secs.
[07/26 15:00:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:04]  --------------------------------------------------------------------------------
[07/26 15:00:04]  Iteration: 170 (100 solution, 69 counterexamples)
[07/26 15:00:06]  Generator returned sat in 0.781843 secs.
[07/26 15:00:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:06]  Verifer returned unsat in 0.031462 secs.
[07/26 15:00:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:06]  --------------------------------------------------------------------------------
[07/26 15:00:06]  Iteration: 171 (101 solution, 69 counterexamples)
[07/26 15:00:08]  Generator returned sat in 0.799396 secs.
[07/26 15:00:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:08]  Verifer returned unsat in 0.055225 secs.
[07/26 15:00:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:08]  --------------------------------------------------------------------------------
[07/26 15:00:08]  Iteration: 172 (102 solution, 69 counterexamples)
[07/26 15:00:10]  Generator returned sat in 0.708199 secs.
[07/26 15:00:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:10]  Verifer returned unsat in 0.045145 secs.
[07/26 15:00:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:10]  --------------------------------------------------------------------------------
[07/26 15:00:10]  Iteration: 173 (103 solution, 69 counterexamples)
[07/26 15:00:12]  Generator returned sat in 1.253831 secs.
[07/26 15:00:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:12]  Verifer returned unsat in 0.109798 secs.
[07/26 15:00:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:12]  --------------------------------------------------------------------------------
[07/26 15:00:12]  Iteration: 174 (104 solution, 69 counterexamples)
[07/26 15:00:16]  Generator returned sat in 2.510648 secs.
[07/26 15:00:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:16]  Verifer returned unsat in 0.144004 secs.
[07/26 15:00:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:16]  --------------------------------------------------------------------------------
[07/26 15:00:16]  Iteration: 175 (105 solution, 69 counterexamples)
[07/26 15:00:18]  Generator returned sat in 0.664504 secs.
[07/26 15:00:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:18]  Verifer returned unsat in 0.108037 secs.
[07/26 15:00:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:18]  --------------------------------------------------------------------------------
[07/26 15:00:18]  Iteration: 176 (106 solution, 69 counterexamples)
[07/26 15:00:19]  Generator returned sat in 0.634381 secs.
[07/26 15:00:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:20]  Verifer returned unsat in 0.103704 secs.
[07/26 15:00:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:20]  --------------------------------------------------------------------------------
[07/26 15:00:20]  Iteration: 177 (107 solution, 69 counterexamples)
[07/26 15:00:22]  Generator returned sat in 1.400309 secs.
[07/26 15:00:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:22]  Verifer returned unsat in 0.061862 secs.
[07/26 15:00:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:22]  --------------------------------------------------------------------------------
[07/26 15:00:22]  Iteration: 178 (108 solution, 69 counterexamples)
[07/26 15:00:24]  Generator returned sat in 0.975095 secs.
[07/26 15:00:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:24]  Verifer returned unsat in 0.054511 secs.
[07/26 15:00:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:24]  --------------------------------------------------------------------------------
[07/26 15:00:24]  Iteration: 179 (109 solution, 69 counterexamples)
[07/26 15:00:26]  Generator returned sat in 0.606778 secs.
[07/26 15:00:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:26]  Verifer returned unsat in 0.056610 secs.
[07/26 15:00:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:26]  --------------------------------------------------------------------------------
[07/26 15:00:26]  Iteration: 180 (110 solution, 69 counterexamples)
[07/26 15:00:28]  Generator returned sat in 0.922574 secs.
[07/26 15:00:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:28]  Verifer returned unsat in 0.040122 secs.
[07/26 15:00:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:28]  --------------------------------------------------------------------------------
[07/26 15:00:28]  Iteration: 181 (111 solution, 69 counterexamples)
[07/26 15:00:30]  Generator returned sat in 0.627929 secs.
[07/26 15:00:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:30]  Verifer returned unsat in 0.044115 secs.
[07/26 15:00:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:30]  --------------------------------------------------------------------------------
[07/26 15:00:30]  Iteration: 182 (112 solution, 69 counterexamples)
[07/26 15:00:33]  Generator returned sat in 1.684364 secs.
[07/26 15:00:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:33]  Improved gap from 31661/16384 to 15.625
[07/26 15:00:34]  Improved number of small numbers from 18 to 37 out of a max of 100
[07/26 15:00:34]  Verifer returned sat in 1.501856 secs.
[07/26 15:00:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   29747.788086   29647.742920  4466.463145  29747.788086    0.089844  29647.742920   0.000000  100.045166        0.045250
1   29747.788086   29747.742836  4466.463145  29747.788086    0.045166  29747.742836   0.000000    0.045250      -99.954750
2   30147.787880   29847.742920  4466.463145  30147.787880  400.045044  29847.742920   0.045044  299.999916      200.000000
3   30247.742920   30045.675293  4466.463145  30247.742920  399.954956  30045.675293   0.045044  202.022583      199.955040
4   30247.742920   30144.754097  4466.463145  30247.742920  201.977478  30144.754097   0.045044  102.943779       99.955040
5   30247.787880   30247.697792  4466.463145  30247.787880  102.988739  30247.697792   0.045044    0.045044        0.000000
6   30301.237205   30301.147118  4497.433838  30301.237205   53.494370  30301.147118   0.045044    0.045044      -15.579981
7   30329.939346   30329.849258  4567.983154  30329.939346   28.747185  30329.849258   0.045044    0.045044      -16.328524
8   30346.267895   30346.222851  4567.983154  30346.267895   16.373592  30346.222851   0.045044    0.000000      -99.999975
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:00:34]  --------------------------------------------------------------------------------
[07/26 15:00:34]  Iteration: 183 (112 solution, 70 counterexamples)
[07/26 15:00:38]  Generator returned sat in 2.179796 secs.
[07/26 15:00:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:38]  Improved gap from 0 to 39.0625
[07/26 15:00:38]  Improved number of small numbers from 34 to 100 out of a max of 100
[07/26 15:00:38]  Verifer returned sat in 0.553570 secs.
[07/26 15:00:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30117.166992   29852.212158  4485.001709  30117.166992    0.089844  29852.212158   0.000000  264.954834      164.955078
1   30117.166992   30052.211914  4485.001709  30117.166992    0.045166  30052.211914   0.000000   64.955078       64.955078
2   30117.166992   30078.104248  4520.046631  30117.166992   64.954834  30078.104248   0.000000   39.062744        0.000000
3   30376.126953   30217.166748  4520.046631  30376.126953  298.022705  30217.166748   0.000000  158.960205      158.959961
4   30517.189453   30317.166992  4520.046631  30517.189453  300.022705  30317.166992   0.022461  200.000000      200.000000
5   30517.189453   30381.189209  4520.046631  30517.189453  133.977539  30381.189209   0.022461  135.977783      100.000000
6   30517.189453   30419.166748  4520.046631  30517.189453  135.977539  30419.166748   0.022461   98.000244        0.000000
7   30557.166748   30517.166992  4580.069336  30557.166748  137.977539  30517.166992   0.022461   39.977295        0.000000
8   30657.166992   30557.144531  4580.069336  30657.166992  139.977539  30557.144531   0.022461  100.000000        0.000244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:39]  --------------------------------------------------------------------------------
[07/26 15:00:39]  Iteration: 184 (112 solution, 71 counterexamples)
[07/26 15:00:51]  Generator returned sat in 11.606914 secs.
[07/26 15:00:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:00:52]  Improved gap from 1/200 to 12.5
[07/26 15:00:52]  Improved number of small numbers from 68 to 75 out of a max of 100
[07/26 15:00:52]  Verifer returned sat in 1.014649 secs.
[07/26 15:00:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30487.990723   30475.495703  4170.056631  30487.990723    0.089844  30475.495703      0.000   12.495020       12.495020
1   30487.995703   30475.495703  4257.556396  30487.995703   12.500000  30475.495703      0.000   12.500000       -0.000234
2   30500.505703   30488.005703  4345.046631  30500.505703   25.010000  30488.005703      0.000   12.500000        0.000000
3   30500.505703   30500.505703  4432.546631  30500.505703    1.339375  30500.505703      0.000    0.000000      -12.500000
4   30517.189453   30513.005703  4520.046631  30517.189453   16.683750  30513.005703      0.000    4.183750       -8.316250
5   30566.628203   30525.505703  4520.046631  30566.628203   53.622500  30525.505703      0.000   41.122500      -58.877500
6   30653.000703   30631.179036  4592.551631  30653.000703  127.495000  30631.179036      0.000   21.821667        0.000000
7   30953.005703   30653.000732  4592.551631  30953.005703  321.826667  30653.000732      0.005  299.999971      200.000000
8   30953.005703   30753.000732  4592.551631  30953.005703    0.010000  30753.000732      0.005  199.999971      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:53]  --------------------------------------------------------------------------------
[07/26 15:00:53]  Iteration: 185 (112 solution, 72 counterexamples)
[07/26 15:00:56]  Generator returned sat in 2.463359 secs.
[07/26 15:00:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:00:57]  Verifer returned unsat in 0.938349 secs.
[07/26 15:00:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:00:57]  --------------------------------------------------------------------------------
[07/26 15:00:57]  Iteration: 186 (113 solution, 72 counterexamples)
[07/26 15:01:01]  Generator returned sat in 2.566555 secs.
[07/26 15:01:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:02]  Verifer returned unsat in 1.360704 secs.
[07/26 15:01:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:02]  --------------------------------------------------------------------------------
[07/26 15:01:02]  Iteration: 187 (114 solution, 72 counterexamples)
[07/26 15:01:04]  Generator returned sat in 0.744152 secs.
[07/26 15:01:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:05]  Verifer returned unsat in 1.206349 secs.
[07/26 15:01:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:05]  --------------------------------------------------------------------------------
[07/26 15:01:05]  Iteration: 188 (115 solution, 72 counterexamples)
[07/26 15:01:07]  Generator returned sat in 0.753635 secs.
[07/26 15:01:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:08]  Verifer returned unsat in 0.861969 secs.
[07/26 15:01:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:08]  --------------------------------------------------------------------------------
[07/26 15:01:08]  Iteration: 189 (116 solution, 72 counterexamples)
[07/26 15:01:10]  Generator returned sat in 0.698814 secs.
[07/26 15:01:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:11]  Verifer returned unsat in 1.045387 secs.
[07/26 15:01:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:11]  --------------------------------------------------------------------------------
[07/26 15:01:11]  Iteration: 190 (117 solution, 72 counterexamples)
[07/26 15:01:13]  Generator returned sat in 0.811866 secs.
[07/26 15:01:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:14]  Verifer returned unsat in 1.618047 secs.
[07/26 15:01:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:14]  --------------------------------------------------------------------------------
[07/26 15:01:14]  Iteration: 191 (118 solution, 72 counterexamples)
[07/26 15:01:16]  Generator returned sat in 0.729280 secs.
[07/26 15:01:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:17]  Verifer returned unsat in 1.244911 secs.
[07/26 15:01:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:17]  --------------------------------------------------------------------------------
[07/26 15:01:17]  Iteration: 192 (119 solution, 72 counterexamples)
[07/26 15:01:19]  Generator returned sat in 0.679440 secs.
[07/26 15:01:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:21]  Verifer returned unsat in 1.383557 secs.
[07/26 15:01:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:21]  --------------------------------------------------------------------------------
[07/26 15:01:21]  Iteration: 193 (120 solution, 72 counterexamples)
[07/26 15:01:23]  Generator returned sat in 0.999797 secs.
[07/26 15:01:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:25]  Verifer returned unsat in 2.446736 secs.
[07/26 15:01:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:25]  --------------------------------------------------------------------------------
[07/26 15:01:25]  Iteration: 194 (121 solution, 72 counterexamples)
[07/26 15:01:27]  Generator returned sat in 0.740859 secs.
[07/26 15:01:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:29]  Verifer returned unsat in 1.529128 secs.
[07/26 15:01:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:29]  --------------------------------------------------------------------------------
[07/26 15:01:29]  Iteration: 195 (122 solution, 72 counterexamples)
[07/26 15:01:30]  Generator returned sat in 0.706690 secs.
[07/26 15:01:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:31]  Verifer returned unsat in 0.676962 secs.
[07/26 15:01:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:31]  --------------------------------------------------------------------------------
[07/26 15:01:31]  Iteration: 196 (123 solution, 72 counterexamples)
[07/26 15:01:37]  Generator returned sat in 4.450140 secs.
[07/26 15:01:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:37]  Improved gap from 23/512 to 39.0625
[07/26 15:01:37]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/26 15:01:37]  Verifer returned sat in 0.314096 secs.
[07/26 15:01:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   33600.110352   33500.065430  4238.677734  33600.110352    0.089600  33500.065430   0.000000  100.044922      100.044922
1   33600.110352   33600.065430  4238.677734  33600.110352    0.022217  33600.065430   0.000000    0.044922        0.044922
2   33600.110352   33600.065674  4299.614990  33600.110352    0.022217  33600.065674   0.000000    0.044678      -39.017822
3   33939.105713   33698.610596  4299.614990  33939.105713  339.040039  33698.610596   0.000000  240.495117      199.977539
4   34039.150635   33838.212891  4299.614990  34039.150635  340.540039  33838.212891   0.022461  200.915283      200.000000
5   34039.150635   33939.127930  4299.614990  34039.150635  121.073730  33939.127930   0.022461  100.000244      100.000000
6   34061.724121   33954.116943  4299.614990  34061.724121  122.573730  33954.116943   0.022461  107.584717       22.573486
7   34078.213135   34039.128174  4360.552490  34078.213135  124.073730  34039.128174   0.022461   39.062500        0.000000
8   34164.724365   34078.190674  4360.552490  34164.724365  125.573730  34078.190674   0.022461   86.511230      -13.488770
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:01:37]  --------------------------------------------------------------------------------
[07/26 15:01:37]  Iteration: 197 (123 solution, 73 counterexamples)
[07/26 15:01:43]  Generator returned sat in 4.842351 secs.
[07/26 15:01:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:43]  Verifer returned unsat in 0.124226 secs.
[07/26 15:01:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:43]  --------------------------------------------------------------------------------
[07/26 15:01:43]  Iteration: 198 (124 solution, 73 counterexamples)
[07/26 15:01:46]  Generator returned sat in 1.695355 secs.
[07/26 15:01:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:47]  Verifer returned unsat in 1.085943 secs.
[07/26 15:01:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:47]  --------------------------------------------------------------------------------
[07/26 15:01:47]  Iteration: 199 (125 solution, 73 counterexamples)
[07/26 15:01:50]  Generator returned sat in 1.600381 secs.
[07/26 15:01:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:50]  Verifer returned unsat in 0.094532 secs.
[07/26 15:01:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:50]  --------------------------------------------------------------------------------
[07/26 15:01:50]  Iteration: 200 (126 solution, 73 counterexamples)
[07/26 15:01:59]  Generator returned sat in 7.976218 secs.
[07/26 15:01:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:02:00]  Verifer returned unsat in 0.655493 secs.
[07/26 15:02:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:02:00]  --------------------------------------------------------------------------------
[07/26 15:02:00]  Iteration: 201 (127 solution, 73 counterexamples)
[07/26 15:02:02]  Generator returned sat in 0.800648 secs.
[07/26 15:02:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:02:04]  Verifer returned unsat in 2.333992 secs.
[07/26 15:02:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:02:04]  --------------------------------------------------------------------------------
[07/26 15:02:04]  Iteration: 202 (128 solution, 73 counterexamples)
[07/26 15:02:06]  Generator returned sat in 0.907519 secs.
[07/26 15:02:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:02:07]  Improved number of small numbers from 24 to 99 out of a max of 99
[07/26 15:02:07]  Verifer returned sat in 0.553735 secs.
[07/26 15:02:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   33742.269775   33342.292480  4296.450684  33742.269775    0.089600  33342.292480   0.000000  399.977295      299.977295
1   33742.269775   33442.337402  4296.450684  33742.269775    0.022461  33442.337402   0.000000  299.932373      199.977295
2   33742.269775   33542.292480  4296.450684  33742.269775    0.022461  33542.292480   0.000000  199.977295       99.977295
3   33742.269775   33739.337402  4296.450684  33742.269775  102.955078  33739.337402   0.000000    2.932373       -0.022705
4   34042.314941   33842.292480  4296.450684  34042.314941  302.977539  33842.292480   0.022461  200.000000      200.000000
5   34042.314941   33874.655762  4296.450684  34042.314941  199.977539  33874.655762   0.022461  167.636719      100.000000
6   34242.337402   34042.292480  4296.450684  34242.337402  367.659180  34042.292480   0.044922  200.000000      200.000000
7   34242.337402   34142.292480  4296.450684  34242.337402  151.477539  34142.292480   0.044922  100.000000      100.000000
8   34445.314941   34142.292480  4296.450684  34445.314941  302.977539  34142.292480   3.022461  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:02:07]  --------------------------------------------------------------------------------
[07/26 15:02:07]  Iteration: 203 (128 solution, 74 counterexamples)
[07/26 15:02:12]  Generator returned sat in 4.242714 secs.
[07/26 15:02:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:14]  Verifer returned unsat in 1.702033 secs.
[07/26 15:02:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:14]  --------------------------------------------------------------------------------
[07/26 15:02:14]  Iteration: 204 (129 solution, 74 counterexamples)
[07/26 15:02:21]  Generator returned sat in 5.631846 secs.
[07/26 15:02:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:21]  Verifer returned unsat in 0.066684 secs.
[07/26 15:02:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:21]  --------------------------------------------------------------------------------
[07/26 15:02:21]  Iteration: 205 (130 solution, 74 counterexamples)
[07/26 15:02:23]  Generator returned sat in 0.956864 secs.
[07/26 15:02:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:23]  Verifer returned unsat in 0.108791 secs.
[07/26 15:02:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:23]  --------------------------------------------------------------------------------
[07/26 15:02:23]  Iteration: 206 (131 solution, 74 counterexamples)
[07/26 15:02:26]  Generator returned sat in 1.845690 secs.
[07/26 15:02:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:27]  Verifer returned unsat in 0.936163 secs.
[07/26 15:02:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:27]  --------------------------------------------------------------------------------
[07/26 15:02:27]  Iteration: 207 (132 solution, 74 counterexamples)
[07/26 15:02:29]  Generator returned sat in 0.823970 secs.
[07/26 15:02:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:31]  Verifer returned unsat in 1.872566 secs.
[07/26 15:02:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:31]  --------------------------------------------------------------------------------
[07/26 15:02:31]  Iteration: 208 (133 solution, 74 counterexamples)
[07/26 15:02:33]  Generator returned sat in 0.784687 secs.
[07/26 15:02:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:34]  Verifer returned unsat in 1.125925 secs.
[07/26 15:02:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:34]  --------------------------------------------------------------------------------
[07/26 15:02:34]  Iteration: 209 (134 solution, 74 counterexamples)
[07/26 15:02:38]  Generator returned sat in 3.019802 secs.
[07/26 15:02:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:40]  Verifer returned unsat in 1.521187 secs.
[07/26 15:02:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:40]  --------------------------------------------------------------------------------
[07/26 15:02:40]  Iteration: 210 (135 solution, 74 counterexamples)
[07/26 15:02:42]  Generator returned sat in 0.904874 secs.
[07/26 15:02:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:43]  Verifer returned unsat in 1.292007 secs.
[07/26 15:02:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:43]  --------------------------------------------------------------------------------
[07/26 15:02:43]  Iteration: 211 (136 solution, 74 counterexamples)
[07/26 15:02:45]  Generator returned sat in 0.791628 secs.
[07/26 15:02:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:46]  Verifer returned unsat in 0.840662 secs.
[07/26 15:02:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:46]  --------------------------------------------------------------------------------
[07/26 15:02:46]  Iteration: 212 (137 solution, 74 counterexamples)
[07/26 15:02:48]  Generator returned sat in 0.818442 secs.
[07/26 15:02:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:49]  Verifer returned unsat in 0.943656 secs.
[07/26 15:02:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:49]  --------------------------------------------------------------------------------
[07/26 15:02:49]  Iteration: 213 (138 solution, 74 counterexamples)
[07/26 15:02:51]  Generator returned sat in 0.786472 secs.
[07/26 15:02:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:53]  Verifer returned unsat in 1.625793 secs.
[07/26 15:02:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:53]  --------------------------------------------------------------------------------
[07/26 15:02:53]  Iteration: 214 (139 solution, 74 counterexamples)
[07/26 15:02:56]  Generator returned sat in 2.463128 secs.
[07/26 15:02:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:56]  Improved gap from 0 to 39.0625
[07/26 15:02:57]  Improved number of small numbers from 24 to 100 out of a max of 100
[07/26 15:02:57]  Verifer returned sat in 0.496845 secs.
[07/26 15:02:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   33835.475830   33635.431152  4794.942871  33835.475830    0.089600  33635.431152   0.000000  200.044678      100.044678
1   33835.475830   33835.431152  4794.942871  33835.475830  200.044678  33835.431152   0.000000    0.044678        0.044678
2   33835.475830   33835.431152  4827.032471  33835.475830    0.044678  33835.431152   0.000000    0.044678      -67.865723
3   34133.475830   34003.341553  4827.032471  34133.475830  298.044678  34003.341553   0.000000  130.134277      130.134277
4   34303.386230   34103.341309  4827.032471  34303.386230  300.044678  34103.341309   0.044678  200.000244      200.000000
5   34303.386230   34165.385986  4827.032471  34303.386230  135.955078  34165.385986   0.044678  137.955566      100.000000
6   34303.386230   34203.341553  4827.032471  34303.386230  137.955078  34203.341553   0.044678  100.000000        0.000000
7   34343.341309   34303.341553  4887.077393  34343.341309  139.955078  34303.341553   0.044678   39.955078        0.000000
8   34445.341309   34343.296631  4887.077393  34445.341309  141.955078  34343.296631   0.044678  102.000000        2.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:02:57]  --------------------------------------------------------------------------------
[07/26 15:02:57]  Iteration: 215 (139 solution, 75 counterexamples)
[07/26 15:03:07]  Generator returned sat in 8.951733 secs.
[07/26 15:03:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:07]  Verifer returned unsat in 0.110559 secs.
[07/26 15:03:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:07]  --------------------------------------------------------------------------------
[07/26 15:03:07]  Iteration: 216 (140 solution, 75 counterexamples)
[07/26 15:03:09]  Generator returned sat in 0.865565 secs.
[07/26 15:03:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:09]  Verifer returned unsat in 0.081731 secs.
[07/26 15:03:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:09]  --------------------------------------------------------------------------------
[07/26 15:03:09]  Iteration: 217 (141 solution, 75 counterexamples)
[07/26 15:03:12]  Generator returned sat in 1.257885 secs.
[07/26 15:03:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:12]  Verifer returned unsat in 0.691859 secs.
[07/26 15:03:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:12]  --------------------------------------------------------------------------------
[07/26 15:03:12]  Iteration: 218 (142 solution, 75 counterexamples)
[07/26 15:03:18]  Generator returned sat in 4.007038 secs.
[07/26 15:03:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:19]  Improved gap from 0 to 0
[07/26 15:03:19]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 15:03:19]  Verifer returned sat in 1.418492 secs.
[07/26 15:03:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   33776.559082   33699.143311  4604.516846  33776.559082    0.089600  33699.143311   0.000000   77.415771       77.415527
1   33776.581787   33775.058838  4627.078613  33776.581787   77.438477  33775.058838   0.000000    1.522949        0.000000
2   33776.604980   33776.582031  4727.055420  33776.604980    1.546143  33776.582031   0.000000    0.022949        0.000000
3   33776.628174   33776.604980  4827.032227  33776.628174    0.046143  33776.604980   0.000000    0.023193        0.000000
4   33815.905029   33815.881836  4887.755371  33815.905029   39.300049  33815.881836   0.000000    0.023193        0.000000
5   33895.743408   33815.905029  4887.755615  33895.743408   79.861572  33815.905029   0.000000   79.838379      -20.161377
6   33955.858887   33955.835693  4947.801514  33955.858887  139.953857  33955.835693   0.000000    0.023193        0.000000
7   34255.881836   33955.859131  4947.801514  34255.881836  300.046143  33955.859131   0.022949  299.999756      200.000000
8   34255.881836   34055.859131  4947.801514  34255.881836    1.500000  34055.859131   0.022949  199.999756      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:03:19]  --------------------------------------------------------------------------------
[07/26 15:03:19]  Iteration: 219 (142 solution, 76 counterexamples)
[07/26 15:03:25]  Generator returned sat in 4.515558 secs.
[07/26 15:03:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:26]  Verifer returned unsat in 0.816039 secs.
[07/26 15:03:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:26]  --------------------------------------------------------------------------------
[07/26 15:03:26]  Iteration: 220 (143 solution, 76 counterexamples)
[07/26 15:03:28]  Generator returned sat in 1.181289 secs.
[07/26 15:03:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:29]  Verifer returned unsat in 1.213074 secs.
[07/26 15:03:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:29]  --------------------------------------------------------------------------------
[07/26 15:03:29]  Iteration: 221 (144 solution, 76 counterexamples)
[07/26 15:03:32]  Generator returned sat in 1.024345 secs.
[07/26 15:03:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:34]  Verifer returned unsat in 2.587185 secs.
[07/26 15:03:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:34]  --------------------------------------------------------------------------------
[07/26 15:03:34]  Iteration: 222 (145 solution, 76 counterexamples)
[07/26 15:03:36]  Generator returned sat in 1.009625 secs.
[07/26 15:03:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:38]  Verifer returned unsat in 1.286745 secs.
[07/26 15:03:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:38]  --------------------------------------------------------------------------------
[07/26 15:03:38]  Iteration: 223 (146 solution, 76 counterexamples)
[07/26 15:03:40]  Generator returned sat in 0.947534 secs.
[07/26 15:03:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:41]  Verifer returned unsat in 0.782646 secs.
[07/26 15:03:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:41]  --------------------------------------------------------------------------------
[07/26 15:03:41]  Iteration: 224 (147 solution, 76 counterexamples)
[07/26 15:03:43]  Generator returned sat in 0.881079 secs.
[07/26 15:03:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:43]  Verifer returned unsat in 0.667251 secs.
[07/26 15:03:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:43]  --------------------------------------------------------------------------------
[07/26 15:03:43]  Iteration: 225 (148 solution, 76 counterexamples)
[07/26 15:03:45]  Generator returned sat in 0.892799 secs.
[07/26 15:03:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:47]  Verifer returned unsat in 1.409414 secs.
[07/26 15:03:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:47]  --------------------------------------------------------------------------------
[07/26 15:03:47]  Iteration: 226 (149 solution, 76 counterexamples)
[07/26 15:03:49]  Generator returned sat in 0.954600 secs.
[07/26 15:03:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:51]  Verifer returned unsat in 1.807055 secs.
[07/26 15:03:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:51]  --------------------------------------------------------------------------------
[07/26 15:03:51]  Iteration: 227 (150 solution, 76 counterexamples)
[07/26 15:03:53]  Generator returned sat in 0.849688 secs.
[07/26 15:03:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:54]  Verifer returned unsat in 1.170902 secs.
[07/26 15:03:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:54]  --------------------------------------------------------------------------------
[07/26 15:03:54]  Iteration: 228 (151 solution, 76 counterexamples)
[07/26 15:03:56]  Generator returned sat in 0.821611 secs.
[07/26 15:03:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:57]  Verifer returned unsat in 0.900659 secs.
[07/26 15:03:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:57]  --------------------------------------------------------------------------------
[07/26 15:03:57]  Iteration: 229 (152 solution, 76 counterexamples)
[07/26 15:04:00]  Generator returned sat in 1.939420 secs.
[07/26 15:04:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:04:00]  Verifer returned unsat in 0.124878 secs.
[07/26 15:04:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:04:00]  --------------------------------------------------------------------------------
[07/26 15:04:00]  Iteration: 230 (153 solution, 76 counterexamples)
[07/26 15:04:02]  Generator returned sat in 0.864642 secs.
[07/26 15:04:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:04:02]  Verifer returned unsat in 0.124630 secs.
[07/26 15:04:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:04:02]  --------------------------------------------------------------------------------
[07/26 15:04:02]  Iteration: 231 (154 solution, 76 counterexamples)
[07/26 15:04:05]  Generator returned sat in 1.406111 secs.
[07/26 15:04:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:05]  Verifer returned unsat in 0.071608 secs.
[07/26 15:04:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:05]  --------------------------------------------------------------------------------
[07/26 15:04:05]  Iteration: 232 (155 solution, 76 counterexamples)
[07/26 15:04:07]  Generator returned sat in 1.013880 secs.
[07/26 15:04:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:08]  Verifer returned unsat in 0.977305 secs.
[07/26 15:04:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:08]  --------------------------------------------------------------------------------
[07/26 15:04:08]  Iteration: 233 (156 solution, 76 counterexamples)
[07/26 15:04:10]  Generator returned sat in 0.885648 secs.
[07/26 15:04:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:12]  Verifer returned unsat in 1.124926 secs.
[07/26 15:04:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:12]  --------------------------------------------------------------------------------
[07/26 15:04:12]  Iteration: 234 (157 solution, 76 counterexamples)
[07/26 15:04:13]  Generator returned sat in 0.832716 secs.
[07/26 15:04:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:15]  Verifer returned unsat in 1.125366 secs.
[07/26 15:04:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:15]  --------------------------------------------------------------------------------
[07/26 15:04:15]  Iteration: 235 (158 solution, 76 counterexamples)
[07/26 15:04:17]  Generator returned sat in 1.243891 secs.
[07/26 15:04:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:18]  Verifer returned unsat in 0.943695 secs.
[07/26 15:04:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:18]  --------------------------------------------------------------------------------
[07/26 15:04:18]  Iteration: 236 (159 solution, 76 counterexamples)
[07/26 15:04:21]  Generator returned sat in 1.383873 secs.
[07/26 15:04:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:23]  Verifer returned unsat in 1.933254 secs.
[07/26 15:04:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:23]  --------------------------------------------------------------------------------
[07/26 15:04:23]  Iteration: 237 (160 solution, 76 counterexamples)
[07/26 15:04:25]  Generator returned sat in 1.506970 secs.
[07/26 15:04:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:26]  Improved number of small numbers from 27 to 99 out of a max of 99
[07/26 15:04:26]  Verifer returned sat in 0.462898 secs.
[07/26 15:04:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32186.168457   31986.168701  4671.033691  32186.168457    0.089355  31986.168701   0.000000  199.999756       99.999756
1   32186.168457   32086.168701  4671.033691  32186.168457  199.999756  32086.168701   0.000000   99.999756       -0.000244
2   32345.800293   32186.168701  4671.033691  32345.800293  259.631592  32186.168701   0.000000  159.631592       59.631592
3   32345.800293   32345.777588  4671.033691  32345.800293  159.608887  32345.777588   0.000000    0.022705      -40.368408
4   32686.190918   32386.168701  4671.033691  32686.190918  340.413330  32386.168701   0.022217  300.000000      200.000000
5   32686.190918   32552.183838  4671.033691  32686.190918  150.000000  32552.183838   0.022217  133.984863      100.000000
6   32886.213623   32686.168701  4671.033691  32886.213623  334.007568  32686.168701   0.044922  200.000000      200.000000
7   32886.213623   32738.719971  4671.033691  32886.213623  170.195557  32738.719971   0.044922  147.448730      100.000000
8   33086.236084   32886.168457  4671.033691  33086.236084  347.471191  32886.168457   0.067383  200.000244      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:04:26]  --------------------------------------------------------------------------------
[07/26 15:04:26]  Iteration: 238 (160 solution, 77 counterexamples)
[07/26 15:04:31]  Generator returned sat in 3.893291 secs.
[07/26 15:04:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:32]  Verifer returned unsat in 1.201601 secs.
[07/26 15:04:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:32]  --------------------------------------------------------------------------------
[07/26 15:04:32]  Iteration: 239 (161 solution, 77 counterexamples)
[07/26 15:04:34]  Generator returned sat in 0.907658 secs.
[07/26 15:04:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:37]  Verifer returned unsat in 2.834867 secs.
[07/26 15:04:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:37]  --------------------------------------------------------------------------------
[07/26 15:04:37]  Iteration: 240 (162 solution, 77 counterexamples)
[07/26 15:04:39]  Generator returned sat in 0.829645 secs.
[07/26 15:04:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:40]  Verifer returned unsat in 1.067592 secs.
[07/26 15:04:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:40]  --------------------------------------------------------------------------------
[07/26 15:04:40]  Iteration: 241 (163 solution, 77 counterexamples)
[07/26 15:04:43]  Generator returned sat in 1.358633 secs.
[07/26 15:04:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:43]  Verifer returned unsat in 0.049086 secs.
[07/26 15:04:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:43]  --------------------------------------------------------------------------------
[07/26 15:04:43]  Iteration: 242 (164 solution, 77 counterexamples)
[07/26 15:04:45]  Generator returned sat in 0.874119 secs.
[07/26 15:04:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:45]  Verifer returned unsat in 0.057482 secs.
[07/26 15:04:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:45]  --------------------------------------------------------------------------------
[07/26 15:04:45]  Iteration: 243 (165 solution, 77 counterexamples)
[07/26 15:04:48]  Generator returned sat in 1.714214 secs.
[07/26 15:04:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:48]  Verifer returned unsat in 0.124964 secs.
[07/26 15:04:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:48]  --------------------------------------------------------------------------------
[07/26 15:04:48]  Iteration: 244 (166 solution, 77 counterexamples)
[07/26 15:04:50]  Generator returned sat in 0.894408 secs.
[07/26 15:04:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:50]  Verifer returned unsat in 0.098966 secs.
[07/26 15:04:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:50]  --------------------------------------------------------------------------------
[07/26 15:04:50]  Iteration: 245 (167 solution, 77 counterexamples)
[07/26 15:04:52]  Generator returned sat in 0.916631 secs.
[07/26 15:04:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:04:53]  Verifer returned unsat in 0.083707 secs.
[07/26 15:04:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:04:53]  --------------------------------------------------------------------------------
[07/26 15:04:53]  Iteration: 246 (168 solution, 77 counterexamples)
[07/26 15:04:55]  Generator returned sat in 1.785733 secs.
[07/26 15:04:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:56]  Verifer returned unsat in 0.083276 secs.
[07/26 15:04:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:04:56]  --------------------------------------------------------------------------------
[07/26 15:04:56]  Iteration: 247 (169 solution, 77 counterexamples)
[07/26 15:05:02]  Generator returned sat in 5.470366 secs.
[07/26 15:05:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:03]  Improved gap from 0 to 0
[07/26 15:05:03]  Improved number of small numbers from 56 to 73 out of a max of 100
[07/26 15:05:03]  Verifer returned sat in 0.886190 secs.
[07/26 15:05:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32611.770020   32411.770020  5416.338691  32611.770020    0.089355  32411.770020    0.00000  200.000000      100.000042
1   32611.770020   32611.768311  5416.338691  32611.770020  199.999756  32611.768311    0.00000    0.001709        0.000042
2   32878.437500   32611.769977  5416.338691  32878.437500  266.669189  32611.769977    0.00000  266.667523      166.667523
3   32878.437500   32711.769977  5416.338691  32878.437500  266.667500  32711.769977    0.00000  166.667523       66.667523
4   33111.771227   32911.769775  5416.338691  33111.771227  400.001250  32911.769775    0.00125  200.000202      200.000000
5   33111.771227   33011.769775  5416.338691  33111.771227    0.010000  33011.769775    0.00125  100.000202      100.000000
6   33111.771227   33111.768727  5416.338691  33111.771227    0.015000  33111.768727    0.00125    0.001250        0.000000
7   33111.792477   33111.769977  5516.317441  33111.792477    0.022500  33111.769977    0.00125    0.021250        0.000000
8   33111.804977   33111.791260  5516.317627  33111.804977    0.033750  33111.791260    0.00125    0.012467      -99.987314
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:05:04]  --------------------------------------------------------------------------------
[07/26 15:05:04]  Iteration: 248 (169 solution, 78 counterexamples)
[07/26 15:05:09]  Generator returned sat in 4.408601 secs.
[07/26 15:05:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:10]  Verifer returned unsat in 0.469759 secs.
[07/26 15:05:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:10]  --------------------------------------------------------------------------------
[07/26 15:05:10]  Iteration: 249 (170 solution, 78 counterexamples)
[07/26 15:05:12]  Generator returned sat in 0.976547 secs.
[07/26 15:05:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:12]  Verifer returned unsat in 0.265670 secs.
[07/26 15:05:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:12]  --------------------------------------------------------------------------------
[07/26 15:05:12]  Iteration: 250 (171 solution, 78 counterexamples)
[07/26 15:05:15]  Generator returned sat in 1.932888 secs.
[07/26 15:05:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:16]  Verifer returned unsat in 0.856884 secs.
[07/26 15:05:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:16]  --------------------------------------------------------------------------------
[07/26 15:05:16]  Iteration: 251 (172 solution, 78 counterexamples)
[07/26 15:05:19]  Generator returned sat in 1.353968 secs.
[07/26 15:05:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:19]  Improved number of small numbers from 57 to 99 out of a max of 99
[07/26 15:05:19]  Verifer returned sat in 0.409496 secs.
[07/26 15:05:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32678.347900   32578.347900  4911.368652  32678.347900    0.089355  32578.347900   0.000000  100.000000      100.000000
1   32678.347900   32578.347900  4911.368652  32678.347900    0.022217  32578.347900   0.000000  100.000000        0.000000
2   32878.370361   32678.348145  4911.368652  32878.370361  300.022461  32678.348145   0.000000  200.022217      100.022461
3   32878.370361   32878.347900  4911.368652  32878.370361  199.977783  32878.347900   0.000000    0.022461        0.022461
4   33228.325684   32879.347900  4911.368652  33228.325684  349.977783  32879.347900  49.977783  299.000000      200.000000
5   33228.325684   33044.362793  4911.368652  33228.325684  151.000000  33044.362793  49.977783  133.985107      100.000000
6   33428.347900   33178.303467  4911.368652  33428.347900  334.007324  33178.303467  50.000000  200.044434      200.000000
7   33428.347900   33278.347900  4911.368652  33428.347900  150.477783  33278.347900  50.000000  100.000000      100.000000
8   33678.325684   33378.347900  4911.368652  33678.325684  349.977783  33378.347900  99.977783  200.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:05:19]  --------------------------------------------------------------------------------
[07/26 15:05:19]  Iteration: 252 (172 solution, 79 counterexamples)
[07/26 15:05:24]  Generator returned sat in 3.341568 secs.
[07/26 15:05:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:24]  Verifer returned unsat in 0.123661 secs.
[07/26 15:05:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:24]  --------------------------------------------------------------------------------
[07/26 15:05:24]  Iteration: 253 (173 solution, 79 counterexamples)
[07/26 15:05:26]  Generator returned sat in 1.146581 secs.
[07/26 15:05:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:27]  Verifer returned unsat in 0.098456 secs.
[07/26 15:05:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:27]  --------------------------------------------------------------------------------
[07/26 15:05:27]  Iteration: 254 (174 solution, 79 counterexamples)
[07/26 15:05:29]  Generator returned sat in 1.433367 secs.
[07/26 15:05:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:29]  Verifer returned unsat in 0.081891 secs.
[07/26 15:05:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:29]  --------------------------------------------------------------------------------
[07/26 15:05:29]  Iteration: 255 (175 solution, 79 counterexamples)
[07/26 15:05:33]  Generator returned sat in 2.356518 secs.
[07/26 15:05:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:33]  Improved number of small numbers from 40 to 99 out of a max of 99
[07/26 15:05:33]  Verifer returned sat in 0.543152 secs.
[07/26 15:05:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32928.376465   32728.398926  4911.368652  32928.376465    0.089355  32728.398926   0.000000  199.977539       99.977539
1   32928.376465   32928.354004  4911.368652  32928.376465    0.022461  32928.354004   0.000000    0.022461       -0.022461
2   32928.421143   32928.398926  4911.368652  32928.421143    0.067139  32928.398926   0.000000    0.022217      -99.977783
3   33128.398926   33061.747070  4911.368652  33128.398926  200.000000  33061.747070   0.000000   66.651855        0.000000
4   33428.421143   33128.398926  4911.368652  33428.421143  366.674072  33128.398926   0.022217  300.000000      200.000000
5   33428.421143   33328.398926  4911.368652  33428.421143  100.022461  33328.398926   0.022217  100.000000      100.000000
6   33628.443604   33428.398926  4911.368652  33628.443604  300.022461  33428.398926   0.044678  200.000000      200.000000
7   33628.443604   33528.398926  4911.368652  33628.443604  183.325928  33528.398926   0.044678  100.000000      100.000000
8   33911.769531   33528.398926  4911.368652  33911.769531  383.325928  33528.398926  83.370605  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:05:34]  --------------------------------------------------------------------------------
[07/26 15:05:34]  Iteration: 256 (175 solution, 80 counterexamples)
[07/26 15:05:37]  Generator returned sat in 2.580564 secs.
[07/26 15:05:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:38]  Verifer returned unsat in 0.105732 secs.
[07/26 15:05:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:38]  --------------------------------------------------------------------------------
[07/26 15:05:38]  Iteration: 257 (176 solution, 80 counterexamples)
[07/26 15:05:39]  Generator returned unsat in 0.000450 secs.
[07/26 15:05:39]  [96mNo more solutions found[0m
[07/26 15:05:39]  Final solutions:
[07/26 15:05:39]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  31: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  32: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  33: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  34: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  35: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  36: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  37: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  38: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  39: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  40: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  41: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  42: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  43: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  44: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  45: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  46: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  47: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  48: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  49: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  50: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  51: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  52: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  53: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  54: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  55: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  56: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  57: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  58: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  59: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  60: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  61: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  62: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  63: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  64: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  65: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  66: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  67: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  68: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  69: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  70: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  71: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  72: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  73: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  74: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  75: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  76: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  77: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  78: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  79: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  80: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  81: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  82: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  83: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  84: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  85: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  86: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  87: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  88: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  89: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  90: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  91: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  92: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  93: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  94: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  95: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  96: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  97: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  98: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  99: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  100: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  101: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  102: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  103: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  104: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  105: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  106: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  107: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  108: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  109: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  110: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  111: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  112: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  113: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  114: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  115: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  116: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  117: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  118: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  119: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  120: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  121: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  122: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  123: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  124: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  125: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  126: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  127: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  128: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  129: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  130: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  131: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  132: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  133: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  134: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  135: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  136: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  137: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  138: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  139: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  140: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  141: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  142: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  143: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  144: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  145: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  146: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  147: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  148: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  149: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  150: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  151: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  152: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  153: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  154: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  155: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  156: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  157: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  158: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  159: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  160: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  161: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  162: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  163: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  164: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  165: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  166: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  167: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  168: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  169: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:05:39]  170: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  171: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  172: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:05:39]  173: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:05:39]  174: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:05:39]  175: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:05:39]  Took 831.588642 secs.
