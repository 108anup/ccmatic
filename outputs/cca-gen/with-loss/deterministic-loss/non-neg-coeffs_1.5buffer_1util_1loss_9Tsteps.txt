[07/26 15:20:23]  --------------------------------------------------------------------------------
[07/26 15:20:23]  Iteration: 1 (0 solution, 0 counterexamples)
[07/26 15:20:23]  Generator returned sat in 0.004369 secs.
[07/26 15:20:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:20:23]  Improved gap from 0 to 100
[07/26 15:20:23]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 15:20:23]  Verifer returned sat in 0.349559 secs.
[07/26 15:20:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0      -857.4375      -857.5375  857.5375    -857.4375       0.1    -857.5375        0.0      0.1             0.1
1      -857.4375      -857.5375  857.5375    -857.4375       0.1    -857.5375        0.0      0.1           -99.9
2      -657.4375      -657.5375  857.5375    -657.4375     200.1    -657.5375        0.0      0.1             0.1
3      -257.4375      -557.5375  857.5375    -257.4375     400.1    -557.5375        0.1    300.0           300.0
4       844.7625      -458.5375  857.5375     844.7625    1402.2    -458.5375     1002.3    301.0           300.0
5      4148.1625      -457.5375  857.5375    4148.1625    3604.4    -457.5375     4205.7    400.0           300.0
6     11358.9625      -292.5375  857.5375   11358.9625    7610.8    -292.5375    11316.5    335.0           300.0
7     26777.5625      -157.5375  857.5375   26777.5625   15753.6    -157.5375    26635.1    300.0           300.0
8     58588.7625      -157.5375  857.5375   58588.7625   32111.2    -157.5375    58346.3    400.0           300.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 15:20:23]  --------------------------------------------------------------------------------
[07/26 15:20:23]  Iteration: 2 (0 solution, 1 counterexamples)
[07/26 15:20:23]  Generator returned sat in 0.070060 secs.
[07/26 15:20:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:24]  Improved number of small numbers from 29 to 33 out of a max of 99
[07/26 15:20:24]  Verifer returned sat in 1.105815 secs.
[07/26 15:20:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   25919.162891   25419.262793 -25519.262793  25919.162891    0.099854  25419.262793    0.000000  499.900098      399.900098
1   25919.162891   25519.262793 -25519.262793  25919.162891    0.099854  25519.262793    0.000000  399.900098      299.900098
2   26019.162891   25619.262793 -25519.262793  26019.162891  499.900098  25619.262793    0.000000  399.900098      299.900098
3   26119.362695   25739.302754 -25519.262793  26119.362695  500.099902  25739.302754    0.099902  379.960039      300.000000
4   26219.462598   25889.222832 -25519.262793  26219.462598  480.059941  25889.222832    0.199805  330.039961      300.000000
5   26444.362695   25992.502754 -25519.262793  26444.362695  554.940059  25992.502754  125.099902  326.760039      300.000000
6   26677.462598   26051.326730 -25519.262793  26677.462598  559.859941  26051.326730  258.199805  367.936062      300.000000
7   26777.562500   26219.262793 -25519.262793  26777.562500  468.035965  26219.262793  258.299707  300.000000      300.000000
8   26972.622441   26219.262939 -25519.262793  26972.622441  495.059941  26219.262939  353.359648  399.999854      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 15:20:25]  --------------------------------------------------------------------------------
[07/26 15:20:25]  Iteration: 3 (0 solution, 2 counterexamples)
[07/26 15:20:25]  Generator returned sat in 0.260244 secs.
[07/26 15:20:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:25]  Improved number of small numbers from 41 to 99 out of a max of 99
[07/26 15:20:25]  Verifer returned sat in 0.288645 secs.
[07/26 15:20:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   25919.162842   25519.112793 -25519.272461  25919.162842    0.099609  25519.112793    0.000000  400.050049      300.050049
1   25919.162842   25619.112793 -25519.272461  25919.162842    0.049805  25619.112793    0.000000  300.050049      200.050049
2   25919.162842   25720.612793 -25519.272461  25919.162842  300.050049  25720.612793    0.000000  198.550049      100.050049
3   25919.162842   25919.112793 -25519.272461  25919.162842  133.366699  25919.112793    0.000000    0.050049        0.050049
4   26319.162842   25919.113037 -25519.272461  26319.162842  400.050049  25919.113037    0.050049  399.999756      300.000000
5   26319.162842   26119.112793 -25519.272461  26319.162842    0.500000  26119.112793    0.050049  200.000000      200.000000
6   26319.162842   26185.746094 -25519.272461  26319.162842  200.000000  26185.746094    0.050049  133.366699      100.000000
7   26619.112793   26319.112793 -25519.272461  26619.112793  433.316650  26319.112793    0.050049  299.949951      299.949951
8   27169.137695   26319.112793 -25519.272461  27169.137695  849.974854  26319.112793  450.024902  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:20:26]  --------------------------------------------------------------------------------
[07/26 15:20:26]  Iteration: 4 (0 solution, 3 counterexamples)
[07/26 15:20:26]  Generator returned sat in 0.149107 secs.
[07/26 15:20:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:26]  Improved gap from 51/2048 to 100
[07/26 15:20:26]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 15:20:26]  Verifer returned sat in 0.396738 secs.
[07/26 15:20:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   25386.858887   25386.809326 -25519.272705  25386.858887    0.099365  25386.809326    0.000000    0.049561        0.024658
1   25386.858887   25386.834229 -25519.272705  25386.858887    0.024902  25386.834229    0.000000    0.024658      -99.975342
2   25786.833984   25586.833984 -25519.272705  25786.833984  399.999756  25586.833984    0.000000  200.000000      199.999756
3   25786.833984   25586.834229 -25519.272705  25786.833984   37.500000  25586.834229    0.000000  199.999756       99.999756
4   25786.833984   25686.834229 -25519.272705  25786.833984  175.012451  25686.834229    0.000000   99.999756       -0.000244
5   26186.859131   25786.834229 -25519.272705  26186.859131  500.024902  25786.834229    0.024902  400.000000      300.000000
6   26186.859131   25962.834229 -25519.272705  26186.859131    1.500000  25962.834229    0.024902  224.000000      200.000000
7   26186.859131   26086.834229 -25519.272705  26186.859131  191.000000  26086.834229    0.024902  100.000000      100.000000
8   26668.859131   26086.834229 -25519.272705  26668.859131  582.000000  26086.834229  182.024902  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:20:27]  --------------------------------------------------------------------------------
[07/26 15:20:27]  Iteration: 5 (0 solution, 4 counterexamples)
[07/26 15:20:27]  Generator returned sat in 0.478164 secs.
[07/26 15:20:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:27]  Verifer returned unsat in 0.050349 secs.
[07/26 15:20:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:27]  --------------------------------------------------------------------------------
[07/26 15:20:27]  Iteration: 6 (1 solution, 4 counterexamples)
[07/26 15:20:27]  Generator returned sat in 0.013132 secs.
[07/26 15:20:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:27]  Verifer returned unsat in 0.042724 secs.
[07/26 15:20:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:27]  --------------------------------------------------------------------------------
[07/26 15:20:27]  Iteration: 7 (2 solution, 4 counterexamples)
[07/26 15:20:27]  Generator returned sat in 0.012000 secs.
[07/26 15:20:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:27]  Verifer returned unsat in 0.052913 secs.
[07/26 15:20:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:27]  --------------------------------------------------------------------------------
[07/26 15:20:27]  Iteration: 8 (3 solution, 4 counterexamples)
[07/26 15:20:28]  Generator returned sat in 0.012517 secs.
[07/26 15:20:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:28]  Verifer returned unsat in 0.052629 secs.
[07/26 15:20:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:28]  --------------------------------------------------------------------------------
[07/26 15:20:28]  Iteration: 9 (4 solution, 4 counterexamples)
[07/26 15:20:28]  Generator returned sat in 0.010638 secs.
[07/26 15:20:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:28]  Verifer returned unsat in 0.042666 secs.
[07/26 15:20:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:28]  --------------------------------------------------------------------------------
[07/26 15:20:28]  Iteration: 10 (5 solution, 4 counterexamples)
[07/26 15:20:28]  Generator returned sat in 0.051778 secs.
[07/26 15:20:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:28]  Improved gap from 0 to 98.4375
[07/26 15:20:28]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 15:20:28]  Verifer returned sat in 0.244477 secs.
[07/26 15:20:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    26651.62085   26651.620850 -25519.272705  26651.62085    0.099121  26651.620850     0.0000    0.000000          0.0000
1    26751.62085   26651.620850 -25519.272705  26751.62085  100.000000  26651.620850     0.0000  100.000000          0.0000
2    26751.62085   26751.620850 -25517.710205  26751.62085    0.002500  26751.620850     0.0000    0.000000        -98.4375
3    27548.49585   26950.058350 -25517.710205  27548.49585  796.875000  26950.058350   298.4375  300.000000        300.0000
4    27646.93335   27050.058105 -25517.710205  27646.93335  398.437500  27050.058105   298.4375  298.437744        298.4375
5    27646.93335   27150.058350 -25517.710205  27646.93335    0.010000  27150.058350   298.4375  198.437500        198.4375
6    27646.93335   27250.058105 -25517.710205  27646.93335    0.010000  27250.058105   298.4375   98.437744         98.4375
7    27646.93335   27250.058350 -25516.147705  27646.93335    0.010000  27250.058350   298.4375   98.437500          0.0000
8    27646.93335   27348.495850 -25516.147705  27646.93335    0.010000  27348.495850   298.4375    0.000000       -100.0000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:28]  --------------------------------------------------------------------------------
[07/26 15:20:28]  Iteration: 11 (5 solution, 5 counterexamples)
[07/26 15:20:28]  Generator returned sat in 0.026019 secs.
[07/26 15:20:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:29]  Improved gap from 1/400 to 98.4375
[07/26 15:20:29]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 15:20:29]  Verifer returned sat in 0.374979 secs.
[07/26 15:20:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26268.794189   26268.794189 -25517.710205  26268.794189    0.099121  26268.794189   0.000000    0.000000          0.0000
1   26368.794189   26368.791260 -25517.710205  26368.794189  100.000000  26368.791260   0.000000    0.002930          0.0000
2   26368.794189   26368.794189 -25517.710205  26368.794189    0.001465  26368.794189   0.000000    0.000000       -100.0000
3   26965.670410   26535.460449 -25517.710205  26965.670410  596.876221  26535.460449  96.876221  333.333740        300.0000
4   27064.107910   26668.793945 -25517.710205  27064.107910  431.771240  26668.793945  96.876221  298.437744        298.4375
5   27064.107910   26668.794189 -25517.710205  27064.107910    0.010000  26668.794189  96.876221  298.437500        198.4375
6   27064.107910   26868.793945 -25517.710205  27064.107910    0.010000  26868.793945  96.876221   98.437744         98.4375
7   27064.107910   26868.794189 -25516.147705  27064.107910    0.010000  26868.794189  96.876221   98.437500          0.0000
8   27064.107910   26967.231689 -25516.147705  27064.107910    0.010000  26967.231689  96.876221    0.000000       -100.0000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:29]  --------------------------------------------------------------------------------
[07/26 15:20:29]  Iteration: 12 (5 solution, 6 counterexamples)
[07/26 15:20:29]  Generator returned sat in 0.111655 secs.
[07/26 15:20:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:20:30]  Improved number of small numbers from 40 to 99 out of a max of 99
[07/26 15:20:30]  Verifer returned sat in 0.232313 secs.
[07/26 15:20:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26219.213623   26219.213623 -25517.710449  26219.213623    0.099121  26219.213623   0.000000    0.000000      -98.074463
1   26417.312744   26417.263184 -25517.710449  26417.312744  198.099121  26417.263184   0.000000    0.049561        0.024658
2   26417.312744   26417.288086 -25517.710449  26417.312744    0.024902  26417.288086   0.000000    0.024658      -99.975342
3   26617.288086   26617.263184 -25517.710449  26617.288086  200.000000  26617.263184   0.000000    0.024902        0.000000
4   27017.312744   26617.288086 -25517.710449  27017.312744  400.049561  26617.288086   0.024658  400.000000      300.000000
5   27017.312744   26816.275635 -25517.710449  27017.312744  100.012451  26816.275635   0.024658  201.012451      200.000000
6   27217.287842   26817.288086 -25517.710449  27217.287842  400.987549  26817.288086   0.024658  399.975098      299.975098
7   27217.287842   27017.288086 -25517.710449  27217.287842  202.024902  27017.288086   0.024658  199.975098      199.975098
8   27419.312744   27017.288086 -25517.710449  27419.312744  402.000000  27017.288086   2.024658  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:20:30]  --------------------------------------------------------------------------------
[07/26 15:20:30]  Iteration: 13 (5 solution, 7 counterexamples)
[07/26 15:20:30]  Generator returned sat in 0.430089 secs.
[07/26 15:20:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:31]  Improved gap from 1/100 to 0
[07/26 15:20:31]  Improved number of small numbers from 55 to 79 out of a max of 100
[07/26 15:20:31]  Verifer returned sat in 0.695921 secs.
[07/26 15:20:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26900.515381   26900.515381 -25717.690430  26900.515381    0.098877  26900.515381        0.0    0.000000      -99.999844
1   27100.517822   27000.515381 -25717.690430  27100.517822  200.002441  27000.515381        0.0  100.002441        0.002598
2   27100.517822   27100.515381 -25717.690430  27100.517822    0.024902  27100.515381        0.0    0.002441      -99.997402
3   27300.515137   27300.512744 -25717.690430  27300.515137  199.999756  27300.512744        0.0    0.002393       -0.000088
4   27300.522744   27300.520244 -25617.697998  27300.522744    0.010000  27300.520244        0.0    0.002500       -0.000049
5   27300.530244   27300.527744 -25517.710449  27300.530244    0.010000  27300.527744        0.0    0.002500       -0.005000
6   27300.537744   27300.535244 -25417.717773  27300.537744    0.010000  27300.535244        0.0    0.002500       -0.004824
7   27300.545244   27300.542744 -25317.720459  27300.545244    0.010000  27300.542744        0.0    0.002500       -0.000010
8   27300.552744   27300.552734 -25217.730469  27300.552744    0.010000  27300.552734        0.0    0.000010       -0.002520
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:31]  --------------------------------------------------------------------------------
[07/26 15:20:31]  Iteration: 14 (5 solution, 8 counterexamples)
[07/26 15:20:32]  Generator returned sat in 0.835282 secs.
[07/26 15:20:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:33]  Improved number of small numbers from 53 to 61 out of a max of 99
[07/26 15:20:33]  Verifer returned sat in 0.666044 secs.
[07/26 15:20:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26967.186035   26467.186077 -25284.361283  26967.186035    0.098877  26467.186077     0.0000  499.999958      399.999958
1   26967.188577   26667.186077 -25284.361283  26967.188577  500.002500  26667.186077     0.0025  300.000000      300.000000
2   27033.859411   26711.628300 -25284.361283  27033.859411  366.670833  26711.628300     0.0025  322.228611      266.670833
3   27033.859411   26767.186279 -25284.361283  27033.859411  177.778889  26767.186279     0.0025  266.670632      166.670833
4   27033.859411   26967.186077 -25284.361283  27033.859411  266.668333  26967.186077     0.0025   66.670833       66.670833
5   27367.191077   27067.186077 -25284.361283  27367.191077  400.002500  27067.186077     0.0050  300.000000      300.000000
6   27367.191077   27100.515381 -25284.361283  27367.191077  177.778889  27100.515381     0.0050  266.670697      200.000000
7   27367.191077   27267.186077 -25284.361283  27367.191077  266.668333  27267.186077     0.0050  100.000000      100.000000
8   27667.193577   27267.193359 -25284.361283  27667.193577  400.002500  27267.193359     0.0075  399.992718      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:20:33]  --------------------------------------------------------------------------------
[07/26 15:20:33]  Iteration: 15 (5 solution, 9 counterexamples)
[07/26 15:20:34]  Generator returned sat in 0.238317 secs.
[07/26 15:20:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  Verifer returned unsat in 0.044300 secs.
[07/26 15:20:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  --------------------------------------------------------------------------------
[07/26 15:20:34]  Iteration: 16 (6 solution, 9 counterexamples)
[07/26 15:20:34]  Generator returned sat in 0.024278 secs.
[07/26 15:20:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  Verifer returned unsat in 0.037752 secs.
[07/26 15:20:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  --------------------------------------------------------------------------------
[07/26 15:20:34]  Iteration: 17 (7 solution, 9 counterexamples)
[07/26 15:20:34]  Generator returned sat in 0.021940 secs.
[07/26 15:20:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  Verifer returned unsat in 0.039624 secs.
[07/26 15:20:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  --------------------------------------------------------------------------------
[07/26 15:20:34]  Iteration: 18 (8 solution, 9 counterexamples)
[07/26 15:20:34]  Generator returned sat in 0.022845 secs.
[07/26 15:20:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  Verifer returned unsat in 0.040206 secs.
[07/26 15:20:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:34]  --------------------------------------------------------------------------------
[07/26 15:20:34]  Iteration: 19 (9 solution, 9 counterexamples)
[07/26 15:20:35]  Generator returned sat in 0.019938 secs.
[07/26 15:20:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:35]  Verifer returned unsat in 0.034094 secs.
[07/26 15:20:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:35]  --------------------------------------------------------------------------------
[07/26 15:20:35]  Iteration: 20 (10 solution, 9 counterexamples)
[07/26 15:20:35]  Generator returned sat in 0.162384 secs.
[07/26 15:20:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:35]  Improved gap from 0 to 48.4375
[07/26 15:20:35]  Improved number of small numbers from 46 to 100 out of a max of 100
[07/26 15:20:35]  Verifer returned sat in 0.470238 secs.
[07/26 15:20:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26902.105225   26702.204102 -25519.230957  26902.105225    0.098877  26702.204102        0.0  199.901123      100.049561
1   26902.105225   26902.055664 -25519.230957  26902.105225  199.900879  26902.055664        0.0    0.049561        0.049561
2   27002.055664   27002.055664 -25519.230957  27002.055664  100.000000  27002.055664        0.0    0.000000        0.000000
3   27050.492920   27002.055664 -25467.668457  27050.492920   48.437256  27002.055664        0.0   48.437256       -0.000244
4   27301.907227   27102.006104 -25467.668457  27301.907227  299.851562  27102.006104        0.0  199.901123      151.414062
5   27301.956543   27150.493164 -25467.668457  27301.956543  199.950439  27150.493164        0.0  151.463379       51.463379
6   27301.956543   27252.006104 -25419.132080  27301.956543  148.437500  27252.006104        0.0   49.950439       -0.000244
7   27501.956543   27301.956787 -25419.132080  27501.956543  249.950439  27301.956787        0.0  199.999756       99.999756
8   27501.956543   27401.956787 -25419.132080  27501.956543  199.950684  27401.956787        0.0   99.999756       -0.000244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:36]  --------------------------------------------------------------------------------
[07/26 15:20:36]  Iteration: 21 (10 solution, 10 counterexamples)
[07/26 15:20:36]  Generator returned sat in 0.364624 secs.
[07/26 15:20:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:20:36]  Improved gap from 1/400 to 98.4375
[07/26 15:20:37]  Improved number of small numbers from 57 to 84 out of a max of 100
[07/26 15:20:37]  Verifer returned sat in 0.679866 secs.
[07/26 15:20:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26902.104980   26502.107666 -25219.282959  26902.104980    0.098633  26502.107666     0.0000  399.997314      399.997314
1   26902.104980   26602.107666 -25219.282959  26902.104980    0.002500  26602.107666     0.0000  299.997314      299.997314
2   27000.545166   26702.107666 -25219.282959  27000.545166  398.437500  26702.107666     0.0000  298.437500      298.437500
3   27000.545166   26802.107666 -25219.282959  27000.545166   24.531406  26802.107666     0.0000  198.437500      198.437500
4   27000.545166   26900.547607 -25219.282959  27000.545166   49.562812  26900.547607     0.0000   99.997559       98.437500
5   27000.545166   26902.107725 -25217.720518  27000.545166   99.625625  26902.107725     0.0000   98.437441       -0.000059
6   27101.858975   27100.545225 -25217.720518  27101.858975  199.751250  27100.545225     0.0000    1.313750        1.313750
7   27500.547725   27100.545410 -25217.720518  27500.547725  400.002500  27100.545410     0.0025  399.999814      300.000000
8   27500.547725   27200.545410 -25217.720518  27500.547725    0.010000  27200.545410     0.0025  299.999814      200.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:20:37]  --------------------------------------------------------------------------------
[07/26 15:20:37]  Iteration: 22 (10 solution, 11 counterexamples)
[07/26 15:20:37]  Generator returned sat in 0.151490 secs.
[07/26 15:20:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:20:38]  Improved gap from 1/1600 to 98.4375
[07/26 15:20:38]  Improved number of small numbers from 55 to 86 out of a max of 100
[07/26 15:20:38]  Verifer returned sat in 0.678054 secs.
[07/26 15:20:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26977.265381   26777.265381 -25217.721924  26977.265381    0.098389  26777.265381       0.00  200.000000      100.000000
1   26977.265381   26877.265381 -25217.721924  26977.265381    0.002686  26877.265381       0.00  100.000000        0.000000
2   27377.263916   27077.265381 -25217.721924  27377.263916  499.998535  27077.265381       0.00  299.998535      299.998535
3   27377.263916   27177.265381 -25217.721924  27377.263916   23.499375  27177.265381       0.00  199.998535      199.998535
4   27377.263916   27277.265381 -25217.721924  27377.263916   48.998750  27277.265381       0.00   99.998535       99.998535
5   27377.263916   27278.826475 -25217.720518  27377.263916   99.997500  27278.826475       0.00   98.437441       -0.000059
6   27480.821475   27477.263975 -25217.720518  27480.821475  201.995000  27477.263975       0.00    3.557500        3.557500
7   27883.253975   27477.264160 -25217.720518  27883.253975  405.990000  27477.264160       5.99  399.999814      300.000000
8   27883.253975   27577.264160 -25217.720518  27883.253975    0.010000  27577.264160       5.99  299.999814      200.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:20:38]  --------------------------------------------------------------------------------
[07/26 15:20:38]  Iteration: 23 (10 solution, 12 counterexamples)
[07/26 15:20:39]  Generator returned sat in 0.293646 secs.
[07/26 15:20:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:20:39]  Improved gap from 11/8192 to 98.4375
[07/26 15:20:39]  Improved number of small numbers from 30 to 100 out of a max of 100
[07/26 15:20:39]  Verifer returned sat in 0.357871 secs.
[07/26 15:20:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   26975.192871   26975.143555 -25315.600342  26975.192871    0.098145  26975.143555   0.000000    0.049316        0.049316
1   26975.192871   26975.143555 -25314.037842  26975.192871    0.024658  26975.143555   0.000000    0.049316      -98.388184
2   27073.605713   27073.581055 -25312.475342  27073.605713   98.462158  27073.581055   0.000000    0.024658      -98.412842
3   27581.359863   27268.092285 -25312.475342  27581.359863  507.778809  27268.092285   9.341309  303.926270      300.000000
4   27679.797363   27372.018555 -25312.475342  27679.797363  402.363770  27372.018555   9.341309  298.437500      298.437500
5   27679.797363   27472.018555 -25312.475342  27679.797363    2.000000  27472.018555   9.341309  198.437500      198.437500
6   27679.797363   27473.581055 -25312.475342  27679.797363    2.000000  27473.581055   9.341309  196.875000       98.437500
7   27679.797363   27572.018555 -25310.912842  27679.797363    2.000000  27572.018555   9.341309   98.437500        0.000000
8   27679.797363   27670.456055 -25310.912598  27679.797363    2.000000  27670.456055   9.341309    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:40]  --------------------------------------------------------------------------------
[07/26 15:20:40]  Iteration: 24 (10 solution, 13 counterexamples)
[07/26 15:20:41]  Generator returned sat in 0.873732 secs.
[07/26 15:20:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:20:41]  Improved gap from 0 to 98.4375
[07/26 15:20:41]  Improved number of small numbers from 81 to 100 out of a max of 100
[07/26 15:20:41]  Verifer returned sat in 0.315966 secs.
[07/26 15:20:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   31078.655762   30978.606934 -25312.475586  31078.655762    0.097900  30978.606934   0.000000  100.048828        0.048828
1   31078.655762   31078.606934 -25312.475586  31078.655762    0.048828  31078.606934   0.000000    0.048828      -99.951172
2   31578.557861   31178.606934 -25312.475586  31578.557861  499.950928  31178.606934   0.000000  399.950928      299.950928
3   31678.655762   31377.575684 -25312.475586  31678.655762  500.048828  31377.575684   0.048828  301.031250      300.000000
4   31777.093262   31478.606689 -25312.475586  31777.093262  399.468750  31478.606689   0.048828  298.437744      298.437500
5   31777.093262   31578.606689 -25312.475586  31777.093262  201.234375  31578.606689   0.048828  198.437744      198.437500
6   31777.093262   31678.606771 -25312.475586  31777.093262  102.117188  31678.606771   0.048828   98.437663       98.437500
7   31777.093262   31678.606934 -25310.913086  31777.093262   52.558594  31678.606934   0.048828   98.437500        0.000000
8   31777.093262   31777.044434 -25309.350586  31777.093262   27.779297  31777.044434   0.048828    0.000000      -98.437500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:41]  --------------------------------------------------------------------------------
[07/26 15:20:41]  Iteration: 25 (10 solution, 14 counterexamples)
[07/26 15:20:42]  Generator returned sat in 0.544639 secs.
[07/26 15:20:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:20:43]  Improved number of small numbers from 33 to 47 out of a max of 99
[07/26 15:20:43]  Verifer returned sat in 0.968989 secs.
[07/26 15:20:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30890.514160   30700.489807 -25310.913086  30890.514160    0.097900  30700.489807   0.000000  190.024353       99.999878
1   30890.514160   30790.514404 -25310.913086  30890.514160    0.024658  30790.514404   0.000000   99.999756       -0.000122
2   30890.538818   30890.514282 -25310.913086  30890.538818  100.024414  30890.514282   0.000000    0.024536      -99.975464
3   31390.538757   30990.514282 -25310.913086  31390.538757  500.024475  30990.514282   0.024475  400.000000      300.000000
4   31390.538757   31090.514282 -25310.913086  31390.538757  397.024475  31090.514282   0.024475  300.000000      200.000000
5   31489.063232   31290.514282 -25310.913086  31489.063232  398.524475  31290.514282   0.024475  198.524475      198.524475
6   31690.563232   31390.514282 -25310.913086  31690.563232  400.024475  31390.514282   0.048950  300.000000      300.000000
7   31792.575470   31488.510203 -25310.913086  31792.575470  402.012238  31488.510203   2.061188  302.004079      300.000000
8   31892.575470   31490.514404 -25310.913086  31892.575470  402.004079  31490.514404   2.061188  399.999878      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:20:43]  --------------------------------------------------------------------------------
[07/26 15:20:43]  Iteration: 26 (10 solution, 15 counterexamples)
[07/26 15:20:45]  Generator returned sat in 1.321907 secs.
[07/26 15:20:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:20:47]  Improved gap from 401/8192 to 6.25
[07/26 15:20:47]  Improved number of small numbers from 70 to 74 out of a max of 100
[07/26 15:20:47]  Verifer returned sat in 2.178828 secs.
[07/26 15:20:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30890.513916   30537.493408 -25157.892131  30890.513916    0.097900  30537.493408        0.0  353.020508      253.020589
1   30890.514160   30737.493327 -25157.892131  30890.514160  353.020752  30737.493327        0.0  153.020833      153.020833
2   30890.514160   30837.493327 -25157.892131  30890.514160  153.020833  30837.493327        0.0   53.020833       53.020833
3   30890.514160   30884.472493 -25111.121297  30890.514160   52.979248  30884.472493        0.0    6.041667       -0.208333
4   31085.451660   30990.722493 -25111.121297  31085.451660  200.979167  30990.722493        0.0   94.729167       94.729167
5   31218.826660   30990.722493 -25111.121297  31218.826660  228.104167  30990.722493        0.0  228.104167      128.104167
6   31218.826660   31090.722493 -25111.121297  31218.826660  191.666667  31090.722493        0.0  128.104167       28.104167
7   31290.680827   31190.722493 -25111.079631  31290.680827  199.958333  31190.722493        0.0   99.958333        0.000000
8   31391.701660   31290.680908 -25111.079631  31391.701660  200.979167  31290.680908        0.0  101.020752        1.020833
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:47]  --------------------------------------------------------------------------------
[07/26 15:20:47]  Iteration: 27 (10 solution, 16 counterexamples)
[07/26 15:20:48]  Generator returned sat in 0.401876 secs.
[07/26 15:20:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:20:48]  Improved gap from 0 to 98.4375
[07/26 15:20:48]  Improved number of small numbers from 26 to 100 out of a max of 100
[07/26 15:20:48]  Verifer returned sat in 0.270652 secs.
[07/26 15:20:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   29567.943604   29567.943604 -24185.280029  29567.943604    0.097900  29567.943604   0.000000    0.000000      -96.937500
1   30064.905518   29664.881348 -24185.280029  30064.905518  496.961914  29664.881348   0.024414  399.999756      300.000000
2   30164.881104   29864.881104 -24185.280029  30164.881104  499.975342  29864.881104   0.024414  299.975586      299.975586
3   30264.929932   29964.881104 -24185.280029  30264.929932  400.024414  29964.881104   0.048828  300.000000      300.000000
4   30363.367432   30064.881104 -24185.280029  30363.367432  398.437500  30064.881104   0.048828  298.437500      298.437500
5   30363.367432   30164.881104 -24185.280029  30363.367432    1.000000  30164.881104   0.048828  198.437500      198.437500
6   30363.367432   30264.881104 -24185.280029  30363.367432    1.000000  30264.881104   0.048828   98.437500       98.437500
7   30363.367432   30264.881104 -24183.717529  30363.367432    1.000000  30264.881104   0.048828   98.437500        0.000000
8   30363.367432   30363.318604 -24183.717285  30363.367432    1.000000  30363.318604   0.048828    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:49]  --------------------------------------------------------------------------------
[07/26 15:20:49]  Iteration: 28 (10 solution, 17 counterexamples)
[07/26 15:20:50]  Generator returned sat in 0.862212 secs.
[07/26 15:20:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:50]  Improved gap from 0 to 98.4375
[07/26 15:20:50]  Improved number of small numbers from 27 to 100 out of a max of 100
[07/26 15:20:50]  Verifer returned sat in 0.417395 secs.
[07/26 15:20:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30065.160400   30065.160400 -24185.304688  30065.160400    0.097656  30065.160400   0.000000    0.000000        0.000000
1   30065.184814   30065.160400 -24185.280029  30065.184814    0.024414  30065.160400   0.000000    0.024414      -99.950928
2   30565.111328   30265.135742 -24185.280029  30565.111328  499.950928  30265.135742   0.000000  299.975586      299.975586
3   30665.160156   30265.135742 -24185.280029  30665.160156  400.024414  30265.135742   0.024414  400.000000      300.000000
4   30665.160156   30465.135742 -24185.280029  30665.160156  199.975342  30465.135742   0.024414  200.000000      200.000000
5   30665.160156   30465.135986 -24185.280029  30665.160156  199.975342  30465.135986   0.024414  199.999756      100.000000
6   30665.160156   30565.135986 -24185.280029  30665.160156  199.975342  30565.135986   0.024414   99.999756        0.000000
7   30765.135742   30665.135986 -24185.255615  30765.135742  199.975342  30665.135986   0.024414   99.975342        0.000000
8   30865.135742   30765.111328 -24185.255615  30865.135742  199.975342  30765.111328   0.024414  100.000000        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:50]  --------------------------------------------------------------------------------
[07/26 15:20:50]  Iteration: 29 (10 solution, 18 counterexamples)
[07/26 15:20:51]  Generator returned sat in 0.481492 secs.
[07/26 15:20:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:51]  Improved gap from 0 to 100
[07/26 15:20:51]  Improved number of small numbers from 65 to 100 out of a max of 100
[07/26 15:20:51]  Verifer returned sat in 0.311871 secs.
[07/26 15:20:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30663.655762   30163.704590 -24185.304688  30663.655762    0.097656  30163.704590   0.000000  499.951172      399.951172
1   30663.680176   30263.704590 -24185.304688  30663.680176  499.975586  30263.704590   0.000000  399.975586      299.975586
2   30763.679932   30463.679932 -24185.304688  30763.679932  499.975342  30463.679932   0.000000  300.000000      299.975342
3   30863.704346   30464.679932 -24185.304688  30863.704346  400.024414  30464.679932   0.000000  399.024414      299.999756
4   30864.704346   30564.680176 -24185.304688  30864.704346  400.024414  30564.680176   0.000000  300.024170      200.999756
5   30964.704590   30763.704590 -24185.304688  30964.704590  400.024414  30763.704590   0.000000  201.000000      201.000000
6   31163.729004   30863.704346 -24185.304688  31163.729004  400.024414  30863.704346   0.024414  300.000244      300.000000
7   31263.753174   30963.704590 -24185.304688  31263.753174  400.024414  30963.704590   0.048584  300.000000      300.000000
8   31363.777588   30963.704590 -24185.304688  31363.777588  400.024414  30963.704590   0.072998  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:20:52]  --------------------------------------------------------------------------------
[07/26 15:20:52]  Iteration: 30 (10 solution, 19 counterexamples)
[07/26 15:20:52]  Generator returned sat in 0.100622 secs.
[07/26 15:20:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:52]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 15:20:52]  Verifer returned sat in 0.125862 secs.
[07/26 15:20:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30663.655762   30163.704590 -24185.304688  30663.655762    0.097656  30163.704590   0.018311  499.932861      399.932861
1   30663.680176   30263.704590 -24185.304688  30663.680176  499.957275  30263.704590   0.018311  399.957275      299.957275
2   30763.679932   30463.679932 -24185.304688  30763.679932  499.957031  30463.679932   0.018311  299.981689      299.957031
3   30863.704346   30464.198486 -24185.304688  30863.704346  400.006104  30464.198486   0.018311  399.487549      299.981445
4   30864.222900   30564.198486 -24185.304688  30864.222900  400.006104  30564.198486   0.018311  300.006104      200.500000
5   30964.222900   30763.704590 -24185.304688  30964.222900  400.006104  30763.704590   0.018311  200.500000      200.500000
6   31163.729004   30863.704590 -24185.304688  31163.729004  400.006104  30863.704590   0.024414  300.000000      300.000000
7   31263.735107   30963.704590 -24185.304688  31263.735107  400.006104  30963.704590   0.030518  300.000000      300.000000
8   31363.741211   30963.704590 -24185.304688  31363.741211  400.006104  30963.704590   0.036621  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:20:52]  --------------------------------------------------------------------------------
[07/26 15:20:52]  Iteration: 31 (10 solution, 20 counterexamples)
[07/26 15:20:53]  Generator returned sat in 0.323554 secs.
[07/26 15:20:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:54]  Improved gap from 1/100 to 31.25
[07/26 15:20:54]  Improved number of small numbers from 89 to 100 out of a max of 100
[07/26 15:20:54]  Verifer returned sat in 0.740397 secs.
[07/26 15:20:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   31132.442383   30732.490723 -24125.483398  31132.442383    0.097168  30732.490723        0.0  399.951660      399.951416
1   31132.442383   30732.490967 -24125.483398  31132.442383  399.951416  30732.490967        0.0  399.951416      299.951416
2   31132.442383   30832.490967 -24125.483398  31132.442383    0.048584  30832.490967        0.0  299.951416      199.951416
3   31332.490967   31032.490967 -24125.483398  31332.490967  500.000000  31032.490967        0.0  300.000000      300.000000
4   31332.490967   31132.490723 -24125.483398  31332.490967  250.000000  31132.490723        0.0  200.000244      200.000000
5   31332.490967   31132.490967 -24125.483398  31332.490967  125.000000  31132.490967        0.0  200.000000      100.000000
6   31332.490967   31332.490967 -24125.483398  31332.490967   62.500000  31332.490967        0.0    0.000000        0.000000
7   31363.740967   31332.490967 -24056.733398  31363.740967   31.250000  31332.490967        0.0   31.250000        0.000000
8   31363.740967   31363.740967 -24056.733398  31363.740967   15.625000  31363.740967        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:54]  --------------------------------------------------------------------------------
[07/26 15:20:54]  Iteration: 32 (10 solution, 21 counterexamples)
[07/26 15:20:56]  Generator returned sat in 1.567057 secs.
[07/26 15:20:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:57]  Improved number of small numbers from 48 to 99 out of a max of 99
[07/26 15:20:57]  Verifer returned sat in 0.458007 secs.
[07/26 15:20:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30732.442139   30732.417969 -24175.716309  30732.442139    0.096924  30732.417969   0.000000    0.024170      -99.975830
1   30932.417969   30832.417969 -24175.716309  30932.417969  200.000000  30832.417969   0.000000  100.000000        0.000000
2   31032.417969   30932.417969 -24175.716309  31032.417969  200.000000  30932.417969   0.000000  100.000000        0.000000
3   31132.442383   31132.417969 -24175.716309  31132.442383  200.024414  31132.417969   0.000000    0.024414        0.024414
4   31532.442383   31132.417969 -24175.716309  31532.442383  400.024414  31132.417969   0.024414  400.000000      300.000000
5   31532.442383   31232.417969 -24175.716309  31532.442383    0.500000  31232.417969   0.024414  300.000000      200.000000
6   31532.442383   31393.417969 -24175.716309  31532.442383  150.500000  31393.417969   0.024414  139.000000      100.000000
7   31674.442383   31478.434082 -24175.716309  31674.442383  281.000000  31478.434082   0.024414  195.983887      142.000000
8   31932.466553   31532.418213 -24175.716309  31932.466553  454.008057  31532.418213   0.048584  399.999756      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:20:57]  --------------------------------------------------------------------------------
[07/26 15:20:57]  Iteration: 33 (10 solution, 22 counterexamples)
[07/26 15:20:58]  Generator returned sat in 0.477561 secs.
[07/26 15:20:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:58]  Improved gap from 1/400 to 98.4375
[07/26 15:20:58]  Improved number of small numbers from 79 to 100 out of a max of 100
[07/26 15:20:58]  Verifer returned sat in 0.246425 secs.
[07/26 15:20:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30932.442139   30932.393799 -24175.764893  30932.442139    0.096924  30932.393799        0.0    0.048340        0.048340
1   30932.442383   30932.394043 -24175.764893  30932.442383    0.048584  30932.394043        0.0    0.048340      -99.951416
2   31432.345459   31132.393799 -24175.764893  31432.345459  499.951416  31132.393799        0.0  299.951660      299.951660
3   31432.345459   31232.393799 -24175.764893  31432.345459   99.902832  31232.393799        0.0  199.951660      199.951660
4   31432.345459   31330.831299 -24175.764893  31432.345459   99.902832  31330.831299        0.0  101.514160       99.951660
5   31432.345459   31332.393799 -24175.716553  31432.345459   99.902832  31332.393799        0.0   99.951660        0.000000
6   31432.345459   31432.345459 -24174.154053  31432.345459   99.902832  31432.345459        0.0    0.000000      -98.437500
7   31532.248291   31530.879883 -24174.153809  31532.248291   99.902832  31530.879883        0.0    1.368408      -98.534424
8   31630.782715   31630.782715 -24174.153809  31630.782715   99.902832  31630.782715        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:20:58]  --------------------------------------------------------------------------------
[07/26 15:20:58]  Iteration: 34 (10 solution, 23 counterexamples)
[07/26 15:20:59]  Generator returned sat in 0.217295 secs.
[07/26 15:20:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:20:59]  Improved number of small numbers from 64 to 68 out of a max of 99
[07/26 15:20:59]  Verifer returned sat in 0.765830 secs.
[07/26 15:20:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30805.756592   30319.739277 -24175.764893  30805.756592    0.096924  30319.739277    0.00000  486.017314      399.999814
1   30805.758027   30405.756777 -24175.764893  30805.758027  486.018750  30405.756777    0.00125  400.000000      300.000000
2   30905.759277   30505.756777 -24175.764893  30905.759277  500.001250  30505.756777    0.00250  400.000000      300.000000
3   30905.760527   30605.756777 -24175.764893  30905.760527  400.001250  30605.756777    0.00250  300.001250      200.001250
4   31148.769277   30719.756777 -24175.764893  31148.769277  543.010000  30719.756777   43.01250  386.000000      300.000000
5   31148.769277   30905.756777 -24175.764893  31148.769277    0.010000  30905.756777   43.01250  200.000000      200.000000
6   31148.779277   30905.756777 -24175.764893  31148.779277  200.010000  30905.756777   43.01250  200.010000      100.010000
7   31298.779277   31105.756777 -24175.764893  31298.779277  350.010000  31105.756777   43.01250  150.010000      150.010000
8   31691.779277   31105.756836 -24175.764893  31691.779277  543.010000  31105.756836  186.02250  399.999941      300.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:21:00]  --------------------------------------------------------------------------------
[07/26 15:21:00]  Iteration: 35 (10 solution, 24 counterexamples)
[07/26 15:21:02]  Generator returned sat in 1.471623 secs.
[07/26 15:21:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:02]  Verifer returned unsat in 0.047511 secs.
[07/26 15:21:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:02]  --------------------------------------------------------------------------------
[07/26 15:21:02]  Iteration: 36 (11 solution, 24 counterexamples)
[07/26 15:21:02]  Generator returned sat in 0.091624 secs.
[07/26 15:21:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:02]  Verifer returned unsat in 0.036660 secs.
[07/26 15:21:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:02]  --------------------------------------------------------------------------------
[07/26 15:21:02]  Iteration: 37 (12 solution, 24 counterexamples)
[07/26 15:21:03]  Generator returned sat in 0.097007 secs.
[07/26 15:21:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:03]  Verifer returned unsat in 0.047739 secs.
[07/26 15:21:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:03]  --------------------------------------------------------------------------------
[07/26 15:21:03]  Iteration: 38 (13 solution, 24 counterexamples)
[07/26 15:21:03]  Generator returned sat in 0.089570 secs.
[07/26 15:21:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:03]  Verifer returned unsat in 0.039901 secs.
[07/26 15:21:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:03]  --------------------------------------------------------------------------------
[07/26 15:21:03]  Iteration: 39 (14 solution, 24 counterexamples)
[07/26 15:21:04]  Generator returned sat in 0.076446 secs.
[07/26 15:21:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:04]  Verifer returned unsat in 0.045813 secs.
[07/26 15:21:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:04]  --------------------------------------------------------------------------------
[07/26 15:21:04]  Iteration: 40 (15 solution, 24 counterexamples)
[07/26 15:21:04]  Generator returned sat in 0.218511 secs.
[07/26 15:21:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:04]  Improved gap from 397/16384 to 98.4375
[07/26 15:21:05]  Improved number of small numbers from 45 to 90 out of a max of 100
[07/26 15:21:05]  Verifer returned sat in 0.705085 secs.
[07/26 15:21:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30705.708252   30305.708496 -23907.759521  30705.708252    0.096924  30305.708496    0.00000  399.999756      399.951416
1   30705.708252   30405.756836 -23907.759521  30705.708252  399.999756  30405.756836    0.00000  299.951416      299.951416
2   30805.659668   30505.756836 -23907.759521  30805.659668  399.902832  30505.756836    0.00000  299.902832      299.902832
3   30805.659668   30605.756836 -23907.759521  30805.659668   23.862885  30605.756836    0.00000  199.902832      199.902832
4   30805.659668   30705.756777 -23907.759521  30805.659668   49.225769  30705.756777    0.00000   99.902891       99.902832
5   30805.708315   30705.756836 -23907.711182  30805.708315   99.951538  30705.756836    0.00000   99.951479       -0.000181
6   30907.159912   30901.450684 -23907.711182  30907.159912  201.403076  30901.450684    0.00000    5.709229        1.451416
7   31305.756836   31005.708252 -23907.711182  31305.756836  404.306152  31005.708252    0.04834  300.000244      300.000000
8   31305.756836   31005.708496 -23907.711182  31305.756836    1.000000  31005.708496    0.04834  300.000000      200.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:21:05]  --------------------------------------------------------------------------------
[07/26 15:21:05]  Iteration: 41 (15 solution, 25 counterexamples)
[07/26 15:21:07]  Generator returned sat in 1.758786 secs.
[07/26 15:21:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:08]  Improved number of small numbers from 66 to 99 out of a max of 99
[07/26 15:21:08]  Verifer returned sat in 0.277948 secs.
[07/26 15:21:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30802.753174   30602.752930 -23907.711426  30802.753174    0.096680  30602.752930   0.000000  200.000244      100.498779
1   30802.753174   30802.254395 -23907.711426  30802.753174  199.999756  30802.254395   0.000000    0.498779        0.498779
2   30802.753174   30802.752930 -23907.711182  30802.753174    0.001465  30802.752930   0.000000    0.000244      -99.500977
3   31302.252930   31002.254150 -23907.711182  31302.252930  499.500000  31002.254150   0.000000  299.998779      299.998779
4   31402.255371   31002.254395 -23907.711182  31402.255371  400.001221  31002.254395   0.001221  399.999756      300.000000
5   31402.255371   31202.254150 -23907.711182  31402.255371    0.010000  31202.254150   0.001221  200.000000      200.000000
6   31602.256592   31302.254150 -23907.711182  31602.256592  400.001221  31302.254150   0.002441  300.000000      300.000000
7   31602.256592   31401.755615 -23907.711182  31602.256592    0.010000  31401.755615   0.002441  200.498535      200.000000
8   31801.759277   31402.254395 -23907.711182  31801.759277  400.001221  31402.254395   0.002441  399.502441      299.502686
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=2, measured_loss_rate=0.[0m
[07/26 15:21:08]  --------------------------------------------------------------------------------
[07/26 15:21:08]  Iteration: 42 (15 solution, 26 counterexamples)
[07/26 15:21:09]  Generator returned sat in 0.504329 secs.
[07/26 15:21:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:09]  Improved gap from 99/4096 to 100
[07/26 15:21:09]  Improved number of small numbers from 96 to 100 out of a max of 100
[07/26 15:21:09]  Verifer returned sat in 0.182438 secs.
[07/26 15:21:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   31002.256348   30802.256348 -23907.711182  31002.256348    0.096680  30802.256348    0.00000  200.000000      200.000000
1   31002.256348   30902.256348 -23907.711182  31002.256348    0.023926  30902.256348    0.00000  100.000000      100.000000
2   31002.256348   30902.256348 -23907.711182  31002.256348    0.024170  30902.256348    0.00000  100.000000        0.000000
3   31300.780518   31002.256592 -23907.711182  31300.780518  398.524170  31002.256592    0.00000  298.523926      198.524170
4   31401.280762   31102.256348 -23907.711182  31401.280762  399.024170  31102.256348    0.00000  299.024414      199.024414
5   31501.780518   31302.256348 -23907.711182  31501.780518  399.524170  31302.256348    0.00000  199.524170      199.524170
6   31702.280518   31402.018555 -23907.711182  31702.280518  400.024170  31402.018555    0.02417  300.237793      300.000000
7   31802.304688   31502.256348 -23907.711182  31802.304688  400.261963  31502.256348    0.04834  300.000000      300.000000
8   31902.804688   31502.256348 -23907.711182  31902.804688  400.500000  31502.256348    0.54834  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:21:09]  --------------------------------------------------------------------------------
[07/26 15:21:09]  Iteration: 43 (15 solution, 27 counterexamples)
[07/26 15:21:11]  Generator returned sat in 1.817247 secs.
[07/26 15:21:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:12]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 15:21:12]  Verifer returned sat in 0.142109 secs.
[07/26 15:21:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   31002.256348   30802.256348 -23907.711182  31002.256348    0.096680  30802.256348    0.00000  200.000000      200.000000
1   31002.256348   30902.256348 -23907.711182  31002.256348    0.023926  30902.256348    0.00000  100.000000      100.000000
2   31002.256348   30902.256348 -23907.711182  31002.256348    0.024170  30902.256348    0.00000  100.000000        0.000000
3   31299.280518   31002.256592 -23907.711182  31299.280518  397.024170  31002.256592    0.00000  297.023926      197.024170
4   31401.280762   31102.256348 -23907.711182  31401.280762  399.024170  31102.256348    0.00000  299.024414      199.024414
5   31503.280518   31299.256348 -23907.711182  31503.280518  401.024170  31299.256348    0.00000  204.024170      201.024170
6   31702.280518   31402.018555 -23907.711182  31702.280518  403.024170  31402.018555    0.02417  300.237793      300.000000
7   31802.304688   31502.256348 -23907.711182  31802.304688  400.261963  31502.256348    0.04834  300.000000      300.000000
8   31902.804688   31502.256348 -23907.711182  31902.804688  400.500000  31502.256348    0.54834  400.000000      300.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:21:12]  --------------------------------------------------------------------------------
[07/26 15:21:12]  Iteration: 44 (15 solution, 28 counterexamples)
[07/26 15:21:13]  Generator returned sat in 0.999405 secs.
[07/26 15:21:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:13]  Verifer returned unsat in 0.033575 secs.
[07/26 15:21:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:13]  --------------------------------------------------------------------------------
[07/26 15:21:13]  Iteration: 45 (16 solution, 28 counterexamples)
[07/26 15:21:14]  Generator returned sat in 0.111056 secs.
[07/26 15:21:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:14]  Verifer returned unsat in 0.041332 secs.
[07/26 15:21:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:14]  --------------------------------------------------------------------------------
[07/26 15:21:14]  Iteration: 46 (17 solution, 28 counterexamples)
[07/26 15:21:14]  Generator returned sat in 0.109025 secs.
[07/26 15:21:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:15]  Verifer returned unsat in 0.033442 secs.
[07/26 15:21:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:15]  --------------------------------------------------------------------------------
[07/26 15:21:15]  Iteration: 47 (18 solution, 28 counterexamples)
[07/26 15:21:15]  Generator returned sat in 0.109489 secs.
[07/26 15:21:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:15]  Verifer returned unsat in 0.039568 secs.
[07/26 15:21:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:15]  --------------------------------------------------------------------------------
[07/26 15:21:15]  Iteration: 48 (19 solution, 28 counterexamples)
[07/26 15:21:16]  Generator returned sat in 0.096514 secs.
[07/26 15:21:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:16]  Verifer returned unsat in 0.044249 secs.
[07/26 15:21:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:21:16]  --------------------------------------------------------------------------------
[07/26 15:21:16]  Iteration: 49 (20 solution, 28 counterexamples)
[07/26 15:21:18]  Generator returned sat in 1.420841 secs.
[07/26 15:21:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:18]  Verifer returned unsat in 0.039002 secs.
[07/26 15:21:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:18]  --------------------------------------------------------------------------------
[07/26 15:21:18]  Iteration: 50 (21 solution, 28 counterexamples)
[07/26 15:21:18]  Generator returned sat in 0.329399 secs.
[07/26 15:21:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:19]  Improved gap from 1/400 to 98.4375
[07/26 15:21:19]  Improved number of small numbers from 57 to 88 out of a max of 100
[07/26 15:21:19]  Verifer returned sat in 0.725988 secs.
[07/26 15:21:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   30852.984863   30852.980225 -23958.449707  30852.984863    0.096680  30852.980225      0.000    0.004639       -0.010010
1   31252.990234   30952.994873 -23958.449707  31252.990234  400.010010  30952.994873      0.000  299.995361      299.995361
2   31352.989990   31052.994873 -23958.449707  31352.989990  399.995117  31052.994873      0.000  299.995117      299.995117
3   31352.989990   31152.994873 -23958.449707  31352.989990   24.247500  31152.994873      0.000  199.995117      199.995117
4   31352.989990   31252.994873 -23958.449707  31352.989990   49.495000  31252.994873      0.000   99.995117       99.995117
5   31352.989990   31252.995098 -23958.444932  31352.989990   99.990000  31252.995098      0.000   99.994893       -0.000107
6   31453.975098   31450.035098 -23958.444932  31453.975098  200.980000  31450.035098      0.000    3.940000        0.985000
7   31852.995098   31552.989990 -23958.444932  31852.995098  402.960000  31552.989990      0.005  300.000107      300.000000
8   31852.995098   31552.990234 -23958.444932  31852.995098    0.010000  31552.990234      0.005  299.999863      200.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:21:19]  --------------------------------------------------------------------------------
[07/26 15:21:19]  Iteration: 51 (21 solution, 29 counterexamples)
[07/26 15:21:23]  Generator returned sat in 3.096089 secs.
[07/26 15:21:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:25]  Improved gap from 0 to 4.6875
[07/26 15:21:25]  Improved number of small numbers from 46 to 100 out of a max of 100
[07/26 15:21:25]  Verifer returned sat in 2.337191 secs.
[07/26 15:21:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   31878.873047   31527.077881 -24005.697510  31878.873047    0.096680  31527.077881        0.0  351.795166      251.795166
1   31878.921387   31727.077881 -24005.697510  31878.921387  351.843506  31727.077881        0.0  151.843506      151.843506
2   31878.969482   31827.077637 -24005.697510  31878.969482  151.891602  31827.077637        0.0   51.891846       51.891602
3   31878.969482   31875.186035 -23958.493164  31878.969482   51.843506  31875.186035        0.0    3.783447       -0.904053
4   32076.661865   31979.873535 -23958.493164  32076.661865  201.475830  31979.873535        0.0   96.788330       96.788330
5   32208.509277   31979.873535 -23958.493164  32208.509277  228.635742  31979.873535        0.0  228.635742      128.635742
6   32208.509277   32079.873535 -23958.493164  32208.509277  192.215820  32079.873535        0.0  128.635742       28.635742
7   32279.825195   32179.873535 -23958.444824  32279.825195  199.951660  32179.873535        0.0   99.951660        0.000000
8   32381.349365   32279.825439 -23958.444824  32381.349365  201.475830  32279.825439        0.0  101.523926        1.524170
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:21:26]  --------------------------------------------------------------------------------
[07/26 15:21:26]  Iteration: 52 (21 solution, 30 counterexamples)
[07/26 15:21:28]  Generator returned sat in 2.483112 secs.
[07/26 15:21:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:29]  Verifer returned unsat in 0.068279 secs.
[07/26 15:21:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:29]  --------------------------------------------------------------------------------
[07/26 15:21:29]  Iteration: 53 (22 solution, 30 counterexamples)
[07/26 15:21:29]  Generator returned sat in 0.140389 secs.
[07/26 15:21:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:29]  Verifer returned unsat in 0.060432 secs.
[07/26 15:21:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:29]  --------------------------------------------------------------------------------
[07/26 15:21:29]  Iteration: 54 (23 solution, 30 counterexamples)
[07/26 15:21:30]  Generator returned sat in 0.110703 secs.
[07/26 15:21:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:30]  Verifer returned unsat in 0.046784 secs.
[07/26 15:21:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:30]  --------------------------------------------------------------------------------
[07/26 15:21:30]  Iteration: 55 (24 solution, 30 counterexamples)
[07/26 15:21:30]  Generator returned sat in 0.128872 secs.
[07/26 15:21:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:30]  Verifer returned unsat in 0.029994 secs.
[07/26 15:21:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:30]  --------------------------------------------------------------------------------
[07/26 15:21:30]  Iteration: 56 (25 solution, 30 counterexamples)
[07/26 15:21:31]  Generator returned sat in 0.138533 secs.
[07/26 15:21:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:31]  Verifer returned unsat in 0.027190 secs.
[07/26 15:21:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:31]  --------------------------------------------------------------------------------
[07/26 15:21:31]  Iteration: 57 (26 solution, 30 counterexamples)
[07/26 15:21:32]  Generator returned sat in 0.133025 secs.
[07/26 15:21:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:32]  Verifer returned unsat in 0.030325 secs.
[07/26 15:21:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:32]  --------------------------------------------------------------------------------
[07/26 15:21:32]  Iteration: 58 (27 solution, 30 counterexamples)
[07/26 15:21:32]  Generator returned sat in 0.122222 secs.
[07/26 15:21:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:32]  Verifer returned unsat in 0.038002 secs.
[07/26 15:21:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:32]  --------------------------------------------------------------------------------
[07/26 15:21:32]  Iteration: 59 (28 solution, 30 counterexamples)
[07/26 15:21:33]  Generator returned sat in 0.135251 secs.
[07/26 15:21:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:33]  Verifer returned unsat in 0.050503 secs.
[07/26 15:21:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:33]  --------------------------------------------------------------------------------
[07/26 15:21:33]  Iteration: 60 (29 solution, 30 counterexamples)
[07/26 15:21:34]  Generator returned sat in 0.119851 secs.
[07/26 15:21:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:34]  Verifer returned unsat in 0.039573 secs.
[07/26 15:21:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:34]  --------------------------------------------------------------------------------
[07/26 15:21:34]  Iteration: 61 (30 solution, 30 counterexamples)
[07/26 15:21:34]  Generator returned sat in 0.116377 secs.
[07/26 15:21:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:34]  Verifer returned unsat in 0.041739 secs.
[07/26 15:21:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:34]  --------------------------------------------------------------------------------
[07/26 15:21:34]  Iteration: 62 (31 solution, 30 counterexamples)
[07/26 15:21:35]  Generator returned sat in 0.117841 secs.
[07/26 15:21:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:35]  Verifer returned unsat in 0.039696 secs.
[07/26 15:21:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:35]  --------------------------------------------------------------------------------
[07/26 15:21:35]  Iteration: 63 (32 solution, 30 counterexamples)
[07/26 15:21:35]  Generator returned sat in 0.104535 secs.
[07/26 15:21:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:35]  Verifer returned unsat in 0.040661 secs.
[07/26 15:21:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:35]  --------------------------------------------------------------------------------
[07/26 15:21:35]  Iteration: 64 (33 solution, 30 counterexamples)
[07/26 15:21:36]  Generator returned sat in 0.207693 secs.
[07/26 15:21:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:36]  Improved gap from 0 to 98.4375
[07/26 15:21:36]  Improved number of small numbers from 90 to 100 out of a max of 100
[07/26 15:21:36]  Verifer returned sat in 0.209723 secs.
[07/26 15:21:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   34276.018311   34075.994141 -24660.593994  34276.018311    0.096436  34075.994141    0.00000  200.024170       100.02417
1   34276.018311   34275.970215 -24660.593994  34276.018311    0.023926  34275.970215    0.00000    0.048096         0.02417
2   34276.018311   34275.994141 -24660.593994  34276.018311    0.023926  34275.994141    0.00000    0.024170       -99.97583
3   34826.018311   34474.712891 -24660.593994  34826.018311  550.024170  34474.712891   50.02417  301.281250       300.00000
4   34924.455811   34575.994141 -24660.593994  34924.455811  399.718750  34575.994141   50.02417  298.437500       298.43750
5   34924.455811   34575.994141 -24660.593994  34924.455811    1.000000  34575.994141   50.02417  298.437500       198.43750
6   34924.455811   34675.994385 -24660.593994  34924.455811    1.000000  34675.994385   50.02417  198.437256        98.43750
7   34924.455811   34775.994141 -24659.031494  34924.455811    1.000000  34775.994141   50.02417   98.437500         0.00000
8   34924.455811   34874.431641 -24659.031494  34924.455811    1.000000  34874.431641   50.02417    0.000000      -100.00000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:21:37]  --------------------------------------------------------------------------------
[07/26 15:21:37]  Iteration: 65 (33 solution, 31 counterexamples)
[07/26 15:21:39]  Generator returned sat in 2.055012 secs.
[07/26 15:21:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:39]  Verifer returned unsat in 0.054435 secs.
[07/26 15:21:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:39]  --------------------------------------------------------------------------------
[07/26 15:21:39]  Iteration: 66 (34 solution, 31 counterexamples)
[07/26 15:21:40]  Generator returned sat in 0.241318 secs.
[07/26 15:21:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:40]  Verifer returned unsat in 0.044598 secs.
[07/26 15:21:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:40]  --------------------------------------------------------------------------------
[07/26 15:21:40]  Iteration: 67 (35 solution, 31 counterexamples)
[07/26 15:21:41]  Generator returned sat in 0.144094 secs.
[07/26 15:21:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:41]  Verifer returned unsat in 0.034828 secs.
[07/26 15:21:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:41]  --------------------------------------------------------------------------------
[07/26 15:21:41]  Iteration: 68 (36 solution, 31 counterexamples)
[07/26 15:21:41]  Generator returned sat in 0.136095 secs.
[07/26 15:21:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:41]  Verifer returned unsat in 0.056345 secs.
[07/26 15:21:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:41]  --------------------------------------------------------------------------------
[07/26 15:21:41]  Iteration: 69 (37 solution, 31 counterexamples)
[07/26 15:21:42]  Generator returned sat in 0.118333 secs.
[07/26 15:21:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:42]  Verifer returned unsat in 0.029013 secs.
[07/26 15:21:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:21:42]  --------------------------------------------------------------------------------
[07/26 15:21:42]  Iteration: 70 (38 solution, 31 counterexamples)
[07/26 15:21:43]  Generator returned sat in 1.157655 secs.
[07/26 15:21:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:44]  Verifer returned unsat in 0.048863 secs.
[07/26 15:21:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:44]  --------------------------------------------------------------------------------
[07/26 15:21:44]  Iteration: 71 (39 solution, 31 counterexamples)
[07/26 15:21:44]  Generator returned sat in 0.154980 secs.
[07/26 15:21:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:44]  Verifer returned unsat in 0.040476 secs.
[07/26 15:21:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:44]  --------------------------------------------------------------------------------
[07/26 15:21:44]  Iteration: 72 (40 solution, 31 counterexamples)
[07/26 15:21:45]  Generator returned sat in 0.133590 secs.
[07/26 15:21:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:45]  Verifer returned unsat in 0.046139 secs.
[07/26 15:21:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:45]  --------------------------------------------------------------------------------
[07/26 15:21:45]  Iteration: 73 (41 solution, 31 counterexamples)
[07/26 15:21:46]  Generator returned sat in 0.567365 secs.
[07/26 15:21:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:46]  Improved gap from 0 to 31.25
[07/26 15:21:47]  Improved number of small numbers from 38 to 60 out of a max of 100
[07/26 15:21:47]  Verifer returned sat in 1.266625 secs.
[07/26 15:21:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32091.234375   32091.186523 -23979.185059  32091.234375    0.096191  32091.186523        0.0    0.047852        0.023778
1   32091.234375   32091.210693 -23979.184937  32091.234375    0.024170  32091.210693        0.0    0.023682      -99.976100
2   32191.234619   32191.210475 -23979.184937  32191.234619  100.023926  32191.210475        0.0    0.024144      -99.975856
3   32690.350812   32291.210693 -23979.184937  32690.350812  499.140338  32291.210693        0.0  399.140119      299.140338
4   32690.350812   32491.210449 -23979.184937  32690.350812  250.070169  32491.210449        0.0  199.140363      199.140338
5   32690.350812   32591.210449 -23979.184937  32690.350812  125.535084  32591.210449        0.0   99.140363       99.140338
6   32690.350812   32690.326704 -23979.184937  32690.350812   63.267542  32690.326704        0.0    0.024109       -0.859662
7   32722.460475   32691.210475 -23910.434937  32722.460475   32.133771  32691.210475        0.0   31.250000        0.000000
8   32722.460475   32722.460475 -23910.434814  32722.460475   16.566886  32722.460475        0.0    0.000000      -99.999878
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:21:48]  --------------------------------------------------------------------------------
[07/26 15:21:48]  Iteration: 74 (41 solution, 32 counterexamples)
[07/26 15:21:49]  Generator returned sat in 1.474455 secs.
[07/26 15:21:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:50]  Verifer returned unsat in 0.070285 secs.
[07/26 15:21:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:50]  --------------------------------------------------------------------------------
[07/26 15:21:50]  Iteration: 75 (42 solution, 32 counterexamples)
[07/26 15:21:50]  Generator returned sat in 0.374767 secs.
[07/26 15:21:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:51]  Improved gap from 0 to 0
[07/26 15:21:51]  Improved number of small numbers from 90 to 100 out of a max of 100
[07/26 15:21:51]  Verifer returned sat in 0.333586 secs.
[07/26 15:21:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   32091.234131   31991.186035 -23879.160889  32091.234131    0.096191  31991.186035        0.0  100.048096      100.047852
1   32091.234131   32091.186279 -23879.160889  32091.234131    0.047852  32091.186279        0.0    0.047852        0.047852
2   32191.186279   32191.138184 -23879.160889  32191.186279  100.000000  32191.138184        0.0    0.048096        0.000000
3   32490.782227   32291.186279 -23879.160889  32490.782227  299.644043  32291.186279        0.0  199.595947      199.595947
4   32490.782227   32391.186035 -23879.160889  32490.782227    0.500000  32391.186035        0.0   99.596191       99.595947
5   32490.782227   32490.734375 -23879.160645  32490.782227    0.500000  32490.734375        0.0    0.047852       -0.403809
6   32491.234375   32491.186279 -23779.612793  32491.234375    0.500000  32491.186279        0.0    0.048096       -0.403809
7   32491.686279   32491.638184 -23680.112793  32491.686279    0.500000  32491.638184        0.0    0.048096       -0.451904
8   32492.138184   32492.138184 -23680.112549  32492.138184    0.500000  32492.138184        0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:21:51]  --------------------------------------------------------------------------------
[07/26 15:21:51]  Iteration: 76 (42 solution, 33 counterexamples)
[07/26 15:21:53]  Generator returned sat in 1.659615 secs.
[07/26 15:21:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:21:53]  Improved gap from 1851/4096 to 0
[07/26 15:21:54]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 15:21:54]  Verifer returned sat in 0.345076 secs.
[07/26 15:21:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t  queue_t  bottle_queue_t
0   32191.186279   31891.186279 -23880.01709  32191.186279    0.096191  31891.186279        0.0    300.0           200.0
1   32191.186279   31991.186279 -23880.01709  32191.186279    0.047852  31991.186279        0.0    200.0           100.0
2   32191.186279   32091.186279 -23880.01709  32191.186279  200.000000  32091.186279        0.0    100.0             0.0
3   32591.186279   32291.186279 -23880.01709  32591.186279  500.000000  32291.186279        0.0    300.0           300.0
4   32591.186279   32391.186279 -23880.01709  32591.186279    1.500000  32391.186279        0.0    200.0           200.0
5   32591.186279   32491.186279 -23880.01709  32591.186279    1.500000  32491.186279        0.0    100.0           100.0
6   32591.186279   32491.186279 -23880.01709  32591.186279    1.500000  32491.186279        0.0    100.0             0.0
7   32591.186279   32591.186279 -23780.01709  32591.186279    1.500000  32591.186279        0.0      0.0             0.0
8   32592.686279   32591.186279 -23780.01709  32592.686279    1.500000  32591.186279        0.0      1.5           -98.5
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:21:54]  --------------------------------------------------------------------------------
[07/26 15:21:54]  Iteration: 77 (42 solution, 34 counterexamples)
[07/26 15:21:57]  Generator returned sat in 2.292251 secs.
[07/26 15:21:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:57]  Verifer returned unsat in 0.041634 secs.
[07/26 15:21:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:57]  --------------------------------------------------------------------------------
[07/26 15:21:57]  Iteration: 78 (43 solution, 34 counterexamples)
[07/26 15:21:57]  Generator returned sat in 0.158410 secs.
[07/26 15:21:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:57]  Verifer returned unsat in 0.034907 secs.
[07/26 15:21:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:57]  --------------------------------------------------------------------------------
[07/26 15:21:57]  Iteration: 79 (44 solution, 34 counterexamples)
[07/26 15:21:58]  Generator returned sat in 0.138343 secs.
[07/26 15:21:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:58]  Verifer returned unsat in 0.027092 secs.
[07/26 15:21:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:58]  --------------------------------------------------------------------------------
[07/26 15:21:58]  Iteration: 80 (45 solution, 34 counterexamples)
[07/26 15:21:59]  Generator returned sat in 0.138849 secs.
[07/26 15:21:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:59]  Verifer returned unsat in 0.028995 secs.
[07/26 15:21:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:21:59]  --------------------------------------------------------------------------------
[07/26 15:21:59]  Iteration: 81 (46 solution, 34 counterexamples)
[07/26 15:22:00]  Generator returned sat in 0.314850 secs.
[07/26 15:22:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:00]  Verifer returned unsat in 0.045004 secs.
[07/26 15:22:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:00]  --------------------------------------------------------------------------------
[07/26 15:22:00]  Iteration: 82 (47 solution, 34 counterexamples)
[07/26 15:22:00]  Generator returned sat in 0.168308 secs.
[07/26 15:22:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:00]  Verifer returned unsat in 0.044284 secs.
[07/26 15:22:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:00]  --------------------------------------------------------------------------------
[07/26 15:22:00]  Iteration: 83 (48 solution, 34 counterexamples)
[07/26 15:22:01]  Generator returned sat in 0.169391 secs.
[07/26 15:22:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:01]  Verifer returned unsat in 0.041462 secs.
[07/26 15:22:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:01]  --------------------------------------------------------------------------------
[07/26 15:22:01]  Iteration: 84 (49 solution, 34 counterexamples)
[07/26 15:22:02]  Generator returned sat in 0.146893 secs.
[07/26 15:22:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:02]  Verifer returned unsat in 0.046259 secs.
[07/26 15:22:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:02]  --------------------------------------------------------------------------------
[07/26 15:22:02]  Iteration: 85 (50 solution, 34 counterexamples)
[07/26 15:22:02]  Generator returned sat in 0.131219 secs.
[07/26 15:22:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:03]  Verifer returned unsat in 0.046059 secs.
[07/26 15:22:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:03]  --------------------------------------------------------------------------------
[07/26 15:22:03]  Iteration: 86 (51 solution, 34 counterexamples)
[07/26 15:22:03]  Generator returned sat in 0.142789 secs.
[07/26 15:22:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:03]  Verifer returned unsat in 0.053826 secs.
[07/26 15:22:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:03]  --------------------------------------------------------------------------------
[07/26 15:22:03]  Iteration: 87 (52 solution, 34 counterexamples)
[07/26 15:22:04]  Generator returned sat in 0.497667 secs.
[07/26 15:22:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:04]  Verifer returned unsat in 0.044957 secs.
[07/26 15:22:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:04]  --------------------------------------------------------------------------------
[07/26 15:22:04]  Iteration: 88 (53 solution, 34 counterexamples)
[07/26 15:22:05]  Generator returned sat in 0.161393 secs.
[07/26 15:22:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:05]  Verifer returned unsat in 0.065812 secs.
[07/26 15:22:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:05]  --------------------------------------------------------------------------------
[07/26 15:22:05]  Iteration: 89 (54 solution, 34 counterexamples)
[07/26 15:22:06]  Generator returned sat in 0.140484 secs.
[07/26 15:22:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:06]  Verifer returned unsat in 0.043761 secs.
[07/26 15:22:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:06]  --------------------------------------------------------------------------------
[07/26 15:22:06]  Iteration: 90 (55 solution, 34 counterexamples)
[07/26 15:22:06]  Generator returned sat in 0.170707 secs.
[07/26 15:22:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:07]  Verifer returned unsat in 0.035866 secs.
[07/26 15:22:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:07]  --------------------------------------------------------------------------------
[07/26 15:22:07]  Iteration: 91 (56 solution, 34 counterexamples)
[07/26 15:22:07]  Generator returned sat in 0.187873 secs.
[07/26 15:22:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:07]  Verifer returned unsat in 0.043301 secs.
[07/26 15:22:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:07]  --------------------------------------------------------------------------------
[07/26 15:22:07]  Iteration: 92 (57 solution, 34 counterexamples)
[07/26 15:22:08]  Generator returned sat in 0.135318 secs.
[07/26 15:22:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:08]  Verifer returned unsat in 0.030807 secs.
[07/26 15:22:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:08]  --------------------------------------------------------------------------------
[07/26 15:22:08]  Iteration: 93 (58 solution, 34 counterexamples)
[07/26 15:22:09]  Generator returned sat in 0.976288 secs.
[07/26 15:22:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:09]  Verifer returned unsat in 0.036398 secs.
[07/26 15:22:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:10]  --------------------------------------------------------------------------------
[07/26 15:22:10]  Iteration: 94 (59 solution, 34 counterexamples)
[07/26 15:22:10]  Generator returned sat in 0.153777 secs.
[07/26 15:22:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:10]  Verifer returned unsat in 0.040034 secs.
[07/26 15:22:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:10]  --------------------------------------------------------------------------------
[07/26 15:22:10]  Iteration: 95 (60 solution, 34 counterexamples)
[07/26 15:22:11]  Generator returned sat in 0.152490 secs.
[07/26 15:22:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:11]  Verifer returned unsat in 0.031427 secs.
[07/26 15:22:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:11]  --------------------------------------------------------------------------------
[07/26 15:22:11]  Iteration: 96 (61 solution, 34 counterexamples)
[07/26 15:22:12]  Generator returned sat in 0.138329 secs.
[07/26 15:22:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:12]  Verifer returned unsat in 0.033601 secs.
[07/26 15:22:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:12]  --------------------------------------------------------------------------------
[07/26 15:22:12]  Iteration: 97 (62 solution, 34 counterexamples)
[07/26 15:22:12]  Generator returned sat in 0.209533 secs.
[07/26 15:22:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:12]  Verifer returned unsat in 0.049628 secs.
[07/26 15:22:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:12]  --------------------------------------------------------------------------------
[07/26 15:22:12]  Iteration: 98 (63 solution, 34 counterexamples)
[07/26 15:22:14]  Generator returned sat in 1.435935 secs.
[07/26 15:22:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:20]  Improved gap from 393/8192 to 3.125
[07/26 15:22:20]  Improved number of small numbers from 42 to 48 out of a max of 100
[07/26 15:22:20]  Verifer returned sat in 5.921432 secs.
[07/26 15:22:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   29270.006104   29270.005879 -21388.348276  29270.006104    0.095947  29270.005879        0.0    0.000225      -99.999775
1   29620.678853   29470.005879 -21388.348276  29620.678853  350.672974  29470.005879        0.0  150.672974      150.672974
2   29620.678853   29570.005879 -21388.348276  29620.678853  150.672852  29570.005879        0.0   50.672974       50.672974
3   29620.774800   29619.141011 -21340.608408  29620.774800   50.768921  29619.141011        0.0    1.633789       -1.491211
4   29821.093037   29722.266011 -21340.608408  29821.093037  201.952026  29722.266011        0.0   98.827026       98.827026
5   29951.372090   29722.266011 -21340.608408  29951.372090  229.106079  29722.266011        0.0  229.106079      129.106079
6   29951.372090   29822.266011 -21340.608408  29951.372090  192.683105  29822.266011        0.0  129.106079       29.106079
7   30022.170063   29922.266011 -21340.512461  30022.170063  199.904053  29922.266011        0.0   99.904053        0.000000
8   30124.218037   30022.170166 -21340.512461  30124.218037  201.952026  30022.170166        0.0  102.047871        2.047974
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:22:21]  --------------------------------------------------------------------------------
[07/26 15:22:21]  Iteration: 99 (63 solution, 35 counterexamples)
[07/26 15:22:23]  Generator returned sat in 2.075766 secs.
[07/26 15:22:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:23]  Verifer returned unsat in 0.077296 secs.
[07/26 15:22:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:23]  --------------------------------------------------------------------------------
[07/26 15:22:23]  Iteration: 100 (64 solution, 35 counterexamples)
[07/26 15:22:24]  Generator returned sat in 0.158207 secs.
[07/26 15:22:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:24]  Verifer returned unsat in 0.069779 secs.
[07/26 15:22:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:24]  --------------------------------------------------------------------------------
[07/26 15:22:24]  Iteration: 101 (65 solution, 35 counterexamples)
[07/26 15:22:25]  Generator returned sat in 0.228754 secs.
[07/26 15:22:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:25]  Verifer returned unsat in 0.048374 secs.
[07/26 15:22:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:25]  --------------------------------------------------------------------------------
[07/26 15:22:25]  Iteration: 102 (66 solution, 35 counterexamples)
[07/26 15:22:25]  Generator returned sat in 0.143706 secs.
[07/26 15:22:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:26]  Verifer returned unsat in 0.027983 secs.
[07/26 15:22:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:26]  --------------------------------------------------------------------------------
[07/26 15:22:26]  Iteration: 103 (67 solution, 35 counterexamples)
[07/26 15:22:26]  Generator returned sat in 0.174590 secs.
[07/26 15:22:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:26]  Verifer returned unsat in 0.048891 secs.
[07/26 15:22:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:26]  --------------------------------------------------------------------------------
[07/26 15:22:26]  Iteration: 104 (68 solution, 35 counterexamples)
[07/26 15:22:27]  Generator returned sat in 0.151132 secs.
[07/26 15:22:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:27]  Verifer returned unsat in 0.032573 secs.
[07/26 15:22:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:27]  --------------------------------------------------------------------------------
[07/26 15:22:27]  Iteration: 105 (69 solution, 35 counterexamples)
[07/26 15:22:28]  Generator returned sat in 0.141629 secs.
[07/26 15:22:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:28]  Verifer returned unsat in 0.031144 secs.
[07/26 15:22:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:28]  --------------------------------------------------------------------------------
[07/26 15:22:28]  Iteration: 106 (70 solution, 35 counterexamples)
[07/26 15:22:28]  Generator returned sat in 0.177604 secs.
[07/26 15:22:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:29]  Verifer returned unsat in 0.049067 secs.
[07/26 15:22:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:29]  --------------------------------------------------------------------------------
[07/26 15:22:29]  Iteration: 107 (71 solution, 35 counterexamples)
[07/26 15:22:29]  Generator returned sat in 0.148952 secs.
[07/26 15:22:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:29]  Verifer returned unsat in 0.060438 secs.
[07/26 15:22:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:29]  --------------------------------------------------------------------------------
[07/26 15:22:29]  Iteration: 108 (72 solution, 35 counterexamples)
[07/26 15:22:30]  Generator returned sat in 0.693356 secs.
[07/26 15:22:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:31]  Verifer returned unsat in 0.027404 secs.
[07/26 15:22:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:31]  --------------------------------------------------------------------------------
[07/26 15:22:31]  Iteration: 109 (73 solution, 35 counterexamples)
[07/26 15:22:31]  Generator returned sat in 0.128621 secs.
[07/26 15:22:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:31]  Verifer returned unsat in 0.025676 secs.
[07/26 15:22:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:31]  --------------------------------------------------------------------------------
[07/26 15:22:31]  Iteration: 110 (74 solution, 35 counterexamples)
[07/26 15:22:32]  Generator returned sat in 0.158377 secs.
[07/26 15:22:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:32]  Verifer returned unsat in 0.034557 secs.
[07/26 15:22:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:32]  --------------------------------------------------------------------------------
[07/26 15:22:32]  Iteration: 111 (75 solution, 35 counterexamples)
[07/26 15:22:33]  Generator returned sat in 0.149315 secs.
[07/26 15:22:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:33]  Verifer returned unsat in 0.033470 secs.
[07/26 15:22:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:33]  --------------------------------------------------------------------------------
[07/26 15:22:33]  Iteration: 112 (76 solution, 35 counterexamples)
[07/26 15:22:33]  Generator returned sat in 0.141702 secs.
[07/26 15:22:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:33]  Verifer returned unsat in 0.027009 secs.
[07/26 15:22:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:33]  --------------------------------------------------------------------------------
[07/26 15:22:33]  Iteration: 113 (77 solution, 35 counterexamples)
[07/26 15:22:34]  Generator returned sat in 0.126106 secs.
[07/26 15:22:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:34]  Verifer returned unsat in 0.032387 secs.
[07/26 15:22:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:34]  --------------------------------------------------------------------------------
[07/26 15:22:34]  Iteration: 114 (78 solution, 35 counterexamples)
[07/26 15:22:35]  Generator returned sat in 0.637200 secs.
[07/26 15:22:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:35]  Verifer returned unsat in 0.050917 secs.
[07/26 15:22:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:35]  --------------------------------------------------------------------------------
[07/26 15:22:35]  Iteration: 115 (79 solution, 35 counterexamples)
[07/26 15:22:36]  Generator returned sat in 0.373868 secs.
[07/26 15:22:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:36]  Verifer returned unsat in 0.052997 secs.
[07/26 15:22:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:36]  --------------------------------------------------------------------------------
[07/26 15:22:36]  Iteration: 116 (80 solution, 35 counterexamples)
[07/26 15:22:37]  Generator returned sat in 0.183198 secs.
[07/26 15:22:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:37]  Verifer returned unsat in 0.042850 secs.
[07/26 15:22:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:37]  --------------------------------------------------------------------------------
[07/26 15:22:37]  Iteration: 117 (81 solution, 35 counterexamples)
[07/26 15:22:38]  Generator returned sat in 0.263335 secs.
[07/26 15:22:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:38]  Verifer returned unsat in 0.045045 secs.
[07/26 15:22:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:38]  --------------------------------------------------------------------------------
[07/26 15:22:38]  Iteration: 118 (82 solution, 35 counterexamples)
[07/26 15:22:39]  Generator returned sat in 0.174327 secs.
[07/26 15:22:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:39]  Verifer returned unsat in 0.043720 secs.
[07/26 15:22:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:39]  --------------------------------------------------------------------------------
[07/26 15:22:39]  Iteration: 119 (83 solution, 35 counterexamples)
[07/26 15:22:39]  Generator returned sat in 0.234516 secs.
[07/26 15:22:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:40]  Verifer returned unsat in 0.042890 secs.
[07/26 15:22:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:40]  --------------------------------------------------------------------------------
[07/26 15:22:40]  Iteration: 120 (84 solution, 35 counterexamples)
[07/26 15:22:40]  Generator returned sat in 0.155189 secs.
[07/26 15:22:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:40]  Verifer returned unsat in 0.061790 secs.
[07/26 15:22:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:40]  --------------------------------------------------------------------------------
[07/26 15:22:40]  Iteration: 121 (85 solution, 35 counterexamples)
[07/26 15:22:41]  Generator returned sat in 0.136354 secs.
[07/26 15:22:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:41]  Verifer returned unsat in 0.047027 secs.
[07/26 15:22:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:41]  --------------------------------------------------------------------------------
[07/26 15:22:41]  Iteration: 122 (86 solution, 35 counterexamples)
[07/26 15:22:42]  Generator returned sat in 0.118458 secs.
[07/26 15:22:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:42]  Verifer returned unsat in 0.043984 secs.
[07/26 15:22:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:42]  --------------------------------------------------------------------------------
[07/26 15:22:42]  Iteration: 123 (87 solution, 35 counterexamples)
[07/26 15:22:42]  Generator returned sat in 0.163129 secs.
[07/26 15:22:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:42]  Verifer returned unsat in 0.057645 secs.
[07/26 15:22:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:42]  --------------------------------------------------------------------------------
[07/26 15:22:42]  Iteration: 124 (88 solution, 35 counterexamples)
[07/26 15:22:43]  Generator returned sat in 0.122257 secs.
[07/26 15:22:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:43]  Verifer returned unsat in 0.042612 secs.
[07/26 15:22:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:43]  --------------------------------------------------------------------------------
[07/26 15:22:43]  Iteration: 125 (89 solution, 35 counterexamples)
[07/26 15:22:44]  Generator returned sat in 0.131222 secs.
[07/26 15:22:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  Verifer returned unsat in 0.040069 secs.
[07/26 15:22:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  --------------------------------------------------------------------------------
[07/26 15:22:44]  Iteration: 126 (90 solution, 35 counterexamples)
[07/26 15:22:44]  Generator returned unsat in 0.000207 secs.
[07/26 15:22:44]  [96mNo more solutions found[0m
[07/26 15:22:44]  Final solutions:
[07/26 15:22:44]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  31: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  32: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  33: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  34: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  35: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  36: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  37: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  38: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  39: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  40: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  41: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  42: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  43: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  44: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  45: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  46: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  47: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  48: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  49: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  50: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  51: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  52: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  53: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  54: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  55: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  56: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  57: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  58: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  59: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  60: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  61: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  62: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  63: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  64: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  65: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  66: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  67: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  68: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  69: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  70: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  71: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  72: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  73: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  74: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  75: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  76: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  77: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  78: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  79: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  80: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  81: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:22:44]  82: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  83: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:22:44]  84: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  85: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  86: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  87: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:22:44]  88: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:22:44]  89: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:22:44]  Took 142.041092 secs.
