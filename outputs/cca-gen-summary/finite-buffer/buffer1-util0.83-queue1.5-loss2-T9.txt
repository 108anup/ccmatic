[08/23 17:08:01]  --------------------------------------------------------------------------------
[08/23 17:08:01]  Iteration: 1 (0 solution, 0 counterexamples)
[08/23 17:08:01]  Generator returned sat in 0.004208 secs.
[08/23 17:08:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:08:02]  Improved gap from 0.0 to 100
[08/23 17:08:02]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:08:02]  Verifer returned sat in 0.321839 secs.
[08/23 17:08:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0      -7407.900        -7408.1   339.095    -7407.900     0.100      -7408.1      0.000      0.2             0.0
1      -7407.900        -7407.9   339.095    -7407.900     0.100      -7407.9      0.000      0.0          -100.0
2      -7207.800        -7208.0   339.095    -7207.800   200.100      -7208.0      0.000      0.2             0.1
3      -7207.800        -7207.9   339.095    -7207.800     0.200      -7207.9      0.000      0.1           -99.9
4      -6805.100        -7107.9   339.095    -6805.100   402.800      -7107.9      2.800    300.0           200.0
5      -5898.900        -7007.9   339.095    -5898.900  1206.200      -7007.9    809.000    300.0           200.0
6      -3987.400        -6872.9   339.095    -3987.400  2211.500      -6872.9   2620.500    265.0           200.0
7       -263.150        -6721.9   339.095     -263.150  3989.250      -6721.9   6244.750    214.0           200.0
8       6280.725        -6707.9   339.095     6280.725  6757.875      -6707.9  12688.625    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:08:02]  --------------------------------------------------------------------------------
[08/23 17:08:02]  Iteration: 2 (0 solution, 1 counterexamples)
[08/23 17:08:02]  Generator returned sat in 0.039330 secs.
[08/23 17:08:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:08:03]  Improved number of small numbers from 34 to 44 out of a max of 99
[08/23 17:08:03]  Verifer returned sat in 1.096589 secs.
[08/23 17:08:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -6951.024658   -7051.024902   339.095 -6951.024658     0.099609 -7051.024902     0.000000  100.000244      100.000159
1   -6951.024658   -6951.024817   339.095 -6951.024658     0.050049 -6951.024817     0.000000    0.000159        0.000159
2   -6852.574744   -6852.624670   339.095 -6852.574744    98.450073 -6852.624670     0.000000    0.049927       -1.549927
3   -6551.074744   -6751.024817   339.095 -6551.074744   301.549927 -6751.024817     0.000000  199.950073      199.950073
4   -6450.974890   -6751.024817   339.095 -6450.974890   300.049927 -6751.024817     0.049927  300.000000      200.000000
5   -5898.900000   -6651.024817   339.095 -5898.900000   852.074890 -6651.024817   452.124817  300.000000      200.000000
6   -4515.587958   -6451.024817   339.095 -4515.587958  1683.312042 -6451.024817  1735.436859  200.000000      200.000000
7   -1588.619894   -6371.024817   339.095 -1588.619894  3126.968063 -6371.024817  4562.404922  220.000000      200.000000
8    3643.832201   -6351.024658   339.095  3643.832201  5452.452095 -6351.024658  9694.857018  299.999841      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:08:04]  --------------------------------------------------------------------------------
[08/23 17:08:04]  Iteration: 3 (0 solution, 2 counterexamples)
[08/23 17:08:04]  Generator returned sat in 0.057050 secs.
[08/23 17:08:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:08:04]  Improved gap from 0.0 to 100
[08/23 17:08:04]  Improved number of small numbers from 46 to 52 out of a max of 100
[08/23 17:08:04]  Verifer returned sat in 0.787578 secs.
[08/23 17:08:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -6700.006104   -6700.030981   339.095 -6700.006104     0.099609 -6700.030981     0.000000    0.024878        0.024878
1   -6700.006104   -6700.030981   339.095 -6700.006104     0.024658 -6700.030981     0.000000    0.024878      -99.975122
2   -6300.006079   -6500.030981   339.095 -6300.006079   400.024902 -6500.030981     0.024902  200.000000      200.000000
3   -6199.981177   -6415.030981   339.095 -6199.981177   300.024902 -6415.030981     0.049805  215.000000      200.000000
4   -5692.968726   -6300.030981   339.095 -5692.968726   722.012451 -6300.030981   407.062256  200.000000      200.000000
5   -4729.962500   -6300.030981   339.095 -4729.962500  1163.006226 -6300.030981  1270.068481  300.000000      200.000000
6   -4046.459387   -6200.030981   339.095 -4046.459387   983.503113 -6200.030981  1853.571594  300.000000      200.000000
7   -3422.707831   -6002.030981   339.095 -3422.707831   923.751556 -6002.030981  2377.323151  202.000000      200.000000
8   -2564.832053   -6000.030762   339.095 -2564.832053  1059.875778 -6000.030762  3135.198929  299.999780      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:08:05]  --------------------------------------------------------------------------------
[08/23 17:08:05]  Iteration: 4 (0 solution, 3 counterexamples)
[08/23 17:08:05]  Generator returned sat in 0.172976 secs.
[08/23 17:08:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:08:05]  Improved number of small numbers from 65 to 99 out of a max of 99
[08/23 17:08:05]  Verifer returned sat in 0.210930 secs.
[08/23 17:08:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t
0  -20991.801514   -21291.80127  14830.865234 -20991.801514     0.099609 -21291.80127      0.000000  299.999756      199.999756
1  -20991.801514   -21191.80127  14830.865234 -20991.801514     0.049561 -21191.80127      0.000000  199.999756       99.999756
2  -20791.751709   -21091.80127  14830.865234 -20791.751709   400.049561 -21091.80127      0.049561  300.000000      200.000000
3  -11397.157959   -20991.80127  14830.865234 -11397.157959  9694.593750 -20991.80127   9294.643311  300.000000      200.000000
4   -6851.361084   -20891.80127  14830.865234  -6851.361084  4845.796875 -20891.80127  13740.440186  300.000000      200.000000
5   -4729.962646   -20691.80127  14830.865234  -4729.962646  2421.398438 -20691.80127  15761.838623  200.000000      200.000000
6   -3720.763428   -20691.80127  14830.865234  -3720.763428  1209.199219 -20691.80127  16671.037842  300.000000      200.000000
7   -3417.663818   -20491.80127  14830.865234  -3417.663818   603.099609 -20491.80127  16874.137451  200.000000      200.000000
8   -3317.614014   -20491.80127  14830.865234  -3317.614014   300.049805 -20491.80127  16874.187256  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:08:06]  --------------------------------------------------------------------------------
[08/23 17:08:06]  Iteration: 5 (0 solution, 4 counterexamples)
[08/23 17:08:06]  Generator returned sat in 0.190673 secs.
[08/23 17:08:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:08:06]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/23 17:08:06]  Verifer returned sat in 0.150516 secs.
[08/23 17:08:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0  -20991.801514   -21191.80127  14830.865234 -20991.801514    0.099609 -21191.80127    0.000000  199.999756      199.999756
1  -20991.801514   -21191.80127  14830.865234 -20991.801514    0.049561 -21191.80127    0.000000  199.999756       99.999756
2  -20791.751709   -21091.80127  14830.865234 -20791.751709  400.049561 -21091.80127    0.049561  300.000000      200.000000
3  -20691.751709   -20991.80127  14830.865234 -20691.751709  400.000000 -20991.80127    0.049561  300.000000      200.000000
4  -20492.751709   -20791.80127  14830.865234 -20492.751709  499.000000 -20791.80127   99.049561  200.000000      200.000000
5  -20492.751709   -20715.80127  14830.865234 -20492.751709  200.000000 -20715.80127   99.049561  124.000000      100.000000
6  -20229.751709   -20591.80127  14830.865234 -20229.751709  387.000000 -20591.80127  162.049561  200.000000      200.000000
7  -20229.751709   -20491.80127  14830.865234 -20229.751709  200.000000 -20491.80127  162.049561  100.000000      100.000000
8  -19980.751709   -20491.80127  14830.865234 -19980.751709  349.000000 -20491.80127  211.049561  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:06]  --------------------------------------------------------------------------------
[08/23 17:08:06]  Iteration: 6 (0 solution, 5 counterexamples)
[08/23 17:08:06]  Generator returned sat in 0.105706 secs.
[08/23 17:08:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:08:07]  Improved gap from 0.0 to 100
[08/23 17:08:07]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/23 17:08:07]  Verifer returned sat in 0.327343 secs.
[08/23 17:08:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0  -21190.301514  -21291.801270  14830.864746 -21190.301514    0.099609 -21291.801270    0.000000  101.499756        1.499756
1  -21190.301514  -21190.325928  14830.864746 -21190.301514    0.024658 -21190.325928    0.000000    0.024414      -98.500244
2  -20791.776611  -21091.801270  14830.864746 -20791.776611  398.549316 -21091.801270    0.024658  300.000000      200.000000
3  -20691.751953  -20942.538818  14830.864746 -20691.751953  400.024658 -20942.538818    0.049316  250.737549      200.000000
4  -20591.727051  -20791.801270  14830.864746 -20591.727051  350.762451 -20791.801270    0.074219  200.000000      200.000000
5  -20391.702393  -20742.538818  14830.864746 -20391.702393  400.024658 -20742.538818  100.098877  250.737549      200.000000
6  -20291.677490  -20617.907715  14830.864746 -20291.677490  350.762451 -20617.907715  100.123779  226.106445      200.000000
7  -20191.652832  -20492.538818  14830.864746 -20191.652832  326.131104 -20492.538818  100.148438  200.737549      200.000000
8  -20091.627930  -20491.801270  14830.864746 -20091.627930  300.762451 -20491.801270  100.173340  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:08:07]  --------------------------------------------------------------------------------
[08/23 17:08:07]  Iteration: 7 (0 solution, 6 counterexamples)
[08/23 17:08:07]  Generator returned sat in 0.023426 secs.
[08/23 17:08:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:08:07]  Improved number of small numbers from 76 to 99 out of a max of 99
[08/23 17:08:07]  Verifer returned sat in 0.266509 secs.
[08/23 17:08:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0  -21190.301758  -21291.801270  14830.864502 -21190.301758    0.099365 -21291.801270    0.000000  101.499512        1.499512
1  -21190.301758  -21191.325928  14830.864502 -21190.301758    0.024414 -21191.325928    0.000000    1.024170      -98.500488
2  -20791.776611  -21091.801270  14830.864502 -20791.776611  399.549316 -21091.801270    0.024658  300.000000      200.000000
3  -20691.739502  -20942.045166  14830.864502 -20691.739502  400.037109 -20942.045166    0.061768  250.243896      200.000000
4  -20591.727295  -20791.801270  14830.864502 -20591.727295  350.256104 -20791.801270    0.073975  200.000000      200.000000
5  -20391.702637  -20742.038818  14830.864502 -20391.702637  400.024658 -20742.038818  100.098633  250.237549      200.000000
6  -20291.677734  -20617.160889  14830.864502 -20291.677734  350.262451 -20617.160889  100.123535  225.359619      200.000000
7  -20191.653076  -20492.044922  14830.864502 -20191.653076  325.384277 -20492.044922  100.148193  200.243652      200.000000
8  -20091.640381  -20491.801270  14830.864502 -20091.640381  300.256348 -20491.801270  100.160889  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:08:08]  --------------------------------------------------------------------------------
[08/23 17:08:08]  Iteration: 8 (0 solution, 7 counterexamples)
[08/23 17:08:08]  Generator returned sat in 0.049103 secs.
[08/23 17:08:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:08:08]  Improved gap from 0.0 to 81.25
[08/23 17:08:08]  Improved number of small numbers from 53 to 100 out of a max of 100
[08/23 17:08:08]  Verifer returned sat in 0.341686 secs.
[08/23 17:08:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -21074.977539  -21175.026611  14830.864258 -21074.977539    0.099365 -21175.026611   0.000000  100.049072        0.049072
1  -21074.977539  -21075.026611  14830.864502 -21074.977539    0.049561 -21075.026611   0.000000    0.049072      -99.950684
2  -20591.727295  -20875.026855  14830.864502 -20591.727295  483.299316 -20875.026855  83.299561  200.000000      200.000000
3  -20591.727295  -20775.026855  14830.864502 -20591.727295   86.250000 -20775.026855  83.299561  100.000000      100.000000
4  -20591.727295  -20675.076416  14830.864502 -20591.727295   85.250000 -20675.076416  83.299561    0.049561        0.000000
5  -20507.526855  -20674.125488  14846.664062 -20507.526855   84.250000 -20674.125488  83.299561   83.299072        0.000000
6  -20507.526855  -20590.826416  14865.414062 -20507.526855   83.250000 -20590.826416  83.299561    0.000000      -81.250000
7  -20425.276855  -20509.576172  14884.163818 -20425.276855   82.250000 -20509.576172  83.299561    0.999756      -80.250244
8  -20345.026611  -20428.326172  14902.913818 -20345.026611   81.250000 -20428.326172  83.299561    0.000000      -81.250000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:08:09]  --------------------------------------------------------------------------------
[08/23 17:08:09]  Iteration: 9 (0 solution, 8 counterexamples)
[08/23 17:08:09]  Generator returned sat in 0.028389 secs.
[08/23 17:08:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:08:09]  Improved gap from 0.0 to 81.25
[08/23 17:08:09]  Improved number of small numbers from 66 to 100 out of a max of 100
[08/23 17:08:09]  Verifer returned sat in 0.540686 secs.
[08/23 17:08:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -21337.889893  -21437.915039  14733.324951 -21337.889893    0.099121 -21437.915039        0.0  100.025146        0.025146
1  -21337.889893  -21337.915039  14733.324951 -21337.889893    0.049561 -21337.915039        0.0    0.025146      -99.974854
2  -20943.115479  -21137.915039  14733.324951 -20943.115479  394.799561 -21137.915039        0.0  194.799561      194.799561
3  -20943.115479  -21037.915039  14733.324951 -20943.115479   89.475098 -21037.915039        0.0   94.799561       94.799561
4  -20943.115479  -20943.140137  14733.324951 -20943.115479   87.975098 -20943.140137        0.0    0.024658       -5.200439
5  -20856.665039  -20937.914795  14752.074707 -20856.665039   86.475098 -20937.914795        0.0   81.249756       -0.000244
6  -20852.939697  -20856.664795  14770.824707 -20852.939697   84.975098 -20856.664795        0.0    3.725098      -77.524902
7  -20773.189697  -20775.414795  14789.574707 -20773.189697   83.475098 -20775.414795        0.0    2.225098      -79.024902
8  -20693.439697  -20694.164795  14789.574707 -20693.439697   81.975098 -20694.164795        0.0    0.725098      -99.274902
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:08:10]  --------------------------------------------------------------------------------
[08/23 17:08:10]  Iteration: 10 (0 solution, 9 counterexamples)
[08/23 17:08:11]  Generator returned sat in 1.272112 secs.
[08/23 17:08:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:11]  Improved gap from 0.0 to 100
[08/23 17:08:12]  Improved number of small numbers from 54 to 66 out of a max of 100
[08/23 17:08:12]  Verifer returned sat in 0.764214 secs.
[08/23 17:08:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -21874.072998  -22074.073128  14652.077207 -21874.072998    0.099121 -22074.073128     0.0000  200.000130      100.000130
1  -21874.072998  -21974.072998  14652.077207 -21874.072998    0.002500 -21974.072998     0.0000  100.000000        0.000130
2  -21774.073242  -21874.073128  14652.077207 -21774.073242  199.999756 -21874.073128     0.0000   99.999886       -0.000114
3  -21474.073128  -21674.073128  14652.077207 -21474.073128  400.000000 -21674.073128     0.0000  200.000000      200.000000
4  -21074.573128  -21641.074795  14652.077207 -21074.573128  599.500000 -21641.074795   299.5000  267.001667      200.000000
5  -21074.573128  -21474.073128  14652.077207 -21074.573128    0.010000 -21474.073128   299.5000  100.000000      100.000000
6  -20575.073128  -21474.072998  14652.077207 -20575.073128  599.500000 -21474.072998   599.0000  299.999870      200.000000
7  -20575.073128  -21374.073128  14652.077207 -20575.073128    0.010000 -21374.073128   599.0000  200.000000      100.000000
8  -20375.070628  -21274.072998  14652.077207 -20375.070628  400.002500 -21274.072998   599.0025  299.999870      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:12]  --------------------------------------------------------------------------------
[08/23 17:08:12]  Iteration: 11 (0 solution, 10 counterexamples)
[08/23 17:08:12]  Generator returned sat in 0.128185 secs.
[08/23 17:08:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:12]  Improved gap from 0.00125 to 0
[08/23 17:08:13]  Improved number of small numbers from 54 to 68 out of a max of 100
[08/23 17:08:13]  Verifer returned sat in 0.654764 secs.
[08/23 17:08:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20975.084473  -21175.084229  13753.088379 -20975.084473    0.098877 -21175.084229    0.00000  199.999756       99.999827
1  -20975.084473  -20975.085628  13753.088457 -20975.084473    0.001221 -20975.085628    0.00000    0.001156       -0.000094
2  -20675.083128  -20975.084378  13753.088457 -20675.083128  300.002500 -20975.084378    0.00125  300.000000      200.000000
3  -20575.081878  -20775.084473  13753.088457 -20575.081878  400.001250 -20775.084473    0.00250  200.000094      200.000000
4  -20575.081878  -20675.084473  13753.088457 -20575.081878    0.010000 -20675.084473    0.00250  100.000094      100.000000
5  -20575.081878  -20575.095703  13753.088457 -20575.081878    0.010000 -20575.095703    0.00250    0.011325        0.000000
6  -20575.081878  -20575.084378  13853.088457 -20575.081878    0.010000 -20575.084378    0.00250    0.000000        0.000000
7  -20575.071878  -20575.084378  13953.078457 -20575.071878    0.010000 -20575.084378    0.00250    0.010000        0.000000
8  -20575.071878  -20575.074378  14053.078369 -20575.071878    0.010000 -20575.074378    0.00250    0.000000       -0.000088
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:08:13]  --------------------------------------------------------------------------------
[08/23 17:08:13]  Iteration: 12 (0 solution, 11 counterexamples)
[08/23 17:08:14]  Generator returned sat in 0.369072 secs.
[08/23 17:08:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:08:14]  Improved gap from 49.963287353515625 to 100
[08/23 17:08:14]  Improved number of small numbers from 46 to 100 out of a max of 100
[08/23 17:08:14]  Verifer returned sat in 0.262549 secs.
[08/23 17:08:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20675.083008  -20975.083008  13753.088379 -20675.083008    0.098877 -20975.083008   0.000000  300.000000      200.000000
1  -20675.083008  -20875.083008  13753.088379 -20675.083008    0.024414 -20875.083008   0.000000  200.000000      100.000000
2  -20675.083008  -20775.083008  13753.088379 -20675.083008    0.024414 -20775.083008   0.000000  100.000000        0.000000
3  -20655.053711  -20655.078125  13753.088379 -20655.053711  120.029297 -20655.078125   0.000000    0.024414      -79.970703
4  -20275.058594  -20475.083252  13753.088379 -20275.058594  380.019531 -20475.083252   0.024414  200.000244      200.000000
5  -20275.058594  -20425.445801  13753.088379 -20275.058594    1.500000 -20425.445801   0.024414  150.362793      100.000000
6  -20075.034180  -20275.083008  13753.088379 -20075.034180  350.387207 -20275.083008   0.048828  200.000000      200.000000
7  -20075.034180  -20175.445801  13753.088379 -20075.034180    1.500000 -20175.445801   0.048828  100.362793      100.000000
8  -19875.009521  -20075.083252  13753.088379 -19875.009521  300.387451 -20075.083252   0.073486  200.000244      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:14]  --------------------------------------------------------------------------------
[08/23 17:08:14]  Iteration: 13 (0 solution, 12 counterexamples)
[08/23 17:08:15]  Generator returned sat in 0.619225 secs.
[08/23 17:08:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:08:15]  Improved number of small numbers from 52 to 99 out of a max of 99
[08/23 17:08:15]  Verifer returned sat in 0.207611 secs.
[08/23 17:08:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20675.083252  -20975.083008  13753.088135 -20675.083252    0.098633 -20975.083008   0.000000  299.999756      199.999756
1  -20675.083252  -20776.638184  13753.088135 -20675.083252    0.024170 -20776.638184   0.000000  101.554932       99.999756
2  -20675.083252  -20699.083008  13753.088135 -20675.083252    0.024170 -20699.083008   0.000000   23.999756       -0.000244
3  -20375.076904  -20624.829834  13753.088135 -20375.076904  324.006104 -20624.829834   0.006104  249.746826      200.000000
4  -20275.070557  -20475.589355  13753.088135 -20275.070557  349.753174 -20475.589355   0.012451  200.506348      200.000000
5  -20175.028076  -20386.829834  13753.088135 -20175.028076  300.548828 -20386.829834   0.054932  211.746826      200.000000
6  -20075.021729  -20299.703369  13753.088135 -20075.021729  311.753174 -20299.703369   0.061279  224.620361      200.000000
7  -19975.015625  -20175.083252  13753.088135 -19975.015625  324.626465 -20175.083252   0.067383  200.000244      200.000000
8  -19875.009766  -20075.083252  13753.088135 -19875.009766  300.006104 -20075.083252   0.073242  200.000244      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:08:16]  --------------------------------------------------------------------------------
[08/23 17:08:16]  Iteration: 14 (0 solution, 13 counterexamples)
[08/23 17:08:16]  Generator returned sat in 0.186319 secs.
[08/23 17:08:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:08:16]  Improved gap from 0.00125 to 100
[08/23 17:08:17]  Improved number of small numbers from 63 to 75 out of a max of 100
[08/23 17:08:17]  Verifer returned sat in 0.676529 secs.
[08/23 17:08:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20999.699707  -21299.699619  13753.088135 -20999.699707    0.098389 -21299.699619    0.00000  299.999912      199.999912
1  -20999.699707  -21099.699707  13753.088135 -20999.699707    0.023926 -21099.699707    0.00000  100.000000       99.999912
2  -20999.699707  -21099.699619  13753.088135 -20999.699707    0.024170 -21099.699619    0.00000   99.999912       -0.000088
3  -20899.699619  -20999.698994  13753.088135 -20899.699619  200.000000 -20999.698994    0.00000   99.999375        0.000000
4  -20599.698369  -20899.699619  13753.088135 -20599.698369  400.000625 -20899.699619    0.00125  300.000000      200.000000
5  -20599.698369  -20749.701494  13753.088135 -20599.698369    0.010000 -20749.701494    0.00125  150.001875      100.000000
6  -20399.697119  -20599.699707  13753.088135 -20399.697119  350.003125 -20599.699707    0.00250  200.000088      200.000000
7  -20399.697119  -20499.699619  13753.088135 -20399.697119    0.010000 -20499.699619    0.00250  100.000000      100.000000
8  -20099.692119  -20499.699463  13753.088135 -20099.692119  400.005000 -20499.699463  100.00750  299.999844      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 17:08:17]  --------------------------------------------------------------------------------
[08/23 17:08:17]  Iteration: 15 (0 solution, 14 counterexamples)
[08/23 17:08:18]  Generator returned sat in 0.364367 secs.
[08/23 17:08:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:18]  Improved number of small numbers from 66 to 74 out of a max of 99
[08/23 17:08:18]  Verifer returned sat in 0.642340 secs.
[08/23 17:08:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20999.699707  -21250.198213  13753.088135 -20999.699707    0.098389 -21250.198213    0.00000  250.498506      199.999912
1  -20999.699707  -21099.699707  13753.088135 -20999.699707    0.024170 -21099.699707    0.00000  100.000000       99.999912
2  -20999.699707  -21099.699619  13753.088135 -20999.699707    0.000488 -21099.699619    0.00000   99.999912       -0.000088
3  -20999.698682  -20999.698994  13753.088135 -20999.698682  100.000938 -20999.698994    0.00000    0.000313      -99.999062
4  -20599.698369  -20899.699619  13753.088135 -20599.698369  400.000625 -20899.699619    0.00125  300.000000      200.000000
5  -20599.698369  -20749.211494  13753.088135 -20599.698369    0.010000 -20749.211494    0.00125  149.511875      100.000000
6  -20399.207119  -20599.699951  13753.088135 -20399.207119  350.003125 -20599.699951    0.49250  200.000332      200.000000
7  -20399.207119  -20499.699619  13753.088135 -20399.207119    0.010000 -20499.699619    0.49250  100.000000      100.000000
8  -20099.692119  -20499.699463  13753.088135 -20099.692119  399.515000 -20499.699463  100.00750  299.999844      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:19]  --------------------------------------------------------------------------------
[08/23 17:08:19]  Iteration: 16 (0 solution, 15 counterexamples)
[08/23 17:08:19]  Generator returned sat in 0.159313 secs.
[08/23 17:08:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:08:20]  Improved number of small numbers from 79 to 85 out of a max of 99
[08/23 17:08:20]  Verifer returned sat in 0.446098 secs.
[08/23 17:08:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20999.699707  -21199.699707  13753.087891 -20999.699707    0.098389 -21199.699707    0.00000  200.000000      100.000000
1  -20999.699707  -20999.701172  13753.087891 -20999.699707    0.001465 -20999.701172    0.00000    0.001465        0.000000
2  -20699.701172  -20999.699707  13753.087891 -20699.701172  300.000000 -20999.699707    0.00000  299.998535      199.998535
3  -20699.701172  -20899.699707  13753.087891 -20699.701172   67.667500 -20899.699707    0.00000  199.998535       99.998535
4  -20499.698457  -20701.185957  13753.087891 -20499.698457  400.001250 -20701.185957    0.00125  201.486250      200.000000
5  -20499.698457  -20648.956582  13753.087891 -20499.698457    0.010000 -20648.956582    0.00125  149.256875      100.000000
6  -20299.697207  -20599.699707  13753.087891 -20299.697207  349.258125 -20599.699707    0.00250  300.000000      200.000000
7  -20299.697207  -20399.699707  13753.087891 -20299.697207    0.010000 -20399.699707    0.00250  100.000000      100.000000
8  -20099.695957  -20399.699707  13753.087891 -20099.695957  300.001250 -20399.699707    0.00375  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:20]  --------------------------------------------------------------------------------
[08/23 17:08:20]  Iteration: 17 (0 solution, 16 counterexamples)
[08/23 17:08:20]  Generator returned sat in 0.100293 secs.
[08/23 17:08:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:21]  Improved number of small numbers from 59 to 72 out of a max of 99
[08/23 17:08:21]  Verifer returned sat in 0.622858 secs.
[08/23 17:08:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20673.695557  -20773.695576  13655.074141 -20673.695557    0.098389 -20773.695576   0.000000  100.000020      100.000020
1  -20673.695557  -20673.697998  13655.074141 -20673.695557   99.999756 -20673.697998   0.000000    0.002441        0.000020
2  -20673.695557  -20673.695576  13655.074219 -20673.695557    0.001250 -20673.695576   0.000000    0.000020      -99.999902
3  -20573.694326  -20573.695576  13753.087891 -20573.694326  100.001250 -20573.695576   0.000000    0.001250       -1.985000
4  -20225.693701  -20474.695576  13753.087891 -20225.693701  348.001875 -20474.695576  46.015625  202.986250      200.000000
5  -20225.693701  -20371.709326  13753.087891 -20225.693701    0.010000 -20371.709326  46.015625  100.000000      100.000000
6  -20025.692451  -20371.709229  13753.087891 -20025.692451  300.001250 -20371.709229  46.016875  299.999902      200.000000
7  -20025.692451  -20171.709326  13753.087891 -20025.692451    0.010000 -20171.709326  46.016875  100.000000      100.000000
8  -19824.691201  -20171.709229  13753.087891 -19824.691201  301.001250 -20171.709229  47.018125  299.999902      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:21]  --------------------------------------------------------------------------------
[08/23 17:08:21]  Iteration: 18 (0 solution, 17 counterexamples)
[08/23 17:08:22]  Generator returned sat in 0.909777 secs.
[08/23 17:08:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:08:22]  Improved gap from 0.0 to 0
[08/23 17:08:23]  Improved number of small numbers from 55 to 77 out of a max of 100
[08/23 17:08:23]  Verifer returned sat in 0.626397 secs.
[08/23 17:08:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20024.709961  -20324.709717  13106.088379 -20024.709961    0.098145 -20324.709717        0.0  299.999756      199.999854
1  -20024.709961  -20224.709717  13106.088379 -20024.709961    0.002441 -20224.709717        0.0  199.999756       99.999854
2  -20024.709961  -20124.709717  13106.088379 -20024.709961    0.002500 -20124.709717        0.0   99.999756       -0.000146
3  -19924.709717  -19924.712451  13106.088379 -19924.709717  200.000000 -19924.712451        0.0    0.002734        0.000098
4  -19924.702451  -19924.704951  13206.080811 -19924.702451    0.010000 -19924.704951        0.0    0.002500       -0.000205
5  -19924.694951  -19924.697451  13306.073486 -19924.694951    0.010000 -19924.697451        0.0    0.002500       -0.000029
6  -19924.687451  -19924.689951  13406.066016 -19924.687451    0.010000 -19924.689951        0.0    0.002500        0.000000
7  -19924.679951  -19924.679951  13506.048584 -19924.679951    0.010000 -19924.679951        0.0    0.000000       -0.009932
8  -19924.669951  -19924.669951  13506.048584 -19924.669951    0.010000 -19924.669951        0.0    0.000000      -99.999932
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:08:23]  --------------------------------------------------------------------------------
[08/23 17:08:23]  Iteration: 19 (0 solution, 18 counterexamples)
[08/23 17:08:25]  Generator returned sat in 1.568835 secs.
[08/23 17:08:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:26]  Improved gap from 0.0 to 48.4375
[08/23 17:08:27]  Improved number of small numbers from 56 to 68 out of a max of 100
[08/23 17:08:27]  Verifer returned sat in 1.762125 secs.
[08/23 17:08:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -20860.712402  -21060.712451  13106.088516 -20860.712402    0.098145 -21060.712451     0.0000  200.000049      100.000049
1  -20860.712402  -20860.712646  13106.088516 -20860.712402    0.002686 -20860.712646     0.0000    0.000244        0.000049
2  -20560.715088  -20768.692451  13106.088516 -20560.715088  299.997559 -20768.692451     0.0000  207.977363      199.997363
3  -20560.715088  -20660.712451  13106.088516 -20560.715088  204.005000 -20660.712451     0.0000   99.997363       99.997363
4  -20360.709951  -20560.712451  13106.088516 -20360.709951  300.002500 -20560.712451     0.0025  200.000000      200.000000
5  -20360.709951  -20560.712451  13106.088516 -20360.709951    0.010000 -20560.712451     0.0025  200.000000      100.000000
6  -20360.709951  -20460.712451  13106.088516 -20360.709951  101.995000 -20460.712451     0.0025  100.000000        0.000000
7  -20311.712451  -20360.152451  13157.091016 -20311.712451  148.997500 -20360.152451     0.0025   48.437500        0.000000
8  -20187.371201  -20311.714844  13157.091016 -20187.371201  172.778750 -20311.714844     0.0025  124.341143       24.341250
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:08:27]  --------------------------------------------------------------------------------
[08/23 17:08:27]  Iteration: 20 (0 solution, 19 counterexamples)
[08/23 17:08:29]  Generator returned sat in 1.825263 secs.
[08/23 17:08:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:29]  Improved gap from 0.048583984375 to 100
[08/23 17:08:30]  Improved number of small numbers from 32 to 100 out of a max of 100
[08/23 17:08:30]  Verifer returned sat in 0.429807 secs.
[08/23 17:08:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -21322.407471  -21327.004639  13467.807617 -21322.407471    0.098145 -21327.004639   0.000000    4.597168        0.024170
1  -21322.407471  -21322.431396  13467.807617 -21322.407471    0.024414 -21322.431396   0.000000    0.023926      -99.975830
2  -21222.407227  -21222.431396  13467.807617 -21222.407227  100.024170 -21222.431396   0.000000    0.024170      -99.975586
3  -20822.407227  -21023.956055  13467.807617 -20822.407227  400.024170 -21023.956055   0.024414  201.524414      200.000000
4  -20722.383057  -20932.955811  13467.807617 -20722.383057  301.548584 -20932.955811   0.048584  210.524170      200.000000
5  -20544.931641  -20871.669434  13467.807617 -20544.931641  387.975586 -20871.669434  77.500000  249.237793      200.000000
6  -20444.907471  -20722.431641  13467.807617 -20444.907471  349.261963 -20722.431641  77.524170  200.000000      200.000000
7  -20344.883057  -20622.431641  13467.807617 -20344.883057  300.024414 -20622.431641  77.548584  200.000000      200.000000
8  -20235.858887  -20622.431396  13467.807617 -20235.858887  309.024170 -20622.431396  86.572754  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:08:30]  --------------------------------------------------------------------------------
[08/23 17:08:30]  Iteration: 21 (0 solution, 20 counterexamples)
[08/23 17:08:30]  Generator returned sat in 0.105436 secs.
[08/23 17:08:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:31]  Improved number of small numbers from 73 to 99 out of a max of 99
[08/23 17:08:31]  Verifer returned sat in 0.192537 secs.
[08/23 17:08:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -21322.407715  -21328.468018  13467.807373 -21322.407715    0.097900 -21328.468018   0.000000    6.060303        0.023926
1  -21322.407715  -21322.431641  13467.807373 -21322.407715    0.024170 -21322.431641   0.000000    0.023926      -99.976074
2  -21222.407227  -21222.431396  13467.807373 -21222.407227  100.024414 -21222.431396   0.000000    0.024170      -99.975586
3  -20822.407227  -21024.437744  13467.807373 -20822.407227  400.024170 -21024.437744   0.024414  202.006104      200.000000
4  -20722.383057  -20932.955811  13467.807373 -20722.383057  302.030273 -20932.955811   0.048584  210.524170      200.000000
5  -20545.431396  -20871.428467  13467.807373 -20545.431396  387.475830 -20871.428467  77.000244  248.996826      200.000000
6  -20445.425293  -20722.431641  13467.807373 -20445.425293  349.002930 -20722.431641  77.006348  200.000000      200.000000
7  -20345.419189  -20622.431641  13467.807373 -20345.419189  300.006104 -20622.431641  77.012451  200.000000      200.000000
8  -20236.895020  -20622.431641  13467.807373 -20236.895020  308.524170 -20622.431641  85.536621  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:08:31]  --------------------------------------------------------------------------------
[08/23 17:08:31]  Iteration: 22 (0 solution, 21 counterexamples)
[08/23 17:08:32]  Generator returned sat in 0.806122 secs.
[08/23 17:08:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:32]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/23 17:08:32]  Verifer returned sat in 0.144248 secs.
[08/23 17:08:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t   service_0,t     losts_0,t     queue_t  bottle_queue_t
0  -30447.961914  -30747.961914  13467.807373 -30447.961914     0.097900 -30747.961914      0.000000  300.000000      200.000000
1  -30447.961914  -30647.961914  13467.807373 -30447.961914     0.048584 -30647.961914      0.000000  200.000000      100.000000
2  -30248.010498  -30547.961914  13467.807373 -30248.010498   399.951416 -30547.961914      0.000000  299.951416      199.951416
3  -20822.407227  -30347.961914  13467.807373 -20822.407227  9725.554688 -30347.961914   9325.554688  200.000000      200.000000
4  -16161.629883  -30347.961914  13467.807373 -16161.629883  4860.777344 -30347.961914  13886.332031  300.000000      200.000000
5  -14033.241211  -30247.961914  13467.807373 -14033.241211  2428.388672 -30247.961914  15914.720703  300.000000      200.000000
6  -13121.046875  -30147.961914  13467.807373 -13121.046875  1212.194336 -30147.961914  16726.915039  300.000000      200.000000
7  -12816.949707  -29947.961914  13467.807373 -12816.949707   604.097168 -29947.961914  16931.012207  200.000000      200.000000
8  -12716.901123  -29947.961914  13467.807373 -12716.901123   300.048584 -29947.961914  16931.060791  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:08:33]  --------------------------------------------------------------------------------
[08/23 17:08:33]  Iteration: 23 (0 solution, 22 counterexamples)
[08/23 17:08:33]  Generator returned sat in 0.227169 secs.
[08/23 17:08:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:34]  Improved gap from 0.00125 to 9.375
[08/23 17:08:34]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/23 17:08:34]  Verifer returned sat in 1.311290 secs.
[08/23 17:08:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -14635.683594  -14826.308594  13289.057373 -14635.683594    0.097900 -14826.308594   0.000000  190.625000       90.625000
1  -14635.659180  -14635.683838  13289.057373 -14635.659180  190.649414 -14635.683838   0.000000    0.024658       -9.350586
2  -14326.284424  -14626.308594  13289.057373 -14326.284424  309.399414 -14626.308594   0.024170  300.000000      200.000000
3  -14226.260010  -14426.308594  13289.057373 -14226.260010  400.024414 -14426.308594   0.048584  200.000000      200.000000
4  -14226.260010  -14326.308838  13289.057373 -14226.260010  198.000000 -14326.308838   0.048584  100.000244      100.000000
5  -14226.260010  -14272.784180  13289.057373 -14226.260010   97.000000 -14272.784180   0.048584   46.475586        0.000000
6  -14226.235596  -14226.308594  13377.182373 -14226.235596   46.500000 -14226.308594   0.048584    0.024414      -11.850586
7  -14205.010010  -14214.433594  13467.807373 -14205.010010   21.250000 -14214.433594   0.048584    9.375000        0.000000
8  -14205.010010  -14205.058594  13558.432129 -14205.010010    8.625000 -14205.058594   0.048584    0.000000       -9.375244
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:08:35]  --------------------------------------------------------------------------------
[08/23 17:08:35]  Iteration: 24 (0 solution, 23 counterexamples)
[08/23 17:08:35]  Generator returned sat in 0.151345 secs.
[08/23 17:08:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:36]  Improved gap from 9.375 to 9.375
[08/23 17:08:36]  Improved number of small numbers from 28 to 100 out of a max of 100
[08/23 17:08:36]  Verifer returned sat in 1.073366 secs.
[08/23 17:08:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -14100.365967  -14200.390381  13339.047363 -14100.365967    0.097656 -14200.390381   0.000000  100.024414        0.024414
1  -14100.365967  -14100.390381  13339.047363 -14100.365967    0.024170 -14100.390381   0.000000    0.024414      -99.975586
2  -13700.366211  -14000.390381  13339.047363 -13700.366211  400.024170 -14000.390381   0.024170  300.000000      200.000000
3  -13600.341797  -13800.390381  13339.047363 -13600.341797  400.024414 -13800.390381   0.048584  200.000000      200.000000
4  -13600.341797  -13700.390381  13339.047363 -13600.341797  199.500000 -13700.390381   0.048584  100.000000      100.000000
5  -13600.341797  -13647.289795  13339.047363 -13600.341797   97.750000 -13647.289795   0.048584   46.899414        0.000000
6  -13600.341797  -13600.390381  13429.672363 -13600.341797   46.875000 -13600.390381   0.048584    0.000000       -9.375000
7  -13578.904297  -13588.327881  13517.609863 -13578.904297   21.437500 -13588.327881   0.048584    9.375000        0.000000
8  -13578.904297  -13578.952881  13517.610107 -13578.904297    8.718750 -13578.952881   0.048584    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:08:37]  --------------------------------------------------------------------------------
[08/23 17:08:37]  Iteration: 25 (0 solution, 24 counterexamples)
[08/23 17:08:37]  Generator returned sat in 0.278708 secs.
[08/23 17:08:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:08:38]  Improved gap from 9.375 to 9.375
[08/23 17:08:38]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:08:38]  Verifer returned sat in 1.170365 secs.
[08/23 17:08:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11491.615723  -11600.990479  13308.595703 -11491.615723    0.097412 -11600.990479    0.00000  109.374756        9.375000
1  -11491.615723  -11500.990723  13399.220703 -11491.615723  109.374756 -11500.990723    0.00000    9.375000        0.000000
2  -11191.567383  -11491.615479  13399.220703 -11191.567383  309.423340 -11491.615479    0.04834  299.999756      200.000000
3  -11131.567139  -11309.567139  13399.220703 -11131.567139  360.000000 -11309.567139    0.04834  177.951660      160.000244
4  -11131.518799  -11218.519043  13399.220703 -11131.518799  178.000000 -11218.519043    0.04834   86.951904       60.048584
5  -11131.470703  -11172.970459  13439.124023 -11131.470703   87.000000 -11172.970459    0.04834   41.451416        0.000000
6  -11131.422119  -11131.519043  13529.749023 -11131.422119   41.500000 -11131.519043    0.04834    0.048584       -9.326416
7  -11112.720703  -11122.144043  13620.374023 -11112.720703   18.750000 -11122.144043    0.04834    9.375000        0.000000
8  -11112.720703  -11112.769043  13620.374268 -11112.720703    7.375000 -11112.769043    0.04834    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:08:39]  --------------------------------------------------------------------------------
[08/23 17:08:39]  Iteration: 26 (0 solution, 25 counterexamples)
[08/23 17:08:41]  Generator returned sat in 1.843424 secs.
[08/23 17:08:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:41]  Improved gap from 0.0 to 100
[08/23 17:08:41]  Improved number of small numbers from 96 to 100 out of a max of 100
[08/23 17:08:41]  Verifer returned sat in 0.316081 secs.
[08/23 17:08:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -10933.922119  -10933.946533  13620.374023 -10933.922119    0.097168 -10933.946533    0.00000    0.024414        0.024414
1  -10933.922119  -10933.946289  13620.374023 -10933.922119    0.024170 -10933.946289    0.00000    0.024170      -99.975586
2  -10533.922363  -10833.946289  13620.374023 -10533.922363  400.023926 -10833.946289    0.02417  299.999756      200.000000
3  -10533.922363  -10633.946533  13620.374023 -10533.922363    1.048340 -10633.946533    0.02417  100.000000      100.000000
4  -10333.898193  -10618.946533  13620.374023 -10333.898193  300.024170 -10618.946533    0.04834  285.000000      200.000000
5  -10333.898193  -10484.184326  13620.374023 -10333.898193    2.000000 -10484.184326    0.04834  150.237793      100.000000
6  -10133.874023  -10433.946289  13620.374023 -10133.874023  350.261963 -10433.946289    0.07251  299.999756      200.000000
7  -10133.874023  -10233.946533  13620.374023 -10133.874023    2.000000 -10233.946533    0.07251  100.000000      100.000000
8   -9848.374023  -10233.946289  13620.374023  -9848.374023  385.500000 -10233.946289   85.57251  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 17:08:42]  --------------------------------------------------------------------------------
[08/23 17:08:42]  Iteration: 27 (0 solution, 26 counterexamples)
[08/23 17:08:42]  Generator returned sat in 0.528467 secs.
[08/23 17:08:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:43]  Improved gap from 0.0 to 15.625
[08/23 17:08:44]  Improved number of small numbers from 60 to 67 out of a max of 100
[08/23 17:08:44]  Verifer returned sat in 1.464957 secs.
[08/23 17:08:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -10549.547607  -10565.172363  13216.200806 -10549.547607    0.097168 -10565.172363   0.000000   15.624756       15.624756
1  -10549.547607  -10565.172363  13300.575806 -10549.547607    0.048096 -10565.172363   0.000000   15.624756       -0.000244
2  -10533.922363  -10549.547363  13384.950806 -10533.922363   31.250000 -10549.547363   0.000000   15.625000        0.000000
3  -10533.922363  -10533.922363  13469.325806 -10533.922363    0.501785 -10533.922363   0.000000    0.000000      -15.625000
4  -10517.793793  -10518.297363  13553.700806 -10517.793793   16.128571 -10518.297363   0.000000    0.503571      -15.121429
5  -10463.102722  -10502.672363  13614.131104 -10463.102722   55.194641 -10502.672363   0.000000   39.569641       -0.000061
6  -10369.345581  -10384.970581  13620.374023 -10369.345581  133.326782 -10384.970581   0.000000   15.625000        0.000000
7  -10044.341125  -10369.345459  13620.374023 -10044.341125  340.629456 -10369.345459  25.004456  299.999878      200.000000
8  -10044.341125  -10269.345459  13620.374023 -10044.341125    2.000000 -10269.345459  25.004456  199.999878      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:08:44]  --------------------------------------------------------------------------------
[08/23 17:08:44]  Iteration: 28 (0 solution, 27 counterexamples)
[08/23 17:08:48]  Generator returned sat in 3.580692 secs.
[08/23 17:08:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:51]  Improved gap from 0.0 to 0
[08/23 17:08:52]  Improved number of small numbers from 54 to 68 out of a max of 100
[08/23 17:08:52]  Verifer returned sat in 3.689966 secs.
[08/23 17:08:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t   queue_t  bottle_queue_t
0  -11117.851562  -11117.859619  13301.459576 -11117.851562  0.096924 -11117.859619        0.0  0.008057        0.008023
1  -11117.851562  -11117.859586  13401.451520 -11117.851562  0.000488 -11117.859586        0.0  0.008023       -0.000033
2  -11117.851252  -11117.851530  13501.451172 -11117.851252  0.008333 -11117.851530        0.0  0.000278       -0.000071
3  -11116.850141  -11117.841553  13600.450131 -11116.850141  1.001389 -11117.841553        0.0  0.991412        0.000000
4  -11116.850141  -11116.850141  13700.449951 -11116.850141  0.010000 -11116.850141        0.0  0.000000       -0.000180
5  -11116.840141  -11116.840419  13800.440131 -11116.840141  0.010000 -11116.840419        0.0  0.000278        0.000000
6  -11116.829863  -11116.840088  13900.429854 -11116.829863  0.010556 -11116.840088        0.0  0.010225        0.000000
7  -11116.829863  -11116.829863  14000.419922 -11116.829863  0.010000 -11116.829863        0.0  0.000000       -0.009932
8  -11116.819863  -11116.819863  14000.419922 -11116.819863  0.010000 -11116.819863        0.0  0.000000      -99.999932
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:08:52]  --------------------------------------------------------------------------------
[08/23 17:08:52]  Iteration: 29 (0 solution, 28 counterexamples)
[08/23 17:08:54]  Generator returned sat in 1.187515 secs.
[08/23 17:08:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:54]  Improved gap from 1.09619140625 to 73.4375
[08/23 17:08:54]  Improved number of small numbers from 52 to 100 out of a max of 100
[08/23 17:08:54]  Verifer returned sat in 0.538144 secs.
[08/23 17:08:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11344.980225  -11490.874756  13516.184570 -11344.980225    0.096680 -11490.874756        0.0  145.894531       45.894531
1  -11344.980225  -11344.980469  13516.184570 -11344.980225    0.048096 -11344.980469        0.0    0.000244      -54.105469
2  -11264.264160  -11264.312256  13516.184570 -11264.264160   80.716309 -11264.312256        0.0    0.048096      -73.389404
3  -10992.903564  -11164.312256  13516.184570 -10992.903564  271.408691 -11164.312256        0.0  171.408691       97.971191
4  -10992.903564  -10992.951660  13516.184570 -10992.903564  162.781250 -10992.951660        0.0    0.048096       -2.028809
5  -10817.437256  -10968.216064  13516.184570 -10817.437256  175.514404 -10968.216064        0.0  150.778809       73.437500
6  -10817.437256  -10890.874756  13542.746826 -10817.437256  147.548096 -10890.874756        0.0   73.437500       -0.000244
7  -10754.656006  -10817.437012  13569.309326 -10754.656006  136.218750 -10817.437012        0.0   62.781006      -10.656494
8  -10730.179688  -10743.999512  13595.871826 -10730.179688   87.257324 -10743.999512        0.0   13.819824      -59.617676
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:08:55]  --------------------------------------------------------------------------------
[08/23 17:08:55]  Iteration: 30 (0 solution, 29 counterexamples)
[08/23 17:08:56]  Generator returned sat in 1.043806 secs.
[08/23 17:08:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:56]  Improved gap from 0.006011962890625 to 100
[08/23 17:08:57]  Improved number of small numbers from 50 to 100 out of a max of 100
[08/23 17:08:57]  Verifer returned sat in 0.368578 secs.
[08/23 17:08:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11493.379639  -11493.403564  13518.713135 -11493.379639    0.096436 -11493.403564   0.000000    0.023926      -99.976074
1  -11093.427734  -11293.403564  13518.713135 -11093.427734  399.975830 -11293.403564   0.000000  199.975830      199.975830
2  -11093.427734  -11193.451416  13518.713135 -11093.427734  100.524170 -11193.451416   0.000000  100.023682       99.975830
3  -11093.427734  -11193.141357  13518.713135 -11093.427734   99.999756 -11193.141357   0.000000   99.713623       -0.024170
4  -10793.379395  -11093.403564  13518.713135 -10793.379395  399.761963 -11093.403564   0.024170  300.000000      200.000000
5  -10793.379395  -10893.415527  13518.713135 -10793.379395    0.500000 -10893.415527   0.024170  100.011963      100.000000
6  -10593.355469  -10893.403564  13518.713135 -10593.355469  300.035889 -10893.403564   0.048096  300.000000      200.000000
7  -10593.355469  -10743.391602  13518.713135 -10593.355469    0.500000 -10743.391602   0.048096  149.988037      100.000000
8  -10393.331543  -10693.403564  13518.713135 -10393.331543  350.011963 -10693.403564   0.072021  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:57]  --------------------------------------------------------------------------------
[08/23 17:08:57]  Iteration: 31 (0 solution, 30 counterexamples)
[08/23 17:08:58]  Generator returned sat in 0.244309 secs.
[08/23 17:08:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:08:58]  Improved number of small numbers from 53 to 99 out of a max of 99
[08/23 17:08:58]  Verifer returned sat in 0.246638 secs.
[08/23 17:08:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11493.379639  -11493.403564  13518.713135 -11493.379639    0.096191 -11493.403564   0.018066    0.005859      -99.994141
1  -11093.391357  -11293.403809  13518.713135 -11093.391357  399.994141 -11293.403809   0.018066  199.994385      199.994141
2  -11093.391357  -11193.909668  13518.713135 -11093.391357  100.524170 -11193.909668   0.018066  100.500244       99.994141
3  -11093.391357  -11143.150635  13518.713135 -11093.391357   99.999756 -11143.150635   0.018066   49.741211       -0.005859
4  -10793.379639  -10996.403809  13518.713135 -10793.379639  349.752930 -10996.403809   0.023926  203.000244      200.000000
5  -10793.379639  -10893.403564  13518.713135 -10793.379639    0.500000 -10893.403564   0.023926  100.000000      100.000000
6  -10593.373535  -10893.403564  13518.713135 -10593.373535  300.006104 -10893.403564   0.030029  300.000000      200.000000
7  -10593.373535  -10694.650635  13518.713135 -10593.373535    0.500000 -10694.650635   0.030029  101.247070      100.000000
8  -10393.367432  -10693.403564  13518.713135 -10393.367432  301.253174 -10693.403564   0.036133  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:08:58]  --------------------------------------------------------------------------------
[08/23 17:08:58]  Iteration: 32 (0 solution, 31 counterexamples)
[08/23 17:09:02]  Generator returned sat in 3.688245 secs.
[08/23 17:09:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:09:03]  Improved gap from 6.0 to 4.6875
[08/23 17:09:03]  Improved number of small numbers from 62 to 100 out of a max of 100
[08/23 17:09:03]  Verifer returned sat in 0.349968 secs.
[08/23 17:09:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11296.144043  -11296.192383  13518.713135 -11296.144043    0.095947 -11296.192383   0.000000    0.048340      -99.951660
1  -10896.240234  -11096.192383  13518.713135 -10896.240234  399.952148 -11096.192383   0.000000  199.952148      199.952148
2  -10796.240234  -11096.192139  13518.713135 -10796.240234  299.952148 -11096.192139   0.000000  299.951904      199.952148
3  -10796.240234  -10897.548340  13518.713135 -10796.240234  299.904053 -10897.548340   0.000000  101.308105       99.952148
4  -10596.144287  -10796.192383  13518.713135 -10596.144287  301.404053 -10796.192383   0.048096  200.000000      200.000000
5  -10596.144287  -10796.192139  13518.713135 -10596.144287    1.500000 -10796.192139   0.048096  199.999756      100.000000
6  -10596.144287  -10600.879883  13518.713135 -10596.144287    3.000000 -10600.879883   0.048096    4.687500        0.000000
7  -10596.144287  -10596.192383  13614.025391 -10596.144287    4.500000 -10596.192383   0.048096    0.000000       -4.687744
8  -10590.144287  -10590.192383  13708.025391 -10590.144287    6.000000 -10590.192383   0.048096    0.000000       -4.687744
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:09:03]  --------------------------------------------------------------------------------
[08/23 17:09:03]  Iteration: 33 (0 solution, 32 counterexamples)
[08/23 17:09:05]  Generator returned sat in 1.942801 secs.
[08/23 17:09:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:09:06]  Improved gap from 3.01 to 1.5625
[08/23 17:09:06]  Improved number of small numbers from 71 to 91 out of a max of 100
[08/23 17:09:06]  Verifer returned sat in 0.480253 secs.
[08/23 17:09:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11296.144287  -11296.146729  13518.713135 -11296.144287    0.095703 -11296.146729     0.0000    0.002441      -99.997500
1  -11196.144287  -11196.146729  13518.713135 -11196.144287  100.002441 -11196.146729     0.0000    0.002441      -99.997500
2  -10797.141846  -11096.146729  13518.713135 -10797.141846  399.004883 -11096.146729     0.0000  299.004883      199.004941
3  -10797.141846  -10896.146973  13518.713135 -10797.141846  299.002686 -10896.146973     0.0000   99.005127       99.004941
4  -10596.144287  -10796.146973  13518.713135 -10596.144287  300.002686 -10796.146973     0.0025  200.000186      200.000000
5  -10596.144287  -10696.146973  13518.713135 -10596.144287    0.010000 -10696.146973     0.0025  100.000186      100.000000
6  -10596.144287  -10596.149287  13518.713135 -10596.144287    1.010000 -10596.149287     0.0025    0.002500        0.000000
7  -10594.136787  -10596.146787  13615.703369 -10594.136787    2.010000 -10596.146787     0.0025    2.007500       -1.002266
8  -10593.134287  -10593.136963  13615.703369 -10593.134287    3.010000 -10593.136963     0.0025    0.000176      -99.999766
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:09:06]  --------------------------------------------------------------------------------
[08/23 17:09:06]  Iteration: 34 (0 solution, 33 counterexamples)
[08/23 17:09:07]  Generator returned sat in 0.519493 secs.
[08/23 17:09:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:07]  Improved gap from 0.0013427734375 to 0
[08/23 17:09:08]  Improved number of small numbers from 61 to 72 out of a max of 100
[08/23 17:09:08]  Verifer returned sat in 0.551231 secs.
[08/23 17:09:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0  -11296.144287  -11296.146973  13518.712891 -11296.144287    0.095703 -11296.146973   0.000000    0.002686      -99.997314
1  -11196.144287  -11196.146973  13518.712891 -11196.144287  100.002686 -11196.146973   0.000000    0.002686      -99.997314
2  -10796.148438  -11096.146973  13518.712891 -10796.148438  399.998535 -11096.146973   0.000000  299.998535      199.998535
3  -10796.148438  -10896.146973  13518.712891 -10796.148438  299.501343 -10896.146973   0.000000   99.998535       99.998535
4  -10596.145630  -10796.147217  13518.712891 -10596.145630  300.001343 -10796.147217   0.001343  200.000244      200.000000
5  -10596.145630  -10696.146973  13518.712891 -10596.145630    0.010000 -10696.146973   0.001343  100.000000      100.000000
6  -10596.145630  -10597.155630  13518.712891 -10596.145630    0.510000 -10597.155630   0.001343    1.008657        0.000000
7  -10596.144287  -10596.146973  13617.203369 -10596.144287    1.010000 -10596.146973   0.001343    0.001343       -1.508179
8  -10594.635630  -10594.637207  13617.203369 -10594.635630    1.510000 -10594.637207   0.001343    0.000234      -99.999521
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:09:08]  --------------------------------------------------------------------------------
[08/23 17:09:08]  Iteration: 35 (0 solution, 34 counterexamples)
[08/23 17:09:10]  Generator returned sat in 1.182153 secs.
[08/23 17:09:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:11]  Verifer returned unsat in 0.856106 secs.
[08/23 17:09:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:11]  --------------------------------------------------------------------------------
[08/23 17:09:11]  Iteration: 36 (1 solution, 34 counterexamples)
[08/23 17:09:11]  Generator returned sat in 0.151797 secs.
[08/23 17:09:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:13]  Verifer returned unsat in 1.511611 secs.
[08/23 17:09:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:13]  --------------------------------------------------------------------------------
[08/23 17:09:13]  Iteration: 37 (2 solution, 34 counterexamples)
[08/23 17:09:14]  Generator returned sat in 0.161226 secs.
[08/23 17:09:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:15]  Verifer returned unsat in 1.085578 secs.
[08/23 17:09:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:15]  --------------------------------------------------------------------------------
[08/23 17:09:15]  Iteration: 38 (3 solution, 34 counterexamples)
[08/23 17:09:15]  Generator returned sat in 0.139482 secs.
[08/23 17:09:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:16]  Verifer returned unsat in 0.765080 secs.
[08/23 17:09:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:16]  --------------------------------------------------------------------------------
[08/23 17:09:16]  Iteration: 39 (4 solution, 34 counterexamples)
[08/23 17:09:17]  Generator returned sat in 0.135155 secs.
[08/23 17:09:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:18]  Verifer returned unsat in 0.863456 secs.
[08/23 17:09:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:18]  --------------------------------------------------------------------------------
[08/23 17:09:18]  Iteration: 40 (5 solution, 34 counterexamples)
[08/23 17:09:19]  Generator returned sat in 0.306448 secs.
[08/23 17:09:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:21]  Verifer returned unsat in 2.838299 secs.
[08/23 17:09:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:22]  --------------------------------------------------------------------------------
[08/23 17:09:22]  Iteration: 41 (6 solution, 34 counterexamples)
[08/23 17:09:22]  Generator returned sat in 0.163711 secs.
[08/23 17:09:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:23]  Verifer returned unsat in 0.914830 secs.
[08/23 17:09:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:23]  --------------------------------------------------------------------------------
[08/23 17:09:23]  Iteration: 42 (7 solution, 34 counterexamples)
[08/23 17:09:24]  Generator returned sat in 0.162166 secs.
[08/23 17:09:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:25]  Verifer returned unsat in 0.714982 secs.
[08/23 17:09:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:25]  --------------------------------------------------------------------------------
[08/23 17:09:25]  Iteration: 43 (8 solution, 34 counterexamples)
[08/23 17:09:25]  Generator returned sat in 0.141159 secs.
[08/23 17:09:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:26]  Verifer returned unsat in 0.679381 secs.
[08/23 17:09:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:26]  --------------------------------------------------------------------------------
[08/23 17:09:26]  Iteration: 44 (9 solution, 34 counterexamples)
[08/23 17:09:27]  Generator returned sat in 0.196831 secs.
[08/23 17:09:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:28]  Verifer returned unsat in 1.091648 secs.
[08/23 17:09:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:28]  --------------------------------------------------------------------------------
[08/23 17:09:28]  Iteration: 45 (10 solution, 34 counterexamples)
[08/23 17:09:28]  Generator returned sat in 0.164494 secs.
[08/23 17:09:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:29]  Verifer returned unsat in 0.925710 secs.
[08/23 17:09:29]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:29]  --------------------------------------------------------------------------------
[08/23 17:09:29]  Iteration: 46 (11 solution, 34 counterexamples)
[08/23 17:09:30]  Generator returned sat in 0.269262 secs.
[08/23 17:09:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:32]  Verifer returned unsat in 1.497501 secs.
[08/23 17:09:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:32]  --------------------------------------------------------------------------------
[08/23 17:09:32]  Iteration: 47 (12 solution, 34 counterexamples)
[08/23 17:09:33]  Generator returned sat in 0.321867 secs.
[08/23 17:09:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:09:33]  Improved gap from 0.0478515625 to 73.4375
[08/23 17:09:33]  Improved number of small numbers from 52 to 100 out of a max of 100
[08/23 17:09:33]  Verifer returned sat in 0.375818 secs.
[08/23 17:09:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -9083.108398   -9283.108398  13004.723633 -9083.108398    0.095459 -9283.108398   0.000000  200.000000      200.000000
1   -9083.108398   -9183.108398  13004.723633 -9083.108398  199.999756 -9183.108398   0.000000  100.000000      100.000000
2   -9083.108398   -9156.546143  13004.723633 -9083.108398   99.999756 -9156.546143   0.000000   73.437744        0.000000
3   -8783.060791   -9075.858398  13004.723633 -8783.060791  373.485352 -9075.858398   0.047607  292.750000      200.000000
4   -8783.060791   -8885.185547  13004.723633 -8783.060791  102.125000 -8885.185547   0.047607  102.077148      100.000000
5   -8735.676514   -8876.299561  13004.723633 -8735.676514  149.461426 -8876.299561   0.047607  140.575439       47.384277
6   -8735.628662   -8783.108398  13031.286133 -8735.628662  140.623291 -8783.108398   0.047607   47.432129      -26.005371
7   -8636.185791   -8709.670898  13057.848633 -8636.185791  146.875000 -8709.670898   0.047607   73.437500        0.000000
8   -8621.365967   -8636.233398  13057.848633 -8621.365967   88.257324 -8636.233398   0.047607   14.819824      -85.180176
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:11:13]  --------------------------------------------------------------------------------
[08/23 17:11:13]  Iteration: 48 (12 solution, 35 counterexamples)
[08/23 17:11:16]  Generator returned sat in 2.297062 secs.
[08/23 17:11:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:11:17]  Improved gap from 12.458330790201822 to 12.5
[08/23 17:11:18]  Improved number of small numbers from 60 to 78 out of a max of 100
[08/23 17:11:18]  Verifer returned sat in 1.722107 secs.
[08/23 17:11:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -8358.584473   -8458.584673  13003.656982 -8358.584473    0.095215 -8458.584673   0.000000  100.000200        0.000217
1   -8358.584473   -8358.584473  13004.723633 -8358.584473    0.033447 -8358.584473   0.000000    0.000000      -98.933133
2   -8259.617920   -8259.651340  13004.723633 -8259.617920   98.966553 -8259.651340   0.000000    0.033420      -99.966580
3   -7859.618006   -8059.651340  13004.723633 -7859.618006  400.033333 -8059.651340   0.033333  200.000000      200.000000
4   -7859.618006   -8059.651123  13004.723633 -7859.618006  199.966667 -8059.651123   0.033333  199.999783      100.000000
5   -7859.618006   -7910.426270  13004.723633 -7859.618006  100.483333 -7910.426270   0.033333   50.774930        0.000000
6   -7859.618006   -7859.651340  13092.223633 -7859.618006   50.741667 -7859.651340   0.033333    0.000000      -12.500000
7   -7833.747173   -7847.151123  13178.852799 -7833.747173   25.870833 -7847.151123   0.033333   13.370617        0.000000
8   -7833.682373   -7833.780506  13266.352783 -7833.682373   13.435417 -7833.780506   0.033333    0.064800      -12.435216
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:11:18]  --------------------------------------------------------------------------------
[08/23 17:11:18]  Iteration: 49 (12 solution, 36 counterexamples)
[08/23 17:11:22]  Generator returned sat in 3.735654 secs.
[08/23 17:11:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:11:23]  Improved gap from 0.02125 to 0
[08/23 17:11:24]  Improved number of small numbers from 61 to 74 out of a max of 100
[08/23 17:11:24]  Verifer returned sat in 1.205852 secs.
[08/23 17:11:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -7619.710205   -7919.731201  13004.723633 -7619.710205    0.094971 -7919.731201  100.020833  200.000163      100.000191
1   -7619.710205   -7719.731230  13004.723633 -7619.710205    0.033447 -7719.731230  100.020833    0.000191        0.000191
2   -7419.706230   -7719.731201  13004.723633 -7419.706230  200.004167 -7719.731201  100.020833  200.004138      100.004167
3   -7419.706230   -7519.731230  13004.723633 -7419.706230  200.001667 -7519.731230  100.020833    0.004167        0.004167
4   -7119.707897   -7419.731445  13004.723633 -7119.707897  300.002500 -7419.731445  100.023333  200.000215      200.000000
5   -7119.707897   -7419.731201  13004.723633 -7119.707897    0.010000 -7419.731201  100.023333  199.999971      100.000000
6   -7119.707897   -7219.733730  13004.723633 -7119.707897    0.015000 -7219.733730  100.023333    0.002500        0.000000
7   -7119.687897   -7219.713730  13104.672383 -7119.687897    0.022500 -7219.713730  100.023333    0.002500       -0.031250
8   -7119.656647   -7219.679980  13104.672607 -7119.656647    0.033750 -7219.679980  100.023333    0.000000      -99.999775
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:11:24]  --------------------------------------------------------------------------------
[08/23 17:11:24]  Iteration: 50 (12 solution, 37 counterexamples)
[08/23 17:11:27]  Generator returned sat in 2.018215 secs.
[08/23 17:11:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:11:27]  Improved gap from 0.0 to 12.5
[08/23 17:11:28]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/23 17:11:28]  Verifer returned sat in 1.042808 secs.
[08/23 17:11:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7058.025146   -7158.025146  13004.723389 -7058.025146    0.094727 -7158.025146        0.0  100.000000        0.000000
1   -7057.977539   -7058.025146  13004.723389 -7057.977539  100.047607 -7058.025146        0.0    0.047607      -99.952393
2   -6658.072510   -6958.025146  13004.723389 -6658.072510  399.952637 -6958.025146        0.0  299.952637      199.952637
3   -6558.025146   -6758.072754  13004.723389 -6558.025146  400.000000 -6758.072754        0.0  200.047607      200.000000
4   -6558.025146   -6658.072510  13004.723389 -6558.025146  200.000000 -6658.072510        0.0  100.047363      100.000000
5   -6558.025146   -6608.072754  13004.723389 -6558.025146  100.000000 -6608.072754        0.0   50.047607        0.000000
6   -6558.025146   -6558.025146  13092.223389 -6558.025146   50.000000 -6558.025146        0.0    0.000000      -12.500000
7   -6533.025146   -6545.477783  13179.676025 -6533.025146   25.000000 -6545.477783        0.0   12.452637       -0.047363
8   -6532.977783   -6532.977783  13267.176025 -6532.977783   12.500000 -6532.977783        0.0    0.000000      -12.500000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:11:28]  --------------------------------------------------------------------------------
[08/23 17:11:28]  Iteration: 51 (12 solution, 38 counterexamples)
[08/23 17:11:32]  Generator returned sat in 3.079878 secs.
[08/23 17:11:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:11:32]  Improved gap from 0.0 to 48.4375
[08/23 17:11:32]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:11:32]  Verifer returned sat in 0.264632 secs.
[08/23 17:11:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7057.930176   -7112.509766  12953.160889 -7057.930176    0.094727 -7112.509766   0.000000   54.579590       54.579590
1   -7057.930176   -7057.977539  12953.160889 -7057.930176   54.579590 -7057.977539   0.000000    0.047363      -45.420410
2   -7012.462402   -7012.509766  13004.723389 -7012.462402   45.515137 -7012.509766   0.000000    0.047363      -48.390137
3   -6713.462402   -6864.072266  13004.723389 -6713.462402  299.047363 -6864.072266   0.000000  150.609863      150.609863
4   -6564.024902   -6764.072266  13004.723389 -6564.024902  300.047363 -6764.072266   0.047363  200.000000      200.000000
5   -6564.024902   -6764.072266  13004.723389 -6564.024902  145.952637 -6764.072266   0.047363  200.000000      100.000000
6   -6564.024902   -6663.072266  13004.723389 -6564.024902  146.952637 -6663.072266   0.047363   99.000000        0.000000
7   -6515.072266   -6564.072266  13055.770752 -6515.072266  147.952637 -6564.072266   0.047363   48.952637        0.000000
8   -6415.072266   -6515.119629  13055.770752 -6415.072266  148.952637 -6515.119629   0.047363  100.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:11:32]  --------------------------------------------------------------------------------
[08/23 17:11:32]  Iteration: 52 (12 solution, 39 counterexamples)
[08/23 17:11:40]  Generator returned sat in 6.839570 secs.
[08/23 17:11:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:11:40]  Improved gap from 0.0 to 100
[08/23 17:11:40]  Improved number of small numbers from 63 to 75 out of a max of 100
[08/23 17:11:40]  Verifer returned sat in 0.672728 secs.
[08/23 17:11:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7267.039795   -7367.039902  13004.723389 -7267.039795    0.094482 -7367.039902     0.0000  100.000107      100.000107
1   -7267.039795   -7367.039795  13004.723389 -7267.039795    0.002686 -7367.039795     0.0000  100.000000        0.000107
2   -7267.039795   -7267.039902  13004.723389 -7267.039795    0.002441 -7267.039902     0.0000    0.000107      -99.999893
3   -7067.039902   -7067.042402  13004.723389 -7067.039902  200.000000 -7067.042402     0.0000    0.002500        0.000000
4   -6568.044902   -6968.032402  13004.723389 -6568.044902  498.997500 -6968.032402   198.9950  200.992500      200.000000
5   -6568.044902   -6916.543652  13004.723389 -6568.044902    0.010000 -6916.543652   198.9950  149.503750      100.000000
6   -6368.042402   -6767.040039  13004.723389 -6368.042402  349.506250 -6767.040039   198.9975  200.000137      200.000000
7   -6368.042402   -6667.039902  13004.723389 -6368.042402    0.010000 -6667.039902   198.9975  100.000000      100.000000
8   -6168.039902   -6667.039795  13004.723389 -6168.039902  300.002500 -6667.039795   199.0000  299.999893      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:11:41]  --------------------------------------------------------------------------------
[08/23 17:11:41]  Iteration: 53 (12 solution, 40 counterexamples)
[08/23 17:11:43]  Generator returned sat in 1.463712 secs.
[08/23 17:11:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:11:43]  Improved gap from 0.00125 to 14.0625
[08/23 17:11:44]  Improved number of small numbers from 52 to 61 out of a max of 100
[08/23 17:11:44]  Verifer returned sat in 1.067861 secs.
[08/23 17:11:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6262.828857   -6276.891152  12707.352139 -6262.828857    0.094482 -6276.891152        0.0   14.062295       14.062295
1   -6262.828857   -6276.891152  12793.289639 -6262.828857    0.005127 -6276.891152        0.0   14.062295       -0.000205
2   -6248.766152   -6262.828652  12879.227139 -6248.766152   28.125000 -6262.828652        0.0   14.062500        0.000000
3   -6248.766152   -6248.766152  12965.164639 -6248.766152    0.175156 -6248.766152        0.0    0.000000      -14.062500
4   -6232.353340   -6234.703652  13051.102139 -6232.353340   16.412813 -6234.703652        0.0    2.350312      -11.712188
5   -6178.784277   -6220.641152  13051.102295 -6178.784277   55.919375 -6220.641152        0.0   41.856875      -58.142969
6   -6085.708652   -6099.771152  13116.169639 -6085.708652  134.932500 -6099.771152        0.0   14.062500        0.000000
7   -5753.408652   -6085.708496  13116.169639 -5753.408652  346.362500 -6085.708496       32.3  299.999844      200.000000
8   -5753.408652   -5985.708496  13116.169639 -5753.408652    0.010000 -5985.708496       32.3  199.999844      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:11:44]  --------------------------------------------------------------------------------
[08/23 17:11:44]  Iteration: 54 (12 solution, 41 counterexamples)
[08/23 17:11:47]  Generator returned sat in 1.974871 secs.
[08/23 17:11:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:11:47]  Improved gap from 0.0 to 10.9375
[08/23 17:11:48]  Improved number of small numbers from 61 to 100 out of a max of 100
[08/23 17:11:48]  Verifer returned sat in 0.825562 secs.
[08/23 17:11:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5639.650635   -5639.650635  13041.919434 -5639.650635    0.094238 -5639.650635        0.0    0.000000        0.000000
1   -5539.650635   -5539.650879  13041.919434 -5539.650635  100.000000 -5539.650879        0.0    0.000244        0.000000
2   -5239.698242   -5539.650635  13041.919434 -5239.698242  299.952637 -5539.650635        0.0  299.952393      199.952393
3   -5144.650635   -5340.603760  13041.919434 -5144.650635  395.000000 -5340.603760        0.0  195.953125      195.000000
4   -5144.603760   -5241.056396  13041.919434 -5144.603760  196.000000 -5241.056396        0.0   96.452637       95.046875
5   -5144.556396   -5191.259033  13046.825195 -5144.556396   96.500000 -5191.259033        0.0   46.702637        0.000000
6   -5144.509033   -5144.556152  13135.887451 -5144.509033   46.750000 -5144.556152        0.0    0.047119      -10.890381
7   -5122.681152   -5133.618652  13224.949951 -5122.681152   21.875000 -5133.618652        0.0   10.937500        0.000000
8   -5122.681152   -5122.681152  13314.012451 -5122.681152    9.437500 -5122.681152        0.0    0.000000      -10.937500
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:11:48]  --------------------------------------------------------------------------------
[08/23 17:11:48]  Iteration: 55 (12 solution, 42 counterexamples)
[08/23 17:11:55]  Generator returned sat in 6.977602 secs.
[08/23 17:11:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:11:56]  Improved gap from 0.0025 to 100
[08/23 17:11:56]  Improved number of small numbers from 43 to 53 out of a max of 100
[08/23 17:11:56]  Verifer returned sat in 0.724107 secs.
[08/23 17:11:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6372.614990   -6572.614746  13874.883626 -6372.614990    0.094238 -6572.614746   0.000000  199.999756       99.999837
1   -6372.614990   -6472.614827  13874.883626 -6372.614990    0.047119 -6472.614827   0.000000   99.999837       -0.000163
2   -6072.661947   -6372.614746  13874.883626 -6072.661947  399.952881 -6372.614746   0.000000  299.952799      199.952881
3   -6072.661947   -6272.614827  13874.883626 -6072.661947  267.364746 -6272.614827   0.000000  199.952881       99.952881
4   -5872.567708   -6073.583415  13874.883626 -5872.567708  400.047119 -6073.583415   0.047119  200.968587      200.000000
5   -5872.520589   -5972.614827  13874.883626 -5872.520589  201.015706 -5972.614827   0.047119  100.047119      100.047119
6   -5672.044149   -5873.646240  13874.883626 -5672.044149  300.523560 -5873.646240   0.570679  201.031413      200.000000
7   -5672.044149   -5773.044149  13874.883626 -5672.044149  200.984294 -5773.044149   0.570679  100.429321      100.000000
8   -5471.997030   -5672.614990  13874.883626 -5471.997030  300.476440 -5672.614990   0.617798  200.000163      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:11:56]  --------------------------------------------------------------------------------
[08/23 17:11:56]  Iteration: 56 (12 solution, 43 counterexamples)
[08/23 17:11:59]  Generator returned sat in 1.942351 secs.
[08/23 17:11:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:11:59]  Improved gap from 0.0235595703125 to 4.6875
[08/23 17:12:00]  Improved number of small numbers from 66 to 100 out of a max of 100
[08/23 17:12:00]  Verifer returned sat in 0.550359 secs.
[08/23 17:12:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5915.357910   -5982.804443  13385.073242 -5915.357910    0.094238 -5982.804443   0.000000   67.446533       67.446533
1   -5915.357910   -5920.045410  13417.626709 -5915.357910    0.023682 -5920.045410   0.000000    4.687500        0.000000
2   -5910.670410   -5915.357910  13512.939209 -5910.670410    9.375000 -5915.357910   0.000000    4.687500        0.000000
3   -5910.670410   -5910.670410  13608.251709 -5910.670410    0.023682 -5910.670410   0.000000    0.000000       -4.687500
4   -5872.567871   -5877.255371  13674.836426 -5872.567871   38.102539 -5877.255371   0.000000    4.687500       -0.000244
5   -5796.706543   -5872.520508  13674.836426 -5796.706543   80.548828 -5872.520508   0.000000   75.813965      -24.138916
6   -5728.278564   -5734.635498  13730.547363 -5728.278564  144.241943 -5734.635498   0.000000    6.356934        0.000000
7   -5428.255127   -5728.278564  13730.547363 -5428.255127  306.380371 -5728.278564   0.023438  300.000000      200.000000
8   -5428.255127   -5628.278564  13730.547363 -5428.255127    1.500000 -5628.278564   0.023438  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:12:00]  --------------------------------------------------------------------------------
[08/23 17:12:00]  Iteration: 57 (12 solution, 44 counterexamples)
[08/23 17:12:04]  Generator returned sat in 3.257649 secs.
[08/23 17:12:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:12:04]  Improved gap from 0.0 to 100
[08/23 17:12:05]  Improved number of small numbers from 64 to 78 out of a max of 100
[08/23 17:12:05]  Verifer returned sat in 0.657182 secs.
[08/23 17:12:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5920.021973   -5920.069092  13322.314209 -5920.021973    0.093994 -5920.069092   0.000000    0.047119        0.023438
1   -5920.021973   -5920.045410  13322.314209 -5920.021973    0.023682 -5920.045410   0.000000    0.023438      -99.976562
2   -5552.672852   -5820.045410  13322.314209 -5552.672852  367.372559 -5820.045410   0.000000  267.372559      167.372559
3   -5552.672852   -5720.045410  13322.314209 -5552.672852  267.349040 -5720.045410   0.000000  167.372559       67.372559
4   -5320.021851   -5520.680664  13322.314209 -5320.021851  400.023560 -5520.680664   0.023560  200.635254      200.000000
5   -5319.974731   -5420.045410  13322.314209 -5319.974731  200.682373 -5420.045410   0.023560  100.047119      100.047119
6   -5119.998291   -5320.680664  13322.314209 -5119.998291  300.023560 -5320.680664   0.047119  200.635254      200.000000
7   -5119.951172   -5220.045410  13322.314209 -5119.951172  200.682373 -5220.045410   0.047119  100.047119      100.047119
8   -4919.974731   -5220.045410  13322.314209 -4919.974731  300.023560 -5220.045410   0.070679  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:12:05]  --------------------------------------------------------------------------------
[08/23 17:12:05]  Iteration: 58 (12 solution, 45 counterexamples)
[08/23 17:12:07]  Generator returned sat in 1.274413 secs.
[08/23 17:12:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:12:07]  Improved gap from 0.0025 to 10.9375
[08/23 17:12:07]  Improved number of small numbers from 88 to 100 out of a max of 100
[08/23 17:12:07]  Verifer returned sat in 0.535398 secs.
[08/23 17:12:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6372.451172   -6372.474854  13322.314209 -6372.451172    0.093750 -6372.474854        0.0    0.023682        0.000000
1   -6372.427734   -6372.451172  13322.314209 -6372.427734    0.047119 -6372.451172        0.0    0.023438      -99.976562
2   -6258.951172   -6258.974854  13322.314209 -6258.951172  113.500000 -6258.974854        0.0    0.023682      -86.500000
3   -5878.974854   -6172.451172  13322.314209 -5878.974854  380.000000 -6172.451172        0.0  293.476318      193.476318
4   -5878.974854   -5972.451172  13322.314209 -5878.974854  189.000000 -5972.451172        0.0   93.476318       93.476318
5   -5878.951172   -5972.451172  13328.814209 -5878.951172   93.500000 -5972.451172        0.0   93.500000        0.000000
6   -5878.951172   -5878.951172  13417.876709 -5878.951172   45.750000 -5878.951172        0.0    0.000000      -10.937500
7   -5857.076172   -5868.013672  13506.939209 -5857.076172   21.875000 -5868.013672        0.0   10.937500        0.000000
8   -5857.076172   -5857.076172  13596.001465 -5857.076172    9.937500 -5857.076172        0.0    0.000000      -10.937744
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:12:08]  --------------------------------------------------------------------------------
[08/23 17:12:08]  Iteration: 59 (12 solution, 46 counterexamples)
[08/23 17:12:17]  Generator returned sat in 8.586251 secs.
[08/23 17:12:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:12:18]  Improved gap from 0.01171875 to 15.625
[08/23 17:12:18]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:12:18]  Verifer returned sat in 0.948278 secs.
[08/23 17:12:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6356.826172   -6375.404297  13322.314209 -6356.826172    0.093750 -6375.404297   0.000000   18.578125       15.625000
1   -6356.826172   -6372.451172  13406.689209 -6356.826172    0.023438 -6372.451172   0.000000   15.625000        0.000000
2   -6341.201172   -6356.826172  13491.064209 -6341.201172   31.250000 -6356.826172   0.000000   15.625000        0.000000
3   -6341.201172   -6341.201172  13575.439209 -6341.201172    0.023438 -6341.201172   0.000000    0.000000      -15.625000
4   -6325.552734   -6325.576172  13659.814209 -6325.552734   15.648438 -6325.576172   0.000000    0.023438      -15.601562
5   -6272.341797   -6308.951172  13659.814209 -6272.341797   53.234375 -6308.951172   0.000000   36.609375      -62.390625
6   -6180.044922   -6204.623047  13729.907959 -6180.044922  128.906250 -6204.623047   0.000000   24.578125        0.000000
7   -5880.021484   -6180.044922  13729.907959 -5880.021484  324.601562 -6180.044922   0.023438  300.000000      200.000000
8   -5880.021484   -6080.044922  13729.907959 -5880.021484    1.500000 -6080.044922   0.023438  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:12:18]  --------------------------------------------------------------------------------
[08/23 17:12:18]  Iteration: 60 (12 solution, 47 counterexamples)
[08/23 17:12:22]  Generator returned sat in 2.760706 secs.
[08/23 17:12:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:12:22]  Improved gap from 0.01171875 to 0
[08/23 17:12:22]  Improved number of small numbers from 76 to 82 out of a max of 100
[08/23 17:12:22]  Verifer returned sat in 0.683538 secs.
[08/23 17:12:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6472.451416   -6556.826660  13506.688965 -6472.451416    0.093506 -6556.826660    0.00000   84.375244       84.374756
1   -6472.451416   -6472.451416  13506.689209 -6472.451416    0.023438 -6472.451416    0.00000    0.000000      -15.625000
2   -6156.825166   -6356.826660  13506.689209 -6156.825166  315.626250 -6356.826660    0.00125  200.000244      200.000000
3   -6156.825166   -6256.826416  13506.689209 -6156.825166    0.752188 -6256.826416    0.00125  100.000000      100.000000
4   -6156.825166   -6256.826416  13506.689209 -6156.825166    0.504375 -6256.826416    0.00125  100.000000        0.000000
5   -6156.825166   -6156.826416  13606.680664 -6156.825166    0.010000 -6156.826416    0.00125    0.000000       -0.008545
6   -6156.815166   -6156.817666  13706.671875 -6156.815166    0.010000 -6156.817666    0.00125    0.001250       -0.007334
7   -6156.806416   -6156.808916  13806.662842 -6156.806416    0.010000 -6156.808916    0.00125    0.001250       -0.007617
8   -6156.797666   -6156.800049  13906.654297 -6156.797666    0.010000 -6156.800049    0.00125    0.001133       -0.007412
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:12:23]  --------------------------------------------------------------------------------
[08/23 17:12:23]  Iteration: 61 (12 solution, 48 counterexamples)
[08/23 17:12:25]  Generator returned sat in 1.426638 secs.
[08/23 17:12:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:12:25]  Improved gap from 0.0 to 0
[08/23 17:12:26]  Improved number of small numbers from 52 to 59 out of a max of 100
[08/23 17:12:26]  Verifer returned sat in 1.277060 secs.
[08/23 17:12:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -6158.157458   -6162.833916  13212.681641 -6158.157458  0.093506 -6162.833916        0.0  4.676458        4.676390
1   -6158.157458   -6158.157458  13308.005251 -6158.157458  0.000625 -6158.157458        0.0  0.000000        0.000000
2   -6158.156833   -6158.157458  13408.004626 -6158.156833  0.000625 -6158.157458        0.0  0.000625        0.000000
3   -6158.156208   -6158.156833  13508.004001 -6158.156208  0.001250 -6158.156833        0.0  0.000625        0.000000
4   -6156.817041   -6158.156208  13606.664834 -6156.817041  1.339792 -6158.156208        0.0  1.339167        0.000000
5   -6156.817041   -6156.817041  13706.664795 -6156.817041  0.340417 -6156.817041        0.0  0.000000       -0.000039
6   -6156.806416   -6156.816895  13806.654209 -6156.806416  0.010625 -6156.816895        0.0  0.010479        0.000000
7   -6156.806416   -6156.806416  13906.654209 -6156.806416  0.010000 -6156.806416        0.0  0.000000        0.000000
8   -6156.796416   -6156.806396  13906.654297 -6156.796416  0.010000 -6156.806396        0.0  0.009980      -99.989912
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:12:27]  --------------------------------------------------------------------------------
[08/23 17:12:27]  Iteration: 62 (12 solution, 49 counterexamples)
[08/23 17:12:28]  Generator returned sat in 0.855745 secs.
[08/23 17:12:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:12:30]  Improved gap from 0.0 to 4.6875
[08/23 17:12:31]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/23 17:12:31]  Verifer returned sat in 2.428241 secs.
[08/23 17:12:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5495.205811   -5549.840820  13174.592041 -5495.205811    0.093506 -5549.840820   0.000000   54.635010       54.634766
1   -5495.205811   -5495.252930  13215.316650 -5495.205811    0.046631 -5495.252930   0.000000    0.047119       -4.640625
2   -5485.877930   -5490.565186  13310.629150 -5485.877930    9.375000 -5490.565186   0.000000    4.687256       -0.000244
3   -5485.831055   -5485.877686  13372.593018 -5485.831055    4.734131 -5485.877686   0.000000    0.046631      -37.989502
4   -5447.794922   -5447.841553  13466.695312 -5447.794922   38.082764 -5447.841553   0.000000    0.046631       -5.851074
5   -5368.011719   -5441.943848  13466.695312 -5368.011719   79.829834 -5441.943848   0.000000   73.932129      -26.067871
6   -5298.888428   -5303.575684  13523.639648 -5298.888428  143.055420 -5303.575684   0.000000    4.687256       -0.000244
7   -4998.841553   -5203.575684  13523.639648 -4998.841553  304.734131 -5203.575684   0.046631  204.687500      200.000000
8   -4998.841553   -5198.888184  13523.639648 -4998.841553    1.000000 -5198.888184   0.046631  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:12:31]  --------------------------------------------------------------------------------
[08/23 17:12:31]  Iteration: 63 (12 solution, 50 counterexamples)
[08/23 17:12:33]  Generator returned sat in 1.380116 secs.
[08/23 17:12:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:12:33]  Improved gap from 0.011688232421875 to 100
[08/23 17:12:33]  Improved number of small numbers from 35 to 100 out of a max of 100
[08/23 17:12:33]  Verifer returned sat in 0.262093 secs.
[08/23 17:12:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6146.878418   -6347.878418  13971.583008 -6146.878418    0.093262 -6347.878418   0.000000  201.000000      199.953369
1   -6146.878418   -6246.831787  13971.583008 -6146.878418    0.046631 -6246.831787   0.000000   99.953369       99.953369
2   -6146.831787   -6246.831787  13971.583008 -6146.831787  100.000000 -6246.831787   0.000000  100.000000        0.000000
3   -5846.878662   -6046.831787  13971.583008 -5846.878662  399.953125 -6046.831787   0.000000  199.953125      199.953125
4   -5746.785156   -5947.878662  13971.583008 -5746.785156  300.046631 -5947.878662   0.046631  201.046875      200.000000
5   -5746.785156   -5846.831787  13971.583008 -5746.785156    2.000000 -5846.831787   0.046631  100.000000      100.000000
6   -5447.785156   -5746.831787  13971.583008 -5447.785156  399.000000 -5746.831787  99.046631  200.000000      200.000000
7   -5447.785156   -5646.831787  13971.583008 -5447.785156    2.000000 -5646.831787  99.046631  100.000000      100.000000
8   -5247.738281   -5646.831543  13971.583008 -5247.738281  300.046875 -5646.831543  99.093506  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 17:12:34]  --------------------------------------------------------------------------------
[08/23 17:12:34]  Iteration: 64 (12 solution, 51 counterexamples)
[08/23 17:12:37]  Generator returned sat in 3.053241 secs.
[08/23 17:12:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:12:38]  Improved gap from 0.0233154296875 to 4.6875
[08/23 17:12:39]  Improved number of small numbers from 53 to 58 out of a max of 100
[08/23 17:12:39]  Verifer returned sat in 1.358532 secs.
[08/23 17:12:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6135.760742   -6157.569255  13638.031535 -6135.760742    0.093262 -6157.569255   0.000000   21.808512       21.808512
1   -6135.760742   -6157.569255  13716.222900 -6135.760742    0.046631 -6157.569255   0.000000   21.808512       -0.000122
2   -6131.073120   -6135.760620  13811.535400 -6131.073120   26.496134 -6135.760620   0.000000    4.687500        0.000000
3   -6120.067193   -6131.073120  13900.529297 -6120.067193   15.693427 -6131.073120   0.000000   11.005927       -0.000176
4   -6095.784912   -6095.808228  13971.583008 -6095.784912   35.288208 -6095.808228   0.000000    0.023315       -4.664185
5   -6013.495402   -6091.120728  13971.583008 -6013.495402   82.312826 -6091.120728   0.000000   77.625326      -22.374674
6   -5946.831543   -5951.519043  14027.293823 -5946.831543  144.289185 -5951.519043   0.000000    4.687500        0.000000
7   -5646.808228   -5946.831543  14027.293823 -5646.808228  304.710815 -5946.831543   0.023315  300.000000      200.000000
8   -5646.808228   -5846.831543  14027.293823 -5646.808228    0.500000 -5846.831543   0.023315  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:12:39]  --------------------------------------------------------------------------------
[08/23 17:12:39]  Iteration: 65 (12 solution, 52 counterexamples)
[08/23 17:12:43]  Generator returned sat in 3.000628 secs.
[08/23 17:12:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:12:43]  Improved gap from 3.453369140625 to 4.6875
[08/23 17:12:43]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:12:43]  Verifer returned sat in 0.377696 secs.
[08/23 17:12:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5853.052246   -5853.052490  13333.514404 -5853.052246    0.093018 -5853.052490   0.000000    0.000244        0.000000
1   -5753.052490   -5757.739746  13333.514404 -5753.052490  100.000000 -5757.739746   0.000000    4.687256       -0.000244
2   -5453.099121   -5753.052246  13333.514404 -5453.099121  304.640625 -5753.052246   0.000000  299.953125      199.953125
3   -5453.099121   -5554.412354  13333.514404 -5453.099121  299.906738 -5554.412354   0.000000  101.313232       99.953125
4   -5253.005615   -5453.052246  13333.514404 -5253.005615  301.406738 -5453.052246   0.046631  200.000000      200.000000
5   -5253.005615   -5353.052490  13333.514404 -5253.005615    0.500000 -5353.052490   0.046631  100.000244      100.000000
6   -5253.005615   -5253.098877  13333.514404 -5253.005615    2.000000 -5253.098877   0.046631    0.046631        0.000000
7   -5249.552246   -5253.052246  13428.826904 -5249.552246    3.500000 -5253.052246   0.046631    3.453369       -1.234131
8   -5248.005615   -5248.364746  13428.826904 -5248.005615    5.000000 -5248.364746   0.046631    0.312500      -99.687500
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:12:44]  --------------------------------------------------------------------------------
[08/23 17:12:44]  Iteration: 66 (12 solution, 53 counterexamples)
[08/23 17:12:47]  Generator returned sat in 2.071270 secs.
[08/23 17:12:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:12:47]  Improved gap from 0.02325439453125 to 14.0625
[08/23 17:12:47]  Improved number of small numbers from 34 to 100 out of a max of 100
[08/23 17:12:47]  Verifer returned sat in 0.854162 secs.
[08/23 17:12:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5654.026855   -5654.073486  13073.5354 -5654.026855    0.092773 -5654.073486   0.000000    0.046631      -60.953369
1   -5593.026855   -5593.073242  13073.5354 -5593.026855   61.046631 -5593.073242   0.000000    0.046387      -99.953369
2   -5393.073486   -5407.135986  13073.5354 -5393.073486  199.999756 -5407.135986   0.000000   14.062500        0.000000
3   -5093.027100   -5293.073486  13073.5354 -5093.027100  314.108887 -5293.073486   0.046387  200.000000      200.000000
4   -5093.027100   -5193.073486  13073.5354 -5093.027100  180.000000 -5193.073486   0.046387  100.000000      100.000000
5   -5093.027100   -5107.135986  13073.5354 -5093.027100   91.500000 -5107.135986   0.046387   14.062500        0.000000
6   -5059.839600   -5093.073242  13140.3479 -5059.839600   47.250000 -5093.073242   0.046387   33.187256        0.000000
7   -5059.839600   -5059.885986  13226.2854 -5059.839600   25.125000 -5059.885986   0.046387    0.000000      -14.062500
8   -5045.777100   -5045.823486  13226.2854 -5045.777100   14.062500 -5045.823486   0.046387    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:12:48]  --------------------------------------------------------------------------------
[08/23 17:12:48]  Iteration: 67 (12 solution, 54 counterexamples)
[08/23 17:12:49]  Generator returned sat in 0.622631 secs.
[08/23 17:12:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:12:50]  Improved gap from 14.0625 to 14.0625
[08/23 17:12:50]  Improved number of small numbers from 73 to 100 out of a max of 100
[08/23 17:12:50]  Verifer returned sat in 1.138108 secs.
[08/23 17:12:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7621.068848   -7821.115234  13035.440430 -7621.068848    0.092773 -7821.115234   0.000000  200.046387      100.046387
1   -7621.068848   -7721.115234  13035.440430 -7621.068848  200.046143 -7721.115234   0.000000  100.046387        0.046387
2   -7621.068848   -7621.115234  13035.440430 -7621.068848    0.046387 -7621.115234   0.000000    0.046387      -99.953613
3   -7221.069092   -7421.115234  13035.440430 -7221.069092  400.046143 -7421.115234   0.046143  200.000000      200.000000
4   -7221.069092   -7322.661621  13035.440430 -7221.069092  200.000000 -7322.661621   0.046143  101.546387      100.000000
5   -7221.069092   -7245.693848  13035.440430 -7221.069092  101.500000 -7245.693848   0.046143   24.578613        0.000000
6   -7193.397705   -7221.115234  13107.769043 -7193.397705   52.250000 -7221.115234   0.046143   27.671387        0.000000
7   -7193.397705   -7193.443848  13193.706543 -7193.397705   27.625000 -7193.443848   0.046143    0.000000      -14.062500
8   -7178.085205   -7179.381348  13193.706543 -7178.085205   15.312500 -7179.381348   0.046143    1.250000      -98.750000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:12:51]  --------------------------------------------------------------------------------
[08/23 17:12:51]  Iteration: 68 (12 solution, 55 counterexamples)
[08/23 17:12:53]  Generator returned sat in 1.248489 secs.
[08/23 17:12:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:12:53]  Improved gap from 0.023193359375 to 0
[08/23 17:12:53]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:12:53]  Verifer returned sat in 0.217252 secs.
[08/23 17:12:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7422.592285   -7422.592285  12935.486816 -7422.592285    0.092773 -7422.592285        0.0    0.000000        0.000000
1   -7422.545898   -7422.592285  13035.440430 -7422.545898    0.046387 -7422.592285        0.0    0.046387        0.000000
2   -7422.545898   -7422.545898  13035.440430 -7422.545898    0.023193 -7422.545898        0.0    0.000000     -100.000000
3   -7121.069092   -7222.545898  13035.440430 -7121.069092  301.476807 -7222.545898        0.0  101.476807      101.476807
4   -7121.069092   -7122.592285  13035.440430 -7121.069092    1.500000 -7122.592285        0.0    1.523193        1.476807
5   -7121.069092   -7122.545898  13133.963623 -7121.069092    1.500000 -7122.545898        0.0    1.476807        0.000000
6   -7121.045898   -7121.069092  13233.940430 -7121.045898    1.500000 -7121.069092        0.0    0.023193        0.000000
7   -7119.569092   -7119.592285  13330.986816 -7119.569092    1.500000 -7119.592285        0.0    0.023193       -1.476807
8   -7118.092285   -7118.092285  13430.986816 -7118.092285    1.500000 -7118.092285        0.0    0.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:12:53]  --------------------------------------------------------------------------------
[08/23 17:12:53]  Iteration: 69 (12 solution, 56 counterexamples)
[08/23 17:13:02]  Generator returned sat in 7.643870 secs.
[08/23 17:13:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:13:02]  Improved number of small numbers from 54 to 62 out of a max of 99
[08/23 17:13:02]  Verifer returned sat in 0.586106 secs.
[08/23 17:13:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7919.061768   -7919.061836  13331.956123 -7919.061768    0.092285 -7919.061836     0.0000    0.000068      -99.999932
1   -7719.061836   -7819.061768  13331.956123 -7719.061836  200.000000 -7819.061768     0.0000   99.999932        0.000000
2   -7719.061836   -7719.061836  13331.956123 -7719.061836    0.002686 -7719.061836     0.0000    0.000000     -100.000000
3   -7519.061836   -7619.061836  13331.956123 -7519.061836  200.000000 -7619.061836     0.0000  100.000000        0.000000
4   -7121.061836   -7519.061836  13331.956123 -7121.061836  498.000000 -7519.061836    98.0000  300.000000      200.000000
5   -7121.061836   -7368.065586  13331.956123 -7121.061836    0.010000 -7368.065586    98.0000  149.003750      100.000000
6   -6921.059336   -7219.062012  13331.956123 -6921.059336  349.006250 -7219.062012    98.0025  200.000176      200.000000
7   -6921.059336   -7132.065586  13331.956123 -6921.059336    0.010000 -7132.065586    98.0025  113.003750      100.000000
8   -6649.056836   -7119.061768  13331.956123 -6649.056836  385.006250 -7119.061768   170.0050  299.999932      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:13:03]  --------------------------------------------------------------------------------
[08/23 17:13:03]  Iteration: 70 (12 solution, 57 counterexamples)
[08/23 17:13:09]  Generator returned sat in 5.181963 secs.
[08/23 17:13:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:13:10]  Improved number of small numbers from 45 to 55 out of a max of 99
[08/23 17:13:10]  Verifer returned sat in 0.802702 secs.
[08/23 17:13:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7884.957520   -8084.911377  13331.956123 -7884.957520    0.092285 -8084.911377   0.000000  199.953857       99.953872
1   -7884.911377   -7984.911391  13331.956123 -7884.911377  200.000000 -7984.911391   0.000000  100.000014        0.000014
2   -7619.015693   -7884.911377  13331.956123 -7619.015693  365.895698 -7884.911377   0.000000  265.895684      165.895698
3   -7619.015693   -7784.639581  13331.956123 -7619.015693  265.849555 -7784.639581   0.000000  165.623888       65.895698
4   -7384.865248   -7584.911391  13331.956123 -7384.865248  399.774333 -7584.911391   0.046143  200.000000      200.000000
5   -7384.865248   -7484.911391  13331.956123 -7384.865248  199.500000 -7484.911391   0.046143  100.000000      100.000000
6   -7184.615248   -7384.911391  13331.956123 -7184.615248  300.250000 -7384.911391   0.296143  200.000000      200.000000
7   -7184.615248   -7284.911391  13331.956123 -7184.615248  199.364095 -7284.911391   0.296143  100.000000      100.000000
8   -6984.569106   -7284.911377  13331.956123 -6984.569106  300.046143 -7284.911377   0.342285  299.999986      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:13:10]  --------------------------------------------------------------------------------
[08/23 17:13:10]  Iteration: 71 (12 solution, 58 counterexamples)
[08/23 17:13:23]  Generator returned sat in 12.135029 secs.
[08/23 17:13:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:23]  Improved gap from 14.08 to 14.0625
[08/23 17:13:24]  Improved number of small numbers from 54 to 73 out of a max of 100
[08/23 17:13:24]  Verifer returned sat in 0.848549 secs.
[08/23 17:13:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7919.025635   -7919.025879  13266.070425 -7919.025635    0.092041 -7919.025879    0.00000    0.000244        0.000059
1   -7719.024658   -7919.025635  13266.070425 -7719.024658  200.001221 -7919.025635    0.00000  200.000977      100.001035
2   -7719.024658   -7719.025693  13266.070425 -7719.024658  199.998750 -7719.025693    0.00000    0.001035        0.001035
3   -7520.025068   -7719.025693  13266.070425 -7520.025068  199.000625 -7719.025693    0.00000  199.000625       99.000625
4   -7319.024443   -7519.025879  13266.070425 -7319.024443  400.001250 -7519.025879    0.00125  200.000186      200.000000
5   -7319.024443   -7419.025879  13266.070425 -7319.024443    0.010000 -7419.025879    0.00125  100.000186      100.000000
6   -7319.024443   -7325.066895  13266.070425 -7319.024443    2.020000 -7325.066895    0.00125    6.041201        0.000000
7   -7319.024443   -7319.025693  13352.007925 -7319.024443    6.040000 -7319.025693    0.00125    0.000000      -14.062500
8   -7304.944443   -7304.963135  13352.008057 -7304.944443   14.080000 -7304.963135    0.00125    0.017441      -99.982369
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:13:24]  --------------------------------------------------------------------------------
[08/23 17:13:24]  Iteration: 72 (12 solution, 59 counterexamples)
[08/23 17:13:28]  Generator returned sat in 3.080914 secs.
[08/23 17:13:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:28]  Improved gap from 0.0 to 1.5625
[08/23 17:13:28]  Improved number of small numbers from 48 to 100 out of a max of 100
[08/23 17:13:28]  Verifer returned sat in 0.378983 secs.
[08/23 17:13:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -7921.025635   -7921.071533  13266.070312 -7921.025635    0.092041 -7921.071533        0.0    0.045898      -99.953857
1   -7721.025635   -7821.071533  13266.070312 -7721.025635  200.045898 -7821.071533        0.0  100.045898        0.046143
2   -7721.025635   -7721.071777  13266.070312 -7721.025635    0.046143 -7721.071777        0.0    0.046143      -99.953857
3   -7422.588379   -7521.071777  13266.070312 -7422.588379  298.483398 -7521.071777        0.0   98.483398       98.483398
4   -7422.588379   -7422.634277  13266.070312 -7422.588379    2.000000 -7422.634277        0.0    0.045898       -1.516602
5   -7420.634277   -7421.071777  13364.507812 -7420.634277    2.000000 -7421.071777        0.0    0.437500       -1.125000
6   -7419.071777   -7419.117920  13462.553955 -7419.071777    2.000000 -7419.117920        0.0    0.046143       -1.516357
7   -7417.117920   -7417.555176  13560.991211 -7417.117920    2.000000 -7417.555176        0.0    0.437256       -1.125244
8   -7415.555176   -7415.555420  13560.991455 -7415.555176    2.000000 -7415.555420        0.0    0.000244      -99.562256
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:13:29]  --------------------------------------------------------------------------------
[08/23 17:13:29]  Iteration: 73 (12 solution, 60 counterexamples)
[08/23 17:13:32]  Generator returned sat in 2.568557 secs.
[08/23 17:13:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:32]  Verifer returned unsat in 0.172060 secs.
[08/23 17:13:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:32]  --------------------------------------------------------------------------------
[08/23 17:13:32]  Iteration: 74 (13 solution, 60 counterexamples)
[08/23 17:13:40]  Generator returned sat in 6.873202 secs.
[08/23 17:13:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:40]  Verifer returned unsat in 0.090759 secs.
[08/23 17:13:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:40]  --------------------------------------------------------------------------------
[08/23 17:13:40]  Iteration: 75 (14 solution, 60 counterexamples)
[08/23 17:13:42]  Generator returned sat in 1.189206 secs.
[08/23 17:13:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:44]  Verifer returned unsat in 1.381279 secs.
[08/23 17:13:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:44]  --------------------------------------------------------------------------------
[08/23 17:13:44]  Iteration: 76 (15 solution, 60 counterexamples)
[08/23 17:13:45]  Generator returned sat in 0.653416 secs.
[08/23 17:13:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:46]  Verifer returned unsat in 0.948565 secs.
[08/23 17:13:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:46]  --------------------------------------------------------------------------------
[08/23 17:13:46]  Iteration: 77 (16 solution, 60 counterexamples)
[08/23 17:13:48]  Generator returned sat in 0.586002 secs.
[08/23 17:13:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:48]  Verifer returned unsat in 0.529430 secs.
[08/23 17:13:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:48]  --------------------------------------------------------------------------------
[08/23 17:13:48]  Iteration: 78 (17 solution, 60 counterexamples)
[08/23 17:13:50]  Generator returned sat in 0.578596 secs.
[08/23 17:13:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:51]  Verifer returned unsat in 1.212171 secs.
[08/23 17:13:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:51]  --------------------------------------------------------------------------------
[08/23 17:13:51]  Iteration: 79 (18 solution, 60 counterexamples)
[08/23 17:13:53]  Generator returned sat in 0.573974 secs.
[08/23 17:13:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:54]  Verifer returned unsat in 0.875244 secs.
[08/23 17:13:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:54]  --------------------------------------------------------------------------------
[08/23 17:13:54]  Iteration: 80 (19 solution, 60 counterexamples)
[08/23 17:13:55]  Generator returned sat in 0.616818 secs.
[08/23 17:13:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:56]  Verifer returned unsat in 0.902374 secs.
[08/23 17:13:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:56]  --------------------------------------------------------------------------------
[08/23 17:13:56]  Iteration: 81 (20 solution, 60 counterexamples)
[08/23 17:13:58]  Generator returned sat in 0.803591 secs.
[08/23 17:13:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:59]  Verifer returned unsat in 1.104939 secs.
[08/23 17:13:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:13:59]  --------------------------------------------------------------------------------
[08/23 17:13:59]  Iteration: 82 (21 solution, 60 counterexamples)
[08/23 17:14:00]  Generator returned sat in 0.654933 secs.
[08/23 17:14:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:02]  Verifer returned unsat in 1.056443 secs.
[08/23 17:14:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:02]  --------------------------------------------------------------------------------
[08/23 17:14:02]  Iteration: 83 (22 solution, 60 counterexamples)
[08/23 17:14:03]  Generator returned sat in 0.957298 secs.
[08/23 17:14:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:05]  Verifer returned unsat in 1.195853 secs.
[08/23 17:14:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:05]  --------------------------------------------------------------------------------
[08/23 17:14:05]  Iteration: 84 (23 solution, 60 counterexamples)
[08/23 17:14:06]  Generator returned sat in 0.758366 secs.
[08/23 17:14:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:07]  Verifer returned unsat in 0.549574 secs.
[08/23 17:14:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:07]  --------------------------------------------------------------------------------
[08/23 17:14:07]  Iteration: 85 (24 solution, 60 counterexamples)
[08/23 17:14:08]  Generator returned sat in 0.639741 secs.
[08/23 17:14:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:10]  Verifer returned unsat in 1.559629 secs.
[08/23 17:14:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:10]  --------------------------------------------------------------------------------
[08/23 17:14:10]  Iteration: 86 (25 solution, 60 counterexamples)
[08/23 17:14:12]  Generator returned sat in 0.580431 secs.
[08/23 17:14:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:13]  Verifer returned unsat in 1.539438 secs.
[08/23 17:14:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:13]  --------------------------------------------------------------------------------
[08/23 17:14:13]  Iteration: 87 (26 solution, 60 counterexamples)
[08/23 17:14:15]  Generator returned sat in 1.057317 secs.
[08/23 17:14:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:16]  Verifer returned unsat in 0.745693 secs.
[08/23 17:14:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:16]  --------------------------------------------------------------------------------
[08/23 17:14:16]  Iteration: 88 (27 solution, 60 counterexamples)
[08/23 17:14:17]  Generator returned sat in 0.643789 secs.
[08/23 17:14:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:18]  Verifer returned unsat in 0.910862 secs.
[08/23 17:14:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:18]  --------------------------------------------------------------------------------
[08/23 17:14:18]  Iteration: 89 (28 solution, 60 counterexamples)
[08/23 17:14:20]  Generator returned sat in 0.605089 secs.
[08/23 17:14:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:21]  Verifer returned unsat in 0.569864 secs.
[08/23 17:14:21]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:21]  --------------------------------------------------------------------------------
[08/23 17:14:21]  Iteration: 90 (29 solution, 60 counterexamples)
[08/23 17:14:24]  Generator returned sat in 2.032445 secs.
[08/23 17:14:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:24]  Improved gap from 0.0 to 15.625
[08/23 17:14:24]  Improved number of small numbers from 32 to 100 out of a max of 100
[08/23 17:14:24]  Verifer returned sat in 0.463065 secs.
[08/23 17:14:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6837.590332   -7021.965088  13208.167969 -6837.590332    0.091797 -7021.965088   0.000000  184.374756       84.374756
1   -6837.590088   -6837.590332  13208.167969 -6837.590088  184.375000 -6837.590332   0.000000    0.000244      -15.625000
2   -6521.919189   -6801.011230  13208.167969 -6521.919189  315.671143 -6801.011230   0.045898  279.046143      200.000000
3   -6424.965332   -6721.965088  13208.167969 -6424.965332  376.000000 -6721.965088   0.045898  296.953857      196.953857
4   -6424.965332   -6521.965332  13208.167969 -6424.965332  190.000000 -6521.965332   0.045898   96.954102       96.953857
5   -6424.919434   -6425.011230  13208.167969 -6424.919434   97.000000 -6425.011230   0.045898    0.045898       -3.000244
6   -6374.465332   -6401.807129  13260.714111 -6374.465332   50.500000 -6401.807129   0.045898   27.295898        0.000000
7   -6374.465332   -6374.511230  13345.089111 -6374.465332   27.250000 -6374.511230   0.045898    0.000000      -15.625000
8   -6358.840332   -6358.886230  13345.089355 -6358.840332   15.625000 -6358.886230   0.045898    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:14:24]  --------------------------------------------------------------------------------
[08/23 17:14:24]  Iteration: 91 (29 solution, 61 counterexamples)
[08/23 17:14:29]  Generator returned sat in 3.454369 secs.
[08/23 17:14:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:29]  Improved gap from 0.0458984375 to 48.4375
[08/23 17:14:29]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:14:29]  Verifer returned sat in 0.331620 secs.
[08/23 17:14:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6522.811523   -6622.811523  13355.631592 -6522.811523    0.091797 -6622.811523   0.000000  100.000000      100.000000
1   -6522.811523   -6565.281982  13355.631592 -6522.811523  100.000000 -6565.281982   0.000000   42.470459        0.000000
2   -6474.373779   -6522.811523  13407.193848 -6474.373779   90.908203 -6522.811523   0.000000   48.437744        0.000000
3   -6224.765625   -6374.373779  13407.193848 -6224.765625  298.045898 -6374.373779   0.000000  149.608154      149.608154
4   -6074.327881   -6274.373779  13407.193848 -6074.327881  300.045898 -6274.373779   0.045898  200.000000      200.000000
5   -6074.327881   -6221.373779  13407.193848 -6074.327881  144.954102 -6221.373779   0.045898  147.000000      100.000000
6   -6074.327881   -6174.373779  13407.193848 -6074.327881  146.954102 -6174.373779   0.045898  100.000000        0.000000
7   -6025.373779   -6073.857178  13458.239746 -6025.373779  148.954102 -6073.857178   0.045898   48.437500        0.000000
8   -5922.857178   -6025.419678  13458.239746 -5922.857178  150.954102 -6025.419678   0.045898  102.516602        2.516602
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:14:29]  --------------------------------------------------------------------------------
[08/23 17:14:29]  Iteration: 92 (29 solution, 62 counterexamples)
[08/23 17:14:32]  Generator returned sat in 1.937101 secs.
[08/23 17:14:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:33]  Verifer returned unsat in 1.171512 secs.
[08/23 17:14:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:33]  --------------------------------------------------------------------------------
[08/23 17:14:33]  Iteration: 93 (30 solution, 62 counterexamples)
[08/23 17:14:35]  Generator returned sat in 0.983331 secs.
[08/23 17:14:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:37]  Verifer returned unsat in 1.320735 secs.
[08/23 17:14:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:37]  --------------------------------------------------------------------------------
[08/23 17:14:37]  Iteration: 94 (31 solution, 62 counterexamples)
[08/23 17:14:38]  Generator returned sat in 0.620338 secs.
[08/23 17:14:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:40]  Verifer returned unsat in 1.853117 secs.
[08/23 17:14:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:40]  --------------------------------------------------------------------------------
[08/23 17:14:40]  Iteration: 95 (32 solution, 62 counterexamples)
[08/23 17:14:42]  Generator returned sat in 0.888425 secs.
[08/23 17:14:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:42]  Verifer returned unsat in 0.167893 secs.
[08/23 17:14:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:42]  --------------------------------------------------------------------------------
[08/23 17:14:42]  Iteration: 96 (33 solution, 62 counterexamples)
[08/23 17:14:44]  Generator returned sat in 0.589228 secs.
[08/23 17:14:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:44]  Verifer returned unsat in 0.129874 secs.
[08/23 17:14:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:44]  --------------------------------------------------------------------------------
[08/23 17:14:44]  Iteration: 97 (34 solution, 62 counterexamples)
[08/23 17:14:46]  Generator returned sat in 0.708876 secs.
[08/23 17:14:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:46]  Verifer returned unsat in 0.312226 secs.
[08/23 17:14:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:46]  --------------------------------------------------------------------------------
[08/23 17:14:46]  Iteration: 98 (35 solution, 62 counterexamples)
[08/23 17:14:48]  Generator returned sat in 0.657666 secs.
[08/23 17:14:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:48]  Verifer returned unsat in 0.171150 secs.
[08/23 17:14:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:48]  --------------------------------------------------------------------------------
[08/23 17:14:48]  Iteration: 99 (36 solution, 62 counterexamples)
[08/23 17:14:49]  Generator returned sat in 0.671708 secs.
[08/23 17:14:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:50]  Verifer returned unsat in 0.088611 secs.
[08/23 17:14:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:50]  --------------------------------------------------------------------------------
[08/23 17:14:50]  Iteration: 100 (37 solution, 62 counterexamples)
[08/23 17:14:51]  Generator returned sat in 0.605844 secs.
[08/23 17:14:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:51]  Verifer returned unsat in 0.084680 secs.
[08/23 17:14:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:51]  --------------------------------------------------------------------------------
[08/23 17:14:51]  Iteration: 101 (38 solution, 62 counterexamples)
[08/23 17:14:53]  Generator returned sat in 0.600021 secs.
[08/23 17:14:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:53]  Verifer returned unsat in 0.067399 secs.
[08/23 17:14:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:53]  --------------------------------------------------------------------------------
[08/23 17:14:53]  Iteration: 102 (39 solution, 62 counterexamples)
[08/23 17:14:54]  Generator returned sat in 0.567448 secs.
[08/23 17:14:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:54]  Verifer returned unsat in 0.117106 secs.
[08/23 17:14:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:55]  --------------------------------------------------------------------------------
[08/23 17:14:55]  Iteration: 103 (40 solution, 62 counterexamples)
[08/23 17:14:56]  Generator returned sat in 0.564442 secs.
[08/23 17:14:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:56]  Verifer returned unsat in 0.079059 secs.
[08/23 17:14:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:56]  --------------------------------------------------------------------------------
[08/23 17:14:56]  Iteration: 104 (41 solution, 62 counterexamples)
[08/23 17:14:58]  Generator returned sat in 1.278779 secs.
[08/23 17:14:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:14:59]  Improved gap from 0.0 to 14.0625
[08/23 17:14:59]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/23 17:14:59]  Verifer returned sat in 0.557389 secs.
[08/23 17:14:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6058.540039   -6058.540039  13820.580322 -6058.540039    0.091553 -6058.540039   0.000000    0.000000        0.000000
1   -5972.602539   -5972.602539  13820.580322 -5972.602539   85.937500 -5972.602539   0.000000    0.000000      -14.062500
2   -5958.494141   -5958.540039  13906.517822 -5958.494141   14.108398 -5958.540039   0.000000    0.045898      -14.016602
3   -5693.176270   -5944.477539  13906.517822 -5693.176270  265.363770 -5944.477539   0.000000  251.301270      151.301270
4   -5544.431885   -5744.477783  13906.517822 -5544.431885  400.045654 -5744.477783   0.045654  200.000244      200.000000
5   -5544.431885   -5744.477539  13906.517822 -5544.431885    1.500000 -5744.477539   0.045654  200.000000      100.000000
6   -5544.431885   -5644.477539  13906.517822 -5544.431885    4.250000 -5644.477539   0.045654  100.000000        0.000000
7   -5544.431885   -5544.477539  13992.455322 -5544.431885    8.375000 -5544.477539   0.045654    0.000000      -14.062500
8   -5529.869385   -5530.415039  13992.455566 -5529.869385   14.562500 -5530.415039   0.045654    0.500000      -99.499756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:14:59]  --------------------------------------------------------------------------------
[08/23 17:14:59]  Iteration: 105 (41 solution, 63 counterexamples)
[08/23 17:15:01]  Generator returned sat in 1.317513 secs.
[08/23 17:15:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:15:02]  Improved gap from 0.0 to 48.4375
[08/23 17:15:02]  Improved number of small numbers from 43 to 100 out of a max of 100
[08/23 17:15:02]  Verifer returned sat in 0.510628 secs.
[08/23 17:15:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5196.006592   -5344.444336  13889.330322 -5196.006592    0.091553 -5344.444336   0.000000  148.437744      148.437500
1   -5196.006592   -5244.444336  13889.330322 -5196.006592    0.045898 -5244.444336   0.000000   48.437744       48.437500
2   -5196.006592   -5244.444092  13940.892822 -5196.006592    0.045654 -5244.444092   0.000000   48.437500        0.000000
3   -4935.460938   -5096.006592  13940.892822 -4935.460938  308.983154 -5096.006592   0.000000  160.545654      160.545654
4   -4785.023438   -4996.523438  13940.892822 -4785.023438  310.983154 -4996.523438  10.983154  200.516846      200.000000
5   -4785.023438   -4996.006592  13940.892822 -4785.023438  125.460449 -4996.006592  10.983154  200.000000      100.000000
6   -4785.023438   -4896.006592  13940.892822 -4785.023438  127.460449 -4896.006592  10.983154  100.000000        0.000000
7   -4755.562988   -4796.006592  13992.455322 -4755.562988  129.460449 -4796.006592  10.983154   29.460449      -18.977051
8   -4653.562988   -4747.569092  13992.455322 -4653.562988  131.460449 -4747.569092  10.983154   83.022949      -16.977051
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:15:02]  --------------------------------------------------------------------------------
[08/23 17:15:02]  Iteration: 106 (41 solution, 64 counterexamples)
[08/23 17:15:06]  Generator returned sat in 2.719713 secs.
[08/23 17:15:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:15:06]  Improved gap from 0.0228271484375 to 10.9375
[08/23 17:15:07]  Improved number of small numbers from 41 to 100 out of a max of 100
[08/23 17:15:07]  Verifer returned sat in 0.472103 secs.
[08/23 17:15:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5432.142822   -5632.143066  13940.892578 -5432.142822    0.091309 -5632.143066   0.000000  200.000244      200.000000
1   -5332.878906   -5532.143066  13940.892578 -5332.878906  299.264160 -5532.143066   0.000000  199.264160      199.263916
2   -5332.878906   -5532.142822  13940.892578 -5332.878906    0.045898 -5532.142822   0.000000  199.263916       99.263916
3   -5332.878906   -5332.924316  13940.892578 -5332.878906  199.218262 -5332.924316   0.000000    0.045410       -0.736084
4   -5032.096924   -5232.142822  13940.892578 -5032.096924  300.827393 -5232.142822   0.045898  200.000000      200.000000
5   -5032.096924   -5143.080322  13940.892578 -5032.096924    0.500000 -5143.080322   0.045898  110.937500      100.000000
6   -5032.096924   -5038.313477  13940.892578 -5032.096924    2.750000 -5038.313477   0.045898    6.170654        0.000000
7   -5032.096924   -5032.142822  14029.955078 -5032.096924    6.125000 -5032.142822   0.045898    0.000000      -10.937500
8   -5020.909424   -5021.205322  14029.955078 -5020.909424   11.187500 -5021.205322   0.045898    0.250000      -99.750000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:15:07]  --------------------------------------------------------------------------------
[08/23 17:15:07]  Iteration: 107 (41 solution, 65 counterexamples)
[08/23 17:15:16]  Generator returned sat in 7.702923 secs.
[08/23 17:15:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:15:16]  Improved gap from 0.045654296875 to 100
[08/23 17:15:16]  Improved number of small numbers from 78 to 100 out of a max of 100
[08/23 17:15:16]  Verifer returned sat in 0.305533 secs.
[08/23 17:15:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5778.688965   -5778.734375  14239.428467 -5778.688965    0.091064 -5778.734375   0.000000    0.045410      -99.954346
1   -5578.688965   -5678.734375  14239.428467 -5578.688965  200.045410 -5678.734375   0.000000  100.045410        0.045654
2   -5578.688965   -5578.734375  14239.428467 -5578.688965    0.045654 -5578.734375   0.000000    0.045410      -99.954346
3   -5178.780029   -5427.961670  14239.428467 -5178.780029  399.954346 -5427.961670   0.000000  249.181641      199.954590
4   -5078.688965   -5280.280273  14239.428467 -5078.688965  349.272705 -5280.280273   0.045654  201.545654      200.000000
5   -5078.688965   -5194.461670  14239.428467 -5078.688965  199.727051 -5194.461670   0.045654  115.727051      100.000000
6   -4811.643311   -5178.734619  14239.428467 -4811.643311  382.772705 -5178.734619  67.091309  300.000000      200.000000
7   -4811.643311   -4978.734619  14239.428467 -4811.643311  125.113525 -4978.734619  67.091309  100.000000      100.000000
8   -4611.597656   -4978.734375  14239.428467 -4611.597656  300.045654 -4978.734375  67.136963  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:15:16]  --------------------------------------------------------------------------------
[08/23 17:15:16]  Iteration: 108 (41 solution, 66 counterexamples)
[08/23 17:15:29]  Generator returned sat in 11.933816 secs.
[08/23 17:15:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:15:29]  Improved gap from 0.022705078125 to 0
[08/23 17:15:30]  Improved number of small numbers from 72 to 100 out of a max of 100
[08/23 17:15:30]  Verifer returned sat in 0.365052 secs.
[08/23 17:15:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5181.460938   -5381.506592  14139.473877 -5181.460938    0.090820 -5381.506592        0.0  200.045654      100.045654
1   -5181.460938   -5181.506592  14139.473877 -5181.460938  200.045654 -5181.506592        0.0    0.045654        0.045654
2   -5181.460938   -5181.506592  14139.473877 -5181.460938    0.045654 -5181.506592        0.0    0.045654      -99.954346
3   -4981.460938   -4982.506592  14139.473877 -4981.460938  200.045654 -4982.506592        0.0    1.045654        0.045654
4   -4981.460938   -4981.506592  14239.428223 -4981.460938    1.000000 -4981.506592        0.0    0.045654        0.000000
5   -4980.506592   -4980.552002  14338.473877 -4980.506592    1.000000 -4980.552002        0.0    0.045410        0.000000
6   -4979.552002   -4979.597656  14437.519287 -4979.552002    1.000000 -4979.597656        0.0    0.045654        0.000000
7   -4978.597656   -4979.552002  14536.519531 -4978.597656    1.000000 -4979.552002        0.0    0.954346       -0.045410
8   -4978.552002   -4978.552002  14536.519531 -4978.552002    1.000000 -4978.552002        0.0    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:15:30]  --------------------------------------------------------------------------------
[08/23 17:15:30]  Iteration: 109 (41 solution, 67 counterexamples)
[08/23 17:15:41]  Generator returned sat in 9.768240 secs.
[08/23 17:15:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:15:42]  Improved gap from 0.00125 to 4.6875
[08/23 17:15:42]  Improved number of small numbers from 63 to 71 out of a max of 100
[08/23 17:15:42]  Verifer returned sat in 1.496617 secs.
[08/23 17:15:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5181.461182   -5219.032604  14039.433350 -5181.461182    0.090820 -5219.032604      0.000   37.571423        0.004883
1   -5181.461182   -5181.465938  14134.745605 -5181.461182    0.004883 -5181.465938      0.000    0.004756       -4.682861
2   -5159.425104   -5164.112604  14217.392389 -5159.425104   22.040833 -5164.112604      0.000    4.687500        0.000000
3   -5159.420104   -5159.425104  14285.237549 -5159.420104    4.692500 -5159.425104      0.000    0.005000      -32.149840
4   -5122.582604   -5127.270104  14380.549889 -5122.582604   36.842500 -5127.270104      0.000    4.687500        0.000000
5   -5044.908438   -5122.582604  14380.550049 -5044.908438   82.361667 -5122.582604      0.000   77.674167      -22.325674
6   -4978.275104   -4982.962604  14436.242389 -4978.275104  144.307500 -4982.962604      0.000    4.687500        0.000000
7   -4678.270104   -4978.274902  14436.242389 -4678.270104  304.692500 -4978.274902      0.005  299.999798      200.000000
8   -4678.270104   -4878.274902  14436.242389 -4678.270104    0.010000 -4878.274902      0.005  199.999798      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:15:42]  --------------------------------------------------------------------------------
[08/23 17:15:42]  Iteration: 110 (41 solution, 68 counterexamples)
[08/23 17:15:47]  Generator returned sat in 3.615356 secs.
[08/23 17:15:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:15:47]  Improved gap from 3.45458984375 to 3.125
[08/23 17:15:48]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/23 17:15:48]  Verifer returned sat in 0.346652 secs.
[08/23 17:15:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5426.340820    -5626.34082  14484.307861 -5426.340820    0.090820  -5626.34082   0.000000  200.000000      200.000000
1   -5426.340820    -5526.34082  14484.307861 -5426.340820    0.045166  -5526.34082   0.000000  100.000000      100.000000
2   -5426.340820    -5526.34082  14484.307861 -5426.340820   99.954590  -5526.34082   0.000000  100.000000        0.000000
3   -5227.295654    -5326.34082  14484.307861 -5227.295654  299.045166  -5326.34082   0.000000   99.045166       99.045166
4   -5026.295654    -5272.17041  14484.307861 -5026.295654  300.045166  -5272.17041   0.045166  245.829590      200.000000
5   -5026.295654    -5129.46582  14484.307861 -5026.295654    1.500000  -5129.46582   0.045166  103.125000      100.000000
6   -5026.295654    -5029.46582  14484.307861 -5026.295654    2.500000  -5029.46582   0.045166    3.125000        0.000000
7   -5025.920654    -5026.34082  14581.182861 -5025.920654    3.500000  -5026.34082   0.045166    0.375000       -2.750000
8   -5021.795654    -5023.21582  14678.057861 -5021.795654    4.500000  -5023.21582   0.045166    1.375000       -1.750000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:15:48]  --------------------------------------------------------------------------------
[08/23 17:15:48]  Iteration: 111 (41 solution, 69 counterexamples)
[08/23 17:15:55]  Generator returned sat in 6.120486 secs.
[08/23 17:15:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:15:56]  Improved gap from 3.125 to 14.0625
[08/23 17:15:56]  Improved number of small numbers from 46 to 72 out of a max of 100
[08/23 17:15:56]  Verifer returned sat in 1.375038 secs.
[08/23 17:15:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5843.517334   -5843.562744  14382.128682 -5843.517334    0.090576 -5843.562744    0.00000    0.045410      -99.954529
1   -5643.562988   -5743.562805  14382.128682 -5643.562988  199.999756 -5743.562805    0.00000   99.999817       -0.000183
2   -5343.517395   -5643.562744  14382.128682 -5343.517395  400.045410 -5643.562744    0.04541  299.999939      200.000000
3   -5243.562744   -5444.494873  14382.128682 -5243.562744  399.954590 -5444.494873    0.04541  200.886719      199.954651
4   -5243.472168   -5345.051270  14382.128682 -5243.472168  200.977295 -5345.051270    0.04541  101.533691      100.045227
5   -5243.472168   -5343.562744  14382.128682 -5243.472168  101.488647 -5343.562744    0.04541  100.045166        0.045227
6   -5243.472168   -5243.562805  14468.066182 -5243.472168   51.744324 -5243.562805    0.04541    0.045227      -14.017273
7   -5216.645233   -5229.500305  14554.003662 -5216.645233   26.872162 -5229.500305    0.04541   12.809662       -1.252858
8   -5215.018814   -5215.437744  14554.003662 -5215.018814   14.436081 -5215.437744    0.04541    0.373520      -99.626439
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:15:57]  --------------------------------------------------------------------------------
[08/23 17:15:57]  Iteration: 112 (41 solution, 70 counterexamples)
[08/23 17:16:14]  Generator returned sat in 16.320779 secs.
[08/23 17:16:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:14]  Improved gap from 0.0 to 0
[08/23 17:16:14]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/23 17:16:14]  Verifer returned sat in 0.385491 secs.
[08/23 17:16:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5843.517334   -5843.562744  14382.128662 -5843.517334    0.090576 -5843.562744   0.000000    0.045410      -99.954590
1   -5643.562988   -5743.562744  14382.128662 -5643.562988  199.999756 -5743.562744   0.000000   99.999756       -0.000244
2   -5343.585449   -5643.562744  14382.128662 -5343.585449  399.977295 -5643.562744   0.000000  299.977295      199.977295
3   -5243.540039   -5443.562744  14382.128662 -5243.540039  400.022705 -5443.562744   0.022705  200.000000      200.000000
4   -5243.540039   -5343.562988  14382.128662 -5243.540039    0.500000 -5343.562988   0.022705  100.000244      100.000000
5   -5243.540039   -5243.585693  14382.128662 -5243.540039    0.500000 -5243.585693   0.022705    0.022949        0.000000
6   -5243.062988   -5243.108398  14481.651367 -5243.062988    0.500000 -5243.108398   0.022705    0.022705       -0.000244
7   -5242.585693   -5242.630859  14581.174316 -5242.585693    0.500000 -5242.630859   0.022705    0.022461        0.000000
8   -5242.108154   -5242.608154  14581.174316 -5242.108154    0.500000 -5242.608154   0.022705    0.477295      -99.522461
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:16:15]  --------------------------------------------------------------------------------
[08/23 17:16:15]  Iteration: 113 (41 solution, 71 counterexamples)
[08/23 17:16:17]  Generator returned sat in 1.356633 secs.
[08/23 17:16:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:18]  Verifer returned unsat in 0.424109 secs.
[08/23 17:16:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:18]  --------------------------------------------------------------------------------
[08/23 17:16:18]  Iteration: 114 (42 solution, 71 counterexamples)
[08/23 17:16:21]  Generator returned sat in 2.122761 secs.
[08/23 17:16:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:22]  Improved gap from 0.0452880859375 to 4.6875
[08/23 17:16:22]  Improved number of small numbers from 37 to 51 out of a max of 100
[08/23 17:16:22]  Verifer returned sat in 1.532401 secs.
[08/23 17:16:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5540.998291   -5608.738286  14793.329102 -5540.998291    0.090576 -5608.738286   0.000000   67.739995       67.739826
1   -5540.998291   -5545.685635  14825.589119 -5540.998291   67.739990 -5545.685635   0.000000    4.687344       -0.000156
2   -5536.310635   -5540.998135  14920.901619 -5536.310635    9.375000 -5540.998135   0.000000    4.687500        0.000000
3   -5536.310635   -5536.310635  15016.214111 -5536.310635    0.022644 -5536.310635   0.000000    0.000000       -4.687508
4   -5499.562844   -5499.585488  15079.488770 -5499.562844   36.747791 -5499.585488   0.000000    0.022644       -4.665059
5   -5420.913728   -5493.076560  15079.489014 -5420.913728   78.671761 -5493.076560   0.000000   72.162833      -26.015698
6   -5350.608132   -5355.295632  15135.199116 -5350.608132  142.468428 -5355.295632   0.000000    4.687500        0.000000
7   -5050.585488   -5350.607910  15135.199116 -5050.585488  304.710144 -5350.607910   0.022644  299.999778      200.000000
8   -5050.585488   -5250.607910  15135.199116 -5050.585488    0.500000 -5250.607910   0.022644  199.999778      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:16:23]  --------------------------------------------------------------------------------
[08/23 17:16:23]  Iteration: 115 (42 solution, 72 counterexamples)
[08/23 17:16:25]  Generator returned sat in 1.668070 secs.
[08/23 17:16:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:27]  Verifer returned unsat in 1.217427 secs.
[08/23 17:16:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:27]  --------------------------------------------------------------------------------
[08/23 17:16:27]  Iteration: 116 (43 solution, 72 counterexamples)
[08/23 17:16:31]  Generator returned sat in 2.919119 secs.
[08/23 17:16:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:31]  Improved gap from 0.0452880859375 to 12.5
[08/23 17:16:32]  Improved number of small numbers from 30 to 100 out of a max of 100
[08/23 17:16:32]  Verifer returned sat in 0.850751 secs.
[08/23 17:16:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6914.028564   -6914.073486  15488.028809 -6914.028564    0.090332 -6914.073486   0.000000    0.044922        0.022461
1   -6914.028564   -6914.051025  15488.029053 -6914.028564    0.022705 -6914.051025   0.000000    0.022461      -99.977295
2   -6514.028564   -6814.051270  15488.029053 -6514.028564  400.022461 -6814.051270   0.022705  300.000000      200.000000
3   -6445.028564   -6630.028564  15488.029053 -6445.028564  369.000000 -6630.028564   0.022705  184.977295      169.000000
4   -6445.005859   -6514.051270  15488.029053 -6445.005859  185.000000 -6514.051270   0.022705   69.022705       69.022705
5   -6421.028564   -6468.028564  15495.029053 -6421.028564   93.000000 -6468.028564   0.022705   46.977295        0.000000
6   -6421.005859   -6421.051270  15582.529053 -6421.005859   47.000000 -6421.051270   0.022705    0.022705      -12.477295
7   -6397.028564   -6397.073730  15658.551514 -6397.028564   24.000000 -6397.073730   0.022705    0.022461      -12.477539
8   -6384.551025   -6384.573730  15658.551514 -6384.551025   12.500000 -6384.573730   0.022705    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:16:32]  --------------------------------------------------------------------------------
[08/23 17:16:32]  Iteration: 117 (43 solution, 73 counterexamples)
[08/23 17:16:35]  Generator returned sat in 1.907922 secs.
[08/23 17:16:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:16:35]  Improved gap from 0.01 to 0
[08/23 17:16:35]  Improved number of small numbers from 83 to 100 out of a max of 100
[08/23 17:16:35]  Verifer returned sat in 0.391390 secs.
[08/23 17:16:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6821.573730   -6821.619141  15395.573975 -6821.573730    0.090332 -6821.619141        0.0    0.045410        0.022705
1   -6821.573730   -6821.596436  15395.573975 -6821.573730    0.022461 -6821.596436        0.0    0.022705      -99.977295
2   -6621.596436   -6621.596436  15395.573975 -6621.596436  200.000000 -6621.596436        0.0    0.000000        0.000000
3   -6321.596680   -6621.596436  15395.573975 -6321.596680  299.999756 -6621.596436        0.0  299.999756      199.999756
4   -6321.596680   -6421.596680  15395.573975 -6321.596680    0.500000 -6421.596680        0.0  100.000000       99.999756
5   -6321.596680   -6322.073975  15395.574219 -6321.596680    0.500000 -6322.073975        0.0    0.477295        0.000000
6   -6321.573975   -6321.596680  15495.551514 -6321.573975    0.500000 -6321.596680        0.0    0.022705        0.000000
7   -6321.096680   -6321.573730  15595.073975 -6321.096680    0.500000 -6321.573730        0.0    0.477051       -0.000244
8   -6321.073730   -6321.096436  15595.074219 -6321.073730    0.500000 -6321.096436        0.0    0.022705      -99.977051
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:16:36]  --------------------------------------------------------------------------------
[08/23 17:16:36]  Iteration: 118 (43 solution, 74 counterexamples)
[08/23 17:16:49]  Generator returned sat in 12.144327 secs.
[08/23 17:16:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:16:50]  Improved gap from 0.0 to 0
[08/23 17:16:50]  Improved number of small numbers from 55 to 81 out of a max of 100
[08/23 17:16:50]  Verifer returned sat in 1.217136 secs.
[08/23 17:16:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6494.098877   -6694.099121  15268.076416 -6494.098877    0.090088 -6694.099121        0.0  200.000244      200.000000
1   -6494.098877   -6694.098877  15268.076416 -6494.098877    0.002686 -6694.098877        0.0  200.000000      100.000000
2   -6394.099121   -6494.098877  15268.076416 -6394.099121  299.999756 -6494.098877        0.0   99.999756       99.999756
3   -6394.099121   -6394.101569  15268.076416 -6394.099121    0.705926 -6394.101569        0.0    0.002447       -0.000244
4   -6393.542680   -6393.545180  15367.520020 -6393.542680    0.558889 -6393.545180        0.0    0.002500       -0.000199
5   -6393.206846   -6393.219238  15467.184385 -6393.206846    0.338333 -6393.219238        0.0    0.012392        0.000000
6   -6393.206846   -6393.206846  15567.184326 -6393.206846    0.010000 -6393.206846        0.0    0.000000       -0.000059
7   -6393.196846   -6393.199346  15667.174316 -6393.196846    0.010000 -6393.199346        0.0    0.002500       -0.000069
8   -6393.189346   -6393.196777  15667.174316 -6393.189346    0.010000 -6393.196777        0.0    0.007431      -99.992569
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:16:51]  --------------------------------------------------------------------------------
[08/23 17:16:51]  Iteration: 119 (43 solution, 75 counterexamples)
[08/23 17:16:54]  Generator returned sat in 2.525633 secs.
[08/23 17:16:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:16:55]  Improved gap from 0.0 to 4.6875
[08/23 17:16:56]  Improved number of small numbers from 40 to 54 out of a max of 100
[08/23 17:16:56]  Verifer returned sat in 1.616646 secs.
[08/23 17:16:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5896.987793   -5969.127976  14543.105469 -5896.987793    0.090088 -5969.127976   0.000000   72.140183       72.140137
1   -5896.987793   -5910.827134  14570.965332 -5896.987793    0.022705 -5910.827134   0.000000   13.839341        0.000000
2   -5892.300278   -5896.987778  14666.277817 -5892.300278   18.526855 -5896.987778   0.000000    4.687500        0.000000
3   -5892.300278   -5892.300278  14761.590088 -5892.300278    0.022522 -5892.300278   0.000000    0.000000       -4.687729
4   -5854.352646   -5859.040146  14828.330186 -5854.352646   37.947632 -5859.040146   0.000000    4.687500        0.000000
5   -5776.725205   -5854.352646  14828.330322 -5776.725205   82.314941 -5854.352646   0.000000   77.627441      -22.372422
6   -5710.062668   -5714.750168  14884.040207 -5710.062668  144.289978 -5714.750168   0.000000    4.687500        0.000000
7   -5410.040146   -5710.062500  14884.040207 -5410.040146  304.710022 -5710.062500   0.022522  299.999832      200.000000
8   -5410.040146   -5610.062500  14884.040207 -5410.040146    1.000000 -5610.062500   0.022522  199.999832      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:16:56]  --------------------------------------------------------------------------------
[08/23 17:16:56]  Iteration: 120 (43 solution, 76 counterexamples)
[08/23 17:17:05]  Generator returned sat in 7.959211 secs.
[08/23 17:17:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:17:06]  Improved gap from 2.0208333333333335 to 4.6875
[08/23 17:17:07]  Improved number of small numbers from 38 to 51 out of a max of 100
[08/23 17:17:07]  Verifer returned sat in 2.018668 secs.
[08/23 17:17:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6111.356445   -6165.550702  14739.528076 -6111.356445    0.090088 -6165.550702   0.000000   54.194256       54.194092
1   -6111.356445   -6116.043914  14785.333953 -6111.356445    0.045166 -6116.043914   0.000000    4.687469       -0.000031
2   -6106.668914   -6111.356414  14880.646453 -6106.668914    9.375000 -6111.356414   0.000000    4.687500        0.000000
3   -6106.623870   -6106.668914  14946.079102 -6106.623870    4.732544 -6106.668914   0.000000    0.045044      -34.522308
4   -6068.629205   -6072.101427  15041.391466 -6068.629205   38.039710 -6072.101427   0.000000    3.472222       -1.215278
5   -5991.570619   -6067.413927  15041.391602 -5991.570619   80.530808 -6067.413927   0.000000   75.843308      -24.156556
6   -5923.146471   -5927.833971  15097.124010 -5923.146471  144.267456 -5927.833971   0.000000    4.687500        0.000000
7   -5620.515315   -5823.146484  15097.124010 -5620.515315  307.318656 -5823.146484   2.631156  200.000014      200.000000
8   -5620.515315   -5823.146240  15097.124010 -5620.515315    1.500000 -5823.146240   2.631156  199.999769      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:17:08]  --------------------------------------------------------------------------------
[08/23 17:17:08]  Iteration: 121 (43 solution, 77 counterexamples)
[08/23 17:17:38]  Generator returned sat in 29.630301 secs.
[08/23 17:17:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:17:39]  Improved gap from 0.00125 to 48.4375
[08/23 17:17:40]  Improved number of small numbers from 55 to 64 out of a max of 100
[08/23 17:17:40]  Verifer returned sat in 1.627945 secs.
[08/23 17:17:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6222.444336   -6276.010455  14796.423096 -6222.444336    0.090088 -6276.010455    0.00000   53.566119        0.001221
1   -6222.444336   -6222.445455  14847.985494 -6222.444336    0.001465 -6222.445455    0.00000    0.001119      -48.436381
2   -5874.006705   -6074.007955  14847.985494 -5874.006705  348.438750 -6074.007955    0.00125  200.000000      200.000000
3   -5774.006705   -5974.007955  14847.985494 -5774.006705  300.000000 -5974.007955    0.00125  200.000000      200.000000
4   -5674.005455   -5874.007955  14847.985494 -5674.005455  300.001250 -5874.007955    0.00250  200.000000      200.000000
5   -5674.005455   -5874.007955  14847.985494 -5674.005455    0.010000 -5874.007955    0.00250  200.000000      100.000000
6   -5674.005455   -5774.007955  14847.985494 -5674.005455   99.005000 -5774.007955    0.00250  100.000000        0.000000
7   -5625.502955   -5673.446705  14898.986572 -5625.502955  148.502500 -5673.446705    0.00250   47.941250       -0.496421
8   -5499.912330   -5625.009033  14898.986572 -5499.912330  173.531875 -5625.009033    0.00250  125.094204       25.094204
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:17:41]  --------------------------------------------------------------------------------
[08/23 17:17:41]  Iteration: 122 (43 solution, 78 counterexamples)
[08/23 17:17:53]  Generator returned sat in 10.851833 secs.
[08/23 17:17:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:17:53]  Verifer returned unsat in 0.162100 secs.
[08/23 17:17:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:17:53]  --------------------------------------------------------------------------------
[08/23 17:17:53]  Iteration: 123 (44 solution, 78 counterexamples)
[08/23 17:18:06]  Generator returned sat in 12.448635 secs.
[08/23 17:18:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:18:07]  Improved gap from 0.0450439453125 to 82.8125
[08/23 17:18:07]  Improved number of small numbers from 24 to 100 out of a max of 100
[08/23 17:18:07]  Verifer returned sat in 0.534676 secs.
[08/23 17:18:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6385.084229   -6585.084473  14796.423096 -6385.084229    0.090088 -6585.084473   0.000000  200.000244      200.000000
1   -6285.039307   -6585.084229  14796.423096 -6285.039307  300.045166 -6585.084229   0.044922  300.000000      200.000000
2   -6185.084473   -6385.084229  14796.423096 -6185.084473  399.954834 -6385.084229   0.044922  199.954834      199.954834
3   -6185.084473   -6285.084229  14796.423096 -6185.084473   83.330078 -6285.084229   0.044922   99.954834       99.954834
4   -6185.084473   -6185.602051  14796.423096 -6185.084473   83.330078 -6185.602051   0.044922    0.472656       -0.045166
5   -6102.227051   -6185.084229  14813.610596 -6102.227051   83.330078 -6185.084229   0.044922   82.812256       -0.000244
6   -6101.709229   -6102.271729  14830.798096 -6101.709229   83.330078 -6102.271729   0.044922    0.517578      -82.294922
7   -6018.896729   -6019.459229  14847.985596 -6018.896729   83.330078 -6019.459229   0.044922    0.517578      -82.294922
8   -5936.084229   -5936.646729  14847.985596 -5936.084229   83.330078 -5936.646729   0.044922    0.517578      -99.482422
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:18:07]  --------------------------------------------------------------------------------
[08/23 17:18:07]  Iteration: 124 (44 solution, 79 counterexamples)
[08/23 17:18:23]  Generator returned sat in 14.270422 secs.
[08/23 17:18:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:18:23]  Improved gap from 0.0 to 0
[08/23 17:18:24]  Improved number of small numbers from 62 to 78 out of a max of 100
[08/23 17:18:24]  Verifer returned sat in 0.880979 secs.
[08/23 17:18:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -6020.471924   -6020.473395  14231.811523 -6020.471924  0.090088 -6020.473395        0.0  0.001471        0.000732
1   -6020.471924   -6020.472562  14331.810791 -6020.471924  0.000732 -6020.472562        0.0  0.000638        0.000000
2   -6019.485895   -6020.471729  14430.824762 -6019.485895  0.986667 -6020.471729        0.0  0.985833        0.000000
3   -6019.485895   -6019.485895  14530.824707 -6019.485895  0.022083 -6019.485895        0.0  0.000000       -0.000055
4   -6019.470062   -6019.485840  14630.808929 -6019.470062  0.015833 -6019.485840        0.0  0.015778        0.000000
5   -6019.470062   -6019.470062  14730.808838 -6019.470062  0.010000 -6019.470062        0.0  0.000000       -0.000091
6   -6019.459229   -6019.469971  14830.798096 -6019.459229  0.010833 -6019.469971        0.0  0.010742        0.000000
7   -6019.459229   -6019.459229  14930.788330 -6019.459229  0.010000 -6019.459229        0.0  0.000000       -0.009766
8   -6019.449229   -6019.449463  14930.788330 -6019.449229  0.010000 -6019.449463        0.0  0.000234      -99.999766
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:18:24]  --------------------------------------------------------------------------------
[08/23 17:18:24]  Iteration: 125 (44 solution, 80 counterexamples)
[08/23 17:18:33]  Generator returned sat in 8.209339 secs.
[08/23 17:18:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:18:34]  Improved gap from 0.0 to 100
[08/23 17:18:34]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/23 17:18:34]  Verifer returned sat in 0.241724 secs.
[08/23 17:18:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6019.486084   -6319.486084  14430.824951 -6019.486084    0.089844 -6319.486084   0.000000  300.000000      200.000000
1   -6019.486084   -6219.485840  14430.824951 -6019.486084    0.001250 -6219.485840   0.000000  199.999756      100.000000
2   -5968.484131   -6119.486084  14430.824951 -5968.484131  251.001709 -6119.486084   0.000000  151.001953       51.001953
3   -5968.484131   -5968.485352  14430.824951 -5968.484131    0.001465 -5968.485352   0.000000    0.001221      -48.998047
4   -5619.484619   -5821.487305  14430.824951 -5619.484619  349.000732 -5821.487305   0.001465  202.001221      200.000000
5   -5619.484619   -5719.486084  14430.824951 -5619.484619    0.010000 -5719.486084   0.001465  100.000000      100.000000
6   -5321.484619   -5619.486084  14430.824951 -5321.484619  398.000000 -5619.486084  98.001465  200.000000      200.000000
7   -5321.484619   -5519.486084  14430.824951 -5321.484619    0.010000 -5519.486084  98.001465  100.000000      100.000000
8   -5121.483398   -5519.485840  14430.824951 -5121.483398  300.001221 -5519.485840  98.002686  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:18:34]  --------------------------------------------------------------------------------
[08/23 17:18:34]  Iteration: 126 (44 solution, 81 counterexamples)
[08/23 17:18:49]  Generator returned sat in 14.107047 secs.
[08/23 17:18:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:18:54]  Improved gap from 0.0 to 1.5625
[08/23 17:18:55]  Improved number of small numbers from 55 to 66 out of a max of 100
[08/23 17:18:55]  Verifer returned sat in 5.836597 secs.
[08/23 17:18:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -5486.034424   -5492.463085  13703.801758 -5486.034424  0.089844 -5492.463085        0.0  6.428661        6.428467
1   -5486.034424   -5487.596734  13797.373047 -5486.034424  0.044922 -5487.596734        0.0  1.562310       -0.000244
2   -5483.730663   -5485.293163  13895.069530 -5483.730663  3.866071 -5485.293163        0.0  1.562500        0.000000
3   -5483.730663   -5483.730663  13993.506836 -5483.730663  1.517578 -5483.730663        0.0  0.000000       -1.562694
4   -5479.605663   -5481.168163  14090.944530 -5479.605663  4.125000 -5481.168163        0.0  1.562500        0.000000
5   -5476.891377   -5479.605663  14188.230244 -5476.891377  4.276786 -5479.605663        0.0  2.714286        0.000000
6   -5475.623520   -5476.891377  14286.667744 -5475.623520  3.982143 -5476.891377        0.0  1.267857       -0.294643
7   -5472.480663   -5475.328877  14383.819336 -5472.480663  4.410714 -5475.328877        0.0  2.848214       -0.000194
8   -5471.203877   -5472.480469  14383.819336 -5471.203877  4.125000 -5472.480469        0.0  1.276592      -98.723408
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:18:56]  --------------------------------------------------------------------------------
[08/23 17:18:56]  Iteration: 127 (44 solution, 82 counterexamples)
[08/23 17:19:10]  Generator returned sat in 13.158804 secs.
[08/23 17:19:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:10]  Improved gap from 0.0 to 3.125
[08/23 17:19:10]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:19:10]  Verifer returned sat in 0.228437 secs.
[08/23 17:19:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5589.159180   -5589.159180  13700.498047 -5589.159180    0.089844 -5589.159180   0.000000    0.000000       -0.044922
1   -5589.114258   -5589.114258  13797.373047 -5589.114258    0.044922 -5589.114258   0.000000    0.000000       -3.125000
2   -5286.034180   -5585.989258  13797.373047 -5286.034180  303.080078 -5585.989258   0.000000  299.955078      199.955078
3   -5286.034180   -5385.989258  13797.373047 -5286.034180  299.544922 -5385.989258   0.000000   99.955078       99.955078
4   -5085.944336   -5285.989258  13797.373047 -5085.944336  300.044922 -5285.989258   0.044922  200.000000      200.000000
5   -5085.944336   -5185.989258  13797.373047 -5085.944336    2.000000 -5185.989258   0.044922  100.000000      100.000000
6   -5085.944336   -5088.944336  13797.373047 -5085.944336    2.500000 -5088.944336   0.044922    2.955078        0.000000
7   -5085.899414   -5085.989258  13894.248047 -5085.899414    3.000000 -5085.989258   0.044922    0.044922       -3.080078
8   -5082.444336   -5082.864258  13991.123047 -5082.444336    3.500000 -5082.864258   0.044922    0.375000       -2.750000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:19:11]  --------------------------------------------------------------------------------
[08/23 17:19:11]  Iteration: 128 (44 solution, 83 counterexamples)
[08/23 17:19:18]  Generator returned sat in 6.568729 secs.
[08/23 17:19:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:19]  Verifer returned unsat in 0.132504 secs.
[08/23 17:19:19]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:19]  --------------------------------------------------------------------------------
[08/23 17:19:19]  Iteration: 129 (45 solution, 83 counterexamples)
[08/23 17:19:21]  Generator returned sat in 1.449621 secs.
[08/23 17:19:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:22]  Verifer returned unsat in 0.105767 secs.
[08/23 17:19:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:22]  --------------------------------------------------------------------------------
[08/23 17:19:22]  Iteration: 130 (46 solution, 83 counterexamples)
[08/23 17:19:24]  Generator returned sat in 1.398185 secs.
[08/23 17:19:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:24]  Verifer returned unsat in 0.113433 secs.
[08/23 17:19:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:24]  --------------------------------------------------------------------------------
[08/23 17:19:24]  Iteration: 131 (47 solution, 83 counterexamples)
[08/23 17:19:27]  Generator returned sat in 1.330031 secs.
[08/23 17:19:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:27]  Verifer returned unsat in 0.154988 secs.
[08/23 17:19:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:27]  --------------------------------------------------------------------------------
[08/23 17:19:27]  Iteration: 132 (48 solution, 83 counterexamples)
[08/23 17:19:31]  Generator returned sat in 2.125939 secs.
[08/23 17:19:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:32]  Verifer returned unsat in 0.877010 secs.
[08/23 17:19:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:32]  --------------------------------------------------------------------------------
[08/23 17:19:32]  Iteration: 133 (49 solution, 83 counterexamples)
[08/23 17:19:34]  Generator returned sat in 1.352533 secs.
[08/23 17:19:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:35]  Verifer returned unsat in 1.154221 secs.
[08/23 17:19:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:35]  --------------------------------------------------------------------------------
[08/23 17:19:35]  Iteration: 134 (50 solution, 83 counterexamples)
[08/23 17:19:38]  Generator returned sat in 1.323028 secs.
[08/23 17:19:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:39]  Verifer returned unsat in 1.239864 secs.
[08/23 17:19:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:39]  --------------------------------------------------------------------------------
[08/23 17:19:39]  Iteration: 135 (51 solution, 83 counterexamples)
[08/23 17:19:42]  Generator returned sat in 1.267656 secs.
[08/23 17:19:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:43]  Verifer returned unsat in 1.318372 secs.
[08/23 17:19:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:19:43]  --------------------------------------------------------------------------------
[08/23 17:19:43]  Iteration: 136 (52 solution, 83 counterexamples)
[08/23 17:19:55]  Generator returned sat in 10.212025 secs.
[08/23 17:19:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:19:56]  Improved gap from 0.000625 to 15.625
[08/23 17:19:56]  Improved number of small numbers from 41 to 53 out of a max of 100
[08/23 17:19:56]  Verifer returned sat in 1.653511 secs.
[08/23 17:19:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -4679.941406   -4695.566223  13841.177847 -4679.941406    0.089355 -4695.566223   0.000000   15.624817       15.624817
1   -4679.941406   -4695.566223  13925.552847 -4679.941406    0.044678 -4695.566223   0.000000   15.624817       -0.000183
2   -4664.316223   -4679.941223  14009.927847 -4664.316223   31.250000 -4679.941223   0.000000   15.625000        0.000000
3   -4664.316223   -4664.316223  14094.302847 -4664.316223    1.022400 -4664.316223   0.000000    0.000000      -15.625000
4   -4648.646423   -4648.691223  14178.677734 -4648.646423   15.669800 -4648.691223   0.000000    0.044800      -15.580312
5   -4595.914124   -4630.066223  14178.677734 -4595.914124   52.777100 -4630.066223   0.000000   34.152100      -62.848013
6   -4501.574524   -4515.361023  14245.347646 -4501.574524  128.491699 -4515.361023   0.000000   13.786499       -1.838501
7   -4185.900024   -4399.736084  14245.347646 -4185.900024  329.460999 -4399.736084  13.835999  200.000061      200.000000
8   -4185.900024   -4399.735840  14245.347646 -4185.900024    2.000000 -4399.735840  13.835999  199.999817      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:19:57]  --------------------------------------------------------------------------------
[08/23 17:19:57]  Iteration: 137 (52 solution, 84 counterexamples)
[08/23 17:20:08]  Generator returned sat in 9.977740 secs.
[08/23 17:20:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:20:09]  Improved gap from 48.9776611328125 to 48.4375
[08/23 17:20:09]  Improved number of small numbers from 48 to 100 out of a max of 100
[08/23 17:20:09]  Verifer returned sat in 1.131783 secs.
[08/23 17:20:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5523.824951   -5823.824951  14192.235840 -5523.824951    0.089355 -5823.824951   0.000000  300.000000      200.000000
1   -5523.824951   -5623.824951  14192.235840 -5523.824951    0.044678 -5623.824951   0.000000  100.000000      100.000000
2   -5323.869629   -5527.958984  14192.235840 -5323.869629  299.955322 -5527.958984   0.000000  204.089355      199.955322
3   -5323.869629   -5423.824951  14192.235840 -5323.869629  204.089355 -5423.824951   0.000000   99.955322       99.955322
4   -5123.780273   -5323.824951  14192.235840 -5123.780273  300.044678 -5323.824951   0.044678  200.000000      200.000000
5   -5123.780273   -5323.824707  14192.235840 -5123.780273    1.500000 -5323.824707   0.044678  199.999756      100.000000
6   -5123.780273   -5223.460449  14192.235840 -5123.780273  100.817139 -5223.460449   0.044678   99.635498        0.000000
7   -5074.824951   -5123.824951  14243.280273 -5074.824951  148.590820 -5123.824951   0.044678   48.955322       -0.000244
8   -4951.484863   -5074.869385  14243.280273 -4951.484863  172.295410 -5074.869385   0.044678  123.339844       23.339844
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:20:10]  --------------------------------------------------------------------------------
[08/23 17:20:10]  Iteration: 138 (52 solution, 85 counterexamples)
[08/23 17:20:14]  Generator returned sat in 3.218759 secs.
[08/23 17:20:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:20:15]  Improved gap from 0.0 to 4.6875
[08/23 17:20:15]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/23 17:20:15]  Verifer returned sat in 0.958131 secs.
[08/23 17:20:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5628.021729   -5672.582764  14140.993652 -5628.021729    0.089355 -5672.582764   0.000000   44.561035       44.561035
1   -5628.021729   -5632.709473  14196.432617 -5628.021729    0.044678 -5632.709473   0.000000    4.687744        0.000000
2   -5609.904053   -5614.591553  14278.314941 -5609.904053   22.805420 -5614.591553   0.000000    4.687500        0.000000
3   -5609.859375   -5609.903809  14373.627197 -5609.859375    4.732178 -5609.903809   0.000000    0.044434       -4.643066
4   -5573.466064   -5573.510986  14437.234375 -5573.466064   36.437744 -5573.510986   0.000000    0.044922       -4.642578
5   -5491.255127   -5568.823486  14437.234375 -5491.255127   82.255859 -5568.823486   0.000000   77.568359      -22.431641
6   -5424.555664   -5429.242920  14492.966309 -5424.555664  144.267822 -5429.242920   0.000000    4.687256       -0.000244
7   -5124.510742   -5424.555420  14492.966309 -5124.510742  304.732178 -5424.555420   0.044678  300.000000      200.000000
8   -5124.510742   -5324.555420  14492.966309 -5124.510742    1.500000 -5324.555420   0.044678  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:20:15]  --------------------------------------------------------------------------------
[08/23 17:20:15]  Iteration: 139 (52 solution, 86 counterexamples)
[08/23 17:20:31]  Generator returned sat in 14.051147 secs.
[08/23 17:20:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:32]  Verifer returned unsat in 1.061994 secs.
[08/23 17:20:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:32]  --------------------------------------------------------------------------------
[08/23 17:20:32]  Iteration: 140 (53 solution, 86 counterexamples)
[08/23 17:20:35]  Generator returned sat in 1.536184 secs.
[08/23 17:20:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:38]  Verifer returned unsat in 2.722992 secs.
[08/23 17:20:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:38]  --------------------------------------------------------------------------------
[08/23 17:20:38]  Iteration: 141 (54 solution, 86 counterexamples)
[08/23 17:20:40]  Generator returned sat in 1.552551 secs.
[08/23 17:20:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:42]  Verifer returned unsat in 1.338708 secs.
[08/23 17:20:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:42]  --------------------------------------------------------------------------------
[08/23 17:20:42]  Iteration: 142 (55 solution, 86 counterexamples)
[08/23 17:20:45]  Generator returned sat in 1.485115 secs.
[08/23 17:20:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:46]  Verifer returned unsat in 1.440888 secs.
[08/23 17:20:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:46]  --------------------------------------------------------------------------------
[08/23 17:20:46]  Iteration: 143 (56 solution, 86 counterexamples)
[08/23 17:20:49]  Generator returned sat in 1.998807 secs.
[08/23 17:20:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:51]  Verifer returned unsat in 1.452971 secs.
[08/23 17:20:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:51]  --------------------------------------------------------------------------------
[08/23 17:20:51]  Iteration: 144 (57 solution, 86 counterexamples)
[08/23 17:20:54]  Generator returned sat in 1.434662 secs.
[08/23 17:20:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:55]  Verifer returned unsat in 1.556196 secs.
[08/23 17:20:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:55]  --------------------------------------------------------------------------------
[08/23 17:20:55]  Iteration: 145 (58 solution, 86 counterexamples)
[08/23 17:20:58]  Generator returned sat in 1.376982 secs.
[08/23 17:20:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:59]  Verifer returned unsat in 0.696500 secs.
[08/23 17:20:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:20:59]  --------------------------------------------------------------------------------
[08/23 17:20:59]  Iteration: 146 (59 solution, 86 counterexamples)
[08/23 17:21:02]  Generator returned sat in 2.199310 secs.
[08/23 17:21:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:03]  Improved gap from 0.011138916015625 to 4.6875
[08/23 17:21:03]  Improved number of small numbers from 46 to 100 out of a max of 100
[08/23 17:21:03]  Verifer returned sat in 0.854784 secs.
[08/23 17:21:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5437.126709   -5479.022461  14131.582520 -5437.126709    0.089355 -5479.022461   0.000000   41.895752       41.895752
1   -5437.126709   -5437.129639  14184.002441 -5437.126709    0.003174 -5437.129639   0.000000    0.002930       -5.684326
2   -5425.754883   -5431.442383  14278.314697 -5425.754883   11.374756 -5431.442383   0.000000    5.687500       -0.000244
3   -5425.751709   -5425.754639  14372.627197 -5425.751709    5.690674 -5425.754639   0.000000    0.002930       -5.684570
4   -5389.584717   -5389.588135  14436.460938 -5389.584717   36.169922 -5389.588135   0.000000    0.003418       -5.683838
5   -5310.562500   -5383.900635  14436.460938 -5310.562500   79.025635 -5383.900635   0.000000   73.338135      -26.661621
6   -5240.591309   -5246.278809  14493.151367 -5240.591309  143.309326 -5246.278809   0.000000    5.687500        0.000000
7   -4940.576904   -5140.591553  14493.151367 -4940.576904  305.701904 -5140.591553   0.014404  200.000244      200.000000
8   -4940.576904   -5140.591309  14493.151367 -4940.576904    2.000000 -5140.591309   0.014404  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:21:04]  --------------------------------------------------------------------------------
[08/23 17:21:04]  Iteration: 147 (59 solution, 87 counterexamples)
[08/23 17:21:07]  Generator returned sat in 2.509612 secs.
[08/23 17:21:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:08]  Verifer returned unsat in 0.355686 secs.
[08/23 17:21:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:08]  --------------------------------------------------------------------------------
[08/23 17:21:08]  Iteration: 148 (60 solution, 87 counterexamples)
[08/23 17:21:11]  Generator returned sat in 1.461530 secs.
[08/23 17:21:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:11]  Verifer returned unsat in 0.089589 secs.
[08/23 17:21:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:11]  --------------------------------------------------------------------------------
[08/23 17:21:11]  Iteration: 149 (61 solution, 87 counterexamples)
[08/23 17:21:13]  Generator returned sat in 1.408733 secs.
[08/23 17:21:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:14]  Verifer returned unsat in 0.071187 secs.
[08/23 17:21:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:14]  --------------------------------------------------------------------------------
[08/23 17:21:14]  Iteration: 150 (62 solution, 87 counterexamples)
[08/23 17:21:16]  Generator returned sat in 1.449294 secs.
[08/23 17:21:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:17]  Verifer returned unsat in 0.105066 secs.
[08/23 17:21:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:17]  --------------------------------------------------------------------------------
[08/23 17:21:17]  Iteration: 151 (63 solution, 87 counterexamples)
[08/23 17:21:19]  Generator returned sat in 1.370925 secs.
[08/23 17:21:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:20]  Verifer returned unsat in 0.118340 secs.
[08/23 17:21:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:20]  --------------------------------------------------------------------------------
[08/23 17:21:20]  Iteration: 152 (64 solution, 87 counterexamples)
[08/23 17:21:22]  Generator returned sat in 1.344125 secs.
[08/23 17:21:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:22]  Verifer returned unsat in 0.065117 secs.
[08/23 17:21:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:22]  --------------------------------------------------------------------------------
[08/23 17:21:22]  Iteration: 153 (65 solution, 87 counterexamples)
[08/23 17:21:25]  Generator returned sat in 1.340545 secs.
[08/23 17:21:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:25]  Verifer returned unsat in 0.087740 secs.
[08/23 17:21:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:25]  --------------------------------------------------------------------------------
[08/23 17:21:25]  Iteration: 154 (66 solution, 87 counterexamples)
[08/23 17:21:28]  Generator returned sat in 1.463707 secs.
[08/23 17:21:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:28]  Verifer returned unsat in 0.104463 secs.
[08/23 17:21:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:28]  --------------------------------------------------------------------------------
[08/23 17:21:28]  Iteration: 155 (67 solution, 87 counterexamples)
[08/23 17:21:31]  Generator returned sat in 1.336190 secs.
[08/23 17:21:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:31]  Verifer returned unsat in 0.106026 secs.
[08/23 17:21:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:31]  --------------------------------------------------------------------------------
[08/23 17:21:31]  Iteration: 156 (68 solution, 87 counterexamples)
[08/23 17:21:36]  Generator returned sat in 3.713400 secs.
[08/23 17:21:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:36]  Verifer returned unsat in 0.147738 secs.
[08/23 17:21:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:36]  --------------------------------------------------------------------------------
[08/23 17:21:36]  Iteration: 157 (69 solution, 87 counterexamples)
[08/23 17:21:39]  Generator returned sat in 1.575001 secs.
[08/23 17:21:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:39]  Verifer returned unsat in 0.135437 secs.
[08/23 17:21:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:39]  --------------------------------------------------------------------------------
[08/23 17:21:39]  Iteration: 158 (70 solution, 87 counterexamples)
[08/23 17:21:42]  Generator returned sat in 1.551366 secs.
[08/23 17:21:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:42]  Verifer returned unsat in 0.115097 secs.
[08/23 17:21:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:42]  --------------------------------------------------------------------------------
[08/23 17:21:42]  Iteration: 159 (71 solution, 87 counterexamples)
[08/23 17:21:46]  Generator returned sat in 2.391229 secs.
[08/23 17:21:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:49]  Verifer returned unsat in 2.652925 secs.
[08/23 17:21:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:49]  --------------------------------------------------------------------------------
[08/23 17:21:49]  Iteration: 160 (72 solution, 87 counterexamples)
[08/23 17:21:52]  Generator returned sat in 1.549103 secs.
[08/23 17:21:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:53]  Verifer returned unsat in 1.530604 secs.
[08/23 17:21:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:53]  --------------------------------------------------------------------------------
[08/23 17:21:53]  Iteration: 161 (73 solution, 87 counterexamples)
[08/23 17:21:56]  Generator returned sat in 1.523108 secs.
[08/23 17:21:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:58]  Verifer returned unsat in 1.828130 secs.
[08/23 17:21:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:21:58]  --------------------------------------------------------------------------------
[08/23 17:21:58]  Iteration: 162 (74 solution, 87 counterexamples)
[08/23 17:22:01]  Generator returned sat in 1.507490 secs.
[08/23 17:22:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:02]  Verifer returned unsat in 1.128920 secs.
[08/23 17:22:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:02]  --------------------------------------------------------------------------------
[08/23 17:22:02]  Iteration: 163 (75 solution, 87 counterexamples)
[08/23 17:22:05]  Generator returned sat in 1.412082 secs.
[08/23 17:22:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:07]  Verifer returned unsat in 1.689743 secs.
[08/23 17:22:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:07]  --------------------------------------------------------------------------------
[08/23 17:22:07]  Iteration: 164 (76 solution, 87 counterexamples)
[08/23 17:22:10]  Generator returned sat in 1.534750 secs.
[08/23 17:22:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:11]  Verifer returned unsat in 1.420570 secs.
[08/23 17:22:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:11]  --------------------------------------------------------------------------------
[08/23 17:22:11]  Iteration: 165 (77 solution, 87 counterexamples)
[08/23 17:22:14]  Generator returned sat in 1.513322 secs.
[08/23 17:22:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:16]  Verifer returned unsat in 1.810954 secs.
[08/23 17:22:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:16]  --------------------------------------------------------------------------------
[08/23 17:22:16]  Iteration: 166 (78 solution, 87 counterexamples)
[08/23 17:22:18]  Generator returned sat in 1.426646 secs.
[08/23 17:22:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:20]  Verifer returned unsat in 0.932657 secs.
[08/23 17:22:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:20]  --------------------------------------------------------------------------------
[08/23 17:22:20]  Iteration: 167 (79 solution, 87 counterexamples)
[08/23 17:22:22]  Generator returned sat in 1.414973 secs.
[08/23 17:22:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:23]  Verifer returned unsat in 0.843618 secs.
[08/23 17:22:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:23]  --------------------------------------------------------------------------------
[08/23 17:22:23]  Iteration: 168 (80 solution, 87 counterexamples)
[08/23 17:22:27]  Generator returned sat in 2.424873 secs.
[08/23 17:22:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:27]  Improved gap from 0.0 to 10.9375
[08/23 17:22:27]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:22:27]  Verifer returned sat in 0.348446 secs.
[08/23 17:22:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -6047.776367   -6047.776611  14331.833496 -6047.776367    0.089355 -6047.776611   0.000000    0.000244          0.0000
1   -5747.754395   -5947.776367  14331.833496 -5747.754395  300.022217 -5947.776367   0.021973  200.000000        200.0000
2   -5747.754395   -5947.161377  14331.833496 -5747.754395    0.021973 -5947.161377   0.021973  199.385010        100.0000
3   -5747.754395   -5747.798584  14331.833496 -5747.754395  199.362956 -5747.798584   0.021973    0.022217          0.0000
4   -5447.732178   -5685.816895  14331.833496 -5447.732178  300.044434 -5685.816895   0.044189  238.040527        200.0000
5   -5447.732178   -5558.713867  14331.833496 -5447.732178    2.000000 -5558.713867   0.044189  110.937500        100.0000
6   -5447.732178   -5458.713867  14331.833496 -5447.732178    4.000000 -5458.713867   0.044189   10.937500          0.0000
7   -5447.732178   -5447.776367  14420.895996 -5447.732178    7.000000 -5447.776367   0.044189    0.000000        -10.9375
8   -5436.232178   -5436.838867  14420.895996 -5436.232178   11.500000 -5436.838867   0.044189    0.562500        -99.4375
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:22:28]  --------------------------------------------------------------------------------
[08/23 17:22:28]  Iteration: 169 (80 solution, 88 counterexamples)
[08/23 17:22:32]  Generator returned sat in 3.415182 secs.
[08/23 17:22:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:34]  Verifer returned unsat in 1.495914 secs.
[08/23 17:22:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:34]  --------------------------------------------------------------------------------
[08/23 17:22:34]  Iteration: 170 (81 solution, 88 counterexamples)
[08/23 17:22:37]  Generator returned sat in 1.528574 secs.
[08/23 17:22:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:38]  Verifer returned unsat in 1.303998 secs.
[08/23 17:22:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:22:38]  --------------------------------------------------------------------------------
[08/23 17:22:38]  Iteration: 171 (82 solution, 88 counterexamples)
[08/23 17:22:42]  Generator returned sat in 2.800936 secs.
[08/23 17:22:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:43]  Verifer returned unsat in 0.239792 secs.
[08/23 17:22:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:43]  --------------------------------------------------------------------------------
[08/23 17:22:43]  Iteration: 172 (83 solution, 88 counterexamples)
[08/23 17:22:46]  Generator returned sat in 1.578502 secs.
[08/23 17:22:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:46]  Verifer returned unsat in 0.086514 secs.
[08/23 17:22:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:46]  --------------------------------------------------------------------------------
[08/23 17:22:46]  Iteration: 173 (84 solution, 88 counterexamples)
[08/23 17:22:49]  Generator returned sat in 1.494869 secs.
[08/23 17:22:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:49]  Verifer returned unsat in 0.089525 secs.
[08/23 17:22:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:49]  --------------------------------------------------------------------------------
[08/23 17:22:49]  Iteration: 174 (85 solution, 88 counterexamples)
[08/23 17:22:52]  Generator returned sat in 1.425398 secs.
[08/23 17:22:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:52]  Verifer returned unsat in 0.092730 secs.
[08/23 17:22:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:52]  --------------------------------------------------------------------------------
[08/23 17:22:52]  Iteration: 175 (86 solution, 88 counterexamples)
[08/23 17:22:54]  Generator returned sat in 1.391099 secs.
[08/23 17:22:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:55]  Verifer returned unsat in 0.110284 secs.
[08/23 17:22:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:55]  --------------------------------------------------------------------------------
[08/23 17:22:55]  Iteration: 176 (87 solution, 88 counterexamples)
[08/23 17:22:57]  Generator returned sat in 1.496646 secs.
[08/23 17:22:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:58]  Verifer returned unsat in 0.079002 secs.
[08/23 17:22:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:22:58]  --------------------------------------------------------------------------------
[08/23 17:22:58]  Iteration: 177 (88 solution, 88 counterexamples)
[08/23 17:23:00]  Generator returned sat in 1.407283 secs.
[08/23 17:23:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:01]  Verifer returned unsat in 0.137438 secs.
[08/23 17:23:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:01]  --------------------------------------------------------------------------------
[08/23 17:23:01]  Iteration: 178 (89 solution, 88 counterexamples)
[08/23 17:23:03]  Generator returned sat in 1.368370 secs.
[08/23 17:23:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:04]  Verifer returned unsat in 0.137851 secs.
[08/23 17:23:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:04]  --------------------------------------------------------------------------------
[08/23 17:23:04]  Iteration: 179 (90 solution, 88 counterexamples)
[08/23 17:23:06]  Generator returned sat in 1.382532 secs.
[08/23 17:23:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:07]  Verifer returned unsat in 0.165958 secs.
[08/23 17:23:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:07]  --------------------------------------------------------------------------------
[08/23 17:23:07]  Iteration: 180 (91 solution, 88 counterexamples)
[08/23 17:23:10]  Generator returned sat in 2.045865 secs.
[08/23 17:23:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:10]  Verifer returned unsat in 0.123410 secs.
[08/23 17:23:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:10]  --------------------------------------------------------------------------------
[08/23 17:23:10]  Iteration: 181 (92 solution, 88 counterexamples)
[08/23 17:23:14]  Generator returned sat in 2.294403 secs.
[08/23 17:23:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:15]  Verifer returned unsat in 1.084507 secs.
[08/23 17:23:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:15]  --------------------------------------------------------------------------------
[08/23 17:23:15]  Iteration: 182 (93 solution, 88 counterexamples)
[08/23 17:23:18]  Generator returned sat in 1.541765 secs.
[08/23 17:23:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:20]  Verifer returned unsat in 1.661373 secs.
[08/23 17:23:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:20]  --------------------------------------------------------------------------------
[08/23 17:23:20]  Iteration: 183 (94 solution, 88 counterexamples)
[08/23 17:23:22]  Generator returned sat in 1.465405 secs.
[08/23 17:23:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:24]  Verifer returned unsat in 1.048019 secs.
[08/23 17:23:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:24]  --------------------------------------------------------------------------------
[08/23 17:23:24]  Iteration: 184 (95 solution, 88 counterexamples)
[08/23 17:23:27]  Generator returned sat in 1.790621 secs.
[08/23 17:23:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:28]  Verifer returned unsat in 0.977664 secs.
[08/23 17:23:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:28]  --------------------------------------------------------------------------------
[08/23 17:23:28]  Iteration: 185 (96 solution, 88 counterexamples)
[08/23 17:23:31]  Generator returned sat in 1.573307 secs.
[08/23 17:23:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:33]  Verifer returned unsat in 1.828289 secs.
[08/23 17:23:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:33]  --------------------------------------------------------------------------------
[08/23 17:23:33]  Iteration: 186 (97 solution, 88 counterexamples)
[08/23 17:23:35]  Generator returned sat in 1.570825 secs.
[08/23 17:23:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:38]  Verifer returned unsat in 2.396478 secs.
[08/23 17:23:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:38]  --------------------------------------------------------------------------------
[08/23 17:23:38]  Iteration: 187 (98 solution, 88 counterexamples)
[08/23 17:23:41]  Generator returned sat in 1.498092 secs.
[08/23 17:23:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:42]  Verifer returned unsat in 1.330988 secs.
[08/23 17:23:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:42]  --------------------------------------------------------------------------------
[08/23 17:23:42]  Iteration: 188 (99 solution, 88 counterexamples)
[08/23 17:23:45]  Generator returned sat in 1.496782 secs.
[08/23 17:23:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:46]  Verifer returned unsat in 0.753815 secs.
[08/23 17:23:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:46]  --------------------------------------------------------------------------------
[08/23 17:23:46]  Iteration: 189 (100 solution, 88 counterexamples)
[08/23 17:23:49]  Generator returned sat in 1.453175 secs.
[08/23 17:23:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:50]  Verifer returned unsat in 1.166440 secs.
[08/23 17:23:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:50]  --------------------------------------------------------------------------------
[08/23 17:23:50]  Iteration: 190 (101 solution, 88 counterexamples)
[08/23 17:23:53]  Generator returned sat in 1.778964 secs.
[08/23 17:23:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:56]  Verifer returned unsat in 2.565323 secs.
[08/23 17:23:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:56]  --------------------------------------------------------------------------------
[08/23 17:23:56]  Iteration: 191 (102 solution, 88 counterexamples)
[08/23 17:23:59]  Generator returned sat in 1.544922 secs.
[08/23 17:23:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:00]  Verifer returned unsat in 1.127690 secs.
[08/23 17:24:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:00]  --------------------------------------------------------------------------------
[08/23 17:24:00]  Iteration: 192 (103 solution, 88 counterexamples)
[08/23 17:24:03]  Generator returned sat in 1.542459 secs.
[08/23 17:24:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:04]  Verifer returned unsat in 1.483066 secs.
[08/23 17:24:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:04]  --------------------------------------------------------------------------------
[08/23 17:24:04]  Iteration: 193 (104 solution, 88 counterexamples)
[08/23 17:24:07]  Generator returned sat in 1.492141 secs.
[08/23 17:24:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:10]  Verifer returned unsat in 2.744066 secs.
[08/23 17:24:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:10]  --------------------------------------------------------------------------------
[08/23 17:24:10]  Iteration: 194 (105 solution, 88 counterexamples)
[08/23 17:24:13]  Generator returned sat in 1.489284 secs.
[08/23 17:24:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:15]  Verifer returned unsat in 1.798215 secs.
[08/23 17:24:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:15]  --------------------------------------------------------------------------------
[08/23 17:24:15]  Iteration: 195 (106 solution, 88 counterexamples)
[08/23 17:24:18]  Generator returned sat in 1.680122 secs.
[08/23 17:24:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:18]  Verifer returned unsat in 0.128448 secs.
[08/23 17:24:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:18]  --------------------------------------------------------------------------------
[08/23 17:24:18]  Iteration: 196 (107 solution, 88 counterexamples)
[08/23 17:24:21]  Generator returned sat in 1.596813 secs.
[08/23 17:24:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:22]  Verifer returned unsat in 0.737748 secs.
[08/23 17:24:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:22]  --------------------------------------------------------------------------------
[08/23 17:24:22]  Iteration: 197 (108 solution, 88 counterexamples)
[08/23 17:24:24]  Generator returned sat in 1.497602 secs.
[08/23 17:24:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:26]  Verifer returned unsat in 1.551325 secs.
[08/23 17:24:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:26]  --------------------------------------------------------------------------------
[08/23 17:24:26]  Iteration: 198 (109 solution, 88 counterexamples)
[08/23 17:24:29]  Generator returned sat in 2.035198 secs.
[08/23 17:24:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:30]  Verifer returned unsat in 0.085330 secs.
[08/23 17:24:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:30]  --------------------------------------------------------------------------------
[08/23 17:24:30]  Iteration: 199 (110 solution, 88 counterexamples)
[08/23 17:24:33]  Generator returned sat in 1.879803 secs.
[08/23 17:24:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:34]  Verifer returned unsat in 1.543712 secs.
[08/23 17:24:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:34]  --------------------------------------------------------------------------------
[08/23 17:24:34]  Iteration: 200 (111 solution, 88 counterexamples)
[08/23 17:24:37]  Generator returned sat in 1.492807 secs.
[08/23 17:24:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:39]  Verifer returned unsat in 1.579573 secs.
[08/23 17:24:39]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:39]  --------------------------------------------------------------------------------
[08/23 17:24:39]  Iteration: 201 (112 solution, 88 counterexamples)
[08/23 17:24:43]  Generator returned sat in 2.478079 secs.
[08/23 17:24:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:43]  Verifer returned unsat in 0.112253 secs.
[08/23 17:24:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:43]  --------------------------------------------------------------------------------
[08/23 17:24:43]  Iteration: 202 (113 solution, 88 counterexamples)
[08/23 17:24:46]  Generator returned sat in 2.087368 secs.
[08/23 17:24:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:48]  Verifer returned unsat in 1.035232 secs.
[08/23 17:24:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:48]  --------------------------------------------------------------------------------
[08/23 17:24:48]  Iteration: 203 (114 solution, 88 counterexamples)
[08/23 17:24:51]  Generator returned sat in 1.669579 secs.
[08/23 17:24:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:51]  Verifer returned unsat in 0.450889 secs.
[08/23 17:24:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:51]  --------------------------------------------------------------------------------
[08/23 17:24:51]  Iteration: 204 (115 solution, 88 counterexamples)
[08/23 17:24:54]  Generator returned sat in 1.666976 secs.
[08/23 17:24:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:56]  Verifer returned unsat in 1.698760 secs.
[08/23 17:24:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:24:56]  --------------------------------------------------------------------------------
[08/23 17:24:56]  Iteration: 205 (116 solution, 88 counterexamples)
[08/23 17:24:59]  Generator returned sat in 1.583017 secs.
[08/23 17:24:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:00]  Verifer returned unsat in 1.119728 secs.
[08/23 17:25:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:00]  --------------------------------------------------------------------------------
[08/23 17:25:00]  Iteration: 206 (117 solution, 88 counterexamples)
[08/23 17:25:04]  Generator returned sat in 2.607074 secs.
[08/23 17:25:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:04]  Verifer returned unsat in 0.102536 secs.
[08/23 17:25:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:04]  --------------------------------------------------------------------------------
[08/23 17:25:04]  Iteration: 207 (118 solution, 88 counterexamples)
[08/23 17:25:07]  Generator returned sat in 1.515773 secs.
[08/23 17:25:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:07]  Verifer returned unsat in 0.116669 secs.
[08/23 17:25:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:07]  --------------------------------------------------------------------------------
[08/23 17:25:07]  Iteration: 208 (119 solution, 88 counterexamples)
[08/23 17:25:10]  Generator returned sat in 1.418729 secs.
[08/23 17:25:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:10]  Verifer returned unsat in 0.141007 secs.
[08/23 17:25:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:10]  --------------------------------------------------------------------------------
[08/23 17:25:10]  Iteration: 209 (120 solution, 88 counterexamples)
[08/23 17:25:13]  Generator returned sat in 1.910294 secs.
[08/23 17:25:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:14]  Verifer returned unsat in 0.098019 secs.
[08/23 17:25:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:14]  --------------------------------------------------------------------------------
[08/23 17:25:14]  Iteration: 210 (121 solution, 88 counterexamples)
[08/23 17:25:17]  Generator returned sat in 1.486696 secs.
[08/23 17:25:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:17]  Verifer returned unsat in 0.100879 secs.
[08/23 17:25:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:17]  --------------------------------------------------------------------------------
[08/23 17:25:17]  Iteration: 211 (122 solution, 88 counterexamples)
[08/23 17:25:19]  Generator returned sat in 1.367414 secs.
[08/23 17:25:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:20]  Verifer returned unsat in 0.096238 secs.
[08/23 17:25:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:20]  --------------------------------------------------------------------------------
[08/23 17:25:20]  Iteration: 212 (123 solution, 88 counterexamples)
[08/23 17:25:22]  Generator returned sat in 1.367429 secs.
[08/23 17:25:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:23]  Verifer returned unsat in 0.097996 secs.
[08/23 17:25:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:23]  --------------------------------------------------------------------------------
[08/23 17:25:23]  Iteration: 213 (124 solution, 88 counterexamples)
[08/23 17:25:25]  Generator returned sat in 1.371816 secs.
[08/23 17:25:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:25]  Verifer returned unsat in 0.098216 secs.
[08/23 17:25:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:25]  --------------------------------------------------------------------------------
[08/23 17:25:25]  Iteration: 214 (125 solution, 88 counterexamples)
[08/23 17:25:29]  Generator returned sat in 1.832518 secs.
[08/23 17:25:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:30]  Verifer returned unsat in 1.494788 secs.
[08/23 17:25:30]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:30]  --------------------------------------------------------------------------------
[08/23 17:25:30]  Iteration: 215 (126 solution, 88 counterexamples)
[08/23 17:25:42]  Generator returned sat in 10.101449 secs.
[08/23 17:25:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:25:42]  Improved gap from 0.0 to 0
[08/23 17:25:43]  Improved number of small numbers from 46 to 54 out of a max of 100
[08/23 17:25:43]  Verifer returned sat in 1.778159 secs.
[08/23 17:25:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -2344.322266   -2350.252908  13911.046143 -2344.322266  0.089355 -2350.252908        0.0  5.930643        5.930619
1   -2344.322240   -2344.323490  14005.115497 -2344.322240  5.930669 -2344.323490        0.0  0.001250        0.000000
2   -2344.320990   -2344.322240  14105.114247 -2344.320990  0.002500 -2344.322240        0.0  0.001250        0.000000
3   -2344.319740   -2344.320990  14203.647217 -2344.319740  0.002500 -2344.320990        0.0  0.001250       -1.465780
4   -2342.852530   -2342.853780  14303.645752 -2342.852530  1.468459 -2342.853780        0.0  0.001250       -0.000036
5   -2342.150466   -2342.151716  14402.668945 -2342.150466  0.703314 -2342.151716        0.0  0.001250       -0.274778
6   -2341.863141   -2341.875641  14502.656398 -2341.863141  0.288576 -2341.875641        0.0  0.012500        0.000000
7   -2341.863141   -2341.863141  14602.646484 -2341.863141  0.011250 -2341.863141        0.0  0.000000       -0.009914
8   -2341.853141   -2341.853141  14602.646484 -2341.853141  0.010000 -2341.853141        0.0  0.000000      -99.999914
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:25:44]  --------------------------------------------------------------------------------
[08/23 17:25:44]  Iteration: 216 (126 solution, 89 counterexamples)
[08/23 17:25:53]  Generator returned sat in 7.751342 secs.
[08/23 17:25:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:53]  Verifer returned unsat in 0.145010 secs.
[08/23 17:25:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:53]  --------------------------------------------------------------------------------
[08/23 17:25:53]  Iteration: 217 (127 solution, 89 counterexamples)
[08/23 17:25:56]  Generator returned sat in 1.422098 secs.
[08/23 17:25:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:56]  Verifer returned unsat in 0.119276 secs.
[08/23 17:25:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:56]  --------------------------------------------------------------------------------
[08/23 17:25:56]  Iteration: 218 (128 solution, 89 counterexamples)
[08/23 17:25:59]  Generator returned sat in 1.438617 secs.
[08/23 17:25:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:59]  Verifer returned unsat in 0.090958 secs.
[08/23 17:25:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:59]  --------------------------------------------------------------------------------
[08/23 17:25:59]  Iteration: 219 (129 solution, 89 counterexamples)
[08/23 17:26:02]  Generator returned sat in 1.549690 secs.
[08/23 17:26:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:02]  Verifer returned unsat in 0.076900 secs.
[08/23 17:26:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:02]  --------------------------------------------------------------------------------
[08/23 17:26:02]  Iteration: 220 (130 solution, 89 counterexamples)
[08/23 17:26:05]  Generator returned sat in 1.425301 secs.
[08/23 17:26:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:05]  Verifer returned unsat in 0.105620 secs.
[08/23 17:26:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:05]  --------------------------------------------------------------------------------
[08/23 17:26:05]  Iteration: 221 (131 solution, 89 counterexamples)
[08/23 17:26:08]  Generator returned sat in 1.682437 secs.
[08/23 17:26:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:08]  Verifer returned unsat in 0.095075 secs.
[08/23 17:26:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:08]  --------------------------------------------------------------------------------
[08/23 17:26:08]  Iteration: 222 (132 solution, 89 counterexamples)
[08/23 17:26:11]  Generator returned sat in 1.610877 secs.
[08/23 17:26:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:12]  Verifer returned unsat in 0.091913 secs.
[08/23 17:26:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:12]  --------------------------------------------------------------------------------
[08/23 17:26:12]  Iteration: 223 (133 solution, 89 counterexamples)
[08/23 17:26:14]  Generator returned sat in 1.623897 secs.
[08/23 17:26:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:15]  Verifer returned unsat in 0.079808 secs.
[08/23 17:26:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:15]  --------------------------------------------------------------------------------
[08/23 17:26:15]  Iteration: 224 (134 solution, 89 counterexamples)
[08/23 17:26:17]  Generator returned sat in 1.474492 secs.
[08/23 17:26:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:18]  Verifer returned unsat in 0.118090 secs.
[08/23 17:26:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:18]  --------------------------------------------------------------------------------
[08/23 17:26:18]  Iteration: 225 (135 solution, 89 counterexamples)
[08/23 17:26:21]  Generator returned sat in 1.900003 secs.
[08/23 17:26:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:22]  Verifer returned unsat in 1.120903 secs.
[08/23 17:26:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:22]  --------------------------------------------------------------------------------
[08/23 17:26:22]  Iteration: 226 (136 solution, 89 counterexamples)
[08/23 17:26:25]  Generator returned sat in 1.722982 secs.
[08/23 17:26:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:26]  Verifer returned unsat in 0.633483 secs.
[08/23 17:26:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:26]  --------------------------------------------------------------------------------
[08/23 17:26:26]  Iteration: 227 (137 solution, 89 counterexamples)
[08/23 17:26:29]  Generator returned sat in 1.660476 secs.
[08/23 17:26:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:31]  Verifer returned unsat in 1.476799 secs.
[08/23 17:26:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:31]  --------------------------------------------------------------------------------
[08/23 17:26:31]  Iteration: 228 (138 solution, 89 counterexamples)
[08/23 17:26:34]  Generator returned sat in 1.761728 secs.
[08/23 17:26:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:35]  Verifer returned unsat in 1.188397 secs.
[08/23 17:26:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:35]  --------------------------------------------------------------------------------
[08/23 17:26:35]  Iteration: 229 (139 solution, 89 counterexamples)
[08/23 17:26:38]  Generator returned sat in 1.737567 secs.
[08/23 17:26:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:40]  Verifer returned unsat in 1.258408 secs.
[08/23 17:26:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:40]  --------------------------------------------------------------------------------
[08/23 17:26:40]  Iteration: 230 (140 solution, 89 counterexamples)
[08/23 17:26:43]  Generator returned sat in 1.734187 secs.
[08/23 17:26:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:44]  Verifer returned unsat in 1.024124 secs.
[08/23 17:26:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:44]  --------------------------------------------------------------------------------
[08/23 17:26:44]  Iteration: 231 (141 solution, 89 counterexamples)
[08/23 17:26:47]  Generator returned sat in 1.618254 secs.
[08/23 17:26:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:48]  Verifer returned unsat in 1.271424 secs.
[08/23 17:26:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:48]  --------------------------------------------------------------------------------
[08/23 17:26:48]  Iteration: 232 (142 solution, 89 counterexamples)
[08/23 17:26:51]  Generator returned sat in 1.717839 secs.
[08/23 17:26:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:52]  Verifer returned unsat in 0.863307 secs.
[08/23 17:26:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:52]  --------------------------------------------------------------------------------
[08/23 17:26:52]  Iteration: 233 (143 solution, 89 counterexamples)
[08/23 17:26:55]  Generator returned sat in 1.618195 secs.
[08/23 17:26:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:56]  Verifer returned unsat in 0.979810 secs.
[08/23 17:26:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:26:56]  --------------------------------------------------------------------------------
[08/23 17:26:56]  Iteration: 234 (144 solution, 89 counterexamples)
[08/23 17:26:59]  Generator returned sat in 1.692906 secs.
[08/23 17:27:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:00]  Verifer returned unsat in 0.880519 secs.
[08/23 17:27:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:00]  --------------------------------------------------------------------------------
[08/23 17:27:00]  Iteration: 235 (145 solution, 89 counterexamples)
[08/23 17:27:03]  Generator returned sat in 1.592898 secs.
[08/23 17:27:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:05]  Verifer returned unsat in 1.955559 secs.
[08/23 17:27:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:05]  --------------------------------------------------------------------------------
[08/23 17:27:05]  Iteration: 236 (146 solution, 89 counterexamples)
[08/23 17:27:08]  Generator returned sat in 1.611896 secs.
[08/23 17:27:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:10]  Verifer returned unsat in 1.097625 secs.
[08/23 17:27:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:10]  --------------------------------------------------------------------------------
[08/23 17:27:10]  Iteration: 237 (147 solution, 89 counterexamples)
[08/23 17:27:13]  Generator returned sat in 1.624164 secs.
[08/23 17:27:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:14]  Verifer returned unsat in 0.726630 secs.
[08/23 17:27:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:14]  --------------------------------------------------------------------------------
[08/23 17:27:14]  Iteration: 238 (148 solution, 89 counterexamples)
[08/23 17:27:17]  Generator returned sat in 1.664407 secs.
[08/23 17:27:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:18]  Verifer returned unsat in 0.846435 secs.
[08/23 17:27:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:18]  --------------------------------------------------------------------------------
[08/23 17:27:18]  Iteration: 239 (149 solution, 89 counterexamples)
[08/23 17:27:24]  Generator returned sat in 4.611999 secs.
[08/23 17:27:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:24]  Verifer returned unsat in 0.129990 secs.
[08/23 17:27:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:24]  --------------------------------------------------------------------------------
[08/23 17:27:24]  Iteration: 240 (150 solution, 89 counterexamples)
[08/23 17:27:27]  Generator returned sat in 1.716854 secs.
[08/23 17:27:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:27]  Verifer returned unsat in 0.157062 secs.
[08/23 17:27:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:27]  --------------------------------------------------------------------------------
[08/23 17:27:27]  Iteration: 241 (151 solution, 89 counterexamples)
[08/23 17:27:30]  Generator returned sat in 1.855677 secs.
[08/23 17:27:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:31]  Verifer returned unsat in 0.116276 secs.
[08/23 17:27:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:27:31]  --------------------------------------------------------------------------------
[08/23 17:27:31]  Iteration: 242 (152 solution, 89 counterexamples)
[08/23 17:27:34]  Generator returned sat in 2.077816 secs.
[08/23 17:27:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:27:35]  Improved gap from 0.00125 to 0
[08/23 17:27:35]  Improved number of small numbers from 54 to 72 out of a max of 100
[08/23 17:27:35]  Verifer returned sat in 1.029492 secs.
[08/23 17:27:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0   -3937.443604   -3941.462127  14992.154541 -3937.443604  0.089355 -3941.462127        0.0  4.018523        4.018425
1   -3937.443604   -3937.444824  15088.135986 -3937.443604  0.001250 -3937.444824        0.0  0.001221       -0.000129
2   -3937.442139   -3937.443377  15188.134639 -3937.442139  0.002686 -3937.443377        0.0  0.001238       -0.000012
3   -3936.111293   -3937.442127  15286.803711 -3936.111293  1.332083 -3937.442127        0.0  1.330833       -0.000094
4   -3936.100043   -3936.111084  15386.792555 -3936.100043  1.342083 -3936.111084        0.0  0.011041        0.000000
5   -3936.100043   -3936.100043  15486.783936 -3936.100043  0.010000 -3936.100043        0.0  0.000000       -0.008620
6   -3936.090043   -3936.091293  15586.782555 -3936.090043  0.010000 -3936.091293        0.0  0.001250        0.000000
7   -3936.081293   -3936.090043  15686.772705 -3936.081293  0.010000 -3936.090043        0.0  0.008750       -0.001100
8   -3936.080043   -3936.080078  15686.772705 -3936.080043  0.010000 -3936.080078        0.0  0.000035      -99.999850
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:27:36]  --------------------------------------------------------------------------------
[08/23 17:27:36]  Iteration: 243 (152 solution, 90 counterexamples)
[08/23 17:27:47]  Generator returned sat in 9.573658 secs.
[08/23 17:27:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:27:47]  Improved gap from 0.00125 to 48.4375
[08/23 17:27:48]  Improved number of small numbers from 38 to 100 out of a max of 100
[08/23 17:27:48]  Verifer returned sat in 0.901796 secs.
[08/23 17:27:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -5961.917725   -6061.939697  17012.632324 -5961.917725    0.089111 -6061.939697   0.000000  100.021973        0.021973
1   -5961.917480   -5961.939697  17012.632324 -5961.917480  100.022217 -5961.939697   0.000000    0.022217      -99.977783
2   -5561.917480   -5767.851318  17012.632324 -5561.917480  400.022217 -5767.851318   0.022217  205.911621      200.000000
3   -5561.917480   -5661.939941  17012.632324 -5561.917480  204.044189 -5661.939941   0.022217  100.000244      100.000000
4   -5361.895752   -5561.939941  17012.632324 -5361.895752  300.021973 -5561.939941   0.043945  200.000244      200.000000
5   -5361.895752   -5561.939697  17012.632324 -5361.895752    2.000000 -5561.939697   0.043945  200.000000      100.000000
6   -5361.895752   -5461.939697  17012.632324 -5361.895752  101.955811 -5461.939697   0.043945  100.000000        0.000000
7   -5312.917725   -5361.399414  17063.654297 -5312.917725  148.978027 -5361.399414   0.043945   48.437744        0.000000
8   -5188.596191   -5312.961670  17063.654297 -5188.596191  172.759277 -5312.961670   0.043945  124.321533       24.321533
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:27:48]  --------------------------------------------------------------------------------
[08/23 17:27:48]  Iteration: 244 (152 solution, 91 counterexamples)
[08/23 17:27:54]  Generator returned sat in 5.134255 secs.
[08/23 17:27:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:28:00]  Improved gap from 0.0 to 3.125
[08/23 17:28:01]  Improved number of small numbers from 57 to 69 out of a max of 100
[08/23 17:28:01]  Verifer returned sat in 6.159077 secs.
[08/23 17:28:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -5666.123535   -5683.398657  17012.632080 -5666.123535   0.089111 -5683.398657        0.0  17.275122       17.274878
1   -5666.123535   -5666.167725  17092.276392 -5666.123535  17.275000 -5666.167725        0.0   0.044189       -3.080811
2   -5662.998779   -5663.042725  17189.151392 -5662.998779   3.168945 -5663.042725        0.0   0.043945       -3.081055
3   -5659.873657   -5659.917725  17286.026367 -5659.873657   3.169067 -5659.917725        0.0   0.044067       -3.080957
4   -5648.592725   -5651.892725  17377.826392 -5648.592725  11.325000 -5651.892725        0.0   3.300000        0.000000
5   -5641.092725   -5648.592725  17470.326392 -5641.092725  10.800000 -5648.592725        0.0   7.500000        0.000000
6   -5637.967725   -5641.092725  17567.201392 -5637.967725  10.625000 -5641.092725        0.0   3.125000        0.000000
7   -5628.367725   -5637.967725  17657.601392 -5628.367725  12.725000 -5637.967725        0.0   9.600000        0.000000
8   -5626.642725   -5628.367676  17657.601562 -5626.642725  11.325000 -5628.367676        0.0   1.724951      -98.274829
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:28:01]  --------------------------------------------------------------------------------
[08/23 17:28:01]  Iteration: 245 (152 solution, 92 counterexamples)
[08/23 17:28:06]  Generator returned unsat in 3.790432 secs.
[08/23 17:28:06]  [96mNo more solutions found[0m
[08/23 17:28:06]  Final solutions:
[08/23 17:28:06]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  31: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  32: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  33: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  34: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  35: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  36: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  37: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  38: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  39: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  40: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  41: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  42: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  43: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  44: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  45: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  46: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  47: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  48: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  49: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  50: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  51: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  52: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  53: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  54: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  55: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  56: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  57: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  58: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  59: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  60: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  61: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  62: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  63: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  64: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  65: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  66: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  67: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  68: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  69: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  70: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  71: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  72: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  73: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  74: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  75: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  76: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  77: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  78: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  79: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  80: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  81: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  82: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  83: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  84: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  85: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  86: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  87: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  88: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  89: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  90: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  91: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  92: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  93: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  94: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  95: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  96: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  97: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  98: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  99: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  100: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  101: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  102: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  103: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  104: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  105: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  106: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  107: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  108: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  109: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  110: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  111: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  112: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  113: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  114: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  115: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  116: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  117: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  118: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  119: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  120: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  121: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  122: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  123: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  124: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  125: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  126: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  127: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  128: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  129: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  130: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  131: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  132: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  133: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  134: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  135: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  136: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  137: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  138: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  139: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  140: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  141: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  142: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  143: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:28:06]  144: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  145: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:28:06]  146: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  147: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  148: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  149: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:28:06]  150: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:28:06]  151: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:28:06]  Took 1204.956027 secs.
