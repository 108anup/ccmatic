[08/23 17:23:06]  --------------------------------------------------------------------------------
[08/23 17:23:06]  Iteration: 1 (0 solution, 0 counterexamples)
[08/23 17:23:06]  Generator returned sat in 0.004232 secs.
[08/23 17:23:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:23:06]  Improved gap from 0.0 to 100
[08/23 17:23:06]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:23:06]  Verifer returned sat in 0.279686 secs.
[08/23 17:23:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t   arrival_0,t     cwnd_0,t  service_0,t     losts_0,t  queue_t  bottle_queue_t
0    -221.100000         -221.2     221.2   -221.100000     0.100000       -221.2      0.000000      0.1             0.1
1    -221.100000         -221.2     221.2   -221.100000     0.100000       -221.2      0.000000      0.1           -99.9
2      -1.300000          -21.2     221.2     -1.300000   219.900000        -21.2      0.000000     19.9            19.9
3      98.900000          -21.2     221.2     98.900000   120.100000        -21.2      0.100000    120.0            20.0
4     561.050000           78.8     221.2    561.050000   582.150000         78.8    362.250000    120.0            20.0
5    1916.275000          223.8     221.2   1916.275000  1475.225000        223.8   1617.475000     75.0            20.0
6    4546.112500          284.8     221.2   4546.112500  2704.837500        284.8   4147.312500    114.0            20.0
7    9103.368750          394.8     221.2   9103.368750  4671.256250        394.8   8604.568750    104.0            20.0
8   16640.253125          478.8     221.2  16640.253125  7640.884375        478.8  16041.453125    120.0            20.0
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:23:07]  --------------------------------------------------------------------------------
[08/23 17:23:07]  Iteration: 2 (0 solution, 1 counterexamples)
[08/23 17:23:07]  Generator returned sat in 0.027535 secs.
[08/23 17:23:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:23:07]  Improved gap from 0.0 to 4.6875
[08/23 17:23:07]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/23 17:23:07]  Verifer returned sat in 0.419130 secs.
[08/23 17:23:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    4222.562500     -44.650146  -55.349854  4222.562500    0.099609   -44.650146  4147.212646  120.000000       20.000000
1    4322.512451      55.349854  -55.349854  4322.512451  219.949951    55.349854  4147.212646  119.949951       19.949951
2    4422.512451     175.399902  -55.349854  4422.512451  219.949951   175.399902  4147.212646   99.899902       19.949951
3    4502.612549     255.350098  -55.349854  4502.612549  180.000000   255.350098  4147.212646  100.049805        0.050049
4    4502.612549     355.349854   39.962402  4502.612549   89.000000   355.349854  4147.212646    0.050049       -4.637695
5    4546.062500     378.149902  101.150146  4546.062500   43.500000   378.149902  4147.212646   20.699951        0.000000
6    4546.112549     398.850098  196.462402  4546.112549   20.750000   398.850098  4147.212646    0.049805       -4.637695
7    4555.437744     403.537598  291.774902  4555.437744    9.375000   403.537598  4147.212646    4.687500        0.000000
8    4555.437744     408.225098  387.087402  4555.437744    3.687500   408.225098  4147.212646    0.000000       -4.687500
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:23:07]  --------------------------------------------------------------------------------
[08/23 17:23:07]  Iteration: 3 (0 solution, 2 counterexamples)
[08/23 17:23:07]  Generator returned sat in 0.104385 secs.
[08/23 17:23:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:08]  Improved gap from 1.9501953125 to 21.875
[08/23 17:23:08]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:23:08]  Verifer returned sat in 0.209490 secs.
[08/23 17:23:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    4286.387939      19.175293  -69.262207  4286.387939    0.099609    19.175293  4147.212646  120.000000       20.000000
1    4386.288330     119.175293  -69.262207  4386.288330  219.900391   119.175293  4147.212646  119.900391       19.900391
2    4486.487549     319.175293  -69.262207  4486.487549  220.099609   319.175293  4147.312256   20.000000       20.000000
3    4498.362549     319.175293   -1.137207  4498.362549   31.875000   319.175293  4147.312256   31.875000        0.000000
4    4498.362549     351.050293   76.987793  4498.362549   29.875000   351.050293  4147.312256    0.000000      -21.875000
5    4526.237549     372.925293  152.712402  4526.237549   27.875000   372.925293  4147.312256    6.000000      -18.275391
6    4546.112549     397.200684  230.837402  4546.112549   25.875000   397.200684  4147.312256    1.599609      -20.275391
7    4568.387939     419.075684  308.962402  4568.387939   23.875000   419.075684  4147.312256    2.000000      -19.875000
8    4588.262939     440.950684  387.087402  4588.262939   21.875000   440.950684  4147.312256    0.000000      -21.875000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:23:08]  --------------------------------------------------------------------------------
[08/23 17:23:08]  Iteration: 4 (0 solution, 3 counterexamples)
[08/23 17:23:08]  Generator returned sat in 0.104994 secs.
[08/23 17:23:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:23:08]  Improved gap from 0.0016666666666666668 to 100
[08/23 17:23:09]  Improved number of small numbers from 38 to 40 out of a max of 100
[08/23 17:23:09]  Verifer returned sat in 0.833944 secs.
[08/23 17:23:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    4585.209229     787.825684  230.837158  4585.209229    0.099121   787.825684  3797.334061    0.049484        0.049484
1    4705.110062     787.825684  230.837158  4705.110062  119.950317   787.825684  3797.334061  119.950317       19.950317
2    4805.209427     987.825684  230.837158  4805.209427  220.049683   987.825684  3797.383743   20.000000       20.000000
3    4905.259109    1025.800842  230.837158  4905.259109  120.049683  1025.800842  3797.433426   82.024841       20.000000
4    5005.308792    1187.825684  230.837158  5005.308792  182.074524  1187.825684  3797.483109   20.000000       20.000000
5    5260.420578    1287.825684  230.837158  5260.420578  275.111786  1287.825684  3952.594894   20.000000       20.000000
6    5655.088257    1287.825684  230.837158  5655.088257  414.667679  1287.825684  4247.262573  120.000000       20.000000
7    6159.089775    1487.825684  230.837158  6159.089775  624.001518  1487.825684  4651.264091   20.000000       20.000000
8    7077.092052    1487.825684  230.837158  7077.092052  938.002277  1487.825684  5469.266369  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:23:09]  --------------------------------------------------------------------------------
[08/23 17:23:09]  Iteration: 5 (0 solution, 4 counterexamples)
[08/23 17:23:09]  Generator returned sat in 0.022121 secs.
[08/23 17:23:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:23:09]  Improved gap from 0.0 to 100
[08/23 17:23:10]  Improved number of small numbers from 27 to 35 out of a max of 100
[08/23 17:23:10]  Verifer returned sat in 0.850745 secs.
[08/23 17:23:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    4190.523682     373.139648  230.837158  4190.523682    0.099121   373.139648  3797.383865   20.000168       19.999985
1    4190.523682     373.139832  230.837158  4190.523682    0.049561   373.139832  3797.383865   19.999985      -80.000015
2    4390.474136     573.139832  230.837158  4390.474136  219.950439   573.139832  3797.383865   19.950439       19.950439
3    4490.573257     673.139832  230.837158  4490.573257  120.049561   673.139832  3797.433426   20.000000       20.000000
4    4651.647598     773.139832  230.837158  4651.647598  181.074341   773.139832  3858.507767   20.000000       20.000000
5    4904.259109     773.139832  230.837158  4904.259109  272.611511   773.139832  4011.119278  120.000000       20.000000
6    5194.176376     873.139832  230.837158  5194.176376  409.917267   873.139832  4201.036545  120.000000       20.000000
7    5690.052277    1073.139832  230.837158  5690.052277  615.875900  1073.139832  4596.912445   20.000000       20.000000
8    6594.866127    1073.139893  230.837158  6594.866127  924.813850  1073.139893  5401.726295  119.999939       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:23:10]  --------------------------------------------------------------------------------
[08/23 17:23:10]  Iteration: 6 (0 solution, 5 counterexamples)
[08/23 17:23:11]  Generator returned sat in 0.026279 secs.
[08/23 17:23:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:23:11]  Improved gap from 0.0025 to 100
[08/23 17:23:11]  Improved number of small numbers from 62 to 70 out of a max of 100
[08/23 17:23:11]  Verifer returned sat in 0.698632 secs.
[08/23 17:23:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    4303.234375     405.825439  230.836914  4303.234375    0.098877   405.825439  3797.384033  100.024902        0.024902
1    4303.234375     505.825439  230.836914  4303.234375    0.049561   505.825439  3797.384033    0.024902      -99.975098
2    4403.234131     605.825439  230.836914  4403.234131  100.024658   605.825439  3797.384033    0.024658      -99.975342
3    4623.234253     751.841960  230.836914  4623.234253  220.024780   751.841960  3797.408813   73.983480       20.000000
4    4723.259033     905.825439  230.836914  4723.259033  174.008260   905.825439  3797.433594   20.000000       20.000000
5    4904.259033     999.841960  230.836914  4904.259033  201.000000   999.841960  3878.433594   25.983480       20.000000
6    5076.283813    1067.180800  230.836914  5076.283813  198.008260  1067.180800  3950.458374   58.644640       20.000000
7    5176.308594    1185.175293  230.836914  5176.308594  158.669420  1185.175293  3950.483154   40.650146       20.000000
8    5276.333374    1205.825439  230.836914  5276.333374  140.674927  1205.825439  3950.507935  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:23:12]  --------------------------------------------------------------------------------
[08/23 17:23:12]  Iteration: 7 (0 solution, 6 counterexamples)
[08/23 17:23:12]  Generator returned sat in 0.168230 secs.
[08/23 17:23:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:23:12]  Improved gap from 0.0 to 0
[08/23 17:23:13]  Improved number of small numbers from 41 to 70 out of a max of 100
[08/23 17:23:13]  Verifer returned sat in 1.187151 secs.
[08/23 17:23:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7392.189941    3474.806152  112.667236  7392.189941    0.098633  3474.806152  3797.384033  119.999756       19.999795
1    7392.189941    3574.806152  112.667236  7392.189941  119.950684  3574.806152  3797.384033   19.999756      -80.000205
2    7592.140625    3774.805908  112.667236  7592.140625  219.950439  3774.805908  3797.384033   19.950684       19.950479
3    7592.140625    3794.707037  191.328125  7592.140625    1.493820  3794.707037  3797.384033    0.049555       -1.388632
4    7593.578710    3796.145238  289.902344  7593.578710    1.487640  3796.145238  3797.384033    0.049438       -1.376328
5    7595.004552    3797.571081  389.852783  7595.004552    1.475281  3797.571081  3797.384033    0.049438       -0.000047
6    7596.405675    3798.972204  488.451660  7596.405675    1.450562  3798.972204  3797.384033    0.049438       -0.000047
7    7597.757360    3799.021729  587.100022  7597.757360    1.401123  3799.021729  3797.384033    1.351598        0.000000
8    7597.757360    3800.373327  587.100098  7597.757360    1.302246  3800.373327  3797.384033    0.000000      -99.999925
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:23:13]  --------------------------------------------------------------------------------
[08/23 17:23:13]  Iteration: 8 (0 solution, 7 counterexamples)
[08/23 17:23:14]  Generator returned sat in 0.158402 secs.
[08/23 17:23:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:23:14]  Improved gap from 0.0 to 100
[08/23 17:23:15]  Improved number of small numbers from 40 to 50 out of a max of 100
[08/23 17:23:15]  Verifer returned sat in 0.967845 secs.
[08/23 17:23:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6882.089844    3084.705787  681.791313  6882.089844    0.098633  3084.705787  3797.384033    0.000024        0.000024
1    6982.089820    3084.705811  681.791313  6982.089820  100.000000  3084.705811  3797.384033   99.999976        0.000000
2    6982.089844    3184.705787  681.791313  6982.089844  100.000000  3184.705787  3797.384033    0.000024      -99.999976
3    7082.094820    3284.708287  681.791313  7082.094820  100.005000  3284.708287  3797.384033    0.002500      -99.995000
4    7431.102320    3463.718287  681.791313  7431.102320  349.010000  3463.718287  3926.396533   40.987500       20.000000
5    7431.102320    3488.202870  681.791313  7431.102320    0.010000  3488.202870  3926.396533   16.502917      -80.000000
6    7717.111486    3584.705811  681.791313  7717.111486  302.512083  3584.705811  4012.405700  119.999976       20.000000
7    7717.111486    3684.705787  681.791313  7717.111486    0.010000  3684.705787  4012.405700   20.000000      -80.000000
8    7917.113986    3784.705811  681.791313  7917.113986  220.002500  3784.705811  4012.408200  119.999976       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:15]  --------------------------------------------------------------------------------
[08/23 17:23:15]  Iteration: 9 (0 solution, 8 counterexamples)
[08/23 17:23:16]  Generator returned sat in 1.110026 secs.
[08/23 17:23:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:23:16]  Improved gap from 0.0025 to 17.1875
[08/23 17:23:17]  Improved number of small numbers from 40 to 55 out of a max of 100
[08/23 17:23:17]  Verifer returned sat in 1.119270 secs.
[08/23 17:23:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7040.107178    3222.723287  681.791260  7040.107178    0.098389  3222.723287  3797.384033   19.999858       19.999805
1    7040.107178    3242.720703  681.791313  7040.107178    0.002441  3242.720703  3797.384033    0.002441      -80.000142
2    7220.109619    3322.723287  681.791313  7220.109619  180.004883  3322.723287  3797.384033  100.002299        0.002299
3    7220.109619    3422.723287  681.791313  7220.109619   80.668333  3422.723287  3797.384033    0.002299      -99.997701
4    7440.109820    3522.723287  681.791313  7440.109820  220.002500  3522.723287  3797.386533  120.000000       20.000000
5    7440.109820    3642.720787  722.782563  7440.109820    0.010000  3642.720787  3797.386533    0.002500      -39.008750
6    7599.121070    3681.732178  722.782563  7599.121070  159.013750  3681.732178  3797.389033  119.999859       20.000000
7    7599.121070    3801.729537  784.269438  7599.121070    0.010000  3801.729537  3797.389033    0.002500      -18.513125
8    7737.636695    3820.245361  784.269438  7737.636695  138.518125  3820.245361  3797.391533  119.999800       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:18]  --------------------------------------------------------------------------------
[08/23 17:23:18]  Iteration: 10 (0 solution, 9 counterexamples)
[08/23 17:23:19]  Generator returned sat in 0.875253 secs.
[08/23 17:23:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:19]  Improved gap from 0.00125 to 15.625
[08/23 17:23:20]  Improved number of small numbers from 28 to 34 out of a max of 100
[08/23 17:23:20]  Verifer returned sat in 1.251394 secs.
[08/23 17:23:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7395.315430    3408.912662  676.91167  7395.315430    0.098145  3408.912662  3986.400283    0.002485        0.002485
1    7410.937945    3408.912662  761.28667  7410.937945   15.625000  3408.912662  3986.400283   15.625000        0.000000
2    7410.937945    3424.537662  761.28667  7410.937945    0.002686  3424.537662  3986.400283    0.000000     -100.000000
3    7610.937945    3524.537662  761.28667  7610.937945  200.000000  3524.537662  3986.400283  100.000000        0.000000
4    7966.750445    3624.537662  761.28667  7966.750445  455.812500  3624.537662  4222.212783  120.000000       20.000000
5    7966.750445    3744.537662  803.26917  7966.750445    0.010000  3744.537662  4222.212783    0.000000      -38.017500
6    8124.770445    3882.554932  803.26917  8124.770445  158.020000  3882.554932  4222.215283   20.000230       20.000000
7    8124.770445    3902.552662  866.24667  8124.770445    0.010000  3902.552662  4222.215283    0.002500      -17.022500
8    8261.795445    3919.577881  866.24667  8261.795445  137.027500  3919.577881  4222.217783  119.999781       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:20]  --------------------------------------------------------------------------------
[08/23 17:23:20]  Iteration: 11 (0 solution, 10 counterexamples)
[08/23 17:23:21]  Generator returned sat in 0.963223 secs.
[08/23 17:23:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:23:21]  Improved gap from 15.625 to 100
[08/23 17:23:22]  Improved number of small numbers from 26 to 100 out of a max of 100
[08/23 17:23:22]  Verifer returned sat in 0.390030 secs.
[08/23 17:23:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7330.937744    3324.537598  761.286621  7330.937744    0.098145  3324.537598  3986.400391   19.999756       19.999756
1    7410.937988    3324.537598  761.286621  7410.937988  100.000000  3324.537598  3986.400391  100.000000        0.000000
2    7410.937988    3424.537598  761.286621  7410.937988    0.002441  3424.537598  3986.400391    0.000000     -100.000000
3    7856.247803    3624.537598  761.286621  7856.247803  445.309814  3624.537598  4211.710205   20.000000       20.000000
4    7986.747803    3720.537598  761.286621  7986.747803  150.500000  3720.537598  4242.210205   24.000000       20.000000
5    8161.247803    3770.872559  761.286621  8161.247803  198.500000  3770.872559  4316.710205   73.665039       20.000000
6    8261.250244    3924.537598  761.286621  8261.250244  173.667480  3924.537598  4316.712646   20.000000       20.000000
7    8391.750244    4024.537598  761.286621  8391.750244  150.500000  4024.537598  4347.212646   20.000000       20.000000
8    8524.250244    4024.537842  761.286621  8524.250244  152.500000  4024.537842  4379.712646  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:23:22]  --------------------------------------------------------------------------------
[08/23 17:23:22]  Iteration: 12 (0 solution, 11 counterexamples)
[08/23 17:23:22]  Generator returned sat in 0.034827 secs.
[08/23 17:23:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:23:22]  Improved gap from 0.049072265625 to 100
[08/23 17:23:23]  Improved number of small numbers from 71 to 71 out of a max of 100
[08/23 17:23:23]  Verifer returned sat in 0.578843 secs.
[08/23 17:23:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7537.198730    3650.844971  371.188477  7537.198730    0.098145  3650.844971  3886.353760    0.000000        0.000000
1    7537.247803    3650.844971  371.188477  7537.247803    0.049072  3650.844971  3886.353760    0.049072      -99.950928
2    7737.198730    3750.844971  371.188477  7737.198730  200.000000  3750.844971  3886.353760  100.000000        0.000000
3    7857.247803    3950.844971  371.188477  7857.247803  220.049072  3950.844971  3886.402832   20.000000       20.000000
4    7986.747803    4017.527995  371.188477  7986.747803  149.500000  4017.527995  3915.902832   53.316976       20.000000
5    8116.272339    4150.844971  371.188477  8116.272339  182.841512  4150.844971  3945.427368   20.000000       20.000000
6    8295.772339    4231.211019  371.188477  8295.772339  199.500000  4231.211019  4024.927368   39.633952       20.000000
7    8395.821411    4320.072645  371.188477  8395.821411  139.683024  4320.072645  4024.976440   50.772325       20.000000
8    8495.821411    4350.844971  371.188477  8495.821411  150.772325  4350.844971  4024.976440  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=4.[0m
[08/23 17:23:23]  --------------------------------------------------------------------------------
[08/23 17:23:23]  Iteration: 13 (0 solution, 12 counterexamples)
[08/23 17:23:24]  Generator returned sat in 0.866535 secs.
[08/23 17:23:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:23:24]  Improved gap from 0.0025 to 1.5625
[08/23 17:23:25]  Improved number of small numbers from 57 to 74 out of a max of 100
[08/23 17:23:25]  Verifer returned sat in 0.865305 secs.
[08/23 17:23:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    7683.879639    3767.976562  -20.147943  7683.879639    0.098145  3767.976562  3915.902832   0.000244        0.000105
1    7783.879395    3767.976702  -20.147943  7783.879395  100.000000  3767.976702  3915.902832  99.999861       -0.000139
2    7886.784884    3967.976562  -20.147943  7886.784884  202.905350  3967.976562  3915.902832   2.905489        2.905350
3    7886.784884    3967.976807   76.946707  7886.784884    2.905350  3967.976807  3915.902832   2.905245        0.000000
4    7886.784884    3970.882052  175.384207  7886.784884    2.858025  3970.882052  3915.902832   0.000000       -1.562500
5    7889.571921    3972.444552  273.821533  7889.571921    2.787037  3972.444552  3915.902832   1.224537       -0.338137
6    7891.027939    3975.077782  371.188477  7891.027939    2.680556  3975.077782  3915.902832   0.047325       -1.515175
7    7893.501447    3976.640381  468.907227  7893.501447    2.520833  3976.640381  3915.902832   0.958235       -1.322917
8    7894.824463    3978.921631  468.907227  7894.824463    2.281250  3978.921631  3915.902832   0.000000      -99.999901
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:23:25]  --------------------------------------------------------------------------------
[08/23 17:23:25]  Iteration: 14 (0 solution, 13 counterexamples)
[08/23 17:23:26]  Generator returned sat in 0.125386 secs.
[08/23 17:23:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:26]  Improved gap from 0.0 to 3.125
[08/23 17:23:26]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:23:26]  Verifer returned sat in 0.272524 secs.
[08/23 17:23:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7689.473633    3753.570801   -5.742188  7689.473633    0.098145  3753.570801  3915.902832   20.000000       20.000000
1    7789.424561    3753.570801   -5.742188  7789.424561  119.950928  3753.570801  3915.902832  119.950928       19.950928
2    7789.424561    3869.472656   74.306885  7789.424561  119.901855  3869.472656  3915.902832    4.049072        0.000000
3    7789.424561    3873.521729  170.355957  7789.424561    4.000000  3873.521729  3915.902832    0.000000       -3.950928
4    7793.424561    3877.472656  266.405029  7793.424561    4.000000  3877.472656  3915.902832    0.049072       -3.901855
5    7797.375488    3881.423584  362.454102  7797.375488    4.000000  3881.423584  3915.902832    0.049072       -3.901855
6    7801.326416    3885.374512  458.503174  7801.326416    4.000000  3885.374512  3915.902832    0.049072       -3.901855
7    7805.277344    3889.325439  554.552246  7805.277344    4.000000  3889.325439  3915.902832    0.049072       -3.901855
8    7809.228271    3893.276367  554.552246  7809.228271    4.000000  3893.276367  3915.902832    0.049072      -99.950928
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:23:26]  --------------------------------------------------------------------------------
[08/23 17:23:26]  Iteration: 15 (0 solution, 14 counterexamples)
[08/23 17:23:30]  Generator returned sat in 3.834409 secs.
[08/23 17:23:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:30]  Improved gap from 0.0025 to 3.125
[08/23 17:23:31]  Improved number of small numbers from 31 to 45 out of a max of 100
[08/23 17:23:31]  Verifer returned sat in 1.034983 secs.
[08/23 17:23:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7195.102783    3691.233643   56.592207  7195.102783    0.098145  3691.233643  3503.866504    0.002637        0.000117
1    7195.102783    3691.236162   56.592207  7195.102783    0.002500  3691.236162  3503.866504    0.000117      -99.999883
2    7415.103916    3791.236162   56.592207  7415.103916  220.001250  3791.236162  3503.867754  120.000000       20.000000
3    7440.771416    3891.236162   56.592207  7440.771416  145.667500  3891.236162  3503.867754   45.667500      -54.332500
4    7615.105166    4091.236084   56.592207  7615.105166  220.001250  4091.236084  3503.869004   20.000078       20.000000
5    7615.105166    4108.111084  136.592207  7615.105166    0.010000  4108.111084  3503.869004    3.125078        0.000000
6    7615.105166    4111.236162  233.467207  7615.105166    1.515000  4111.236162  3503.869004    0.000000       -3.125000
7    7618.877666    4114.361162  330.342041  7618.877666    3.772500  4114.361162  3503.869004    0.647500       -2.477666
8    7625.388916    4117.486328  330.342285  7625.388916    7.158750  4117.486328  3503.869004    4.033584      -95.966172
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:23:32]  --------------------------------------------------------------------------------
[08/23 17:23:32]  Iteration: 16 (0 solution, 15 counterexamples)
[08/23 17:23:33]  Generator returned sat in 1.000825 secs.
[08/23 17:23:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:23:33]  Improved gap from 0.0 to 100
[08/23 17:23:33]  Improved number of small numbers from 29 to 100 out of a max of 100
[08/23 17:23:33]  Verifer returned sat in 0.425451 secs.
[08/23 17:23:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6985.383789    3611.236084  136.592285  6985.383789    0.098145  3611.236084  3354.147705   20.000000       20.000000
1    6985.383789    3611.236328  136.592285  6985.383789    0.002686  3611.236328  3354.147705   19.999756      -80.000000
2    7065.384033    3711.236328  136.592285  7065.384033  100.000000  3711.236328  3354.147705    0.000000      -99.999756
3    7285.381592    3911.236084  136.592285  7285.381592  219.997559  3911.236084  3354.147705   19.997803       19.997803
4    7567.383789    3993.233643  136.592285  7567.383789  302.000000  3993.233643  3536.147705   38.002441       20.000000
5    7567.383789    4028.236328  136.592285  7567.383789    0.010000  4028.236328  3536.147705    2.999756      -80.000000
6    7883.384033    4111.236328  136.592285  7883.384033  319.000000  4111.236328  3652.147949  119.999756       20.000000
7    7883.384033    4211.236084  136.592285  7883.384033    0.010000  4211.236084  3652.147949   20.000000      -80.000000
8    8083.386475    4311.236328  136.592285  8083.386475  220.002441  4311.236328  3652.150391  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:33]  --------------------------------------------------------------------------------
[08/23 17:23:33]  Iteration: 17 (0 solution, 16 counterexamples)
[08/23 17:23:34]  Generator returned sat in 0.121154 secs.
[08/23 17:23:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:23:34]  Improved number of small numbers from 95 to 99 out of a max of 99
[08/23 17:23:34]  Verifer returned sat in 0.176771 secs.
[08/23 17:23:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6985.383789    3609.235596  136.592041  6985.383789    0.098145  3609.235596  3354.147705   22.000488       20.000000
1    6985.383789    3611.236084  136.592041  6985.383789    0.002686  3611.236084  3354.147705   20.000000      -80.000000
2    7065.383789    3711.236084  136.592041  7065.383789  100.000000  3711.236084  3354.147705    0.000000     -100.000000
3    7285.381348    3911.235840  136.592041  7285.381348  219.997559  3911.235840  3354.147705   19.997803       19.997559
4    7568.383789    3992.233154  136.592041  7568.383789  303.000244  3992.233154  3537.147705   39.002930       20.000000
5    7568.383789    4028.236084  136.592285  7568.383789    0.010000  4028.236084  3537.147705    3.000000      -79.999756
6    7883.383789    4111.236328  136.592285  7883.383789  318.000000  4111.236328  3652.147949  119.999512       20.000000
7    7883.383789    4211.235840  136.592285  7883.383789    0.010000  4211.235840  3652.147949   20.000000      -80.000000
8    8083.386475    4311.236084  136.592285  8083.386475  220.002686  4311.236084  3652.150635  119.999756       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:34]  --------------------------------------------------------------------------------
[08/23 17:23:34]  Iteration: 18 (0 solution, 17 counterexamples)
[08/23 17:23:35]  Generator returned sat in 0.622417 secs.
[08/23 17:23:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:35]  Improved gap from 0.049072265625 to 100
[08/23 17:23:36]  Improved number of small numbers from 77 to 92 out of a max of 100
[08/23 17:23:36]  Verifer returned sat in 0.519892 secs.
[08/23 17:23:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7122.285645    3511.236084  136.592285  7122.285645    0.097900  3511.236084  3511.000488  100.049072        0.049072
1    7122.285645    3611.236084  136.592285  7122.285645    0.049072  3611.236084  3511.000488    0.049072      -99.950928
2    7222.236572    3711.236084  136.592285  7222.236572  100.000000  3711.236084  3511.000488    0.000000     -100.000000
3    7442.285400    3858.602295  136.592285  7442.285400  220.048828  3858.602295  3511.049316   72.633789       20.000000
4    7542.334717    3975.935465  136.592285  7542.334717  172.683105  3975.935465  3511.098633   55.300618       20.000000
5    7668.383789    4111.236084  136.592285  7668.383789  181.349691  4111.236084  3537.147705   20.000000       20.000000
6    7847.383789    4211.236084  136.592285  7847.383789  199.000000  4211.236084  3616.147705   20.000000       20.000000
7    8002.700684    4280.135878  136.592285  8002.700684  175.316895  4280.135878  3671.464600   51.100206       20.000000
8    8102.700684    4311.236084  136.592285  8102.700684  151.100206  4311.236084  3671.464600  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=4.[0m
[08/23 17:23:36]  --------------------------------------------------------------------------------
[08/23 17:23:36]  Iteration: 19 (0 solution, 18 counterexamples)
[08/23 17:23:36]  Generator returned sat in 0.068065 secs.
[08/23 17:23:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:23:36]  Improved gap from 0.0 to 0
[08/23 17:23:37]  Improved number of small numbers from 45 to 100 out of a max of 100
[08/23 17:23:37]  Verifer returned sat in 0.241291 secs.
[08/23 17:23:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    7402.187744    3891.187012 -123.407715  7402.187744    0.097656  3891.187012  3511.000488   0.000244        0.000244
1    7522.236328    3991.187012 -123.407715  7522.236328  120.048828  3991.187012  3511.049316  20.000000       20.000000
2    7522.236328    3991.187256  -43.407715  7522.236328   19.999756  3991.187256  3511.049316  19.999756        0.000000
3    7622.285400    4109.687256  -43.407715  7622.285400  120.048828  4109.687256  3511.049316   1.548828        0.049072
4    7622.285400    4111.187012   56.543213  7622.285400    1.500000  4111.187012  3511.049316   0.049072        0.000000
5    7623.736328    4111.236084  155.092041  7623.736328    1.500000  4111.236084  3511.049316   1.450928       -0.000244
6    7623.785400    4112.687256  255.043213  7623.785400    1.500000  4112.687256  3511.049316   0.048828        0.000000
7    7625.236572    4112.736084  353.592041  7625.236572    1.500000  4112.736084  3511.049316   1.451172        0.000000
8    7625.285400    4114.187256  353.592285  7625.285400    1.500000  4114.187256  3511.049316   0.048828      -99.950928
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:23:37]  --------------------------------------------------------------------------------
[08/23 17:23:37]  Iteration: 20 (0 solution, 19 counterexamples)
[08/23 17:23:43]  Generator returned sat in 5.789975 secs.
[08/23 17:23:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:23:43]  Improved gap from 0.0 to 21.875
[08/23 17:23:44]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/23 17:23:44]  Verifer returned sat in 0.575413 secs.
[08/23 17:23:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t    queue_t  bottle_queue_t
0    7393.009277    3862.009033  -94.229736  7393.009277    0.097656  3862.009033  3511.000488  19.999756       19.999756
1    7473.058105    3926.044189  -94.229736  7473.058105  100.048584  3926.044189  3511.000488  36.013428        0.048584
2    7473.058105    3962.009033  -16.104736  7473.058105    0.048584  3962.009033  3511.000488   0.048584      -21.826416
3    7494.933105    3983.884033   62.020264  7494.933105   21.923584  3983.884033  3511.000488   0.048584      -21.826416
4    7554.322021    4021.446533  124.457764  7554.322021   59.437500  4021.446533  3511.000488  21.875000        0.000000
5    7578.648193    4043.321533  200.131592  7578.648193   46.201172  4043.321533  3511.000488  24.326172        0.000000
6    7593.478271    4067.647705  278.256592  7593.478271   39.156250  4067.647705  3511.000488  14.830078       -7.044922
7    7619.030029    4089.522705  356.381592  7619.030029   40.381836  4089.522705  3511.000488  18.506836       -3.368164
8    7633.061279    4111.397705  356.381836  7633.061279   32.538086  4111.397705  3511.000488  10.663086      -89.336670
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:23:44]  --------------------------------------------------------------------------------
[08/23 17:23:44]  Iteration: 21 (0 solution, 20 counterexamples)
[08/23 17:23:46]  Generator returned sat in 1.498048 secs.
[08/23 17:23:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:46]  Improved gap from 0.0 to 100
[08/23 17:23:46]  Improved number of small numbers from 41 to 100 out of a max of 100
[08/23 17:23:46]  Verifer returned sat in 0.300297 secs.
[08/23 17:23:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    7054.909424    3543.906738  201.870117  7054.909424    0.097412  3543.906738  3511.000488    0.002197      -22.000000
1    7176.912109    3665.908936  201.870117  7176.912109  122.004883  3665.908936  3511.000488    0.002686        0.002686
2    7176.912109    3665.908936  201.870117  7176.912109    0.002686  3665.908936  3511.000488    0.002686      -99.997314
3    7376.909424    3765.909180  201.870117  7376.909424  200.000000  3765.909180  3511.000488   99.999756        0.000000
4    7496.912109    3875.908936  201.870117  7496.912109  220.002441  3875.908936  3511.003174  110.000000       20.000000
5    7496.912109    3965.908936  201.870117  7496.912109    0.010000  3965.908936  3511.003174   20.000000      -80.000000
6    7774.912109    4065.909180  201.870117  7774.912109  298.000000  4065.909180  3589.003174  119.999756       20.000000
7    7774.912109    4165.908936  201.870117  7774.912109    0.010000  4165.908936  3589.003174   20.000000      -80.000000
8    8042.912109    4265.908936  201.870117  8042.912109  288.000000  4265.908936  3657.003174  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 17:23:46]  --------------------------------------------------------------------------------
[08/23 17:23:46]  Iteration: 22 (0 solution, 21 counterexamples)
[08/23 17:23:47]  Generator returned sat in 0.656793 secs.
[08/23 17:23:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:23:48]  Improved gap from 0.0025 to 17.1875
[08/23 17:23:48]  Improved number of small numbers from 43 to 51 out of a max of 100
[08/23 17:23:48]  Verifer returned sat in 1.091452 secs.
[08/23 17:23:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6858.652100    3347.651436  201.870117  6858.652100    0.097168  3347.651436  3510.998174    0.002490      -99.997510
1    7078.652109    3547.651367  201.870117  7078.652109  220.002500  3547.651367  3511.000674   20.000068       20.000000
2    7078.652109    3547.651436  201.870117  7078.652109    0.002500  3547.651436  3511.000674   20.000000      -80.000000
3    7169.405234    3658.402061  201.870117  7169.405234  110.753125  3658.402061  3511.000674    0.002500      -89.246875
4    7378.654609    3747.651436  201.870117  7378.654609  209.251875  3747.651436  3511.003174  120.000000       20.000000
5    7378.654609    3867.648936  243.371367  7378.654609    0.010000  3867.648936  3511.003174    0.002500      -38.498750
6    7537.155859    3906.150391  243.371367  7537.155859  158.503750  3906.150391  3511.005674  119.999795       20.000000
7    7537.155859    4026.147686  305.623242  7537.155859    0.010000  4026.147686  3511.005674    0.002500      -17.748125
8    7674.906484    4043.898438  305.623242  7674.906484  137.753125  4043.898438  3511.008174  119.999873       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:49]  --------------------------------------------------------------------------------
[08/23 17:23:49]  Iteration: 23 (0 solution, 22 counterexamples)
[08/23 17:23:50]  Generator returned sat in 0.573187 secs.
[08/23 17:23:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:50]  Improved gap from 0.000625 to 15.625
[08/23 17:23:51]  Improved number of small numbers from 39 to 96 out of a max of 100
[08/23 17:23:51]  Verifer returned sat in 0.924635 secs.
[08/23 17:23:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6984.038818    3353.038086  201.870117  6984.038818    0.097168  3353.038086  3511.000732  120.000000       20.000000
1    7084.036377    3553.038086  201.870117  7084.036377  219.997559  3553.038086  3511.000732   19.997559       19.997559
2    7164.041504    3553.038311  201.870117  7164.041504  100.002686  3553.038311  3511.000732  100.002461        0.002686
3    7164.041504    3653.038086  201.870117  7164.041504   72.002441  3653.038086  3511.000732    0.002686      -99.997314
4    7384.041260    3753.038311  201.870117  7384.041260  220.002441  3753.038311  3511.003174  119.999775       20.000000
5    7384.041260    3873.035889  243.866211  7384.041260    0.010000  3873.035889  3511.003174    0.002197      -38.003906
6    7542.047852    3911.042236  243.866211  7542.047852  158.008789  3911.042236  3511.005859  119.999756       20.000000
7    7542.047852    4028.273193  311.010010  7542.047852    0.010000  4028.273193  3511.005859    2.768799      -12.856201
8    7674.906494    4143.898193  311.010010  7674.906494  135.627441  4143.898193  3511.008301   20.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:51]  --------------------------------------------------------------------------------
[08/23 17:23:51]  Iteration: 24 (0 solution, 23 counterexamples)
[08/23 17:23:52]  Generator returned sat in 1.251971 secs.
[08/23 17:23:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:53]  Improved gap from 17.000625 to 15.625
[08/23 17:23:54]  Improved number of small numbers from 40 to 67 out of a max of 100
[08/23 17:23:54]  Verifer returned sat in 1.234444 secs.
[08/23 17:23:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    6658.048340    3147.047607  407.858643  6658.048340    0.097168  3147.047607  3511.000732    0.000000      -99.999697
1    6758.050781    3247.047607  407.858643  6758.050781  100.002441  3247.047607  3511.000732    0.002441      -99.997256
2    6978.045898    3347.047461  407.858643  6978.045898  219.997559  3347.047461  3511.000732  119.997705       19.997861
3    6978.045898    3467.042480  407.858643  6978.045898   84.019775  3467.042480  3511.000732    0.002686      -80.002139
4    7178.050537    3547.047461  407.858643  7178.050537  200.007324  3547.047461  3511.003232  119.999844       20.000000
5    7178.050537    3667.044961  449.859736  7178.050537    0.010000  3667.044961  3511.003232    0.002344      -37.998906
6    7336.051943    3789.421387  449.859736  7336.051943  158.003750  3789.421387  3511.005732   35.624824       20.000000
7    7336.051943    3822.292461  516.988486  7336.051943    0.010000  3822.292461  3511.005732    2.753750      -12.871250
8    7468.925693    3837.917480  516.988486  7468.925693  135.627500  3837.917480  3511.008232  119.999980       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:23:54]  --------------------------------------------------------------------------------
[08/23 17:23:54]  Iteration: 25 (0 solution, 24 counterexamples)
[08/23 17:23:55]  Generator returned sat in 0.779317 secs.
[08/23 17:23:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:55]  Improved gap from 0.0025 to 100
[08/23 17:23:55]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:23:55]  Verifer returned sat in 0.211855 secs.
[08/23 17:23:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    1197.759766    1197.759766  449.821045  1197.759766     0.097168  1197.759766     0.000000    0.000000     -100.000000
1    1297.808350    1297.759766  449.821045  1297.808350   100.048584  1297.759766     0.000000    0.048584      -99.951416
2    1497.759521    1497.759521  449.821045  1497.759521   199.999756  1497.759521     0.000000    0.000000       -0.000244
3    5432.314209    1497.759766  449.821045  5432.314209  3934.554688  1497.759766  3814.554443  120.000000       20.000000
4    7278.091553    1597.759766  449.821045  7278.091553  1965.777344  1597.759766  5560.331787  120.000000       20.000000
5    8139.480225    1697.759766  449.821045  8139.480225   981.388672  1697.759766  6321.720459  120.000000       20.000000
6    8508.674561    1797.759766  449.821045  8508.674561   489.194336  1797.759766  6590.914795  120.000000       20.000000
7    8631.771729    1997.759766  449.821045  8631.771729   243.097168  1997.759766  6614.011963   20.000000       20.000000
8    8731.820312    1997.759766  449.821045  8731.820312   120.048584  1997.759766  6614.060547  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:23:56]  --------------------------------------------------------------------------------
[08/23 17:23:56]  Iteration: 26 (0 solution, 25 counterexamples)
[08/23 17:23:56]  Generator returned sat in 0.083820 secs.
[08/23 17:23:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:56]  Improved number of small numbers from 93 to 93 out of a max of 99
[08/23 17:23:56]  Verifer returned sat in 0.193330 secs.
[08/23 17:23:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0    1227.982422    1227.982422  449.821045  1227.982422     0.097168  1227.982422     0.000000    0.000000     -100.000000
1    1328.031006    1327.982422  449.821045  1328.031006   100.048584  1327.982422     0.000000    0.048584      -99.951416
2    1497.759521    1497.759521  449.821045  1497.759521   169.777100  1497.759521     0.000000    0.000000      -30.222900
3    5462.536865    1527.982422  449.821045  5462.536865  3964.777344  1527.982422  3814.554443  120.000000       20.000000
4    7322.925537    1627.982422  449.821045  7322.925537  1980.388672  1627.982422  5574.943115  120.000000       20.000000
5    8191.119873    1727.982422  449.821045  8191.119873   988.194336  1727.982422  6343.137451  120.000000       20.000000
6    8563.217041    1827.982422  449.821045  8563.217041   492.097168  1827.982422  6615.234619  120.000000       20.000000
7    8687.265625    2027.982422  449.821045  8687.265625   244.048584  2027.982422  6639.283203   20.000000       20.000000
8    8787.289917    2027.982422  449.821045  8787.289917   120.024292  2027.982422  6639.307495  120.000000       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 17:23:57]  --------------------------------------------------------------------------------
[08/23 17:23:57]  Iteration: 27 (0 solution, 26 counterexamples)
[08/23 17:23:57]  Generator returned sat in 0.108560 secs.
[08/23 17:23:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:23:57]  Improved gap from 0.00125 to 0
[08/23 17:23:58]  Improved number of small numbers from 59 to 75 out of a max of 100
[08/23 17:23:58]  Verifer returned sat in 0.559309 secs.
[08/23 17:23:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5242.534180    5142.533203 -3464.729736  5242.534180    0.097168  5142.533203    0.00000  100.000977        0.001221
1    5242.534180    5242.533115 -3364.731143  5242.534180    0.001250  5242.533115    0.00000    0.001064       -0.000186
2    5362.535615    5342.534365 -3364.731143  5362.535615  120.002500  5342.534365    0.00125   20.000000       20.000000
3    5462.536865    5342.534424 -3364.731143  5462.536865  120.001250  5342.534424    0.00250  119.999941       20.000000
4    5462.536865    5462.533115 -3284.738525  5462.536865    0.010000  5462.533115    0.00250    0.001250       -0.007383
5    5462.545615    5462.541865 -3184.747314  5462.545615    0.010000  5462.541865    0.00250    0.001250       -0.007422
6    5462.554365    5462.550615 -3084.756104  5462.554365    0.010000  5462.550615    0.00250    0.001250       -0.007461
7    5462.563115    5462.559365 -2984.757568  5462.563115    0.010000  5462.559365    0.00250    0.001250       -0.000176
8    5462.571865    5462.560791 -2984.757324  5462.571865    0.010000  5462.560791    0.00250    0.008574      -99.991182
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:23:58]  --------------------------------------------------------------------------------
[08/23 17:23:58]  Iteration: 28 (0 solution, 27 counterexamples)
[08/23 17:24:00]  Generator returned sat in 2.075498 secs.
[08/23 17:24:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:24:01]  Improved gap from 0.00125 to 1.5625
[08/23 17:24:01]  Improved number of small numbers from 59 to 100 out of a max of 100
[08/23 17:24:01]  Verifer returned sat in 0.528273 secs.
[08/23 17:24:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5141.559326    5121.559326 -3343.756104  5141.559326    0.097168  5121.559326        0.0  20.000000       20.000000
1    5141.559326    5121.559570 -3343.756104  5141.559326    0.048340  5121.559570        0.0  19.999756      -80.000000
2    5320.045654    5319.996826 -3343.756104  5320.045654  198.486084  5319.996826        0.0   0.048828       -1.513672
3    5321.983154    5321.559326 -3245.318848  5321.983154    1.986328  5321.559326        0.0   0.423828       -1.138916
4    5323.531982    5323.483438 -3147.242920  5323.531982    1.972656  5323.483438        0.0   0.048545       -1.514160
5    5325.428750    5325.380371 -3049.139648  5325.428750    1.945312  5325.380371        0.0   0.048379       -1.514121
6    5327.270996    5327.222168 -2950.981445  5327.270996    1.890625  5327.222168        0.0   0.048828       -1.513672
7    5329.003418    5328.784912 -2852.544189  5329.003418    1.781250  5328.784912        0.0   0.218506       -1.343994
8    5330.347412    5330.347412 -2852.543945  5330.347412    1.562500  5330.347412        0.0   0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:24:01]  --------------------------------------------------------------------------------
[08/23 17:24:01]  Iteration: 29 (0 solution, 28 counterexamples)
[08/23 17:24:05]  Generator returned sat in 3.566817 secs.
[08/23 17:24:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:05]  Improved gap from 0.024169921875 to 3.125
[08/23 17:24:06]  Improved number of small numbers from 75 to 100 out of a max of 100
[08/23 17:24:06]  Verifer returned sat in 0.257613 secs.
[08/23 17:24:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5141.559326    5121.559082 -3347.232910  5141.559326    0.096924  5121.559082    0.00000  20.000244       16.523193
1    5141.559326    5125.036133 -3347.232910  5141.559326    0.048340  5125.036133    0.00000  16.523193      -83.476807
2    5225.060303    5225.036377 -3347.232910  5225.060303  100.024170  5225.036377    0.00000   0.023926      -99.975830
3    5346.685547    5343.560547 -3268.882324  5346.685547  121.649170  5343.560547    0.00000   3.125000        0.000000
4    5466.709717    5383.310312 -3268.882324  5466.709717  123.149170  5383.310312    0.02417  83.375234       20.000000
5    5466.709717    5463.560547 -3188.882324  5466.709717    0.500000  5463.560547    0.02417   3.125000        0.000000
6    5466.709717    5466.685547 -3092.357910  5466.709717    2.000000  5466.685547    0.02417   0.000000       -3.475586
7    5470.209717    5470.161133 -2995.482910  5470.209717    3.500000  5470.161133    0.02417   0.024414       -3.100586
8    5475.185303    5473.286377 -2995.482910  5475.185303    5.000000  5473.286377    0.02417   1.874756      -98.125000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:06]  --------------------------------------------------------------------------------
[08/23 17:24:06]  Iteration: 30 (0 solution, 29 counterexamples)
[08/23 17:24:07]  Generator returned sat in 0.578444 secs.
[08/23 17:24:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:07]  Improved gap from 0.02423095703125 to 9.375
[08/23 17:24:07]  Improved number of small numbers from 58 to 100 out of a max of 100
[08/23 17:24:07]  Verifer returned sat in 0.462068 secs.
[08/23 17:24:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5066.685547    4946.685547 -3268.882568  5066.685547    0.096680  4946.685547    0.00000  120.000000       20.000000
1    5066.685547    5046.685547 -3268.882568  5066.685547    0.048584  5046.685547    0.00000   20.000000      -80.000000
2    5266.733887    5146.685547 -3268.882568  5266.733887  220.048340  5146.685547    0.04834  120.000000       20.000000
3    5353.733887    5346.685547 -3268.882568  5353.733887  207.000000  5346.685547    0.04834    7.000000        7.000000
4    5451.733887    5397.637207 -3268.882568  5451.733887  105.000000  5397.637207    0.04834   54.048340        5.000000
5    5451.733887    5449.713623 -3181.285645  5451.733887   54.000000  5449.713623    0.04834    1.971924       -7.403076
6    5478.261963    5462.415039 -3100.410645  5478.261963   28.500000  5462.415039    0.04834   15.798584        0.000000
7    5478.261963    5478.213623 -3009.785645  5478.261963   15.750000  5478.213623    0.04834    0.000000       -9.375000
8    5487.636963    5487.588623 -3009.785645  5487.636963    9.375000  5487.588623    0.04834    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:24:08]  --------------------------------------------------------------------------------
[08/23 17:24:08]  Iteration: 31 (0 solution, 30 counterexamples)
[08/23 17:24:10]  Generator returned sat in 2.341938 secs.
[08/23 17:24:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:24:11]  Improved gap from 0.0 to 1.5625
[08/23 17:24:11]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:24:11]  Verifer returned sat in 0.288892 secs.
[08/23 17:24:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5066.685547    4946.709717 -3268.882568  5066.685547    0.096680  4946.709717    0.00000  119.97583        19.97583
1    5066.685547    5046.709717 -3268.882568  5066.685547    0.048584  5046.709717    0.00000   19.97583       -80.02417
2    5266.733887    5146.709717 -3268.882568  5266.733887  220.024170  5146.709717    0.02417  120.00000        20.00000
3    5306.258057    5306.209717 -3268.882568  5306.258057  159.524170  5306.209717    0.02417    0.02417       -40.47583
4    5466.758057    5446.709717 -3268.882568  5466.758057  160.524170  5446.709717    0.04834   20.00000        20.00000
5    5466.758057    5446.709717 -3188.882568  5466.758057    0.500000  5446.709717    0.04834   20.00000         0.00000
6    5466.758057    5466.709717 -3090.445068  5466.758057    1.500000  5466.709717    0.04834    0.00000        -1.56250
7    5469.258057    5468.272217 -2992.007568  5469.258057    2.500000  5468.272217    0.04834    0.93750        -0.62500
8    5471.820557    5469.834717 -2893.945068  5471.820557    3.500000  5469.834717    0.04834    1.93750         0.00000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:11]  --------------------------------------------------------------------------------
[08/23 17:24:11]  Iteration: 32 (0 solution, 31 counterexamples)
[08/23 17:24:12]  Generator returned sat in 0.885921 secs.
[08/23 17:24:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:24:13]  Improved gap from 0.0482177734375 to 7.8125
[08/23 17:24:13]  Improved number of small numbers from 48 to 71 out of a max of 100
[08/23 17:24:13]  Verifer returned sat in 0.685616 secs.
[08/23 17:24:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5225.381104    5105.381348 -3268.882812  5225.381104    0.096191  5105.381348        0.0  119.999756       19.999863
1    5225.381104    5205.381348 -3268.882812  5225.381104    0.048340  5205.381348        0.0   19.999756      -80.000137
2    5405.381104    5307.333008 -3268.882812  5405.381104  199.999756  5307.333008        0.0   98.048096       -0.000137
3    5505.429443    5505.381241 -3268.882812  5505.429443  198.096436  5505.381241        0.0    0.048203        0.048203
4    5605.429459    5554.356934 -3268.882812  5605.429459  100.048218  5554.356934        0.0   51.072525        0.048218
5    5605.429459    5605.381241 -3176.695557  5605.429459   51.024109  5605.381241        0.0    0.048218       -7.764526
6    5631.893295    5617.589111 -3095.394867  5631.893295   26.512054  5617.589111        0.0   14.304184        0.000000
7    5631.893295    5631.893295 -3003.207367  5631.893295   14.256027  5631.893295        0.0    0.000000       -7.812500
8    5640.021309    5639.705811 -2911.020020  5640.021309    8.128014  5639.705811        0.0    0.315498       -7.497139
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:24:13]  --------------------------------------------------------------------------------
[08/23 17:24:13]  Iteration: 33 (0 solution, 32 counterexamples)
[08/23 17:24:16]  Generator returned sat in 1.894752 secs.
[08/23 17:24:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:16]  Improved gap from 0.0 to 21.875
[08/23 17:24:16]  Improved number of small numbers from 61 to 100 out of a max of 100
[08/23 17:24:16]  Verifer returned sat in 0.399511 secs.
[08/23 17:24:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5421.116699    5421.068604 -3484.570557  5421.116699   0.096191  5421.068604        0.0   0.048096        0.047852
1    5491.650391    5491.650391 -3484.570312  5491.650391  70.581787  5491.650391        0.0   0.000000      -29.418213
2    5521.116699    5521.068604 -3406.445312  5521.116699  29.466309  5521.068604        0.0   0.048096      -21.826904
3    5542.991699    5542.943604 -3328.320557  5542.991699  21.923096  5542.943604        0.0   0.048096      -21.827148
4    5605.381104    5581.054199 -3268.882812  5605.381104  62.437500  5581.054199        0.0  24.326904        0.000000
5    5627.256104    5605.381104 -3190.757812  5627.256104  46.201904  5605.381104        0.0  21.875000        0.000000
6    5649.037354    5627.256104 -3112.632812  5649.037354  43.656250  5627.256104        0.0  21.781250       -0.093750
7    5670.912354    5649.131348 -3034.508057  5670.912354  43.656250  5649.131348        0.0  21.781006       -0.093994
8    5684.669922    5671.006348 -3034.508057  5684.669922  35.538574  5671.006348        0.0  13.663574      -86.336426
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:24:17]  --------------------------------------------------------------------------------
[08/23 17:24:17]  Iteration: 34 (0 solution, 33 counterexamples)
[08/23 17:24:18]  Generator returned sat in 0.668460 secs.
[08/23 17:24:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:24:18]  Improved gap from 20.396077473958332 to 21.875
[08/23 17:24:19]  Improved number of small numbers from 65 to 75 out of a max of 100
[08/23 17:24:19]  Verifer returned sat in 0.796417 secs.
[08/23 17:24:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5108.078125    5108.076641 -3113.826667  5108.078125    0.096191  5108.076641    0.00000    0.001484      -99.998516
1    5286.201641    5286.201416 -3113.826667  5286.201641  178.125000  5286.201416    0.00000    0.000225      -21.875000
2    5408.076416    5308.076641 -3113.826667  5408.076416  121.875000  5308.076641    0.00000   99.999775       -0.000225
3    5508.076641    5453.410807 -3113.826667  5508.076641  200.000000  5453.410807    0.00000   54.665833        0.000000
4    5628.077891    5508.076641 -3113.826667  5628.077891  174.667083  5508.076641    0.00125  120.000000       20.000000
5    5628.077891    5628.075391 -3075.823542  5628.077891    0.010000  5628.075391    0.00125    0.001250      -41.996875
6    5790.076016    5670.073730 -3075.823542  5790.076016  161.999375  5670.073730    0.00250  119.999785       20.000000
7    5790.076016    5787.829141 -3015.454167  5790.076016    0.010000  5787.829141    0.00250    2.244375      -19.630625
8    5929.707891    5909.704102 -3015.454167  5929.707891  141.876250  5909.704102    0.00375   20.000039       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:24:19]  --------------------------------------------------------------------------------
[08/23 17:24:19]  Iteration: 35 (0 solution, 34 counterexamples)
[08/23 17:24:20]  Generator returned sat in 0.654164 secs.
[08/23 17:24:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:20]  Improved gap from 0.0007421875 to 1.5625
[08/23 17:24:21]  Improved number of small numbers from 47 to 65 out of a max of 100
[08/23 17:24:21]  Verifer returned sat in 0.677878 secs.
[08/23 17:24:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5108.077881    5108.076416 -3013.826667  5108.077881    0.095947  5108.076416   0.000000    0.001465        0.001240
1    5228.074951    5208.076416 -3013.826667  5228.074951  119.998535  5208.076416   0.000000   19.998535       19.998311
2    5328.074951    5208.076641 -3013.826667  5328.074951  119.998535  5208.076641   0.000000  119.998311       19.998311
3    5428.075156    5308.076641 -3013.826667  5428.075156  219.998516  5308.076641   0.000000  119.998516       19.998516
4    5529.575156    5508.076416 -3013.826667  5529.575156  221.498516  5508.076416   1.498516   20.000225       20.000000
5    5529.575156    5526.513916 -2933.826667  5529.575156    0.010000  5526.513916   1.498516    1.562725        0.000000
6    5529.575156    5528.076641 -2835.389167  5529.575156    1.510000  5528.076641   1.498516    0.000000       -1.562500
7    5532.585156    5529.639141 -2736.951667  5532.585156    3.010000  5529.639141   1.498516    1.447500       -0.115000
8    5535.647656    5531.201660 -2736.951667  5535.647656    4.510000  5531.201660   1.498516    2.947480      -97.052500
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:21]  --------------------------------------------------------------------------------
[08/23 17:24:21]  Iteration: 36 (0 solution, 35 counterexamples)
[08/23 17:24:23]  Generator returned sat in 1.785256 secs.
[08/23 17:24:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:23]  Improved gap from 0.0479736328125 to 9.375
[08/23 17:24:24]  Improved number of small numbers from 48 to 100 out of a max of 100
[08/23 17:24:24]  Verifer returned sat in 0.328593 secs.
[08/23 17:24:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5265.565674    5145.565918 -3151.315674  5265.565674    0.095703  5145.565918   0.000000  119.999756       20.000000
1    5336.190918    5336.190918 -3151.315674  5336.190918  190.625000  5336.190918   0.000000    0.000000       -9.374756
2    5345.565918    5345.565674 -3060.690918  5345.565918    9.375000  5345.565674   0.000000    0.000244       -9.375000
3    5409.527100    5400.152100 -3015.277100  5409.527100   63.961426  5400.152100   0.000000    9.375000        0.000000
4    5529.574951    5509.527100 -3015.277100  5529.574951  129.422852  5509.527100   0.047852   20.000000       20.000000
5    5529.574951    5520.152100 -2935.277100  5529.574951    1.500000  5520.152100   0.047852    9.375000        0.000000
6    5529.574951    5529.527100 -2845.729248  5529.574951    4.500000  5529.527100   0.047852    0.000000      -10.452148
7    5540.074951    5539.979248 -2755.104248  5540.074951   10.500000  5539.979248   0.047852    0.047852       -9.327148
8    5562.527100    5549.354248 -2668.229492  5562.527100   22.500000  5549.354248   0.047852   13.125000       -0.000244
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:24]  --------------------------------------------------------------------------------
[08/23 17:24:24]  Iteration: 37 (0 solution, 36 counterexamples)
[08/23 17:24:25]  Generator returned sat in 0.312081 secs.
[08/23 17:24:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:24:25]  Improved gap from 0.0 to 6.25
[08/23 17:24:25]  Improved number of small numbers from 55 to 96 out of a max of 100
[08/23 17:24:25]  Verifer returned sat in 0.587117 secs.
[08/23 17:24:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5306.545410    5286.545410 -3192.295410  5306.545410    0.095459  5286.545410   0.000000  20.000000       20.000000
1    5386.545410    5386.545410 -3192.295410  5386.545410  100.000000  5386.545410   0.000000   0.000000        0.000000
2    5486.545166    5480.295178 -3192.295410  5486.545166   99.999756  5480.295178   0.000000   6.249988       -0.000244
3    5563.493746    5563.445801 -3175.445801  5563.493746   83.198568  5563.445801   0.000000   0.047945       -6.202055
4    5689.743652    5669.695801 -3175.445801  5689.743652  126.297852  5669.695801   0.047852  20.000000       20.000000
5    5689.743652    5683.445801 -3095.445801  5689.743652    1.500000  5683.445801   0.047852   6.250000        0.000000
6    5689.743652    5689.695801 -3001.695801  5689.743652    3.750000  5689.695801   0.047852   0.000000       -6.250000
7    5696.868652    5695.945801 -2907.945801  5696.868652    7.125000  5695.945801   0.047852   0.875000       -5.375000
8    5708.181152    5702.196045 -2907.945801  5708.181152   12.187500  5702.196045   0.047852   5.937256      -94.062500
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:26]  --------------------------------------------------------------------------------
[08/23 17:24:26]  Iteration: 38 (0 solution, 37 counterexamples)
[08/23 17:24:27]  Generator returned sat in 0.700917 secs.
[08/23 17:24:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:24:27]  Improved gap from 0.047944999035493825 to 12.5
[08/23 17:24:27]  Improved number of small numbers from 34 to 100 out of a max of 100
[08/23 17:24:27]  Verifer returned sat in 0.545764 secs.
[08/23 17:24:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5445.568848    5325.569092 -3269.493408  5445.568848    0.095459  5325.569092   0.000000  119.999756       20.000000
1    5445.568848    5425.569092 -3189.493408  5445.568848  119.952148  5425.569092   0.000000   19.999756        0.000000
2    5545.616943    5480.295166 -3189.493408  5545.616943  120.047852  5480.295166   0.000000   65.321777        0.048096
3    5545.616943    5545.568848 -3101.993652  5545.616943   65.273926  5545.568848   0.000000    0.048096      -12.452148
4    5678.116699    5658.069092 -3101.993652  5678.116699  132.547852  5658.069092   0.047607   20.000000       20.000000
5    5678.116699    5665.568848 -3021.993652  5678.116699    2.000000  5665.568848   0.047607   12.500244        0.000000
6    5678.116699    5678.069092 -2934.493652  5678.116699    6.000000  5678.069092   0.047607    0.000000      -12.500000
7    5692.116699    5692.021484 -2848.446045  5692.116699   14.000000  5692.021484   0.047607    0.047607      -12.452393
8    5722.069092    5704.521484 -2848.446045  5722.069092   30.000000  5704.521484   0.047607   17.500000      -82.500000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:28]  --------------------------------------------------------------------------------
[08/23 17:24:28]  Iteration: 39 (0 solution, 38 counterexamples)
[08/23 17:24:32]  Generator returned sat in 4.108744 secs.
[08/23 17:24:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:24:33]  Improved number of small numbers from 31 to 37 out of a max of 99
[08/23 17:24:33]  Verifer returned sat in 0.865005 secs.
[08/23 17:24:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5403.717529    5383.717681 -3227.642242  5403.717529    0.095215  5383.717681    0.000000   19.999848       19.999848
1    5483.717681    5383.717681 -3227.642242  5483.717681  100.000000  5383.717681    0.000000  100.000000        0.000000
2    5483.717681    5483.717681 -3227.642242  5483.717681    0.047852  5483.717681    0.000000    0.000000     -100.000000
3    5727.908599    5665.082834 -3227.642242  5727.908599  244.190918  5665.082834   24.190918   38.634847       20.000000
4    5827.956329    5731.749501 -3227.642242  5827.956329  138.682576  5731.749501   24.238647   71.968180       20.000000
5    5928.004058    5836.416168 -3227.642242  5928.004058  172.015910  5836.416168   24.286377   67.301514       20.000000
6    6035.051788    5983.717681 -3227.642242  6035.051788  174.349243  5983.717681   31.334106   20.000000       20.000000
7    6172.369211    6083.717681 -3227.642242  6172.369211  157.317424  6083.717681   68.651530   20.000000       20.000000
8    6326.353302    6183.717529 -3227.642242  6326.353302  173.984090  6183.717529  122.635620   20.000152       20.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 17:24:34]  --------------------------------------------------------------------------------
[08/23 17:24:34]  Iteration: 40 (0 solution, 39 counterexamples)
[08/23 17:24:44]  Generator returned sat in 9.436591 secs.
[08/23 17:24:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:24:44]  Improved gap from 0.047607421875 to 0
[08/23 17:24:44]  Improved number of small numbers from 55 to 100 out of a max of 100
[08/23 17:24:44]  Verifer returned sat in 0.254904 secs.
[08/23 17:24:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5507.860840    5363.717773 -3307.642334  5507.860840    0.094971  5363.717773  24.143066  120.000000       20.000000
1    5507.860840    5463.717773 -3227.642334  5507.860840  119.952393  5463.717773  24.143066   20.000000        0.000000
2    5507.860840    5483.717773 -3227.642334  5507.860840    0.047607  5483.717773  24.143066    0.000000     -100.000000
3    5727.908447    5683.717529 -3227.642334  5727.908447  220.047607  5683.717529  24.190674   20.000244       20.000000
4    5727.908447    5703.265381 -3147.642334  5727.908447    0.500000  5703.265381  24.190674    0.452393        0.000000
5    5727.956055    5703.717773 -3048.094482  5727.956055    0.500000  5703.717773  24.190674    0.047607       -0.404541
6    5728.408447    5704.170166 -2948.546875  5728.408447    0.500000  5704.170166  24.190674    0.047607       -0.404541
7    5728.860840    5704.622559 -2849.046875  5728.860840    0.500000  5704.622559  24.190674    0.047607       -0.452148
8    5729.313232    5705.122314 -2749.499512  5729.313232    0.500000  5705.122314  24.190674    0.000244       -0.452393
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:24:44]  --------------------------------------------------------------------------------
[08/23 17:24:44]  Iteration: 41 (0 solution, 40 counterexamples)
[08/23 17:24:48]  Generator returned sat in 2.720560 secs.
[08/23 17:24:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:24:48]  Improved gap from 0.02374267578125 to 3.125
[08/23 17:24:48]  Improved number of small numbers from 66 to 100 out of a max of 100
[08/23 17:24:48]  Verifer returned sat in 0.253456 secs.
[08/23 17:24:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5447.747559    5444.622803 -3081.124756  5447.747559    0.094971  5444.622803   0.000000    3.124756        3.124756
1    5447.747803    5444.622803 -2984.249756  5447.747803    3.125000  5444.622803   0.000000    3.125000        0.000000
2    5567.700439    5447.747803 -2984.249756  5567.700439  123.077637  5447.747803   0.000000  119.952637       19.952637
3    5569.920410    5569.872559 -2909.499756  5569.920410  122.172607  5569.872559   0.000000    0.047852       -3.077393
4    5693.045166    5672.997559 -2909.499756  5693.045166  123.172607  5672.997559   0.047363   20.000244       20.000000
5    5693.045166    5689.872559 -2829.499756  5693.045166    2.000000  5689.872559   0.047363    3.125244        0.000000
6    5693.045166    5692.997803 -2732.624756  5693.045166    3.000000  5692.997803   0.047363    0.000000       -3.125000
7    5697.045166    5696.122803 -2635.749756  5697.045166    4.000000  5696.122803   0.047363    0.875000       -2.250000
8    5701.170166    5699.247803 -2635.749512  5701.170166    5.000000  5699.247803   0.047363    1.875000      -98.124756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:48]  --------------------------------------------------------------------------------
[08/23 17:24:48]  Iteration: 42 (0 solution, 41 counterexamples)
[08/23 17:24:49]  Generator returned sat in 0.735937 secs.
[08/23 17:24:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:24:50]  Improved gap from 1.4525146484375 to 0
[08/23 17:24:50]  Improved number of small numbers from 61 to 100 out of a max of 100
[08/23 17:24:50]  Verifer returned sat in 0.535442 secs.
[08/23 17:24:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5447.747559    5444.622559 -3008.327148  5447.747559    0.094971  5444.622559   0.000000    3.125000        3.125000
1    5447.747559    5444.622803 -2911.452393  5447.747559    3.124756  5444.622803   0.000000    3.124756       -0.000244
2    5567.700195    5447.747803 -2911.452393  5567.700195  123.077393  5447.747803   0.000000  119.952393       19.952393
3    5647.747803    5567.295410 -2911.452393  5647.747803  200.000000  5567.295410   0.000000   80.452393        0.000000
4    5767.795410    5747.747559 -2911.452393  5767.795410  200.500000  5747.747559   0.047607   20.000244       20.000000
5    5767.795410    5766.795166 -2831.452393  5767.795410    0.500000  5766.795166   0.047607    0.952637        0.000000
6    5767.842773    5767.747803 -2731.499756  5767.842773    1.000000  5767.747803   0.047607    0.047363        0.000000
7    5769.295410    5767.795166 -2632.952393  5769.295410    1.500000  5767.795166   0.047607    1.452637        0.000000
8    5769.842773    5769.247803 -2533.500000  5769.842773    2.000000  5769.247803   0.047607    0.547363       -0.000244
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:50]  --------------------------------------------------------------------------------
[08/23 17:24:50]  Iteration: 43 (0 solution, 42 counterexamples)
[08/23 17:24:53]  Generator returned sat in 1.745629 secs.
[08/23 17:24:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:24:53]  Improved gap from 0.0474853515625 to 7.8125
[08/23 17:24:53]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/23 17:24:53]  Verifer returned sat in 0.672669 secs.
[08/23 17:24:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5474.622803    5354.622803 -2911.452393  5474.622803    0.094727  5354.622803   0.000000  120.000000       20.000000
1    5474.622803    5454.622803 -2911.452393  5474.622803  119.952637  5454.622803   0.000000   20.000000      -80.000000
2    5674.670410    5554.622803 -2911.452393  5674.670410  220.047607  5554.622803   0.047607  120.000000       20.000000
3    5773.670410    5746.280273 -2911.452393  5773.670410  219.000000  5746.280273   0.047607   27.342529       19.000000
4    5856.327881    5800.732910 -2911.452393  5856.327881  110.000000  5800.732910   0.047607   55.547363        1.657471
5    5856.327881    5854.622803 -2825.029785  5856.327881   55.500000  5854.622803   0.047607    1.657471      -11.919922
6    5882.920410    5868.200439 -2739.702393  5882.920410   28.250000  5868.200439   0.047607   14.672363        0.000000
7    5882.920410    5882.872803 -2647.514893  5882.920410   14.625000  5882.872803   0.047607    0.000000       -7.812500
8    5890.732910    5890.685303 -2647.514893  5890.732910    7.812500  5890.685303   0.047607    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:24:54]  --------------------------------------------------------------------------------
[08/23 17:24:54]  Iteration: 44 (0 solution, 43 counterexamples)
[08/23 17:24:57]  Generator returned sat in 3.153401 secs.
[08/23 17:24:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:24:58]  Improved gap from 0.0 to 6.25
[08/23 17:24:58]  Improved number of small numbers from 53 to 83 out of a max of 100
[08/23 17:24:58]  Verifer returned sat in 0.641842 secs.
[08/23 17:24:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5413.049072    5413.049072 -2889.902588  5413.049072    0.094482  5413.049072   0.000000    0.000000      -20.023926
1    5533.072754    5526.822754 -2889.902344  5533.072754  120.023682  5526.822754   0.000000    6.250000        0.000000
2    5653.096436    5533.072998 -2889.902344  5653.096436  126.273682  5533.072998   0.023682  119.999756       20.000000
3    5653.096436    5653.049086 -2870.819472  5653.096436  119.976318  5653.049086   0.023682    0.023668      -60.917128
4    5834.037245    5813.989746 -2870.819472  5834.037245  180.964478  5813.989746   0.047363   20.000136       20.000000
5    5834.037245    5827.739746 -2790.819472  5834.037245    2.000000  5827.739746   0.047363    6.250136        0.000000
6    5834.037245    5833.989882 -2697.069580  5834.037245    4.000000  5833.989882   0.047363    0.000000       -6.250109
7    5841.037245    5840.966309 -2609.295654  5841.037245    7.000000  5840.966309   0.047363    0.023573      -11.476183
8    5852.513672    5852.466064 -2609.295654  5852.513672   11.500000  5852.466064   0.047363    0.000244      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:24:58]  --------------------------------------------------------------------------------
[08/23 17:24:58]  Iteration: 45 (0 solution, 44 counterexamples)
[08/23 17:25:01]  Generator returned sat in 1.408889 secs.
[08/23 17:25:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:25:01]  Improved gap from 0.0 to 0
[08/23 17:25:01]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/23 17:25:01]  Verifer returned sat in 0.304455 secs.
[08/23 17:25:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5237.669189    5237.669189 -2794.498779  5237.669189    0.094482  5237.669189   0.000000    0.000000     -100.000000
1    5437.669189    5337.669189 -2794.498779  5437.669189  200.000000  5337.669189   0.000000  100.000000        0.000000
2    5537.669189    5537.669189 -2794.498779  5537.669189  200.000000  5537.669189   0.000000    0.000000        0.000000
3    5756.716553    5637.668945 -2794.498779  5756.716553  219.047363  5637.668945  99.047363   20.000244       20.000000
4    5756.716553    5656.716309 -2714.498779  5756.716553    1.500000  5656.716309  99.047363    0.952881        0.000000
5    5756.763672    5657.669189 -2614.545898  5756.763672    1.000000  5657.669189  99.047363    0.047119        0.000000
6    5757.716553    5657.716309 -2515.498779  5757.716553    1.000000  5657.716309  99.047363    0.952881        0.000000
7    5757.763672    5658.669189 -2415.546143  5757.763672    1.000000  5658.669189  99.047363    0.047119       -0.000244
8    5758.716553    5658.716553 -2415.545898  5758.716553    1.000000  5658.716553  99.047363    0.952637      -99.047119
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:25:01]  --------------------------------------------------------------------------------
[08/23 17:25:01]  Iteration: 46 (0 solution, 45 counterexamples)
[08/23 17:25:02]  Generator returned sat in 0.389732 secs.
[08/23 17:25:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:25:02]  Improved gap from 0.0472412109375 to 0
[08/23 17:25:03]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/23 17:25:03]  Verifer returned sat in 0.238088 secs.
[08/23 17:25:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5237.669189    5237.669189 -2794.498779  5237.669189    0.094238  5237.669189        0.0   0.000000     -100.000000
1    5437.668945    5337.669189 -2794.498779  5437.668945  199.999756  5337.669189        0.0  99.999756       -0.000244
2    5437.669189    5437.669189 -2794.498779  5437.669189  100.000000  5437.669189        0.0   0.000000     -100.000000
3    5637.668945    5636.716309 -2794.498779  5637.668945  199.999756  5636.716309        0.0   0.952637       -0.000244
4    5637.716309    5637.669189 -2695.451416  5637.716309    1.000000  5637.669189        0.0   0.047119       -0.905518
5    5638.669189    5638.622070 -2595.498779  5638.669189    1.000000  5638.622070        0.0   0.047119        0.000000
6    5639.622070    5638.669189 -2496.498779  5639.622070    1.000000  5638.669189        0.0   0.952881       -0.047119
7    5639.669189    5639.669189 -2397.498779  5639.669189    1.000000  5639.669189        0.0   0.000000       -1.000000
8    5640.669189    5640.669189 -2397.498779  5640.669189    1.000000  5640.669189        0.0   0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:25:03]  --------------------------------------------------------------------------------
[08/23 17:25:03]  Iteration: 47 (0 solution, 46 counterexamples)
[08/23 17:25:06]  Generator returned sat in 2.959133 secs.
[08/23 17:25:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:07]  Improved gap from 0.00125 to 0
[08/23 17:25:07]  Improved number of small numbers from 85 to 94 out of a max of 100
[08/23 17:25:07]  Verifer returned sat in 0.349904 secs.
[08/23 17:25:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5237.668945    5237.668945 -2794.498535  5237.668945    0.093994  5237.668945        0.0    0.000000     -100.000000
1    5437.668701    5437.667725 -2794.498535  5437.668701  199.999756  5437.667725        0.0    0.000977       -0.000244
2    5437.670410    5437.668945 -2794.498535  5437.670410    0.002686  5437.668945        0.0    0.001465      -99.998535
3    5637.668945    5537.668945 -2794.498535  5637.668945  200.000000  5537.668945        0.0  100.000000        0.000000
4    5938.168945    5737.668701 -2794.498535  5938.168945  400.500000  5737.668701      180.5   20.000244       20.000000
5    5938.168945    5737.668945 -2714.498535  5938.168945    0.010000  5737.668945      180.5   20.000000        0.000000
6    5938.168945    5757.668945 -2616.037109  5938.168945    0.520000  5757.668945      180.5    0.000000       -1.538574
7    5939.708945    5759.207695 -2516.038574  5939.708945    1.540000  5759.207695      180.5    0.001250       -0.000039
8    5943.287695    5762.787598 -2516.038574  5943.287695    3.580000  5762.787598      180.5    0.000098      -96.421289
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:25:07]  --------------------------------------------------------------------------------
[08/23 17:25:07]  Iteration: 48 (0 solution, 47 counterexamples)
[08/23 17:25:08]  Generator returned sat in 0.670164 secs.
[08/23 17:25:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:09]  Improved gap from 0.0005029296875 to 0
[08/23 17:25:09]  Improved number of small numbers from 76 to 100 out of a max of 100
[08/23 17:25:09]  Verifer returned sat in 0.203202 secs.
[08/23 17:25:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5237.668701    5237.668701 -2894.726562  5237.668701    0.093750  5237.668701        0.0   0.000000      -99.999756
1    5437.668457    5437.215576 -2894.726562  5437.668457  199.999756  5437.215576        0.0   0.452881        0.000000
2    5437.715576    5437.668701 -2894.726562  5437.715576    0.500000  5437.668701        0.0   0.046875      -99.952881
3    5657.621582    5637.668457 -2894.726562  5657.621582  219.952881  5637.668457        0.0  19.953125       19.953125
4    5657.621582    5657.074463 -2814.679688  5657.621582    0.500000  5657.074463        0.0   0.547119        0.000000
5    5657.621582    5657.621582 -2715.132812  5657.621582    0.500000  5657.621582        0.0   0.000000       -0.453125
6    5658.121582    5658.074707 -2615.585693  5658.121582    0.500000  5658.074707        0.0   0.046875       -0.406006
7    5658.574707    5658.527832 -2516.038818  5658.574707    0.500000  5658.527832        0.0   0.046875       -0.406006
8    5659.027832    5658.980713 -2416.491699  5659.027832    0.500000  5658.980713        0.0   0.047119       -0.405762
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:25:09]  --------------------------------------------------------------------------------
[08/23 17:25:09]  Iteration: 49 (0 solution, 48 counterexamples)
[08/23 17:25:11]  Generator returned sat in 1.677341 secs.
[08/23 17:25:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:25:12]  Improved gap from 0.0025 to 0
[08/23 17:25:12]  Improved number of small numbers from 63 to 77 out of a max of 100
[08/23 17:25:12]  Verifer returned sat in 0.586773 secs.
[08/23 17:25:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    5337.663818    5337.663574 -2915.122803  5337.663818    0.093750  5337.663574     0.0000   0.000244       -0.002373
1    5337.666260    5337.666260 -2915.122803  5337.666260    0.002686  5337.666260     0.0000   0.000000      -99.999932
2    5484.001221    5437.666201 -2861.458008  5484.001221  146.334961  5437.666201     0.0000  46.335020       -0.000176
3    5517.676201    5517.163701 -2795.132812  5517.676201   80.010000  5517.163701     0.0000   0.512500        0.000000
4    5637.678701    5617.676025 -2795.132812  5637.678701  120.515000  5617.676025     0.0025  20.000176       20.000000
5    5637.678701    5637.163701 -2715.132812  5637.678701    0.010000  5637.163701     0.0025   0.512500        0.000000
6    5637.681201    5637.676201 -2616.402588  5637.681201    0.515000  5637.676201     0.0025   0.002500       -1.267275
7    5638.951201    5638.946201 -2516.915312  5638.951201    1.272500  5638.946201     0.0025   0.002500       -0.510000
8    5641.357451    5639.458740 -2516.915283  5641.357451    2.408750  5639.458740     0.0025   1.896211      -98.103721
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:25:12]  --------------------------------------------------------------------------------
[08/23 17:25:12]  Iteration: 50 (0 solution, 49 counterexamples)
[08/23 17:25:19]  Generator returned sat in 5.960664 secs.
[08/23 17:25:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:25:20]  Improved gap from 0.0 to 6.25
[08/23 17:25:20]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/23 17:25:20]  Verifer returned sat in 0.700010 secs.
[08/23 17:25:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4731.615723    4711.615723 -2795.132812  4731.615723    0.093506  4711.615723   0.000000   20.000000       20.000000
1    4831.568848    4811.615723 -2795.132812  4831.568848  119.953125  4811.615723   0.000000   19.953125       19.953125
2    4931.662598    4816.568848 -2795.132812  4931.662598  120.046875  4816.568848   0.046875  115.046875       20.000000
3    5031.615723    5010.865723 -2795.132812  5031.615723  215.000000  5010.865723   0.046875   20.703125       19.953125
4    5117.912598    5064.819092 -2795.132812  5117.912598  107.000000  5064.819092   0.046875   53.046631        6.250000
5    5117.912598    5111.615967 -2701.383057  5117.912598   53.000000  5111.615967   0.046875    6.249756       -0.000244
6    5137.662842    5137.569092 -2627.336182  5137.662842   26.000000  5137.569092   0.046875    0.046875       -6.203125
7    5150.115967    5143.819092 -2533.586182  5150.115967   12.500000  5143.819092   0.046875    6.250000        0.000000
8    5150.115967    5150.069092 -2533.585938  5150.115967    5.750000  5150.069092   0.046875    0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:25:20]  --------------------------------------------------------------------------------
[08/23 17:25:20]  Iteration: 51 (0 solution, 50 counterexamples)
[08/23 17:25:22]  Generator returned sat in 0.889618 secs.
[08/23 17:25:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:22]  Improved gap from 6.25 to 6.25
[08/23 17:25:22]  Improved number of small numbers from 82 to 98 out of a max of 100
[08/23 17:25:22]  Verifer returned sat in 0.579762 secs.
[08/23 17:25:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4731.615723    4731.568848 -2795.133057  4731.615723    0.093262  4731.568848        0.0    0.046875        0.000000
1    4731.615723    4731.615723 -2795.133057  4731.615723    0.046631  4731.615723        0.0    0.000000     -100.000000
2    4951.568848    4850.072754 -2795.133057  4951.568848  219.953125  4850.072754        0.0  101.496094       19.953125
3    5051.568848    5031.615723 -2795.133057  5051.568848  201.496094  5031.615723        0.0   19.953125       19.953125
4    5132.363770    5082.036377 -2795.133057  5132.363770  100.748047  5082.036377        0.0   50.327393        0.748047
5    5132.410400    5132.363770 -2702.131104  5132.410400   50.374023  5132.363770        0.0    0.046631       -6.203369
6    5157.550781    5151.300537 -2621.068115  5157.550781   25.187012  5151.300537        0.0    6.250244        0.000000
7    5163.894043    5157.550781 -2527.411377  5163.894043   12.593506  5157.550781        0.0    6.343262        0.000000
8    5163.894043    5163.894043 -2433.661621  5163.894043    6.296753  5163.894043        0.0    0.000000       -6.250244
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 17:25:23]  --------------------------------------------------------------------------------
[08/23 17:25:23]  Iteration: 52 (0 solution, 51 counterexamples)
[08/23 17:25:25]  Generator returned sat in 1.701746 secs.
[08/23 17:25:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:25:25]  Improved gap from 0.0001220703125 to 0
[08/23 17:25:26]  Improved number of small numbers from 76 to 84 out of a max of 100
[08/23 17:25:26]  Verifer returned sat in 0.529913 secs.
[08/23 17:25:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    4731.615234    4731.615234 -2795.132812  4731.615234    0.093262  4731.615234    0.00000   0.000000       -0.000244
1    4731.616699    4731.615479 -2695.134062  4731.616699    0.001465  4731.615479    0.00000   0.001221       -0.000029
2    4851.617979    4771.280518 -2695.134062  4851.617979  120.002500  4771.280518    0.00125  80.336211       20.000000
3    4851.617979    4851.615479 -2615.134062  4851.617979   80.335000  4851.615479    0.00125   0.001250        0.000000
4    4971.619229    4951.616699 -2615.134062  4971.619229  120.002500  4951.616699    0.00250  20.000029       20.000000
5    4971.619229    4971.615479 -2535.134277  4971.619229    0.500000  4971.615479    0.00250   0.001250       -0.000215
6    4971.867979    4971.856729 -2435.382812  4971.867979    0.250000  4971.856729    0.00250   0.008750        0.000000
7    4971.869229    4971.865479 -2335.384277  4971.869229    0.010000  4971.865479    0.00250   0.001250       -0.000215
8    4971.877979    4971.866943 -2235.392822  4971.877979    0.010000  4971.866943    0.00250   0.008535       -0.000010
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:25:26]  --------------------------------------------------------------------------------
[08/23 17:25:26]  Iteration: 53 (0 solution, 52 counterexamples)
[08/23 17:25:30]  Generator returned sat in 3.207562 secs.
[08/23 17:25:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:30]  Improved gap from 0.0 to 0
[08/23 17:25:31]  Improved number of small numbers from 65 to 83 out of a max of 100
[08/23 17:25:31]  Verifer returned sat in 0.598859 secs.
[08/23 17:25:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4631.616211    4631.615967 -2695.134062  4631.616211    0.093018  4631.615967   0.000000    0.000244        0.000107
1    4731.615967    4631.616211 -2695.134033  4731.615967  100.000000  4631.616211   0.000000   99.999756       -0.000107
2    4851.616699    4731.616211 -2695.134033  4851.616699  220.000488  4731.616211   0.000625  119.999863       20.000000
3    4851.616699    4851.615479 -2675.131875  4851.616699  119.999375  4851.615479   0.000625    0.000596      -59.997842
4    5031.615166    5011.613770 -2675.131875  5031.615166  179.999063  5011.613770   0.001250   20.000146       20.000000
5    5031.615166    5031.599541 -2595.131875  5031.615166    0.010000  5031.599541   0.001250    0.014375        0.000000
6    5031.615791    5031.613916 -2495.146484  5031.615791    0.015000  5031.613916   0.001250    0.000625       -0.013984
7    5031.637666    5031.635791 -2395.168213  5031.637666    0.022500  5031.635791   0.001250    0.000625       -0.013838
8    5031.670791    5031.650391 -2295.187744  5031.670791    0.033750  5031.650391   0.001250    0.019150       -0.000244
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:25:31]  --------------------------------------------------------------------------------
[08/23 17:25:31]  Iteration: 54 (0 solution, 53 counterexamples)
[08/23 17:25:34]  Generator returned sat in 2.536864 secs.
[08/23 17:25:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:25:34]  Improved gap from 0.00015625 to 0
[08/23 17:25:35]  Improved number of small numbers from 49 to 57 out of a max of 100
[08/23 17:25:35]  Verifer returned sat in 0.721653 secs.
[08/23 17:25:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4511.576172    4391.575869 -2555.154062  4511.576172    0.092773  4391.575869    0.000469  119.999834       19.999834
1    4511.576494    4511.575869 -2555.154062  4511.576494  120.000156  4511.575869    0.000469    0.000156      -79.999844
2    4711.576494    4591.575869 -2555.154062  4711.576494  200.000156  4591.575869    0.000625  120.000000       20.000000
3    4791.576650    4691.575869 -2555.154062  4791.576650  200.000156  4691.575869    0.000625  100.000156        0.000156
4    5091.576807    4891.575684 -2555.154062  5091.576807  400.000313  4891.575684  180.000937   20.000186       20.000000
5    5091.576807    4911.575713 -2475.154062  5091.576807    0.010000  4911.575713  180.000937    0.000156        0.000000
6    5091.596650    4911.595557 -2375.213379  5091.596650    0.020000  4911.595557  180.000937    0.000156       -0.039473
7    5091.636494    4911.635400 -2275.213867  5091.636494    0.040000  4911.635400  180.000937    0.000156       -0.000117
8    5091.716338    4911.635742 -2275.213867  5091.716338    0.080000  4911.635742  180.000937    0.079658      -99.920273
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:25:35]  --------------------------------------------------------------------------------
[08/23 17:25:35]  Iteration: 55 (0 solution, 54 counterexamples)
[08/23 17:25:39]  Generator returned unsat in 2.651035 secs.
[08/23 17:25:39]  [96mNo more solutions found[0m
[08/23 17:25:39]  Final solutions:
[08/23 17:25:39]  Took 153.046001 secs.
