[08/24 14:28:16]  --------------------------------------------------------------------------------
[08/24 14:28:16]  Iteration: 1 (0 solution, 0 counterexamples)
[08/24 14:28:16]  Generator returned sat in 0.004268 secs.
[08/24 14:28:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:16]  Improved gap from 0.0 to 100
[08/24 14:28:17]  Improved number of small numbers from 114 to 114 out of a max of 114
[08/24 14:28:17]  Verifer returned sat in 0.386761 secs.
[08/24 14:28:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0            0.0         -200.0       0.0          0.0       0.1       -200.0        0.0    200.0           200.0     7.0           -200.0            -1.0            -1
1            0.0         -100.1       0.0          0.0       0.1       -100.1        0.0    100.1           100.0     7.0           -200.0             0.0         False
2            0.0         -100.0       0.0          0.0       0.2       -100.0        0.0    100.0             0.0     8.0           -200.0             0.0         False
3            0.0            0.0       0.0          0.0       0.1          0.0        0.0      0.0          -100.0     9.0              0.0             0.0         False
4          400.2          189.0       0.0        400.2     400.2        189.0        0.2    211.0           200.0     1.0              0.0             1.0         False
5         1567.8          300.0       0.0       1567.8    1378.6        300.0     1067.8    200.0           200.0     2.0              0.0             0.0         False
6         4925.0          300.0       0.0       4925.0    3557.2        300.0     4325.0    300.0           200.0     2.0              0.0             0.0         False
7        12339.4          500.0       0.0      12339.4    7714.4        500.0    11639.4    200.0           200.0     3.0              0.0             0.0         False
8        28190.2          500.1       0.0      28190.2   16050.8        500.1    27390.2    299.9           200.0     3.0              0.0             0.0         False
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5, buffer=200.[0m
[08/24 14:28:17]  --------------------------------------------------------------------------------
[08/24 14:28:17]  Iteration: 2 (0 solution, 1 counterexamples)
[08/24 14:28:17]  Generator returned sat in 0.023390 secs.
[08/24 14:28:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:18]  Improved number of small numbers from 112 to 112 out of a max of 113
[08/24 14:28:18]  Verifer returned sat in 0.232487 secs.
[08/24 14:28:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0     3323.88250    3023.881875 -0.000244   3323.88250    0.100000  3023.881875    0.00000  300.000625           300.0     7.0      3023.881875            -1.0            -1
1     3323.88250    3023.883125 -0.000244   3323.88250  299.998125  3023.883125    0.00000  299.999375           200.0     7.0      3023.881875             0.0         False
2     3323.88250    3123.882500 -0.000244   3323.88250  299.998125  3123.882500    0.00000  200.000000           100.0     4.0      3023.881875             0.0         False
3     3323.88250    3323.882500 -0.000244   3323.88250    0.001250  3323.882500    0.00000    0.000000             0.0     4.0      3323.882500             0.0         False
4     3923.88375    3423.882500 -0.000244   3923.88375  600.001250  3423.882500    0.00125  500.000000           500.0     1.0      3323.882500             0.0         False
5     3923.88375    3457.216250 -0.000244   3923.88375    0.010000  3457.216250    0.00125  466.666250           400.0     2.0      3923.882500             0.0         False
6     4123.88500    3623.882500 -0.000244   4123.88500  666.667500  3623.882500    0.00250  500.000000           500.0     3.0      3923.882500             0.0         False
7     4123.88500    3723.882500 -0.000244   4123.88500    0.010000  3723.882500    0.00250  400.000000           400.0     4.0      4123.882500             0.0         False
8     4323.88500    3723.882500 -0.000244   4323.88500  600.000000  3723.882500    0.00250  600.000000           500.0     4.0      4123.882500             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=2, buffer=500.[0m
[08/24 14:28:18]  --------------------------------------------------------------------------------
[08/24 14:28:18]  Iteration: 3 (0 solution, 2 counterexamples)
[08/24 14:28:18]  Generator returned sat in 0.134068 secs.
[08/24 14:28:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:18]  Improved gap from 3.0 to 100
[08/24 14:28:19]  Improved number of small numbers from 72 to 114 out of a max of 114
[08/24 14:28:19]  Verifer returned sat in 0.427772 secs.
[08/24 14:28:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0    3483.783691    3123.683594 -0.000488  3483.783691     0.100098  3123.683594     0.000000  360.100098      260.100342     5.0      3123.683594            -1.0            -1
1    3483.783691    3323.483398 -0.000488  3483.783691     0.100098  3323.483398     0.000000  160.300293      160.100342     5.0      3123.683594             0.0         False
2    3483.783691    3323.683594 -0.000488  3483.783691   160.100098  3323.683594     0.000000  160.100098       60.100342     6.0      3123.683594             0.0         False
3    3483.783691    3483.783447 -0.000488  3483.783691   160.000000  3483.783447     0.000000    0.000244      -39.899658     7.0      3483.783691             0.0         False
4    3923.883301    3623.583496 -0.000488  3923.883301   440.099854  3623.583496     0.099854  300.199951      300.100098     1.0      3483.783691             1.0         False
5    4363.883301    3623.683594 -0.000488  4363.883301   740.199951  3623.683594   340.099854  400.099854      300.100098     2.0      3483.783691             0.0         False
6    5003.983398    3723.683594 -0.000488  5003.983398  1040.199951  3723.683594   880.199951  400.099854      300.100098     3.0      3483.783691             0.0         False
7    5883.983643    3823.683350 -0.000488  5883.983643  1280.100098  3823.683350  1660.200195  400.100098      300.100098     4.0      3483.783691             0.0         False
8    6964.083496    4023.683350 -0.000488  6964.083496  1480.199951  4023.683350  2640.300049  300.100098      300.100098     4.0      3483.783691             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=5, buffer=614605/2048.[0m
[08/24 14:28:19]  --------------------------------------------------------------------------------
[08/24 14:28:19]  Iteration: 4 (0 solution, 3 counterexamples)
[08/24 14:28:20]  Generator returned sat in 0.136539 secs.
[08/24 14:28:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:20]  Improved gap from 0.1 to 100
[08/24 14:28:21]  Improved number of small numbers from 37 to 41 out of a max of 114
[08/24 14:28:21]  Verifer returned sat in 1.745046 secs.
[08/24 14:28:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0    1875.683105     778.982202  2444.600659  1875.683105  100.699951   778.982202  1095.900928    0.799976        0.699976     6.0       778.982202            -1.0            -1
1    1975.583130     779.082202  2444.600659  1975.583130  100.700000   779.082202  1095.900928  100.600000        0.600000     6.0       778.982202             1.0         False
2    1975.583130     879.082202  2444.600659  1975.583130  100.500000   879.082202  1095.900928    0.600000      -99.400000     2.0       879.682202             1.0          True
3    2075.383130     979.082202  2444.600659  2075.383130  100.400000   979.082202  1095.900928    0.400000      -99.600000     1.0       979.482202             1.0         False
4    2275.783130    1079.082202  2444.600659  2275.783130  200.800000  1079.082202  1096.000928  100.700000        0.700000     1.0       979.482202             0.0         False
5    2525.883130    1179.082202  2444.600659  2525.883130  350.800000  1179.082202  1246.100928  100.700000        0.700000     2.0       979.482202             0.0         False
6    2925.983130    1279.082202  2444.600659  2925.983130  500.800000  1279.082202  1546.200928  100.700000        0.700000     2.0       979.482202             1.0          True
7    3476.083130    1479.082202  2444.600659  3476.083130  650.800000  1479.082202  1996.300928    0.700000        0.700000     1.0       979.482202             1.0          True
8    4326.183130    1479.082275  2444.600659  4326.183130  850.800000  1479.082275  2746.400928  100.699927        0.700000     2.0       979.482202             0.0         False
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=5, buffer=7/10.[0m
[08/24 14:28:22]  --------------------------------------------------------------------------------
[08/24 14:28:22]  Iteration: 5 (0 solution, 4 counterexamples)
[08/24 14:28:22]  Generator returned sat in 0.018939 secs.
[08/24 14:28:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:23]  Improved gap from 0.0 to 100
[08/24 14:28:23]  Improved number of small numbers from 34 to 114 out of a max of 114
[08/24 14:28:23]  Verifer returned sat in 0.912677 secs.
[08/24 14:28:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0    1943.183105     712.082275  2411.600586  1943.183105    0.100000   712.082275  1095.900879  135.199951       35.199951     1.0       712.082275            -1.0            -1
1    1943.183105     812.082275  2411.600586  1943.183105    0.100098   812.082275  1095.900879   35.199951      -64.800049     2.0       712.082275             0.0         False
2    2108.083252     947.382324  2411.600586  2108.083252  200.100098   947.382324  1095.900879   64.800049        0.100098     1.0       712.082275             1.0          True
3    2243.282959    1112.082275  2411.600586  2243.282959  199.999756  1112.082275  1096.000732   35.199951       35.199951     1.0      1147.282227             0.0         False
4    2408.083008    1168.948975  2411.600586  2408.083008  200.000000  1168.948975  1160.800781   78.333252       35.199951     1.0      1147.282227             0.0         False
5    2508.183105    1304.249023  2411.600586  2508.183105  178.433350  1304.249023  1160.900879   43.033203       35.199951     1.0      1347.282227             0.0         False
6    2643.583252    1378.748779  2411.600586  2643.583252  178.433350  1378.748779  1196.301025   68.533447       35.199951     1.0      1347.282227             0.0         False
7    2708.383057    1447.382324  2411.600586  2708.383057  133.333252  1447.382324  1196.301025   64.699707       -0.000244     1.0      1512.082031             0.0         False
8    2910.349854    1512.082275  2411.600586  2910.349854  266.666504  1512.082275  1263.067627  135.199951       35.199951     1.0      1512.082031             0.0         False
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=4, buffer=144179/4096.[0m
[08/24 14:28:24]  --------------------------------------------------------------------------------
[08/24 14:28:24]  Iteration: 6 (0 solution, 5 counterexamples)
[08/24 14:28:24]  Generator returned sat in 0.109961 secs.
[08/24 14:28:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:25]  Improved number of small numbers from 39 to 109 out of a max of 113
[08/24 14:28:25]  Verifer returned sat in 1.214064 secs.
[08/24 14:28:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0    2007.989502     612.089600  2611.593018  2007.989502     0.001465   612.089600  1095.900879  299.999023      299.999023     3.0       612.089600            -1.0            -1
1    2007.989502     712.089600  2611.593018  2007.989502   299.997559   712.089600  1095.900879  199.999023      199.999023     3.0       612.089600             0.0         False
2    2207.993164     812.088623  2611.593018  2207.993164   400.002686   812.088623  1095.902100  300.002441      300.001465     4.0       612.089600             0.0         False
3    2907.995605     812.089844  2611.593018  2907.995605  1000.004883   812.089844  1695.904541  400.001221      300.001465     5.0       612.089600             0.0         False
4    3007.996826     912.089775  2611.593018  3007.996826   500.002441   912.089775  1695.905762  400.001289      300.001465     3.0      1312.091064             1.0          True
5    3007.996826    1112.089600  2611.593018  3007.996826   250.001221  1112.089600  1695.905762  200.001465      200.001465     4.0      1312.091064             0.0         False
6    3007.996826    1212.089600  2611.593018  3007.996826     0.010000  1212.089600  1695.905762  100.001465      100.001465     4.0      1312.091064             0.0         False
7    3007.996826    1212.091025  2611.593018  3007.996826     0.010000  1212.091025  1695.905762  100.000039        0.001465     5.0      1312.091064             0.0         False
8    3508.019287    1312.092041  2611.593018  3508.019287   600.022500  1312.092041  1795.928223  399.999023      300.001465     1.0      1312.091064             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=2, buffer=614403/2048.[0m
[08/24 14:28:26]  --------------------------------------------------------------------------------
[08/24 14:28:26]  Iteration: 7 (0 solution, 6 counterexamples)
[08/24 14:28:26]  Generator returned sat in 0.116500 secs.
[08/24 14:28:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:26]  Improved gap from 74.999609375 to 100
[08/24 14:28:27]  Improved number of small numbers from 52 to 74 out of a max of 114
[08/24 14:28:27]  Verifer returned sat in 0.933381 secs.
[08/24 14:28:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0    2207.993408     712.091309  2611.593018  2207.993408    0.000244   712.091309  1095.902100  400.000000      300.000140     2.0       712.091309            -1.0            -1
1    2207.993408     812.091169  2611.593018  2207.993408    0.000244   812.091169  1095.902100  300.000140      200.000140     2.0       712.091309             0.0         False
2    2207.993408    1012.091169  2611.593018  2207.993408    0.000488  1012.091169  1095.902100  100.000140      100.000140     3.0       712.091309             0.0         False
3    2207.993581    1012.091481  2611.593018  2207.993581  100.000313  1012.091481  1095.902100  100.000000        0.000313     4.0       712.091309             0.0         False
4    2257.994049    1112.091169  2611.593018  2257.994049  150.000469  1112.091169  1095.902100   50.000781      -49.999219     5.0       712.091309             0.0         False
5    2882.993503    1212.091309  2611.593018  2882.993503  675.000234  1212.091309  1095.902412  574.999782      474.999922     1.0       712.091309             1.0          True
6    2882.993503    1387.090576  2611.593018  2882.993503    0.010000  1387.090576  1095.902412  400.000514      374.999922     2.0      1787.091090             0.0         False
7    2882.993503    1412.091309  2611.593018  2882.993503    0.015000  1412.091309  1095.902412  374.999782      274.999922     3.0      1787.091090             0.0         False
8    2882.993503    1512.091309  2611.593018  2882.993503    0.022500  1512.091309  1095.902412  274.999782      174.999922     4.0      1787.091090             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=6079999/12800.[0m
[08/24 14:28:28]  --------------------------------------------------------------------------------
[08/24 14:28:28]  Iteration: 8 (0 solution, 7 counterexamples)
[08/24 14:28:28]  Generator returned sat in 0.563790 secs.
[08/24 14:28:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:29]  Improved gap from 0.0 to 100
[08/24 14:28:29]  Improved number of small numbers from 68 to 78 out of a max of 114
[08/24 14:28:29]  Verifer returned sat in 0.901397 secs.
[08/24 14:28:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   -1218.021729   -1417.971497  2611.593018 -1218.021729     0.050049 -1417.971497      0.000   199.949769      199.949769     7.0     -1417.971497            -1.0            -1
1   -1217.971497   -1417.971436  2611.593018 -1217.971497   200.000000 -1417.971436      0.000   199.999938      100.000000     2.0     -1417.971497             1.0         False
2   -1017.971436   -1217.971497  2611.593018 -1017.971436   400.000000 -1217.971497      0.000   200.000062      200.000062     2.0     -1417.971497             0.0         False
3    1982.828503   -1217.971497  2611.593018  1982.828503  3200.800000 -1217.971497   1700.450  1500.350000     1400.350000     2.0     -1417.971497             0.0         False
4    2082.878503   -1017.971680  2611.593018  2082.878503  1600.400000 -1017.971680   1700.500  1400.350182     1400.350000     3.0       382.378503             0.0         False
5    2082.878503   -1017.971497  2611.593018  2082.878503   800.200000 -1017.971497   1700.500  1400.350000     1300.350000     4.0       382.378503             1.0         False
6    2282.828503    -917.846497  2611.593018  2282.828503  1600.300000  -917.846497   1700.500  1500.175000     1400.300000     4.0       382.378503             1.0         False
7    3783.353503    -717.971497  2611.593018  3783.353503  3000.700000  -717.971497   3100.975  1400.350000     1400.350000     5.0       382.378503             1.0         False
8    3883.353503    -617.971680  2611.593018  3883.353503  1500.350000  -617.971680   3100.975  1400.350182     1400.350000     6.0       782.378503             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=2, buffer=28007/20.[0m
[08/24 14:28:30]  --------------------------------------------------------------------------------
[08/24 14:28:30]  Iteration: 9 (0 solution, 8 counterexamples)
[08/24 14:28:30]  Generator returned sat in 0.058599 secs.
[08/24 14:28:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:30]  Improved gap from 0.0016666666666666668 to 100
[08/24 14:28:31]  Improved number of small numbers from 69 to 77 out of a max of 114
[08/24 14:28:31]  Verifer returned sat in 1.003795 secs.
[08/24 14:28:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   -1268.321533   -1268.321680  2411.6932 -1268.321533    0.099854 -1268.321680       0.00    0.000146      -50.249854     9.0      -1268.32168            -1.0            -1
1   -1017.971680   -1218.071533  2411.6932 -1017.971680  250.350000 -1218.071533       0.10  199.999854      100.000000     1.0      -1268.32168             1.0         False
2   -1017.971680   -1118.071533  2411.6932 -1017.971680  199.900146 -1118.071533       0.10   99.999854        0.000000     2.0      -1018.07168             0.0         False
3    -818.071533   -1018.071680  2411.6932  -818.071533  299.900000 -1018.071680       0.10  199.900146       99.900146     3.0      -1018.07168             0.0         False
4    -217.571680    -818.071680  2411.6932  -217.571680  800.400000  -818.071680     500.50  100.000000      100.000000     1.0      -1018.07168             1.0         False
5      82.628320    -718.071680  2411.6932    82.628320  400.200000  -718.071680     700.70  100.000000      100.000000     2.0       -618.07168             0.0         False
6     182.728320    -717.971924  2411.6932   182.728320  200.100000  -717.971924     700.80  199.900244      100.000000     2.0       -518.07168             0.0         False
7     182.728320    -618.071680  2411.6932   182.728320  100.050000  -618.071680     700.80  100.000000        0.000000     3.0       -518.07168             0.0         False
8     582.778320    -517.971924  2411.6932   582.778320  500.050000  -517.971924     900.85  199.900244      100.000000     1.0       -518.07168             1.0         False
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=4, buffer=100.[0m
[08/24 14:28:32]  --------------------------------------------------------------------------------
[08/24 14:28:32]  Iteration: 10 (0 solution, 9 counterexamples)
[08/24 14:28:32]  Generator returned sat in 0.373166 secs.
[08/24 14:28:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:34]  Improved number of small numbers from 59 to 73 out of a max of 113
[08/24 14:28:34]  Verifer returned sat in 1.024856 secs.
[08/24 14:28:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   -1400.242920   -1809.240283  2411.6932 -1400.242920  408.998535 -1809.240283    0.00000  408.997363      308.997363     9.0     -1809.240283            -1.0            -1
1   -1400.242920   -1709.240234  2411.6932 -1400.242920  408.997314 -1709.240234    0.00000  308.997314      208.997363     4.0     -1400.242920             1.0         False
2   -1400.241455   -1509.240283  2411.6932 -1400.241455  308.998779 -1509.240283    0.00000  108.998828      108.998828     5.0     -1400.241455             1.0         False
3   -1272.907783   -1509.240283  2411.6932 -1272.907783  236.332500 -1509.240283    0.00000  236.332500      136.332500     5.0     -1272.907783             1.0         False
4    -791.074033   -1400.240283  2411.6932  -791.074033  718.166250 -1400.240283  209.16500  400.001250      309.001250     2.0     -1272.907783             1.0         False
5    -791.074033   -1272.907783  2411.6932  -791.074033    0.010000 -1272.907783  209.16500  272.668750      209.001250     3.0     -1000.239033             0.0         False
6    -591.072783   -1109.240479  2411.6932  -591.072783  472.670000 -1109.240479  209.16625  309.001445      309.001250     3.0     -1000.239033             1.0         False
7    -591.072783   -1109.240283  2411.6932  -591.072783    0.010000 -1109.240283  209.16625  309.001250      209.001250     4.0      -800.239033             1.0         False
8    -318.069033    -909.240479  2411.6932  -318.069033  582.005000  -909.240479  282.17000  309.001445      309.001250     3.0      -800.239033             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3, buffer=247201/800.[0m
[08/24 14:28:34]  --------------------------------------------------------------------------------
[08/24 14:28:34]  Iteration: 11 (0 solution, 10 counterexamples)
[08/24 14:28:35]  Generator returned sat in 0.367749 secs.
[08/24 14:28:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:35]  Improved number of small numbers from 61 to 113 out of a max of 113
[08/24 14:28:35]  Verifer returned sat in 0.266325 secs.
[08/24 14:28:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t      cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   -1609.240234   -1809.240234  2411.693115  -1609.240234    199.999756 -1809.240234      0.000000  200.000000      100.000000     9.0     -1809.240234            -1.0            -1
1   -1609.240234   -1609.240967  2411.693115  -1609.240234    199.999023 -1609.240967      0.000000    0.000732        0.000000     7.0     -1609.240234             1.0         False
2   -1409.242676   -1609.240234  2411.693115  -1409.242676    199.998291 -1609.240234      0.000000  199.997559       99.997559     5.0     -1409.242676             1.0         False
3   11190.806641   -1409.242432  2411.693115  11190.806641  12800.046875 -1409.242432  12300.046143  300.002930      300.000732     1.0     -1409.242676             1.0         False
4   17290.827148   -1409.240234  2411.693115  17290.827148   6400.023438 -1409.240234  18300.066650  400.000732      300.000732     2.0     -1009.239502             0.0         False
5   20090.838135   -1209.240234  2411.693115  20090.838135   3200.011719 -1209.240234  21000.077637  300.000732      300.000732     3.0      -909.239502             1.0         False
6   21390.843262   -1109.240234  2411.693115  21390.843262   1600.005859 -1109.240234  22200.082764  300.000732      300.000732     4.0      -809.239502             1.0         False
7   21890.845459   -1009.240234  2411.693115  21890.845459    800.002930 -1009.240234  22600.084961  300.000732      300.000732     4.0      -709.239502             1.0         False
8   21990.846191    -909.240479  2411.693115  21990.846191    400.001465  -909.240479  22600.085693  300.000977      300.000732     4.0      -609.239502             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=5, buffer=1228803/4096.[0m
[08/24 14:28:36]  --------------------------------------------------------------------------------
[08/24 14:28:36]  Iteration: 12 (0 solution, 11 counterexamples)
[08/24 14:28:37]  Generator returned sat in 0.488125 secs.
[08/24 14:28:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:37]  Improved gap from 0.0016666666666666668 to 0
[08/24 14:28:37]  Improved number of small numbers from 67 to 77 out of a max of 114
[08/24 14:28:37]  Verifer returned sat in 0.757924 secs.
[08/24 14:28:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10890.796143   10890.795391 -10188.343760  10890.796143  100.010625  10890.795391   0.000000    0.000752       -0.000498     2.0     10890.795391            -1.0            -1
1   10990.806016   10890.796875 -10188.343760  10990.806016  100.010625  10890.796875   0.000625  100.008516        0.008750     1.0     10890.795391             0.0         False
2   10990.806016   10990.804766 -10188.343760  10990.806016  100.008125  10990.804766   0.000625    0.000625      -99.991250     2.0     10990.805391             0.0         False
3   11190.806641   11190.796641 -10188.343760  11190.806641  200.001250  11190.796641   0.001250    0.008750        0.008750     1.0     10990.805391             0.0         False
4   11190.807891   11190.806016 -10088.354385  11190.807891    0.010000  11190.806016   0.001250    0.000625       -0.000625     1.0     11190.806641             0.0         False
5   11190.817266   11190.807266  -9988.363281  11190.817266    0.010000  11190.807266   0.001250    0.008750       -0.000146     1.0     11190.806641             0.0         False
6   11190.818516   11190.816641  -9888.364990  11190.818516    0.010000  11190.816641   0.001250    0.000625       -0.000605     1.0     11190.806641             0.0         False
7   11190.827891   11190.817891  -9788.373779  11190.827891    0.010000  11190.817891   0.001250    0.008750       -0.000020     1.0     11190.806641             0.0         False
8   11190.829141   11190.827393  -9688.375732  11190.829141    0.010000  11190.827393   0.001250    0.000498       -0.000723     1.0     11190.806641             0.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0, buffer=7/800.[0m
[08/24 14:28:38]  --------------------------------------------------------------------------------
[08/24 14:28:38]  Iteration: 13 (0 solution, 12 counterexamples)
[08/24 14:28:39]  Generator returned sat in 0.579709 secs.
[08/24 14:28:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:40]  Improved number of small numbers from 69 to 80 out of a max of 113
[08/24 14:28:40]  Verifer returned sat in 1.022748 secs.
[08/24 14:28:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10690.812744   10390.812617 -9788.373779  10690.812744     0.001221  10390.812617     0.0000  300.000127      200.000127     7.0     10390.812617            -1.0            -1
1   10690.812744   10590.812617 -9788.373779  10690.812744    25.002188  10590.812617     0.0000  100.000127      100.000127     2.0     10390.812617             1.0         False
2   10690.812744   10665.815430 -9788.373779  10690.812744    25.000937  10665.815430     0.0000   24.997314        0.000127     3.0     10690.812744             0.0         False
3   10690.815117   10690.813867 -9788.373779  10690.815117    24.999688  10690.813867     0.0000    0.001250      -99.997500     1.0     10690.815117             0.0         False
4   11190.815117   10890.812617 -9788.373779  11190.815117   500.001250  10890.812617     0.0000  300.002500      300.002500     1.0     10690.815117             0.0         False
5   12340.815117   10890.813721 -9788.373779  12340.815117  1450.002500  10890.813721  1050.0000  400.001396      300.002500     2.0     10690.815117             0.0         False
6   12340.815117   11010.805867 -9788.373779  12340.815117     0.010000  11010.805867  1050.0000  280.009250      200.002500     3.0     11290.815117             0.0         False
7   12540.813867   11190.812617 -9788.373779  12540.813867   480.008000  11190.812617  1050.0000  300.001250      300.001250     4.0     11290.815117             0.0         False
8   12840.812617   11190.814941 -9788.373779  12840.812617   600.000000  11190.814941  1249.9975  400.000176      300.002500     5.0     11290.815117             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=2, buffer=120001/400.[0m
[08/24 14:28:41]  --------------------------------------------------------------------------------
[08/24 14:28:41]  Iteration: 14 (0 solution, 13 counterexamples)
[08/24 14:28:41]  Generator returned sat in 0.339240 secs.
[08/24 14:28:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:42]  Improved number of small numbers from 104 to 113 out of a max of 113
[08/24 14:28:42]  Verifer returned sat in 0.435805 secs.
[08/24 14:28:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10846.701172   10746.501465 -10144.062744  10846.701172    0.099854  10746.501465    0.000000  100.199707        0.199707     7.0     10746.501465            -1.0            -1
1   10846.701172   10846.501465 -10144.062744  10846.701172    0.099854  10846.501465    0.000000    0.199707      -99.800293     2.0     10746.501465             1.0         False
2   11046.801270   10946.501465 -10144.062744  11046.801270  200.299805  10946.501465    0.099854  100.199951        0.199951     1.0     10746.501465             0.0         False
3   11146.901367   11080.234863 -10144.062744  11146.901367  200.300049  11080.234863    0.199951   66.466553        0.199951     1.0     10746.501465             0.0         False
4   11247.301514   11180.034668 -10144.062744  11247.301514  166.866699  11180.034668    0.600098   66.666748        0.199951     1.0     11246.701416             0.0         False
5   11347.401367   11346.501465 -10144.062744  11347.401367  166.766602  11346.501465    0.699951    0.199951        0.199951     1.0     11346.701416             0.0         False
6   11547.201416   11446.501465 -10144.062744  11547.201416  200.000000  11446.501465  100.500000    0.199951        0.199951     1.0     11346.701416             0.0         False
7   11730.134766   11491.212402 -10144.062744  11730.134766  183.133301  11491.212402  183.433350   55.489014        0.199951     1.0     11546.701416             0.0         False
8   11830.234619   11546.501465 -10144.062744  11830.234619  155.588867  11546.501465  183.533203  100.199951        0.199951     2.0     11646.701416             0.0         False
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5, buffer=819/4096.[0m
[08/24 14:28:42]  --------------------------------------------------------------------------------
[08/24 14:28:42]  Iteration: 15 (0 solution, 14 counterexamples)
[08/24 14:28:43]  Generator returned sat in 0.437482 secs.
[08/24 14:28:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:44]  Improved number of small numbers from 67 to 69 out of a max of 113
[08/24 14:28:44]  Verifer returned sat in 1.023889 secs.
[08/24 14:28:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10846.701172   10413.364922 -9810.925785  10846.701172    0.001250  10413.364922    0.000000  433.336250      333.336667     2.0     10413.364922            -1.0            -1
1   10846.701172   10513.367005 -9810.925785  10846.701172    0.001465  10513.367005    0.000000  333.334167      233.336667     2.0     10413.364922             0.0         False
2   11046.703672   10613.364505 -9810.925785  11046.703672  533.336667  10613.364505    0.001250  433.337917      333.337917     3.0     10413.364922             0.0         False
3   11146.702422   10746.699922 -9810.925785  11146.702422  533.336667  10746.699922    0.001250  400.001250      333.336667     4.0     10413.364922             0.0         False
4   11246.703672   10846.701172 -9810.925785  11246.703672  500.002500  10846.701172    0.001250  400.001250      333.337917     5.0     11246.702422             1.0          True
5   11346.703672   10946.700172 -9810.925785  11346.703672  500.001250  10946.700172    0.001250  400.002250      333.337917     4.0     11346.702422             1.0         False
6   11446.704922   11046.701172 -9810.925785  11446.704922  500.003500  11046.701172    0.002500  400.001250      333.337917     5.0     11346.702422             1.0         False
7   11446.704922   11213.364505 -9810.925785  11446.704922    0.010000  11213.364505    0.002500  233.337917      233.337917     4.0     11446.702422             1.0         False
8   11763.362005   11313.364502 -9810.925785  11763.362005  549.995000  11313.364502  116.659583  333.337920      333.337917     4.0     11446.702422             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=2, buffer=800011/2400.[0m
[08/24 14:28:45]  --------------------------------------------------------------------------------
[08/24 14:28:45]  Iteration: 16 (0 solution, 15 counterexamples)
[08/24 14:28:46]  Generator returned sat in 0.850319 secs.
[08/24 14:28:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:46]  Improved gap from 0.05 to 100
[08/24 14:28:48]  Improved number of small numbers from 64 to 76 out of a max of 114
[08/24 14:28:48]  Verifer returned sat in 1.304726 secs.
[08/24 14:28:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10846.706055   10446.697422 -9744.258701  10846.706055    0.002686  10446.697422    0.00000  400.008633      400.008633     5.0     10446.697422            -1.0            -1
1   10946.703672   10446.697510 -9744.258701  10946.703672  500.006250  10446.697510    0.00000  500.006162      400.006250     6.0     10446.697422             0.0         False
2   11046.703857   10546.697422 -9744.258701  11046.703857  600.006348  10546.697422    0.00000  500.006436      400.006436     5.0     10446.697422             1.0          True
3   11046.703857   10746.694922 -9744.258701  11046.703857  500.003750  10746.694922    0.00000  300.008936      300.006436     6.0     11046.703857             0.0         False
4   11346.689922   10746.697422 -9744.258701  11346.689922  599.995000  10746.697422   99.98375  500.008750      400.008750     5.0     11046.703857             1.0         False
5   11346.689922   10846.699505 -9744.258701  11346.689922    0.010000  10846.699505   99.98375  400.006667      300.008750     6.0     11246.706172             0.0         False
6   11546.687422   11046.697422 -9744.258701  11546.687422  600.004167  11046.697422   99.98375  400.006250      400.006250     5.0     11246.706172             1.0         False
7   11546.687422   11046.701172 -9744.258701  11546.687422  150.001250  11046.701172   99.98375  400.002500      300.006250     6.0     11446.703672             0.0         False
8   11746.692422   11246.697266 -9744.258701  11746.692422  600.007500  11246.697266   99.98625  400.008906      400.008750     5.0     11446.703672             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=2, buffer=320007/800.[0m
[08/24 14:28:48]  --------------------------------------------------------------------------------
[08/24 14:28:48]  Iteration: 17 (0 solution, 16 counterexamples)
[08/24 14:28:49]  Generator returned sat in 0.187300 secs.
[08/24 14:28:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:49]  Improved gap from 0.00125 to 100
[08/24 14:28:50]  Improved number of small numbers from 65 to 77 out of a max of 114
[08/24 14:28:50]  Verifer returned sat in 0.890931 secs.
[08/24 14:28:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10946.687988   10746.689297 -10044.250576  10946.687988    0.001250  10746.689297    0.000000  199.998691      199.998691     7.0     10746.689297            -1.0            -1
1   10946.687988   10796.692266 -10044.250576  10946.687988    0.001250  10796.692266    0.000000  149.995723       99.998691     8.0     10746.689297             1.0         False
2   10946.691797   10946.689297 -10044.250576  10946.691797  149.999531  10946.689297    0.000000    0.002500        0.002500     1.0     10746.689297             1.0          True
3   10946.691797   10946.689297 -10044.250576  10946.691797    0.001250  10946.689297    0.000000    0.002500      -99.997500     1.0     10946.691797             0.0         False
4   11346.689922   11146.689297 -10044.250576  11346.689922  400.000625  11146.689297    0.000000  200.000625      200.000625     1.0     10946.691797             0.0         False
5   12046.683672   11246.689209 -10044.250576  12046.683672  899.994375  11246.689209  299.993125  500.001338      500.001250     2.0     10946.691797             0.0         False
6   12046.683672   11346.689209 -10044.250576  12046.683672    0.010000  11346.689209  299.993125  400.001338      400.001250     3.0     11746.690547             1.0          True
7   12046.683672   11346.689453 -10044.250576  12046.683672    0.010000  11346.689453  299.993125  400.001094      300.001250     4.0     11746.690547             1.0         False
8   12046.683672   11546.689209 -10044.250576  12046.683672    0.010000  11546.689209  299.993125  200.001338      200.001250     4.0     11746.690547             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=400001/800.[0m
[08/24 14:28:50]  --------------------------------------------------------------------------------
[08/24 14:28:50]  Iteration: 18 (0 solution, 17 counterexamples)
[08/24 14:28:51]  Generator returned sat in 0.603261 secs.
[08/24 14:28:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:53]  Improved gap from 0.0016666666666666668 to 31.25
[08/24 14:28:53]  Improved number of small numbers from 71 to 77 out of a max of 114
[08/24 14:28:53]  Verifer returned sat in 1.907857 secs.
[08/24 14:28:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10796.691162   10696.694883 -10094.253662  10796.691162    0.001250  10696.694883    0.00000   99.996279       -0.001221     2.0     10696.694883            -1.0            -1
1   10927.943633   10796.692383 -10094.253662  10927.943633  231.248750  10796.692383    0.00125  131.250000       31.250000     1.0     10696.694883             0.0         False
2   11027.942383   10996.692383 -10094.253662  11027.942383  231.248750  10996.692383    0.00125   31.248750       31.248750     1.0     10696.694883             0.0         False
3   11027.942383   11000.927383 -10029.738662  11027.942383   20.770000  11000.927383    0.00125   27.013750       -4.236250     2.0     11027.941133             0.0         False
4   11163.429883   11132.176133 -10029.738662  11163.429883  162.501250  11132.176133    0.00250   31.251250       31.250000     1.0     11027.941133             0.0         False
5   11163.429883   11132.177383  -9960.988662  11163.429883    0.010000  11132.177383    0.00250   31.250000        0.000000     2.0     11163.427383             0.0         False
6   11199.927383   11163.427383  -9897.486162  11199.927383   67.747500  11163.427383    0.00250   36.497500        0.000000     3.0     11163.427383             0.0         False
7   11199.927383   11199.924883  -9828.736328  11199.927383    0.010000  11199.924883    0.00250    0.000000      -31.250166     2.0     11199.924883             1.0         False
8   11233.806758   11231.175049  -9828.736328  11233.806758   33.879375  11231.175049    0.00250    2.629209      -97.370791     1.0     11199.924883             0.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1, buffer=125/4.[0m
[08/24 14:28:54]  --------------------------------------------------------------------------------
[08/24 14:28:54]  Iteration: 19 (0 solution, 18 counterexamples)
[08/24 14:28:55]  Generator returned sat in 0.146599 secs.
[08/24 14:28:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:55]  Improved gap from 0.0 to 100
[08/24 14:28:56]  Improved number of small numbers from 68 to 74 out of a max of 114
[08/24 14:28:56]  Verifer returned sat in 1.491990 secs.
[08/24 14:28:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   10731.521240   10631.471133 -9828.736328  10731.521240    0.050000  10631.471133        0.0  100.050107        0.050107     2.0     10631.471133            -1.0            -1
1   10731.521240   10731.471133 -9828.736328  10731.521240    0.050049  10731.471133        0.0    0.050107      -99.949893     2.0     10631.471133             0.0         False
2   11331.996133   10831.471133 -9828.736328  11331.996133  600.525000  10831.471133        0.0  500.525000      400.525000     1.0     10631.471133             0.0         False
3   11331.996133   10931.696133 -9828.736328  11331.996133  500.475000  10931.696133        0.0  400.300000      300.525000     2.0     11331.996133             0.0         False
4   11332.046133   11131.321133 -9828.736328  11332.046133  400.350000  11131.321133        0.0  200.725000      200.575000     3.0     11332.046133             0.0         False
5   11531.421133   11231.471133 -9828.736328  11531.421133  400.100000  11231.471133        0.0  299.950000      299.950000     4.0     11531.421133             0.0         False
6   11631.521133   11231.471133 -9828.736328  11631.521133  400.050000  11231.471133        0.0  400.050000      300.050000     4.0     11631.521133             0.0         False
7   11631.521133   11431.471133 -9828.736328  11631.521133  349.912500  11431.471133        0.0  200.050000      200.050000     3.0     11631.521133             0.0         False
8   11756.502383   11531.470947 -9828.736328  11756.502383  325.031250  11531.470947        0.0  225.031436      225.031250     3.0     11756.502383             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0, buffer=1640755/4096.[0m
[08/24 14:28:57]  --------------------------------------------------------------------------------
[08/24 14:28:57]  Iteration: 20 (0 solution, 19 counterexamples)
[08/24 14:28:58]  Generator returned sat in 0.677068 secs.
[08/24 14:28:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:28:58]  Improved gap from 50.01416666666667 to 100
[08/24 14:28:59]  Improved number of small numbers from 59 to 63 out of a max of 114
[08/24 14:28:59]  Verifer returned sat in 1.366860 secs.
[08/24 14:29:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t  losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   11098.238037   11098.237799 -9861.941884  11098.238037   200.000000  11098.237799        0.0     0.000238        0.000238     6.0     11098.237799            -1.0            -1
1   11298.187799   11098.337799 -9861.941884  11298.187799   199.950000  11098.337799        0.0   199.850000       99.950000     1.0     11298.187799             1.0         False
2   11298.237799   11298.187799 -9861.941884  11298.237799   199.900000  11298.187799        0.0     0.050000        0.000000     2.0     11298.237799             0.0         False
3   11364.854466   11298.237799 -9861.941884  11364.854466    66.666667  11298.237799        0.0    66.616667      -33.383333     2.0     11364.854466             0.0         False
4   11498.237799   11398.237799 -9861.941884  11498.237799   200.000000  11398.237799        0.0   100.000000        0.000000     1.0     11364.854466             0.0         False
5   11848.187799   11498.237799 -9861.941884  11848.187799   449.950000  11498.237799        0.0   349.950000      249.950000     2.0     11364.854466             0.0         False
6   12273.187799   11698.237799 -9861.941884  12273.187799   774.950000  11698.237799        0.0   574.950000      574.950000     2.0     11364.854466             0.0         False
7   13060.662799   11698.237799 -9861.941884  13060.662799  1362.425000  11698.237799        0.0  1362.425000     1262.425000     2.0     11364.854466             0.0         False
8   13891.875299   11848.237793 -9861.941884  13891.875299  2193.637500  11848.237793        0.0  2043.637507     1993.637500     3.0     11364.854466             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0, buffer=31899/16.[0m
[08/24 14:29:00]  --------------------------------------------------------------------------------
[08/24 14:29:00]  Iteration: 21 (0 solution, 20 counterexamples)
[08/24 14:29:02]  Generator returned sat in 1.054971 secs.
[08/24 14:29:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:03]  Improved number of small numbers from 58 to 79 out of a max of 113
[08/24 14:29:03]  Verifer returned sat in 0.967975 secs.
[08/24 14:29:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   12764.901367   12564.899902 -9061.929384  12764.901367    0.001465  12564.899902    0.00000  200.001465      100.001484     7.0     12564.899902            -1.0            -1
1   12764.901367   12764.899883 -9061.929384  12764.901367  200.000000  12764.899883    0.00000    0.001484        0.001484     3.0     12564.899902             1.0         False
2   13364.907383   12864.899658 -9061.929384  13364.907383  600.007500  12864.899658    0.00125  500.006475      500.006250     1.0     12564.899902             1.0          True
3   13364.907383   12964.898438 -9061.929384  13364.907383  177.780000  12964.898438    0.00125  400.007695      400.006250     2.0     13364.906133             0.0         False
4   13364.907383   12964.899902 -9061.929384  13364.907383  266.670000  12964.899902    0.00125  400.006230      300.006250     3.0     13364.906133             1.0         False
5   13364.907383   13164.899883 -9061.929384  13364.907383  400.005000  13164.899883    0.00125  200.006250      200.006250     4.0     13364.906133             1.0         False
6   13764.908633   13264.898682 -9061.929384  13764.908633  600.007500  13264.898682    0.00250  500.007451      500.006250     5.0     13364.906133             1.0         False
7   13764.908633   13264.899902 -9061.929384  13764.908633    0.010000  13264.899902    0.00250  500.006230      400.006250     6.0     13764.906133             1.0         False
8   13764.908633   13364.899902 -9061.929384  13764.908633    0.015000  13364.899902    0.00250  400.006230      300.006250     7.0     13764.906133             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=80001/160.[0m
[08/24 14:29:03]  --------------------------------------------------------------------------------
[08/24 14:29:03]  Iteration: 22 (0 solution, 21 counterexamples)
[08/24 14:29:05]  Generator returned sat in 0.855217 secs.
[08/24 14:29:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:05]  Improved number of small numbers from 68 to 113 out of a max of 113
[08/24 14:29:05]  Verifer returned sat in 0.406085 secs.
[08/24 14:29:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13964.999756   13865.099609 -9061.929443  13964.999756    0.100098  13865.099609   0.000000   99.900146       99.900146     2.0     13865.099609            -1.0            -1
1   14264.799561   13865.099854 -9061.929443  14264.799561  399.699951  13865.099854   0.000000  399.699707      299.699951     2.0     13865.099609             0.0         False
2   14264.999756   13965.099609 -9061.929443  14264.999756  399.899902  13965.099609   0.000000  299.900146      199.900146     2.0     13865.099609             0.0         False
3   14365.399658   14065.099609 -9061.929443  14365.399658  400.300049  14065.099609   0.000000  300.300049      200.300049     3.0     13865.099609             0.0         False
4   14465.399658   14264.899658 -9061.929443  14465.399658  400.300049  14264.899658   0.000000  200.500000      200.300049     3.0     13865.099609             1.0          True
5   14665.199707   14265.099609 -9061.929443  14665.199707  400.300049  14265.099609   0.000000  400.100098      300.100098     3.0     13865.099609             1.0          True
6   14665.399658   14464.999512 -9061.929443  14665.399658  400.300049  14464.999512   0.000000  200.400146      200.300049     3.0     13865.099609             1.0          True
7   14865.299561   14565.099609 -9061.929443  14865.299561  400.300049  14565.099609   0.000000  300.199951      300.199951     3.0     13865.099609             1.0          True
8   14965.399658   14665.099609 -9061.929443  14965.399658  400.300049  14665.099609   0.099854  300.200195      300.200195     4.0     13865.099609             1.0          True
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=1, buffer=307405/1024.[0m
[08/24 14:29:06]  --------------------------------------------------------------------------------
[08/24 14:29:06]  Iteration: 23 (0 solution, 22 counterexamples)
[08/24 14:29:07]  Generator returned sat in 0.281342 secs.
[08/24 14:29:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:07]  Verifer returned unsat in 0.300313 secs.
[08/24 14:29:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:07]  --------------------------------------------------------------------------------
[08/24 14:29:07]  Iteration: 24 (1 solution, 22 counterexamples)
[08/24 14:29:08]  Generator returned sat in 0.139386 secs.
[08/24 14:29:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:08]  Verifer returned unsat in 0.270312 secs.
[08/24 14:29:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:08]  --------------------------------------------------------------------------------
[08/24 14:29:08]  Iteration: 25 (2 solution, 22 counterexamples)
[08/24 14:29:09]  Generator returned sat in 0.074263 secs.
[08/24 14:29:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:10]  Improved gap from 0.0 to 0
[08/24 14:29:10]  Improved number of small numbers from 78 to 86 out of a max of 114
[08/24 14:29:10]  Verifer returned sat in 1.113799 secs.
[08/24 14:29:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13865.079609   13465.068115 -9060.924316  13865.079609  0.001221  13465.068115        0.0  400.011494      400.011377     6.0     13465.068115            -1.0            -1
1   13865.079609   13565.068115 -9060.924316  13865.079609  0.001221  13565.068115        0.0  300.011494      300.011377     6.0     13465.068115             0.0         False
2   13865.079609   13665.068115 -9060.924316  13865.079609  0.009766  13665.068115        0.0  200.011494      200.011377     7.0     13465.068115             0.0         False
3   13865.079609   13665.068359 -9060.924316  13865.079609  0.009766  13665.068359        0.0  200.011250      100.011377     8.0     13465.068115             0.0         False
4   13865.079609   13865.067139 -9060.924316  13865.079609  0.010000  13865.067139        0.0    0.012471        0.011377     8.0     13465.068115             1.0          True
5   13865.079609   13865.068359 -8960.935693  13865.079609  0.010000  13865.068359        0.0    0.011250        0.000000     9.0     13465.068115             1.0          True
6   13865.079609   13865.079609 -8860.935693  13865.079609  0.010000  13865.079609        0.0    0.000000        0.000000     8.0     13465.068115             1.0          True
7   13865.089609   13865.079609 -8760.945693  13865.089609  0.010000  13865.079609        0.0    0.010000        0.000000     8.0     13465.068115             1.0          True
8   13865.089609   13865.089609 -8660.945801  13865.089609  0.010000  13865.089609        0.0    0.000000       -0.000107     2.0     13465.068115             1.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0, buffer=1638447/4096.[0m
[08/24 14:29:11]  --------------------------------------------------------------------------------
[08/24 14:29:11]  Iteration: 26 (2 solution, 23 counterexamples)
[08/24 14:29:13]  Generator returned sat in 1.749672 secs.
[08/24 14:29:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:14]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/24 14:29:14]  Verifer returned sat in 0.532877 secs.
[08/24 14:29:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   14065.082275   13565.079834 -9161.956787  14065.082275     0.002500  13565.079834    0.000000  500.002441      400.002441     5.0     13565.079834            -1.0            -1
1   14065.082275   13765.079834 -9161.956787  14065.082275     0.002686  13765.079834    0.000000  300.002441      300.002441     4.0     13565.079834             0.0         False
2   14065.082275   13865.079834 -9161.956787  14065.082275     0.005000  13865.079834    0.000000  200.002441      200.002441     5.0     13565.079834             0.0         False
3   14065.082275   13898.414795 -9161.956787  14065.082275     0.002500  13898.414795    0.000000  166.667480      100.002441     6.0     14065.082275             0.0         False
4   14065.082275   13965.079834 -9161.956787  14065.082275   166.667480  13965.079834    0.000000  100.002441        0.002441     7.0     14065.082275             0.0         False
5   14065.082275   14065.079834 -9061.959229  14065.082275   100.000000  14065.079834    0.000000    0.002441        0.000000     8.0     14065.082275             0.0         False
6   14565.079834   14065.082275 -9061.959229  14565.079834   500.000000  14065.082275    0.000000  499.997559      399.997559     9.0     14065.082275             1.0         False
7   15315.083496   14265.082275 -9061.959229  15315.083496  1250.001221  14265.082275  649.998779  400.002441      400.002441     2.0     14065.082275             1.0         False
8   15315.083496   14365.082031 -9061.959229  15315.083496     0.010000  14365.082031  649.998779  300.002686      300.002441     3.0     14665.084717             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=819205/2048.[0m
[08/24 14:29:14]  --------------------------------------------------------------------------------
[08/24 14:29:14]  Iteration: 27 (2 solution, 24 counterexamples)
[08/24 14:29:17]  Generator returned sat in 1.613715 secs.
[08/24 14:29:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:17]  Improved gap from 0.0 to 23.4375
[08/24 14:29:18]  Improved number of small numbers from 74 to 110 out of a max of 114
[08/24 14:29:18]  Verifer returned sat in 1.506349 secs.
[08/24 14:29:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13865.079590   13765.078613 -9341.646729  13865.079590  100.001221  13765.078613   0.000000  100.000977        0.000977     3.0     13765.078613            -1.0            -1
1   13865.079590   13865.078613 -9341.646729  13865.079590  100.000000  13865.078613   0.000000    0.000977      -99.999023     2.0     13865.079590             0.0         False
2   14065.082275   14065.077148 -9341.646729  14065.082275  200.003662  14065.077148   0.001221    0.003906        0.002441     1.0     13865.079590             0.0         False
3   14065.082275   14065.078613 -9265.084229  14065.082275    0.001465  14065.078613   0.001221    0.002441      -23.435059     2.0     14065.081055             0.0         False
4   14215.079834   14188.509775 -9265.084229  14215.079834  150.000000  14188.509775  26.561279    0.008779        0.002441     1.0     14065.081055             0.0         False
5   14215.081055   14188.516113 -9188.521729  14215.081055    0.010000  14188.516113  26.561279    0.003662      -23.433838     2.0     14188.519775             0.0         False
6   14276.796875   14211.953613 -9126.803711  14276.796875   61.719482  14211.953613  26.561279   38.281982        0.000000     1.0     14188.519775             0.0         False
7   14311.952393   14250.236650 -9061.959229  14311.952393   73.437500  14250.236650  26.561279   35.154463        0.000000     1.0     14188.519775             0.0         False
8   14311.952393   14285.391113 -9061.959229  14311.952393   30.863437  14285.391113  26.561279    0.000000     -100.000000     2.0     14285.391113             0.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1, buffer=5/2048.[0m
[08/24 14:29:19]  --------------------------------------------------------------------------------
[08/24 14:29:19]  Iteration: 28 (2 solution, 25 counterexamples)
[08/24 14:29:21]  Generator returned sat in 1.207192 secs.
[08/24 14:29:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:21]  Improved gap from 0.0025 to 100
[08/24 14:29:22]  Improved number of small numbers from 87 to 94 out of a max of 114
[08/24 14:29:22]  Verifer returned sat in 0.818595 secs.
[08/24 14:29:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13865.076904   13765.078369 -9341.646729  13865.076904     0.001250  13765.078369     0.0000   99.998535       -0.001465     8.0     13765.078369            -1.0            -1
1   13965.078369   13865.078369 -9341.646729  13965.078369   200.000000  13865.078369     0.0000  100.000000        0.000000     1.0     13765.078369             1.0         False
2   14065.077148   14065.075869 -9341.646729  14065.077148   199.998779  14065.075869     0.0000    0.001279       -0.001221     1.0     14065.077148             0.0         False
3   14065.079619   14065.078369 -9341.646729  14065.079619     0.003750  14065.078369     0.0000    0.001250      -99.998750     1.0     14065.079619             0.0         False
4   14665.085869   14165.078369 -9341.646729  14665.085869   600.007500  14165.078369     0.0000  500.007500      400.007500     1.0     14065.079619             0.0         False
5   15965.093369   14365.078125 -9341.646729  15965.093369  1800.015000  14365.078125   900.0075  700.007744      700.007500     2.0     14065.079619             0.0         False
6   15965.093369   14365.079590 -9341.646729  15965.093369     0.010000  14365.079590   900.0075  700.006279      600.007500     3.0     15065.085869             1.0          True
7   15965.093369   14465.078369 -9341.646729  15965.093369   300.001221  14465.078369   900.0075  600.007500      500.007500     4.0     15065.085869             1.0         False
8   15965.093369   14665.078125 -9341.646729  15965.093369   300.000000  14665.078125   900.0075  400.007744      400.007500     5.0     15065.085869             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1, buffer=280003/400.[0m
[08/24 14:29:22]  --------------------------------------------------------------------------------
[08/24 14:29:22]  Iteration: 29 (2 solution, 26 counterexamples)
[08/24 14:29:24]  Generator returned sat in 0.884834 secs.
[08/24 14:29:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:24]  Verifer returned unsat in 0.213549 secs.
[08/24 14:29:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:24]  --------------------------------------------------------------------------------
[08/24 14:29:24]  Iteration: 30 (3 solution, 26 counterexamples)
[08/24 14:29:25]  Generator returned sat in 0.118310 secs.
[08/24 14:29:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:26]  Verifer returned unsat in 0.460043 secs.
[08/24 14:29:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:26]  --------------------------------------------------------------------------------
[08/24 14:29:26]  Iteration: 31 (4 solution, 26 counterexamples)
[08/24 14:29:27]  Generator returned sat in 0.156378 secs.
[08/24 14:29:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:28]  Verifer returned unsat in 0.710831 secs.
[08/24 14:29:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:28]  --------------------------------------------------------------------------------
[08/24 14:29:28]  Iteration: 32 (5 solution, 26 counterexamples)
[08/24 14:29:30]  Generator returned sat in 1.202313 secs.
[08/24 14:29:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:30]  Improved number of small numbers from 86 to 113 out of a max of 113
[08/24 14:29:30]  Verifer returned sat in 0.353572 secs.
[08/24 14:29:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   15331.731689   14831.736816 -9341.646729  15331.731689     0.002441  14831.736816    0.000000  499.994873      499.994873     8.0     14831.736816            -1.0            -1
1   15331.731689   14931.736572 -9341.646729  15331.731689     0.002500  14931.736572    0.000000  399.995117      399.994873     8.0     14831.736816             0.0         False
2   15331.734131   15031.736816 -9341.646729  15331.734131   399.997559  15031.736816    0.000000  299.997314      299.997314     9.0     14831.736816             0.0         False
3   15365.068359   15031.736816 -9341.646729  15365.068359   333.331543  15031.736816    0.000000  333.331543      233.331543     9.0     15365.068359             1.0          True
4   15631.734131   15231.731934 -9341.646729  15631.734131   599.997314  15231.731934    0.000000  400.002197      399.997314     9.0     15365.068359             1.0         False
5   16281.725586   15331.736572 -9341.646729  16281.725586  1049.993652  15331.736572  249.991211  699.997803      699.997559     3.0     15365.068359             1.0         False
6   16281.725586   15331.736816 -9341.646729  16281.725586     0.010000  15331.736816  249.991211  699.997559      599.997559     4.0     16031.734375             0.0         False
7   16281.725586   15431.736816 -9341.646729  16281.725586   300.000000  15431.736816  249.991211  599.997559      499.997559     4.0     16031.734375             0.0         False
8   16281.725586   15631.736816 -9341.646729  16281.725586   200.004883  15631.736816  249.991211  399.997559      399.997559     4.0     16031.734375             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1, buffer=1433595/2048.[0m
[08/24 14:29:31]  --------------------------------------------------------------------------------
[08/24 14:29:31]  Iteration: 33 (5 solution, 27 counterexamples)
[08/24 14:29:33]  Generator returned sat in 1.863174 secs.
[08/24 14:29:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:34]  Improved gap from 0.000625 to 100
[08/24 14:29:35]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/24 14:29:35]  Verifer returned sat in 1.257654 secs.
[08/24 14:29:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   15407.211914   15307.311768 -9341.646729  15407.211914    0.099854  15307.311768        0.0   99.900146       -0.099854     2.0     15307.311768            -1.0            -1
1   15407.411621   15407.311768 -9341.646729  15407.411621  100.099854  15407.311768        0.0    0.099854      -99.900146     1.0     15307.311768             0.0         False
2   15507.411621   15507.312012 -9341.646729  15507.411621  100.099854  15507.312012        0.0    0.099609      -99.900146     1.0     15307.311768             0.0         False
3   16007.311768   15608.312012 -9341.646729  16007.311768  499.999756  15608.312012        0.0  398.999756      300.000000     1.0     15307.311768             0.0         False
4   16008.812012   15807.211670 -9341.646729  16008.812012  400.500000  15807.211670        0.0  201.600342      201.500244     2.0     16008.812012             0.0         False
5   16207.411621   15907.311768 -9341.646729  16207.411621  400.199951  15907.311768        0.0  300.099854      300.099854     3.0     16207.411621             0.0         False
6   16307.411621   15907.311768 -9341.646729  16307.411621  400.099854  15907.311768        0.0  400.099854      300.099854     3.0     16307.411621             0.0         False
7   16307.411621   16107.311768 -9341.646729  16307.411621  349.549805  16107.311768        0.0  200.099854      200.099854     3.0     16307.411621             0.0         False
8   16432.136719   16207.311768 -9341.646729  16432.136719  324.824951  16207.311768        0.0  224.824951      224.824951     4.0     16432.136719             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0, buffer=1229209/4096.[0m
[08/24 14:29:35]  --------------------------------------------------------------------------------
[08/24 14:29:35]  Iteration: 34 (5 solution, 28 counterexamples)
[08/24 14:29:37]  Generator returned sat in 0.765519 secs.
[08/24 14:29:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:37]  Improved number of small numbers from 59 to 113 out of a max of 113
[08/24 14:29:37]  Verifer returned sat in 0.364462 secs.
[08/24 14:29:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t     cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16056.294189   15656.294189 -9590.62915  16056.294189   600.002441  15656.294189    0.000000  400.000000      400.000000     4.0     15656.294189            -1.0            -1
1   16256.294189   15656.296631 -9590.62915  16256.294189   600.000000  15656.296631    0.000000  599.997559      500.000000     4.0     16256.294189             0.0         False
2   16456.302979   15856.291748 -9590.62915  16456.302979   800.006348  15856.291748    0.000000  600.011230      600.008789     5.0     16256.294189             0.0         False
3   16656.295410   15856.294189 -9590.62915  16656.295410   800.003662  15856.294189    0.000000  800.001221      700.001221     6.0     16656.295410             0.0         False
4   16656.295410   16056.294189 -9590.62915  16656.295410   200.000000  16056.294189    0.000000  600.001221      600.001221     7.0     16656.295410             0.0         False
5   16656.295410   16056.294189 -9590.62915  16656.295410   599.998779  16056.294189    0.000000  600.001221      500.001221     7.0     16656.295410             1.0         False
6   17356.292969   16156.294189 -9590.62915  17356.292969  1299.998779  16156.294189  299.997559  900.001221      800.001221     6.0     16656.295410             1.0         False
7   17356.292969   16256.294189 -9590.62915  17356.292969     0.010000  16256.294189  299.997559  800.001221      700.001221     7.0     17056.295410             0.0         False
8   17356.292969   16456.293945 -9590.62915  17356.292969   100.020000  16456.293945  299.997559  600.001465      600.001221     7.0     17056.295410             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=3276805/4096.[0m
[08/24 14:29:38]  --------------------------------------------------------------------------------
[08/24 14:29:38]  Iteration: 35 (5 solution, 29 counterexamples)
[08/24 14:29:39]  Generator returned sat in 0.552120 secs.
[08/24 14:29:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:40]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/24 14:29:40]  Verifer returned sat in 0.225513 secs.
[08/24 14:29:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t     cwnd_0,t   service_0,t   losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16056.294189   15656.294189 -9590.62915  16056.294189   600.002441  15656.294189    0.000000   400.000000      400.000000     4.0     15656.294189            -1.0            -1
1   16256.294189   15756.294189 -9590.62915  16256.294189   600.000000  15756.294189    0.000000   500.000000      500.000000     4.0     16256.294189             0.0         False
2   16856.295410   15756.295410 -9590.62915  16856.295410  1100.001221  15756.295410    0.000000  1100.000000     1000.001221     5.0     16256.294189             0.0         False
3   16856.295410   15856.294189 -9590.62915  16856.295410  1100.000000  15856.294189    0.000000  1000.001221      900.001221     6.0     16856.295410             0.0         False
4   16856.295410   16056.294189 -9590.62915  16856.295410   200.000000  16056.294189    0.000000   800.001221      800.001221     7.0     16856.295410             0.0         False
5   16856.295410   16056.294189 -9590.62915  16856.295410   800.000000  16056.294189    0.000000   800.001221      700.001221     7.0     16856.295410             1.0         False
6   17456.291748   16156.294189 -9590.62915  17456.291748  1399.997559  16156.294189  199.996338  1100.001221     1000.001221     6.0     16856.295410             1.0         False
7   17456.291748   16256.294189 -9590.62915  17456.291748     0.010000  16256.294189  199.996338  1000.001221      900.001221     7.0     17256.295410             0.0         False
8   17456.291748   16456.293945 -9590.62915  17456.291748   400.010000  16456.293945  199.996338   800.001465      800.001221     7.0     17256.295410             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=1, buffer=4096005/4096.[0m
[08/24 14:29:40]  --------------------------------------------------------------------------------
[08/24 14:29:40]  Iteration: 36 (5 solution, 30 counterexamples)
[08/24 14:29:42]  Generator returned sat in 0.944399 secs.
[08/24 14:29:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:43]  Improved number of small numbers from 80 to 103 out of a max of 113
[08/24 14:29:43]  Verifer returned sat in 0.882914 secs.
[08/24 14:29:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16256.293945   15555.918701 -9590.62915  16256.293945  599.949951  15555.918701        0.0  700.375244      650.162598     6.0     15555.918701            -1.0            -1
1   16256.293945   15656.368945 -9590.62915  16256.293945  599.950195  15656.368945        0.0  599.925000      550.162598     4.0     15555.918701             0.0         False
2   16256.293945   15806.131348 -9590.62915  16256.293945  599.925000  15806.131348        0.0  450.162598      450.162598     5.0     16256.293945             0.0         False
3   16256.318848   15906.131348 -9590.62915  16256.318848  450.187500  15906.131348        0.0  350.187500      350.187500     6.0     16256.318848             0.0         False
4   16256.343994   15956.368945 -9590.62915  16256.343994  350.212646  15956.368945        0.0  299.975049      250.212646     7.0     16256.343994             0.0         False
5   16256.368945   16006.131348 -9590.62915  16256.368945  300.000000  16006.131348        0.0  250.237598      150.237598     8.0     16256.368945             0.0         False
6   16306.131348   16106.131348 -9590.62915  16306.131348  300.000000  16106.131348        0.0  200.000000      100.000000     7.0     16256.368945             1.0         False
7   16306.131348   16256.293945 -9590.62915  16306.131348  200.000000  16256.293945        0.0   49.837402        0.000000     8.0     16306.131348             0.0         False
8   16706.181445   16306.156250 -9590.62915  16706.181445  449.887500  16306.156250        0.0  400.025195      300.050098     1.0     16306.131348             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0, buffer=1331533/2048.[0m
[08/24 14:29:44]  --------------------------------------------------------------------------------
[08/24 14:29:44]  Iteration: 37 (5 solution, 31 counterexamples)
[08/24 14:29:46]  Generator returned sat in 1.257608 secs.
[08/24 14:29:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:46]  Improved number of small numbers from 74 to 113 out of a max of 113
[08/24 14:29:46]  Verifer returned sat in 0.420687 secs.
[08/24 14:29:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16256.293945   15706.297852 -9740.793213  16256.293945    0.001250  15706.297852   0.000000  549.996094      499.998779     8.0     15706.297852            -1.0            -1
1   16356.295410   15806.286377 -9740.793213  16356.295410  649.997559  15806.286377   0.001465  550.007568      499.998779     8.0     15706.297852             1.0         False
2   16356.295410   15956.293701 -9740.793213  16356.295410  499.999756  15956.293701   0.001465  400.000244      399.998779     9.0     16356.293945             1.0          True
3   16456.295166   15956.295410 -9740.793213  16456.295166  500.000000  15956.295410   0.001465  499.998291      399.998535     9.0     16356.293945             1.0         False
4   16456.295166   16156.290039 -9740.793213  16456.295166  499.997559  16156.290039   0.001465  300.003662      299.998535     9.0     16456.293701             1.0         False
5   16756.293945   16256.293701 -9740.793213  16756.293945  600.002441  16256.293701   0.001465  499.998779      499.997314     9.0     16456.293701             1.0         False
6   16856.296387   16356.295166 -9740.793213  16856.296387  600.001221  16356.295166   0.002441  499.998779      499.998779     4.0     16856.293945             1.0         False
7   16856.296387   16456.295166 -9740.793213  16856.296387    0.010000  16456.295166   0.002441  399.998779      399.998779     3.0     16856.293945             0.0         False
8   16856.296387   16456.296387 -9740.793213  16856.296387  300.005127  16456.296387   0.002441  399.997559      299.998779     4.0     16856.293945             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=2047995/4096.[0m
[08/24 14:29:47]  --------------------------------------------------------------------------------
[08/24 14:29:47]  Iteration: 38 (5 solution, 32 counterexamples)
[08/24 14:29:48]  Generator returned sat in 0.404708 secs.
[08/24 14:29:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:49]  Improved number of small numbers from 57 to 113 out of a max of 113
[08/24 14:29:49]  Verifer returned sat in 0.384179 secs.
[08/24 14:29:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16556.287109   15856.287109 -9740.793457  16556.287109  400.006348  15856.287109        0.0  700.000000      600.000000     7.0     15856.287109            -1.0            -1
1   16556.287109   16006.285400 -9740.793457  16556.287109  699.999756  16006.285400        0.0  550.001709      500.000000     7.0     15856.287109             0.0         False
2   16656.287842   16156.285889 -9740.793457  16656.287842  650.002441  16156.285889        0.0  500.001953      500.000732     8.0     16656.287842             0.0         False
3   16656.287842   16156.287109 -9740.793457  16656.287842  300.001221  16156.287109        0.0  500.000732      400.000732     7.0     16656.287842             1.0         False
4   16656.287842   16256.287109 -9740.793457  16656.287842  300.000000  16256.287109        0.0  400.000732      300.000732     6.0     16656.287842             0.0         False
5   16656.287842   16406.286377 -9740.793457  16656.287842  250.001709  16406.286377        0.0  250.001465      200.000732     7.0     16656.287842             0.0         False
6   16656.287842   16556.287109 -9740.793457  16656.287842  250.000488  16556.287109        0.0  100.000732      100.000732     8.0     16656.287842             0.0         False
7   17056.288086   16640.286865 -9740.793457  17056.288086  500.000977  16640.286865        0.0  416.001221      400.000977     6.0     16656.287842             1.0         False
8   17056.288086   16656.288086 -9740.793457  17056.288086  383.999756  16656.288086        0.0  400.000000      300.000977     2.0     17056.288086             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0, buffer=600.[0m
[08/24 14:29:49]  --------------------------------------------------------------------------------
[08/24 14:29:49]  Iteration: 39 (5 solution, 33 counterexamples)
[08/24 14:29:52]  Generator returned sat in 1.307207 secs.
[08/24 14:29:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:52]  Verifer returned unsat in 0.240390 secs.
[08/24 14:29:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:52]  --------------------------------------------------------------------------------
[08/24 14:29:52]  Iteration: 40 (6 solution, 33 counterexamples)
[08/24 14:29:54]  Generator returned sat in 1.125555 secs.
[08/24 14:29:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:54]  Verifer returned unsat in 0.186927 secs.
[08/24 14:29:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:54]  --------------------------------------------------------------------------------
[08/24 14:29:54]  Iteration: 41 (7 solution, 33 counterexamples)
[08/24 14:29:56]  Generator returned sat in 0.206388 secs.
[08/24 14:29:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:56]  Verifer returned unsat in 0.340515 secs.
[08/24 14:29:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:56]  --------------------------------------------------------------------------------
[08/24 14:29:56]  Iteration: 42 (8 solution, 33 counterexamples)
[08/24 14:29:57]  Generator returned sat in 0.198724 secs.
[08/24 14:29:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:58]  Verifer returned unsat in 0.728106 secs.
[08/24 14:29:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:29:58]  --------------------------------------------------------------------------------
[08/24 14:29:58]  Iteration: 43 (9 solution, 33 counterexamples)
[08/24 14:29:59]  Generator returned sat in 0.347335 secs.
[08/24 14:29:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:00]  Improved number of small numbers from 67 to 113 out of a max of 113
[08/24 14:30:00]  Verifer returned sat in 0.378971 secs.
[08/24 14:30:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   17357.366943   16857.366943 -9740.793457  17357.366943    0.099854  16857.366943        0.0  500.000000      500.000000     7.0     16857.366943            -1.0            -1
1   17357.366943   16957.366943 -9740.793457  17357.366943  333.566667  16957.366943        0.0  400.000000      400.000000     7.0     16857.366943             0.0         False
2   17357.366943   17023.800293 -9740.793457  17357.366943  333.566667  17023.800293        0.0  333.566650      300.000000     8.0     16857.366943             0.0         False
3   17357.367188   17057.366943 -9740.793457  17357.367188  333.566895  17057.366943        0.0  300.000244      200.000244     9.0     16857.366943             0.0         False
4   17357.367188   17157.366943 -9740.793457  17357.367188  300.000000  17157.366943        0.0  200.000244      100.000244     8.0     17357.367188             1.0          True
5   17357.367188   17357.267090 -9740.793457  17357.367188  200.000000  17357.267090        0.0    0.100098        0.000244     9.0     17357.367188             0.0         False
6   17857.467285   17357.467041 -9740.793457  17857.467285  500.200195  17357.467041        0.0  500.000244      400.100342     1.0     17357.367188             1.0         False
7   17857.467285   17457.366943 -9740.793457  17857.467285  300.100098  17457.366943        0.0  400.100342      300.100342     2.0     17857.467285             0.0         False
8   17857.467285   17657.366943 -9740.793457  17857.467285  300.000000  17657.366943        0.0  200.100342      200.100342     3.0     17857.467285             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0, buffer=500.[0m
[08/24 14:30:00]  --------------------------------------------------------------------------------
[08/24 14:30:00]  Iteration: 44 (9 solution, 34 counterexamples)
[08/24 14:30:02]  Generator returned sat in 0.805387 secs.
[08/24 14:30:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:03]  Improved number of small numbers from 112 to 112 out of a max of 113
[08/24 14:30:03]  Verifer returned sat in 0.332994 secs.
[08/24 14:30:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   17157.417187   15657.292187 -9740.793457  17157.417187     0.0500  15657.292187     0.0000  1500.125        1500.125     7.0     15657.292187            -1.0            -1
1   17157.417187   15757.292187 -9740.793457  17157.417187  1500.0750  15757.292187     0.0000  1400.125        1400.125     6.0     15657.292187             0.0         False
2   17157.417187   15857.242188 -9740.793457  17157.417187  1400.0750  15857.242188     0.0000  1300.175        1300.125     7.0     17157.417187             0.0         False
3   17157.417187   15857.292187 -9740.793457  17157.417187  1300.1250  15857.292187     0.0000  1300.125        1200.125     8.0     17157.417187             0.0         False
4   17157.417187   15957.292187 -9740.793457  17157.417187   200.0000  15957.292187     0.0000  1200.125        1100.125     9.0     17157.417187             0.0         False
5   17157.417187   16057.292187 -9740.793457  17157.417187   600.0000  16057.292187     0.0000  1100.125        1000.125     8.0     17157.417187             1.0         False
6   17157.417187   16257.292187 -9740.793457  17157.417187   200.0500  16257.292187     0.0000   900.125         900.125     9.0     17157.417187             0.0         False
7   17157.417187   16257.292187 -9740.793457  17157.417187   900.0750  16257.292187     0.0000   900.125         800.125     9.0     17157.417187             1.0         False
8   18057.404687   16457.292187 -9740.793457  18057.404687  1800.1125  16457.292187    99.9875  1500.125        1500.125     9.0     17157.417187             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=1, buffer=12001/8.[0m
[08/24 14:30:03]  --------------------------------------------------------------------------------
[08/24 14:30:03]  Iteration: 45 (9 solution, 35 counterexamples)
[08/24 14:30:06]  Generator returned sat in 1.267033 secs.
[08/24 14:30:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:06]  Verifer returned unsat in 0.215276 secs.
[08/24 14:30:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:06]  --------------------------------------------------------------------------------
[08/24 14:30:06]  Iteration: 46 (10 solution, 35 counterexamples)
[08/24 14:30:07]  Generator returned sat in 0.231436 secs.
[08/24 14:30:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:08]  Improved gap from 0.000625 to 9.375
[08/24 14:30:09]  Improved number of small numbers from 60 to 67 out of a max of 114
[08/24 14:30:09]  Verifer returned sat in 2.196558 secs.
[08/24 14:30:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   15387.500977   15380.328486 -9470.992451  15387.500977    0.001465  15380.328486    0.00000   7.17249        0.009990     4.0     15380.328486            -1.0            -1
1   15487.492236   15487.490986 -9470.992451  15487.492236  107.163750  15487.490986    0.00000   0.00125        0.001250     1.0     15380.328486             1.0         False
2   15587.502236   15575.890986 -9470.992451  15587.502236  100.011250  15575.890986    0.00125  11.61000        0.010000     1.0     15587.500986             0.0         False
3   15587.502236   15587.490986 -9380.367451  15587.502236   11.610000  15587.490986    0.00125   0.01000       -9.365000     2.0     15587.500986             0.0         False
4   15696.878486   15696.864736 -9380.367451  15696.878486  109.386250  15696.864736    0.00250   0.01125        0.010000     1.0     15587.500986             0.0         False
5   15696.878486   15696.865986 -9289.742451  15696.878486    0.010000  15696.865986    0.00250   0.01000       -9.365000     2.0     15696.875986             0.0         False
6   15757.360986   15706.240986 -9240.860107  15757.360986   60.492500  15706.240986    0.00250  51.11750       -0.000156     1.0     15696.875986             0.0         False
7   15795.864736   15757.359736 -9179.364746  15795.864736   89.621250  15757.359736    0.00250  38.50250       -0.001045     1.0     15696.875986             0.0         False
8   15832.420361   15795.863281 -9179.364746  15832.420361   75.058125  15795.863281    0.00250  36.55458      -63.445420     1.0     15832.417861             0.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=1/100.[0m
[08/24 14:30:10]  --------------------------------------------------------------------------------
[08/24 14:30:10]  Iteration: 47 (10 solution, 36 counterexamples)
[08/24 14:30:12]  Generator returned sat in 0.482796 secs.
[08/24 14:30:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:12]  Verifer returned unsat in 0.244441 secs.
[08/24 14:30:12]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:12]  --------------------------------------------------------------------------------
[08/24 14:30:12]  Iteration: 48 (11 solution, 36 counterexamples)
[08/24 14:30:13]  Generator returned sat in 0.253834 secs.
[08/24 14:30:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:14]  Verifer returned unsat in 0.280123 secs.
[08/24 14:30:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:14]  --------------------------------------------------------------------------------
[08/24 14:30:14]  Iteration: 49 (12 solution, 36 counterexamples)
[08/24 14:30:15]  Generator returned sat in 0.355433 secs.
[08/24 14:30:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:16]  Verifer returned unsat in 0.710107 secs.
[08/24 14:30:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:16]  --------------------------------------------------------------------------------
[08/24 14:30:16]  Iteration: 50 (13 solution, 36 counterexamples)
[08/24 14:30:18]  Generator returned sat in 0.587425 secs.
[08/24 14:30:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:18]  Verifer returned unsat in 0.329391 secs.
[08/24 14:30:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:18]  --------------------------------------------------------------------------------
[08/24 14:30:18]  Iteration: 51 (14 solution, 36 counterexamples)
[08/24 14:30:19]  Generator returned sat in 0.268008 secs.
[08/24 14:30:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:21]  Improved number of small numbers from 58 to 64 out of a max of 113
[08/24 14:30:21]  Verifer returned sat in 1.939363 secs.
[08/24 14:30:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13796.083496   13170.358662 -9289.542451  13796.083496    0.100098  13170.358662        0.0  625.724834      574.374834     7.0     13170.358662            -1.0            -1
1   13796.083496   13221.708662 -9289.542451  13796.083496  625.624756  13221.708662        0.0  574.374834      474.374834     7.0     13170.358662             1.0         False
2   13846.733662   13321.708662 -9289.542451  13846.733662  625.025000  13321.708662        0.0  525.025000      425.025000     8.0     13846.733662             1.0          True
3   13846.733662   13446.233662 -9289.542451  13846.733662  524.925000  13446.233662        0.0  400.500000      325.025000     4.0     13846.733662             1.0         False
4   13846.733662   13621.708662 -9289.542451  13846.733662  400.400000  13621.708662        0.0  225.025000      225.025000     5.0     13846.733662             1.0         False
5   14021.908662   13621.808662 -9289.542451  14021.908662  400.200000  13621.808662        0.0  400.100000      300.200000     6.0     14021.908662             1.0         False
6   14021.908662   13796.183662 -9289.542451  14021.908662  350.150000  13796.183662        0.0  225.725000      200.200000     5.0     14021.908662             1.0         False
7   14146.233662   13921.708662 -9289.542451  14146.233662  350.050000  13921.708662        0.0  224.525000      224.525000     3.0     14146.233662             1.0         False
8   14246.733662   14021.708496 -9289.542451  14246.733662  325.025000  14021.708496        0.0  225.025166      225.025000     4.0     14246.733662             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=0, buffer=4595/8.[0m
[08/24 14:30:22]  --------------------------------------------------------------------------------
[08/24 14:30:22]  Iteration: 52 (14 solution, 37 counterexamples)
[08/24 14:30:24]  Generator returned sat in 1.009503 secs.
[08/24 14:30:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:25]  Verifer returned unsat in 0.701801 secs.
[08/24 14:30:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:25]  --------------------------------------------------------------------------------
[08/24 14:30:25]  Iteration: 53 (15 solution, 37 counterexamples)
[08/24 14:30:27]  Generator returned sat in 0.614223 secs.
[08/24 14:30:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:27]  Improved gap from 0.0 to 0
[08/24 14:30:28]  Improved number of small numbers from 59 to 69 out of a max of 114
[08/24 14:30:28]  Verifer returned sat in 1.130656 secs.
[08/24 14:30:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13846.751162   13646.739746 -9289.542451  13846.751162  0.001465  13646.739746        0.0  200.011416       200.01125     9.0     13646.739746            -1.0            -1
1   13846.751162   13646.741211 -9289.542451  13846.751162  0.012695  13646.741211        0.0  200.009951       100.01125     7.0     13646.739746             1.0         False
2   13846.751162   13846.738525 -9289.542451  13846.751162  0.012695  13846.738525        0.0    0.012637         0.01125     8.0     13646.739746             0.0         False
3   13846.751162   13846.739912 -9189.553701  13846.751162  0.011230  13846.739912        0.0    0.011250         0.00000     9.0     13846.751162             0.0         False
4   13846.751162   13846.751162 -9089.553701  13846.751162  0.010000  13846.751162        0.0    0.000000         0.00000     9.0     13846.751162             1.0         False
5   13846.761162   13846.751162 -8989.563701  13846.761162  0.010000  13846.751162        0.0    0.010000         0.00000     9.0     13846.751162             1.0         False
6   13846.761162   13846.761162 -8889.563701  13846.761162  0.010000  13846.761162        0.0    0.000000         0.00000     2.0     13846.751162             1.0         False
7   13846.782412   13846.761162 -8789.584951  13846.782412  0.021250  13846.761162        0.0    0.021250         0.00000     2.0     13846.751162             0.0         False
8   13846.782412   13846.782412 -8689.584961  13846.782412  0.010000  13846.782412        0.0    0.000000        -0.00001     2.0     13846.782412             0.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0, buffer=160009/800.[0m
[08/24 14:30:28]  --------------------------------------------------------------------------------
[08/24 14:30:28]  Iteration: 54 (15 solution, 38 counterexamples)
[08/24 14:30:30]  Generator returned sat in 0.645459 secs.
[08/24 14:30:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:31]  Verifer returned unsat in 0.223376 secs.
[08/24 14:30:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:31]  --------------------------------------------------------------------------------
[08/24 14:30:31]  Iteration: 55 (16 solution, 38 counterexamples)
[08/24 14:30:34]  Generator returned sat in 1.964548 secs.
[08/24 14:30:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:34]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/24 14:30:34]  Verifer returned sat in 0.399760 secs.
[08/24 14:30:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   13899.589844   13199.589844 -9289.542236  13899.589844    0.199951  13199.589844        0.0  700.000000      700.000000     9.0     13199.589844            -1.0            -1
1   13899.589844   13299.489746 -9289.542236  13899.589844    0.100098  13299.489746        0.0  600.100098      600.000000     7.0     13899.589844             1.0         False
2   13899.589844   13299.589844 -9289.542236  13899.589844  600.100098  13299.589844        0.0  600.000000      500.000000     8.0     13899.589844             0.0         False
3   14099.589844   13499.489746 -9289.542236  14099.589844  800.000000  13499.489746        0.0  600.100098      600.000000     9.0     13899.589844             0.0         False
4   14299.489746   13599.589844 -9289.542236  14299.489746  800.000000  13599.589844        0.0  699.899902      699.899902     9.0     13899.589844             1.0         False
5   14399.589844   13599.590088 -9289.542236  14399.589844  800.000000  13599.590088        0.0  799.999756      700.000000     9.0     13899.589844             1.0         False
6   14399.590088   13799.489990 -9289.542236  14399.590088  800.000000  13799.489990        0.0  600.100098      600.000244     9.0     13899.589844             1.0         False
7   14599.489990   13899.589844 -9289.542236  14599.489990  800.000000  13899.589844        0.0  699.900146      699.900146     9.0     13899.589844             1.0         False
8   14699.589844   13999.589844 -9289.542236  14699.589844  800.000000  13999.589844        0.0  700.000000      700.000000     6.0     13899.589844             1.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0, buffer=700.[0m
[08/24 14:30:35]  --------------------------------------------------------------------------------
[08/24 14:30:35]  Iteration: 56 (16 solution, 39 counterexamples)
[08/24 14:30:37]  Generator returned sat in 0.938682 secs.
[08/24 14:30:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:38]  Improved number of small numbers from 69 to 113 out of a max of 113
[08/24 14:30:38]  Verifer returned sat in 0.531130 secs.
[08/24 14:30:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   14199.589844   13699.588623 -9889.540771  14199.589844    0.001465  13699.588623   0.000000  500.001221      400.001465     9.0     13699.588623            -1.0            -1
1   14199.591064   13799.588379 -9889.540771  14199.591064  500.002441  13799.588379   0.000000  400.002686      300.002686     5.0     13699.588623             1.0         False
2   14199.592285   13899.588623 -9889.540771  14199.592285  400.003906  13899.588623   0.000000  300.003662      200.003906     6.0     14199.592285             0.0         False
3   14399.587158   14049.587158 -9889.540771  14399.587158  499.998535  14049.587158   0.000000  350.000000      299.998779     7.0     14199.592285             0.0         False
4   14399.587158   14099.589111 -9889.540771  14399.587158  349.998535  14099.589111   0.000000  299.998047      199.998779     8.0     14399.587158             0.0         False
5   14399.589844   14199.589844 -9889.540771  14399.589844  300.000732  14199.589844   0.000000  200.000000      100.001465     9.0     14399.589844             0.0         False
6   14799.591309   14399.588379 -9889.540771  14799.591309  600.001465  14399.588379   0.001465  400.001465      400.001465     2.0     14399.589844             1.0         False
7   14799.591309   14399.591064 -9889.540771  14799.591309    0.010000  14399.591064   0.001465  399.998779      300.001465     2.0     14799.589844             0.0         False
8   14799.591309   14499.588379 -9889.540771  14799.591309  300.001953  14499.588379   0.001465  300.001465      200.001465     3.0     14799.589844             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=819203/2048.[0m
[08/24 14:30:38]  --------------------------------------------------------------------------------
[08/24 14:30:38]  Iteration: 57 (16 solution, 40 counterexamples)
[08/24 14:30:40]  Generator returned sat in 0.941476 secs.
[08/24 14:30:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:41]  Improved number of small numbers from 61 to 113 out of a max of 113
[08/24 14:30:41]  Verifer returned sat in 0.395675 secs.
[08/24 14:30:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   15599.581299   14899.581299 -11089.533691  15599.581299  700.002686  14899.581299   0.000000  700.000000      600.000000     9.0     14899.581299            -1.0            -1
1   15599.581299   15099.563965 -11089.533691  15599.581299  699.999756  15099.563965   0.000000  500.017334      500.000000     8.0     15599.581299             1.0         False
2   15599.583984   15099.581299 -11089.533691  15599.583984  500.020020  15099.581299   0.000000  500.002686      400.002686     6.0     15599.583984             0.0         False
3   15599.583984   15199.591064 -11089.533691  15599.583984  499.999756  15199.591064   0.000000  399.992920      300.002686     7.0     15599.583984             0.0         False
4   15599.583984   15399.571289 -11089.533691  15599.583984  300.009766  15399.571289   0.000000  200.012695      200.002686     8.0     15599.583984             0.0         False
5   15699.578613   15499.581299 -11089.533691  15699.578613  300.007324  15499.581299   0.000000  199.997314      199.997314     9.0     15699.578613             0.0         False
6   15999.588623   15599.581299 -11089.533691  15999.588623  500.007324  15599.581299   0.000000  400.007324      400.007324     9.0     15699.578613             1.0         False
7   16299.583740   15699.581299 -11089.533691  16299.583740  700.002441  15699.581299   0.002441  600.000000      600.000000     2.0     15699.578613             1.0         False
8   16299.583740   15799.581299 -11089.533691  16299.583740    0.010000  15799.581299   0.002441  500.000000      500.000000     3.0     16299.581299             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=600.[0m
[08/24 14:30:41]  --------------------------------------------------------------------------------
[08/24 14:30:41]  Iteration: 58 (16 solution, 41 counterexamples)
[08/24 14:30:44]  Generator returned sat in 1.297844 secs.
[08/24 14:30:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:44]  Verifer returned unsat in 0.348012 secs.
[08/24 14:30:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:44]  --------------------------------------------------------------------------------
[08/24 14:30:44]  Iteration: 59 (17 solution, 41 counterexamples)
[08/24 14:30:46]  Generator returned sat in 0.361353 secs.
[08/24 14:30:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:47]  Verifer returned unsat in 0.523149 secs.
[08/24 14:30:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:47]  --------------------------------------------------------------------------------
[08/24 14:30:47]  Iteration: 60 (18 solution, 41 counterexamples)
[08/24 14:30:49]  Generator returned sat in 1.498859 secs.
[08/24 14:30:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:50]  Verifer returned unsat in 0.364586 secs.
[08/24 14:30:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:50]  --------------------------------------------------------------------------------
[08/24 14:30:50]  Iteration: 61 (19 solution, 41 counterexamples)
[08/24 14:30:52]  Generator returned sat in 1.368026 secs.
[08/24 14:30:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:54]  Verifer returned unsat in 1.288859 secs.
[08/24 14:30:54]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:54]  --------------------------------------------------------------------------------
[08/24 14:30:54]  Iteration: 62 (20 solution, 41 counterexamples)
[08/24 14:30:56]  Generator returned sat in 0.932401 secs.
[08/24 14:30:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:30:57]  Improved gap from 0.0 to 23.4375
[08/24 14:30:58]  Improved number of small numbers from 75 to 114 out of a max of 114
[08/24 14:30:58]  Verifer returned sat in 1.547863 secs.
[08/24 14:30:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   15999.581299   15999.581299 -10966.107422  15999.581299    0.001250  15999.581299   0.000000   0.000000     -100.000000     5.0     15999.581299            -1.0            -1
1   16199.581055   16099.584961 -10966.107422  16199.581055  199.999756  16099.584961   0.000000  99.996094       -0.000244     1.0     15999.581299             1.0         False
2   16299.583740   16299.581299 -10966.107422  16299.583740  199.998779  16299.581299   0.000000   0.002441        0.002441     1.0     16299.583740             0.0         False
3   16299.583740   16299.581299 -10889.544922  16299.583740    0.001465  16299.581299   0.000000   0.002441      -23.435059     1.0     16299.583740             0.0         False
4   16449.582031   16423.017334 -10889.544922  16449.582031  150.000732  16423.017334   1.710693  24.854004       24.852539     1.0     16299.583740             0.0         False
5   16449.582031   16423.018799 -10814.397461  16449.582031    0.010000  16423.018799   1.710693  24.852539        0.000000     2.0     16447.871338             0.0         False
6   16486.448242   16447.871338 -10751.263672  16486.448242   61.718750  16447.871338   1.710693  36.866211        0.000000     3.0     16447.871338             1.0         False
7   16523.727051   16484.737549 -10688.542480  16523.727051   74.145020  16484.737549   1.710693  37.278809        0.000000     2.0     16447.871338             1.0         False
8   16523.727051   16522.016357 -10688.542480  16523.727051   30.860107  16522.016357   1.710693   0.000000     -100.000000     2.0     16522.016357             1.0          True
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1, buffer=25449/1024.[0m
[08/24 14:30:58]  --------------------------------------------------------------------------------
[08/24 14:30:58]  Iteration: 63 (20 solution, 42 counterexamples)
[08/24 14:31:03]  Generator returned sat in 3.280210 secs.
[08/24 14:31:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:04]  Improved gap from 0.0 to 23.4375
[08/24 14:31:04]  Improved number of small numbers from 80 to 114 out of a max of 114
[08/24 14:31:04]  Verifer returned sat in 0.756453 secs.
[08/24 14:31:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16248.717285   16176.133545 -11116.644775  16248.717285    0.001221  16176.133545   0.000000  72.583740        0.011230     5.0     16176.133545            -1.0            -1
1   16248.717285   16248.706299 -11040.082520  16248.717285    0.001250  16248.706299   0.000000   0.010986      -23.426514     5.0     16176.133545             1.0         False
2   16299.583740   16272.143799 -10967.522461  16299.583740   50.877441  16272.143799   0.000000  27.439941        0.000000     1.0     16176.133545             1.0          True
3   16299.583740   16299.583740 -10890.959961  16299.583740    0.001465  16299.583740   0.000000   0.000000      -23.437500     2.0     16299.583740             0.0         False
4   16423.033936   16423.021240 -10890.959961  16423.033936  123.450195  16423.021240   0.001221   0.011475        0.011475     1.0     16299.583740             1.0         False
5   16423.033936   16423.021240 -10814.397461  16423.033936    0.010000  16423.021240   0.001221   0.011475      -23.426025     1.0     16423.032715             0.0         False
6   16498.461182   16446.458740 -10766.398682  16498.461182   75.438721  16446.458740   0.001221  52.001221        0.000000     1.0     16423.032715             0.0         False
7   16519.897461   16498.459961 -10689.958740  16519.897461   73.437500  16498.459961   0.001221  21.436279       -2.123779     2.0     16519.896240             0.0         False
8   16573.899902   16522.020020 -10689.958740  16573.899902   75.438721  16522.020020   0.001221  51.878662      -48.121338     1.0     16519.896240             1.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=47/4096.[0m
[08/24 14:31:04]  --------------------------------------------------------------------------------
[08/24 14:31:04]  Iteration: 64 (20 solution, 43 counterexamples)
[08/24 14:31:07]  Generator returned sat in 1.023844 secs.
[08/24 14:31:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:07]  Verifer returned unsat in 0.246631 secs.
[08/24 14:31:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:07]  --------------------------------------------------------------------------------
[08/24 14:31:07]  Iteration: 65 (21 solution, 43 counterexamples)
[08/24 14:31:09]  Generator returned sat in 0.395287 secs.
[08/24 14:31:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:10]  Improved gap from 0.00125 to 9.375
[08/24 14:31:11]  Improved number of small numbers from 65 to 72 out of a max of 114
[08/24 14:31:11]  Verifer returned sat in 2.546016 secs.
[08/24 14:31:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16728.555176   16728.555049 -10995.647461  16728.555176  109.377500  16728.555049    0.00000    0.000127       -0.001123     1.0     16728.555049            -1.0            -1
1   16837.931299   16728.556299 -10995.647461  16837.931299  109.376250  16728.556299    0.00125  109.373750        9.373750     1.0     16837.930049             0.0         False
2   16928.558799   16916.951299 -10995.647461  16928.558799  200.001250  16916.951299    0.00125   11.606250        0.001250     1.0     16837.930049             0.0         False
3   16928.558799   16928.556299 -10905.022461  16928.558799    0.001465  16928.556299    0.00125    0.001250       -9.373750     2.0     16928.557549             0.0         False
4   17128.558799   17037.931299 -10905.022461  17128.558799  200.001250  17037.931299   81.25375    9.373750        9.373750     1.0     16928.557549             1.0         False
5   17128.558799   17037.931299 -10814.397461  17128.558799    0.010000  17037.931299   81.25375    9.373750       -0.001250     1.0     17047.305049             0.0         False
6   17179.680049   17047.306299 -10794.642334  17179.680049   60.495000  17047.306299   81.25375   51.120000      -29.124873     1.0     17047.305049             0.0         False
7   17218.182549   17127.551299 -10704.021240  17218.182549   89.622500  17127.551299   81.25375    9.377500       -0.001279     1.0     17047.305049             0.0         False
8   17298.426299   17136.930176 -10704.020996  17298.426299   89.621250  17136.930176   81.25375   80.242373      -19.757285     1.0     17217.172549             0.0         False
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1, buffer=7499/800.[0m
[08/24 14:31:12]  --------------------------------------------------------------------------------
[08/24 14:31:12]  Iteration: 66 (21 solution, 44 counterexamples)
[08/24 14:31:15]  Generator returned sat in 1.736607 secs.
[08/24 14:31:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:15]  Improved gap from 0.0 to 100
[08/24 14:31:16]  Improved number of small numbers from 72 to 90 out of a max of 114
[08/24 14:31:16]  Verifer returned sat in 0.865803 secs.
[08/24 14:31:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f  exceed_queue_f this_decrease
0   16632.185303   16595.168799 -10905.022461  16632.185303  137.066650  16595.168799      0.000   37.016504       -0.050163     9.0     16595.168799            -1.0            -1
1   16732.185465   16632.235596 -10905.022461  16732.185465  137.016667  16632.235596      0.000   99.949870       -0.050000     1.0     16732.185465             1.0         False
2   16832.235596   16732.235596 -10905.022461  16832.235596  200.000000  16732.235596      0.000  100.000000        0.000130     1.0     16732.185465             0.0         False
3   16832.235596   16832.235465 -10905.022461  16832.235596    0.049805  16832.235465      0.000    0.000130      -99.999870     2.0     16832.235596             0.0         False
4   16950.768799   16950.718799 -10905.022461  16950.768799  118.533333  16950.718799      0.000    0.050000      -81.466667     1.0     16832.235596             1.0         False
5   17128.518799   17032.235465 -10905.022461  17128.518799  177.800000  17032.235465      0.000   96.283333       -3.716667     1.0     16832.235596             0.0         False
6   17298.935465   17232.235465 -10905.022461  17298.935465  266.700000  17232.235465      0.000   66.700000       66.700000     1.0     16832.235596             0.0         False
7   17632.285465   17232.235465 -10905.022461  17632.285465  400.050000  17232.235465      0.000  400.050000      300.050000     1.0     16832.235596             0.0         False
8   17832.310465   17432.235352 -10905.022461  17832.310465  600.075000  17432.235352    100.025  300.050114      300.050000     2.0     16832.235596             0.0         False
fefficient=True, bounded_queue=False, bounded_loss=True, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=1, buffer=6001/20.[0m
[08/24 14:31:17]  --------------------------------------------------------------------------------
[08/24 14:31:17]  Iteration: 67 (21 solution, 45 counterexamples)
[08/24 14:31:19]  Generator returned unsat in 0.523951 secs.
[08/24 14:31:19]  [96mNo more solutions found[0m
[08/24 14:31:19]  Final solutions:
[08/24 14:31:19]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][7]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][2]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][5]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][3]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][6]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][4]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][8]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
elif(qbound[t-1][1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/24 14:31:19]  Took 182.821285 secs.
