[08/23 16:57:24]  --------------------------------------------------------------------------------
[08/23 16:57:24]  Iteration: 1 (0 solution, 0 counterexamples)
[08/23 16:57:24]  Generator returned sat in 0.004341 secs.
[08/23 16:57:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:57:24]  Improved gap from 0.0 to 100
[08/23 16:57:25]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 16:57:25]  Verifer returned sat in 0.337790 secs.
[08/23 16:57:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t   arrival_0,t     cwnd_0,t  service_0,t     losts_0,t  queue_t  bottle_queue_t
0     -24.500000         -106.6     106.6    -24.500000     0.100000       -106.6      0.000000     82.1            82.1
1     -24.500000          -24.6     106.6    -24.500000    82.100000        -24.6      0.000000      0.1           -17.9
2     293.300000           93.4     106.6    293.300000   317.900000         93.4      0.000000    199.9           199.9
3     393.500000           93.4     106.6    393.500000   300.100000         93.4      0.100000    300.0           200.0
4     945.650000          193.4     106.6    945.650000   852.150000        193.4    452.250000    300.0           200.0
5    2361.875000          393.4     106.6   2361.875000  1716.225000        393.4   1768.475000    200.0           200.0
6    5338.212500          492.4     106.6   5338.212500  3176.337500        492.4   4644.812500    201.0           200.0
7   10701.718750          493.4     106.6  10701.718750  5564.506250        493.4   9908.318750    300.0           200.0
8   19350.478125          593.4     106.6  19350.478125  8948.759375        593.4  18457.078125    300.0           200.0
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 16:57:25]  --------------------------------------------------------------------------------
[08/23 16:57:25]  Iteration: 2 (0 solution, 1 counterexamples)
[08/23 16:57:25]  Generator returned sat in 0.035627 secs.
[08/23 16:57:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:57:25]  Improved number of small numbers from 89 to 99 out of a max of 99
[08/23 16:57:25]  Verifer returned sat in 0.177344 secs.
[08/23 16:57:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0      -6.500244    -206.600098  106.600098    -6.500244     0.100000  -206.600098     0.000000  200.099854      100.099854
1      -6.500000      -6.600098  106.600098    -6.500000   200.100098    -6.600098     0.000000    0.100098        0.100098
2      -6.500000      -6.600098  106.600098    -6.500000     0.099854    -6.600098     0.000000    0.100098      -99.899902
3    1289.853027      93.399902  106.600098  1289.853027  1296.453125    93.399902   896.453125  300.000000      200.000000
4    2435.806152     249.399902  106.600098  2435.806152  1445.953125   249.399902  1942.406250  244.000000      200.000000
5    3765.259277     393.399902  106.600098  3765.259277  1573.453125   393.399902  3171.859375  200.000000      200.000000
6    5338.212402     492.399902  106.600098  5338.212402  1772.953125   492.399902  4644.812500  201.000000      200.000000
7    7109.165527     493.399902  106.600098  7109.165527  1971.953125   493.399902  6315.765625  300.000000      200.000000
8    8902.618652     593.400146  106.600098  8902.618652  2093.453125   593.400146  8009.218750  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=5.[0m
[08/23 16:57:25]  --------------------------------------------------------------------------------
[08/23 16:57:25]  Iteration: 3 (0 solution, 2 counterexamples)
[08/23 16:57:26]  Generator returned sat in 0.104059 secs.
[08/23 16:57:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 16:57:26]  Improved number of small numbers from 47 to 61 out of a max of 99
[08/23 16:57:26]  Verifer returned sat in 0.744083 secs.
[08/23 16:57:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t   service_0,t     losts_0,t     queue_t  bottle_queue_t
0  -11384.989258  -11684.989014  11584.98916 -11384.989258     0.099854 -11684.989014      0.000000  299.999756      199.999902
1  -11384.989258  -11584.989014  11584.98916 -11384.989258   299.999756 -11584.989014      0.000000  199.999756       99.999902
2  -11384.989258  -11484.989160  11584.98916 -11384.989258     0.099854 -11484.989160      0.000000   99.999902       -0.000098
3   -2005.792285  -11384.989160  11584.98916  -2005.792285  9479.196875 -11384.989160   9079.196875  300.000000      200.000000
4    2435.806152  -11184.989160  11584.98916   2435.806152  4741.598437 -11184.989160  13420.795313  200.000000      200.000000
5    4608.605371  -11084.989160  11584.98916   4608.605371  2372.799219 -11084.989160  15493.594531  200.000000      200.000000
6    5597.004980  -11084.989160  11584.98916   5597.004980  1188.399609 -11084.989160  16381.994141  300.000000      200.000000
7    5893.204785  -10884.989160  11584.98916   5893.204785   596.199805 -10884.989160  16578.193945  200.000000      200.000000
8    5993.304688  -10784.989258  11584.98916   5993.304688   300.099902 -10784.989258  16578.293848  200.000098      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 16:57:27]  --------------------------------------------------------------------------------
[08/23 16:57:27]  Iteration: 4 (0 solution, 3 counterexamples)
[08/23 16:57:27]  Generator returned sat in 0.018264 secs.
[08/23 16:57:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 16:57:27]  Improved gap from 0.0 to 0
[08/23 16:57:27]  Improved number of small numbers from 55 to 79 out of a max of 100
[08/23 16:57:27]  Verifer returned sat in 0.590202 secs.
[08/23 16:57:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5396.987305    5196.985107 -5296.985107  5396.987305    0.099609  5196.985107        0.0  200.002197      100.002197
1    5396.987305    5396.985107 -5296.985107  5396.987305    0.002686  5396.985107        0.0    0.002197        0.002197
2    5596.985107    5396.985107 -5296.985107  5596.985107  200.000000  5396.985107        0.0  200.000000      100.000000
3    5596.985107    5596.984980 -5296.985107  5596.985107  200.000000  5596.984980        0.0    0.000127        0.000000
4    5596.994980    5596.987480 -5196.994980  5596.994980    0.010000  5596.987480        0.0    0.007500        0.000000
5    5596.997480    5596.994980 -5097.002441  5596.997480    0.010000  5596.994980        0.0    0.002500       -0.004961
6    5597.004980    5597.002480 -4997.005127  5597.004980    0.010000  5597.002480        0.0    0.002500       -0.000146
7    5597.012480    5597.009980 -4897.019775  5597.012480    0.010000  5597.009980        0.0    0.002500       -0.007295
8    5597.019980    5597.019775 -4897.019775  5597.019980    0.010000  5597.019775        0.0    0.000205      -99.999795
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 16:57:28]  --------------------------------------------------------------------------------
[08/23 16:57:28]  Iteration: 5 (0 solution, 4 counterexamples)
[08/23 16:57:28]  Generator returned sat in 0.199391 secs.
[08/23 16:57:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 16:57:28]  Improved gap from 0.0025 to 98.4375
[08/23 16:57:29]  Improved number of small numbers from 58 to 80 out of a max of 100
[08/23 16:57:29]  Verifer returned sat in 0.711904 secs.
[08/23 16:57:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5396.994873    5196.994873 -5196.995117  5396.994873    0.099365  5196.994873      0.000  200.000000      199.999893
1    5396.994873    5196.995117 -5196.995117  5396.994873    0.005127  5196.995117      0.000  199.999756       99.999893
2    5596.976318    5396.994873 -5196.995117  5596.976318  399.981201  5396.994873      0.000  199.981445      199.981338
3    5596.976318    5496.994873 -5196.995117  5596.976318   26.308906  5496.994873      0.000   99.981445       99.981338
4    5596.976318    5596.971230 -5196.995117  5596.976318   51.117812  5596.971230      0.000    0.005088       -0.018662
5    5697.706855    5596.994980 -5196.995117  5697.706855  100.735625  5596.994980      0.000  100.711875        0.711875
6    5796.966230    5698.528730 -5196.966367  5796.966230  199.971250  5698.528730      0.000   98.437500        0.000000
7    6096.971230    5798.528809 -5196.966367  6096.971230  398.442500  5798.528809      0.005  298.437422      200.000000
8    6096.971230    5896.966309 -5196.966367  6096.971230    0.010000  5896.966309      0.005  199.999922      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:57:29]  --------------------------------------------------------------------------------
[08/23 16:57:29]  Iteration: 6 (0 solution, 5 counterexamples)
[08/23 16:57:29]  Generator returned sat in 0.170819 secs.
[08/23 16:57:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 16:57:29]  Improved gap from 0.00125 to 100
[08/23 16:57:30]  Improved number of small numbers from 54 to 66 out of a max of 100
[08/23 16:57:30]  Verifer returned sat in 0.863224 secs.
[08/23 16:57:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5416.017090    5182.016388 -5071.106904  5416.017090    0.099121  5182.016388     0.0000  234.000702      199.999868
1    5416.017090    5216.017334 -5071.106904  5416.017090    0.002500  5216.017334     0.0000  199.999756       99.999868
2    5416.017090    5316.017222 -5071.106904  5416.017090  199.999756  5316.017222     0.0000   99.999868       -0.000132
3    5416.019722    5416.017222 -5071.106904  5416.019722  100.002500  5416.017222     0.0000    0.002500      -99.997500
4    5816.019722    5516.017222 -5071.106904  5816.019722  400.002500  5516.017222     0.0025  300.000000      200.000000
5    5816.019722    5616.017222 -5071.106904  5816.019722    0.010000  5616.017222     0.0025  200.000000      100.000000
6    6065.024722    5816.017090 -5071.106904  6065.024722  449.005000  5816.017090    49.0075  200.000132      200.000000
7    6065.024722    5816.017222 -5071.106904  6065.024722    0.010000  5816.017222    49.0075  200.000000      100.000000
8    6314.029722    5916.017334 -5071.106904  6314.029722  449.005000  5916.017334    98.0125  299.999888      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 16:57:30]  --------------------------------------------------------------------------------
[08/23 16:57:30]  Iteration: 7 (0 solution, 6 counterexamples)
[08/23 16:57:31]  Generator returned sat in 0.509372 secs.
[08/23 16:57:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:57:31]  Improved gap from 0.0 to 100
[08/23 16:57:32]  Improved number of small numbers from 54 to 60 out of a max of 100
[08/23 16:57:32]  Verifer returned sat in 1.143952 secs.
[08/23 16:57:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5187.987305    4987.988638 -4843.07832  5187.987305    0.099121  4987.988638   0.000000  199.998666      199.998666
1    5187.987305    5087.988638 -4843.07832  5187.987305    0.002686  5087.988638   0.000000   99.998666       99.998666
2    5187.988638    5175.986138 -4843.07832  5187.988638  100.000000  5175.986138   0.000000   12.002500        0.000000
3    5281.988638    5281.987388 -4843.07832  5281.988638  106.002500  5281.987388   0.000000    0.001250       -6.000000
4    5638.991763    5387.988638 -4843.07832  5638.991763  357.004375  5387.988638  51.003125  200.000000      200.000000
5    5638.991763    5387.988638 -4843.07832  5638.991763  148.000000  5387.988638  51.003125  200.000000      100.000000
6    5838.993013    5587.988638 -4843.07832  5838.993013  400.001250  5587.988638  51.004375  200.000000      200.000000
7    5838.993013    5587.988638 -4843.07832  5838.993013  151.000625  5587.988638  51.004375  200.000000      100.000000
8    6038.994263    5687.988770 -4843.07832  6038.994263  400.001250  5687.988770  51.005625  299.999869      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 16:57:32]  --------------------------------------------------------------------------------
[08/23 16:57:32]  Iteration: 8 (0 solution, 7 counterexamples)
[08/23 16:57:34]  Generator returned sat in 1.294044 secs.
[08/23 16:57:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:57:34]  Improved number of small numbers from 39 to 99 out of a max of 99
[08/23 16:57:34]  Verifer returned sat in 0.315443 secs.
[08/23 16:57:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5187.987305    4987.988770 -4843.078369  5187.987305    0.099121  4987.988770   0.000000  199.998535      199.998535
1    5187.987305    5087.988770 -4843.078369  5187.987305    0.002441  5087.988770   0.000000   99.998535       99.998535
2    5187.989990    5187.988770 -4843.078369  5187.989990  100.001221  5187.988770   0.000000    0.001221        0.001221
3    5281.988525    5281.987549 -4843.078369  5281.988525   93.999756  5281.987549   0.000000    0.000977       -6.000244
4    5667.986084    5385.986328 -4843.078369  5667.986084  385.998535  5385.986328  79.997314  202.002441      200.000000
5    5667.986084    5402.987061 -4843.078369  5667.986084  190.999268  5402.987061  79.997314  185.001709      100.000000
6    5886.981934    5587.988525 -4843.078369  5886.981934  403.997559  5587.988525  98.993164  200.000244      200.000000
7    5886.981934    5587.988770 -4843.078369  5886.981934  199.998779  5587.988770  98.993164  200.000000      100.000000
8    6086.983154    5687.988770 -4843.078369  6086.983154  400.001221  5687.988770  98.994385  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 16:57:34]  --------------------------------------------------------------------------------
[08/23 16:57:34]  Iteration: 9 (0 solution, 8 counterexamples)
[08/23 16:57:35]  Generator returned sat in 0.187625 secs.
[08/23 16:57:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:57:35]  Improved gap from 0.001220703125 to 100
[08/23 16:57:35]  Improved number of small numbers from 82 to 82 out of a max of 100
[08/23 16:57:35]  Verifer returned sat in 0.322642 secs.
[08/23 16:57:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5187.987305    4889.987305 -4845.076904  5187.987305    0.099121  4889.987305   0.000000  298.000000           198.0
1    5187.987305    5089.987305 -4845.076904  5187.987305    0.002441  5089.987305   0.000000   98.000000            98.0
2    5187.987305    5187.986084 -4845.076904  5187.987305   98.000000  5187.986084   0.000000    0.001221            -2.0
3    5289.987305    5189.987305 -4845.076904  5289.987305  102.001221  5189.987305   0.000000  100.000000             0.0
4    5589.988525    5318.996084 -4845.076904  5589.988525  400.001221  5318.996084   0.001221  270.991221           200.0
5    5589.988525    5489.987305 -4845.076904  5589.988525    0.010000  5489.987305   0.001221  100.000000           100.0
6    5789.999746    5589.987305 -4845.076904  5789.999746  300.011221  5589.987305   0.012441  200.000000           200.0
7    5789.999746    5689.987305 -4845.076904  5789.999746    0.010000  5689.987305   0.012441  100.000000           100.0
8    6059.000967    5689.987305 -4845.076904  6059.000967  369.001221  5689.987305  69.013662  300.000000           200.0
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:57:35]  --------------------------------------------------------------------------------
[08/23 16:57:35]  Iteration: 10 (0 solution, 9 counterexamples)
[08/23 16:57:36]  Generator returned sat in 0.138595 secs.
[08/23 16:57:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:57:36]  Improved gap from 0.0 to 100
[08/23 16:57:36]  Improved number of small numbers from 63 to 71 out of a max of 100
[08/23 16:57:36]  Verifer returned sat in 0.558414 secs.
[08/23 16:57:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4988.011963    4888.010762 -4845.077148  4988.011963    0.099121  4888.010762    0.00000  100.001201      100.001201
1    4988.011963    4988.010762 -4845.077148  4988.011963    0.001221  4988.010762    0.00000    0.001201        0.001201
2    5288.012012    4988.012012 -4845.077148  5288.012012  300.001250  4988.012012    0.00125  299.998750      200.000000
3    5388.010762    5089.012012 -4845.077148  5388.010762  399.997500  5089.012012    0.00125  298.997500      199.998750
4    5488.013262    5188.010762 -4845.077148  5488.013262  399.000000  5188.010762    0.00250  300.000000      200.000000
5    5488.013262    5388.010762 -4845.077148  5488.013262    0.010000  5388.010762    0.00250  100.000000      100.000000
6    5786.017012    5388.010986 -4845.077148  5786.017012  398.003750  5388.010986   98.00625  299.999775      200.000000
7    5786.017012    5539.008887 -4845.077148  5786.017012    0.010000  5539.008887   98.00625  149.001875      100.000000
8    5986.018262    5588.010986 -4845.077148  5986.018262  349.003125  5588.010986   98.00750  299.999775      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:57:36]  --------------------------------------------------------------------------------
[08/23 16:57:36]  Iteration: 11 (0 solution, 10 counterexamples)
[08/23 16:57:38]  Generator returned sat in 1.158598 secs.
[08/23 16:57:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:57:39]  Improved gap from 0.0025 to 32.8125
[08/23 16:57:39]  Improved number of small numbers from 56 to 100 out of a max of 100
[08/23 16:57:39]  Verifer returned sat in 1.170290 secs.
[08/23 16:57:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    4933.702393    4900.892578 -4463.020264  4933.702393    0.098877  4900.892578    0.000000   32.809814       32.809814
1    4933.705078    4900.892578 -4395.833008  4933.705078   32.812500  4900.892578    0.000000   32.812500       -0.000244
2    4966.761230    4933.705322 -4328.888916  4966.761230   65.868652  4933.705322    0.000000   33.055908        0.000000
3    4966.761230    4966.761230 -4261.701416  4966.761230    0.002441  4966.761230    0.000000    0.000000      -32.812500
4    5000.199219    4999.573730 -4194.513916  5000.199219   33.437988  4999.573730    0.000000    0.625488      -32.187012
5    5099.571289    5066.758545 -4161.698975  5099.571289   99.997559  5066.758545    0.000000   32.812744        0.000000
6    5283.781494    5199.571289 -4161.698975  5283.781494  217.022949  5199.571289    0.000000   84.210205       84.210205
7    5642.010742    5199.571289 -4161.698975  5642.010742  442.439453  5199.571289  142.439453  300.000000      200.000000
8    5642.010742    5299.571289 -4161.698975  5642.010742    0.010000  5299.571289  142.439453  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:57:39]  --------------------------------------------------------------------------------
[08/23 16:57:39]  Iteration: 12 (0 solution, 11 counterexamples)
[08/23 16:57:40]  Generator returned sat in 0.105724 secs.
[08/23 16:57:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 16:57:41]  Improved gap from 31.548274739583334 to 31.25
[08/23 16:57:42]  Improved number of small numbers from 54 to 63 out of a max of 100
[08/23 16:57:42]  Verifer returned sat in 2.012754 secs.
[08/23 16:57:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4393.793701    4362.543845 -4465.928975  4393.793701    0.098877  4362.543845      0.000   31.249857       31.249857
1    4393.793701    4362.543845 -4397.178975  4393.793701   31.249756  4362.543845      0.000   31.249857       -0.000143
2    4425.043845    4393.793845 -4328.428975  4425.043845   62.500000  4393.793845      0.000   31.250000        0.000000
3    4425.043845    4425.043845 -4259.678975  4425.043845    1.664444  4425.043845      0.000    0.000000      -31.250000
4    4459.790511    4456.293845 -4228.423828  4459.790511   34.746667  4456.293845      0.000    3.496667      -65.248187
5    4556.288845    4525.038845 -4159.673975  4556.288845   99.995000  4525.038845      0.000   31.250000        0.000000
6    4741.653845    4561.928845 -4159.673975  4741.653845  216.615000  4561.928845      0.000  179.725000       85.365000
7    4956.293845    4656.289062 -4159.673975  4956.293845  394.365000  4656.289062      0.005  299.999782      200.000000
8    4956.293845    4756.289062 -4159.673975  4956.293845    0.010000  4756.289062      0.005  199.999782      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:57:42]  --------------------------------------------------------------------------------
[08/23 16:57:42]  Iteration: 13 (0 solution, 12 counterexamples)
[08/23 16:57:43]  Generator returned sat in 0.853525 secs.
[08/23 16:57:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:57:45]  Improved gap from 29.916666666666668 to 31.25
[08/23 16:57:45]  Improved number of small numbers from 54 to 63 out of a max of 100
[08/23 16:57:45]  Verifer returned sat in 2.310568 secs.
[08/23 16:57:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5500.124512    5468.874678 -4550.087725  5500.124512    0.098633  5468.874678    0.00000   31.249834       31.249834
1    5500.124512    5468.874678 -4481.337725  5500.124512    0.002441  5468.874678    0.00000   31.249834       -0.000166
2    5531.374678    5500.124678 -4412.587725  5531.374678   62.500000  5500.124678    0.00000   31.250000        0.000000
3    5531.374678    5531.374678 -4343.837725  5531.374678    0.554444  5531.374678    0.00000    0.000000      -31.250000
4    5565.456345    5562.624678 -4312.585205  5565.456345   34.081667  5562.624678    0.00000    2.831667      -65.915814
5    5662.622178    5631.372178 -4243.835225  5662.622178   99.997500  5631.372178    0.00000   31.250000        0.000000
6    5848.992178    5731.372178 -4243.835225  5848.992178  217.620000  5731.372178    0.00000  117.620000       86.370000
7    6159.800928    5762.622314 -4243.835225  6159.800928  428.428750  5762.622314   97.17875  299.999863      200.000000
8    6159.800928    5862.622314 -4243.835225  6159.800928    0.010000  5862.622314   97.17875  199.999863      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:57:46]  --------------------------------------------------------------------------------
[08/23 16:57:46]  Iteration: 14 (0 solution, 13 counterexamples)
[08/23 16:57:46]  Generator returned sat in 0.512316 secs.
[08/23 16:57:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:57:46]  Improved gap from 0.0 to 100
[08/23 16:57:47]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 16:57:47]  Verifer returned sat in 0.371356 secs.
[08/23 16:57:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t  service_0,t     losts_0,t     queue_t  bottle_queue_t
0    5368.874756    5368.874756 -4550.087646   5368.874756     0.098633  5368.874756      0.000000    0.000000      -99.999756
1    5468.923584    5468.874756 -4550.087646   5468.923584   100.048828  5468.874756      0.000000    0.048828      -99.950928
2    5868.825439    5568.874512 -4550.087646   5868.825439   399.950684  5568.874512      0.000000  299.950928      199.950928
3   15139.444824    5668.874512 -4550.087646  15139.444824  9570.570312  5668.874512   9170.570312  300.000000      200.000000
4   19625.229980    5868.874512 -4550.087646  19625.229980  4785.785156  5868.874512  13556.355469  200.000000      200.000000
5   21818.622559    5886.874512 -4550.087646  21818.622559  2393.392578  5886.874512  15649.748047  282.000000      200.000000
6   22733.818848    6068.874512 -4550.087646  22733.818848  1197.196289  6068.874512  16464.944336  200.000000      200.000000
7   23132.916992    6168.874512 -4550.087646  23132.916992   599.098145  6168.874512  16764.042480  200.000000      200.000000
8   23232.966064    6168.874756 -4550.087646  23232.966064   300.049072  6168.874756  16764.091553  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 16:57:47]  --------------------------------------------------------------------------------
[08/23 16:57:47]  Iteration: 15 (0 solution, 14 counterexamples)
[08/23 16:57:47]  Generator returned sat in 0.047658 secs.
[08/23 16:57:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:57:47]  Improved gap from 2.0489501953125 to 98.4375
[08/23 16:57:48]  Improved number of small numbers from 59 to 100 out of a max of 100
[08/23 16:57:48]  Verifer returned sat in 0.474560 secs.
[08/23 16:57:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14734.854980   14539.493896 -13720.707031  14734.854980    0.098633  14539.493896        0.0  195.361084       95.361084
1   14734.854980   14734.806396 -13720.707031  14734.854980    0.048828  14734.806396        0.0    0.048584       -4.638916
2   14739.493896   14739.493896 -13720.707031  14739.493896    4.687500  14739.493896        0.0    0.000000     -100.000000
3   15139.444824   14839.493896 -13720.707031  15139.444824  399.950928  14839.493896        0.0  299.950928      199.950928
4   15139.444824   15039.493896 -13720.707031  15139.444824  152.000000  15039.493896        0.0   99.950928       99.950928
5   15193.837646   15041.056396 -13720.707031  15193.837646  154.343750  15041.056396        0.0  152.781250       54.343750
6   15193.837646   15140.056396 -13720.706787  15193.837646  152.781250  15140.056396        0.0   53.781250      -45.656006
7   15292.337646   15239.493896 -13719.144531  15292.337646  152.281250  15239.493896        0.0   52.843750      -45.593750
8   15341.493896   15337.931396 -13719.144287  15341.493896  102.000000  15337.931396        0.0    3.562500      -96.437256
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:57:48]  --------------------------------------------------------------------------------
[08/23 16:57:48]  Iteration: 16 (0 solution, 15 counterexamples)
[08/23 16:57:49]  Generator returned sat in 1.139854 secs.
[08/23 16:57:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:57:50]  Improved number of small numbers from 48 to 99 out of a max of 99
[08/23 16:57:50]  Verifer returned sat in 0.223507 secs.
[08/23 16:57:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   14140.346924   13840.346924 -13021.560059  14140.346924    0.098389  13840.346924    0.000000  300.000000      200.000000
1   14140.346924   13940.347168 -13021.560059  14140.346924  299.950928  13940.347168    0.000000  199.999756      100.000000
2   14340.298096   14040.347168 -13021.560059  14340.298096  399.950928  14040.347168    0.000000  299.950928      199.951172
3   14639.444824   14140.347168 -13021.560059  14639.444824  599.097656  14140.347168  199.097900  299.999756      200.000000
4   14639.444824   14240.347168 -13021.560059  14639.444824  299.548828  14240.347168  199.097900  199.999756      100.000000
5   15039.042725   14440.346924 -13021.560059  15039.042725  599.597656  14440.346924  398.695801  200.000000      200.000000
6   15138.841553   14440.347168 -13021.560059  15138.841553  299.798828  14440.347168  398.695801  299.798584      199.798828
7   15439.140625   14640.346924 -13021.560059  15439.140625  600.097656  14640.346924  598.793701  200.000000      200.000000
8   15539.189453   14640.346924 -13021.560059  15539.189453  300.048828  14640.346924  598.842529  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 16:57:50]  --------------------------------------------------------------------------------
[08/23 16:57:50]  Iteration: 17 (0 solution, 16 counterexamples)
[08/23 16:57:51]  Generator returned sat in 1.120322 secs.
[08/23 16:57:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 16:57:52]  Improved gap from 98.33536783854167 to 100
[08/23 16:57:52]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/23 16:57:52]  Verifer returned sat in 0.530572 secs.
[08/23 16:57:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   12302.042725   12201.993896 -13020.755615  12302.042725     0.098389  12201.993896     0.000000  100.048828      100.048828
1   12302.042725   12201.993896 -13020.755615  12302.042725     0.048828  12201.993896     0.000000  100.048828        0.048828
2   12302.042725   12301.993896 -13020.755615  12302.042725     0.048828  12301.993896     0.000000    0.048828      -99.951172
3   13926.775146   12501.993896 -13020.755615  13926.775146  1624.781250  12501.993896  1224.781250  200.000000      200.000000
4   14539.165771   12501.993896 -13020.755615  14539.165771   812.390625  12501.993896  1737.171875  300.000000      200.000000
5   14645.361084   12701.993652 -13020.755615  14645.361084   406.195312  12701.993652  1743.367188  200.000244      200.000000
6   14648.458496   12701.993896 -13020.755615  14648.458496   203.097656  12701.993896  1743.367188  203.097412      103.097412
7   14648.458496   12901.993896 -13020.755615  14648.458496   203.048828  12901.993896  1743.367188    3.097412        3.097412
8   14948.385498   12901.993896 -13020.755615  14948.385498   303.024414  12901.993896  1746.391602  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:57:52]  --------------------------------------------------------------------------------
[08/23 16:57:52]  Iteration: 18 (0 solution, 17 counterexamples)
[08/23 16:57:58]  Generator returned sat in 5.369424 secs.
[08/23 16:57:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:57:58]  Improved number of small numbers from 99 to 99 out of a max of 99
[08/23 16:57:58]  Verifer returned sat in 0.143031 secs.
[08/23 16:57:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   12302.042725   12101.993896 -13020.755615  12302.042725     0.098389  12101.993896     0.000000  200.048828      100.048828
1   12302.042725   12203.347412 -13020.755615  12302.042725     0.048828  12203.347412     0.000000   98.695312        0.048828
2   12302.042725   12301.993896 -13020.755615  12302.042725     0.048828  12301.993896     0.000000    0.048828      -99.951172
3   14305.787842   12500.445068 -13020.755615  14305.787842  2003.793945  12500.445068  1603.793945  201.548828      200.000000
4   14501.190186   12553.445068 -13020.755615  14501.190186   396.951172  12553.445068  1699.196289  248.548828      200.000000
5   14601.239014   12652.768311 -13020.755615  14601.239014   348.597656  12652.768311  1699.245117  249.225586      200.000000
6   14701.287842   12801.993896 -13020.755615  14701.287842   349.274414  12801.993896  1699.293945  200.000000      200.000000
7   14801.336670   12901.993896 -13020.755615  14801.336670   300.048828  12901.993896  1699.342773  200.000000      200.000000
8   14948.385498   12901.993896 -13020.755615  14948.385498   347.048828  12901.993896  1746.391602  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 16:57:58]  --------------------------------------------------------------------------------
[08/23 16:57:58]  Iteration: 19 (0 solution, 18 counterexamples)
[08/23 16:57:59]  Generator returned sat in 0.105225 secs.
[08/23 16:57:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:57:59]  Improved number of small numbers from 95 to 99 out of a max of 99
[08/23 16:57:59]  Verifer returned sat in 0.203621 secs.
[08/23 16:57:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t   service_0,t    losts_0,t     queue_t  bottle_queue_t
0   12302.042480   12101.993896 -13020.755859  12302.042480     0.098145  12101.993896     0.000000  200.048584      100.048584
1   12302.042480   12202.847412 -13020.755859  12302.042480     0.048828  12202.847412     0.000000   99.195068        0.048584
2   12302.042480   12301.993896 -13020.755859  12302.042480     0.048584  12301.993896     0.000000    0.048584      -99.951416
3   14307.286865   12499.945312 -13020.755859  14307.286865  2005.292969  12499.945312  1605.292969  202.048584      200.000000
4   14501.189697   12553.445068 -13020.755859  14501.189697   395.951416  12553.445068  1699.195801  248.548828      200.000000
5   14601.238525   12653.018555 -13020.755859  14601.238525   348.597656  12653.018555  1699.244629  248.975342      200.000000
6   14701.287842   12801.993896 -13020.755859  14701.287842   349.024658  12801.993896  1699.293945  200.000000      200.000000
7   14801.336426   12901.993896 -13020.755859  14801.336426   300.048584  12901.993896  1699.342529  200.000000      200.000000
8   14947.885254   12901.993896 -13020.755859  14947.885254   346.548828  12901.993896  1745.891357  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 16:57:59]  --------------------------------------------------------------------------------
[08/23 16:57:59]  Iteration: 20 (0 solution, 19 counterexamples)
[08/23 16:58:02]  Generator returned sat in 2.234042 secs.
[08/23 16:58:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 16:58:02]  Improved gap from 0.0025 to 100
[08/23 16:58:02]  Improved number of small numbers from 63 to 100 out of a max of 100
[08/23 16:58:02]  Verifer returned sat in 0.311599 secs.
[08/23 16:58:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14007.272461   14007.272461 -13020.755859  14007.272461    0.097900  14007.272461   0.000000    0.000000     -100.000000
1   14407.248047   14107.272461 -13020.755859  14407.248047  399.975586  14107.272461   0.000000  299.975586      199.975586
2   14407.248047   14207.272461 -13020.755859  14407.248047    0.024414  14207.272461   0.000000  199.975586       99.975586
3   14407.248047   14308.894287 -13020.755859  14407.248047  199.951172  14308.894287   0.000000   98.353760       -0.024414
4   14707.296631   14506.922852 -13020.755859  14707.296631  398.402344  14506.922852   0.024170  200.349609      200.000000
5   14707.296631   14508.146484 -13020.755859  14707.296631  200.325195  14508.146484   0.024170  199.125977      100.000000
6   14907.321045   14609.418701 -13020.755859  14907.321045  399.150391  14609.418701   0.048584  297.853760      200.000000
7   14907.321045   14807.272461 -13020.755859  14907.321045  150.762207  14807.272461   0.048584  100.000000      100.000000
8   15107.345459   14807.272461 -13020.755859  15107.345459  300.024414  14807.272461   0.072998  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:58:02]  --------------------------------------------------------------------------------
[08/23 16:58:02]  Iteration: 21 (0 solution, 20 counterexamples)
[08/23 16:58:03]  Generator returned sat in 0.784659 secs.
[08/23 16:58:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:58:04]  Improved number of small numbers from 81 to 99 out of a max of 99
[08/23 16:58:04]  Verifer returned sat in 0.249618 secs.
[08/23 16:58:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14007.272461   14007.272461 -13020.756104  14007.272461    0.097900  14007.272461   0.000000    0.000000     -100.000000
1   14407.247803   14107.272461 -13020.756104  14407.247803  399.975342  14107.272461   0.000000  299.975342      199.975342
2   14407.247803   14207.272461 -13020.756104  14407.247803    0.024170  14207.272461   0.000000  199.975342       99.975342
3   14407.247803   14340.312988 -13020.756104  14407.247803  199.963379  14340.312988   0.000000   66.934814       -0.024658
4   14707.296631   14507.264160 -13020.756104  14707.296631  366.983643  14507.264160   0.024170  200.008301      200.000000
5   14707.296631   14540.291504 -13020.756104  14707.296631  199.995850  14540.291504   0.024170  166.980957      100.000000
6   14907.321045   14640.837402 -13020.756104  14907.321045  367.005371  14640.837402   0.048584  266.435059      200.000000
7   14907.321045   14807.272461 -13020.756104  14907.321045  150.262207  14807.272461   0.048584  100.000000      100.000000
8   15108.087402   14807.272461 -13020.756104  15108.087402  300.766357  14807.272461   0.814941  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:58:04]  --------------------------------------------------------------------------------
[08/23 16:58:04]  Iteration: 22 (0 solution, 21 counterexamples)
[08/23 16:58:05]  Generator returned sat in 0.557415 secs.
[08/23 16:58:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:58:06]  Improved gap from 0.02435302734375 to 29.6875
[08/23 16:58:06]  Improved number of small numbers from 45 to 100 out of a max of 100
[08/23 16:58:06]  Verifer returned sat in 1.028815 secs.
[08/23 16:58:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14223.346191   14223.297363 -13409.789551  14223.346191    0.097900  14223.297363    0.00000    0.048828        0.048828
1   14223.346191   14223.297363 -13339.477051  14223.346191    0.024170  14223.297363    0.00000    0.048828      -29.638672
2   14302.725586   14252.984863 -13289.217773  14302.725586   79.428223  14252.984863    0.00000   49.740723        0.000000
3   14302.725586   14302.725586 -13218.905273  14302.725586    0.024414  14302.725586    0.00000    0.000000      -29.687500
4   14342.964111   14341.771973 -13198.552246  14342.964111   40.238525  14341.771973    0.00000    1.192139      -69.095947
5   14441.747803   14412.060059 -13128.239990  14441.747803   99.975830  14412.060059    0.00000   29.687744        0.000000
6   14592.073486   14541.747559 -13128.239990  14592.073486  180.013428  14541.747559    0.00000   50.325928       50.325684
7   14841.771973   14541.747803 -13128.239990  14841.771973  300.024414  14541.747803    0.02417  300.000000      200.000000
8   14841.771973   14641.747803 -13128.239990  14841.771973    2.000000  14641.747803    0.02417  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:06]  --------------------------------------------------------------------------------
[08/23 16:58:06]  Iteration: 23 (0 solution, 22 counterexamples)
[08/23 16:58:08]  Generator returned sat in 1.575398 secs.
[08/23 16:58:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:58:08]  Improved gap from 0.0 to 98.4375
[08/23 16:58:09]  Improved number of small numbers from 57 to 86 out of a max of 100
[08/23 16:58:09]  Verifer returned sat in 0.824288 secs.
[08/23 16:58:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14463.401855   14280.853027 -13128.239990  14463.401855    0.097900  14280.853027   0.000000  182.548828      100.000244
1   14463.401855   14363.401815 -13128.239990  14463.401855  182.500000  14363.401815   0.000000  100.000041        0.000244
2   14465.012899   14464.964111 -13128.239990  14465.012899  101.611084  14464.964111   0.000000    0.048787      -98.388713
3   14863.450195   14564.964355 -13128.239990  14863.450195  398.486084  14564.964355   0.048584  298.437256      200.000000
4   14863.450195   14761.887899 -13128.239990  14863.450195  142.555664  14761.887899   0.048584  101.513713      100.000000
5   14959.179525   14830.100830 -13128.239990  14959.179525  197.243042  14830.100830   0.048584  129.030111       95.729329
6   15010.717773   14863.401855 -13128.239990  15010.717773  180.568359  14863.401855   0.048584  147.267334       47.267578
7   15010.717773   14963.401815 -13126.677734  15010.717773  147.218750  14963.401815   0.048584   47.267375      -51.170166
8   15062.207357   15061.839355 -13126.677490  15062.207357   98.756958  15061.839355   0.048584    0.319417      -99.680339
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:58:09]  --------------------------------------------------------------------------------
[08/23 16:58:09]  Iteration: 24 (0 solution, 23 counterexamples)
[08/23 16:58:10]  Generator returned sat in 0.138453 secs.
[08/23 16:58:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:58:10]  Improved gap from 0.0 to 98.4375
[08/23 16:58:10]  Improved number of small numbers from 45 to 100 out of a max of 100
[08/23 16:58:10]  Verifer returned sat in 0.464976 secs.
[08/23 16:58:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14055.555664   14055.555664 -12832.845459  14055.555664    0.097900  14055.555664        0.0    0.000000      -12.451172
1   14268.007080   14068.006836 -12832.845459  14268.007080  212.451416  14068.006836        0.0  200.000244      100.000244
2   14268.007080   14268.006836 -12832.845459  14268.007080  199.951660  14268.006836        0.0    0.000244        0.000244
3   14567.958496   14268.006836 -12832.845459  14567.958496  299.951660  14268.006836        0.0  299.951660      199.951660
4   14567.958496   14468.006836 -12832.845459  14567.958496  104.225586  14468.006836        0.0   99.951660       99.951660
5   14666.006836   14468.006836 -12832.845459  14666.006836  198.000000  14468.006836        0.0  198.000000       98.000000
6   14666.006836   14569.569336 -12832.845459  14666.006836   98.000000  14569.569336        0.0   96.437500       -2.000000
7   14718.350586   14669.520996 -12832.797119  14718.350586  148.781250  14669.520996        0.0   48.829590      -49.607910
8   14768.278076   14767.958740 -12832.797119  14768.278076   98.757080  14767.958740        0.0    0.319336      -99.680420
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:58:10]  --------------------------------------------------------------------------------
[08/23 16:58:10]  Iteration: 25 (0 solution, 24 counterexamples)
[08/23 16:58:12]  Generator returned sat in 0.968551 secs.
[08/23 16:58:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:58:13]  Improved gap from 0.01 to 3.125
[08/23 16:58:14]  Improved number of small numbers from 50 to 79 out of a max of 100
[08/23 16:58:14]  Verifer returned sat in 1.707743 secs.
[08/23 16:58:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14707.556885   14507.557129 -13424.183838  14707.556885    0.097656  14507.557129        0.0  199.999756       99.999912
1   14707.556885   14607.557129 -13424.183838  14707.556885    0.048584  14607.557129        0.0   99.999756       -0.000088
2   15007.508545   14707.557129 -13424.183838  15007.508545  399.951416  14707.557129        0.0  299.951416      199.951573
3   15007.508545   14907.556885 -13424.183838  15007.508545    3.884774  14907.556885        0.0   99.951660       99.951573
4   15007.508545   15006.941264 -13424.183838  15007.508545    3.827160  15006.941264        0.0    0.567281       -0.048427
5   15010.682005   15007.557005 -13327.309082  15010.682005    3.740741  15007.557005        0.0    3.125000       -0.000212
6   15011.168116   15011.119654 -13230.871520  15011.168116    3.611111  15011.119654        0.0    0.048462       -3.076538
7   15014.536321   15014.244654 -13133.996520  15014.536321    3.416667  15014.244654        0.0    0.291667       -2.833333
8   15017.369654   15017.369654 -13133.996338  15017.369654    3.125000  15017.369654        0.0    0.000000      -99.999818
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:58:14]  --------------------------------------------------------------------------------
[08/23 16:58:14]  Iteration: 26 (0 solution, 25 counterexamples)
[08/23 16:58:16]  Generator returned sat in 2.062687 secs.
[08/23 16:58:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:58:17]  Improved gap from 0.005 to 32.8125
[08/23 16:58:17]  Improved number of small numbers from 76 to 81 out of a max of 100
[08/23 16:58:17]  Verifer returned sat in 1.227224 secs.
[08/23 16:58:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14536.417725   14503.605469 -13320.232334  14536.417725    0.097412  14503.605469     0.0000   32.812256       32.812256
1   14536.417725   14503.605469 -13253.044834  14536.417725    0.002500  14503.605469     0.0000   32.812256       -0.000244
2   14569.230469   14536.417969 -13185.857334  14569.230469   65.625000  14536.417969     0.0000   32.812500        0.000000
3   14569.230469   14569.230469 -13118.669834  14569.230469    1.335000  14569.230469     0.0000    0.000000      -32.812500
4   14602.045469   14602.042969 -13051.482422  14602.045469   32.815000  14602.042969     0.0000    0.002500      -32.810088
5   14698.484219   14653.855469 -13015.111084  14698.484219   96.441250  14653.855469     0.0000   44.628750        0.000000
6   14855.236094   14722.020677 -13015.111084  14855.236094  201.380625  14722.020677     0.0000  133.215417       56.751875
7   15098.486719   14798.484375 -13015.111084  15098.486719  376.466042  14798.484375     0.0025  299.999844      200.000000
8   15098.486719   14898.484375 -13015.111084  15098.486719    0.010000  14898.484375     0.0025  199.999844      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:18]  --------------------------------------------------------------------------------
[08/23 16:58:18]  Iteration: 27 (0 solution, 26 counterexamples)
[08/23 16:58:21]  Generator returned sat in 2.400248 secs.
[08/23 16:58:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 16:58:21]  Improved gap from 0.00125 to 100
[08/23 16:58:21]  Improved number of small numbers from 90 to 100 out of a max of 100
[08/23 16:58:21]  Verifer returned sat in 0.260632 secs.
[08/23 16:58:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t     cwnd_0,t   service_0,t     losts_0,t     queue_t  bottle_queue_t
0   14569.230469   14569.230225 -13385.857178  14569.230469     0.097412  14569.230225      0.000000    0.000244        0.000244
1   14869.278564   14569.230469 -13385.857178  14869.278564   300.048340  14569.230469      0.048340  299.999756      200.000000
2   14869.278809   14669.230225 -13385.857178  14869.278809   300.000000  14669.230225      0.048340  200.000244      100.000244
3   24394.825439   14869.230225 -13385.857178  24394.825439  9725.546875  14869.230225   9325.595215  200.000000      200.000000
4   29055.598877   14869.230225 -13385.857178  29055.598877  4860.773438  14869.230225  13886.368652  300.000000      200.000000
5   31183.985596   14969.230225 -13385.857178  31183.985596  2428.386719  14969.230225  15914.755371  300.000000      200.000000
6   32096.178955   15069.230225 -13385.857178  32096.178955  1212.193359  15069.230225  16726.948730  300.000000      200.000000
7   32400.275635   15269.230225 -13385.857178  32400.275635   604.096680  15269.230225  16931.045410  200.000000      200.000000
8   32500.323975   15269.230469 -13385.857178  32500.323975   300.048340  15269.230469  16931.093750  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=True, total_losses=5.[0m
[08/23 16:58:21]  --------------------------------------------------------------------------------
[08/23 16:58:21]  Iteration: 28 (0 solution, 27 counterexamples)
[08/23 16:58:22]  Generator returned sat in 0.207149 secs.
[08/23 16:58:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 16:58:22]  Improved gap from 0.00125 to 10.9375
[08/23 16:58:23]  Improved number of small numbers from 43 to 65 out of a max of 100
[08/23 16:58:23]  Verifer returned sat in 1.092443 secs.
[08/23 16:58:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14634.793213   14534.745117 -13385.857178  14634.793213    0.097412  14534.745117        0.0  100.048096        0.048104
1   14634.793457   14634.745117 -13385.857178  14634.793457  100.048340  14634.745117        0.0    0.048340      -99.951652
2   15034.697021   14734.745109 -13385.857178  15034.697021  399.951904  14734.745109        0.0  299.951912      199.951912
3   15134.696891   14934.744873 -13385.857178  15134.696891  399.951782  14934.744873        0.0  199.952018      199.951782
4   15134.696891   15034.744873 -13385.857178  15134.696891  198.975891  15034.744873        0.0   99.952018       99.951782
5   15134.696891   15097.390418 -13385.808960  15134.696891   98.487946  15097.390418        0.0   37.306473        0.000000
6   15145.634391   15134.696891 -13296.746582  15145.634391   48.243973  15134.696891        0.0   10.937500       -0.000122
7   15157.818878   15146.881348 -13208.930946  15157.818878   23.121986  15146.881348        0.0   10.937530        0.000000
8   15157.818878   15157.818878 -13208.930908  15157.818878   10.560993  15157.818878        0.0    0.000000      -99.999962
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:58:23]  --------------------------------------------------------------------------------
[08/23 16:58:23]  Iteration: 29 (0 solution, 28 counterexamples)
[08/23 16:58:24]  Generator returned sat in 0.865551 secs.
[08/23 16:58:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 16:58:25]  Improved gap from 0.0 to 1.5625
[08/23 16:58:26]  Improved number of small numbers from 54 to 81 out of a max of 100
[08/23 16:58:26]  Verifer returned sat in 1.549407 secs.
[08/23 16:58:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14868.732422   14868.732422 -13719.769775  14868.732422    0.097412  14868.732422        0.0    0.000000       -0.000100
1   14967.169922   14967.169678 -13719.769531  14967.169922   98.437500  14967.169678        0.0    0.000244       -1.562356
2   15268.710693   15068.732178 -13719.769531  15268.710693  301.541016  15068.732178        0.0  199.978516      199.978416
3   15268.710693   15168.732178 -13719.769531  15268.710693    1.942387  15168.732178        0.0   99.978516       99.978416
4   15268.710693   15268.689155 -13719.769531  15268.710693    1.913580  15268.689155        0.0    0.021539       -0.021584
5   15270.559525   15268.732422 -13621.596779  15270.559525    1.870370  15268.732422        0.0    1.827103        0.000000
6   15270.559525   15270.559525 -13523.159424  15270.559525    1.805556  15270.559525        0.0    0.000000       -1.562645
7   15272.267858   15272.246253 -13424.846007  15272.267858    1.708333  15272.246253        0.0    0.021605       -1.540895
8   15273.808753   15273.808753 -13326.408691  15273.808753    1.562500  15273.808753        0.0    0.000000       -1.562684
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:58:26]  --------------------------------------------------------------------------------
[08/23 16:58:26]  Iteration: 30 (0 solution, 29 counterexamples)
[08/23 16:58:28]  Generator returned sat in 1.247377 secs.
[08/23 16:58:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 16:58:28]  Improved gap from 0.0 to 98.4375
[08/23 16:58:29]  Improved number of small numbers from 54 to 68 out of a max of 100
[08/23 16:58:29]  Verifer returned sat in 1.010545 secs.
[08/23 16:58:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   15061.422363   15061.422363 -13718.207118  15061.422363    0.097412  15061.422363     0.0000    0.000000      -99.999845
1   15261.422119   15161.422208 -13718.207118  15261.422119  199.999756  15161.422208     0.0000   99.999911       -0.000089
2   15561.424708   15261.422363 -13718.207118  15561.424708  400.002500  15261.422363     0.0025  299.999845      200.000000
3   15561.424708   15461.422119 -13718.207118  15561.424708   25.840000  15461.422119     0.0025  100.000089      100.000000
4   15561.424708   15561.144708 -13718.207118  15561.424708   50.680000  15561.144708     0.0025    0.277500        0.000000
5   15661.507208   15561.422208 -13718.207118  15661.507208  100.360000  15561.422208     0.0025  100.082500        0.082500
6   15761.144708   15662.704708 -13717.927118  15761.144708  199.720000  15662.704708     0.0025   98.437500        0.000000
7   16061.147208   15761.142334 -13717.927118  16061.147208  398.440000  15761.142334     0.0050  299.999874      200.000000
8   16061.147208   15861.142334 -13717.927118  16061.147208    0.010000  15861.142334     0.0050  199.999874      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:29]  --------------------------------------------------------------------------------
[08/23 16:58:29]  Iteration: 31 (0 solution, 30 counterexamples)
[08/23 16:58:31]  Generator returned sat in 1.143190 secs.
[08/23 16:58:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 16:58:32]  Improved gap from 0.0 to 28.125
[08/23 16:58:33]  Improved number of small numbers from 69 to 79 out of a max of 100
[08/23 16:58:33]  Verifer returned sat in 1.524914 secs.
[08/23 16:58:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   14699.639404   14671.514648 -13228.299316  14699.639404    0.097168  14671.514648    0.000000   28.124756       28.124756
1   14699.639404   14671.514648 -13156.424316  14699.639404    0.047852  14671.514648    0.000000   28.124756       -0.000244
2   14727.764648   14699.639648 -13084.549316  14727.764648   56.250000  14699.639648    0.000000   28.125000        0.000000
3   14727.764648   14727.764648 -13012.674316  14727.764648    1.128601  14727.764648    0.000000    0.000000      -28.125000
4   14757.146851   14755.889648 -12940.799561  14757.146851   29.382202  14755.889648    0.000000    1.257202      -26.868042
5   14855.841553   14827.716553 -12912.626221  14855.841553   99.951904  14827.716553    0.000000   28.125000        0.000000
6   15090.658813   14955.841553 -12912.626221  15090.658813  262.942261  14955.841553    0.000000  134.817261      134.817261
7   15594.764526   14955.841553 -12912.626221  15594.764526  638.922974  14955.841553  338.922974  300.000000      200.000000
8   15594.764526   15055.841553 -12912.626221  15594.764526    0.500000  15055.841553  338.922974  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:33]  --------------------------------------------------------------------------------
[08/23 16:58:33]  Iteration: 32 (0 solution, 31 counterexamples)
[08/23 16:58:37]  Generator returned sat in 3.304067 secs.
[08/23 16:58:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 16:58:37]  Improved number of small numbers from 51 to 99 out of a max of 99
[08/23 16:58:37]  Verifer returned sat in 0.379263 secs.
[08/23 16:58:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14132.600830   13932.600830 -12489.385742  14132.600830    0.096924  13932.600830   0.000000  200.000000      199.999756
1   14132.600830   13932.601074 -12489.385742  14132.600830    0.047607  13932.601074   0.000000  199.999756       99.999756
2   14132.600830   14132.588867 -12489.385742  14132.600830    0.011963  14132.588867   0.000000    0.011963       -0.000244
3   14283.600830   14231.089111 -12489.385742  14283.600830  151.011963  14231.089111   0.000000   52.511719       50.999756
4   14532.613037   14332.601074 -12489.385742  14532.613037  301.523926  14332.601074   0.011963  200.000000      200.000000
5   14532.613037   14334.113037 -12489.385742  14532.613037  199.500000  14334.113037   0.011963  198.488037      100.000000
6   14732.625000   14532.600830 -12489.385742  14732.625000  398.500000  14532.600830   0.023926  200.000244      200.000000
7   14732.625000   14632.601074 -12489.385742  14732.625000  150.255859  14632.601074   0.023926  100.000000      100.000000
8   14932.636719   14632.601074 -12489.385742  14932.636719  300.011719  14632.601074   0.035645  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:58:37]  --------------------------------------------------------------------------------
[08/23 16:58:37]  Iteration: 33 (0 solution, 32 counterexamples)
[08/23 16:58:38]  Generator returned sat in 0.559863 secs.
[08/23 16:58:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 16:58:39]  Improved gap from 0.00125 to 28.125
[08/23 16:58:40]  Improved number of small numbers from 77 to 82 out of a max of 100
[08/23 16:58:40]  Verifer returned sat in 1.113947 secs.
[08/23 16:58:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    14102.47583   14074.300830 -12631.085693  14102.47583    0.096924  14074.300830    0.00000   28.175000       28.174805
1    14102.47583   14074.350830 -12559.260498  14102.47583    0.002686  14074.350830    0.00000   28.125000        0.000000
2    14132.60083   14102.475830 -12489.385498  14132.60083   58.250000  14102.475830    0.00000   30.125000        0.000000
3    14132.60083   14132.600830 -12417.510498  14132.60083    0.002500  14132.600830    0.00000    0.000000      -28.125000
4    14161.25583   14160.725830 -12345.635498  14161.25583   28.655000  14160.725830    0.00000    0.530000      -27.595000
5    14260.72333   14188.850830 -12317.507998  14260.72333   99.997500  14188.850830    0.00000   71.872500        0.000000
6    14431.53333   14360.723330 -12317.507998  14431.53333  242.682500  14360.723330    0.00000   70.810000       70.810000
7    14959.64958   14360.723389 -12317.507998  14959.64958  598.926250  14360.723389  298.92625  299.999941      200.000000
8    14959.64958   14460.723389 -12317.507998  14959.64958    0.010000  14460.723389  298.92625  199.999941      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:40]  --------------------------------------------------------------------------------
[08/23 16:58:40]  Iteration: 34 (0 solution, 33 counterexamples)
[08/23 16:58:43]  Generator returned sat in 2.611977 secs.
[08/23 16:58:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:58:44]  Improved gap from 80.8125 to 98.4375
[08/23 16:58:44]  Improved number of small numbers from 27 to 100 out of a max of 100
[08/23 16:58:44]  Verifer returned sat in 0.853951 secs.
[08/23 16:58:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14438.340820   14239.338623 -12896.123291  14438.340820    0.096680  14239.338623   0.000000  199.002197       99.002197
1   14438.340820   14339.903320 -12895.125488  14438.340820    0.002441  14339.903320   0.000000   98.437500        0.000000
2   14738.341309   14538.340820 -12895.125488  14738.341309  398.437988  14538.340820   0.000488  200.000000      200.000000
3   14738.341309   14638.340820 -12895.125488  14738.341309  199.999268  14638.340820   0.000488  100.000000      100.000000
4   14938.342041   14738.340820 -12895.125488  14938.342041  300.000732  14738.340820   0.001221  200.000000      200.000000
5   14938.342041   14738.340820 -12895.125488  14938.342041    1.500000  14738.340820   0.001221  200.000000      100.000000
6   14938.342041   14853.340820 -12895.125488  14938.342041  101.250000  14853.340820   0.001221   85.000000        0.000000
7   15011.967041   14939.902832 -12895.125000  15011.967041  158.625000  14939.902832   0.001221   72.062988      -26.374512
8   15120.497559   15038.340332 -12895.125000  15120.497559  180.593506  15038.340332   0.001221   82.156006      -17.843994
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:44]  --------------------------------------------------------------------------------
[08/23 16:58:44]  Iteration: 35 (0 solution, 34 counterexamples)
[08/23 16:58:46]  Generator returned sat in 1.237074 secs.
[08/23 16:58:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:58:46]  Improved gap from 0.0 to 28.125
[08/23 16:58:47]  Improved number of small numbers from 69 to 74 out of a max of 100
[08/23 16:58:47]  Verifer returned sat in 0.854638 secs.
[08/23 16:58:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14853.462158   14853.457041 -13410.241709  14853.462158    0.096436  14853.457041    0.00000    0.005117        0.005117
1   14853.462158   14853.457041 -13338.366709  14853.462158    0.002686  14853.457041    0.00000    0.005117      -28.119883
2   14909.707041   14881.582041 -13266.491709  14909.707041   56.250000  14881.582041    0.00000   28.125000        0.000000
3   14909.707041   14909.707041 -13194.616709  14909.707041    0.002500  14909.707041    0.00000    0.000000      -28.125000
4   14938.337041   14937.832041 -13122.741943  14938.337041   28.630000  14937.832041    0.00000    0.505000      -27.620234
5   15037.779541   15009.654541 -13094.564209  15037.779541   99.947500  15009.654541    0.00000   28.125000        0.000000
6   15274.085791   15109.654541 -13094.564209  15274.085791  264.431250  15109.654541    0.00000  164.431250      136.306250
7   15738.990791   15137.779541 -13094.564209  15738.990791  629.336250  15137.779541  301.21125  300.000000      200.000000
8   15738.990791   15237.779541 -13094.564209  15738.990791    0.010000  15237.779541  301.21125  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:47]  --------------------------------------------------------------------------------
[08/23 16:58:47]  Iteration: 36 (0 solution, 35 counterexamples)
[08/23 16:58:49]  Generator returned sat in 1.093507 secs.
[08/23 16:58:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:58:50]  Improved gap from 0.047607421875 to 26.5625
[08/23 16:58:50]  Improved number of small numbers from 51 to 98 out of a max of 100
[08/23 16:58:50]  Verifer returned sat in 1.572222 secs.
[08/23 16:58:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   14912.862549   14886.300049 -13443.084717  14912.862549    0.096436  14886.300049    0.000000   26.562500       26.562500
1   14912.862549   14886.300049 -13369.647217  14912.862549    0.023926  14886.300049    0.000000   26.562500        0.000000
2   14939.425049   14912.862549 -13296.209717  14939.425049   53.125000  14912.862549    0.000000   26.562500        0.000000
3   14939.425049   14939.425049 -13222.772217  14939.425049    0.023804  14939.425049    0.000000    0.000000      -26.562500
4   14968.035156   14965.987549 -13149.334961  14968.035156   28.610107  14965.987549    0.000000    2.047607      -24.515137
5   15065.051514   15020.550049 -13121.836182  15065.051514   99.063965  15020.550049    0.000000   44.501465        0.000000
6   15274.521729   15065.051514 -13121.836182  15274.521729  253.971680  15065.051514    0.000000  209.470215      109.470215
7   15637.808105   15165.051758 -13121.836182  15637.808105  572.756592  15165.051758  172.756592  299.999756      200.000000
8   15637.808105   15265.051758 -13121.836182  15637.808105    2.000000  15265.051758  172.756592  199.999756      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:58:51]  --------------------------------------------------------------------------------
[08/23 16:58:51]  Iteration: 37 (0 solution, 36 counterexamples)
[08/23 16:58:55]  Generator returned sat in 4.223812 secs.
[08/23 16:58:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 16:58:55]  Improved gap from 0.0 to 100
[08/23 16:58:56]  Improved number of small numbers from 39 to 100 out of a max of 100
[08/23 16:58:56]  Verifer returned sat in 0.353262 secs.
[08/23 16:58:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14267.516113   14167.510010 -13149.334961  14267.516113    0.096191  14167.510010   0.000000  100.006104        0.006104
1   14267.516113   14267.510254 -13149.334961  14267.516113    0.023926  14267.510254   0.000000    0.005859      -99.993896
2   14467.010254   14467.003906 -13149.334961  14467.010254  199.500000  14467.003906   0.000000    0.006348       -0.499756
3   14567.510010   14517.762939 -13149.334961  14567.510010  100.506104  14517.762939   0.000000   49.747070        0.000000
4   14867.515869   14567.510010 -13149.334961  14867.515869  349.752930  14567.510010   0.005859  300.000000      200.000000
5   14867.515869   14767.510010 -13149.334961  14867.515869    2.000000  14767.510010   0.005859  100.000000      100.000000
6   15067.521973   14867.510010 -13149.334961  15067.521973  300.006104  14867.510010   0.011963  200.000000      200.000000
7   15067.521973   14924.762939 -13149.334961  15067.521973    2.000000  14924.762939   0.011963  142.747070      100.000000
8   15281.527832   14967.510254 -13149.334961  15281.527832  356.752930  14967.510254  14.017822  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=True, ramp_down_bq=False, ramp_down_q=True, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 16:58:56]  --------------------------------------------------------------------------------
[08/23 16:58:56]  Iteration: 38 (0 solution, 37 counterexamples)
[08/23 16:59:00]  Generator returned sat in 3.196918 secs.
[08/23 16:59:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:59:00]  Improved gap from 0.005 to 100
[08/23 16:59:00]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/23 16:59:00]  Verifer returned sat in 0.246687 secs.
[08/23 16:59:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14169.527100   14069.524658 -13051.349609  14169.527100    0.096191  14069.524658   0.000000  100.002441        0.002686
1   14169.527100   14169.524414 -13051.349609  14169.527100    0.023926  14169.524414   0.000000    0.002686      -99.997314
2   14269.527100   14269.524414 -13051.349609  14269.527100  100.002686  14269.524414   0.000000    0.002686      -99.997314
3   14420.528320   14420.525879 -13051.349609  14420.528320  151.003906  14420.525879   0.000000    0.002441      -48.996094
4   14769.527100   14567.521973 -13051.349609  14769.527100  349.001221  14567.521973   0.002686  202.002441      200.000000
5   14769.527100   14659.025635 -13051.349609  14769.527100    0.010000  14659.025635   0.002686  110.498779      100.000000
6   15046.529541   14669.524658 -13051.349609  15046.529541  387.501221  14669.524658  77.005127  299.999756      200.000000
7   15046.529541   14869.524414 -13051.349609  15046.529541    0.010000  14869.524414  77.005127  100.000000      100.000000
8   15246.531982   14869.524414 -13051.349609  15246.531982  300.002441  14869.524414  77.007568  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:59:00]  --------------------------------------------------------------------------------
[08/23 16:59:00]  Iteration: 39 (0 solution, 38 counterexamples)
[08/23 16:59:08]  Generator returned sat in 7.136075 secs.
[08/23 16:59:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:59:09]  Improved gap from 0.0474853515625 to 98.4375
[08/23 16:59:09]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 16:59:09]  Verifer returned sat in 1.162683 secs.
[08/23 16:59:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   15038.770508   14838.770508 -13124.274414  15038.770508    0.095947  14838.770508   0.000000  200.000000      199.999756
1   15038.770508   14921.770752 -13124.274414  15038.770508    0.035889  14921.770752   0.000000  116.999756       99.999756
2   15038.770508   15038.735107 -13124.274414  15038.770508  116.964355  15038.735107   0.000000    0.035400       -0.000244
3   15338.735107   15138.770508 -13124.274414  15338.735107  300.000000  15138.770508   0.000000  199.964600      199.964355
4   15440.770508   15238.770752 -13124.274414  15440.770508  302.000000  15238.770752   1.999756  200.000000      200.000000
5   15440.770508   15251.115967 -13124.274414  15440.770508  159.000000  15251.115967   1.999756  187.654785      100.000000
6   15440.806152   15338.937500 -13124.274414  15440.806152  187.690430  15338.937500   1.999756   99.868896        0.035645
7   15536.865967   15438.770752 -13124.238770  15536.865967  195.928711  15438.770752   1.999756   96.095459       -3.868896
8   15640.734863   15538.735107 -13124.238770  15640.734863  199.964355  15538.735107   1.999756  100.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:59:10]  --------------------------------------------------------------------------------
[08/23 16:59:10]  Iteration: 40 (0 solution, 39 counterexamples)
[08/23 16:59:14]  Generator returned sat in 3.568888 secs.
[08/23 16:59:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 16:59:14]  Improved gap from 0.0 to 0
[08/23 16:59:15]  Improved number of small numbers from 55 to 71 out of a max of 100
[08/23 16:59:15]  Verifer returned sat in 1.118748 secs.
[08/23 16:59:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14939.631836   14939.631836 -13224.265869  14939.631836    0.095947  14939.631836    0.00000    0.000000       -0.000389
1   15039.631836   15039.630770 -13224.265664  15039.631836  100.000000  15039.630770    0.00000    0.001066       -0.000184
2   15339.633270   15139.296631 -13224.265664  15339.633270  300.002500  15139.296631    0.00125  200.335389      200.000000
3   15339.633270   15239.631836 -13224.265664  15339.633270    0.339355  15239.631836    0.00125  100.000184      100.000000
4   15339.633270   15339.623270 -13224.265664  15339.633270    0.010000  15339.623270    0.00125    0.008750        0.000000
5   15339.634520   15339.632020 -13124.274414  15339.634520    0.010000  15339.632020    0.00125    0.001250       -0.007500
6   15339.643270   15339.640770 -13024.275879  15339.643270    0.010000  15339.640770    0.00125    0.001250       -0.000215
7   15339.652020   15339.649520 -12924.292969  15339.652020    0.010000  15339.649520    0.00125    0.001250       -0.008555
8   15339.660770   15339.659424 -12924.292969  15339.660770    0.010000  15339.659424    0.00125    0.000096      -99.999805
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 16:59:15]  --------------------------------------------------------------------------------
[08/23 16:59:15]  Iteration: 41 (0 solution, 40 counterexamples)
[08/23 16:59:24]  Generator returned sat in 7.897954 secs.
[08/23 16:59:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:59:24]  Improved gap from 0.0 to 100
[08/23 16:59:24]  Improved number of small numbers from 48 to 100 out of a max of 100
[08/23 16:59:24]  Verifer returned sat in 0.294121 secs.
[08/23 16:59:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14343.599854   14343.599854 -13224.265869  14343.599854    0.095703  14343.599854   0.000000    0.000000     -100.000000
1   14543.599609   14443.599854 -13224.265869  14543.599609  199.999756  14443.599854   0.000000   99.999756       -0.000244
2   14643.599609   14643.599609 -13224.265869  14643.599609  199.999756  14643.599609   0.000000    0.000000       -0.000244
3   14943.505127   14643.599854 -13224.265869  14943.505127  299.905518  14643.599854   0.000000  299.905273      199.905273
4   15091.505371   14843.329346 -13224.265869  15091.505371  447.905518  14843.329346  47.905518  200.270508      200.000000
5   15091.599609   14911.419434 -13224.265869  15091.599609  200.364746  14911.419434  47.905518  132.274658      100.094238
6   15291.599609   15043.599854 -13224.265869  15291.599609  332.274658  15043.599854  47.999756  200.000000      200.000000
7   15292.099609   15111.239502 -13224.265869  15292.099609  200.500000  15111.239502  47.999756  132.860352      100.500000
8   15491.694336   15143.599854 -13224.265869  15491.694336  332.455078  15143.599854  48.094482  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 16:59:24]  --------------------------------------------------------------------------------
[08/23 16:59:24]  Iteration: 42 (0 solution, 41 counterexamples)
[08/23 16:59:25]  Generator returned sat in 0.573978 secs.
[08/23 16:59:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 16:59:26]  Improved gap from 0.047119140625 to 98.4375
[08/23 16:59:26]  Improved number of small numbers from 96 to 100 out of a max of 100
[08/23 16:59:26]  Verifer returned sat in 0.381987 secs.
[08/23 16:59:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14802.581055   14502.581299 -13224.266113  14802.581055    0.095703  14502.581299   0.000000  299.999756      199.999756
1   14802.581055   14602.581299 -13224.266113  14802.581055  299.952637  14602.581299   0.000000  199.999756       99.999756
2   14915.033936   14802.581299 -13224.266113  14915.033936  312.452637  14802.581299   0.000000  112.452637      112.452637
3   14915.033936   14895.675537 -13224.266113  14915.033936  112.405518  14895.675537   0.000000   19.358398       12.452637
4   15202.628174   15002.581055 -13224.266113  15202.628174  306.952637  15002.581055   0.046875  200.000244      200.000000
5   15202.628174   15002.581299 -13224.266113  15202.628174    0.500000  15002.581299   0.046875  200.000000      100.000000
6   15202.628174   15102.581299 -13224.266113  15202.628174   98.500000  15102.581299   0.046875  100.000000        0.000000
7   15302.581055   15204.096680 -13224.218994  15302.581055  199.952881  15204.096680   0.046875   98.437500        0.000000
8   15502.854248   15302.534180 -13224.218994  15502.854248  298.710693  15302.534180   0.046875  200.273193      100.273193
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:59:26]  --------------------------------------------------------------------------------
[08/23 16:59:26]  Iteration: 43 (0 solution, 42 counterexamples)
[08/23 16:59:29]  Generator returned sat in 2.111098 secs.
[08/23 16:59:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 16:59:30]  Improved gap from 0.0 to 31.25
[08/23 16:59:31]  Improved number of small numbers from 65 to 74 out of a max of 100
[08/23 16:59:31]  Verifer returned sat in 1.603888 secs.
[08/23 16:59:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   14929.849121   14898.599153 -13439.108505  14929.849121    0.095459  14898.599153   0.000000   31.249968       31.249968
1   14929.849121   14898.599153 -13370.358505  14929.849121    0.027344  14898.599153   0.000000   31.249968       -0.000032
2   14974.805675   14929.849153 -13315.315026  14974.805675   76.206522  14929.849153   0.000000   44.956522        0.000000
3   14974.805675   14974.805675 -13246.565186  14974.805675    0.652174  14974.805675   0.000000    0.000000      -31.250159
4   15015.061109   15015.033936 -13224.266113  15015.061109   40.255435  15015.033936   0.000000    0.027174      -68.695652
5   15115.006762   15083.756762 -13155.516113  15115.006762   99.972826  15083.756762   0.000000   31.250000        0.000000
6   15262.183392   15215.006762 -13155.516113  15262.183392  178.426630  15215.006762   0.000000   47.176630       47.176630
7   15515.033936   15215.006836 -13155.516113  15515.033936  300.027174  15215.006836   0.027174  299.999926      200.000000
8   15515.033936   15315.006836 -13155.516113  15515.033936    0.500000  15315.006836   0.027174  199.999926      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:59:31]  --------------------------------------------------------------------------------
[08/23 16:59:31]  Iteration: 44 (0 solution, 43 counterexamples)
[08/23 16:59:32]  Generator returned sat in 0.500602 secs.
[08/23 16:59:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 16:59:33]  Improved gap from 29.25 to 29.6875
[08/23 16:59:34]  Improved number of small numbers from 37 to 50 out of a max of 100
[08/23 16:59:34]  Verifer returned sat in 2.197180 secs.
[08/23 16:59:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   13923.071777   13881.343022 -13409.482910  13923.071777    0.095459  13881.343022    0.00000   41.728755       41.728718
1   13923.071777   13893.384282 -13351.211633  13923.071777    0.023438  13893.384282    0.00000   29.687495       -0.000005
2   13964.121831   13923.071782 -13292.261682  13964.121831   70.737549  13923.071782    0.00000   41.050049        0.000000
3   13964.121831   13964.121831 -13221.949219  13964.121831    0.023560  13964.121831    0.00000    0.000000      -29.687537
4   14006.534795   14006.511235 -13164.338623  14006.534795   42.412964  14006.511235    0.00000    0.023560      -29.663978
5   14106.487676   14076.800176 -13134.627526  14106.487676   99.976440  14076.800176    0.00000   29.687500        0.000000
6   14254.640813   14206.487676 -13134.627526  14254.640813  177.840637  14206.487676    0.00000   48.153137       48.153137
7   14506.511235   14206.487793 -13134.627526  14506.511235  300.023560  14206.487793    0.02356  299.999883      200.000000
8   14506.511235   14306.487793 -13134.627526  14506.511235    0.500000  14306.487793    0.02356  199.999883      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:59:34]  --------------------------------------------------------------------------------
[08/23 16:59:34]  Iteration: 45 (0 solution, 44 counterexamples)
[08/23 16:59:38]  Generator returned sat in 2.520631 secs.
[08/23 16:59:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 16:59:38]  Improved gap from 0.02349853515625 to 0
[08/23 16:59:38]  Improved number of small numbers from 51 to 100 out of a max of 100
[08/23 16:59:38]  Verifer returned sat in 0.356707 secs.
[08/23 16:59:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   13781.511230   13681.511230 -13209.650879  13781.511230    0.095215  13681.511230        0.0  100.000000      100.000000
1   13781.511230   13681.511230 -13209.650879  13781.511230   99.952881  13681.511230        0.0  100.000000        0.000000
2   13881.511230   13781.511475 -13209.650879  13881.511230  200.000000  13781.511475        0.0   99.999756        0.000000
3   13981.511230   13981.464355 -13209.650879  13981.511230  199.999756  13981.464355        0.0    0.046875        0.000000
4   13981.964355   13981.511230 -13110.104004  13981.964355    0.500000  13981.511230        0.0    0.453125        0.000000
5   13982.011230   13981.964355 -13010.556885  13982.011230    0.500000  13981.964355        0.0    0.046875       -0.406006
6   13982.464355   13982.417236 -12910.604004  13982.464355    0.500000  13982.417236        0.0    0.047119        0.000000
7   13982.917236   13982.870361 -12811.056885  13982.917236    0.500000  13982.870361        0.0    0.046875        0.000000
8   13983.370361   13982.917236 -12811.056885  13983.370361    0.500000  13982.917236        0.0    0.453125      -99.546875
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 16:59:38]  --------------------------------------------------------------------------------
[08/23 16:59:38]  Iteration: 46 (0 solution, 45 counterexamples)
[08/23 16:59:42]  Generator returned sat in 2.999151 secs.
[08/23 16:59:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 16:59:43]  Improved gap from 0.453125 to 12.5
[08/23 16:59:43]  Improved number of small numbers from 57 to 100 out of a max of 100
[08/23 16:59:43]  Verifer returned sat in 1.158510 secs.
[08/23 16:59:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8347.947754    8247.900391 -13209.650879  8347.947754    0.095215  8247.900391        0.0  100.047363      100.047119
1    8347.947754    8347.900635 -13209.650879  8347.947754    0.046875  8347.900635        0.0    0.047119        0.047119
2    8647.853760    8347.900635 -13209.650879  8647.853760  299.953125  8347.900635        0.0  299.953125      199.953125
3    8747.900635    8535.400391 -13209.650879  8747.900635  400.000000  8535.400391        0.0  212.500244      200.000000
4    8747.900635    8647.853760 -13209.650879  8747.900635  200.000000  8647.853760        0.0  100.046875      100.000000
5    8747.900635    8647.900635 -13209.650879  8747.900635  100.000000  8647.900635        0.0  100.000000        0.000000
6    8747.900635    8747.900635 -13122.151123  8747.900635   50.000000  8747.900635        0.0    0.000000      -12.500244
7    8772.900635    8772.853516 -13047.103760  8772.900635   25.000000  8772.853516        0.0    0.047119      -12.452881
8    8785.353516    8785.353516 -13047.103760  8785.353516   12.500000  8785.353516        0.0    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=0.[0m
[08/23 16:59:44]  --------------------------------------------------------------------------------
[08/23 16:59:44]  Iteration: 47 (0 solution, 46 counterexamples)
[08/23 16:59:52]  Generator returned sat in 7.887570 secs.
[08/23 16:59:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 16:59:52]  Improved gap from 3.0469970703125 to 100
[08/23 16:59:53]  Improved number of small numbers from 29 to 100 out of a max of 100
[08/23 16:59:53]  Verifer returned sat in 0.461315 secs.
[08/23 16:59:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7543.649902    7543.649902 -13209.650879  7543.649902    0.095215  7543.649902   0.000000    0.000000     -100.000000
1    7943.638184    7643.649902 -13209.650879  7943.638184  399.988281  7643.649902   0.000000  299.988281      199.988281
2    8043.661621    7838.626465 -13209.650879  8043.661621  400.011719  7838.626465   0.011719  205.023438      200.000000
3    8043.661621    7943.649902 -13209.650879  8043.661621  100.511719  7943.649902   0.011719  100.000000      100.000000
4    8243.673340    7943.649902 -13209.650879  8243.673340  300.011719  7943.649902   0.023438  300.000000      200.000000
5    8243.673340    8143.649902 -13209.650879  8243.673340  148.000000  8143.649902   0.023438  100.000000      100.000000
6    8443.685059    8148.673340 -13209.650879  8443.685059  300.011719  8148.673340   0.035156  294.976562      200.000000
7    8443.685059    8343.649902 -13209.650879  8443.685059  100.511719  8343.649902   0.035156  100.000000      100.000000
8    8643.696777    8343.649902 -13209.650879  8643.696777  300.011719  8343.649902   0.046875  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=False, total_losses=3.[0m
[08/23 16:59:53]  --------------------------------------------------------------------------------
[08/23 16:59:53]  Iteration: 48 (0 solution, 47 counterexamples)
[08/23 16:59:57]  Generator returned sat in 3.409881 secs.
[08/23 16:59:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 16:59:58]  Improved gap from 0.0025 to 31.25
[08/23 16:59:58]  Improved number of small numbers from 67 to 73 out of a max of 100
[08/23 16:59:58]  Verifer returned sat in 1.166637 secs.
[08/23 16:59:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7912.388184    7912.388184 -13278.400879  7912.388184    0.095215  7912.388184      0.000    0.000000        0.000000
1    7943.637939    7912.388184 -13209.650879  7943.637939   31.249756  7912.388184      0.000   31.249756       -0.000244
2    7984.018184    7943.638184 -13150.030879  7984.018184   71.630000  7943.638184      0.000   40.380000        0.000000
3    7984.018184    7984.018184 -13081.281006  7984.018184    3.640000  7984.018184      0.000    0.000000      -31.250127
4    8025.473184    8025.468184 -13022.730957  8025.473184   41.455000  8025.468184      0.000    0.005000      -31.245078
5    8125.463184    8094.213184 -12991.475879  8125.463184   99.995000  8094.213184      0.000   31.250000        0.000000
6    8271.495684    8225.463184 -12991.475879  8271.495684  177.282500  8225.463184      0.000   46.032500       46.032500
7    8525.468184    8225.463379 -12991.475879  8525.468184  300.005000  8225.463379      0.005  299.999805      200.000000
8    8525.468184    8325.463379 -12991.475879  8525.468184    0.010000  8325.463379      0.005  199.999805      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 16:59:58]  --------------------------------------------------------------------------------
[08/23 16:59:58]  Iteration: 49 (0 solution, 48 counterexamples)
[08/23 17:00:08]  Generator returned sat in 8.866577 secs.
[08/23 17:00:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:00:09]  Improved number of small numbers from 30 to 40 out of a max of 99
[08/23 17:00:09]  Verifer returned sat in 0.749967 secs.
[08/23 17:00:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7946.138672    7846.138672 -13312.151135  7946.138672    0.095215  7846.138672   0.000000  100.000000        0.000232
1    7946.138672    7946.138440 -13312.151135  7946.138672    0.023682  7946.138440   0.000000    0.000232      -99.999768
2    8046.138440    8046.138440 -13312.151135  8046.138440  100.000000  8046.138440   0.000000    0.000000     -100.000000
3    8311.820772    8146.138440 -13312.151135  8311.820772  265.682332  8146.138440   0.000000  165.682332       65.682332
4    8546.161938    8344.789441 -13312.151135  8546.161938  400.023499  8344.789441   0.023499  201.348999      200.000000
5    8546.161938    8442.673688 -13312.151135  8546.161938  201.325500  8442.673688   0.023499  103.464752      100.000000
6    8746.185437    8546.138440 -13312.151135  8746.185437  303.488251  8546.138440   0.046997  200.000000      200.000000
7    8748.185437    8646.138440 -13312.151135  8748.185437  202.000000  8646.138440   0.046997  102.000000      102.000000
8    8950.685437    8646.138672 -13312.151135  8950.685437  304.500000  8646.138672   4.546997  299.999768      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:00:09]  --------------------------------------------------------------------------------
[08/23 17:00:09]  Iteration: 50 (0 solution, 49 counterexamples)
[08/23 17:00:18]  Generator returned sat in 7.721849 secs.
[08/23 17:00:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:00:18]  Improved gap from 49.74875 to 98.4375
[08/23 17:00:18]  Improved number of small numbers from 55 to 70 out of a max of 100
[08/23 17:00:18]  Verifer returned sat in 0.755597 secs.
[08/23 17:00:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7946.133545    7646.133789 -13112.146367  7946.133545    0.094971  7646.133789     0.0000  299.999756      199.999873
1    7946.133545    7846.133672 -13112.146367  7946.133545    0.002686  7846.133672     0.0000   99.999873       99.999873
2    8146.136172    7946.133545 -13112.146367  8146.136172  300.002500  7946.133545     0.0025  200.000127      200.000000
3    8146.136172    8046.133545 -13112.146367  8146.136172   24.433750  8046.133545     0.0025  100.000127      100.000000
4    8146.136172    8145.106172 -13112.146367  8146.136172   49.367500  8145.106172     0.0025    1.027500        0.000000
5    8244.343672    8146.133672 -13112.146240  8244.343672   99.235000  8146.133672     0.0025   98.207500       -1.792373
6    8345.106172    8246.666172 -13111.116367  8345.106172  198.970000  8246.666172     0.0025   98.437500        0.000000
7    8645.108672    8345.103760 -13111.116367  8645.108672  398.440000  8345.103760     0.0050  299.999912      200.000000
8    8645.108672    8445.103760 -13111.116367  8645.108672    0.010000  8445.103760     0.0050  199.999912      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:00:19]  --------------------------------------------------------------------------------
[08/23 17:00:19]  Iteration: 51 (0 solution, 50 counterexamples)
[08/23 17:00:23]  Generator returned sat in 3.598567 secs.
[08/23 17:00:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:00:23]  Improved gap from 0.0469970703125 to 98.4375
[08/23 17:00:24]  Improved number of small numbers from 26 to 45 out of a max of 100
[08/23 17:00:24]  Verifer returned sat in 1.010844 secs.
[08/23 17:00:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    7844.246826    7844.246826 -13111.869141  7844.246826    0.094971  7844.246826    0.000000    0.000000       -0.000122
1    7942.684326    7844.246992 -13110.306685  7942.684326   98.437500  7844.246992    0.000000   98.437334       -0.000166
2    8242.731489    8042.684326 -13110.306685  8242.731489  398.484497  8042.684326    0.046997  200.000166      200.000000
3    8242.731489    8142.684326 -13110.306685  8242.731489   23.863251  8142.684326    0.046997  100.000166      100.000000
4    8242.731489    8242.637451 -13110.306685  8242.731489   49.226501  8242.637451    0.046997    0.047041        0.000000
5    8342.637451    8242.684492 -13110.212690  8342.637451   99.953003  8242.684492    0.046997   99.905962       -0.000044
6    8444.137495    8442.590498 -13110.212690  8444.137495  201.406006  8442.590498    0.046997    1.500000        1.500000
7    8846.949507    8542.590332 -13110.212690  8846.949507  404.312012  8542.590332  104.359009  200.000166      200.000000
8    8846.949507    8542.590576 -13110.212690  8846.949507    1.000000  8542.590576  104.359009  199.999922      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:00:24]  --------------------------------------------------------------------------------
[08/23 17:00:24]  Iteration: 52 (0 solution, 51 counterexamples)
[08/23 17:00:40]  Generator returned sat in 14.517156 secs.
[08/23 17:00:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:00:40]  Improved gap from 0.0 to 0
[08/23 17:00:40]  Improved number of small numbers from 54 to 69 out of a max of 100
[08/23 17:00:40]  Verifer returned sat in 0.821386 secs.
[08/23 17:00:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7942.731689    7942.731445 -13210.353682  7942.731689    0.094727  7942.731445     0.0000    0.000244        0.000200
1    7942.733887    7942.731489 -13110.356182  7942.733887    0.002441  7942.731489     0.0000    0.002397       -0.000103
2    8242.731489    7942.734131 -13110.356182  8242.731489  300.000000  7942.734131     0.0000  299.997358      199.997500
3    8242.731489    8142.241489 -13110.356182  8242.731489  299.995000  8142.241489     0.0000  100.490000       99.997500
4    8442.736489    8242.733887 -13110.356182  8442.736489  300.495000  8242.733887     0.0025  200.000103      200.000000
5    8442.736489    8342.733887 -13110.356182  8442.736489    0.010000  8342.733887     0.0025  100.000103      100.000000
6    8442.736489    8441.726489 -13110.356182  8442.736489    0.510000  8441.726489     0.0025    1.007500        0.000000
7    8442.738989    8442.733989 -13010.358682  8442.738989    1.010000  8442.733989     0.0025    0.002500        0.000000
8    8444.246489    8442.736572 -13010.358643  8444.246489    1.510000  8442.736572     0.0025    1.507417      -98.492461
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:00:41]  --------------------------------------------------------------------------------
[08/23 17:00:41]  Iteration: 53 (0 solution, 52 counterexamples)
[08/23 17:00:46]  Generator returned sat in 4.674037 secs.
[08/23 17:00:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:00:46]  Improved gap from 0.046875 to 7.8125
[08/23 17:00:47]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:00:47]  Verifer returned sat in 0.345007 secs.
[08/23 17:00:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8037.780762    7837.781006 -13110.356201  8037.780762    0.094727  7837.781006   0.000000  199.999756      199.999756
1    8137.733887    7837.781006 -13110.356201  8137.733887  299.952881  7837.781006   0.000000  299.952881      199.952881
2    8142.733887    7937.781006 -13110.356201  8142.733887  304.952881  7937.781006   0.000000  204.952881      104.952881
3    8142.733887    8129.968506 -13110.356201  8142.733887  204.906250  8129.968506   0.000000   12.765381        4.952881
4    8437.827881    8237.780762 -13110.356201  8437.827881  307.859375  8237.780762   0.046875  200.000244      200.000000
5    8437.827881    8337.781006 -13110.356201  8437.827881    2.000000  8337.781006   0.046875  100.000000      100.000000
6    8437.827881    8429.968262 -13110.356201  8437.827881    3.500000  8429.968262   0.046875    7.812744        0.000000
7    8437.827881    8437.781006 -13019.481201  8437.827881    5.750000  8437.781006   0.046875    0.000000       -9.125000
8    8446.952881    8446.906006 -13019.481201  8446.952881    9.125000  8446.906006   0.046875    0.000000     -100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:00:47]  --------------------------------------------------------------------------------
[08/23 17:00:47]  Iteration: 54 (0 solution, 53 counterexamples)
[08/23 17:00:48]  Generator returned sat in 0.804068 secs.
[08/23 17:00:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:00:49]  Improved gap from 7.4375 to 6.25
[08/23 17:00:49]  Improved number of small numbers from 62 to 100 out of a max of 100
[08/23 17:00:49]  Verifer returned sat in 0.608999 secs.
[08/23 17:00:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8037.780762    7837.780762 -13110.356201  8037.780762    0.094482  7837.780762   0.000000  200.000000      199.999756
1    8137.734131    7937.781006 -13110.356201  8137.734131  299.953369  7937.781006   0.000000  199.953125      199.953125
2    8237.734375    7937.781006 -13110.356201  8237.734375  299.953369  7937.781006   0.000000  299.953369      199.953369
3    8237.734375    8137.781006 -13110.356201  8237.734375  199.697754  8137.781006   0.000000   99.953369       99.953369
4    8437.827637    8237.781006 -13110.356201  8437.827637  300.046631  8237.781006   0.046631  200.000000      200.000000
5    8437.827637    8237.781006 -13110.356201  8437.827637    1.500000  8237.781006   0.046631  200.000000      100.000000
6    8437.827637    8431.531006 -13110.356201  8437.827637    2.750000  8431.531006   0.046631    6.250000        0.000000
7    8437.827637    8437.781006 -13016.606201  8437.827637    4.625000  8437.781006   0.046631    0.000000       -6.250000
8    8445.265137    8444.031006 -12922.856445  8445.265137    7.437500  8444.031006   0.046631    1.187500       -5.062744
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:00:49]  --------------------------------------------------------------------------------
[08/23 17:00:49]  Iteration: 55 (0 solution, 54 counterexamples)
[08/23 17:00:53]  Generator returned sat in 2.518901 secs.
[08/23 17:00:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:00:54]  Improved number of small numbers from 38 to 58 out of a max of 99
[08/23 17:00:54]  Verifer returned sat in 0.764788 secs.
[08/23 17:00:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7737.827393    7737.804443 -13110.356201  7737.827393    0.094238  7737.804443   0.000000    0.022949      -99.976868
1    8137.781006    7842.439697 -13110.356201  8137.781006  399.976562  7842.439697   0.000000  295.341309      199.976746
2    8237.780762    7937.804443 -13110.356201  8237.780762  395.341064  7937.804443   0.000000  299.976318      199.976501
3    8237.780762    8037.804260 -13110.356201  8237.780762  266.348918  8037.804260   0.000000  199.976501       99.976501
4    8437.827637    8237.804199 -13110.356201  8437.827637  400.023376  8237.804199   0.023376  200.000061      200.000000
5    8437.827637    8337.804260 -13110.356201  8437.827637  199.682251  8337.804260   0.023376  100.000000      100.000000
6    8637.851013    8434.502096 -13110.356201  8637.851013  300.023376  8434.502096   0.046753  203.302165      200.000000
7    8637.851013    8537.804260 -13110.356201  8637.851013  200.348918  8537.804260   0.046753  100.000000      100.000000
8    8838.874390    8537.804443 -13110.356201  8838.874390  301.023376  8537.804443   1.070129  299.999817      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:00:54]  --------------------------------------------------------------------------------
[08/23 17:00:54]  Iteration: 56 (0 solution, 55 counterexamples)
[08/23 17:00:56]  Generator returned sat in 1.763947 secs.
[08/23 17:00:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:00:57]  Improved gap from 0.0 to 3.125
[08/23 17:00:57]  Improved number of small numbers from 47 to 100 out of a max of 100
[08/23 17:00:57]  Verifer returned sat in 0.378816 secs.
[08/23 17:00:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7647.117432    7347.117432 -12719.669434  7647.117432    0.093994  7347.117432   0.000000  300.000000      200.000000
1    7747.140625    7547.117432 -12719.669434  7747.140625  400.023193  7547.117432   0.023193  200.000000      200.000000
2    7847.117432    7547.547363 -12719.669434  7847.117432  299.976807  7547.547363   0.023193  299.546875      199.976807
3    7847.117432    7747.117432 -12719.669434  7847.117432  299.523438  7747.117432   0.023193   99.976807       99.976807
4    8047.164062    7750.265869 -12719.669434  8047.164062  300.023438  7750.265869   0.046631  296.851562      200.000000
5    8047.164062    7847.117432 -12719.669434  8047.164062    2.000000  7847.117432   0.046631  200.000000      100.000000
6    8047.164062    8044.140625 -12719.669434  8047.164062    2.500000  8044.140625   0.046631    2.976807        0.000000
7    8047.187256    8047.117676 -12622.794678  8047.187256    3.000000  8047.117676   0.046631    0.022949       -3.102051
8    8050.664307    8050.242676 -12622.794678  8050.664307    3.500000  8050.242676   0.046631    0.375000      -99.625000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:00:57]  --------------------------------------------------------------------------------
[08/23 17:00:57]  Iteration: 57 (0 solution, 56 counterexamples)
[08/23 17:01:03]  Generator returned sat in 4.716654 secs.
[08/23 17:01:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:01:03]  Improved gap from 2.40875 to 1.5625
[08/23 17:01:04]  Improved number of small numbers from 78 to 82 out of a max of 100
[08/23 17:01:04]  Verifer returned sat in 0.742190 secs.
[08/23 17:01:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7747.140381    7447.117432 -12819.669434  7747.140381    0.093994  7447.117432   0.023193  299.999756      199.999756
1    7747.140381    7547.117432 -12819.669434  7747.140381  299.999756  7547.117432   0.023193  199.999756       99.999756
2    7747.140625    7647.451598 -12819.669434  7747.140625  200.000000  7647.451598   0.023193   99.665833        0.000000
3    7847.143125    7847.117432 -12819.669434  7847.143125  199.668333  7847.117432   0.023193    0.002500        0.002500
4    8147.143125    7947.117188 -12819.669434  8147.143125  300.002500  7947.117188   0.025693  200.000244      200.000000
5    8147.143125    8047.117188 -12819.669434  8147.143125    0.010000  8047.117188   0.025693  100.000244      100.000000
6    8147.143125    8147.114932 -12819.669434  8147.143125    0.515000  8147.114932   0.025693    0.002500        0.000000
7    8148.413125    8147.117432 -12722.078125  8148.413125    1.272500  8147.117432   0.025693    1.270000       -1.138691
8    8149.551875    8149.526123 -12722.078125  8149.551875    2.408750  8149.526123   0.025693    0.000059      -99.999941
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:01:04]  --------------------------------------------------------------------------------
[08/23 17:01:04]  Iteration: 58 (0 solution, 57 counterexamples)
[08/23 17:01:06]  Generator returned sat in 1.141305 secs.
[08/23 17:01:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:01:07]  Improved number of small numbers from 26 to 85 out of a max of 99
[08/23 17:01:07]  Verifer returned sat in 0.926299 secs.
[08/23 17:01:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7747.143066    7747.120117 -13019.684082  7747.143066    0.093994  7747.120117   0.000000    0.022949        0.011475
1    7747.143066    7747.131836 -13019.684082  7747.143066    0.011719  7747.131836   0.000000    0.011230      -99.988525
2    8147.143311    7847.131836 -13019.684082  8147.143311  400.011475  7847.131836   0.011719  299.999756      200.000000
3    8147.143311    7947.131683 -13019.684082  8147.143311  266.341085  7947.131683   0.011719  199.999908      100.000000
4    8347.155029    8143.480469 -13019.684082  8347.155029  400.011627  8143.480469   0.023438  203.651123      200.000000
5    8347.155029    8247.131592 -13019.684082  8347.155029  199.674316  8247.131592   0.023438  100.000000      100.000000
6    8547.166504    8346.123932 -13019.684082  8547.166504  300.011475  8346.123932   0.034912  201.007660      200.000000
7    8547.166504    8445.149124 -13019.684082  8547.166504  200.996124  8445.149124   0.034912  101.982468      100.000000
8    8747.178223    8447.131836 -13019.684082  8747.178223  301.994186  8447.131836   0.046631  299.999756      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:01:07]  --------------------------------------------------------------------------------
[08/23 17:01:07]  Iteration: 59 (0 solution, 58 counterexamples)
[08/23 17:01:16]  Generator returned sat in 7.943521 secs.
[08/23 17:01:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:01:16]  Improved number of small numbers from 52 to 97 out of a max of 99
[08/23 17:01:16]  Verifer returned sat in 0.567952 secs.
[08/23 17:01:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7747.457520    7747.411133 -13019.986816  7747.457520    0.093750  7747.411133   0.000000    0.046387        0.023193
1    7747.457520    7747.434326 -13019.986816  7747.457520    0.023193  7747.434326   0.000000    0.023193      -99.976807
2    8147.457520    7847.434326 -13019.986816  8147.457520  400.023193  7847.434326   0.023193  300.000000      200.000000
3    8147.457520    7947.434326 -13019.986816  8147.457520  266.348796  7947.434326   0.023193  200.000000      100.000000
4    8347.480713    8147.418701 -13019.986816  8347.480713  400.023193  8147.418701   0.046387  200.015625      200.000000
5    8347.480713    8246.969238 -13019.986816  8347.480713  199.992188  8246.969238   0.046387  100.465088      100.000000
6    8547.503906    8347.418701 -13019.986816  8547.503906  300.488281  8347.418701   0.069580  200.015625      200.000000
7    8547.503906    8447.434326 -13019.986816  8547.503906  199.992188  8447.434326   0.069580  100.000000      100.000000
8    8747.992188    8447.434326 -13019.986816  8747.992188  300.488281  8447.434326   0.557861  300.000000      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:01:17]  --------------------------------------------------------------------------------
[08/23 17:01:17]  Iteration: 60 (0 solution, 59 counterexamples)
[08/23 17:01:19]  Generator returned sat in 1.554684 secs.
[08/23 17:01:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:01:19]  Improved gap from 1.97686767578125 to 1.5625
[08/23 17:01:20]  Improved number of small numbers from 47 to 100 out of a max of 100
[08/23 17:01:20]  Verifer returned sat in 0.417273 secs.
[08/23 17:01:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8351.696045    8151.696045 -13019.986816  8351.696045    0.093506  8151.696045   0.000000  200.000000        200.0000
1    8351.696045    8251.695801 -13019.986816  8351.696045    0.023193  8251.695801   0.000000  100.000244        100.0000
2    8551.718994    8251.696045 -13019.986816  8551.718994  300.023193  8251.696045   0.022949  300.000000        200.0000
3    8551.718994    8451.242188 -13019.986816  8551.718994  299.977051  8451.242188   0.022949  100.453857        100.0000
4    8751.742188    8453.281738 -13019.986816  8751.742188  300.477051  8453.281738   0.046143  298.414307        200.0000
5    8751.742188    8551.696045 -13019.986816  8751.742188    1.000000  8551.696045   0.046143  200.000000        100.0000
6    8751.742188    8651.696045 -13019.986816  8751.742188    1.500000  8651.696045   0.046143  100.000000          0.0000
7    8751.742188    8751.696045 -12921.549316  8751.742188    2.000000  8751.696045   0.046143    0.000000         -1.5625
8    8754.242188    8753.258545 -12921.549316  8754.242188    2.500000  8753.258545   0.046143    0.937500        -99.0625
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:01:20]  --------------------------------------------------------------------------------
[08/23 17:01:20]  Iteration: 61 (0 solution, 60 counterexamples)
[08/23 17:01:37]  Generator returned sat in 16.135454 secs.
[08/23 17:01:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:01:37]  Improved gap from 0.0 to 1.5625
[08/23 17:01:37]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:01:37]  Verifer returned sat in 0.201902 secs.
[08/23 17:01:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8255.649902    7955.649902 -13019.986816  8255.649902    0.093506  7955.649902        0.0  300.000000      200.000000
1    8255.649902    8155.649902 -13019.986816  8255.649902  299.953857  8155.649902        0.0  100.000000      100.000000
2    8255.649902    8254.087402 -13019.986816  8255.649902  100.000000  8254.087402        0.0    1.562500        0.000000
3    8354.133545    8354.087402 -13019.986816  8354.133545  100.046143  8354.087402        0.0    0.046143       -1.516357
4    8356.087402    8356.041260 -12922.332031  8356.087402    2.000000  8356.041260        0.0    0.046143       -1.907715
5    8358.041260    8357.995117 -12823.894531  8358.041260    2.000000  8357.995117        0.0    0.046143       -1.516357
6    8359.995117    8359.948975 -12725.848389  8359.995117    2.000000  8359.948975        0.0    0.046143       -1.516357
7    8361.948975    8361.948975 -12627.848389  8361.948975    2.000000  8361.948975        0.0    0.000000       -1.562500
8    8363.948975    8363.511475 -12627.848389  8363.948975    2.000000  8363.511475        0.0    0.437500      -99.562500
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:01:38]  --------------------------------------------------------------------------------
[08/23 17:01:38]  Iteration: 62 (0 solution, 61 counterexamples)
[08/23 17:01:42]  Generator returned sat in 3.822266 secs.
[08/23 17:01:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:01:43]  Improved gap from 0.344970703125 to 0
[08/23 17:01:43]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:01:43]  Verifer returned sat in 0.498472 secs.
[08/23 17:01:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    8057.014648    8056.991699 -13221.309082  8057.014648    0.093262  8056.991699        0.0  0.022949        0.022949
1    8057.014893    8056.991699 -13121.332275  8057.014893    0.023193  8056.991699        0.0  0.023193        0.000000
2    8057.037842    8057.014893 -13021.355225  8057.037842    0.046143  8057.014893        0.0  0.022949        0.000000
3    8157.038086    8157.014648 -13021.355225  8157.038086  100.023193  8157.014648        0.0  0.023438        0.000244
4    8158.014648    8157.991699 -12922.332275  8158.014648    1.000000  8157.991699        0.0  0.022949       -0.000244
5    8158.991699    8158.968506 -12823.309082  8158.991699    1.000000  8158.968506        0.0  0.023193        0.000000
6    8159.968506    8159.945557 -12724.286133  8159.968506    1.000000  8159.945557        0.0  0.022949       -0.000244
7    8160.945557    8160.922607 -12626.239746  8160.945557    1.000000  8160.922607        0.0  0.022949       -0.976807
8    8161.922607    8161.922607 -12626.239746  8161.922607    1.000000  8161.922607        0.0  0.000000      -99.999756
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:01:43]  --------------------------------------------------------------------------------
[08/23 17:01:43]  Iteration: 63 (0 solution, 62 counterexamples)
[08/23 17:01:47]  Generator returned sat in 3.292657 secs.
[08/23 17:01:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:01:48]  Improved number of small numbers from 22 to 34 out of a max of 99
[08/23 17:01:48]  Verifer returned sat in 0.981894 secs.
[08/23 17:01:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7707.072510    7607.049805 -12871.366974  7707.072510    0.093262  7607.049805   0.000000  100.022705        0.022919
1    7707.072754    7707.049591 -12871.366974  7707.072754  100.022949  7707.049591   0.000000    0.023163      -99.976837
2    8107.072601    7807.049805 -12871.366974  8107.072601  400.023010  7807.049805   0.023010  299.999786      200.000000
3    8107.072601    7909.980560 -12871.366974  8107.072601  264.728027  7909.980560   0.023010  197.069031      100.000000
4    8307.095612    8106.034251 -12871.366974  8307.095612  397.092041  8106.034251   0.046021  201.015340      200.000000
5    8307.095612    8207.049591 -12871.366974  8307.095612  200.992330  8207.049591   0.046021  100.000000      100.000000
6    8508.584106    8307.011241 -12871.366974  8508.584106  301.488495  8307.011241   1.534515  200.038350      200.000000
7    8508.584106    8407.049591 -12871.366974  8508.584106  200.015340  8407.049591   1.534515  100.000000      100.000000
8    8708.607117    8407.049805 -12871.366974  8708.607117  300.023010  8407.049805   1.557526  299.999786      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:01:49]  --------------------------------------------------------------------------------
[08/23 17:01:49]  Iteration: 64 (0 solution, 63 counterexamples)
[08/23 17:02:02]  Generator returned sat in 12.911536 secs.
[08/23 17:02:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:02:03]  Verifer returned unsat in 0.143225 secs.
[08/23 17:02:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:02:03]  --------------------------------------------------------------------------------
[08/23 17:02:03]  Iteration: 65 (1 solution, 63 counterexamples)
[08/23 17:02:04]  Generator returned sat in 0.719169 secs.
[08/23 17:02:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:02:05]  Verifer returned unsat in 0.138318 secs.
[08/23 17:02:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:02:05]  --------------------------------------------------------------------------------
[08/23 17:02:05]  Iteration: 66 (2 solution, 63 counterexamples)
[08/23 17:02:09]  Generator returned sat in 4.013760 secs.
[08/23 17:02:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)[0m
[08/23 17:02:11]  Improved gap from 0.02294921875 to 28.125
[08/23 17:02:11]  Improved number of small numbers from 58 to 100 out of a max of 100
[08/23 17:02:11]  Verifer returned sat in 1.695117 secs.
[08/23 17:02:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7957.033203    7916.213867 -13080.531494  7957.033203    0.093018  7916.213867   0.000000   40.819336       40.819092
1    7957.033203    7928.908203 -13021.350586  7957.033203    0.022705  7928.908203   0.000000   28.125000        0.000000
2    8002.254883    7957.033447 -12966.572266  8002.254883   73.346680  7957.033447   0.000000   45.221436        0.000000
3    8002.254883    8002.254883 -12894.697510  8002.254883    0.022949  8002.254883   0.000000    0.000000      -28.125244
4    8044.798340    8044.775391 -12880.944824  8044.798340   42.543457  8044.775391   0.000000    0.022949      -71.829102
5    8144.752441    8116.627686 -12809.070068  8144.752441   99.977051  8116.627686   0.000000   28.124756       -0.000244
6    8295.901855    8244.752441 -12809.070068  8295.901855  179.274170  8244.752441   0.000000   51.149414       51.149170
7    8544.775391    8244.752686 -12809.070068  8544.775391  300.022949  8244.752686   0.022705  300.000000      200.000000
8    8544.775391    8344.752686 -12809.070068  8544.775391    2.000000  8344.752686   0.022705  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:02:12]  --------------------------------------------------------------------------------
[08/23 17:02:12]  Iteration: 67 (2 solution, 64 counterexamples)
[08/23 17:02:14]  Generator returned sat in 1.310160 secs.
[08/23 17:02:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:02:15]  Improved gap from 27.125 to 29.6875
[08/23 17:02:15]  Improved number of small numbers from 54 to 100 out of a max of 100
[08/23 17:02:15]  Verifer returned sat in 1.497261 secs.
[08/23 17:02:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8880.314453    8850.626709 -13351.607178  8880.314453    0.092773  8850.626709   0.000000   29.687744       29.687744
1    8880.314453    8850.626709 -13281.294922  8880.314453    0.033967  8850.626709   0.000000   29.687744        0.000000
2    8930.572510    8880.314453 -13231.552979  8930.572510   79.945801  8880.314453   0.000000   50.258057        0.000000
3    8930.572510    8930.572510 -13161.240723  8930.572510    0.033936  8930.572510   0.000000    0.000000      -29.687744
4    8970.579346    8970.545166 -13141.804199  8970.579346   40.006836  8970.545166   0.000000    0.034180      -70.244385
5    9070.511230    9040.823730 -13071.491943  9070.511230   99.966064  9040.823730   0.000000   29.687500       -0.000244
6    9221.044434    9170.511475 -13071.491943  9221.044434  180.220703  9170.511475   0.000000   50.532959       50.532959
7    9470.701660    9170.511475 -13071.491943  9470.701660  300.190186  9170.511475   0.190186  300.000000      200.000000
8    9470.701660    9270.511475 -13071.491943  9470.701660    2.000000  9270.511475   0.190186  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:02:16]  --------------------------------------------------------------------------------
[08/23 17:02:16]  Iteration: 68 (2 solution, 65 counterexamples)
[08/23 17:02:22]  Generator returned sat in 5.039907 secs.
[08/23 17:02:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:22]  Verifer returned unsat in 0.134366 secs.
[08/23 17:02:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:22]  --------------------------------------------------------------------------------
[08/23 17:02:22]  Iteration: 69 (3 solution, 65 counterexamples)
[08/23 17:02:24]  Generator returned sat in 0.842811 secs.
[08/23 17:02:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:24]  Verifer returned unsat in 0.150413 secs.
[08/23 17:02:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:24]  --------------------------------------------------------------------------------
[08/23 17:02:24]  Iteration: 70 (4 solution, 65 counterexamples)
[08/23 17:02:26]  Generator returned sat in 0.859252 secs.
[08/23 17:02:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:26]  Verifer returned unsat in 0.146554 secs.
[08/23 17:02:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:26]  --------------------------------------------------------------------------------
[08/23 17:02:26]  Iteration: 71 (5 solution, 65 counterexamples)
[08/23 17:02:28]  Generator returned sat in 0.849963 secs.
[08/23 17:02:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:02:29]  Improved number of small numbers from 37 to 56 out of a max of 99
[08/23 17:02:29]  Verifer returned sat in 0.793780 secs.
[08/23 17:02:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    8459.725830    8459.407715 -13170.967529  8459.725830    0.092529  8459.407715    0.000000    0.318115        0.317750
1    8459.725830    8459.680176 -13170.967406  8459.725830    0.045410  8459.680176    0.000000    0.045654      -99.682127
2    8559.453369    8559.407959 -13170.967406  8559.453369   99.773193  8559.407959    0.000000    0.045410      -99.954588
3    8958.362305    8659.407957 -13170.967406  8958.362305  398.954346  8659.407957    0.000000  298.954347      198.954347
4    9258.839476    8859.407715 -13170.967406  9258.839476  599.431519  8859.407715  199.431519  200.000243      200.000000
5    9258.839476    8959.407957 -13170.967406  9258.839476  199.363770  8959.407957  199.431519  100.000000      100.000000
6    9458.885130    9059.407957 -13170.967406  9458.885130  300.045654  9059.407957  199.477173  200.000000      200.000000
7    9458.885130    9159.203612 -13170.967406  9458.885130  199.500000  9159.203612  199.477173  100.204346      100.000000
8    9658.930785    9159.407959 -13170.967406  9658.930785  300.250000  9159.407959  199.522827  299.999998      200.000000
fefficient=True, bounded_queue=True, bounded_loss=False, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=3.[0m
[08/23 17:02:29]  --------------------------------------------------------------------------------
[08/23 17:02:29]  Iteration: 72 (5 solution, 66 counterexamples)
[08/23 17:02:34]  Generator returned sat in 4.263022 secs.
[08/23 17:02:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:02:35]  Improved gap from 0.045654296875 to 98.4375
[08/23 17:02:36]  Improved number of small numbers from 38 to 100 out of a max of 100
[08/23 17:02:36]  Verifer returned sat in 1.321827 secs.
[08/23 17:02:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7981.895752    7953.895508 -12936.847412  7981.895752    0.092529  7953.895508   0.000000   28.000244       28.000244
1    7981.941162    7981.895508 -12936.847412  7981.941162   28.045654  7981.895508   0.000000    0.045654      -71.954346
2    8142.397705    8142.352295 -12936.847412  8142.397705  160.502197  8142.352295   0.000000    0.045410      -11.497803
3    8453.849854    8253.895508 -12936.847412  8453.849854  311.497559  8253.895508   0.000000  199.954346      199.954346
4    8559.644287    8353.895508 -12936.847412  8559.644287  305.748779  8353.895508   5.748779  200.000000      200.000000
5    8559.644287    8353.895752 -12936.847412  8559.644287  188.000000  8353.895752   5.748779  199.999756      100.000000
6    8559.644287    8453.941162 -12936.847412  8559.644287  199.771729  8453.941162   5.748779   99.954346        0.000000
7    8659.598633    8553.895508 -12936.801758  8659.598633  199.908691  8553.895508   5.748779   99.954346        0.000000
8    8759.598633    8653.849854 -12936.801758  8759.598633  199.954346  8653.849854   5.748779  100.000000        0.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:02:36]  --------------------------------------------------------------------------------
[08/23 17:02:36]  Iteration: 73 (5 solution, 67 counterexamples)
[08/23 17:02:50]  Generator returned sat in 13.394974 secs.
[08/23 17:02:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:02:51]  Improved gap from 97.954345703125 to 98.4375
[08/23 17:02:51]  Improved number of small numbers from 37 to 100 out of a max of 100
[08/23 17:02:51]  Verifer returned sat in 0.535220 secs.
[08/23 17:02:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8331.755127    8031.755127 -12936.847412  8331.755127    0.092529  8031.755127   0.000000  300.000000      200.000000
1    8431.709717    8131.755371 -12936.847412  8431.709717  399.954590  8131.755371   0.000000  299.954346      199.954590
2    8531.709961    8331.755127 -12936.847412  8531.709961  399.954590  8331.755127   0.000000  199.954834      199.954834
3    8531.709961    8428.846436 -12936.847412  8531.709961  105.908691  8428.846436   0.000000  102.863525       99.954834
4    8731.800781    8531.755127 -12936.847412  8731.800781  302.954346  8531.755127   0.045654  200.000000      200.000000
5    8731.800781    8531.755127 -12936.847412  8731.800781    1.500000  8531.755127   0.045654  200.000000      100.000000
6    8731.800781    8631.755127 -12936.847412  8731.800781  100.000000  8631.755127   0.045654  100.000000        0.000000
7    8831.755127    8733.272217 -12936.802002  8831.755127  199.954346  8733.272217   0.045654   98.437256       -0.000244
8    9032.530762    8831.709961 -12936.802002  9032.530762  299.212891  8831.709961   0.045654  200.775146      100.775391
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:02:51]  --------------------------------------------------------------------------------
[08/23 17:02:51]  Iteration: 74 (5 solution, 68 counterexamples)
[08/23 17:02:58]  Generator returned sat in 6.207474 secs.
[08/23 17:02:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:02:58]  Improved gap from 0.04541015625 to 0
[08/23 17:02:59]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:02:59]  Verifer returned sat in 0.205057 secs.
[08/23 17:02:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0    8331.755127    8131.755127 -13233.847412  8331.755127    0.092529  8131.755127        0.0  200.00000       100.00000
1    8331.755127    8331.709717 -13233.847412  8331.755127  199.954590  8331.709717        0.0    0.04541         0.00000
2    8331.755127    8331.755127 -13233.847412  8331.755127    0.045410  8331.755127        0.0    0.00000      -100.00000
3    8631.800537    8531.755127 -13233.847412  8631.800537  300.045410  8531.755127        0.0  100.04541       100.04541
4    8631.800537    8531.755127 -13233.847412  8631.800537    1.500000  8531.755127        0.0  100.04541         0.04541
5    8631.800537    8631.755127 -13135.302002  8631.800537    1.500000  8631.755127        0.0    0.04541        -1.40918
6    8633.255127    8633.209717 -13036.756592  8633.255127    1.500000  8633.209717        0.0    0.04541        -1.40918
7    8634.709717    8634.664307 -12936.802002  8634.709717    1.500000  8634.664307        0.0    0.04541         0.00000
8    8636.164307    8634.709717 -12936.802002  8636.164307    1.500000  8634.709717        0.0    1.45459       -98.54541
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=False, total_losses=0.[0m
[08/23 17:02:59]  --------------------------------------------------------------------------------
[08/23 17:02:59]  Iteration: 75 (5 solution, 69 counterexamples)
[08/23 17:03:07]  Generator returned sat in 6.873279 secs.
[08/23 17:03:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:03:07]  Verifer returned unsat in 0.138854 secs.
[08/23 17:03:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:03:07]  --------------------------------------------------------------------------------
[08/23 17:03:07]  Iteration: 76 (6 solution, 69 counterexamples)
[08/23 17:03:09]  Generator returned sat in 0.951738 secs.
[08/23 17:03:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:03:09]  Verifer returned unsat in 0.124865 secs.
[08/23 17:03:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:03:09]  --------------------------------------------------------------------------------
[08/23 17:03:09]  Iteration: 77 (7 solution, 69 counterexamples)
[08/23 17:03:11]  Generator returned sat in 1.003824 secs.
[08/23 17:03:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:03:11]  Verifer returned unsat in 0.101774 secs.
[08/23 17:03:11]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:03:11]  --------------------------------------------------------------------------------
[08/23 17:03:11]  Iteration: 78 (8 solution, 69 counterexamples)
[08/23 17:03:15]  Generator returned sat in 3.025159 secs.
[08/23 17:03:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:16]  Verifer returned unsat in 0.108731 secs.
[08/23 17:03:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:16]  --------------------------------------------------------------------------------
[08/23 17:03:16]  Iteration: 79 (9 solution, 69 counterexamples)
[08/23 17:03:25]  Generator returned sat in 8.141513 secs.
[08/23 17:03:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:25]  Verifer returned unsat in 0.085674 secs.
[08/23 17:03:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:25]  --------------------------------------------------------------------------------
[08/23 17:03:25]  Iteration: 80 (10 solution, 69 counterexamples)
[08/23 17:03:29]  Generator returned sat in 3.567292 secs.
[08/23 17:03:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:03:30]  Improved gap from 0.00125 to 98.4375
[08/23 17:03:30]  Improved number of small numbers from 52 to 100 out of a max of 100
[08/23 17:03:30]  Verifer returned sat in 0.517915 secs.
[08/23 17:03:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7560.052979    7560.007812 -13442.092773  7560.052979    0.092529  7560.007812   0.000000    0.045166        0.022461
1    7560.052979    7560.030518 -13442.092529  7560.052979    0.022705  7560.030518   0.000000    0.022461      -99.977295
2    7960.007812    7760.030273 -13442.092529  7960.007812  399.977295  7760.030273   0.000000  199.977539      199.977539
3    7960.007812    7860.030273 -13442.092529  7960.007812  152.011475  7860.030273   0.000000   99.977539       99.977539
4    8160.052979    7960.030273 -13442.092529  8160.052979  300.022705  7960.030273   0.022705  200.000000      200.000000
5    8160.052979    7964.984863 -13442.092529  8160.052979    1.500000  7964.984863   0.022705  195.045410      100.000000
6    8160.052979    8060.030273 -13442.092529  8160.052979  101.977295  8060.030273   0.022705  100.000000        0.000000
7    8260.030273    8161.570312 -13442.070068  8260.030273  199.977295  8161.570312   0.022705   98.437256       -0.000244
8    8460.340332    8260.007812 -13442.070068  8460.340332  298.747314  8260.007812   0.022705  200.309814      100.309814
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:03:30]  --------------------------------------------------------------------------------
[08/23 17:03:30]  Iteration: 81 (10 solution, 70 counterexamples)
[08/23 17:03:35]  Generator returned sat in 3.818006 secs.
[08/23 17:03:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)[0m
[08/23 17:03:35]  Improved gap from 98.46573893229167 to 98.4375
[08/23 17:03:36]  Improved number of small numbers from 47 to 100 out of a max of 100
[08/23 17:03:36]  Verifer returned sat in 0.362275 secs.
[08/23 17:03:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7824.405273    7724.393799 -13706.456055  7824.405273    0.092529  7724.393799    0.00000  100.011475        0.011475
1    7824.405273    7824.393799 -13706.456055  7824.405273    0.022705  7824.393799    0.00000    0.011475      -99.988525
2    8224.382324    8023.612630 -13706.456055  8224.382324  399.988525  8023.612630    0.00000  200.769694      199.988525
3    8224.382324    8122.393799 -13706.456055  8224.382324  105.011230  8122.393799    0.00000  101.988525       99.988525
4    8424.405029    8224.393799 -13706.456055  8424.405029  302.011230  8224.393799    0.01123  200.000000      200.000000
5    8424.405029    8224.393880 -13706.456055  8424.405029    2.000000  8224.393880    0.01123  199.999919      100.000000
6    8424.405029    8324.393799 -13706.456055  8424.405029  100.390625  8324.393799    0.01123  100.000000        0.000000
7    8523.795654    8425.945068 -13706.444824  8523.795654  199.390625  8425.945068    0.01123   97.839355       -0.598145
8    8724.122559    8524.382568 -13706.444824  8724.122559  298.166260  8524.382568    0.01123  199.728760       99.728760
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:03:36]  --------------------------------------------------------------------------------
[08/23 17:03:36]  Iteration: 82 (10 solution, 71 counterexamples)
[08/23 17:03:39]  Generator returned sat in 2.485782 secs.
[08/23 17:03:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:40]  Verifer returned unsat in 0.234319 secs.
[08/23 17:03:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:40]  --------------------------------------------------------------------------------
[08/23 17:03:40]  Iteration: 83 (11 solution, 71 counterexamples)
[08/23 17:03:42]  Generator returned sat in 1.069565 secs.
[08/23 17:03:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:42]  Verifer returned unsat in 0.115765 secs.
[08/23 17:03:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:03:42]  --------------------------------------------------------------------------------
[08/23 17:03:42]  Iteration: 84 (12 solution, 71 counterexamples)
[08/23 17:03:45]  Generator returned sat in 1.942078 secs.
[08/23 17:03:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:45]  Verifer returned unsat in 0.127903 secs.
[08/23 17:03:45]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:45]  --------------------------------------------------------------------------------
[08/23 17:03:45]  Iteration: 85 (13 solution, 71 counterexamples)
[08/23 17:03:47]  Generator returned sat in 1.064998 secs.
[08/23 17:03:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:48]  Verifer returned unsat in 0.132089 secs.
[08/23 17:03:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:48]  --------------------------------------------------------------------------------
[08/23 17:03:48]  Iteration: 86 (14 solution, 71 counterexamples)
[08/23 17:03:50]  Generator returned sat in 1.033783 secs.
[08/23 17:03:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:50]  Verifer returned unsat in 0.104854 secs.
[08/23 17:03:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:50]  --------------------------------------------------------------------------------
[08/23 17:03:50]  Iteration: 87 (15 solution, 71 counterexamples)
[08/23 17:03:52]  Generator returned sat in 1.110814 secs.
[08/23 17:03:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:52]  Verifer returned unsat in 0.148209 secs.
[08/23 17:03:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:52]  --------------------------------------------------------------------------------
[08/23 17:03:52]  Iteration: 88 (16 solution, 71 counterexamples)
[08/23 17:03:54]  Generator returned sat in 1.155811 secs.
[08/23 17:03:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:55]  Verifer returned unsat in 0.128094 secs.
[08/23 17:03:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:03:55]  --------------------------------------------------------------------------------
[08/23 17:03:55]  Iteration: 89 (17 solution, 71 counterexamples)
[08/23 17:04:00]  Generator returned sat in 4.301721 secs.
[08/23 17:04:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:04:00]  Improved gap from 0.0452880859375 to 98.4375
[08/23 17:04:01]  Improved number of small numbers from 35 to 100 out of a max of 100
[08/23 17:04:01]  Verifer returned sat in 0.634882 secs.
[08/23 17:04:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7305.157959    7105.157959 -13706.456055  7305.157959    0.092285  7105.157959    0.00000  200.000000      100.000000
1    7305.157959    7305.157959 -13706.456055  7305.157959    0.045166  7305.157959    0.00000    0.000000        0.000000
2    7506.248535    7405.157959 -13706.456055  7506.248535  201.090576  7405.157959    0.00000  101.090576      101.090576
3    7506.248535    7505.157959 -13706.456055  7506.248535  101.045410  7505.157959    0.00000    1.090576        1.090576
4    7805.203369    7605.157959 -13706.456055  7805.203369  300.045410  7605.157959    0.04541  200.000000      200.000000
5    7805.203369    7606.067627 -13706.456055  7805.203369    1.500000  7606.067627    0.04541  199.090332      100.000000
6    7805.203369    7705.157959 -13706.456055  7805.203369  100.954834  7705.157959    0.04541  100.000000        0.000000
7    7905.158203    7806.157959 -13706.410889  7905.158203  199.954834  7806.157959    0.04541   98.954834        0.000000
8    8105.658203    7905.113037 -13706.410889  8105.658203  299.454834  7905.113037    0.04541  200.499756      100.500000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:04:01]  --------------------------------------------------------------------------------
[08/23 17:04:01]  Iteration: 90 (17 solution, 72 counterexamples)
[08/23 17:04:04]  Generator returned sat in 1.828774 secs.
[08/23 17:04:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)[0m
[08/23 17:04:04]  Improved gap from 98.9774169921875 to 98.4375
[08/23 17:04:04]  Improved number of small numbers from 100 to 100 out of a max of 100
[08/23 17:04:04]  Verifer returned sat in 0.281843 secs.
[08/23 17:04:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7456.432129    7305.112793 -13706.456055  7456.432129    0.092285  7305.112793   0.000000  151.319336       51.319336
1    7605.157959    7405.112793 -13706.456055  7605.157959  300.045166  7405.112793   0.000000  200.045166      100.045166
2    7605.157959    7605.112793 -13706.456055  7605.157959    0.045166  7605.112793   0.000000    0.045166        0.045166
3    7706.657959    7705.112793 -13706.456055  7706.657959  101.545166  7705.112793   0.000000    1.545166        1.545166
4    8005.157959    7805.112793 -13706.456055  8005.157959  300.045166  7805.112793   0.045166  200.000000      200.000000
5    8005.157959    7805.112793 -13706.456055  8005.157959    2.000000  7805.112793   0.045166  200.000000      100.000000
6    8005.157959    7905.112793 -13706.456055  8005.157959  100.500000  7905.112793   0.045166  100.000000        0.000000
7    8104.157959    8006.112793 -13706.410889  8104.157959  199.000000  8006.112793   0.045166   98.000000       -0.954834
8    8304.157959    8105.067627 -13706.410889  8304.157959  298.000000  8105.067627   0.045166  199.045166       99.045166
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=True, ramp_down_q=True, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:04:05]  --------------------------------------------------------------------------------
[08/23 17:04:05]  Iteration: 91 (17 solution, 73 counterexamples)
[08/23 17:04:07]  Generator returned sat in 1.599359 secs.
[08/23 17:04:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)[0m
[08/23 17:04:08]  Improved gap from 0.0 to 28.125
[08/23 17:04:09]  Improved number of small numbers from 67 to 82 out of a max of 100
[08/23 17:04:09]  Verifer returned sat in 1.506195 secs.
[08/23 17:04:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7555.271240    7527.146240 -13987.235352  7555.271240    0.092041  7527.146240   0.000000   28.125000       28.125000
1    7555.271240    7527.146240 -13915.360352  7555.271240   28.124756  7527.146240   0.000000   28.125000        0.000000
2    7605.067383    7555.271240 -13865.156494  7605.067383   77.921143  7555.271240   0.000000   49.796143        0.000000
3    7605.067383    7605.067383 -13806.455811  7605.067383    3.384033  7605.067383   0.000000    0.000000      -41.299316
4    7646.411987    7646.366943 -13734.581055  7646.411987   41.344604  7646.366943   0.000000    0.045044      -28.079956
5    7746.321899    7718.196899 -13706.411133  7746.321899   99.954956  7718.196899   0.000000   28.125000       -0.000122
6    7898.614685    7846.321899 -13706.411133  7898.614685  180.417786  7846.321899   0.000000   52.292786       52.292664
7    8146.366943    7846.322021 -13706.411133  8146.366943  300.045044  7846.322021   0.044922  300.000000      200.000000
8    8146.366943    7946.322021 -13706.411133  8146.366943    2.000000  7946.322021   0.044922  200.000000      100.000000
fefficient=False, bounded_queue=True, bounded_loss=True, ramp_up_cwnd=False, ramp_down_bq=False, ramp_down_q=False, ramp_down_cwnd=True, total_losses=1.[0m
[08/23 17:04:09]  --------------------------------------------------------------------------------
[08/23 17:04:09]  Iteration: 92 (17 solution, 74 counterexamples)
[08/23 17:04:10]  Generator returned unsat in 0.032728 secs.
[08/23 17:04:10]  [96mNo more solutions found[0m
[08/23 17:04:10]  Final solutions:
[08/23 17:04:10]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:04:10]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:04:10]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:04:10]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:04:10]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:04:10]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:04:10]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[08/23 17:04:10]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:04:10]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:04:10]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:04:10]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[08/23 17:04:10]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:04:10]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:04:10]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[08/23 17:04:10]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:04:10]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[08/23 17:04:10]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[08/23 17:04:10]  Took 406.237772 secs.
