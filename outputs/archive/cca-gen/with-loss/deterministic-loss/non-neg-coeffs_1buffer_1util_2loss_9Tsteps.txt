[07/26 14:56:17]  --------------------------------------------------------------------------------
[07/26 14:56:17]  Iteration: 1 (0 solution, 0 counterexamples)
[07/26 14:56:17]  Generator returned sat in 0.004385 secs.
[07/26 14:56:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:56:17]  Improved gap from 1/10 to 100
[07/26 14:56:17]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 14:56:17]  Verifer returned sat in 0.292289 secs.
[07/26 14:56:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0        -123.35        -123.35    123.35      -123.35       0.1      -123.35        0.0      0.0             0.0
1          76.75         -23.35    123.35        76.75     200.1       -23.35        0.0    100.1           100.1
2          76.75          76.65    123.35        76.75     100.1        76.65        0.0      0.1             0.1
3          76.75          76.65    123.35        76.75       0.1        76.65        0.0      0.1           -99.9
4         478.85         215.65    123.35       478.85     402.2       215.65        2.2    261.0           200.0
5        1502.25         325.65    123.35      1502.25    1284.4       325.65      925.6    251.0           200.0
6        4320.05         376.65    123.35      4320.05    3068.8       376.65     3643.4    300.0           200.0
7       10759.65         476.65    123.35     10759.65    6739.6       476.65     9983.0    300.0           200.0
8       24462.85         576.65    123.35     24462.85   14003.2       576.65    23586.2    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:17]  --------------------------------------------------------------------------------
[07/26 14:56:17]  Iteration: 2 (0 solution, 1 counterexamples)
[07/26 14:56:17]  Generator returned sat in 0.037395 secs.
[07/26 14:56:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:18]  Improved number of small numbers from 23 to 35 out of a max of 99
[07/26 14:56:18]  Verifer returned sat in 1.040673 secs.
[07/26 14:56:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0      27.175293    -272.774817  272.774817    27.175293     0.099854  -272.774817     0.000000  299.950110       299.95011
1      27.175293    -178.774817  272.774817    27.175293   299.949951  -178.774817     0.000000  205.950110       199.95011
2      27.175293     -72.774817  272.774817    27.175293   205.949951   -72.774817     0.000000   99.950110        99.95011
3     227.275110     -72.774817  272.774817   227.275110   300.049927   -72.774817     0.049927  300.000000       200.00000
4     478.850000      27.225183  272.774817   478.850000   551.574890    27.225183   151.624817  300.000000       200.00000
5    1110.712335     202.225183  272.774817  1110.712335   931.862335   202.225183   683.487152  225.000000       200.00000
6    2422.505838     227.225183  272.774817  2422.505838  1536.793503   227.225183  1895.280655  300.000000       200.00000
7    4579.196092     418.225183  272.774817  4579.196092  2456.690254   418.225183  3951.970909  209.000000       200.00000
8    8252.231474     527.225098  272.774817  8252.231474  3882.035381   527.225098  7525.006290  200.000085       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:19]  --------------------------------------------------------------------------------
[07/26 14:56:19]  Iteration: 3 (0 solution, 2 counterexamples)
[07/26 14:56:19]  Generator returned sat in 0.087358 secs.
[07/26 14:56:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:19]  Improved number of small numbers from 25 to 99 out of a max of 99
[07/26 14:56:19]  Verifer returned sat in 0.257268 secs.
[07/26 14:56:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -1281.568359   -1681.518311  1581.518311 -1281.568359     0.099609 -1681.518311     0.000000  399.949951      299.950195
1   -1281.568359   -1581.518311  1581.518311 -1281.568359   399.900146 -1581.518311     0.000000  299.949951      199.950195
2   -1281.568359   -1381.518555  1581.518311 -1281.568359   299.899902 -1381.518555     0.000000   99.950195       99.950195
3     227.274902   -1381.518311  1581.518311   227.274902  1608.793457 -1381.518311  1308.793457  299.999756      200.000000
4    1537.068604   -1181.518555  1581.518311  1537.068604  1609.793457 -1181.518555  2518.587158  200.000000      200.000000
5    2947.862061   -1181.518555  1581.518311  2947.862061  1610.793457 -1181.518555  3829.380615  300.000000      200.000000
6    4259.655518    -981.518555  1581.518311  4259.655518  1611.793457  -981.518555  5041.174072  200.000000      200.000000
7    5672.448975    -981.518555  1581.518311  5672.448975  1612.793457  -981.518555  6353.967529  300.000000      200.000000
8    6986.242432    -881.518555  1581.518311  6986.242432  1613.793457  -881.518555  7567.760986  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:19]  --------------------------------------------------------------------------------
[07/26 14:56:19]  Iteration: 4 (0 solution, 3 counterexamples)
[07/26 14:56:19]  Generator returned sat in 0.016576 secs.
[07/26 14:56:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:20]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:56:20]  Verifer returned sat in 0.134972 secs.
[07/26 14:56:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -1281.568359   -1681.518311  1581.518311 -1281.568359     0.099609 -1681.518311     0.000000  399.949951      299.950195
1   -1281.568359   -1581.518311  1581.518311 -1281.568359   399.900146 -1581.518311     0.000000  299.949951      199.950195
2   -1281.568359   -1481.518555  1581.518311 -1281.568359   299.899902 -1481.518555     0.000000  199.950195       99.950195
3    1237.068359   -1381.518311  1581.518311  1237.068359  2718.586914 -1381.518311  2318.586914  299.999756      200.000000
4    1537.068604   -1181.518555  1581.518311  1537.068604   600.000000 -1181.518555  2518.587158  200.000000      200.000000
5    2137.068115   -1081.518555  1581.518311  2137.068115   799.999512 -1081.518555  3018.586670  200.000000      200.000000
6    2737.068115   -1059.518555  1581.518311  2737.068115   800.000000 -1059.518555  3518.586670  278.000000      200.000000
7    3103.067627    -881.518555  1581.518311  3103.067627   643.999512  -881.518555  3784.586182  200.000000      200.000000
8    3503.067627    -881.518555  1581.518311  3503.067627   600.000000  -881.518555  4084.586182  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:20]  --------------------------------------------------------------------------------
[07/26 14:56:20]  Iteration: 5 (0 solution, 4 counterexamples)
[07/26 14:56:20]  Generator returned sat in 0.021504 secs.
[07/26 14:56:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:20]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/26 14:56:20]  Verifer returned sat in 0.172524 secs.
[07/26 14:56:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -1281.568359   -1606.594971  1581.518311 -1281.568359     0.099609 -1606.594971     0.000000  325.026611      299.950439
1   -1281.568359   -1581.518799  1581.518311 -1281.568359   325.001221 -1581.518799     0.000000  299.950439      199.950439
2   -1281.568359   -1481.518799  1581.518311 -1281.568359   299.899658 -1481.518799     0.000000  199.950439       99.950439
3    1862.144043   -1281.544189  1581.518311  1862.144043  3343.662842 -1281.544189  2943.662842  200.025391      200.000000
4    1987.169434   -1206.569580  1581.518311  1987.169434   325.050781 -1206.569580  2968.688232  225.050781      200.000000
5    2137.067871   -1131.506104  1581.518311  2137.067871   374.949219 -1131.506104  3018.586670  249.987305      200.000000
6    2237.093262    -981.518799  1581.518311  2237.093262   350.012695  -981.518799  3018.612061  200.000000      200.000000
7    2337.118652    -881.518799  1581.518311  2337.118652   300.025391  -881.518799  3018.637451  200.000000      200.000000
8    2462.169434    -881.518799  1581.518311  2462.169434   325.050781  -881.518799  3043.688232  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:20]  --------------------------------------------------------------------------------
[07/26 14:56:20]  Iteration: 6 (0 solution, 5 counterexamples)
[07/26 14:56:21]  Generator returned sat in 0.081111 secs.
[07/26 14:56:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:21]  Improved gap from 1/800 to 12.5
[07/26 14:56:21]  Improved number of small numbers from 36 to 100 out of a max of 100
[07/26 14:56:21]  Verifer returned sat in 0.693346 secs.
[07/26 14:56:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1481.702148   -1781.702148  1581.518311 -1481.702148    0.099365 -1781.702148   0.000000  300.000000           300.0
1   -1481.677246   -1781.702148  1581.518311 -1481.677246  300.024902 -1781.702148   0.024902  300.000000           200.0
2   -1381.652344   -1681.702148  1581.518311 -1381.652344  400.024902 -1681.702148   0.049805  300.000000           200.0
3   -1281.652344   -1481.727295  1581.518311 -1281.652344  400.000000 -1481.727295   0.049805  200.025146           200.0
4   -1281.652344   -1381.727051  1581.518311 -1281.652344  200.000000 -1381.727051   0.049805  100.024902           100.0
5   -1281.652344   -1294.202148  1581.518311 -1281.652344  100.000000 -1294.202148   0.049805   12.500000             0.0
6   -1244.152344   -1269.227295  1644.018311 -1244.152344   50.000000 -1269.227295   0.049805   25.025146             0.0
7   -1244.152344   -1244.202148  1731.518311 -1244.152344   25.000000 -1244.202148   0.049805    0.000000           -12.5
8   -1231.652344   -1231.702148  1731.518311 -1231.652344   12.500000 -1231.702148   0.049805    0.000000          -100.0
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:56:22]  --------------------------------------------------------------------------------
[07/26 14:56:22]  Iteration: 7 (0 solution, 6 counterexamples)
[07/26 14:56:22]  Generator returned sat in 0.103611 secs.
[07/26 14:56:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:22]  Improved gap from 0 to 100
[07/26 14:56:22]  Improved number of small numbers from 64 to 64 out of a max of 100
[07/26 14:56:22]  Verifer returned sat in 0.647139 secs.
[07/26 14:56:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1481.702148   -1781.652588  1581.518311 -1481.702148    0.099365 -1781.652588    0.000000  299.950439      299.950439
1   -1481.702148   -1681.652588  1581.518311 -1481.702148  299.950439 -1681.652588    0.000000  199.950439      199.950439
2   -1381.702148   -1581.652588  1581.518311 -1381.702148  299.950439 -1581.652588    0.000000  199.950439      199.950439
3   -1281.603027   -1495.652588  1581.518311 -1281.603027  300.049561 -1495.652588    0.049561  214.000000      200.000000
4   -1059.078247   -1381.652588  1581.518311 -1059.078247  436.524780 -1381.652588  122.574341  200.000000      200.000000
5    -740.315857   -1381.652588  1581.518311  -740.315857  518.762390 -1381.652588  341.336731  300.000000      200.000000
6    -580.434662   -1281.652588  1581.518311  -580.434662  459.881195 -1281.652588  401.217926  300.000000      200.000000
7    -435.994064   -1167.848106  1581.518311  -435.994064  444.440598 -1167.848106  445.658524  286.195518      200.000000
8    -285.664803   -1081.652588  1581.518311  -285.664803  436.524780 -1081.652588  495.987785  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:23]  --------------------------------------------------------------------------------
[07/26 14:56:23]  Iteration: 8 (0 solution, 7 counterexamples)
[07/26 14:56:23]  Generator returned sat in 0.034593 secs.
[07/26 14:56:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:23]  Improved gap from 203/8192 to 100
[07/26 14:56:24]  Improved number of small numbers from 39 to 45 out of a max of 100
[07/26 14:56:24]  Verifer returned sat in 0.845319 secs.
[07/26 14:56:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -2310.220703   -2410.220734  1281.518311 -2310.220703    0.099121 -2410.220734     0.000000  100.000031      100.000031
1   -2310.220703   -2410.220734  1281.518311 -2310.220703  100.000000 -2410.220734     0.000000  100.000031        0.000031
2   -2210.220734   -2310.220734  1281.518311 -2210.220734  200.000000 -2310.220734     0.000000  100.000000        0.000000
3   -1910.171173   -2110.220734  1281.518311 -1910.171173  400.049561 -2110.220734     0.049561  200.000000      200.000000
4   -1610.146393   -2010.220734  1281.518311 -1610.146393  500.024780 -2010.220734   200.074341  200.000000      200.000000
5   -1160.134003   -1972.220734  1281.518311 -1160.134003  650.012390 -1972.220734   550.086731  262.000000      200.000000
6    -759.127808   -1818.220734  1281.518311  -759.127808  663.006195 -1818.220734   851.092926  208.000000      200.000000
7    -343.624710   -1805.717039  1281.518311  -343.624710  623.503098 -1805.717039  1166.596024  295.496305      200.000000
8    -122.865771   -1710.220703  1281.518311  -122.865771  516.255244 -1710.220703  1287.354962  299.999969      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:56:24]  --------------------------------------------------------------------------------
[07/26 14:56:24]  Iteration: 9 (0 solution, 8 counterexamples)
[07/26 14:56:24]  Generator returned sat in 0.213216 secs.
[07/26 14:56:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:24]  Improved gap from 1/100 to 98.4375
[07/26 14:56:25]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/26 14:56:25]  Verifer returned sat in 0.262743 secs.
[07/26 14:56:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -2410.193848   -2410.193848  1281.491455 -2410.193848     0.099121 -2410.193848      0.000    0.000000        0.000000
1   -2210.191162   -2410.193604  1281.491455 -2210.191162   200.002686 -2410.193604      0.000  200.002441      100.002686
2   -2210.191162   -2210.193848  1281.491455 -2210.191162     0.002441 -2210.193848      0.000    0.002686        0.002686
3   -1016.443848   -2110.193848  1281.491455 -1016.443848  1193.750000 -2110.193848    893.750  200.000000      200.000000
4    -619.568848   -2010.193848  1281.491455  -619.568848   596.875000 -2010.193848   1190.625  200.000000      200.000000
5    -521.131348   -1910.193848  1281.491455  -521.131348   298.437500 -1910.193848   1190.625  198.437500      198.437500
6    -521.131348   -1810.193848  1281.491455  -521.131348     0.010000 -1810.193848   1190.625   98.437500       98.437500
7    -521.131348   -1810.193848  1283.053955  -521.131348     0.010000 -1810.193848   1190.625   98.437500        0.000000
8    -521.131348   -1711.756348  1283.053955  -521.131348     0.010000 -1711.756348   1190.625    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:25]  --------------------------------------------------------------------------------
[07/26 14:56:25]  Iteration: 10 (0 solution, 9 counterexamples)
[07/26 14:56:25]  Generator returned sat in 0.125193 secs.
[07/26 14:56:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:25]  Improved gap from 1575/16 to 98.4375
[07/26 14:56:25]  Improved number of small numbers from 82 to 100 out of a max of 100
[07/26 14:56:25]  Verifer returned sat in 0.260883 secs.
[07/26 14:56:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -2503.553955   -2510.193848  1281.491455 -2503.553955     0.099121 -2510.193848     6.639893    0.000000      -99.999756
1   -2203.551270   -2410.193848  1281.491455 -2203.551270   300.002686 -2410.193848     6.639893  200.002686      100.002930
2   -2203.551270   -2310.193848  1281.491455 -2203.551270     0.002500 -2310.193848     6.639893  100.002686        0.002930
3   -1121.803955   -2110.194092  1281.491455 -1121.803955  1181.750000 -2110.194092   788.390137  200.000000      200.000000
4    -728.928955   -2010.194092  1281.491455  -728.928955   592.875000 -2010.194092  1081.265137  200.000000      200.000000
5    -630.491455   -1910.194092  1281.491455  -630.491455   298.437500 -1910.194092  1081.265137  198.437500      198.437500
6    -630.491455   -1810.194092  1281.491455  -630.491455     0.010000 -1810.194092  1081.265137   98.437500       98.437500
7    -630.491455   -1810.194092  1283.053955  -630.491455     0.010000 -1810.194092  1081.265137   98.437500        0.000000
8    -630.491455   -1711.756592  1283.053955  -630.491455     0.010000 -1711.756592  1081.265137    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:26]  --------------------------------------------------------------------------------
[07/26 14:56:26]  Iteration: 11 (0 solution, 10 counterexamples)
[07/26 14:56:26]  Generator returned sat in 0.030162 secs.
[07/26 14:56:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:26]  Improved gap from 1567/16 to 98.4375
[07/26 14:56:26]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 14:56:26]  Verifer returned sat in 0.217564 secs.
[07/26 14:56:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -2503.553955   -2510.193848  1282.491211 -2503.553955     0.099121 -2510.193848     6.639893    0.000000      -99.000000
1   -2203.551270   -2410.193848  1282.491211 -2203.551270   300.002686 -2410.193848     6.639893  200.002686      101.002686
2   -2203.551270   -2311.193848  1282.491211 -2203.551270     0.002500 -2311.193848     6.639893  101.002686        1.002686
3   -1119.803955   -2111.193848  1282.491211 -1119.803955  1184.750000 -2111.193848   791.389893  200.000000      200.000000
4    -725.928955   -2011.193848  1282.491211  -725.928955   593.875000 -2011.193848  1085.264893  200.000000      200.000000
5    -627.491455   -1911.193848  1282.491211  -627.491455   298.437500 -1911.193848  1085.264893  198.437500      198.437500
6    -627.491455   -1862.756348  1282.491211  -627.491455     0.010000 -1862.756348  1085.264893  150.000000       98.437500
7    -627.491455   -1811.193848  1284.053711  -627.491455     0.010000 -1811.193848  1085.264893   98.437500        0.000000
8    -627.491455   -1712.756348  1284.053711  -627.491455     0.010000 -1712.756348  1085.264893    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:26]  --------------------------------------------------------------------------------
[07/26 14:56:26]  Iteration: 12 (0 solution, 11 counterexamples)
[07/26 14:56:27]  Generator returned sat in 0.044223 secs.
[07/26 14:56:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:27]  Improved gap from 1575/16 to 98.4375
[07/26 14:56:27]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/26 14:56:27]  Verifer returned sat in 0.307535 secs.
[07/26 14:56:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -2417.911621   -2617.912842  1282.490967 -2417.911621     0.098877 -2617.912842     0.000000  200.001221      100.001221
1   -2417.911621   -2417.914307  1282.490967 -2417.911621   200.000000 -2417.914307     0.000000    0.002686        0.001221
2   -2417.911621   -2417.911621  1282.490967 -2417.911621     0.001250 -2417.911621     0.000000    0.000000      -99.998779
3   -1223.916504   -2217.913086  1282.490967 -1223.916504  1193.995117 -2217.913086   793.996338  200.000244      200.000000
4    -825.919189   -2117.912842  1282.490967  -825.919189   597.997559 -2117.912842  1091.993652  200.000000      200.000000
5    -725.920410   -2117.912842  1282.490967  -725.920410   299.998779 -2117.912842  1091.993652  299.998779      199.998779
6    -725.920410   -2017.912842  1282.490967  -725.920410     0.010000 -2017.912842  1091.993652  199.998779       99.998779
7    -725.920410   -1916.351807  1282.492188  -725.920410     0.010000 -1916.351807  1091.993652   98.437744        0.000000
8    -725.920410   -1817.914062  1282.492432  -725.920410     0.010000 -1817.914062  1091.993652    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:27]  --------------------------------------------------------------------------------
[07/26 14:56:27]  Iteration: 13 (0 solution, 12 counterexamples)
[07/26 14:56:27]  Generator returned sat in 0.043827 secs.
[07/26 14:56:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:28]  Improved gap from 400129/4096 to 98.4375
[07/26 14:56:28]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 14:56:28]  Verifer returned sat in 0.200950 secs.
[07/26 14:56:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t
0   -2417.911621   -2617.912842  1280.929688 -2417.911621     0.098877 -2617.912842     0.000000  200.001221      100.001221
1   -2417.911621   -2417.914307  1280.929688 -2417.911621   200.000000 -2417.914307     0.000000    0.002686        0.001221
2   -2417.911621   -2417.911621  1280.929688 -2417.911621     0.001250 -2417.911621     0.000000    0.000000      -99.998779
3   -1227.161621   -2217.913086  1280.929688 -1227.161621  1190.750000 -2217.913086   790.751221  200.000244      200.000000
4    -831.286865   -2117.912842  1280.929688  -831.286865   595.875000 -2117.912842  1086.625977  200.000000      200.000000
5    -732.849365   -2017.912842  1280.929688  -732.849365   298.437500 -2017.912842  1086.625977  198.437500      198.437500
6    -732.849365   -1917.912842  1280.929688  -732.849365     0.010000 -1917.912842  1086.625977   98.437500       98.437500
7    -732.849365   -1917.912842  1282.492188  -732.849365     0.010000 -1917.912842  1086.625977   98.437500        0.000000
8    -732.849365   -1819.475342  1282.492432  -732.849365     0.010000 -1819.475342  1086.625977    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:28]  --------------------------------------------------------------------------------
[07/26 14:56:28]  Iteration: 14 (0 solution, 13 counterexamples)
[07/26 14:56:28]  Generator returned sat in 0.290195 secs.
[07/26 14:56:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:29]  Improved gap from 1/100 to 0
[07/26 14:56:29]  Improved number of small numbers from 59 to 83 out of a max of 100
[07/26 14:56:29]  Verifer returned sat in 0.563019 secs.
[07/26 14:56:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0   -1131.296387   -1131.296631  1180.938721 -1131.296387    0.098633 -1131.296631        0.0    0.000244        0.000000
1    -931.296631   -1131.296387  1180.938721  -931.296631  200.000000 -1131.296387        0.0  199.999756       99.999756
2    -931.296631   -1028.297607  1180.938965  -931.296631    0.001221 -1028.297607        0.0   97.000977        0.000000
3    -831.296631    -831.297109  1180.938965  -831.296631  197.000977  -831.297109        0.0    0.000479        0.000000
4    -831.287109    -831.296499  1280.929443  -831.287109    0.010000  -831.296499        0.0    0.009390        0.000000
5    -831.286499    -831.287109  1380.928711  -831.286499    0.010000  -831.287109        0.0    0.000610       -0.000122
6    -831.277109    -831.277720  1480.919443  -831.277109    0.010000  -831.277720        0.0    0.000610        0.000000
7    -831.267720    -831.277109  1580.909912  -831.267720    0.010000  -831.277109        0.0    0.009390       -0.000142
8    -831.267109    -831.267578  1580.910156  -831.267109    0.010000  -831.267578        0.0    0.000469      -99.999287
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:56:29]  --------------------------------------------------------------------------------
[07/26 14:56:29]  Iteration: 15 (0 solution, 14 counterexamples)
[07/26 14:56:30]  Generator returned sat in 0.606335 secs.
[07/26 14:56:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:30]  Improved gap from 0 to 0
[07/26 14:56:31]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/26 14:56:31]  Verifer returned sat in 0.375880 secs.
[07/26 14:56:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0   -1131.296631   -1131.296631  1180.938965 -1131.296631    0.098389 -1131.296631        0.0   0.000000        0.000000
1   -1031.296631   -1131.296387  1180.938965 -1031.296631  100.000000 -1131.296387        0.0  99.999756        0.000000
2   -1031.296631   -1031.296631  1180.938965 -1031.296631    0.000244 -1031.296631        0.0   0.000000     -100.000000
3    -831.296631    -831.296875  1180.938965  -831.296631  200.000000  -831.296875        0.0   0.000244        0.000000
4    -830.796875    -831.296387  1280.438965  -830.796875    0.500000  -831.296387        0.0   0.499512       -0.000244
5    -830.796387    -830.796631  1380.438721  -830.796387    0.500000  -830.796631        0.0   0.000244        0.000000
6    -830.296631    -830.296875  1479.439209  -830.296631    0.500000  -830.296875        0.0   0.000244       -0.499756
7    -829.796875    -829.796875  1578.939209  -829.796875    0.500000  -829.796875        0.0   0.000000       -0.500000
8    -829.296875    -829.296875  1578.939209  -829.296875    0.500000  -829.296875        0.0   0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:56:31]  --------------------------------------------------------------------------------
[07/26 14:56:31]  Iteration: 16 (0 solution, 15 counterexamples)
[07/26 14:56:31]  Generator returned sat in 0.223187 secs.
[07/26 14:56:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:31]  Improved number of small numbers from 62 to 99 out of a max of 99
[07/26 14:56:31]  Verifer returned sat in 0.206121 secs.
[07/26 14:56:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0   -1003.086182   -1203.135254  1578.938965 -1003.086182    0.098145 -1203.135254    0.000000  200.049072      200.048828
1   -1003.086182   -1103.135254  1578.938965 -1003.086182    0.048584 -1103.135254    0.000000  100.049072      100.048828
2   -1003.086182   -1003.135010  1578.938965 -1003.086182    0.048828 -1003.135010    0.000000    0.048828        0.048828
3    -705.336182    -903.135254  1578.938965  -705.336182  297.798828  -903.135254    0.000000  197.799072      197.798828
4    -307.037598    -803.135010  1578.938965  -307.037598  596.097656  -803.135010  296.097412  200.000000      200.000000
5    -206.988770    -803.135010  1578.938965  -206.988770  300.048828  -803.135010  296.146240  300.000000      200.000000
6    -206.988770    -607.732666  1578.938965  -206.988770  152.024414  -607.732666  296.146240  104.597656      100.000000
7      -7.037598    -503.135010  1578.938965    -7.037598  304.548828  -503.135010  296.146240  199.951172      199.951172
8     402.608887    -503.135010  1578.938965   402.608887  609.597656  -503.135010  605.743896  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:32]  --------------------------------------------------------------------------------
[07/26 14:56:32]  Iteration: 17 (0 solution, 16 counterexamples)
[07/26 14:56:32]  Generator returned sat in 0.177964 secs.
[07/26 14:56:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:33]  Improved number of small numbers from 47 to 69 out of a max of 99
[07/26 14:56:33]  Verifer returned sat in 0.612039 secs.
[07/26 14:56:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    -780.336426   -1029.265625  1578.938721  -780.336426    0.098145 -1029.265625    0.000000  248.929199      248.928857
1    -780.336426    -929.265527  1578.938721  -780.336426    0.048828  -929.265527    0.000000  148.929102      148.928857
2    -780.336426    -829.265625  1578.938721  -780.336426    0.048828  -829.265625    0.000000   48.929199       48.928857
3    -780.336426    -780.385010  1578.938965  -780.336426   48.929199  -780.385010    0.000000    0.048584      -51.070898
4    -557.586304    -629.265527  1578.938965  -557.586304  222.798706  -629.265527    0.000000   71.679224       71.679224
5     -33.168115    -529.265527  1578.938965   -33.168115  596.097412  -529.265527  296.097412  200.000000      200.000000
6      66.880591    -529.265381  1578.938965    66.880591  300.048706  -529.265381  296.146118  299.999854      200.000000
7      66.880591    -429.265527  1578.938965    66.880591  152.024353  -429.265527  296.146118  200.000000      100.000000
8     271.429297    -329.265381  1578.938965   271.429297  404.548706  -329.265381  300.694824  299.999854      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:33]  --------------------------------------------------------------------------------
[07/26 14:56:33]  Iteration: 18 (0 solution, 17 counterexamples)
[07/26 14:56:36]  Generator returned sat in 2.844445 secs.
[07/26 14:56:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:37]  Improved gap from 199/4096 to 98.4375
[07/26 14:56:37]  Improved number of small numbers from 56 to 100 out of a max of 100
[07/26 14:56:37]  Verifer returned sat in 0.981181 secs.
[07/26 14:56:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -782.336426    -782.336426  1578.938721  -782.336426    0.098145  -782.336426   0.000000    0.000000       -0.072998
1    -482.239258    -682.263672  1578.938721  -482.239258  300.097168  -682.263672   0.024170  200.000244      200.000000
2    -482.239258    -582.263672  1578.938721  -482.239258  200.000000  -582.263672   0.024170  100.000244      100.000000
3    -282.263672    -482.263428  1578.938721  -282.263672  299.975830  -482.263428   0.024170  199.975586      199.975586
4    -182.214844    -382.263672  1578.938721  -182.214844  300.024414  -382.263672   0.048584  200.000244      200.000000
5    -182.214844    -365.914062  1578.938721  -182.214844  151.000000  -365.914062   0.048584  183.650635      100.000000
6    -182.190674    -276.838135  1578.938721  -182.190674  183.674805  -276.838135   0.048584   94.598877        0.024170
7     -82.239502    -182.263428  1578.963135   -82.239502  194.550049  -182.263428   0.048584   99.975342       -0.000244
8      15.060303     -82.287842  1578.963135    15.060303  197.275146   -82.287842   0.048584   97.299561       -2.700439
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:37]  --------------------------------------------------------------------------------
[07/26 14:56:37]  Iteration: 19 (0 solution, 18 counterexamples)
[07/26 14:56:38]  Generator returned sat in 0.216046 secs.
[07/26 14:56:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:38]  Improved gap from 819023/8192 to 98.4375
[07/26 14:56:38]  Improved number of small numbers from 37 to 100 out of a max of 100
[07/26 14:56:38]  Verifer returned sat in 0.523406 secs.
[07/26 14:56:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    -178.954834    -178.955078  1578.938721  -178.954834    0.098145  -178.955078    0.00000    0.000244      -99.999756
1     -77.344238     -77.392334  1578.938721   -77.344238  101.610840   -77.392334    0.00000    0.048096      -98.389160
2     121.044922      72.747803  1578.938721   121.044922  198.437256    72.747803    0.00000   48.297119        0.000000
3     272.844482     221.044922  1578.938721   272.844482  200.096680   221.044922    0.00000   51.799561       51.799561
4     521.093262     321.044922  1578.938721   521.093262  300.048340   321.044922    0.04834  200.000000      200.000000
5     521.093262     321.238770  1578.938721   521.093262  151.024170   321.238770    0.04834  199.806152      100.000000
6     521.093262     421.093506  1578.938721   521.093262  199.757568   421.093506    0.04834   99.951416        0.000000
7     621.044922     521.045166  1578.987061   621.044922  199.903076   521.045166    0.04834   99.951416        0.000000
8     721.045166     620.996582  1578.987061   721.045166  199.951660   620.996582    0.04834  100.000244        0.000244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:39]  --------------------------------------------------------------------------------
[07/26 14:56:39]  Iteration: 20 (0 solution, 19 counterexamples)
[07/26 14:56:40]  Generator returned sat in 1.140949 secs.
[07/26 14:56:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:40]  Improved gap from 397/32768 to 100
[07/26 14:56:41]  Improved number of small numbers from 41 to 100 out of a max of 100
[07/26 14:56:41]  Verifer returned sat in 0.344809 secs.
[07/26 14:56:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t
0     620.833008     420.808838  1578.938477   620.833008    0.098145   420.808838    0.00000  200.02417       100.02417
1     620.833008     620.808838  1578.938477   620.833008  200.024170   620.808838    0.00000    0.02417         0.02417
2     720.857178     620.808838  1578.938477   720.857178  100.048340   620.808838    0.00000  100.04834         0.04834
3     720.857178     720.808838  1578.938477   720.857178  100.024170   720.808838    0.00000    0.04834       -99.95166
4    1120.833008     859.808838  1578.938477  1120.833008  400.024170   859.808838    0.02417  261.00000       200.00000
5    1120.833008    1020.808838  1578.938477  1120.833008  119.500000  1020.808838    0.02417  100.00000       100.00000
6    1540.333008    1074.808838  1578.938477  1540.333008  519.500000  1074.808838  219.52417  246.00000       200.00000
7    1540.333008    1120.808838  1578.938477  1540.333008  177.000000  1120.808838  219.52417  200.00000       100.00000
8    1778.333008    1220.808838  1578.938477  1778.333008  438.000000  1220.808838  257.52417  300.00000       200.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:41]  --------------------------------------------------------------------------------
[07/26 14:56:41]  Iteration: 21 (0 solution, 20 counterexamples)
[07/26 14:56:43]  Generator returned sat in 2.003717 secs.
[07/26 14:56:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:43]  Improved gap from 0 to 100
[07/26 14:56:44]  Improved number of small numbers from 63 to 75 out of a max of 100
[07/26 14:56:44]  Verifer returned sat in 0.748634 secs.
[07/26 14:56:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     529.736084     529.733431  1578.938477   529.736084    0.098145   529.733431    0.00000    0.002653        0.002653
1     529.736084     529.733643  1578.938477   529.736084    0.002500   529.733643    0.00000    0.002441      -99.997347
2     629.736084     629.733431  1578.938477   629.736084  100.002441   629.733431    0.00000    0.002653      -99.997347
3     729.735931     729.733431  1578.938477   729.735931  100.002500   729.733431    0.00000    0.002500      -99.997500
4    1180.237181     829.733431  1578.938477  1180.237181  450.503750   829.733431   50.50375  300.000000      200.000000
5    1180.237181    1009.532931  1578.938477  1180.237181    0.010000  1009.532931   50.50375  120.200500      100.000000
6    1630.250931    1129.733398  1578.938477  1630.250931  570.214250  1129.733398  300.51750  200.000033      200.000000
7    1630.250931    1129.733431  1578.938477  1630.250931    0.010000  1129.733431  300.51750  200.000000      100.000000
8    1880.765931    1229.733643  1578.938477  1880.765931  450.515000  1229.733643  351.03250  299.999788      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:44]  --------------------------------------------------------------------------------
[07/26 14:56:44]  Iteration: 22 (0 solution, 21 counterexamples)
[07/26 14:56:45]  Generator returned sat in 0.234250 secs.
[07/26 14:56:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:45]  Improved number of small numbers from 72 to 72 out of a max of 99
[07/26 14:56:45]  Verifer returned sat in 0.480725 secs.
[07/26 14:56:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0     529.736084     499.737181  1578.938477   529.736084    0.098145   499.737181    0.00000   29.998903        0.002653
1     529.736084     529.733643  1578.938477   529.736084    0.002500   529.733643    0.00000    0.002441      -99.997347
2     629.736084     629.733431  1578.938477   629.736084  100.002441   629.733431    0.00000    0.002653      -99.997347
3     771.738402     771.737181  1578.938477   771.738402  142.004971   771.737181    0.00000    0.001221      -57.995029
4    1180.237181     857.733431  1578.938477  1180.237181  408.500000   857.733431   50.50375  272.000000      200.000000
5    1180.237181    1009.538931  1578.938477  1180.237181    0.010000  1009.538931   50.50375  120.194500      100.000000
6    1630.250931    1129.733398  1578.938477  1630.250931  570.208250  1129.733398  300.51750  200.000033      200.000000
7    1630.250931    1129.733431  1578.938477  1630.250931    0.010000  1129.733431  300.51750  200.000000      100.000000
8    1838.750931    1229.733643  1578.938477  1838.750931  408.500000  1229.733643  309.01750  299.999788      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:46]  --------------------------------------------------------------------------------
[07/26 14:56:46]  Iteration: 23 (0 solution, 22 counterexamples)
[07/26 14:56:47]  Generator returned sat in 1.199135 secs.
[07/26 14:56:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:47]  Verifer returned unsat in 0.058143 secs.
[07/26 14:56:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:56:47]  --------------------------------------------------------------------------------
[07/26 14:56:47]  Iteration: 24 (1 solution, 22 counterexamples)
[07/26 14:56:48]  Generator returned sat in 0.103502 secs.
[07/26 14:56:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:56:48]  Verifer returned unsat in 0.052515 secs.
[07/26 14:56:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:56:48]  --------------------------------------------------------------------------------
[07/26 14:56:48]  Iteration: 25 (2 solution, 22 counterexamples)
[07/26 14:56:48]  Generator returned sat in 0.099723 secs.
[07/26 14:56:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:56:48]  Verifer returned unsat in 0.046774 secs.
[07/26 14:56:48]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:56:48]  --------------------------------------------------------------------------------
[07/26 14:56:48]  Iteration: 26 (3 solution, 22 counterexamples)
[07/26 14:56:48]  Generator returned sat in 0.077035 secs.
[07/26 14:56:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:56:49]  Verifer returned unsat in 0.072662 secs.
[07/26 14:56:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:56:49]  --------------------------------------------------------------------------------
[07/26 14:56:49]  Iteration: 27 (4 solution, 22 counterexamples)
[07/26 14:56:50]  Generator returned sat in 0.717843 secs.
[07/26 14:56:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:56:50]  Improved gap from 1/800 to 100
[07/26 14:56:50]  Improved number of small numbers from 55 to 69 out of a max of 100
[07/26 14:56:50]  Verifer returned sat in 0.594237 secs.
[07/26 14:56:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1120.702393    1020.702565  1087.96931  1120.702393    0.097900  1020.702565    0.000000   99.999827       99.999827
1    1120.702393    1020.702637  1087.96931  1120.702393    0.001250  1020.702637    0.000000   99.999756       -0.000173
2    1420.701416    1120.702565  1087.96931  1420.701416  399.998779  1120.702565    0.000000  299.998851      199.998851
3    1420.701416    1320.702565  1087.96931  1420.701416    0.001250  1320.702565    0.000000   99.998851       99.998851
4    1621.703190    1420.205065  1087.96931  1621.703190  301.000625  1420.205065    1.000625  200.497500      200.000000
5    1621.703190    1520.702565  1087.96931  1621.703190    0.010000  1520.702565    1.000625  100.000000      100.000000
6    1922.708190    1620.702393  1087.96931  1922.708190  401.005000  1620.702393  102.005625  200.000173      200.000000
7    1922.708190    1720.200690  1087.96931  1922.708190    0.010000  1720.200690  102.005625  100.501875      100.000000
8    2123.206940    1720.702637  1087.96931  2123.206940  301.000625  1720.702637  102.504375  299.999928      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:51]  --------------------------------------------------------------------------------
[07/26 14:56:51]  Iteration: 28 (4 solution, 23 counterexamples)
[07/26 14:56:51]  Generator returned sat in 0.318006 secs.
[07/26 14:56:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:56:51]  Improved gap from 0 to 100
[07/26 14:56:51]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 14:56:51]  Verifer returned sat in 0.227797 secs.
[07/26 14:56:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1070.203613     870.203857  1087.969238  1070.203613    0.097900   870.203857   0.000000  199.999756       99.999756
1    1070.203613     970.203857  1087.969238  1070.203613    0.002686   970.203857   0.000000   99.999756       -0.000244
2    1219.707520    1170.203857  1087.969238  1219.707520  249.503662  1170.203857   0.000000   49.503662       49.503662
3    1219.707764    1219.705078  1087.969238  1219.707764   49.503906  1219.705078   0.000000    0.002686      -50.496094
4    1570.206299    1270.203857  1087.969238  1570.206299  350.501221  1270.203857   0.002441  300.000000      200.000000
5    1570.206299    1470.203857  1087.969238  1570.206299    0.010000  1470.203857   0.002441  100.000000      100.000000
6    1771.206299    1570.203613  1087.969238  1771.206299  301.000000  1570.203613   1.002441  200.000244      200.000000
7    1771.206299    1619.705078  1087.969238  1771.206299    0.010000  1619.705078   1.002441  150.498779      100.000000
8    1971.208740    1670.203857  1087.969238  1971.208740  350.501221  1670.203857   1.004883  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:56:52]  --------------------------------------------------------------------------------
[07/26 14:56:52]  Iteration: 29 (4 solution, 24 counterexamples)
[07/26 14:56:55]  Generator returned sat in 2.792303 secs.
[07/26 14:56:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:55]  Improved gap from 11/16384 to 98.4375
[07/26 14:56:55]  Improved number of small numbers from 90 to 100 out of a max of 100
[07/26 14:56:55]  Verifer returned sat in 0.224155 secs.
[07/26 14:56:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1177.457520    1077.456055  1084.844238  1177.457520    0.097900  1077.456055        0.0  100.001465        0.001709
1    1177.457520    1177.455811  1084.844238  1177.457520    0.002441  1177.455811        0.0    0.001709      -99.998291
2    1477.455811    1282.139404  1084.844238  1477.455811  300.000000  1282.139404        0.0  195.316406      100.000000
3    1477.455811    1379.018311  1084.844238  1477.455811  195.315186  1379.018311        0.0   98.437500        0.000000
4    1574.333496    1574.332275  1084.844238  1574.333496  195.315186  1574.332275        0.0    0.001221       -3.122314
5    1769.647461    1577.455811  1084.844238  1769.647461  195.315186  1577.455811        0.0  192.191650       92.191650
6    1772.770996    1677.455811  1086.406738  1772.770996  195.315186  1677.455811        0.0   95.315186       -3.122314
7    1872.770996    1775.893311  1087.969238  1872.770996  195.315186  1775.893311        0.0   96.877686       -1.559814
8    1971.208496    1874.330811  1087.969238  1971.208496  195.315186  1874.330811        0.0   96.877686       -3.122314
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:56:55]  --------------------------------------------------------------------------------
[07/26 14:56:55]  Iteration: 30 (4 solution, 25 counterexamples)
[07/26 14:56:56]  Generator returned sat in 0.288092 secs.
[07/26 14:56:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:57]  Improved gap from 5/16384 to 29.6875
[07/26 14:56:57]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/26 14:56:57]  Verifer returned sat in 1.326960 secs.
[07/26 14:56:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1636.837891    1607.150391   903.613770  1636.837891    0.097656  1607.150391   0.000000   29.687500       29.687500
1    1636.837891    1607.150635   973.926025  1636.837891    0.002441  1607.150635   0.000000   29.687256       -0.000244
2    1685.307129    1636.838135  1025.457031  1685.307129   78.156494  1636.838135   0.000000   48.468994        0.000000
3    1685.307129    1685.307129  1084.843994  1685.307129    1.535645  1685.307129   0.000000    0.000000      -40.613037
4    1725.921143    1725.920166  1114.532959  1725.921143   40.614014  1725.920166   0.000000    0.000977      -70.310059
5    1825.918945    1796.231201  1184.845215  1825.918945   99.998779  1796.231201   0.000000   29.687744        0.000000
6    1975.926514    1925.918945  1184.845215  1975.926514  179.695312  1925.918945   0.000000   50.007568       50.007568
7    2225.920166    1925.918945  1184.845215  2225.920166  300.001221  1925.918945   0.001221  300.000000      200.000000
8    2225.920166    2025.918945  1184.845215  2225.920166    0.010000  2025.918945   0.001221  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:56:58]  --------------------------------------------------------------------------------
[07/26 14:56:58]  Iteration: 31 (4 solution, 26 counterexamples)
[07/26 14:56:59]  Generator returned sat in 0.460181 secs.
[07/26 14:56:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:56:59]  Improved gap from 1/800 to 28.125
[07/26 14:57:00]  Improved number of small numbers from 59 to 67 out of a max of 100
[07/26 14:57:00]  Verifer returned sat in 1.377583 secs.
[07/26 14:57:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1636.837891    1635.285400   875.478760  1636.837891    0.097656  1635.285400    0.00000    1.552490        1.552490
1    1636.837891    1636.835635   945.803525  1636.837891    0.002500  1636.835635    0.00000    0.002256      -28.122744
2    1693.085635    1664.960635  1017.678525  1693.085635   56.250000  1664.960635    0.00000   28.125000        0.000000
3    1693.085635    1693.085635  1089.553525  1693.085635    0.002441  1693.085635    0.00000    0.000000      -28.125000
4    1721.990635    1721.210635  1117.681152  1721.990635   28.905000  1721.210635    0.00000    0.780000      -71.092373
5    1821.208135    1793.083135  1189.556025  1821.208135   99.997500  1793.083135    0.00000   28.125000        0.000000
6    2057.139385    1871.208135  1189.556025  2057.139385  264.056250  1871.208135    0.00000  185.931250      135.931250
7    2488.381885    1921.208252  1189.556025  2488.381885  617.173750  1921.208252  267.17375  299.999883      200.000000
8    2488.381885    2021.208252  1189.556025  2488.381885    0.010000  2021.208252  267.17375  199.999883      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:00]  --------------------------------------------------------------------------------
[07/26 14:57:00]  Iteration: 32 (4 solution, 27 counterexamples)
[07/26 14:57:02]  Generator returned sat in 1.369333 secs.
[07/26 14:57:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:57:02]  Improved gap from 231/204800 to 98.4375
[07/26 14:57:03]  Improved number of small numbers from 55 to 82 out of a max of 100
[07/26 14:57:03]  Verifer returned sat in 0.587379 secs.
[07/26 14:57:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1621.195801    1321.196045  1189.567871  1621.195801    0.097412  1321.196045      0.000  299.999756      299.999512
1    1621.195801    1321.196289  1189.567871  1621.195801    0.002686  1321.196289      0.000  299.999512      199.999512
2    1721.195801    1521.196045  1189.567871  1721.195801  399.999512  1521.196045      0.000  199.999756      199.999512
3    1721.195801    1621.196289  1189.567871  1721.195801   24.999688  1621.196289      0.000   99.999512       99.999512
4    1721.195801    1721.195010  1189.567871  1721.195801   49.999375  1721.195010      0.000    0.000791       -0.000488
5    1821.193760    1721.196885  1189.569775  1821.193760   99.998750  1721.196885      0.000   99.996875       -0.000625
6    1921.194385    1921.194385  1189.569775  1921.194385  199.997500  1921.194385      0.000    0.000000        0.000000
7    2321.189385    2021.194336  1189.569775  2321.189385  399.995000  2021.194336     99.995  200.000049      200.000000
8    2321.189385    2021.194580  1189.569775  2321.189385    0.010000  2021.194580     99.995  199.999805      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:03]  --------------------------------------------------------------------------------
[07/26 14:57:03]  Iteration: 33 (4 solution, 28 counterexamples)
[07/26 14:57:06]  Generator returned sat in 2.234208 secs.
[07/26 14:57:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:06]  Improved gap from 11/32768 to 100
[07/26 14:57:06]  Improved number of small numbers from 27 to 100 out of a max of 100
[07/26 14:57:06]  Verifer returned sat in 0.295411 secs.
[07/26 14:57:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1921.187012    1521.187744  889.576416  1921.187012    0.097168  1521.187744    0.000000  399.999268      299.999268
1    1921.187012    1721.187744  889.576416  1921.187012    0.002686  1721.187744    0.000000  199.999268      199.999268
2    1972.685791    1723.184814  889.576416  1972.685791  251.498047  1723.184814    0.000000  249.500977      151.498047
3    1972.685791    1821.187744  889.576416  1972.685791  249.500732  1821.187744    0.000000  151.498047       51.498047
4    2221.188477    1922.185791  889.576416  2221.188477  400.000732  1922.185791    0.000732  299.001953      200.000000
5    2221.188477    2121.187744  889.576416  2221.188477  100.499023  2121.187744    0.000732  100.000000      100.000000
6    2421.188965    2221.187256  889.576416  2421.188965  300.000488  2221.187256    0.001221  200.000488      200.000000
7    2421.188965    2321.187744  889.576416  2421.188965  199.999756  2321.187744    0.001221  100.000000      100.000000
8    2721.189697    2321.187744  889.576416  2721.189697  400.000732  2321.187744  100.001953  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:57:06]  --------------------------------------------------------------------------------
[07/26 14:57:06]  Iteration: 34 (4 solution, 29 counterexamples)
[07/26 14:57:09]  Generator returned sat in 2.605287 secs.
[07/26 14:57:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:10]  Improved number of small numbers from 61 to 67 out of a max of 99
[07/26 14:57:10]  Verifer returned sat in 0.615800 secs.
[07/26 14:57:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    1921.186768    1521.187744  889.576416  1921.186768    0.096924  1521.187744    0.000000  399.999023      299.999023
1    1921.186768    1721.187744  889.576416  1921.186768    0.002441  1721.187744    0.000000  199.999023      199.999023
2    1973.686279    1724.183716  889.576416  1973.686279  252.498535  1724.183716    0.000000  249.502563      152.498535
3    1973.686279    1821.187744  889.576416  1973.686279  249.501343  1821.187744    0.000000  152.498535       52.498535
4    2221.189087    1921.187744  889.576416  2221.189087  400.001343  1921.187744    0.001343  300.000000      200.000000
5    2221.189087    2121.187744  889.576416  2221.189087  200.000671  2121.187744    0.001343  100.000000      100.000000
6    2520.191772    2221.187256  889.576416  2520.191772  399.002686  2221.187256   99.004028  200.000488      200.000000
7    2520.191772    2321.187744  889.576416  2520.191772  199.501343  2321.187744   99.004028  100.000000      100.000000
8    2820.193115    2321.187744  889.576416  2820.193115  400.001343  2321.187744  199.005371  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:57:10]  --------------------------------------------------------------------------------
[07/26 14:57:10]  Iteration: 35 (4 solution, 30 counterexamples)
[07/26 14:57:14]  Generator returned sat in 2.986288 secs.
[07/26 14:57:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:14]  Improved gap from 389/16384 to 100
[07/26 14:57:14]  Improved number of small numbers from 47 to 100 out of a max of 100
[07/26 14:57:14]  Verifer returned sat in 0.324388 secs.
[07/26 14:57:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    1897.489990    1797.489990  889.576416  1897.489990    0.096924  1797.489990   0.000000  100.000000      100.000000
1    1897.489990    1797.490234  889.576416  1897.489990    0.023682  1797.490234   0.000000   99.999756        0.000000
2    2197.466309    1997.489990  889.576416  2197.466309  399.976074  1997.489990   0.000000  199.976318      199.976318
3    2197.466309    2097.489990  889.576416  2197.466309  149.761963  2097.489990   0.000000   99.976318       99.976318
4    2397.513916    2097.490234  889.576416  2397.513916  300.023926  2097.490234   0.023926  299.999756      200.000000
5    2397.513916    2297.013672  889.576416  2397.513916  150.000000  2297.013672   0.023926  100.476318      100.000000
6    2597.537598    2397.489990  889.576416  2597.537598  300.500000  2397.489990   0.047607  200.000000      200.000000
7    2597.537598    2497.489990  889.576416  2597.537598  150.000000  2497.489990   0.047607  100.000000      100.000000
8    2798.037598    2497.490234  889.576416  2798.037598  300.500000  2497.490234   0.547607  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:57:14]  --------------------------------------------------------------------------------
[07/26 14:57:14]  Iteration: 36 (4 solution, 31 counterexamples)
[07/26 14:57:19]  Generator returned sat in 4.215858 secs.
[07/26 14:57:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:20]  Improved gap from 0 to 12.5
[07/26 14:57:21]  Improved number of small numbers from 50 to 62 out of a max of 100
[07/26 14:57:21]  Verifer returned sat in 1.727127 secs.
[07/26 14:57:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    2914.724365    2914.724286   889.576416  2914.724365    0.096924  2914.724286   0.000000    0.000080      -99.999920
1    3314.747967    3114.724286   889.576416  3314.747967  400.023682  3114.724286   0.023682  200.000000      200.000000
2    3414.771649    3114.724286   889.576416  3414.771649  300.023682  3114.724286   0.047363  300.000000      200.000000
3    3514.747967    3314.212402   889.576416  3514.747967  399.976318  3314.212402   0.047363  200.488202      199.976318
4    3514.747967    3314.724365   889.576416  3514.747967  200.488159  3314.724365   0.047363  199.976239       99.976318
5    3514.747967    3489.788266   889.600098  3514.747967  100.744080  3489.788266   0.047363   24.912338        0.000000
6    3540.707669    3514.700684   963.640396  3540.707669   50.872040  3514.700684   0.047363   25.959622        0.000000
7    3540.707669    3540.660306  1051.140381  3540.707669   25.936020  3540.660306   0.047363    0.000000      -12.500015
8    3554.175679    3553.160400  1051.140625  3554.175679   13.468010  3553.160400   0.047363    0.967915      -99.031761
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:57:21]  --------------------------------------------------------------------------------
[07/26 14:57:21]  Iteration: 37 (4 solution, 32 counterexamples)
[07/26 14:57:23]  Generator returned sat in 1.437189 secs.
[07/26 14:57:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:24]  Improved gap from 818813/8192 to 98.4375
[07/26 14:57:25]  Improved number of small numbers from 36 to 46 out of a max of 100
[07/26 14:57:25]  Verifer returned sat in 1.705973 secs.
[07/26 14:57:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3406.091797    3206.139160  598.16156  3406.091797    0.096680  3206.139160    0.000000  199.952637       99.952655
1    3406.139160    3306.139142  598.16156  3406.139160  200.000000  3306.139142    0.000000  100.000018        0.000018
2    3706.186383    3506.139142  598.16156  3706.186383  400.047241  3506.139142    0.047241  200.000000      200.000000
3    4103.280866    3606.139142  598.16156  4103.280866  597.094482  3606.139142  297.141724  200.000000      200.000000
4    4203.328107    3706.139142  598.16156  4203.328107  300.047241  3706.139142  297.188965  200.000000      200.000000
5    4203.328107    3706.139142  598.16156  4203.328107  151.523621  3706.139142  297.188965  200.000000      100.000000
6    4203.328107    3813.687044  598.16156  4203.328107  176.261810  3813.687044  297.188965   92.452098        0.000000
7    4303.280866    3907.139142  598.20874  4303.280866  192.404856  3907.139142  297.188965   98.952759       -0.000061
8    4401.530535    4006.092041  598.20874  4401.530535  197.202428  4006.092041  297.188965   98.249529       -1.750391
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:25]  --------------------------------------------------------------------------------
[07/26 14:57:25]  Iteration: 38 (4 solution, 33 counterexamples)
[07/26 14:57:30]  Generator returned sat in 5.228754 secs.
[07/26 14:57:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:31]  Improved gap from 1/800 to 26.5625
[07/26 14:57:32]  Improved number of small numbers from 54 to 63 out of a max of 100
[07/26 14:57:32]  Verifer returned sat in 1.348024 secs.
[07/26 14:57:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3322.040039    3295.477773  608.822928  3322.040039    0.096680  3295.477773    0.00000   26.562266       26.562266
1    3322.040039    3295.477773  682.260428  3322.040039   26.562256  3295.477773    0.00000   26.562266       -0.000234
2    3348.602773    3322.040273  755.697928  3348.602773   53.125000  3322.040273    0.00000   26.562500        0.000000
3    3348.602773    3348.602773  829.135428  3348.602773    0.381563  3348.602773    0.00000    0.000000      -26.562500
4    3377.428398    3375.165273  902.572754  3377.428398   28.825625  3375.165273    0.00000    2.263125      -24.299549
5    3474.160273    3447.597773  930.140428  3474.160273   98.995000  3447.597773    0.00000   26.562500        0.000000
6    3709.866523    3474.160273  930.140428  3709.866523  262.268750  3474.160273    0.00000  235.706250      135.706250
7    4062.976523    3574.160400  930.140428  4062.976523  588.816250  3574.160400  188.81625  299.999873      200.000000
8    4062.976523    3675.160400  930.140428  4062.976523    0.010000  3675.160400  188.81625  198.999873      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:32]  --------------------------------------------------------------------------------
[07/26 14:57:32]  Iteration: 39 (4 solution, 34 counterexamples)
[07/26 14:57:33]  Generator returned sat in 0.407389 secs.
[07/26 14:57:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:57:34]  Improved gap from 4619373/179200 to 26.5625
[07/26 14:57:35]  Improved number of small numbers from 54 to 63 out of a max of 100
[07/26 14:57:35]  Verifer returned sat in 1.827118 secs.
[07/26 14:57:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3780.785156    3754.222773  150.077928  3780.785156    0.096436  3754.222773      0.000   26.562383       26.562383
1    3780.785156    3754.222773  223.515428  3780.785156    0.002441  3754.222773      0.000   26.562383       -0.000117
2    3807.347773    3780.785273  296.952928  3807.347773   53.125000  3780.785273      0.000   26.562500        0.000000
3    3807.347773    3807.347773  370.390428  3807.347773    0.002500  3807.347773      0.000    0.000000      -26.562500
4    3835.915273    3833.910273  443.827881  3835.915273   28.567500  3833.910273      0.000    2.005000      -24.557547
5    3932.889023    3907.345273  470.392928  3932.889023   98.978750  3907.345273      0.000   25.543750       -1.018750
6    4170.582773    3933.907773  470.392928  4170.582773  263.237500  3933.907773      0.000  236.675000      136.675000
7    4525.662773    4133.907715  470.392928  4525.662773  591.755000  4133.907715    191.755  200.000059      200.000000
8    4525.662773    4133.907959  470.392928  4525.662773    0.010000  4133.907959    191.755  199.999814      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:35]  --------------------------------------------------------------------------------
[07/26 14:57:35]  Iteration: 40 (4 solution, 35 counterexamples)
[07/26 14:57:37]  Generator returned sat in 1.520000 secs.
[07/26 14:57:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:57:37]  Improved gap from 385/16384 to 0
[07/26 14:57:38]  Improved number of small numbers from 47 to 100 out of a max of 100
[07/26 14:57:38]  Verifer returned sat in 0.305722 secs.
[07/26 14:57:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3633.910156    3633.863281  270.414062  3633.910156    0.096436  3633.863281        0.0    0.046875        0.023682
1    3633.910156    3633.886719  370.390381  3633.910156    0.023438  3633.886719        0.0    0.023438        0.000000
2    3733.910400    3633.910156  370.390381  3733.910400  100.023682  3633.910156        0.0  100.000244        0.000244
3    3833.933838    3832.910156  370.390381  3833.933838  200.023682  3832.910156        0.0    1.023682        0.023682
4    3833.933838    3833.910156  470.366699  3833.933838    1.000000  3833.910156        0.0    0.023682        0.000000
5    3834.910156    3834.886719  569.390381  3834.910156    1.000000  3834.886719        0.0    0.023438        0.000000
6    3835.886719    3835.863281  667.460938  3835.886719    1.000000  3835.863281        0.0    0.023438       -0.952881
7    3836.863281    3836.839844  766.460938  3836.863281    1.000000  3836.839844        0.0    0.023438       -0.976318
8    3837.839844    3837.839844  766.460938  3837.839844    1.000000  3837.839844        0.0    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:57:38]  --------------------------------------------------------------------------------
[07/26 14:57:38]  Iteration: 41 (4 solution, 36 counterexamples)
[07/26 14:57:40]  Generator returned sat in 1.648480 secs.
[07/26 14:57:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:57:40]  Improved gap from 1/800 to 1.5625
[07/26 14:57:41]  Improved number of small numbers from 80 to 90 out of a max of 100
[07/26 14:57:41]  Verifer returned sat in 0.495077 secs.
[07/26 14:57:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3332.271094    3332.268799  571.593506  3332.271094    0.096191  3332.268799    0.00000    0.002295        0.001318
1    3332.271094    3332.269775  670.030938  3332.271094    0.001465  3332.269775    0.00000    0.001318       -1.561250
2    3633.831055    3433.832344  670.030938  3633.831055  301.561279  3433.832344    0.00000  199.998711      199.998711
3    3732.833594    3533.832344  670.030938  3732.833594  299.001250  3533.832344    0.00000  199.001250      199.001250
4    3833.833594    3633.832275  670.030938  3833.833594  300.001250  3633.832275    0.00125  200.000068      200.000000
5    3833.833594    3733.832275  670.030938  3833.833594    0.010000  3733.832275    0.00125  100.000068      100.000000
6    3833.833594    3833.831094  670.030938  3833.833594    1.010000  3833.831094    0.00125    0.001250        0.000000
7    3835.842344    3835.839844  766.460938  3835.842344    2.010000  3835.839844    0.00125    0.001250       -1.561250
8    3838.851094    3837.402344  766.460938  3838.851094    3.010000  3837.402344    0.00125    1.447500      -98.552500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:41]  --------------------------------------------------------------------------------
[07/26 14:57:41]  Iteration: 42 (4 solution, 37 counterexamples)
[07/26 14:57:43]  Generator returned sat in 1.421468 secs.
[07/26 14:57:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:57:44]  Improved gap from 0 to 29.6875
[07/26 14:57:44]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 14:57:44]  Verifer returned sat in 0.953947 secs.
[07/26 14:57:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    3697.125732    3667.438477  236.424805  3697.125732    0.096191  3667.438477   0.000000   29.687256       29.687256
1    3697.125732    3667.438477  306.737305  3697.125732    0.046631  3667.438477   0.000000   29.687256       -0.000244
2    3738.782227    3697.125977  365.081055  3738.782227   71.343750  3697.125977   0.000000   41.656250        0.000000
3    3738.782227    3738.782227  422.924805  3738.782227    5.531006  3738.782227   0.000000    0.000000      -42.156250
4    3780.985107    3780.938477  493.237305  3780.985107   42.202881  3780.938477   0.000000    0.046631      -29.640869
5    3880.891357    3851.204102  522.971680  3880.891357   99.952881  3851.204102   0.000000   29.687256       -0.000244
6    4029.196045    3980.891602  522.971680  4029.196045  177.991943  3980.891602   0.000000   48.304443       48.304443
7    4280.938232    3980.891602  522.971680  4280.938232  300.046631  3980.891602   0.046631  300.000000      200.000000
8    4280.938232    4080.891602  522.971680  4280.938232    1.000000  4080.891602   0.046631  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:57:44]  --------------------------------------------------------------------------------
[07/26 14:57:44]  Iteration: 43 (4 solution, 38 counterexamples)
[07/26 14:57:50]  Generator returned sat in 5.163331 secs.
[07/26 14:57:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:50]  Improved gap from 383/32768 to 100
[07/26 14:57:50]  Improved number of small numbers from 32 to 100 out of a max of 100
[07/26 14:57:50]  Verifer returned sat in 0.330512 secs.
[07/26 14:57:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    3575.401123    3393.627930  422.284668  3575.401123    0.095947  3393.627930    0.000000  181.773193       99.999756
1    3575.401123    3475.401367  422.284668  3575.401123    0.046631  3475.401367    0.000000   99.999756       -0.000244
2    3775.447998    3580.401367  422.284668  3775.447998  300.046631  3580.401367    0.000000  195.046631      100.046631
3    3775.447998    3775.401367  422.284668  3775.447998  194.999756  3775.401367    0.000000    0.046631        0.046631
4    4157.674805    3775.401367  422.284668  4157.674805  382.273438  3775.401367   82.273438  300.000000      200.000000
5    4157.674805    3975.401367  422.284668  4157.674805  150.000000  3975.401367   82.273438  100.000000      100.000000
6    4453.174805    3975.401367  422.284668  4453.174805  395.500000  3975.401367  177.773438  300.000000      200.000000
7    4453.174805    4157.174805  422.284668  4453.174805  100.000000  4157.174805  177.773438  118.226562      100.000000
8    4717.221680    4175.401367  422.284668  4717.221680  382.273438  4175.401367  241.820312  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:57:50]  --------------------------------------------------------------------------------
[07/26 14:57:50]  Iteration: 44 (4 solution, 39 counterexamples)
[07/26 14:57:53]  Generator returned sat in 2.332827 secs.
[07/26 14:57:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:53]  Verifer returned unsat in 0.134815 secs.
[07/26 14:57:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:54]  --------------------------------------------------------------------------------
[07/26 14:57:54]  Iteration: 45 (5 solution, 39 counterexamples)
[07/26 14:57:56]  Generator returned sat in 1.638665 secs.
[07/26 14:57:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:56]  Verifer returned unsat in 0.076126 secs.
[07/26 14:57:56]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:56]  --------------------------------------------------------------------------------
[07/26 14:57:56]  Iteration: 46 (6 solution, 39 counterexamples)
[07/26 14:57:57]  Generator returned sat in 0.218776 secs.
[07/26 14:57:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:57]  Verifer returned unsat in 0.065020 secs.
[07/26 14:57:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:57:57]  --------------------------------------------------------------------------------
[07/26 14:57:57]  Iteration: 47 (7 solution, 39 counterexamples)
[07/26 14:57:58]  Generator returned sat in 0.328296 secs.
[07/26 14:57:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:58]  Verifer returned unsat in 0.061276 secs.
[07/26 14:57:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:57:58]  --------------------------------------------------------------------------------
[07/26 14:57:58]  Iteration: 48 (8 solution, 39 counterexamples)
[07/26 14:57:59]  Generator returned sat in 0.283195 secs.
[07/26 14:57:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:57:59]  Verifer returned unsat in 0.043381 secs.
[07/26 14:57:59]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:57:59]  --------------------------------------------------------------------------------
[07/26 14:57:59]  Iteration: 49 (9 solution, 39 counterexamples)
[07/26 14:57:59]  Generator returned sat in 0.257620 secs.
[07/26 14:58:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:58:00]  Verifer returned unsat in 0.051895 secs.
[07/26 14:58:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:58:00]  --------------------------------------------------------------------------------
[07/26 14:58:00]  Iteration: 50 (10 solution, 39 counterexamples)
[07/26 14:58:00]  Generator returned sat in 0.270963 secs.
[07/26 14:58:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:58:00]  Verifer returned unsat in 0.042644 secs.
[07/26 14:58:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:58:01]  --------------------------------------------------------------------------------
[07/26 14:58:01]  Iteration: 51 (11 solution, 39 counterexamples)
[07/26 14:58:01]  Generator returned sat in 0.261686 secs.
[07/26 14:58:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:01]  Verifer returned unsat in 0.050077 secs.
[07/26 14:58:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:58:01]  --------------------------------------------------------------------------------
[07/26 14:58:01]  Iteration: 52 (12 solution, 39 counterexamples)
[07/26 14:58:02]  Generator returned sat in 0.228944 secs.
[07/26 14:58:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:58:02]  Verifer returned unsat in 0.041939 secs.
[07/26 14:58:02]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:58:02]  --------------------------------------------------------------------------------
[07/26 14:58:02]  Iteration: 53 (13 solution, 39 counterexamples)
[07/26 14:58:04]  Generator returned sat in 0.769065 secs.
[07/26 14:58:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:58:04]  Improved gap from 1573247/16384 to 100
[07/26 14:58:05]  Improved number of small numbers from 35 to 47 out of a max of 100
[07/26 14:58:05]  Verifer returned sat in 1.245051 secs.
[07/26 14:58:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7173.376953    7173.376709  422.284668  7173.376953    0.095703  7173.376709   0.000000    0.000244        0.000211
1    7373.376709    7273.376742  422.284668  7373.376709  200.000000  7273.376742   0.000000   99.999967       99.999967
2    7373.376709    7273.376742  422.284668  7373.376709    0.046875  7273.376742   0.000000   99.999967       -0.000033
3    7572.923495    7473.376742  422.284668  7572.923495  299.546753  7473.376742   0.000000   99.546753       99.546753
4    7773.423495    7572.376742  422.284668  7773.423495  300.046753  7572.376742   0.046753  201.000000      200.000000
5    7873.946871    7673.376742  422.284668  7873.946871  301.523376  7673.376742   0.570129  200.000000      200.000000
6    8026.708560    7754.487348  422.284668  8026.708560  352.761688  7754.487348  53.331818  218.889394      200.000000
7    8126.755312    7873.376742  422.284668  8126.755312  318.936147  7873.376742  53.378571  200.000000      200.000000
8    8238.723386    7873.376953  422.284668  8238.723386  311.968074  7873.376953  65.346644  299.999789      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:58:05]  --------------------------------------------------------------------------------
[07/26 14:58:05]  Iteration: 54 (13 solution, 40 counterexamples)
[07/26 14:58:08]  Generator returned sat in 2.747682 secs.
[07/26 14:58:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:09]  Improved number of small numbers from 62 to 74 out of a max of 99
[07/26 14:58:09]  Verifer returned sat in 0.670197 secs.
[07/26 14:58:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7206.689697    7206.687060  422.284424  7206.689697    0.095459  7206.687060    0.00000    0.002638        0.002394
1    7206.689697    7206.689697  422.284668  7206.689697    0.001250  7206.689697    0.00000    0.000000      -99.997362
2    7306.688477    7306.687060  422.284668  7306.688477   99.998779  7306.687060    0.00000    0.001417      -99.998583
3    7426.693560    7426.692310  422.284668  7426.693560  120.006500  7426.692310    0.00000    0.001250      -79.993500
4    7826.707310    7506.687060  422.284668  7826.707310  400.015000  7506.687060   20.02025  300.000000      200.000000
5    7826.707310    7656.680185  422.284668  7826.707310    0.010000  7656.680185   20.02025  150.006875      100.000000
6    8026.708560    7806.687012  422.284668  8026.708560  350.008125  7806.687012   20.02150  200.000048      200.000000
7    8026.708560    7906.687060  422.284668  8026.708560    0.010000  7906.687060   20.02150  100.000000      100.000000
8    8326.723560    7906.687256  422.284668  8326.723560  400.015000  7906.687256  120.03650  299.999804      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:58:09]  --------------------------------------------------------------------------------
[07/26 14:58:09]  Iteration: 55 (13 solution, 41 counterexamples)
[07/26 14:58:18]  Generator returned sat in 8.278487 secs.
[07/26 14:58:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:58:18]  Improved gap from 381/16384 to 100
[07/26 14:58:19]  Improved number of small numbers from 48 to 100 out of a max of 100
[07/26 14:58:19]  Verifer returned sat in 0.340951 secs.
[07/26 14:58:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7127.693359    7027.693359  422.284668  7127.693359    0.095459  7027.693359   0.000000  100.000000       99.999756
1    7127.693359    7027.693604  422.284668  7127.693359    0.046631  7027.693604   0.000000   99.999756       -0.000244
2    7227.693359    7127.693604  422.284668  7227.693359  199.999756  7127.693604   0.000000   99.999756       -0.000244
3    7426.693604    7327.693604  422.284668  7426.693604  299.000000  7327.693604   0.000000   99.000000       99.000000
4    7627.693604    7426.739990  422.284668  7627.693604  300.000000  7426.739990   0.000000  200.953613      200.000000
5    7727.739990    7527.693604  422.284668  7727.739990  301.000000  7527.693604   0.046387  200.000000      200.000000
6    7878.739990    7627.693604  422.284668  7878.739990  351.000000  7627.693604  51.046387  200.000000      200.000000
7    8004.739990    7727.693604  422.284668  8004.739990  326.000000  7727.693604  77.046387  200.000000      200.000000
8    8118.716797    7727.693604  422.284668  8118.716797  313.976807  7727.693604  91.023193  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/26 14:58:19]  --------------------------------------------------------------------------------
[07/26 14:58:19]  Iteration: 56 (13 solution, 42 counterexamples)
[07/26 14:58:21]  Generator returned sat in 1.110843 secs.
[07/26 14:58:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:58:21]  Improved gap from 191/8192 to 4.6875
[07/26 14:58:21]  Improved number of small numbers from 59 to 100 out of a max of 100
[07/26 14:58:21]  Verifer returned sat in 0.264063 secs.
[07/26 14:58:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7127.693115    6827.716553  422.284668  7127.693115    0.095459  6827.716553   0.000000  299.976562      299.976562
1    7127.693115    6827.716797  422.284668  7127.693115    0.046387  6827.716797   0.000000  299.976318      199.976562
2    7226.763184    6927.716797  422.284668  7226.763184  399.046387  6927.716797   0.000000  299.046387      199.046631
3    7226.763184    7127.716553  422.284668  7226.763184  299.023193  7127.716553   0.000000   99.046631       99.046631
4    7427.739746    7227.716553  422.284668  7427.739746  300.023193  7227.716553   0.023193  200.000000      200.000000
5    7427.739746    7227.716797  422.284668  7427.739746    2.000000  7227.716797   0.023193  199.999756      100.000000
6    7427.739746    7423.739990  422.284668  7427.739746    3.000000  7423.739990   0.023193    3.976562        0.000000
7    7427.763184    7427.716553  517.284668  7427.763184    4.000000  7427.716553   0.023193    0.023438       -4.976562
8    7432.739746    7432.716553  517.284668  7432.739746    5.000000  7432.716553   0.023193    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:58:21]  --------------------------------------------------------------------------------
[07/26 14:58:21]  Iteration: 57 (13 solution, 43 counterexamples)
[07/26 14:58:27]  Generator returned sat in 5.577755 secs.
[07/26 14:58:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:28]  Improved number of small numbers from 57 to 99 out of a max of 99
[07/26 14:58:28]  Verifer returned sat in 0.246750 secs.
[07/26 14:58:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7127.705322    6827.472656  422.284424  7127.705322    0.095459  6827.472656   0.000000  300.232666      299.988525
1    7127.705322    6827.716797  422.284424  7127.705322    0.046387  6827.716797   0.000000  299.988525      199.988525
2    7227.705078    7027.716553  422.284424  7227.705078  399.988281  7027.716553   0.000000  199.988525      199.988281
3    7227.705078    7127.597656  422.284424  7227.705078    0.011719  7127.597656   0.000000  100.107422       99.988281
4    7427.728516    7227.716553  422.284424  7427.728516  300.130859  7227.716553   0.011719  200.000244      200.000000
5    7427.728516    7327.716553  422.284424  7427.728516    0.500000  7327.716553   0.011719  100.000244      100.000000
6    7627.978271    7427.716797  422.284424  7627.978271  300.250000  7427.716797   0.261475  200.000000      200.000000
7    7627.978271    7527.597412  422.284424  7627.978271    0.500000  7527.597412   0.261475  100.119385      100.000000
8    7827.989746    7527.716797  422.284424  7827.989746  300.130859  7527.716797   0.272949  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:58:28]  --------------------------------------------------------------------------------
[07/26 14:58:28]  Iteration: 58 (13 solution, 44 counterexamples)
[07/26 14:58:32]  Generator returned sat in 3.456219 secs.
[07/26 14:58:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:32]  Improved gap from 189/16384 to 100
[07/26 14:58:32]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 14:58:32]  Verifer returned sat in 0.292946 secs.
[07/26 14:58:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7126.385986    6726.432129  422.284424  7126.385986    0.095459  6726.432129   0.000000  399.953857      299.953857
1    7126.385986    6926.432129  422.284424  7126.385986  399.953857  6926.432129   0.000000  199.953857      199.953857
2    7126.385986    6926.432129  422.284424  7126.385986    0.046143  6926.432129   0.000000  199.953857       99.953857
3    7126.385986    7126.339844  422.284424  7126.385986  100.184570  7126.339844   0.000000    0.046143       -0.046143
4    7426.478271    7127.432129  422.284424  7426.478271  300.138428  7127.432129   0.046143  299.000000      200.000000
5    7426.478271    7326.432129  422.284424  7426.478271  101.500000  7326.432129   0.046143  100.000000      100.000000
6    7627.978271    7326.432129  422.284424  7627.978271  301.500000  7326.432129   1.546143  300.000000      200.000000
7    7627.978271    7526.432129  422.284424  7627.978271  101.046143  7526.432129   1.546143  100.000000      100.000000
8    7828.524414    7526.432129  422.284424  7828.524414  300.546143  7526.432129   2.092285  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:58:33]  --------------------------------------------------------------------------------
[07/26 14:58:33]  Iteration: 59 (13 solution, 45 counterexamples)
[07/26 14:58:37]  Generator returned sat in 3.835712 secs.
[07/26 14:58:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:38]  Improved gap from 1638023/16384 to 98.4375
[07/26 14:58:39]  Improved number of small numbers from 37 to 100 out of a max of 100
[07/26 14:58:39]  Verifer returned sat in 1.506235 secs.
[07/26 14:58:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7650.385498    7250.408936  422.284180  7650.385498    0.094971  7250.408936   0.000000  399.976562      299.976562
1    7650.385498    7450.408936  422.284180  7650.385498  399.953857  7450.408936   0.000000  199.976562      199.976562
2    7750.431885    7550.339600  422.284180  7750.431885  300.022949  7550.339600   0.022949  200.069336      200.000000
3    7750.431885    7650.408936  422.284180  7750.431885  200.045898  7650.408936   0.022949  100.000000      100.000000
4    7950.454834    7750.408936  422.284180  7950.454834  300.022949  7750.408936   0.045898  200.000000      200.000000
5    7950.454834    7766.401123  422.284180  7950.454834  152.000000  7766.401123   0.045898  184.007812      100.000000
6    7950.477783    7855.716553  422.284180  7950.477783  184.030762  7855.716553   0.045898   94.715332        0.022949
7    8050.431641    7951.948242  422.307373  8050.431641  194.669189  7951.948242   0.045898   98.437500        0.000000
8    8150.098389    8050.385742  422.307373  8150.098389  198.104248  8050.385742   0.045898   99.666748       -0.333252
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:58:39]  --------------------------------------------------------------------------------
[07/26 14:58:39]  Iteration: 60 (13 solution, 46 counterexamples)
[07/26 14:58:45]  Generator returned sat in 5.776432 secs.
[07/26 14:58:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:58:46]  Improved gap from 1/800 to 31.25
[07/26 14:58:47]  Improved number of small numbers from 67 to 73 out of a max of 100
[07/26 14:58:47]  Verifer returned sat in 1.377956 secs.
[07/26 14:58:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7650.385498    7619.135498  153.557617  7650.385498    0.094971  7619.135498      0.000   31.250000       31.250000
1    7650.385498    7619.135498  222.307617  7650.385498    0.005000  7619.135498      0.000   31.250000        0.000000
2    7690.765498    7650.385498  281.927617  7690.765498   71.630000  7650.385498      0.000   40.380000        0.000000
3    7690.765498    7690.765498  350.677490  7690.765498    3.640000  7690.765498      0.000    0.000000      -31.250127
4    7732.220498    7732.215498  371.732666  7732.220498   41.455000  7732.215498      0.000    0.005000      -68.739951
5    7832.210498    7800.960498  440.482617  7832.210498   99.995000  7800.960498      0.000   31.250000        0.000000
6    7978.242998    7932.210498  440.482617  7978.242998  177.282500  7932.210498      0.000   46.032500       46.032500
7    8232.215498    7932.210693  440.482617  8232.215498  300.005000  7932.210693      0.005  299.999805      200.000000
8    8232.215498    8032.210693  440.482617  8232.215498    0.010000  8032.210693      0.005  199.999805      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:58:47]  --------------------------------------------------------------------------------
[07/26 14:58:47]  Iteration: 61 (13 solution, 47 counterexamples)
[07/26 14:58:51]  Generator returned sat in 3.110907 secs.
[07/26 14:58:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:51]  Verifer returned unsat in 0.122089 secs.
[07/26 14:58:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:51]  --------------------------------------------------------------------------------
[07/26 14:58:51]  Iteration: 62 (14 solution, 47 counterexamples)
[07/26 14:58:52]  Generator returned sat in 0.665313 secs.
[07/26 14:58:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:58:53]  Improved number of small numbers from 56 to 99 out of a max of 99
[07/26 14:58:53]  Verifer returned sat in 0.299579 secs.
[07/26 14:58:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    7678.645752    7577.553955  95.13916  7678.645752    0.094727  7577.553955    0.000000  101.091797        1.092041
1    7678.645752    7678.645508  95.13916  7678.645752    0.045898  7678.645508    0.000000    0.000244      -98.907959
2    7782.622559    7782.576660  95.13916  7782.622559  103.977051  7782.576660    0.000000    0.045898      -94.931152
3    7947.599609    7947.553711  95.13916  7947.599609  165.022949  7947.553711    0.000000    0.045898      -29.954102
4    8277.599609    8077.553711  95.13916  8277.599609  330.045898  8077.553711    0.045898  200.000000      200.000000
5    8277.599609    8177.553711  95.13916  8277.599609  199.954102  8177.553711    0.045898  100.000000      100.000000
6    8577.507812    8276.599609  95.13916  8577.507812  399.908203  8276.599609   99.954102  200.954102      200.000000
7    8577.507812    8377.553711  95.13916  8577.507812  165.022949  8377.553711   99.954102  100.000000      100.000000
8    8807.553711    8377.553955  95.13916  8807.553711  330.045898  8377.553955  130.000000  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:58:53]  --------------------------------------------------------------------------------
[07/26 14:58:53]  Iteration: 63 (14 solution, 48 counterexamples)
[07/26 14:59:02]  Generator returned sat in 7.725764 secs.
[07/26 14:59:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:02]  Improved gap from 47/4096 to 0
[07/26 14:59:02]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 14:59:02]  Verifer returned sat in 0.190869 secs.
[07/26 14:59:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7678.645752    7478.645752  194.047119  7678.645752    0.094727  7478.645752        0.0  200.000000      100.000000
1    7678.645752    7678.622803  194.047119  7678.645752    0.045898  7678.622803        0.0    0.022949        0.000000
2    7778.645752    7778.622803  194.047119  7778.645752  100.022949  7778.622803        0.0    0.022949        0.000000
3    7878.645752    7877.168701  194.047119  7878.645752  100.022949  7877.168701        0.0    1.477051        0.000000
4    7878.668701    7878.645752  294.024170  7878.668701    1.500000  7878.645752        0.0    0.022949        0.000000
5    7880.145752    7880.122803  392.547119  7880.145752    1.500000  7880.122803        0.0    0.022949        0.000000
6    7881.622803    7880.145752  491.070068  7881.622803    1.500000  7880.145752        0.0    1.477051        0.000000
7    7881.645752    7881.622803  589.570068  7881.645752    1.500000  7881.622803        0.0    0.022949       -1.477051
8    7883.122803    7883.122803  589.570068  7883.122803    1.500000  7883.122803        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 14:59:02]  --------------------------------------------------------------------------------
[07/26 14:59:02]  Iteration: 64 (14 solution, 49 counterexamples)
[07/26 14:59:04]  Generator returned sat in 0.823869 secs.
[07/26 14:59:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 14:59:04]  Improved gap from 47/4096 to 98.4375
[07/26 14:59:04]  Improved number of small numbers from 59 to 96 out of a max of 100
[07/26 14:59:04]  Verifer returned sat in 0.602839 secs.
[07/26 14:59:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    7772.682617    7372.682617  390.984619  7772.682617    0.094482  7372.682617   0.000000  400.000000      300.000000
1    7772.728027    7472.682617  390.984619  7772.728027  400.045410  7472.682617   0.045410  300.000000      200.000000
2    7871.256836    7672.682617  390.984619  7871.256836  398.528809  7672.682617   0.045410  198.528809      198.528809
3    7871.256836    7674.245117  390.984619  7871.256836   23.863586  7674.245117   0.045410  196.966309       98.528809
4    7871.256836    7871.165771  390.984619  7871.256836   49.227173  7871.165771   0.045410    0.045654       -1.471191
5    7971.165527    7872.682617  392.547119  7971.165527   99.954346  7872.682617   0.045410   98.437500        0.000000
6    8074.136719    7971.120117  392.547119  8074.136719  201.408691  7971.120117   0.045410  102.971191        2.971191
7    8375.482910    8071.120117  392.547119  8375.482910  404.317383  8071.120117   4.362793  300.000000      200.000000
8    8375.482910    8171.120117  392.547119  8375.482910    1.500000  8171.120117   4.362793  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:05]  --------------------------------------------------------------------------------
[07/26 14:59:05]  Iteration: 65 (14 solution, 50 counterexamples)
[07/26 14:59:10]  Generator returned sat in 4.537900 secs.
[07/26 14:59:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 14:59:10]  Improved gap from 0 to 98.4375
[07/26 14:59:11]  Improved number of small numbers from 30 to 40 out of a max of 100
[07/26 14:59:11]  Verifer returned sat in 0.910101 secs.
[07/26 14:59:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6297.709473    5897.709661  390.984619  6297.709473    0.094482  5897.709661   0.000000  399.999811      299.999811
1    6297.755193    5997.709661  390.984619  6297.755193  400.045532  5997.709661   0.045532  300.000000      200.000000
2    6396.283758    6197.709473  390.984619  6396.283758  398.528564  6197.709473   0.045532  198.528753      198.528564
3    6396.283758    6297.709473  390.984619  6396.283758   23.935379  6297.709473   0.045532   98.528753       98.528564
4    6396.283758    6396.192693  390.984619  6396.283758   48.870758  6396.192693   0.045532    0.045532       -1.471436
5    6494.979742    6397.709661  392.547119  6494.979742   98.741516  6397.709661   0.045532   97.224548       -1.212952
6    6596.238226    6596.147161  392.547119  6596.238226  198.483032  6596.147161   0.045532    0.045532        0.045532
7    6994.158758    6696.146973  392.547119  6994.158758  397.966064  6696.146973  98.011597  200.000189      200.000000
8    6994.158758    6696.147217  392.547119  6994.158758    2.000000  6696.147217  98.011597  199.999944      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:11]  --------------------------------------------------------------------------------
[07/26 14:59:11]  Iteration: 66 (14 solution, 51 counterexamples)
[07/26 14:59:15]  Generator returned sat in 3.095739 secs.
[07/26 14:59:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:59:15]  Verifer returned unsat in 0.085496 secs.
[07/26 14:59:15]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 14:59:15]  --------------------------------------------------------------------------------
[07/26 14:59:15]  Iteration: 67 (15 solution, 51 counterexamples)
[07/26 14:59:24]  Generator returned sat in 8.680902 secs.
[07/26 14:59:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:25]  Improved gap from 24203/16384 to 1.5625
[07/26 14:59:25]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 14:59:25]  Verifer returned sat in 0.313403 secs.
[07/26 14:59:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5898.239502    5498.239502  390.984619  5898.239502    0.094238  5498.239502   0.000000  400.000000      300.000000
1    5898.255127    5598.239746  390.984619  5898.255127  400.015625  5598.239746   0.015625  299.999756      200.000000
2    5998.239502    5698.239746  390.984619  5998.239502  399.984131  5698.239746   0.015625  299.984131      199.984375
3    6097.770752    5798.239746  390.984619  6097.770752  399.515381  5798.239746   0.015625  299.515381      199.515625
4    6198.270752    5998.239502  390.984619  6198.270752  400.015381  5998.239502   0.031250  200.000000      200.000000
5    6198.270752    6098.239502  390.984619  6198.270752    0.500000  6098.239502   0.031250  100.000000      100.000000
6    6198.270752    6196.677002  390.984619  6198.270752    1.000000  6196.677002   0.031250    1.562500        0.000000
7    6198.270752    6198.239502  489.422119  6198.270752    1.500000  6198.239502   0.031250    0.000000       -1.562500
8    6200.270752    6199.802002  489.422119  6200.270752    2.000000  6199.802002   0.031250    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:25]  --------------------------------------------------------------------------------
[07/26 14:59:25]  Iteration: 68 (15 solution, 52 counterexamples)
[07/26 14:59:28]  Generator returned sat in 2.311799 secs.
[07/26 14:59:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:29]  Improved number of small numbers from 77 to 77 out of a max of 99
[07/26 14:59:29]  Verifer returned sat in 0.428787 secs.
[07/26 14:59:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5898.239502    5598.239502  390.984619  5898.239502    0.094238  5598.239502   0.000000  300.000000           300.0
1    5898.240752    5698.239502  390.984619  5898.240752  300.001250  5698.239502   0.001250  200.000000           200.0
2    5898.240752    5798.239502  390.984619  5898.240752  200.000000  5798.239502   0.001250  100.000000           100.0
3    5898.240752    5872.990127  390.984619  5898.240752  100.000000  5872.990127   0.001250   25.249375             0.0
4    6198.242002    5973.493877  390.984619  6198.242002  325.250625  5973.493877   0.002500  224.745625           200.0
5    6198.242002    6097.987627  390.984619  6198.242002    0.010000  6097.987627   0.002500  100.251875           100.0
6    6398.243252    6198.239502  390.984619  6398.243252  300.253125  6198.239502   0.003750  200.000000           200.0
7    6398.243252    6298.239502  390.984619  6398.243252    0.010000  6298.239502   0.003750  100.000000           100.0
8    6623.493877    6298.239502  390.984619  6623.493877  325.250625  6298.239502  25.254375  300.000000           200.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 14:59:29]  --------------------------------------------------------------------------------
[07/26 14:59:29]  Iteration: 69 (15 solution, 53 counterexamples)
[07/26 14:59:34]  Generator returned sat in 4.216562 secs.
[07/26 14:59:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:59:34]  Verifer returned unsat in 0.054441 secs.
[07/26 14:59:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:59:34]  --------------------------------------------------------------------------------
[07/26 14:59:34]  Iteration: 70 (16 solution, 53 counterexamples)
[07/26 14:59:36]  Generator returned sat in 1.273526 secs.
[07/26 14:59:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:59:36]  Improved gap from 0 to 100
[07/26 14:59:37]  Improved number of small numbers from 39 to 45 out of a max of 100
[07/26 14:59:37]  Verifer returned sat in 1.418338 secs.
[07/26 14:59:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5113.374268    5113.328813  390.984375  5113.374268    0.093750  5113.328813   0.000000    0.045455        0.000045
1    5113.374268    5113.374223  390.984375  5113.374268    0.022461  5113.374223   0.000000    0.000045      -99.999955
2    5313.396928    5313.374223  390.984375  5313.396928  200.022705  5313.374223   0.000000    0.022705        0.022705
3    5613.396928    5413.374223  390.984375  5613.396928  300.022705  5413.374223   0.022705  200.000000      200.000000
4    5714.430986    5512.715125  390.984375  5714.430986  301.034058  5512.715125   1.056763  200.659098      200.000000
5    5864.959367    5612.495425  390.984375  5864.959367  351.187480  5612.495425  51.585144  200.878798      200.000000
6    5990.234910    5712.422192  390.984375  5990.234910  326.154341  5712.422192  76.860687  200.952031      200.000000
7    6102.884034    5813.374223  390.984375  6102.884034  313.601155  5813.374223  89.509811  200.000000      200.000000
8    6211.014161    5813.374268  390.984375  6211.014161  308.130127  5813.374268  97.639938  299.999955      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 14:59:38]  --------------------------------------------------------------------------------
[07/26 14:59:38]  Iteration: 71 (16 solution, 54 counterexamples)
[07/26 14:59:43]  Generator returned sat in 4.999265 secs.
[07/26 14:59:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 14:59:44]  Improved gap from 93/16384 to 98.4375
[07/26 14:59:44]  Improved number of small numbers from 69 to 88 out of a max of 100
[07/26 14:59:44]  Verifer returned sat in 0.500744 secs.
[07/26 14:59:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5115.121338    5115.098389  389.214355  5115.121338    0.093506  5115.098389   0.000000    0.022949      -99.977051
1    5515.121094    5315.098389  389.214355  5515.121094  400.022705  5315.098389   0.022705  200.000000      200.000000
2    5613.396729    5415.098389  389.214355  5613.396729  298.275635  5415.098389   0.022705  198.275635      198.275635
3    5613.396729    5515.098389  389.214355  5613.396729   23.028763  5515.098389   0.022705   98.275635       98.275635
4    5613.396729    5613.351318  389.214355  5613.396729   48.057526  5613.351318   0.022705    0.022705       -1.724365
5    5711.489075    5615.098511  389.421875  5711.489075   98.115051  5615.098511   0.022705   96.367859       -3.424500
6    5813.351318    5714.890869  390.984131  5813.351318  198.230103  5714.890869   0.022705   98.437744        0.000000
7    6113.373779    5813.328613  390.984131  6113.373779  398.460205  5813.328613   0.045166  300.000000      200.000000
8    6113.373779    5913.328613  390.984131  6113.373779    1.000000  5913.328613   0.045166  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:44]  --------------------------------------------------------------------------------
[07/26 14:59:44]  Iteration: 72 (16 solution, 55 counterexamples)
[07/26 14:59:50]  Generator returned sat in 4.858476 secs.
[07/26 14:59:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:50]  Improved gap from 815475/16384 to 98.4375
[07/26 14:59:51]  Improved number of small numbers from 23 to 37 out of a max of 100
[07/26 14:59:51]  Verifer returned sat in 0.859520 secs.
[07/26 14:59:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5433.049805    5433.027344  71.285871  5433.049805    0.093506  5433.027344   0.000000    0.022461      -99.977313
1    5633.027100    5533.027117  71.285871  5633.027100  199.999756  5533.027117   0.000000   99.999982       -0.000018
2    5933.049761    5733.027100  71.285871  5933.049761  400.022644  5733.027100   0.022644  200.000018      200.000000
3    5933.049761    5833.027100  71.285871  5933.049761   20.374056  5833.027100   0.022644  100.000018      100.000000
4    5933.049761    5933.004473  71.285871  5933.049761   41.248113  5933.004473   0.022644    0.022644        0.000000
5    6016.023343    5933.027117  71.331159  6016.023343   82.996226  5933.027117   0.022644   82.973582      -16.981130
6    6099.542213    6099.519569  71.331159  6099.542213  166.492452  6099.519569   0.022644    0.000000      -33.462260
7    6433.027117    6232.981689  71.331159  6433.027117  333.484904  6232.981689   0.045288  200.000140      200.000000
8    6433.027117    6232.981934  71.331159  6433.027117    2.000000  6232.981934   0.045288  199.999896      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 14:59:51]  --------------------------------------------------------------------------------
[07/26 14:59:51]  Iteration: 73 (16 solution, 56 counterexamples)
[07/26 14:59:55]  Generator returned sat in 2.861986 secs.
[07/26 14:59:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:55]  Verifer returned unsat in 0.106343 secs.
[07/26 14:59:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 14:59:55]  --------------------------------------------------------------------------------
[07/26 14:59:55]  Iteration: 74 (17 solution, 56 counterexamples)
[07/26 15:00:00]  Generator returned sat in 4.304826 secs.
[07/26 15:00:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:00]  Improved gap from 0 to 1.5625
[07/26 15:00:00]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 15:00:00]  Verifer returned sat in 0.335445 secs.
[07/26 15:00:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5499.497070    5099.541992  404.770996  5499.497070    0.093506  5099.541992   0.000000  399.955078      299.955078
1    5499.497070    5299.541992  404.770996  5499.497070  399.954834  5299.541992   0.000000  199.955078      199.955078
2    5599.587158    5299.541992  404.770996  5599.587158  300.045166  5299.541992   0.045166  300.000000      200.000000
3    5599.587158    5499.541992  404.770996  5599.587158  300.000000  5499.541992   0.045166  100.000000      100.000000
4    5599.587158    5597.979736  404.770996  5599.587158    2.000000  5597.979736   0.045166    1.562256        0.000000
5    5600.024902    5599.541992  503.208496  5600.024902    2.000000  5599.541992   0.045166    0.437744       -1.124756
6    5601.587158    5601.104492  601.645752  5601.587158    2.000000  5601.104492   0.045166    0.437500       -1.125244
7    5603.149658    5602.667236  700.083252  5603.149658    2.000000  5602.667236   0.045166    0.437256       -1.125244
8    5604.712402    5604.229736  700.083252  5604.712402    2.000000  5604.229736   0.045166    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:00:01]  --------------------------------------------------------------------------------
[07/26 15:00:01]  Iteration: 75 (17 solution, 57 counterexamples)
[07/26 15:00:05]  Generator returned sat in 3.555269 secs.
[07/26 15:00:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:00:06]  Improved gap from 65/4 to 15.625
[07/26 15:00:06]  Improved number of small numbers from 51 to 100 out of a max of 100
[07/26 15:00:06]  Verifer returned sat in 0.686359 secs.
[07/26 15:00:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5499.496826    5099.542236  404.770752  5499.496826    0.093262  5099.542236   0.000000  399.954590      299.954834
1    5499.496826    5199.541992  404.770752  5499.496826    0.044922  5199.541992   0.000000  299.954834      199.954834
2    5599.496826    5399.541992  404.770752  5599.496826  399.954834  5399.541992   0.000000  199.954834      199.954834
3    5599.496826    5499.541992  404.770752  5599.496826  198.696777  5499.541992   0.000000   99.954834       99.954834
4    5799.587158    5599.541992  404.770752  5799.587158  300.045166  5599.541992   0.045166  200.000000      200.000000
5    5799.587158    5699.541992  404.770752  5799.587158    2.000000  5699.541992   0.045166  100.000000      100.000000
6    5799.587158    5699.542236  404.770752  5799.587158    5.000000  5699.542236   0.045166   99.999756        0.000000
7    5799.587158    5799.541992  489.145752  5799.587158    9.500000  5799.541992   0.045166    0.000000      -15.625000
8    5815.837158    5815.791992  489.145752  5815.837158   16.250000  5815.791992   0.045166    0.000000      -99.375000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:06]  --------------------------------------------------------------------------------
[07/26 15:00:06]  Iteration: 76 (17 solution, 58 counterexamples)
[07/26 15:00:13]  Generator returned sat in 5.654585 secs.
[07/26 15:00:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:00:13]  Improved gap from 0 to 0
[07/26 15:00:14]  Improved number of small numbers from 55 to 73 out of a max of 100
[07/26 15:00:14]  Verifer returned sat in 0.989207 secs.
[07/26 15:00:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5207.177246    4907.177490  597.135258  5207.177246    0.093262  4907.177490    0.00000  299.999756      199.999760
1    5207.177246    5007.177490  597.135258  5207.177246    0.044922  5007.177490    0.00000  199.999756       99.999760
2    5207.177490    5207.177486  597.135258  5207.177490  200.000000  5207.177486    0.00000    0.000004        0.000004
3    5407.178319    5307.177486  597.135258  5407.178319  200.000833  5307.177486    0.00000  100.000833      100.000833
4    5607.178736    5407.177246  597.135258  5607.178736  300.001250  5407.177246    0.00125  200.000240      200.000000
5    5607.178736    5507.177246  597.135258  5607.178736    0.010000  5507.177246    0.00125  100.000240      100.000000
6    5607.178736    5607.176236  597.135258  5607.178736    0.015000  5607.176236    0.00125    0.001250        0.000000
7    5607.199986    5607.197486  697.113770  5607.199986    0.022500  5607.197486    0.00125    0.001250       -0.000239
8    5607.232486    5607.198975  697.113770  5607.232486    0.033750  5607.198975    0.00125    0.032261      -99.967739
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:14]  --------------------------------------------------------------------------------
[07/26 15:00:14]  Iteration: 77 (17 solution, 59 counterexamples)
[07/26 15:00:25]  Generator returned sat in 10.430975 secs.
[07/26 15:00:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:00:25]  Verifer returned unsat in 0.062684 secs.
[07/26 15:00:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:00:25]  --------------------------------------------------------------------------------
[07/26 15:00:25]  Iteration: 78 (18 solution, 59 counterexamples)
[07/26 15:00:30]  Generator returned sat in 3.459084 secs.
[07/26 15:00:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:30]  Improved gap from 100329/1024 to 98.4375
[07/26 15:00:30]  Improved number of small numbers from 16 to 100 out of a max of 100
[07/26 15:00:30]  Verifer returned sat in 0.715737 secs.
[07/26 15:00:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5607.544434    5607.522217 -103.209717  5607.544434    0.093018  5607.522217   0.000000    0.022217      -99.977783
1    6007.544678    5707.522217 -103.209717  6007.544678  400.022461  5707.522217   0.022461  300.000000      200.000000
2    6107.522217    5907.522217 -103.209717  6107.522217  399.977539  5907.522217   0.022461  199.977539      199.977539
3    6107.522217    6007.522217 -103.209717  6107.522217  199.044922  6007.522217   0.022461   99.977539       99.977539
4    6307.567139    6107.521973 -103.209717  6307.567139  300.022461  6107.521973   0.044922  200.000244      200.000000
5    6307.567139    6107.522217 -103.209717  6307.567139  152.011230  6107.522217   0.044922  200.000000      100.000000
6    6307.567139    6208.521973 -103.209717  6307.567139  176.505615  6208.521973   0.044922   99.000244        0.000000
7    6397.819580    6309.062256 -103.187256  6397.819580  189.252686  6309.062256   0.044922   88.712402       -9.725098
8    6505.003662    6407.499756 -103.187256  6505.003662  195.896484  6407.499756   0.044922   97.458984       -2.541016
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:31]  --------------------------------------------------------------------------------
[07/26 15:00:31]  Iteration: 79 (18 solution, 60 counterexamples)
[07/26 15:00:34]  Generator returned sat in 2.405411 secs.
[07/26 15:00:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:35]  Improved gap from 367/16384 to 29.6875
[07/26 15:00:35]  Improved number of small numbers from 36 to 100 out of a max of 100
[07/26 15:00:35]  Verifer returned sat in 1.045376 secs.
[07/26 15:00:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5990.595947    5960.908447 -356.595947  5990.595947    0.093018  5960.908447   0.000000   29.687500       29.687500
1    5990.595947    5960.908447 -286.283447  5990.595947    0.022217  5960.908447   0.000000   29.687500        0.000000
2    6039.872803    5990.595947 -235.560303  6039.872803   78.964355  5990.595947   0.000000   49.276855        0.000000
3    6039.872803    6039.872803 -165.247803  6039.872803    0.022217  6039.872803   0.000000    0.000000      -29.687500
4    6079.877197    6079.854736 -105.229980  6079.877197   40.004395  6079.854736   0.000000    0.022461      -29.665283
5    6179.832275    6150.144775  -75.520020  6179.832275   99.977539  6150.144775   0.000000   29.687500       -0.000244
6    6330.396729    6279.359619  -75.520020  6330.396729  180.251953  6279.359619   0.000000   51.037109       50.564209
7    6579.854980    6279.832520  -75.520020  6579.854980  300.495361  6279.832520   0.022461  300.000000      200.000000
8    6579.854980    6379.832520  -75.520020  6579.854980    2.000000  6379.832520   0.022461  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:35]  --------------------------------------------------------------------------------
[07/26 15:00:35]  Iteration: 80 (18 solution, 61 counterexamples)
[07/26 15:00:38]  Generator returned sat in 1.566532 secs.
[07/26 15:00:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:38]  Verifer returned unsat in 0.144756 secs.
[07/26 15:00:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:38]  --------------------------------------------------------------------------------
[07/26 15:00:38]  Iteration: 81 (19 solution, 61 counterexamples)
[07/26 15:00:40]  Generator returned sat in 1.330075 secs.
[07/26 15:00:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:40]  Verifer returned unsat in 0.129480 secs.
[07/26 15:00:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:40]  --------------------------------------------------------------------------------
[07/26 15:00:40]  Iteration: 82 (20 solution, 61 counterexamples)
[07/26 15:00:42]  Generator returned sat in 0.591098 secs.
[07/26 15:00:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:42]  Verifer returned unsat in 0.100757 secs.
[07/26 15:00:42]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:42]  --------------------------------------------------------------------------------
[07/26 15:00:42]  Iteration: 83 (21 solution, 61 counterexamples)
[07/26 15:00:43]  Generator returned sat in 0.683638 secs.
[07/26 15:00:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:44]  Verifer returned unsat in 0.063639 secs.
[07/26 15:00:44]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:44]  --------------------------------------------------------------------------------
[07/26 15:00:44]  Iteration: 84 (22 solution, 61 counterexamples)
[07/26 15:00:46]  Generator returned sat in 1.762029 secs.
[07/26 15:00:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:00:47]  Improved gap from 183/8192 to 98.4375
[07/26 15:00:47]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 15:00:47]  Verifer returned sat in 0.660274 secs.
[07/26 15:00:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    6141.624756    5841.669434 -237.357178  6141.624756    0.093018  5841.669434   0.000000  299.955322      299.955078
1    6141.624756    5941.669678 -237.357178  6141.624756    0.044678  5941.669678   0.000000  199.955078      199.955078
2    6241.625000    6012.527100 -237.357178  6241.625000  299.955322  6012.527100   0.000000  229.097900      199.955322
3    6341.669434    6141.669678 -237.357178  6341.669434  329.142334  6141.669678   0.000000  199.999756      199.999756
4    6456.740967    6240.669678 -237.357178  6456.740967  315.071289  6240.669678  15.071289  201.000000      200.000000
5    6456.740967    6241.669678 -237.357178  6456.740967  151.500000  6241.669678  15.071289  200.000000      100.000000
6    6456.740967    6341.669678 -237.357178  6456.740967  190.821289  6341.669678  15.071289  100.000000        0.000000
7    6552.651611    6441.669678 -236.312500  6552.651611  195.910645  6441.669678  15.071289   95.910645       -3.044678
8    6655.696289    6540.625000 -236.312500  6655.696289  198.955322  6540.625000  15.071289  100.000000        0.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:47]  --------------------------------------------------------------------------------
[07/26 15:00:47]  Iteration: 85 (22 solution, 62 counterexamples)
[07/26 15:00:56]  Generator returned sat in 7.544825 secs.
[07/26 15:00:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:00:57]  Improved gap from 365/16384 to 31.25
[07/26 15:00:57]  Improved number of small numbers from 57 to 100 out of a max of 100
[07/26 15:00:57]  Verifer returned sat in 1.246119 secs.
[07/26 15:00:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5943.179443    5911.929443 -306.107178  5943.179443    0.093018  5911.929443     0.0000   31.250000       31.249756
1    5943.179443    5911.929688 -237.357178  5943.179443    0.027344  5911.929688     0.0000   31.249756       -0.000244
2    5988.135986    5943.179688 -182.313477  5988.135986   76.206299  5943.179688     0.0000   44.956299        0.000000
3    5988.135986    5988.135986 -113.563477  5988.135986    0.652344  5988.135986     0.0000    0.000000      -31.250000
4    6028.391602    6028.364258  -53.791992  6028.391602   40.255615  6028.364258     0.0000    0.027344      -31.222900
5    6128.337158    6097.087402  -22.514893  6128.337158   99.972900  6097.087402     0.0000   31.249756       -0.000244
6    6275.514160    6228.337158  -22.514893  6275.514160  178.426758  6228.337158     0.0000   47.177002       47.176758
7    6528.364502    6228.337402  -22.514893  6528.364502  300.027344  6228.337402     0.0271  300.000000      200.000000
8    6528.364502    6328.337402  -22.514893  6528.364502    0.500000  6328.337402     0.0271  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:00:57]  --------------------------------------------------------------------------------
[07/26 15:00:57]  Iteration: 86 (22 solution, 63 counterexamples)
[07/26 15:01:03]  Generator returned sat in 4.504150 secs.
[07/26 15:01:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:03]  Improved gap from 365/32768 to 100
[07/26 15:01:04]  Improved number of small numbers from 39 to 47 out of a max of 100
[07/26 15:01:04]  Verifer returned sat in 0.899995 secs.
[07/26 15:01:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    5778.270508    5678.181213 -72.447815  5778.270508    0.092773  5678.181213    0.000000  100.089294      100.000183
1    5778.270508    5678.270325 -72.447815  5778.270508    0.044678  5678.270325    0.000000  100.000183        0.000183
2    5778.314880    5778.270325 -72.447815  5778.314880  100.044556  5778.270325    0.000000    0.044556      -99.955444
3    5978.314880    5978.270325 -72.447815  5978.314880  200.044556  5978.270325    0.000000    0.044556        0.044556
4    6328.359436    5978.270325 -72.447815  6328.359436  350.089111  5978.270325   50.089111  300.000000      200.000000
5    6328.359436    6144.633362 -72.447815  6328.359436  150.500000  6144.633362   50.089111  133.636963      100.000000
6    6528.403992    6277.448547 -72.447815  6528.403992  333.681519  6277.448547   50.133667  200.821777      200.000000
7    6528.403992    6378.270325 -72.447815  6528.403992  150.089111  6378.270325   50.133667  100.000000      100.000000
8    6778.493103    6378.270508 -72.447815  6778.493103  350.089111  6378.270508  100.222778  299.999817      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:01:04]  --------------------------------------------------------------------------------
[07/26 15:01:04]  Iteration: 87 (22 solution, 64 counterexamples)
[07/26 15:01:08]  Generator returned sat in 3.232857 secs.
[07/26 15:01:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:08]  Verifer returned unsat in 0.120166 secs.
[07/26 15:01:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:08]  --------------------------------------------------------------------------------
[07/26 15:01:08]  Iteration: 88 (23 solution, 64 counterexamples)
[07/26 15:01:17]  Generator returned sat in 7.563978 secs.
[07/26 15:01:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:17]  Improved gap from 0 to 100
[07/26 15:01:18]  Improved number of small numbers from 55 to 69 out of a max of 100
[07/26 15:01:18]  Verifer returned sat in 0.756243 secs.
[07/26 15:01:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5678.270508    5678.268658 -72.447815  5678.270508    0.092773  5678.268658   0.000000    0.001850        0.000183
1    5678.270508    5678.270508 -72.447815  5678.270508    0.000977  5678.270508   0.000000    0.000000      -99.999817
2    6078.269531    5778.270325 -72.447815  6078.269531  399.999023  5778.270325   0.000000  299.999207      199.999207
3    6078.269531    5978.270325 -72.447815  6078.269531    0.000833  5978.270325   0.000000   99.999207       99.999207
4    6278.272825    6078.270325 -72.447815  6278.272825  300.002500  6078.270325   0.002500  200.000000      200.000000
5    6278.272825    6128.265741 -72.447815  6278.272825    0.010000  6128.265741   0.002500  150.004583      100.000000
6    6478.273658    6278.270264 -72.447815  6478.273658  350.005417  6278.270264   0.003333  200.000061      200.000000
7    6478.273658    6378.270325 -72.447815  6478.273658    0.010000  6378.270325   0.003333  100.000000      100.000000
8    6678.283658    6378.270508 -72.447815  6678.283658  300.010000  6378.270508   0.013333  299.999817      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:01:18]  --------------------------------------------------------------------------------
[07/26 15:01:18]  Iteration: 89 (23 solution, 65 counterexamples)
[07/26 15:01:21]  Generator returned sat in 2.578444 secs.
[07/26 15:01:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:22]  Improved number of small numbers from 54 to 66 out of a max of 99
[07/26 15:01:22]  Verifer returned sat in 0.666788 secs.
[07/26 15:01:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5878.280518    5578.280325 -72.457815  5878.280518    0.092773  5578.280325    0.00000  300.000193      200.000193
1    5878.280518    5678.280518 -72.457815  5878.280518    0.002500  5678.280518    0.00000  200.000000      100.000193
2    5878.280518    5878.280325 -72.457815  5878.280518    0.002686  5878.280325    0.00000    0.000193        0.000193
3    5978.280325    5903.281575 -72.457815  5978.280325  100.000000  5903.281575    0.00000   74.998750        0.000000
4    6278.282825    6003.284075 -72.457815  6278.282825  375.001250  6003.284075    0.00250  274.996250      200.000000
5    6278.282825    6178.280325 -72.457815  6278.282825    0.010000  6178.280325    0.00250  100.000000      100.000000
6    6478.287825    6278.280273 -72.457815  6478.287825  300.005000  6278.280273    0.00750  200.000051      200.000000
7    6478.287825    6378.280325 -72.457815  6478.287825    0.010000  6378.280325    0.00750  100.000000      100.000000
8    6753.289075    6378.280518 -72.457815  6753.289075  375.001250  6378.280518   75.00875  299.999807      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:01:22]  --------------------------------------------------------------------------------
[07/26 15:01:22]  Iteration: 90 (23 solution, 66 counterexamples)
[07/26 15:01:27]  Generator returned sat in 3.776155 secs.
[07/26 15:01:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:27]  Verifer returned unsat in 0.072977 secs.
[07/26 15:01:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:27]  --------------------------------------------------------------------------------
[07/26 15:01:27]  Iteration: 91 (24 solution, 66 counterexamples)
[07/26 15:01:30]  Generator returned sat in 2.307004 secs.
[07/26 15:01:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:01:31]  Improved gap from 0 to 100
[07/26 15:01:31]  Improved number of small numbers from 22 to 100 out of a max of 100
[07/26 15:01:31]  Verifer returned sat in 0.414056 secs.
[07/26 15:01:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5521.125977    5321.136963 -72.457764  5521.125977    0.092773  5321.136963   0.000000  199.989014       99.989014
1    5521.136963    5421.136963 -72.457764  5521.136963  200.000000  5421.136963   0.000000  100.000000        0.000000
2    5821.147949    5521.136963 -72.457764  5821.147949  400.010986  5521.136963   0.010986  300.000000      200.000000
3    5821.147949    5721.136963 -72.457764  5821.147949  100.011230  5721.136963   0.010986  100.000000      100.000000
4    6021.159180    5821.114502 -72.457764  6021.159180  300.011230  5821.114502   0.022217  200.022461      200.000000
5    6021.159180    5854.485107 -72.457764  6021.159180  199.988770  5854.485107   0.022217  166.651855      100.000000
6    6221.170166    6021.136963 -72.457764  6221.170166  366.662842  6021.136963   0.033203  200.000000      200.000000
7    6221.170166    6121.136963 -72.457764  6221.170166  150.000000  6121.136963   0.033203  100.000000      100.000000
8    6421.181396    6121.136963 -72.457764  6421.181396  300.011230  6121.136963   0.044434  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 15:01:31]  --------------------------------------------------------------------------------
[07/26 15:01:31]  Iteration: 92 (24 solution, 67 counterexamples)
[07/26 15:01:43]  Generator returned sat in 11.263127 secs.
[07/26 15:01:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:01:44]  Improved gap from 403/400 to 0
[07/26 15:01:44]  Improved number of small numbers from 63 to 80 out of a max of 100
[07/26 15:01:44]  Verifer returned sat in 0.655037 secs.
[07/26 15:01:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5521.125732    5421.135742 -172.456543  5521.125732    0.092529  5421.135742    0.00000   99.989990       -0.010010
1    5521.136963    5521.135742 -172.456514  5521.136963  100.001221  5521.135742    0.00000    0.001221      -99.998750
2    5921.136963    5621.135742 -172.456514  5921.136963  400.001221  5621.135742    0.00125  299.999971      200.000000
3    5921.136963    5820.638428 -172.456514  5921.136963  299.998535  5820.638428    0.00125  100.497285      100.000000
4    6121.138213    5921.135498 -172.456514  6121.138213  300.498535  5921.135498    0.00250  200.000215      200.000000
5    6121.138213    5921.135742 -172.456514  6121.138213    0.010000  5921.135742    0.00250  199.999971      100.000000
6    6121.138213    6121.134463 -172.456514  6121.138213    0.510000  6121.134463    0.00250    0.001250        0.000000
7    6122.146963    6122.143213  -73.465332  6122.146963    1.010000  6122.143213    0.00250    0.001250       -0.000068
8    6123.655713    6122.144531  -73.465088  6123.655713    1.510000  6122.144531    0.00250    1.508682      -98.491074
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 15:01:44]  --------------------------------------------------------------------------------
[07/26 15:01:44]  Iteration: 93 (24 solution, 68 counterexamples)
[07/26 15:01:47]  Generator returned sat in 1.674690 secs.
[07/26 15:01:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:01:47]  Verifer returned unsat in 0.057950 secs.
[07/26 15:01:47]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:01:47]  --------------------------------------------------------------------------------
[07/26 15:01:47]  Iteration: 94 (25 solution, 68 counterexamples)
[07/26 15:01:52]  Generator returned sat in 4.179041 secs.
[07/26 15:01:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:53]  Verifer returned unsat in 0.146188 secs.
[07/26 15:01:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:53]  --------------------------------------------------------------------------------
[07/26 15:01:53]  Iteration: 95 (26 solution, 68 counterexamples)
[07/26 15:01:56]  Generator returned sat in 2.216219 secs.
[07/26 15:01:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:01:57]  Improved gap from 3219275/262144 to 14.0625
[07/26 15:01:57]  Improved number of small numbers from 35 to 47 out of a max of 100
[07/26 15:01:57]  Verifer returned sat in 1.651694 secs.
[07/26 15:01:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4659.417969    4459.418201 -172.456514  4659.417969    0.092529  4459.418201   0.000000  199.999767       99.999767
1    4659.417969    4645.355701 -172.456514  4659.417969    0.022217  4645.355701   0.000000   14.062267       -0.000233
2    4959.440296    4659.418201 -172.456514  4959.440296  314.084595  4659.418201   0.022095  300.000000      200.000000
3    5059.462391    4859.403472 -172.456514  5059.462391  400.022095  4859.403472   0.044189  200.014730      200.000000
4    5059.462391    4957.899658 -172.456514  5059.462391  199.992635  4957.899658   0.044189  101.518543      100.000000
5    5059.462391    5045.355701 -172.456514  5059.462391  101.496318  5045.355701   0.044189   14.062500        0.000000
6    5097.648050    5059.418213 -110.642172  5097.648050   52.248159  5059.418213   0.044189   38.185647        0.000000
7    5097.648050    5097.603860  -25.954102  5097.648050   27.624079  5097.603860   0.044189    0.000000      -15.311929
8    5112.960089    5112.915900  -25.954102  5112.960089   15.312040  5112.915900   0.044189    0.000000      -99.999889
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:01:58]  --------------------------------------------------------------------------------
[07/26 15:01:58]  Iteration: 96 (26 solution, 69 counterexamples)
[07/26 15:02:04]  Generator returned sat in 5.416396 secs.
[07/26 15:02:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:02:05]  Improved gap from 361/16384 to 14.0625
[07/26 15:02:05]  Improved number of small numbers from 38 to 65 out of a max of 100
[07/26 15:02:05]  Verifer returned sat in 1.233578 secs.
[07/26 15:02:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4469.838135    4369.794189 -82.832275  4469.838135    0.092529  4369.794189        0.0  100.043945        0.044172
1    4469.838135    4469.794189 -82.832275  4469.838135    0.044189  4469.794189        0.0    0.043945      -99.955828
2    4869.750244    4569.794114 -82.832275  4869.750244  399.956055  4569.794114        0.0  299.956130      199.956281
3    4969.750047    4768.228027 -82.832275  4969.750047  399.955933  4768.228027        0.0  201.522020      199.956084
4    4969.750047    4867.555131 -82.832275  4969.750047  201.477966  4867.555131        0.0  102.194916       99.956084
5    4969.794114    4945.028436 -82.832275  4969.794114  102.238983  4945.028436        0.0   24.765678        0.000151
6    4997.647928    4969.794189 -10.686240  4997.647928   52.619492  4969.794189        0.0   27.853738        0.000000
7    4997.647928    4997.647928  75.251260  4997.647928   27.809746  4997.647928        0.0    0.000000      -14.062500
8    5013.052801    5011.710449  75.251465  5013.052801   15.404873  5011.710449        0.0    1.342351      -98.657422
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:02:06]  --------------------------------------------------------------------------------
[07/26 15:02:06]  Iteration: 97 (26 solution, 70 counterexamples)
[07/26 15:02:21]  Generator returned sat in 13.903951 secs.
[07/26 15:02:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:21]  Improved gap from 0 to 14.0625
[07/26 15:02:22]  Improved number of small numbers from 39 to 100 out of a max of 100
[07/26 15:02:22]  Verifer returned sat in 0.927434 secs.
[07/26 15:02:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    5460.093506    5460.093262 -132.33252  5460.093506    0.092529  5460.093262   0.000000    0.000244       -0.043945
1    5460.137451    5460.137451 -132.33252  5460.137451    0.044189  5460.137451   0.000000    0.000000     -100.000000
2    5860.181396    5560.137451 -132.33252  5860.181396  400.043945  5560.137451   0.043945  300.000000      200.000000
3    5948.181396    5660.137451 -132.33252  5948.181396  388.000000  5660.137451   0.043945  288.000000      188.000000
4    5948.181396    5849.681396 -132.33252  5948.181396  195.000000  5849.681396   0.043945   98.456055       88.000000
5    5948.225342    5948.137451 -132.33252  5948.225342   98.500000  5948.137451   0.043945    0.043945      -11.956055
6    5998.431396    5972.218506  -70.58252  5998.431396   50.250000  5972.218506   0.043945   26.168945        0.000000
7    5998.431396    5998.387451   15.35498  5998.431396   26.125000  5998.387451   0.043945    0.000000      -14.062500
8    6012.493896    6012.449951   15.35498  6012.493896   14.062500  6012.449951   0.043945    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:02:22]  --------------------------------------------------------------------------------
[07/26 15:02:22]  Iteration: 98 (26 solution, 71 counterexamples)
[07/26 15:02:26]  Generator returned sat in 2.899434 secs.
[07/26 15:02:26]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:26]  Verifer returned unsat in 0.096746 secs.
[07/26 15:02:26]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:26]  --------------------------------------------------------------------------------
[07/26 15:02:26]  Iteration: 99 (27 solution, 71 counterexamples)
[07/26 15:02:28]  Generator returned sat in 0.895212 secs.
[07/26 15:02:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:28]  Verifer returned unsat in 0.062524 secs.
[07/26 15:02:28]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:28]  --------------------------------------------------------------------------------
[07/26 15:02:28]  Iteration: 100 (28 solution, 71 counterexamples)
[07/26 15:02:31]  Generator returned sat in 1.693837 secs.
[07/26 15:02:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:31]  Verifer returned unsat in 0.139301 secs.
[07/26 15:02:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:31]  --------------------------------------------------------------------------------
[07/26 15:02:31]  Iteration: 101 (29 solution, 71 counterexamples)
[07/26 15:02:35]  Generator returned sat in 3.158913 secs.
[07/26 15:02:35]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:35]  Verifer returned unsat in 0.153673 secs.
[07/26 15:02:35]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:35]  --------------------------------------------------------------------------------
[07/26 15:02:35]  Iteration: 102 (30 solution, 71 counterexamples)
[07/26 15:02:38]  Generator returned sat in 1.264951 secs.
[07/26 15:02:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:38]  Verifer returned unsat in 0.148208 secs.
[07/26 15:02:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:38]  --------------------------------------------------------------------------------
[07/26 15:02:38]  Iteration: 103 (31 solution, 71 counterexamples)
[07/26 15:02:40]  Generator returned sat in 0.868030 secs.
[07/26 15:02:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:40]  Verifer returned unsat in 0.126073 secs.
[07/26 15:02:40]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:40]  --------------------------------------------------------------------------------
[07/26 15:02:40]  Iteration: 104 (32 solution, 71 counterexamples)
[07/26 15:02:43]  Generator returned sat in 2.236241 secs.
[07/26 15:02:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:43]  Verifer returned unsat in 0.174750 secs.
[07/26 15:02:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:02:43]  --------------------------------------------------------------------------------
[07/26 15:02:43]  Iteration: 105 (33 solution, 71 counterexamples)
[07/26 15:02:51]  Generator returned sat in 6.795869 secs.
[07/26 15:02:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:02:51]  Verifer returned unsat in 0.105942 secs.
[07/26 15:02:51]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:02:51]  --------------------------------------------------------------------------------
[07/26 15:02:51]  Iteration: 106 (34 solution, 71 counterexamples)
[07/26 15:02:55]  Generator returned sat in 2.392357 secs.
[07/26 15:02:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:55]  Verifer returned unsat in 0.048892 secs.
[07/26 15:02:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:02:55]  --------------------------------------------------------------------------------
[07/26 15:02:55]  Iteration: 107 (35 solution, 71 counterexamples)
[07/26 15:03:01]  Generator returned sat in 4.689055 secs.
[07/26 15:03:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:01]  Verifer returned unsat in 0.035447 secs.
[07/26 15:03:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:01]  --------------------------------------------------------------------------------
[07/26 15:03:01]  Iteration: 108 (36 solution, 71 counterexamples)
[07/26 15:03:03]  Generator returned sat in 1.397259 secs.
[07/26 15:03:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:03]  Verifer returned unsat in 0.087858 secs.
[07/26 15:03:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:03]  --------------------------------------------------------------------------------
[07/26 15:03:03]  Iteration: 109 (37 solution, 71 counterexamples)
[07/26 15:03:06]  Generator returned sat in 1.192212 secs.
[07/26 15:03:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:06]  Verifer returned unsat in 0.063116 secs.
[07/26 15:03:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:06]  --------------------------------------------------------------------------------
[07/26 15:03:06]  Iteration: 110 (38 solution, 71 counterexamples)
[07/26 15:03:08]  Generator returned sat in 0.923038 secs.
[07/26 15:03:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:08]  Verifer returned unsat in 0.134040 secs.
[07/26 15:03:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:08]  --------------------------------------------------------------------------------
[07/26 15:03:08]  Iteration: 111 (39 solution, 71 counterexamples)
[07/26 15:03:10]  Generator returned sat in 1.197609 secs.
[07/26 15:03:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:11]  Improved gap from 0 to 15.625
[07/26 15:03:11]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 15:03:11]  Verifer returned sat in 1.076167 secs.
[07/26 15:03:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    4282.793457    4282.749268 -158.123047  4282.793457    0.092285  4282.749268   0.000000    0.044189        0.022217
1    4282.793457    4282.771240 -158.123047  4282.793457    0.021729  4282.771240   0.000000    0.022217      -99.977783
2    4682.793213    4382.771484 -158.123047  4682.793213  400.021973  4382.771484   0.021973  299.999756      200.000000
3    4758.793457    4568.749512 -158.123047  4758.793457  376.000000  4568.749512   0.021973  190.021973      176.000244
4    4758.793457    4661.793457 -158.123047  4758.793457  190.000000  4661.793457   0.021973   96.978027       76.000244
5    4758.815430    4743.168457 -134.145264  4758.815430   97.000000  4743.168457   0.021973   15.625000        0.000000
6    4793.690430    4758.793457  -69.020264  4793.690430   50.500000  4758.793457   0.021973   34.875000        0.000000
7    4793.690430    4793.668457   15.354736  4793.690430   27.250000  4793.668457   0.021973    0.000000      -15.625000
8    4809.315430    4809.293457   15.354980  4809.315430   15.625000  4809.293457   0.021973    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 15:03:11]  --------------------------------------------------------------------------------
[07/26 15:03:11]  Iteration: 112 (39 solution, 72 counterexamples)
[07/26 15:03:15]  Generator returned sat in 2.943353 secs.
[07/26 15:03:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:16]  Verifer returned unsat in 0.163021 secs.
[07/26 15:03:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:16]  --------------------------------------------------------------------------------
[07/26 15:03:16]  Iteration: 113 (40 solution, 72 counterexamples)
[07/26 15:03:18]  Generator returned sat in 0.990284 secs.
[07/26 15:03:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:18]  Verifer returned unsat in 0.094567 secs.
[07/26 15:03:18]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:18]  --------------------------------------------------------------------------------
[07/26 15:03:18]  Iteration: 114 (41 solution, 72 counterexamples)
[07/26 15:03:20]  Generator returned sat in 0.956326 secs.
[07/26 15:03:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:20]  Verifer returned unsat in 0.115295 secs.
[07/26 15:03:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:20]  --------------------------------------------------------------------------------
[07/26 15:03:20]  Iteration: 115 (42 solution, 72 counterexamples)
[07/26 15:03:22]  Generator returned sat in 0.910692 secs.
[07/26 15:03:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:22]  Verifer returned unsat in 0.135560 secs.
[07/26 15:03:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:22]  --------------------------------------------------------------------------------
[07/26 15:03:22]  Iteration: 116 (43 solution, 72 counterexamples)
[07/26 15:03:25]  Generator returned sat in 1.723878 secs.
[07/26 15:03:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:25]  Verifer returned unsat in 0.103818 secs.
[07/26 15:03:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:25]  --------------------------------------------------------------------------------
[07/26 15:03:25]  Iteration: 117 (44 solution, 72 counterexamples)
[07/26 15:03:27]  Generator returned sat in 0.987943 secs.
[07/26 15:03:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:27]  Verifer returned unsat in 0.056564 secs.
[07/26 15:03:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:27]  --------------------------------------------------------------------------------
[07/26 15:03:27]  Iteration: 118 (45 solution, 72 counterexamples)
[07/26 15:03:32]  Generator returned sat in 3.355117 secs.
[07/26 15:03:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:32]  Verifer returned unsat in 0.108790 secs.
[07/26 15:03:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:32]  --------------------------------------------------------------------------------
[07/26 15:03:32]  Iteration: 119 (46 solution, 72 counterexamples)
[07/26 15:03:34]  Generator returned sat in 0.991547 secs.
[07/26 15:03:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:34]  Verifer returned unsat in 0.141435 secs.
[07/26 15:03:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:34]  --------------------------------------------------------------------------------
[07/26 15:03:34]  Iteration: 120 (47 solution, 72 counterexamples)
[07/26 15:03:36]  Generator returned sat in 0.956361 secs.
[07/26 15:03:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:36]  Verifer returned unsat in 0.110735 secs.
[07/26 15:03:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:36]  --------------------------------------------------------------------------------
[07/26 15:03:36]  Iteration: 121 (48 solution, 72 counterexamples)
[07/26 15:03:38]  Generator returned sat in 0.920968 secs.
[07/26 15:03:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:38]  Verifer returned unsat in 0.168345 secs.
[07/26 15:03:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:38]  --------------------------------------------------------------------------------
[07/26 15:03:38]  Iteration: 122 (49 solution, 72 counterexamples)
[07/26 15:03:40]  Generator returned sat in 0.868203 secs.
[07/26 15:03:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:41]  Verifer returned unsat in 0.122394 secs.
[07/26 15:03:41]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:41]  --------------------------------------------------------------------------------
[07/26 15:03:41]  Iteration: 123 (50 solution, 72 counterexamples)
[07/26 15:03:42]  Generator returned sat in 0.919101 secs.
[07/26 15:03:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:43]  Verifer returned unsat in 0.114886 secs.
[07/26 15:03:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:43]  --------------------------------------------------------------------------------
[07/26 15:03:43]  Iteration: 124 (51 solution, 72 counterexamples)
[07/26 15:03:44]  Generator returned unsat in 0.002471 secs.
[07/26 15:03:44]  [96mNo more solutions found[0m
[07/26 15:03:44]  Final solutions:
[07/26 15:03:44]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  25: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  26: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  27: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  28: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  29: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  30: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  31: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  32: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  33: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  34: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  35: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  36: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  37: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  38: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  39: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  40: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  41: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  42: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  43: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  44: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  45: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 15:03:44]  46: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 15:03:44]  47: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 15:03:44]  48: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  49: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 15:03:44]  50: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 15:03:44]  Took 447.252851 secs.
