[07/19 15:46:50]  --------------------------------------------------------------------------------
[07/19 15:46:50]  Iteration: 1 (0 solution, 0 counterexamples)
[07/19 15:46:50]  Generator returned sat in 0.004262 secs.
[07/19 15:46:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:46:50]  Improved gap from 1/10 to 100
[07/19 15:46:50]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:46:50]  Verifer returned sat in 0.267128 secs.
[07/19 15:46:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t  cwnd_0,t  service_0,t  queue_t  bottle_queue_t
0      91.353571      71.353571 -71.353571     91.353571       0.1    71.353571     20.0            20.0
1      91.353571      91.253571 -71.353571     91.353571      19.9    91.253571      0.1           -80.0
2     291.453571     201.353571 -71.353571    291.453571     200.2   201.353571     90.0            20.0
3     291.453571     271.353571 -71.353571    291.453571      90.0   271.353571     20.0           -80.0
4     853.453571     471.353571 -71.353571    853.453571     582.0   471.353571     20.0            20.0
5    2759.653571     471.353571 -71.353571   2759.653571    1926.2   471.353571    120.0            20.0
6    7034.053571     571.353571 -71.353571   7034.053571    4394.4   571.353571    120.0            20.0
7   16304.853571     771.353571 -71.353571  16304.853571    9390.8   771.353571     20.0            20.0
8   35668.453571     771.353571 -71.353571  35668.453571   19383.6   771.353571    120.0            20.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/19 15:46:50]  --------------------------------------------------------------------------------
[07/19 15:46:50]  Iteration: 2 (0 solution, 1 counterexamples)
[07/19 15:46:50]  Generator returned sat in 0.039307 secs.
[07/19 15:46:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:46:50]  Improved gap from 32797/400 to 100
[07/19 15:46:51]  Improved number of small numbers from 72 to 72 out of a max of 100
[07/19 15:46:51]  Verifer returned sat in 0.465667 secs.
[07/19 15:46:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t     cwnd_0,t  service_0,t   queue_t  bottle_queue_t
0      91.353516      71.353516 -71.353516    91.353516     0.100098    71.353516   20.0000            20.0
1      91.353516      91.351016 -71.353516    91.353516    19.997500    91.351016    0.0025           -80.0
2    6814.046071     271.353516 -71.353516  6814.046071  6722.695056   271.353516   20.0000            20.0
3    6814.046071     271.353516 -71.353516  6814.046071    20.000000   271.353516   20.0000           -80.0
4    7124.046071     471.353516 -71.353516  7124.046071   330.000000   471.353516   20.0000            20.0
5    7124.046071     471.353516 -71.353516  7124.046071     0.010000   471.353516   20.0000           -80.0
6    7404.061071     571.353516 -71.353516  7404.061071   300.015000   571.353516  120.0000            20.0
7    7404.061071     691.351016 -71.353516  7404.061071     0.010000   691.351016    0.0025           -80.0
8    7734.069821     771.353516 -71.353516  7734.069821   330.011250   771.353516  120.0000            20.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:46:51]  --------------------------------------------------------------------------------
[07/19 15:46:51]  Iteration: 3 (0 solution, 2 counterexamples)
[07/19 15:46:51]  Generator returned sat in 0.080985 secs.
[07/19 15:46:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:46:51]  Improved gap from 1/800 to 100
[07/19 15:46:52]  Improved number of small numbers from 71 to 81 out of a max of 100
[07/19 15:46:52]  Verifer returned sat in 0.561777 secs.
[07/19 15:46:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    -742.539062    -762.538984 -71.35376  -742.539062    0.100098  -762.538984   19.999922       19.999922
1    -642.541484    -762.538818 -71.35376  -642.541484  119.997500  -762.538818  119.997334       19.997500
2    -542.541260    -580.521484 -71.35376  -542.541260  219.997559  -580.521484   37.980225       19.997725
3    -542.538984    -562.538984 -71.35376  -542.538984   37.982500  -562.538984   20.000000      -80.000000
4    -284.573984    -418.486484 -71.35376  -284.573984  277.965000  -418.486484   75.947500       20.000000
5    -284.573984    -362.538984 -71.35376  -284.573984    0.010000  -362.538984   20.000000      -80.000000
6     -84.571484    -162.539062 -71.35376   -84.571484  220.002500  -162.539062   20.000078       20.000000
7     -84.571484    -142.541484 -71.35376   -84.571484    0.010000  -142.541484    0.002500      -80.000000
8     193.391016     -62.538818 -71.35376   193.391016  277.965000   -62.538818  119.999834       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:46:52]  --------------------------------------------------------------------------------
[07/19 15:46:52]  Iteration: 4 (0 solution, 3 counterexamples)
[07/19 15:46:52]  Generator returned sat in 0.090889 secs.
[07/19 15:46:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:46:52]  Improved gap from 1/800 to 100
[07/19 15:46:53]  Improved number of small numbers from 72 to 86 out of a max of 100
[07/19 15:46:53]  Verifer returned sat in 0.453709 secs.
[07/19 15:46:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    -762.538818    -762.538818 -71.354004  -762.538818    0.100098  -762.538818    0.000000        0.000000
1    -662.539062    -762.538818 -71.354004  -662.539062   99.999756  -762.538818   99.999756       -0.000244
2    -562.536377    -642.541318 -71.354004  -562.536377  200.002441  -642.541318   80.004941        0.002441
3    -562.536377    -562.538818 -71.354004  -562.536377   38.005000  -562.538818    0.002441      -99.997559
4    -342.536318    -362.538818 -71.354004  -342.536318  220.002500  -362.538818   20.000000       20.000000
5    -342.536318    -362.538818 -71.354004  -342.536318    0.010000  -362.538818   20.000000      -80.000000
6     -81.528818    -162.539062 -71.354004   -81.528818  281.007500  -162.539062   20.000244       20.000000
7     -81.528818    -142.541318 -71.354004   -81.528818    0.010000  -142.541318    0.002500      -80.000000
8     139.471182     -62.538818 -71.354004   139.471182  221.002500   -62.538818  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:46:53]  --------------------------------------------------------------------------------
[07/19 15:46:53]  Iteration: 5 (0 solution, 4 counterexamples)
[07/19 15:46:53]  Generator returned sat in 0.055153 secs.
[07/19 15:46:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:46:53]  Improved gap from 20 to 100
[07/19 15:46:54]  Improved number of small numbers from 90 to 90 out of a max of 100
[07/19 15:46:54]  Verifer returned sat in 0.361977 secs.
[07/19 15:46:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    -912.549688    -912.550938 -301.31501  -912.549688    0.100098  -912.550938    0.001250         0.00125
1    -912.549688    -912.550938 -301.31501  -912.549688    0.001250  -912.550938    0.001250       -99.99875
2    -692.549688    -712.550938 -301.31501  -692.549688  220.001250  -712.550938   20.000000        20.00000
3    -692.548437    -712.550938 -301.31501  -692.548437   20.001250  -712.550938   20.001250       -79.99875
4    -482.547813    -542.537812 -301.31501  -482.547813  230.001875  -542.537812   49.986875        20.00000
5    -482.547813    -502.557813 -301.31501  -482.547813    0.010000  -502.557813   10.006875       -80.00000
6    -282.546562    -312.550937 -301.31501  -282.546562  210.008125  -312.550937   20.000000        20.00000
7    -282.546562    -312.550937 -301.31501  -282.546562    0.010000  -312.550937   20.000000       -80.00000
8     -72.544687    -212.550938 -301.31501   -72.544687  230.001875  -212.550938  120.000000        20.00000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:46:54]  --------------------------------------------------------------------------------
[07/19 15:46:54]  Iteration: 6 (0 solution, 5 counterexamples)
[07/19 15:46:54]  Generator returned sat in 0.162113 secs.
[07/19 15:46:54]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:46:54]  Improved gap from 1/1000 to 100
[07/19 15:46:54]  Improved number of small numbers from 99 to 99 out of a max of 100
[07/19 15:46:54]  Verifer returned sat in 0.210349 secs.
[07/19 15:46:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    -963.069062   -1002.550313 -301.315186  -963.069062    0.099854 -1002.550313   39.48125        20.00000
1    -863.067812    -983.069062 -301.315186  -863.067812  139.482500  -983.069062  120.00000        20.00000
2    -783.066563    -883.069062 -301.315186  -783.066563  200.001250  -883.069062  100.00125         0.00125
3    -783.066563    -783.069062 -301.315186  -783.066563    0.010000  -783.069062    0.00125       -99.99875
4    -563.066563    -683.069062 -301.315186  -563.066563  220.001250  -683.069062  120.00000        20.00000
5    -563.066563    -583.069062 -301.315186  -563.066563    0.010000  -583.069062   20.00000       -80.00000
6    -282.546562    -483.069062 -301.315186  -282.546562  300.520000  -483.069062  120.00000        20.00000
7    -282.546562    -383.069062 -301.315186  -282.546562    0.010000  -383.069062   20.00000       -80.00000
8      -2.026562    -283.069062 -301.315186    -2.026562  300.520000  -283.069062  120.00000        20.00000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:46:55]  --------------------------------------------------------------------------------
[07/19 15:46:55]  Iteration: 7 (0 solution, 6 counterexamples)
[07/19 15:46:55]  Generator returned sat in 0.059472 secs.
[07/19 15:46:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:46:55]  Improved gap from 1/800 to 100
[07/19 15:46:55]  Improved number of small numbers from 54 to 62 out of a max of 100
[07/19 15:46:55]  Verifer returned sat in 0.690755 secs.
[07/19 15:46:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t     cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    -322.086426    -422.136152 -301.315186   -322.086426     0.099609  -422.136152  100.049727        0.049727
1    -322.086426    -322.136152 -301.315186   -322.086426   100.049561  -322.136152    0.049727      -99.950273
2    -102.086470    -122.136152 -301.315186   -102.086470   220.049683  -122.136152   20.000000       20.000000
3      12.400713    -122.136152 -301.315186     12.400713   134.487183  -122.136152  120.000000       20.000000
4     311.875078       8.863848 -301.315186    311.875078   419.474365     8.863848   89.000000       20.000000
5    1227.823809      77.863848 -301.315186   1227.823809  1004.948730    77.863848  120.000000       20.000000
6    3218.221270     177.863848 -301.315186   3218.221270  2110.397461   177.863848  120.000000       20.000000
7    7469.516191     277.863848 -301.315186   7469.516191  4371.294922   277.863848  120.000000       20.000000
8   16227.106035     377.864014 -301.315186  16227.106035  8877.589844   377.864014  119.999834       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/19 15:46:56]  --------------------------------------------------------------------------------
[07/19 15:46:56]  Iteration: 8 (0 solution, 7 counterexamples)
[07/19 15:46:56]  Generator returned sat in 0.022221 secs.
[07/19 15:46:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:46:57]  Improved number of small numbers from 33 to 39 out of a max of 99
[07/19 15:46:57]  Verifer returned sat in 0.996084 secs.
[07/19 15:46:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    -302.136230    -322.136152 -301.315186  -302.136230    0.099365  -322.136152   19.999922       19.999922
1    -302.136230    -322.136152 -301.315186  -302.136230    0.049805  -322.136152   19.999922      -80.000078
2      92.726030    -222.136152 -301.315186    92.726030  414.862183  -222.136152  120.000000       20.000000
3     211.825396    -122.136152 -301.315186   211.825396  239.099365  -122.136152  120.000000       20.000000
4     311.875078       8.863848 -301.315186   311.875078  220.049683     8.863848   89.000000       20.000000
5     498.899919     177.863848 -301.315186   498.899919  276.024841   177.863848   20.000000       20.000000
6     817.412340     177.863848 -301.315186   817.412340  338.512421   177.863848  120.000000       20.000000
7    1017.168550     277.863848 -301.315186  1017.168550  319.756210   277.863848  120.000000       20.000000
8    1192.046656     377.864014 -301.315186  1192.046656  294.878105   377.864014  119.999834       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/19 15:46:57]  --------------------------------------------------------------------------------
[07/19 15:46:57]  Iteration: 9 (0 solution, 8 counterexamples)
[07/19 15:46:57]  Generator returned sat in 0.059161 secs.
[07/19 15:46:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:46:57]  Improved gap from 1/800 to 100
[07/19 15:46:58]  Improved number of small numbers from 53 to 89 out of a max of 100
[07/19 15:46:58]  Verifer returned sat in 0.693265 secs.
[07/19 15:46:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    -336.485840    -336.485840 -281.31543  -336.485840    0.099121  -336.485840   0.000000        0.000000
1    -336.460938    -336.485840 -281.31543  -336.460938    0.024902  -336.485840   0.024902      -99.975098
2    -116.461182    -160.485840 -281.31543  -116.461182  220.024658  -160.485840  44.000000       20.000000
3     -16.436279     -45.485840 -281.31543   -16.436279  144.024902   -45.485840  29.000000       20.000000
4     102.063721       8.864014 -281.31543   102.063721  147.500000     8.864014  74.650146       20.000000
5     202.088501     134.197347 -281.31543   202.088501  174.674927   134.197347  49.316813       20.000000
6     302.113281     239.197266 -281.31543   302.113281  149.341593   239.197266  44.316895       20.000000
7     402.137939     299.864014 -281.31543   402.137939  144.341553   299.864014  83.650146       20.000000
8     465.987793     363.514160 -281.31543   465.987793  147.500000   363.514160  83.849854      -16.150146
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/19 15:46:58]  --------------------------------------------------------------------------------
[07/19 15:46:58]  Iteration: 10 (0 solution, 9 counterexamples)
[07/19 15:46:59]  Generator returned sat in 0.030706 secs.
[07/19 15:46:59]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:46:59]  Improved number of small numbers from 71 to 89 out of a max of 99
[07/19 15:46:59]  Verifer returned sat in 0.545006 secs.
[07/19 15:46:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    -336.485840    -336.485840 -281.31543  -336.485840    0.098877  -336.485840   0.000000        0.000000
1    -336.436523    -336.485840 -281.31543  -336.436523    0.049316  -336.485840   0.049316      -99.950684
2    -114.436279    -160.485840 -281.31543  -114.436279  222.049561  -160.485840  44.000000       20.000000
3     -14.386719     -46.518880 -281.31543   -14.386719  144.049561   -46.518880  30.033040       20.000000
4     102.063721       9.213867 -281.31543   102.063721  146.483480     9.213867  74.300293       20.000000
5     202.113281     135.197266 -281.31543   202.113281  174.349854   135.197266  48.316895       20.000000
6     303.137939     239.202854 -281.31543   303.137939  149.341553   239.202854  44.311306       20.000000
7     403.187500     299.180827 -281.31543   403.187500  144.360867   299.180827  84.333333       20.000000
8     465.337646     363.514160 -281.31543   465.337646  146.483480   363.514160  82.150146      -17.849854
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/19 15:46:59]  --------------------------------------------------------------------------------
[07/19 15:46:59]  Iteration: 11 (0 solution, 10 counterexamples)
[07/19 15:47:00]  Generator returned sat in 0.492987 secs.
[07/19 15:47:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:47:00]  Improved gap from 405/8192 to 100
[07/19 15:47:01]  Improved number of small numbers from 43 to 63 out of a max of 100
[07/19 15:47:01]  Verifer returned sat in 0.639074 secs.
[07/19 15:47:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     404.343750     404.343750 -281.31543   404.343750    0.098877   404.343750    0.000000       -0.000061
1     404.393311     404.343994 -281.31543   404.393311    0.049561   404.343994    0.049316      -99.950500
2     504.393311     504.343811 -281.31543   504.393311  100.049316   504.343811    0.049500      -99.950500
3     784.642314     662.694336 -281.31543   784.642314  280.298503   662.694336   61.649475       20.000000
4     864.642090     704.343811 -281.31543   864.642090  141.649251   704.343811   99.999776       -0.000224
5    1048.440816     904.343811 -281.31543  1048.440816  283.798503   904.343811   20.000000       20.000000
6    1171.840068    1004.343811 -281.31543  1171.840068  143.399251  1004.343811   20.000000       20.000000
7    1225.039693    1077.493998 -281.31543  1225.039693   73.199626  1077.493998    0.049438      -26.800374
8    1371.889506    1104.343994 -281.31543  1371.889506  146.899251  1104.343994  119.999817       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:01]  --------------------------------------------------------------------------------
[07/19 15:47:01]  Iteration: 12 (0 solution, 11 counterexamples)
[07/19 15:47:01]  Generator returned sat in 0.087468 secs.
[07/19 15:47:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:01]  Improved gap from 1613821/16384 to 100
[07/19 15:47:02]  Improved number of small numbers from 40 to 46 out of a max of 100
[07/19 15:47:02]  Verifer returned sat in 0.778703 secs.
[07/19 15:47:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     402.843994     402.843750 -281.31543   402.843994    0.098877   402.843750    0.000244        0.000183
1     404.393311     404.343750 -281.31543   404.393311    1.549561   404.343750    0.049561      -98.450500
2     504.393066     502.843811 -281.31543   504.393066  100.049316   502.843811    1.549255      -98.450745
3     790.642069     658.944397 -281.31543   790.642069  287.798258   658.944397   63.899414       20.000000
4     872.141785     702.843811 -281.31543   872.141785  145.399129   702.843811  101.499715        1.499715
5    1061.440328     886.344421 -281.31543  1061.440328  290.798258   886.344421   36.499390       20.000000
6    1171.840068    1001.093872 -281.31543  1171.840068  146.899129  1001.093872   21.749939       20.000000
7    1225.039693    1076.018778 -281.31543  1225.039693   74.949565  1076.018778    0.024658      -26.800374
8    1374.914164    1104.343750 -281.31543  1374.914164  149.899129  1104.343750  118.500061       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:02]  --------------------------------------------------------------------------------
[07/19 15:47:02]  Iteration: 13 (0 solution, 12 counterexamples)
[07/19 15:47:03]  Generator returned sat in 0.786961 secs.
[07/19 15:47:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:03]  Improved gap from 1/800 to 100
[07/19 15:47:04]  Improved number of small numbers from 41 to 100 out of a max of 100
[07/19 15:47:04]  Verifer returned sat in 0.315343 secs.
[07/19 15:47:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     635.673340     615.673340 -281.31543   635.673340    0.098877   615.673340   20.000000            20.0
1     635.673340     615.673340 -281.31543   635.673340    0.049561   615.673340   20.000000           -80.0
2     815.673340     715.673584 -281.31543   815.673340  200.000000   715.673584   99.999756             0.0
3     935.722900     915.673340 -281.31543   935.722900  220.049316   915.673340   20.000000            20.0
4    1066.722900    1015.673340 -281.31543  1066.722900  151.000000  1015.673340   20.000000            20.0
5    1247.722900    1061.706299 -281.31543  1247.722900  201.000000  1061.706299   73.967041            20.0
6    1347.772217    1195.039551 -281.31543  1347.772217  174.016357  1195.039551   40.633789            20.0
7    1447.821533    1315.673340 -281.31543  1447.821533  140.683105  1315.673340   20.000000            20.0
8    1578.821533    1315.673340 -281.31543  1578.821533  151.000000  1315.673340  120.000000            20.0
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/19 15:47:04]  --------------------------------------------------------------------------------
[07/19 15:47:04]  Iteration: 14 (0 solution, 13 counterexamples)
[07/19 15:47:04]  Generator returned sat in 0.301788 secs.
[07/19 15:47:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:47:04]  Improved gap from 101/2048 to 0
[07/19 15:47:05]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:47:05]  Verifer returned sat in 0.179191 secs.
[07/19 15:47:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     827.772217     827.722900 -659.963379   827.772217    0.098877   827.722900    0.049316        0.000000
1     927.821533     827.772217 -659.963379   927.821533  100.098633   827.772217  100.049316        0.049316
2     927.821533     927.772217 -659.963379   927.821533  100.000000   927.772217    0.049316      -99.950684
3    1147.821533    1127.772217 -659.963379  1147.821533  220.049316  1127.772217   20.000000       20.000000
4    1147.821533    1147.722900 -579.963379  1147.821533    1.000000  1147.722900    0.049316        0.000000
5    1148.272217    1148.173584 -480.815430  1148.272217    0.500000  1148.173584    0.049316       -0.401367
6    1148.722900    1148.624268 -380.864746  1148.722900    0.500000  1148.624268    0.049316        0.000000
7    1149.173584    1148.673584 -281.315430  1149.173584    0.500000  1148.673584    0.450684        0.000000
8    1149.222900    1149.124268 -281.315430  1149.222900    0.500000  1149.124268    0.049316      -99.950684
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:47:05]  --------------------------------------------------------------------------------
[07/19 15:47:05]  Iteration: 15 (0 solution, 14 counterexamples)
[07/19 15:47:06]  Generator returned sat in 0.401311 secs.
[07/19 15:47:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:06]  Improved gap from 923/2048 to 35.9375
[07/19 15:47:06]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:47:06]  Verifer returned sat in 0.343142 secs.
[07/19 15:47:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0     719.663818     699.663818 -584.717041   719.663818    0.098877   699.663818  20.000000       20.000000
1     719.663818     699.663818 -584.717041   719.663818    0.049316   699.663818  20.000000      -80.000000
2     919.614502     890.239502 -584.717041   919.614502  219.950684   890.239502  29.375000       19.950684
3     935.601318     899.663818 -520.654541   935.601318   45.361816   899.663818  35.937500        0.000000
4     945.025635     935.601318 -456.592041   945.025635   45.361816   935.601318   9.424316      -26.513184
5     980.963135     971.538818 -392.529541   980.963135   45.361816   971.538818   9.424316      -26.513184
6    1016.900635    1007.476318 -328.467041  1016.900635   45.361816  1007.476318   9.424316      -26.513184
7    1052.838135    1048.101318 -269.092041  1052.838135   45.361816  1048.101318   4.736816      -31.200684
8    1093.463135    1084.038818 -269.092041  1093.463135   45.361816  1084.038818   9.424316      -90.575684
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:47:06]  --------------------------------------------------------------------------------
[07/19 15:47:06]  Iteration: 16 (0 solution, 15 counterexamples)
[07/19 15:47:07]  Generator returned sat in 0.157205 secs.
[07/19 15:47:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:07]  Improved gap from 1/400 to 0
[07/19 15:47:07]  Improved number of small numbers from 58 to 81 out of a max of 100
[07/19 15:47:07]  Verifer returned sat in 0.566186 secs.
[07/19 15:47:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0     901.131348     901.128906 -520.654785   901.131348    0.098389   901.128906   0.002441        0.001279
1     901.131348     901.130127 -520.654785   901.131348    0.001465   901.130127   0.001221      -99.998721
2    1121.128906    1101.129883 -520.654785  1121.128906  219.998779  1101.129883  19.999023       19.998838
3    1221.129883    1201.129883 -520.654785  1221.129883  120.000000  1201.129883  20.000000       19.999814
4    1221.129883    1221.128818 -440.662109  1221.129883    0.010000  1221.128818   0.001064       -0.007510
5    1221.138818    1221.137568 -340.663535  1221.138818    0.010000  1221.137568   0.001250        0.000000
6    1221.147568    1221.138818 -240.672285  1221.147568    0.010000  1221.138818   0.008750        0.000000
7    1221.148818    1221.147568 -140.673584  1221.148818    0.010000  1221.147568   0.001250       -0.000049
8    1221.157568    1221.148926 -140.673584  1221.157568    0.010000  1221.148926   0.008643      -99.991299
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:47:07]  --------------------------------------------------------------------------------
[07/19 15:47:07]  Iteration: 17 (0 solution, 16 counterexamples)
[07/19 15:47:08]  Generator returned sat in 0.322865 secs.
[07/19 15:47:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:47:08]  Improved gap from 403/16384 to 100
[07/19 15:47:09]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/19 15:47:09]  Verifer returned sat in 0.549458 secs.
[07/19 15:47:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1021.129883     949.830566 -620.654541  1021.129883    0.098145   949.830566   71.299316       20.000000
1    1101.129639    1001.129883 -620.654541  1101.129639  151.299072  1001.129883   99.999756       -0.000244
2    1221.178955    1182.580811 -620.654541  1221.178955  220.049072  1182.580811   38.549072       20.000000
3    1221.178955    1201.129883 -620.654541  1221.178955   38.500000  1201.129883   20.000000      -80.000000
4    1472.228271    1331.580566 -620.654541  1472.228271  271.049316  1331.580566   89.549316       20.000000
5    1472.228271    1401.129883 -620.654541  1472.228271    2.000000  1401.129883   20.000000      -80.000000
6    1672.277344    1501.129883 -620.654541  1672.277344  220.049072  1501.129883  120.000000       20.000000
7    1672.277344    1601.129883 -620.654541  1672.277344    2.000000  1601.129883   20.000000      -80.000000
8    1923.326660    1701.129883 -620.654541  1923.326660  271.049316  1701.129883  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:09]  --------------------------------------------------------------------------------
[07/19 15:47:09]  Iteration: 18 (0 solution, 17 counterexamples)
[07/19 15:47:09]  Generator returned sat in 0.120006 secs.
[07/19 15:47:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:47:09]  Improved number of small numbers from 73 to 99 out of a max of 99
[07/19 15:47:09]  Verifer returned sat in 0.196588 secs.
[07/19 15:47:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1021.129639     949.830566 -620.654785  1021.129639    0.098145   949.830566   71.299072       19.999756
1    1101.129395    1001.129883 -620.654785  1101.129395  151.298828  1001.129883   99.999512       -0.000488
2    1221.203369    1182.580811 -620.654785  1221.203369  220.073486  1182.580811   38.549072       20.000000
3    1221.203369    1201.129883 -620.654785  1221.203369   38.500000  1201.129883   20.000000      -80.000000
4    1472.252686    1331.330566 -620.654785  1472.252686  271.049316  1331.330566   89.799316       20.000000
5    1472.252686    1401.242676 -620.654785  1472.252686    1.500000  1401.242676   19.887207      -80.000000
6    1672.277344    1501.129883 -620.654785  1672.277344  219.911865  1501.129883  120.000000       20.000000
7    1672.277344    1601.129883 -620.654785  1672.277344    1.500000  1601.129883   20.000000      -80.000000
8    1923.326660    1701.129883 -620.654785  1923.326660  271.049316  1701.129883  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:10]  --------------------------------------------------------------------------------
[07/19 15:47:10]  Iteration: 19 (0 solution, 18 counterexamples)
[07/19 15:47:10]  Generator returned sat in 0.199672 secs.
[07/19 15:47:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:10]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/19 15:47:10]  Verifer returned sat in 0.154438 secs.
[07/19 15:47:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1021.129639     949.705566 -620.654785  1021.129639    0.098145   949.705566   71.424072       19.999756
1    1101.129395    1001.129883 -620.654785  1101.129395  151.423828  1001.129883   99.999512       -0.000488
2    1221.203369    1181.855225 -620.654785  1221.203369  220.073486  1181.855225   39.274658       20.000000
3    1221.203369    1201.129883 -620.654785  1221.203369   39.250000  1201.129883   20.000000      -80.000000
4    1472.252686    1330.830566 -620.654785  1472.252686  271.049316  1330.830566   90.299316       20.000000
5    1472.252686    1401.129883 -620.654785  1472.252686    1.500000  1401.129883   20.000000      -80.000000
6    1672.277344    1501.129883 -620.654785  1672.277344  220.024658  1501.129883  120.000000       20.000000
7    1672.277344    1601.129883 -620.654785  1672.277344    1.500000  1601.129883   20.000000      -80.000000
8    1923.326660    1701.129883 -620.654785  1923.326660  271.049316  1701.129883  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:11]  --------------------------------------------------------------------------------
[07/19 15:47:11]  Iteration: 20 (0 solution, 19 counterexamples)
[07/19 15:47:12]  Generator returned sat in 1.514135 secs.
[07/19 15:47:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:47:13]  Improved gap from 0 to 0
[07/19 15:47:13]  Improved number of small numbers from 70 to 77 out of a max of 100
[07/19 15:47:13]  Verifer returned sat in 0.405198 secs.
[07/19 15:47:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     516.007812     515.958984 -620.655029   516.007812    0.097656   515.958984    0.048828      -99.951172
1     616.008057     615.958984 -620.655029   616.008057  100.049072   615.958984    0.049072      -99.950928
2     715.958984     715.958984 -620.655029   715.958984  100.000000   715.958984    0.000000     -100.000000
3    1193.154785     915.958984 -620.655029  1193.154785  477.195801   915.958984   20.000000       20.000000
4    1412.252686    1015.958984 -620.655029  1412.252686  239.097900  1015.958984   20.000000       20.000000
5    1512.301636    1015.958984 -620.655029  1512.301636  120.048950  1015.958984  120.000000       20.000000
6    1512.301636    1135.910034 -540.655029  1512.301636   60.524475  1135.910034    0.048950        0.000000
7    1513.252686    1136.861084 -442.556885  1513.252686    1.000000  1136.861084    0.048950       -0.950806
8    1514.203735    1137.860840 -442.556885  1514.203735    1.000000  1137.860840    0.000244      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:47:13]  --------------------------------------------------------------------------------
[07/19 15:47:13]  Iteration: 21 (0 solution, 20 counterexamples)
[07/19 15:47:14]  Generator returned sat in 0.818232 secs.
[07/19 15:47:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:47:14]  Improved gap from 20 to 100
[07/19 15:47:15]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/19 15:47:15]  Verifer returned sat in 0.236132 secs.
[07/19 15:47:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     396.072021     376.072021 -442.556885   396.072021    0.097412   376.072021   20.000000       20.000000
1     496.023193     476.072021 -442.556885   496.023193  119.951172   476.072021   19.951172       19.951172
2     496.023193     496.023193 -442.556885   496.023193   19.902344   496.023193    0.000000      -80.048828
3     696.072021     586.346436 -442.556885   696.072021  200.048828   586.346436  109.725586       20.000000
4     797.120850     756.523193 -442.556885   797.120850  210.774414   756.523193   39.548828       20.000000
5     797.120850     796.023193 -442.556885   797.120850    1.500000   796.023193    0.048828      -80.000000
6    1097.572021     876.072266 -442.556885  1097.572021  300.500000   876.072266  119.999756       20.000000
7    1097.572021     976.072021 -442.556885  1097.572021    1.500000   976.072021   20.000000      -80.000000
8    1297.620850    1076.072266 -442.556885  1297.620850  220.048828  1076.072266  119.999756       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:15]  --------------------------------------------------------------------------------
[07/19 15:47:15]  Iteration: 22 (0 solution, 21 counterexamples)
[07/19 15:47:16]  Generator returned sat in 0.530864 secs.
[07/19 15:47:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:16]  Improved gap from 399/16384 to 0
[07/19 15:47:16]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/19 15:47:16]  Verifer returned sat in 0.291662 secs.
[07/19 15:47:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0     613.096191     593.096191 -639.605713   613.096191    0.097412   593.096191  20.000000       20.000000
1     693.145020     693.096191 -639.605713   693.145020  100.048828   693.096191   0.048828        0.048828
2     693.145020     693.144775 -639.605713   693.145020    0.024414   693.144775   0.000244      -99.951172
3     893.096191     891.620361 -639.605713   893.096191  199.951416   891.620361   1.475830        0.000000
4     893.120361     893.096191 -539.630127   893.120361    1.500000   893.096191   0.024170       -0.000244
5     894.596191     894.571777 -442.556885   894.596191    1.500000   894.571777   0.024414       -1.451172
6     896.071777     896.047363 -342.581299   896.071777    1.500000   896.047363   0.024414        0.000000
7     897.547363     896.071777 -244.057129   897.547363    1.500000   896.071777   1.475586       -0.000244
8     897.571777     897.571777 -244.057129   897.571777    1.500000   897.571777   0.000000      -99.975830
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:47:16]  --------------------------------------------------------------------------------
[07/19 15:47:16]  Iteration: 23 (0 solution, 22 counterexamples)
[07/19 15:47:17]  Generator returned sat in 0.222365 secs.
[07/19 15:47:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:17]  Improved gap from 0 to 100
[07/19 15:47:18]  Improved number of small numbers from 37 to 49 out of a max of 100
[07/19 15:47:18]  Verifer returned sat in 0.897117 secs.
[07/19 15:47:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0     419.852539     399.852600 -244.057129   419.852539    0.097168   399.852600  19.999939       19.999939
1     419.852539     399.852783 -244.057129   419.852539    0.024414   399.852783  19.999756      -80.000061
2     499.876953     499.852600 -244.057129   499.876953  100.024170   499.852600   0.024353      -99.975647
3     719.828247     678.868835 -244.057129   719.828247  219.975647   678.868835  40.959412       19.975647
4     819.876953     799.852600 -244.057129   819.876953  141.008118   799.852600  20.000000       20.000000
5     872.381012     845.535502 -244.057129   872.381012   72.504059   845.535502  26.821157      -27.495941
6    1019.901306     999.852600 -244.057129  1019.901306  174.341451   999.852600  20.000000       20.000000
7    1089.072032    1088.998973 -244.057129  1089.072032   89.170726  1088.998973   0.024353      -10.829274
8    1235.120865    1199.852539 -244.057129  1235.120865  146.073186  1199.852539  20.000061       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:18]  --------------------------------------------------------------------------------
[07/19 15:47:18]  Iteration: 24 (0 solution, 23 counterexamples)
[07/19 15:47:20]  Generator returned sat in 1.604554 secs.
[07/19 15:47:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:20]  Improved gap from 199/8192 to 100
[07/19 15:47:20]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/19 15:47:20]  Verifer returned sat in 0.236645 secs.
[07/19 15:47:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     339.988281     319.988281 -164.192871   339.988281    0.097168   319.988281   20.000000       20.000000
1     339.988281     319.988281 -164.192871   339.988281   19.951172   319.988281   20.000000      -80.000000
2     539.939697     500.939697 -164.192871   539.939697  219.951416   500.939697   39.000000       19.951416
3     551.439697     519.988281 -164.192871   551.439697   50.500000   519.988281   31.451416      -68.548584
4     820.988281     619.988281 -164.192871   820.988281  301.000000   619.988281  120.000000       20.000000
5     820.988281     719.988281 -164.192871   820.988281    0.500000   719.988281   20.000000      -80.000000
6    1021.036865     919.988281 -164.192871  1021.036865  220.048584   919.988281   20.000000       20.000000
7    1021.036865     919.988281 -164.192871  1021.036865    0.500000   919.988281   20.000000      -80.000000
8    1302.036865    1019.988281 -164.192871  1302.036865  301.000000  1019.988281  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:21]  --------------------------------------------------------------------------------
[07/19 15:47:21]  Iteration: 25 (0 solution, 24 counterexamples)
[07/19 15:47:21]  Generator returned sat in 0.311967 secs.
[07/19 15:47:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:47:21]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/19 15:47:21]  Verifer returned sat in 0.144245 secs.
[07/19 15:47:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     339.988281     245.238281 -164.192871   339.988281    0.097168   245.238281   94.750000       20.000000
1     339.988281     319.988281 -164.192871   339.988281   19.951172   319.988281   20.000000      -80.000000
2     539.939697     500.939697 -164.192871   539.939697  219.951416   500.939697   39.000000       19.951416
3     551.439697     520.238281 -164.192871   551.439697   50.500000   520.238281   31.201416      -68.548584
4     820.988281     619.988281 -164.192871   820.988281  300.750000   619.988281  120.000000       20.000000
5     820.988281     720.113281 -164.192871   820.988281    0.500000   720.113281   19.875000      -80.000000
6    1021.036865     919.988281 -164.192871  1021.036865  219.923584   919.988281   20.000000       20.000000
7    1021.036865     919.988281 -164.192871  1021.036865    0.500000   919.988281   20.000000      -80.000000
8    1301.786865    1019.988281 -164.192871  1301.786865  300.750000  1019.988281  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:22]  --------------------------------------------------------------------------------
[07/19 15:47:22]  Iteration: 26 (0 solution, 25 counterexamples)
[07/19 15:47:23]  Generator returned sat in 0.397251 secs.
[07/19 15:47:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:23]  Improved number of small numbers from 99 to 99 out of a max of 99
[07/19 15:47:23]  Verifer returned sat in 0.141088 secs.
[07/19 15:47:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     339.988037     245.988281 -164.193115   339.988037    0.096924   245.988281   93.999756       19.999756
1     339.988037     319.988281 -164.193115   339.988037   19.950928   319.988281   19.999756      -80.000244
2     539.939697     500.439697 -164.193115   539.939697  219.951416   500.439697   39.500000       19.951416
3     551.439697     520.738281 -164.193115   551.439697   51.000000   520.738281   30.701416      -68.548584
4     820.988281     619.988281 -164.193115   820.988281  300.250000   619.988281  120.000000       20.000000
5     820.988281     720.113281 -164.193115   820.988281    0.500000   720.113281   19.875000      -80.000000
6    1021.036865     919.988281 -164.193115  1021.036865  219.923584   919.988281   20.000000       20.000000
7    1021.036865     919.988281 -164.193115  1021.036865    0.500000   919.988281   20.000000      -80.000000
8    1301.286865    1019.988281 -164.193115  1301.286865  300.250000  1019.988281  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:23]  --------------------------------------------------------------------------------
[07/19 15:47:23]  Iteration: 27 (0 solution, 26 counterexamples)
[07/19 15:47:25]  Generator returned sat in 1.580115 secs.
[07/19 15:47:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:47:25]  Verifer returned unsat in 0.065461 secs.
[07/19 15:47:25]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:47:25]  --------------------------------------------------------------------------------
[07/19 15:47:25]  Iteration: 28 (1 solution, 26 counterexamples)
[07/19 15:47:27]  Generator returned sat in 1.259850 secs.
[07/19 15:47:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:47:27]  Improved gap from 1/400 to 3.125
[07/19 15:47:27]  Improved number of small numbers from 66 to 83 out of a max of 100
[07/19 15:47:27]  Verifer returned sat in 0.500861 secs.
[07/19 15:47:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     687.990479     587.988037 -244.195557   687.990479    0.096436   587.988037  100.002441        0.002500
1     687.990479     687.988037 -244.195557   687.990479   19.950928   687.988037    0.002441      -99.997500
2     907.985352     787.988037 -244.195557   907.985352  219.997314   787.988037  119.997314       19.997373
3     907.985352     904.860537 -164.193115   907.985352  119.995000   904.860537    3.124814       -0.000186
4    1026.855537    1007.985537 -164.193115  1026.855537  121.995000  1007.985537   18.870000       18.870000
5    1131.980537    1104.860596 -164.193115  1131.980537  123.995000  1104.860596   23.124941       20.000000
6    1131.980537    1124.860352  -84.193115  1131.980537    0.010000  1124.860352    3.125186        0.000000
7    1131.980537    1127.985537   12.681885  1131.980537    2.010000  1127.985537    0.000000       -3.125000
8    1135.990537    1131.110596   12.681885  1135.990537    4.010000  1131.110596    0.884941      -99.115000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:47:28]  --------------------------------------------------------------------------------
[07/19 15:47:28]  Iteration: 29 (1 solution, 27 counterexamples)
[07/19 15:47:30]  Generator returned sat in 2.131852 secs.
[07/19 15:47:30]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:30]  Improved gap from 0 to 100
[07/19 15:47:31]  Improved number of small numbers from 27 to 43 out of a max of 100
[07/19 15:47:31]  Verifer returned sat in 1.090655 secs.
[07/19 15:47:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     565.812500     565.788330  38.955994   565.812500    0.096191   565.788330    0.024170        0.000181
1     565.836670     565.812500  38.955994   565.836670    0.048340   565.812500    0.024170      -99.975649
2     785.788330     665.812319  38.955994   785.788330  219.975830   665.812319  119.976011       19.976011
3     904.860537     865.812319  38.955994   904.860537  239.048218   865.812319   20.000000       20.000000
4    1004.884646     951.007113  38.955994  1004.884646  120.024109   951.007113   34.805206       20.000000
5    1030.591494    1011.495059  38.955994  1030.591494   60.512054  1011.495059    0.024109      -54.293152
6    1204.908755    1152.246747  38.955994  1204.908755  174.341370  1152.246747   33.565572       20.000000
7    1259.013868    1239.893323  38.955994  1259.013868   87.670685  1239.893323    0.024109      -25.894887
8    1404.932864    1365.812256  38.955994  1404.932864  145.943105  1365.812256   20.000063       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:31]  --------------------------------------------------------------------------------
[07/19 15:47:31]  Iteration: 30 (1 solution, 28 counterexamples)
[07/19 15:47:32]  Generator returned sat in 0.330284 secs.
[07/19 15:47:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:32]  Improved gap from 0 to 100
[07/19 15:47:33]  Improved number of small numbers from 48 to 94 out of a max of 100
[07/19 15:47:33]  Verifer returned sat in 0.874563 secs.
[07/19 15:47:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     565.812500     445.812500  58.956055   565.812500    0.096191   445.812500  120.000000       20.000000
1     665.764404     645.812500  58.956055   665.764404  219.951904   645.812500   19.951904       19.951904
2     765.764160     645.812500  58.956055   765.764160  119.951660   645.812500  119.951660       19.951660
3     968.812500     845.812500  58.956055   968.812500  323.000000   845.812500   20.000000       20.000000
4    1110.312500     910.809082  58.956055  1110.312500  161.500000   910.809082   55.003418       20.000000
5    1136.059082     991.511230  58.956055  1136.059082   80.750000   991.511230    0.047852      -54.253418
6    1310.360596    1145.812319  58.956055  1310.360596  174.349365  1145.812319   20.000181       20.000000
7    1377.535098    1232.938965  58.956055  1377.535098   87.174683  1232.938965    0.048037      -12.825498
8    1540.052002    1245.812500  58.956055  1540.052002  162.564941  1245.812500  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:33]  --------------------------------------------------------------------------------
[07/19 15:47:33]  Iteration: 31 (1 solution, 29 counterexamples)
[07/19 15:47:36]  Generator returned sat in 2.234863 secs.
[07/19 15:47:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:47:36]  Improved gap from 1/800 to 100
[07/19 15:47:37]  Improved number of small numbers from 63 to 73 out of a max of 100
[07/19 15:47:37]  Verifer returned sat in 0.575139 secs.
[07/19 15:47:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     665.755615     665.754160  -60.9946   665.755615    0.095703   665.754160    0.001455       -0.007295
1     665.764160     665.762939  -60.9946   665.764160    0.010000   665.762939    0.001221      -99.998750
2     845.772705     845.771660  -60.9946   845.772705  180.009766   845.771660    0.001045      -19.990205
3     865.764160     865.762910  -60.9946   865.764160   19.992500   865.762910    0.001250      -99.998750
4    1085.764160     985.770410  -60.9946  1085.764160  220.001250   985.770410   99.992500       20.000000
5    1085.764160    1065.762910  -60.9946  1085.764160    0.010000  1065.762910   20.000000      -80.000000
6    1285.765410    1165.762939  -60.9946  1285.765410  220.001250  1165.762939  119.999971       20.000000
7    1285.765410    1265.762910  -60.9946  1285.765410    0.010000  1265.762910   20.000000      -80.000000
8    1545.767910    1365.762939  -60.9946  1545.767910  280.002500  1365.762939  119.999971       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:37]  --------------------------------------------------------------------------------
[07/19 15:47:37]  Iteration: 32 (1 solution, 30 counterexamples)
[07/19 15:47:39]  Generator returned sat in 1.507521 secs.
[07/19 15:47:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:47:39]  Improved gap from 0 to 48.4375
[07/19 15:47:39]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/19 15:47:39]  Verifer returned sat in 0.261403 secs.
[07/19 15:47:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     238.899170     118.899170  385.869141   238.899170    0.095703   118.899170  120.000000       20.000000
1     238.899170     238.899170  385.869141   238.899170    0.002686   238.899170    0.000000      -80.000000
2     438.896484     418.899170  385.869141   438.896484  199.997314   418.899170   19.997314       19.997314
3     451.781738     451.779053  404.551758   451.781738   32.882568   451.779053    0.002686      -48.434814
4     620.218994     600.216553  404.551758   620.218994  168.439941   600.216553   20.000000       20.000000
5     620.218994     600.216553  456.114258   620.218994    0.010000   600.216553   20.000000      -28.437500
6     692.877686     648.654053  507.676758   692.877686   92.658691   648.654053   44.221191       -4.216309
7     749.093994     697.091553  555.676758   749.093994  100.437500   697.091553   52.000000        0.000000
8     749.093994     749.091553  555.676758   749.093994   50.437500   749.091553    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:47:40]  --------------------------------------------------------------------------------
[07/19 15:47:40]  Iteration: 33 (1 solution, 31 counterexamples)
[07/19 15:47:41]  Generator returned sat in 0.678054 secs.
[07/19 15:47:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:41]  Improved gap from 767/16 to 48.4375
[07/19 15:47:41]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/19 15:47:41]  Verifer returned sat in 0.361624 secs.
[07/19 15:47:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     152.806885      32.807129  468.836182   152.806885    0.095459    32.807129  119.999756       19.999756
1     232.807129     232.806885  468.836182   232.807129  200.000000   232.806885    0.000244        0.000000
2     324.376953     324.374512  468.836182   324.376953   91.570068   324.374512    0.002441       -8.430176
3     366.689453     366.687012  486.518799   366.689453   42.314941   366.687012    0.002441      -48.435059
4     535.126953     515.124512  486.518799   535.126953  168.439941   515.124512   20.000000       20.000000
5     535.126953     515.124512  538.081299   535.126953    0.010000   515.124512   20.000000      -28.437500
6     612.001953     563.562012  589.643799   612.001953   96.875000   563.562012   48.437500        0.000000
7     663.501953     611.999512  638.143799   663.501953   99.937500   611.999512   51.500000        0.000000
8     663.501953     663.499512  638.143799   663.501953   49.937500   663.499512    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:47:41]  --------------------------------------------------------------------------------
[07/19 15:47:41]  Iteration: 34 (1 solution, 32 counterexamples)
[07/19 15:47:42]  Generator returned sat in 0.490155 secs.
[07/19 15:47:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:42]  Improved gap from 1/400 to 23.4375
[07/19 15:47:43]  Improved number of small numbers from 55 to 69 out of a max of 100
[07/19 15:47:43]  Verifer returned sat in 0.740430 secs.
[07/19 15:47:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     520.095215     400.095345  101.547965   520.095215    0.095215   400.095345  119.999870       19.999870
1     620.092845     560.095215  101.547965   620.092845  219.997500   560.095215   59.997630       19.997500
2     700.097900     616.245345  101.547965   700.097900  140.002686   616.245345   83.852555        0.002555
3     700.097900     700.095345  101.547965   700.097900   83.852500   700.095345    0.002555      -99.997445
4     977.374095     900.095345  101.547965   977.374095  277.278750   900.095345   20.000000       20.000000
5     977.374095     900.095345  178.110465   977.374095    0.010000   900.095345   20.000000       -3.437500
6    1100.814095     923.532959  178.110465  1100.814095  143.440000   923.532959  119.999886       20.000000
7    1100.814095    1023.532845  251.550293  1100.814095    0.010000  1023.532845   20.000000       -6.560173
8    1144.047845    1050.093018  251.550293  1144.047845   63.233750  1050.093018   36.673577      -63.326423
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:47:43]  --------------------------------------------------------------------------------
[07/19 15:47:43]  Iteration: 35 (1 solution, 33 counterexamples)
[07/19 15:47:46]  Generator returned sat in 2.508925 secs.
[07/19 15:47:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:46]  Verifer returned unsat in 0.083529 secs.
[07/19 15:47:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:46]  --------------------------------------------------------------------------------
[07/19 15:47:46]  Iteration: 36 (2 solution, 33 counterexamples)
[07/19 15:47:48]  Generator returned sat in 0.981584 secs.
[07/19 15:47:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:48]  Improved gap from 0 to 9.375
[07/19 15:47:49]  Improved number of small numbers from 39 to 67 out of a max of 100
[07/19 15:47:49]  Verifer returned sat in 1.095500 secs.
[07/19 15:47:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     820.785400     820.737549 -219.141846   820.785400    0.095215   820.737549    0.047852        0.000244
1     820.785400     820.785156 -128.516846   820.785400    0.023926   820.785156    0.000244       -9.374756
2     830.184082     830.160309 -128.516846   830.184082    9.398926   830.160309    0.023773      -99.976074
3    1050.136506     930.160400 -128.516846  1050.136506  219.976196   930.160400  119.976105       19.976349
4    1050.136506    1030.160309  -48.493408  1050.136506  111.488098  1030.160309   19.976196       -0.000213
5    1087.404358    1087.380555    4.887695  1087.404358   57.244049  1087.380555    0.023804       -9.351257
6    1117.502579    1096.755615   84.140731  1117.502579   30.122025  1096.755615   20.746964        0.000000
7    1117.502579    1117.502579  174.765625  1117.502579   16.561012  1117.502579    0.000000       -9.375106
8    1127.283085    1126.877686  265.390625  1127.283085    9.780506  1126.877686    0.405400       -8.969600
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:47:49]  --------------------------------------------------------------------------------
[07/19 15:47:49]  Iteration: 37 (2 solution, 34 counterexamples)
[07/19 15:47:50]  Generator returned sat in 0.332751 secs.
[07/19 15:47:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:47:51]  Improved gap from 0 to 3.125
[07/19 15:47:51]  Improved number of small numbers from 54 to 64 out of a max of 100
[07/19 15:47:51]  Verifer returned sat in 1.105370 secs.
[07/19 15:47:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     851.492920     831.492996 -270.975623   851.492920    0.095215   831.492996   19.999924       19.999924
1     951.494246     831.492996 -270.975623   951.494246  120.001250   831.492996  120.000000       20.000000
2    1031.494246     995.900496 -270.975623  1031.494246  200.000000   995.900496   35.592500        0.000000
3    1031.495496    1031.492996 -216.789307  1031.495496   35.593750  1031.492996    0.001250      -45.812434
4    1104.181746    1077.306746 -143.663123  1104.181746   72.687500  1077.306746   26.873750        0.000000
5    1224.182996    1204.180420 -143.663123  1224.182996  146.875000  1204.180420   20.000076       20.000000
6    1224.182996    1221.055420  -63.663123  1224.182996    0.010000  1221.055420    3.125076        0.000000
7    1224.182996    1224.180496   33.211877  1224.182996    1.520000  1224.180496    0.000000       -3.125000
8    1228.722996    1227.305664   33.211914  1228.722996    4.540000  1227.305664    1.414832      -98.584963
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:47:52]  --------------------------------------------------------------------------------
[07/19 15:47:52]  Iteration: 38 (2 solution, 35 counterexamples)
[07/19 15:47:55]  Generator returned sat in 2.546531 secs.
[07/19 15:47:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:47:55]  Improved gap from 0 to 48.4375
[07/19 15:47:55]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/19 15:47:55]  Verifer returned sat in 0.323753 secs.
[07/19 15:47:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0     530.024414     530.023438 -69.506104   530.024414    0.095215   530.023438   0.000977      -99.999023
1     750.024658     730.023438 -69.506104   750.024658  220.001221   730.023438  20.000000       20.000000
2     850.023438     826.275879 -69.506104   850.023438  119.998779   826.275879  23.746338       19.998779
3     913.339355     864.900879 -52.821045   913.339355   87.062256   864.900879  48.437256       -0.000244
4    1033.340820    1013.338379 -52.821045  1033.340820  168.438721  1013.338379  20.000000       20.000000
5    1033.340820    1013.338379  -1.258545  1033.340820    0.010000  1013.338379  20.000000      -28.437500
6    1107.872070    1061.775879  50.303955  1107.872070   94.531250  1061.775879  46.093750       -2.343750
7    1161.215820    1110.213379  99.303955  1161.215820   99.437500  1110.213379  51.000000        0.000000
8    1161.215820    1161.213379  99.303955  1161.215820   49.437500  1161.213379   0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:47:55]  --------------------------------------------------------------------------------
[07/19 15:47:55]  Iteration: 39 (2 solution, 36 counterexamples)
[07/19 15:47:56]  Generator returned sat in 0.371176 secs.
[07/19 15:47:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:47:56]  Improved gap from 335287/8192 to 100
[07/19 15:47:57]  Improved number of small numbers from 49 to 61 out of a max of 100
[07/19 15:47:57]  Verifer returned sat in 0.677466 secs.
[07/19 15:47:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     280.879150     280.831787  179.685595   280.879150    0.095215   280.831787    0.047363      -99.952589
1     480.831543     380.831787  179.685595   480.831543  199.999756   380.831787   99.999756       -0.000196
2     480.831787     480.831739  179.685595   480.831787  100.000000   480.831739    0.000048      -99.999952
3     720.926954     680.831739  179.685595   720.926954  240.095215   680.831739   20.000000       20.000000
4     820.974561     766.887281  179.685595   820.974561  120.047607   766.887281   33.944458       20.000000
5     847.053907     826.863477  179.685595   847.053907   60.023804   826.863477    0.047607      -53.920654
6    1021.022169     980.831739  179.685595  1021.022169  174.015869   980.831739   20.000000       20.000000
7    1088.030103    1055.548658  179.685595  1088.030103   87.007935  1055.548658   12.291016      -12.992065
8    1221.069776    1080.831787  179.685595  1221.069776  145.330688  1080.831787  119.999952       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:47:57]  --------------------------------------------------------------------------------
[07/19 15:47:57]  Iteration: 40 (2 solution, 37 counterexamples)
[07/19 15:47:58]  Generator returned sat in 0.587640 secs.
[07/19 15:47:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:47:59]  Improved gap from 1/400 to 23.4375
[07/19 15:47:59]  Improved number of small numbers from 55 to 67 out of a max of 100
[07/19 15:47:59]  Verifer returned sat in 0.742989 secs.
[07/19 15:47:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     237.503418     217.503419  343.013915   237.503418    0.095215   217.503419   19.999999       19.999999
1     337.500919     317.503418  343.013915   337.500919  119.997500   317.503418   19.997501       19.997500
2     437.500977     317.503419  343.013915   437.500977  119.997559   317.503419  119.997558       19.997558
3     517.505919     517.503419  343.013915   517.505919  200.002500   517.503419    0.002500        0.002500
4     868.505919     615.380919  343.013915   868.505919  351.002500   615.380919   22.122500       20.000000
5     868.505919     618.503419  418.576415   868.505919    0.010000   618.503419   19.000000       -4.437500
6    1001.015919     641.941162  418.576415  1001.015919  151.510000   641.941162  119.999757       20.000000
7    1001.015919     741.940919  495.138672  1001.015919    0.010000   741.940919   20.000000       -3.437743
8    1045.305919     765.378662  554.286377  1045.305919   64.290000   765.378662   40.852257       -0.000038
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:48:00]  --------------------------------------------------------------------------------
[07/19 15:48:00]  Iteration: 41 (2 solution, 38 counterexamples)
[07/19 15:48:03]  Generator returned sat in 2.598033 secs.
[07/19 15:48:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:48:03]  Improved gap from 195/8192 to 23.4375
[07/19 15:48:03]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/19 15:48:03]  Verifer returned sat in 0.532204 secs.
[07/19 15:48:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     -25.743896     -45.743896  324.598877   -25.743896    0.094971   -45.743896   20.000000       20.000000
1     -25.743896     -45.743896  401.161377   -25.743896    0.047607   -45.743896   20.000000       -3.437500
2      97.645996      -6.276611  401.161377    97.645996  143.389893    -6.276611  103.922607       19.952393
3     197.645996     177.693604  401.161377   197.645996  203.922607   177.693604   19.952393       19.952393
4     493.334961     274.616211  401.161377   493.334961  315.641357   274.616211   23.077393       20.000000
5     493.334961     277.693604  477.723633   493.334961    1.500000   277.693604   20.000000       -3.437744
6     616.820068     301.131348  477.723633   616.820068  143.485107   301.131348  120.000000       20.000000
7     616.820068     401.131348  554.286133   616.820068    1.500000   401.131348   20.000000       -3.437500
8     661.577637     424.568848  554.286133   661.577637   64.757568   424.568848   41.320068      -58.679932
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:48:04]  --------------------------------------------------------------------------------
[07/19 15:48:04]  Iteration: 42 (2 solution, 39 counterexamples)
[07/19 15:48:06]  Generator returned sat in 1.543938 secs.
[07/19 15:48:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:48:06]  Improved gap from 0 to 100
[07/19 15:48:06]  Improved number of small numbers from 46 to 58 out of a max of 100
[07/19 15:48:06]  Verifer returned sat in 0.690350 secs.
[07/19 15:48:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     480.843750     460.843811  229.771118   480.843750    0.094727   460.843811   19.999939       19.999939
1     480.843750     480.796143  229.771118   480.843750   19.952393   480.796143    0.047607      -80.000061
2     680.796143     560.843811  229.771118   680.796143  200.000000   560.843811  119.952332       19.952332
3     759.843811     759.843811  229.771118   759.843811  199.000000   759.843811    0.000000       -1.000000
4     909.343811     857.014669  229.771118   909.343811  149.500000   857.014669   23.829142       20.000000
5     962.264669     933.717183  229.771118   962.264669   76.750000   933.717183    0.047485      -27.079142
6    1148.653870    1060.843811  229.771118  1148.653870  186.436686  1060.843811   20.000000       20.000000
7    1223.872213    1156.014669  229.771118  1223.872213   95.218343  1156.014669    0.047485       -4.781657
8    1373.324727    1160.843994  229.771118  1373.324727  149.500000  1160.843994  119.999817       20.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:48:07]  --------------------------------------------------------------------------------
[07/19 15:48:07]  Iteration: 43 (2 solution, 40 counterexamples)
[07/19 15:48:11]  Generator returned sat in 4.003255 secs.
[07/19 15:48:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:48:11]  Improved gap from 0 to 7.8125
[07/19 15:48:12]  Improved number of small numbers from 52 to 94 out of a max of 100
[07/19 15:48:12]  Verifer returned sat in 0.658832 secs.
[07/19 15:48:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     539.819824     439.796387  229.770996   539.819824    0.094727   439.796387  100.023438        0.023438
1     539.819824     539.796387  229.770996   539.819824    0.047363   539.796387    0.023438      -99.976562
2     759.772461     695.878113  229.770996   759.772461  219.976074   695.878113   63.894348       19.976074
3     759.796204     759.796143  301.958496   759.796204   63.918091   759.796143    0.000061       -7.812683
4     887.632324     867.608643  301.958496   887.632324  127.836182   867.608643   20.000244       20.000000
5     887.632324     879.796387  381.958496   887.632324    2.000000   879.796387    7.812500        0.000000
6     887.632324     887.608887  473.982422   887.632324    4.000000   887.608887    0.000000       -7.976074
7     895.632324     895.585205  557.982422   895.632324    8.000000   895.585205    0.023682      -15.976074
8     911.608643     911.585205  650.169678   911.608643   16.000000   911.585205    0.000000       -7.812500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:12]  --------------------------------------------------------------------------------
[07/19 15:48:12]  Iteration: 44 (2 solution, 41 counterexamples)
[07/19 15:48:14]  Generator returned sat in 1.298003 secs.
[07/19 15:48:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:48:14]  Improved gap from 1/400 to 0
[07/19 15:48:14]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:48:14]  Verifer returned sat in 0.174134 secs.
[07/19 15:48:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     559.796387     439.796387  221.958496   559.796387    0.094727   439.796387  120.000000       20.000000
1     559.796387     559.749023  301.958496   559.796387    0.047363   559.749023    0.047363        0.000000
2     679.749023     559.796387  301.958496   679.749023  120.000000   559.796387  119.952637       19.952637
3     760.296387     759.796387  301.958496   760.296387  200.500000   759.796387    0.500000        0.500000
4     760.296387     760.249023  401.053223   760.296387    0.500000   760.249023    0.047363       -0.405273
5     760.749023     760.701660  500.600586   760.749023    0.500000   760.701660    0.047363       -0.405273
6     761.201660     761.154297  600.147949   761.201660    0.500000   761.154297    0.047363       -0.405273
7     761.654297     761.606934  700.100586   761.654297    0.500000   761.606934    0.047363        0.000000
8     762.106934     761.654297  700.100586   762.106934    0.500000   761.654297    0.452637      -99.547363
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:48:15]  --------------------------------------------------------------------------------
[07/19 15:48:15]  Iteration: 45 (2 solution, 42 counterexamples)
[07/19 15:48:18]  Generator returned sat in 2.228113 secs.
[07/19 15:48:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:48:18]  Improved gap from 193/8192 to 0
[07/19 15:48:18]  Improved number of small numbers from 57 to 100 out of a max of 100
[07/19 15:48:18]  Verifer returned sat in 0.337790 secs.
[07/19 15:48:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     620.143799     500.143799  221.958252   620.143799    0.094482   500.143799  120.000000       20.000000
1     620.143799     620.120361  301.958252   620.143799    0.046875   620.120361    0.023438        0.000000
2     740.120361     620.144043  301.958252   740.120361  120.000000   620.144043  119.976318       19.976562
3     820.167480     819.167236  301.958252   820.167480  200.023438   819.167236    1.000244        0.023682
4     820.167480     820.143799  401.934570   820.167480    1.000000   820.143799    0.023682        0.000000
5     821.143799     821.120117  500.958252   821.143799    1.000000   821.120117    0.023682        0.000000
6     822.120117     822.096924  599.029053   822.120117    1.000000   822.096924    0.023193       -0.952881
7     823.096924     823.072998  698.029053   823.096924    1.000000   823.072998    0.023926       -0.976074
8     824.072998     824.072998  798.005127   824.072998    1.000000   824.072998    0.000000       -0.023926
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:48:18]  --------------------------------------------------------------------------------
[07/19 15:48:18]  Iteration: 46 (2 solution, 43 counterexamples)
[07/19 15:48:20]  Generator returned sat in 1.087833 secs.
[07/19 15:48:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:48:20]  Improved gap from 387/8192 to 43.75
[07/19 15:48:21]  Improved number of small numbers from 33 to 50 out of a max of 100
[07/19 15:48:21]  Verifer returned sat in 0.821552 secs.
[07/19 15:48:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     716.322998     596.323242  125.779053   716.322998    0.094482   596.323242  119.999756       20.000000
1     716.322998     696.322998  182.028931   716.322998    0.047363   696.322998   20.000000      -23.750122
2     740.120117     740.073120  182.028931   740.120117   43.797119   740.073120    0.046997      -99.953003
3     980.167603     940.073120  182.028931   980.167603  240.094482   940.073120   20.000000       20.000000
4    1080.214844    1021.370361  182.028931  1080.214844  120.047241  1021.370361   38.702759       20.000000
5    1101.535706    1040.073120  238.278931  1101.535706   60.023621  1040.073120   41.320862       -2.429138
6    1121.238464    1083.823120  294.528931  1121.238464   61.023621  1083.823120   17.273621      -26.476379
7    1165.988464    1127.573120  350.778809  1165.988464   62.023621  1127.573120   18.273621      -25.476501
8    1210.738464    1171.323242  350.779053  1210.738464   63.023621  1171.323242   19.273499      -80.726257
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:21]  --------------------------------------------------------------------------------
[07/19 15:48:21]  Iteration: 47 (2 solution, 44 counterexamples)
[07/19 15:48:22]  Generator returned sat in 0.365701 secs.
[07/19 15:48:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:48:22]  Improved gap from 387/16384 to 43.75
[07/19 15:48:22]  Improved number of small numbers from 37 to 100 out of a max of 100
[07/19 15:48:22]  Verifer returned sat in 0.322383 secs.
[07/19 15:48:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     622.606201     502.606445  125.778809   622.606201    0.094482   502.606445  119.999756       20.000000
1     622.606201     602.606201  182.028809   622.606201  119.952881   602.606201   20.000000      -23.750000
2     766.308838     727.356201  182.028809   766.308838  163.702637   727.356201   38.952637       19.952637
3     846.403564     846.356201  182.028809   846.403564  119.047363   846.356201    0.047363        0.047363
4     966.403564     946.356201  182.028809   966.403564  120.047363   946.356201   20.000000       20.000000
5    1008.427246     946.356201  219.576172  1008.427246   62.023682   946.356201   62.023682       -0.428955
6    1009.427246    1008.808838  275.826172  1009.427246   63.023682  1008.808838    0.571045      -43.178955
7    1072.879883    1052.558838  332.076172  1072.879883   64.023682  1052.558838   20.273682      -23.476318
8    1117.629883    1096.308838  332.076172  1117.629883   65.023682  1096.308838   21.273682      -78.726318
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:23]  --------------------------------------------------------------------------------
[07/19 15:48:23]  Iteration: 48 (2 solution, 45 counterexamples)
[07/19 15:48:25]  Generator returned sat in 1.622568 secs.
[07/19 15:48:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:48:25]  Improved gap from 1/800 to 23.4375
[07/19 15:48:26]  Improved number of small numbers from 59 to 68 out of a max of 100
[07/19 15:48:26]  Verifer returned sat in 0.826250 secs.
[07/19 15:48:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     793.483643     793.481338  131.853672   793.483643    0.094238   793.481338    0.002305        0.002305
1     913.483838     793.481445  131.853672   913.483838  120.002500   793.481445  119.999893       20.000000
2     913.483838     893.481338  143.013672   913.483838  119.997500   893.481338   20.000000      -68.840000
3    1082.326338    1082.321338  143.013672  1082.326338  188.842500  1082.321338    0.002500        0.002500
4    1605.428838    1182.321338  143.013672  1605.428838  523.105000  1182.321338   20.000000       20.000000
5    1605.428838    1182.321338  219.576172  1605.428838    0.010000  1182.321338   20.000000       -3.437500
6    1730.868838    1205.759033  219.576172  1730.868838  145.440000  1205.759033  119.999805       20.000000
7    1730.868838    1308.881338  293.016172  1730.868838    0.010000  1308.881338   16.877500       -6.560000
8    1778.291338    1332.318848  293.016357  1778.291338   64.300000  1332.318848   40.862490      -59.137314
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:48:26]  --------------------------------------------------------------------------------
[07/19 15:48:26]  Iteration: 49 (2 solution, 46 counterexamples)
[07/19 15:48:34]  Generator returned sat in 7.200328 secs.
[07/19 15:48:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:48:34]  Improved number of small numbers from 48 to 99 out of a max of 99
[07/19 15:48:34]  Verifer returned sat in 0.279349 secs.
[07/19 15:48:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0     802.321289     754.353027  143.013184   802.321289    0.094238   754.353027   47.968262       19.999756
1     902.333252     859.321533  143.013184   902.333252  147.980225   859.321533   43.000000       20.000000
2     902.333252     882.321533  143.013184   902.333252    0.011963   882.321533   20.000000      -80.000000
3    1102.344971    1052.673340  143.013184  1102.344971  220.011719  1052.673340   49.648193       20.000000
4    1202.356934    1154.329346  143.013184  1202.356934  149.660156  1154.329346   47.992188       20.000000
5    1302.368652    1282.321533  143.013184  1302.368652  148.003906  1282.321533   20.000000       20.000000
6    1482.868652    1352.113281  143.013184  1482.868652  200.500000  1352.113281   50.208252       20.000000
7    1582.880371    1452.649658  143.013184  1582.880371  150.219971  1452.649658   49.671875       20.000000
8    1682.868652    1482.321533  143.013184  1682.868652  149.660156  1482.321533  119.988281       19.988281
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/19 15:48:35]  --------------------------------------------------------------------------------
[07/19 15:48:35]  Iteration: 50 (2 solution, 47 counterexamples)
[07/19 15:48:36]  Generator returned sat in 0.458243 secs.
[07/19 15:48:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:48:37]  Improved number of small numbers from 53 to 57 out of a max of 99
[07/19 15:48:37]  Verifer returned sat in 0.758205 secs.
[07/19 15:48:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1023.205566    1003.205605  143.012939  1023.205566    0.093994  1003.205605   19.999961       19.999717
1    1103.205605    1103.205605  143.013184  1103.205605  100.000000  1103.205605    0.000000        0.000000
2    1303.658486    1103.205605  143.013184  1303.658486  200.452881  1103.205605  120.000000       20.000000
3    1403.752725    1283.268431  143.013184  1403.752725  220.094238  1283.268431   39.937174       20.000000
4    1503.846963    1403.205605  143.013184  1503.846963  140.031413  1403.205605   20.000000       20.000000
5    1633.846963    1503.205605  143.013184  1633.846963  150.000000  1503.205605   20.000000       20.000000
6    1813.846963    1603.205605  143.013184  1813.846963  200.000000  1603.205605   20.000000       20.000000
7    1953.815550    1703.205605  143.013184  1953.815550  159.968587  1703.205605   20.000000       20.000000
8    2083.815550    1703.205811  143.013184  2083.815550  150.000000  1703.205811  119.999795       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/19 15:48:37]  --------------------------------------------------------------------------------
[07/19 15:48:37]  Iteration: 51 (2 solution, 48 counterexamples)
[07/19 15:48:39]  Generator returned sat in 1.593835 secs.
[07/19 15:48:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:48:40]  Improved gap from 0 to 9.375
[07/19 15:48:40]  Improved number of small numbers from 53 to 100 out of a max of 100
[07/19 15:48:40]  Verifer returned sat in 0.656993 secs.
[07/19 15:48:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1415.353760    1315.353760 -256.502930  1415.353760    0.093750  1315.353760  100.000000        0.000244
1    1415.353760    1415.353760 -256.502930  1415.353760    0.047119  1415.353760    0.000000      -99.999756
2    1635.306885    1515.353760 -256.502930  1635.306885  219.953125  1515.353760  119.953125       19.953369
3    1691.353760    1615.353760 -232.503174  1691.353760  176.000000  1615.353760   76.000000        0.000000
4    1705.353760    1695.978760 -146.503174  1705.353760   90.000000  1695.978760    9.375000        0.000000
5    1742.978760    1742.931885  -94.784180  1742.978760   47.000000  1742.931885    0.046875      -10.656006
6    1768.431885    1753.634766   -9.581299  1768.431885   25.500000  1753.634766   14.797119        0.000000
7    1768.431885    1768.431885   81.043701  1768.431885   14.750000  1768.431885    0.000000       -9.375000
8    1777.806885    1777.806885  171.668701  1777.806885    9.375000  1777.806885    0.000000       -9.375000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:48:40]  --------------------------------------------------------------------------------
[07/19 15:48:40]  Iteration: 52 (2 solution, 49 counterexamples)
[07/19 15:48:42]  Generator returned sat in 1.338909 secs.
[07/19 15:48:42]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:48:43]  Improved gap from 0 to 4.6875
[07/19 15:48:43]  Improved number of small numbers from 55 to 68 out of a max of 100
[07/19 15:48:43]  Verifer returned sat in 0.759874 secs.
[07/19 15:48:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    1290.395996    1290.393551 -131.545465  1290.395996    0.093750  1290.393551   0.002445       -0.000055
1    1410.398551    1390.395996 -131.545465  1410.398551  120.005000  1390.395996  20.000055       20.000000
2    1410.398551    1390.396051  -82.887939  1410.398551    0.002686  1390.396051  20.000000      -31.342474
3    1441.743551    1441.738551   12.424535  1441.743551   51.345000  1441.738551   0.002500       -4.685000
4    1546.431051    1546.426051   12.424535  1546.431051  104.690000  1546.426051   0.002500        0.002500
5    1757.808551    1641.738525   12.424535  1757.808551  211.380000  1641.738525  24.687526       20.000000
6    1757.808551    1661.738525   92.424535  1757.808551    0.010000  1661.738525   4.687526        0.000000
7    1757.808551    1666.426051  187.736816  1757.808551    2.020000  1666.426051   0.000000       -4.687718
8    1763.848551    1671.113770  283.049316  1763.848551    6.040000  1671.113770   1.352282       -3.335218
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:43]  --------------------------------------------------------------------------------
[07/19 15:48:43]  Iteration: 53 (2 solution, 50 counterexamples)
[07/19 15:48:46]  Generator returned sat in 2.358200 secs.
[07/19 15:48:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:48:47]  Improved gap from 751/614400 to 1.5625
[07/19 15:48:47]  Improved number of small numbers from 52 to 100 out of a max of 100
[07/19 15:48:47]  Verifer returned sat in 0.302462 secs.
[07/19 15:48:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    1290.395752    1290.393555   38.174072  1290.395752    0.093750  1290.393555   0.002197       -0.000488
1    1410.398682    1390.396240   38.174072  1410.398682  120.005127  1390.396240  20.000000       20.000000
2    1410.398682    1390.396240   91.736816  1410.398682    0.001221  1390.396240  20.000000      -26.437256
3    1536.835938    1509.395020   91.736816  1536.835938  146.437256  1509.395020  27.438477        0.000000
4    1656.834717    1608.397461   91.736816  1656.834717  147.437256  1608.397461  48.434814       19.998779
5    1756.837158    1736.833496   91.736816  1756.837158  148.437256  1736.833496  20.000000       20.000000
6    1756.837158    1755.270996  171.736816  1756.837158    1.000000  1755.270996   1.562500        0.000000
7    1757.274658    1756.833496  270.174072  1757.274658    2.000000  1756.833496   0.437500       -1.125244
8    1759.837158    1758.396240  270.174316  1759.837158    3.000000  1758.396240   1.437256      -98.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:47]  --------------------------------------------------------------------------------
[07/19 15:48:47]  Iteration: 54 (2 solution, 51 counterexamples)
[07/19 15:48:49]  Generator returned sat in 0.961072 secs.
[07/19 15:48:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:48:49]  Improved gap from 9/16 to 0
[07/19 15:48:49]  Improved number of small numbers from 25 to 100 out of a max of 100
[07/19 15:48:49]  Verifer returned sat in 0.504435 secs.
[07/19 15:48:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1385.406738    1385.406494   38.174072  1385.406738    0.093506  1385.406494    0.000244      -99.999756
1    1605.406738    1585.406494   38.174072  1605.406738  220.000244  1585.406494   20.000000       20.000000
2    1605.406738    1585.406494   38.174072  1605.406738    0.000977  1585.406494   20.000000      -80.000000
3    1704.407227    1704.406494  119.173584  1704.407227  119.000488  1704.406494    0.000488        0.000000
4    1823.907227    1804.406982  119.173584  1823.907227  119.500488  1804.406982   19.500000       19.500000
5    1924.407715    1804.406982  119.173584  1924.407715  120.000488  1804.406982  120.000000       20.000000
6    1924.407715    1924.406494  199.173584  1924.407715    0.500000  1924.406494    0.000488        0.000000
7    1925.407227    1924.406982  297.673828  1925.407227    1.000000  1924.406982    0.999512       -0.500244
8    1925.907715    1925.906738  297.673828  1925.907715    1.500000  1925.906738    0.000244      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:50]  --------------------------------------------------------------------------------
[07/19 15:48:50]  Iteration: 55 (2 solution, 52 counterexamples)
[07/19 15:48:53]  Generator returned sat in 2.325991 secs.
[07/19 15:48:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:48:53]  Improved gap from 0 to 100
[07/19 15:48:54]  Improved number of small numbers from 26 to 38 out of a max of 100
[07/19 15:48:54]  Verifer returned sat in 1.023372 secs.
[07/19 15:48:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1196.819092    1196.772217  326.761597  1196.819092    0.093506  1196.772217    0.046875        0.000122
1    1196.819092    1196.819092  326.761597  1196.819092    0.046631  1196.819092    0.000000      -99.999878
2    1296.865723    1296.818970  326.761597  1296.865723  100.046631  1296.818970    0.046753      -99.953247
3    1605.663127    1461.943644  326.761597  1605.663127  308.844157  1461.943644   54.875326       20.000000
4    1705.709880    1565.269185  326.761597  1705.709880  154.922078  1565.269185   51.549784       20.000000
5    1732.121134    1643.183472  326.761597  1732.121134   77.961039  1643.183472    0.046753      -53.588745
6    1905.756632    1796.818970  326.761597  1905.756632  173.682251  1796.818970   20.000000       20.000000
7    1973.097758    1884.113342  326.761597  1973.097758   87.341125  1884.113342    0.046753      -12.658875
8    2132.973083    1896.819092  326.761597  2132.973083  159.922078  1896.819092  119.999878       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:48:54]  --------------------------------------------------------------------------------
[07/19 15:48:54]  Iteration: 56 (2 solution, 53 counterexamples)
[07/19 15:48:57]  Generator returned sat in 2.050456 secs.
[07/19 15:48:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:48:57]  Improved gap from 383/8192 to 1.5625
[07/19 15:48:58]  Improved number of small numbers from 44 to 74 out of a max of 100
[07/19 15:48:58]  Verifer returned sat in 0.778539 secs.
[07/19 15:48:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1669.148926    1549.196045  260.947266  1669.148926    0.093262  1549.196045  119.952881       19.952962
1    1669.148926    1649.196045  260.947266  1669.148926    0.046631  1649.196045   19.952881      -80.047038
2    1869.149170    1849.195882  260.947266  1869.149170  219.953125  1849.195882   19.953288       19.953206
3    1902.688883    1902.642090  260.947510  1902.688883   53.493001  1902.642090    0.046794      -46.506836
4    1983.381592    1981.819132  326.761597  1983.381592   80.739502  1981.819132    1.562459       -0.000041
5    2103.428385    2081.819092  326.761597  2103.428385  121.609253  2081.819092   21.562541       20.000000
6    2103.428385    2101.819092  406.761597  2103.428385    0.500000  2101.819092    1.562541        0.000000
7    2103.428385    2103.381632  505.198975  2103.428385    1.250000  2103.381632    0.000000       -1.562622
8    2105.803385    2104.944336  505.198975  2105.803385    2.375000  2104.944336    0.812297      -99.187622
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:48:58]  --------------------------------------------------------------------------------
[07/19 15:48:58]  Iteration: 57 (2 solution, 54 counterexamples)
[07/19 15:49:03]  Generator returned sat in 4.499567 secs.
[07/19 15:49:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:49:04]  Improved gap from 1/400 to 1.5625
[07/19 15:49:04]  Improved number of small numbers from 60 to 98 out of a max of 100
[07/19 15:49:04]  Verifer returned sat in 0.643230 secs.
[07/19 15:49:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1671.076904    1551.077148  180.947510  1671.076904    0.093262  1551.077148  119.999756       20.000000
1    1671.076904    1651.076904  260.947510  1671.076904    0.001465  1651.076904   20.000000        0.000000
2    1791.078125    1671.077148  260.947510  1791.078125  140.001221  1671.077148  119.999756       20.000000
3    1791.078125    1791.075684  320.884766  1791.078125  118.563965  1791.075684    0.001221      -20.062744
4    1911.140869    1909.576904  320.884766  1911.140869  120.063965  1909.576904    1.562744        0.000000
5    2031.142090    2011.139404  320.884766  2031.142090  121.563965  2011.139404   20.000244       20.000000
6    2031.142090    2029.577148  400.884766  2031.142090    0.010000  2029.577148    1.562500        0.000000
7    2031.142090    2031.139648  497.875000  2031.142090    1.510000  2031.139648    0.000000       -3.009766
8    2034.152090    2034.149414  497.875000  2034.152090    3.010000  2034.149414    0.000234      -99.999766
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:49:04]  --------------------------------------------------------------------------------
[07/19 15:49:04]  Iteration: 58 (2 solution, 55 counterexamples)
[07/19 15:49:09]  Generator returned sat in 3.978117 secs.
[07/19 15:49:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:49:09]  Verifer returned unsat in 0.083082 secs.
[07/19 15:49:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:49:09]  --------------------------------------------------------------------------------
[07/19 15:49:09]  Iteration: 59 (3 solution, 55 counterexamples)
[07/19 15:49:12]  Generator returned sat in 1.732664 secs.
[07/19 15:49:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:49:12]  Improved gap from 1/1600 to 1.5625
[07/19 15:49:12]  Improved number of small numbers from 79 to 85 out of a max of 100
[07/19 15:49:12]  Verifer returned sat in 0.523117 secs.
[07/19 15:49:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    1591.076660    1551.077148  260.947266  1591.076660    0.093262  1551.077148  39.999512       19.999512
1    1591.076660    1591.076416  260.947266  1591.076660    0.001221  1591.076416   0.000244      -80.000488
2    1771.076904    1769.514404  260.947510  1771.076904  180.000488  1769.514404   1.562500        0.000000
3    2177.516904    1871.076904  260.947510  2177.516904  408.002500  1871.076904  20.000000       20.000000
4    2361.518154    1971.076904  260.947510  2361.518154  204.001250  1971.076904  20.000000       20.000000
5    2443.518779    2071.076660  260.947510  2443.518779  102.000625  2071.076660   2.000869        2.000625
6    2443.518779    2071.076904  358.946885  2443.518779    2.000000  2071.076904   2.000625        0.000000
7    2443.518779    2073.077529  457.384277  2443.518779    2.000000  2073.077529   0.000000       -1.562607
8    2445.518779    2074.640137  476.384521  2445.518779    2.000000  2074.640137   0.437393      -80.562363
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:49:13]  --------------------------------------------------------------------------------
[07/19 15:49:13]  Iteration: 60 (3 solution, 56 counterexamples)
[07/19 15:49:15]  Generator returned sat in 1.690758 secs.
[07/19 15:49:15]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:49:15]  Improved gap from 0 to 4.6875
[07/19 15:49:16]  Improved number of small numbers from 59 to 79 out of a max of 100
[07/19 15:49:16]  Verifer returned sat in 0.698322 secs.
[07/19 15:49:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1707.846191    1607.843750  186.282715  1707.846191    0.093018  1607.843750  100.002441        0.002826
1    1707.846191    1707.843506  186.282715  1707.846191    0.002686  1707.843506    0.002686      -99.997174
2    1807.846191    1807.843571  260.947510  1807.846191  100.002686  1807.843571    0.002620      -25.332380
3    1953.178571    1833.178571  260.947510  1953.178571  145.335000  1833.178571  120.000000       20.000000
4    2053.181071    2033.178467  260.947510  2053.181071  220.002500  2033.178467   20.000104       20.000000
5    2053.181071    2048.490967  340.947510  2053.181071    0.010000  2048.490967    4.687604        0.000000
6    2053.181071    2053.178571  436.259766  2053.181071    2.015000  2053.178571    0.000000       -4.687744
7    2058.203571    2058.198571  531.239990  2058.203571    5.022500  2058.198571    0.002500       -4.685020
8    2067.734821    2062.886230  626.393555  2067.734821    9.533750  2062.886230    4.846090       -0.000205
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:49:16]  --------------------------------------------------------------------------------
[07/19 15:49:16]  Iteration: 61 (3 solution, 57 counterexamples)
[07/19 15:49:20]  Generator returned sat in 3.307847 secs.
[07/19 15:49:21]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:49:21]  Improved gap from 0 to 1.5625
[07/19 15:49:21]  Improved number of small numbers from 32 to 100 out of a max of 100
[07/19 15:49:21]  Verifer returned sat in 0.248463 secs.
[07/19 15:49:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    1633.178711    1633.178467  260.947510  1633.178711    0.093018  1633.178467   0.000244        0.000244
1    1753.225098    1707.843506  260.947510  1753.225098  120.046631  1707.843506  45.334961       20.000000
2    1833.271484    1807.843750  260.947510  1833.271484  125.381348  1807.843750  25.381104        0.046387
3    1833.271484    1833.178467  359.385010  1833.271484   25.335205  1833.178467   0.046387       -1.516113
4    1835.225098    1835.178467  457.385010  1835.225098    2.000000  1835.178467   0.000000       -1.562500
5    1837.225098    1836.740967  555.431641  1837.225098    2.000000  1836.740967   0.437500       -1.515869
6    1838.787598    1838.694580  653.431641  1838.787598    2.000000  1838.694580   0.046387       -1.953369
7    1840.741211    1840.694336  751.431641  1840.741211    2.000000  1840.694336   0.000244       -1.999756
8    1842.740967    1842.694336  751.431641  1842.740967    2.000000  1842.694336   0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:49:21]  --------------------------------------------------------------------------------
[07/19 15:49:21]  Iteration: 62 (3 solution, 58 counterexamples)
[07/19 15:49:23]  Generator returned sat in 1.327105 secs.
[07/19 15:49:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:24]  Improved gap from 1/2 to 23.4375
[07/19 15:49:24]  Improved number of small numbers from 37 to 98 out of a max of 100
[07/19 15:49:24]  Verifer returned sat in 0.869932 secs.
[07/19 15:49:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1765.414062    1745.414062  148.711914  1765.414062    0.092773  1745.414062   20.000000       20.000000
1    1865.460693    1745.414062  148.711914  1865.460693  120.046631  1745.414062  120.000000       20.000000
2    1965.414062    1845.414062  148.711914  1965.414062  219.953369  1845.414062  119.953369       19.953369
3    2589.948975    2045.414062  148.711914  2589.948975  744.488281  2045.414062   20.000000       20.000000
4    2942.693115    2142.428467  148.711914  2942.693115  372.744141  2142.428467   22.985596       20.000000
5    3106.579590    2171.431641  148.711914  3106.579590  186.872070  2171.431641   93.982422       20.000000
6    3106.579590    2245.414062  225.274414  3106.579590   93.936035  2245.414062   20.000000       -3.437500
7    3133.547607    2268.851562  301.743896  3133.547607   46.968018  2268.851562   23.530518        0.000000
8    3133.547607    2292.382080  301.744141  3133.547607   23.484009  2292.382080    0.000000      -99.999756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:49:24]  --------------------------------------------------------------------------------
[07/19 15:49:24]  Iteration: 63 (3 solution, 59 counterexamples)
[07/19 15:49:27]  Generator returned sat in 1.460021 secs.
[07/19 15:49:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:27]  Improved gap from 1/2400 to 23.4375
[07/19 15:49:27]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:49:27]  Verifer returned sat in 0.285662 secs.
[07/19 15:49:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1770.322266    1750.322266   -1.473877  1770.322266    0.092773  1750.322266   20.000000       20.000000
1    1773.759766    1750.322266   75.088623  1773.759766   23.437500  1750.322266   23.437500        0.000000
2    1893.806152    1773.759766   75.088623  1893.806152  143.483887  1773.759766  120.000000       20.000000
3    2552.063965    1973.759766   75.088623  2552.063965  778.257812  1973.759766   20.000000       20.000000
4    2922.692871    2073.759766   75.088623  2922.692871  390.628906  2073.759766   20.000000       20.000000
5    3099.507324    2073.759766   75.088623  3099.507324  196.814453  2073.759766  120.000000       20.000000
6    3099.507324    2173.759766  151.651123  3099.507324   99.907227  2173.759766   20.000000       -3.437500
7    3129.460938    2200.275879  225.135010  3129.460938   49.953613  2200.275879   23.437500        0.000000
8    3131.000244    2223.713379  301.697510  3131.000244   24.976807  2223.713379    1.539307      -21.898193
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:49:27]  --------------------------------------------------------------------------------
[07/19 15:49:27]  Iteration: 64 (3 solution, 60 counterexamples)
[07/19 15:49:29]  Generator returned sat in 0.882045 secs.
[07/19 15:49:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:29]  Improved gap from 47953/2048 to 23.4375
[07/19 15:49:30]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:49:30]  Verifer returned sat in 0.356541 secs.
[07/19 15:49:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    1706.322266    1686.322266   62.526123  1706.322266    0.092773  1686.322266   20.000000       20.000000
1    1806.275879    1786.322266   62.526123  1806.275879  119.953613  1786.322266   19.953613       19.953613
2    1906.368652    1786.322266   62.526123  1906.368652  120.046387  1786.322266  120.000000       20.000000
3    2557.626465    1986.322266   62.526123  2557.626465  771.257812  1986.322266   20.000000       20.000000
4    2925.255371    2086.322266   62.526123  2925.255371  387.628906  2086.322266   20.000000       20.000000
5    3101.069824    2112.931152   62.526123  3101.069824  195.814453  2112.931152   93.391113       20.000000
6    3107.585938    2186.322266  136.010010  3107.585938   99.907227  2186.322266   26.516113        0.000000
7    3131.023438    2212.838379  212.572510  3131.023438   49.953613  2212.838379   23.437500        0.000000
8    3132.562744    2236.275879  212.572510  3132.562744   24.976807  2236.275879    1.539307      -98.460693
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=2, measured_loss_rate=0.[0m
[07/19 15:49:30]  --------------------------------------------------------------------------------
[07/19 15:49:30]  Iteration: 65 (3 solution, 61 counterexamples)
[07/19 15:49:32]  Generator returned sat in 1.527337 secs.
[07/19 15:49:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:32]  Verifer returned unsat in 0.070878 secs.
[07/19 15:49:32]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:32]  --------------------------------------------------------------------------------
[07/19 15:49:32]  Iteration: 66 (4 solution, 61 counterexamples)
[07/19 15:49:34]  Generator returned sat in 0.739138 secs.
[07/19 15:49:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:34]  Verifer returned unsat in 0.087268 secs.
[07/19 15:49:34]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:34]  --------------------------------------------------------------------------------
[07/19 15:49:34]  Iteration: 67 (5 solution, 61 counterexamples)
[07/19 15:49:36]  Generator returned sat in 0.679657 secs.
[07/19 15:49:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:36]  Verifer returned unsat in 0.074181 secs.
[07/19 15:49:36]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:36]  --------------------------------------------------------------------------------
[07/19 15:49:36]  Iteration: 68 (6 solution, 61 counterexamples)
[07/19 15:49:38]  Generator returned sat in 0.761715 secs.
[07/19 15:49:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:38]  Verifer returned unsat in 0.071677 secs.
[07/19 15:49:38]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:49:38]  --------------------------------------------------------------------------------
[07/19 15:49:38]  Iteration: 69 (7 solution, 61 counterexamples)
[07/19 15:49:45]  Generator returned sat in 6.063452 secs.
[07/19 15:49:45]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:49:45]  Improved gap from 180889/8192 to 43.75
[07/19 15:49:45]  Improved number of small numbers from 29 to 100 out of a max of 100
[07/19 15:49:45]  Verifer returned sat in 0.416642 secs.
[07/19 15:49:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2888.769287    2788.723145    6.276123  2888.769287    0.092529  2788.723145  100.046143        0.046387
1    2888.769287    2888.723145   62.525879  2888.769287   99.999756  2888.723145    0.046143      -43.703857
2    3014.519531    3014.472900   62.525879  3014.519531  125.796387  3014.472900    0.046631      -17.953613
3    3132.519287    3132.473145   62.525879  3132.519287  118.046387  3132.473145    0.046143        0.046143
4    3252.519531    3232.472900   62.525879  3252.519531  120.046387  3232.472900   20.000244       20.000000
5    3294.542480    3232.473145  100.502930  3294.542480   62.023193  3232.473145   62.022949        0.000000
6    3296.542725    3294.496094  156.322266  3296.542725   64.023193  3294.496094    2.000244      -42.180420
7    3360.565674    3338.676758  212.572021  3360.565674   66.023193  3338.676758   21.842529      -21.907715
8    3406.746338    3382.427002  212.572021  3406.746338   68.023193  3382.427002   24.272949      -75.727051
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:49:46]  --------------------------------------------------------------------------------
[07/19 15:49:46]  Iteration: 70 (7 solution, 62 counterexamples)
[07/19 15:49:51]  Generator returned sat in 4.739770 secs.
[07/19 15:49:51]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:49:51]  Improved gap from 1/400 to 1.5625
[07/19 15:49:52]  Improved number of small numbers from 63 to 79 out of a max of 100
[07/19 15:49:52]  Verifer returned sat in 0.710805 secs.
[07/19 15:49:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2601.214355    2481.214600   76.322266  2601.214355    0.092285  2481.214600  119.999756       19.999788
1    2601.214355    2581.214600   76.322266  2601.214355    0.002686  2581.214600   19.999756      -80.000212
2    2781.214355    2781.212067   76.322266  2781.214355  199.999756  2781.212067    0.002288       -0.000212
3    2854.212900    2854.210400   76.322266  2854.212900   73.000833  2854.210400    0.002500      -27.001667
4    3001.212067    2981.214567   76.322266  3001.212067  147.001667  2981.214567   19.997500       19.997500
5    3276.217900    3081.214355   76.322266  3276.217900  295.003333  3081.214355   20.000212       20.000000
6    3276.217900    3099.651855  156.322266  3276.217900    0.010000  3099.651855    1.562712        0.000000
7    3276.217900    3101.214567  254.759766  3276.217900    1.020000  3101.214567    0.000000       -1.562500
8    3279.257900    3104.254395  254.759766  3279.257900    3.040000  3104.254395    0.000173      -98.522500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:49:52]  --------------------------------------------------------------------------------
[07/19 15:49:52]  Iteration: 71 (7 solution, 63 counterexamples)
[07/19 15:49:55]  Generator returned sat in 2.130942 secs.
[07/19 15:49:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:49:56]  Improved gap from 11/8192 to 1.5625
[07/19 15:49:56]  Improved number of small numbers from 57 to 65 out of a max of 100
[07/19 15:49:56]  Verifer returned sat in 0.706548 secs.
[07/19 15:49:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2601.214355    2481.214567   76.322266  2601.214355    0.092285  2481.214567  119.999788       19.999788
1    2701.215817    2681.214567   76.322266  2701.215817  220.001250  2681.214567   20.000000       20.000000
2    2801.217067    2748.298595   76.322266  2801.217067  120.001250  2748.298595   52.915972       20.000000
3    2801.218317    2781.214567  156.320801  2801.218317   52.917222  2781.214567   20.001250       -0.000215
4    2861.592900    2860.027900  195.946432  2861.592900   80.375833  2860.027900    1.562500        0.000000
5    2981.594150    2861.590576  195.946432  2981.594150  121.563750  2861.590576  119.999824       20.000000
6    2981.594150    2980.027832  275.946432  2981.594150    0.010000  2980.027832    1.562568        0.000000
7    2981.594150    2981.590400  374.383932  2981.594150    1.015000  2981.590400    0.000000       -1.562500
8    2984.116650    2983.152900  472.821289  2984.116650    2.522500  2983.152900    0.960000       -0.602643
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:49:56]  --------------------------------------------------------------------------------
[07/19 15:49:56]  Iteration: 72 (7 solution, 64 counterexamples)
[07/19 15:50:02]  Generator returned sat in 5.133604 secs.
[07/19 15:50:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:50:03]  Improved gap from 0 to 7.8125
[07/19 15:50:03]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/19 15:50:03]  Verifer returned sat in 0.389723 secs.
[07/19 15:50:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2383.467285    2263.467529   76.322266  2383.467285    0.092041  2263.467529  119.999756       20.000000
1    2483.421143    2363.467285   76.322266  2483.421143  219.953613  2363.467285  119.953857       19.953857
2    2483.421143    2463.467285  108.276123  2483.421143    0.045898  2463.467285   19.953857      -48.092285
3    2651.467285    2556.421387  108.276123  2651.467285  188.000000  2556.421387   95.045898       19.953857
4    2651.467285    2631.513428  188.322021  2651.467285   95.000000  2631.513428   19.953857       -0.000244
5    2680.013428    2679.967285  248.150879  2680.013428   48.500000  2679.967285    0.046143      -11.625244
6    2705.217285    2691.638672  334.572266  2705.217285   25.250000  2691.638672   13.578613        0.000000
7    2705.263672    2705.217529  426.759521  2705.263672   13.625000  2705.217529    0.046143       -7.766357
8    2713.030029    2713.030029  426.759521  2713.030029    7.812500  2713.030029    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:50:03]  --------------------------------------------------------------------------------
[07/19 15:50:03]  Iteration: 73 (7 solution, 65 counterexamples)
[07/19 15:50:09]  Generator returned sat in 5.078655 secs.
[07/19 15:50:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:50:09]  Verifer returned unsat in 0.062387 secs.
[07/19 15:50:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:50:09]  --------------------------------------------------------------------------------
[07/19 15:50:09]  Iteration: 74 (8 solution, 65 counterexamples)
[07/19 15:50:12]  Generator returned sat in 1.801402 secs.
[07/19 15:50:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:50:12]  Improved gap from 0 to 4.6875
[07/19 15:50:13]  Improved number of small numbers from 45 to 61 out of a max of 100
[07/19 15:50:13]  Verifer returned sat in 0.650643 secs.
[07/19 15:50:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2354.513184    2257.467773  105.276123  2354.513184    0.091797  2257.467773   97.045410       19.999756
1    2454.467529    2334.513428  105.276123  2454.467529  196.999756  2334.513428  119.954102       19.954102
2    2454.467529    2454.421387  180.680420  2454.467529    0.046143  2454.421387    0.046143       -4.641602
3    2523.577067    2518.889567  216.212484  2523.577067   69.155680  2518.889567    4.687500        0.000000
4    2623.623088    2623.577067  216.212484  2623.623088  104.733521  2623.577067    0.046021        0.046021
5    2781.677348    2623.577148  216.212484  2781.677348  158.100281  2623.577148  119.999919       20.000000
6    2781.677348    2738.889404  296.212484  2781.677348    1.500000  2738.889404    4.687663        0.000000
7    2781.677348    2743.577067  391.524902  2781.677348    3.250000  2743.577067    0.000000       -4.687581
8    2787.552348    2748.264648  486.837402  2787.552348    5.875000  2748.264648    1.187419       -3.500081
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:50:13]  --------------------------------------------------------------------------------
[07/19 15:50:13]  Iteration: 75 (8 solution, 66 counterexamples)
[07/19 15:50:25]  Generator returned sat in 11.111877 secs.
[07/19 15:50:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:26]  Improved gap from 9/400 to 0
[07/19 15:50:26]  Improved number of small numbers from 54 to 92 out of a max of 100
[07/19 15:50:26]  Verifer returned sat in 0.856455 secs.
[07/19 15:50:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2134.222168    2014.222412  217.942383  2134.222168    0.091797  2014.222412  119.999756       20.000000
1    2134.222168    2114.222168  217.942383  2134.222168  119.998535  2114.222168   20.000000      -80.000000
2    2314.222168    2314.220947  217.942383  2314.222168  200.000000  2314.220947    0.001221        0.000000
3    2434.220947    2334.223389  217.942383  2434.220947  120.000000  2334.223389   99.997559       19.998779
4    2514.223389    2514.222168  217.942383  2514.223389  180.000000  2514.222168    0.001221        0.001221
5    2784.222168    2614.222168  217.942383  2784.222168  270.000000  2614.222168   20.000000       20.000000
6    2784.222168    2634.208514  297.942383  2784.222168    0.010000  2634.208514    0.013653        0.000000
7    2784.223514    2634.222264  397.940918  2784.223514    0.015000  2634.222264    0.001250       -0.000118
8    2784.244764    2634.223633  497.919678  2784.244764    0.022500  2634.223633    0.021132       -0.000109
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:50:26]  --------------------------------------------------------------------------------
[07/19 15:50:26]  Iteration: 76 (8 solution, 67 counterexamples)
[07/19 15:50:31]  Generator returned sat in 3.276986 secs.
[07/19 15:50:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:31]  Improved gap from 0 to 100
[07/19 15:50:31]  Improved number of small numbers from 61 to 100 out of a max of 100
[07/19 15:50:31]  Verifer returned sat in 0.337371 secs.
[07/19 15:50:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2465.120361    2345.120605  217.942139  2465.120361    0.091797  2345.120605  119.999756       19.999756
1    2465.120361    2445.120605  217.942139  2465.120361    0.045654  2445.120605   19.999756      -80.000244
2    2645.120605    2545.120605  217.942139  2645.120605  200.000000  2545.120605  100.000000        0.000000
3    2784.212402    2745.120605  217.942139  2784.212402  239.091797  2745.120605   20.000000       20.000000
4    2884.258301    2831.340576  217.942139  2884.258301  120.045898  2831.340576   33.780029       20.000000
5    2911.001221    2891.817871  217.942139  2911.001221   60.522949  2891.817871    0.045654      -53.257080
6    3084.304199    3033.429443  217.942139  3084.304199  173.348633  3033.429443   31.691162       20.000000
7    3139.787354    3120.557861  217.942139  3139.787354   87.174316  3120.557861    0.045898      -24.516846
8    3284.350098    3145.120605  217.942139  3284.350098  144.608643  3145.120605  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:50:31]  --------------------------------------------------------------------------------
[07/19 15:50:31]  Iteration: 77 (8 solution, 68 counterexamples)
[07/19 15:50:33]  Generator returned sat in 1.033123 secs.
[07/19 15:50:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:34]  Improved number of small numbers from 85 to 93 out of a max of 99
[07/19 15:50:34]  Verifer returned sat in 0.362642 secs.
[07/19 15:50:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2464.120361    2345.120361  217.941895  2464.120361    0.091797  2345.120361  119.000000       19.999756
1    2464.120361    2445.120361  217.941895  2464.120361    0.022949  2445.120361   19.000000      -80.000244
2    2645.120361    2544.120605  217.941895  2645.120361  200.000000  2544.120605  100.999756        0.999756
3    2784.212402    2744.097656  217.941895  2784.212402  240.091797  2744.097656   20.022949       20.000000
4    2884.235352    2830.802734  217.941895  2884.235352  120.045898  2830.802734   33.317871       20.000000
5    2910.940430    2890.802572  217.941895  2910.940430   60.022949  2890.802572    0.023112      -53.294922
6    3084.258301    3033.395264  217.941895  3084.258301  173.340983  3033.395264   30.725342       20.000000
7    3140.203451    3120.020020  217.941895  3140.203451   86.670492  3120.020020    0.045736      -24.054850
8    3284.766357    3144.120605  217.941895  3284.766357  144.608643  3144.120605  120.000000       20.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/19 15:50:34]  --------------------------------------------------------------------------------
[07/19 15:50:34]  Iteration: 78 (8 solution, 69 counterexamples)
[07/19 15:50:37]  Generator returned sat in 1.325872 secs.
[07/19 15:50:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:37]  Verifer returned unsat in 0.062599 secs.
[07/19 15:50:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:37]  --------------------------------------------------------------------------------
[07/19 15:50:37]  Iteration: 79 (9 solution, 69 counterexamples)
[07/19 15:50:40]  Generator returned sat in 2.344089 secs.
[07/19 15:50:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:40]  Improved gap from 1/400 to 0
[07/19 15:50:41]  Improved number of small numbers from 55 to 91 out of a max of 100
[07/19 15:50:41]  Verifer returned sat in 0.697651 secs.
[07/19 15:50:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    2504.249756    2484.249756  177.812500  2504.249756    0.091553  2484.249756  20.000000       19.999756
1    2504.249756    2484.250000  177.812500  2504.249756    0.002686  2484.250000  19.999756      -80.000244
2    2704.247314    2684.249756  177.812500  2704.247314  219.997314  2684.249756  19.997559       19.997314
3    2784.249756    2704.247314  177.812744  2784.249756  100.000000  2704.247314  80.002441        0.000000
4    2904.247314    2884.249756  177.812744  2904.247314  200.000000  2884.249756  19.997559       19.997559
5    3284.249756    2984.249756  177.812744  3284.249756  400.000000  2984.249756  20.000000       20.000000
6    3284.249756    3004.247467  257.812533  3284.249756    0.010000  3004.247467   0.002288       -0.000212
7    3284.267467    3004.249967  357.794922  3284.267467    0.020000  3004.249967   0.017500       -0.000111
8    3284.289967    3004.267578  357.794922  3284.289967    0.040000  3004.267578   0.022389      -99.977611
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:50:41]  --------------------------------------------------------------------------------
[07/19 15:50:41]  Iteration: 80 (9 solution, 70 counterexamples)
[07/19 15:50:46]  Generator returned sat in 3.449609 secs.
[07/19 15:50:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:46]  Improved gap from 1/800 to 6.25
[07/19 15:50:47]  Improved number of small numbers from 52 to 98 out of a max of 100
[07/19 15:50:47]  Verifer returned sat in 0.866316 secs.
[07/19 15:50:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    3154.886963    3154.886719  254.539551  3154.886963    0.091309  3154.886719    0.000244        0.000244
1    3161.136719    3154.886719  348.289551  3161.136719    6.250000  3154.886719    6.250000        0.000000
2    3261.136719    3179.626221  348.289551  3261.136719  106.250000  3179.626221   81.510498        0.000000
3    3381.091064    3280.312744  348.289551  3381.091064  201.464844  3280.312744  100.778320       19.954346
4    3381.091064    3361.136963  428.335205  3381.091064  100.732422  3361.136963   19.954102        0.000000
5    3411.503174    3411.457275  491.718994  3411.503174   50.366211  3411.457275    0.045898       -6.204102
6    3436.640381    3436.594482  566.581787  3436.640381   25.183105  3436.594482    0.045898       -6.204102
7    3449.186035    3442.844727  660.240234  3449.186035   12.591553  3442.844727    6.341309        0.000000
8    3449.186035    3449.186035  753.990234  3449.186035    6.295776  3449.186035    0.000000       -6.250000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:50:47]  --------------------------------------------------------------------------------
[07/19 15:50:47]  Iteration: 81 (9 solution, 71 counterexamples)
[07/19 15:50:53]  Generator returned sat in 4.912715 secs.
[07/19 15:50:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:50:53]  Improved gap from 0 to 1.5625
[07/19 15:50:53]  Improved number of small numbers from 52 to 98 out of a max of 100
[07/19 15:50:53]  Verifer returned sat in 0.617268 secs.
[07/19 15:50:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    3019.237305    2999.237305  410.188965  3019.237305    0.091309  2999.237305   20.000000       20.000000
1    3119.191650    3099.237305  410.188965  3119.191650  119.954346  3099.237305   19.954346       19.954346
2    3219.191650    3099.237549  410.188965  3219.191650  119.954346  3099.237549  119.954102       19.954346
3    3219.191650    3219.145996  410.188965  3219.191650   90.068481  3219.145996    0.045654      -80.045654
4    3399.282959    3399.237305  410.188965  3399.282959  180.136963  3399.237305    0.045654        0.045654
5    3759.511230    3497.675049  410.188965  3759.511230  360.273926  3497.675049   21.562256       20.000000
6    3759.511230    3517.674805  490.188965  3759.511230    0.500000  3517.674805    1.562500        0.000000
7    3759.511230    3519.237305  588.626465  3759.511230    1.000000  3519.237305    0.000000       -1.562500
8    3761.511230    3520.799805  588.626465  3761.511230    2.000000  3520.799805    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:50:54]  --------------------------------------------------------------------------------
[07/19 15:50:54]  Iteration: 82 (9 solution, 72 counterexamples)
[07/19 15:51:02]  Generator returned sat in 7.445264 secs.
[07/19 15:51:02]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:51:03]  Improved gap from 0 to 1.5625
[07/19 15:51:03]  Improved number of small numbers from 88 to 88 out of a max of 100
[07/19 15:51:03]  Verifer returned sat in 0.430211 secs.
[07/19 15:51:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   queue_t  bottle_queue_t
0    2999.345703    2979.345703  430.080811  2999.345703    0.091309  2979.345703  20.00000        20.00000
1    2999.345703    2979.345703  430.080811  2999.345703   19.968750  2979.345703  20.00000       -80.00000
2    3099.300049    3099.300049  508.563965  3099.300049  119.954346  3099.300049   0.00000        -1.56250
3    3187.912549    3187.912549  508.563965  3187.912549   88.612500  3187.912549   0.00000       -12.95000
4    3320.831299    3300.862549  508.563965  3320.831299  132.918750  3300.862549  19.96875        19.96875
5    3500.240674    3399.300049  508.563965  3500.240674  199.378125  3399.300049  21.56250        20.00000
6    3500.240674    3419.300049  588.563965  3500.240674    1.000000  3419.300049   1.56250         0.00000
7    3500.240674    3420.862549  687.001465  3500.240674    1.500000  3420.862549   0.00000        -1.56250
8    3502.490674    3422.425049  785.438965  3502.490674    2.250000  3422.425049   0.68750        -0.87500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:51:03]  --------------------------------------------------------------------------------
[07/19 15:51:03]  Iteration: 83 (9 solution, 73 counterexamples)
[07/19 15:51:07]  Generator returned sat in 2.855684 secs.
[07/19 15:51:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:51:07]  Improved gap from 0 to 0
[07/19 15:51:08]  Improved number of small numbers from 37 to 51 out of a max of 100
[07/19 15:51:08]  Verifer returned sat in 0.875723 secs.
[07/19 15:51:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2939.406250    2919.406250  508.563965  2939.406250    0.090820  2919.406250   20.000000       19.999959
1    2939.406250    2919.406291  508.563965  2939.406250   19.954590  2919.406291   19.999959      -80.000041
2    3139.451823    3019.406494  508.563965  3139.451823  220.045532  3019.406494  119.999797       20.000000
3    3139.451823    3139.360758  508.563965  3139.451823  119.954468  3139.360758    0.045532      -80.000000
4    3319.337992    3319.246928  508.563965  3319.337992  179.931702  3319.246928    0.045532       -0.113831
5    3589.190013    3419.406250  508.563965  3589.190013  269.897552  3419.406250   20.000041       20.000000
6    3589.190013    3419.406494  588.563965  3589.190013    0.500000  3419.406494   19.999797        0.000000
7    3589.190013    3439.406291  687.438965  3589.190013    0.750000  3439.406291    0.000000       -1.125000
8    3590.315013    3440.531291  687.438965  3590.315013    1.125000  3440.531291    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:51:08]  --------------------------------------------------------------------------------
[07/19 15:51:08]  Iteration: 84 (9 solution, 74 counterexamples)
[07/19 15:51:17]  Generator returned sat in 7.707363 secs.
[07/19 15:51:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:17]  Verifer returned unsat in 0.079067 secs.
[07/19 15:51:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:17]  --------------------------------------------------------------------------------
[07/19 15:51:17]  Iteration: 85 (10 solution, 74 counterexamples)
[07/19 15:51:19]  Generator returned sat in 1.134778 secs.
[07/19 15:51:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:20]  Verifer returned unsat in 0.051178 secs.
[07/19 15:51:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:20]  --------------------------------------------------------------------------------
[07/19 15:51:20]  Iteration: 86 (11 solution, 74 counterexamples)
[07/19 15:51:22]  Generator returned sat in 1.143002 secs.
[07/19 15:51:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:22]  Verifer returned unsat in 0.049637 secs.
[07/19 15:51:22]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:22]  --------------------------------------------------------------------------------
[07/19 15:51:22]  Iteration: 87 (12 solution, 74 counterexamples)
[07/19 15:51:24]  Generator returned sat in 1.143071 secs.
[07/19 15:51:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:24]  Verifer returned unsat in 0.061307 secs.
[07/19 15:51:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:24]  --------------------------------------------------------------------------------
[07/19 15:51:24]  Iteration: 88 (13 solution, 74 counterexamples)
[07/19 15:51:26]  Generator returned sat in 1.070417 secs.
[07/19 15:51:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:27]  Verifer returned unsat in 0.047989 secs.
[07/19 15:51:27]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:27]  --------------------------------------------------------------------------------
[07/19 15:51:27]  Iteration: 89 (14 solution, 74 counterexamples)
[07/19 15:51:31]  Generator returned sat in 3.063904 secs.
[07/19 15:51:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:31]  Improved gap from 0 to 6.25
[07/19 15:51:31]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/19 15:51:31]  Verifer returned sat in 0.397535 secs.
[07/19 15:51:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2922.287354    2802.287354  329.938721  2922.287354    0.090576  2802.287354  120.000000       20.000000
1    2922.287354    2902.287354  409.938477  2922.287354    0.045410  2902.287354   20.000000       -0.000244
2    3022.287354    3022.287354  409.938477  3022.287354  120.000000  3022.287354    0.000000       -0.000244
3    3085.185059    3078.935059  447.041016  3085.185059   62.897705  3078.935059    6.250000        0.000000
4    3205.230469    3185.184814  447.041016  3205.230469  126.295410  3185.184814   20.000244       20.000000
5    3205.230469    3198.934814  527.041016  3205.230469    1.500000  3198.934814    6.250244        0.000000
6    3205.230469    3205.185059  620.791016  3205.230469    3.500000  3205.185059    0.000000       -6.250000
7    3212.730469    3212.639404  713.336426  3212.730469    7.500000  3212.639404    0.045654       -6.204590
8    3228.184814    3218.889648  713.336426  3228.184814   15.500000  3218.889648    9.249756      -90.750244
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:51:32]  --------------------------------------------------------------------------------
[07/19 15:51:32]  Iteration: 90 (14 solution, 75 counterexamples)
[07/19 15:51:36]  Generator returned sat in 3.026317 secs.
[07/19 15:51:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:36]  Improved gap from 0 to 7.8125
[07/19 15:51:36]  Improved number of small numbers from 52 to 100 out of a max of 100
[07/19 15:51:36]  Verifer returned sat in 0.642945 secs.
[07/19 15:51:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2649.277100    2529.277344  508.441406  2649.277100    0.090332  2529.277344  119.999756       20.000000
1    2649.277100    2629.277344  588.441406  2649.277100    0.045166  2629.277344   19.999756        0.000000
2    2749.277344    2649.277100  588.441406  2749.277344  120.000000  2649.277100  100.000244        0.000244
3    2869.277100    2849.277100  588.441406  2869.277100  220.000000  2849.277100   20.000000       20.000000
4    2959.777100    2941.464600  588.441406  2959.777100  110.500000  2941.464600   18.312500       10.500000
5    2997.214600    2997.169678  612.219482  2997.214600   55.750000  2997.169678    0.044922      -28.284424
6    3025.544678    3025.499023  697.577393  3025.544678   28.375000  3025.499023    0.045654      -14.596436
7    3040.186523    3040.141357  789.764648  3040.186523   14.687500  3040.141357    0.045166       -7.767334
8    3047.985107    3047.954102  789.764893  3047.985107    7.843750  3047.954102    0.031006      -99.968506
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/19 15:51:37]  --------------------------------------------------------------------------------
[07/19 15:51:37]  Iteration: 91 (14 solution, 76 counterexamples)
[07/19 15:51:41]  Generator returned sat in 3.378105 secs.
[07/19 15:51:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:51:41]  Improved gap from 185/8192 to 43.75
[07/19 15:51:42]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/19 15:51:42]  Verifer returned sat in 0.287945 secs.
[07/19 15:51:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t    queue_t  bottle_queue_t
0    2529.277344    2529.232178  588.441406  2529.277344    0.090332  2529.232178   0.045166      -19.999756
1    2669.322266    2649.277100  588.441406  2669.322266  140.090088  2649.277100  20.000000       20.000000
2    2669.322266    2649.277100  644.691406  2669.322266    0.045166  2649.277100  20.000000      -23.750000
3    2887.141602    2793.027100  644.691406  2887.141602  237.819336  2793.027100  20.000000       20.000000
4    2988.051270    2874.322266  644.691406  2988.051270  120.909668  2874.322266  38.704834       20.000000
5    3011.801270    2893.027100  700.941406  3011.801270   62.454834  2893.027100  43.750000        0.000000
6    3031.006104    2936.777100  757.191406  3031.006104   62.954834  2936.777100  19.204834      -24.545166
7    3075.256104    2980.527100  813.441406  3075.256104   63.454834  2980.527100  19.704834      -24.045166
8    3119.506104    3024.277100  813.441406  3119.506104   63.954834  3024.277100  20.204834      -79.795166
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:51:42]  --------------------------------------------------------------------------------
[07/19 15:51:42]  Iteration: 92 (14 solution, 77 counterexamples)
[07/19 15:51:52]  Generator returned sat in 9.066636 secs.
[07/19 15:51:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:51:52]  Verifer returned unsat in 0.088380 secs.
[07/19 15:51:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:51:52]  --------------------------------------------------------------------------------
[07/19 15:51:52]  Iteration: 93 (15 solution, 77 counterexamples)
[07/19 15:51:55]  Generator returned sat in 1.280153 secs.
[07/19 15:51:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:51:55]  Verifer returned unsat in 0.080051 secs.
[07/19 15:51:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:51:55]  --------------------------------------------------------------------------------
[07/19 15:51:55]  Iteration: 94 (16 solution, 77 counterexamples)
[07/19 15:51:57]  Generator returned sat in 1.223581 secs.
[07/19 15:51:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:51:57]  Verifer returned unsat in 0.061364 secs.
[07/19 15:51:57]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:51:57]  --------------------------------------------------------------------------------
[07/19 15:51:57]  Iteration: 95 (17 solution, 77 counterexamples)
[07/19 15:52:00]  Generator returned sat in 1.161961 secs.
[07/19 15:52:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:00]  Verifer returned unsat in 0.072924 secs.
[07/19 15:52:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:00]  --------------------------------------------------------------------------------
[07/19 15:52:00]  Iteration: 96 (18 solution, 77 counterexamples)
[07/19 15:52:05]  Generator returned sat in 3.581450 secs.
[07/19 15:52:05]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:05]  Verifer returned unsat in 0.057955 secs.
[07/19 15:52:05]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:05]  --------------------------------------------------------------------------------
[07/19 15:52:05]  Iteration: 97 (19 solution, 77 counterexamples)
[07/19 15:52:07]  Generator returned sat in 1.463084 secs.
[07/19 15:52:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:08]  Verifer returned unsat in 0.067068 secs.
[07/19 15:52:08]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:08]  --------------------------------------------------------------------------------
[07/19 15:52:08]  Iteration: 98 (20 solution, 77 counterexamples)
[07/19 15:52:10]  Generator returned sat in 1.262359 secs.
[07/19 15:52:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:10]  Verifer returned unsat in 0.061133 secs.
[07/19 15:52:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:10]  --------------------------------------------------------------------------------
[07/19 15:52:10]  Iteration: 99 (21 solution, 77 counterexamples)
[07/19 15:52:12]  Generator returned sat in 1.172296 secs.
[07/19 15:52:12]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:13]  Verifer returned unsat in 0.053975 secs.
[07/19 15:52:13]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:13]  --------------------------------------------------------------------------------
[07/19 15:52:13]  Iteration: 100 (22 solution, 77 counterexamples)
[07/19 15:52:16]  Generator returned sat in 1.853726 secs.
[07/19 15:52:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:16]  Improved gap from 0 to 12.5
[07/19 15:52:16]  Improved number of small numbers from 52 to 73 out of a max of 100
[07/19 15:52:16]  Verifer returned sat in 0.875752 secs.
[07/19 15:52:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2244.871094    2244.870850  541.541504  2244.871094    0.090332  2244.870850    0.000244       -0.000062
1    2364.825684    2344.871094  541.541504  2364.825684  119.954834  2344.871094   19.954590       19.954528
2    2364.825684    2352.325797  621.586670  2364.825684   19.909424  2352.325797   12.499887       -0.000306
3    2389.189241    2389.144075  621.586914  2389.189241   36.863444  2389.144075    0.045166      -75.636505
4    2464.870963    2464.825797  709.086863  2464.870963   75.726888  2464.825797    0.045166      -12.454834
5    2618.279573    2477.325928  709.086863  2618.279573  153.453776  2477.325928  119.999869       20.000000
6    2618.279573    2584.825684  789.086863  2618.279573    2.000000  2584.825684   12.500113        0.000000
7    2618.279573    2597.325797  876.586863  2618.279573    6.000000  2597.325797    0.000000      -12.500000
8    2632.279573    2609.825928  964.086670  2632.279573   14.000000  2609.825928    1.499869      -11.000193
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:52:17]  --------------------------------------------------------------------------------
[07/19 15:52:17]  Iteration: 101 (22 solution, 78 counterexamples)
[07/19 15:52:23]  Generator returned sat in 5.235470 secs.
[07/19 15:52:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:23]  Verifer returned unsat in 0.069939 secs.
[07/19 15:52:23]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:23]  --------------------------------------------------------------------------------
[07/19 15:52:23]  Iteration: 102 (23 solution, 78 counterexamples)
[07/19 15:52:28]  Generator returned sat in 3.846173 secs.
[07/19 15:52:28]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:29]  Improved gap from 0 to 0
[07/19 15:52:29]  Improved number of small numbers from 54 to 73 out of a max of 100
[07/19 15:52:29]  Verifer returned sat in 0.761709 secs.
[07/19 15:52:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2364.825684    2244.828369  638.084473  2364.825684    0.090332  2244.828369  119.997314       19.997496
1    2364.825684    2364.825684  638.084473  2364.825684    0.002441  2364.825684    0.000000      -80.002504
2    2444.830566    2444.828297  709.086670  2444.830566   80.004883  2444.828297    0.002270      -28.995424
3    2593.825797    2494.335797  709.086670  2593.825797  148.997500  2494.335797   99.490000       19.999807
4    2643.833297    2643.830797  709.086863  2643.833297  149.497500  2643.830797    0.002500      -29.992500
5    2793.828297    2773.823242  709.086863  2793.828297  149.997500  2773.823242   20.002555       20.000000
6    2793.828297    2793.318297  789.086863  2793.828297    0.010000  2793.318297    0.507500        0.000000
7    2793.830797    2793.825797  889.084363  2793.830797    0.510000  2793.825797    0.002500        0.000000
8    2794.838297    2793.828369  988.076660  2794.838297    1.010000  2793.828369    1.007428       -0.000203
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:52:29]  --------------------------------------------------------------------------------
[07/19 15:52:29]  Iteration: 103 (23 solution, 79 counterexamples)
[07/19 15:52:34]  Generator returned sat in 3.210419 secs.
[07/19 15:52:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:34]  Improved gap from 5/4096 to 0
[07/19 15:52:35]  Improved number of small numbers from 35 to 57 out of a max of 100
[07/19 15:52:35]  Verifer returned sat in 1.181808 secs.
[07/19 15:52:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2375.459473    2275.459473  668.837402  2375.459473    0.090332  2275.459473  100.000000        0.000131
1    2375.459473    2375.459473  668.837402  2375.459473    0.002197  2375.459473    0.000000      -99.999869
2    2595.458740    2575.459271  668.837402  2595.458740  219.999268  2575.459271   19.999469       19.999398
3    2635.209881    2635.209271  709.086863  2635.209881   59.750610  2635.209271    0.000610        0.000000
4    2755.210492    2735.209717  709.086863  2755.210492  120.001221  2735.209717   20.000164       20.000000
5    2755.210492    2755.209271  789.086670  2755.210492    0.010000  2755.209271    0.000610       -0.000193
6    2755.729881    2755.728661  888.567383  2755.729881    0.520000  2755.728661    0.000610       -0.000091
7    2757.269271    2757.268050  983.448730  2757.269271    1.540000  2757.268050    0.000610       -3.579353
8    2760.848661    2760.848050  983.448730  2760.848661    3.580000  2760.848050    0.000000      -99.999964
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:52:35]  --------------------------------------------------------------------------------
[07/19 15:52:35]  Iteration: 104 (23 solution, 80 counterexamples)
[07/19 15:52:46]  Generator returned sat in 9.153663 secs.
[07/19 15:52:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:46]  Verifer returned unsat in 0.081185 secs.
[07/19 15:52:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:46]  --------------------------------------------------------------------------------
[07/19 15:52:46]  Iteration: 105 (24 solution, 80 counterexamples)
[07/19 15:52:49]  Generator returned sat in 1.815130 secs.
[07/19 15:52:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:49]  Verifer returned unsat in 0.067374 secs.
[07/19 15:52:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:49]  --------------------------------------------------------------------------------
[07/19 15:52:49]  Iteration: 106 (25 solution, 80 counterexamples)
[07/19 15:52:55]  Generator returned sat in 4.646411 secs.
[07/19 15:52:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:55]  Improved gap from 369/8192 to 1.5625
[07/19 15:52:55]  Improved number of small numbers from 38 to 100 out of a max of 100
[07/19 15:52:55]  Verifer returned sat in 0.401699 secs.
[07/19 15:52:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t     queue_t  bottle_queue_t
0    2750.021484    2648.458984  610.649414  2750.021484    0.090332  2648.458984  101.562500        1.562744
1    2750.021484    2748.458984  709.086670  2750.021484    0.045166  2748.458984    1.562500        0.000000
2    2850.021240    2848.458740  709.086914  2850.021240  101.562256  2848.458740    1.562500        0.000000
3    2970.021240    2948.003906  709.086914  2970.021240  121.562500  2948.003906   22.017334       20.000000
4    3070.066406    2950.021240  709.086914  3070.066406  122.062500  2950.021240  120.000000       20.000000
5    3070.066406    3068.066162  789.086914  3070.066406    1.500000  3068.066162    1.955078        0.000000
6    3070.111328    3070.021240  887.524414  3070.111328    2.000000  3070.021240    0.044922       -1.517578
7    3072.566406    3071.583740  985.961670  3072.566406    2.500000  3071.583740    0.937500       -0.625244
8    3074.628906    3073.146484  985.961670  3074.628906    3.000000  3073.146484    1.437256      -98.562744
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/19 15:52:56]  --------------------------------------------------------------------------------
[07/19 15:52:56]  Iteration: 107 (25 solution, 81 counterexamples)
[07/19 15:52:59]  Generator returned unsat in 2.073698 secs.
[07/19 15:52:59]  [96mNo more solutions found[0m
[07/19 15:52:59]  Final solutions:
[07/19 15:52:59]  0: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:59]  1: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:59]  2: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:52:59]  3: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:52:59]  4: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:59]  5: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:52:59]  6: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:59]  7: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:59]  8: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:59]  9: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:59]  10: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:59]  11: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:59]  12: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:59]  13: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:59]  14: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:52:59]  15: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:59]  16: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/19 15:52:59]  17: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:59]  18: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:59]  19: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:59]  20: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:59]  21: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/19 15:52:59]  22: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/19 15:52:59]  23: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/19 15:52:59]  24: [1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/19 15:52:59]  Took 369.488807 secs.
