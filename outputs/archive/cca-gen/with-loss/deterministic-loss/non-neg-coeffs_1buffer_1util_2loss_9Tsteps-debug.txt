[07/26 16:07:23]  --------------------------------------------------------------------------------
[07/26 16:07:23]  Iteration: 1 (0 solution, 0 counterexamples)
[07/26 16:07:23]  Took 0.013130664825439453 secs to build known solver.
[07/26 16:07:23]  Took 0.017368078231811523 secs to solve known solver.
[07/26 16:07:23]  Known solution works.
[07/26 16:07:23]  Generator returned sat in 0.004081 secs.
[07/26 16:07:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:07:23]  Improved gap from 1/10 to 100
[07/26 16:07:23]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 16:07:23]  Verifer returned sat in 0.341729 secs.
[07/26 16:07:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t
0            0.0          -56.1      56.1          0.0       0.1        -56.1        0.0     56.1            56.1
1            0.0           -0.1      56.1          0.0       0.1         -0.1        0.0      0.1           -43.9
2          143.9           43.9      56.1        143.9     144.0         43.9        0.0    100.0             0.0
3          444.0          143.9      56.1        444.0     400.1        143.9        0.1    300.0           200.0
4         1346.2          288.9      56.1       1346.2    1202.2        288.9      802.3    255.0           200.0
5         4075.6          343.9      56.1       4075.6    2984.4        343.9     3431.7    300.0           200.0
6        10346.4          467.9      56.1      10346.4    6570.8        467.9     9602.5    276.0           200.0
7        23862.0          543.9      56.1      23862.0   13791.6        543.9    23018.1    300.0           200.0
8        51657.2          643.9      56.1      51657.2   28095.2        643.9    50713.3    300.0           200.0
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 16:07:24]  --------------------------------------------------------------------------------
[07/26 16:07:24]  Iteration: 2 (0 solution, 1 counterexamples)
[07/26 16:07:24]  Took 0.27560853958129883 secs to build known solver.
[07/26 16:07:24]  Took 0.28176188468933105 secs to solve known solver.
[07/26 16:07:24]  Known solution works.
[07/26 16:07:24]  Generator returned sat in 0.072384 secs.
[07/26 16:07:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:24]  Improved gap from 1/800 to 98.4375
[07/26 16:07:24]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 16:07:24]  Verifer returned sat in 0.206562 secs.
[07/26 16:07:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0      8543.8925      8243.8925 -8543.8925    8543.8925     0.099854    8243.8925      0.000  300.0000        200.0000
1      8543.8925      8343.8925 -8543.8925    8543.8925     0.002500    8343.8925      0.000  200.0000        100.0000
2      8543.8925      8443.8925 -8543.8925    8543.8925   200.000000    8443.8925      0.000  100.0000          0.0000
3      9637.6425      8643.8925 -8543.8925    9637.6425  1193.750000    8643.8925    793.750  200.0000        200.0000
4     10034.5175      8743.8925 -8543.8925   10034.5175   596.875000    8743.8925   1090.625  200.0000        200.0000
5     10132.9550      8743.8925 -8543.8925   10132.9550   298.437500    8743.8925   1090.625  298.4375        198.4375
6     10132.9550      8843.8925 -8543.8925   10132.9550     0.010000    8843.8925   1090.625  198.4375         98.4375
7     10132.9550      8943.8925 -8542.3300   10132.9550     0.010000    8943.8925   1090.625   98.4375          0.0000
8     10132.9550      9042.3300 -8542.3300   10132.9550     0.010000    9042.3300   1090.625    0.0000       -100.0000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:07:24]  --------------------------------------------------------------------------------
[07/26 16:07:24]  Iteration: 3 (0 solution, 2 counterexamples)
[07/26 16:07:25]  Took 0.5384225845336914 secs to build known solver.
[07/26 16:07:25]  Took 0.5473597049713135 secs to solve known solver.
[07/26 16:07:25]  Known solution works.
[07/26 16:07:25]  Generator returned sat in 0.050075 secs.
[07/26 16:07:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:26]  Improved number of small numbers from 67 to 95 out of a max of 99
[07/26 16:07:26]  Verifer returned sat in 0.490491 secs.
[07/26 16:07:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    8543.892334    8343.892578 -8543.892578   8543.892334    0.099854  8343.892578    0.000000  199.999756       99.999756
1    8543.892334    8443.892578 -8543.892578   8543.892334    0.049805  8443.892578    0.000000   99.999756       -0.000244
2    8843.942383    8640.892578 -8543.892578   8843.942383  400.049805  8640.892578    0.049805  203.000000      200.000000
3    9310.142090    8709.342529 -8543.892578   9310.142090  669.199707  8709.342529  366.249512  234.550049      200.000000
4    9410.191895    8824.892578 -8543.892578   9410.191895  334.599854  8824.892578  366.299316  219.000000      200.000000
5    9410.191895    8943.892578 -8543.892578   9410.191895  167.299927  8943.892578  366.299316  100.000000      100.000000
6    9796.291748    9000.792725 -8543.892578   9796.291748  486.099854  9000.792725  552.399170  243.099854      200.000000
7    9796.291748    9143.892578 -8543.892578   9796.291748  243.049927  9143.892578  552.399170  100.000000      100.000000
8   10341.891602    9143.892578 -8543.892578  10341.891602  645.599854  9143.892578  897.999023  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:07:26]  --------------------------------------------------------------------------------
[07/26 16:07:26]  Iteration: 4 (0 solution, 3 counterexamples)
[07/26 16:07:27]  Took 0.8014624118804932 secs to build known solver.
[07/26 16:07:27]  Took 0.8122403621673584 secs to solve known solver.
[07/26 16:07:27]  Known solution works.
[07/26 16:07:27]  Generator returned sat in 0.163308 secs.
[07/26 16:07:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:07:27]  Improved gap from 409/32768 to 31.25
[07/26 16:07:28]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 16:07:28]  Verifer returned sat in 0.817041 secs.
[07/26 16:07:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    8767.095947    8767.041504 -8867.041748  8767.095947    0.099854  8767.041504   0.000000    0.054443        0.054443
1    8767.095947    8767.041504 -8798.291748  8767.095947    0.027344  8767.041504   0.000000    0.054443      -31.195557
2    8843.942383    8798.291504 -8743.942627  8843.942383   76.900879  8798.291504   0.000000   45.650879        0.000000
3    8843.942383    8843.942383 -8675.192871  8843.942383    0.027344  8843.942383   0.000000    0.000000      -31.250244
4    8883.920166    8883.893066 -8615.143311  8883.920166   39.977783  8883.893066   0.000000    0.027100      -31.222900
5    8983.796631    8952.615723 -8583.865967  8983.796631   99.903564  8952.615723   0.000000   31.180908       -0.069092
6    9131.181396    9083.865723 -8583.865967  9131.181396  178.565674  9083.865723   0.000000   47.315674       47.315674
7    9383.893066    9083.865967 -8583.865967  9383.893066  300.027344  9083.865967   0.027344  299.999756      200.000000
8    9383.893066    9183.865967 -8583.865967  9383.893066    2.000000  9183.865967   0.027344  199.999756      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:07:28]  --------------------------------------------------------------------------------
[07/26 16:07:28]  Iteration: 5 (0 solution, 4 counterexamples)
[07/26 16:07:29]  Took 1.0582869052886963 secs to build known solver.
[07/26 16:07:29]  Took 1.0706570148468018 secs to solve known solver.
[07/26 16:07:29]  Known solution works.
[07/26 16:07:29]  Generator returned sat in 0.161380 secs.
[07/26 16:07:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:07:29]  Improved gap from 7/1024 to 100
[07/26 16:07:30]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 16:07:30]  Verifer returned sat in 0.342240 secs.
[07/26 16:07:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    9175.853516    9075.853516 -8551.218506   9175.853516    0.099854  9075.853516    0.000000  100.000000      100.000000
1    9175.853516    9075.853516 -8551.218506   9175.853516    0.027344  9075.853516    0.000000  100.000000        0.000000
2    9475.860352    9275.853516 -8551.218506   9475.860352  400.006836  9275.853516    0.006836  200.000000      200.000000
3    9475.860352    9279.839844 -8551.218506   9475.860352  191.034180  9279.839844    0.006836  196.013672      100.000000
4    9675.867188    9444.853516 -8551.218506   9675.867188  396.020508  9444.853516    0.013672  231.000000      200.000000
5    9675.867188    9575.853516 -8551.218506   9675.867188  186.500000  9575.853516    0.013672  100.000000      100.000000
6   10063.367188    9675.853516 -8551.218506  10063.367188  487.500000  9675.853516  187.513672  200.000000      200.000000
7   10063.374023    9675.853516 -8551.218506  10063.374023  200.006836  9675.853516  187.513672  200.006836      100.006836
8   10295.374023    9775.853516 -8551.218506  10295.374023  432.006836  9775.853516  219.520508  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:07:30]  --------------------------------------------------------------------------------
[07/26 16:07:30]  Iteration: 6 (0 solution, 5 counterexamples)
[07/26 16:07:31]  Took 1.3253178596496582 secs to build known solver.
[07/26 16:07:31]  Took 1.3403759002685547 secs to solve known solver.
[07/26 16:07:31]  Known solution works.
[07/26 16:07:32]  Generator returned sat in 0.230736 secs.
[07/26 16:07:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:07:32]  Improved number of small numbers from 81 to 85 out of a max of 99
[07/26 16:07:32]  Verifer returned sat in 0.294423 secs.
[07/26 16:07:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9244.855957    9046.353271 -8551.218506   9244.855957    0.099609  9046.353271     0.0000  198.502686      100.002686
1    9244.855957    9244.853027 -8551.218506   9244.855957    0.026855  9244.853027     0.0000    0.002930        0.002686
2    9344.853027    9244.853271 -8551.218506   9344.853027  100.000000  9244.853271     0.0000   99.999756       -0.000244
3    9344.855771    9344.853271 -8551.218506   9344.855771  100.002500  9344.853271     0.0000    0.002500      -99.997500
4    9744.855771    9444.853271 -8551.218506   9744.855771  400.002500  9444.853271     0.0025  300.000000      200.000000
5    9744.855771    9644.853271 -8551.218506   9744.855771    0.010000  9644.853271     0.0025  100.000000      100.000000
6   10046.365771    9744.853271 -8551.218506  10046.365771  401.510000  9744.853271   101.5125  200.000000      200.000000
7   10046.365771    9843.345771 -8551.218506  10046.365771    0.010000  9843.345771   101.5125  101.507500      100.000000
8   10344.860771    9844.853271 -8551.218506  10344.860771  400.002500  9844.853271   200.0075  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:07:32]  --------------------------------------------------------------------------------
[07/26 16:07:32]  Iteration: 7 (0 solution, 6 counterexamples)
[07/26 16:07:34]  Took 1.5835645198822021 secs to build known solver.
[07/26 16:07:34]  Took 1.600590705871582 secs to solve known solver.
[07/26 16:07:34]  Known solution works.
[07/26 16:07:34]  Generator returned sat in 0.024777 secs.
[07/26 16:07:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:07:34]  Improved gap from 1/800 to 100
[07/26 16:07:34]  Improved number of small numbers from 84 to 84 out of a max of 100
[07/26 16:07:34]  Verifer returned sat in 0.364781 secs.
[07/26 16:07:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t
0    9146.353271    9046.353271 -8551.218506   9146.353271    0.099609  9046.353271     0.0000  100.0000        100.0000
1    9146.353271    9046.353271 -8551.218506   9146.353271    0.002500  9046.353271     0.0000  100.0000          0.0000
2    9446.355771    9246.353271 -8551.218506   9446.355771  400.002500  9246.353271     0.0025  200.0000        200.0000
3    9446.358271    9246.353271 -8551.218506   9446.358271  200.002500  9246.353271     0.0025  200.0025        100.0025
4    9647.358271    9346.353271 -8551.218506   9647.358271  401.002500  9346.353271     1.0050  300.0000        200.0000
5    9647.358271    9546.353271 -8551.218506   9647.358271    0.010000  9546.353271     1.0050  100.0000        100.0000
6    9848.368271    9646.353271 -8551.218506   9848.368271  301.010000  9646.353271     2.0150  200.0000        200.0000
7    9848.368271    9746.345771 -8551.218506   9848.368271    0.010000  9746.345771     2.0150  100.0075        100.0000
8   10149.363271    9746.353271 -8551.218506  10149.363271  401.002500  9746.353271   103.0100  300.0000        200.0000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:07:35]  --------------------------------------------------------------------------------
[07/26 16:07:35]  Iteration: 8 (0 solution, 7 counterexamples)
[07/26 16:07:36]  Took 1.8393051624298096 secs to build known solver.
[07/26 16:07:36]  Took 1.858440637588501 secs to solve known solver.
[07/26 16:07:36]  Known solution works.
[07/26 16:07:37]  Generator returned sat in 0.337627 secs.
[07/26 16:07:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:37]  Improved gap from 0 to 1.5625
[07/26 16:07:37]  Improved number of small numbers from 68 to 100 out of a max of 100
[07/26 16:07:37]  Verifer returned sat in 0.239111 secs.
[07/26 16:07:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9179.687012    8979.684570 -8551.21875  9179.687012    0.099365  8979.684570   0.002686  199.999756       99.999756
1    9179.687012    9079.684570 -8551.21875  9179.687012    0.002197  9079.684570   0.002686   99.999756       -0.000244
2    9446.355713    9179.684570 -8551.21875  9446.355713  366.668457  9179.684570   0.002686  266.668457      166.668457
3    9446.355713    9279.684570 -8551.21875  9446.355713  266.667480  9279.684570   0.002686  166.668457       66.668457
4    9679.688477    9479.684326 -8551.21875  9679.688477  400.001221  9479.684326   0.003906  200.000244      200.000000
5    9679.688477    9579.684570 -8551.21875  9679.688477    0.500000  9579.684570   0.003906  100.000000      100.000000
6    9679.688477    9678.558105 -8551.21875  9679.688477    0.750000  9678.558105   0.003906    1.126465        0.000000
7    9679.688477    9679.684570 -8452.90625  9679.688477    1.125000  9679.684570   0.003906    0.000000       -1.687500
8    9681.375977    9681.372070 -8354.46875  9681.375977    1.687500  9681.372070   0.003906    0.000000       -1.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:07:37]  --------------------------------------------------------------------------------
[07/26 16:07:37]  Iteration: 9 (0 solution, 8 counterexamples)
[07/26 16:07:40]  Took 2.1086387634277344 secs to build known solver.
[07/26 16:07:40]  Took 2.1308774948120117 secs to solve known solver.
[07/26 16:07:40]  Known solution works.
[07/26 16:07:40]  Generator returned sat in 0.103271 secs.
[07/26 16:07:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:07:40]  Improved gap from 27/16 to 3.125
[07/26 16:07:40]  Improved number of small numbers from 43 to 100 out of a max of 100
[07/26 16:07:40]  Verifer returned sat in 0.579019 secs.
[07/26 16:07:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9232.240967    9132.239990 -8551.218750  9232.240967    0.099365  9132.239990   0.000000  100.000977        0.000977
1    9232.240967    9232.239990 -8551.218750  9232.240967    0.002197  9232.239990   0.000000    0.000977      -99.999023
2    9632.238770    9332.239990 -8551.218750  9632.238770  399.998779  9332.239990   0.000000  299.998779      199.998779
3    9632.238770    9432.239990 -8551.218750  9632.238770  266.333984  9432.239990   0.000000  199.998779       99.998779
4    9832.240967    9632.239746 -8551.218750  9832.240967  400.000977  9632.239746   0.000977  200.000244      200.000000
5    9832.240967    9632.239990 -8551.218750  9832.240967    0.500000  9632.239990   0.000977  200.000000      100.000000
6    9832.240967    9832.239014 -8551.218750  9832.240967    1.250000  9832.239014   0.000977    0.000977        0.000000
7    9834.614990    9832.239990 -8454.343750  9834.614990    2.375000  9832.239990   0.000977    2.374023       -0.750977
8    9836.303467    9835.364990 -8357.468994  9836.303467    4.062500  9835.364990   0.000977    0.937500       -2.187744
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:07:41]  --------------------------------------------------------------------------------
[07/26 16:07:41]  Iteration: 10 (0 solution, 9 counterexamples)
[07/26 16:07:43]  Took 2.366309404373169 secs to build known solver.
[07/26 16:07:43]  Took 2.390317678451538 secs to solve known solver.
[07/26 16:07:43]  Known solution works.
[07/26 16:07:44]  Generator returned sat in 0.529511 secs.
[07/26 16:07:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:44]  Improved gap from 1/100 to 100
[07/26 16:07:44]  Improved number of small numbers from 47 to 100 out of a max of 100
[07/26 16:07:44]  Verifer returned sat in 0.361239 secs.
[07/26 16:07:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9232.289551    9232.239746 -8551.21875   9232.289551    0.099121  9232.239746   0.000000    0.049805        0.049561
1    9232.289551    9232.239990 -8551.21875   9232.289551    0.024902  9232.239990   0.000000    0.049561      -99.950439
2    9399.239990    9399.215088 -8551.21875   9399.239990  167.000000  9399.215088   0.000000    0.024902      -33.000000
3    9732.264893    9521.239746 -8551.21875   9732.264893  333.049805  9521.239746   0.024902  211.000244      200.000000
4    9832.289551    9595.248291 -8551.21875   9832.289551  311.024902  9595.248291   0.049561  236.991699      200.000000
5    9932.314453    9729.239990 -8551.21875   9932.314453  337.016602  9729.239990   0.074463  203.000000      200.000000
6   10062.835205    9832.239990 -8551.21875  10062.835205  333.520752  9832.239990  30.595215  200.000000      200.000000
7   10185.095703    9895.037598 -8551.21875  10185.095703  322.260498  9895.037598  52.855713  237.202393      200.000000
8   10258.918213    9932.239990 -8551.21875  10258.918213  311.024902  9932.239990  52.855713  273.822510      173.822510
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=4, measured_loss_rate=1.[0m
[07/26 16:07:44]  --------------------------------------------------------------------------------
[07/26 16:07:44]  Iteration: 11 (0 solution, 10 counterexamples)
[07/26 16:07:47]  Took 2.625988721847534 secs to build known solver.
[07/26 16:07:47]  Took 2.652333974838257 secs to solve known solver.
[07/26 16:07:47]  Known solution works.
[07/26 16:07:47]  Generator returned sat in 0.053127 secs.
[07/26 16:07:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:47]  Improved gap from 3/400 to 0
[07/26 16:07:48]  Improved number of small numbers from 65 to 88 out of a max of 100
[07/26 16:07:48]  Verifer returned sat in 0.532099 secs.
[07/26 16:07:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9832.278076    9632.277100 -9051.255615   9832.278076    0.099121   9632.277100        0.0  200.000977      100.001221
1    9832.278076    9832.276855 -9051.255615   9832.278076    0.024902   9832.276855        0.0    0.001221        0.001221
2    9832.278320    9832.276855 -9051.255615   9832.278320    0.001465   9832.276855        0.0    0.001465      -99.998535
3   10032.278076   10032.267090 -9051.255615  10032.278076  200.001221  10032.267090        0.0    0.010986        0.001221
4   10032.278076   10032.276953 -8951.264404  10032.278076    0.010000  10032.276953        0.0    0.001123       -0.007568
5   10032.286953   10032.285703 -8851.265869  10032.286953    0.010000  10032.285703        0.0    0.001250       -0.000156
6   10032.295703   10032.294453 -8751.281738  10032.295703    0.010000  10032.294453        0.0    0.001250       -0.007275
7   10032.304453   10032.303203 -8651.283447  10032.304453    0.010000  10032.303203        0.0    0.001250       -0.000234
8   10032.313203   10032.304688 -8651.283447  10032.313203    0.010000  10032.304688        0.0    0.008516      -99.991484
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:07:48]  --------------------------------------------------------------------------------
[07/26 16:07:48]  Iteration: 12 (0 solution, 11 counterexamples)
[07/26 16:07:51]  Took 2.8917763233184814 secs to build known solver.
[07/26 16:07:51]  Took 2.920938491821289 secs to solve known solver.
[07/26 16:07:51]  Known solution works.
[07/26 16:07:52]  Generator returned sat in 0.582180 secs.
[07/26 16:07:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:52]  Improved gap from 405/8192 to 100
[07/26 16:07:52]  Improved number of small numbers from 44 to 100 out of a max of 100
[07/26 16:07:52]  Verifer returned sat in 0.378306 secs.
[07/26 16:07:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t
0    9232.295654    9132.246094 -8551.200195   9232.295654    0.098633  9132.246094    0.000000  100.049561      100.024658
1    9232.295654    9232.246094 -8551.200195   9232.295654    0.024658  9232.246094    0.000000    0.049561        0.024658
2    9232.295654    9232.270996 -8551.200195   9232.295654    0.024902  9232.270996    0.000000    0.024658      -99.975342
3    9432.295898    9432.270996 -8551.200195   9432.295898  200.024902  9432.270996    0.000000    0.024902        0.024902
4    9732.295898    9432.270996 -8551.200195   9732.295898  300.024902  9432.270996    0.024902  300.000000      200.000000
5    9732.295898    9632.270996 -8551.200195   9732.295898  151.512451  9632.270996    0.024902  100.000000      100.000000
6   10032.295898    9730.746338 -8551.200195  10032.295898  400.000000  9730.746338  100.024902  201.524658      200.000000
7   10032.295898    9782.283203 -8551.200195  10032.295898  201.500000  9782.283203  100.024902  149.987793      100.000000
8   10232.320312    9832.270996 -8551.200195  10232.320312  350.012207  9832.270996  100.049316  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:07:52]  --------------------------------------------------------------------------------
[07/26 16:07:52]  Iteration: 13 (0 solution, 12 counterexamples)
[07/26 16:07:56]  Took 3.1534276008605957 secs to build known solver.
[07/26 16:07:56]  Took 3.1852967739105225 secs to solve known solver.
[07/26 16:07:56]  Known solution works.
[07/26 16:07:56]  Generator returned sat in 0.507710 secs.
[07/26 16:07:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:07:56]  Improved gap from 8801/400 to 100
[07/26 16:07:57]  Improved number of small numbers from 68 to 80 out of a max of 100
[07/26 16:07:57]  Verifer returned sat in 0.522366 secs.
[07/26 16:07:57]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9032.289795    9032.287148 -8551.200195   9032.289795    0.098389  9032.287148    0.00000    0.002646        0.000146
1    9032.289795    9032.289795 -8551.200195   9032.289795    0.001465  9032.289795    0.00000    0.000000      -99.999854
2    9210.289551    9132.289648 -8551.200195   9210.289551  177.999756  9132.289648    0.00000   77.999902      -22.000098
3    9232.290898    9232.289648 -8551.200195   9232.290898  100.001250  9232.289648    0.00000    0.001250      -99.998750
4    9732.295898    9398.965482 -8551.200195   9732.295898  500.006250  9398.965482  100.00625  233.324167      200.000000
5    9732.295898    9532.289648 -8551.200195   9732.295898    0.010000  9532.289648  100.00625  100.000000      100.000000
6   10232.315898    9632.289551 -8551.200195  10232.315898  600.020000  9632.289551  400.02625  200.000098      200.000000
7   10232.315898    9732.289648 -8551.200195  10232.315898    0.010000  9732.289648  400.02625  100.000000      100.000000
8   10632.322148    9732.289795 -8551.200195  10632.322148  500.006250  9732.289795  600.03250  299.999854      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:07:57]  --------------------------------------------------------------------------------
[07/26 16:07:57]  Iteration: 14 (0 solution, 13 counterexamples)
[07/26 16:08:01]  Took 3.417189836502075 secs to build known solver.
[07/26 16:08:01]  Took 3.451157808303833 secs to solve known solver.
[07/26 16:08:01]  Known solution works.
[07/26 16:08:01]  Generator returned sat in 0.590382 secs.
[07/26 16:08:01]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:01]  Improved gap from 403/16384 to 0
[07/26 16:08:02]  Improved number of small numbers from 33 to 100 out of a max of 100
[07/26 16:08:02]  Verifer returned sat in 0.291276 secs.
[07/26 16:08:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9231.887939    9131.838623 -8749.749268  9231.887939    0.098145  9131.838623   0.000000  100.049316      100.049072
1    9231.887939    9231.838623 -8749.749268  9231.887939    0.024414  9231.838623   0.000000    0.049316        0.049072
2    9231.887939    9231.838867 -8749.749268  9231.887939    0.024414  9231.838867   0.000000    0.049072      -99.950928
3    9631.863281    9431.838623 -8749.749268  9631.863281  400.024414  9431.838623   0.024414  200.000244      200.000000
4    9631.863281    9531.838623 -8749.749268  9631.863281  150.000000  9531.838623   0.024414  100.000244      100.000000
5    9631.863281    9631.814209 -8749.749268  9631.863281    0.500000  9631.814209   0.024414    0.024658        0.000000
6    9632.338623    9632.289795 -8650.224854  9632.338623    0.500000  9632.289795   0.024414    0.024414       -0.000244
7    9632.814209    9632.789795 -8551.200195  9632.814209    0.500000  9632.789795   0.024414    0.000000       -0.500000
8    9633.314209    9633.289795 -8551.200195  9633.314209    0.500000  9633.289795   0.024414    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:08:02]  --------------------------------------------------------------------------------
[07/26 16:08:02]  Iteration: 15 (0 solution, 14 counterexamples)
[07/26 16:08:06]  Took 3.6713223457336426 secs to build known solver.
[07/26 16:08:06]  Took 3.7071762084960938 secs to solve known solver.
[07/26 16:08:06]  Known solution works.
[07/26 16:08:06]  Generator returned sat in 0.324672 secs.
[07/26 16:08:06]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:06]  Verifer returned unsat in 0.071766 secs.
[07/26 16:08:06]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:06]  --------------------------------------------------------------------------------
[07/26 16:08:06]  Iteration: 16 (1 solution, 14 counterexamples)
[07/26 16:08:10]  Took 3.6733295917510986 secs to build known solver.
[07/26 16:08:10]  Took 3.7093870639801025 secs to solve known solver.
[07/26 16:08:10]  Known solution works.
[07/26 16:08:10]  Generator returned sat in 0.046017 secs.
[07/26 16:08:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:10]  Verifer returned unsat in 0.067167 secs.
[07/26 16:08:10]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:10]  --------------------------------------------------------------------------------
[07/26 16:08:10]  Iteration: 17 (2 solution, 14 counterexamples)
[07/26 16:08:14]  Took 3.6704516410827637 secs to build known solver.
[07/26 16:08:14]  Took 3.7061479091644287 secs to solve known solver.
[07/26 16:08:14]  Known solution works.
[07/26 16:08:14]  Generator returned sat in 0.179094 secs.
[07/26 16:08:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:15]  Improved gap from 201/8192 to 3.125
[07/26 16:08:15]  Improved number of small numbers from 46 to 100 out of a max of 100
[07/26 16:08:15]  Verifer returned sat in 0.393942 secs.
[07/26 16:08:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9526.873291    9226.873291 -8749.749268  9526.873291    0.098145  9226.873291   0.000000  300.000000      300.000000
1    9526.897705    9326.873291 -8749.749268  9526.897705  300.024414  9326.873291   0.024414  200.000000      200.000000
2    9626.873291    9326.873535 -8749.749268  9626.873291  299.975586  9326.873535   0.024414  299.975342      199.975586
3    9626.873291    9526.873291 -8749.749268  9626.873291  299.524658  9526.873291   0.024414   99.975586       99.975586
4    9826.922363    9626.873291 -8749.749268  9826.922363  300.024658  9626.873291   0.049072  200.000000      200.000000
5    9826.922363    9723.748535 -8749.749268  9826.922363    2.000000  9723.748535   0.049072  103.124756      100.000000
6    9826.922363    9823.748535 -8749.749268  9826.922363    2.500000  9823.748535   0.049072    3.124756        0.000000
7    9826.922363    9826.873291 -8653.249268  9826.922363    3.000000  9826.873291   0.049072    0.000000       -3.500000
8    9830.422363    9830.373291 -8653.249268  9830.422363    3.500000  9830.373291   0.049072    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:08:15]  --------------------------------------------------------------------------------
[07/26 16:08:15]  Iteration: 18 (2 solution, 15 counterexamples)
[07/26 16:08:19]  Took 3.9393491744995117 secs to build known solver.
[07/26 16:08:19]  Took 3.9775564670562744 secs to solve known solver.
[07/26 16:08:19]  Known solution works.
[07/26 16:08:19]  Generator returned sat in 0.083368 secs.
[07/26 16:08:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:19]  Improved gap from 10039/4096 to 1.5625
[07/26 16:08:20]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 16:08:20]  Verifer returned sat in 0.209698 secs.
[07/26 16:08:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9526.897705    9326.873291 -8749.749268   9526.897705    0.098145   9326.873291   0.024414  200.000000      100.000000
1    9526.897705    9426.873291 -8749.749268   9526.897705  199.950928   9426.873291   0.024414  100.000000        0.000000
2    9526.946777    9526.873291 -8749.749268   9526.946777  100.049072   9526.873291   0.024414    0.049072      -99.950928
3    9926.446777    9626.873291 -8749.749268   9926.446777  399.549072   9626.873291   0.024414  299.549072      199.549072
4   10026.946777    9826.873291 -8749.749268  10026.946777  400.049072   9826.873291   0.073486  200.000000      200.000000
5   10026.946777    9926.873291 -8749.749268  10026.946777    1.500000   9926.873291   0.073486  100.000000      100.000000
6   10026.946777   10024.324219 -8749.749268  10026.946777    2.000000  10024.324219   0.073486    2.549072        0.000000
7   10026.946777   10026.873291 -8651.311768  10026.946777    2.500000  10026.873291   0.073486    0.000000       -1.562500
8   10029.946777   10028.435791 -8651.311768  10029.946777    3.000000  10028.435791   0.073486    1.437500      -98.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:08:20]  --------------------------------------------------------------------------------
[07/26 16:08:20]  Iteration: 19 (2 solution, 16 counterexamples)
[07/26 16:08:24]  Took 4.200836420059204 secs to build known solver.
[07/26 16:08:24]  Took 4.241452217102051 secs to solve known solver.
[07/26 16:08:24]  Known solution works.
[07/26 16:08:25]  Generator returned sat in 0.375626 secs.
[07/26 16:08:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:25]  Improved number of small numbers from 56 to 99 out of a max of 99
[07/26 16:08:25]  Verifer returned sat in 0.228029 secs.
[07/26 16:08:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9126.225830    9026.225830 -8749.749268   9126.225830    0.098145  9026.225830   0.000000  100.000000       99.999756
1    9126.225830    9026.226074 -8749.749268   9126.225830   99.987549  9026.226074   0.000000   99.999756       -0.000244
2    9226.225830    9226.213867 -8749.749268   9226.225830  199.999756  9226.213867   0.000000    0.011963       -0.000244
3    9525.738525    9326.213623 -8749.749268   9525.738525  299.524658  9326.213623   0.000000  199.524902      199.512451
4    9626.238281    9376.232178 -8749.749268   9626.238281  300.024658  9376.232178   0.012207  249.993896      200.000000
5    9726.250488    9526.226074 -8749.749268   9726.250488  350.006104  9526.226074   0.024414  200.000000      200.000000
6    9826.262695    9626.226074 -8749.749268   9826.262695  300.012207  9626.226074   0.036621  200.000000      200.000000
7    9926.275146    9701.235352 -8749.749268   9926.275146  300.012451  9701.235352   0.049072  224.990723      200.000000
8   10026.287598    9726.226074 -8749.749268  10026.287598  325.003174  9726.226074   0.061523  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 16:08:25]  --------------------------------------------------------------------------------
[07/26 16:08:25]  Iteration: 20 (2 solution, 17 counterexamples)
[07/26 16:08:30]  Took 4.477373123168945 secs to build known solver.
[07/26 16:08:30]  Took 4.532066822052002 secs to solve known solver.
[07/26 16:08:30]  Known solution works.
[07/26 16:08:32]  Generator returned sat in 2.061620 secs.
[07/26 16:08:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:08:32]  Improved gap from 1/800 to 100
[07/26 16:08:33]  Improved number of small numbers from 63 to 75 out of a max of 100
[07/26 16:08:33]  Verifer returned sat in 0.650552 secs.
[07/26 16:08:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9428.166504    9428.163991 -8749.749268   9428.166504    0.098145   9428.163991    0.00000    0.002513        0.002513
1    9428.166504    9428.164062 -8749.749268   9428.166504    0.001250   9428.164062    0.00000    0.002441      -99.997487
2    9628.163818    9528.163991 -8749.749268   9628.163818  199.999756   9528.163991    0.00000   99.999827       -0.000173
3    9661.164824    9628.163991 -8749.749268   9661.164824  133.000833   9628.163991    0.00000   33.000833      -66.999167
4   10028.165241    9728.163991 -8749.749268  10028.165241  400.001250   9728.163991    0.00125  300.000000      200.000000
5   10028.165241    9877.907116 -8749.749268  10028.165241    0.010000   9877.907116    0.00125  150.256875      100.000000
6   10228.166491    9928.164062 -8749.749268  10228.166491  350.258125   9928.164062    0.00250  299.999928      200.000000
7   10228.166491   10128.163991 -8749.749268  10228.166491    0.010000  10128.163991    0.00250  100.000000      100.000000
8   10528.681491   10128.164062 -8749.749268  10528.681491  400.515000  10128.164062  100.51750  299.999928      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:08:33]  --------------------------------------------------------------------------------
[07/26 16:08:33]  Iteration: 21 (2 solution, 18 counterexamples)
[07/26 16:08:38]  Took 4.766167163848877 secs to build known solver.
[07/26 16:08:38]  Took 4.812552452087402 secs to solve known solver.
[07/26 16:08:38]  Known solution works.
[07/26 16:08:40]  Generator returned sat in 1.732323 secs.
[07/26 16:08:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:08:41]  Improved gap from 0 to 31.25
[07/26 16:08:42]  Improved number of small numbers from 41 to 54 out of a max of 100
[07/26 16:08:42]  Verifer returned sat in 1.606025 secs.
[07/26 16:08:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9904.422363    9866.801249 -8840.014648   9904.422363    0.097900   9866.801249   0.000000   37.621114       37.620992
1    9904.422363    9873.172587 -8777.635864   9904.422363    0.024414   9873.172587   0.000000   31.249776       -0.000224
2    9945.310527    9904.422587 -8718.523804   9945.310527   72.137939   9904.422587   0.000000   40.887939        0.000000
3    9945.310527    9945.310527 -8649.773926   9945.310527    0.024536   9945.310527   0.000000    0.000000      -31.250122
4    9986.589701    9986.565165 -8591.028564   9986.589701   41.279175   9986.565165   0.000000    0.024536      -31.225586
5   10086.540629   10055.290629 -8559.753906  10086.540629   99.975464  10055.290629   0.000000   31.250000        0.000000
6   10232.700114   10186.540629 -8559.753906  10232.700114  177.409485  10186.540629   0.000000   46.159485       46.159485
7   10486.565165   10186.540771 -8559.753906  10486.565165  300.024536  10186.540771   0.024536  299.999858      200.000000
8   10486.565165   10286.540771 -8559.753906  10486.565165    2.000000  10286.540771   0.024536  199.999858      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:08:42]  --------------------------------------------------------------------------------
[07/26 16:08:42]  Iteration: 22 (2 solution, 19 counterexamples)
[07/26 16:08:47]  Took 4.9854981899261475 secs to build known solver.
[07/26 16:08:47]  Took 5.035262823104858 secs to solve known solver.
[07/26 16:08:47]  Known solution works.
[07/26 16:08:48]  Generator returned sat in 1.040017 secs.
[07/26 16:08:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:08:49]  Improved gap from 0 to 26.5625
[07/26 16:08:50]  Improved number of small numbers from 38 to 50 out of a max of 100
[07/26 16:08:50]  Verifer returned sat in 1.340617 secs.
[07/26 16:08:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   10133.513428   10106.042216 -9079.255371  10133.513428    0.097656  10106.042216    0.000000   27.471212       27.471191
1   10133.513428   10106.951090 -9006.726725  10133.513428    0.024414  10106.951090    0.000000   26.562337       -0.000163
2   10160.076090   10133.513590 -8933.289225  10160.076090   53.125000  10133.513590    0.000000   26.562500        0.000000
3   10160.076090   10160.076090 -8859.851725  10160.076090    0.024475  10160.076090    0.000000    0.000000      -26.562500
4   10189.141978   10186.638590 -8833.264648  10189.141978   29.065887  10186.638590    0.000000    2.503387      -70.909536
5   10286.614115   10260.051615 -8759.827250  10286.614115   99.975525  10260.051615    0.000000   26.562500        0.000000
6   10525.271678   10386.614115 -8759.827250  10525.271678  265.220062  10386.614115    0.000000  138.657562      138.657562
7   11032.323252   10386.614258 -8759.827250  11032.323252  645.709137  10386.614258  345.709137  299.999858      200.000000
8   11032.323252   10486.614258 -8759.827250  11032.323252    1.500000  10486.614258  345.709137  199.999858      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:08:50]  --------------------------------------------------------------------------------
[07/26 16:08:50]  Iteration: 23 (2 solution, 20 counterexamples)
[07/26 16:08:55]  Took 5.3141045570373535 secs to build known solver.
[07/26 16:08:55]  Took 5.365986347198486 secs to solve known solver.
[07/26 16:08:55]  Known solution works.
[07/26 16:08:56]  Generator returned sat in 0.650484 secs.
[07/26 16:08:56]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:08:56]  Improved gap from 25/1024 to 100
[07/26 16:08:56]  Improved number of small numbers from 64 to 100 out of a max of 100
[07/26 16:08:56]  Verifer returned sat in 0.209654 secs.
[07/26 16:08:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9960.313721    9860.313965 -8833.5271   9960.313721    0.097412   9860.313965   0.000000   99.999756       99.999756
1    9960.313721    9860.313965 -8833.5271   9960.313721    0.024170   9860.313965   0.000000   99.999756       -0.000244
2   10060.313965    9960.313965 -8833.5271  10060.313965  200.000000   9960.313965   0.000000  100.000000        0.000000
3   10360.338135   10160.076172 -8833.5271  10360.338135  400.024170  10160.076172   0.024170  200.237793      200.000000
4   10460.362549   10239.313965 -8833.5271  10460.362549  300.262207  10239.313965   0.048584  221.000000      200.000000
5   10618.862549   10318.313965 -8833.5271  10618.862549  379.500000  10318.313965  58.548584  242.000000      200.000000
6   10735.362549   10460.076172 -8833.5271  10735.362549  358.500000  10460.076172  75.048584  200.237793      200.000000
7   10835.624756   10560.313965 -8833.5271  10835.624756  300.500000  10560.313965  75.310791  200.000000      200.000000
8   10957.124756   10560.313965 -8833.5271  10957.124756  321.500000  10560.313965  96.810791  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 16:08:57]  --------------------------------------------------------------------------------
[07/26 16:08:57]  Iteration: 24 (2 solution, 21 counterexamples)
[07/26 16:09:02]  Took 5.542909145355225 secs to build known solver.
[07/26 16:09:02]  Took 5.597902297973633 secs to solve known solver.
[07/26 16:09:02]  Known solution works.
[07/26 16:09:03]  Generator returned sat in 0.862529 secs.
[07/26 16:09:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:09:04]  Improved gap from 99/8192 to 0
[07/26 16:09:04]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/26 16:09:04]  Verifer returned sat in 0.367973 secs.
[07/26 16:09:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10532.011963   10431.999756 -8833.527100  10532.011963    0.097412  10431.999756   0.000000  100.012207        0.012207
1   10532.011963   10531.999756 -8833.527100  10532.011963    0.024170  10531.999756   0.000000    0.012207      -99.987793
2   10632.011719   10631.999756 -8833.527100  10632.011719  100.011963  10631.999756   0.000000    0.011963      -99.988037
3   11032.011719   10831.999756 -8833.527100  11032.011719  400.011963  10831.999756   0.011963  200.000000      200.000000
4   11032.011719   10931.999756 -8833.527100  11032.011719    1.500000  10931.999756   0.011963  100.000000      100.000000
5   11032.011719   11030.987549 -8833.527100  11032.011719    1.000000  11030.987549   0.011963    1.012207        0.000000
6   11032.011719   11031.999756 -8734.514893  11032.011719    1.000000  11031.999756   0.011963    0.000000       -0.987793
7   11033.011719   11032.987549 -8635.514893  11033.011719    1.000000  11032.987549   0.011963    0.012207       -0.987793
8   11033.999512   11033.987549 -8635.514893  11033.999512    1.000000  11033.987549   0.011963    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:09:04]  --------------------------------------------------------------------------------
[07/26 16:09:04]  Iteration: 25 (2 solution, 22 counterexamples)
[07/26 16:09:10]  Took 5.792060613632202 secs to build known solver.
[07/26 16:09:10]  Took 5.848876476287842 secs to solve known solver.
[07/26 16:09:10]  Known solution works.
[07/26 16:09:11]  Generator returned sat in 0.310592 secs.
[07/26 16:09:11]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:09:11]  Improved gap from 99/8192 to 1.5625
[07/26 16:09:11]  Improved number of small numbers from 100 to 100 out of a max of 100
[07/26 16:09:11]  Verifer returned sat in 0.238775 secs.
[07/26 16:09:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10826.949219   10826.949219 -9228.476562  10826.949219    0.097412  10826.949219        0.0    0.000000     -100.000000
1   11028.511719   10926.949219 -9228.476562  11028.511719  201.562500  10926.949219        0.0  101.562500        1.562500
2   11028.511719   11026.949219 -9130.039062  11028.511719    0.048584  11026.949219        0.0    1.562500        0.000000
3   11226.608887   11128.511719 -9130.039062  11226.608887  199.659668  11128.511719        0.0   98.097168       98.097168
4   11226.608887   11226.560303 -9130.039062  11226.608887    2.000000  11226.560303        0.0    0.048584       -1.902832
5   11228.560303   11228.511719 -9031.601562  11228.560303    2.000000  11228.511719        0.0    0.048584       -1.513916
6   11230.511719   11230.463135 -8933.552979  11230.511719    2.000000  11230.463135        0.0    0.048584       -1.513916
7   11232.463135   11232.414551 -8835.504395  11232.463135    2.000000  11232.414551        0.0    0.048584       -1.513916
8   11234.414551   11233.977051 -8835.504395  11234.414551    2.000000  11233.977051        0.0    0.437500      -99.562500
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:09:11]  --------------------------------------------------------------------------------
[07/26 16:09:11]  Iteration: 26 (2 solution, 23 counterexamples)
[07/26 16:09:17]  Took 6.035594940185547 secs to build known solver.
[07/26 16:09:17]  Took 6.094789981842041 secs to solve known solver.
[07/26 16:09:17]  Known solution works.
[07/26 16:09:20]  Generator returned sat in 2.802942 secs.
[07/26 16:09:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:09:20]  Improved gap from 151/100 to 0
[07/26 16:09:21]  Improved number of small numbers from 65 to 81 out of a max of 100
[07/26 16:09:21]  Verifer returned sat in 0.554823 secs.
[07/26 16:09:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10826.948975   10826.946533 -9128.474307  10826.948975    0.096924  10826.946533     0.0000    0.002441        0.002256
1   11026.946533   10926.946533 -9128.474307  11026.946533  200.000000  10926.946533     0.0000  100.000000       99.999814
2   11026.946533   10926.946719 -9128.474307  11026.946533    0.002686  10926.946719     0.0000   99.999814       -0.000186
3   11226.449219   11126.946719 -9128.474307  11226.449219  299.502500  11126.946719     0.0000   99.502500       99.502500
4   11426.949219   11226.946533 -9128.474307  11426.949219  300.002500  11226.946533     0.0025  200.000186      200.000000
5   11426.949219   11326.946533 -9128.474307  11426.949219    0.010000  11326.946533     0.0025  100.000186      100.000000
6   11426.949219   11426.944219 -9128.474307  11426.949219    0.510000  11426.944219     0.0025    0.002500        0.000000
7   11427.956719   11426.946719 -9029.984131  11427.956719    1.010000  11426.946719     0.0025    1.007500       -0.502324
8   11428.459219   11428.456543 -9029.984131  11428.459219    1.510000  11428.456543     0.0025    0.000176      -99.999824
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:09:21]  --------------------------------------------------------------------------------
[07/26 16:09:21]  Iteration: 27 (2 solution, 24 counterexamples)
[07/26 16:09:28]  Took 6.329147815704346 secs to build known solver.
[07/26 16:09:28]  Took 6.393136739730835 secs to solve known solver.
[07/26 16:09:28]  Known solution works.
[07/26 16:09:29]  Generator returned sat in 0.677449 secs.
[07/26 16:09:29]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:09:29]  Improved gap from 39577/800 to 100
[07/26 16:09:29]  Improved number of small numbers from 67 to 73 out of a max of 100
[07/26 16:09:29]  Verifer returned sat in 0.489419 secs.
[07/26 16:09:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t   cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10826.446533   10826.444033 -9128.474365  10826.446533    0.09668  10826.444033      0.000    0.002500          0.0025
1   10976.454033   10826.444092 -9128.474365  10976.454033  150.01000  10826.444092      0.000  150.009941         50.0100
2   10976.454033   10926.444033 -9128.474365  10976.454033    0.00250  10926.444033      0.000   50.010000        -49.9900
3   11026.446533   11026.444033 -9128.474365  11026.446533  100.00250  11026.444033      0.000    0.002500        -99.9975
4   11426.949033   11126.444033 -9128.474365  11426.949033  400.50500  11126.444033      0.505  300.000000        200.0000
5   11426.949033   11326.444033 -9128.474365  11426.949033    0.01000  11326.444033      0.505  100.000000        100.0000
6   11727.469033   11426.443848 -9128.474365  11727.469033  400.52000  11426.443848    101.025  200.000186        200.0000
7   11727.469033   11526.429033 -9128.474365  11727.469033    0.01000  11526.429033    101.025  100.015000        100.0000
8   12027.959033   11526.444092 -9128.474365  12027.959033  400.50500  11526.444092    201.515  299.999941        200.0000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:09:29]  --------------------------------------------------------------------------------
[07/26 16:09:29]  Iteration: 28 (2 solution, 25 counterexamples)
[07/26 16:09:36]  Took 6.563666343688965 secs to build known solver.
[07/26 16:09:36]  Took 6.628127336502075 secs to solve known solver.
[07/26 16:09:36]  Known solution works.
[07/26 16:09:38]  Generator returned sat in 1.889293 secs.
[07/26 16:09:38]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:09:39]  Improved gap from 39599/400 to 98.4375
[07/26 16:09:40]  Improved number of small numbers from 67 to 75 out of a max of 100
[07/26 16:09:40]  Verifer returned sat in 1.489750 secs.
[07/26 16:09:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11229.026367   11027.466494 -9128.474365  11229.026367    0.096436  11027.466494     0.0000  201.559873      101.559873
1   11229.028994   11227.466309 -9128.474365  11229.028994  201.562500  11227.466309     0.0000    1.562686        1.562500
2   11229.028994   11229.028994 -9128.474365  11229.028994    1.562500  11229.028994     0.0000    0.000000      -98.437500
3   11559.347744   11382.695244 -9128.474365  11559.347744  330.318750  11382.695244     0.0000  176.652500      131.881250
4   11727.468994   11527.466494 -9128.474365  11727.468994  344.773750  11527.466494     0.0025  200.000000      200.000000
5   11727.468994   11527.466494 -9128.474365  11727.468994    0.010000  11527.466494     0.0025  200.000000      100.000000
6   11727.468994   11627.466494 -9128.474365  11727.468994  151.223750  11627.466494     0.0025  100.000000        0.000000
7   11827.466494   11727.466494 -9128.471924  11827.466494  199.997500  11727.466494     0.0025   99.997500       -0.000059
8   11929.467744   11827.464111 -9128.471924  11929.467744  201.998750  11827.464111     0.0025  102.001133        2.001191
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:09:40]  --------------------------------------------------------------------------------
[07/26 16:09:40]  Iteration: 29 (2 solution, 26 counterexamples)
[07/26 16:09:47]  Took 6.891536235809326 secs to build known solver.
[07/26 16:09:47]  Took 6.959124803543091 secs to solve known solver.
[07/26 16:09:47]  Known solution works.
[07/26 16:09:49]  Generator returned sat in 1.352244 secs.
[07/26 16:09:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:09:50]  Improved gap from 1/400 to 29.6875
[07/26 16:09:50]  Improved number of small numbers from 56 to 100 out of a max of 100
[07/26 16:09:50]  Verifer returned sat in 1.134896 secs.
[07/26 16:09:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11229.026367   11186.331787 -9187.339600  11229.026367    0.096436  11186.331787   0.000000   42.694580       42.694580
1   11229.029053   11199.341553 -9130.036865  11229.029053   42.697266  11199.341553   0.000000   29.687500        0.000000
2   11269.531494   11229.029053 -9070.539307  11269.531494   70.189941  11229.029053   0.000000   40.502441        0.000000
3   11269.531494   11269.531494 -9000.227051  11269.531494    0.002686  11269.531494   0.000000    0.000000      -29.687744
4   11312.134033   11312.131592 -8983.449463  11312.134033   42.602539  11312.131592   0.000000    0.002441      -70.307617
5   11412.129150   11382.441650 -8913.136963  11412.129150   99.997559  11382.441650   0.000000   29.687500        0.000000
6   11560.145508   11512.129150 -8913.136963  11560.145508  177.703857  11512.129150   0.000000   48.016357       48.016357
7   11812.131836   11512.129150 -8913.136963  11812.131836  300.002686  11512.129150   0.002686  300.000000      200.000000
8   11812.131836   11612.129150 -8913.136963  11812.131836    0.010000  11612.129150   0.002686  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:09:50]  --------------------------------------------------------------------------------
[07/26 16:09:50]  Iteration: 30 (2 solution, 27 counterexamples)
[07/26 16:09:57]  Took 7.088539123535156 secs to build known solver.
[07/26 16:09:57]  Took 7.157746315002441 secs to solve known solver.
[07/26 16:09:57]  Known solution works.
[07/26 16:09:58]  Generator returned sat in 0.455431 secs.
[07/26 16:09:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:09:58]  Improved gap from 98 to 100
[07/26 16:09:59]  Improved number of small numbers from 26 to 100 out of a max of 100
[07/26 16:09:59]  Verifer returned sat in 0.525099 secs.
[07/26 16:09:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10818.358643   10618.406738 -8869.515137  10818.358643    0.096191  10618.406738   0.000000  199.951904       100.00000
1   10818.358643   10718.358643 -8869.515137  10818.358643  199.951660  10718.358643   0.000000  100.000000         0.00000
2   11118.334473   10818.358643 -8869.515137  11118.334473  399.975830  10818.358643   0.000000  299.975830       199.97583
3   11118.334473   11018.358398 -8869.515137  11118.334473   99.048340  11018.358398   0.000000   99.976074        99.97583
4   11318.382568   11118.358643 -8869.515137  11318.382568  300.024170  11118.358643   0.023926  200.000000       200.00000
5   11320.382568   11149.708252 -8869.515137  11320.382568  202.000000  11149.708252   0.023926  170.650391       102.00000
6   11518.406982   11312.406738 -8869.515137  11518.406982  368.674805  11312.406738   0.048340  205.951904       200.00000
7   11518.406982   11418.358643 -8869.515137  11518.406982  149.024170  11418.358643   0.048340  100.000000       100.00000
8   11718.431152   11418.358643 -8869.515137  11718.431152  300.024170  11418.358643   0.072510  300.000000       200.00000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:09:59]  --------------------------------------------------------------------------------
[07/26 16:09:59]  Iteration: 31 (2 solution, 28 counterexamples)
[07/26 16:10:06]  Took 7.353496789932251 secs to build known solver.
[07/26 16:10:06]  Took 7.4252028465271 secs to solve known solver.
[07/26 16:10:06]  Known solution works.
[07/26 16:10:08]  Generator returned sat in 0.869988 secs.
[07/26 16:10:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:10:08]  Improved gap from 1/8192 to 0
[07/26 16:10:08]  Improved number of small numbers from 61 to 72 out of a max of 100
[07/26 16:10:08]  Verifer returned sat in 0.603755 secs.
[07/26 16:10:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10818.358398   10618.406738 -8869.515137  10818.358398    0.096191  10618.406738   0.000000  199.951660       99.999756
1   10818.358398   10718.358643 -8869.515137  10818.358398  199.951416  10718.358643   0.000000   99.999756       -0.000244
2   11118.358643   10818.358643 -8869.515137  11118.358643  400.000000  10818.358643   0.000000  300.000000      200.000000
3   11118.358643   10918.358643 -8869.515137  11118.358643  266.666748  10918.358643   0.000000  200.000000      100.000000
4   11318.358765   11118.358643 -8869.515137  11318.358765  400.000122  11118.358643   0.000122  200.000000      200.000000
5   11318.358765   11218.358643 -8869.515137  11318.358765    0.010000  11218.358643   0.000122  100.000000      100.000000
6   11318.358765   11318.358521 -8869.515137  11318.358765    0.015000  11318.358521   0.000122    0.000122        0.000000
7   11318.381143   11318.358643 -8769.537598  11318.381143    0.022500  11318.358643   0.000122    0.022378       -0.000083
8   11318.392515   11318.381104 -8769.537598  11318.392515    0.033750  11318.381104   0.000122    0.011289      -99.988711
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:10:09]  --------------------------------------------------------------------------------
[07/26 16:10:09]  Iteration: 32 (2 solution, 29 counterexamples)
[07/26 16:10:16]  Took 7.619244813919067 secs to build known solver.
[07/26 16:10:16]  Took 7.6937315464019775 secs to solve known solver.
[07/26 16:10:16]  Known solution works.
[07/26 16:10:20]  Generator returned sat in 2.773326 secs.
[07/26 16:10:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:10:20]  Improved gap from 0 to 12.5
[07/26 16:10:20]  Improved number of small numbers from 74 to 100 out of a max of 100
[07/26 16:10:20]  Verifer returned sat in 0.529582 secs.
[07/26 16:10:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t
0   11118.334473   10918.334473 -8869.515137  11118.334473    0.095947  10918.334473   0.000000  200.00000           100.0
1   11118.334473   11018.334473 -8869.515137  11118.334473    0.024170  11018.334473   0.000000  100.00000             0.0
2   11418.382568   11118.334473 -8869.515137  11418.382568  400.048096  11118.334473   0.048096  300.00000           200.0
3   11518.382568   11318.310303 -8869.515137  11518.382568  400.000000  11318.310303   0.048096  200.02417           200.0
4   11518.382568   11418.310303 -8869.515137  11518.382568  200.000000  11418.310303   0.048096  100.02417           100.0
5   11518.382568   11518.310303 -8869.515137  11518.382568  100.000000  11518.310303   0.048096    0.02417             0.0
6   11568.358398   11518.334473 -8819.490967  11568.358398   50.000000  11518.334473   0.048096   49.97583             0.0
7   11568.358398   11568.310303 -8731.990967  11568.358398   25.000000  11568.310303   0.048096    0.00000           -12.5
8   11580.858398   11580.810303 -8731.990967  11580.858398   12.500000  11580.810303   0.048096    0.00000          -100.0
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:10:20]  --------------------------------------------------------------------------------
[07/26 16:10:20]  Iteration: 33 (2 solution, 30 counterexamples)
[07/26 16:10:28]  Took 7.91201639175415 secs to build known solver.
[07/26 16:10:28]  Took 7.990279912948608 secs to solve known solver.
[07/26 16:10:28]  Known solution works.
[07/26 16:10:32]  Generator returned sat in 3.260657 secs.
[07/26 16:10:32]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:10:33]  Improved gap from 1/400 to 29.6875
[07/26 16:10:33]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 16:10:33]  Verifer returned sat in 0.871017 secs.
[07/26 16:10:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10607.957520   10570.260254 -8931.817871  10607.957520    0.095703  10570.260254   0.000000   37.697266       37.697266
1   10607.957520   10578.270020 -8869.515137  10607.957520    0.002441  10578.270020   0.000000   29.687500        0.000000
2   10652.459961   10607.957520 -8814.017578  10652.459961   74.189941  10607.957520   0.000000   44.502441        0.000000
3   10652.459961   10652.459961 -8743.705322  10652.459961    0.002686  10652.459961   0.000000    0.000000      -29.687744
4   10694.062500   10694.060059 -8685.305176  10694.062500   41.602539  10694.060059   0.000000    0.002441      -29.685059
5   10794.057617   10764.370117 -8655.615234  10794.057617   99.997559  10764.370117   0.000000   29.687500        0.000000
6   10943.073975   10894.057617 -8655.615234  10943.073975  178.703857  10894.057617   0.000000   49.016357       49.016357
7   11194.060303   10894.057617 -8655.615234  11194.060303  300.002686  10894.057617   0.002686  300.000000      200.000000
8   11194.060303   10994.057617 -8655.615234  11194.060303    0.010000  10994.057617   0.002686  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:10:33]  --------------------------------------------------------------------------------
[07/26 16:10:33]  Iteration: 34 (2 solution, 31 counterexamples)
[07/26 16:10:41]  Took 8.131011247634888 secs to build known solver.
[07/26 16:10:41]  Took 8.210505247116089 secs to solve known solver.
[07/26 16:10:41]  Known solution works.
[07/26 16:10:44]  Generator returned sat in 1.815211 secs.
[07/26 16:10:44]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:10:45]  Improved gap from 28355/1024 to 29.6875
[07/26 16:10:45]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/26 16:10:45]  Verifer returned sat in 1.303776 secs.
[07/26 16:10:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10637.600830   10637.595947 -8939.843994  10637.600830    0.095703  10637.595947   0.000000    0.004883        0.004883
1   10637.600830   10637.598389 -8869.533936  10637.600830    0.002500  10637.598389   0.000000    0.002441      -29.685059
2   10715.788330   10667.285889 -8818.036377  10715.788330   78.189941  10667.285889   0.000000   48.502441        0.000000
3   10715.788330   10715.788330 -8752.386230  10715.788330    1.506104  10715.788330   0.000000    0.000000      -34.349854
4   10756.390625   10756.388428 -8728.946289  10756.390625   40.602295  10756.388428   0.000000    0.002197      -70.307617
5   10856.385742   10826.698486 -8658.634033  10856.385742   99.997314  10826.698486   0.000000   29.687256       -0.000244
6   11006.402100   10956.385986 -8658.634033  11006.402100  179.703613  10956.385986   0.000000   50.016113       50.016113
7   11256.388428   11056.385742 -8658.634033  11256.388428  300.002441  11056.385742   0.002441  200.000244      200.000000
8   11256.388428   11056.385986 -8658.634033  11256.388428    0.010000  11056.385986   0.002441  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:10:45]  --------------------------------------------------------------------------------
[07/26 16:10:45]  Iteration: 35 (2 solution, 32 counterexamples)
[07/26 16:10:54]  Took 8.393342971801758 secs to build known solver.
[07/26 16:10:54]  Took 8.475733757019043 secs to solve known solver.
[07/26 16:10:54]  Known solution works.
[07/26 16:10:57]  Generator returned sat in 2.414455 secs.
[07/26 16:10:57]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:10:57]  Improved gap from 1/800 to 100
[07/26 16:10:58]  Improved number of small numbers from 67 to 77 out of a max of 100
[07/26 16:10:58]  Verifer returned sat in 0.765344 secs.
[07/26 16:10:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10467.784668   10467.784580 -8658.634033  10467.784668    0.095459  10467.784580    0.00000    0.000088      -99.001162
1   10666.785830   10566.785889 -8658.634033  10666.785830  199.001250  10566.785889    0.00000   99.999941        0.000000
2   10666.787109   10666.785830 -8658.634033  10666.787109  100.001221  10666.785830    0.00000    0.001279      -99.998721
3   10866.785830   10766.785830 -8658.634033  10866.785830  200.000000  10766.785830    0.00000  100.000000        0.000000
4   11166.787080   10866.785830 -8658.634033  11166.787080  400.001250  10866.785830    0.00125  300.000000      200.000000
5   11166.787080   11016.283955 -8658.634033  11166.787080    0.010000  11016.283955    0.00125  150.501875      100.000000
6   11366.788330   11066.785889 -8658.634033  11366.788330  350.503125  11066.785889    0.00250  299.999941      200.000000
7   11366.788330   11265.782080 -8658.634033  11366.788330    0.010000  11265.782080    0.00250  101.003750      100.000000
8   11665.785830   11266.785889 -8658.634033  11665.785830  400.001250  11266.785889   99.00000  299.999941      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:10:58]  --------------------------------------------------------------------------------
[07/26 16:10:58]  Iteration: 36 (2 solution, 33 counterexamples)
[07/26 16:11:06]  Took 8.660761833190918 secs to build known solver.
[07/26 16:11:07]  Took 8.771270036697388 secs to solve known solver.
[07/26 16:11:07]  Known solution works.
[07/26 16:11:10]  Generator returned sat in 2.475132 secs.
[07/26 16:11:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:11:10]  Improved gap from 391/8192 to 98.4375
[07/26 16:11:10]  Improved number of small numbers from 57 to 75 out of a max of 100
[07/26 16:11:10]  Verifer returned sat in 0.600060 secs.
[07/26 16:11:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10666.882324   10666.834473 -8858.683105  10666.882324    0.095459  10666.834473   0.000000    0.047852      -99.952148
1   11066.786621   10866.834473 -8858.683105  11066.786621  399.952148  10866.834473   0.000000  199.952148      199.952148
2   11166.786621   10966.834473 -8858.683105  11166.786621  299.952148  10966.834473   0.000000  199.952148      199.952148
3   11166.786621   11055.980225 -8858.683105  11166.786621   24.436577  11055.980225   0.000000  110.806396       99.952148
4   11166.786621   11166.739136 -8858.683105  11166.786621   49.373154  11166.739136   0.000000    0.047485       -0.047852
5   11265.985443   11167.698792 -8858.682861  11265.985443   99.246307  11167.698792   0.000000   98.286652       -0.848785
6   11366.691406   11268.253906 -8858.540039  11366.691406  198.992615  11268.253906   0.000000   98.437500        0.000000
7   11666.739136   11366.691406 -8858.540039  11666.739136  398.485229  11366.691406   0.047729  300.000000      200.000000
8   11666.739136   11466.691406 -8858.540039  11666.739136    1.500000  11466.691406   0.047729  200.000000      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:11:10]  --------------------------------------------------------------------------------
[07/26 16:11:10]  Iteration: 37 (2 solution, 34 counterexamples)
[07/26 16:11:19]  Took 8.957131385803223 secs to build known solver.
[07/26 16:11:19]  Took 9.046105861663818 secs to solve known solver.
[07/26 16:11:19]  Known solution works.
[07/26 16:11:22]  Generator returned sat in 1.836680 secs.
[07/26 16:11:22]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:11:22]  Improved number of small numbers from 62 to 74 out of a max of 99
[07/26 16:11:22]  Verifer returned sat in 0.639131 secs.
[07/26 16:11:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11066.846924   10766.849473 -8858.683105  11066.846924    0.095215  10766.849473      0.000  299.997451      299.997451
1   11066.846924   10766.849609 -8858.683105  11066.846924    0.002441  10766.849609      0.000  299.997314      199.997451
2   11066.846924   10966.849473 -8858.683105  11066.846924  299.994873  10966.849473      0.000   99.997451       99.997451
3   11266.849473   11016.854473 -8858.683105  11266.849473  300.000000  11016.854473      0.000  249.995000      200.000000
4   11416.859473   11066.849473 -8858.683105  11416.859473  400.005000  11066.849473     50.010  300.000000      200.000000
5   11416.859473   11266.849473 -8858.683105  11416.859473    0.010000  11266.849473     50.010  100.000000      100.000000
6   11616.864473   11266.849609 -8858.683105  11616.864473  300.005000  11266.849609     50.015  299.999863      200.000000
7   11616.864473   11466.849473 -8858.683105  11616.864473    0.010000  11466.849473     50.015  100.000000      100.000000
8   11916.869473   11466.849609 -8858.683105  11916.869473  400.005000  11466.849609    150.020  299.999863      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:11:23]  --------------------------------------------------------------------------------
[07/26 16:11:23]  Iteration: 38 (2 solution, 35 counterexamples)
[07/26 16:11:32]  Took 9.237955093383789 secs to build known solver.
[07/26 16:11:32]  Took 9.330467700958252 secs to solve known solver.
[07/26 16:11:32]  Known solution works.
[07/26 16:11:36]  Generator returned sat in 3.329784 secs.
[07/26 16:11:36]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:11:36]  Improved gap from 5/8192 to 0
[07/26 16:11:36]  Improved number of small numbers from 54 to 100 out of a max of 100
[07/26 16:11:36]  Verifer returned sat in 0.235584 secs.
[07/26 16:11:36]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11515.863037   11115.864502 -9307.698242  11515.863037    0.094971  11115.864502        0.0  399.998535      299.998535
1   11515.863037   11215.864502 -9307.698242  11515.863037    0.002197  11215.864502        0.0  299.998535      199.998535
2   11515.863037   11315.864502 -9307.698242  11515.863037  299.994873  11315.864502        0.0  199.998535       99.998535
3   11616.865479   11515.864502 -9307.698242  11616.865479  301.000977  11515.864502        0.0  101.000977      101.000977
4   11616.865479   11615.864258 -9307.698242  11616.865479    1.000000  11615.864258        0.0    1.001221        1.000977
5   11616.865479   11615.864502 -9208.699219  11616.865479    1.000000  11615.864502        0.0    1.000977        0.000000
6   11616.865479   11616.865479 -9108.699219  11616.865479    1.000000  11616.865479        0.0    0.000000        0.000000
7   11617.865479   11617.864502 -9010.698242  11617.865479    1.000000  11617.864502        0.0    0.000977       -0.999023
8   11618.864502   11618.864502 -9010.698242  11618.864502    1.000000  11618.864502        0.0    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:11:37]  --------------------------------------------------------------------------------
[07/26 16:11:37]  Iteration: 39 (2 solution, 36 counterexamples)
[07/26 16:11:46]  Took 9.454869747161865 secs to build known solver.
[07/26 16:11:46]  Took 9.551069974899292 secs to solve known solver.
[07/26 16:11:46]  Known solution works.
[07/26 16:11:49]  Generator returned sat in 2.446280 secs.
[07/26 16:11:49]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:11:49]  Verifer returned unsat in 0.097821 secs.
[07/26 16:11:49]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:11:49]  --------------------------------------------------------------------------------
[07/26 16:11:49]  Iteration: 40 (3 solution, 36 counterexamples)
[07/26 16:11:59]  Took 9.448051929473877 secs to build known solver.
[07/26 16:11:59]  Took 9.544763326644897 secs to solve known solver.
[07/26 16:11:59]  Known solution works.
[07/26 16:12:00]  Generator returned sat in 0.539796 secs.
[07/26 16:12:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:00]  Verifer returned unsat in 0.103148 secs.
[07/26 16:12:00]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:00]  --------------------------------------------------------------------------------
[07/26 16:12:00]  Iteration: 41 (4 solution, 36 counterexamples)
[07/26 16:12:09]  Took 9.431262493133545 secs to build known solver.
[07/26 16:12:09]  Took 9.526870965957642 secs to solve known solver.
[07/26 16:12:09]  Known solution works.
[07/26 16:12:10]  Generator returned sat in 0.381550 secs.
[07/26 16:12:10]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:11]  Improved number of small numbers from 47 to 99 out of a max of 99
[07/26 16:12:11]  Verifer returned sat in 0.396295 secs.
[07/26 16:12:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   11813.006836   11413.054443 -9307.698242  11813.006836    0.094971  11413.054443    0.000000  399.952393      299.952393
1   11813.030762   11613.054443 -9307.698242  11813.030762  399.976318  11613.054443    0.000000  199.976318      199.976318
2   11913.078369   11613.054443 -9307.698242  11913.078369  300.023926  11613.054443    0.023926  300.000000      200.000000
3   11913.078369   11713.054443 -9307.698242  11913.078369  248.523682  11713.054443    0.023926  200.000000      100.000000
4   12113.102051   11813.054443 -9307.698242  12113.102051  400.023682  11813.054443    0.047607  300.000000      200.000000
5   12113.102051   12012.070068 -9307.698242  12113.102051  100.000000  12012.070068    0.047607  100.984375      100.000000
6   12313.125488   12110.101807 -9307.698242  12313.125488  301.007812  12110.101807    0.071045  202.952637      200.000000
7   12313.125488   12213.054443 -9307.698242  12313.125488  198.523682  12213.054443    0.071045  100.000000      100.000000
8   12613.149170   12213.054443 -9307.698242  12613.149170  400.023682  12213.054443  100.094727  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:12:11]  --------------------------------------------------------------------------------
[07/26 16:12:11]  Iteration: 42 (4 solution, 37 counterexamples)
[07/26 16:12:21]  Took 9.825238943099976 secs to build known solver.
[07/26 16:12:21]  Took 9.922844886779785 secs to solve known solver.
[07/26 16:12:21]  Known solution works.
[07/26 16:12:23]  Generator returned sat in 1.289898 secs.
[07/26 16:12:23]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:24]  Improved gap from 389/8192 to 98.4375
[07/26 16:12:25]  Improved number of small numbers from 32 to 44 out of a max of 100
[07/26 16:12:25]  Verifer returned sat in 1.681987 secs.
[07/26 16:12:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   11105.297607   11105.250000 -9309.260742  11105.297607    0.094971  11105.250000    0.000000    0.047607        0.000071
1   11105.297607   11105.297536 -9307.698242  11105.297607    0.047363  11105.297536    0.000000    0.000071      -98.437429
2   11281.281118   11281.233632 -9307.698242  11281.281118  175.983582  11281.233632    0.000000    0.047485      -22.453918
3   11881.328603   11403.735036 -9307.698242  11881.328603  600.094971  11403.735036  277.593567  200.000000      200.000000
4   11981.376088   11503.735036 -9307.698242  11981.376088  300.047485  11503.735036  277.641052  200.000000      200.000000
5   11981.376088   11503.735036 -9307.698242  11981.376088  150.023743  11503.735036  277.641052  200.000000      100.000000
6   11981.376088   11606.782522 -9307.698242  11981.376088  187.762573  11606.782522  277.641052   96.952515        0.000000
7   12081.328603   11703.735036 -9307.650879  12081.328603  196.905029  11703.735036  277.641052   99.952515       -0.000122
8   12181.328603   11803.687744 -9307.650879  12181.328603  199.952515  11803.687744  277.641052   99.999807       -0.000122
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:12:25]  --------------------------------------------------------------------------------
[07/26 16:12:25]  Iteration: 43 (4 solution, 38 counterexamples)
[07/26 16:12:35]  Took 9.955230951309204 secs to build known solver.
[07/26 16:12:35]  Took 10.055304050445557 secs to solve known solver.
[07/26 16:12:35]  Known solution works.
[07/26 16:12:40]  Generator returned sat in 4.266149 secs.
[07/26 16:12:40]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:40]  Improved gap from 7/196608 to 10.9375
[07/26 16:12:41]  Improved number of small numbers from 49 to 65 out of a max of 100
[07/26 16:12:41]  Verifer returned sat in 0.842587 secs.
[07/26 16:12:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   11105.297607   11105.249756 -9309.260742  11105.297607    0.094971  11105.249756   0.000000    0.047852        0.000071
1   11105.297607   11105.297607 -9307.698242  11105.297607    0.047363  11105.297607   0.000000    0.000000      -98.437429
2   11503.734863   11238.068115 -9307.698242  11503.734863  398.437256  11238.068115   0.000000  265.666748      199.999827
3   11503.734863   11303.735036 -9307.698242  11503.734863  265.666690  11303.735036   0.000000  199.999827       99.999827
4   11703.735072   11503.734863 -9307.698242  11703.735072  400.000036  11503.734863   0.000036  200.000173      200.000000
5   11703.735072   11603.734863 -9307.698242  11703.735072    1.500000  11603.734863   0.000036  100.000173      100.000000
6   11703.735072   11703.735001 -9307.698242  11703.735072    3.750000  11703.735001   0.000036    0.000036        0.000000
7   11710.860036   11703.735036 -9218.635742  11710.860036    7.125000  11703.735036   0.000036    7.124964       -3.812536
8   11715.922572   11714.672607 -9218.635742  11715.922572   12.187500  11714.672607   0.000036    1.249929      -98.750000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:12:41]  --------------------------------------------------------------------------------
[07/26 16:12:41]  Iteration: 44 (4 solution, 39 counterexamples)
[07/26 16:12:51]  Took 10.225506067276001 secs to build known solver.
[07/26 16:12:51]  Took 10.329223394393921 secs to solve known solver.
[07/26 16:12:51]  Known solution works.
[07/26 16:12:53]  Generator returned sat in 0.881448 secs.
[07/26 16:12:53]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:53]  Verifer returned unsat in 0.117326 secs.
[07/26 16:12:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:12:53]  --------------------------------------------------------------------------------
[07/26 16:12:53]  Iteration: 45 (5 solution, 39 counterexamples)
[07/26 16:13:03]  Took 10.24604868888855 secs to build known solver.
[07/26 16:13:03]  Took 10.351895332336426 secs to solve known solver.
[07/26 16:13:03]  Known solution works.
[07/26 16:13:04]  Generator returned sat in 0.545020 secs.
[07/26 16:13:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:04]  Verifer returned unsat in 0.064467 secs.
[07/26 16:13:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:04]  --------------------------------------------------------------------------------
[07/26 16:13:04]  Iteration: 46 (6 solution, 39 counterexamples)
[07/26 16:13:15]  Took 10.221805334091187 secs to build known solver.
[07/26 16:13:15]  Took 10.325153112411499 secs to solve known solver.
[07/26 16:13:15]  Known solution works.
[07/26 16:13:16]  Generator returned sat in 0.464863 secs.
[07/26 16:13:16]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:16]  Verifer returned unsat in 0.108915 secs.
[07/26 16:13:16]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:16]  --------------------------------------------------------------------------------
[07/26 16:13:16]  Iteration: 47 (7 solution, 39 counterexamples)
[07/26 16:13:26]  Took 10.218013525009155 secs to build known solver.
[07/26 16:13:26]  Took 10.322306632995605 secs to solve known solver.
[07/26 16:13:26]  Known solution works.
[07/26 16:13:27]  Generator returned sat in 0.445343 secs.
[07/26 16:13:27]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:27]  Improved gap from 389/8192 to 98.4375
[07/26 16:13:28]  Improved number of small numbers from 27 to 42 out of a max of 100
[07/26 16:13:28]  Verifer returned sat in 0.930180 secs.
[07/26 16:13:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10560.375488   10458.812988 -9307.698242  10560.375488    0.094971  10458.812988   0.000000  101.562500        1.562506
1   10560.375488   10560.375482 -9307.698242  10560.375488  101.562256  10560.375482   0.000000    0.000006      -98.437494
2   10958.836725   10758.812744 -9307.698242  10958.836725  398.461243  10758.812744   0.023743  200.000238      200.000000
3   10958.836725   10858.812744 -9307.698242  10958.836725   23.028828  10858.812744   0.023743  100.000238      100.000000
4   10958.836725   10957.067346 -9307.698242  10958.836725   48.057655  10957.067346   0.023743    1.745636        0.000000
5   11055.206399   10958.812982 -9307.491211  11055.206399   98.115311  10958.812982   0.023743   96.369675       -3.423294
6   11157.067346   11058.606103 -9305.928864  11157.067346  198.230621  11058.606103   0.023743   98.437500        0.000000
7   11457.091089   11157.043701 -9305.928864  11457.091089  398.461243  11157.043701   0.047485  299.999902      200.000000
8   11457.091089   11257.043701 -9305.928864  11457.091089    1.500000  11257.043701   0.047485  199.999902      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:13:28]  --------------------------------------------------------------------------------
[07/26 16:13:28]  Iteration: 48 (7 solution, 40 counterexamples)
[07/26 16:13:39]  Took 10.507062196731567 secs to build known solver.
[07/26 16:13:39]  Took 10.614316463470459 secs to solve known solver.
[07/26 16:13:39]  Known solution works.
[07/26 16:13:41]  Generator returned sat in 1.633622 secs.
[07/26 16:13:41]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:41]  Improved gap from 97/2048 to 100
[07/26 16:13:42]  Improved number of small numbers from 63 to 100 out of a max of 100
[07/26 16:13:42]  Verifer returned sat in 0.301926 secs.
[07/26 16:13:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10903.719482   10703.719727 -9307.698242  10903.719482    0.094971  10703.719727   0.000000  199.999756      100.000000
1   10903.719482   10903.672363 -9307.698242  10903.719482    0.047363  10903.672363   0.000000    0.047119        0.000000
2   11070.115967   10903.719482 -9307.698242  11070.115967  166.443604  10903.719482   0.000000  166.396484       66.396484
3   11070.115967   11070.068604 -9307.698242  11070.115967  166.349121  11070.068604   0.000000    0.047363      -33.603516
4   11404.766846   11201.719727 -9307.698242  11404.766846  334.698242  11201.719727   1.047363  201.999756      200.000000
5   11404.766846   11303.719482 -9307.698242  11404.766846  149.023682  11303.719482   1.047363  100.000000      100.000000
6   11604.814209   11402.766846 -9307.698242  11604.814209  300.047363  11402.766846   1.094727  200.952637      200.000000
7   11604.814209   11469.068604 -9307.698242  11604.814209  166.349121  11469.068604   1.094727  134.650879      100.000000
8   11804.861572   11503.719482 -9307.698242  11804.861572  334.698242  11503.719482   1.142090  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:13:42]  --------------------------------------------------------------------------------
[07/26 16:13:42]  Iteration: 49 (7 solution, 41 counterexamples)
[07/26 16:13:53]  Took 10.742172002792358 secs to build known solver.
[07/26 16:13:53]  Took 10.851186275482178 secs to solve known solver.
[07/26 16:13:53]  Known solution works.
[07/26 16:13:55]  Generator returned sat in 2.007745 secs.
[07/26 16:13:55]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:55]  Verifer returned unsat in 0.058295 secs.
[07/26 16:13:55]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:13:55]  --------------------------------------------------------------------------------
[07/26 16:13:55]  Iteration: 50 (8 solution, 41 counterexamples)
[07/26 16:14:06]  Took 10.752702474594116 secs to build known solver.
[07/26 16:14:06]  Took 10.864043474197388 secs to solve known solver.
[07/26 16:14:06]  Known solution works.
[07/26 16:14:07]  Generator returned sat in 0.350970 secs.
[07/26 16:14:07]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:14:07]  Verifer returned unsat in 0.034254 secs.
[07/26 16:14:07]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:14:07]  --------------------------------------------------------------------------------
[07/26 16:14:07]  Iteration: 51 (9 solution, 41 counterexamples)
[07/26 16:14:18]  Took 10.730596780776978 secs to build known solver.
[07/26 16:14:18]  Took 10.839978218078613 secs to solve known solver.
[07/26 16:14:18]  Known solution works.
[07/26 16:14:19]  Generator returned sat in 0.315658 secs.
[07/26 16:14:19]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:14:19]  Verifer returned unsat in 0.051778 secs.
[07/26 16:14:19]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:14:19]  --------------------------------------------------------------------------------
[07/26 16:14:19]  Iteration: 52 (10 solution, 41 counterexamples)
[07/26 16:14:30]  Took 10.767124891281128 secs to build known solver.
[07/26 16:14:30]  Took 10.87690806388855 secs to solve known solver.
[07/26 16:14:30]  Known solution works.
[07/26 16:14:31]  Generator returned sat in 0.273136 secs.
[07/26 16:14:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:14:31]  Verifer returned unsat in 0.035429 secs.
[07/26 16:14:31]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:14:31]  --------------------------------------------------------------------------------
[07/26 16:14:31]  Iteration: 53 (11 solution, 41 counterexamples)
[07/26 16:14:42]  Took 10.748239517211914 secs to build known solver.
[07/26 16:14:42]  Took 10.857971906661987 secs to solve known solver.
[07/26 16:14:42]  Known solution works.
[07/26 16:14:48]  Generator returned sat in 5.329623 secs.
[07/26 16:14:48]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:14:48]  Improved gap from 0 to 98.4375
[07/26 16:14:49]  Improved number of small numbers from 59 to 77 out of a max of 100
[07/26 16:14:49]  Verifer returned sat in 0.810303 secs.
[07/26 16:14:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10479.910156   10479.910156 -9307.698242  10479.910156    0.094727  10479.910156   0.000000    0.000000      -99.999851
1   10679.909912   10679.907508 -9307.698242  10679.909912  199.999756  10679.907508   0.000000    0.002405       -0.000095
2   10979.912508   10779.909912 -9307.698242  10979.912508  300.005000  10779.909912   0.002500  200.000095      200.000000
3   10979.912508   10879.909912 -9307.698242  10979.912508   24.902500  10879.909912   0.002500  100.000095      100.000000
4   10979.912508   10979.907508 -9307.698242  10979.912508   49.805000  10979.907508   0.002500    0.002500        0.000000
5   11079.520008   10980.685008 -9307.693115  11079.520008   99.610000  10980.685008   0.002500   98.832500       -0.387373
6   11179.907508   11081.467508 -9307.693115  11179.907508  199.220000  11081.467508   0.002500   98.437500        0.000127
7   11479.910008   11181.467529 -9307.693115  11479.910008  398.440000  11181.467529   0.005127  298.437351      200.000000
8   11479.910008   11279.905029 -9307.693115  11479.910008    0.010000  11279.905029   0.005127  199.999851      100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:14:49]  --------------------------------------------------------------------------------
[07/26 16:14:49]  Iteration: 54 (11 solution, 42 counterexamples)
[07/26 16:15:00]  Took 11.006333351135254 secs to build known solver.
[07/26 16:15:00]  Took 11.12160849571228 secs to solve known solver.
[07/26 16:15:00]  Known solution works.
[07/26 16:15:03]  Generator returned sat in 2.518718 secs.
[07/26 16:15:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:15:03]  Improved gap from 0 to 100
[07/26 16:15:04]  Improved number of small numbers from 63 to 69 out of a max of 100
[07/26 16:15:04]  Verifer returned sat in 0.689133 secs.
[07/26 16:15:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10579.911377   10579.911258 -9307.698242  10579.911377    0.094727  10579.911258   0.000000    0.000119        0.000119
1   10679.911258   10579.911258 -9307.698242  10679.911258  100.000000  10579.911258   0.000000  100.000000        0.000000
2   10979.912508   10734.911258 -9307.698242  10979.912508  400.001250  10734.911258   0.001250  245.000000      200.000000
3   10979.912508   10879.911258 -9307.698242  10979.912508    0.001250  10879.911258   0.001250  100.000000      100.000000
4   11179.914383   10929.911258 -9307.698242  11179.914383  300.001875  10929.911258   0.003125  250.000000      200.000000
5   11179.914383   11079.911258 -9307.698242  11179.914383    0.010000  11079.911258   0.003125  100.000000      100.000000
6   11424.929383   11079.911377 -9307.698242  11424.929383  345.015000  11079.911377  45.018125  299.999881      200.000000
7   11424.929383   11279.911258 -9307.698242  11424.929383    0.010000  11279.911258  45.018125  100.000000      100.000000
8   11674.944383   11279.911377 -9307.698242  11674.944383  350.015000  11279.911377  95.033125  299.999881      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:15:04]  --------------------------------------------------------------------------------
[07/26 16:15:04]  Iteration: 55 (11 solution, 43 counterexamples)
[07/26 16:15:15]  Took 11.27024221420288 secs to build known solver.
[07/26 16:15:16]  Took 11.384228467941284 secs to solve known solver.
[07/26 16:15:16]  Known solution works.
[07/26 16:15:18]  Generator returned sat in 1.394472 secs.
[07/26 16:15:18]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:15:18]  Improved number of small numbers from 32 to 99 out of a max of 99
[07/26 16:15:18]  Verifer returned sat in 0.454776 secs.
[07/26 16:15:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10679.911377   10677.840820 -9307.698486  10679.911377    0.094482  10677.840820   0.000000    2.070557        2.070312
1   10679.911377   10679.887695 -9307.698242  10679.911377    2.070312  10679.887695   0.000000    0.023682      -97.929443
2   10977.840576   10777.840820 -9307.698242  10977.840576  297.952881  10777.840820   0.000000  199.999756       99.999756
3   10977.840576   10975.887695 -9307.698242  10977.840576  152.953125  10975.887695   0.000000    1.952881       -0.000244
4   11277.864258   11077.840820 -9307.698242  11277.864258  301.976562  11077.840820   0.023438  200.000000      200.000000
5   11277.864258   11111.205566 -9307.698242  11277.864258  199.976562  11111.205566   0.023438  166.635254      100.000000
6   11477.887939   11277.840820 -9307.698242  11477.887939  366.658936  11277.840820   0.047119  200.000000      200.000000
7   11477.887939   11377.840820 -9307.698242  11477.887939  151.976562  11377.840820   0.047119  100.000000      100.000000
8   11679.864502   11377.840820 -9307.698242  11679.864502  301.976562  11377.840820   2.023682  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:15:18]  --------------------------------------------------------------------------------
[07/26 16:15:18]  Iteration: 56 (11 solution, 44 counterexamples)
[07/26 16:15:30]  Took 11.53125548362732 secs to build known solver.
[07/26 16:15:30]  Took 11.648873567581177 secs to solve known solver.
[07/26 16:15:30]  Known solution works.
[07/26 16:15:37]  Generator returned sat in 6.165283 secs.
[07/26 16:15:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:15:37]  Verifer returned unsat in 0.072147 secs.
[07/26 16:15:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:15:37]  --------------------------------------------------------------------------------
[07/26 16:15:37]  Iteration: 57 (12 solution, 44 counterexamples)
[07/26 16:15:49]  Took 11.534146070480347 secs to build known solver.
[07/26 16:15:49]  Took 11.65288519859314 secs to solve known solver.
[07/26 16:15:49]  Known solution works.
[07/26 16:15:50]  Generator returned sat in 0.419324 secs.
[07/26 16:15:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:15:50]  Verifer returned unsat in 0.074529 secs.
[07/26 16:15:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:15:50]  --------------------------------------------------------------------------------
[07/26 16:15:50]  Iteration: 58 (13 solution, 44 counterexamples)
[07/26 16:16:01]  Took 11.544548511505127 secs to build known solver.
[07/26 16:16:01]  Took 11.664440631866455 secs to solve known solver.
[07/26 16:16:01]  Known solution works.
[07/26 16:16:03]  Generator returned sat in 0.564169 secs.
[07/26 16:16:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:16:03]  Verifer returned unsat in 0.106454 secs.
[07/26 16:16:03]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:16:03]  --------------------------------------------------------------------------------
[07/26 16:16:03]  Iteration: 59 (14 solution, 44 counterexamples)
[07/26 16:16:14]  Took 11.534232139587402 secs to build known solver.
[07/26 16:16:14]  Took 11.653536081314087 secs to solve known solver.
[07/26 16:16:14]  Known solution works.
[07/26 16:16:20]  Generator returned sat in 4.565255 secs.
[07/26 16:16:20]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:16:20]  Verifer returned unsat in 0.139607 secs.
[07/26 16:16:20]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:16:20]  --------------------------------------------------------------------------------
[07/26 16:16:20]  Iteration: 60 (15 solution, 44 counterexamples)
[07/26 16:16:31]  Took 11.562594175338745 secs to build known solver.
[07/26 16:16:32]  Took 11.684117317199707 secs to solve known solver.
[07/26 16:16:32]  Known solution works.
[07/26 16:16:33]  Generator returned sat in 0.336119 secs.
[07/26 16:16:33]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:16:33]  Verifer returned unsat in 0.091353 secs.
[07/26 16:16:33]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:16:33]  --------------------------------------------------------------------------------
[07/26 16:16:33]  Iteration: 61 (16 solution, 44 counterexamples)
[07/26 16:16:44]  Took 11.548702955245972 secs to build known solver.
[07/26 16:16:44]  Took 11.668773889541626 secs to solve known solver.
[07/26 16:16:44]  Known solution works.
[07/26 16:16:47]  Generator returned sat in 2.368576 secs.
[07/26 16:16:47]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:16:48]  Improved gap from 751829/8192 to 98.4375
[07/26 16:16:49]  Improved number of small numbers from 28 to 42 out of a max of 100
[07/26 16:16:49]  Verifer returned sat in 1.918162 secs.
[07/26 16:16:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9973.910400    9773.886943 -9106.689487   9973.910400    0.094482   9773.886943   0.000000  200.023457      100.023457
1    9973.910400    9973.886719 -9106.689487   9973.910400    0.023682   9973.886719   0.000000    0.023682        0.023457
2   10073.886719    9973.886943 -9106.689487  10073.886719  100.000000   9973.886943   0.000000   99.999775       -0.000225
3   10173.933940   10173.886943 -9106.689487  10173.933940  200.046997  10173.886943   0.000000    0.046997        0.046997
4   10473.910442   10273.886943 -9106.689487  10473.910442  300.023499  10273.886943   0.023499  200.000000      200.000000
5   10473.910442   10306.704611 -9106.689487  10473.910442    1.500000  10306.704611   0.023499  167.182332      100.000000
6   10473.910442   10373.886943 -9106.689487  10473.910442  167.158834  10373.886943   0.023499  100.000000        0.000000
7   10557.489859   10475.425945 -9106.666016  10557.489859  183.579417  10475.425945   0.023499   82.040415      -16.397111
8   10668.008653   10573.863525 -9106.665771  10668.008653  192.559209  10573.863525   0.023499   94.121629       -5.878074
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:16:50]  --------------------------------------------------------------------------------
[07/26 16:16:50]  Iteration: 62 (16 solution, 45 counterexamples)
[07/26 16:17:01]  Took 11.818855285644531 secs to build known solver.
[07/26 16:17:02]  Took 11.94159460067749 secs to solve known solver.
[07/26 16:17:02]  Known solution works.
[07/26 16:17:03]  Generator returned sat in 1.142328 secs.
[07/26 16:17:03]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:17:04]  Improved gap from 819103/8192 to 98.4375
[07/26 16:17:04]  Improved number of small numbers from 38 to 100 out of a max of 100
[07/26 16:17:04]  Verifer returned sat in 0.699483 secs.
[07/26 16:17:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9989.214600    9824.619873 -9106.689697   9989.214600    0.094238   9824.619873   0.000000  164.594727      164.594727
1    9989.214600    9898.619873 -9106.689697   9989.214600    0.023682   9898.619873   0.000000   90.594727       64.594727
2    9989.214600    9989.214600 -9106.689697   9989.214600   90.594482   9989.214600   0.000000    0.000000      -35.405273
3   10324.595947   10124.619873 -9106.689697  10324.595947  335.381348  10124.619873   0.000000  199.976074      199.976074
4   10442.310547   10224.619873 -9106.689697  10442.310547  317.690674  10224.619873  17.690674  200.000000      200.000000
5   10442.310547   10224.619873 -9106.689697  10442.310547  164.500000  10224.619873  17.690674  200.000000      100.000000
6   10442.310547   10324.619873 -9106.689697  10442.310547  199.952637  10324.619873  17.690674  100.000000        0.000000
7   10542.286865   10426.158691 -9106.666016  10542.286865  199.976318  10426.158691  17.690674   98.437500        0.000000
8   10644.606934   10524.596191 -9106.666016  10644.606934  200.757568  10524.596191  17.690674  102.320068        2.320068
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:17:04]  --------------------------------------------------------------------------------
[07/26 16:17:04]  Iteration: 63 (16 solution, 46 counterexamples)
[07/26 16:17:16]  Took 12.057765007019043 secs to build known solver.
[07/26 16:17:17]  Took 12.182029485702515 secs to solve known solver.
[07/26 16:17:17]  Known solution works.
[07/26 16:17:24]  Generator returned sat in 6.345950 secs.
[07/26 16:17:24]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:17:24]  Verifer returned unsat in 0.067636 secs.
[07/26 16:17:24]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:17:24]  --------------------------------------------------------------------------------
[07/26 16:17:24]  Iteration: 64 (17 solution, 46 counterexamples)
[07/26 16:17:36]  Took 12.081682443618774 secs to build known solver.
[07/26 16:17:36]  Took 12.206702709197998 secs to solve known solver.
[07/26 16:17:36]  Known solution works.
[07/26 16:17:37]  Generator returned sat in 0.431099 secs.
[07/26 16:17:37]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:17:37]  Verifer returned unsat in 0.057022 secs.
[07/26 16:17:37]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:17:37]  --------------------------------------------------------------------------------
[07/26 16:17:37]  Iteration: 65 (18 solution, 46 counterexamples)
[07/26 16:17:49]  Took 12.042542934417725 secs to build known solver.
[07/26 16:17:49]  Took 12.166699409484863 secs to solve known solver.
[07/26 16:17:49]  Known solution works.
[07/26 16:17:50]  Generator returned sat in 0.427326 secs.
[07/26 16:17:50]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:17:50]  Verifer returned unsat in 0.037993 secs.
[07/26 16:17:50]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:17:50]  --------------------------------------------------------------------------------
[07/26 16:17:50]  Iteration: 66 (19 solution, 46 counterexamples)
[07/26 16:18:03]  Took 12.055695056915283 secs to build known solver.
[07/26 16:18:03]  Took 12.181845903396606 secs to solve known solver.
[07/26 16:18:03]  Known solution works.
[07/26 16:18:04]  Generator returned sat in 0.421345 secs.
[07/26 16:18:04]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:04]  Verifer returned unsat in 0.037023 secs.
[07/26 16:18:04]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:04]  --------------------------------------------------------------------------------
[07/26 16:18:04]  Iteration: 67 (20 solution, 46 counterexamples)
[07/26 16:18:16]  Took 12.058509826660156 secs to build known solver.
[07/26 16:18:16]  Took 12.182961702346802 secs to solve known solver.
[07/26 16:18:16]  Known solution works.
[07/26 16:18:17]  Generator returned sat in 0.376377 secs.
[07/26 16:18:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:17]  Verifer returned unsat in 0.044235 secs.
[07/26 16:18:17]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:17]  --------------------------------------------------------------------------------
[07/26 16:18:17]  Iteration: 68 (21 solution, 46 counterexamples)
[07/26 16:18:29]  Took 12.073279619216919 secs to build known solver.
[07/26 16:18:29]  Took 12.199065923690796 secs to solve known solver.
[07/26 16:18:29]  Known solution works.
[07/26 16:18:31]  Generator returned sat in 0.648112 secs.
[07/26 16:18:31]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:31]  Improved gap from 0 to 10.9375
[07/26 16:18:31]  Improved number of small numbers from 43 to 100 out of a max of 100
[07/26 16:18:31]  Verifer returned sat in 0.466607 secs.
[07/26 16:18:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9365.758301    9365.758057 -9284.228516  9365.758301    0.093994  9365.758057   0.000000    0.000244       -0.046631
1    9365.805176    9365.804932 -9195.166260  9365.805176    0.047119  9365.804932   0.000000    0.000244      -10.937500
2    9476.742432    9376.742676 -9195.166016  9476.742432  110.937500  9376.742676   0.000000   99.999756        0.000000
3    9642.773926    9476.742676 -9195.166016  9642.773926  266.031250  9476.742676   0.000000  166.031250       66.031494
4    9876.789551    9676.742432 -9195.166016  9876.789551  400.046875  9676.742432   0.047119  200.000000      200.000000
5    9876.789551    9676.742676 -9195.166016  9876.789551    2.000000  9676.742676   0.047119  199.999756      100.000000
6    9876.789551    9865.805176 -9195.166016  9876.789551    4.000000  9865.805176   0.047119   10.937256        0.000000
7    9876.789551    9876.742432 -9106.666016  9876.789551    7.000000  9876.742432   0.047119    0.000000      -11.500000
8    9888.289551    9888.242432 -9106.666016  9888.289551   11.500000  9888.242432   0.047119    0.000000     -100.000000
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=1, measured_loss_rate=0.[0m
[07/26 16:18:31]  --------------------------------------------------------------------------------
[07/26 16:18:31]  Iteration: 69 (21 solution, 47 counterexamples)
[07/26 16:18:44]  Took 12.350825786590576 secs to build known solver.
[07/26 16:18:44]  Took 12.47776985168457 secs to solve known solver.
[07/26 16:18:44]  Known solution works.
[07/26 16:18:46]  Generator returned sat in 1.339297 secs.
[07/26 16:18:46]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:46]  Verifer returned unsat in 0.137698 secs.
[07/26 16:18:46]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:18:46]  --------------------------------------------------------------------------------
[07/26 16:18:46]  Iteration: 70 (22 solution, 47 counterexamples)
[07/26 16:18:59]  Took 12.332891464233398 secs to build known solver.
[07/26 16:18:59]  Took 12.461390733718872 secs to solve known solver.
[07/26 16:18:59]  Known solution works.
[07/26 16:19:00]  Generator returned sat in 1.137472 secs.
[07/26 16:19:00]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:19:01]  Verifer returned unsat in 0.082426 secs.
[07/26 16:19:01]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:19:01]  --------------------------------------------------------------------------------
[07/26 16:19:01]  Iteration: 71 (23 solution, 47 counterexamples)
[07/26 16:19:13]  Took 12.322473764419556 secs to build known solver.
[07/26 16:19:13]  Took 12.449869632720947 secs to solve known solver.
[07/26 16:19:13]  Known solution works.
[07/26 16:19:17]  Generator returned sat in 3.097042 secs.
[07/26 16:19:17]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:19:18]  Improved number of small numbers from 32 to 46 out of a max of 99
[07/26 16:19:18]  Verifer returned sat in 0.979472 secs.
[07/26 16:19:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9962.616943    9664.546288 -9195.166016   9962.616943    0.093994   9664.546288   0.000000  298.070655      298.070655
1    9962.616943    9664.593286 -9195.166016   9962.616943  298.070312   9664.593286   0.000000  298.023658      198.070655
2    9962.616943    9764.546288 -9195.166016   9962.616943    0.023682   9764.546288   0.000000  198.070655       98.070655
3    9962.616943    9962.593286 -9195.166016   9962.616943  151.953003   9962.593286   0.000000    0.023658       -1.929345
4   10264.569787   10064.546288 -9195.166016  10264.569787  301.976501  10064.546288   0.023499  200.000000      200.000000
5   10264.569787   10097.244286 -9195.166016  10264.569787  199.976501  10097.244286   0.023499  167.302002      100.000000
6   10464.593286   10264.546288 -9195.166016  10464.593286  367.325500  10264.546288   0.046997  200.000000      200.000000
7   10464.593286   10364.546288 -9195.166016  10464.593286  150.976501  10364.546288   0.046997  100.000000      100.000000
8   10666.569787   10364.546387 -9195.166016  10666.569787  301.976501  10364.546387   2.023499  299.999902      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:19:18]  --------------------------------------------------------------------------------
[07/26 16:19:18]  Iteration: 72 (23 solution, 48 counterexamples)
[07/26 16:19:31]  Took 12.623914003372192 secs to build known solver.
[07/26 16:19:31]  Took 12.755336046218872 secs to solve known solver.
[07/26 16:19:31]  Known solution works.
[07/26 16:19:39]  Generator returned sat in 6.948522 secs.
[07/26 16:19:39]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 3/2)[0m
[07/26 16:19:39]  Improved number of small numbers from 48 to 99 out of a max of 99
[07/26 16:19:39]  Verifer returned sat in 0.249447 secs.
[07/26 16:19:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9962.616943    9664.546387 -9195.16626   9962.616943    0.093750   9664.546387   0.000000  298.070557      298.070557
1    9962.616943    9698.720703 -9195.16626   9962.616943  298.070312   9698.720703   0.000000  263.896240      198.070557
2    9962.616943    9764.546387 -9195.16626   9962.616943    0.023682   9764.546387   0.000000  198.070557       98.070557
3    9962.616943    9962.593262 -9195.16626   9962.616943  150.238281   9962.593262   0.000000    0.023682       -1.929443
4   10264.569824   10064.546387 -9195.16626  10264.569824  301.976562  10064.546387   0.023438  200.000000      200.000000
5   10264.569824   10097.244141 -9195.16626  10264.569824  182.912842  10097.244141   0.023438  167.302246      100.000000
6   10464.593262   10264.546387 -9195.16626  10464.593262  367.325684  10264.546387   0.046875  200.000000      200.000000
7   10464.593262   10364.546387 -9195.16626  10464.593262  150.976562  10364.546387   0.046875  100.000000      100.000000
8   10668.046387   10364.546387 -9195.16626  10668.046387  303.453125  10364.546387   3.500000  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=True, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:19:39]  --------------------------------------------------------------------------------
[07/26 16:19:39]  Iteration: 73 (23 solution, 49 counterexamples)
[07/26 16:19:52]  Took 12.856930494308472 secs to build known solver.
[07/26 16:19:52]  Took 12.991942882537842 secs to solve known solver.
[07/26 16:19:52]  Known solution works.
[07/26 16:19:58]  Generator returned sat in 4.883589 secs.
[07/26 16:19:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:19:58]  Verifer returned unsat in 0.121587 secs.
[07/26 16:19:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:19:58]  --------------------------------------------------------------------------------
[07/26 16:19:58]  Iteration: 74 (24 solution, 49 counterexamples)
[07/26 16:20:11]  Took 12.928725719451904 secs to build known solver.
[07/26 16:20:11]  Took 13.072029829025269 secs to solve known solver.
[07/26 16:20:11]  Known solution works.
[07/26 16:20:13]  Generator returned sat in 1.375388 secs.
[07/26 16:20:13]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 2)[0m
[07/26 16:20:14]  Improved gap from 3/64 to 15.625
[07/26 16:20:14]  Improved number of small numbers from 55 to 100 out of a max of 100
[07/26 16:20:14]  Verifer returned sat in 0.678989 secs.
[07/26 16:20:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0    9764.626465    9564.603027 -9195.222900   9764.626465    0.093506   9564.603027   0.000000  200.023438      100.023438
1    9764.626465    9764.603027 -9195.222900   9764.626465  200.023438   9764.603027   0.000000    0.023438        0.023438
2   10064.649902    9764.603027 -9195.222900  10064.649902  300.046875   9764.603027   0.046875  300.000000      200.000000
3   10164.649902    9964.603027 -9195.222900  10164.649902  400.000000   9964.603027   0.046875  200.000000      200.000000
4   10166.649902   10064.603027 -9195.222900  10166.649902  202.000000  10064.603027   0.046875  102.000000      102.000000
5   10167.649902   10114.079590 -9195.222900  10167.649902  103.000000  10114.079590   0.046875   53.523438        3.000000
6   10167.649902   10164.603271 -9110.848145  10167.649902   53.500000  10164.603271   0.046875    2.999756      -12.625244
7   10193.400146   10180.228271 -9026.473145  10193.400146   28.750000  10180.228271   0.046875   13.125000       -2.500000
8   10196.650146   10195.853271 -9026.472900  10196.650146   16.375000  10195.853271   0.046875    0.750000      -99.249756
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:20:14]  --------------------------------------------------------------------------------
[07/26 16:20:14]  Iteration: 75 (24 solution, 50 counterexamples)
[07/26 16:20:27]  Took 13.242210388183594 secs to build known solver.
[07/26 16:20:28]  Took 13.381736993789673 secs to solve known solver.
[07/26 16:20:28]  Known solution works.
[07/26 16:20:34]  Generator returned sat in 5.646257 secs.
[07/26 16:20:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1/2)[0m
[07/26 16:20:34]  Improved number of small numbers from 25 to 99 out of a max of 99
[07/26 16:20:34]  Verifer returned sat in 0.365448 secs.
[07/26 16:20:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10082.765137    9882.741943 -9011.58374  10082.765137    0.093506   9882.741943   0.000000  200.023193      100.023193
1   10082.765381   10082.741943 -9011.58374  10082.765381  200.023438  10082.741943   0.000000    0.023438        0.023438
2   10260.939697   10082.741943 -9011.58374  10260.939697  178.197754  10082.741943   0.000000  178.197754       78.197754
3   10260.939697   10225.916260 -9011.58374  10260.939697  178.174561  10225.916260   0.000000   35.023438      -21.802246
4   10582.765381   10382.265381 -9011.58374  10582.765381  356.849121  10382.265381   0.023438  200.476562      200.000000
5   10582.765381   10482.741699 -9011.58374  10582.765381  149.761719  10482.741699   0.023438  100.000244      100.000000
6   10782.788574   10582.265381 -9011.58374  10782.788574  300.023438  10582.265381   0.046631  200.476562      200.000000
7   10782.788574   10682.741699 -9011.58374  10782.788574  178.174561  10682.741699   0.046631  100.000244      100.000000
8   11039.637451   10682.741943 -9011.58374  11039.637451  356.849121  10682.741943  56.895508  300.000000      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=3, measured_loss_rate=0.[0m
[07/26 16:20:35]  --------------------------------------------------------------------------------
[07/26 16:20:35]  Iteration: 76 (24 solution, 51 counterexamples)
[07/26 16:20:48]  Took 13.533763647079468 secs to build known solver.
[07/26 16:20:48]  Took 13.673372030258179 secs to solve known solver.
[07/26 16:20:48]  Known solution works.
[07/26 16:20:52]  Generator returned sat in 2.896592 secs.
[07/26 16:20:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:20:52]  Verifer returned unsat in 0.191138 secs.
[07/26 16:20:52]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:20:52]  --------------------------------------------------------------------------------
[07/26 16:20:52]  Iteration: 77 (25 solution, 51 counterexamples)
[07/26 16:21:06]  Took 13.481282234191895 secs to build known solver.
[07/26 16:21:06]  Took 13.623681783676147 secs to solve known solver.
[07/26 16:21:06]  Known solution works.
[07/26 16:21:09]  Generator returned sat in 2.661280 secs.
[07/26 16:21:09]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:21:10]  Improved number of small numbers from 40 to 99 out of a max of 99
[07/26 16:21:10]  Verifer returned sat in 0.270441 secs.
[07/26 16:21:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t
0   10282.718506   10282.648193 -9011.583984  10282.718506    0.093506  10282.648193    0.000000    0.070312        0.000000
1   10282.718506   10282.718506 -9011.583740  10282.718506    0.046875  10282.718506    0.000000    0.000000      -99.999756
2   10382.741943   10382.718262 -9011.583740  10382.741943  100.023438  10382.718262    0.000000    0.023682      -99.976318
3   10782.741699   10582.694824 -9011.583740  10782.741699  400.023438  10582.694824    0.023438  200.023438      200.000000
4   10882.764893   10682.671631 -9011.583740  10882.764893  300.046631  10682.671631    0.046631  200.046631      200.000000
5   11082.671387   10732.729980 -9011.583740  11082.671387  399.953125  10732.729980   99.953125  249.988281      200.000000
6   11182.694824   10882.718262 -9011.583740  11182.694824  350.011719  10882.718262   99.976562  200.000000      200.000000
7   11282.718262   10982.718262 -9011.583740  11282.718262  300.023438  10982.718262  100.000000  200.000000      200.000000
8   11382.764893   10982.718506 -9011.583740  11382.764893  300.046631  10982.718506  100.046631  299.999756      200.000000
high_util=True, low_loss=False, ramp_up=False, ramp_down=False, total_losses=5, measured_loss_rate=1.[0m
[07/26 16:21:10]  --------------------------------------------------------------------------------
[07/26 16:21:10]  Iteration: 78 (25 solution, 52 counterexamples)
[07/26 16:21:24]  Took 13.654741525650024 secs to build known solver.
[07/26 16:21:24]  Took 13.797251462936401 secs to solve known solver.
[07/26 16:21:24]  Known solution works.
[07/26 16:21:25]  Generator returned sat in 0.633233 secs.
[07/26 16:21:25]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:21:25]  Improved gap from 0 to 14.0625
[07/26 16:21:26]  Improved number of small numbers from 50 to 100 out of a max of 100
[07/26 16:21:26]  Verifer returned sat in 0.653254 secs.
[07/26 16:21:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10499.972656   10399.972656 -9159.886230  10499.972656    0.093262  10399.972656        0.0  100.000000        0.000244
1   10499.972656   10499.972656 -9159.886230  10499.972656    0.046875  10499.972656        0.0    0.000000      -99.999756
2   10899.925781   10599.972656 -9159.886230  10899.925781  399.953125  10599.972656        0.0  299.953125      199.953369
3   10999.925781   10798.902588 -9159.886230  10999.925781  399.953125  10798.902588        0.0  201.023193      199.953369
4   10999.925781   10898.390625 -9159.886230  10999.925781  200.976562  10898.390625        0.0  101.535156       99.953369
5   10999.925781   10985.863281 -9159.839600  10999.925781  101.488281  10985.863281        0.0   14.062500        0.000000
6   11037.607422   11010.688965 -9097.521240  11037.607422   51.744141  11010.688965        0.0   26.918457        0.000000
7   11037.607422   11037.607422 -9011.583984  11037.607422   26.872070  11037.607422        0.0    0.000000      -14.062744
8   11052.043457   11052.043457 -8926.019775  11052.043457   14.436035  11052.043457        0.0    0.000000      -14.062500
high_util=False, low_loss=True, ramp_up=False, ramp_down=True, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:21:26]  --------------------------------------------------------------------------------
[07/26 16:21:26]  Iteration: 79 (25 solution, 53 counterexamples)
[07/26 16:21:40]  Took 13.890053033828735 secs to build known solver.
[07/26 16:21:40]  Took 14.034088850021362 secs to solve known solver.
[07/26 16:21:40]  Known solution works.
[07/26 16:21:43]  Generator returned sat in 1.706009 secs.
[07/26 16:21:43]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:21:43]  Verifer returned unsat in 0.127188 secs.
[07/26 16:21:43]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 3/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:21:43]  --------------------------------------------------------------------------------
[07/26 16:21:43]  Iteration: 80 (26 solution, 53 counterexamples)
[07/26 16:21:57]  Took 13.926438093185425 secs to build known solver.
[07/26 16:21:57]  Took 14.072094917297363 secs to solve known solver.
[07/26 16:21:57]  Known solution works.
[07/26 16:21:58]  Generator returned sat in 0.566195 secs.
[07/26 16:21:58]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:21:58]  Verifer returned unsat in 0.124953 secs.
[07/26 16:21:58]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:21:58]  --------------------------------------------------------------------------------
[07/26 16:21:58]  Iteration: 81 (27 solution, 53 counterexamples)
[07/26 16:22:12]  Took 13.930038928985596 secs to build known solver.
[07/26 16:22:12]  Took 14.07340407371521 secs to solve known solver.
[07/26 16:22:12]  Known solution works.
[07/26 16:22:14]  Generator returned sat in 0.493545 secs.
[07/26 16:22:14]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:22:14]  Verifer returned unsat in 0.102807 secs.
[07/26 16:22:14]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1/2)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)[0m
[07/26 16:22:14]  --------------------------------------------------------------------------------
[07/26 16:22:14]  Iteration: 82 (28 solution, 53 counterexamples)
[07/26 16:22:28]  Took 13.936522722244263 secs to build known solver.
[07/26 16:22:28]  Took 14.081495523452759 secs to solve known solver.
[07/26 16:22:28]  Known solution works.
[07/26 16:22:34]  Generator returned sat in 5.400157 secs.
[07/26 16:22:34]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:22:34]  Improved gap from 1/800 to 98.4375
[07/26 16:22:34]  Improved number of small numbers from 18 to 100 out of a max of 100
[07/26 16:22:34]  Verifer returned sat in 0.353780 secs.
[07/26 16:22:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t
0   10853.144775   10853.144531 -8824.744141  10853.144775    0.093018  10853.144531   0.000000    0.000244        0.000000
1   10953.167969   10953.144775 -8824.744141  10953.167969  100.023438  10953.144775   0.000000    0.023193        0.023193
2   11253.168213   10953.144775 -8824.744141  11253.168213  300.023438  10953.144775   0.023438  300.000000      200.000000
3   11253.168213   11153.144531 -8824.744141  11253.168213  100.023193  11153.144531   0.023438  100.000244      100.000000
4   11253.191162   11253.144531 -8824.744141  11253.191162  100.023193  11253.144531   0.023438    0.023193        0.022949
5   11353.191162   11353.121338 -8824.744141  11353.191162  100.023193  11353.121338   0.023438    0.046387        0.022949
6   11453.167969   11353.144775 -8824.744141  11453.167969  100.023193  11353.144775   0.023438   99.999756       -0.000244
7   11453.191406   11453.144775 -8823.181641  11453.191406  100.023193  11453.144775   0.023438    0.023193      -98.414307
8   11553.191406   11551.582275 -8823.181641  11553.191406  100.023193  11551.582275   0.023438    1.585693      -98.414307
high_util=False, low_loss=True, ramp_up=False, ramp_down=False, total_losses=0, measured_loss_rate=0.[0m
[07/26 16:22:35]  --------------------------------------------------------------------------------
[07/26 16:22:35]  Iteration: 83 (28 solution, 54 counterexamples)
[07/26 16:22:49]  Took 14.18203091621399 secs to build known solver.
[07/26 16:22:49]  Took 14.328922510147095 secs to solve known solver.
[07/26 16:22:49]  Known solution works.
[07/26 16:22:52]  Generator returned sat in 2.522992 secs.
[07/26 16:22:52]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:22:53]  Verifer returned unsat in 0.087170 secs.
[07/26 16:22:53]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:22:53]  --------------------------------------------------------------------------------
[07/26 16:22:53]  Iteration: 84 (29 solution, 54 counterexamples)
[07/26 16:23:07]  Took 14.217148303985596 secs to build known solver.
[07/26 16:23:07]  Took 14.370579719543457 secs to solve known solver.
[07/26 16:23:07]  Known solution works.
[07/26 16:23:08]  Generator returned sat in 0.650663 secs.
[07/26 16:23:08]  Candidate solution: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:23:09]  Verifer returned unsat in 0.085471 secs.
[07/26 16:23:09]  Proved solution: 
[1m[92mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
[07/26 16:23:09]  --------------------------------------------------------------------------------
[07/26 16:23:09]  Iteration: 85 (30 solution, 54 counterexamples)
[07/26 16:23:23]  Took 14.188715696334839 secs to build known solver.
[07/26 16:23:23]  Took 14.255279779434204 secs to solve known solver.
[07/26 16:23:23]  Known solution does not satisfy cex
[07/26 16:23:24]  Simulation: 
[1m[94mif(Ld_f[0][t] > Ld_f[0][t-1]):
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)[0m
> [0;32m/home/ubuntu/Projects/Verification/ccmatic/cegis/__init__.py[0m(194)[0;36mcheck_known_solution[0;34m()[0m
[0;32m    193 [0;31m                        tcolor.candidate(sim_str)))
[0m[0;32m--> 194 [0;31m            [0;32massert[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m
[0m[0;32m    195 [0;31m[0;34m[0m[0m
[0m
ipdb> 