[08/15 12:49:48]  --------------------------------------------------------------------------------
[08/15 12:49:48]  Iteration: 1 (0 solution, 0 counterexamples)
[08/15 12:49:48]  Generator returned sat in 0.004324 secs.
[08/15 12:49:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:49]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/15 12:49:49]  Verifer returned sat in 0.363957 secs.
[08/15 12:49:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0       -1404.23       -1404.28   1404.28     -1404.23    600.00     -1404.28        0.0     0.05            0.05     9.0         -1404.28            -1             -1     -1
1        -804.33       -1304.28   1404.28      -804.33    599.95     -1304.28        0.0   499.95          499.95     1.0          -804.33         False           True  False
2        2203.27       -1204.33   1404.28      2203.27   3507.55     -1204.33        0.0  3407.60         3407.55     2.0          -804.33         False          False  False
3        2203.27       -1204.28   1404.28      2203.27      0.05     -1204.28        0.0  3407.55         3307.55     3.0          2203.27         False          False  False
4        2203.27       -1004.28   1404.28      2203.27    401.10     -1004.28        0.0  3207.55         3207.55     4.0          2203.27         False          False  False
5        2203.27       -1004.28   1404.28      2203.27   1403.20     -1004.28        0.0  3207.55         3107.55     4.0          2203.27         False          False  False
6        2203.27        -804.28   1404.28      2203.27   3207.50      -804.28        0.0  3007.55         3007.55     5.0          2203.27         False          False  False
7        6411.72        -704.28   1404.28      6411.72   7216.00      -704.28     3708.4  3407.60         3407.60     6.0          2203.27         False          False  False
8       18037.12        -704.23   1404.28     18037.12  15033.00      -704.23    15233.8  3507.55         3407.60     7.0          2203.27         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=17038/5.[0m
[08/15 12:49:49]  --------------------------------------------------------------------------------
[08/15 12:49:49]  Iteration: 2 (0 solution, 1 counterexamples)
[08/15 12:49:49]  Generator returned sat in 0.036817 secs.
[08/15 12:49:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:50]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/15 12:49:50]  Verifer returned sat in 0.275889 secs.
[08/15 12:49:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0       496.2200        396.245   1404.28     496.2200    600.0000      396.245      0.000    99.9750         99.9750     9.0         396.2450            -1             -1     -1
1       996.2200        496.245   1404.28     996.2200    599.9750      496.245      0.000   499.9750        499.9750     1.0         996.2200         False           True  False
2      3203.5075        596.220   1404.28    3203.5075   2707.2625      596.220      0.000  2607.2875       2607.2625     2.0         996.2200         False          False  False
3      3203.5075        596.245   1404.28    3203.5075      0.0250      596.245      0.000  2607.2625       2507.2625     3.0        3203.5075         False          False  False
4      3203.5075        796.245   1404.28    3203.5075    301.0500      796.245      0.000  2407.2625       2407.2625     4.0        3203.5075         False          False  False
5      3203.5075        796.245   1404.28    3203.5075   1053.1000      796.245      0.000  2407.2625       2307.2625     4.0        3203.5075         False          False  False
6      3203.5075        996.245   1404.28    3203.5075   2407.2375      996.245      0.000  2207.2625       2207.2625     5.0        3203.5075         False          False  False
7      6411.7200       1067.245   1404.28    6411.7200   5415.4750     1067.245      0.000  5344.4750       5315.4750     6.0        3203.5075         False          False  False
8     12305.6950       1196.245   1404.28   12305.6950  11238.4500     1196.245   5793.975  5315.4750       5315.4750     7.0        3203.5075         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=212619/40.[0m
[08/15 12:49:50]  --------------------------------------------------------------------------------
[08/15 12:49:50]  Iteration: 3 (0 solution, 2 counterexamples)
[08/15 12:49:51]  Generator returned sat in 0.271338 secs.
[08/15 12:49:51]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:51]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/15 12:49:51]  Verifer returned sat in 0.299583 secs.
[08/15 12:49:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0     6411.70500     5911.70500   1404.28   6411.70500     0.00125   5911.70500    0.00000  500.00000         500.000     9.0         5911.705            -1             -1     -1
1     6511.70750     5911.70500   1404.28   6511.70750   600.00250   5911.70500  100.00250  500.00000         400.000     9.0         5911.705         False           True  False
2     6611.70875     6111.70500   1404.28   6611.70875   600.00125   6111.70500  100.00375  400.00000         400.000     9.0         6511.705         False           True   True
3     6611.70875     6211.70500   1404.28   6611.70875     0.01750   6211.70500  100.00375  300.00000         300.000     7.0         6511.705         False           True   True
4     6611.70875     6211.70500   1404.28   6611.70875     0.01000   6211.70500  100.00375  300.00000         200.000     7.0         6511.705         False          False   True
5     6611.70875     6411.70375   1404.28   6611.70875     0.01000   6411.70375  100.00375  100.00125         100.000     8.0         6511.705         False          False   True
6     6611.70875     6411.70500   1404.28   6611.70875     0.01000   6411.70500  100.00375  100.00000           0.000     9.0         6511.705         False          False   True
7     6910.72375     6511.70625   1404.28   6910.72375   399.01500   6511.70625  100.00375  299.01375         199.015     1.0         6511.705         False           True  False
8     7809.23500     6711.70375   1404.28   7809.23500  1197.52500   6711.70375  697.53000  400.00125         400.000     2.0         6511.705         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=400.[0m
[08/15 12:49:52]  --------------------------------------------------------------------------------
[08/15 12:49:52]  Iteration: 4 (0 solution, 3 counterexamples)
[08/15 12:49:52]  Generator returned sat in 0.038193 secs.
[08/15 12:49:52]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:52]  Improved number of small numbers from 103 to 113 out of a max of 113
[08/15 12:49:52]  Verifer returned sat in 0.203082 secs.
[08/15 12:49:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    6411.705078    5911.705078  1404.280029  6411.705078    0.001221  5911.705078    0.000000  500.000000           500.0     9.0      5911.705078            -1             -1     -1
1    6511.707520    5911.705078  1404.280029  6511.707520  600.002441  5911.705078  100.002441  500.000000           400.0     9.0      5911.705078         False           True  False
2    6611.708740    6111.704834  1404.280029  6611.708740  600.001221  6111.704834  100.003662  400.000244           400.0     9.0      6511.705078         False           True   True
3    6611.708740    6211.705078  1404.280029  6611.708740    0.017578  6211.705078  100.003662  300.000000           300.0     7.0      6511.705078         False           True   True
4    6611.708740    6211.705078  1404.280029  6611.708740    0.010000  6211.705078  100.003662  300.000000           200.0     7.0      6511.705078         False          False   True
5    6611.708740    6411.704590  1404.280029  6611.708740    0.010000  6411.704590  100.003662  100.000488           100.0     8.0      6511.705078         False          False   True
6    6611.708740    6411.705078  1404.280029  6611.708740    0.010000  6411.705078  100.003662  100.000000             0.0     9.0      6511.705078         False          False   True
7    6910.708740    6512.038574  1404.280029  6910.708740  399.000000  6512.038574  100.003662  298.666504           199.0     1.0      6511.705078         False           True  False
8    7211.709229    6711.703750  1404.280029  7211.709229  599.666992  6711.703750  100.004150  400.001328           400.0     2.0      6511.705078         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=400.[0m
[08/15 12:49:53]  --------------------------------------------------------------------------------
[08/15 12:49:53]  Iteration: 5 (0 solution, 4 counterexamples)
[08/15 12:49:53]  Generator returned sat in 0.087942 secs.
[08/15 12:49:53]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:55]  Improved number of small numbers from 104 to 104 out of a max of 113
[08/15 12:49:55]  Verifer returned sat in 1.749878 secs.
[08/15 12:49:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    5287.705078    4587.805078  2628.180029  5287.705078       0.1  4587.805078        0.0    699.9           599.9     9.0      4587.805078            -1             -1     -1
1    6311.605078    4787.805078  2628.180029  6311.605078    1723.8  4787.805078        0.0   1523.8          1523.8     7.0      4587.805078         False           True  False
2    6511.505078    4788.205078  2628.180029  6511.505078    1723.7  4788.205078       99.8   1623.5          1523.9     6.0      6411.705078         False          False  False
3    6611.605078    4887.805078  2628.180029  6611.605078    1723.6  4887.805078       99.9   1623.9          1523.9     7.0      6511.705078         False          False   True
4    6611.605078    5029.405078  2628.180029  6611.605078     599.0  5029.405078       99.9   1482.3          1423.9     7.0      6511.705078         False          False   True
5    6811.505078    5087.805078  2628.180029  6811.505078    1682.2  5087.805078       99.9   1623.8          1523.8     7.0      6511.705078         False          False   True
6    9152.305078    5189.805078  2628.180029  9152.305078    3964.6  5189.805078     2340.6   1621.9          1523.9     8.0      6511.705078         False          False   True
7    9152.305078    5287.805078  2628.180029  9152.305078     603.0  5287.805078     2340.6   1523.9          1423.9     7.0      6511.705078         False           True   True
8    9352.205078    5487.805078  2628.180029  9352.205078    1723.8  5487.805078     2340.6   1523.8          1523.8     8.0      6511.705078         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=15239/10.[0m
[08/15 12:49:55]  --------------------------------------------------------------------------------
[08/15 12:49:55]  Iteration: 6 (0 solution, 5 counterexamples)
[08/15 12:49:55]  Generator returned sat in 0.047204 secs.
[08/15 12:49:55]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:55]  Improved gap from 0.0003333333333333333 to 100
[08/15 12:49:56]  Improved number of small numbers from 104 to 114 out of a max of 114
[08/15 12:49:56]  Verifer returned sat in 0.318380 secs.
[08/15 12:49:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t  service_0,t    losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    6211.654785    6211.604980  1104.379639   6211.654785   199.900000  6211.604980     0.000000     0.049805        0.049805     2.0      6211.604980            -1             -1    True
1    6411.505127    6311.604980  1104.379639   6411.505127   199.900146  6311.604980     0.000000    99.900146       99.900146     1.0      6211.604980         False          False    True
2    7780.854736    6411.555176  1104.379639   7780.854736  1469.249756  6411.555176     0.000000  1369.299561     1369.249756     1.0      6211.604980         False          False    True
3    7780.854736    6411.604980  1104.379639   7780.854736     0.050049  6411.604980     0.000000  1369.249756     1269.249756     2.0      7780.854736         False          False    True
4    7780.854736    6533.604980  1104.379639   7780.854736   401.100098  6533.604980     0.000000  1247.249756     1169.249756     3.0      7780.854736         False          False    True
5    7780.854736    6711.604980  1104.379639   7780.854736  1247.200195  6711.604980     0.000000  1069.249756     1069.249756     4.0      7780.854736         False          False    True
6    9807.104980    6764.655029  1104.379639   9807.104980  3095.500000  6764.655029  1626.199951  1416.250000     1369.300049     5.0      7780.854736         False          False    True
7    9807.104980    6811.604980  1104.379639   9807.104980   706.100098  6811.604980  1626.199951  1369.300049     1269.300049     6.0      7780.854736         False          False    True
8   10407.005127    7011.604736  1104.379639  10407.005127  1969.200195  7011.604736  2026.100098  1369.300293     1369.300049     7.0      7780.854736         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=5608653/4096.[0m
[08/15 12:49:56]  --------------------------------------------------------------------------------
[08/15 12:49:56]  Iteration: 7 (0 solution, 6 counterexamples)
[08/15 12:49:57]  Generator returned sat in 1.021209 secs.
[08/15 12:49:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:49:58]  Improved gap from 0.0025 to 100
[08/15 12:49:59]  Improved number of small numbers from 66 to 74 out of a max of 114
[08/15 12:49:59]  Verifer returned sat in 1.311505 secs.
[08/15 12:49:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7270.842285    7070.840986  1103.877764  7270.842285     0.001465  7070.840986    0.00125  200.000049      100.000049     2.0      7070.840986            -1             -1     -1
1    7270.842285    7170.841064  1103.877764  7270.842285   199.998779  7170.841064    0.00125   99.999971        0.000049     3.0      7070.840986         False          False   True
2    7780.855986    7370.839736  1103.877764  7780.855986   610.013672  7370.839736    0.00125  410.015000      410.013750     1.0      7070.840986         False          False   True
3    7780.855986    7370.840986  1103.877764  7780.855986   410.013750  7370.840986    0.00125  410.013750      310.013750     2.0      7780.854736         False          False   True
4    8381.855986    7570.839736  1103.877764  8381.855986  1011.013750  7570.839736    0.00250  811.013750      811.012500     3.0      7780.854736         False          False   True
5    8381.855986    7570.840986  1103.877764  8381.855986     0.010000  7570.840986    0.00250  811.012500      711.012500     4.0      7780.854736         False          False   True
6    8381.855986    7673.840986  1103.877764  8381.855986   401.012500  7673.840986    0.00250  708.012500      611.012500     5.0      7780.854736         False          False   True
7    8681.855986    7870.840986  1103.877764  8681.855986  1008.012500  7870.840986    0.00250  811.012500      811.012500     4.0      7780.854736         False          False   True
8    9479.858486    7970.840820  1103.877764  9479.858486  1609.015000  7970.840820  698.00500  811.012666      811.012500     5.0      7780.854736         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=2, buffer=64881/80.[0m
[08/15 12:49:59]  --------------------------------------------------------------------------------
[08/15 12:49:59]  Iteration: 8 (0 solution, 7 counterexamples)
[08/15 12:50:00]  Generator returned sat in 0.184596 secs.
[08/15 12:50:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:00]  Improved gap from 0.0016666666666666668 to 100
[08/15 12:50:01]  Improved number of small numbers from 60 to 66 out of a max of 114
[08/15 12:50:01]  Verifer returned sat in 1.110490 secs.
[08/15 12:50:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    8381.853516    7170.840986  1103.877764  8381.853516  400.003750  7170.840986  811.01250  400.000029      400.000029     3.0      7170.840986            -1             -1     -1
1    8381.855986    7270.840820  1103.877764  8381.855986  400.002500  7270.840820  811.01375  300.001416      300.001250     3.0      7570.842236         False          False   True
2    8381.855986    7320.840361  1103.877764  8381.855986  299.999756  7320.840361  811.01375  250.001875      200.001250     4.0      7570.842236         False          False   True
3    8381.855986    7470.839736  1103.877764  8381.855986    0.001465  7470.839736  811.01375  100.002500      100.001250     5.0      7570.842236         False          False   True
4    8381.855986    7570.830986  1103.877764  8381.855986    0.010000  7570.830986  811.01375    0.011250        0.001250     6.0      7570.842236         False          False   True
5    8381.855986    7570.840986  1103.877764  8381.855986    0.010000  7570.840986  811.01375    0.001250      -99.998750     7.0      7570.842236         False          False   True
6    8881.855986    7670.840986  1103.877764  8881.855986  500.001250  7670.840986  811.01375  400.001250      300.001250     1.0      7570.842236         False           True  False
7    8881.857236    7770.840986  1103.877764  8881.857236  400.002500  7770.840986  811.01375  300.002500      200.002500     2.0      7570.842236         False          False  False
8    8981.874736    7970.840820  1103.877764  8981.874736  400.020000  7970.840820  811.01375  200.020166      200.020000     3.0      7570.842236         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=240001/800.[0m
[08/15 12:50:02]  --------------------------------------------------------------------------------
[08/15 12:50:02]  Iteration: 9 (0 solution, 8 counterexamples)
[08/15 12:50:02]  Generator returned sat in 0.243375 secs.
[08/15 12:50:02]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:04]  Improved number of small numbers from 17 to 29 out of a max of 113
[08/15 12:50:04]  Verifer returned sat in 1.419266 secs.
[08/15 12:50:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    8381.855957    6985.139652  1289.579074  8381.855957  585.703857  6985.139652  811.012500  585.703806      585.703781     5.0      6985.139652            -1             -1     -1
1    8381.855986    6985.139893  1289.579074  8381.855986  585.703835  6985.139893  811.012524  585.703569      485.703786     5.0      7570.843462         False          False   True
2    8381.855986    7085.139676  1289.579074  8381.855986  485.703857  7085.139676  811.012524  485.703786      385.703786     6.0      7570.843462         False          False   True
3    8381.855986    7185.139893  1289.579074  8381.855986  485.703762  7185.139893  811.012524  385.703569      285.703786     7.0      7570.843462         False          False   True
4    8381.855986    7285.139893  1289.579074  8381.855986  241.851881  7285.139893  811.012524  285.703569      185.703786     8.0      7570.843462         False          False   True
5    8381.855986    7485.139676  1289.579074  8381.855986  119.925940  7485.139676  811.012524   85.703786       85.703786     9.0      7570.843462         False          False   True
6    8475.041111    7570.843486  1289.579074  8475.041111  178.888911  7570.843486  811.012524   93.185100       78.888911     1.0      7570.843462         False           True  False
7    8649.189377    7685.139676  1289.579074  8649.189377  267.333366  7685.139676  811.012524  153.037176      153.037176     1.0      7570.843462         False          False  False
8    8896.152249    7685.139700  1289.579074  8896.152249  400.000049  7685.139700  811.012524  400.000024      300.000049     2.0      7570.843462         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=537149531/1105920.[0m
[08/15 12:50:04]  --------------------------------------------------------------------------------
[08/15 12:50:04]  Iteration: 10 (0 solution, 9 counterexamples)
[08/15 12:50:06]  Generator returned sat in 1.059738 secs.
[08/15 12:50:06]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:07]  Improved number of small numbers from 59 to 63 out of a max of 113
[08/15 12:50:07]  Verifer returned sat in 1.730631 secs.
[08/15 12:50:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t   arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    8296.052002    6985.039676  1289.679074   8296.052002   585.703857  6985.039676   811.0125  499.999826      499.999826     2.0      6985.039676            -1             -1     -1
1    8296.152176    7085.039676  1289.679074   8296.152176   500.100000  7085.039676   811.1125  400.000000      400.000000     2.0      7485.039676         False          False   True
2    8396.252176    7085.139676  1289.679074   8396.252176   500.100000  7085.139676   811.2125  499.900000      400.000000     3.0      7485.039676         False          False   True
3    8396.452176    7285.039676  1289.679074   8396.452176   500.100000  7285.039676   811.2125  300.200000      300.200000     4.0      7485.039676         False          False   True
4    8697.252176    7385.039676  1289.679074   8697.252176   601.000000  7385.039676   912.2125  400.000000      400.000000     5.0      7485.039676         False          False   True
5    9197.752176    7485.039676  1289.679074   9197.752176   900.500000  7485.039676  1312.7125  400.000000      400.000000     5.0      7485.039676         False           True   True
6   10047.802176    7485.039676  1289.679074  10047.802176  1250.050000  7485.039676  2062.7625  500.000000      400.000000     5.0      7485.039676         False           True   True
7   10572.827176    7585.339676  1289.679074  10572.827176  1025.025000  7585.339676  2487.7875  499.700000      400.000000     4.0      7485.039676         False           True   True
8   10986.239676    7685.039795  1289.679074  10986.239676   913.112500  7685.039795  2801.2000  499.999881      400.000000     5.0      7485.039676         False          False   True
high_util=True, low_loss=False, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=400.[0m
[08/15 12:50:08]  --------------------------------------------------------------------------------
[08/15 12:50:08]  Iteration: 11 (0 solution, 10 counterexamples)
[08/15 12:50:09]  Generator returned sat in 1.125497 secs.
[08/15 12:50:09]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:10]  Improved number of small numbers from 30 to 113 out of a max of 113
[08/15 12:50:10]  Verifer returned sat in 0.405283 secs.
[08/15 12:50:10]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    8003.302002    7503.302002  771.416748  8003.302002   500.049805  7503.302002    0.000000    500.0           500.0     3.0      7503.302002            -1             -1    True
1    8003.326904    7603.302002  771.416748  8003.326904   500.024902  7603.302002    0.024902    400.0           400.0     3.0      8003.302002         False          False    True
2    8103.351807    7703.302002  771.416748  8103.351807   500.024902  7703.302002    0.049805    400.0           400.0     4.0      8003.302002         False          False    True
3    8206.351807    7803.302002  771.416748  8206.351807   503.000000  7803.302002    3.049805    400.0           400.0     5.0      8003.302002         False          False    True
4    8308.351807    7903.302002  771.416748  8308.351807   502.000000  7903.302002    5.049805    400.0           400.0     6.0      8003.302002         False          False    True
5    8409.351807    8003.302002  771.416748  8409.351807   501.000000  8003.302002    6.049805    400.0           400.0     7.0      8003.302002         False          False    True
6    8509.351807    8003.302002  771.416748  8509.351807   500.000000  8003.302002    6.049805    500.0           400.0     7.0      8003.302002         False           True    True
7    9009.351807    8203.302002  771.416748  9009.351807  1000.000000  8203.302002  406.049805    400.0           400.0     5.0      8003.302002         False           True   False
8    9608.351807    8303.302002  771.416748  9608.351807   999.000000  8303.302002  905.049805    400.0           400.0     5.0      8003.302002         False          False    True
high_util=True, low_loss=False, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=400.[0m
[08/15 12:50:10]  --------------------------------------------------------------------------------
[08/15 12:50:10]  Iteration: 12 (0 solution, 11 counterexamples)
[08/15 12:50:11]  Generator returned sat in 0.460478 secs.
[08/15 12:50:11]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:13]  Improved gap from 0.0 to 48.4375
[08/15 12:50:14]  Improved number of small numbers from 62 to 77 out of a max of 114
[08/15 12:50:14]  Verifer returned sat in 3.062851 secs.
[08/15 12:50:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    2975.501465    2975.301514  5299.417236  2975.501465    0.100098  2975.301514     0.0000   0.199951        0.199951     2.0      2975.301514            -1             -1   False
1    2975.501465    2975.301611  5350.979639  2975.501465    0.100098  2975.301611     0.0000   0.199854      -48.237646     2.0      2975.301514         False          False   False
2    3174.001611    3123.739111  5350.979639  3174.001611  198.700000  3123.739111    50.0625   0.200000        0.200000     1.0      2975.301514         False          False   False
3    3372.401611    3223.739111  5350.979639  3372.401611  198.600000  3223.739111   148.4625   0.200000        0.200000     1.0      3223.939111         False          False    True
4    3472.501611    3323.739111  5350.979639  3472.501611  100.300000  3323.739111   148.5625   0.200000        0.200000     1.0      3223.939111         False          False    True
5    3523.451611    3324.039111  5399.829590  3523.451611   51.150000  3324.039111   148.5625  50.850000       -0.000049     1.0      3223.939111         False          False    True
6    3571.751611    3374.989111  5451.292139  3571.751611   99.150000  3374.989111   148.5625  48.200000       -0.237500     1.0      3223.939111         False          False    True
7    3598.176611    3423.426611  5502.448486  3598.176611   74.625000  3423.426611   148.5625  26.187500      -22.656152     1.0      3223.939111         False          False    True
8    3620.832861    3472.270264  5502.448486  3620.832861   48.843750  3472.270264   148.5625   0.000098      -99.999902     1.0      3223.939111         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1/5.[0m
[08/15 12:50:15]  --------------------------------------------------------------------------------
[08/15 12:50:15]  Iteration: 13 (0 solution, 12 counterexamples)
[08/15 12:50:15]  Generator returned sat in 0.055614 secs.
[08/15 12:50:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:18]  Improved gap from 47.24365234375 to 48.4375
[08/15 12:50:18]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:50:18]  Verifer returned sat in 2.936175 secs.
[08/15 12:50:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     585.574463     485.574463  5353.681641   585.574463    0.043269   485.574463   0.000000  100.000000       99.956543     1.0       485.574463            -1             -1   False
1     585.617920     485.617920  5353.681641   585.617920  100.043457   485.617920   0.000000  100.000000        0.000000     2.0       485.574463         False          False   False
2     685.747559     685.055176  5353.681641   685.747559  200.129639   685.055176   0.043213    0.649170        0.086426     1.0       485.574463         False          False   False
3     883.358154     785.617920  5353.681641   883.358154  198.259766   785.617920  97.653809    0.086426        0.086426     1.0       785.704346         False          False    True
4     983.401611     885.617920  5353.681641   983.401611  100.129883   885.617920  97.697266    0.086426        0.086426     1.0       785.704346         False          False    True
5    1034.380127     885.747559  5402.616699  1034.380127   51.064941   885.747559  97.697266   50.935303        0.000000     1.0       785.704346         False          False    True
6    1084.791016     936.725830  5452.162598  1084.791016  101.346191   936.725830  97.697266   50.367920       -0.043213     1.0       785.704346         False          False    True
7    1110.977051     987.136963  5503.724854  1110.977051   76.553955   987.136963  97.697266   26.142822      -22.294922     1.0       785.704346         False          False    True
8    1136.593750    1035.574707  5555.287354  1136.593750   51.759521  1035.574707  97.697266    3.321777      -45.115723     1.0       785.704346         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=177/2048.[0m
[08/15 12:50:19]  --------------------------------------------------------------------------------
[08/15 12:50:19]  Iteration: 14 (0 solution, 13 counterexamples)
[08/15 12:50:20]  Generator returned sat in 0.251713 secs.
[08/15 12:50:20]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:21]  Improved number of small numbers from 71 to 75 out of a max of 113
[08/15 12:50:21]  Verifer returned sat in 1.004761 secs.
[08/15 12:50:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0      86.067871      85.967920  5353.681641    86.067871    0.100098    85.967920        0.0    0.099951       -0.100049     2.0         85.96792            -1             -1   False
1     186.167920      86.167920  5353.681641   186.167920  100.200000    86.167920        0.0  100.000000        0.000000     1.0         85.96792         False          False   False
2     486.467920     286.167920  5353.681641   486.467920  400.300000   286.167920        0.0  200.300000      200.300000     1.0         85.96792         False          False   False
3     686.367920     336.867920  5353.681641   686.367920  400.200000   336.867920        0.1  349.400000      300.100000     2.0        686.26792         False          False   False
4     837.767920     486.167920  5353.681641   837.767920  500.800000   486.167920       51.5  300.100000      300.100000     3.0        686.26792         False          False    True
5    1336.667920     586.167920  5353.681641  1336.667920  799.000000   586.167920      450.4  300.100000      300.100000     3.0        686.26792         False          False    True
6    1635.567920     686.167920  5353.681641  1635.567920  599.000000   686.167920      649.3  300.100000      300.100000     4.0        686.26792         False          False    True
7    2033.067920     737.067920  5353.681641  2033.067920  697.600000   737.067920      946.8  349.200000      300.100000     4.0        686.26792         False          False    True
8    2184.667920     786.167969  5353.681641  2184.667920  500.800000   786.167969      998.4  400.099951      300.100000     5.0        686.26792         False          False    True
high_util=True, low_loss=False, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=3001/10.[0m
[08/15 12:50:21]  --------------------------------------------------------------------------------
[08/15 12:50:21]  Iteration: 15 (0 solution, 14 counterexamples)
[08/15 12:50:23]  Generator returned sat in 1.333331 secs.
[08/15 12:50:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:23]  Improved gap from 0.0 to 100
[08/15 12:50:24]  Improved number of small numbers from 70 to 74 out of a max of 114
[08/15 12:50:24]  Verifer returned sat in 1.103853 secs.
[08/15 12:50:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0     388.267578     288.267432  5353.681641   388.267578  157.457143   288.267432       0.05   99.950146       99.950146     1.0       288.267432            -1             -1     -1
1     445.724574     388.267432  5353.681641   445.724574  157.407143   388.267432       0.05   57.407143       57.407143     1.0       445.674574         False          False   True
2     445.774574     445.724574  5353.681641   445.774574   57.457143   445.724574       0.05    0.000000      -42.542857     1.0       445.724574         False          False   True
3     503.231717     503.131717  5353.681641   503.231717   57.457143   503.131717       0.05    0.050000      -85.085714     1.0       445.724574         False          False   True
4     588.367432     588.267432  5353.681641   588.367432   85.185714   588.267432       0.05    0.050000      -99.950000     1.0       445.724574         False          False   True
5     715.096003     688.267432  5353.681641   715.096003  126.778571   688.267432       0.05   26.778571      -73.221429     1.0       445.724574         False          False   True
6     877.485289     877.435289  5353.681641   877.485289  189.167857   877.435289       0.05    0.000000      -10.832143     1.0       445.724574         False          False   True
7    1160.237074     988.267432  5353.681641  1160.237074  282.751786   988.267432       0.05  171.919643      171.919643     1.0       445.724574         False          False   True
8    1411.445110    1011.294922  5353.681641  1411.445110  423.127679  1011.294922       0.10  400.050188      323.077679     2.0       445.724574         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=361847/1120.[0m
[08/15 12:50:25]  --------------------------------------------------------------------------------
[08/15 12:50:25]  Iteration: 16 (0 solution, 15 counterexamples)
[08/15 12:50:25]  Generator returned sat in 0.131949 secs.
[08/15 12:50:25]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:26]  Improved gap from 0.0016666666666666668 to 0
[08/15 12:50:26]  Improved number of small numbers from 68 to 76 out of a max of 114
[08/15 12:50:26]  Verifer returned sat in 0.868151 secs.
[08/15 12:50:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     245.724365     145.724574  5353.681641   245.724365  300.004883   145.724574     0.0000   99.999791       99.997291     2.0       145.724574            -1             -1   False
1     445.727074     145.727074  5353.681641   445.727074  300.002500   145.727074   100.0025  199.997500       99.997500     2.0       345.724574         False          False   False
2     545.729574     245.727074  5353.681641   545.729574  300.000000   245.727074   100.0050  199.997500       99.997500     2.0       445.724574         False          False    True
3     745.782074     445.727074  5353.681641   745.782074  400.050000   445.727074   200.0575   99.997500       99.997500     1.0       445.724574         False          False    True
4     845.809574     545.727074  5353.681641   845.809574  200.025000   545.727074   200.0850   99.997500       99.997500     1.0       445.724574         False          False    True
5     845.824574     545.729736  5353.681641   845.824574  100.012500   545.729736   200.0850  100.009838        0.012500     2.0       445.724574         False          False    True
6     845.824574     645.727295  5453.669141   845.824574    0.010000   645.727295   200.0850    0.012280        0.000000     2.0       445.724574         False          False    True
7     845.824574     645.739574  5553.668945   845.824574    0.010000   645.739574   200.0850    0.000000       -0.000195     3.0       445.724574         False          False    True
8     845.834574     645.741943  5553.669189   845.834574    0.010000   645.741943   200.0850    0.007631      -99.989951     1.0       445.724574         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=39999/400.[0m
[08/15 12:50:27]  --------------------------------------------------------------------------------
[08/15 12:50:27]  Iteration: 17 (0 solution, 16 counterexamples)
[08/15 12:50:28]  Generator returned sat in 0.374352 secs.
[08/15 12:50:28]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:29]  Improved gap from 0.0 to 23.4375
[08/15 12:50:30]  Improved number of small numbers from 59 to 67 out of a max of 114
[08/15 12:50:30]  Verifer returned sat in 1.972230 secs.
[08/15 12:50:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0     198.849365     198.844574  5377.129395   198.849365    0.0075   198.844574     0.00250    0.002291       -0.002504     3.0       198.844574            -1             -1     -1
1     198.854574     198.849574  5377.129395   198.854574    0.0075   198.849574     0.00250    0.002500      -99.997295     1.0       198.844574         False           True   True
2     322.304574     298.864574  5453.676689   322.304574  123.4525   298.864574     0.00250   23.437500        0.000000     1.0       198.844574         False          False   True
3     422.317074     422.302074  5453.676689   422.317074  123.4500   422.302074     0.00250    0.012500        0.012500     1.0       422.314574         False          False   True
4    1116.119574     522.302074  5453.676689  1116.119574  693.8150   522.302074   593.80500    0.012500        0.012500     1.0       422.314574         False          False   True
5    1116.119574     522.302074  5530.239189  1116.119574    0.0100   522.302074   593.80500    0.012500      -23.425000     1.0       422.314574         False          False   True
6    1563.002074     645.739574  5530.239189  1563.002074  446.8950   645.739574   917.25000    0.012500        0.012500     1.0       422.314574         False          False   True
7    1563.002074     645.739574  5603.679199  1563.002074    0.0100   645.739574   917.25000    0.012500      -26.547490     1.0       422.314574         False          False   True
8    1809.884574     672.299805  5603.679199  1809.884574  246.8950   672.299805  1037.57251  100.012260        0.012500     1.0       422.314574         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=3, buffer=1/80.[0m
[08/15 12:50:30]  --------------------------------------------------------------------------------
[08/15 12:50:30]  Iteration: 18 (0 solution, 17 counterexamples)
[08/15 12:50:31]  Generator returned sat in 0.295628 secs.
[08/15 12:50:31]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:31]  Improved gap from 0.1 to 100
[08/15 12:50:32]  Improved number of small numbers from 59 to 70 out of a max of 114
[08/15 12:50:32]  Verifer returned sat in 1.190562 secs.
[08/15 12:50:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     145.639404      45.739502  5530.239189   145.639404    0.099854    45.739502       0.00   99.899902       99.899830     2.0        45.739502            -1             -1   False
1     145.639648      46.739574  5530.239189   145.639648   99.900146    46.739574       0.00   98.900074       -0.099926     2.0        45.739502         False          False   False
2     345.539574     145.739574  5530.239189   345.539574  298.800000   145.739574       0.00  199.800000       99.800000     1.0        45.739502         False          False   False
3     345.539574     247.189574  5530.239189   345.539574  199.700000   247.189574       0.00   98.350000       -0.200000     2.0       345.539574         False          False   False
4     545.739574     345.739574  5530.239189   545.739574  298.550000   345.739574       0.10  199.900000       99.900000     1.0       345.539574         False          False   False
5     645.839574     545.739574  5530.239189   645.839574  300.000000   545.739574       0.20   99.900000       99.900000     1.0       345.539574         False          False    True
6     946.939574     645.739574  5530.239189   946.939574  401.000000   645.739574     201.30   99.900000       99.900000     1.0       345.539574         False          False    True
7    1246.589574     645.839574  5530.239189  1246.589574  399.550000   645.839574     400.95  199.800000       99.900000     2.0       345.539574         False          False    True
8    1347.889574     845.739502  5530.239189  1347.889574  301.100000   845.739502     402.25   99.900073       99.900000     1.0       345.539574         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=5, buffer=999/10.[0m
[08/15 12:50:33]  --------------------------------------------------------------------------------
[08/15 12:50:33]  Iteration: 19 (0 solution, 18 counterexamples)
[08/15 12:50:34]  Generator returned sat in 0.302954 secs.
[08/15 12:50:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:35]  Improved number of small numbers from 54 to 55 out of a max of 113
[08/15 12:50:35]  Verifer returned sat in 1.089157 secs.
[08/15 12:50:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     145.639160      45.739502  5530.239014   145.639160    0.099609    45.739502    0.000000   99.899658       99.899410     2.0        45.739502            -1             -1   False
1     145.639648      45.814556  5530.239189   145.639648   99.900146    45.814556    0.000000   99.825092       -0.099926     2.0        45.739502         False          False   False
2     345.539574     145.739574  5530.239189   345.539574  299.725018   145.739574    0.000000  199.800000       99.800000     1.0        45.739502         False          False   False
3     345.539574     247.189574  5530.239189   345.539574  199.700000   247.189574    0.000000   98.350000       -0.200000     2.0       345.539574         False          False   False
4     545.739574     345.739574  5530.239189   545.739574  298.550000   345.739574    0.100000  199.900000       99.900000     1.0       345.539574         False          False   False
5     645.764593     545.739574  5530.239189   645.764593  299.925018   545.739574    0.125018   99.900000       99.900000     1.0       345.539574         False          False    True
6     945.864593     645.739574  5530.239189   945.864593  400.000000   645.739574  200.225018   99.900000       99.900000     1.0       345.539574         False          False    True
7    1244.514593     645.839574  5530.239189  1244.514593  398.550000   645.839574  398.875018  199.800000       99.900000     2.0       345.539574         False          False    True
8    1344.814593     845.739502  5530.239189  1344.814593  300.100000   845.739502  399.175018   99.900073       99.900000     1.0       345.539574         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=5, buffer=999/10.[0m
[08/15 12:50:36]  --------------------------------------------------------------------------------
[08/15 12:50:36]  Iteration: 20 (0 solution, 19 counterexamples)
[08/15 12:50:36]  Generator returned sat in 0.123275 secs.
[08/15 12:50:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:38]  Improved number of small numbers from 41 to 50 out of a max of 113
[08/15 12:50:38]  Verifer returned sat in 1.907248 secs.
[08/15 12:50:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     145.689697      45.689941  5530.239189   145.689697    0.099609    45.689941    0.000000   99.999756       99.950123     2.0        45.689941            -1             -1   False
1     145.689697      45.739574  5530.239189   145.689697   99.999756    45.739574    0.000000   99.950123       -0.049877     2.0        45.689941         False          False   False
2     345.589770     145.739574  5530.239189   345.589770  299.850195   145.739574    0.000000  199.850195       99.850195     1.0        45.689941         False          False   False
3     345.589770     247.038989  5530.239189   345.589770  199.800391   247.038989    0.000000   98.550781       -0.149805     2.0       345.589770         False          False   False
4     545.739574     346.139249  5530.239189   545.739574  298.700586   346.139249    0.100000  199.500326       99.900000     1.0       345.589770         False          False   False
5     645.789379     545.739574  5530.239189   645.789379  299.550130   545.739574    0.149805   99.900000       99.900000     1.0       345.589770         False          False    True
6     895.664444     645.739574  5530.239189   895.664444  349.775065   645.739574  150.024870   99.900000       99.900000     1.0       345.589770         False          False    True
7    1170.002270     670.935073  5530.239189  1170.002270  374.237826   670.935073  324.362695  174.704502       99.900000     2.0       345.589770         False          False    True
8    1344.814593     845.739258  5530.239189  1344.814593  349.516825   845.739258  399.175018   99.900317       99.900000     1.0       345.589770         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=5, buffer=999/10.[0m
[08/15 12:50:39]  --------------------------------------------------------------------------------
[08/15 12:50:39]  Iteration: 21 (0 solution, 20 counterexamples)
[08/15 12:50:40]  Generator returned sat in 0.433182 secs.
[08/15 12:50:40]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:41]  Improved number of small numbers from 58 to 64 out of a max of 113
[08/15 12:50:41]  Verifer returned sat in 1.479026 secs.
[08/15 12:50:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -459.690186    -459.740254  5530.239189  -459.690186    0.050049  -459.740254       0.00    0.050068        0.050068     3.0      -459.740254            -1             -1    True
1      40.209746    -459.640254  5530.239189    40.209746  499.950000  -459.640254       0.00  499.850000      399.950000     1.0      -459.740254         False          False    True
2      40.209746    -359.740254  5530.239189    40.209746    0.050049  -359.740254       0.00  399.950000      299.950000     2.0        40.209746         False          False    True
3      40.209746    -159.740254  5530.239189    40.209746   47.250000  -159.740254       0.00  199.950000      199.950000     3.0        40.209746         False          False    True
4      40.209746    -159.740254  5530.239189    40.209746  197.250000  -159.740254       0.00  199.950000       99.950000     3.0        40.209746         False          False    True
5     187.459746      40.259746  5530.239189   187.459746  347.200000    40.259746       0.00  147.200000      147.200000     1.0        40.209746         False          False    True
6     587.459746      40.309814  5530.239189   587.459746  547.200000    40.309814       0.05  547.099932      447.150000     2.0        40.209746         False          False    True
7     587.459746     155.259746  5530.239189   587.459746  274.600000   155.259746       0.05  432.150000      347.150000     3.0        40.209746         False          False    True
8     587.459746     340.259521  5530.239189   587.459746  432.100000   340.259521       0.05  247.150225      247.150000     3.0        40.209746         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=8943/20.[0m
[08/15 12:50:42]  --------------------------------------------------------------------------------
[08/15 12:50:42]  Iteration: 22 (0 solution, 21 counterexamples)
[08/15 12:50:44]  Generator returned sat in 1.236983 secs.
[08/15 12:50:44]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:44]  Improved gap from 0.0 to 100
[08/15 12:50:46]  Improved number of small numbers from 59 to 65 out of a max of 114
[08/15 12:50:46]  Verifer returned sat in 1.998972 secs.
[08/15 12:50:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -313.602539    -513.502754  5530.239189  -313.602539    0.100000  -513.502754    0.000000  199.900215       99.900215     2.0      -513.502754            -1             -1   False
1    -313.602539    -413.502754  5530.239189  -313.602539  100.199951  -413.502754    0.000000   99.900215       -0.099785     2.0      -513.502754         False          False   False
2    -313.402754    -313.502754  5530.239189  -313.402754  100.100000  -313.502754    0.000000    0.100000      -99.900000     1.0      -313.402754         False          False   False
3    -113.202754    -213.502754  5530.239189  -113.202754  200.300000  -213.502754    0.100000  100.200000        0.200000     1.0      -313.402754         False          False   False
4      36.747246     -13.502754  5530.239189    36.747246  250.150000   -13.502754   50.050000    0.200000        0.200000     1.0      -313.402754         False          False    True
5     361.622246      -4.502754  5530.239189   361.622246  325.075000    -4.502754  274.925000   91.200000        0.200000     1.0      -313.402754         False          False    True
6     587.459746     167.497246  5530.239189   587.459746  317.037500   167.497246  400.762500   19.200000        0.200000     1.0      -313.402754         False          False    True
7     917.278496     230.497246  5530.239189   917.278496  349.018750   230.497246  630.581250   56.200000        0.200000     1.0      -313.402754         False          False    True
8    1157.587871     286.697021  5530.239189  1157.587871  296.509375   286.697021  770.890625  100.000225        0.200000     2.0      -313.402754         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=1/5.[0m
[08/15 12:50:47]  --------------------------------------------------------------------------------
[08/15 12:50:47]  Iteration: 23 (0 solution, 22 counterexamples)
[08/15 12:50:49]  Generator returned sat in 1.657472 secs.
[08/15 12:50:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:50:54]  Improved gap from 0.0016666666666666668 to 31.25
[08/15 12:50:54]  Improved number of small numbers from 59 to 84 out of a max of 114
[08/15 12:50:54]  Verifer returned sat in 5.405720 secs.
[08/15 12:50:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -223.495117    -423.495254  5530.239258  -223.495117    0.002686  -423.495254     0.0000  200.000137      100.000205     2.0      -423.495254            -1             -1    True
1    -223.495117    -254.745117  5530.239258  -223.495117  141.545000  -254.745117     0.0000   31.250000        0.000205     2.0      -423.495254         False          False    True
2    -113.202637    -125.915254  5530.239258  -113.202637  141.542480  -125.915254     0.0000   12.712617       10.292686     1.0      -113.202637         False          False    True
3    -113.202637    -113.205254  5588.699189  -113.202637   12.710000  -113.205254     0.0000    0.002617      -31.247383     2.0      -113.202637         False          False    True
4      49.294746      18.042246  5588.699189    49.294746  162.500000    18.042246     0.0025   31.250000       31.247500     1.0      -113.202637         False          False    True
5      49.294746      18.044746  5657.449189    49.294746    0.010000    18.044746     0.0025   31.247500       -0.002500     2.0      -113.202637         False          False    True
6      91.032246      49.294746  5715.714111    91.032246   72.985000    49.294746     0.0025   41.735000       -0.000078     1.0      -113.202637         False          False    True
7     168.039746      91.032246  5738.704346   168.039746  118.742500    91.032246     0.0025   77.005000       -0.002344     1.0      -113.202637         False          False    True
8     187.900996     168.039795  5807.454102   187.900996   96.866250   168.039795     0.0025   19.858701      -11.391338     1.0      -113.202637         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=12499/400.[0m
[08/15 12:50:55]  --------------------------------------------------------------------------------
[08/15 12:50:55]  Iteration: 24 (0 solution, 23 counterexamples)
[08/15 12:50:59]  Generator returned sat in 3.476676 secs.
[08/15 12:50:59]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:00]  Improved gap from 0.0025 to 48.4375
[08/15 12:51:01]  Improved number of small numbers from 59 to 69 out of a max of 114
[08/15 12:51:01]  Verifer returned sat in 1.751215 secs.
[08/15 12:51:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -950.670410   -1050.669004  6257.412939  -950.670410  100.002441 -1050.669004     0.0000  99.998594       99.998594     8.0     -1050.669004            -1             -1     -1
1    -950.667754    -950.669189  6257.412939  -950.667754  100.001250  -950.669189     0.0000   0.001436        0.001250     1.0      -950.667754         False           True  False
2    -850.667725    -850.669004  6257.412939  -850.667725  100.001465  -850.669004     0.0000   0.001279        0.001279     1.0      -950.667754         False          False  False
3    -775.672754    -775.674004  6257.412939  -775.672754   74.996250  -775.674004     0.0000   0.001250      -25.003750     1.0      -775.672754         False          False  False
4    -500.679004    -650.674004  6257.412939  -500.679004  274.995000  -650.674004   149.9875   0.007500        0.002500     1.0      -775.672754         False          False  False
5    -500.676504    -650.665254  6308.971689  -500.676504    0.010000  -650.665254   149.9875   0.001250      -48.436250     1.0      -775.672754         False          False   True
6    -399.675879    -602.227754  6356.407227  -399.675879  101.001875  -602.227754   149.9875  52.564375       -0.000088     1.0      -775.672754         False          False   True
7    -364.517129    -549.662129  6407.968564  -364.517129   87.723125  -549.662129   149.9875  35.157500      -13.280000     1.0      -775.672754         False          False   True
8    -348.168691    -501.224609  6407.968750  -348.168691   51.505938  -501.224609   149.9875   3.068418      -96.931377     1.0      -775.672754         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/400.[0m
[08/15 12:51:02]  --------------------------------------------------------------------------------
[08/15 12:51:02]  Iteration: 25 (0 solution, 24 counterexamples)
[08/15 12:51:05]  Generator returned sat in 2.203068 secs.
[08/15 12:51:05]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:05]  Improved gap from 0.0 to 39.0625
[08/15 12:51:05]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:51:05]  Verifer returned sat in 0.734325 secs.
[08/15 12:51:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -827.887207   -1127.787109  6234.531006  -827.887207    0.199951 -1127.787109        0.0  299.899902      199.899902     2.0     -1127.787109            -1             -1    True
1    -827.887207    -927.787109  6234.531006  -827.887207    0.100000  -927.787109        0.0   99.899902       99.899902     2.0      -827.887207         False          False    True
2    -732.974854    -827.787109  6234.531006  -732.974854  194.812256  -827.787109        0.0   94.812256       94.812256     1.0      -827.887207         False          False    True
3    -732.974854    -733.074463  6234.531006  -732.974854   73.674805  -733.074463        0.0    0.099609       -5.187744     2.0      -732.974854         False          False    True
4    -660.399658    -660.499512  6234.531006  -660.399658   72.674805  -660.499512        0.0    0.099854      -32.612549     1.0      -732.974854         False          False    True
5    -588.824707    -627.787109  6295.468506  -588.824707   71.674805  -627.787109        0.0   38.962402       -0.100098     1.0      -732.974854         False          False    True
6    -557.112305    -588.724609  6356.406006  -557.112305   70.674805  -588.724609        0.0   31.612305       -7.450195     1.0      -732.974854         False          False    True
7    -519.049805    -549.662109  6417.343506  -519.049805   69.674805  -549.662109        0.0   30.612305       -8.450195     1.0      -732.974854         False          False    True
8    -480.987305    -510.599609  6478.281006  -480.987305   68.674805  -510.599609        0.0   29.612305       -9.450195     1.0      -732.974854         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=100.[0m
[08/15 12:51:06]  --------------------------------------------------------------------------------
[08/15 12:51:06]  Iteration: 26 (0 solution, 25 counterexamples)
[08/15 12:51:12]  Generator returned sat in 5.595243 secs.
[08/15 12:51:12]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:14]  Improved number of small numbers from 59 to 69 out of a max of 113
[08/15 12:51:14]  Verifer returned sat in 1.272237 secs.
[08/15 12:51:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1743.656250   -1891.656178  7050.300075 -1743.656250    0.200000 -1891.656178    0.000000  147.999928       99.899928     7.0     -1891.656178            -1             -1     -1
1   -1743.656250   -1843.556178  7050.300075 -1743.656250    0.100098 -1843.556178    0.000000   99.899928       -0.100072     7.0     -1743.656250         False           True  False
2   -1543.656178   -1743.556178  7050.300075 -1543.656178  299.900000 -1743.556178    0.000000  199.900000       99.900000     1.0     -1743.656250         False           True  False
3   -1209.889512   -1543.556178  7050.300075 -1209.889512  533.666667 -1543.556178    0.100000  333.566667      333.566667     1.0     -1743.656250         False          False  False
4   -1021.306178   -1491.656178  7050.300075 -1021.306178  522.150000 -1491.656178   88.683333  381.666667      333.566667     2.0     -1743.656250         False          False   True
5    -875.122845   -1410.089512  7050.300075  -875.122845  527.850000 -1410.089512  134.866667  400.100000      333.566667     3.0     -1009.989512          True           True   True
6    -775.022845   -1243.556178  7050.300075  -775.022845  500.200000 -1243.556178  134.966667  333.566667      333.566667     4.0     -1009.989512         False           True   True
7    -658.589512   -1143.556178  7050.300075  -658.589512  450.000000 -1143.556178  151.400000  333.566667      333.566667     4.0     -1009.989512         False           True   True
8    -470.006178   -1043.556396  7050.300075  -470.006178  522.150000 -1043.556396  239.983333  333.566885      333.566667     4.0     -1009.989512         False           True   True
high_util=True, low_loss=False, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=5, buffer=10007/30.[0m
[08/15 12:51:14]  --------------------------------------------------------------------------------
[08/15 12:51:14]  Iteration: 27 (0 solution, 26 counterexamples)
[08/15 12:51:15]  Generator returned sat in 0.175911 secs.
[08/15 12:51:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:16]  Improved gap from 0.1 to 100
[08/15 12:51:17]  Improved number of small numbers from 60 to 66 out of a max of 114
[08/15 12:51:17]  Verifer returned sat in 1.467871 secs.
[08/15 12:51:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1843.506348   -1843.556178  7050.300075 -1843.506348     0.025 -1843.556178    0.000000    0.049831        0.049831     1.0     -1843.556178            -1             -1    True
1   -1843.506348   -1843.556178  7050.300075 -1843.506348     0.025 -1843.556178    0.000000    0.049831      -99.950169     1.0     -1843.556178         False          False    True
2   -1643.581178   -1643.606178  7050.300075 -1643.581178   199.975 -1643.606178    0.000000    0.025000       -0.025000     1.0     -1843.556178         False          False    True
3   -1570.131178   -1643.556178  7050.300075 -1570.131178    73.475 -1643.556178    0.000000   73.425000      -26.575000     1.0     -1570.131178         False          False    True
4   -1095.606178   -1509.522845  7050.300075 -1095.606178   547.950 -1509.522845   13.891667  400.025000      334.058333     1.0     -1570.131178         False          False    True
5    -995.581178   -1349.552845  7050.300075  -995.581178   500.050 -1349.552845   13.916667  340.055000      334.058333     2.0     -1570.131178         False          False    True
6    -895.556178   -1306.322845  7050.300075  -895.556178   440.080 -1306.322845   13.941667  396.825000      334.058333     3.0      -909.497845          True           True    True
7    -787.531178   -1143.556178  7050.300075  -787.531178   504.850 -1143.556178   21.966667  334.058333      334.058333     4.0      -909.497845         False           True    True
8    -573.639512   -1143.556152  7050.300075  -573.639512   547.950 -1143.556152  135.858333  434.058307      334.058333     5.0      -909.497845         False           True    True
high_util=True, low_loss=False, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=40087/120.[0m
[08/15 12:51:17]  --------------------------------------------------------------------------------
[08/15 12:51:17]  Iteration: 28 (0 solution, 27 counterexamples)
[08/15 12:51:22]  Generator returned sat in 4.001457 secs.
[08/15 12:51:22]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:23]  Improved gap from 0.1 to 100
[08/15 12:51:23]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:51:23]  Verifer returned sat in 0.797861 secs.
[08/15 12:51:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -2209.956055   -2210.156250  7050.300049 -2209.956055    0.100098 -2210.156250   0.100098    0.100098       -0.099854     6.0      -2210.15625            -1             -1     -1
1   -2209.756348   -2209.956299  7050.300049 -2209.756348    0.299805 -2209.956299   0.100098    0.099854      -99.900146     1.0      -2210.15625         False           True   True
2   -2007.156006   -2109.956299  7050.300049 -2007.156006  202.700195 -2109.956299   0.100098  102.700195        2.700195     1.0      -2210.15625         False          False   True
3   -1713.756104   -2007.156250  7050.300049 -1713.756104  396.100098 -2007.156250   0.100098  293.300049      196.100098     1.0      -2210.15625         False          False   True
4   -1609.956055   -1909.956299  7050.300049 -1609.956055  397.100098 -1909.956299   0.100098  299.900146      199.900146     2.0      -2210.15625         False          False   True
5   -1511.756104   -1713.756348  7050.300049 -1511.756104  398.100098 -1713.756348   0.100098  201.900146      198.100098     2.0      -2210.15625         False          False   True
6   -1314.556152   -1609.956299  7050.300049 -1314.556152  399.100098 -1609.956299   0.100098  295.300049      295.300049     2.0      -2210.15625         False          False   True
7   -1209.756104   -1609.956299  7050.300049 -1209.756104  400.100098 -1609.956299   0.100098  400.100098      300.100098     2.0      -2210.15625         False          False   True
8   -1208.756104   -1509.956055  7050.300049 -1208.756104  401.100098 -1509.956055   0.100098  301.099854      201.100098     3.0      -2210.15625         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=1229619/4096.[0m
[08/15 12:51:24]  --------------------------------------------------------------------------------
[08/15 12:51:24]  Iteration: 29 (0 solution, 28 counterexamples)
[08/15 12:51:27]  Generator returned sat in 2.391590 secs.
[08/15 12:51:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:27]  Improved gap from 0.0004166666666666667 to 0
[08/15 12:51:28]  Improved number of small numbers from 79 to 94 out of a max of 114
[08/15 12:51:28]  Verifer returned sat in 0.947043 secs.
[08/15 12:51:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -2009.959717   -2209.959473  6950.303382 -2009.959717  200.002441 -2209.959473    0.000732  199.999023       99.999183     6.0     -2209.959473            -1             -1     -1
1   -2009.956299   -2009.959717  6950.303382 -2009.956299  200.002441 -2009.959717    0.001667    0.001751        0.001667     1.0     -2209.959473         False          False   True
2   -2009.954632   -2009.957132  7050.300049 -2009.954632    0.003418 -2009.957132    0.001667    0.000833        0.000000     1.0     -2009.956299         False          False   True
3   -1615.952132   -1909.956299  7050.300049 -1615.952132  394.003333 -1909.956299  294.002500    0.001667        0.001667     1.0     -2009.956299         False          False   True
4   -1417.952132   -1809.956299  7050.300049 -1417.952132  198.001667 -1809.956299  392.002500    0.001667        0.001667     1.0     -2009.956299         False          False   True
5   -1317.952965   -1809.953857  7050.300049 -1317.952965  100.000833 -1809.953857  392.002500   99.998392        0.000833     1.0     -2009.956299         False          False   True
6   -1317.952965   -1709.956299  7150.299072 -1317.952965    0.010000 -1709.956299  392.002500    0.000833       -0.000143     2.0     -2009.956299         False          False   True
7   -1317.943799   -1709.947132  7250.290039 -1317.943799    0.010000 -1709.947132  392.002500    0.000833       -0.000010     1.0     -2009.956299         False          False   True
8   -1317.934632   -1709.945312  7250.290283 -1317.934632    0.010000 -1709.945312  392.002500    0.008180      -99.990599     1.0     -2009.956299         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/600.[0m
[08/15 12:51:29]  --------------------------------------------------------------------------------
[08/15 12:51:29]  Iteration: 30 (0 solution, 29 counterexamples)
[08/15 12:51:30]  Generator returned sat in 0.377557 secs.
[08/15 12:51:30]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:31]  Improved number of small numbers from 72 to 80 out of a max of 113
[08/15 12:51:31]  Verifer returned sat in 0.819486 secs.
[08/15 12:51:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -2372.081543   -2871.981201  7050.300049 -2372.081543  400.1500 -2871.981201      0.000  499.899658      399.899756     3.0     -2871.981201            -1             -1   False
1   -2372.081543   -2671.981299  7050.300049 -2372.081543  417.1500 -2671.981299      0.000  299.899756      299.899756     3.0     -2871.981201         False          False   False
2   -2254.881299   -2671.981299  7050.300049 -2254.881299  417.1000 -2671.981299      0.050  417.050000      317.050000     3.0     -2254.931299         False          False   False
3   -1839.931299   -2471.981299  7050.300049 -1839.931299  832.0000 -2471.981299    315.000  317.050000      317.050000     4.0     -2254.931299         False          False    True
4   -1739.981299   -2372.031299  7050.300049 -1739.981299  417.0000 -2372.031299    315.000  317.050000      317.000000     3.0     -2254.931299         False          False    True
5   -1606.106299   -2371.981201  7050.300049 -1606.106299  450.9250 -2371.981201    348.825  417.049902      317.050000     4.0     -2254.931299         False          False    True
6   -1606.106299   -2185.561299  7050.300049 -1606.106299  226.4625 -2185.561299    348.825  230.630000      217.050000     4.0     -2254.931299         False          False    True
7   -1406.106299   -2085.611299  7050.300049 -1406.106299  430.6300 -2085.611299    348.825  330.680000      317.050000     4.0     -2254.931299         False          False    True
8   -1306.156299   -1971.981445  7050.300049 -1306.156299  430.6300 -1971.981445    348.825  317.000146      317.000000     4.0     -2254.931299         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=1, buffer=6341/20.[0m
[08/15 12:51:31]  --------------------------------------------------------------------------------
[08/15 12:51:31]  Iteration: 31 (0 solution, 30 counterexamples)
[08/15 12:51:33]  Generator returned sat in 1.215465 secs.
[08/15 12:51:33]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:34]  Improved number of small numbers from 68 to 113 out of a max of 113
[08/15 12:51:34]  Verifer returned sat in 0.424149 secs.
[08/15 12:51:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1607.983887   -2107.783936  7050.300049 -1607.983887  499.899902 -2107.783936   0.000000  499.800049      399.800049     9.0     -2107.783936            -1             -1     -1
1   -1607.884033   -1907.784180  7050.300049 -1607.884033  499.899902 -1907.784180   0.000000  299.900146      299.899902     8.0     -2107.783936         False           True  False
2   -1407.984131   -1807.783936  7050.300049 -1407.984131  499.800049 -1807.783936   0.099854  399.699951      399.699951     9.0     -1408.083984         False          False  False
3   -1407.984131   -1807.783936  7050.300049 -1407.984131   60.518519 -1807.783936   0.099854  399.699951      299.699951     9.0     -1408.083984         False           True   True
4   -1407.984131   -1607.784180  7050.300049 -1407.984131   89.777778 -1607.784180   0.099854  199.700195      199.699951     3.0     -1408.083984         False           True  False
5   -1407.984131   -1607.683838  7050.300049 -1407.984131  133.666667 -1607.683838   0.099854  199.599854       99.699951     4.0     -1408.083984         False          False  False
6   -1407.984131   -1507.783936  7050.300049 -1407.984131  199.500000 -1507.783936   0.099854   99.699951       -0.300049     5.0     -1408.083984         False          False  False
7   -1209.434082   -1307.783936  7050.300049 -1209.434082  298.250000 -1307.783936   0.099854   98.250000       98.250000     1.0     -1408.083984         False          False  False
8    -861.309082   -1261.509277  7050.300049  -861.309082  446.375000 -1261.509277   0.099854  400.100342      346.375000     2.0     -1408.083984         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=1637171/4096.[0m
[08/15 12:51:35]  --------------------------------------------------------------------------------
[08/15 12:51:35]  Iteration: 32 (0 solution, 31 counterexamples)
[08/15 12:51:38]  Generator returned sat in 2.996112 secs.
[08/15 12:51:38]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:39]  Improved gap from 0.0 to 0
[08/15 12:51:40]  Improved number of small numbers from 62 to 71 out of a max of 114
[08/15 12:51:40]  Verifer returned sat in 1.007663 secs.
[08/15 12:51:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1607.889893   -1607.890700  6650.330049 -1607.889893  100.005833 -1607.890700   0.000000    0.000807       -0.000859     3.0     -1607.890700            -1             -1     -1
1   -1507.885700   -1607.889033  6650.330049 -1507.885700  100.005000 -1607.889033   0.000833  100.002500        0.002500     1.0     -1507.886533         False           True  False
2   -1407.886533   -1507.886533  6650.330049 -1407.886533  200.001667 -1507.886533   0.000833   99.999167        0.001667     2.0     -1507.886533         False          False   True
3   -1307.884867   -1308.887207  6650.330049 -1307.884867  200.000833 -1308.887207   0.001667    1.000674        0.002500     1.0     -1307.886533         False           True  False
4   -1307.884867   -1307.887367  6750.327393 -1307.884867    1.000000 -1307.887367   0.001667    0.000833       -0.000156     2.0     -1307.886533         False          False   True
5   -1307.875700   -1307.878200  6850.310059 -1307.875700    0.010000 -1307.878200   0.001667    0.000833       -0.008324     1.0     -1307.886533         False           True  False
6   -1307.866533   -1307.869033  6950.309082 -1307.866533    0.010000 -1307.869033   0.001667    0.000833       -0.000133     1.0     -1307.886533         False          False  False
7   -1307.857367   -1307.859867  7050.300049 -1307.857367    0.010000 -1307.859867   0.001667    0.000833        0.000000     1.0     -1307.886533         False          False  False
8   -1307.848200   -1307.858887  7050.300049 -1307.848200    0.010000 -1307.858887   0.001667    0.009020      -99.990833     1.0     -1307.886533         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=0, buffer=1/400.[0m
[08/15 12:51:40]  --------------------------------------------------------------------------------
[08/15 12:51:40]  Iteration: 33 (0 solution, 32 counterexamples)
[08/15 12:51:42]  Generator returned sat in 1.337252 secs.
[08/15 12:51:42]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:43]  Improved gap from 0.0 to 100
[08/15 12:51:44]  Improved number of small numbers from 59 to 63 out of a max of 114
[08/15 12:51:44]  Verifer returned sat in 1.603447 secs.
[08/15 12:51:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1955.827393   -1955.927207  6650.330049 -1955.827393    0.400000 -1955.927207    0.000000    0.099814       -0.100186     8.0     -1955.927207            -1             -1     -1
1   -1955.627207   -1955.727207  6650.330049 -1955.627207    0.300000 -1955.727207    0.000000    0.100000      -99.900000     1.0     -1955.627207         False           True  False
2   -1755.727207   -1855.727207  6650.330049 -1755.727207  200.000000 -1855.727207    0.000000  100.000000        0.000000     1.0     -1955.627207         False          False  False
3   -1655.427207   -1655.727207  6650.330049 -1655.427207  200.300000 -1655.727207    0.100000    0.200000        0.200000     1.0     -1955.627207         False          False  False
4   -1504.527207   -1622.860540  6650.330049 -1504.527207  151.100000 -1622.860540   51.000000   67.333333        0.200000     1.0     -1955.627207         False          False   True
5   -1404.427207   -1522.993874  6650.330049 -1404.427207  167.433333 -1522.993874   51.100000   67.466667        0.200000     1.0     -1955.627207         False          False   True
6   -1304.527207   -1355.727207  6650.330049 -1304.527207  167.366667 -1355.727207   51.100000    0.100000        0.100000     1.0     -1955.627207         False          False   True
7    -518.893874   -1255.727207  6650.330049  -518.893874  785.733333 -1255.727207  736.633333    0.200000        0.200000     1.0     -1955.627207         False          False   True
8    -334.527207   -1255.427246  6650.330049  -334.527207  184.566667 -1255.427246  821.000000   99.900039        0.200000     1.0     -1955.627207         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=1/5.[0m
[08/15 12:51:45]  --------------------------------------------------------------------------------
[08/15 12:51:45]  Iteration: 34 (0 solution, 33 counterexamples)
[08/15 12:51:51]  Generator returned sat in 4.776450 secs.
[08/15 12:51:51]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:51]  Improved gap from 0.0 to 100
[08/15 12:51:51]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:51:51]  Verifer returned sat in 0.636104 secs.
[08/15 12:51:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1521.531250   -1721.531494  6650.330078 -1521.531250    0.025000 -1721.531494    0.025146  199.975098      199.975098     8.0     -1721.531494            -1             -1     -1
1   -1521.506348   -1721.506592  6650.330078 -1521.506348  200.000000 -1721.506592    0.050049  199.950195       99.975098     8.0     -1721.531494         False          False   True
2   -1521.456543   -1521.556396  6650.330078 -1521.456543  200.000000 -1521.556396    0.050049    0.049805        0.024902     9.0     -1721.531494         False          False   True
3   -1521.456543   -1521.531494  6650.330078 -1521.456543    0.024902 -1521.531494    0.050049    0.024902      -99.975098     2.0     -1521.506592          True           True  False
4   -1322.481445   -1421.019043  6650.330078 -1322.481445  199.000000 -1421.019043    0.050049   98.487549       -1.000000     1.0     -1521.506592         False          False  False
5   -1121.481445   -1320.018799  6650.330078 -1121.481445  299.487549 -1320.018799    0.074951  198.462402       99.975098     1.0     -1521.506592         False          False  False
6   -1021.456299   -1121.531494  6650.330078 -1021.456299  298.487549 -1121.531494    0.100098   99.975098       99.975098     1.0     -1521.506592         False          False   True
7    -823.943848   -1021.531494  6650.330078  -823.943848  297.487549 -1021.531494   97.612549   99.975098       99.975098     1.0     -1521.506592         False          False   True
8    -627.431396    -921.531494  6650.330078  -627.431396  296.487549  -921.531494  194.125000   99.975098       99.975098     1.0     -1521.506592         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=204749/2048.[0m
[08/15 12:51:52]  --------------------------------------------------------------------------------
[08/15 12:51:52]  Iteration: 35 (0 solution, 34 counterexamples)
[08/15 12:51:55]  Generator returned sat in 2.136229 secs.
[08/15 12:51:55]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:51:56]  Improved number of small numbers from 71 to 75 out of a max of 113
[08/15 12:51:56]  Verifer returned sat in 1.067022 secs.
[08/15 12:51:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t      cwnd_0,t  service_0,t  losts_0,t       queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1921.406250   -2021.506299  6650.330078 -1921.406250    199.999756 -2021.506299       0.05    100.050049        0.050049     8.0     -2021.506299            -1             -1     -1
1   -1821.506299   -1921.406299  6650.330078 -1821.506299    199.950000 -1921.406299       0.05     99.850000       -0.050000     1.0     -1821.556299         False           True   True
2   -1721.456299   -1821.506299  6650.330078 -1721.456299    199.900000 -1821.506299       0.05    100.000000        0.000000     1.0     -1721.506299         False          False   True
3   -1621.606299   -1687.339632  6650.330078 -1621.606299    199.850000 -1687.339632       0.05     65.683333       -0.150000     1.0     -1621.656299         False          False   True
4   -1121.506299   -1521.606299  6650.330078 -1121.506299    565.783333 -1521.606299       0.05    400.050000      399.950000     1.0     -1621.656299         False          False   True
5    -191.089632   -1421.506299  6650.330078  -191.089632   1330.466667 -1421.506299       0.05   1230.366667     1230.366667     2.0     -1621.656299         False          False   True
6    1238.477035   -1321.506299  6650.330078  1238.477035   2659.933333 -1321.506299       0.05   2559.933333     2559.933333     3.0      1238.427035          True           True  False
7    3997.410368   -1321.456299  6650.330078  3997.410368   5318.866667 -1321.456299       0.05   5318.816667     5218.866667     4.0      1238.427035         False           True  False
8    9315.327035   -1121.506348  6650.330078  9315.327035  10636.733333 -1121.506348       0.05  10436.783382    10436.783333     4.0      1238.427035         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=42749269/4096.[0m
[08/15 12:51:57]  --------------------------------------------------------------------------------
[08/15 12:51:57]  Iteration: 36 (0 solution, 35 counterexamples)
[08/15 12:52:00]  Generator returned sat in 2.244474 secs.
[08/15 12:52:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:00]  Improved gap from 0.05 to 100
[08/15 12:52:01]  Improved number of small numbers from 98 to 114 out of a max of 114
[08/15 12:52:01]  Verifer returned sat in 0.480759 secs.
[08/15 12:52:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1721.456543   -1921.456299  6650.329834 -1721.456543    0.075000 -1921.456299    0.000000  199.999756      199.999756     2.0     -1921.456299            -1             -1    True
1   -1721.456543   -1921.456299  6650.329834 -1721.456543    0.049805 -1921.456299    0.000000  199.999756       99.999756     2.0     -1721.456543         False          False    True
2   -1721.456543   -1821.456299  6650.329834 -1721.456543    0.025146 -1821.456299    0.000000   99.999756       -0.000244     3.0     -1721.456543         False          False    True
3   -1621.481201   -1655.398193  6650.329834 -1621.481201  199.975098 -1655.398193    0.000000   33.916992       -0.024902     1.0     -1721.456543         False          False    True
4   -1221.406494   -1621.456299  6650.329834 -1221.406494  433.991699 -1621.456299    0.024902  400.024902      300.024902     1.0     -1721.456543         False          False    True
5   -1221.406494   -1517.084229  6650.329834 -1221.406494    1.000000 -1517.084229    0.024902  295.652832      200.024902     2.0     -1721.456543         False          False    True
6   -1221.406494   -1321.456299  6650.329834 -1221.406494  154.686035 -1321.456299    0.024902  100.024902      100.024902     3.0     -1721.456543         False          False    True
7    -921.431396   -1321.456299  6650.329834  -921.431396  400.000000 -1321.456299    0.024902  400.000000      300.000000     3.0     -1721.456543         False          False    True
8    -570.431396   -1121.456543  6650.329834  -570.431396  751.000000 -1121.456543  251.000000  300.025146      300.024902     2.0     -1721.456543         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=2, buffer=614451/2048.[0m
[08/15 12:52:01]  --------------------------------------------------------------------------------
[08/15 12:52:01]  Iteration: 37 (0 solution, 36 counterexamples)
[08/15 12:52:03]  Generator returned sat in 1.165177 secs.
[08/15 12:52:04]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:04]  Improved gap from 0.000625 to 100
[08/15 12:52:05]  Improved number of small numbers from 68 to 81 out of a max of 114
[08/15 12:52:05]  Verifer returned sat in 1.348337 secs.
[08/15 12:52:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -4295.246338   -4295.296387  6650.329834 -4295.246338     0.050049 -4295.296387      0.000    0.050049       -0.049844     8.0     -4295.296387            -1             -1     -1
1   -4095.246582   -4295.196494  6650.329834 -4095.246582   200.049805 -4295.196494      0.000  199.949912       99.949912     1.0     -4295.296387         False           True  False
2   -2708.346494   -4095.196494  6650.329834 -2708.346494  1586.850000 -4095.196494   1286.800  100.050000      100.050000     1.0     -4295.296387         False          False  False
3   -1221.596494   -4095.146494  6650.329834 -1221.596494  1586.800000 -4095.146494   2673.550  200.000000      100.050000     2.0     -3895.146494         False          False   True
4    -627.196494   -3995.196494  6650.329834  -627.196494   794.400000 -3995.196494   3167.950  200.050000      100.050000     3.0     -3895.146494         False          False   True
5    -429.046494   -3795.196494  6650.329834  -429.046494   398.200000 -3795.196494   3266.100  100.050000      100.050000     2.0     -3895.146494         False           True   True
6    -328.996494   -3795.146729  6650.329834  -328.996494   200.100000 -3795.146729   3266.150  200.000234      100.050000     3.0     -3895.146494         False          False   True
7    -328.996494   -3595.196494  6650.329834  -328.996494   101.050000 -3595.196494   3266.150    0.050000        0.050000     2.0     -3595.146494          True           True   True
8     623.528506   -3595.096436  6650.329834   623.528506   952.575000 -3595.096436   4018.675  199.949941      100.050000     1.0     -3595.146494         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=2001/20.[0m
[08/15 12:52:06]  --------------------------------------------------------------------------------
[08/15 12:52:06]  Iteration: 38 (0 solution, 37 counterexamples)
[08/15 12:52:07]  Generator returned sat in 0.288820 secs.
[08/15 12:52:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 3/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:07]  Improved gap from 0.0 to 100
[08/15 12:52:08]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 12:52:08]  Verifer returned sat in 0.620201 secs.
[08/15 12:52:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1362.435547   -1462.435303  6650.32959 -1362.435547    0.049805 -1462.435303    0.050049   99.949707       99.899658     2.0     -1462.435303            -1             -1     -1
1   -1362.385498   -1462.385254  6650.32959 -1362.385498   99.999756 -1462.385254    0.050049   99.949707       -0.050293     3.0     -1462.435303         False          False   True
2   -1362.285400   -1362.385254  6650.32959 -1362.285400  100.049805 -1362.385254    0.050049    0.049805      -99.950195     1.0     -1462.435303          True           True  False
3   -1136.335205   -1162.385498  6650.32959 -1136.335205  226.000000 -1162.385498   12.100098   13.950195       13.949951     1.0     -1462.435303         False          False  False
4   -1036.285400   -1106.485352  6650.32959 -1036.285400  114.000000 -1106.485352   12.149902   58.050049       13.949951     1.0     -1462.435303         False          False   True
5   -1036.285400   -1062.385254  6650.32959 -1036.285400   58.000000 -1062.385254   12.149902   13.949951      -86.050049     2.0     -1462.435303         False          False   True
6    -512.235352    -962.385254  6650.32959  -512.235352  538.000000  -962.385254  336.199951  113.949951       13.949951     1.0     -1462.435303         False          False   True
7    -356.185303    -784.385254  6650.32959  -356.185303  270.000000  -784.385254  392.250000   35.949951       13.949951     1.0     -1462.435303         False          False   True
8    -256.135254    -748.385254  6650.32959  -256.135254  136.000000  -748.385254  392.300049   99.949951       13.949951     1.0     -1462.435303         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=57139/4096.[0m
[08/15 12:52:08]  --------------------------------------------------------------------------------
[08/15 12:52:08]  Iteration: 39 (0 solution, 38 counterexamples)
[08/15 12:52:13]  Generator returned sat in 3.115319 secs.
[08/15 12:52:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:13]  Improved gap from 0.0 to 100
[08/15 12:52:13]  Improved number of small numbers from 80 to 114 out of a max of 114
[08/15 12:52:13]  Verifer returned sat in 0.635775 secs.
[08/15 12:52:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1411.285156   -1411.385010  6650.32959 -1411.285156    0.399902 -1411.385010   0.000000   0.099854       -0.100098     5.0     -1411.385010            -1             -1     -1
1   -1411.085205   -1411.185059  6650.32959 -1411.085205    0.299805 -1411.185059   0.000000   0.099854      -99.900146     1.0     -1411.085205         False           True  False
2   -1311.085205   -1311.185059  6650.32959 -1311.085205  100.099854 -1311.185059   0.000000   0.099854      -99.900146     1.0     -1411.085205         False          False  False
3   -1077.885010   -1111.185303  6650.32959 -1077.885010  233.300049 -1111.185303   0.100098  33.200195       33.199951     1.0     -1411.085205         False          False  False
4    -959.985352   -1056.318359  6650.32959  -959.985352  151.099854 -1056.318359  17.999756  78.333252       33.199951     1.0     -1411.085205         False          False   True
5    -859.885254    -956.318359  6650.32959  -859.885254  178.433350  -956.318359  18.099854  78.333252       33.199951     1.0     -1411.085205         False          False   True
6    -759.785156    -811.185303  6650.32959  -759.785156  178.433350  -811.185303  18.199951  33.200195       33.199951     1.0     -1411.085205         False          False   True
7    -641.985352    -711.185059  6650.32959  -641.985352  151.000000  -711.185059  35.999756  33.199951       33.199951     1.0     -1411.085205         False          False   True
8    -501.618652    -677.885010  6650.32959  -501.618652  173.566650  -677.885010  76.366455  99.899902       33.199951     1.0     -1411.085205         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=135987/4096.[0m
[08/15 12:52:14]  --------------------------------------------------------------------------------
[08/15 12:52:14]  Iteration: 40 (0 solution, 39 counterexamples)
[08/15 12:52:18]  Generator returned sat in 3.049616 secs.
[08/15 12:52:18]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:19]  Improved gap from 0.1 to 100
[08/15 12:52:19]  Improved number of small numbers from 112 to 112 out of a max of 114
[08/15 12:52:19]  Verifer returned sat in 0.639108 secs.
[08/15 12:52:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1811.135156   -2511.035156  6650.32959 -1811.135156  700.000000 -2511.035156        0.0  699.900000           699.9     3.0     -2511.035156            -1             -1   False
1   -1811.135156   -2511.035156  6650.32959 -1811.135156  699.900000 -2511.035156        0.0  699.900000           599.9     3.0     -1811.135156         False          False   False
2   -1811.135156   -2311.035156  6650.32959 -1811.135156  699.900000 -2311.035156        0.0  499.900000           499.9     4.0     -1811.135156         False          False   False
3   -1811.135156   -2256.879601  6650.32959 -1811.135156  138.703704 -2256.879601        0.0  445.744444           399.9     5.0     -1811.135156         False          False   False
4   -1811.135156   -2111.035156  6650.32959 -1811.135156  334.133333 -2111.035156        0.0  299.900000           299.9     6.0     -1811.135156         False          False   False
5   -1410.835156   -2011.135156  6650.32959 -1410.835156  700.200000 -2011.135156        0.1  600.200000           600.1     7.0     -1811.135156         False          False   False
6   -1410.835156   -2011.035156  6650.32959 -1410.835156    1.000000 -2011.035156        0.1  600.100000           500.1     8.0     -1811.135156         False          False    True
7   -1410.835156   -1811.035156  6650.32959 -1410.835156  123.422222 -1811.035156        0.1  400.100000           400.1     3.0     -1811.135156         False           True   False
8   -1410.835156   -1811.035156  6650.32959 -1410.835156  334.133333 -1811.035156        0.1  400.100000           300.1     3.0     -1811.135156         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=6001/10.[0m
[08/15 12:52:19]  --------------------------------------------------------------------------------
[08/15 12:52:19]  Iteration: 41 (0 solution, 40 counterexamples)
[08/15 12:52:22]  Generator returned sat in 1.418040 secs.
[08/15 12:52:22]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:23]  Improved gap from 19.9375 to 100
[08/15 12:52:23]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 12:52:23]  Verifer returned sat in 0.819631 secs.
[08/15 12:52:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t      queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -2305.960449   -3105.910156  6550.429688 -2305.960449   133.416504 -3105.910156    0.000000   799.949707      799.949707     5.0     -3105.910156            -1             -1   False
1   -2305.960449   -3005.910156  6550.429688 -2305.960449   133.366667 -3005.910156    0.000000   699.949707      699.949707     5.0     -2305.960449         False          False   False
2   -2305.960449   -3005.910156  6550.429688 -2305.960449   133.316650 -3005.910156    0.000000   699.949707      599.949707     5.0     -2305.960449         False          False   False
3   -2305.960449   -2905.910156  6550.429688 -2305.960449   133.266602 -2905.910156    0.000000   599.949707      499.949707     6.0     -2305.960449         False          False   False
4   -2305.960449   -2705.910156  6550.429688 -2305.960449   599.899902 -2705.910156    0.000000   399.949707      399.949707     7.0     -2305.960449         False          False   False
5   -1206.060303   -2705.910156  6550.429688 -1206.060303  1499.849854 -2705.910156  414.549805  1085.300049      985.300049     7.0     -2305.960449         False          False   False
6   -1206.060303   -2505.910156  6550.429688 -1206.060303     1.000000 -2505.910156  414.549805   885.300049      885.300049     8.0     -2305.960449         False          False    True
7   -1206.060303   -2444.910156  6550.429688 -1206.060303   201.500000 -2444.910156  414.549805   824.300049      785.300049     9.0     -2305.960449         False          False    True
8   -1206.060303   -2305.910400  6550.429688 -1206.060303   824.250000 -2305.910400  414.549805   685.300293      685.300049     4.0     -2305.960449         False           True   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=4035789/4096.[0m
[08/15 12:52:24]  --------------------------------------------------------------------------------
[08/15 12:52:24]  Iteration: 42 (0 solution, 41 counterexamples)
[08/15 12:52:31]  Generator returned sat in 6.035428 secs.
[08/15 12:52:31]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:31]  Improved gap from 0.0 to 100
[08/15 12:52:32]  Improved number of small numbers from 64 to 66 out of a max of 114
[08/15 12:52:32]  Verifer returned sat in 1.107671 secs.
[08/15 12:52:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1348.460449   -1456.660303  4901.179834 -1348.460449    0.199951 -1456.660303        0.0  108.199854      108.199854     1.0     -1456.660303            -1             -1   False
1   -1348.360303   -1456.660303  4901.179834 -1348.360303  108.300000 -1456.660303        0.1  108.200000        8.200000     1.0     -1456.660303         False          False   False
2   -1237.860303   -1348.360303  4901.179834 -1237.860303  218.700000 -1348.360303       10.6   99.900000        8.200000     1.0     -1456.660303         False          False    True
3   -1119.160303   -1156.660303  4901.179834 -1119.160303  218.600000 -1156.660303       29.3    8.200000        8.200000     1.0     -1148.460303         False          False    True
4   -1019.060303   -1069.510303  4901.179834 -1019.060303  108.300000 -1069.510303       29.4   21.050000        8.200000     1.0     -1148.460303         False          False    True
5    -986.960303   -1016.460303  4901.179834  -986.960303   53.150000 -1016.460303       29.4    0.100000      -59.700000     1.0     -1148.460303         False          False    True
6    -547.860303    -956.660303  4901.179834  -547.860303  439.200000  -956.660303      300.6  108.200000        8.200000     1.0     -1148.460303         False          False    True
7    -437.460303    -756.660303  4901.179834  -437.460303  218.600000  -756.660303      311.0    8.200000        8.200000     1.0     -1148.460303         False          False    True
8    -337.360303    -756.560303  4901.179834  -337.360303  108.300000  -756.560303      311.1  108.100000        8.200000     2.0     -1148.460303         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=41/5.[0m
[08/15 12:52:33]  --------------------------------------------------------------------------------
[08/15 12:52:33]  Iteration: 43 (0 solution, 42 counterexamples)
[08/15 12:52:35]  Generator returned sat in 0.689466 secs.
[08/15 12:52:35]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:35]  Improved gap from 0.0 to 0
[08/15 12:52:35]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/15 12:52:35]  Verifer returned sat in 0.447455 secs.
[08/15 12:52:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -866.870361    -866.970215  4311.489746  -866.870361    0.099854  -866.970215   0.050049    0.049805        0.049805     1.0      -866.970215            -1             -1     -1
1    -866.870361    -866.970215  4411.439697  -866.870361    0.049805  -866.970215   0.050049    0.049805       -0.000244     1.0      -866.920410         False          False   True
2    -566.920410    -766.920166  4411.439697  -566.920410  299.999756  -766.920166   0.050049  199.949707      199.949707     1.0      -866.920410         False          False   True
3    -465.820068    -666.920166  4411.439697  -465.820068  301.050049  -666.920166   0.050049  201.050049      201.050049     2.0      -866.920410         False          False   True
4    -465.820068    -566.920410  4411.439697  -465.820068    1.000000  -566.920410   0.050049  101.050293      101.050049     2.0      -465.870117          True           True  False
5    -465.820068    -466.970215  4411.439697  -465.820068    1.000000  -466.970215   0.050049    1.100098        1.050049     3.0      -465.870117         False           True  False
6    -465.820068    -466.920166  4510.389648  -465.820068    1.000000  -466.920166   0.050049    1.050049        0.000000     4.0      -465.870117         False           True  False
7    -465.820068    -465.870117  4610.339844  -465.820068    1.000000  -465.870117   0.050049    0.000000       -0.049805     5.0      -465.870117         False           True  False
8    -464.820068    -465.820068  4610.339844  -464.820068    1.000000  -465.820068   0.050049    0.949951      -99.049805     1.0      -465.870117         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=2011/10.[0m
[08/15 12:52:36]  --------------------------------------------------------------------------------
[08/15 12:52:36]  Iteration: 44 (0 solution, 43 counterexamples)
[08/15 12:52:43]  Generator returned sat in 5.809502 secs.
[08/15 12:52:43]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:44]  Improved number of small numbers from 36 to 113 out of a max of 113
[08/15 12:52:44]  Verifer returned sat in 0.524148 secs.
[08/15 12:52:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1066.857910   -1266.907959  4711.408447 -1066.857910    0.006348 -1266.907959   0.050049  200.000000      199.981201     2.0     -1266.907959            -1             -1     -1
1   -1066.851562   -1266.889160  4711.408447 -1066.851562  200.006348 -1266.889160   0.050049  199.987549       99.987549     2.0     -1266.907959         False          False   True
2   -1066.839111   -1066.895264  4711.408447 -1066.839111  200.000000 -1066.895264   0.050049    0.006104        0.000000     1.0     -1066.889160         False          False   True
3    -866.845215   -1066.883057  4711.408447  -866.845215  200.000000 -1066.883057   0.050049  199.987793       99.993896     1.0     -1066.889160         False          False   True
4    -765.820557    -866.895508  4711.408447  -765.820557  301.012451  -866.895508   0.050049  101.024902      101.018555     2.0     -1066.889160         False          False   True
5    -364.836182    -766.889160  4711.408447  -364.836182  502.009277  -766.889160   2.046875  400.006104      400.006104     2.0     -1066.889160         False          False   True
6    -364.836182    -766.888916  4711.408447  -364.836182    1.000000  -766.888916   2.046875  400.005859      300.006104     3.0     -1066.889160         False          False   True
7    -364.836182    -570.864258  4711.408447  -364.836182  151.997070  -570.864258   2.046875  203.981201      200.006104     3.0     -1066.889160         False          False   True
8    -267.804688    -466.889160  4711.408447  -267.804688  301.012695  -466.889160   2.046875  197.037598      197.037598     4.0     -1066.889160         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=1638425/4096.[0m
[08/15 12:52:44]  --------------------------------------------------------------------------------
[08/15 12:52:44]  Iteration: 45 (0 solution, 44 counterexamples)
[08/15 12:52:49]  Generator returned sat in 3.414548 secs.
[08/15 12:52:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:49]  Improved gap from 0.00125 to 0
[08/15 12:52:50]  Improved number of small numbers from 43 to 63 out of a max of 114
[08/15 12:52:50]  Verifer returned sat in 1.324497 secs.
[08/15 12:52:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1210.858887   -1210.910645  4611.410156 -1210.858887    0.002500 -1210.910645   0.050049   0.001709        0.001615     6.0     -1210.910645            -1             -1     -1
1   -1210.858887   -1210.909674  4711.408447 -1210.858887    0.001465 -1210.909674   0.050049   0.000739       -0.000094     4.0     -1210.908936         False           True  False
2   -1058.872126   -1162.893841  4711.408447 -1058.872126  151.987500 -1162.893841  52.035049  51.986667        0.001667     1.0     -1210.908936         False           True  False
3    -958.871292   -1061.893841  4711.408447  -958.871292  151.987500 -1061.893841  52.035882  50.986667        0.001667     1.0     -1210.908936         False          False   True
4    -858.870459   -1010.906341  4711.408447  -858.870459  150.987500 -1010.906341  52.036715  99.999167        0.001667     1.0     -1210.908936         False          False   True
5    -808.882126    -860.919674  4761.417725  -808.882126  149.987500  -860.919674  52.036715   0.000833       -0.000723     1.0     -1210.908936         False          False   True
6    -808.872959    -860.918008  4861.409281  -808.872959    0.010000  -860.918008  52.036715   0.008333        0.000000     1.0     -1210.908936         False          False   True
7    -808.871292    -860.909674  4961.407471  -808.871292    0.010000  -860.909674  52.036715   0.001667       -0.000143     2.0     -1210.908936         False          False   True
8    -808.862959    -860.906982  4961.407715  -808.862959    0.010000  -860.906982  52.036715   0.007308      -99.991566     1.0      -860.899674          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1/600.[0m
[08/15 12:52:51]  --------------------------------------------------------------------------------
[08/15 12:52:51]  Iteration: 46 (0 solution, 45 counterexamples)
[08/15 12:52:55]  Generator returned sat in 3.093045 secs.
[08/15 12:52:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:52:56]  Improved gap from 0.05 to 100
[08/15 12:52:56]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:52:56]  Verifer returned sat in 0.608537 secs.
[08/15 12:52:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1006.112305   -1206.062012  4506.561523 -1006.112305  200.099854 -1206.062012   0.000000  199.949707       99.949707     2.0     -1206.062012            -1             -1   False
1   -1006.012207   -1006.062012  4506.561523 -1006.012207  200.049805 -1006.062012   0.000000    0.049805        0.049805     1.0     -1006.012207         False          False   False
2    -806.012207   -1006.062012  4506.561523  -806.012207  200.049805 -1006.062012   5.099854  194.949951       94.949951     1.0     -1006.012207         False          False   False
3    -800.912109    -810.062012  4506.561523  -800.912109  200.050049  -810.062012   5.099854    4.050049        0.050049     1.0     -1006.012207         False          False    True
4    -605.962158    -709.162109  4506.561523  -605.962158  199.000000  -709.162109   5.149902   98.050049       94.949951     1.0     -1006.012207         False          False    True
5    -506.012207    -606.062012  4506.561523  -506.012207  198.000000  -606.062012   5.149902   94.899902       94.899902     1.0     -1006.012207         False          False    True
6    -399.912109    -511.062012  4506.561523  -399.912109  201.000000  -511.062012  11.199951   99.949951       94.949951     1.0     -1006.012207         False          False    True
7    -299.862061    -406.062256  4506.561523  -299.862061  200.000000  -406.062256  11.250000   94.950195       94.949951     1.0     -1006.012207         False          False    True
8    -195.812256    -406.062012  4506.561523  -195.812256  199.000000  -406.062012  15.299805  194.949951       94.949951     2.0     -1006.012207         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=388915/4096.[0m
[08/15 12:52:57]  --------------------------------------------------------------------------------
[08/15 12:52:57]  Iteration: 47 (0 solution, 46 counterexamples)
[08/15 12:53:03]  Generator returned sat in 4.672543 secs.
[08/15 12:53:03]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:03]  Improved gap from 0.1 to 100
[08/15 12:53:03]  Improved number of small numbers from 76 to 114 out of a max of 114
[08/15 12:53:03]  Verifer returned sat in 0.460893 secs.
[08/15 12:53:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1206.012207   -1305.987305  4506.561523 -1206.012207    0.024902 -1305.987305        0.0   99.975098       99.975098     3.0     -1305.987305            -1             -1    True
1   -1206.012207   -1305.987305  4506.561523 -1206.012207    0.024902 -1305.987305        0.0   99.975098       -0.024902     3.0     -1305.987305         False          False    True
2    -905.937256   -1205.987305  4506.561523  -905.937256  400.050049 -1205.987305        0.0  300.050049      200.050049     1.0     -1305.987305         False          False    True
3    -805.962402   -1105.987305  4506.561523  -805.962402  400.024902 -1105.987305        0.0  300.024902      200.024902     2.0      -805.962402         False          False    True
4    -705.962402    -906.037109  4506.561523  -705.962402  400.024902  -906.037109        0.0  200.074707      200.024902     3.0      -805.962402         False          False    True
5    -506.012207    -905.912354  4506.561523  -506.012207  400.024902  -905.912354        0.0  399.900146      299.975098     3.0      -805.962402         False          False    True
6    -505.887451    -705.987305  4506.561523  -505.887451  400.024902  -705.987305        0.0  200.099854      200.099854     3.0      -805.962402         False          False    True
7    -305.962402    -705.987305  4506.561523  -305.962402  400.024902  -705.987305        0.0  400.024902      300.024902     3.0      -805.962402         False          False    True
8    -305.962402    -505.987305  4506.561523  -305.962402  400.024902  -505.987305        0.0  200.024902      200.024902     3.0      -805.962402         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=0, buffer=307251/1024.[0m
[08/15 12:53:04]  --------------------------------------------------------------------------------
[08/15 12:53:04]  Iteration: 48 (0 solution, 47 counterexamples)
[08/15 12:53:13]  Generator returned sat in 7.936883 secs.
[08/15 12:53:14]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:14]  Improved gap from 0.1 to 100
[08/15 12:53:14]  Improved number of small numbers from 85 to 114 out of a max of 114
[08/15 12:53:14]  Verifer returned sat in 0.611582 secs.
[08/15 12:53:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1206.087158   -1405.987305  4306.381348 -1206.087158  299.999756 -1405.987305        0.0  199.900146       99.900146     3.0     -1405.987305            -1             -1   False
1   -1106.087158   -1205.987549  4306.381348 -1106.087158  299.900146 -1205.987549        0.0   99.900391       99.900146     1.0     -1106.087158         False          False   False
2   -1105.987549   -1205.987305  4306.381348 -1105.987549  100.000000 -1205.987305        0.0   99.999756       -0.000244     2.0     -1105.987549         False          False   False
3    -705.887207   -1105.987305  4306.381348  -705.887207  500.100098 -1105.987305        0.0  400.100098      300.100098     1.0     -1105.987549         False          False   False
4    -605.887207    -905.987549  4306.381348  -605.887207  500.100098  -905.987549        0.0  300.100342      300.100098     2.0     -1105.987549         False          False   False
5    -405.887451    -905.887451  4306.381348  -405.887451  500.100098  -905.887451        0.0  500.000000      400.099854     3.0     -1105.987549         False          False   False
6    -405.787354    -705.987305  4306.381348  -405.787354  500.100098  -705.987305        0.0  300.199951      300.199951     4.0     -1105.987549         False          False   False
7    -205.887207    -705.987305  4306.381348  -205.887207  500.100098  -705.987305        0.0  500.100098      400.100098     4.0     -1105.987549         False          False   False
8    -205.887207    -605.987305  4306.381348  -205.887207  500.100098  -605.987305        0.0  400.100098      300.100098     5.0     -1105.987549         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=819405/2048.[0m
[08/15 12:53:15]  --------------------------------------------------------------------------------
[08/15 12:53:15]  Iteration: 49 (0 solution, 48 counterexamples)
[08/15 12:53:17]  Generator returned sat in 1.018924 secs.
[08/15 12:53:17]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:18]  Improved gap from 0.0005357142857142857 to 48.4375
[08/15 12:53:19]  Improved number of small numbers from 76 to 78 out of a max of 114
[08/15 12:53:19]  Verifer returned sat in 1.998078 secs.
[08/15 12:53:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1305.587402   -1505.587158  4405.181348 -1305.587402  299.999756 -1505.587158        0.1  199.899756       99.899756     9.0     -1505.587158            -1             -1     -1
1   -1304.024658   -1305.587158  4405.181348 -1304.024658  201.462500 -1305.587158        0.1    1.462500        1.462500     1.0     -1304.124658         False           True   True
2   -1205.387158   -1205.587158  4405.181348 -1205.387158  100.100000 -1205.587158        0.1    0.100000        0.100000     1.0     -1205.487158         False          False   True
3   -1156.849658   -1205.387158  4456.543848 -1156.849658   48.637500 -1205.387158        0.1   48.437500        0.000000     1.0     -1156.949658         False          False   True
4   -1055.187158   -1057.049658  4456.543848 -1055.187158  150.100000 -1057.049658        0.2    1.662500        1.562500     1.0     -1156.949658         False          False   True
5   -1055.187158   -1056.949658  4508.106348 -1055.187158    1.000000 -1056.949658        0.2    1.562500      -46.875000     2.0     -1156.949658         False          False   True
6    -982.430908   -1008.512158  4559.668701  -982.430908   74.318750 -1008.512158        0.2   25.881250      -22.556396     1.0     -1156.949658         False          False   True
7    -909.874658    -955.587158  4606.743848  -909.874658   98.437500  -955.587158        0.2   45.512500       -2.925000     1.0     -1156.949658         False          False   True
8    -904.655908    -907.149658  4606.743896  -904.655908   50.731250  -907.149658        0.2    2.293750      -97.706201     1.0     -1156.949658         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=25/16.[0m
[08/15 12:53:20]  --------------------------------------------------------------------------------
[08/15 12:53:20]  Iteration: 50 (0 solution, 49 counterexamples)
[08/15 12:53:26]  Generator returned sat in 4.892476 secs.
[08/15 12:53:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:27]  Improved gap from 0.0 to 100
[08/15 12:53:27]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 12:53:27]  Verifer returned sat in 0.594139 secs.
[08/15 12:53:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1458.189697   -1957.839600  4405.181396 -1458.189697  499.650146 -1957.839600   0.050049  499.599854      399.699951     9.0     -1957.839600            -1             -1     -1
1   -1458.189697   -1757.939697  4405.181396 -1458.189697  499.599854 -1757.939697   0.050049  299.699951      299.699951     3.0     -1458.239746         False           True   True
2   -1458.139648   -1757.739502  4405.181396 -1458.139648  299.750000 -1757.739502   0.050049  299.549805      199.750000     4.0     -1458.189697         False          False   True
3   -1457.939453   -1557.939697  4405.181396 -1457.939453  299.750000 -1557.939697   0.050049   99.950195       99.950195     5.0     -1458.189697         False          False   True
4   -1156.989746   -1557.889893  4405.181396 -1156.989746  400.899902 -1557.889893   0.099854  400.800293      300.850098     6.0     -1458.189697         False          False   True
5   -1156.989746   -1457.939697  4405.181396 -1156.989746  201.449951 -1457.939697   0.099854  300.850098      200.850098     2.0     -1458.189697         False           True   True
6   -1156.989746   -1257.939697  4405.181396 -1156.989746  300.799805 -1257.939697   0.099854  100.850098      100.850098     3.0     -1458.189697         False          False   True
7    -956.839844   -1157.939697  4405.181396  -956.839844  301.000000 -1157.939697   0.099854  201.000000      201.000000     4.0     -1458.189697         False          False   True
8    -756.889648   -1157.889648  4405.181396  -756.889648  400.950195 -1157.889648   0.199951  400.800049      300.850098     5.0     -1458.189697         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=2, buffer=616141/2048.[0m
[08/15 12:53:28]  --------------------------------------------------------------------------------
[08/15 12:53:28]  Iteration: 51 (0 solution, 50 counterexamples)
[08/15 12:53:30]  Generator returned sat in 1.185021 secs.
[08/15 12:53:31]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:33]  Improved gap from 0.0004166666666666667 to 0
[08/15 12:53:34]  Improved number of small numbers from 65 to 104 out of a max of 114
[08/15 12:53:34]  Verifer returned sat in 3.207803 secs.
[08/15 12:53:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1457.951904   -1458.960693  4306.190186 -1457.951904  0.000244 -1458.960693        0.0  1.008789        1.007812     8.0     -1458.960693            -1             -1     -1
1   -1457.951904   -1458.959717  4405.181885 -1457.951904  1.008789 -1458.959717        0.0  1.007812       -0.000488     2.0     -1458.960693         False           True  False
2   -1457.950195   -1457.951416  4505.180664 -1457.950195  1.009521 -1457.951416        0.0  0.001221        0.000000     1.0     -1458.960693         False          False  False
3   -1457.950195   -1457.950195  4605.180664 -1457.950195  0.000488 -1457.950195        0.0  0.000000        0.000000     2.0     -1457.950195         False          False  False
4   -1457.939697   -1457.950195  4705.170166 -1457.939697  0.010498 -1457.950195        0.0  0.010498        0.000000     2.0     -1457.950195         False          False  False
5   -1457.939697   -1457.939697  4805.160645 -1457.939697  0.010000 -1457.939697        0.0  0.000000       -0.009521     2.0     -1457.950195         False          False  False
6   -1457.929697   -1457.930114  4905.160156 -1457.929697  0.010000 -1457.930114        0.0  0.000417       -0.000010     1.0     -1457.950195         False          False  False
7   -1457.920114   -1457.929281  5005.150391 -1457.920114  0.010000 -1457.929281        0.0  0.009167       -0.000192     1.0     -1457.950195         False          False  False
8   -1457.919281   -1457.919678  5005.150635 -1457.919281  0.010000 -1457.919678        0.0  0.000397      -99.999115     1.0     -1457.950195         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1/1024.[0m
[08/15 12:53:34]  --------------------------------------------------------------------------------
[08/15 12:53:34]  Iteration: 52 (0 solution, 51 counterexamples)
[08/15 12:53:39]  Generator returned sat in 3.176972 secs.
[08/15 12:53:39]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:40]  Improved gap from 0.00875 to 23.4375
[08/15 12:53:41]  Improved number of small numbers from 77 to 91 out of a max of 114
[08/15 12:53:41]  Verifer returned sat in 1.322456 secs.
[08/15 12:53:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1657.883545   -1757.950195  4755.217529 -1657.883545    0.066895 -1757.950195    0.066667  99.999984       99.999984     9.0     -1757.950195            -1             -1     -1
1   -1657.750195   -1657.950195  4755.217529 -1657.750195  100.133333 -1657.950195    0.066667   0.133333        0.133333     1.0     -1757.950195         False           True   True
2   -1657.750195   -1657.950195  4755.217529 -1657.750195    0.066895 -1657.950195    0.066667   0.133333      -99.866667     1.0     -1657.816862         False          False   True
3    -882.283529   -1457.950195  4755.217529  -882.283529  775.600000 -1457.950195  575.466667   0.200000        0.200000     1.0     -1657.816862         False          False   True
4    -495.683529   -1357.950195  4755.217529  -495.683529  386.800000 -1357.950195  862.066667   0.200000        0.200000     1.0     -1657.816862         False          False   True
5    -303.483529   -1326.721029  4755.217529  -303.483529  192.400000 -1326.721029  954.266667  68.970833        0.200000     1.0     -1657.816862         False          False   True
6    -277.254362   -1255.683529  4828.788330  -277.254362   95.200000 -1255.683529  954.266667  24.162500       -0.000033     1.0     -1657.816862         False          False   True
7    -253.816862   -1231.454362  4905.284180  -253.816862   47.600000 -1231.454362  954.266667  23.370833       -0.066683     1.0     -1657.816862         False          False   True
8    -253.387695   -1208.016846  4905.284180  -253.387695   23.800000 -1208.016846  954.266667   0.362484      -99.637516     1.0     -1657.816862         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=2, buffer=1/5.[0m
[08/15 12:53:41]  --------------------------------------------------------------------------------
[08/15 12:53:41]  Iteration: 53 (0 solution, 52 counterexamples)
[08/15 12:53:44]  Generator returned sat in 0.732913 secs.
[08/15 12:53:44]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:44]  Improved gap from 22.2334233601888 to 23.4375
[08/15 12:53:45]  Improved number of small numbers from 67 to 114 out of a max of 114
[08/15 12:53:45]  Verifer returned sat in 0.944089 secs.
[08/15 12:53:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1689.991699   -1693.166748  4755.217529 -1689.991699    0.050000 -1693.166748    0.000000    3.175049       -0.049805     6.0     -1693.166748            -1             -1     -1
1   -1586.966797   -1689.941650  4755.217529 -1586.966797  106.199951 -1689.941650    0.000000  102.974854        2.975098     1.0     -1693.166748         False           True  False
2   -1586.966797   -1589.941895  4831.779785 -1586.966797  102.925049 -1589.941895    0.000000    2.975098      -20.462646     2.0     -1586.966797         False          False  False
3    -809.941895   -1566.504150  4831.779785  -809.941895  780.000000 -1566.504150  653.537354  103.024902        3.024902     1.0     -1586.966797         False           True  False
4    -523.966797   -1366.504150  4831.779785  -523.966797  389.000000 -1366.504150  839.512451    3.024902        3.024902     1.0     -1586.966797         False          False   True
5    -333.491699   -1359.129395  4831.779785  -333.491699  193.500000 -1359.129395  929.987549   95.650146        3.024902     1.0     -1586.966797         False          False   True
6    -333.391846   -1263.429443  4905.267578  -333.391846   95.750000 -1263.429443  929.987549    0.050049      -23.387451     1.0     -1586.966797         False          False   True
7    -286.566895   -1239.991943  4981.830078  -286.566895   46.875000 -1239.991943  929.987549   23.437500        0.000000     1.0     -1586.966797         False          False   True
8    -286.566895   -1216.554443  4981.830078  -286.566895   22.437500 -1216.554443  929.987549    0.000000     -100.000000     2.0     -1586.966797         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=6195/2048.[0m
[08/15 12:53:45]  --------------------------------------------------------------------------------
[08/15 12:53:45]  Iteration: 54 (0 solution, 53 counterexamples)
[08/15 12:53:48]  Generator returned sat in 1.471620 secs.
[08/15 12:53:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:53:49]  Improved gap from 0.0025 to 48.4375
[08/15 12:53:49]  Improved number of small numbers from 84 to 114 out of a max of 114
[08/15 12:53:49]  Verifer returned sat in 0.548630 secs.
[08/15 12:53:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1643.341553   -1843.441650  4808.717285 -1643.341553    0.100098 -1843.441650   0.000000  200.100098      100.100098     5.0     -1843.441650            -1             -1     -1
1   -1643.341553   -1743.441650  4808.717285 -1643.341553  200.000000 -1743.441650   0.000000  100.100098        0.100098     2.0     -1843.441650         False           True  False
2   -1531.591797   -1643.341553  4808.717285 -1531.591797  211.849854 -1643.341553  11.649902  100.099854        0.199951     3.0     -1843.441650          True           True  False
3   -1419.941650   -1443.441650  4808.717285 -1419.941650  211.750000 -1443.441650  23.300049    0.199951        0.199951     1.0     -1443.241699          True           True   True
4   -1315.266602   -1343.441895  4808.717285 -1315.266602  104.875000 -1343.441895  27.975098    0.200195        0.199951     1.0     -1443.241699         False          False   True
5   -1264.029297   -1338.854248  4855.692383 -1264.029297   51.437500 -1338.854248  27.975098   46.849854       -1.587646     1.0     -1443.241699         False          False   True
6   -1260.441650   -1290.416748  4907.254883 -1260.441650   50.437500 -1290.416748  27.975098    2.000000      -46.437500     1.0     -1443.241699         False          False   True
7   -1213.004150   -1241.979248  4958.817383 -1213.004150   49.437500 -1241.979248  27.975098    1.000000      -47.437500     1.0     -1443.241699         False          False   True
8   -1165.566650   -1193.541748  4958.817383 -1165.566650   48.437500 -1193.541748  27.975098    0.000000     -100.000000     1.0     -1443.241699         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=819/4096.[0m
[08/15 12:53:50]  --------------------------------------------------------------------------------
[08/15 12:53:50]  Iteration: 55 (0 solution, 54 counterexamples)
[08/15 12:54:00]  Generator returned sat in 8.735613 secs.
[08/15 12:54:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:00]  Improved gap from 0.95 to 100
[08/15 12:54:01]  Improved number of small numbers from 69 to 81 out of a max of 114
[08/15 12:54:01]  Verifer returned sat in 1.311270 secs.
[08/15 12:54:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1840.158203   -1840.208219  4805.483854 -1840.158203    0.0500 -1840.208219       0.05    0.000016      -99.999984     3.0     -1840.208219            -1             -1     -1
1   -1540.208219   -1640.208219  4805.483854 -1540.208219  299.9500 -1640.208219       0.05   99.950000       99.950000     1.0     -1840.208219         False          False   True
2   -1340.258219   -1540.208252  4805.483854 -1340.258219  299.9000 -1540.208252       0.05  199.900033      199.900000     1.0     -1340.308219         False          False   True
3   -1340.258219   -1440.258301  4805.483854 -1340.258219   26.0125 -1440.258301       0.05   99.950081       99.900000     2.0     -1340.308219         False          False   True
4   -1340.258219   -1440.208219  4805.483854 -1340.258219   51.0250 -1440.208219       0.05   99.900000       -0.100000     3.0     -1340.308219         False          False   True
5   -1339.108219   -1340.208219  4805.483854 -1339.108219  101.0500 -1340.208219       0.05    1.050000      -98.950000     1.0     -1340.308219         False          False   True
6   -1139.058219   -1140.208252  4805.483854 -1139.058219  201.1000 -1140.208252       0.05    1.100033        1.100000     1.0     -1340.308219         False          False   True
7    -738.958252   -1139.058219  4805.483854  -738.958252  401.2000 -1139.058219       0.05  400.049967      301.199967     1.0     -1340.308219         False          False   True
8    -337.608219   -1040.208008  4805.483854  -337.608219  801.4000 -1040.208008       0.05  702.549788      602.550000     2.0     -1340.308219         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=2468249/4096.[0m
[08/15 12:54:02]  --------------------------------------------------------------------------------
[08/15 12:54:02]  Iteration: 56 (0 solution, 55 counterexamples)
[08/15 12:54:05]  Generator returned sat in 1.675466 secs.
[08/15 12:54:05]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:06]  Improved gap from 0.0 to 48.4375
[08/15 12:54:07]  Improved number of small numbers from 68 to 70 out of a max of 114
[08/15 12:54:07]  Verifer returned sat in 1.751935 secs.
[08/15 12:54:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1543.383301   -1694.945719  4805.483854 -1543.383301  200.099854 -1694.945719        0.1  151.462419       51.462419     9.0     -1694.945719            -1             -1     -1
1   -1494.845719   -1543.383219  4805.483854 -1494.845719  200.000000 -1543.383219        0.1   48.437500        0.000000     1.0     -1494.945719         False           True   True
2   -1364.314469   -1394.945719  4805.483854 -1364.314469  178.968750 -1394.945719        0.1   30.531250       30.531250     1.0     -1364.414469         False          False   True
3   -1340.258219   -1340.458219  4805.483854 -1340.258219   54.587500 -1340.458219        0.1    0.100000      -45.412500     1.0     -1340.358219         False          False   True
4   -1164.114469   -1194.945719  4805.483854 -1164.114469  176.243750 -1194.945719        0.2   30.631250       30.631250     1.0     -1340.358219         False          False   True
5   -1164.114469   -1194.845719  4856.946289 -1164.114469    1.000000 -1194.845719        0.2   30.531250      -17.906315     2.0     -1340.358219         False          False   True
6   -1095.595719   -1144.133219  4906.233854 -1095.595719   99.050000 -1144.133219        0.2   48.337500       -0.100000     1.0     -1340.358219         False          False   True
7   -1046.770719   -1095.695719  4957.508854 -1046.770719   97.162500 -1095.695719        0.2   48.725000        0.000000     1.0     -1340.358219         False          False   True
8   -1046.770719   -1046.970719  5009.071289 -1046.770719   48.625000 -1046.970719        0.2    0.000000      -48.437565     2.0     -1340.358219         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=4901/160.[0m
[08/15 12:54:08]  --------------------------------------------------------------------------------
[08/15 12:54:08]  Iteration: 57 (0 solution, 56 counterexamples)
[08/15 12:54:15]  Generator returned sat in 5.291101 secs.
[08/15 12:54:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:15]  Improved gap from 99.0375 to 100
[08/15 12:54:15]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 12:54:15]  Verifer returned sat in 0.573352 secs.
[08/15 12:54:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1394.858154   -1494.970703  4805.483887 -1394.858154    0.062256 -1494.970703     0.100098  100.012451      100.012451     6.0     -1494.970703            -1             -1     -1
1   -1394.858154   -1394.970947  4805.483887 -1394.858154    0.050000 -1394.970947     0.100098    0.012695        0.012451     2.0     -1394.958252         False           True  False
2   -1394.833252   -1394.945801  4805.483887 -1394.833252    0.037598 -1394.945801     0.100098    0.012451      -99.962646     1.0     -1394.933350         False          False  False
3   -1192.808350   -1194.970703  4805.483887 -1192.808350  202.037354 -1194.970703     2.137451    0.024902        0.024902     1.0     -1394.933350         False          False  False
4    -991.795898   -1194.970703  4805.483887  -991.795898  201.037354 -1194.970703   103.149902  100.024902        0.024902     1.0     -1394.933350         False          False   True
5    -891.783447   -1094.933105  4805.483887  -891.783447  200.037354 -1094.933105   103.162354   99.987305        0.024902     1.0     -1394.933350         False          False   True
6    -792.733398    -994.933105  4805.483887  -792.733398  199.037354  -994.933105   103.162354   99.037354       -0.925049     1.0     -1394.933350         False          False   True
7     -92.620850    -894.970703  4805.483887   -92.620850  799.149902  -894.970703   702.324951  100.024902        0.024902     1.0     -1394.933350         False          False   True
8     605.504150    -794.933105  4805.483887   605.504150  798.149902  -794.933105  1300.449951   99.987305        0.024902     1.0     -1394.933350         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=51/2048.[0m
[08/15 12:54:16]  --------------------------------------------------------------------------------
[08/15 12:54:16]  Iteration: 58 (0 solution, 57 counterexamples)
[08/15 12:54:23]  Generator returned sat in 4.685994 secs.
[08/15 12:54:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:23]  Improved number of small numbers from 48 to 113 out of a max of 113
[08/15 12:54:23]  Verifer returned sat in 0.314446 secs.
[08/15 12:54:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1394.821045   -1494.970703  4805.483643 -1394.821045  100.003174 -1494.970703    0.146484  100.003174      100.003174     1.0     -1494.970703            -1             -1   False
1   -1394.821045   -1494.958008  4805.483643 -1394.821045  100.000000 -1494.958008    0.146484   99.990479        0.003174     2.0     -1394.967529         False          False   False
2   -1394.814697   -1394.964355  4805.483643 -1394.814697   99.996826 -1394.964355    0.146484    0.003174      -99.990479     1.0     -1394.961182         False           True   False
3   -1192.808594   -1194.970703  4805.483643 -1192.808594  202.009277 -1194.970703    2.156006    0.006104        0.006104     1.0     -1394.961182         False          False   False
4    -991.805420   -1194.970703  4805.483643  -991.805420  201.009277 -1194.970703  103.159180  100.006104        0.006104     1.0     -1394.961182         False          False    True
5    -891.802246   -1094.933105  4805.483643  -891.802246  200.009277 -1094.933105  103.162354   99.968506        0.006104     1.0     -1394.961182         False          False    True
6    -792.761475    -991.961426  4805.483887  -792.761475  199.009277  -991.961426  103.162354   96.037598       -0.952881     1.0     -1394.961182         False          False    True
7    -686.789795    -894.970947  4805.483887  -686.789795  202.009277  -894.970947  108.175049  100.006104        0.006104     1.0     -1394.961182         False          False    True
8    -585.786621    -794.933350  4805.483887  -585.786621  201.009277  -794.933350  109.178223   99.968506        0.006104     1.0     -1394.961182         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=25/4096.[0m
[08/15 12:54:24]  --------------------------------------------------------------------------------
[08/15 12:54:24]  Iteration: 59 (0 solution, 58 counterexamples)
[08/15 12:54:28]  Generator returned sat in 2.696383 secs.
[08/15 12:54:28]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:29]  Improved gap from 0.05 to 100
[08/15 12:54:30]  Improved number of small numbers from 75 to 81 out of a max of 114
[08/15 12:54:30]  Verifer returned sat in 1.762409 secs.
[08/15 12:54:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -2109.752441   -2209.752246  4805.483643 -2109.752441     0.100098 -2209.752246     0.1000   99.899805       99.899805     1.0     -2209.752246            -1             -1     -1
1   -2109.552246   -2109.752246  4805.483643 -2109.552246   100.100000 -2109.752246     0.1000    0.100000        0.100000     1.0     -2209.752246         False          False   True
2   -2010.202246   -2010.402246  4805.483643 -2010.202246    99.450000 -2010.402246     0.1000    0.100000       -0.550000     1.0     -2010.302246         False          False   True
3   -1910.852246   -2009.752246  4805.483643 -1910.852246    99.450000 -2009.752246     0.1000   98.800000       -1.200000     1.0     -2010.302246         False          False   True
4   -1709.752246   -1821.752246  4805.483643 -1709.752246   299.900000 -1821.752246     0.1000  111.900000       99.900000     1.0     -2010.302246         False          False   True
5   -1076.852246   -1709.752246  4805.483643 -1076.852246   744.800000 -1709.752246     0.1000  632.800000      632.800000     1.0     -2010.302246         False          False   True
6     -68.727246   -1609.752246  4805.483643   -68.727246  1640.925000 -1609.752246   908.1250  632.900000      632.900000     2.0     -2010.302246         False          False   True
7     119.835254   -1509.752441  4805.483643   119.835254   821.462500 -1509.752441   996.6875  632.900195      632.900000     3.0      -876.852246          True           True   True
8     119.835254   -1409.752441  4805.483643   119.835254   411.731250 -1409.752441   996.6875  532.900195      532.900000     4.0      -876.852246         False           True   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=6329/10.[0m
[08/15 12:54:31]  --------------------------------------------------------------------------------
[08/15 12:54:31]  Iteration: 60 (0 solution, 59 counterexamples)
[08/15 12:54:39]  Generator returned sat in 6.377261 secs.
[08/15 12:54:39]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:40]  Improved gap from 0.0 to 48.4375
[08/15 12:54:40]  Improved number of small numbers from 64 to 114 out of a max of 114
[08/15 12:54:40]  Verifer returned sat in 1.490487 secs.
[08/15 12:54:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1946.453369   -2145.931152  4805.483398 -1946.453369  199.517822 -2145.931152    0.000000  199.477783      100.040283     4.0     -2145.931152            -1             -1   False
1   -1946.453369   -2046.493652  4805.483398 -1946.453369  199.477539 -2046.493652    0.000000  100.040283        0.040283     2.0     -1946.453369         False          False   False
2   -1847.056396   -1847.096436  4805.483398 -1847.056396  199.437256 -1847.096436    0.000000    0.040039       -0.562744     1.0     -1847.056396         False          False   False
3   -1628.917725   -1754.462646  4805.483398 -1628.917725  218.178711 -1754.462646  117.495605    8.049316        0.080322     1.0     -1847.056396         False          False   False
4   -1528.877686   -1646.493896  4805.483398 -1528.877686  108.089355 -1646.493896  117.535645    0.080566        0.080322     1.0     -1847.056396         False          False    True
5   -1475.913574   -1646.373291  4852.398926 -1475.913574   53.044678 -1646.373291  117.535645   52.924072       -0.040039     1.0     -1847.056396         False          False    True
6   -1427.476074   -1593.408936  4903.961182 -1427.476074  101.361572 -1593.408936  117.535645   48.397217       -0.040283     1.0     -1847.056396         False          False    True
7   -1394.346436   -1544.971436  4955.523682 -1394.346436   81.526855 -1544.971436  117.535645   33.089355      -15.348145     1.0     -1847.056396         False          False    True
8   -1375.674561   -1496.533936  4955.523682 -1375.674561   51.761230 -1496.533936  117.535645    3.323730      -96.676270     1.0     -1847.056396         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=329/4096.[0m
[08/15 12:54:41]  --------------------------------------------------------------------------------
[08/15 12:54:41]  Iteration: 61 (0 solution, 60 counterexamples)
[08/15 12:54:45]  Generator returned sat in 2.200144 secs.
[08/15 12:54:45]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:54:51]  Improved gap from 0.0 to 48.4375
[08/15 12:54:52]  Improved number of small numbers from 63 to 114 out of a max of 114
[08/15 12:54:52]  Verifer returned sat in 6.684619 secs.
[08/15 12:54:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -990.866943   -1139.434082  5254.376953  -990.866943  199.517822 -1139.434082    0.000000  148.567139       48.567383     6.0     -1139.434082            -1             -1   False
1    -990.866943   -1039.304443  5305.809326  -990.866943  148.524038 -1039.304443    0.000000   48.437500       -0.000244     4.0      -990.866943         False          False   False
2    -890.823486    -890.866943  5305.809326  -890.823486  148.480957  -890.866943    0.000000    0.043457        0.043213     1.0      -890.823486         False          False   False
3    -690.607178    -790.866943  5305.809326  -690.607178  200.259766  -790.866943  100.173096    0.086670        0.086426     1.0      -890.823486         False          False   False
4    -590.563965    -690.866699  5305.809326  -590.563965  100.129883  -690.866699  100.216309    0.086426        0.086426     1.0      -890.823486         False          False    True
5    -540.585449    -690.549561  5355.701416  -540.585449   50.064941  -690.549561  100.216309   49.747803       -0.042969     1.0      -890.823486         False          False    True
6    -489.174561    -640.758545  5404.333496  -489.174561  101.158691  -640.758545  100.216309   51.367676        0.000000     1.0      -890.823486         False          False    True
7    -464.488037    -589.347656  5455.852783  -464.488037   76.054199  -589.347656  100.216309   24.643311      -23.794189     1.0      -890.823486         False          False    True
8    -437.371826    -540.909912  5455.852783  -437.371826   51.759521  -540.909912  100.216309    3.321777      -96.677979     1.0      -890.823486         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=177/2048.[0m
[08/15 12:54:52]  --------------------------------------------------------------------------------
[08/15 12:54:52]  Iteration: 62 (0 solution, 61 counterexamples)
[08/15 12:55:01]  Generator returned sat in 6.152078 secs.
[08/15 12:55:01]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:04]  Improved gap from 0.025 to 0
[08/15 12:55:05]  Improved number of small numbers from 68 to 78 out of a max of 114
[08/15 12:55:05]  Verifer returned sat in 3.793172 secs.
[08/15 12:55:05]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -690.867949    -691.877949  5206.819092  -690.867949  0.002686  -691.877949   0.000417  1.009583        1.009349     9.0      -691.877949            -1             -1     -1
1    -690.867949    -690.868783  5305.809326  -690.867949  0.002197  -690.868783   0.000417  0.000417       -0.000417     2.0      -690.868366         False           True   True
2    -690.866699    -690.867920  5405.808493  -690.866699  0.001667  -690.867920   0.000417  0.000804        0.000000     1.0      -690.867116         False          False   True
3    -690.866699    -690.867116  5505.808105  -690.866699  0.000488  -690.867116   0.000417  0.000000       -0.000387     2.0      -690.867116         False          False   True
4    -690.855866    -690.866699  5605.797660  -690.855866  0.010833  -690.866699   0.000417  0.010417        0.000000     1.0      -690.867116         False          False   True
5    -690.855866    -690.856283  5705.796875  -690.855866  0.010000  -690.856283   0.000417  0.000000       -0.000785     2.0      -690.867116         False          False   True
6    -690.845866    -690.855449  5805.787354  -690.845866  0.010000  -690.855449   0.000417  0.009167       -0.000306     1.0      -690.867116         False          False   True
7    -690.845033    -690.845866  5905.777344  -690.845033  0.010000  -690.845866   0.000417  0.000417       -0.009482     1.0      -690.867116         False          False   True
8    -690.835449    -690.835938  5905.777344  -690.835449  0.010000  -690.835938   0.000417  0.000072      -99.999899     1.0      -690.867116         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=3/4096.[0m
[08/15 12:55:05]  --------------------------------------------------------------------------------
[08/15 12:55:05]  Iteration: 63 (0 solution, 62 counterexamples)
[08/15 12:55:13]  Generator returned sat in 6.135689 secs.
[08/15 12:55:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:14]  Improved gap from 0.0 to 100
[08/15 12:55:14]  Improved number of small numbers from 49 to 114 out of a max of 114
[08/15 12:55:14]  Verifer returned sat in 0.849473 secs.
[08/15 12:55:14]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1558.533936   -1724.234619  6139.175537 -1558.533936    0.100098 -1724.234619    0.000000  165.700684       65.700684     9.0     -1724.234619            -1             -1     -1
1   -1558.533936   -1558.634277  6139.175537 -1558.533936  134.499756 -1558.634277    0.000000    0.100342      -34.299316     2.0     -1724.234619         False           True  False
2   -1424.234375   -1524.234375  6139.175537 -1424.234375  134.399902 -1524.234375    0.000000  100.000000        0.000244     1.0     -1424.234375         False          False  False
3   -1389.934326   -1390.034424  6139.175537 -1389.934326  134.300049 -1390.034424    0.000000    0.100098      -65.699707     1.0     -1389.934326         False          False  False
4   -1223.934326   -1324.234375  6139.175537 -1223.934326  166.100098 -1324.234375    0.100098  100.199951        0.200195     1.0     -1389.934326         False          False  False
5   -1159.034180   -1159.234375  6139.175537 -1159.034180  165.100098 -1159.234375    0.100098    0.100098      -34.899658     1.0     -1389.934326         False          False   True
6    -977.634277   -1104.434326  6139.175537  -977.634277  181.500000 -1104.434326   46.400146   80.399902        0.200195     1.0     -1389.934326         False          False   True
7    -877.534180    -924.234619  6139.175537  -877.534180  180.500000  -924.234619   46.500244    0.200195        0.200195     1.0     -1389.934326         False          False   True
8    -698.234375    -923.934326  6139.175537  -698.234375  179.500000  -923.934326  125.800049   99.899902        0.200195     1.0     -1389.934326         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=205/1024.[0m
[08/15 12:55:15]  --------------------------------------------------------------------------------
[08/15 12:55:15]  Iteration: 64 (0 solution, 63 counterexamples)
[08/15 12:55:21]  Generator returned sat in 3.887295 secs.
[08/15 12:55:21]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:21]  Improved number of small numbers from 86 to 113 out of a max of 113
[08/15 12:55:21]  Verifer returned sat in 0.384027 secs.
[08/15 12:55:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1558.434814   -1724.234863  6139.175537 -1558.434814    0.100098 -1724.234863    0.000000  165.800049       65.800049     8.0     -1724.234863            -1             -1    True
1   -1558.434814   -1558.535156  6139.175537 -1558.434814  134.500488 -1558.535156    0.000000    0.100342      -34.199951     2.0     -1724.234863         False          False    True
2   -1424.134766   -1424.234863  6139.175537 -1424.134766  134.400391 -1424.234863    0.000000    0.100098        0.100098     1.0     -1424.134766         False          False    True
3   -1324.234863   -1424.034668  6139.175537 -1324.234863  100.000000 -1424.034668    0.000000   99.799805        0.000000     1.0     -1324.234863         False          False    True
4   -1223.934570   -1324.134766  6139.175537 -1223.934570  200.100098 -1324.134766    0.100098  100.100098        0.200195     1.0     -1324.234863         False          False    True
5   -1124.934570   -1219.134766  6139.175537 -1124.934570  199.100098 -1219.134766    0.100098   94.100098       -0.799805     1.0     -1324.234863         False          False    True
6   -1016.934570   -1124.234863  6139.175537 -1016.934570  202.100098 -1124.234863    7.100098  100.200195        0.200195     1.0     -1324.234863         False          False    True
7    -916.034668    -924.234863  6139.175537  -916.034668  201.100098  -924.234863    8.000000    0.200195        0.200195     1.0     -1324.234863         False          False    True
8    -716.134766    -923.934570  6139.175537  -716.134766  200.100098  -923.934570  107.899902   99.899902        0.200195     1.0     -1324.234863         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=205/1024.[0m
[08/15 12:55:22]  --------------------------------------------------------------------------------
[08/15 12:55:22]  Iteration: 65 (0 solution, 64 counterexamples)
[08/15 12:55:32]  Generator returned sat in 8.000204 secs.
[08/15 12:55:32]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:32]  Improved gap from 0.0 to 100
[08/15 12:55:32]  Improved number of small numbers from 89 to 114 out of a max of 114
[08/15 12:55:32]  Verifer returned sat in 0.413737 secs.
[08/15 12:55:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1718.034668   -2218.059570  6633.000244 -1718.034668  500.049805 -2218.059570    0.000000  500.024902      400.025146     6.0     -2218.059570            -1             -1   False
1   -1718.009521   -2018.059814  6633.000244 -1718.009521  500.050049 -2018.059814    0.025146  300.025146      300.025146     6.0     -2218.059570         False          False   False
2   -1617.984619   -2018.034668  6633.000244 -1617.984619  400.050049 -2018.034668    0.050049  400.000000      300.025146     7.0     -1618.034668         False          False    True
3   -1617.934570   -1818.084717  6633.000244 -1617.934570  400.050049 -1818.084717    0.050049  200.100098      200.075195     7.0     -1618.034668         False           True    True
4   -1016.934570   -1818.059814  6633.000244 -1016.934570  801.100098 -1818.059814  401.100098  400.025146      300.025146     6.0     -1618.034668         False           True   False
5   -1016.934570   -1718.034668  6633.000244 -1016.934570  100.000000 -1718.034668  401.100098  300.000000      200.025146     7.0     -1618.034668         False          False    True
6   -1016.934570   -1617.959717  6633.000244 -1016.934570  201.000000 -1617.959717  401.100098  199.925049      100.025146     3.0     -1618.034668         False           True   False
7    -813.859619   -1518.059570  6633.000244  -813.859619  403.000000 -1518.059570  401.100098  303.099854      203.100098     4.0     -1618.034668         False          False   False
8    -309.959473   -1318.059814  6633.000244  -309.959473  807.000000 -1318.059814  708.075195  300.025146      300.025146     2.0     -1618.034668         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=2, buffer=1228903/4096.[0m
[08/15 12:55:33]  --------------------------------------------------------------------------------
[08/15 12:55:33]  Iteration: 66 (0 solution, 65 counterexamples)
[08/15 12:55:36]  Generator returned sat in 1.435287 secs.
[08/15 12:55:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:37]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/15 12:55:37]  Verifer returned sat in 0.160566 secs.
[08/15 12:55:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1718.034668   -2218.059570  6633.000244 -1718.034668  500.049805 -2218.059570    0.000000  500.024902      400.025146     6.0     -2218.059570            -1             -1   False
1   -1718.009521   -2018.059814  6633.000244 -1718.009521  500.050049 -2018.059814    0.025146  300.025146      300.025146     6.0     -2218.059570         False          False   False
2   -1617.984619   -2018.034668  6633.000244 -1617.984619  400.050049 -2018.034668    0.050049  400.000000      300.025146     7.0     -1618.034668         False          False    True
3   -1617.934570   -1818.084717  6633.000244 -1617.934570  400.050049 -1818.084717    0.050049  200.100098      200.075195     8.0     -1618.034668         False          False    True
4   -1016.934570   -1818.059814  6633.000244 -1016.934570  801.100098 -1818.059814  401.100098  400.025146      300.025146     7.0     -1618.034668         False           True   False
5   -1016.934570   -1718.034668  6633.000244 -1016.934570  100.000000 -1718.034668  401.100098  300.000000      200.025146     8.0     -1618.034668         False          False    True
6   -1016.934570   -1617.959717  6633.000244 -1016.934570  201.000000 -1617.959717  401.100098  199.925049      100.025146     3.0     -1618.034668         False           True   False
7    -813.859619   -1518.059570  6633.000244  -813.859619  403.000000 -1518.059570  401.100098  303.099854      203.100098     4.0     -1618.034668         False          False   False
8    -309.959473   -1318.059814  6633.000244  -309.959473  807.000000 -1318.059814  708.075195  300.025146      300.025146     2.0     -1618.034668         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=2, buffer=1228903/4096.[0m
[08/15 12:55:37]  --------------------------------------------------------------------------------
[08/15 12:55:37]  Iteration: 67 (0 solution, 66 counterexamples)
[08/15 12:55:41]  Generator returned sat in 1.359208 secs.
[08/15 12:55:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:42]  Improved number of small numbers from 61 to 77 out of a max of 113
[08/15 12:55:42]  Verifer returned sat in 0.957511 secs.
[08/15 12:55:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1618.664551   -1818.089844  6633.000244 -1618.664551    0.100098 -1818.089844        0.0  199.425293      199.425215     2.0     -1818.089844            -1             -1   False
1   -1618.664551   -1718.089766  6633.000244 -1618.664551  199.425000 -1718.089766        0.0   99.425215       99.425215     2.0     -1818.089844         False          False   False
2   -1518.664766   -1718.089600  6633.000244 -1518.664766  199.425000 -1718.089600        0.0  199.424834       99.425000     3.0     -1818.089844         False          False   False
3   -1518.664766   -1618.089600  6633.575244 -1518.664766   49.162500 -1618.089600        0.0   99.424834        0.000000     2.0     -1518.664766         False          False   False
4   -1518.664766   -1518.664766  6633.575439 -1518.664766   99.325000 -1518.664766        0.0    0.000000      -99.999805     3.0     -1518.664766         False          False   False
5   -1319.014766   -1319.114766  6633.825244 -1319.014766  199.650000 -1319.114766        0.0    0.100000       -0.100000     1.0     -1518.664766         False          False   False
6    -918.814766   -1318.914766  6633.825244  -918.814766  400.300000 -1318.914766        0.0  400.100000      300.100000     1.0     -1518.664766         False          False   False
7    -517.314766   -1218.914766  6633.825244  -517.314766  801.600000 -1218.914766      301.5  400.100000      300.100000     2.0     -1518.664766         False          False   False
8    -517.314766   -1118.914551  6633.825244  -517.314766  149.875000 -1118.914551      301.5  300.099785      200.100000     3.0     -1518.664766         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=3001/10.[0m
[08/15 12:55:42]  --------------------------------------------------------------------------------
[08/15 12:55:42]  Iteration: 68 (0 solution, 67 counterexamples)
[08/15 12:55:52]  Generator returned sat in 7.793082 secs.
[08/15 12:55:52]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:55:53]  Improved gap from 0.0008333333333333334 to 100
[08/15 12:55:53]  Improved number of small numbers from 76 to 98 out of a max of 114
[08/15 12:55:53]  Verifer returned sat in 0.967391 secs.
[08/15 12:55:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t    losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1718.089600   -1818.089600    6633.0 -1718.089600  100.076904 -1818.089600     0.000000  100.000000      100.000000     2.0     -1818.089600            -1             -1    True
1   -1718.051025   -1818.089600    6633.0 -1718.051025  100.038574 -1818.089600     0.000000  100.038574        0.038574     2.0     -1718.051025         False          False    True
2   -1718.012695   -1718.089600    6633.0 -1718.012695  100.076904 -1718.089600     0.000000    0.076904      -99.923096     3.0     -1718.051025         False          False    True
3    -917.166523   -1618.089600    6633.0  -917.166523  800.923077 -1618.089600   600.846154  100.076923        0.076923     1.0     -1718.051025         False           True   False
4    -616.781907   -1517.974215    6633.0  -616.781907  400.461538 -1517.974215   801.230769   99.961538        0.076923     1.0     -1718.051025         False          False    True
5    -516.512677   -1318.089600    6633.0  -516.512677  200.230769 -1318.089600   801.500000    0.076923        0.076923     1.0     -1718.051025         False          False    True
6    -416.474215   -1218.089600    6633.0  -416.474215  100.115385 -1218.089600   801.538462    0.076923        0.076923     1.0     -1718.051025         False          False    True
7    -366.493446   -1168.070369    6633.0  -366.493446   50.057692 -1168.070369   801.538462    0.038462      -49.942308     1.0     -1718.051025         False          False    True
8      34.429631   -1118.089600    6633.0    34.429631  400.961538 -1118.089600  1052.442308  100.076923        0.076923     1.0     -1718.051025         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=1/13.[0m
[08/15 12:55:54]  --------------------------------------------------------------------------------
[08/15 12:55:54]  Iteration: 69 (0 solution, 68 counterexamples)
[08/15 12:56:03]  Generator returned sat in 6.725709 secs.
[08/15 12:56:03]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:03]  Improved gap from 0.1 to 100
[08/15 12:56:04]  Improved number of small numbers from 68 to 101 out of a max of 114
[08/15 12:56:04]  Verifer returned sat in 1.111641 secs.
[08/15 12:56:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t  wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -884.000000   -1183.949707    6633.0  -884.000000    0.050049 -1183.949707       0.00  299.949707      199.949856     2.0     -1183.949707            -1             -1   False
1    -783.899658    -983.949951    6633.0  -783.899658  400.050049  -983.949951       0.00  200.050293      200.050198     2.0     -1183.949707         False          False   False
2    -583.949951    -883.949951    6633.0  -583.949951  400.000000  -883.949951       0.00  300.000000      299.999905     2.0      -583.949951         False          False   False
3    -583.949951    -783.949951    6633.0  -583.949951   19.684375  -783.949951       0.00  200.000000      199.999905     3.0      -583.949951         False          False   False
4    -583.949951    -683.949951    6633.0  -583.949951   38.368750  -683.949951       0.00  100.000000       99.999905     3.0      -583.949951         False          False   False
5    -583.949951    -633.274856    6633.0  -583.949951   75.737500  -633.274856       0.00   49.324905       -0.000095     4.0      -583.949951         False          False   False
6    -482.799856    -583.949856    6633.0  -482.799856  150.475000  -583.949856       0.00  101.150000        1.150000     1.0      -583.949951         False          False   False
7    -283.999856    -482.749856    6633.0  -283.999856  299.950000  -482.749856       0.00  198.750000       99.950000     1.0      -583.949951         False          False   False
8     116.150144    -283.949951    6633.0   116.150144  598.900000  -283.949951       0.05  400.050095      400.050000     1.0      -583.949951         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=8001/20.[0m
[08/15 12:56:05]  --------------------------------------------------------------------------------
[08/15 12:56:05]  Iteration: 70 (0 solution, 69 counterexamples)
[08/15 12:56:17]  Generator returned sat in 9.964099 secs.
[08/15 12:56:17]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:17]  Improved gap from 0.00125 to 23.4375
[08/15 12:56:18]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 12:56:18]  Verifer returned sat in 0.764907 secs.
[08/15 12:56:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -860.572266    -984.009766  6632.999756  -860.572266    0.002500  -984.009766    0.000000  123.437500      123.437500     2.0      -984.009766            -1             -1   False
1    -760.572510    -984.009766  6632.999756  -760.572510  223.437256  -984.009766   99.999756  123.437500       23.437500     2.0      -984.009766         False          False   False
2    -660.574951    -884.009766  6632.999756  -660.574951  223.435059  -884.009766   99.999756  123.435059       23.435059     3.0      -760.574707         False          False    True
3    -584.010010    -707.449707  6632.999756  -584.010010  200.000000  -707.449707   99.999756   23.439941        0.000000     1.0      -684.009766         False           True   False
4    -330.889893    -587.132324  6632.999756  -330.889893  276.560059  -587.132324  229.682373   26.560059       23.437500     1.0      -684.009766         False          False   False
5    -330.889893    -584.009766  6709.562256  -330.889893    0.010000  -584.009766  229.682373   23.437500        0.000000     2.0      -684.009766         False          False    True
6    -330.889893    -560.572266  6786.124756  -330.889893    1.000000  -560.572266  229.682373    0.000000      -23.437500     3.0      -684.009766         False          False    True
7    -184.012451    -537.134766  6786.124756  -184.012451  146.877441  -537.134766  229.684814  123.437500       23.437500     1.0      -413.697266          True           True   False
8    -184.012451    -437.134766  6786.124756  -184.012451    0.010000  -437.134766  229.684814   23.437500      -76.562500     2.0      -413.697266         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=375/16.[0m
[08/15 12:56:18]  --------------------------------------------------------------------------------
[08/15 12:56:18]  Iteration: 71 (0 solution, 70 counterexamples)
[08/15 12:56:29]  Generator returned sat in 8.871127 secs.
[08/15 12:56:29]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:30]  Improved gap from 0.0 to 23.4375
[08/15 12:56:31]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:56:31]  Verifer returned sat in 1.270328 secs.
[08/15 12:56:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1357.533447   -1534.023682  6832.989746 -1357.533447    0.002686 -1534.023682    0.000000  176.490234      176.490234     1.0     -1534.023682            -1             -1   False
1   -1334.031006   -1534.023682  6832.989746 -1334.031006  199.992676 -1534.023682    0.000000  199.992676       99.992676     1.0     -1534.023682         False          False   False
2   -1334.031006   -1357.531006  6832.997070 -1334.031006  199.992676 -1357.531006    0.000000   23.500000        0.000000     2.0     -1534.023682         False          False   False
3    -910.531006   -1334.031006  6832.997070  -910.531006  447.000000 -1334.031006  223.504883  199.995117       99.995117     3.0     -1534.023682         False          False   False
4    -887.026123   -1134.033691  6832.997070  -887.026123  223.500000 -1134.033691  223.504883   23.502686       23.500000     1.0     -1110.531006          True           True    True
5    -887.026123   -1134.031006  6909.497070  -887.026123    0.010000 -1134.031006  223.504883   23.500000        0.000000     2.0     -1110.531006         False          False    True
6    -887.026123   -1110.531006  6983.002197  -887.026123    0.010000 -1110.531006  223.504883    0.000000      -26.494873     3.0     -1110.531006         False          False    True
7    -663.526123   -1010.533691  6983.002197  -663.526123  223.500000 -1010.533691  223.504883  123.502686       97.005127     1.0     -1110.531006         False           True   False
8    -663.526123    -984.036133  6983.002441  -663.526123  123.500000  -984.036133  223.504883   97.005127       -2.994629     2.0     -1110.531006         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=0, buffer=102395/1024.[0m
[08/15 12:56:31]  --------------------------------------------------------------------------------
[08/15 12:56:31]  Iteration: 72 (0 solution, 71 counterexamples)
[08/15 12:56:39]  Generator returned sat in 6.076406 secs.
[08/15 12:56:40]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:40]  Improved gap from 0.0 to 100
[08/15 12:56:40]  Improved number of small numbers from 71 to 114 out of a max of 114
[08/15 12:56:40]  Verifer returned sat in 0.902842 secs.
[08/15 12:56:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -630.981201    -831.130859  6030.096924  -630.981201    0.050049  -831.130859    0.049805  200.099854      100.099854     7.0      -831.130859            -1             -1     -1
1    -630.881104    -731.130859  6030.096924  -630.881104  200.199951  -731.130859    0.149902  100.099854        0.099854     7.0      -831.130859         False          False   True
2    -530.831055    -631.031006  6030.096924  -530.831055  200.149902  -631.031006    0.199951  100.000000        0.099854     3.0      -531.031006         False          False   True
3    -430.781006    -497.697754  6030.096924  -430.781006  200.050049  -497.697754    0.250000   66.666748        0.099854     1.0      -431.031006         False          False   True
4    -330.731201    -366.364258  6030.096924  -330.731201  166.716553  -366.364258    0.299805   35.333252        0.099854     1.0      -431.031006         False          False   True
5    -183.681152    -297.664307  6030.096924  -183.681152  182.383301  -297.664307   47.349854   66.633301        0.099854     1.0      -431.031006         False          False   True
6     -83.631104    -186.553223  6030.096924   -83.631104  166.683350  -186.553223   47.399902   55.522217        0.099854     1.0      -431.031006         False          False   True
7      16.418945     -31.130859  6030.096924    16.418945  155.572266   -31.130859   47.449951    0.099854        0.099854     1.0      -431.031006         False          False   True
8     183.935791     -30.981201  6030.096924   183.935791  167.616699   -30.981201  114.966797   99.950195        0.099854     1.0      -431.031006         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=409/4096.[0m
[08/15 12:56:41]  --------------------------------------------------------------------------------
[08/15 12:56:41]  Iteration: 73 (0 solution, 72 counterexamples)
[08/15 12:56:46]  Generator returned sat in 2.884221 secs.
[08/15 12:56:46]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:47]  Improved number of small numbers from 113 to 113 out of a max of 113
[08/15 12:56:47]  Verifer returned sat in 0.182872 secs.
[08/15 12:56:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -630.981201    -850.930176  6049.89624  -630.981201    0.050049  -850.930176   0.049805  219.899170       119.89917     7.0      -850.930176            -1             -1     -1
1    -630.881104    -750.930176  6049.89624  -630.881104  219.999268  -750.930176   0.149902  119.899170        19.89917     7.0      -850.930176         False          False   True
2    -530.831055    -631.031006  6049.89624  -530.831055  219.949219  -631.031006   0.199951  100.000000        19.89917     3.0      -531.031006         False          False   True
3    -430.781006    -499.647461  6049.89624  -430.781006  200.050049  -499.647461   0.250000   68.616455        19.89917     1.0      -431.031006         False          False   True
4    -324.756104    -402.212891  6049.89624  -324.756104  174.641357  -402.212891   6.274902   71.181885        19.89917     1.0      -431.031006         False          False   True
5    -222.579346    -297.014404  6049.89624  -222.579346  173.358643  -297.014404   8.451660   65.983398        19.89917     1.0      -431.031006         False          False   True
6    -122.554443    -186.553223  6049.89624  -122.554443  166.008301  -186.553223   8.476562   55.522217        19.89917     1.0      -431.031006         False          False   True
7     -22.529541     -50.930176  6049.89624   -22.529541  155.547119   -50.930176   8.501465   19.899170        19.89917     1.0      -431.031006         False          False   True
8     132.212646     -30.981201  6049.89624   132.212646  174.641357   -30.981201  63.243652   99.950195        19.89917     1.0      -431.031006         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=5, buffer=81507/4096.[0m
[08/15 12:56:47]  --------------------------------------------------------------------------------
[08/15 12:56:47]  Iteration: 74 (0 solution, 73 counterexamples)
[08/15 12:56:51]  Generator returned sat in 1.477246 secs.
[08/15 12:56:51]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:51]  Improved gap from 0.05 to 100
[08/15 12:56:51]  Improved number of small numbers from 58 to 114 out of a max of 114
[08/15 12:56:51]  Verifer returned sat in 0.471180 secs.
[08/15 12:56:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -628.043457    -831.031006  6049.89624  -628.043457  199.799805  -831.031006    3.087158  199.900391       99.900391     3.0      -831.031006            -1             -1     -1
1    -628.043457    -731.031006  6049.89624  -628.043457  199.800049  -731.031006    3.087158   99.900391       -0.099609     3.0      -831.031006         False          False   True
2    -527.943848    -631.031006  6049.89624  -527.943848  200.000000  -631.031006    3.087158  100.000000        0.000000     1.0      -831.031006         False          False   True
3    -428.043701    -496.830811  6049.89624  -428.043701  199.900146  -496.830811    3.087158   65.699951       -0.099854     1.0      -431.130859         False          False   True
4    -327.643555    -331.031250  6049.89624  -327.643555  166.100098  -331.031250    3.187500    0.200195        0.199951     1.0      -431.130859         False          False   True
5    -162.743652    -295.031250  6049.89624  -162.743652  165.100098  -295.031250   68.087402   64.200195        0.199951     1.0      -431.130859         False          False   True
6     -62.843750    -131.031006  6049.89624   -62.843750  164.100098  -131.031006   68.087402    0.099854        0.099854     1.0      -431.130859         False          False   True
7     118.956299    -111.630859  6049.89624   118.956299  181.899902  -111.630859  149.787354   80.799805        0.199951     1.0      -431.130859         False          False   True
8     219.056396     -30.730957  6049.89624   219.056396  180.899902   -30.730957  149.887451   99.899902        0.199951     1.0      -431.130859         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=819/4096.[0m
[08/15 12:56:52]  --------------------------------------------------------------------------------
[08/15 12:56:52]  Iteration: 75 (0 solution, 74 counterexamples)
[08/15 12:56:59]  Generator returned sat in 4.705918 secs.
[08/15 12:56:59]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:56:59]  Improved number of small numbers from 101 to 113 out of a max of 113
[08/15 12:56:59]  Verifer returned sat in 0.206732 secs.
[08/15 12:56:59]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -628.043701    -733.731689  6049.89624  -628.043701  102.575684  -733.731689    3.087158  102.600830       99.900391     3.0      -733.731689            -1             -1     -1
1    -628.043701    -731.031006  6049.89624  -628.043701  102.575928  -731.031006    3.087158   99.900146       -0.099609     3.0      -733.731689         False          False   True
2    -527.968750    -631.031250  6049.89624  -527.968750  199.975098  -631.031250    3.087158   99.975342       -0.024658     1.0      -733.731689         False          False   True
3    -428.043945    -531.031250  6049.89624  -428.043945  199.900146  -531.031250    3.087158   99.900146       -0.099854     1.0      -431.131104         False          False   True
4    -327.643799    -331.031494  6049.89624  -327.643799  200.300293  -331.031494    3.187500    0.200195        0.199951     1.0      -431.131104         False          False   True
5    -128.543701    -329.156494  6049.89624  -128.543701  199.300293  -329.156494  102.287598   98.325195        0.199951     1.0      -431.131104         False          False   True
6     -28.568604    -131.031250  6049.89624   -28.568604  198.300293  -131.031250  102.287598    0.175049        0.175049     1.0      -431.131104         False          False   True
7     269.406494    -111.631104  6049.89624   269.406494  298.150146  -111.631104  300.237793   80.799805        0.199951     1.0      -431.131104         False          False   True
8     485.756836     -30.731201  6049.89624   485.756836  297.150146   -30.731201  416.588135   99.899902        0.199951     1.0      -431.131104         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=819/4096.[0m
[08/15 12:57:00]  --------------------------------------------------------------------------------
[08/15 12:57:00]  Iteration: 76 (0 solution, 75 counterexamples)
[08/15 12:57:12]  Generator returned sat in 9.378348 secs.
[08/15 12:57:12]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:12]  Improved gap from 0.0016666666666666668 to 0
[08/15 12:57:13]  Improved number of small numbers from 67 to 85 out of a max of 114
[08/15 12:57:13]  Verifer returned sat in 0.976521 secs.
[08/15 12:57:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1186.161133   -1486.160889  6049.896240 -1186.161133  102.575439 -1486.160889    0.000000  299.999756      199.999873     3.0     -1486.160889            -1             -1   False
1   -1186.161133   -1286.161133  6049.896240 -1186.161133  102.575684 -1286.161133    0.000000  100.000000       99.999873     4.0     -1486.160889         False          False   False
2    -684.156006   -1286.161006  6049.896240  -684.156006  602.005127 -1286.161006  402.005000  200.000000      100.000000     4.0     -1486.160889         False          False   False
3    -282.152673   -1186.161006  6049.896240  -282.152673  602.003333 -1186.161006  704.008333  200.000000      100.000000     2.0      -986.161006         False          False    True
4    -182.151006   -1035.161865  6049.896240  -182.151006  300.001667 -1035.161865  704.010000  149.000859      100.000000     2.0      -986.161006         False          False    True
5    -182.151006    -886.169339  6049.896240  -182.151006  149.000833  -886.169339  704.010000    0.008333        0.000000     2.0      -986.161006         False          False    True
6    -182.149339    -886.161006  6149.893066  -182.149339    0.010000  -886.161006  704.010000    0.001667       -0.001507     3.0      -986.161006         False          False    True
7    -182.141006    -886.157673  6249.883057  -182.141006    0.010000  -886.157673  704.010000    0.006667       -0.003184     1.0      -986.161006         False          False    True
8    -182.137673    -886.147705  6349.879395  -182.137673    0.010000  -886.147705  704.010000    0.000033       -0.003512     1.0      -986.161006         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=100.[0m
[08/15 12:57:13]  --------------------------------------------------------------------------------
[08/15 12:57:13]  Iteration: 77 (0 solution, 76 counterexamples)
[08/15 12:57:26]  Generator returned sat in 10.190945 secs.
[08/15 12:57:26]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:29]  Improved gap from 0.0 to 32.8125
[08/15 12:57:29]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:57:29]  Verifer returned sat in 2.755706 secs.
[08/15 12:57:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    -515.165039    -515.265137  5178.800293  -515.165039    0.100098  -515.265137    0.000000   0.100098       -0.099854     2.0      -515.265137            -1             -1   False
1    -482.252686    -515.065186  5245.987793  -482.252686   33.012451  -515.065186    0.000000  32.812500        0.000000     1.0      -515.265137         False          False   False
2    -382.252686    -389.177490  5245.987793  -382.252686  132.812500  -389.177490    0.000000   6.924805        0.000000     1.0      -515.265137         False          False   False
3    -282.152588    -282.252686  5245.987793  -282.152588  107.024902  -282.252686    0.000000   0.100098        0.100098     1.0      -282.152588         False          False   False
4     -49.240234    -182.352783  5245.987793   -49.240234  233.012451  -182.352783  132.012451   1.100098        1.000000     1.0      -282.152588         False          False   False
5     -49.240234    -182.252686  5313.175293   -49.240234    1.000000  -182.252686  132.012451   1.000000      -31.812500     2.0      -282.152588         False          False    True
6      52.722168    -149.440186  5343.025391    52.722168  102.962402  -149.440186  132.012451  70.149902        0.000000     1.0      -282.152588         False          False    True
7      99.459717     -65.265137  5396.187744    99.459717  116.887451   -65.265137  132.012451  32.712402       -0.100098     1.0      -282.152588         False          False    True
8     182.734863     -32.452637  5396.187988   182.734863  115.987549   -32.452637  132.012451  83.175049      -16.824707     1.0      -282.152588         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1.[0m
[08/15 12:57:29]  --------------------------------------------------------------------------------
[08/15 12:57:29]  Iteration: 78 (0 solution, 77 counterexamples)
[08/15 12:57:35]  Generator returned sat in 2.780977 secs.
[08/15 12:57:35]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:35]  Improved number of small numbers from 59 to 113 out of a max of 113
[08/15 12:57:35]  Verifer returned sat in 0.589708 secs.
[08/15 12:57:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1429.375244   -1929.350098  6493.085205 -1429.375244    0.025146 -1929.350098    0.000000  499.974854      399.974854     8.0     -1929.350098            -1             -1   False
1   -1429.375244   -1729.350098  6493.085205 -1429.375244    0.025146 -1729.350098    0.000000  299.974854      299.974854     8.0     -1929.350098         False          False   False
2    -739.275146   -1729.325195  6493.085205  -739.275146  990.074951 -1729.325195  390.050049  600.000000      500.024902     8.0     -1929.350098         False          False   False
3    -349.225342   -1629.350098  6493.085205  -349.225342  990.049805 -1629.350098  680.099854  600.024902      500.024902     8.0     -1029.325195         False          False    True
4    -349.225342   -1529.350098  6493.085205  -349.225342  496.024902 -1529.350098  680.099854  500.024902      400.024902     9.0     -1029.325195         False          False    True
5    -349.225342   -1429.350098  6493.085205  -349.225342  497.024902 -1429.350098  680.099854  400.024902      300.024902     4.0     -1029.325195         False           True   False
6    -251.225342   -1229.350098  6493.085205  -251.225342  498.024902 -1229.350098  680.099854  298.024902      298.024902     5.0     -1029.325195         False          False   False
7     -50.225342   -1129.350098  6493.085205   -50.225342  499.024902 -1129.350098  680.099854  399.024902      399.024902     6.0     -1029.325195         False          False   False
8      50.774658   -1129.325195  6493.085205    50.774658  500.024902 -1129.325195  680.099854  500.000000      400.024902     7.0     -1029.325195         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=0, buffer=1024051/2048.[0m
[08/15 12:57:36]  --------------------------------------------------------------------------------
[08/15 12:57:36]  Iteration: 79 (0 solution, 78 counterexamples)
[08/15 12:57:41]  Generator returned sat in 2.354053 secs.
[08/15 12:57:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:41]  Verifer returned unsat in 0.510568 secs.
[08/15 12:57:41]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:41]  --------------------------------------------------------------------------------
[08/15 12:57:41]  Iteration: 80 (1 solution, 78 counterexamples)
[08/15 12:57:45]  Generator returned sat in 1.468299 secs.
[08/15 12:57:45]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:46]  Verifer returned unsat in 0.459606 secs.
[08/15 12:57:46]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:46]  --------------------------------------------------------------------------------
[08/15 12:57:46]  Iteration: 81 (2 solution, 78 counterexamples)
[08/15 12:57:50]  Generator returned sat in 1.660444 secs.
[08/15 12:57:50]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:51]  Verifer returned unsat in 0.550664 secs.
[08/15 12:57:51]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:51]  --------------------------------------------------------------------------------
[08/15 12:57:51]  Iteration: 82 (3 solution, 78 counterexamples)
[08/15 12:57:56]  Generator returned sat in 2.939328 secs.
[08/15 12:57:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:57]  Verifer returned unsat in 0.423033 secs.
[08/15 12:57:57]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:57:57]  --------------------------------------------------------------------------------
[08/15 12:57:57]  Iteration: 83 (4 solution, 78 counterexamples)
[08/15 12:58:01]  Generator returned sat in 1.457928 secs.
[08/15 12:58:01]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:01]  Verifer returned unsat in 0.572321 secs.
[08/15 12:58:01]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:01]  --------------------------------------------------------------------------------
[08/15 12:58:01]  Iteration: 84 (5 solution, 78 counterexamples)
[08/15 12:58:07]  Generator returned sat in 2.700745 secs.
[08/15 12:58:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:07]  Verifer returned unsat in 0.485627 secs.
[08/15 12:58:07]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:07]  --------------------------------------------------------------------------------
[08/15 12:58:07]  Iteration: 85 (6 solution, 78 counterexamples)
[08/15 12:58:13]  Generator returned sat in 3.728394 secs.
[08/15 12:58:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:14]  Verifer returned unsat in 0.514517 secs.
[08/15 12:58:14]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:14]  --------------------------------------------------------------------------------
[08/15 12:58:14]  Iteration: 86 (7 solution, 78 counterexamples)
[08/15 12:58:27]  Generator returned sat in 10.409299 secs.
[08/15 12:58:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:29]  Improved gap from 0.0008333333333333334 to 15.625
[08/15 12:58:29]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 12:58:29]  Verifer returned sat in 1.935372 secs.
[08/15 12:58:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -888.626709   -1109.776611  5580.936768  -888.626709    0.050000 -1109.776611   0.000000  221.149902      121.149902     5.0     -1109.776611            -1             -1     -1
1    -888.626709   -1009.776611  5580.936768  -888.626709  221.099854 -1009.776611   0.000000  121.149902       21.149902     3.0     -1109.776611         False           True  False
2    -788.726807    -809.776611  5580.936768  -788.726807  221.049805  -809.776611   0.000000   21.049805       21.049805     1.0      -788.726807          True           True  False
3    -588.776611    -788.676758  5580.936768  -588.776611  221.000000  -788.676758  57.675049  142.225098       63.324951     1.0      -646.451660         False          False  False
4    -511.001709    -646.401855  5580.936768  -511.001709  220.000000  -646.401855  57.675049   77.725098       41.099854     1.0      -646.451660         False          False   True
5    -477.726807    -568.626953  5606.561768  -477.726807  111.000000  -568.626953  57.675049   33.225098       -0.000244     1.0      -646.451660         False          False   True
6    -454.451904    -535.352051  5683.287109  -454.451904   56.500000  -535.352051  57.675049   23.225098        0.000000     1.0      -646.451660         False          False   True
7    -448.427002    -512.076904  5767.612061  -448.427002   29.250000  -512.076904  57.675049    5.974854       -9.650146     1.0      -646.451660         False          False   True
8    -438.776855    -496.451904  5851.986816  -438.776855   15.625000  -496.451904  57.675049    0.000000      -15.625244     1.0      -646.451660         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=259379/4096.[0m
[08/15 12:58:30]  --------------------------------------------------------------------------------
[08/15 12:58:30]  Iteration: 87 (7 solution, 79 counterexamples)
[08/15 12:58:34]  Generator returned sat in 1.854518 secs.
[08/15 12:58:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:58:34]  Improved gap from 0.0062255859375 to 100
[08/15 12:58:34]  Improved number of small numbers from 74 to 114 out of a max of 114
[08/15 12:58:34]  Verifer returned sat in 0.315456 secs.
[08/15 12:58:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -888.727051    -988.739258  5580.936523  -888.727051    0.050049  -988.739258   0.000000  100.012207      100.012207     2.0      -988.739258            -1             -1     -1
1    -888.727051    -988.739258  5580.936523  -888.727051  100.000000  -988.739258   0.000000  100.012207        0.012207     2.0      -988.739258         False           True  False
2    -788.726807    -887.764160  5580.936523  -788.726807  200.012451  -887.764160   0.000000   99.037354        0.012451     1.0      -988.739258         False           True  False
3    -688.714355    -765.380859  5580.936523  -688.714355  199.049805  -765.380859   0.000000   76.666504        0.024902     1.0      -688.714355         False          False  False
4    -654.701660    -654.714355  5580.936523  -654.701660  110.679199  -654.714355   0.000000    0.012695      -65.962402     1.0      -688.714355         False          False  False
5    -488.701904    -553.714111  5580.936523  -488.701904  166.012451  -553.714111   0.012451   64.999756        0.024902     1.0      -688.714355         False          False  False
6    -388.689209    -452.714355  5580.936523  -388.689209  165.012451  -452.714355   0.025146   64.000000        0.024902     1.0      -688.714355         False          False   True
7    -288.676758    -288.739258  5580.936523  -288.676758  164.012451  -288.739258   0.037598    0.024902        0.024902     1.0      -688.714355         False          False   True
8    -125.689209    -288.701904  5580.936523  -125.689209  163.012451  -288.701904  63.025146   99.987549        0.024902     1.0      -688.714355         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=51/2048.[0m
[08/15 12:58:35]  --------------------------------------------------------------------------------
[08/15 12:58:35]  Iteration: 88 (7 solution, 80 counterexamples)
[08/15 12:59:01]  Generator returned sat in 23.623024 secs.
[08/15 12:59:01]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:59:03]  Improved gap from 0.0 to 23.4375
[08/15 12:59:04]  Improved number of small numbers from 68 to 90 out of a max of 114
[08/15 12:59:04]  Verifer returned sat in 2.593892 secs.
[08/15 12:59:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -838.227051    -938.127197  5530.324316  -838.227051  100.199951  -938.127197        0.0  99.900146       99.900000     8.0      -938.127197            -1             -1     -1
1    -838.027100    -838.127197  5530.324316  -838.027100  100.100098  -838.127197        0.0   0.100098        0.099951     1.0      -838.027100         False           True  False
2    -738.127197    -740.627051  5530.324316  -738.127197  100.000000  -740.627051        0.0   2.499854       -0.000146     1.0      -738.127197         False          False  False
3    -637.827051    -638.127051  5530.324316  -637.827051  102.800000  -638.127051        0.1   0.200000        0.200000     1.0      -738.127197         False          False  False
4    -536.227051    -538.127051  5530.324316  -536.227051  101.800000  -538.127051        1.7   0.200000        0.200000     1.0      -738.127197         False          False   True
5    -435.627051    -537.826904  5530.324316  -435.627051  100.800000  -537.826904        2.3  99.899854        0.200000     1.0      -738.127197         False          False   True
6    -435.627051    -438.127051  5604.974365  -435.627051   99.800000  -438.127051        2.3   0.200000      -25.149951     2.0      -738.127197         False          False   True
7    -386.927051    -412.776855  5681.424316  -386.927051   48.900000  -412.776855        2.3  23.549805        0.000000     1.0      -738.127197         False          False   True
8    -386.927051    -389.227051  5681.424316  -386.927051   23.450000  -389.227051        2.3   0.000000     -100.000000     2.0      -738.127197         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=1/5.[0m
[08/15 12:59:04]  --------------------------------------------------------------------------------
[08/15 12:59:04]  Iteration: 89 (7 solution, 81 counterexamples)
[08/15 12:59:32]  Generator returned sat in 25.289387 secs.
[08/15 12:59:32]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:59:33]  Improved gap from 0.05 to 100
[08/15 12:59:34]  Improved number of small numbers from 68 to 78 out of a max of 114
[08/15 12:59:34]  Verifer returned sat in 1.260110 secs.
[08/15 12:59:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t     cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -938.002197   -1138.043701  5604.974365  -938.002197   200.083252 -1138.043701    0.000000  200.041504      199.958187     7.0     -1138.043701            -1             -1     -1
1    -938.001953   -1037.960384  5604.974365  -938.001953   200.041748 -1037.960384    0.000000   99.958431       99.958431     8.0      -938.001953         False           True  False
2    -837.960384    -937.960384  5604.974365  -837.960384   200.000000  -937.960384    0.000000  100.000000      100.000000     1.0      -837.960384         False           True  False
3    -437.960384    -838.002051  5604.974365  -437.960384   500.000000  -838.002051    0.041667  400.000000      399.958333     2.0      -837.960384         False          False  False
4    -437.960384    -837.960384  5604.974365  -437.960384     1.000000  -837.960384    0.041667  399.958333      299.958333     3.0      -837.960384         False          False   True
5    -437.960384    -637.960384  5604.974365  -437.960384   100.500000  -637.960384    0.041667  199.958333      199.958333     3.0      -837.960384         False          False   True
6    -338.168717    -637.960384  5604.974365  -338.168717   299.750000  -637.960384    0.041667  299.750000      199.750000     3.0      -837.960384         False          False   True
7     -89.272884    -437.960384  5604.974365   -89.272884   548.645833  -437.960384    0.041667  348.645833      348.645833     2.0      -837.960384         False          False   True
8     584.050033    -338.043701  5604.974365   584.050033  1021.968750  -338.043701  522.052083  400.041650      399.958333     2.0      -837.960384         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=9599/24.[0m
[08/15 12:59:34]  --------------------------------------------------------------------------------
[08/15 12:59:34]  Iteration: 90 (7 solution, 82 counterexamples)
[08/15 12:59:43]  Generator returned sat in 6.237016 secs.
[08/15 12:59:43]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:59:44]  Improved gap from 0.0 to 35.9375
[08/15 12:59:44]  Improved number of small numbers from 75 to 114 out of a max of 114
[08/15 12:59:44]  Verifer returned sat in 0.881549 secs.
[08/15 12:59:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -638.173828    -738.168701  5604.974121  -638.173828    0.005127  -738.168701   0.000000  99.994873       99.994873     9.0      -738.168701            -1             -1     -1
1    -538.168701    -638.168701  5604.974121  -538.168701  200.000000  -638.168701   0.005127  99.994873       99.994873     1.0      -738.168701         False           True  False
2    -469.283691    -538.168701  5604.974121  -469.283691  168.879883  -538.168701   0.005127  68.879883       68.879883     1.0      -469.288818         False          False   True
3    -469.283691    -538.168701  5636.089600  -469.283691   68.875000  -538.168701   0.005127  68.879883       -0.004639     1.0      -469.288818         False          False   True
4    -468.288574    -469.283691  5694.906982  -468.288574   69.875000  -469.283691   0.005127   0.989990      -40.192139     1.0      -469.288818         False          False   True
5    -398.403564    -428.101318  5758.969238  -398.403564   70.875000  -428.101318   0.005127  29.692627       -6.244873     1.0      -469.288818         False          False   True
6    -356.221191    -392.163818  5823.031738  -356.221191   71.875000  -392.163818   0.005127  35.937500        0.000000     1.0      -469.288818         False          False   True
7    -319.283691    -356.226318  5886.094238  -319.283691   72.875000  -356.226318   0.005127  36.937500        0.000000     2.0      -469.288818         False          False   True
8    -319.283691    -319.288818  5886.094238  -319.283691    0.010000  -319.288818   0.005127   0.000000     -100.000000     2.0      -319.288818          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=409579/4096.[0m
[08/15 12:59:45]  --------------------------------------------------------------------------------
[08/15 12:59:45]  Iteration: 91 (7 solution, 83 counterexamples)
[08/15 12:59:49]  Generator returned sat in 1.841591 secs.
[08/15 12:59:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:59:50]  Improved gap from 0.000625 to 35.9375
[08/15 12:59:50]  Improved number of small numbers from 17 to 114 out of a max of 114
[08/15 12:59:50]  Verifer returned sat in 0.878696 secs.
[08/15 12:59:50]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -621.965576    -721.965576  5587.208252  -621.965576    0.005127  -721.965576   0.002441  99.997559       99.997314     9.0      -721.965576            -1             -1     -1
1    -521.965576    -621.965576  5587.208252  -521.965576  199.997559  -621.965576   0.002441  99.997559       99.997314     1.0      -721.965576         False           True   True
2    -470.403076    -521.965576  5587.208252  -470.403076  151.560059  -521.965576   0.002441  51.560059       51.559814     1.0      -470.405518         False          False   True
3    -470.397949    -470.402832  5587.208496  -470.397949   51.565186  -470.402832   0.002441   0.002441      -48.434814     1.0      -470.400391         False          False   True
4    -418.835205    -421.965576  5651.270752  -418.835205   51.565186  -421.965576   0.002441   3.127930      -32.809814     1.0      -470.400391         False          False   True
5    -370.397949    -386.027832  5715.333252  -370.397949   51.565186  -386.027832   0.002441  15.627441      -20.310059     1.0      -470.400391         False          False   True
6    -334.460205    -350.090332  5779.395752  -334.460205   51.565186  -350.090332   0.002441  15.627686      -20.309814     1.0      -470.400391         False          False   True
7    -298.522705    -314.152832  5843.458252  -298.522705   51.565186  -314.152832   0.002441  15.627686      -20.309814     1.0      -470.400391         False          False   True
8    -262.585205    -271.968018  5843.458252  -262.585205   51.565186  -271.968018   0.002441   9.380371      -84.372314     1.0      -470.400391         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=0, buffer=100.[0m
[08/15 12:59:51]  --------------------------------------------------------------------------------
[08/15 12:59:51]  Iteration: 92 (7 solution, 84 counterexamples)
[08/15 12:59:55]  Generator returned sat in 1.942075 secs.
[08/15 12:59:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 12:59:56]  Improved gap from 0.1 to 100
[08/15 12:59:56]  Improved number of small numbers from 79 to 114 out of a max of 114
[08/15 12:59:56]  Verifer returned sat in 0.486253 secs.
[08/15 12:59:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1198.522705   -1298.472656  6063.715576 -1198.522705  200.000000 -1298.472656    0.000000   99.949951       -0.050049     9.0     -1298.472656            -1             -1     -1
1   -1098.522705   -1198.472656  6063.715576 -1098.522705  199.949951 -1198.472656    0.000000   99.949951       -0.050049     1.0     -1098.522705         False           True  False
2    -998.472656   -1098.472656  6063.715576  -998.472656  200.000000 -1098.472656    0.000000  100.000000        0.000000     1.0     -1098.522705         False          False  False
3    -894.572754    -898.472900  6063.715576  -894.572754  203.899902  -898.472900    0.050049    3.850098        3.849854     1.0     -1098.522705         False          False  False
4    -695.522949    -896.472656  6063.715576  -695.522949  202.899902  -896.472656   99.099854  101.849854        3.849854     2.0     -1098.522705         False          False   True
5    -595.472900    -698.472656  6063.715576  -595.472900  201.899902  -698.472656   99.149902    3.849854        3.849854     1.0      -694.622803          True           True   True
6    -398.422852    -694.572510  6063.715576  -398.422852  200.899902  -694.572510  196.199951   99.949707        3.849854     1.0      -694.622803         False          False   True
7    -298.472656    -594.572754  6063.715576  -298.472656  199.899902  -594.572754  196.199951   99.900146        3.800049     1.0      -694.622803         False          False   True
8    -147.472900    -498.472656  6063.715576  -147.472900  250.899902  -498.472656  247.149902  103.849854        3.849854     2.0      -694.622803         False          False   True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=15769/4096.[0m
[08/15 12:59:57]  --------------------------------------------------------------------------------
[08/15 12:59:57]  Iteration: 93 (7 solution, 85 counterexamples)
[08/15 13:00:05]  Generator returned sat in 5.855892 secs.
[08/15 13:00:05]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:00:07]  Improved gap from 0.0 to 23.4375
[08/15 13:00:08]  Improved number of small numbers from 74 to 82 out of a max of 114
[08/15 13:00:08]  Verifer returned sat in 2.424047 secs.
[08/15 13:00:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1876.285645   -1909.272949  6774.515869 -1876.285645    0.100000 -1909.272949       0.00  32.987305       32.987305     1.0     -1909.272949            -1             -1   False
1   -1876.285645   -1909.272949  6841.528369 -1876.285645    0.100000 -1909.272949       0.00  32.987305       -0.000195     1.0     -1909.272949         False          False   False
2   -1775.985449   -1776.285449  6841.528369 -1775.985449  133.287500 -1776.285449       0.10   0.200000        0.200000     1.0     -1909.272949         False          False   False
3   -1775.985449   -1776.285449  6918.090869 -1775.985449    0.100098 -1776.285449       0.10   0.200000      -23.237500     1.0     -1776.085449         False          False    True
4   -1643.197949   -1655.272949  6918.090869 -1643.197949  132.987500 -1655.272949       9.45   2.625000        0.200000     1.0     -1776.085449         False          False    True
5   -1580.329199   -1652.547949  6955.022119 -1580.329199   65.493750 -1652.547949       9.45  62.768750        0.000000     1.0     -1776.085449         False          False    True
6   -1519.360449   -1589.779199  6994.053369 -1519.360449  123.737500 -1589.779199       9.45  60.968750        0.000000     2.0     -1776.085449         False          False    True
7   -1519.360449   -1528.810449  7070.615723 -1519.360449   60.868750 -1528.810449       9.45   0.000000      -23.437646     2.0     -1528.810449          True           True   False
8   -1489.926074   -1505.372803  7147.178223 -1489.926074   29.434375 -1505.372803       9.45   5.996729      -17.440771     1.0     -1528.810449         False           True   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/5.[0m
[08/15 13:00:08]  --------------------------------------------------------------------------------
[08/15 13:00:08]  Iteration: 94 (7 solution, 86 counterexamples)
[08/15 13:00:14]  Generator returned sat in 2.935386 secs.
[08/15 13:00:14]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:00:15]  Improved gap from 0.0 to 100
[08/15 13:00:16]  Improved number of small numbers from 62 to 70 out of a max of 114
[08/15 13:00:16]  Verifer returned sat in 1.792269 secs.
[08/15 13:00:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -2075.935547   -2175.935449  6941.178369 -2075.935547    0.050000 -2175.935449       0.05   99.949902       -0.050098     3.0     -2175.935449            -1             -1     -1
1   -1875.935449   -2075.935449  6941.178369 -1875.935449  299.950000 -2075.935449       0.05  199.950000       99.950000     1.0     -2175.935449         False           True   True
2   -1775.985449   -1875.935449  6941.178369 -1775.985449  299.900000 -1875.935449       0.05   99.900000       99.900000     1.0     -1776.035449         False          False   True
3   -1775.985449   -1875.935449  6941.178369 -1775.985449   11.138889 -1875.935449       0.05   99.900000       -0.100000     1.0     -1776.035449         False          False   True
4   -1709.177116   -1709.277116  6941.178369 -1709.177116  166.708333 -1709.277116       0.05    0.050000      -33.291667     1.0     -1776.035449         False          False   True
5   -1275.835449   -1675.935449  6941.178369 -1275.835449  433.391667 -1675.935449       0.05  400.050000      300.050000     1.0     -1776.035449         False          False   True
6    -925.797949   -1575.935303  6941.178369  -925.797949  750.087500 -1575.935303       0.05  650.087354      550.087500     2.0     -1776.035449         False          False   True
7    -925.797949   -1375.935547  6941.178369  -925.797949  374.043750 -1375.935547       0.05  450.087598      450.087500     3.0      -925.847949          True           True  False
8    -925.797949   -1275.935547  6941.178369  -925.797949  186.021875 -1275.935547       0.05  350.087598      350.087500     4.0      -925.847949         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=2253363/4096.[0m
[08/15 13:00:17]  --------------------------------------------------------------------------------
[08/15 13:00:17]  Iteration: 95 (7 solution, 87 counterexamples)
[08/15 13:00:42]  Generator returned sat in 23.132336 secs.
[08/15 13:00:43]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:00:44]  Improved gap from 0.01125 to 48.4375
[08/15 13:00:45]  Improved number of small numbers from 60 to 67 out of a max of 114
[08/15 13:00:45]  Verifer returned sat in 2.010253 secs.
[08/15 13:00:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1932.614014   -2034.030547  6897.806556 -1932.614014    0.050049 -2034.030547       0.05  101.366533       99.899867     9.0     -2034.030547            -1             -1     -1
1   -1932.563880   -1932.613880  6897.806556 -1932.563880  101.416667 -1932.613880       0.05    0.000000       -0.050000     1.0     -2034.030547         False           True   True
2   -1831.197214   -1932.563880  6897.806556 -1831.197214  101.366667 -1932.563880       0.05  101.316667        1.316667     1.0     -1831.247214         False          False   True
3   -1731.197214   -1732.563880  6897.806556 -1731.197214  201.316667 -1732.563880       0.05    1.316667        1.316667     1.0     -1831.247214         False          False   True
4   -1632.855547   -1632.955547  6897.806556 -1632.855547   99.658333 -1632.955547       0.05    0.050000       -0.341667     1.0     -1831.247214         False          False   True
5   -1584.076380   -1632.563880  6949.369056 -1584.076380   48.829167 -1632.563880       0.05   48.437500        0.000000     1.0     -1831.247214         False          False   True
6   -1584.076380   -1584.126380  6996.685791 -1584.076380   23.414583 -1584.126380       0.05    0.000000      -52.683265     2.0     -1831.247214         False          False   True
7   -1508.857630   -1531.443047  7048.248047 -1508.857630   75.218750 -1531.443047       0.05   22.535417      -25.902259     1.0     -1508.907630          True           True  False
8   -1479.636797   -1483.005371  7099.810547 -1479.636797   51.756250 -1483.005371       0.05    3.318574      -45.118926     1.0     -1508.907630         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=0, buffer=41/30.[0m
[08/15 13:00:45]  --------------------------------------------------------------------------------
[08/15 13:00:45]  Iteration: 96 (7 solution, 88 counterexamples)
[08/15 13:00:58]  Generator returned sat in 10.260361 secs.
[08/15 13:00:58]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:00:59]  Improved gap from 0.0 to 48.4375
[08/15 13:01:00]  Improved number of small numbers from 55 to 114 out of a max of 114
[08/15 13:01:00]  Verifer returned sat in 1.348359 secs.
[08/15 13:01:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -1935.643799   -2073.686035  6900.943604 -1935.643799  137.990000 -2073.686035   0.049805  137.992432      100.007324     1.0     -2073.686035            -1             -1     -1
1   -1935.643799   -1984.138428  6900.943604 -1935.643799  137.990000 -1984.138428   0.049805   48.444824        0.007324     2.0     -2073.686035         False          False   True
2   -1835.651367   -1839.017822  6900.943604 -1835.651367  148.437256 -1839.017822   0.049805    3.316650       -0.000244     1.0     -2073.686035          True           True  False
3   -1735.643799   -1781.020996  6900.943604 -1735.643799  103.324219 -1781.020996   0.049805   45.327393        0.007324     1.0     -1735.693604         False          False  False
4   -1635.638672   -1635.703613  6900.943604 -1635.638672  145.332520 -1635.703613   0.052246    0.012695        0.010010     1.0     -1735.693604         False          False  False
5   -1635.638672   -1635.700928  6952.506104 -1635.638672    0.010000 -1635.700928   0.052246    0.010010      -48.427490     2.0     -1735.693604         False          False   True
6   -1534.990234   -1583.477539  7000.282715 -1534.990234  100.658447 -1583.477539   0.052246   48.435059       -0.002441     1.0     -1535.042480          True           True  False
7   -1485.653564   -1535.040039  7050.948486 -1485.653564   97.771729 -1535.040039   0.052246   49.334229        0.000000     1.0     -1535.042480         False          False  False
8   -1485.653564   -1485.705811  7102.510986 -1485.653564   49.331787 -1485.705811   0.052246    0.000000      -48.437500     2.0     -1535.042480         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=41/4096.[0m
[08/15 13:01:00]  --------------------------------------------------------------------------------
[08/15 13:01:00]  Iteration: 97 (7 solution, 89 counterexamples)
[08/15 13:01:06]  Generator returned sat in 2.601593 secs.
[08/15 13:01:06]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:01:06]  Improved gap from 0.0 to 48.4375
[08/15 13:01:07]  Improved number of small numbers from 64 to 114 out of a max of 114
[08/15 13:01:07]  Verifer returned sat in 0.913481 secs.
[08/15 13:01:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -2135.673584   -2135.674805  6900.917480 -2135.673584  200.001221 -2135.674805   0.000000   0.001221      -99.998779     1.0     -2135.674805            -1             -1   False
1   -1935.673584   -1935.675049  6900.917480 -1935.673584  200.001221 -1935.675049   0.000000   0.001465        0.001221     1.0     -2135.674805         False          False   False
2   -1835.673828   -1835.674805  6900.917480 -1835.673828  100.001221 -1835.674805   0.000000   0.000977        0.000977     1.0     -1835.673828         False          False   False
3   -1735.695801   -1784.133301  6900.938477 -1735.695801   99.979004 -1784.133301   0.000000  48.437500        0.000000     1.0     -1735.695801         False          False   False
4   -1608.362549   -1635.704590  6900.938477 -1608.362549  175.770752 -1635.704590  27.330811   0.011230        0.002441     1.0     -1735.695801         False          False   False
5   -1608.362549   -1635.695801  6952.500977 -1608.362549    0.010000 -1635.695801  27.330811   0.002441      -48.435059     2.0     -1735.695801         False          False    True
6   -1508.375488   -1585.181641  7000.948975 -1508.375488   99.989502 -1585.181641  27.330811  49.475342        0.000000     1.0     -1535.706299          True           True   False
7   -1458.375000   -1535.706055  7050.948486 -1458.375000   99.475830 -1535.706055  27.330811  50.000244        0.000000     1.0     -1535.706299         False          False   False
8   -1458.375000   -1485.705811  7050.948486 -1458.375000   49.999268 -1485.705811  27.330811   0.000000     -100.000000     2.0     -1535.706299         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=5/2048.[0m
[08/15 13:01:07]  --------------------------------------------------------------------------------
[08/15 13:01:07]  Iteration: 98 (7 solution, 90 counterexamples)
[08/15 13:01:33]  Generator returned sat in 23.004715 secs.
[08/15 13:01:33]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:01:35]  Improved gap from 0.0 to 23.4375
[08/15 13:01:35]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:01:35]  Verifer returned sat in 1.573805 secs.
[08/15 13:01:35]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1808.959717   -2232.397217  6674.312500 -1808.959717  423.537354 -2232.397217   0.000000  423.437500      423.437500     3.0     -2232.397217            -1             -1   False
1   -1808.909668   -2132.397217  6674.312500 -1808.909668  423.487549 -2132.397217   0.050049  323.437500      323.437500     3.0     -1808.959717         False          False   False
2   -1808.909668   -2032.397217  6674.312500 -1808.909668  105.850098 -2032.397217   0.050049  223.437500      223.437500     3.0     -1808.959717         False          False    True
3   -1808.909668   -1932.397217  6674.312500 -1808.909668  105.850000 -1932.397217   0.050049  123.437500      123.437500     4.0     -1808.959717         False          False    True
4   -1808.909668   -1835.472168  6674.312500 -1808.909668   52.925000 -1835.472168   0.050049   26.512451       23.437500     5.0     -1808.959717         False          False    True
5   -1808.909668   -1832.397217  6750.875000 -1808.909668   26.462500 -1832.397217   0.050049   23.437500        0.000000     6.0     -1808.959717         False          False    True
6   -1808.909668   -1808.959717  6827.437256 -1808.909668   13.231250 -1808.959717   0.050049    0.000000      -23.437744     7.0     -1808.959717         False          False    True
7   -1685.472168   -1785.521973  6827.437500 -1685.472168  123.437500 -1785.521973   0.050049   99.999756        0.000000     1.0     -1808.959717         False           True   False
8   -1685.472168   -1685.522217  6827.437500 -1685.472168   49.950195 -1685.522217   0.050049    0.000000     -100.000000     2.0     -1808.959717         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=5175/16.[0m
[08/15 13:01:36]  --------------------------------------------------------------------------------
[08/15 13:01:36]  Iteration: 99 (7 solution, 91 counterexamples)
[08/15 13:02:08]  Generator returned sat in 29.303090 secs.
[08/15 13:02:08]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:02:09]  Improved gap from 22.46279296875 to 48.4375
[08/15 13:02:09]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:02:09]  Verifer returned sat in 1.264828 secs.
[08/15 13:02:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -2753.877441   -2953.777344  6674.312500 -2753.877441  448.437500 -2953.777344        0.0  199.899902      199.899902     1.0     -2953.777344            -1             -1    True
1   -2505.339844   -2953.777344  6674.312500 -2505.339844  448.437500 -2953.777344        0.0  448.437500      348.437500     1.0     -2953.777344         False          False    True
2   -2505.339844   -2753.777344  6674.312500 -2505.339844  448.437500 -2753.777344        0.0  248.437500      248.437500     2.0     -2953.777344         False          False    True
3   -2505.339844   -2699.389648  6674.312500 -2505.339844  162.750000 -2699.389648        0.0  194.049805      148.437500     3.0     -2505.339844         False          False    True
4   -2505.339844   -2553.877197  6674.312500 -2505.339844   82.375000 -2553.877197        0.0   48.537354       48.437500     4.0     -2505.339844         False          False    True
5   -2505.339844   -2553.777344  6725.875000 -2505.339844   42.187500 -2553.777344        0.0   48.437500        0.000000     5.0     -2505.339844         False          False    True
6   -2505.339844   -2505.339844  6777.437256 -2505.339844   22.093750 -2505.339844        0.0    0.000000      -48.437744     6.0     -2505.339844         False          False    True
7   -2407.314941   -2456.902100  6827.850098 -2407.314941   98.024902 -2456.902100        0.0   49.587158        0.000000     1.0     -2505.339844         False           True   False
8   -2407.314941   -2407.314941  6827.850098 -2407.314941   49.487549 -2407.314941        0.0    0.000000     -100.000000     2.0     -2505.339844         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1427609/4096.[0m
[08/15 13:02:10]  --------------------------------------------------------------------------------
[08/15 13:02:10]  Iteration: 100 (7 solution, 92 counterexamples)
[08/15 13:02:21]  Generator returned sat in 8.228543 secs.
[08/15 13:02:21]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:02:21]  Improved gap from 0.0 to 0
[08/15 13:02:22]  Improved number of small numbers from 77 to 92 out of a max of 114
[08/15 13:02:22]  Verifer returned sat in 1.021996 secs.
[08/15 13:02:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -2757.903809   -2757.905029  6478.440000 -2757.903809  100.005000 -2757.905029   0.000000    0.001221        0.001035     9.0     -2757.905029            -1             -1     -1
1   -2657.901123   -2757.902344  6478.440000 -2657.901123  100.003906 -2757.902344   0.001221  100.000000        0.002500     1.0     -2657.902344         False           True  False
2   -2605.918701   -2657.903564  6526.455000 -2605.918701  151.982422 -2657.903564   0.001221   51.983643       -0.000078     2.0     -2657.902344         False          False   True
3   -2505.914844   -2505.919844  6526.455000 -2505.914844  151.987500 -2505.919844   0.002500    0.002500        0.002500     1.0     -2657.902344         False           True  False
4   -2354.929844   -2505.917344  6526.455000 -2354.929844  150.987500 -2505.917344  50.987500  100.000000        0.002500     2.0     -2657.902344         False          False   True
5   -2304.942344   -2405.917480  6576.465000 -2304.942344  149.987500 -2405.917480  50.987500   49.987637        0.000000     2.0     -2355.929844          True           True   True
6   -2304.942344   -2355.929844  6676.463750 -2304.942344    0.010000 -2355.929844  50.987500    0.000000       -0.001250     2.0     -2355.929844         False           True  False
7   -2304.932344   -2355.928594  6776.455000 -2304.932344    0.010000 -2355.928594  50.987500    0.008750        0.000000     1.0     -2355.929844         False           True  False
8   -2304.931094   -2355.918701  6776.455078 -2304.931094    0.010000 -2355.918701  50.987500    0.000107      -99.998672     1.0     -2355.929844         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1/400.[0m
[08/15 13:02:23]  --------------------------------------------------------------------------------
[08/15 13:02:23]  Iteration: 101 (7 solution, 93 counterexamples)
[08/15 13:02:30]  Generator returned sat in 4.023784 secs.
[08/15 13:02:30]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:02:32]  Improved gap from 0.0 to 100
[08/15 13:02:33]  Improved number of small numbers from 69 to 75 out of a max of 114
[08/15 13:02:33]  Verifer returned sat in 2.926416 secs.
[08/15 13:02:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t   wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -3144.617188   -3144.717344  6865.1525 -3144.617188    0.050049 -3144.717344       0.05    0.050156       -0.049844     9.0     -3144.717344            -1             -1     -1
1   -3044.617344   -3144.617344  6865.1525 -3044.617344  100.050000 -3144.617344       0.05   99.950000       -0.050000     1.0     -3144.717344         False           True   True
2   -3044.517344   -3044.617344  6865.1525 -3044.517344  100.050000 -3044.617344       0.05    0.050000      -99.950000     1.0     -3144.717344         False          False   True
3   -2944.517344   -2944.617344  6865.1525 -2944.517344  100.050000 -2944.617344       0.05    0.050000      -99.950000     1.0     -3144.717344         False          False   True
4   -2693.442344   -2836.659010  6865.1525 -2693.442344  251.125000 -2836.659010       0.05  143.166667       51.125000     1.0     -3144.717344         False          False   True
5   -2304.942344   -2644.617344  6865.1525 -2304.942344  531.666667 -2644.617344       0.05  339.625000      339.625000     1.0     -3144.717344         False          False   True
6   -1646.067344   -2544.617344  6865.1525 -1646.067344  998.500000 -2544.617344     498.50  400.050000      400.050000     2.0     -3144.717344         False          False   True
7   -1545.867344   -2444.667236  6865.1525 -1545.867344  500.250000 -2444.667236     498.70  400.099893      400.050000     3.0     -2044.567344          True           True   True
8   -1545.867344   -2444.617188  6865.1525 -1545.867344  251.125000 -2444.617188     498.70  400.049844      300.050000     4.0     -2044.567344         False           True   True
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=8001/20.[0m
[08/15 13:02:33]  --------------------------------------------------------------------------------
[08/15 13:02:33]  Iteration: 102 (7 solution, 94 counterexamples)
[08/15 13:03:00]  Generator returned sat in 23.429047 secs.
[08/15 13:03:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:03:01]  Improved gap from 0.0 to 14.0625
[08/15 13:03:01]  Improved number of small numbers from 85 to 114 out of a max of 114
[08/15 13:03:01]  Verifer returned sat in 0.901594 secs.
[08/15 13:03:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -2158.667236   -2678.672363  6399.207275 -2158.667236    0.002500 -2678.672363   0.002686  520.002441      520.002441     4.0     -2678.672363            -1             -1     -1
1   -2158.664795   -2578.674805  6399.207275 -2158.664795  520.004883 -2578.674805   0.005127  420.004883      420.002441     5.0     -2678.672363         False          False   True
2   -2158.664795   -2578.672363  6399.207275 -2158.664795    0.002500 -2578.672363   0.005127  420.002441      320.002441     6.0     -2158.669922         False          False   True
3   -2158.664795   -2378.672363  6399.207275 -2158.664795  420.000000 -2378.672363   0.005127  220.002441      220.002441     4.0     -2158.669922         False          False   True
4   -2158.664795   -2294.604980  6399.207275 -2158.664795  211.000000 -2294.604980   0.005127  135.935059      120.002441     5.0     -2158.669922         False          False   True
5   -2158.664795   -2212.922119  6399.207275 -2158.664795  106.500000 -2212.922119   0.005127   54.252197       20.002441     6.0     -2158.669922         False          False   True
6   -2158.664795   -2172.732422  6479.204834 -2158.664795   54.250000 -2172.732422   0.005127   14.062500        0.000000     7.0     -2158.669922         False          False   True
7   -2144.602295   -2158.669922  6565.142334 -2144.602295   28.125000 -2158.669922   0.005127   14.062500        0.000000     8.0     -2158.669922         False          False   True
8   -2144.602295   -2144.607422  6651.079834 -2144.602295    0.010000 -2144.607422   0.005127    0.000000      -14.062500     2.0     -2158.669922         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=860165/2048.[0m
[08/15 13:03:01]  --------------------------------------------------------------------------------
[08/15 13:03:01]  Iteration: 103 (7 solution, 95 counterexamples)
[08/15 13:03:09]  Generator returned sat in 4.916343 secs.
[08/15 13:03:09]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:03:11]  Improved gap from 0.00125 to 14.0625
[08/15 13:03:11]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:03:11]  Verifer returned sat in 1.717999 secs.
[08/15 13:03:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -2328.310059   -2728.309814  6392.014893 -2328.310059    0.100000 -2728.309814   0.000000  399.999756      399.899902     4.0     -2728.309814            -1             -1   False
1   -2328.209961   -2628.209961  6392.014893 -2328.209961  400.099854 -2628.209961   0.100098  299.899902      299.899902     4.0     -2728.309814         False          False   False
2   -2228.110107   -2616.410156  6392.014893 -2228.110107  399.999756 -2616.410156   0.199951  388.100098      299.899902     5.0     -2228.310059         False          False    True
3   -2228.110107   -2428.209961  6392.014893 -2228.110107  388.000000 -2428.209961   0.199951  199.899902      199.899902     6.0     -2228.310059         False          False    True
4   -2228.110107   -2337.822510  6392.014893 -2228.110107  195.000000 -2337.822510   0.199951  109.512451       99.899902     6.0     -2228.310059         False          False    True
5   -2228.110107   -2252.235107  6392.014893 -2228.110107   98.500000 -2252.235107   0.199951   23.925049       -0.100098     4.0     -2228.310059         False          False    True
6   -2201.785156   -2228.209717  6465.790039 -2201.785156   50.250000 -2228.209717   0.199951   26.224609        0.000000     1.0     -2228.310059         False          False    True
7   -2201.785156   -2201.985107  6551.727539 -2201.785156   26.125000 -2201.985107   0.199951    0.000000      -14.062500     2.0     -2228.310059         False          False    True
8   -2187.722656   -2187.922607  6551.727539 -2187.722656   14.062500 -2187.922607   0.199951    0.000000     -100.000000     1.0     -2228.310059         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=614195/2048.[0m
[08/15 13:03:12]  --------------------------------------------------------------------------------
[08/15 13:03:12]  Iteration: 104 (7 solution, 96 counterexamples)
[08/15 13:03:27]  Generator returned sat in 12.544816 secs.
[08/15 13:03:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:03:28]  Improved gap from 14.0625 to 23.4375
[08/15 13:03:29]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:03:29]  Verifer returned sat in 1.164845 secs.
[08/15 13:03:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1726.337646   -2126.237793  6398.602539 -1726.337646    0.100000 -2126.237793   0.000000  399.900146      299.900146     4.0     -2126.237793            -1             -1    True
1   -1702.900391   -1926.237793  6398.602539 -1702.900391  423.337402 -1926.237793   0.000000  223.337402      223.337402     4.0     -2126.237793         False          False    True
2   -1502.900391   -1926.237793  6398.602539 -1502.900391  423.337402 -1926.237793  99.899902  323.437500      223.437500     4.0     -2126.237793         False          False    True
3   -1502.900391   -1726.237793  6398.602539 -1502.900391   99.450000 -1726.237793  99.899902  123.437500      123.437500     3.0     -1602.800293         False          False    True
4   -1502.900391   -1629.262451  6398.602539 -1502.900391   50.725000 -1629.262451  99.899902   26.462158       23.437500     3.0     -1602.800293         False          False    True
5   -1502.900391   -1626.237793  6475.165039 -1502.900391   26.362500 -1626.237793  99.899902   23.437500        0.000000     4.0     -1602.800293         False          False    True
6   -1502.900391   -1602.800293  6551.727539 -1502.900391   14.181250 -1602.800293  99.899902    0.000000      -23.437500     5.0     -1602.800293         False          False    True
7   -1379.462891   -1578.537598  6551.727539 -1379.462891  123.437500 -1578.537598  99.899902   99.174805        0.000000     1.0     -1602.800293         False           True   False
8   -1379.462891   -1479.362793  6551.727539 -1379.462891   50.724854 -1479.362793  99.899902    0.000000     -100.000000     2.0     -1602.800293         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=3575/16.[0m
[08/15 13:03:29]  --------------------------------------------------------------------------------
[08/15 13:03:29]  Iteration: 105 (7 solution, 97 counterexamples)
[08/15 13:03:47]  Generator returned sat in 14.764578 secs.
[08/15 13:03:47]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:03:52]  Improved gap from 0.0008333333333333334 to 15.625
[08/15 13:03:53]  Improved number of small numbers from 60 to 74 out of a max of 114
[08/15 13:03:53]  Verifer returned sat in 5.471045 secs.
[08/15 13:03:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -1571.622803   -1979.272793  6325.537539 -1571.622803    0.100098 -1979.272793        0.0  407.649990      381.549990     4.0     -1979.272793            -1             -1   False
1   -1571.622803   -1853.172793  6325.537539 -1571.622803  407.649902 -1853.172793        0.0  281.549990      281.549990     4.0     -1979.272793         False          False   False
2   -1445.622793   -1853.072754  6325.537539 -1445.622793  407.550000 -1853.072754        0.1  407.349961      307.450000     5.0     -1445.722793         False          False   False
3   -1445.622793   -1727.672793  6325.537539 -1445.622793  407.249756 -1727.672793        0.1  281.950000      207.450000     6.0     -1445.722793         False          False    True
4   -1445.622793   -1571.622803  6325.537539 -1445.622793  251.600000 -1571.622803        0.1  125.900010      107.450000     7.0     -1445.722793         False          False    True
5   -1445.622793   -1553.172607  6325.537539 -1445.622793  125.800000 -1553.172607        0.1  107.449814        7.450000     4.0     -1445.722793         False           True   False
6   -1445.622793   -1453.172793  6409.912354 -1445.622793   62.900000 -1453.172793        0.1    7.450000       -8.175186     5.0     -1445.722793         False          False   False
7   -1421.622793   -1437.547607  6494.087539 -1421.622793   31.450000 -1437.547607        0.1   15.824814        0.000000     1.0     -1445.722793         False          False   False
8   -1421.622793   -1421.722793  6494.087646 -1421.622793   15.725000 -1421.722793        0.1    0.000000      -99.999893     2.0     -1445.722793         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=6149/20.[0m
[08/15 13:03:54]  --------------------------------------------------------------------------------
[08/15 13:03:54]  Iteration: 106 (7 solution, 98 counterexamples)
[08/15 13:03:59]  Generator returned sat in 2.627307 secs.
[08/15 13:03:59]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:04:03]  Improved gap from 14.0749267578125 to 15.625
[08/15 13:04:04]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:04:04]  Verifer returned sat in 4.143683 secs.
[08/15 13:04:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -3045.642822   -3442.542725  7613.807617 -3045.642822    0.099854 -3442.542725   0.000000  396.899902      381.349854     4.0     -3442.542725            -1             -1   False
1   -3045.542969   -3326.992920  7613.807617 -3045.542969  396.999756 -3326.992920   0.099854  281.350098      281.349854     4.0     -3442.542725         False          False   False
2   -3045.542969   -3226.992676  7613.807617 -3045.542969  100.200000 -3226.992676   0.099854  181.349854      181.349854     5.0     -3045.642822         False          False    True
3   -3045.542969   -3178.542725  7613.807617 -3045.542969  181.250000 -3178.542725   0.099854  132.899902       81.349854     6.0     -3045.642822         False          False    True
4   -2914.442871   -3045.642822  7613.807617 -2914.442871  264.000000 -3045.642822   0.099854  131.100098      112.449951     7.0     -3045.642822         False          False    True
5   -2914.442871   -2979.142822  7613.807617 -2914.442871  131.000000 -2979.142822   0.099854   64.600098       12.449951     2.0     -3045.642822         False           True   False
6   -2914.442871   -2926.992676  7698.182617 -2914.442871   64.500000 -2926.992676   0.099854   12.449951       -3.175049     3.0     -3045.642822         False          False   False
7   -2895.642822   -2911.367676  7782.557617 -2895.642822   31.250000 -2911.367676   0.099854   15.625000        0.000000     1.0     -3045.642822         False          False   False
8   -2895.642822   -2895.742676  7782.557617 -2895.642822   14.625000 -2895.742676   0.099854    0.000000     -100.000000     2.0     -3045.642822         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1152409/4096.[0m
[08/15 13:04:04]  --------------------------------------------------------------------------------
[08/15 13:04:04]  Iteration: 107 (7 solution, 99 counterexamples)
[08/15 13:04:11]  Generator returned sat in 3.937258 secs.
[08/15 13:04:11]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:04:15]  Improved gap from 0.0016666666666666668 to 15.625
[08/15 13:04:15]  Improved number of small numbers from 75 to 114 out of a max of 114
[08/15 13:04:15]  Verifer returned sat in 4.011147 secs.
[08/15 13:04:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -3045.643066   -3442.643066  7613.757812 -3045.643066    0.099854 -3442.643066        0.0  397.000000      381.299805     3.0     -3442.643066            -1             -1    True
1   -3045.643066   -3426.942627  7613.757812 -3045.643066    0.050000 -3426.942627        0.0  381.299561      281.299805     3.0     -3045.643066         False          False    True
2   -2914.592773   -3326.942871  7613.757812 -2914.592773  512.349854 -3326.942871        0.0  412.350098      312.350098     4.0     -3045.643066         False          False    True
3   -2914.592773   -3178.643066  7613.757812 -2914.592773  412.300049 -3178.643066        0.0  264.050293      212.350098     5.0     -2914.592773         False          False    True
4   -2914.592773   -3045.643066  7613.757812 -2914.592773  264.000000 -3045.643066        0.0  131.050293      112.350098     6.0     -2914.592773         False          False    True
5   -2914.592773   -2979.142822  7613.757812 -2914.592773  131.000000 -2979.142822        0.0   64.550049       12.350098     4.0     -2914.592773         False           True   False
6   -2914.592773   -2926.942627  7698.132568 -2914.592773   64.500000 -2926.942627        0.0   12.349854       -3.275146     5.0     -2914.592773         False          False   False
7   -2895.692627   -2911.317627  7782.507568 -2895.692627   31.250000 -2911.317627        0.0   15.625000        0.000000     1.0     -2914.592773         False          False   False
8   -2895.692627   -2895.692627  7866.882568 -2895.692627   14.625000 -2895.692627        0.0    0.000000      -15.625000     2.0     -2914.592773         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1279591/4096.[0m
[08/15 13:04:16]  --------------------------------------------------------------------------------
[08/15 13:04:16]  Iteration: 108 (7 solution, 100 counterexamples)
[08/15 13:04:35]  Generator returned sat in 16.094137 secs.
[08/15 13:04:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:04:39]  Improved gap from 0.1 to 31.25
[08/15 13:04:39]  Improved number of small numbers from 82 to 114 out of a max of 114
[08/15 13:04:39]  Verifer returned sat in 3.725497 secs.
[08/15 13:04:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -3673.505371   -3804.655518  7613.757812 -3673.505371    0.049805 -3804.655518    0.000000  131.150146      131.150146     2.0     -3804.655518            -1             -1   False
1   -3673.505371   -3704.705322  7613.757812 -3673.505371    0.050049 -3704.705322    0.000000   31.199951       31.150146     3.0     -3804.655518         False          False   False
2   -3573.505371   -3604.655518  7613.757812 -3573.505371  131.199951 -3604.655518    0.000000   31.150146       31.150146     1.0     -3804.655518         False          False   False
3   -3473.505615   -3504.655518  7613.757812 -3473.505615  131.149902 -3504.655518    0.000000   31.149902       31.149902     1.0     -3473.505615         False          False   False
4   -3204.655518   -3404.705322  7613.757812 -3204.655518  300.000000 -3404.705322  168.800049   31.249756       31.199951     1.0     -3473.505615         False          False   False
5   -3204.655518   -3404.655518  7682.507812 -3204.655518    1.000000 -3404.655518  168.800049   31.199951       -0.050049     2.0     -3473.505615         False          False    True
6   -3134.355469   -3373.405518  7712.257812 -3134.355469  101.500000 -3373.405518  168.800049   70.250000        0.000000     1.0     -3473.505615         False          False    True
7   -3087.230469   -3303.155518  7765.082764 -3087.230469  117.375000 -3303.155518  168.800049   47.125000       -0.050049     2.0     -3473.505615         False          False    True
8   -3023.893066   -3255.980225  7765.083008 -3023.893066  110.462402 -3255.980225  168.800049   63.287109      -36.712402     1.0     -3473.505615         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=127795/4096.[0m
[08/15 13:04:40]  --------------------------------------------------------------------------------
[08/15 13:04:40]  Iteration: 109 (7 solution, 101 counterexamples)
[08/15 13:05:00]  Generator returned sat in 16.522392 secs.
[08/15 13:05:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:05:04]  Improved gap from 0.3 to 100
[08/15 13:05:04]  Improved number of small numbers from 77 to 114 out of a max of 114
[08/15 13:05:04]  Verifer returned sat in 3.848098 secs.
[08/15 13:05:04]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -3104.843262   -3255.042969  7765.08252 -3104.843262  150.200195 -3255.042969   0.000000  150.199707       50.199707     2.0     -3255.042969            -1             -1   False
1   -3104.843262   -3104.943115  7765.08252 -3104.843262  150.099854 -3104.943115   0.000000    0.099854      -49.800293     3.0     -3104.843262         False          False   False
2   -2954.943115   -2983.242920  7765.08252 -2954.943115  150.000000 -2983.242920   0.000000   28.299805        0.099854     1.0     -2954.943115         False          False   False
3   -2954.943115   -2955.042969  7765.08252 -2954.943115   28.200195 -2955.042969   0.000000    0.099854      -99.900146     2.0     -2954.943115         False          False   False
4   -2791.942871   -2792.043213  7765.08252 -2791.942871  163.100098 -2792.043213   0.000000    0.100342      -36.899902     1.0     -2954.943115         False          False   False
5   -2555.043213   -2691.042969  7765.08252 -2555.043213  237.000000 -2691.042969   0.099854  135.899902       99.899902     1.0     -2954.943115         False          False   False
6   -2454.943115   -2555.043213  7765.08252 -2454.943115  236.000000 -2555.043213   0.199951   99.900146       99.899902     1.0     -2954.943115         False          False    True
7   -2319.843262   -2455.143066  7765.08252 -2319.843262  235.000000 -2455.143066  35.299805  100.000000       99.899902     2.0     -2954.943115         False          False    True
8   -2185.843262   -2355.042969  7765.08252 -2185.843262  234.000000 -2355.042969  69.299805   99.899902       99.899902     1.0     -2954.943115         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=204595/2048.[0m
[08/15 13:05:04]  --------------------------------------------------------------------------------
[08/15 13:05:04]  Iteration: 110 (7 solution, 102 counterexamples)
[08/15 13:05:23]  Generator returned sat in 15.789688 secs.
[08/15 13:05:24]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:05:36]  Improved gap from 0.0 to 1.5625
[08/15 13:05:38]  Improved number of small numbers from 26 to 48 out of a max of 114
[08/15 13:05:38]  Verifer returned sat in 14.058712 secs.
[08/15 13:05:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -7553.815918   -7755.544134  12265.583740 -7553.815918    0.007568 -7755.544134   0.000000  201.728216      101.728271     6.0     -7755.544134            -1             -1    True
1   -7553.815918   -7555.544189  12265.583740 -7553.815918    0.007568 -7555.544189   0.000000    1.728271        1.728271     5.0     -7755.544134         False          False    True
2   -7527.939941   -7529.569462  12337.979248 -7527.939941   27.604248 -7529.569462   0.000000    1.629520       -0.000244     1.0     -7755.544134         False          False    True
3   -7527.924926   -7527.932350  12436.409401 -7527.924926    1.644536 -7527.932350   0.000000    0.007424       -1.555076     1.0     -7527.924926         False          False    True
4   -7412.304191   -7481.455675  12436.409401 -7412.304191  115.628160 -7481.455675  12.329981   56.821504        1.735679     1.0     -7527.924926         False          False    True
5   -7412.304191   -7426.369850  12534.673584 -7412.304191   56.814080 -7426.369850  12.329981    1.735679       -0.000138     2.0     -7527.924926         False          False    True
6   -7333.033023   -7424.626748  12555.402344 -7333.033023   81.006846 -7424.626748  12.329981   79.263743       -0.000211     1.0     -7527.924926         False          False    True
7   -7319.140542   -7345.355580  12641.510074 -7319.140542   93.156224 -7345.355580  12.329981   13.885057        0.000000     1.0     -7527.924926         False          False    True
8   -7217.397440   -7331.462891  12641.510074 -7217.397440  115.628160 -7331.462891  12.337405  101.728046        1.735679     1.0     -7527.924926         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=201061/115840.[0m
[08/15 13:05:38]  --------------------------------------------------------------------------------
[08/15 13:05:38]  Iteration: 111 (7 solution, 103 counterexamples)
[08/15 13:06:07]  Generator returned sat in 24.979937 secs.
[08/15 13:06:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:06:08]  Improved gap from 0.000625 to 23.4375
[08/15 13:06:08]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/15 13:06:08]  Verifer returned sat in 1.386798 secs.
[08/15 13:06:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -7615.607178   -7715.606201  12325.645752 -7615.607178    0.001465 -7715.606201    0.001221   99.997803       99.997803     1.0     -7715.606201            -1             -1     -1
1   -7615.603760   -7615.607422  12325.645752 -7615.603760  100.001221 -7615.607422    0.001221    0.002441        0.001221     1.0     -7715.606201         False          False   True
2   -7615.603760   -7615.606201  12325.645752 -7615.603760    0.001465 -7615.606201    0.001221    0.001221      -99.998779     2.0     -7615.604980         False          False   True
3   -7415.602295   -7515.604248  12325.645752 -7415.602295  200.002686 -7515.604248    0.001221  100.000732        0.002686     1.0     -7615.604980         False           True  False
4   -7315.601074   -7315.614746  12325.645752 -7315.601074  200.001953 -7315.614746    0.002441    0.011230        0.002686     1.0     -7615.604980         False          False  False
5   -7315.601074   -7315.606201  12402.208252 -7315.601074    0.010000 -7315.606201    0.002441    0.002686      -23.434814     2.0     -7615.604980         False          False   True
6   -7015.603760   -7215.605957  12402.208252 -7015.603760  300.000000 -7215.605957  176.562256   23.439941        0.002686     1.0     -7192.166016          True           True  False
7   -7015.603760   -7192.168457  12478.763184 -7015.603760    0.010000 -7192.168457  176.562256    0.002441      -23.442383     2.0     -7192.166016         False          False   True
8   -6892.159912   -7168.723389  12478.763184 -6892.159912  123.446289 -7168.723389  176.562256  100.001221        0.001465     1.0     -7192.166016         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=2, buffer=11/4096.[0m
[08/15 13:06:09]  --------------------------------------------------------------------------------
[08/15 13:06:09]  Iteration: 112 (7 solution, 104 counterexamples)
[08/15 13:06:29]  Generator returned sat in 16.719153 secs.
[08/15 13:06:29]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:06:30]  Improved gap from 0.0 to 0
[08/15 13:06:31]  Improved number of small numbers from 63 to 95 out of a max of 114
[08/15 13:06:31]  Verifer returned sat in 2.232313 secs.
[08/15 13:06:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -7392.187744   -7392.189453  12002.229004 -7392.187744    0.001465 -7392.189453        0.0    0.001709        0.001709     3.0     -7392.189453            -1             -1   False
1   -7392.187744   -7392.189453  12102.227295 -7392.187744    0.000732 -7392.189453        0.0    0.001709        0.000000     3.0     -7392.187744         False          False   False
2   -7392.186768   -7392.187624  12202.226318 -7392.186768    0.002686 -7392.187624        0.0    0.000856        0.000000     1.0     -7392.187744         False          False   False
3   -7192.186790   -7292.187744  12202.226318 -7192.186790  200.000833 -7292.187744        0.0  100.000954       99.999977     1.0     -7392.187744         False          False   False
4   -7192.186790   -7292.186768  12202.226341 -7192.186790    0.010000 -7292.186768        0.0   99.999977        0.000000     2.0     -7392.187744         False          False   False
5   -7192.186790   -7192.186790  12302.217285 -7192.186790    0.010000 -7192.186790        0.0    0.000000       -0.009056     3.0     -7392.187744         False          False   False
6   -7192.176790   -7192.177624  12402.216309 -7192.176790    0.010000 -7192.177624        0.0    0.000833       -0.000033     1.0     -7392.187744         False          False   False
7   -7192.167624   -7192.168457  12502.207031 -7192.167624    0.010000 -7192.168457        0.0    0.000833       -0.000143     1.0     -7392.187744         False          False   False
8   -7192.158457   -7192.166748  12502.207275 -7192.158457    0.010000 -7192.166748        0.0    0.008291      -99.990732     1.0     -7392.187744         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=100.[0m
[08/15 13:06:32]  --------------------------------------------------------------------------------
[08/15 13:06:32]  Iteration: 113 (7 solution, 105 counterexamples)
[08/15 13:06:46]  Generator returned sat in 10.571247 secs.
[08/15 13:06:46]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:06:46]  Improved number of small numbers from 71 to 113 out of a max of 113
[08/15 13:06:46]  Verifer returned sat in 0.282615 secs.
[08/15 13:06:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -7392.137939   -8091.237793  12502.207031 -7392.137939  599.149902 -8091.237793   0.000000  699.099854      699.099854     7.0     -8091.237793            -1             -1   False
1   -7392.137939   -7991.237793  12502.207031 -7392.137939  599.150146 -7991.237793   0.000000  599.099854      599.099854     7.0     -8091.237793         False          False   False
2   -7392.087646   -7893.137695  12502.207031 -7392.087646  599.150146 -7893.137695   0.000000  501.050049      499.150146     8.0     -8091.237793         False          False   False
3   -7192.087646   -7791.287842  12502.207031 -7192.087646  701.050049 -7791.287842   0.050049  599.150146      599.100098     9.0     -8091.237793         False          False   False
4   -7091.187744   -7791.237793  12502.207031 -7091.187744  700.050049 -7791.237793   0.949951  699.100098      599.100098     8.0     -7092.137695          True           True    True
5   -7091.187744   -7592.137695  12502.207031 -7091.187744  699.050049 -7592.137695   0.949951  500.000000      499.100098     9.0     -7092.137695         False          False    True
6   -6891.137695   -7591.137939  12502.207031 -6891.137695  700.050049 -7591.137939   1.000000  699.000244      599.100098     8.0     -7092.137695         False           True   False
7   -6891.087891   -7392.137939  12502.207031 -6891.087891  699.050049 -7392.137939   1.000000  500.050049      499.149902     9.0     -7092.137695         False          False    True
8   -6691.087891   -7291.237793  12502.207031 -6691.087891  700.050049 -7291.237793   1.049805  599.100098      599.100098     6.0     -7092.137695         False           True   False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=3, buffer=1226957/2048.[0m
[08/15 13:06:47]  --------------------------------------------------------------------------------
[08/15 13:06:47]  Iteration: 114 (7 solution, 106 counterexamples)
[08/15 13:07:15]  Generator returned sat in 24.348891 secs.
[08/15 13:07:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:07:15]  Improved gap from 0.0001923076923076923 to 100
[08/15 13:07:15]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:07:15]  Verifer returned sat in 0.636799 secs.
[08/15 13:07:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8141.057617   -8340.957764  12502.207031 -8141.057617    0.100098 -8340.957764    0.000000  199.900146       99.900146     1.0     -8340.957764            -1             -1   False
1   -8141.057617   -8240.957520  12502.207031 -8141.057617    0.100098 -8240.957520    0.000000   99.899902       -0.099854     2.0     -8340.957764         False          False   False
2   -8042.257568   -8140.957520  12502.207031 -8042.257568  198.699951 -8140.957520    0.000000   98.699951       -1.299805     1.0     -8340.957764         False          False   False
3   -7942.257568   -8038.357666  12502.207031 -7942.257568  198.699951 -8038.357666    0.000000   96.100098       -1.299805     1.0     -8340.957764         False          False   False
4   -7840.657715   -7840.957764  12502.207031 -7840.657715  197.699951 -7840.957764    0.100098    0.199951        0.199951     1.0     -8340.957764         False          False   False
5   -7644.157715   -7836.557617  12502.207031 -7644.157715  196.699951 -7836.557617   96.600098   95.799805        0.199951     1.0     -8340.957764         False          False    True
6   -7544.257568   -7640.957764  12502.207031 -7544.257568  195.699951 -7640.957764   96.600098    0.100098        0.100098     1.0     -8340.957764         False          False    True
7   -7345.657715   -7540.957764  12502.207031 -7345.657715  198.699951 -7540.957764  195.100098    0.199951        0.199951     1.0     -8340.957764         False          False    True
8   -7148.157715   -7540.657715  12502.207031 -7148.157715  197.699951 -7540.657715  292.600098   99.899902        0.199951     1.0     -8340.957764         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=819/4096.[0m
[08/15 13:07:16]  --------------------------------------------------------------------------------
[08/15 13:07:16]  Iteration: 115 (7 solution, 107 counterexamples)
[08/15 13:07:26]  Generator returned sat in 7.094293 secs.
[08/15 13:07:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:07:29]  Improved gap from 0.0 to 100
[08/15 13:07:30]  Improved number of small numbers from 60 to 78 out of a max of 114
[08/15 13:07:30]  Verifer returned sat in 2.852852 secs.
[08/15 13:07:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -7340.660156   -8040.145978  12301.295246 -7340.660156    0.099854 -8040.145978        0.0  699.485822      699.385822     3.0     -8040.145978            -1             -1    True
1   -7340.660156   -8040.045978  12301.295246 -7340.660156    0.100098 -8040.045978        0.0  699.385822      599.385822     3.0     -8040.145978         False          False    True
2   -7340.660156   -7940.045978  12301.295246 -7340.660156  699.285714 -7940.045978        0.0  599.385822      499.385822     4.0     -8040.145978         False          False    True
3   -7340.660156   -7840.045978  12301.295246 -7340.660156  599.385714 -7840.045978        0.0  499.385822      399.385822     5.0     -7340.660156         False          False    True
4   -7340.660156   -7640.045978  12301.295246 -7340.660156  400.742857 -7640.045978        0.0  299.385822      299.385822     6.0     -7340.660156         False          False    True
5   -7238.674549   -7540.045978  12301.295246 -7238.674549  401.371429 -7540.045978        0.0  301.371429      301.371429     7.0     -7340.660156         False          False    True
6   -7138.360264   -7440.245978  12301.295246 -7138.360264  401.685714 -7440.245978        0.0  301.885714      301.685714     8.0     -7340.660156         False          False    True
7   -7038.503121   -7340.660264  12301.295246 -7038.503121  401.742857 -7340.660264        0.0  302.157143      301.542857     9.0     -7340.660156         False          False    True
8   -6939.917407   -7340.045898  12301.295246 -6939.917407  400.742857 -7340.045898        0.0  400.128492      300.128571     4.0     -7340.660156         False           True   False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=20982/35.[0m
[08/15 13:07:30]  --------------------------------------------------------------------------------
[08/15 13:07:30]  Iteration: 116 (7 solution, 108 counterexamples)
[08/15 13:08:05]  Generator returned sat in 31.210424 secs.
[08/15 13:08:05]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:08:15]  Improved gap from 0.0 to 0
[08/15 13:08:15]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:08:15]  Verifer returned sat in 9.897651 secs.
[08/15 13:08:15]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -7738.724609   -8238.624512  12301.295166 -7738.724609  400.000000 -8238.624512        0.0  499.899902      399.899902     2.0     -8238.624512            -1             -1   False
1   -7738.724609   -8038.624512  12301.295166 -7738.724609  399.950000 -8038.624512        0.0  299.899902      299.899902     2.0     -7738.724609         False          False   False
2   -7638.724365   -7938.624512  12301.295166 -7638.724365  399.900146 -7938.624512        0.0  299.900146      299.900146     3.0     -7638.724365         False          False   False
3   -7637.574707   -7938.624512  12301.295166 -7637.574707  301.049805 -7938.624512        0.0  301.049805      201.049805     3.0     -7637.574707         False          False   False
4   -7637.574707   -7738.724365  12301.295166 -7637.574707    1.000000 -7738.724365        0.0  101.149658      101.049805     3.0     -7637.574707         False          False   False
5   -7637.574707   -7638.674316  12301.295166 -7637.574707    1.000000 -7638.674316        0.0    1.099609        1.049805     3.0     -7637.574707         False          False   False
6   -7637.574707   -7638.624512  12400.245361 -7637.574707    1.000000 -7638.624512        0.0    1.049805        0.000000     4.0     -7637.574707         False          False   False
7   -7637.574707   -7637.574707  12500.245117 -7637.574707    1.000000 -7637.574707        0.0    0.000000       -0.000244     5.0     -7637.574707         False          False   False
8   -7636.574707   -7637.524658  12500.245361 -7636.574707    1.000000 -7637.524658        0.0    0.949951      -99.000000     1.0     -7637.574707         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=5999/20.[0m
[08/15 13:08:16]  --------------------------------------------------------------------------------
[08/15 13:08:16]  Iteration: 117 (7 solution, 109 counterexamples)
[08/15 13:08:31]  Generator returned sat in 12.157607 secs.
[08/15 13:08:31]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:08:32]  Improved gap from 0.0 to 100
[08/15 13:08:32]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/15 13:08:32]  Verifer returned sat in 0.805326 secs.
[08/15 13:08:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8019.458008   -8119.758057  12282.328369 -8019.458008    0.099854 -8119.758057    0.000000  100.300049      100.199951     2.0     -8119.758057            -1             -1   False
1   -7919.458008   -8119.657715  12282.328369 -7919.458008  200.300049 -8119.657715   99.999756  100.199951        0.200195     2.0     -8119.758057         False          False   False
2   -7819.458008   -8019.657715  12282.328369 -7819.458008  200.199951 -8019.657715   99.999756  100.199951        0.200195     3.0     -7919.457764         False          False    True
3   -7719.557861   -7898.380127  12282.328369 -7719.557861  200.100098 -7898.380127   99.999756   78.822510        0.100342     1.0     -7819.557617         False           True   False
4   -7686.691406   -7786.791016  12282.328369 -7686.691406  111.688965 -7786.791016   99.999756    0.099854      -67.033203     1.0     -7819.557617         False          False   False
5   -7519.357910   -7685.791016  12282.328369 -7519.357910  167.433350 -7685.791016  100.099854   66.333252        0.200195     1.0     -7819.557617         False          False   False
6   -7419.257812   -7584.791260  12282.328369 -7419.257812  166.433350 -7584.791260  100.199951   65.333496        0.200195     1.0     -7819.557617         False          False    True
7   -7319.157959   -7483.791016  12282.328369 -7319.157959  165.433350 -7483.791016  100.299805   64.333252        0.200195     1.0     -7819.557617         False          False    True
8   -7219.057861   -7319.657959  12282.328369 -7219.057861  164.433350 -7319.657959  100.399902    0.200195        0.200195     1.0     -7819.557617         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=205/1024.[0m
[08/15 13:08:33]  --------------------------------------------------------------------------------
[08/15 13:08:33]  Iteration: 118 (7 solution, 110 counterexamples)
[08/15 13:08:48]  Generator returned sat in 11.556974 secs.
[08/15 13:08:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:08:49]  Improved number of small numbers from 31 to 113 out of a max of 113
[08/15 13:08:49]  Verifer returned sat in 0.663083 secs.
[08/15 13:08:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8431.000244   -8531.900146  12694.570557 -8431.000244    0.099854 -8531.900146   0.000000  100.899902      100.899902     3.0     -8531.900146            -1             -1   False
1   -8231.950195   -8431.900391  12694.570557 -8231.950195  299.949951 -8431.900391   0.000000  199.950195      199.949951     3.0     -8531.900146         False          False   False
2   -8231.950195   -8430.950195  12694.570557 -8231.950195    0.050049 -8430.950195   0.000000  199.000000       99.949951     2.0     -8231.950195         False          False   False
3   -7832.850586   -8231.900146  12694.570557 -7832.850586  598.099609 -8231.900146  98.949951  300.099609      300.099609     1.0     -8231.950195         False          False   False
4   -7832.850586   -8231.050293  12694.570557 -7832.850586  300.049805 -8231.050293  98.949951  299.249756      200.099609     2.0     -8231.950195         False          False    True
5   -7832.850586   -8031.900146  12694.570557 -7832.850586  201.850098 -8031.900146  98.949951  100.099609      100.099609     3.0     -8231.950195         False          False    True
6   -7532.900146   -8031.900146  12694.570557 -7532.900146  400.050049 -8031.900146  98.949951  400.050049      300.050049     3.0     -8231.950195         False          False    True
7   -7532.900146   -7831.900391  12694.570557 -7532.900146  201.000000 -7831.900391  98.949951  200.050293      200.050049     2.0     -8231.950195         False          False    True
8   -7332.800537   -7731.900391  12694.570557 -7332.800537  400.149902 -7731.900391  99.000000  300.099854      300.099609     3.0     -8231.950195         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=153651/512.[0m
[08/15 13:08:49]  --------------------------------------------------------------------------------
[08/15 13:08:49]  Iteration: 119 (7 solution, 111 counterexamples)
[08/15 13:09:05]  Generator returned sat in 12.683135 secs.
[08/15 13:09:06]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:09:08]  Improved gap from 0.0 to 12.5
[08/15 13:09:08]  Improved number of small numbers from 82 to 114 out of a max of 114
[08/15 13:09:08]  Verifer returned sat in 2.659052 secs.
[08/15 13:09:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -7775.500488   -7982.700439  12045.370850 -7775.500488    0.099854 -7982.700439        0.0  207.199951      107.200195     2.0     -7982.700439            -1             -1   False
1   -7775.500488   -7882.700684  12045.370850 -7775.500488  207.100000 -7882.700684        0.0  107.200195        7.200195     2.0     -7982.700439         False          False   False
2   -7775.300781   -7775.400635  12045.370850 -7775.300781  107.399902 -7775.400635        0.0    0.099854      -92.600098     1.0     -7775.300781         False          False   False
3   -7345.400635   -7682.700439  12045.370850 -7345.400635  430.000000 -7682.700439        0.0  337.299805      237.300049     1.0     -7775.300781         False          False   False
4   -7345.400635   -7482.700684  12045.370850 -7345.400635  214.000000 -7482.700684        0.0  137.300049      137.300049     2.0     -7775.300781         False          False   False
5   -7345.400635   -7397.500732  12045.370850 -7345.400635  106.000000 -7397.500732        0.0   52.100098       37.300049     3.0     -7775.300781         False          False   False
6   -7345.400635   -7357.800781  12107.970947 -7345.400635   52.000000 -7357.800781        0.0   12.400146       -0.099854     4.0     -7775.300781         False          False   False
7   -7332.800781   -7345.300781  12195.470947 -7332.800781   25.000000 -7345.300781        0.0   12.500000        0.000000     1.0     -7775.300781         False          False   False
8   -7332.800781   -7332.800781  12195.470947 -7332.800781   11.500000 -7332.800781        0.0    0.000000     -100.000000     2.0     -7775.300781         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=486195/2048.[0m
[08/15 13:09:09]  --------------------------------------------------------------------------------
[08/15 13:09:09]  Iteration: 120 (7 solution, 112 counterexamples)
[08/15 13:09:25]  Generator returned sat in 12.883056 secs.
[08/15 13:09:26]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:09:26]  Improved number of small numbers from 104 to 113 out of a max of 113
[08/15 13:09:26]  Verifer returned sat in 0.434489 secs.
[08/15 13:09:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8229.950928   -8329.875781  12492.545898 -8229.950928   99.999756 -8329.875781    0.000000   99.924854       99.924805     6.0     -8329.875781            -1             -1   False
1   -8229.900781   -8229.926025  12492.545898 -8229.900781   99.975000 -8229.926025    0.000000    0.025244       -0.025049     1.0     -8229.900781         False          False   False
2   -8229.850830   -8229.875732  12492.545898 -8229.850830    0.075195 -8229.875732    0.000000    0.024902      -99.975098     1.0     -8229.850830         False          False   False
3   -8027.975830   -8029.875732  12492.545898 -8027.975830  201.899902 -8029.875732    0.000000    1.899902        1.899902     1.0     -8229.850830         False          False   False
4   -7927.925781   -7930.825684  12492.545898 -7927.925781  101.949951 -7930.825684    0.024902    2.875000        1.925049     1.0     -8229.850830         False          False   False
5   -7829.850830   -7829.900635  12492.545898 -7829.850830  100.949951 -7829.900635    0.024902    0.024902        0.000000     1.0     -8229.850830         False          False    True
6   -7629.888184   -7729.875977  12492.545898 -7629.888184  199.987549 -7729.875977   98.062500    1.925293        1.925049     1.0     -8229.850830         False          False    True
7   -7432.825928   -7725.913086  12492.545898 -7432.825928  198.987549 -7725.913086  195.124756   97.962402        1.925049     1.0     -8229.850830         False          False    True
8   -7332.800781   -7629.875732  12492.545898 -7332.800781  197.987549 -7629.875732  195.149902  101.925049        1.925049     2.0     -8229.850830         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=7885/4096.[0m
[08/15 13:09:27]  --------------------------------------------------------------------------------
[08/15 13:09:27]  Iteration: 121 (7 solution, 113 counterexamples)
[08/15 13:09:36]  Generator returned sat in 6.191428 secs.
[08/15 13:09:37]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:09:37]  Improved number of small numbers from 41 to 113 out of a max of 113
[08/15 13:09:37]  Verifer returned sat in 0.355684 secs.
[08/15 13:09:37]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8229.951172   -8331.891113  12490.626953 -8229.951172  101.974854 -8331.891113    0.018555  101.921387       97.987061     1.0     -8331.891113            -1             -1   False
1   -8229.900879   -8229.922363  12490.626953 -8229.900879  101.971680 -8229.922363    0.018555    0.002930       -1.962646     1.0     -8229.919434         False          False   False
2   -8127.935059   -8225.938232  12490.626953 -8127.935059  101.968750 -8225.938232    0.018555   97.984619        0.003174     1.0     -8127.953613         False          False   False
3   -8027.928955   -8124.938232  12490.626953 -8027.928955  197.990723 -8124.938232    0.021729   96.987549        0.006104     1.0     -8127.953613         False          False   False
4   -7927.925781   -8023.944580  12490.626953 -7927.925781  196.990723 -8023.944580    0.024902   95.993896        0.006104     1.0     -8127.953613         False          False    True
5   -7827.928955   -7827.956787  12490.626953 -7827.928955  195.990723 -7827.956787    0.024902    0.002930        0.002930     1.0     -8127.953613         False          False    True
6   -7628.941162   -7729.826172  12490.626953 -7628.941162  198.990723 -7729.826172   99.009521    1.875488        0.006104     1.0     -8127.953613         False          False    True
7   -7432.825928   -7724.916260  12490.626953 -7432.825928  197.990723 -7724.916260  195.124756   96.965576        0.006104     1.0     -8127.953613         False          False    True
8   -7332.800781   -7627.956787  12490.626953 -7332.800781  196.990723 -7627.956787  195.149902  100.006104        0.006104     2.0     -8127.953613         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=25/4096.[0m
[08/15 13:09:38]  --------------------------------------------------------------------------------
[08/15 13:09:38]  Iteration: 122 (7 solution, 114 counterexamples)
[08/15 13:09:57]  Generator returned sat in 15.976274 secs.
[08/15 13:09:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:09:58]  Improved gap from 0.0008333333333333334 to 48.4375
[08/15 13:09:58]  Improved number of small numbers from 66 to 114 out of a max of 114
[08/15 13:09:58]  Verifer returned sat in 1.098288 secs.
[08/15 13:09:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -8329.900879   -8629.301025  12791.970947 -8329.900879    0.100000 -8629.301025    0.100098  299.300049      299.299805     8.0     -8629.301025            -1             -1     -1
1   -8229.900879   -8629.300781  12791.970947 -8229.900879  399.300049 -8629.300781  100.100098  299.299805      199.299805     8.0     -8629.301025         False          False   True
2   -8130.000732   -8429.301025  12791.970947 -8130.000732  399.199951 -8429.301025  100.100098  199.200195      199.199951     9.0     -8230.100830         False          False   True
3   -8130.000732   -8329.901123  12791.970947 -8130.000732   55.024902 -8329.901123  100.100098   99.800293       99.199951     2.0     -8230.100830         False           True  False
4   -8130.000732   -8230.200684  12791.970947 -8130.000732   54.024902 -8230.200684  100.100098    0.099854       -0.800049     3.0     -8230.100830         False          False  False
5   -8077.075684   -8229.300781  12839.845947 -8077.075684   53.024902 -8229.300781  100.100098   52.125000        0.000000     1.0     -8230.100830         False          False  False
6   -8077.075684   -8177.175781  12891.408447 -8077.075684   52.024902 -8177.175781  100.100098    0.000000      -48.437500     2.0     -8230.100830         False          False  False
7   -8026.050781   -8128.738281  12942.970947 -8026.050781   51.024902 -8128.738281  100.100098    2.587402      -45.850098     1.0     -8230.100830         False          False  False
8   -7978.613281   -8080.300781  12994.533447 -7978.613281   50.024902 -8080.300781  100.100098    1.587402      -46.850098     1.0     -8230.100830         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=0, buffer=204083/1024.[0m
[08/15 13:09:59]  --------------------------------------------------------------------------------
[08/15 13:09:59]  Iteration: 123 (7 solution, 115 counterexamples)
[08/15 13:10:35]  Generator returned sat in 32.789642 secs.
[08/15 13:10:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:10:37]  Improved gap from 0.0 to 100
[08/15 13:10:38]  Improved number of small numbers from 56 to 70 out of a max of 114
[08/15 13:10:38]  Verifer returned sat in 2.222111 secs.
[08/15 13:10:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -8216.148438   -8417.073477  12791.970947 -8216.148438  200.825000 -8417.073477   0.100098  200.824941      199.899941     2.0     -8417.073477            -1             -1     -1
1   -8216.148438   -8317.473477  12791.970947 -8216.148438  200.774902 -8317.473477   0.100098  101.224941       99.899941     2.0     -8216.248535         False          False   True
2   -8116.648379   -8216.198242  12791.970947 -8116.648379  200.725000 -8216.198242   0.100098   99.449766       99.400000     1.0     -8116.748477         False          False   True
3   -8116.648379   -8216.148477  12791.970947 -8116.648379    0.050000 -8216.148477   0.100098   99.400000       -0.600000     2.0     -8116.748477         False          False   True
4   -8016.098379   -8016.248477  12791.970947 -8016.098379  199.950000 -8016.248477   0.100098    0.050000       -0.050000     1.0     -8116.748477         False          False   True
5   -7615.948379   -8016.148438  12791.970947 -7615.948379  400.200000 -8016.148438   0.150098  400.049961      300.050000     1.0     -8116.748477         False          False   True
6   -7615.948379   -7816.148477  12791.970947 -7615.948379  199.100000 -7816.148477   0.150098  200.050000      200.050000     2.0     -8116.748477         False          False   True
7   -7317.448379   -7716.148682  12791.970947 -7317.448379  498.550000 -7716.148682  98.650098  300.050205      300.050000     3.0     -8116.748477         False          False   True
8   -7317.448379   -7716.148438  12791.970947 -7317.448379  248.275000 -7716.148438  98.650098  300.049961      200.050000     4.0     -7416.098477          True           True   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=6001/20.[0m
[08/15 13:10:39]  --------------------------------------------------------------------------------
[08/15 13:10:39]  Iteration: 124 (7 solution, 116 counterexamples)
[08/15 13:10:54]  Generator returned sat in 11.375950 secs.
[08/15 13:10:54]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:10:55]  Improved gap from 0.0 to 35.9375
[08/15 13:10:55]  Improved number of small numbers from 112 to 114 out of a max of 114
[08/15 13:10:55]  Verifer returned sat in 1.572439 secs.
[08/15 13:10:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8381.548340   -8381.648438  12791.970947 -8381.548340  128.124756 -8381.648438        0.0   0.100098      -28.024658     2.0     -8381.648438            -1             -1   False
1   -8253.623291   -8323.073437  12791.970947 -8253.623291  128.025146 -8323.073437        0.0  69.450146       -0.099609     1.0     -8253.623291         False          False   False
2   -8216.248438   -8253.523438  12854.595703 -8216.248438  106.825000 -8253.523438        0.0  37.275000       -0.100000     1.0     -8216.248438         False          False   False
3   -8171.873438   -8216.148438  12910.220947 -8171.873438   81.650000 -8216.148438        0.0  44.275000       -0.099756     1.0     -8171.873438         False          False   False
4   -8134.398438   -8171.773438  12972.845703 -8134.398438   81.750000 -8171.773438        0.0  37.375000        0.000000     1.0     -8171.873438         False          False   False
5   -8097.123438   -8134.398438  13035.470703 -8097.123438   74.650000 -8134.398438        0.0  37.275000       -0.100000     2.0     -8171.873438         False          False   False
6   -8075.835938   -8097.023438  13098.095703 -8075.835938   58.562500 -8097.023438        0.0  21.187500      -16.187500     1.0     -8171.873438         False          False   False
7   -8038.460938   -8059.648438  13160.321045 -8038.460938   58.562500 -8059.648438        0.0  21.187500      -16.587158     1.0     -8171.873438         False          False   False
8   -8004.585938   -8021.873438  13160.321045 -8004.585938   55.062500 -8021.873438        0.0  17.287500      -82.712158     1.0     -8171.873438         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=819/4096.[0m
[08/15 13:10:56]  --------------------------------------------------------------------------------
[08/15 13:10:56]  Iteration: 125 (7 solution, 117 counterexamples)
[08/15 13:11:23]  Generator returned sat in 22.791900 secs.
[08/15 13:11:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:11:24]  Improved gap from 5.109375 to 100
[08/15 13:11:24]  Improved number of small numbers from 114 to 114 out of a max of 114
[08/15 13:11:24]  Verifer returned sat in 1.183699 secs.
[08/15 13:11:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8534.973438   -8535.023438  12873.470703 -8534.973438    200.20 -8535.023438       0.00     0.05          -99.95     2.0     -8535.023438            -1             -1    True
1   -8334.873438   -8335.023438  12873.470703 -8334.873438    200.15 -8335.023438       0.05     0.10            0.10     1.0     -8334.923437         False          False    True
2   -8134.823438   -8334.873438  12873.470703 -8134.823438    200.15 -8334.873438     100.10    99.95            0.10     1.0     -8334.923437         False          False    True
3   -8085.173437   -8185.323438  12873.470703 -8085.173437    149.60 -8185.323438     100.10     0.05          -50.25     1.0     -8185.273438         False          False    True
4   -7911.373438   -8107.723437  12873.470703 -7911.373438    173.85 -8107.723437     123.55    72.80            0.10     1.0     -8185.273438         False          False    True
5   -7811.323438   -7935.023438  12873.470703 -7811.323438    172.85 -7935.023438     123.60     0.10            0.10     1.0     -8185.273438         False          False    True
6   -7639.573438   -7905.823438  12873.470703 -7639.573438    171.85 -7905.823438     195.35    70.90            0.10     1.0     -8185.273438         False          False    True
7   -7539.623438   -7758.023438  12873.470703 -7539.623438    170.85 -7758.023438     195.35    23.05            0.05     1.0     -8185.273438         False          False    True
8   -7388.823438   -7635.023438  12873.470703 -7388.823438    173.85 -7635.023438     246.10     0.10            0.10     1.0     -8185.273438         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=4, buffer=1/10.[0m
[08/15 13:11:25]  --------------------------------------------------------------------------------
[08/15 13:11:25]  Iteration: 126 (7 solution, 118 counterexamples)
[08/15 13:11:38]  Generator returned sat in 9.296915 secs.
[08/15 13:11:38]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:11:39]  Improved gap from 0.0 to 23.4375
[08/15 13:11:39]  Improved number of small numbers from 80 to 114 out of a max of 114
[08/15 13:11:39]  Verifer returned sat in 1.114124 secs.
[08/15 13:11:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -9093.848389   -9196.573486  12873.470703 -9093.848389  200.199707 -9196.573486    0.100098  102.625000      102.625000     3.0     -9196.573486            -1             -1     -1
1   -9093.648438   -9196.573486  12873.470703 -9093.648438  102.824951 -9196.573486    0.100098  102.824951        2.824951     3.0     -9093.748535         False           True   True
2   -9093.648438   -9093.848633  12873.470703 -9093.648438  102.725098 -9093.848633    0.100098    0.100098      -97.175049     2.0     -9093.748535         False           True  False
3   -8341.748535   -8896.573730  12873.470703 -8341.748535  752.000000 -8896.573730  551.900146    2.925049        2.924805     1.0     -9093.748535         False          False  False
4   -7967.673584   -8796.573730  12873.470703 -7967.673584  377.000000 -8796.573730  825.975098    2.925049        2.924805     1.0     -9093.748535         False          False   True
5   -7781.098633   -8789.198486  12873.470703 -7781.098633  189.500000 -8789.198486  912.550049   95.549805        2.924805     1.0     -9093.748535         False          False   True
6   -7780.898438   -8693.548340  12947.008057 -7780.898438   95.750000 -8693.548340  912.550049    0.099854      -23.337646     1.0     -9093.748535         False          False   True
7   -7734.123291   -8670.110840  13023.570557 -7734.123291   46.875000 -8670.110840  912.550049   23.437500        0.000000     1.0     -9093.748535         False          False   True
8   -7734.123291   -8646.673340  13023.570557 -7734.123291   22.437500 -8646.673340  912.550049    0.000000     -100.000000     2.0     -9093.748535         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=2995/1024.[0m
[08/15 13:11:40]  --------------------------------------------------------------------------------
[08/15 13:11:40]  Iteration: 127 (7 solution, 119 counterexamples)
[08/15 13:11:48]  Generator returned sat in 4.173551 secs.
[08/15 13:11:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:11:49]  Improved gap from 23.4375 to 23.4375
[08/15 13:11:49]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:11:49]  Verifer returned sat in 1.191281 secs.
[08/15 13:11:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -10892.063965  -10992.363770  12799.870605 -10892.063965  100.200195 -10992.363770    0.099854  100.199951        0.199951     2.0    -10992.363770            -1             -1     -1
1  -10892.063965  -10892.263672  12799.870605 -10892.063965  100.099854 -10892.263672    0.099854    0.099854      -99.800049     2.0    -10892.163818         False          False   True
2  -10792.163818  -10792.363525  12799.870605 -10792.163818  100.000000 -10792.363525    0.099854    0.099854      -99.899902     1.0    -10792.263672         False          False   True
3   -9984.263672  -10692.363525  12799.870605  -9984.263672  808.000000 -10692.363525  607.899902  100.199951        0.200195     1.0    -10792.263672         False          False   True
4   -9680.463623  -10492.363770  12799.870605  -9680.463623  404.000000 -10492.363770  811.699951    0.200195        0.200195     1.0    -10792.263672         False          False   True
5   -9478.663818  -10492.263672  12799.870605  -9478.663818  202.000000 -10492.263672  913.499756  100.100098        0.200195     2.0    -10792.263672         False          False   True
6   -9477.763916  -10392.063721  12873.408203  -9477.763916  101.000000 -10392.063721  913.499756    0.800049      -25.362305     1.0    -10792.263672         False          False   True
7   -9429.063965  -10365.901123  12949.970459  -9429.063965   49.500000 -10365.901123  913.499756   23.337402       -0.100098     1.0    -10792.263672         False          False   True
8   -9428.651367  -10342.463623  13026.532959  -9428.651367   23.750000 -10342.463623  913.499756    0.312500      -23.125000     1.0    -10792.263672         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=2, buffer=205/1024.[0m
[08/15 13:11:50]  --------------------------------------------------------------------------------
[08/15 13:11:50]  Iteration: 128 (7 solution, 120 counterexamples)
[08/15 13:12:05]  Generator returned sat in 11.723848 secs.
[08/15 13:12:05]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:12:08]  Improved gap from 0.0 to 17.1875
[08/15 13:12:08]  Improved number of small numbers from 67 to 114 out of a max of 114
[08/15 13:12:08]  Verifer returned sat in 2.665041 secs.
[08/15 13:12:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -7998.463867   -8421.826416  13031.140625 -7998.463867    0.100000 -8421.826416   0.099854  423.262695      423.262451     6.0     -8421.826416            -1             -1     -1
1   -7998.463867   -8421.826172  13031.140625 -7998.463867    0.100000 -8421.826172   0.099854  423.262451      323.262451     5.0     -8421.826416         False          False   True
2   -7898.563965   -8321.826172  13031.140625 -7898.563965  523.162354 -8321.826172   0.099854  423.162354      323.162354     5.0     -8421.826416         False          False   True
3   -7898.563965   -8176.826416  13031.140625 -7898.563965  423.062500 -8176.826416   0.099854  278.162598      223.162354     6.0     -7898.663818         False          False   True
4   -7898.563965   -8022.263672  13031.140625 -7898.563965  245.000000 -8022.263672   0.099854  123.599854      123.162354     7.0     -7898.663818         False          False   True
5   -7898.563965   -7952.401123  13031.140625 -7898.563965  123.500000 -7952.401123   0.099854   53.737305       23.162354     4.0     -7898.663818         False           True  False
6   -7889.551270   -7921.826172  13098.965576 -7889.551270   62.750000 -7921.826172   0.099854   32.175049        0.000000     5.0     -7898.663818         False          False  False
7   -7889.351318   -7889.551270  13181.678223 -7889.351318   32.375000 -7889.551270   0.099854    0.100098      -17.087402     1.0     -7898.663818         False          False  False
8   -7872.263916   -7872.363770  13181.678223 -7872.263916   17.187500 -7872.363770   0.099854    0.000000     -100.000000     1.0     -7898.663818         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=331021/1024.[0m
[08/15 13:12:09]  --------------------------------------------------------------------------------
[08/15 13:12:09]  Iteration: 129 (7 solution, 121 counterexamples)
[08/15 13:12:27]  Generator returned sat in 14.420142 secs.
[08/15 13:12:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:12:28]  Improved gap from 0.0 to 100
[08/15 13:12:28]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:12:28]  Verifer returned sat in 0.794426 secs.
[08/15 13:12:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t     wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8452.101318   -8619.267578  13161.31543 -8452.101318    0.100000 -8619.267578    0.000000  167.166260       99.899658     2.0     -8619.267578            -1             -1   False
1   -8452.000977   -8552.000977  13161.31543 -8452.000977  167.266602 -8552.000977    0.000000  100.000000        0.000000     2.0     -8619.267578         False          False   False
2   -8352.101074   -8452.000977  13161.31543 -8352.101074  199.899902 -8452.000977    0.000000   99.899902       -0.100098     2.0     -8619.267578         False          False   False
3   -8351.901123   -8352.000977  13161.31543 -8351.901123  100.099854 -8352.000977    0.000000    0.099854      -99.900146     1.0     -8351.901123         False          False   False
4   -8218.367676   -8218.467773  13161.31543 -8218.367676  133.633301 -8218.467773    0.000000    0.100098      -66.366699     1.0     -8351.901123         False          False   False
5   -8051.701172   -8052.000977  13161.31543 -8051.701172  166.766602 -8052.000977    0.099854    0.199951        0.199951     1.0     -8351.901123         False          False   False
6   -7886.134521   -7952.000977  13161.31543 -7886.134521  165.766602 -7952.000977   65.666504    0.199951        0.199951     1.0     -8351.901123         False          False    True
7   -7721.567871   -7852.000977  13161.31543 -7721.567871  164.766602 -7852.000977  130.233154    0.199951        0.199951     1.0     -8351.901123         False          False    True
8   -7558.001221   -7851.700928  13161.31543 -7558.001221  163.766602 -7851.700928  193.799805   99.899902        0.199951     1.0     -8351.901123         False          False    True
high_util=True, low_loss=False, low_delay=True, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=4, buffer=819/4096.[0m
[08/15 13:12:29]  --------------------------------------------------------------------------------
[08/15 13:12:29]  Iteration: 130 (7 solution, 122 counterexamples)
[08/15 13:13:12]  Generator returned sat in 38.974564 secs.
[08/15 13:13:12]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:13:15]  Improved gap from 0.0008333333333333334 to 15.625
[08/15 13:13:16]  Improved number of small numbers from 59 to 70 out of a max of 114
[08/15 13:13:16]  Verifer returned sat in 4.346419 secs.
[08/15 13:13:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8647.011230   -9047.011123  12861.915430 -8647.011230  400.199951 -9047.011123        0.0  399.999893      399.999893     6.0     -9047.011123            -1             -1    True
1   -8646.911123   -9046.910889  12861.915430 -8646.911123  400.100000 -9046.910889        0.1  399.899766      300.000000     6.0     -8647.011123         False          False    True
2   -8646.911123   -8912.636123  12861.915430 -8646.911123  399.800049 -8912.636123        0.1  265.625000      200.000000     7.0     -8647.011123         False          False    True
3   -8512.836123   -8795.411123  12861.915430 -8512.836123  399.700000 -8795.411123        0.1  282.475000      234.075000     8.0     -8512.936123         False          False    True
4   -8512.836123   -8647.011230  12861.915430 -8512.836123  251.600000 -8647.011230        0.1  134.075107      134.075000     9.0     -8512.936123         False          False    True
5   -8512.836123   -8575.936279  12861.915430 -8512.836123  125.800000 -8575.936279        0.1   63.000156       34.075000     3.0     -8512.936123         False           True   False
6   -8512.836123   -8528.561123  12927.840430 -8512.836123   62.900000 -8528.561123        0.1   15.625000        0.000000     4.0     -8512.936123         False          False   False
7   -8497.011123   -8512.936035  13012.015430 -8497.011123   31.450000 -8512.936035        0.1   15.824912        0.000000     1.0     -8512.936123         False          False   False
8   -8497.011123   -8497.111123  13012.015625 -8497.011123   15.725000 -8497.111123        0.1    0.000000      -99.999805     2.0     -8512.936123         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=300.[0m
[08/15 13:13:17]  --------------------------------------------------------------------------------
[08/15 13:13:17]  Iteration: 131 (7 solution, 123 counterexamples)
[08/15 13:13:28]  Generator returned sat in 7.230972 secs.
[08/15 13:13:28]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:13:37]  Improved gap from 0.0 to 1.5625
[08/15 13:13:38]  Improved number of small numbers from 66 to 72 out of a max of 114
[08/15 13:13:38]  Verifer returned sat in 9.864110 secs.
[08/15 13:13:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8456.801025   -8456.801161  12272.963194 -8456.801025  3.124756 -8456.801161        0.0  0.000136        0.000136     5.0     -8456.801161            -1             -1   False
1   -8453.712619   -8453.749078  12368.348611 -8453.712619  3.088542 -8453.749078        0.0  0.036458       -1.526042     1.0     -8453.712619         False          False   False
2   -8450.660536   -8452.186578  12466.786111 -8450.660536  3.088542 -8452.186578        0.0  1.526042       -0.036458     1.0     -8453.712619         False          False   False
3   -8448.169911   -8450.624078  12564.295654 -8448.169911  4.016667 -8450.624078        0.0  2.454167       -0.036290     1.0     -8453.712619         False          False   False
4   -8446.527203   -8448.133453  12662.689236 -8446.527203  4.096875 -8448.133453        0.0  1.606250        0.000000     1.0     -8453.712619         False          False   False
5   -8444.277203   -8446.490744  12760.439209 -8444.277203  3.856250 -8446.490744        0.0  2.213542       -0.000027     1.0     -8453.712619         False          False   False
6   -8442.714703   -8444.240744  12858.840278 -8442.714703  3.776042 -8444.240744        0.0  1.526042       -0.036458     1.0     -8453.712619         False          False   False
7   -8440.161057   -8442.678244  12956.286865 -8440.161057  4.079688 -8442.678244        0.0  2.517187       -0.036225     1.0     -8453.712619         False          False   False
8   -8438.910796   -8440.124512  12956.286865 -8438.910796  3.767448 -8440.124512        0.0  1.213715      -98.785965     1.0     -8453.712619         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=299/4096.[0m
[08/15 13:13:39]  --------------------------------------------------------------------------------
[08/15 13:13:39]  Iteration: 132 (7 solution, 124 counterexamples)
[08/15 13:13:55]  Generator returned sat in 12.219568 secs.
[08/15 13:13:55]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:13:57]  Improved gap from 0.0 to 35.9375
[08/15 13:13:58]  Improved number of small numbers from 85 to 100 out of a max of 114
[08/15 13:13:58]  Verifer returned sat in 2.497380 secs.
[08/15 13:13:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t   cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0   -8453.712891   -8571.875146  12369.974365 -8453.712891   0.100000 -8571.875146        0.0  118.162256      100.099609     6.0     -8571.875146            -1             -1   False
1   -8453.712891   -8453.812646  12369.974365 -8453.712891   0.050049 -8453.812646        0.0    0.099756        0.099609     2.0     -8453.712891         False          False   False
2   -8417.775146   -8453.662842  12433.887207 -8417.775146  36.037500 -8453.662842        0.0   35.887695       -0.049805     1.0     -8453.712891         False          False   False
3   -8417.675293   -8417.725146  12497.949512 -8417.675293  35.987549 -8417.725146        0.0    0.049854      -35.887646     1.0     -8417.675293         False          False   False
4   -8339.650146   -8381.787646  12555.812012 -8339.650146  78.075000 -8381.787646        0.0   42.137500        0.000000     1.0     -8417.675293         False          False   False
5   -8339.650146   -8339.650146  12619.874512 -8339.650146  37.012500 -8339.650146        0.0    0.000000      -35.937500     2.0     -8417.675293         False          False   False
6   -8281.643799   -8303.712646  12683.937012 -8281.643799  58.006348 -8303.712646        0.0   22.068848      -13.868652     1.0     -8417.675293         False          False   False
7   -8245.706396   -8267.775146  12747.999512 -8245.706396  58.006250 -8267.775146        0.0   22.068750      -13.868750     1.0     -8417.675293         False          False   False
8   -8209.768896   -8231.837646  12747.999512 -8209.768896  58.006250 -8231.837646        0.0   22.068750      -77.931250     1.0     -8417.675293         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=409/4096.[0m
[08/15 13:13:58]  --------------------------------------------------------------------------------
[08/15 13:13:58]  Iteration: 133 (7 solution, 125 counterexamples)
[08/15 13:14:12]  Generator returned sat in 10.268148 secs.
[08/15 13:14:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:14:16]  Improved gap from 0.0249755859375 to 17.1875
[08/15 13:14:17]  Improved number of small numbers from 66 to 114 out of a max of 114
[08/15 13:14:17]  Verifer returned sat in 3.963960 secs.
[08/15 13:14:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   -9513.207275   -9942.557373  13748.386963 -9513.207275  485.807129 -9942.557373   0.000000  429.350098      400.000000     8.0     -9942.557373            -1             -1     -1
1   -9456.750000   -9913.207275  13748.386963 -9456.750000  485.807373 -9913.207275  56.457275  400.000000      300.000000     5.0     -9942.557373         False           True  False
2   -9396.150146   -9813.207275  13748.386963 -9396.150146  460.599854 -9813.207275  56.457275  360.599854      260.599854     5.0     -9452.607422         False          False   True
3   -9396.150146   -9697.557373  13748.386963 -9396.150146  360.550049 -9697.557373  56.457275  244.949951      160.599854     5.0     -9452.607422         False          False   True
4   -9396.100098   -9513.207275  13748.386963 -9396.100098  245.000000 -9513.207275  56.457275   60.649902       60.649902     6.0     -9452.607422         False          False   True
5   -9333.250000   -9452.507324  13748.386963 -9333.250000  123.500000 -9452.507324  56.457275   62.800049       23.500000     1.0     -9452.607422         False           True  False
6   -9333.250000   -9413.207275  13816.062012 -9333.250000   62.750000 -9413.207275  56.457275   23.500000       -8.824951     2.0     -9452.607422         False          False  False
7   -9324.375000   -9380.882324  13898.874512 -9324.375000   32.375000 -9380.882324  56.457275    0.050049      -17.137451     1.0     -9452.607422         False          False  False
8   -9307.237549   -9363.694824  13898.874512 -9307.237549   17.187500 -9363.694824  56.457275    0.000000     -100.000000     1.0     -9452.607422         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=300.[0m
[08/15 13:14:17]  --------------------------------------------------------------------------------
[08/15 13:14:17]  Iteration: 134 (7 solution, 126 counterexamples)
[08/15 13:14:31]  Generator returned sat in 10.072367 secs.
[08/15 13:14:31]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:14:33]  Improved gap from 12.546737670898438 to 23.4375
[08/15 13:14:34]  Improved number of small numbers from 66 to 79 out of a max of 114
[08/15 13:14:34]  Verifer returned sat in 2.548183 secs.
[08/15 13:14:34]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    1312.957520    1312.911865  13748.386963  1312.957520  100.090820  1312.911865   0.000000   0.045654        0.045477     1.0      1312.911865            -1             -1   False
1    1412.957275    1313.002952  13748.386963  1412.957275  100.045410  1313.002952   0.000000  99.954324        0.045233     1.0      1412.957275         False          False   False
2    1513.048406    1510.912043  13748.386963  1513.048406  200.045455  1510.912043   0.045455   2.090909        0.090909     1.0      1412.957275         False          False   False
3    1613.093861    1611.912043  13748.386963  1613.093861  102.136364  1611.912043   0.090909   1.090909        0.090909     1.0      1613.002952         False          False    True
4    1713.139316    1712.912043  13748.386963  1713.139316  101.136364  1712.912043   0.136364   0.090909        0.090909     1.0      1613.002952         False          False    True
5    1813.184770    1713.957497  13748.386963  1813.184770  100.136364  1713.957497   0.181818  99.045455        0.090909     1.0      1613.002952         False          False    True
6    1813.275679    1813.048406  13824.812988  1813.275679   99.136364  1813.048406   0.181818   0.045455      -23.392156     1.0      1613.002952         False          False    True
7    1862.798406    1836.486084  13898.682417  1862.798406   49.568182  1836.486084   0.181818  26.130504        0.000000     1.0      1613.002952         False          False    True
8    1862.798406    1862.616588  13975.244873  1862.798406   24.784091  1862.616588   0.181818   0.000000      -23.437544     2.0      1613.002952         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=1/11.[0m
[08/15 13:14:35]  --------------------------------------------------------------------------------
[08/15 13:14:35]  Iteration: 135 (7 solution, 127 counterexamples)
[08/15 13:14:44]  Generator returned sat in 4.939537 secs.
[08/15 13:14:44]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:14:46]  Improved gap from 0.0016666666666666668 to 14.0625
[08/15 13:14:46]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/15 13:14:46]  Verifer returned sat in 2.203118 secs.
[08/15 13:14:46]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1719.512939    1419.412842  13541.885986  1719.512939  300.100000  1419.412842   0.100098  300.000000      200.000000     8.0      1419.412842            -1             -1     -1
1    1719.512939    1619.412842  13541.885986  1719.512939  299.999756  1619.412842   0.100098  100.000000      100.000000     9.0      1719.412842         False          False   True
2    2055.250244    1667.150391  13541.885986  2055.250244  435.737305  1667.150391   0.100098  387.999756      335.737305     4.0      1719.412842         False           True  False
3    2055.250488    1719.413086  13541.885986  2055.250488  388.000000  1719.413086   0.100098  335.737305      235.737549     2.0      2055.150391         False          False  False
4    2055.250488    1919.412842  13541.885986  2055.250488  195.000000  1919.412842   0.100098  135.737549      135.737549     3.0      2055.150391         False          False  False
5    2055.250488    2004.800537  13541.885986  2055.250488   98.500000  2004.800537   0.100098   50.349854       35.737549     4.0      2055.150391         False          False  False
6    2055.250488    2041.087891  13606.148438  2055.250488   50.250000  2041.087891   0.100098   14.062500        0.000000     5.0      2055.150391         False          False  False
7    2067.312988    2055.250488  13691.985840  2067.312988   26.125000  2055.250488   0.100098   11.962402       -2.100098     1.0      2055.150391         False          False  False
8    2069.413086    2069.312988  13691.985840  2069.413086   14.062500  2069.312988   0.100098    0.000000     -100.000000     1.0      2055.150391         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=687795/2048.[0m
[08/15 13:14:47]  --------------------------------------------------------------------------------
[08/15 13:14:47]  Iteration: 136 (7 solution, 128 counterexamples)
[08/15 13:15:25]  Generator returned sat in 34.497272 secs.
[08/15 13:15:25]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:15:31]  Improved gap from 0.0 to 48.4375
[08/15 13:15:31]  Improved number of small numbers from 88 to 106 out of a max of 114
[08/15 13:15:31]  Verifer returned sat in 6.056688 secs.
[08/15 13:15:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1667.250488    1467.147949  13494.151123  1667.250488  248.445068  1467.147949    0.100098  200.002441      100.002686     8.0      1467.147949            -1             -1     -1
1    1715.690674    1667.147705  13494.151123  1715.690674  248.442627  1667.147705    0.102783   48.440186       48.440186     2.0      1715.587891         False           True   True
2    1715.690674    1667.150391  13545.710938  1715.690674    0.002500  1667.150391    0.102783   48.437500        0.000000     3.0      1715.587891         False          False   True
3    1966.128174    1815.587891  13545.710938  1966.128174  298.875000  1815.587891  102.100098   48.440186       48.440186     1.0      1715.587891         False           True  False
4    2066.125488    1910.902891  13545.710938  2066.125488  148.437500  1910.902891  102.100098   53.122500       48.437500     1.0      1715.587891         False          False   True
5    2066.125488    1915.587891  13597.273438  2066.125488    0.010000  1915.587891  102.100098   48.437500        0.000000     2.0      1715.587891         False          False   True
6    2066.125488    1964.025391  13648.835938  2066.125488    0.010000  1964.025391  102.100098    0.000000      -48.437500     3.0      1715.587891         False          False   True
7    2140.349238    2012.462891  13700.398438  2140.349238   74.223750  2012.462891  102.100098   25.786250      -22.651250     1.0      2038.249141          True           True  False
8    2202.454863    2060.900391  13700.398438  2202.454863   87.891875  2060.900391  102.100098   39.454375      -60.545625     1.0      2038.249141         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=198411/4096.[0m
[08/15 13:15:32]  --------------------------------------------------------------------------------
[08/15 13:15:32]  Iteration: 137 (7 solution, 129 counterexamples)
[08/15 13:15:51]  Generator returned sat in 14.795907 secs.
[08/15 13:15:51]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:15:52]  Improved gap from 0.0 to 23.4375
[08/15 13:15:53]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:15:53]  Verifer returned sat in 1.349455 secs.
[08/15 13:15:53]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    1466.258301    1366.208008  13469.248291  1466.258301    0.050000  1366.208008   0.000000  100.050293      100.050049     4.0      1366.208008            -1             -1   False
1    1466.258301    1466.208252  13469.248291  1466.258301  100.049805  1466.208252   0.000000    0.050049        0.050049     4.0      1366.208008         False          False   False
2    1489.745850    1466.308350  13545.710693  1489.745850   23.537598  1466.308350   0.000000   23.437500        0.000000     1.0      1489.745850         False          False   False
3    1813.233154    1589.745850  13545.710693  1813.233154  346.924805  1589.745850   0.049805  223.437500      223.437500     1.0      1489.745850         False          False   False
4    1813.233154    1689.745850  13545.710693  1813.233154  174.462402  1689.745850   0.049805  123.437500      123.437500     2.0      1489.745850         False          False    True
5    1813.233154    1789.695557  13545.710693  1813.233154    1.000000  1789.695557   0.049805   23.487793       23.437500     3.0      1489.745850         False          False    True
6    1813.233154    1789.745850  13622.273193  1813.233154    1.000000  1789.745850   0.049805   23.437500        0.000000     4.0      1489.745850         False          False    True
7    1813.233154    1813.183350  13698.835693  1813.233154    1.000000  1813.183350   0.049805    0.000000      -23.437500     5.0      1489.745850         False          False    True
8    1936.670654    1836.620850  13698.835693  1936.670654  123.437500  1836.620850   0.049805  100.000000        0.000000     1.0      1936.620850          True           True   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=3575/16.[0m
[08/15 13:15:53]  --------------------------------------------------------------------------------
[08/15 13:15:53]  Iteration: 138 (7 solution, 130 counterexamples)
[08/15 13:16:26]  Generator returned sat in 28.831764 secs.
[08/15 13:16:26]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:16:27]  Improved gap from 0.0 to 23.4375
[08/15 13:16:27]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:16:27]  Verifer returned sat in 0.888432 secs.
[08/15 13:16:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1514.206787    1365.333008  13545.710693  1514.206787    0.001221  1365.333008   0.000000  148.873779      148.873779     4.0      1365.333008            -1             -1     -1
1    1514.208008    1465.333008  13545.710693  1514.208008  148.875000  1465.333008   0.001221   48.873779       48.873779     3.0      1365.333008         False           True  False
2    1514.208008    1465.333008  13545.710693  1514.208008    0.001221  1465.333008   0.001221   48.873779      -51.126221     3.0      1514.206787          True           True   True
3    1714.209229    1665.333008  13545.710693  1714.209229  248.875000  1665.333008   0.002441   48.873779       48.873779     1.0      1514.206787         False           True  False
4    1788.772949    1762.209229  13545.710693  1788.772949  123.437500  1762.209229   0.002441   26.561279       23.437500     1.0      1514.206787         False          False   True
5    1788.772949    1765.333008  13622.273193  1788.772949    0.010000  1765.333008   0.002441   23.437500        0.000000     2.0      1514.206787         False          False   True
6    1788.772949    1788.770508  13673.835693  1788.772949    0.010000  1788.770508   0.002441    0.000000      -48.437500     3.0      1514.206787         False          False   True
7    1912.210449    1837.208008  13698.835693  1912.210449  123.437500  1837.208008   0.002441   75.000000        0.000000     1.0      1912.208008          True           True  False
8    1912.210449    1912.208008  13698.835693  1912.210449   74.998779  1912.208008   0.002441    0.000000     -100.000000     2.0      1912.208008         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=200187/4096.[0m
[08/15 13:16:28]  --------------------------------------------------------------------------------
[08/15 13:16:28]  Iteration: 139 (7 solution, 131 counterexamples)
[08/15 13:17:24]  Generator returned sat in 52.308347 secs.
[08/15 13:17:24]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:17:25]  Improved gap from 0.0 to 23.4375
[08/15 13:17:25]  Improved number of small numbers from 66 to 114 out of a max of 114
[08/15 13:17:25]  Verifer returned sat in 0.811615 secs.
[08/15 13:17:25]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1712.195312    1488.758057  13492.588135  1712.195312    0.002441  1488.758057   0.000000  223.437256      123.437256     8.0      1488.758057            -1             -1     -1
1    1712.195312    1688.758057  13492.588135  1712.195312    0.002500  1688.758057   0.000000   23.437256       23.437256     2.0      1488.758057         False           True  False
2    1735.632812    1712.197998  13545.710693  1735.632812   46.874756  1712.197998   0.000000   23.434814       -0.002686     1.0      1488.758057         False          False  False
3    1735.637939    1735.635498  13622.273193  1735.637939   23.439941  1735.635498   0.000000    0.002441      -23.435059     1.0      1735.637939         False          False  False
4    1982.512939    1859.072998  13622.273193  1982.512939  246.877441  1859.072998   0.002441  123.437500      123.437500     1.0      1735.637939         False          False  False
5    1982.512939    1959.070557  13622.273193  1982.512939    0.010000  1959.070557   0.002441   23.439941       23.437500     2.0      1735.637939         False          False   True
6    1982.512939    1959.072998  13698.835693  1982.512939    1.000000  1959.072998   0.002441   23.437500        0.000000     3.0      1735.637939         False          False   True
7    1982.512939    1982.510498  13775.398193  1982.512939    1.000000  1982.510498   0.002441    0.000000      -23.437500     4.0      1735.637939         False          False   True
8    2105.950439    2005.947998  13775.398193  2105.950439  123.437500  2005.947998   0.002441  100.000000        0.000000     1.0      2105.947998          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1975/16.[0m
[08/15 13:17:26]  --------------------------------------------------------------------------------
[08/15 13:17:26]  Iteration: 140 (7 solution, 132 counterexamples)
[08/15 13:17:47]  Generator returned sat in 16.594617 secs.
[08/15 13:17:47]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:17:51]  Improved gap from 0.0003125 to 15.625
[08/15 13:17:52]  Improved number of small numbers from 60 to 68 out of a max of 114
[08/15 13:17:52]  Verifer returned sat in 4.747039 secs.
[08/15 13:17:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    2357.582998    1906.732998  13123.813193  2357.582998    0.099854  1906.732998       0.05  450.800000      400.000000     5.0      1906.732998            -1             -1     -1
1    2357.582998    2057.532998  13123.813193  2357.582998    0.050049  2057.532998       0.05  300.000000      300.000000     5.0      2357.532998         False          False   True
2    2476.132998    2157.532959  13123.813193  2476.132998  418.550000  2157.532959       0.05  318.550039      318.550000     6.0      2357.532998         False          False   True
3    2476.132998    2157.532998  13123.813193  2476.132998    0.050049  2157.532998       0.05  318.550000      218.550000     7.0      2476.082998         False          False   True
4    2476.132998    2357.532998  13123.813193  2476.132998  250.800000  2357.532998       0.05  118.550000      118.550000     8.0      2476.082998         False          False   True
5    2482.982998    2357.533203  13123.813193  2482.982998  125.400000  2357.533203       0.05  125.399795       25.400000     4.0      2476.082998         False           True  False
6    2482.982998    2476.132998  13189.588135  2482.982998   62.700000  2476.132998       0.05    6.800000       -8.825059     2.0      2476.082998         False          False  False
7    2507.532998    2491.758057  13273.863193  2507.532998   31.350000  2491.758057       0.05   15.724941        0.000000     1.0      2476.082998         False          False  False
8    2507.532998    2507.482998  13273.863281  2507.532998   15.675000  2507.482998       0.05    0.000000      -99.999912     2.0      2476.082998         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1304985/4096.[0m
[08/15 13:17:52]  --------------------------------------------------------------------------------
[08/15 13:17:52]  Iteration: 141 (7 solution, 133 counterexamples)
[08/15 13:18:24]  Generator returned sat in 27.986542 secs.
[08/15 13:18:25]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:18:39]  Improved gap from 0.0 to 0
[08/15 13:18:40]  Improved number of small numbers from 59 to 74 out of a max of 114
[08/15 13:18:40]  Verifer returned sat in 15.491040 secs.
[08/15 13:18:40]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    1881.981201    1879.974665  12576.891357  1881.981201  2.007917  1879.974665        0.0  2.006536        2.006367     3.0      1879.974665            -1             -1   False
1    1881.982165    1881.981748  12674.883789  1881.982165  2.007500  1881.981748        0.0  0.000417       -0.000238     1.0      1881.982165         False          False   False
2    1881.983415    1881.982666  12774.882777  1881.983415  0.001667  1881.982666        0.0  0.000749        0.000000     1.0      1881.983415         False          False   False
3    1881.983415    1881.983415  12873.884277  1881.983415  0.000488  1881.983415        0.0  0.000000       -0.998499     2.0      1881.983415         False          False   False
4    1882.992165    1882.981934  12973.874027  1882.992165  1.008750  1882.981934        0.0  0.010231        0.000000     1.0      1881.983415         False          False   False
5    1882.992165    1882.992165  13073.874023  1882.992165  0.010000  1882.992165        0.0  0.000000       -0.000003     2.0      1881.983415         False          False   False
6    1883.002165    1882.992998  13173.864014  1883.002165  0.010000  1882.992998        0.0  0.009167       -0.000013     1.0      1881.983415         False          False   False
7    1883.002998    1883.002581  13273.863037  1883.002998  0.010000  1883.002581        0.0  0.000417       -0.000156     1.0      1881.983415         False          False   False
8    1883.012581    1883.003418  13273.863281  1883.012581  0.010000  1883.003418        0.0  0.009163      -99.990329     1.0      1881.983415         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1/1024.[0m
[08/15 13:18:41]  --------------------------------------------------------------------------------
[08/15 13:18:41]  Iteration: 142 (7 solution, 134 counterexamples)
[08/15 13:19:12]  Generator returned sat in 27.027457 secs.
[08/15 13:19:12]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:19:18]  Improved gap from 0.0 to 42.1875
[08/15 13:19:19]  Improved number of small numbers from 59 to 77 out of a max of 114
[08/15 13:19:19]  Verifer returned sat in 6.945129 secs.
[08/15 13:19:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     925.379639     683.291992  12973.874027   925.379639    0.100098   683.291992        0.0  242.087646      242.087474     3.0       683.291992            -1             -1    True
1     925.379639     683.292236  12973.874027   925.379639    0.100098   683.292236        0.0  242.087402      142.087474     3.0       683.291992         False          False    True
2     982.909424     883.292165  12973.874027   982.909424  299.617188   883.292165        0.0   99.617259       99.617259     4.0       683.291992         False          False    True
3    1125.579665     983.009352  12973.874027  1125.579665  242.287500   983.009352        0.1  142.470313      142.187500     1.0      1125.479665          True           True   False
4    1125.579665    1063.807790  12973.874027  1125.579665  121.143750  1063.807790        0.1   61.671875       42.187500     2.0      1125.479665         False          False    True
5    1125.579665    1083.292165  13031.686527  1125.579665   61.571875  1083.292165        0.1   42.187500        0.000000     3.0      1125.479665         False          False    True
6    1125.579665    1125.479665  13089.499023  1125.579665   31.785937  1125.479665        0.1    0.000000      -42.187503     4.0      1125.479665         False          False    True
7    1213.707790    1171.520290  13143.458252  1213.707790   88.128125  1171.520290        0.1   42.087500       -0.100150     1.0      1125.479665         False           True   False
8    1270.540602    1213.708008  13143.458252  1270.540602   98.920312  1213.708008        0.1   56.732594      -43.267337     1.0      1125.479665         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=2275/16.[0m
[08/15 13:19:20]  --------------------------------------------------------------------------------
[08/15 13:19:20]  Iteration: 143 (7 solution, 135 counterexamples)
[08/15 13:19:57]  Generator returned sat in 32.397299 secs.
[08/15 13:19:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:19:58]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/15 13:19:58]  Verifer returned sat in 0.996347 secs.
[08/15 13:19:58]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0     707.592285     107.542236  13549.624023   707.592285  600.100000   107.542236   0.049805  600.000244      600.000244     2.0       107.542236            -1             -1     -1
1     707.642090     107.542236  13549.624023   707.642090  600.050049   107.542236   0.049805  600.050049      500.050049     2.0       707.592285         False          False   True
2     707.692139     207.542236  13549.624023   707.692139  600.100098   207.542236   0.049805  500.100098      400.100098     3.0       707.592285         False          False   True
3     707.692139     309.042236  13549.624023   707.692139  405.000000   309.042236   0.049805  398.600098      300.100098     4.0       707.642334         False          False   True
4     707.692139     407.617188  13549.624023   707.692139  201.500000   407.617188   0.049805  300.025146      200.100098     5.0       707.642334         False          False   True
5     707.741943     607.542236  13549.624023   707.741943  300.074951   607.542236   0.049805  100.149902      100.149902     6.0       707.642334         False          False   True
6    1007.592041     707.542236  13549.624023  1007.592041  400.000000   707.542236   0.049805  300.000000      300.000000     7.0       707.642334         False          False   True
7    1107.842041     707.742188  13549.624023  1107.842041  400.250000   707.742188   0.049805  400.050049      300.250000     2.0       707.642334         False           True  False
8    1107.842041     907.541992  13549.624023  1107.842041  351.187500   907.541992   0.049805  200.250244      200.250000     3.0       707.642334         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=0, buffer=2048409/4096.[0m
[08/15 13:19:58]  --------------------------------------------------------------------------------
[08/15 13:19:58]  Iteration: 144 (7 solution, 136 counterexamples)
[08/15 13:20:23]  Generator returned sat in 19.919409 secs.
[08/15 13:20:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:20:26]  Improved gap from 0.0 to 15.625
[08/15 13:20:27]  Improved number of small numbers from 60 to 94 out of a max of 114
[08/15 13:20:27]  Verifer returned sat in 4.395711 secs.
[08/15 13:20:27]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1073.417236     674.202236  12982.963867  1073.417236    0.099854   674.202236   0.049805  399.165195      399.165039     2.0       674.202236            -1             -1     -1
1    1073.417236     674.302246  12982.963867  1073.417236  399.165000   674.302246   0.049805  399.065186      299.165039     2.0       674.202236         False          False   True
2    1140.812256     874.202148  12982.963867  1140.812256  466.460205   874.202148   0.049805  266.560303      266.560059     3.0       674.202236         False          False   True
3    1140.812256     940.922236  12982.963867  1140.812256  266.459961   940.922236   0.049805  199.840215      166.560059     4.0      1140.762451         False          False   True
4    1207.692041    1073.367432  12982.963867  1207.692041  266.720000  1073.367432   0.049805  134.274805      133.439844     5.0      1140.762451         False          False   True
5    1207.692041    1140.862305  12982.963867  1207.692041  133.360000  1140.862305   0.049805   66.779932       33.439844     2.0      1140.762451         False           True  False
6    1207.692041    1174.202393  13049.524023  1207.692041   66.680000  1174.202393   0.049805   33.439844        0.000000     3.0      1140.762451         False          False  False
7    1207.692041    1207.642236  13133.898926  1207.692041   33.340000  1207.642236   0.049805    0.000000      -15.625098     4.0      1140.762451         False          False  False
8    1224.362041    1223.267334  13133.899170  1224.362041   16.670000  1223.267334   0.049805    1.044902      -98.954854     1.0      1140.762451         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1225789/4096.[0m
[08/15 13:20:28]  --------------------------------------------------------------------------------
[08/15 13:20:28]  Iteration: 145 (7 solution, 137 counterexamples)
[08/15 13:21:16]  Generator returned sat in 43.922759 secs.
[08/15 13:21:17]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:21:21]  Improved gap from 0.0 to 15.625
[08/15 13:21:22]  Improved number of small numbers from 67 to 83 out of a max of 114
[08/15 13:21:22]  Verifer returned sat in 5.119161 secs.
[08/15 13:21:22]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0     874.276367     674.276425  12982.889648   874.276367    0.100098   674.276425        0.1  199.899942      199.899756     9.0       674.276425            -1             -1     -1
1    1073.467334     674.276611  12982.889648  1073.467334  399.090909   674.276611        0.1  399.090723      299.090723     3.0       674.276425         False           True   True
2    1073.467334     874.276367  12982.889648  1073.467334    0.100098   874.276367        0.1  199.090967      199.090723     2.0      1073.367334         False          False   True
3    1073.467334     940.403698  12982.889648  1073.467334  198.990967   940.403698        0.1  132.963636       99.090723     3.0      1073.367334         False          False   True
4    1206.630970    1073.367188  12982.889648  1206.630970  266.127273  1073.367188        0.1  133.163783      132.254359     4.0      1073.367334         False          False   True
5    1206.630970    1141.110516  12982.889648  1206.630970  133.063636  1141.110516        0.1   65.420455       32.254359     2.0      1073.367334         False           True  False
6    1207.742334    1174.276611  13049.523926  1207.742334   66.531818  1174.276611        0.1   33.365723        0.000000     3.0      1073.367334         False          False  False
7    1207.742334    1207.642334  13133.898926  1207.742334   33.265909  1207.642334        0.1    0.000000      -15.625000     2.0      1073.367334         False          False  False
8    1224.375289    1223.267334  13218.273682  1224.375289   16.632955  1223.267334        0.1    1.007955      -14.617290     1.0      1073.367334         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=612743/2048.[0m
[08/15 13:21:22]  --------------------------------------------------------------------------------
[08/15 13:21:22]  Iteration: 146 (7 solution, 138 counterexamples)
[08/15 13:21:33]  Generator returned sat in 6.609548 secs.
[08/15 13:21:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:21:37]  Improved gap from 0.0 to 15.625
[08/15 13:21:38]  Improved number of small numbers from 72 to 88 out of a max of 114
[08/15 13:21:38]  Verifer returned sat in 4.158155 secs.
[08/15 13:21:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     939.017090     540.007334  12982.883789   939.017090    0.024902   540.007334        0.0  399.009756      399.009619     4.0       540.007334            -1             -1    True
1     939.017090     639.982178  12982.883789   939.017090  298.984863   639.982178        0.0  299.034912      299.009619     3.0       540.007334         False          False    True
2     939.017090     640.007568  12982.883789   939.017090  298.984863   640.007568        0.0  299.009521      199.009619     4.0       540.007334         False          False    True
3     939.017090     806.687334  12982.883789   939.017090  298.985107   806.687334        0.0  132.329756       99.009619     5.0       540.007334         False          False    True
4    1073.367334     939.017090  12982.883789  1073.367334  266.680000   939.017090        0.0  134.350244      133.359863     6.0       540.007334         False          False    True
5    1073.367334    1006.672119  12982.883789  1073.367334  133.340000  1006.672119        0.0   66.695215       33.359863     2.0      1073.367334          True           True   False
6    1073.367334    1040.007568  13049.523926  1073.367334   66.670000  1040.007568        0.0   33.359766        0.000000     3.0      1073.367334         False          False   False
7    1073.367334    1073.367334  13133.898926  1073.367334   33.335000  1073.367334        0.0    0.000000      -15.625000     4.0      1073.367334         False          False   False
8    1090.034834    1088.992432  13218.273682  1090.034834   16.667500  1088.992432        0.0    1.042402      -14.582744     1.0      1073.367334         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1224847/4096.[0m
[08/15 13:21:38]  --------------------------------------------------------------------------------
[08/15 13:21:38]  Iteration: 147 (7 solution, 139 counterexamples)
[08/15 13:22:07]  Generator returned sat in 23.804018 secs.
[08/15 13:22:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:22:11]  Improved gap from 15.625 to 32.8125
[08/15 13:22:12]  Improved number of small numbers from 64 to 75 out of a max of 114
[08/15 13:22:12]  Verifer returned sat in 5.484387 secs.
[08/15 13:22:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    1550.885254    1459.966396  12982.883789  1550.885254  100.002686  1459.966396     0.0000  90.918857       90.918857     1.0      1459.966396            -1             -1    True
1    1559.967646    1550.886230  12982.883789  1559.967646  100.001250  1550.886230     0.0000   9.081416        0.001250     1.0      1559.967646         False          False    True
2    1659.967529    1650.887646  12982.883789  1659.967529  109.081299  1650.887646     0.0000   9.079883        0.001133     1.0      1559.967646         False          False    True
3    1759.967646    1759.966396  12982.883789  1759.967646  109.080000  1759.966396     0.0000   0.001250        0.001250     1.0      1759.967646         False          False    True
4    1963.506396    1859.966396  12982.883789  1963.506396  203.540000  1859.966396   103.5375   0.002500        0.002500     1.0      1759.967646         False          False    True
5    1963.513896    1859.970146  13050.067539  1963.513896    0.010000  1859.970146   103.5375   0.006250      -32.806250     1.0      1759.967646         False          False    True
6    2067.053896    1892.782646  13065.697754  2067.053896  103.546250  1892.782646   103.5375  70.733750      -13.636035     1.0      1759.967646         False          False    True
7    2113.501396    1977.152646  13132.885010  2113.501396  117.181250  1977.152646   103.5375  32.811250       -0.001279     1.0      1759.967646         False          False    True
8    2196.873896    2009.965332  13132.885254  2196.873896  116.183750  2009.965332   103.5375  83.371064      -16.628535     1.0      1759.967646         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/400.[0m
[08/15 13:22:13]  --------------------------------------------------------------------------------
[08/15 13:22:13]  Iteration: 148 (7 solution, 140 counterexamples)
[08/15 13:22:34]  Generator returned sat in 16.404453 secs.
[08/15 13:22:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:22:38]  Verifer returned unsat in 4.304024 secs.
[08/15 13:22:38]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:22:38]  --------------------------------------------------------------------------------
[08/15 13:22:38]  Iteration: 149 (8 solution, 140 counterexamples)
[08/15 13:22:49]  Generator returned sat in 5.908641 secs.
[08/15 13:22:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:22:50]  Verifer returned unsat in 0.524482 secs.
[08/15 13:22:50]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:22:50]  --------------------------------------------------------------------------------
[08/15 13:22:50]  Iteration: 150 (9 solution, 140 counterexamples)
[08/15 13:23:21]  Generator returned sat in 27.258060 secs.
[08/15 13:23:22]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 3/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:23:23]  Improved gap from 0.0 to 100
[08/15 13:23:24]  Improved number of small numbers from 59 to 65 out of a max of 114
[08/15 13:23:24]  Verifer returned sat in 2.388351 secs.
[08/15 13:23:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1261.738896    1161.688896  13050.067539  1261.738896    0.100098  1161.688896       0.05  100.000000         100.000     1.0      1161.688896            -1             -1     -1
1    1261.738896    1161.688896  13050.067539  1261.738896    0.050049  1161.688896       0.05  100.000000           0.000     1.0      1261.688896         False          False   True
2    1361.688896    1361.588896  13050.067539  1361.688896  199.950000  1361.588896       0.05    0.050000          -0.050     1.0      1261.688896         False          False   True
3    1362.338896    1361.688896  13050.067539  1362.338896    0.700000  1361.688896       0.05    0.600000         -99.400     1.0      1362.288896         False          False   True
4    1461.788896    1461.688896  13050.067539  1461.788896  100.050000  1461.688896       0.05    0.050000         -99.950     1.0      1362.288896         False          False   True
5    1760.813896    1595.997230  13050.067539  1760.813896  299.075000  1595.997230       0.05  164.766667          99.075     1.0      1362.288896         False          False   True
6    2160.863896    1760.763672  13050.067539  2160.863896  564.816667  1760.763672       0.05  400.050225         399.125     2.0      1362.288896         False          False   True
7    2160.863896    1761.688965  13050.067539  2160.863896  282.408333  1761.688965       0.05  399.124932         299.125     2.0      2160.813896          True           True  False
8    2160.863896    1861.688965  13050.067539  2160.863896  141.204167  1861.688965       0.05  299.124932         199.125     3.0      2160.813896         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=3193/8.[0m
[08/15 13:23:25]  --------------------------------------------------------------------------------
[08/15 13:23:25]  Iteration: 151 (9 solution, 141 counterexamples)
[08/15 13:23:44]  Generator returned sat in 14.812069 secs.
[08/15 13:23:44]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:23:44]  Improved gap from 0.049853515625 to 100
[08/15 13:23:45]  Improved number of small numbers from 61 to 114 out of a max of 114
[08/15 13:23:45]  Verifer returned sat in 0.361832 secs.
[08/15 13:23:45]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    1261.738770    1061.738770  13150.017578  1261.738770    0.100098  1061.738770   0.049805  199.950195      199.950195     1.0      1061.738770            -1             -1     -1
1    1261.738770    1061.738770  13150.017578  1261.738770    0.050049  1061.738770   0.049805  199.950195       99.950195     1.0      1261.688965         False          False   True
2    1261.838379    1261.738770  13150.017578  1261.838379  200.049805  1261.738770   0.049805    0.049805        0.049805     1.0      1261.688965         False          False   True
3    1262.238770    1261.838379  13150.017578  1262.238770    0.450195  1261.838379   0.049805    0.350586      -99.549805     1.0      1262.188965         False          False   True
4    1361.838379    1361.738770  13150.017578  1361.838379   99.950195  1361.738770   0.049805    0.049805      -99.950195     1.0      1262.188965         False          False   True
5    1710.688965    1461.738770  13150.017578  1710.688965  348.900391  1461.738770   0.049805  248.900391      148.900391     1.0      1262.188965         False          False   True
6    2258.589355    1661.738750  13150.017578  2258.589355  796.800781  1661.738750   0.049805  596.800801      596.800781     2.0      1262.188965         False          False   True
7    2258.589355    1761.738525  13150.017578  2258.589355  398.400391  1761.738525   0.049805  496.801025      496.800781     2.0      2258.539551          True           True  False
8    2258.589355    1861.738525  13150.017578  2258.589355  199.200195  1861.738525   0.049805  396.801025      396.800781     3.0      2258.539551         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=152781/256.[0m
[08/15 13:23:45]  --------------------------------------------------------------------------------
[08/15 13:23:45]  Iteration: 152 (9 solution, 142 counterexamples)
[08/15 13:24:00]  Generator returned sat in 10.549124 secs.
[08/15 13:24:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:24:07]  Improved gap from 0.0250244140625 to 32.8125
[08/15 13:24:08]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:24:08]  Verifer returned sat in 7.029007 secs.
[08/15 13:24:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    2012.269287    1912.369141  13082.830078  2012.269287    0.100098  1912.369141   0.000000  99.900146       99.899902     3.0      1912.369141            -1             -1   False
1    2012.769287    2012.369385  13082.830078  2012.769287  100.400146  2012.369385   0.199951   0.199951        0.199951     1.0      1912.369141         False          False   False
2    2112.869385    2112.369385  13082.830078  2112.869385  100.300049  2112.369385   0.300049   0.199951        0.199951     1.0      2112.569336         False          False    True
3    2212.769287    2212.369385  13082.830078  2212.769287  100.099854  2212.369385   0.300049   0.099854        0.099854     1.0      2212.469238         False          False    True
4    2411.719482    2310.538330  13082.830078  2411.719482  199.050049  2310.538330  99.150146   2.031006        0.199951     1.0      2212.469238         False          False    True
5    2411.719482    2312.369385  13150.017578  2411.719482    1.000000  2312.369385  99.150146   0.199951      -32.612549     2.0      2212.469238         False          False    True
6    2511.019531    2345.181885  13183.330078  2511.019531   99.500000  2345.181885  99.150146  66.687500        0.000000     1.0      2212.469238         False          False    True
7    2559.488281    2411.969482  13234.861328  2559.488281  115.156250  2411.969482  99.150146  48.368652        0.000000     1.0      2212.469238         False          False    True
8    2618.413330    2460.438232  13234.861328  2618.413330  107.293701  2460.438232  99.150146  58.824951      -41.074951     1.0      2212.469238         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=819/4096.[0m
[08/15 13:24:08]  --------------------------------------------------------------------------------
[08/15 13:24:08]  Iteration: 153 (9 solution, 143 counterexamples)
[08/15 13:24:49]  Generator returned sat in 36.375543 secs.
[08/15 13:24:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:24:51]  Improved gap from 0.00125 to 14.0625
[08/15 13:24:51]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:24:51]  Verifer returned sat in 1.624600 secs.
[08/15 13:24:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    3469.979492    3077.691650  12984.435059  3469.979492    0.050049  3077.691650        0.0  392.287842      392.287598     3.0      3077.691650            -1             -1    True
1    3469.979492    3177.691895  12984.435059  3469.979492  392.287500  3177.691895        0.0  292.287598      292.287598     3.0      3077.691650         False          False    True
2    3605.866943    3177.691895  12984.435059  3605.866943  428.175049  3177.691895        0.0  428.175049      328.175049     3.0      3077.691650         False          False    True
3    3605.866943    3377.691650  12984.435059  3605.866943  420.000000  3377.691650        0.0  228.175293      228.175049     4.0      3605.866943         False          False    True
4    3605.866943    3469.979492  12984.435059  3605.866943  211.000000  3469.979492        0.0  135.887451      128.175049     5.0      3605.866943         False          False    True
5    3605.866943    3551.616699  12984.435059  3605.866943  106.500000  3551.616699        0.0   54.250244       28.175049     4.0      3605.866943         False          False    True
6    3605.866943    3577.691895  13056.260010  3605.866943   54.250000  3577.691895        0.0   28.175049        0.000000     5.0      3605.866943         False          False    True
7    3605.866943    3605.866943  13142.197510  3605.866943   28.125000  3605.866943        0.0    0.000000      -14.062500     6.0      3605.866943         False          False    True
8    3619.929443    3619.929443  13142.197510  3619.929443   14.062500  3619.929443        0.0    0.000000     -100.000000     1.0      3605.866943         False           True   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=13129/40.[0m
[08/15 13:24:52]  --------------------------------------------------------------------------------
[08/15 13:24:52]  Iteration: 154 (9 solution, 144 counterexamples)
[08/15 13:25:14]  Generator returned sat in 18.127113 secs.
[08/15 13:25:14]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:25:16]  Improved gap from 0.0250244140625 to 12.5
[08/15 13:25:17]  Improved number of small numbers from 65 to 114 out of a max of 114
[08/15 13:25:17]  Verifer returned sat in 2.247501 secs.
[08/15 13:25:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    3082.308838    2882.308838  12984.434814  3082.308838    0.099854  2882.308838   0.099854  199.900146       99.900146     2.0      2882.308838            -1             -1     -1
1    3082.308838    3082.208740  12984.434814  3082.308838    0.100098  3082.208740   0.099854    0.000244       -0.099854     2.0      2882.308838         False          False   True
2    3370.208496    3082.308838  12984.434814  3370.208496  287.899902  3082.308838   0.099854  287.799805      187.799805     1.0      2882.308838         False          False   True
3    3482.408691    3282.208740  12984.434814  3482.408691  400.000000  3282.208740   0.099854  200.100098      200.000000     2.0      2882.308838         False          False   True
4    3482.408691    3370.108643  12984.434814  3482.408691  200.000000  3370.108643   0.099854  112.200195      100.000000     3.0      2882.308838         False          False   True
5    3482.408691    3457.508545  12984.434814  3482.408691  100.000000  3457.508545   0.099854   24.800293        0.000000     3.0      2882.308838         False          False   True
6    3507.608398    3482.408691  13059.235107  3507.608398   50.000000  3482.408691   0.099854   25.099854        0.000000     1.0      2882.308838         False          False   True
7    3507.608398    3507.508545  13146.735107  3507.608398   25.000000  3507.508545   0.099854    0.000000      -12.500000     2.0      2882.308838         False          False   True
8    3520.108398    3520.008545  13146.735107  3520.108398   12.500000  3520.008545   0.099854    0.000000     -100.000000     1.0      2882.308838         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=2001/10.[0m
[08/15 13:25:17]  --------------------------------------------------------------------------------
[08/15 13:25:17]  Iteration: 155 (9 solution, 145 counterexamples)
[08/15 13:26:06]  Generator returned sat in 43.641492 secs.
[08/15 13:26:06]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:26:06]  Improved gap from 0.0 to 100
[08/15 13:26:07]  Improved number of small numbers from 68 to 95 out of a max of 114
[08/15 13:26:07]  Verifer returned sat in 1.082110 secs.
[08/15 13:26:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    3030.568604    2830.568848  12984.434814  3030.568604    0.100000  2830.568848        0.0  199.999756       99.999766     2.0      2830.568848            -1             -1    True
1    3230.468750    3030.568604  12984.434814  3230.468750  399.899902  3030.568604        0.0  199.900146      199.899912     2.0      2830.568848         False          False    True
2    3281.218750    3030.568848  12984.434814  3281.218750  250.650146  3030.568848        0.0  250.649902      150.649912     2.0      3281.218750         False          False    True
3    3281.218750    3230.568838  12984.434814  3281.218750   25.775000  3230.568838        0.0   50.649912       50.649912     2.0      3281.218750         False          False    True
4    3281.218750    3230.568838  12984.434814  3281.218750   50.550000  3230.568838        0.0   50.649912      -49.350088     2.0      3281.218750         False          False    True
5    3330.668838    3330.568838  12984.434814  3330.668838  100.100000  3330.568838        0.0    0.100000      -99.900000     1.0      3281.218750         False          False    True
6    3529.768838    3430.568838  12984.434814  3529.768838  199.200000  3430.568838        0.0   99.200000       -0.800000     1.0      3281.218750         False          False    True
7    3827.968838    3630.568838  12984.434814  3827.968838  397.400000  3630.568838        0.0  197.400000      197.400000     1.0      3281.218750         False          False    True
8    4424.368838    3630.568848  12984.434814  4424.368838  793.800000  3630.568848        0.0  793.799990      693.800000     2.0      3281.218750         False          False    True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=2842215/4096.[0m
[08/15 13:26:08]  --------------------------------------------------------------------------------
[08/15 13:26:08]  Iteration: 156 (9 solution, 146 counterexamples)
[08/15 13:26:42]  Generator returned sat in 30.134405 secs.
[08/15 13:26:43]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:26:44]  Improved gap from 0.1 to 0
[08/15 13:26:44]  Improved number of small numbers from 61 to 114 out of a max of 114
[08/15 13:26:44]  Verifer returned sat in 1.769225 secs.
[08/15 13:26:44]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    2930.468750    2730.868652  12684.385010  2930.468750  299.799805  2730.868652   0.000000  199.600098       99.699951     9.0      2730.868652            -1             -1     -1
1    3030.618652    2930.519043  12684.385010  3030.618652  299.750000  2930.519043   0.000000  100.099609       99.849854     1.0      3030.618652         False           True  False
2    3030.718994    3030.668701  12684.385010  3030.718994  100.199951  3030.668701   0.000000    0.050293       -0.049805     1.0      3030.718994         False          False  False
3    3130.818848    3030.768799  12684.385010  3130.818848  100.150146  3030.768799   0.000000  100.050049        0.050049     1.0      3130.818848         False          False  False
4    3330.668945    3230.768799  12684.385010  3330.668945  299.900146  3230.768799   0.050049   99.850098       99.850098     1.0      3130.818848         False          False  False
5    3330.668945    3329.668701  12684.534912  3330.668945    1.000000  3329.668701   0.050049    0.950195        0.000000     2.0      3130.818848         False          False   True
6    3330.718750    3330.618896  12784.484863  3330.718750    1.000000  3330.618896   0.050049    0.049805       -0.000244     3.0      3130.818848         False          False   True
7    3331.668945    3330.718994  12883.434814  3331.668945    1.000000  3330.718994   0.050049    0.899902       -0.100098     1.0      3130.818848         False          False   True
8    3331.769043    3331.718994  12883.434814  3331.769043    1.000000  3331.718994   0.050049    0.000000     -100.000000     1.0      3130.818848         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=204493/2048.[0m
[08/15 13:26:45]  --------------------------------------------------------------------------------
[08/15 13:26:45]  Iteration: 157 (9 solution, 147 counterexamples)
[08/15 13:27:26]  Generator returned sat in 36.726597 secs.
[08/15 13:27:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:27:30]  Improved gap from 0.99875 to 23.4375
[08/15 13:27:30]  Improved number of small numbers from 60 to 114 out of a max of 114
[08/15 13:27:30]  Verifer returned sat in 3.608524 secs.
[08/15 13:27:30]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    3491.093018    3231.725586  12183.428223  3491.093018    0.002500  3231.725586   0.000000  259.367432      159.367676     2.0      3231.725586            -1             -1   False
1    3491.093018    3331.725586  12183.428223  3491.093018    0.002686  3331.725586   0.000000  159.367432       59.367676     2.0      3231.725586         False          False   False
2    3608.285645    3491.095459  12183.428223  3608.285645  276.560059  3491.095459   0.000000  117.190186       76.560303     1.0      3231.725586         False          False   False
3    3608.288086    3608.287842  12183.428223  3608.288086  117.192627  3608.287842   0.000000    0.000244      -23.437256     1.0      3608.288086         False          False   False
4    3855.165283    3731.725342  12183.428223  3855.165283  246.877441  3731.725342   0.002441  123.437500      123.437500     1.0      3608.288086         False          False   False
5    3855.165283    3808.287842  12183.428223  3855.165283    0.010000  3808.287842   0.002441   46.875000       23.437500     2.0      3608.288086         False          False    True
6    3855.165283    3831.725342  12259.990723  3855.165283    1.000000  3831.725342   0.002441   23.437500        0.000000     3.0      3608.288086         False          False    True
7    3855.165283    3855.162842  12336.553223  3855.165283    1.000000  3855.162842   0.002441    0.000000      -23.437500     4.0      3608.288086         False          False    True
8    3917.384033    3878.600586  12349.051025  3917.384033   62.218750  3878.600586   0.002441   38.781006      -48.720947     1.0      3917.381592          True           True   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1975/16.[0m
[08/15 13:27:31]  --------------------------------------------------------------------------------
[08/15 13:27:31]  Iteration: 158 (9 solution, 148 counterexamples)
[08/15 13:28:07]  Generator returned sat in 31.071502 secs.
[08/15 13:28:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:28:08]  Improved gap from 0.0 to 23.4375
[08/15 13:28:08]  Improved number of small numbers from 63 to 114 out of a max of 114
[08/15 13:28:08]  Verifer returned sat in 1.380694 secs.
[08/15 13:28:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    4044.027832    3844.027832  12218.978271  4044.027832    0.049805  3844.027832    0.000000  200.000000      200.000000     3.0      3844.027832            -1             -1   False
1    4044.027832    3943.977783  12218.978271  4044.027832    0.049805  3943.977783    0.000000  100.050049      100.000000     3.0      3844.027832         False          False   False
2    4267.565186    3944.027832  12218.978271  4267.565186  323.587402  3944.027832  100.049805  223.487549      123.487549     4.0      3844.027832         False          False   False
3    4367.615234    4044.077881  12218.978271  4367.615234  323.537598  4044.077881  100.099854  223.437500      123.487549     2.0      4267.515381          True           True    True
4    4367.615234    4244.027832  12218.978271  4367.615234  162.768799  4244.027832  100.099854   23.487549       23.487549     2.0      4267.515381         False          False    True
5    4367.615234    4244.077637  12295.490723  4367.615234    1.000000  4244.077637  100.099854   23.437744        0.000000     3.0      4267.515381         False          False    True
6    4367.615234    4267.515381  12372.053223  4367.615234    1.000000  4267.515381  100.099854    0.000000      -23.437500     4.0      4267.515381         False          False    True
7    4591.052734    4290.952881  12372.053223  4591.052734  223.437500  4290.952881  100.099854  200.000000      100.000000     1.0      4267.515381         False           True   False
8    4591.052734    4390.952881  12372.053223  4591.052734   46.925049  4390.952881  100.099854  100.000000        0.000000     2.0      4267.515381         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=0, buffer=505805/4096.[0m
[08/15 13:28:09]  --------------------------------------------------------------------------------
[08/15 13:28:09]  Iteration: 159 (9 solution, 149 counterexamples)
[08/15 13:29:01]  Generator returned sat in 47.327004 secs.
[08/15 13:29:01]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:29:13]  Improved gap from 0.05 to 0
[08/15 13:29:13]  Improved number of small numbers from 80 to 114 out of a max of 114
[08/15 13:29:13]  Verifer returned sat in 12.193268 secs.
[08/15 13:29:13]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    3988.952881    3888.952637  12196.491943  3988.952881    0.001250  3888.952637   0.000000  100.000244       99.998779     6.0      3888.952637            -1             -1     -1
1    3988.954102    3888.954346  12196.491943  3988.954102  100.001465  3888.954346   0.000000   99.999756        0.000000     6.0      3888.952637         False           True  False
2    4089.954346    4088.954102  12196.491943  4089.954346  201.000000  4088.954102   0.000000    1.000244        1.000244     1.0      3888.952637          True           True  False
3    4188.954102    4188.952637  12196.491943  4188.954102  100.000000  4188.952637   0.000000    0.001465        0.000000     1.0      4188.954102         False          False  False
4    4389.952637    4288.952881  12196.491943  4389.952637  201.000000  4288.952881  99.997314    1.002441        1.001221     1.0      4188.954102         False          False  False
5    4389.952637    4288.954346  12295.490723  4389.952637    0.010000  4288.954346  99.997314    1.000977        0.000000     2.0      4188.954102         False          False   True
6    4389.952637    4289.955322  12394.491943  4389.952637    1.000000  4289.955322  99.997314    0.000000       -0.998779     3.0      4188.954102         False          False   True
7    4390.952637    4290.954102  12494.490479  4390.952637    1.000000  4290.954102  99.997314    0.001221       -0.000244     1.0      4188.954102         False          False   True
8    4391.951416    4290.956543  12593.491943  4391.951416    1.000000  4290.956543  99.997314    0.997559        0.000000     1.0      4188.954102         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=4101/4096.[0m
[08/15 13:29:14]  --------------------------------------------------------------------------------
[08/15 13:29:14]  Iteration: 160 (9 solution, 150 counterexamples)
[08/15 13:29:46]  Generator returned sat in 27.703910 secs.
[08/15 13:29:47]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:30:00]  Improved gap from 0.0005 to 3.125
[08/15 13:30:02]  Improved number of small numbers from 60 to 76 out of a max of 114
[08/15 13:30:02]  Verifer returned sat in 14.994763 secs.
[08/15 13:30:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    4283.166992    4162.694256  12022.317383  4283.166992  120.475342  4162.694256   0.000000  120.472737       20.472770     2.0      4162.694256            -1             -1   False
1    4283.166992    4262.694336  12022.317383  4283.166992  120.472412  4262.694336   0.000000   20.472656      -79.527230     2.0      4283.166992         False          False   False
2    4383.166748    4380.044427  12101.842178  4383.166748  120.472412  4380.044427   0.000000    3.122321       -0.002679     1.0      4283.166992         False          False   False
3    4383.171995    4383.169427  12198.717178  4383.171995    3.127568  4383.169427   0.000000    0.002568       -3.122432     1.0      4383.171995         False          False   False
4    4495.970797    4432.120197  12198.717178  4495.970797  112.801370  4432.120197   9.671233   54.179366        0.005137     1.0      4383.171995         False          False   False
5    4499.192115    4486.302132  12295.490479  4499.192115   57.400685  4486.302132   9.671233    3.218750       -0.000244     1.0      4383.171995         False          False    True
6    4576.802560    4489.523451  12317.880277  4576.802560   80.829195  4489.523451   9.671233   77.607877        0.000000     1.0      4383.171995         False          False    True
7    4591.786293    4567.131328  12402.894043  4591.786293   92.591610  4567.131328   9.671233   14.983733       -0.002502     2.0      4383.171995         False          False    True
8    4689.603930    4582.117676  12402.894043  4689.603930  112.801370  4582.117676   9.671233   97.815022       -2.184865     1.0      4383.171995         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=3/584.[0m
[08/15 13:30:02]  --------------------------------------------------------------------------------
[08/15 13:30:02]  Iteration: 161 (9 solution, 151 counterexamples)
[08/15 13:30:38]  Generator returned sat in 30.923101 secs.
[08/15 13:30:38]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:30:48]  Improved gap from 0.1 to 15.625
[08/15 13:30:49]  Improved number of small numbers from 59 to 70 out of a max of 114
[08/15 13:30:49]  Verifer returned sat in 11.074419 secs.
[08/15 13:30:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    3788.839844    3688.814848  12891.737178  3788.839844    0.025146  3688.814848      0.025   99.999995       99.999995     3.0      3688.814848            -1             -1     -1
1    4088.864848    3788.814848  12891.737178  4088.864848  400.025000  3788.814848      0.050  300.000000      300.000000     1.0      3688.814848         False          False   True
2    4124.356515    3788.839844  12891.737178  4124.356515  335.491667  3788.839844      0.050  335.466671      235.491667     2.0      4124.306515         False          False   True
3    4124.356515    3888.814848  12891.737178  4124.356515  335.466667  3888.814848      0.050  235.491667      135.491667     3.0      4124.306515         False          False   True
4    4155.598182    4088.814848  12891.737178  4155.598182  266.733333  4088.814848      0.050   66.733333       66.733333     4.0      4124.306515         False          False   True
5    4222.231515    4155.473145  12891.737178  4222.231515  133.366667  4155.473145      0.050   66.708371       33.366667     2.0      4124.306515         False           True  False
6    4222.231515    4188.814941  12958.370511  4222.231515   66.683333  4188.814941      0.050   33.366574        0.000000     2.0      4124.306515         False          False  False
7    4222.231515    4222.181515  13042.745511  4222.231515   33.341667  4222.181515      0.050    0.000000      -15.625000     3.0      4124.306515         False          False  False
8    4238.902348    4237.806641  13042.745605  4238.902348   16.670833  4237.806641      0.050    1.045708      -98.954073     1.0      4124.306515         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=300.[0m
[08/15 13:30:50]  --------------------------------------------------------------------------------
[08/15 13:30:50]  Iteration: 162 (9 solution, 152 counterexamples)
[08/15 13:31:04]  Generator returned sat in 9.362558 secs.
[08/15 13:31:04]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:31:22]  Improved gap from 0.0 to 3.125
[08/15 13:31:23]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:31:23]  Verifer returned sat in 18.365872 secs.
[08/15 13:31:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    3790.639404    3664.929932  12891.712158  3790.639404    0.006348  3664.929932   0.024902  125.684570      101.774658     6.0      3664.929932            -1             -1     -1
1    3790.639404    3788.839844  12891.712158  3790.639404  100.000000  3788.839844   0.024902    1.774658        1.774658     6.0      3664.929932         False           True   True
2    3888.858643    3888.827393  12891.712158  3888.858643   99.993896  3888.827393   0.024902    0.006348       -0.006104     1.0      3888.833740          True           True  False
3    3888.871094    3888.839844  12988.587158  3888.871094    0.018799  3888.839844   0.024902    0.006348       -3.118652     1.0      3888.846191         False          False  False
4    4000.829102    3936.757324  12988.587158  4000.829102  111.964355  3936.757324   7.083252   56.988525        1.781006     1.0      3888.846191         False          False  False
5    4000.829102    3991.964844  13085.462158  4000.829102   56.982178  3991.964844   7.083252    1.781006       -1.343994     2.0      3888.846191         False          False   True
6    4078.107910    3995.090088  13109.527344  4078.107910   79.059814  3995.090088   7.083252   75.934570        0.000000     1.0      3888.846191         False          False   True
7    4093.828369    4071.031006  13193.801025  4093.828369   91.655029  4071.031006   7.083252   15.714111       -0.005859     1.0      3888.846191         False          False   True
8    4190.078613    4086.751221  13193.801025  4190.078613  111.964355  4086.751221   7.083252   96.244141       -3.755615     1.0      3888.846191         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=7295/4096.[0m
[08/15 13:31:23]  --------------------------------------------------------------------------------
[08/15 13:31:23]  Iteration: 163 (9 solution, 153 counterexamples)
[08/15 13:31:36]  Generator returned sat in 7.235690 secs.
[08/15 13:31:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:31:48]  Improved gap from 0.012451171875 to 3.125
[08/15 13:31:49]  Improved number of small numbers from 59 to 74 out of a max of 114
[08/15 13:31:49]  Verifer returned sat in 13.089683 secs.
[08/15 13:31:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     390.035400     283.485638  12891.712402   390.035400    0.003418   283.485638   0.000000  106.549763        6.549892     2.0       283.485638            -1             -1   False
1     390.035400     390.035156  12982.037745   390.035400    0.003538   390.035156   0.000000    0.000244       -3.124766     2.0       283.485638         False          False   False
2     396.285156     393.160166  13078.912745   396.285156    6.250000   393.160166   0.000000    3.124990       -0.000010     1.0       283.485638         False          False   False
3     399.410166     396.285166  13175.787745   399.410166    6.250000   396.285166   0.000000    3.125000        0.000000     1.0       283.485638         False          False   False
4     509.084694     445.225614  13175.787745   509.084694  112.799528   445.225614   6.455778   57.403302        3.218750     1.0       283.485638         False          False   False
5     509.084694     499.410166  13272.568848   509.084694   57.399764   499.410166   6.455778    3.218750       -0.000147     2.0       283.485638         False          False    True
6     586.690826     502.632454  13294.962646   586.690826   80.824882   502.632454   6.455778   77.602594       -0.000216     1.0       283.485638         False          False    True
7     601.674317     580.238586  13379.979248   601.674317   92.586085   580.238586   6.455778   14.979953       -0.000124     1.0       283.485638         False          False    True
8     699.493892     595.222168  13379.979248   699.493892  112.799528   595.222168   6.455778   97.815946       -2.180548     1.0       283.485638         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=103/32.[0m
[08/15 13:31:50]  --------------------------------------------------------------------------------
[08/15 13:31:50]  Iteration: 164 (9 solution, 154 counterexamples)
[08/15 13:33:26]  Generator returned sat in 91.362913 secs.
[08/15 13:33:26]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:33:28]  Improved gap from 0.0 to 48.4375
[08/15 13:33:28]  Improved number of small numbers from 104 to 114 out of a max of 114
[08/15 13:33:28]  Verifer returned sat in 2.113153 secs.
[08/15 13:33:28]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     396.185059     245.035156  13175.787598   396.185059    0.049805   245.035156   0.000000  151.149902      149.349854     2.0       245.035156            -1             -1    True
1     396.235107     346.835205  13175.787598   396.235107  151.199951   346.835205   0.050049   49.349854       49.349854     3.0       245.035156         False          False    True
2     496.185303     346.835205  13175.787598   496.185303  149.300049   346.835205   0.050049  149.300049       49.300049     3.0       496.135254          True           True    True
3     496.185303     496.084961  13175.787598   496.185303  149.250000   496.084961   0.050049    0.050293      -50.699951     2.0       496.135254         False           True   False
4     696.284912     646.834961  13175.787598   696.284912  200.149902   646.834961   0.099854   49.350098       49.349854     1.0       496.135254         False          False   False
5     696.284912     647.747559  13226.437744   696.284912    1.000000   647.747559   0.099854   48.437500        0.000000     2.0       496.135254         False          False    True
6     696.284912     696.185059  13278.000244   696.284912    1.000000   696.185059   0.099854    0.000000      -48.437500     3.0       496.135254         False          False    True
7     796.834961     744.622803  13325.887695   796.834961  100.550049   744.622803   0.099854   52.112305        0.000000     1.0       796.735107          True           True   False
8     843.891602     796.785156  13325.887939   843.891602   99.168945   796.785156   0.099854   47.006592      -52.943115     1.0       796.735107         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=202137/4096.[0m
[08/15 13:33:29]  --------------------------------------------------------------------------------
[08/15 13:33:29]  Iteration: 165 (9 solution, 155 counterexamples)
[08/15 13:34:10]  Generator returned sat in 35.913869 secs.
[08/15 13:34:10]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:34:20]  Improved gap from 0.016339869281045753 to 1.5625
[08/15 13:34:20]  Improved number of small numbers from 79 to 114 out of a max of 114
[08/15 13:34:20]  Verifer returned sat in 9.849931 secs.
[08/15 13:34:20]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     501.605713     377.487549  13001.478027   501.605713    0.009722   377.487549   0.000000  124.118164       24.127930     2.0       377.487549            -1             -1   False
1     501.605713     477.477783  13077.350098   501.605713  124.118164   477.477783   0.000000   24.127930        0.000000     2.0       377.487549         False          False   False
2     601.595947     601.586426  13077.350098   601.595947  124.118164   601.586426   0.000000    0.009521       -0.009766     1.0       377.487549         False          False   False
3     603.168457     601.605713  13175.787354   603.168457    1.582031   601.605713   0.000000    1.562744        0.000000     1.0       603.168457         False          False   False
4     715.455811     646.834717  13175.787354   715.455811  113.850098   646.834717  12.268066   56.353027        0.019287     1.0       603.168457         False          False   False
5     717.027832     703.197510  13274.195801   717.027832   57.925049   703.197510  12.268066    1.562256       -0.000244     1.0       603.168457         False          False    True
6     795.233643     704.957275  13295.990234   795.233643   79.768066   704.957275  12.268066   78.008301        0.000000     1.0       603.168457         False          False    True
7     808.785156     782.975098  13382.130615   808.785156   91.559814   782.975098  12.268066   13.541992       -0.308105     1.0       603.168457         False          False    True
8     909.093262     796.825439  13382.130615   909.093262  113.850098   796.825439  12.268066   99.999756        0.000000     1.0       603.168457         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=79/4096.[0m
[08/15 13:34:21]  --------------------------------------------------------------------------------
[08/15 13:34:21]  Iteration: 166 (9 solution, 156 counterexamples)
[08/15 13:34:37]  Generator returned sat in 11.725423 secs.
[08/15 13:34:38]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:34:38]  Improved number of small numbers from 66 to 113 out of a max of 113
[08/15 13:34:38]  Verifer returned sat in 0.823280 secs.
[08/15 13:34:38]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     192.925049      -6.974854  13485.830811   192.925049    0.100098    -6.974854   0.000000  199.899902      199.800049     4.0        -6.974854            -1             -1   False
1     193.125000      -6.875000  13485.830811   193.125000  200.099854    -6.875000   0.000000  200.000000      100.000000     3.0        -6.974854         False          False   False
2     193.125000     193.025146  13485.830811   193.125000  199.899902   193.025146   0.000000    0.099854        0.000000     2.0       193.125000         False          False   False
3     693.324951     193.224854  13485.830811   693.324951  500.299805   193.224854   0.099854  500.000244      400.100098     1.0       193.125000         False          False   False
4     693.324951     293.125000  13485.830811   693.324951  251.149902   293.125000   0.099854  400.100098      300.100098     2.0       193.125000         False          False    True
5     693.324951     393.125000  13485.830811   693.324951  300.000000   393.125000   0.099854  300.100098      200.100098     3.0       193.125000         False          False    True
6     693.324951     591.425049  13485.830811   693.324951  200.099854   591.425049   0.099854  101.800049      100.100098     4.0       193.125000         False          False    True
7     989.725098     693.125000  13485.830811   989.725098  398.200195   693.125000   0.099854  296.500244      296.500244     5.0       193.125000         False          False    True
8    1093.324951     693.224854  13485.830811  1093.324951  400.100098   693.224854   0.099854  400.000244      300.100098     6.0      1093.225098          True           True   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=0, buffer=819405/2048.[0m
[08/15 13:34:39]  --------------------------------------------------------------------------------
[08/15 13:34:39]  Iteration: 167 (9 solution, 157 counterexamples)
[08/15 13:34:54]  Generator returned sat in 9.558593 secs.
[08/15 13:34:54]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:34:55]  Improved number of small numbers from 112 to 112 out of a max of 113
[08/15 13:34:55]  Verifer returned sat in 0.840506 secs.
[08/15 13:34:55]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t  queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0        893.125        193.175  13485.830811      893.125   699.950      193.175        0.0   699.95          599.95     2.0          193.175            -1             -1    True
1        893.125        293.225  13485.830811      893.125   699.950      293.225        0.0   599.90          499.95     2.0          193.175         False          False    True
2        893.125        393.175  13485.830811      893.125     0.050      393.175        0.0   499.95          399.95     3.0          893.125         False          False    True
3        893.125        493.175  13485.830811      893.125     0.050      493.175        0.0   399.95          299.95     4.0          893.125         False          False    True
4        893.125        693.175  13485.830811      893.125   300.000      693.175        0.0   199.95          199.95     5.0          893.125         False          False    True
5       1093.125        787.625  13485.830811     1093.125   399.950      787.625        0.0   305.50          299.95     6.0          893.125         False          False    True
6       1185.825        893.175  13485.830811     1185.825   398.200      893.175        0.0   292.65          292.65     2.0          893.125         False           True   False
7       1293.275        893.225  13485.830811     1293.275   400.100      893.225        0.0   400.05          300.10     3.0          893.125         False          False   False
8       1293.275       1093.175  13485.830811     1293.275   301.075     1093.175        0.0   200.10          200.10     3.0          893.125         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=500.[0m
[08/15 13:34:55]  --------------------------------------------------------------------------------
[08/15 13:34:55]  Iteration: 168 (9 solution, 158 counterexamples)
[08/15 13:35:37]  Generator returned sat in 36.982091 secs.
[08/15 13:35:38]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:35:41]  Improved gap from 0.0 to 48.4375
[08/15 13:35:41]  Improved number of small numbers from 105 to 114 out of a max of 114
[08/15 13:35:41]  Verifer returned sat in 3.044198 secs.
[08/15 13:35:41]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0     145.257500     -46.592285  13782.135498   145.257500  191.849854   -46.592285   0.000000  191.849785      148.387383     2.0       -46.592285            -1             -1   False
1     145.257500      96.870000  13782.135498   145.257500  191.799805    96.870000   0.000000   48.387500       48.387383     2.0       145.257500         False          False   False
2     245.307500      96.870117  13782.135498   245.307500  148.437500    96.870117   0.000000  148.437383       48.437383     3.0       245.307500         False          False   False
3     245.307500     196.870117  13833.697998   245.307500  148.387695   196.870117   0.000000   48.437383       -0.000117     2.0       245.307500         False           True   False
4     393.795166     343.532715  13833.697998   393.795166  196.925049   343.532715   0.050049   50.212402       48.437500     1.0       245.307500         False          False   False
5     393.795166     345.307617  13885.260498   393.795166    1.000000   345.307617   0.050049   48.437500        0.000000     2.0       245.307500         False          False    True
6     393.795166     393.745117  13936.822998   393.795166    0.500000   393.745117   0.050049    0.000000      -48.437500     3.0       245.307500         False          False    True
7     493.482666     442.182617  13985.572998   493.482666   99.687500   442.182617   0.050049   51.250000        0.000000     1.0       493.432617          True           True   False
8     542.401367     493.482666  13985.572998   542.401367  100.168701   493.482666   0.050049   48.868652      -51.081299     1.0       493.432617         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=775/16.[0m
[08/15 13:35:41]  --------------------------------------------------------------------------------
[08/15 13:35:41]  Iteration: 169 (9 solution, 159 counterexamples)
[08/15 13:36:23]  Generator returned sat in 36.581715 secs.
[08/15 13:36:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:36:24]  Improved gap from 0.1 to 100
[08/15 13:36:24]  Improved number of small numbers from 62 to 114 out of a max of 114
[08/15 13:36:24]  Verifer returned sat in 0.749527 secs.
[08/15 13:36:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0      94.395264      -5.604980  13984.2854    94.395264    0.100098    -5.604980   0.050049   99.950195       99.950195     4.0        -5.604980            -1             -1     -1
1      94.395264      -5.029785  13984.2854    94.395264    0.050000    -5.029785   0.050049   99.375000       -0.049805     2.0        94.345215         False           True   True
2     244.020264      94.395020  13984.2854   244.020264  249.000000    94.395020   0.050049  149.575195       49.575195     1.0        94.345215         False          False   True
3     244.020264     243.920166  13984.2854   244.020264    0.050049   243.920166   0.050049    0.050049      -50.424805     2.0       243.970215         False          False   True
4     494.495361     294.395264  13984.2854   494.495361  250.525146   294.395264   0.050049  200.050049      100.050293     1.0       243.970215         False          False   True
5     594.870361     494.395020  13984.2854   594.870361  300.425049   494.395020   0.050049  100.425293      100.425293     2.0       243.970215         False          False   True
6     895.445068     494.445312  13984.2854   895.445068  401.000000   494.445312   0.050049  400.949707      301.000000     3.0       243.970215         False          False   True
7     895.445068     594.870361  13984.2854   895.445068  250.525146   594.870361   0.050049  300.524658      201.000000     2.0       895.395020          True           True  False
8     895.445068     794.395020  13984.2854   895.445068  300.475098   794.395020   0.050049  101.000000      101.000000     3.0       895.395020         False          False  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=0, buffer=1233101/4096.[0m
[08/15 13:36:25]  --------------------------------------------------------------------------------
[08/15 13:36:25]  Iteration: 170 (9 solution, 160 counterexamples)
[08/15 13:36:41]  Generator returned sat in 10.995286 secs.
[08/15 13:36:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:36:42]  Improved gap from 0.01 to 100
[08/15 13:36:42]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 13:36:42]  Verifer returned sat in 0.929411 secs.
[08/15 13:36:42]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    -194.487549    -394.487305  13984.2854  -194.487549  100.199951  -394.487305   0.050049  199.949707       99.949951     9.0      -394.487305            -1             -1     -1
1    -194.487549    -194.587646  13984.2854  -194.487549  100.150146  -194.587646   0.050049    0.050049       -0.050049     2.0      -194.537598         False           True   True
2     -94.437500    -194.487549  13984.2854   -94.437500  100.100098  -194.487549   0.050049  100.000000        0.000000     1.0       -94.487549         False          False   True
3     -94.312500     -94.412354  13984.2854   -94.312500  100.125000   -94.412354   0.050049    0.049805      -99.875000     1.0       -94.487549         False          False   True
4     206.712646       5.512451  13984.2854   206.712646  301.074951     5.512451   0.050049  201.150146      101.150146     1.0       -94.487549         False          False   True
5     206.712646     105.512451  13984.2854   206.712646  201.100098   105.512451   0.050049  101.150146        1.150146     2.0       -94.487549         False          False   True
6     406.562500     305.512451  13984.2854   406.562500  301.000000   305.512451   0.050049  101.000000      101.000000     1.0       -94.487549         False          False   True
7     706.487305     306.387451  13984.2854   706.487305  400.924805   306.387451   0.050049  400.049805      300.924805     2.0       -94.487549         False          False   True
8     706.487305     406.562744  13984.2854   706.487305  301.875000   406.562744   0.050049  299.874512      200.924805     2.0       -94.487549         False          False   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=1232793/4096.[0m
[08/15 13:36:43]  --------------------------------------------------------------------------------
[08/15 13:36:43]  Iteration: 171 (9 solution, 161 counterexamples)
[08/15 13:37:28]  Generator returned sat in 39.853815 secs.
[08/15 13:37:28]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:37:29]  Verifer returned unsat in 0.462375 secs.
[08/15 13:37:29]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:37:29]  --------------------------------------------------------------------------------
[08/15 13:37:29]  Iteration: 172 (10 solution, 161 counterexamples)
[08/15 13:37:41]  Generator returned sat in 7.027742 secs.
[08/15 13:37:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:37:42]  Verifer returned unsat in 0.510250 secs.
[08/15 13:37:42]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:37:42]  --------------------------------------------------------------------------------
[08/15 13:37:42]  Iteration: 173 (11 solution, 161 counterexamples)
[08/15 13:37:56]  Generator returned sat in 8.851552 secs.
[08/15 13:37:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:37:59]  Verifer returned unsat in 3.095043 secs.
[08/15 13:37:59]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:37:59]  --------------------------------------------------------------------------------
[08/15 13:37:59]  Iteration: 174 (12 solution, 161 counterexamples)
[08/15 13:38:11]  Generator returned sat in 7.163085 secs.
[08/15 13:38:12]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:14]  Verifer returned unsat in 2.329397 secs.
[08/15 13:38:14]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:14]  --------------------------------------------------------------------------------
[08/15 13:38:14]  Iteration: 175 (13 solution, 161 counterexamples)
[08/15 13:38:26]  Generator returned sat in 6.875010 secs.
[08/15 13:38:26]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:29]  Verifer returned unsat in 2.416926 secs.
[08/15 13:38:29]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:29]  --------------------------------------------------------------------------------
[08/15 13:38:29]  Iteration: 176 (14 solution, 161 counterexamples)
[08/15 13:38:41]  Generator returned sat in 7.207308 secs.
[08/15 13:38:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:44]  Verifer returned unsat in 2.553858 secs.
[08/15 13:38:44]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:44]  --------------------------------------------------------------------------------
[08/15 13:38:44]  Iteration: 177 (15 solution, 161 counterexamples)
[08/15 13:38:56]  Generator returned sat in 7.042834 secs.
[08/15 13:38:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:58]  Verifer returned unsat in 1.813691 secs.
[08/15 13:38:58]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:38:58]  --------------------------------------------------------------------------------
[08/15 13:38:58]  Iteration: 178 (16 solution, 161 counterexamples)
[08/15 13:39:10]  Generator returned sat in 6.939631 secs.
[08/15 13:39:11]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:39:13]  Verifer returned unsat in 1.700155 secs.
[08/15 13:39:13]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:39:13]  --------------------------------------------------------------------------------
[08/15 13:39:13]  Iteration: 179 (17 solution, 161 counterexamples)
[08/15 13:39:31]  Generator returned sat in 13.358013 secs.
[08/15 13:39:31]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:39:34]  Verifer returned unsat in 2.375869 secs.
[08/15 13:39:34]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:39:34]  --------------------------------------------------------------------------------
[08/15 13:39:34]  Iteration: 180 (18 solution, 161 counterexamples)
[08/15 13:39:46]  Generator returned sat in 7.208716 secs.
[08/15 13:39:46]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:39:49]  Verifer returned unsat in 2.144160 secs.
[08/15 13:39:49]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:39:49]  --------------------------------------------------------------------------------
[08/15 13:39:49]  Iteration: 181 (19 solution, 161 counterexamples)
[08/15 13:40:48]  Generator returned sat in 54.061840 secs.
[08/15 13:40:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:40:50]  Improved gap from 0.0016666666666666668 to 14.0625
[08/15 13:40:51]  Improved number of small numbers from 110 to 111 out of a max of 114
[08/15 13:40:51]  Verifer returned sat in 2.569059 secs.
[08/15 13:40:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    5918.799561    5618.849375  13984.285400  5918.799561    0.0500  5618.849375       0.00  299.950186      299.950186     5.0      5618.849375            -1             -1     -1
1    5940.549375    5718.849375  13984.285400  5940.549375  321.7000  5718.849375       0.05  221.650000      221.650000     5.0      5618.849375         False           True  False
2    6140.549375    5718.849375  13984.285400  6140.549375  421.6500  5718.849375     100.05  321.650000      221.650000     5.0      5618.849375          True           True   True
3    6240.499375    5918.849365  13984.285400  6240.499375  421.6000  5918.849365     100.05  221.600010      221.600000     3.0      6140.449375         False           True   True
4    6240.499375    6018.849375  13984.285400  6240.499375  211.8000  6018.849375     100.05  121.600000      121.600000     3.0      6140.449375         False          False   True
5    6240.499375    6085.949375  13984.285400  6240.499375  106.9000  6085.949375     100.05   54.500000       21.600000     3.0      6140.449375         False          False   True
6    6240.499375    6126.386875  14062.685400  6240.499375   54.4500  6126.386875     100.05   14.062500        0.000000     4.0      6140.449375         False          False   True
7    6254.661875    6140.449375  14148.522900  6254.661875   28.2250  6140.449375     100.05   14.162500        0.000000     5.0      6140.449375         False          False   True
8    6254.661875    6154.611875  14148.522949  6254.661875   14.1125  6154.611875     100.05    0.000000      -99.999951     2.0      6140.449375         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=4433/20.[0m
[08/15 13:40:51]  --------------------------------------------------------------------------------
[08/15 13:40:51]  Iteration: 182 (19 solution, 162 counterexamples)
[08/15 13:41:46]  Generator returned sat in 49.178580 secs.
[08/15 13:41:46]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:41:48]  Improved gap from 99.33333333333333 to 100
[08/15 13:41:48]  Improved number of small numbers from 113 to 114 out of a max of 114
[08/15 13:41:48]  Verifer returned sat in 1.889273 secs.
[08/15 13:41:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    6140.589600    5940.389404  13984.2854  6140.589600    0.050049  5940.389404   0.050049  200.150146      100.150146     9.0      5940.389404            -1             -1     -1
1    6140.589600    6040.389404  13984.2854  6140.589600  200.100000  6040.389404   0.050049  100.150146        0.150146     9.0      5940.389404         False           True   True
2    6540.389404    6140.589355  13984.2854  6540.389404  499.949951  6140.589355   0.050049  399.750000      299.949951     1.0      5940.389404          True           True  False
3    6640.539307    6241.939209  13984.2854  6640.539307  499.899902  6241.939209   0.099854  398.500244      300.050049     2.0      6640.439453         False          False  False
4    6640.539307    6340.389404  13984.2854  6640.539307  248.949951  6340.389404   0.099854  300.050049      200.050049     3.0      6640.439453         False          False   True
5    6640.539307    6540.389404  13984.2854  6640.539307  300.000000  6540.389404   0.099854  100.050049      100.050049     3.0      6640.439453         False          False   True
6    6940.289307    6640.339355  13984.2854  6940.289307  399.800049  6640.339355   0.099854  299.850098      299.800049     4.0      6640.439453         False          False   True
7    7040.539307    6640.389404  13984.2854  7040.539307  400.100098  6640.389404   0.099854  400.050049      300.050049     5.0      6640.439453         False           True  False
8    7040.539307    6740.389404  13984.2854  7040.539307  351.050049  6740.389404   0.099854  300.050049      200.050049     3.0      6640.439453         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=1229005/4096.[0m
[08/15 13:41:49]  --------------------------------------------------------------------------------
[08/15 13:41:49]  Iteration: 183 (19 solution, 163 counterexamples)
[08/15 13:42:18]  Generator returned sat in 24.029159 secs.
[08/15 13:42:18]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:42:23]  Improved gap from 0.0 to 48.4375
[08/15 13:42:23]  Improved number of small numbers from 66 to 114 out of a max of 114
[08/15 13:42:23]  Verifer returned sat in 4.987003 secs.
[08/15 13:42:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    5978.034912    5880.960205  13984.285400  5978.034912   97.074951  5880.960205   0.000000  97.074707       48.437500     8.0      5880.960205            -1             -1     -1
1    5978.034912    5929.597412  14035.847900  5978.034912   96.975098  5929.597412   0.000000  48.437500        0.000000     2.0      5978.034912         False           True  False
2    6026.472412    5978.034912  14087.410400  6026.472412   96.875000  5978.034912   0.000000  48.437500        0.000000     3.0      6026.472412         False          False  False
3    6272.909912    6126.472412  14087.410400  6272.909912  294.875000  6126.472412  46.637695  99.799805       99.799805     1.0      6026.472412         False           True  False
4    6321.547607    6226.372803  14087.410400  6321.547607  148.437500  6226.372803  46.637695  48.537109       48.437500     1.0      6026.472412         False          False   True
5    6321.547607    6226.472412  14138.972900  6321.547607    1.000000  6226.472412  46.637695  48.437500        0.000000     2.0      6026.472412         False          False   True
6    6321.547607    6274.909912  14190.535400  6321.547607    1.000000  6274.909912  46.637695   0.000000      -48.437500     3.0      6026.472412         False          False   True
7    6396.266357    6323.347412  14237.610596  6396.266357   74.718750  6323.347412  46.637695  26.281250      -26.643555     1.0      6349.628662          True           True  False
8    6455.831787    6376.272461  14237.610596  6455.831787   85.846680  6376.272461  46.637695  32.921631      -67.078125     1.0      6349.628662         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=102195/1024.[0m
[08/15 13:42:24]  --------------------------------------------------------------------------------
[08/15 13:42:24]  Iteration: 184 (19 solution, 164 counterexamples)
[08/15 13:42:38]  Generator returned sat in 9.308458 secs.
[08/15 13:42:39]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:42:55]  Improved gap from 0.0 to 31.25
[08/15 13:42:56]  Improved number of small numbers from 60 to 73 out of a max of 114
[08/15 13:42:56]  Verifer returned sat in 17.132210 secs.
[08/15 13:42:56]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    5887.168945    5724.569092  14126.613525  5887.168945    0.099854  5724.569092    0.000000  162.599854       99.899658     2.0      5724.569092            -1             -1   False
1    5887.269043    5856.019079  14126.613734  5887.269043  162.699951  5856.019079    0.000000   31.249964       -0.000036     2.0      5724.569092         False          False   False
2    6018.619079    5987.269079  14126.613734  6018.619079  162.600000  5987.269079    0.100000   31.250000       31.250000     1.0      6018.519079         False          False   False
3    6248.480190    6087.063523  14126.613734  6248.480190  261.111111  6087.063523  129.961111   31.455556       31.250000     1.0      6018.519079         False          False    True
4    6348.580190    6151.641301  14126.613734  6348.580190  131.555556  6151.641301  130.061111   66.877778       31.250000     1.0      6018.519079         False          False    True
5    6348.580190    6187.269079  14195.363734  6348.580190   66.777778  6187.269079  130.061111   31.250000        0.000000     2.0      6018.519079         False          False    True
6    6351.719079    6218.519079  14264.113734  6351.719079   34.388889  6218.519079  130.061111    3.138889      -28.111111     3.0      6018.519079         False          False    True
7    6431.502412    6249.769079  14312.441406  6431.502412   82.922222  6249.769079  130.061111   51.672222       -0.000105     1.0      6301.441301          True           True   False
8    6470.355190    6301.541260  14373.588623  6470.355190   90.525000  6301.541260  130.061111   38.752819       -0.000111     1.0      6301.441301         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=125/4.[0m
[08/15 13:42:57]  --------------------------------------------------------------------------------
[08/15 13:42:57]  Iteration: 185 (19 solution, 165 counterexamples)
[08/15 13:43:15]  Generator returned sat in 13.083845 secs.
[08/15 13:43:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:43:16]  Improved gap from 0.0 to 23.4375
[08/15 13:43:17]  Improved number of small numbers from 60 to 66 out of a max of 114
[08/15 13:43:17]  Verifer returned sat in 2.177627 secs.
[08/15 13:43:17]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    5818.219238    5618.219079  14195.663734  5818.219238    0.1000  5618.219079        0.1  199.900160       99.900160     3.0      5618.219079            -1             -1     -1
1    5818.319079    5794.781579  14195.663734  5818.319079  200.0000  5794.781579        0.1   23.437500        0.000000     4.0      5618.219079         False           True   True
2    5918.419079    5918.219079  14195.663734  5918.419079  123.5375  5918.219079        0.1    0.100000        0.100000     1.0      5918.319079          True           True  False
3    6018.419079    6001.019079  14195.663734  6018.419079  100.1000  6001.019079        0.1   17.300000        0.100000     1.0      6018.319079         False          False  False
4    6383.919079    6118.219079  14195.663734  6383.919079  382.8000  6118.219079      265.5    0.200000        0.200000     1.0      6018.319079         False          False  False
5    6576.119079    6121.419079  14195.663734  6576.119079  192.4000  6121.419079      357.7   97.000000        0.200000     1.0      6018.319079         False          False   True
6    6576.319079    6218.519079  14271.926025  6576.319079   97.2000  6218.519079      357.7    0.100000      -23.337708     1.0      6018.319079         False          False   True
7    6625.819079    6241.956787  14345.763734  6625.819079   49.6000  6241.956787      357.7   26.162292        0.000000     1.0      6018.319079         False          False   True
8    6625.819079    6268.119079  14345.763916  6625.819079   25.8000  6268.119079      357.7    0.000000      -99.999818     2.0      6018.319079         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=1/5.[0m
[08/15 13:43:18]  --------------------------------------------------------------------------------
[08/15 13:43:18]  Iteration: 186 (19 solution, 166 counterexamples)
[08/15 13:43:59]  Generator returned sat in 35.224210 secs.
[08/15 13:43:59]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:44:01]  Improved gap from 0.0 to 48.4375
[08/15 13:44:02]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:44:02]  Verifer returned sat in 2.623876 secs.
[08/15 13:44:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    5969.981445    5778.231445  14066.126465  5969.981445    0.049805  5778.231445   0.000000  191.750000      148.437500     7.0      5778.231445            -1             -1     -1
1    6026.718994    5821.543945  14066.126465  6026.718994  248.487549  5821.543945  56.737549  148.437500       48.437500     2.0      5778.231445         False           True  False
2    6126.718994    5921.543945  14066.126465  6126.718994  248.437500  5921.543945  56.737549  148.437500       48.437500     3.0      6069.981445         False          False   True
3    6126.769043    6021.593994  14117.638916  6126.769043  148.487549  6021.593994  56.737549   48.437500        0.000000     2.0      6070.031494         False           True  False
4    6275.256592    6169.981689  14117.638916  6275.256592  196.925049  6169.981689  56.787598   48.487305       48.437500     1.0      6070.031494         False          False  False
5    6275.256592    6170.031494  14169.201416  6275.256592    1.000000  6170.031494  56.787598   48.437500        0.000000     2.0      6070.031494         False          False   True
6    6275.256592    6218.468994  14220.763916  6275.256592    1.000000  6218.468994  56.787598    0.000000      -48.437500     3.0      6070.031494         False          False   True
7    6375.194092    6266.906494  14267.739014  6375.194092   99.937500  6266.906494  56.787598   51.500000       -1.524902     1.0      6318.406494          True           True  False
8    6423.125244    6319.931641  14267.739014  6423.125244   99.431152  6319.931641  56.787598   46.406006      -53.593750     1.0      6318.406494         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=775/16.[0m
[08/15 13:44:02]  --------------------------------------------------------------------------------
[08/15 13:44:02]  Iteration: 187 (19 solution, 167 counterexamples)
[08/15 13:44:42]  Generator returned sat in 34.333845 secs.
[08/15 13:44:42]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:44:53]  Improved gap from 0.0016666666666666668 to 15.625
[08/15 13:44:54]  Improved number of small numbers from 59 to 75 out of a max of 114
[08/15 13:44:54]  Verifer returned sat in 11.364051 secs.
[08/15 13:44:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    2874.877930    2486.678112  18821.378965  2874.877930  450.850098  2486.678112        0.0  388.199818      388.199818     4.0      2486.678112            -1             -1   False
1    2937.478112    2486.678112  18821.378965  2937.478112  450.800000  2486.678112       62.6  388.200000      288.200000     4.0      2874.878112         False          False   False
2    3000.028112    2586.678223  18821.378965  3000.028112  450.750000  2586.678223       62.6  350.749889      250.750000     5.0      2937.428112         False          False    True
3    3000.028112    2686.678112  18821.378965  3000.028112  299.600000  2686.678112       62.6  250.750000      150.750000     6.0      2937.428112         False          False    True
4    3000.078112    2874.877930  18821.378965  3000.078112  250.800000  2874.877930       62.6   62.600182       50.800000     7.0      2937.428112         False          False    True
5    3062.877930    2937.528076  18821.378965  3062.877930  125.400000  2937.528076       62.6   62.749854       13.599818     1.0      2937.428112         False           True   False
6    3062.877930    2993.478112  18898.953857  3062.877930   62.700000  2993.478112       62.6    6.799818       -8.825290     2.0      2937.428112         False          False   False
7    3087.428112    3009.103271  18983.228965  3087.428112   31.350000  3009.103271       62.6   15.724840        0.000000     1.0      2937.428112         False          False   False
8    3087.428112    3024.828112  19067.603760  3087.428112   15.675000  3024.828112       62.6    0.000000      -15.625205     2.0      2937.428112         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1441/5.[0m
[08/15 13:44:54]  --------------------------------------------------------------------------------
[08/15 13:44:54]  Iteration: 188 (19 solution, 168 counterexamples)
[08/15 13:45:15]  Generator returned sat in 15.390809 secs.
[08/15 13:45:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:45:19]  Verifer returned unsat in 4.121243 secs.
[08/15 13:45:19]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:45:20]  --------------------------------------------------------------------------------
[08/15 13:45:20]  Iteration: 189 (20 solution, 168 counterexamples)
[08/15 13:45:32]  Generator returned sat in 7.249053 secs.
[08/15 13:45:32]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:45:36]  Verifer returned unsat in 3.291279 secs.
[08/15 13:45:36]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:45:36]  --------------------------------------------------------------------------------
[08/15 13:45:36]  Iteration: 190 (21 solution, 168 counterexamples)
[08/15 13:45:48]  Generator returned sat in 7.321141 secs.
[08/15 13:45:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:45:54]  Verifer returned unsat in 4.988174 secs.
[08/15 13:45:54]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:45:54]  --------------------------------------------------------------------------------
[08/15 13:45:54]  Iteration: 191 (22 solution, 168 counterexamples)
[08/15 13:46:29]  Generator returned sat in 29.300505 secs.
[08/15 13:46:29]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:46:31]  Improved gap from 0.01 to 14.0625
[08/15 13:46:31]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:46:31]  Verifer returned sat in 2.059264 secs.
[08/15 13:46:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    3375.577881    3075.577881  18821.378906  3375.577881    0.100098  3075.577881   0.099854  299.900146      299.899902     3.0      3075.577881            -1             -1     -1
1    3375.577881    3175.578125  18821.378906  3375.577881  299.900000  3175.578125   0.099854  199.899902      199.899902     2.0      3075.577881         False          False   True
2    3573.677979    3175.578125  18821.378906  3573.677979  398.000000  3175.578125   0.199951  397.899902      297.899902     2.0      3075.577881         False          False   True
3    3573.677979    3375.578125  18821.378906  3573.677979  394.000000  3375.578125   0.199951  197.899902      197.899902     2.0      3573.478027         False          False   True
4    3573.778076    3475.578125  18821.378906  3573.778076  198.000000  3475.578125   0.199951   98.000000       98.000000     3.0      3573.478027         False          False   True
5    3575.778076    3475.578125  18821.378906  3575.778076  100.000000  3475.578125   0.199951  100.000000        0.000000     3.0      3573.478027         False          False   True
6    3575.778076    3575.578125  18894.979004  3575.778076   51.000000  3575.578125   0.199951    0.000000      -26.399902     2.0      3573.478027         False          False   True
7    3602.278076    3601.978027  18980.916504  3602.278076   26.500000  3601.978027   0.199951    0.100098      -13.962402     1.0      3573.478027         False          False   True
8    3616.427979    3616.040527  19066.853760  3616.427979   14.250000  3616.040527   0.199951    0.187500      -13.875244     1.0      3573.478027         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=610099/2048.[0m
[08/15 13:46:32]  --------------------------------------------------------------------------------
[08/15 13:46:32]  Iteration: 192 (22 solution, 169 counterexamples)
[08/15 13:47:02]  Generator returned sat in 24.550963 secs.
[08/15 13:47:02]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:47:18]  Improved gap from 0.09345794392523364 to 0
[08/15 13:47:19]  Improved number of small numbers from 114 to 114 out of a max of 114
[08/15 13:47:19]  Verifer returned sat in 17.130875 secs.
[08/15 13:47:19]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    2947.701042    2947.651042  18922.280990  2947.701042    0.050000  2947.651042   0.000000    0.050000      -26.975000     9.0      2947.651042            -1             -1     -1
1    3076.410417    2974.676042  18922.280990  3076.410417  128.759375  2974.676042   0.050000  101.684375        1.684375     1.0      2947.651042         False           True  False
2    3174.826042    3174.676042  18922.280990  3174.826042  200.100000  3174.676042   0.050000    0.100000        0.100000     1.0      2947.651042         False          False   True
3    3174.826042    3174.726042  19022.180990  3174.826042    0.050000  3174.726042   0.050000    0.050000        0.000000     2.0      3174.776042         False          False   True
4    3289.338542    3219.129167  19022.180990  3289.338542  114.562500  3219.129167  12.878125   57.331250        1.684375     1.0      3174.776042         False           True  False
5    3289.338542    3274.776042  19120.446615  3289.338542   57.281250  3274.776042  12.878125    1.684375       -0.050000     2.0      3174.776042         False          False   True
6    3367.344792    3276.510417  19142.490365  3367.344792   79.690625  3276.510417  12.878125   77.956250        0.000000     1.0      3354.466667          True           True  False
7    3381.126042    3354.516667  19227.877865  3381.126042   91.737500  3354.516667  12.878125   13.731250       -0.831250     1.0      3354.466667         False          False  False
8    3481.957292    3369.079167  19227.877865  3481.957292  114.562500  3369.079167  12.878125  100.000000        0.000000     1.0      3354.466667         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=539/320.[0m
[08/15 13:47:20]  --------------------------------------------------------------------------------
[08/15 13:47:20]  Iteration: 193 (22 solution, 170 counterexamples)
[08/15 13:47:38]  Generator returned sat in 12.466447 secs.
[08/15 13:47:38]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:47:39]  Improved gap from 0.05 to 100
[08/15 13:47:39]  Improved number of small numbers from 113 to 114 out of a max of 114
[08/15 13:47:39]  Verifer returned sat in 0.950536 secs.
[08/15 13:47:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    4839.863770    4788.863525  19142.490234  4839.863770    0.050000  4788.863525   0.049805   50.950439       50.950439     5.0      4788.863525            -1             -1     -1
1    4938.063477    4839.863525  19142.490234  4938.063477  149.150146  4839.863525   0.049805   98.150146       49.150146     1.0      4788.863525         False           True   True
2    4989.013428    4988.863525  19142.490234  4989.013428  149.100098  4988.863525   0.049805    0.100098        0.100098     1.0      4988.963623         False          False   True
3    4989.013428    4988.863525  19142.490234  4989.013428    0.050000  4988.863525   0.049805    0.100098      -99.899902     1.0      4988.963623         False          False   True
4    5189.913330    5088.863525  19142.490234  5189.913330  201.000000  5088.863525   0.049805  101.000000        1.000000     1.0      4988.963623         False          False   True
5    5338.913330    5189.913574  19142.490234  5338.913330  250.000000  5189.913574   0.049805  148.949951       50.000000     1.0      4988.963623         False          False   True
6    5392.013428    5388.863525  19142.490234  5392.013428  202.050049  5388.863525   0.049805    3.100098        3.100098     1.0      4988.963623         False          False   True
7    5789.913330    5388.913574  19142.490234  5789.913330  401.000000  5388.913574   0.949951  400.049805      300.099854     2.0      4988.963623         False          False   True
8    5789.913330    5588.863525  19142.490234  5789.913330  201.500000  5588.863525   0.949951  200.099854      200.099854     2.0      5788.963379          True           True   True
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=1229209/4096.[0m
[08/15 13:47:40]  --------------------------------------------------------------------------------
[08/15 13:47:40]  Iteration: 194 (22 solution, 171 counterexamples)
[08/15 13:48:28]  Generator returned sat in 42.709724 secs.
[08/15 13:48:28]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:48:32]  Improved gap from 0.0 to 48.4375
[08/15 13:48:33]  Improved number of small numbers from 44 to 69 out of a max of 114
[08/15 13:48:33]  Verifer returned sat in 4.976532 secs.
[08/15 13:48:33]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    4338.480713    4189.991211  19641.362793  4338.480713    0.001250  4189.991211   0.049805  148.439697       48.439941     9.0      4189.991211            -1             -1     -1
1    4338.480713    4338.429688  19644.486484  4338.480713  148.438965  4338.429688   0.049805    0.001221      -48.436367     2.0      4189.991211         False           True   True
2    4486.916992    4386.867275  19644.486484  4486.916992  148.437500  4386.867275   0.049805   99.999912       -0.000088     1.0      4486.867188          True           True  False
3    4593.412080    4582.623525  19644.486484  4593.412080  206.495000  4582.623525   6.542305    4.246250        0.002500     1.0      4486.867188         False          False  False
4    4693.413330    4682.184775  19644.486484  4693.413330  104.247500  4682.184775   6.543555    4.685000        0.002500     1.0      4486.867188         False          False   True
5    4741.852080    4686.870850  19696.045234  4741.852080   53.123750  4686.870850   6.543555   48.437676        0.000000     1.0      4486.867188         False          False   True
6    4741.852080    4735.308525  19747.607734  4741.852080    0.010000  4735.308525   6.543555    0.000000      -48.437500     2.0      4486.867188         False          False   True
7    4818.199580    4783.746025  19799.170166  4818.199580   76.347500  4783.746025   6.543555   27.910000      -20.527568     1.0      4811.656025          True           True  False
8    4879.243955    4832.183594  19850.732666  4879.243955   88.954375  4832.183594   6.543555   40.516807       -7.920693     1.0      4811.656025         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/400.[0m
[08/15 13:48:34]  --------------------------------------------------------------------------------
[08/15 13:48:34]  Iteration: 195 (22 solution, 172 counterexamples)
[08/15 13:48:48]  Generator returned sat in 8.769598 secs.
[08/15 13:48:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:48:58]  Improved gap from 0.0 to 1.5625
[08/15 13:49:00]  Improved number of small numbers from 65 to 77 out of a max of 114
[08/15 13:49:00]  Verifer returned sat in 11.231141 secs.
[08/15 13:49:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    4426.493896    4300.542606  19499.169922  4426.493896  127.562256  4300.542606   0.000000  125.951290       98.412852     1.0      4300.542606            -1             -1   False
1    4428.080801    4426.518066  19499.170166  4428.080801  127.538194  4426.518066   0.000000    1.562734        0.000000     1.0      4428.080801         False          False   False
2    4528.056396    4528.032190  19499.170166  4528.056396  101.538330  4528.032190   0.000000    0.024207       -0.024404     1.0      4528.056396         False          False   False
3    4528.105106    4528.080801  19597.607666  4528.105106    0.072917  4528.080801   0.000000    0.024306       -1.538194     1.0      4528.105106         False          False   False
4    4641.886356    4573.254412  19597.607666  4641.886356  113.805556  4573.254412  10.704861   57.927083        1.538194     1.0      4528.105106         False          False   False
5    4641.886356    4629.643301  19696.045166  4641.886356   57.902778  4629.643301  10.704861    1.538194       -0.024306     2.0      4528.105106         False          False    True
6    4720.105106    4631.205801  19717.850586  4720.105106   79.756944  4631.205801  10.704861   78.194444       -0.000136     1.0      4709.400245          True           True   False
7    4733.351634    4709.424551  19804.020996  4733.351634   91.440972  4709.424551  10.704861   13.222222       -0.583198     1.0      4709.400245         False          False   False
8    4833.934967    4723.230225  19804.020996  4833.934967  113.805556  4723.230225  10.704861   99.999882        0.000136     1.0      4709.400245         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=443/288.[0m
[08/15 13:49:00]  --------------------------------------------------------------------------------
[08/15 13:49:00]  Iteration: 196 (22 solution, 173 counterexamples)
[08/15 13:49:17]  Generator returned sat in 11.165849 secs.
[08/15 13:49:18]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:49:20]  Improved gap from 0.0016666666666666668 to 0
[08/15 13:49:21]  Improved number of small numbers from 59 to 71 out of a max of 114
[08/15 13:49:21]  Verifer returned sat in 3.409741 secs.
[08/15 13:49:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t   queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    4358.760742    4358.095940  19469.154785  4358.760742  0.672119  4358.095940   0.000833  0.663969        0.663727     9.0      4358.095940            -1             -1     -1
1    4358.768162    4358.760662  19568.482910  4358.768162  0.671389  4358.760662   0.000833  0.006667       -0.000728     1.0      4358.767329         False           True   True
2    4359.432051    4358.768162  19667.813965  4359.432051  0.670556  4358.768162   0.000833  0.663056       -0.005785     1.0      4359.431217         False          False   True
3    4359.438717    4359.437051  19767.481201  4359.438717  0.669722  4359.437051   0.000833  0.000833       -0.331882     1.0      4359.437884         False          False   True
4    4359.778995    4359.769829  19867.472656  4359.778995  0.341111  4359.769829   0.000833  0.008333       -0.000149     1.0      4359.437884         False          False   True
5    4359.780662    4359.778995  19967.470459  4359.780662  0.010000  4359.778995   0.000833  0.000833       -0.000679     1.0      4359.437884         False          False   True
6    4359.790662    4359.780662  20067.461138  4359.790662  0.010833  4359.780662   0.000833  0.009167        0.000000     1.0      4359.437884         False          False   True
7    4359.791495    4359.789829  20167.441162  4359.791495  0.010000  4359.789829   0.000833  0.000833       -0.019143     2.0      4359.437884         False          False   True
8    4359.810662    4359.809814  20267.440918  4359.810662  0.020000  4359.809814   0.000833  0.000014       -0.000220     1.0      4359.809829          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=3/2048.[0m
[08/15 13:49:22]  --------------------------------------------------------------------------------
[08/15 13:49:22]  Iteration: 197 (22 solution, 174 counterexamples)
[08/15 13:50:00]  Generator returned sat in 32.393823 secs.
[08/15 13:50:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:50:01]  Improved gap from 0.05 to 23.4375
[08/15 13:50:02]  Improved number of small numbers from 59 to 68 out of a max of 114
[08/15 13:50:02]  Verifer returned sat in 2.022524 secs.
[08/15 13:50:02]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t  cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    3891.068115    3767.530662  20059.720305  3891.068115    0.1000  3767.530662     0.0000  123.537453      123.537453     1.0      3767.530662            -1             -1   False
1    3891.168162    3767.530662  20059.720305  3891.168162  123.6375  3767.530662     0.1000  123.537500       23.537500     1.0      3767.530662         False          False   False
2    3991.268162    3967.530662  20059.720305  3991.268162  223.6375  3967.530662     0.2000   23.537500       23.537500     1.0      3767.530662         False          False    True
3    4259.880662    4043.893162  20059.720305  4259.880662  292.1500  4043.893162   168.8125   47.175000       23.537500     1.0      3767.530662         False          False    True
4    4359.780662    4167.430420  20059.720305  4359.780662  147.0750  4167.430420   168.8125   23.537742       23.437500     1.0      3767.530662         False          False    True
5    4359.780662    4167.530662  20136.282805  4359.780662    1.0000  4167.530662   168.8125   23.437500        0.000000     2.0      3767.530662         False          False    True
6    4359.780662    4190.968162  20212.845305  4359.780662    1.0000  4190.968162   168.8125    0.000000      -23.437500     3.0      3767.530662         False          False    True
7    4506.855662    4214.405762  20212.845305  4506.855662  147.0750  4214.405762   168.9125  123.537400       23.537500     1.0      4337.943162          True           True   False
8    4506.855662    4314.405762  20289.307617  4506.855662   74.5375  4314.405762   168.9125   23.537400       -0.000188     2.0      4337.943162         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1883/80.[0m
[08/15 13:50:03]  --------------------------------------------------------------------------------
[08/15 13:50:03]  Iteration: 198 (22 solution, 175 counterexamples)
[08/15 13:51:07]  Generator returned sat in 58.412800 secs.
[08/15 13:51:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:51:10]  Verifer returned unsat in 2.756343 secs.
[08/15 13:51:10]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:51:10]  --------------------------------------------------------------------------------
[08/15 13:51:10]  Iteration: 199 (23 solution, 175 counterexamples)
[08/15 13:51:36]  Generator returned sat in 20.039460 secs.
[08/15 13:51:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:51:39]  Verifer returned unsat in 2.787292 secs.
[08/15 13:51:39]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:51:39]  --------------------------------------------------------------------------------
[08/15 13:51:39]  Iteration: 200 (24 solution, 175 counterexamples)
[08/15 13:52:02]  Generator returned sat in 17.327798 secs.
[08/15 13:52:02]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:52:05]  Verifer returned unsat in 2.364804 secs.
[08/15 13:52:05]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:52:05]  --------------------------------------------------------------------------------
[08/15 13:52:05]  Iteration: 201 (25 solution, 175 counterexamples)
[08/15 13:52:24]  Generator returned sat in 14.273785 secs.
[08/15 13:52:25]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:52:29]  Verifer returned unsat in 3.661434 secs.
[08/15 13:52:29]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:52:29]  --------------------------------------------------------------------------------
[08/15 13:52:29]  Iteration: 202 (26 solution, 175 counterexamples)
[08/15 13:52:48]  Generator returned sat in 14.232820 secs.
[08/15 13:52:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:52:51]  Verifer returned unsat in 1.716792 secs.
[08/15 13:52:51]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:52:51]  --------------------------------------------------------------------------------
[08/15 13:52:51]  Iteration: 203 (27 solution, 175 counterexamples)
[08/15 13:53:13]  Generator returned sat in 16.726142 secs.
[08/15 13:53:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:53:15]  Verifer returned unsat in 2.003855 secs.
[08/15 13:53:15]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:53:15]  --------------------------------------------------------------------------------
[08/15 13:53:15]  Iteration: 204 (28 solution, 175 counterexamples)
[08/15 13:53:32]  Generator returned sat in 10.552321 secs.
[08/15 13:53:32]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:53:34]  Verifer returned unsat in 1.795961 secs.
[08/15 13:53:34]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:53:34]  --------------------------------------------------------------------------------
[08/15 13:53:34]  Iteration: 205 (29 solution, 175 counterexamples)
[08/15 13:54:13]  Generator returned sat in 33.093639 secs.
[08/15 13:54:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:54:20]  Improved gap from 0.0 to 32.8125
[08/15 13:54:21]  Improved number of small numbers from 57 to 80 out of a max of 114
[08/15 13:54:21]  Verifer returned sat in 8.316844 secs.
[08/15 13:54:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7145.309570    7012.497070  20060.276855  7145.309570    0.046143  7012.497070    0.000000  132.812500      132.812448     9.0      7012.497070            -1             -1     -1
1    7145.309570    7012.497314  20060.276855  7145.309570    0.046387  7012.497314    0.000000  132.812256       32.812448     2.0      7012.497070         False           True  False
2    7145.309570    7112.497165  20127.464314  7145.309570    0.046387  7112.497165    0.000000   32.812406       -0.000094     3.0      7012.497070         False          False  False
3    7380.214837    7245.309665  20127.464314  7380.214837  267.717672  7245.309665  102.092672   32.812500       32.812500     1.0      7012.497070          True           True  False
4    7480.261173    7312.478442  20127.464314  7480.261173  132.858836  7312.478442  102.139009   65.643723       32.812500     1.0      7012.497070         False          False   True
5    7480.261173    7345.309665  20194.651814  7480.261173   65.429418  7345.309665  102.139009   32.812500        0.000000     2.0      7012.497070         False          False   True
6    7481.163382    7378.122165  20261.839314  7481.163382   33.714709  7378.122165  102.139009    0.902209      -31.910291     3.0      7012.497070         False          False   True
7    7564.524778    7410.934665  20310.342041  7564.524778   84.263605  7410.934665  102.139009   51.451105       -0.046168     1.0      7462.385769          True           True  False
8    7605.433587    7462.432129  20310.342041  7605.433587   92.359914  7462.432129  102.139009   40.862450      -59.137359     1.0      7462.385769         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=525/16.[0m
[08/15 13:54:22]  --------------------------------------------------------------------------------
[08/15 13:54:22]  Iteration: 206 (29 solution, 176 counterexamples)
[08/15 13:55:22]  Generator returned sat in 54.181900 secs.
[08/15 13:55:22]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:55:26]  Improved gap from 0.0 to 15.625
[08/15 13:55:26]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 13:55:26]  Verifer returned sat in 4.016809 secs.
[08/15 13:55:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7626.463135    7245.263428  19727.510742  7626.463135  381.200195  7245.263428    0.000000  381.199707      281.199707     3.0      7245.263428            -1             -1     -1
1    7626.463135    7445.263184  19727.510742  7626.463135  381.149902  7445.263184    0.000000  181.199951      181.199707     2.0      7626.463135         False           True  False
2    7826.363037    7445.263428  19727.510742  7826.363037  381.099854  7445.263428   49.799805  331.299805      231.299805     3.0      7776.563232         False          False  False
3    7995.063232    7626.513428  19727.510742  7995.063232  500.000000  7626.513428  118.500000  250.049805      231.299805     2.0      7776.563232         False           True   True
4    7995.063232    7745.263428  19727.510742  7995.063232  250.000000  7745.263428  118.500000  131.299805      131.299805     3.0      7776.563232         False          False   True
5    7995.063232    7814.013428  19727.510742  7995.063232  125.000000  7814.013428  118.500000   62.549805       31.299805     3.0      7776.563232         False           True  False
6    7995.063232    7845.263428  19796.210938  7995.063232   62.500000  7845.263428  118.500000   31.299805        0.000000     4.0      7776.563232         False           True  False
7    7995.063232    7876.563232  19880.585938  7995.063232   31.250000  7876.563232  118.500000    0.000000      -15.625000     5.0      7876.563232          True           True  False
8    8010.688232    7892.188232  19880.585938  8010.688232   15.625000  7892.188232  118.500000    0.000000     -100.000000     1.0      7876.563232         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=236851/1024.[0m
[08/15 13:55:27]  --------------------------------------------------------------------------------
[08/15 13:55:27]  Iteration: 207 (29 solution, 177 counterexamples)
[08/15 13:55:45]  Generator returned sat in 12.625423 secs.
[08/15 13:55:46]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:55:50]  Improved gap from 15.625 to 15.625
[08/15 13:55:51]  Improved number of small numbers from 68 to 72 out of a max of 114
[08/15 13:55:51]  Verifer returned sat in 5.064273 secs.
[08/15 13:55:51]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   10713.820557   10513.820635  19711.885937  10713.820557  200.100098  10513.820635       0.00  199.999922      199.999922     8.0     10513.820635            -1             -1     -1
1   10713.870635   10613.820635  19711.885937  10713.870635  200.050000  10613.820635       0.05  100.000000      100.000000     3.0     10713.820635         False           True  False
2   10813.820635   10613.820635  19711.885937  10813.820635  199.950000  10613.820635       0.05  199.950000       99.950000     3.0     10813.770635         False           True   True
3   11109.470635   10813.820635  19711.885937  11109.470635  495.600000  10813.820635     195.65  100.000000      100.000000     1.0     10813.770635         False           True  False
4   11258.270635   10895.270635  19711.885937  11258.270635  248.800000  10895.270635     244.45  118.550000      100.000000     2.0     10813.770635         False          False   True
5   11265.120635   10913.820635  19711.885937  11265.120635  125.400000  10913.820635     244.45  106.850000        6.850000     3.0     10813.770635         False          False   True
6   11265.120635   11013.870635  19796.210938  11265.120635   62.700000  11013.870635     244.45    6.800000       -8.825000     2.0     11020.670635          True           True  False
7   11289.670635   11029.495850  19880.485938  11289.670635   31.350000  11029.495850     244.45   15.724785        0.000000     1.0     11020.670635         False          False  False
8   11289.670635   11045.220635  19880.486084  11289.670635   15.675000  11045.220635     244.45    0.000000      -99.999854     2.0     11020.670635         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=100.[0m
[08/15 13:55:51]  --------------------------------------------------------------------------------
[08/15 13:55:51]  Iteration: 208 (29 solution, 178 counterexamples)
[08/15 13:56:18]  Generator returned sat in 21.443413 secs.
[08/15 13:56:19]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:56:21]  Verifer returned unsat in 1.802608 secs.
[08/15 13:56:21]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:56:21]  --------------------------------------------------------------------------------
[08/15 13:56:21]  Iteration: 209 (30 solution, 178 counterexamples)
[08/15 13:56:35]  Generator returned sat in 8.166032 secs.
[08/15 13:56:35]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:56:37]  Verifer returned unsat in 2.365570 secs.
[08/15 13:56:37]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:56:37]  --------------------------------------------------------------------------------
[08/15 13:56:37]  Iteration: 210 (31 solution, 178 counterexamples)
[08/15 13:56:51]  Generator returned sat in 8.196716 secs.
[08/15 13:56:52]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:56:53]  Verifer returned unsat in 1.662428 secs.
[08/15 13:56:53]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:56:53]  --------------------------------------------------------------------------------
[08/15 13:56:53]  Iteration: 211 (32 solution, 178 counterexamples)
[08/15 13:57:15]  Generator returned sat in 15.399484 secs.
[08/15 13:57:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:57:17]  Verifer returned unsat in 2.291331 secs.
[08/15 13:57:17]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:57:17]  --------------------------------------------------------------------------------
[08/15 13:57:17]  Iteration: 212 (33 solution, 178 counterexamples)
[08/15 13:57:38]  Generator returned sat in 15.338377 secs.
[08/15 13:57:39]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:57:41]  Verifer returned unsat in 2.258456 secs.
[08/15 13:57:41]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:57:41]  --------------------------------------------------------------------------------
[08/15 13:57:41]  Iteration: 213 (34 solution, 178 counterexamples)
[08/15 13:57:56]  Generator returned sat in 8.892728 secs.
[08/15 13:57:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:58:06]  Improved gap from 0.0 to 15.625
[08/15 13:58:08]  Improved number of small numbers from 60 to 70 out of a max of 114
[08/15 13:58:08]  Verifer returned sat in 11.586638 secs.
[08/15 13:58:08]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    9651.380127    9451.480285  20774.226502  9651.380127    0.050000  9451.480285       0.00  199.899842      199.899842     9.0      9451.480285            -1             -1     -1
1    9833.964156    9451.480285  20774.226502  9833.964156  382.483871  9451.480285       0.05  382.433871      282.433871     9.0      9451.480285         False           True  False
2    9902.754479    9651.430285  20774.226502  9902.754479  451.224194  9651.430285       0.05  251.274194      251.224194     2.0      9451.480285         False           True   True
3    9967.622221    9651.480285  20774.226502  9967.622221  316.141935  9651.480285       0.05  316.091935      216.091935     3.0      9967.572221         False          False   True
4    9967.622221    9833.914062  20774.226502  9967.622221  259.070968  9833.914062       0.05  133.658158      116.091935     4.0      9967.572221         False          False   True
5    9967.622221    9902.754395  20774.226502  9967.622221  129.535484  9902.754395       0.05   64.817826       16.091935     3.0      9967.572221         False           True  False
6    9967.622221    9951.480285  20858.134521  9967.622221   64.767742  9951.480285       0.05   16.091935       -0.000045     4.0      9967.572221         False          False  False
7    9983.914156    9967.622070  20941.842631  9983.914156   32.383871  9967.622070       0.05   16.242086        0.000000     1.0      9967.572221         False           True  False
8    9983.914156    9983.864156  21026.217529  9983.914156   16.191935  9983.864156       0.05    0.000000      -15.625102     2.0      9967.572221         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=175109/620.[0m
[08/15 13:58:08]  --------------------------------------------------------------------------------
[08/15 13:58:08]  Iteration: 214 (34 solution, 179 counterexamples)
[08/15 13:58:33]  Generator returned sat in 18.518522 secs.
[08/15 13:58:33]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:58:42]  Improved gap from 0.05 to 15.625
[08/15 13:58:43]  Improved number of small numbers from 59 to 71 out of a max of 114
[08/15 13:58:43]  Verifer returned sat in 9.707031 secs.
[08/15 13:58:43]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    9970.774170    9426.424355  20774.226502   9970.774170  544.550049   9426.424355        0.0  544.349814      444.349814     9.0      9426.424355            -1             -1     -1
1    9970.874355    9626.424355  20774.226502   9970.874355  544.450000   9626.424355        0.1  344.350000      344.350000     6.0      9970.774355         False           True  False
2   10033.874355    9626.424561  20774.226502  10033.874355  407.350000   9626.424561        0.1  407.349795      307.350000     6.0     10033.774355         False          False   True
3   10033.874355    9782.274355  20774.226502  10033.874355  145.350000   9782.274355        0.1  251.500000      207.350000     7.0     10033.774355         False          False   True
4   10033.974355    9907.974365  20774.226502  10033.974355  251.600000   9907.974365        0.1  125.899990      107.450000     8.0     10033.774355         False          False   True
5   10033.974355    9970.874512  20774.226502  10033.974355  125.800000   9970.874512        0.1   62.999844        7.450000     4.0     10033.774355         False           True  False
6   10033.974355   10026.424355  20858.601318  10033.974355   62.900000  10026.424355        0.1    7.450000       -8.175184     5.0     10033.774355         False          False  False
7   10057.974355   10042.049561  20942.776502  10057.974355   31.450000  10042.049561        0.1   15.824795        0.000000     1.0     10033.774355         False          False  False
8   10057.974355   10057.874355  20942.776611  10057.974355   15.725000  10057.874355        0.1    0.000000      -99.999891     2.0     10033.774355         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=6887/20.[0m
[08/15 13:58:43]  --------------------------------------------------------------------------------
[08/15 13:58:43]  Iteration: 215 (34 solution, 180 counterexamples)
[08/15 13:58:59]  Generator returned sat in 10.254447 secs.
[08/15 13:59:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:59:04]  Verifer returned unsat in 3.871398 secs.
[08/15 13:59:04]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:59:04]  --------------------------------------------------------------------------------
[08/15 13:59:04]  Iteration: 216 (35 solution, 180 counterexamples)
[08/15 13:59:33]  Generator returned sat in 23.702889 secs.
[08/15 13:59:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:59:36]  Verifer returned unsat in 2.359011 secs.
[08/15 13:59:36]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 13:59:36]  --------------------------------------------------------------------------------
[08/15 13:59:36]  Iteration: 217 (36 solution, 180 counterexamples)
[08/15 14:00:10]  Generator returned sat in 28.447655 secs.
[08/15 14:00:11]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:00:20]  Improved gap from 0.0 to 15.625
[08/15 14:00:21]  Improved number of small numbers from 59 to 69 out of a max of 114
[08/15 14:00:21]  Verifer returned sat in 9.981666 secs.
[08/15 14:00:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   10855.334355   10423.417689  20792.018169  10855.334355  500.099854  10423.417689   0.050000  431.866667      399.950000     6.0     10423.417689            -1             -1     -1
1   10923.517689   10455.334355  20792.018169  10923.517689  500.050000  10455.334355  68.233333  399.950000      299.950000     6.0     10855.284355         False          False   True
2   11023.567689   10655.334229  20792.018169  11023.567689  500.000000  10655.334229  68.283333  299.950127      299.950000     7.0     10955.284355         False          False   True
3   11023.567689   10655.384355  20792.018169  11023.567689  299.900000  10655.384355  68.283333  299.900000      199.950000     8.0     10955.284355         False          False   True
4   11023.567689   10855.284355  20792.018169  11023.567689  266.933333  10855.284355  68.283333  100.000000       99.950000     9.0     10955.284355         False          False   True
5   11057.034355   10921.967773  20792.018169  11057.034355  133.466667  10921.967773  68.283333   66.783249       33.416667     4.0     10955.284355         False           True  False
6   11057.034355   10955.334473  20858.601502  11057.034355   66.733333  10955.334473  68.283333   33.416549        0.000000     2.0     10955.284355         False          False  False
7   11057.034355   10988.751022  20942.118408  11057.034355   33.366667  10988.751022  68.283333    0.000000      -16.483094     3.0     10955.284355         False          False  False
8   11073.717689   11005.234131  20942.118408  11073.717689   16.683333  11005.234131  68.283333    0.200225      -99.799760     1.0     10955.284355         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=5999/20.[0m
[08/15 14:00:22]  --------------------------------------------------------------------------------
[08/15 14:00:22]  Iteration: 218 (36 solution, 181 counterexamples)
[08/15 14:00:59]  Generator returned sat in 31.430803 secs.
[08/15 14:00:59]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:00]  Improved number of small numbers from 67 to 113 out of a max of 113
[08/15 14:01:00]  Verifer returned sat in 0.484695 secs.
[08/15 14:01:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0   10056.833984    9356.634277  21890.618164  10056.833984  700.199951   9356.634277   0.099854  700.099854      700.000000     3.0      9356.634277            -1             -1     -1
1   10056.934082    9356.734131  21890.618164  10056.934082  700.199951   9356.734131   0.199951  700.000000      600.000000     3.0      9356.634277         False          False   True
2   10057.134033    9456.734131  21890.618164  10057.134033  700.199951   9456.734131   0.199951  600.199951      500.199951     4.0      9356.634277         False          False   True
3   10057.134033    9556.734375  21890.618164  10057.134033  600.099854   9556.734375   0.199951  500.199707      400.199951     5.0     10056.934082         False          False   True
4   10057.134033    9656.734131  21890.618164  10057.134033  200.100098   9656.734131   0.199951  400.199951      300.199951     6.0     10056.934082         False          False   True
5   10057.134033    9756.784180  21890.618164  10057.134033  300.000000   9756.784180   0.199951  300.149902      200.199951     7.0     10056.934082         False          False   True
6   10057.134033    9955.534180  21890.618164  10057.134033  300.050049   9955.534180   0.199951  101.399902      100.199951     8.0     10056.934082         False          False   True
7   10354.533936   10056.734131  21890.618164  10354.533936  398.799805  10056.734131   0.199951  297.599854      297.599854     9.0     10056.934082         False          False   True
8   10457.333984   10057.033936  21890.618164  10457.333984  400.399902  10057.033936   0.199951  400.100098      300.399902     2.0     10056.934082         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=True, ramp_down_bq=False, total_losses=0, buffer=600.[0m
[08/15 14:01:00]  --------------------------------------------------------------------------------
[08/15 14:01:00]  Iteration: 219 (36 solution, 182 counterexamples)
[08/15 14:01:21]  Generator returned sat in 14.671318 secs.
[08/15 14:01:21]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:22]  Verifer returned unsat in 0.439433 secs.
[08/15 14:01:22]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:22]  --------------------------------------------------------------------------------
[08/15 14:01:22]  Iteration: 220 (37 solution, 182 counterexamples)
[08/15 14:01:36]  Generator returned sat in 8.958694 secs.
[08/15 14:01:37]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:37]  Verifer returned unsat in 0.470297 secs.
[08/15 14:01:37]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:37]  --------------------------------------------------------------------------------
[08/15 14:01:37]  Iteration: 221 (38 solution, 182 counterexamples)
[08/15 14:01:52]  Generator returned sat in 8.855456 secs.
[08/15 14:01:53]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:53]  Verifer returned unsat in 0.418695 secs.
[08/15 14:01:53]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:01:53]  --------------------------------------------------------------------------------
[08/15 14:01:53]  Iteration: 222 (39 solution, 182 counterexamples)
[08/15 14:02:09]  Generator returned sat in 10.373432 secs.
[08/15 14:02:10]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:02:10]  Verifer returned unsat in 0.447758 secs.
[08/15 14:02:10]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:02:10]  --------------------------------------------------------------------------------
[08/15 14:02:10]  Iteration: 223 (40 solution, 182 counterexamples)
[08/15 14:02:33]  Generator returned sat in 17.155369 secs.
[08/15 14:02:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:02:34]  Verifer returned unsat in 0.351578 secs.
[08/15 14:02:34]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:02:34]  --------------------------------------------------------------------------------
[08/15 14:02:34]  Iteration: 224 (41 solution, 182 counterexamples)
[08/15 14:02:57]  Generator returned sat in 16.691545 secs.
[08/15 14:02:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:02:58]  Verifer returned unsat in 0.446108 secs.
[08/15 14:02:58]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:02:58]  --------------------------------------------------------------------------------
[08/15 14:02:58]  Iteration: 225 (42 solution, 182 counterexamples)
[08/15 14:03:12]  Generator returned sat in 8.803533 secs.
[08/15 14:03:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:03:13]  Verifer returned unsat in 0.657456 secs.
[08/15 14:03:13]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:03:13]  --------------------------------------------------------------------------------
[08/15 14:03:13]  Iteration: 226 (43 solution, 182 counterexamples)
[08/15 14:03:28]  Generator returned sat in 8.561124 secs.
[08/15 14:03:28]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:03:29]  Verifer returned unsat in 0.529445 secs.
[08/15 14:03:29]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:03:29]  --------------------------------------------------------------------------------
[08/15 14:03:29]  Iteration: 227 (44 solution, 182 counterexamples)
[08/15 14:03:43]  Generator returned sat in 8.583395 secs.
[08/15 14:03:44]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:03:44]  Verifer returned unsat in 0.508991 secs.
[08/15 14:03:44]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:03:44]  --------------------------------------------------------------------------------
[08/15 14:03:44]  Iteration: 228 (45 solution, 182 counterexamples)
[08/15 14:03:59]  Generator returned sat in 9.298291 secs.
[08/15 14:04:00]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:04:05]  Improved gap from 0.041666666666666664 to 1.5625
[08/15 14:04:07]  Improved number of small numbers from 39 to 55 out of a max of 114
[08/15 14:04:07]  Verifer returned sat in 7.110142 secs.
[08/15 14:04:07]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    9185.283691    9171.476239  22131.568604  9185.283691    0.011963  9171.476239   0.000000  13.807452       13.807284     2.0      9171.476239            -1             -1   False
1    9185.283691    9183.721191  22217.761230  9185.283691    0.012207  9183.721191   0.000000   1.562500       -0.000089     2.0      9171.476239         False          False   False
2    9285.271729    9285.259603  22217.761230  9285.271729  101.550537  9285.259603   0.000000   0.012126       -0.012052     1.0      9171.476239         False          False   False
3    9286.846408    9285.283908  22316.198602  9286.846408    1.586806  9285.283908   0.000000   1.562500        0.000000     1.0      9286.846408         False          False   False
4    9399.091578    9330.423703  22316.198602  9399.091578  113.807669  9330.423703  10.694822  57.973053        1.550347     1.0      9286.846408         False          False   False
5    9399.091578    9386.846408  22414.636102  9399.091578   57.903835  9386.846408  10.694822   1.550347       -0.012153     2.0      9286.846408         False          False    True
6    9477.286550    9388.408908  22436.453125  9477.286550   79.745320  9388.408908  10.694822  78.182820       -0.000157     1.0      9286.846408         False          False    True
7    9490.538890    9466.603881  22522.633545  9490.538890   91.435160  9466.603881  10.694822  13.240187       -0.567397     1.0      9286.846408         False          False    True
8    9591.106372    9480.411621  22522.633545  9591.106372  113.807669  9480.411621  10.694822  99.999929        0.000084     1.0      9286.846408         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=893/576.[0m
[08/15 14:04:07]  --------------------------------------------------------------------------------
[08/15 14:04:07]  Iteration: 229 (45 solution, 183 counterexamples)
[08/15 14:04:50]  Generator returned sat in 36.436593 secs.
[08/15 14:04:50]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:04:59]  Improved gap from 0.0 to 29.6875
[08/15 14:05:00]  Improved number of small numbers from 59 to 71 out of a max of 114
[08/15 14:05:00]  Verifer returned sat in 9.476447 secs.
[08/15 14:05:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0    7326.042480    7225.942139  22465.809934  7326.042480    0.100000  7225.942139        0.0  100.100342      100.100221     2.0      7225.942139            -1             -1    True
1    7326.042480    7325.942260  22465.809934  7326.042480   95.233333  7325.942260        0.0    0.100221        0.100221     2.0      7225.942139         False          False    True
2    7421.075593    7325.942260  22470.676600  7421.075593   95.133333  7325.942260        0.0   95.133333        0.000000     2.0      7421.075593         False          False    True
3    7585.186704    7521.075593  22470.676600  7585.186704  259.244444  7521.075593        0.0   64.111111       64.111111     1.0      7421.075593         False          False    True
4    7651.697815    7585.286704  22470.676600  7651.697815  130.622222  7585.286704        0.0   66.411111       30.622222     1.0      7421.075593         False          False    True
5    7651.697815    7621.075593  22540.054378  7651.697815   66.311111  7621.075593        0.0   30.622222        0.000000     2.0      7421.075593         False          False    True
6    7655.231149    7651.697815  22610.366878  7655.231149   34.155556  7651.697815        0.0    3.533333      -26.154167     3.0      7421.075593         False          False    True
7    7735.086704    7681.385315  22656.665283  7735.086704   83.388889  7681.385315        0.0   53.701389       -0.000206     1.0      7735.086704          True           True   False
8    7772.129065    7735.186768  22719.623047  7772.129065   90.743750  7735.186768        0.0   36.942298       -0.000081     1.0      7735.086704         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=8219/128.[0m
[08/15 14:05:00]  --------------------------------------------------------------------------------
[08/15 14:05:00]  Iteration: 230 (45 solution, 184 counterexamples)
[08/15 14:05:45]  Generator returned sat in 38.850058 secs.
[08/15 14:05:45]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:05:46]  Improved gap from 0.0008333333333333334 to 23.4375
[08/15 14:05:47]  Improved number of small numbers from 59 to 79 out of a max of 114
[08/15 14:05:47]  Verifer returned sat in 1.542577 secs.
[08/15 14:05:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t    wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7274.212891    7171.095459  22520.6566  7274.212891    0.002686  7171.095459     0.0000  103.117432      103.117297     5.0      7171.095459            -1             -1     -1
1    7274.212891    7171.095703  22520.6566  7274.212891    0.002686  7171.095703     0.0000  103.117188        3.117297     3.0      7171.095459         False           True  False
2    7371.095459    7364.860593  22520.6566  7371.095459  199.999756  7364.860593     0.0000    6.234866       -0.000134     1.0      7171.095459          True           True  False
3    7764.860593    7371.098093  22520.6566  7764.860593  400.000000  7371.098093   290.6450  103.117500        3.120000     1.0      7171.095459         False          False  False
4    7861.743093    7567.973093  22520.6566  7861.743093  200.000000  7567.973093   290.6450    3.125000        0.002500     1.0      7171.095459         False          False   True
5    7861.743093    7571.095593  22597.2191  7861.743093    0.010000  7571.095593   290.6450    0.002500      -23.435000     2.0      7171.095459         False          False   True
6    8067.975593    7594.533203  22597.2191  8067.975593  206.235000  7594.533203   370.3225  103.119890        3.120000     1.0      7697.653093          True           True  False
7    8067.975593    7694.533093  22673.7816  8067.975593  103.117500  7694.533093   370.3225    3.120000      -20.317500     2.0      7697.653093         False          False   True
8    8191.415593    7717.970703  22673.7816  8191.415593  126.560000  7717.970703   370.3250  103.119890        3.120000     1.0      7697.653093         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=2, buffer=78/25.[0m
[08/15 14:05:48]  --------------------------------------------------------------------------------
[08/15 14:05:48]  Iteration: 231 (45 solution, 185 counterexamples)
[08/15 14:07:25]  Generator returned sat in 91.411005 secs.
[08/15 14:07:26]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:07:28]  Verifer returned unsat in 2.718759 secs.
[08/15 14:07:28]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:07:28]  --------------------------------------------------------------------------------
[08/15 14:07:28]  Iteration: 232 (46 solution, 185 counterexamples)
[08/15 14:08:02]  Generator returned sat in 27.567228 secs.
[08/15 14:08:02]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:08:03]  Verifer returned unsat in 0.598943 secs.
[08/15 14:08:03]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:08:03]  --------------------------------------------------------------------------------
[08/15 14:08:03]  Iteration: 233 (47 solution, 185 counterexamples)
[08/15 14:08:23]  Generator returned sat in 13.875061 secs.
[08/15 14:08:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:08:25]  Improved gap from 0.0 to 23.4375
[08/15 14:08:26]  Improved number of small numbers from 59 to 69 out of a max of 114
[08/15 14:08:26]  Verifer returned sat in 2.711377 secs.
[08/15 14:08:26]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t  arrival_0,t    cwnd_0,t  service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0    7193.853027    7119.990593  21675.638916  7193.853027   97.400146  7119.990593     0.0000   73.862434       73.862250     2.0      7119.990593            -1             -1     -1
1    7217.290593    7193.953093  21678.239100  7217.290593   97.300000  7193.953093     0.0000   23.337500       -0.100000     1.0      7217.290593         False           True  False
2    7317.690593    7217.390593  21678.239100  7317.690593  123.737500  7217.390593     0.1000  100.200000        0.200000     1.0      7217.290593         False          False  False
3    7341.228093    7317.590593  21754.501600  7341.228093  123.737500  7317.590593     0.1000   23.537500        0.000000     2.0      7217.290593         False          False   True
4    7515.290593    7366.378093  21754.501600  7515.290593  197.600000  7366.378093    73.9625   74.950000        0.200000     1.0      7441.328093          True           True  False
5    7540.140593    7441.428093  21829.351807  7540.140593   99.800000  7441.428093    73.9625   24.750000       -0.099794     1.0      7441.328093         False          False   True
6    7565.290593    7466.278076  21904.301600  7565.290593   49.900000  7466.278076    73.9625   25.050017        0.000000     1.0      7441.328093         False          False   True
7    7565.290593    7491.328093  21979.351562  7565.290593   24.950000  7491.328093    73.9625    0.000000      -24.950038     2.0      7441.328093         False          False   True
8    7690.240593    7516.278320  21979.351562  7690.240593  124.950000  7516.278320    73.9625   99.999773       -0.000038     1.0      7616.278093          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/5.[0m
[08/15 14:08:27]  --------------------------------------------------------------------------------
[08/15 14:08:27]  Iteration: 234 (47 solution, 186 counterexamples)
[08/15 14:08:47]  Generator returned sat in 14.668289 secs.
[08/15 14:08:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:08:49]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/15 14:08:49]  Verifer returned sat in 1.727315 secs.
[08/15 14:08:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -67192.109375  -67754.609619  96487.739014 -67192.109375    0.100000 -67754.609619        0.0  562.500244      499.999756     5.0    -67754.609619            -1             -1    True
1  -67192.009521  -67692.009521  96487.739014 -67192.009521  562.600098 -67692.009521        0.0  500.000000      400.099609     4.0    -67754.609619         False          False    True
2  -67192.009521  -67591.009521  96487.739014 -67192.009521  499.999756 -67591.009521        0.0  399.000000      300.099609     5.0    -67192.009521         False          False    True
3  -67191.909424  -67473.209473  96487.739014 -67191.909424  399.100098 -67473.209473        0.0  281.300049      200.199707     6.0    -67191.909424         False          False    True
4  -67191.809326  -67292.109375  96487.739014 -67191.809326  281.400146 -67292.109375        0.0  100.300049      100.299805     7.0    -67191.909424         False          False    True
5  -66892.209229  -67192.109375  96487.739014 -66892.209229  399.900146 -67192.109375        0.0  299.900146      299.899902     8.0    -67191.909424         False          False    True
6  -66791.709229  -67191.809326  96487.739014 -66791.709229  400.400146 -67191.809326        0.0  400.100098      300.399902     3.0    -67191.909424         False           True   False
7  -66791.709229  -67073.209229  96487.739014 -66791.709229  341.900146 -67073.209229        0.0  281.500000      200.399902     3.0    -67191.909424         False          False   False
8  -66791.709229  -66892.109619  96487.739014 -66791.709229  281.400146 -66892.109619        0.0  100.400391      100.399902     3.0    -67191.909424         False          False   False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=409805/1024.[0m
[08/15 14:08:50]  --------------------------------------------------------------------------------
[08/15 14:08:50]  Iteration: 235 (47 solution, 187 counterexamples)
[08/15 14:09:09]  Generator returned sat in 13.435905 secs.
[08/15 14:09:10]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:09:12]  Improved number of small numbers from 63 to 72 out of a max of 113
[08/15 14:09:12]  Verifer returned sat in 2.234822 secs.
[08/15 14:09:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -67743.627930  -67743.652881  96536.245117 -67743.627930   98.175000 -67743.652881      0.000    0.024951       -3.012695     1.0    -67743.652881            -1             -1    True
1  -67645.502881  -67738.765381  96536.245264 -67645.502881   98.150000 -67738.765381      0.000   93.262500       -4.887500     1.0    -67645.502881         False          False    True
2  -67640.615234  -67640.615381  96536.245264 -67640.615234   98.150146 -67640.615381      0.000    0.000146      -99.999854     1.0    -67645.502881         False          False    True
3  -67492.109131  -67492.134131  96536.245264 -67492.109131  148.506250 -67492.134131      0.000    0.025000      -51.493750     1.0    -67645.502881         False          False    True
4  -67240.615381  -67340.615381  96536.245264 -67240.615381  251.518750 -67340.615381      0.000  100.000000      100.000000     1.0    -67645.502881         False          False    True
5  -66942.465381  -67240.615381  96536.245264 -66942.465381  398.150000 -67240.615381      0.000  298.150000      298.150000     2.0    -67645.502881         False          False    True
6  -66840.540381  -67240.590332  96536.245264 -66840.540381  400.075000 -67240.590332      0.025  400.024951      300.050000     2.0    -66840.565381          True           True   False
7  -66840.540381  -67040.615381  96536.245264 -66840.540381  201.037500 -67040.615381      0.025  200.050000      200.050000     3.0    -66840.565381         False           True    True
8  -66789.071631  -66942.440186  96536.245264 -66789.071631  251.518750 -66942.440186      0.025  153.343555      151.518750     3.0    -66840.565381         False           True   False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=6001/20.[0m
[08/15 14:09:13]  --------------------------------------------------------------------------------
[08/15 14:09:13]  Iteration: 236 (47 solution, 188 counterexamples)
[08/15 14:09:54]  Generator returned sat in 35.106563 secs.
[08/15 14:09:54]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:09:56]  Verifer returned unsat in 2.047200 secs.
[08/15 14:09:56]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:09:56]  --------------------------------------------------------------------------------
[08/15 14:09:56]  Iteration: 237 (48 solution, 188 counterexamples)
[08/15 14:10:20]  Generator returned sat in 17.580494 secs.
[08/15 14:10:21]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:10:23]  Verifer returned unsat in 2.717448 secs.
[08/15 14:10:23]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:10:23]  --------------------------------------------------------------------------------
[08/15 14:10:23]  Iteration: 238 (49 solution, 188 counterexamples)
[08/15 14:10:47]  Generator returned sat in 17.809472 secs.
[08/15 14:10:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:10:50]  Verifer returned unsat in 2.195937 secs.
[08/15 14:10:50]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:10:50]  --------------------------------------------------------------------------------
[08/15 14:10:50]  Iteration: 239 (50 solution, 188 counterexamples)
[08/15 14:11:20]  Generator returned sat in 23.816363 secs.
[08/15 14:11:20]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:11:23]  Verifer returned unsat in 2.381113 secs.
[08/15 14:11:23]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:11:23]  --------------------------------------------------------------------------------
[08/15 14:11:23]  Iteration: 240 (51 solution, 188 counterexamples)
[08/15 14:11:38]  Generator returned sat in 9.216725 secs.
[08/15 14:11:39]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:11:40]  Verifer returned unsat in 1.750341 secs.
[08/15 14:11:40]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:11:40]  --------------------------------------------------------------------------------
[08/15 14:11:40]  Iteration: 241 (52 solution, 188 counterexamples)
[08/15 14:12:37]  Generator returned sat in 50.400586 secs.
[08/15 14:12:37]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:12:51]  Improved gap from 0.0 to 15.625
[08/15 14:12:52]  Improved number of small numbers from 59 to 73 out of a max of 114
[08/15 14:12:52]  Verifer returned sat in 15.117628 secs.
[08/15 14:12:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -65947.777344  -66329.277123  97542.637764 -65947.777344    0.050000 -66329.277123       0.00  381.499780      381.399780     3.0    -66329.277123            -1             -1   False
1  -65947.777344  -66229.177123  97542.637764 -65947.777344  381.499756 -66229.177123       0.00  281.399780      281.399780     3.0    -66329.277123         False          False   False
2  -65847.727123  -66229.177002  97542.637764 -65847.727123  381.450000 -66229.177002       0.05  381.399879      281.400000     4.0    -65847.777123         False          False   False
3  -65847.727123  -66064.402123  97542.637764 -65847.727123  236.725000 -66064.402123       0.05  216.625000      181.400000     5.0    -65847.777123         False          False    True
4  -65813.552123  -65947.777344  97542.637764 -65813.552123  250.800000 -65947.777344       0.05  134.175220      115.575000     6.0    -65847.777123         False          False    True
5  -65813.552123  -65876.352051  97542.637764 -65813.552123  125.400000 -65876.352051       0.05   62.749927       15.575000     4.0    -65847.777123         False           True   False
6  -65813.552123  -65829.177123  97627.012695 -65813.552123   62.700000 -65829.177123       0.05   15.575000       -0.050068     3.0    -65847.777123         False          False   False
7  -65797.777123  -65813.552002  97711.287764 -65797.777123   31.350000 -65813.552002       0.05   15.724879        0.000000     1.0    -65847.777123         False          False   False
8  -65797.777123  -65797.827123  97711.287842 -65797.777123   15.675000 -65797.827123       0.05    0.000000      -99.999922     2.0    -65847.777123         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1407/5.[0m
[08/15 14:12:53]  --------------------------------------------------------------------------------
[08/15 14:12:53]  Iteration: 242 (52 solution, 189 counterexamples)
[08/15 14:13:16]  Generator returned sat in 17.285204 secs.
[08/15 14:13:17]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:13:28]  Improved gap from 0.0016666666666666668 to 15.625
[08/15 14:13:29]  Improved number of small numbers from 63 to 75 out of a max of 114
[08/15 14:13:29]  Verifer returned sat in 11.899393 secs.
[08/15 14:13:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -63563.477295  -63979.002100  97542.637764 -63563.477295     0.100 -63979.002100        0.0  415.524805      415.524805     2.0      -63979.0021            -1             -1   False
1  -63563.177100  -63879.102100  97542.637764 -63563.177100   415.825 -63879.102100        0.3  315.625000      315.525000     2.0      -63979.0021         False          False   False
2  -63463.077100  -63879.001953  97542.637764 -63463.077100   415.725 -63879.001953        0.4  415.524854      315.525000     3.0      -63463.4771         False          False    True
3  -63463.077100  -63779.002100  97542.637764 -63463.077100   301.200 -63779.002100        0.4  315.525000      215.525000     4.0      -63463.4771         False          False    True
4  -63463.077100  -63597.451904  97542.637764 -63463.077100   251.600 -63597.451904        0.4  133.974805      115.525000     5.0      -63463.4771         False          False    True
5  -63463.077100  -63526.477295  97542.637764 -63463.077100   125.800 -63526.477295        0.4   63.000195       15.525000     4.0      -63463.4771         False           True   False
6  -63463.077100  -63479.002100  97627.012695 -63463.077100    62.900 -63479.002100        0.4   15.525000       -0.100068     5.0      -63463.4771         False          False   False
7  -63447.152100  -63463.376953  97711.187764 -63447.152100    31.450 -63463.376953        0.4   15.824854        0.000000     1.0      -63463.4771         False           True   False
8  -63447.152100  -63447.552100  97795.562744 -63447.152100    15.725 -63447.552100        0.4    0.000000      -15.625020     2.0      -63463.4771         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=12621/40.[0m
[08/15 14:13:29]  --------------------------------------------------------------------------------
[08/15 14:13:29]  Iteration: 243 (52 solution, 190 counterexamples)
[08/15 14:13:48]  Generator returned sat in 12.182280 secs.
[08/15 14:13:48]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:14:00]  Improved gap from 10.142258911132812 to 15.625
[08/15 14:14:01]  Improved number of small numbers from 65 to 73 out of a max of 114
[08/15 14:14:01]  Verifer returned sat in 12.620688 secs.
[08/15 14:14:01]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -62526.043945  -62725.943766  96736.932764 -62526.043945  400.200000 -62725.943766        0.0  199.899821      199.899821     2.0    -62725.943766            -1             -1   False
1  -62325.843766  -62659.710433  96736.932764 -62325.843766  400.100000 -62659.710433        0.1  333.766667      300.000000     2.0    -62325.943766         False          False   False
2  -62259.510433  -62625.943604  96736.932764 -62259.510433  400.100000 -62625.943604        0.1  366.333171      266.333333     3.0    -62325.943766         False          False    True
3  -62259.510433  -62525.943766  96736.932764 -62259.510433  332.266667 -62525.943766        0.1  266.333333      166.333333     3.0    -62259.610433         False          False    True
4  -62259.510433  -62325.943766  96736.932764 -62259.510433  266.133333 -62325.943766        0.1   66.333333       66.333333     4.0    -62259.610433         False          False    True
5  -62192.777100  -62259.510498  96736.932764 -62192.777100  133.066667 -62259.510498        0.1   66.633398       33.066667     1.0    -62259.610433         False           True   False
6  -62192.777100  -62209.310433  96803.865967 -62192.777100   66.533333 -62209.310433        0.1   16.433333       -0.000130     2.0    -62259.610433         False          False   False
7  -62175.943766  -62192.777344  96887.032764 -62175.943766   33.266667 -62192.777344        0.1   16.733577        0.000000     1.0    -62259.610433         False          False   False
8  -62175.943766  -62176.043766  96887.032959 -62175.943766   16.633333 -62176.043766        0.1    0.000000      -99.999805     2.0    -62259.610433         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=300.[0m
[08/15 14:14:02]  --------------------------------------------------------------------------------
[08/15 14:14:02]  Iteration: 244 (52 solution, 191 counterexamples)
[08/15 14:14:50]  Generator returned sat in 42.159869 secs.
[08/15 14:14:51]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:15:05]  Improved gap from 0.1 to 31.25
[08/15 14:15:06]  Improved number of small numbers from 59 to 67 out of a max of 114
[08/15 14:15:06]  Verifer returned sat in 15.637592 secs.
[08/15 14:15:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -62357.093750  -62457.093766  96632.815630 -62357.093750    0.012939 -62457.093766   0.012931   99.987085       99.987085     5.0    -62457.093766            -1             -1     -1
1  -62325.843766  -62457.093750  96632.815630 -62325.843766  131.237069 -62457.093750   0.012931  131.237053       31.237069     6.0    -62457.093766         False           True   True
2  -62325.843766  -62357.093766  96701.565630 -62325.843766    0.012939 -62357.093766   0.012931   31.237069       -0.012931     2.0    -62325.856697          True           True  False
3  -62096.554973  -62225.843766  96701.565630 -62096.554973  260.525862 -62225.843766  98.038793   31.250000       31.250000     1.0    -62325.856697         False          False  False
4  -61996.542042  -62161.285038  96701.565630 -61996.542042  131.262931 -62161.285038  98.051724   66.691272       31.250000     1.0    -62325.856697         False          False   True
5  -61996.542042  -62125.843766  96770.315630 -61996.542042   66.631466 -62125.843766  98.051724   31.250000        0.000000     2.0    -62325.856697         False          False   True
6  -61994.476309  -62094.593766  96839.065630 -61994.476309   33.315733 -62094.593766  98.051724    2.065733      -29.184267     3.0    -62325.856697         False          False   True
7  -61913.259176  -62063.343766  96887.032715 -61913.259176   83.282866 -62063.343766  98.051724   52.032866       -0.000049     1.0    -62011.310900          True           True  False
8  -61873.679973  -62011.297852  96887.032715 -61873.679973   91.612069 -62011.297852  98.051724   39.566154      -60.420846     1.0    -62011.310900         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=125/4.[0m
[08/15 14:15:07]  --------------------------------------------------------------------------------
[08/15 14:15:07]  Iteration: 245 (52 solution, 192 counterexamples)
[08/15 14:15:55]  Generator returned sat in 42.084315 secs.
[08/15 14:15:56]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:15:57]  Verifer returned unsat in 1.216837 secs.
[08/15 14:15:57]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:15:57]  --------------------------------------------------------------------------------
[08/15 14:15:57]  Iteration: 246 (53 solution, 192 counterexamples)
[08/15 14:16:12]  Generator returned sat in 9.281628 secs.
[08/15 14:16:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:16:16]  Verifer returned unsat in 2.799737 secs.
[08/15 14:16:16]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:16:16]  --------------------------------------------------------------------------------
[08/15 14:16:16]  Iteration: 247 (54 solution, 192 counterexamples)
[08/15 14:17:14]  Generator returned sat in 52.616785 secs.
[08/15 14:17:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:17:16]  Improved gap from 99.1 to 100
[08/15 14:17:16]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 14:17:16]  Verifer returned sat in 1.031825 secs.
[08/15 14:17:16]  Counter example: 
[93m   tot_arrival_t  tot_service_t      wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -63359.504639  -63359.604736  96887.032471 -63359.504639  100.150000 -63359.604736   0.049805    0.050293       -0.149902     5.0    -63359.604736            -1             -1     -1
1  -63259.404785  -63359.404541  96887.032471 -63259.404785  100.150146 -63359.404541   0.049805   99.949951       -0.050049     1.0    -63359.604736         False           True   True
2  -63259.254639  -63259.404541  96887.032471 -63259.254639  100.100098 -63259.404541   0.049805    0.100098      -99.899902     1.0    -63259.304443         False          False   True
3  -63159.304688  -63159.404541  96887.032471 -63159.304688  100.050049 -63159.404541   0.049805    0.050049      -99.949951     1.0    -63159.354492         False          False   True
4  -62960.154541  -63058.904541  96887.032471 -62960.154541  199.200195 -63058.904541   0.049805   98.700195       -0.799805     1.0    -63159.354492         False          False   True
5  -62759.354736  -62860.204346  96887.032471 -62759.354736  299.500000 -62860.204346   0.049805  100.799805      100.000000     1.0    -63159.354492         False          False   True
6  -62461.954346  -62759.404541  96887.032471 -62461.954346  398.200195 -62759.404541   0.049805  297.400391      297.400391     2.0    -63159.354492         False          False   True
7  -62359.254639  -62759.354736  96887.032471 -62359.254639  400.100098 -62759.354736   0.049805  400.050293      300.100098     2.0    -62359.304443          True           True  False
8  -62359.254639  -62559.404785  96887.032471 -62359.254639  350.824951 -62559.404785   0.049805  200.100342      200.100098     3.0    -62359.304443         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=6003/20.[0m
[08/15 14:17:17]  --------------------------------------------------------------------------------
[08/15 14:17:17]  Iteration: 248 (54 solution, 193 counterexamples)
[08/15 14:17:33]  Generator returned sat in 10.116329 secs.
[08/15 14:17:33]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:17:38]  Improved gap from 0.0008333333333333334 to 48.4375
[08/15 14:17:39]  Improved number of small numbers from 68 to 76 out of a max of 114
[08/15 14:17:39]  Verifer returned sat in 5.448349 secs.
[08/15 14:17:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -69633.517090  -69832.417236  103261.345166 -69633.517090    0.099854 -69832.417236        0.1  198.800146      100.100146     7.0    -69832.417236            -1             -1     -1
1  -69633.517090  -69732.317236  103261.345166 -69633.517090  198.799805 -69732.317236        0.1   98.700146        0.100146     7.0    -69832.417236         False           True   True
2  -69533.517236  -69533.717236  103261.345166 -69533.517236  198.700000 -69533.717236        0.1    0.100000        0.100000     1.0    -69533.617236          True           True  False
3  -69335.017236  -69433.717236  103261.345166 -69335.017236  198.600000 -69433.717236       98.5    0.200000        0.200000     1.0    -69433.517236         False          False  False
4  -69234.917236  -69333.717236  103261.345166 -69234.917236  100.300000 -69333.717236       98.6    0.200000        0.200000     1.0    -69433.517236         False          False   True
5  -69183.967236  -69333.717236  103310.195166 -69183.967236   51.150000 -69333.717236       98.6   51.150000        0.000000     1.0    -69433.517236         False          False   True
6  -69183.967236  -69282.567236  103361.757666 -69183.967236   25.575000 -69282.567236       98.6    0.000000      -48.437500     2.0    -69433.517236         False          False   True
7  -69094.604736  -69234.129736  103413.320068 -69094.604736   89.362500 -69234.129736       98.6   40.925000       -7.512598     1.0    -69193.204736          True           True  False
8  -69040.054736  -69183.817139  103413.320068 -69040.054736   95.475000 -69183.817139       98.6   45.162402      -52.962598     1.0    -69193.204736         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=1/5.[0m
[08/15 14:17:39]  --------------------------------------------------------------------------------
[08/15 14:17:39]  Iteration: 249 (54 solution, 194 counterexamples)
[08/15 14:17:57]  Generator returned sat in 10.816666 secs.
[08/15 14:17:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:18:00]  Improved number of small numbers from 21 to 26 out of a max of 113
[08/15 14:18:00]  Verifer returned sat in 3.337077 secs.
[08/15 14:18:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -69633.517334  -69768.479645  103261.120056 -69633.517334    0.099854 -69768.479645   0.024963  134.937347       99.949829     9.0    -69768.479645            -1             -1     -1
1  -69633.492126  -69733.492126  103261.120056 -69633.492126  134.962555 -69733.492126   0.024963   99.975037       -0.024963     2.0    -69768.479645         False           True   True
2  -69633.467163  -69633.492126  103261.120056 -69633.467163  100.000000 -69633.492126   0.024963    0.000000     -100.000000     1.0    -69633.492126         False          False   True
3  -69233.467163  -69533.492126  103261.120056 -69233.467163  400.000000 -69533.492126   0.024963  300.000000      200.000000     1.0    -69633.492126         False          False   True
4  -69233.467163  -69335.342346  103261.120056 -69233.467163  234.987518 -69335.342346   0.024963  101.850220      100.000000     2.0    -69633.492126         False          False   True
5  -68937.167603  -69233.492126  103261.120056 -68937.167603  398.149780 -69233.492126   0.024963  296.299561      296.299561     3.0    -69633.492126         False          False   True
6  -68833.392273  -69233.467041  103261.120056 -68833.392273  400.074890 -69233.467041   0.049927  400.024841      300.049927     2.0    -68833.442200          True           True  False
7  -68833.392273  -69068.404755  103261.120056 -68833.392273  201.037445 -69068.404755   0.049927  234.962555      200.049927     3.0    -68833.442200         False          False   True
8  -68833.367310  -68937.167480  103261.120056 -68833.367310  234.987518 -68937.167480   0.049927  103.750244      100.074890     3.0    -68833.442200         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=2458009/8192.[0m
[08/15 14:18:01]  --------------------------------------------------------------------------------
[08/15 14:18:01]  Iteration: 250 (54 solution, 195 counterexamples)
[08/15 14:18:40]  Generator returned sat in 32.853456 secs.
[08/15 14:18:41]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:18:51]  Improved gap from 0.0 to 15.625
[08/15 14:18:52]  Improved number of small numbers from 33 to 114 out of a max of 114
[08/15 14:18:52]  Verifer returned sat in 10.792186 secs.
[08/15 14:18:52]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -72888.067627  -73288.042725  106815.670654 -72888.067627    0.050000 -73288.042725   0.025146  399.949951      399.949951     4.0    -73288.042725            -1             -1     -1
1  -72888.017822  -73287.992676  106815.670654 -72888.017822  399.999756 -73287.992676   0.074951  399.899902      299.949951     4.0    -73288.042725         False          False   True
2  -72887.917725  -73188.042480  106815.670654 -72887.917725  400.000000 -73188.042480   0.074951  300.049805      200.050049     5.0    -73288.042725         False          False   True
3  -72887.917725  -73003.767578  106815.670654 -72887.917725  215.724854 -73003.767578   0.074951  115.774902      100.050049     6.0    -72887.992676         False          False   True
4  -72753.692627  -72888.092773  106815.670654 -72753.692627  250.000000 -72888.092773   0.074951  134.325195      134.275146     7.0    -72887.992676         False          False   True
5  -72753.692627  -72888.042725  106815.670654 -72753.692627  125.000000 -72888.042725   0.074951  134.275146       34.275146     4.0    -72887.992676         False           True  False
6  -72753.692627  -72785.067383  106881.395508 -72753.692627   62.500000 -72785.067383   0.074951   31.299805        0.000000     3.0    -72887.992676         False          False  False
7  -72753.692627  -72753.767578  106965.770508 -72753.692627   31.250000 -72753.767578   0.074951    0.000000      -15.625000     4.0    -72887.992676         False          False  False
8  -72738.067627  -72738.142578  106965.770508 -72738.067627   15.625000 -72738.142578   0.074951    0.000000     -100.000000     1.0    -72887.992676         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1228595/4096.[0m
[08/15 14:18:52]  --------------------------------------------------------------------------------
[08/15 14:18:52]  Iteration: 251 (54 solution, 196 counterexamples)
[08/15 14:19:49]  Generator returned sat in 50.701068 secs.
[08/15 14:19:50]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:19:53]  Verifer returned unsat in 3.133124 secs.
[08/15 14:19:53]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:19:53]  --------------------------------------------------------------------------------
[08/15 14:19:53]  Iteration: 252 (55 solution, 196 counterexamples)
[08/15 14:20:10]  Generator returned sat in 10.883053 secs.
[08/15 14:20:10]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:20:11]  Improved number of small numbers from 59 to 113 out of a max of 113
[08/15 14:20:11]  Verifer returned sat in 0.924780 secs.
[08/15 14:20:11]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -73917.776123  -74019.909180  107447.537109 -73917.776123    0.100098 -74019.909180   0.100098  102.032959        2.032959     7.0    -74019.909180            -1             -1     -1
1  -73917.776123  -73917.976074  107447.537109 -73917.776123  101.833496 -73917.976074   0.100098    0.099854      -97.967041     2.0    -74019.909180         False           True   True
2  -73816.142578  -73816.242676  107447.537354 -73816.142578  101.733398 -73816.242676   0.100098    0.000000      -96.333252     1.0    -73816.242676         False          False   True
3  -73319.909424  -73719.909180  107447.537354 -73319.909424  496.233154 -73719.909180   0.100098  399.899658      299.899902     1.0    -73816.242676         False          False   True
4  -73319.909424  -73519.909424  107447.537354 -73319.909424  300.000000 -73519.909424   0.100098  199.899902      199.899902     2.0    -73816.242676         False          False   True
5  -73121.742676  -73419.909424  107447.537354 -73121.742676  398.066650 -73419.909424   0.100098  298.066650      298.066650     3.0    -73816.242676         False          False   True
6  -73021.609375  -73319.909424  107447.537354 -73021.609375  398.199951 -73319.909424   0.100098  298.199951      298.199951     2.0    -73021.709473          True           True  False
7  -72919.709473  -73319.909180  107447.537354 -72919.709473  400.099854 -73319.909180   0.100098  400.099609      300.099854     3.0    -73021.709473         False          False  False
8  -72919.709473  -73119.909424  107447.537354 -72919.709473  301.050049 -73119.909424   0.100098  200.099854      200.099854     3.0    -73021.709473         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=1229209/4096.[0m
[08/15 14:20:12]  --------------------------------------------------------------------------------
[08/15 14:20:12]  Iteration: 253 (55 solution, 197 counterexamples)
[08/15 14:21:08]  Generator returned sat in 49.296433 secs.
[08/15 14:21:08]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:21:09]  Improved gap from 0.0 to 23.4375
[08/15 14:21:09]  Improved number of small numbers from 91 to 114 out of a max of 114
[08/15 14:21:09]  Verifer returned sat in 1.070417 secs.
[08/15 14:21:09]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t   losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -73721.911865  -73821.909424  107349.537109 -73721.911865    0.002441 -73821.909424    0.000000   99.997559       99.997559     9.0    -73821.909424            -1             -1     -1
1  -73721.909424  -73721.909424  107349.537109 -73721.909424  100.000000 -73721.909424    0.000000    0.000000        0.000000     1.0    -73821.909424         False           True  False
2  -73698.474609  -73721.909424  107426.099609 -73698.474609   23.434814 -73721.909424    0.000000   23.434814       -0.002686     1.0    -73698.474609         False          False  False
3  -73319.909424  -73698.471924  107426.099609 -73319.909424  402.000000 -73698.471924  267.841309  110.721191       10.721191     1.0    -73698.474609         False          False  False
4  -73230.630615  -73501.594238  107426.099609 -73230.630615  200.000000 -73501.594238  267.841309    3.122314        0.000000     1.0    -73698.474609         False          False   True
5  -73230.630615  -73498.471924  107502.662109 -73230.630615    0.010000 -73498.471924  267.841309    0.000000      -23.437500     2.0    -73698.474609         False          False   True
6  -73007.193115  -73475.034424  107502.662109 -73007.193115  223.437500 -73475.034424  357.120117  110.721191       10.721191     1.0    -73364.313232          True           True  False
7  -73007.193115  -73375.034424  107579.224609 -73007.193115  110.718750 -73375.034424  357.120117   10.721191      -12.716309     2.0    -73364.313232         False          False   True
8  -72891.354492  -73351.596924  107579.224609 -72891.354492  126.559814 -73351.596924  357.120117  103.122314        3.122314     1.0    -73364.313232         False           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=False, total_losses=1, buffer=21957/2048.[0m
[08/15 14:21:10]  --------------------------------------------------------------------------------
[08/15 14:21:10]  Iteration: 254 (55 solution, 198 counterexamples)
[08/15 14:22:36]  Generator returned sat in 79.911434 secs.
[08/15 14:22:37]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:22:47]  Improved gap from 0.0016666666666666668 to 15.625
[08/15 14:22:47]  Improved number of small numbers from 68 to 114 out of a max of 114
[08/15 14:22:47]  Verifer returned sat in 10.558563 secs.
[08/15 14:22:47]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -73476.497070  -74045.246826  107426.099365 -73476.497070    0.050000 -74045.246826        0.0  568.749756      468.749756     5.0    -74045.246826            -1             -1    True
1  -73476.497070  -73945.246826  107426.099365 -73476.497070    0.050000 -73945.246826        0.0  468.749756      368.749756     4.0    -74045.246826         False          False    True
2  -73476.497070  -73745.246826  107426.099365 -73476.497070  179.349854 -73745.246826        0.0  268.749756      268.749756     4.0    -74045.246826         False          False    True
3  -73476.497070  -73726.546875  107426.099365 -73476.497070  179.300049 -73726.546875        0.0  250.049805      168.749756     5.0    -73476.497070         False          False    True
4  -73476.497070  -73548.271729  107426.099365 -73476.497070  250.000000 -73548.271729        0.0   71.774658       68.749756     6.0    -73476.497070         False          False    True
5  -73423.271729  -73476.447021  107426.099365 -73423.271729  125.000000 -73476.447021        0.0   53.175293       21.975098     1.0    -73476.497070         False           True   False
6  -73413.947021  -73445.246826  107494.799561 -73413.947021   62.500000 -73445.246826        0.0   31.299805        0.000000     2.0    -73476.497070         False          False   False
7  -73413.947021  -73413.947021  107579.174561 -73413.947021   31.250000 -73413.947021        0.0    0.000000      -15.625000     2.0    -73476.497070         False          False   False
8  -73398.322021  -73398.322021  107579.174609 -73398.322021   15.625000 -73398.322021        0.0    0.000000      -99.999951     1.0    -73476.497070         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=377651/1024.[0m
[08/15 14:22:48]  --------------------------------------------------------------------------------
[08/15 14:22:48]  Iteration: 255 (55 solution, 199 counterexamples)
[08/15 14:23:53]  Generator returned sat in 59.131490 secs.
[08/15 14:23:54]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:24:05]  Improved gap from 0.05 to 31.25
[08/15 14:24:06]  Improved number of small numbers from 63 to 69 out of a max of 114
[08/15 14:24:06]  Verifer returned sat in 11.873597 secs.
[08/15 14:24:06]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -73809.108398  -73941.319293  107273.295165 -73809.108398    0.100098 -73941.319293   0.000000  132.210894      132.210894     2.0    -73941.319293            -1             -1   False
1  -73809.008181  -73841.319293  107273.295165 -73809.008181  132.311111 -73841.319293   0.100000   32.211111       32.211111     3.0    -73941.319293         False          False   False
2  -73808.908181  -73841.319293  107273.295165 -73808.908181   32.311111 -73841.319293   0.100000   32.311111      -67.688889     3.0    -73809.008181          True           True    True
3  -73576.597070  -73641.319293  107273.295165 -73576.597070  264.622222 -73641.319293  32.511111   32.211111       32.211111     1.0    -73809.008181         False           True   False
4  -73476.497070  -73575.263737  107273.295165 -73476.497070  132.311111 -73575.263737  32.611111   66.155556       32.211111     1.0    -73809.008181         False          False    True
5  -73476.497070  -73541.319293  107341.084054 -73476.497070   66.155556 -73541.319293  32.611111   32.211111        0.000000     2.0    -73809.008181         False          False    True
6  -73475.630404  -73509.108181  107409.834054 -73475.630404   33.077778 -73509.108181  32.611111    0.866667      -30.383333     3.0    -73809.008181         False          False    True
7  -73392.852626  -73477.858181  107457.339844 -73392.852626   83.644444 -73477.858181  32.611111   52.394444       -0.099766     1.0    -73425.463737          True           True   False
8  -73353.722070  -73425.363525  107457.339844 -73353.722070   91.525000 -73425.363525  32.611111   39.030344      -60.969210     1.0    -73425.463737         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=2899/90.[0m
[08/15 14:24:06]  --------------------------------------------------------------------------------
[08/15 14:24:06]  Iteration: 256 (55 solution, 200 counterexamples)
[08/15 14:25:06]  Generator returned sat in 53.341126 secs.
[08/15 14:25:07]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:25:09]  Verifer returned unsat in 2.608538 secs.
[08/15 14:25:09]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:25:09]  --------------------------------------------------------------------------------
[08/15 14:25:09]  Iteration: 257 (56 solution, 200 counterexamples)
[08/15 14:25:26]  Generator returned sat in 10.619395 secs.
[08/15 14:25:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:25:29]  Verifer returned unsat in 1.877036 secs.
[08/15 14:25:29]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:25:29]  --------------------------------------------------------------------------------
[08/15 14:25:29]  Iteration: 258 (57 solution, 200 counterexamples)
[08/15 14:25:56]  Generator returned sat in 20.953305 secs.
[08/15 14:25:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:25:57]  Verifer returned unsat in 0.692390 secs.
[08/15 14:25:57]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:25:57]  --------------------------------------------------------------------------------
[08/15 14:25:57]  Iteration: 259 (58 solution, 200 counterexamples)
[08/15 14:26:24]  Generator returned sat in 20.371496 secs.
[08/15 14:26:25]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:26:25]  Verifer returned unsat in 0.647080 secs.
[08/15 14:26:25]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:26:26]  --------------------------------------------------------------------------------
[08/15 14:26:26]  Iteration: 260 (59 solution, 200 counterexamples)
[08/15 14:26:49]  Generator returned sat in 16.788260 secs.
[08/15 14:26:49]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:27:01]  Improved gap from 0.047619047619047616 to 15.625
[08/15 14:27:03]  Improved number of small numbers from 61 to 87 out of a max of 114
[08/15 14:27:03]  Verifer returned sat in 13.177461 secs.
[08/15 14:27:03]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -74593.572266  -75056.272070  107273.294922 -74593.572266    0.050000 -75056.272070       0.05  462.649805      462.649562     9.0     -75056.27207            -1             -1     -1
1  -74593.572266  -74956.271973  107273.294922 -74593.572266    0.050049 -74956.271973       0.05  362.649707      362.649562     4.0     -75056.27207         False           True   True
2  -74593.572266  -74956.221924  107273.294922 -74593.572266    0.050049 -74956.221924       0.05  362.599658      262.649562     4.0     -75056.27207         False          False   True
3  -74593.572266  -74781.622070  107273.294922 -74593.572266  226.950000 -74781.622070       0.05  187.999805      162.649562     4.0     -75056.27207         False          False   True
4  -74530.772070  -74656.272217  107273.294922 -74530.772070  250.800000 -74656.272217       0.05  125.450146      125.449757     5.0     -75056.27207         False          False   True
5  -74530.772070  -74593.572021  107273.294922 -74530.772070  125.400000 -74593.572021       0.05   62.749951       25.449757     2.0     -74530.82207          True           True  False
6  -74530.772070  -74537.672070  107339.070068 -74530.772070   62.700000 -74537.672070       0.05    6.850000       -8.775097     3.0     -74530.82207         False          False  False
7  -74506.272070  -74522.046875  107423.345165 -74506.272070   31.350000 -74522.046875       0.05   15.724805        0.000000     1.0     -74530.82207         False          False  False
8  -74506.272070  -74506.322070  107423.345215 -74506.272070   15.675000 -74506.322070       0.05    0.000000      -99.999950     2.0     -74530.82207         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1485619/4096.[0m
[08/15 14:27:03]  --------------------------------------------------------------------------------
[08/15 14:27:03]  Iteration: 261 (59 solution, 201 counterexamples)
[08/15 14:28:22]  Generator returned sat in 72.423302 secs.
[08/15 14:28:23]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:28:23]  Improved number of small numbers from 58 to 113 out of a max of 113
[08/15 14:28:23]  Verifer returned sat in 0.746413 secs.
[08/15 14:28:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -74506.392090  -74705.241943  106823.314941 -74506.392090    0.050049 -74705.241943   0.050049  198.799805       99.849854     3.0    -74705.241943            -1             -1     -1
1  -74506.241943  -74506.392090  106823.314941 -74506.241943  198.949951 -74506.392090   0.050049    0.100098        0.000000     1.0    -74705.241943         False           True   True
2  -74406.292236  -74506.241943  106823.314941 -74406.292236  100.049805 -74506.241943   0.050049   99.899658       -0.050293     1.0    -74406.342285         False          False   True
3  -74406.192139  -74406.291992  106823.314941 -74406.192139   99.999756 -74406.291992   0.050049    0.049805      -99.950195     1.0    -74406.242188         False          False   True
4  -74106.291992  -74306.291992  106823.314941 -74106.291992  299.949951 -74306.291992   0.050049  199.949951       99.949951     1.0    -74406.242188         False          False   True
5  -74105.141846  -74106.291992  106823.314941 -74105.141846  201.100098 -74106.291992   0.050049    1.100098        1.100098     1.0    -74406.242188         False          False   True
6  -73705.291992  -74106.242188  106823.314941 -73705.291992  400.949951 -74106.242188   0.050049  400.900146      300.949951     2.0    -74406.242188         False          False   True
7  -73705.291992  -74005.842041  106823.314941 -73705.291992  300.049805 -74005.842041   0.050049  300.500000      200.949951     2.0    -73705.342041          True           True  False
8  -73705.291992  -73906.291992  106823.314941 -73705.291992  300.449951 -73906.291992   0.050049  200.949951      100.949951     3.0    -73705.342041         False           True  False
high_util=True, low_loss=True, low_delay=False, ramp_up=True, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=False, total_losses=0, buffer=1232895/4096.[0m
[08/15 14:28:24]  --------------------------------------------------------------------------------
[08/15 14:28:24]  Iteration: 262 (59 solution, 202 counterexamples)
[08/15 14:28:57]  Generator returned sat in 26.499305 secs.
[08/15 14:28:57]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:28:59]  Improved gap from 0.0 to 14.0625
[08/15 14:29:00]  Improved number of small numbers from 19 to 33 out of a max of 114
[08/15 14:29:00]  Verifer returned sat in 2.590210 secs.
[08/15 14:29:00]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -74149.593750  -74249.593913  106466.616862 -74149.593750    0.049805 -74249.593913   0.012512   99.987651       99.987651     3.0    -74249.593913            -1             -1     -1
1  -73955.518840  -74149.606201  106466.616862 -73955.518840  294.062561 -74149.606201   0.025024  194.062337      194.050049     1.0    -74249.593913         False           True   True
2  -73955.518840  -74149.593913  106466.616862 -73955.518840    0.012695 -74149.593913   0.025024  194.050049       94.050049     2.0    -73955.543864         False          False   True
3  -73755.518840  -73955.531494  106466.616862 -73755.518840  394.050049 -73955.531494   0.025024  199.987630      194.050049     1.0    -73955.543864         False          False   True
4  -73755.518840  -73849.593913  106466.616862 -73755.518840  198.025024 -73849.593913   0.025024   94.050049       94.050049     2.0    -73955.543864         False          False   True
5  -73749.556376  -73849.593913  106466.616862 -73749.556376  100.012512 -73849.593913   0.025024  100.012512        0.012512     2.0    -73955.543864         False          False   True
6  -73749.556376  -73749.593913  106552.554199 -73749.556376   51.006256 -73749.593913   0.025024    0.012512      -14.050151     2.0    -73955.543864         False          False   True
7  -73723.065760  -73723.103297  106625.874756 -73723.065760   26.503128 -73723.103297   0.025024    0.012512      -14.238978     1.0    -73955.543864         False          False   True
8  -73708.826709  -73708.851807  106711.812256 -73708.826709   14.251564 -73708.851807   0.025024    0.000074      -14.062426     1.0    -73955.543864         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=794829/4096.[0m
[08/15 14:29:01]  --------------------------------------------------------------------------------
[08/15 14:29:01]  Iteration: 263 (59 solution, 203 counterexamples)
[08/15 14:30:30]  Generator returned sat in 82.603909 secs.
[08/15 14:30:30]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + -1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:30:37]  Improved gap from 0.0 to 3.125
[08/15 14:30:39]  Improved number of small numbers from 60 to 82 out of a max of 114
[08/15 14:30:39]  Verifer returned sat in 8.255040 secs.
[08/15 14:30:39]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -73478.755615  -73585.364234  105792.653564 -73478.755615    0.004934 -73585.364234   0.000000  106.608619       96.875000     1.0    -73585.364234            -1             -1   False
1  -73478.755615  -73478.760498  105792.653809 -73478.755615  106.608398 -73478.760498   0.000000    0.004883       -3.124756     2.0    -73585.364234         False          False   False
2  -73472.510498  -73475.630682  105889.528631 -73472.510498    6.250000 -73475.630682   0.000000    3.120184       -0.004816     1.0    -73472.510498          True           True   False
3  -73469.380682  -73472.505682  105986.403631 -73469.380682    6.250000 -73472.505682   0.000000    3.125000        0.000000     1.0    -73472.510498         False          False   False
4  -73359.647129  -73423.675090  105986.403631 -73359.647129  112.858553 -73423.675090   9.723684   54.304276        0.009868     1.0    -73472.510498         False          False   False
5  -73356.522129  -73369.365879  106083.263828 -73356.522129   57.429276 -73369.365879   9.723684    3.120066       -0.004934     1.0    -73472.510498         False          False    True
6  -73278.795156  -73366.240879  106105.541748 -73278.795156   80.847039 -73366.240879   9.723684   77.722039       -0.000041     1.0    -73472.510498         False          False    True
7  -73263.961274  -73288.513906  106190.707764 -73263.961274   92.555921 -73288.513906   9.723684   14.828947       -0.000144     1.0    -73472.510498         False          False    True
8  -73165.931669  -73273.679932  106192.678223 -73165.931669  112.858553 -73273.679932   9.723684   98.024579       -0.000079     1.0    -73472.510498         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=3/304.[0m
[08/15 14:30:39]  --------------------------------------------------------------------------------
[08/15 14:30:39]  Iteration: 264 (59 solution, 204 counterexamples)
[08/15 14:31:10]  Generator returned sat in 23.948961 secs.
[08/15 14:31:10]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:31:12]  Improved gap from 0.0 to 23.4375
[08/15 14:31:12]  Improved number of small numbers from 66 to 89 out of a max of 114
[08/15 14:31:12]  Verifer returned sat in 2.148022 secs.
[08/15 14:31:12]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -70513.013916  -70657.939014  102829.987061 -70513.013916  168.412598 -70657.939014       0.00  144.925098       99.950195     2.0    -70657.939014            -1             -1   False
1  -70489.576514  -70512.964111  102829.987061 -70489.576514  168.362500 -70512.964111       0.00   23.387598       23.387598     1.0    -70489.576514         False          False   False
2  -70389.526611  -70413.014160  102829.987061 -70389.526611  123.437500 -70413.014160       0.00   23.487549       23.437500     1.0    -70389.526611         False          False   False
3  -70389.526611  -70412.964014  102906.549463 -70389.526611    0.050049 -70412.964014       0.00   23.437402       -0.000098     2.0    -70389.526611         False          False   False
4  -70167.989014  -70289.526514  102906.549463 -70167.989014  244.975000 -70289.526514      98.10   23.437500       23.437500     1.0    -70389.526611         False          False   False
5  -70067.939014  -70228.832764  102906.549463 -70067.939014  123.487500 -70228.832764      98.15   62.743750       23.437500     1.0    -70389.526611         False          False    True
6  -70067.939014  -70189.526514  102983.111963 -70067.939014   62.743750 -70189.526514      98.15   23.437500        0.000000     2.0    -70389.526611         False          False    True
7  -70060.004639  -70166.089014  103056.599609 -70060.004639   31.371875 -70166.089014      98.15    7.934375      -18.577979     3.0    -70389.526611         False          False    True
8  -69944.501514  -70139.576660  103056.599609 -69944.501514  123.437500 -70139.576660      98.15   96.925146       -3.074854     1.0    -70042.651514          True           True   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=2, buffer=375/16.[0m
[08/15 14:31:13]  --------------------------------------------------------------------------------
[08/15 14:31:13]  Iteration: 265 (59 solution, 205 counterexamples)
[08/15 14:32:33]  Generator returned sat in 73.562659 secs.
[08/15 14:32:34]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:32:36]  Verifer returned unsat in 2.536216 secs.
[08/15 14:32:36]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:32:36]  --------------------------------------------------------------------------------
[08/15 14:32:36]  Iteration: 266 (60 solution, 205 counterexamples)
[08/15 14:32:54]  Generator returned sat in 10.682057 secs.
[08/15 14:32:54]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:32:58]  Verifer returned unsat in 3.411661 secs.
[08/15 14:32:58]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:32:58]  --------------------------------------------------------------------------------
[08/15 14:32:58]  Iteration: 267 (61 solution, 205 counterexamples)
[08/15 14:33:15]  Generator returned sat in 10.640306 secs.
[08/15 14:33:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:33:21]  Improved gap from 0.05 to 0
[08/15 14:33:23]  Improved number of small numbers from 61 to 74 out of a max of 114
[08/15 14:33:23]  Verifer returned sat in 7.155278 secs.
[08/15 14:33:23]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -70419.837891  -70619.812764  102915.212158 -70419.837891  201.256348 -70619.812764    0.00000  199.974873       99.975068     2.0    -70619.812764            -1             -1    True
1  -70418.581514  -70419.812988  102915.212158 -70418.581514  201.231250 -70419.812988    0.00000    1.231475        1.231445     1.0    -70418.581514         False          False    True
2  -70394.862793  -70394.887764  102990.261719 -70394.862793   24.950195 -70394.887764    0.00000    0.024971       -0.000273     1.0    -70394.862793         False          False    True
3  -70394.812764  -70394.837764  103090.211963 -70394.812764    0.075000 -70394.837764    0.00000    0.025000        0.000000     1.0    -70394.812764         False          False    True
4  -70281.312764  -70351.344014  103090.211963 -70281.312764  113.525000 -70351.344014   12.24375   57.787500        1.256250     1.0    -70394.812764         False          False    True
5  -70281.312764  -70294.812764  103188.955713 -70281.312764   57.762500 -70294.812764   12.24375    1.256250        0.000000     2.0    -70394.812764         False          False    True
6  -70202.650264  -70293.556514  103210.293213 -70202.650264   79.918750 -70293.556514   12.24375   78.662500        0.000000     3.0    -70394.812764         False          False    True
7  -70190.712764  -70214.894014  103296.768311 -70190.712764   90.600000 -70214.894014   12.24375   11.937500       -1.587402     2.0    -70202.956514          True           True   False
8  -70089.125264  -70201.368896  103296.768311 -70089.125264  113.525000 -70201.368896   12.24375   99.999883        0.000098     1.0    -70202.956514         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=201/160.[0m
[08/15 14:33:23]  --------------------------------------------------------------------------------
[08/15 14:33:23]  Iteration: 268 (61 solution, 206 counterexamples)
[08/15 14:35:26]  Generator returned sat in 116.463063 secs.
[08/15 14:35:27]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:35:30]  Improved gap from 0.0425531914893617 to 1.5625
[08/15 14:35:31]  Improved number of small numbers from 66 to 79 out of a max of 114
[08/15 14:35:31]  Verifer returned sat in 4.260330 secs.
[08/15 14:35:31]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -70498.056396  -70513.012058  102908.411133 -70498.056396    0.043457 -70513.012058   0.000000  14.955662       14.955566     8.0    -70513.012058            -1             -1     -1
1  -70498.056396  -70512.990336  102993.455435 -70498.056396    0.021729 -70512.990336   0.000000  14.933939       -0.000131     8.0    -70498.056396         False           True  False
2  -70397.991098  -70398.077988  102993.455435 -70397.991098  114.999238 -70398.077988   0.021723   0.065168        0.043445     1.0    -70498.056396         False           True  False
3  -70397.991098  -70398.056265  103091.892935 -70397.991098    0.043457 -70398.056265   0.021723   0.043445       -1.519055     2.0    -70398.012820         False          False   True
4  -70283.078750  -70351.343994  103091.892935 -70283.078750  114.955793 -70351.343994  13.371570  54.893674        0.043445     1.0    -70398.012820         False           True  False
5  -70281.494528  -70296.428598  103190.265137 -70281.494528   56.477896 -70296.428598  13.371570   1.562500       -0.000131     1.0    -70398.012820         False          False   True
6  -70202.993384  -70294.298262  103211.763916 -70202.993384   80.063643 -70294.298262  13.371570  77.933308       -0.000208     1.0    -70398.012820         False          False   True
7  -70188.015869  -70216.343232  103296.786377 -70188.015869   92.910823 -70216.343232  13.371570  14.955793       -0.000232     1.0    -70398.012820         False          False   True
8  -70088.015869  -70201.365723  103296.786377 -70088.015869  114.955793 -70201.365723  13.371570  99.978283       -0.000232     1.0    -70398.012820         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=57/1312.[0m
[08/15 14:35:32]  --------------------------------------------------------------------------------
[08/15 14:35:32]  Iteration: 269 (61 solution, 207 counterexamples)
[08/15 14:36:19]  Generator returned sat in 40.226282 secs.
[08/15 14:36:19]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:36:23]  Improved gap from 0.0 to 15.625
[08/15 14:36:24]  Improved number of small numbers from 79 to 95 out of a max of 114
[08/15 14:36:24]  Verifer returned sat in 4.607009 secs.
[08/15 14:36:24]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -70498.056641  -70498.156494  103225.590566 -70498.056641    0.049805 -70498.156494       0.00    0.099854        0.099756     9.0    -70498.156494            -1             -1     -1
1  -70498.056641  -70498.156250  103225.590566 -70498.056641    0.050049 -70498.156250       0.00    0.099609      -99.900244     2.0    -70498.156494         False           True  False
2  -70072.756348  -70398.156396  103225.590566 -70072.756348  425.399902 -70398.156396       0.00  325.400049      225.400049     1.0    -70498.156494         False          False  False
3  -69894.556396  -70298.156250  103225.590566 -69894.556396  503.600000 -70298.156250      78.15  325.449854      225.450000     2.0    -70498.156494         False          False  False
4  -69894.556396  -70098.156494  103225.590566 -69894.556396  250.800000 -70098.156494      78.15  125.450098      125.450000     3.0    -70498.156494         False          False   True
5  -69894.556396  -70026.681396  103225.590566 -69894.556396  125.400000 -70026.681396      78.15   53.975000       25.450000     3.0    -69972.706396          True           True  False
6  -69885.831396  -69979.556396  103291.365566 -69885.831396   62.700000 -69979.556396      78.15   15.575000       -0.050000     4.0    -69972.706396         False           True  False
7  -69870.056396  -69963.931396  103375.640566 -69870.056396   31.350000 -69963.931396      78.15   15.725000        0.000000     1.0    -69972.706396         False           True  False
8  -69870.056396  -69948.206396  103375.640625 -69870.056396   15.675000 -69948.206396      78.15    0.000000      -99.999941     2.0    -69972.706396         False          False  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=4509/20.[0m
[08/15 14:36:25]  --------------------------------------------------------------------------------
[08/15 14:36:25]  Iteration: 270 (61 solution, 208 counterexamples)
[08/15 14:37:45]  Generator returned sat in 73.308269 secs.
[08/15 14:37:45]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:37:47]  Improved gap from 0.1 to 25.0
[08/15 14:37:48]  Improved number of small numbers from 63 to 114 out of a max of 114
[08/15 14:37:48]  Verifer returned sat in 2.598723 secs.
[08/15 14:37:48]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -70851.631348  -70947.631348  103062.665527 -70851.631348    0.100098 -70947.631348   0.000000  96.000000       96.000000     6.0    -70947.631348            -1             -1     -1
1  -70851.631348  -70918.031494  103066.665527 -70851.631348   95.900000 -70918.031494   0.000000  66.400146        0.000000     6.0    -70947.631348         False           True  False
2  -70822.231445  -70822.331299  103066.665527 -70822.231445   95.800049 -70822.331299   0.000000   0.099854      -70.600098     1.0    -70822.231445          True           True  False
3  -70726.631348  -70751.631348  103141.665527 -70726.631348   95.699951 -70751.631348   0.000000  25.000000        0.000000     1.0    -70726.631348         False          False  False
4  -70555.631348  -70699.431641  103141.665527 -70555.631348  196.000000 -70699.431641  70.800049  73.000244        0.199951     1.0    -70726.631348         False          False  False
5  -70530.631592  -70626.331543  103216.365723 -70530.631592   98.000000 -70626.331543  70.800049  24.899902       -0.100098     1.0    -70726.631348         False          False   True
6  -70505.531494  -70601.331543  103291.365723 -70505.531494   50.000000 -70601.331543  70.800049  25.000000        0.000000     1.0    -70726.631348         False          False   True
7  -70504.531494  -70576.331543  103366.365479 -70504.531494   26.000000 -70576.331543  70.800049   1.000000      -24.000244     2.0    -70726.631348         False          False   True
8  -70382.431396  -70551.331299  103368.265381 -70382.431396  123.100098 -70551.331299  70.800049  98.099854       -0.000244     1.0    -70453.231445          True           True  False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=819/4096.[0m
[08/15 14:37:48]  --------------------------------------------------------------------------------
[08/15 14:37:48]  Iteration: 271 (61 solution, 209 counterexamples)
[08/15 14:38:12]  Generator returned sat in 17.344509 secs.
[08/15 14:38:13]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:38:17]  Improved gap from 0.1 to 0
[08/15 14:38:18]  Improved number of small numbers from 59 to 114 out of a max of 114
[08/15 14:38:18]  Verifer returned sat in 5.391182 secs.
[08/15 14:38:18]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -70867.714844  -70881.122803  103047.510498 -70867.714844    0.048340 -70881.122803   0.048584  13.359375        0.048584     1.0    -70881.122803            -1             -1     -1
1  -70867.714844  -70867.812012  103147.461914 -70867.714844    0.048544 -70867.812012   0.048584   0.048584        0.000000     2.0    -70881.122803         False          False   True
2  -70767.666260  -70767.811768  103147.461914 -70767.666260  100.097168 -70767.811768   0.048584   0.096924        0.048584     1.0    -70881.122803          True           True  False
3  -70767.666260  -70767.763428  103247.413086 -70767.666260    0.048584 -70767.763428   0.048584   0.048584       -0.000244     2.0    -70767.714844         False          False  False
4  -70654.355469  -70719.603271  103247.413086 -70654.355469  113.359375 -70719.603271  13.261963  51.985840        0.097168     1.0    -70767.714844         False           True  False
5  -70649.661621  -70667.569092  103342.621826 -70649.661621   56.679688 -70667.569092  13.261963   4.645508       -0.000244     1.0    -70767.714844         False          False   True
6  -70574.845947  -70662.875000  103367.806396 -70574.845947   79.461182 -70662.875000  13.261963  74.767090        0.000000     1.0    -70767.714844         False          False   True
7  -70556.438232  -70588.059326  103449.398682 -70556.438232   93.174805 -70588.059326  13.261963  18.359131        0.000000     1.0    -70767.714844         False          False   True
8  -70461.437988  -70569.651611  103449.398682 -70461.437988  113.359375 -70569.651611  13.261963  94.951660       -4.999756     1.0    -70767.714844         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=False, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=199/2048.[0m
[08/15 14:38:19]  --------------------------------------------------------------------------------
[08/15 14:38:19]  Iteration: 272 (61 solution, 210 counterexamples)
[08/15 14:39:06]  Generator returned sat in 40.205260 secs.
[08/15 14:39:06]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:39:21]  Improved gap from 0.025 to 15.625
[08/15 14:39:21]  Improved number of small numbers from 104 to 114 out of a max of 114
[08/15 14:39:21]  Verifer returned sat in 14.318123 secs.
[08/15 14:39:21]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -69329.855713  -69829.855469  103134.153809 -69329.855713    0.050049 -69829.855469   0.000000  499.999756      399.999756     6.0    -69829.855469            -1             -1   False
1  -69329.805664  -69629.905273  103134.153809 -69329.805664  500.049805 -69629.905273   0.050049  300.049561      299.999756     6.0    -69829.855469         False          False   False
2  -69329.805664  -69629.855469  103134.153809 -69329.805664  300.000000 -69629.855469   0.050049  299.999756      199.999756     7.0    -69329.855713         False          False    True
3  -69329.805664  -69508.080322  103134.153809 -69329.805664  178.224854 -69508.080322   0.050049  178.224609       99.999756     8.0    -69329.855713         False          False    True
4  -69258.030273  -69329.855713  103134.153809 -69258.030273  250.000000 -69329.855713   0.050049   71.775391       71.775146     9.0    -69329.855713         False          False    True
5  -69204.805664  -69258.030518  103134.153809 -69204.805664  125.000000 -69258.030518   0.050049   53.174805       24.999756     1.0    -69329.855713         False           True   False
6  -69195.480469  -69229.855469  103199.828857 -69195.480469   62.500000 -69229.855469   0.050049   34.324951        0.000000     2.0    -69329.855713         False          False   False
7  -69195.480469  -69195.530518  103284.203857 -69195.480469   31.250000 -69195.530518   0.050049    0.000000      -15.625000     2.0    -69329.855713         False          False   False
8  -69179.855469  -69179.905518  103284.204102 -69179.855469   15.625000 -69179.905518   0.050049    0.000000      -99.999756     1.0    -69329.855713         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=1228799/4096.[0m
[08/15 14:39:21]  --------------------------------------------------------------------------------
[08/15 14:39:21]  Iteration: 273 (61 solution, 211 counterexamples)
[08/15 14:39:41]  Generator returned sat in 12.933472 secs.
[08/15 14:39:42]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:39:54]  Improved gap from 0.0 to 15.625
[08/15 14:39:54]  Improved number of small numbers from 36 to 114 out of a max of 114
[08/15 14:39:54]  Verifer returned sat in 12.126249 secs.
[08/15 14:39:54]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -70358.443604  -70755.343506  103234.153809 -70358.443604    0.050049 -70755.343506   0.000000  396.899902      396.899658     5.0    -70755.343506            -1             -1   False
1  -70358.430908  -70655.343262  103234.153809 -70358.430908  396.912598 -70655.343262   0.012451  296.899902      296.899902     5.0    -70755.343506         False          False   False
2  -70258.418213  -70555.343262  103234.153809 -70258.418213  396.912598 -70555.343262   0.025146  296.899902      296.899902     6.0    -70755.343506         False          False    True
3  -70258.418213  -70474.093506  103234.153809 -70258.418213  218.750000 -70474.093506   0.025146  215.650146      196.899902     7.0    -70258.443359         False          False    True
4  -70224.068359  -70358.443604  103234.153809 -70224.068359  250.000000 -70358.443604   0.025146  134.350098      131.249756     8.0    -70258.443359         False          False    True
5  -70224.068359  -70286.580811  103234.153809 -70224.068359  125.000000 -70286.580811   0.025146   62.487305       31.249756     4.0    -70258.443359         False           True   False
6  -70224.055664  -70255.343262  103302.891357 -70224.055664   62.500000 -70255.343262   0.025146   31.262451        0.000000     3.0    -70258.443359         False          False   False
7  -70224.055664  -70224.080811  103387.266357 -70224.055664   31.250000 -70224.080811   0.025146    0.000000      -15.625000     2.0    -70258.443359         False          False   False
8  -70208.430664  -70208.455811  103471.641113 -70208.430664   15.625000 -70208.455811   0.025146    0.000000      -15.625244     1.0    -70258.443359         False          False   False
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=0, buffer=608051/2048.[0m
[08/15 14:39:55]  --------------------------------------------------------------------------------
[08/15 14:39:55]  Iteration: 274 (61 solution, 212 counterexamples)
[08/15 14:40:14]  Generator returned sat in 12.975230 secs.
[08/15 14:40:15]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:40:17]  Verifer returned unsat in 2.073780 secs.
[08/15 14:40:17]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:40:17]  --------------------------------------------------------------------------------
[08/15 14:40:17]  Iteration: 275 (62 solution, 212 counterexamples)
[08/15 14:40:36]  Generator returned sat in 11.767563 secs.
[08/15 14:40:36]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:40:39]  Verifer returned unsat in 2.594707 secs.
[08/15 14:40:39]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:40:39]  --------------------------------------------------------------------------------
[08/15 14:40:39]  Iteration: 276 (63 solution, 212 counterexamples)
[08/15 14:41:04]  Generator returned sat in 18.558007 secs.
[08/15 14:41:05]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:41:07]  Verifer returned unsat in 2.383145 secs.
[08/15 14:41:07]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:41:07]  --------------------------------------------------------------------------------
[08/15 14:41:07]  Iteration: 277 (64 solution, 212 counterexamples)
[08/15 14:41:39]  Generator returned sat in 24.984133 secs.
[08/15 14:41:40]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:41:40]  Verifer returned unsat in 0.473988 secs.
[08/15 14:41:40]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:41:40]  --------------------------------------------------------------------------------
[08/15 14:41:40]  Iteration: 278 (65 solution, 212 counterexamples)
[08/15 14:42:29]  Generator returned sat in 41.967189 secs.
[08/15 14:42:29]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:42:31]  Improved gap from 0.2 to 23.4375
[08/15 14:42:32]  Improved number of small numbers from 59 to 84 out of a max of 114
[08/15 14:42:32]  Verifer returned sat in 2.660944 secs.
[08/15 14:42:32]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f  mode_f
0  -72502.135742  -72549.610840  103983.743896 -72502.135742    0.100098 -72549.610840        0.0  47.475098        0.100059     2.0    -72549.610840            -1             -1   False
1  -72502.135742  -72502.235713  104060.306152 -72502.135742   47.475000 -72502.235713        0.0   0.099971      -23.337686     2.0    -72549.610840         False          False   False
2  -72468.923213  -72469.023193  104107.581543 -72468.923213   33.312500 -72469.023193        0.0   0.099980      -42.849766     1.0    -72468.923213         False          False   False
3  -72402.635742  -72426.073242  104184.143809 -72402.635742   66.387451 -72426.073242        0.0  23.437500       -0.000029     1.0    -72468.923213         False          False   False
4  -72302.535645  -72302.635713  104184.143809 -72302.535645  123.537598 -72302.635713        0.0   0.100068        0.100068     1.0    -72468.923213         False          False   False
5  -72103.035713  -72302.435547  104184.143809 -72103.035713  199.600000 -72302.435547       99.4  99.999834        0.200000     1.0    -72468.923213         False          False   False
6  -72103.035713  -72202.635713  104260.706299 -72103.035713   99.800000 -72202.635713       99.4   0.200000      -23.237510     2.0    -72468.923213         False          False    True
7  -72053.335713  -72179.197998  104334.243809 -72053.335713   49.900000 -72179.197998       99.4  26.462285        0.000000     1.0    -72468.923213         False          False    True
8  -72053.335713  -72152.735713  104334.243896 -72053.335713   24.950000 -72152.735713       99.4   0.000000      -99.999912     2.0    -72468.923213         False          False    True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=1, buffer=1/5.[0m
[08/15 14:42:33]  --------------------------------------------------------------------------------
[08/15 14:42:33]  Iteration: 279 (65 solution, 213 counterexamples)
[08/15 14:43:22]  Generator returned sat in 42.141759 secs.
[08/15 14:43:22]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:43:28]  Improved gap from 0.0 to 1.5625
[08/15 14:43:29]  Improved number of small numbers from 59 to 72 out of a max of 114
[08/15 14:43:29]  Verifer returned sat in 6.850711 secs.
[08/15 14:43:29]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t    cwnd_0,t   service_0,t  losts_0,t    queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -72490.608154  -72503.209719  103999.905029 -72490.608154    0.034801 -72503.209719   0.000000  12.601564       12.601421     4.0    -72503.209719            -1             -1     -1
1  -72490.573355  -72490.573486  104085.706309 -72490.573355   12.636364 -72490.573486   0.000000   0.000131       -1.562500     1.0    -72503.209719         False           True  False
2  -72389.045654  -72389.045656  104085.706309 -72389.045654  101.527832 -72389.045656   0.000000   0.000002       -0.034799     1.0    -72503.209719         False          False  False
3  -72387.448355  -72389.010855  104184.143809 -72387.448355    1.597301 -72389.010855   0.000000   1.562500        0.000000     1.0    -72387.448355         False          False  False
4  -72274.811991  -72343.453327  104184.143809 -72274.811991  114.198864 -72343.453327  12.566761  56.074574        0.069602     1.0    -72387.448355         False          False  False
5  -72272.787133  -72287.343952  104282.049316 -72272.787133   58.099432 -72287.343952  12.566761   1.990057       -0.000032     1.0    -72387.448355         False          False   True
6  -72194.876622  -72285.319094  104304.138672 -72194.876622   79.900568 -72285.319094  12.566761  77.875710       -0.000165     1.0    -72387.448355         False          False   True
7  -72180.956167  -72207.408582  104390.183594 -72180.956167   91.796165 -72207.408582  12.566761  13.885653       -0.034789     1.0    -72387.448355         False          False   True
8  -72080.921366  -72193.488037  104390.183594 -72080.921366  113.920455 -72193.488037  12.566761  99.999909        0.000012     1.0    -72387.448355         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=False, ramp_down_bq=True, total_losses=1, buffer=49/704.[0m
[08/15 14:43:30]  --------------------------------------------------------------------------------
[08/15 14:43:30]  Iteration: 280 (65 solution, 214 counterexamples)
[08/15 14:44:14]  Generator returned sat in 37.188699 secs.
[08/15 14:44:14]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:44:15]  Verifer returned unsat in 0.461590 secs.
[08/15 14:44:15]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:44:15]  --------------------------------------------------------------------------------
[08/15 14:44:15]  Iteration: 281 (66 solution, 214 counterexamples)
[08/15 14:44:46]  Generator returned sat in 24.357986 secs.
[08/15 14:44:47]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:44:48]  Improved gap from 0.0 to 23.4375
[08/15 14:44:49]  Improved number of small numbers from 67 to 72 out of a max of 114
[08/15 14:44:49]  Verifer returned sat in 2.397027 secs.
[08/15 14:44:49]  Counter example: 
[93m   tot_arrival_t  tot_service_t       wasted_t   arrival_0,t  cwnd_0,t   service_0,t  losts_0,t     queue_t  bottle_queue_t  qdelay  last_decrease_f this_decrease exceed_queue_f mode_f
0  -72543.663330  -72743.563327  104282.049316 -72543.663330    0.1000 -72743.563327      0.000  199.899996       99.899996     8.0    -72743.563327            -1             -1     -1
1  -71990.163327  -72543.563327  104282.049316 -71990.163327  753.4000 -72543.563327    553.200    0.200000        0.200000     1.0    -72743.563327         False           True  False
2  -71237.063327  -72443.563327  104282.049316 -71237.063327  753.3000 -72443.563327   1206.300    0.200000        0.200000     1.0    -72443.363327         False          False   True
3  -70484.063327  -72443.263327  104282.049316 -70484.063327  753.2000 -72443.263327   1859.300   99.900000        0.200000     1.0    -72343.363327         False          False   True
4  -70207.363327  -72246.088327  104282.049316 -70207.363327  376.6000 -72246.088327   2036.000    2.725000        0.200000     1.0    -72343.363327         False          False   True
5  -70021.788327  -72213.875827  104282.049316 -70021.788327  188.3000 -72213.875827   2121.575   70.512500        0.200000     1.0    -72343.363327         False          False   True
6  -69998.150827  -72143.263327  104358.211670 -69998.150827   94.1500 -72143.263327   2121.575   23.537500       -0.000146     1.0    -72343.363327         False          False   True
7  -69974.613327  -72119.625827  104434.674316 -69974.613327   47.0750 -72119.625827   2121.575   23.437500        0.000000     1.0    -72343.363327         False          False   True
8  -69974.513327  -72096.188232  104434.674316 -69974.513327   23.5375 -72096.188232   2121.575    0.099906      -99.900000     1.0    -72343.363327         False          False   True
high_util=False, low_loss=True, low_delay=True, ramp_up=False, ramp_down_cwnd=True, ramp_down_q=True, ramp_down_bq=True, total_losses=2, buffer=1/5.[0m
[08/15 14:44:50]  --------------------------------------------------------------------------------
[08/15 14:44:50]  Iteration: 282 (66 solution, 215 counterexamples)
[08/15 14:45:50]  Generator returned sat in 53.299139 secs.
[08/15 14:45:50]  Candidate solution: 
[1m[94mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:45:54]  Verifer returned unsat in 3.867546 secs.
[08/15 14:45:54]  Proved solution: 
[1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:45:54]  --------------------------------------------------------------------------------
[08/15 14:45:54]  Iteration: 283 (67 solution, 215 counterexamples)
[08/15 14:46:07]  Generator returned unsat in 5.827724 secs.
[08/15 14:46:07]  [96mNo more solutions found[0m
[08/15 14:46:07]  Final solutions:
[08/15 14:46:07]  0: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  1: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  2: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  3: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  4: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  5: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  6: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  7: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  8: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  9: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  10: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  11: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  12: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  13: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  14: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  15: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  16: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  17: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  18: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  19: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  20: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  21: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  22: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  23: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  24: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  25: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  26: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  27: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  28: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  29: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  30: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  31: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  32: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  33: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  34: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  35: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  36: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  37: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  38: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  39: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  40: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  41: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  42: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  43: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  44: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  45: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  46: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  47: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  48: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  49: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  50: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  51: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  52: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  53: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  54: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  55: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][8]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  56: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  57: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  58: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][2]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  59: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  60: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  61: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][1]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  62: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][5]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  63: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][6]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  64: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 1)
	else:
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 1)
else:
	c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 1/2(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][3]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  65: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + 0)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][7]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  66: [1m[92mif(mode_f[0][t]):
	if(Ld_f[0][t] > Ld_f[0][t-1]):
		c_f[0][t] = max(0.01, 1/2v.c_f[0][t-1] + 0(S_f[0][t-1]-S_f[0][t-4]) + -1)
	else:
		c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)
else:
	c_f[0][t] = max(0.01, 0v.c_f[0][t-1] + 1(S_f[0][t-1]-S_f[0][t-4]) + 0)

if(Ld_f[0][t] > Ld_f[0][t-1]):
	mode[0][t] = True
elif(qbound[t-1][4]):
	mode[0][t] = False
else:
	mode[0][t] = mode[0][t-1][0m
[08/15 14:46:07]  Took 6979.449491 secs.
